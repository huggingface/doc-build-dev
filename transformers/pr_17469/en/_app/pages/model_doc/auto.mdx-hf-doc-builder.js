import{S as nWt,i as sWt,s as lWt,e as a,k as l,w as F,t as o,M as iWt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as dWt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Att}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function cWt($){let g,v,p,m,_,d,h,Eo,Li,Rf,st,yi,xi,aL,Pf,Oe,Qe,$i,Bn,nL,In,Nn,sL,ki,qn,lL,Si,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Li=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),aL=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),$i=a("code"),Bn=o("NewModel"),nL=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),sL=o(`, make sure its
`),ki=a("code"),qn=o("config_class"),lL=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var qS=s(p);m=r(qS,"NewModelConfig"),qS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),Eo=r(Ae,`, make sure its
`),Li=n(Ae,"CODE",{});var jS=s(Li);Rf=r(jS,"model_type"),jS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),yi=n(Ae,"CODE",{});var DS=s(yi);xi=r(DS,'"new-model"'),DS.forEach(t),aL=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),$i=n(Co,"CODE",{});var Ra=s($i);Bn=r(Ra,"NewModel"),Ra.forEach(t),nL=r(Co," is a subclass of "),In=n(Co,"A",{href:!0});var GS=s(In);Nn=r(GS,"PreTrainedModel"),GS.forEach(t),sL=r(Co,`, make sure its
`),ki=n(Co,"CODE",{});var If=s(ki);qn=r(If,"config_class"),If.forEach(t),lL=r(Co,` attribute is set to the same class you use when registering the model (here
`),Si=n(Co,"CODE",{});var OS=s(Si);Bf=r(OS,"NewModelConfig"),OS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(In,"href","/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Li),e(Li,Rf),e(g,st),e(g,yi),e(yi,xi),e(g,aL),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,$i),e($i,Bn),e(Oe,nL),e(Oe,In),e(In,Nn),e(Oe,sL),e(Oe,ki),e(ki,qn),e(Oe,lL),e(Oe,Si),e(Si,Bf),e(Oe,Sa)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_,d,h,Eo,Li,Rf,st,yi,xi,aL,Pf,Oe,Qe,$i,Bn,nL,In,Nn,sL,ki,qn,lL,Si,Bf,Sa,We,Ae,qS,Ri,jS,DS,Co,Ra,GS,If,OS,EHe,iXe,Pi,Nf,yae,iL,CHe,xae,wHe,dXe,jn,AHe,$ae,LHe,yHe,kae,xHe,$He,cXe,dL,fXe,VS,kHe,mXe,qf,gXe,Bi,jf,Sae,cL,SHe,Rae,RHe,hXe,wo,fL,PHe,mL,BHe,XS,IHe,NHe,qHe,gL,jHe,Pae,DHe,GHe,OHe,Lr,hL,VHe,Bae,XHe,zHe,Ii,QHe,Iae,WHe,HHe,Nae,UHe,JHe,YHe,A,Df,qae,KHe,ZHe,zS,eUe,oUe,rUe,Gf,jae,tUe,aUe,QS,nUe,sUe,lUe,Of,Dae,iUe,dUe,WS,cUe,fUe,mUe,Vf,Gae,gUe,hUe,HS,pUe,_Ue,uUe,Xf,Oae,bUe,vUe,US,FUe,TUe,MUe,zf,Vae,EUe,CUe,JS,wUe,AUe,LUe,Qf,Xae,yUe,xUe,YS,$Ue,kUe,SUe,Wf,zae,RUe,PUe,KS,BUe,IUe,NUe,Hf,Qae,qUe,jUe,ZS,DUe,GUe,OUe,Uf,Wae,VUe,XUe,eR,zUe,QUe,WUe,Jf,Hae,HUe,UUe,oR,JUe,YUe,KUe,Yf,Uae,ZUe,eJe,rR,oJe,rJe,tJe,Kf,Jae,aJe,nJe,tR,sJe,lJe,iJe,Zf,Yae,dJe,cJe,aR,fJe,mJe,gJe,em,Kae,hJe,pJe,nR,_Je,uJe,bJe,om,Zae,vJe,FJe,sR,TJe,MJe,EJe,rm,ene,CJe,wJe,lR,AJe,LJe,yJe,tm,one,xJe,$Je,iR,kJe,SJe,RJe,am,rne,PJe,BJe,dR,IJe,NJe,qJe,nm,tne,jJe,DJe,cR,GJe,OJe,VJe,sm,ane,XJe,zJe,fR,QJe,WJe,HJe,lm,nne,UJe,JJe,mR,YJe,KJe,ZJe,im,sne,eYe,oYe,gR,rYe,tYe,aYe,dm,lne,nYe,sYe,hR,lYe,iYe,dYe,cm,ine,cYe,fYe,pR,mYe,gYe,hYe,fm,dne,pYe,_Ye,_R,uYe,bYe,vYe,mm,cne,FYe,TYe,uR,MYe,EYe,CYe,gm,fne,wYe,AYe,bR,LYe,yYe,xYe,hm,mne,$Ye,kYe,vR,SYe,RYe,PYe,pm,gne,BYe,IYe,FR,NYe,qYe,jYe,_m,hne,DYe,GYe,TR,OYe,VYe,XYe,um,pne,zYe,QYe,MR,WYe,HYe,UYe,bm,_ne,JYe,YYe,ER,KYe,ZYe,eKe,vm,une,oKe,rKe,CR,tKe,aKe,nKe,Fm,bne,sKe,lKe,wR,iKe,dKe,cKe,Tm,vne,fKe,mKe,AR,gKe,hKe,pKe,Mm,Fne,_Ke,uKe,LR,bKe,vKe,FKe,Em,Tne,TKe,MKe,yR,EKe,CKe,wKe,Cm,Mne,AKe,LKe,xR,yKe,xKe,$Ke,wm,Ene,kKe,SKe,$R,RKe,PKe,BKe,Am,Cne,IKe,NKe,kR,qKe,jKe,DKe,Lm,wne,GKe,OKe,SR,VKe,XKe,zKe,ym,Ane,QKe,WKe,RR,HKe,UKe,JKe,xm,Lne,YKe,KKe,PR,ZKe,eZe,oZe,$m,yne,rZe,tZe,BR,aZe,nZe,sZe,km,xne,lZe,iZe,IR,dZe,cZe,fZe,Sm,$ne,mZe,gZe,NR,hZe,pZe,_Ze,Rm,kne,uZe,bZe,qR,vZe,FZe,TZe,Pm,Sne,MZe,EZe,jR,CZe,wZe,AZe,Bm,Rne,LZe,yZe,DR,xZe,$Ze,kZe,Im,Pne,SZe,RZe,GR,PZe,BZe,IZe,Nm,Bne,NZe,qZe,OR,jZe,DZe,GZe,qm,Ine,OZe,VZe,VR,XZe,zZe,QZe,jm,Nne,WZe,HZe,XR,UZe,JZe,YZe,Dm,qne,KZe,ZZe,zR,eeo,oeo,reo,Gm,jne,teo,aeo,QR,neo,seo,leo,Om,Dne,ieo,deo,WR,ceo,feo,meo,Vm,Gne,geo,heo,HR,peo,_eo,ueo,Xm,One,beo,veo,UR,Feo,Teo,Meo,zm,Vne,Eeo,Ceo,JR,weo,Aeo,Leo,Qm,Xne,yeo,xeo,YR,$eo,keo,Seo,Wm,zne,Reo,Peo,KR,Beo,Ieo,Neo,Hm,Qne,qeo,jeo,ZR,Deo,Geo,Oeo,Um,Wne,Veo,Xeo,eP,zeo,Qeo,Weo,Jm,Hne,Heo,Ueo,oP,Jeo,Yeo,Keo,Ym,Une,Zeo,eoo,rP,ooo,roo,too,Km,Jne,aoo,noo,tP,soo,loo,ioo,Zm,Yne,doo,coo,aP,foo,moo,goo,eg,Kne,hoo,poo,nP,_oo,uoo,boo,og,Zne,voo,Foo,sP,Too,Moo,Eoo,rg,ese,Coo,woo,lP,Aoo,Loo,yoo,tg,ose,xoo,$oo,iP,koo,Soo,Roo,ag,rse,Poo,Boo,dP,Ioo,Noo,qoo,ng,tse,joo,Doo,cP,Goo,Ooo,Voo,sg,ase,Xoo,zoo,fP,Qoo,Woo,Hoo,lg,nse,Uoo,Joo,mP,Yoo,Koo,Zoo,ig,sse,ero,oro,gP,rro,tro,aro,dg,lse,nro,sro,hP,lro,iro,dro,cg,ise,cro,fro,pP,mro,gro,hro,fg,dse,pro,_ro,_P,uro,bro,vro,mg,cse,Fro,Tro,uP,Mro,Ero,Cro,gg,fse,wro,Aro,bP,Lro,yro,xro,hg,mse,$ro,kro,vP,Sro,Rro,Pro,pg,gse,Bro,Iro,FP,Nro,qro,jro,_g,hse,Dro,Gro,TP,Oro,Vro,Xro,ug,pse,zro,Qro,MP,Wro,Hro,Uro,bg,_se,Jro,Yro,EP,Kro,Zro,eto,vg,use,oto,rto,CP,tto,ato,nto,Fg,bse,sto,lto,wP,ito,dto,cto,Tg,vse,fto,mto,AP,gto,hto,pto,Mg,Fse,_to,uto,LP,bto,vto,Fto,Eg,Tse,Tto,Mto,yP,Eto,Cto,wto,Cg,Mse,Ato,Lto,xP,yto,xto,$to,wg,Ese,kto,Sto,$P,Rto,Pto,Bto,Ag,Cse,Ito,Nto,kP,qto,jto,Dto,Lg,wse,Gto,Oto,SP,Vto,Xto,zto,yg,Ase,Qto,Wto,RP,Hto,Uto,Jto,xg,Lse,Yto,Kto,PP,Zto,eao,oao,$g,yse,rao,tao,BP,aao,nao,sao,kg,xse,lao,iao,IP,dao,cao,fao,Sg,$se,mao,gao,NP,hao,pao,_ao,Rg,kse,uao,bao,qP,vao,Fao,Tao,Pg,Sse,Mao,Eao,jP,Cao,wao,Aao,Bg,Rse,Lao,yao,DP,xao,$ao,kao,Ig,Pse,Sao,Rao,GP,Pao,Bao,Iao,Ng,Bse,Nao,qao,OP,jao,Dao,Gao,qg,Ise,Oao,Vao,VP,Xao,zao,Qao,jg,Nse,Wao,Hao,XP,Uao,Jao,Yao,Dg,qse,Kao,Zao,zP,eno,ono,rno,Gg,jse,tno,ano,QP,nno,sno,lno,Og,Dse,ino,dno,WP,cno,fno,mno,Vg,Gse,gno,hno,HP,pno,_no,uno,Xg,Ose,bno,vno,UP,Fno,Tno,Mno,zg,Vse,Eno,Cno,JP,wno,Ano,Lno,Qg,Xse,yno,xno,YP,$no,kno,Sno,Wg,zse,Rno,Pno,KP,Bno,Ino,Nno,Hg,Qse,qno,jno,ZP,Dno,Gno,Ono,Ug,Wse,Vno,Xno,eB,zno,Qno,Wno,Jg,Hse,Hno,Uno,oB,Jno,Yno,Kno,Yg,Zno,Kg,pL,eso,Use,oso,pXe,Ni,Zg,Jse,_L,rso,Yse,tso,_Xe,Ao,uL,aso,bL,nso,rB,sso,lso,iso,vL,dso,Kse,cso,fso,mso,yr,FL,gso,Zse,hso,pso,Pa,_so,ele,uso,bso,ole,vso,Fso,rle,Tso,Mso,Eso,k,Dn,tle,Cso,wso,tB,Aso,Lso,aB,yso,xso,$so,Gn,ale,kso,Sso,nB,Rso,Pso,sB,Bso,Iso,Nso,On,nle,qso,jso,lB,Dso,Gso,iB,Oso,Vso,Xso,eh,sle,zso,Qso,dB,Wso,Hso,Uso,Vn,lle,Jso,Yso,cB,Kso,Zso,fB,elo,olo,rlo,oh,ile,tlo,alo,mB,nlo,slo,llo,rh,dle,ilo,dlo,gB,clo,flo,mlo,th,cle,glo,hlo,hB,plo,_lo,ulo,Xn,fle,blo,vlo,pB,Flo,Tlo,_B,Mlo,Elo,Clo,zn,mle,wlo,Alo,uB,Llo,ylo,bB,xlo,$lo,klo,Qn,gle,Slo,Rlo,vB,Plo,Blo,FB,Ilo,Nlo,qlo,ah,hle,jlo,Dlo,TB,Glo,Olo,Vlo,nh,ple,Xlo,zlo,MB,Qlo,Wlo,Hlo,sh,_le,Ulo,Jlo,EB,Ylo,Klo,Zlo,Wn,ule,eio,oio,CB,rio,tio,wB,aio,nio,sio,lh,ble,lio,iio,AB,dio,cio,fio,Hn,vle,mio,gio,LB,hio,pio,yB,_io,uio,bio,Un,Fle,vio,Fio,xB,Tio,Mio,$B,Eio,Cio,wio,Jn,Tle,Aio,Lio,kB,yio,xio,SB,$io,kio,Sio,Yn,Mle,Rio,Pio,RB,Bio,Iio,PB,Nio,qio,jio,ih,Ele,Dio,Gio,BB,Oio,Vio,Xio,Kn,Cle,zio,Qio,IB,Wio,Hio,NB,Uio,Jio,Yio,Zn,wle,Kio,Zio,qB,edo,odo,jB,rdo,tdo,ado,es,Ale,ndo,sdo,DB,ldo,ido,GB,ddo,cdo,fdo,os,Lle,mdo,gdo,OB,hdo,pdo,VB,_do,udo,bdo,rs,yle,vdo,Fdo,XB,Tdo,Mdo,zB,Edo,Cdo,wdo,ts,xle,Ado,Ldo,QB,ydo,xdo,WB,$do,kdo,Sdo,dh,$le,Rdo,Pdo,HB,Bdo,Ido,Ndo,as,kle,qdo,jdo,UB,Ddo,Gdo,JB,Odo,Vdo,Xdo,ch,Sle,zdo,Qdo,YB,Wdo,Hdo,Udo,ns,Rle,Jdo,Ydo,KB,Kdo,Zdo,ZB,eco,oco,rco,ss,Ple,tco,aco,eI,nco,sco,oI,lco,ico,dco,ls,Ble,cco,fco,rI,mco,gco,tI,hco,pco,_co,fh,Ile,uco,bco,aI,vco,Fco,Tco,is,Nle,Mco,Eco,nI,Cco,wco,sI,Aco,Lco,yco,ds,qle,xco,$co,lI,kco,Sco,iI,Rco,Pco,Bco,cs,jle,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,mh,Dle,Vco,Xco,fI,zco,Qco,Wco,fs,Gle,Hco,Uco,mI,Jco,Yco,gI,Kco,Zco,efo,ms,Ole,ofo,rfo,hI,tfo,afo,pI,nfo,sfo,lfo,gs,Vle,ifo,dfo,_I,cfo,ffo,uI,mfo,gfo,hfo,hs,Xle,pfo,_fo,bI,ufo,bfo,vI,vfo,Ffo,Tfo,ps,zle,Mfo,Efo,FI,Cfo,wfo,TI,Afo,Lfo,yfo,_s,Qle,xfo,$fo,MI,kfo,Sfo,EI,Rfo,Pfo,Bfo,us,Wle,Ifo,Nfo,CI,qfo,jfo,wI,Dfo,Gfo,Ofo,bs,Hle,Vfo,Xfo,AI,zfo,Qfo,LI,Wfo,Hfo,Ufo,gh,Ule,Jfo,Yfo,yI,Kfo,Zfo,emo,vs,Jle,omo,rmo,xI,tmo,amo,$I,nmo,smo,lmo,hh,Yle,imo,dmo,kI,cmo,fmo,mmo,ph,Kle,gmo,hmo,SI,pmo,_mo,umo,Fs,Zle,bmo,vmo,RI,Fmo,Tmo,PI,Mmo,Emo,Cmo,Ts,eie,wmo,Amo,BI,Lmo,ymo,II,xmo,$mo,kmo,Ms,oie,Smo,Rmo,NI,Pmo,Bmo,qI,Imo,Nmo,qmo,_h,rie,jmo,Dmo,jI,Gmo,Omo,Vmo,Es,tie,Xmo,zmo,DI,Qmo,Wmo,GI,Hmo,Umo,Jmo,Cs,aie,Ymo,Kmo,OI,Zmo,ego,VI,ogo,rgo,tgo,ws,nie,ago,ngo,XI,sgo,lgo,zI,igo,dgo,cgo,As,sie,fgo,mgo,QI,ggo,hgo,WI,pgo,_go,ugo,Ls,lie,bgo,vgo,HI,Fgo,Tgo,UI,Mgo,Ego,Cgo,ys,iie,wgo,Ago,JI,Lgo,ygo,YI,xgo,$go,kgo,xs,die,Sgo,Rgo,KI,Pgo,Bgo,ZI,Igo,Ngo,qgo,uh,cie,jgo,Dgo,eN,Ggo,Ogo,Vgo,$s,fie,Xgo,zgo,oN,Qgo,Wgo,rN,Hgo,Ugo,Jgo,bh,mie,Ygo,Kgo,tN,Zgo,eho,oho,vh,gie,rho,tho,aN,aho,nho,sho,Fh,hie,lho,iho,nN,dho,cho,fho,Th,pie,mho,gho,sN,hho,pho,_ho,ks,_ie,uho,bho,lN,vho,Fho,iN,Tho,Mho,Eho,Mh,uie,Cho,who,dN,Aho,Lho,yho,Ss,bie,xho,$ho,cN,kho,Sho,fN,Rho,Pho,Bho,Rs,vie,Iho,Nho,mN,qho,jho,gN,Dho,Gho,Oho,Ps,Fie,Vho,Xho,hN,zho,Qho,pN,Who,Hho,Uho,Bs,Tie,Jho,Yho,_N,Kho,Zho,uN,epo,opo,rpo,Is,Mie,tpo,apo,bN,npo,spo,vN,lpo,ipo,dpo,Ns,Eie,cpo,fpo,FN,mpo,gpo,TN,hpo,ppo,_po,Eh,Cie,upo,bpo,MN,vpo,Fpo,Tpo,Ch,wie,Mpo,Epo,EN,Cpo,wpo,Apo,qs,Aie,Lpo,ypo,CN,xpo,$po,wN,kpo,Spo,Rpo,js,Lie,Ppo,Bpo,AN,Ipo,Npo,LN,qpo,jpo,Dpo,Ds,yie,Gpo,Opo,yN,Vpo,Xpo,xN,zpo,Qpo,Wpo,wh,xie,Hpo,Upo,$N,Jpo,Ypo,Kpo,Ah,$ie,Zpo,e_o,kN,o_o,r_o,t_o,Lh,kie,a_o,n_o,SN,s_o,l_o,i_o,Gs,Sie,d_o,c_o,RN,f_o,m_o,PN,g_o,h_o,p_o,Os,Rie,__o,u_o,BN,b_o,v_o,IN,F_o,T_o,M_o,yh,Pie,E_o,C_o,NN,w_o,A_o,L_o,xh,Bie,y_o,x_o,qN,$_o,k_o,S_o,$h,Iie,R_o,P_o,jN,B_o,I_o,N_o,Vs,Nie,q_o,j_o,DN,D_o,G_o,GN,O_o,V_o,X_o,kh,qie,z_o,Q_o,ON,W_o,H_o,U_o,Sh,jie,J_o,Y_o,VN,K_o,Z_o,euo,Xs,Die,ouo,ruo,XN,tuo,auo,zN,nuo,suo,luo,zs,Gie,iuo,duo,QN,cuo,fuo,WN,muo,guo,huo,Qs,Oie,puo,_uo,HN,uuo,buo,UN,vuo,Fuo,Tuo,Ws,Vie,Muo,Euo,JN,Cuo,wuo,YN,Auo,Luo,yuo,Rh,xuo,Ph,TL,$uo,Xie,kuo,uXe,qi,Bh,zie,ML,Suo,Qie,Ruo,bXe,Lo,EL,Puo,CL,Buo,KN,Iuo,Nuo,quo,wL,juo,Wie,Duo,Guo,Ouo,He,AL,Vuo,Hie,Xuo,zuo,Ba,Quo,Uie,Wuo,Huo,Jie,Uuo,Juo,Yie,Yuo,Kuo,Zuo,J,Ih,Kie,e1o,o1o,ZN,r1o,t1o,a1o,Nh,Zie,n1o,s1o,eq,l1o,i1o,d1o,qh,ede,c1o,f1o,oq,m1o,g1o,h1o,jh,ode,p1o,_1o,rq,u1o,b1o,v1o,Dh,rde,F1o,T1o,tq,M1o,E1o,C1o,Gh,tde,w1o,A1o,aq,L1o,y1o,x1o,Oh,ade,$1o,k1o,nq,S1o,R1o,P1o,Vh,nde,B1o,I1o,sq,N1o,q1o,j1o,Xh,sde,D1o,G1o,lq,O1o,V1o,X1o,zh,lde,z1o,Q1o,iq,W1o,H1o,U1o,Qh,ide,J1o,Y1o,dq,K1o,Z1o,e2o,Wh,dde,o2o,r2o,cq,t2o,a2o,n2o,Hh,cde,s2o,l2o,fq,i2o,d2o,c2o,Uh,fde,f2o,m2o,mq,g2o,h2o,p2o,Jh,mde,_2o,u2o,gq,b2o,v2o,F2o,Yh,gde,T2o,M2o,hq,E2o,C2o,w2o,Kh,hde,A2o,L2o,pq,y2o,x2o,$2o,Zh,pde,k2o,S2o,_q,R2o,P2o,B2o,ep,_de,I2o,N2o,uq,q2o,j2o,D2o,op,ude,G2o,O2o,bq,V2o,X2o,z2o,rp,bde,Q2o,W2o,vq,H2o,U2o,J2o,tp,vde,Y2o,K2o,Fq,Z2o,e4o,o4o,ap,Fde,r4o,t4o,Tq,a4o,n4o,s4o,np,Tde,l4o,i4o,Mq,d4o,c4o,f4o,sp,Mde,m4o,g4o,Eq,h4o,p4o,_4o,lp,Ede,u4o,b4o,Cq,v4o,F4o,T4o,ip,Cde,M4o,E4o,wq,C4o,w4o,A4o,dp,wde,L4o,y4o,Aq,x4o,$4o,k4o,cp,Ade,S4o,R4o,Lq,P4o,B4o,I4o,fp,Lde,N4o,q4o,yq,j4o,D4o,G4o,mp,yde,O4o,V4o,xq,X4o,z4o,Q4o,gp,xde,W4o,H4o,$q,U4o,J4o,Y4o,hp,$de,K4o,Z4o,kq,ebo,obo,rbo,pp,kde,tbo,abo,Sq,nbo,sbo,lbo,_p,Sde,ibo,dbo,Rq,cbo,fbo,mbo,up,gbo,bp,hbo,vp,LL,pbo,Rde,_bo,vXe,ji,Fp,Pde,yL,ubo,Bde,bbo,FXe,yo,xL,vbo,$L,Fbo,Pq,Tbo,Mbo,Ebo,kL,Cbo,Ide,wbo,Abo,Lbo,Ue,SL,ybo,Nde,xbo,$bo,Di,kbo,qde,Sbo,Rbo,jde,Pbo,Bbo,Ibo,he,Tp,Dde,Nbo,qbo,Bq,jbo,Dbo,Gbo,Mp,Gde,Obo,Vbo,Ode,Xbo,zbo,Qbo,Ep,Vde,Wbo,Hbo,Iq,Ubo,Jbo,Ybo,Cp,Xde,Kbo,Zbo,Nq,evo,ovo,rvo,wp,zde,tvo,avo,qq,nvo,svo,lvo,Ap,Qde,ivo,dvo,jq,cvo,fvo,mvo,Lp,Wde,gvo,hvo,Dq,pvo,_vo,uvo,yp,Hde,bvo,vvo,Gq,Fvo,Tvo,Mvo,xp,Ude,Evo,Cvo,Oq,wvo,Avo,Lvo,$p,Jde,yvo,xvo,Vq,$vo,kvo,Svo,kp,Yde,Rvo,Pvo,Xq,Bvo,Ivo,Nvo,Sp,Kde,qvo,jvo,zq,Dvo,Gvo,Ovo,Rp,Zde,Vvo,Xvo,Qq,zvo,Qvo,Wvo,Pp,ece,Hvo,Uvo,Wq,Jvo,Yvo,Kvo,Bp,oce,Zvo,eFo,Hq,oFo,rFo,tFo,Ip,rce,aFo,nFo,Uq,sFo,lFo,iFo,Np,tce,dFo,cFo,Jq,fFo,mFo,gFo,qp,ace,hFo,pFo,Yq,_Fo,uFo,bFo,jp,vFo,Dp,FFo,Gp,RL,TFo,nce,MFo,TXe,Gi,Op,sce,PL,EFo,lce,CFo,MXe,xo,BL,wFo,Oi,AFo,Kq,LFo,yFo,Zq,xFo,$Fo,kFo,IL,SFo,ice,RFo,PFo,BFo,lt,NL,IFo,dce,NFo,qFo,Vi,jFo,cce,DFo,GFo,ej,OFo,VFo,XFo,Vp,zFo,Je,qL,QFo,fce,WFo,HFo,Ia,UFo,mce,JFo,YFo,gce,KFo,ZFo,hce,e6o,o6o,r6o,y,Xp,pce,t6o,a6o,oj,n6o,s6o,l6o,zp,_ce,i6o,d6o,rj,c6o,f6o,m6o,Qp,uce,g6o,h6o,tj,p6o,_6o,u6o,Wp,bce,b6o,v6o,aj,F6o,T6o,M6o,Hp,vce,E6o,C6o,nj,w6o,A6o,L6o,Up,Fce,y6o,x6o,sj,$6o,k6o,S6o,Jp,Tce,R6o,P6o,lj,B6o,I6o,N6o,Yp,Mce,q6o,j6o,ij,D6o,G6o,O6o,Kp,Ece,V6o,X6o,dj,z6o,Q6o,W6o,Zp,Cce,H6o,U6o,cj,J6o,Y6o,K6o,e_,wce,Z6o,eTo,fj,oTo,rTo,tTo,o_,Ace,aTo,nTo,mj,sTo,lTo,iTo,r_,Lce,dTo,cTo,gj,fTo,mTo,gTo,t_,yce,hTo,pTo,hj,_To,uTo,bTo,a_,xce,vTo,FTo,pj,TTo,MTo,ETo,n_,$ce,CTo,wTo,_j,ATo,LTo,yTo,s_,kce,xTo,$To,uj,kTo,STo,RTo,l_,Sce,PTo,BTo,bj,ITo,NTo,qTo,i_,Rce,jTo,DTo,vj,GTo,OTo,VTo,d_,Pce,XTo,zTo,Fj,QTo,WTo,HTo,c_,Bce,UTo,JTo,Tj,YTo,KTo,ZTo,f_,Ice,e7o,o7o,Mj,r7o,t7o,a7o,m_,Nce,n7o,s7o,Ej,l7o,i7o,d7o,g_,qce,c7o,f7o,Cj,m7o,g7o,h7o,h_,jce,p7o,_7o,wj,u7o,b7o,v7o,p_,Dce,F7o,T7o,Aj,M7o,E7o,C7o,__,Gce,w7o,A7o,Lj,L7o,y7o,x7o,u_,Oce,$7o,k7o,yj,S7o,R7o,P7o,b_,Vce,B7o,I7o,xj,N7o,q7o,j7o,v_,Xce,D7o,G7o,$j,O7o,V7o,X7o,F_,zce,z7o,Q7o,kj,W7o,H7o,U7o,T_,Qce,J7o,Y7o,Sj,K7o,Z7o,e9o,M_,Wce,o9o,r9o,Rj,t9o,a9o,n9o,E_,Hce,s9o,l9o,Pj,i9o,d9o,c9o,Hs,Uce,f9o,m9o,Bj,g9o,h9o,Ij,p9o,_9o,u9o,C_,Jce,b9o,v9o,Nj,F9o,T9o,M9o,w_,Yce,E9o,C9o,qj,w9o,A9o,L9o,A_,Kce,y9o,x9o,jj,$9o,k9o,S9o,L_,Zce,R9o,P9o,Dj,B9o,I9o,N9o,y_,efe,q9o,j9o,Gj,D9o,G9o,O9o,x_,ofe,V9o,X9o,Oj,z9o,Q9o,W9o,$_,rfe,H9o,U9o,Vj,J9o,Y9o,K9o,k_,tfe,Z9o,eMo,Xj,oMo,rMo,tMo,S_,afe,aMo,nMo,zj,sMo,lMo,iMo,R_,nfe,dMo,cMo,Qj,fMo,mMo,gMo,P_,sfe,hMo,pMo,Wj,_Mo,uMo,bMo,B_,lfe,vMo,FMo,Hj,TMo,MMo,EMo,I_,ife,CMo,wMo,Uj,AMo,LMo,yMo,N_,dfe,xMo,$Mo,Jj,kMo,SMo,RMo,q_,cfe,PMo,BMo,Yj,IMo,NMo,qMo,j_,ffe,jMo,DMo,Kj,GMo,OMo,VMo,D_,mfe,XMo,zMo,Zj,QMo,WMo,HMo,G_,gfe,UMo,JMo,eD,YMo,KMo,ZMo,O_,hfe,eEo,oEo,oD,rEo,tEo,aEo,V_,pfe,nEo,sEo,rD,lEo,iEo,dEo,X_,_fe,cEo,fEo,tD,mEo,gEo,hEo,z_,ufe,pEo,_Eo,aD,uEo,bEo,vEo,Q_,bfe,FEo,TEo,nD,MEo,EEo,CEo,W_,vfe,wEo,AEo,sD,LEo,yEo,xEo,H_,Ffe,$Eo,kEo,lD,SEo,REo,PEo,U_,Tfe,BEo,IEo,iD,NEo,qEo,jEo,J_,Mfe,DEo,GEo,dD,OEo,VEo,XEo,Y_,Efe,zEo,QEo,cD,WEo,HEo,UEo,K_,Cfe,JEo,YEo,fD,KEo,ZEo,eCo,Z_,wfe,oCo,rCo,mD,tCo,aCo,nCo,eu,Afe,sCo,lCo,gD,iCo,dCo,cCo,ou,Lfe,fCo,mCo,hD,gCo,hCo,pCo,ru,yfe,_Co,uCo,pD,bCo,vCo,FCo,tu,xfe,TCo,MCo,_D,ECo,CCo,wCo,au,$fe,ACo,LCo,uD,yCo,xCo,$Co,nu,kfe,kCo,SCo,bD,RCo,PCo,BCo,su,Sfe,ICo,NCo,vD,qCo,jCo,DCo,lu,Rfe,GCo,OCo,FD,VCo,XCo,zCo,iu,Pfe,QCo,WCo,TD,HCo,UCo,JCo,du,Bfe,YCo,KCo,MD,ZCo,e3o,o3o,cu,Ife,r3o,t3o,ED,a3o,n3o,s3o,fu,Nfe,l3o,i3o,CD,d3o,c3o,f3o,mu,qfe,m3o,g3o,wD,h3o,p3o,_3o,gu,jfe,u3o,b3o,AD,v3o,F3o,T3o,hu,Dfe,M3o,E3o,LD,C3o,w3o,A3o,pu,Gfe,L3o,y3o,yD,x3o,$3o,k3o,_u,Ofe,S3o,R3o,xD,P3o,B3o,I3o,uu,Vfe,N3o,q3o,$D,j3o,D3o,G3o,bu,Xfe,O3o,V3o,kD,X3o,z3o,Q3o,vu,zfe,W3o,H3o,SD,U3o,J3o,Y3o,Fu,Qfe,K3o,Z3o,RD,e5o,o5o,r5o,Tu,Wfe,t5o,a5o,PD,n5o,s5o,l5o,Mu,Hfe,i5o,d5o,BD,c5o,f5o,m5o,Eu,Ufe,g5o,h5o,ID,p5o,_5o,u5o,Cu,Jfe,b5o,v5o,ND,F5o,T5o,M5o,wu,Yfe,E5o,C5o,qD,w5o,A5o,L5o,Au,Kfe,y5o,x5o,jD,$5o,k5o,S5o,Lu,Zfe,R5o,P5o,DD,B5o,I5o,N5o,yu,eme,q5o,j5o,GD,D5o,G5o,O5o,xu,ome,V5o,X5o,OD,z5o,Q5o,W5o,$u,rme,H5o,U5o,VD,J5o,Y5o,K5o,ku,tme,Z5o,e0o,XD,o0o,r0o,t0o,Su,ame,a0o,n0o,zD,s0o,l0o,i0o,Ru,nme,d0o,c0o,QD,f0o,m0o,g0o,Pu,sme,h0o,p0o,WD,_0o,u0o,b0o,Bu,lme,v0o,F0o,HD,T0o,M0o,E0o,Iu,ime,C0o,w0o,UD,A0o,L0o,y0o,Nu,dme,x0o,$0o,JD,k0o,S0o,R0o,qu,cme,P0o,B0o,YD,I0o,N0o,q0o,ju,fme,j0o,D0o,KD,G0o,O0o,V0o,Du,mme,X0o,z0o,ZD,Q0o,W0o,H0o,Gu,gme,U0o,J0o,eG,Y0o,K0o,Z0o,Ou,hme,ewo,owo,oG,rwo,two,awo,Vu,pme,nwo,swo,rG,lwo,iwo,dwo,Xu,_me,cwo,fwo,tG,mwo,gwo,hwo,zu,ume,pwo,_wo,aG,uwo,bwo,vwo,Qu,bme,Fwo,Two,nG,Mwo,Ewo,Cwo,Wu,wwo,vme,Awo,Lwo,Fme,ywo,xwo,Hu,EXe,Xi,Uu,Tme,jL,$wo,Mme,kwo,CXe,$o,DL,Swo,zi,Rwo,sG,Pwo,Bwo,lG,Iwo,Nwo,qwo,GL,jwo,Eme,Dwo,Gwo,Owo,it,OL,Vwo,Cme,Xwo,zwo,Qi,Qwo,wme,Wwo,Hwo,iG,Uwo,Jwo,Ywo,Ju,Kwo,Ye,VL,Zwo,Ame,eAo,oAo,Na,rAo,Lme,tAo,aAo,yme,nAo,sAo,xme,lAo,iAo,dAo,G,Yu,$me,cAo,fAo,dG,mAo,gAo,hAo,Ku,kme,pAo,_Ao,cG,uAo,bAo,vAo,Zu,Sme,FAo,TAo,fG,MAo,EAo,CAo,e1,Rme,wAo,AAo,mG,LAo,yAo,xAo,o1,Pme,$Ao,kAo,gG,SAo,RAo,PAo,r1,Bme,BAo,IAo,hG,NAo,qAo,jAo,t1,Ime,DAo,GAo,pG,OAo,VAo,XAo,a1,Nme,zAo,QAo,_G,WAo,HAo,UAo,n1,qme,JAo,YAo,uG,KAo,ZAo,eLo,s1,jme,oLo,rLo,bG,tLo,aLo,nLo,l1,Dme,sLo,lLo,vG,iLo,dLo,cLo,i1,Gme,fLo,mLo,FG,gLo,hLo,pLo,d1,Ome,_Lo,uLo,TG,bLo,vLo,FLo,c1,Vme,TLo,MLo,MG,ELo,CLo,wLo,f1,Xme,ALo,LLo,EG,yLo,xLo,$Lo,m1,zme,kLo,SLo,CG,RLo,PLo,BLo,g1,Qme,ILo,NLo,wG,qLo,jLo,DLo,h1,Wme,GLo,OLo,AG,VLo,XLo,zLo,p1,Hme,QLo,WLo,LG,HLo,ULo,JLo,_1,Ume,YLo,KLo,yG,ZLo,eyo,oyo,u1,Jme,ryo,tyo,xG,ayo,nyo,syo,b1,Yme,lyo,iyo,$G,dyo,cyo,fyo,v1,Kme,myo,gyo,kG,hyo,pyo,_yo,F1,Zme,uyo,byo,SG,vyo,Fyo,Tyo,T1,ege,Myo,Eyo,RG,Cyo,wyo,Ayo,M1,oge,Lyo,yyo,PG,xyo,$yo,kyo,E1,rge,Syo,Ryo,BG,Pyo,Byo,Iyo,C1,tge,Nyo,qyo,IG,jyo,Dyo,Gyo,w1,age,Oyo,Vyo,NG,Xyo,zyo,Qyo,A1,nge,Wyo,Hyo,qG,Uyo,Jyo,Yyo,L1,sge,Kyo,Zyo,jG,e8o,o8o,r8o,y1,lge,t8o,a8o,DG,n8o,s8o,l8o,x1,ige,i8o,d8o,GG,c8o,f8o,m8o,$1,dge,g8o,h8o,OG,p8o,_8o,u8o,k1,cge,b8o,v8o,VG,F8o,T8o,M8o,S1,fge,E8o,C8o,XG,w8o,A8o,L8o,R1,mge,y8o,x8o,zG,$8o,k8o,S8o,P1,gge,R8o,P8o,QG,B8o,I8o,N8o,B1,hge,q8o,j8o,WG,D8o,G8o,O8o,I1,pge,V8o,X8o,HG,z8o,Q8o,W8o,N1,_ge,H8o,U8o,UG,J8o,Y8o,K8o,q1,uge,Z8o,exo,JG,oxo,rxo,txo,j1,bge,axo,nxo,YG,sxo,lxo,ixo,D1,vge,dxo,cxo,KG,fxo,mxo,gxo,G1,Fge,hxo,pxo,ZG,_xo,uxo,bxo,O1,vxo,Tge,Fxo,Txo,Mge,Mxo,Exo,V1,wXe,Wi,X1,Ege,XL,Cxo,Cge,wxo,AXe,ko,zL,Axo,Hi,Lxo,eO,yxo,xxo,oO,$xo,kxo,Sxo,QL,Rxo,wge,Pxo,Bxo,Ixo,dt,WL,Nxo,Age,qxo,jxo,Ui,Dxo,Lge,Gxo,Oxo,rO,Vxo,Xxo,zxo,z1,Qxo,Ke,HL,Wxo,yge,Hxo,Uxo,qa,Jxo,xge,Yxo,Kxo,$ge,Zxo,e$o,kge,o$o,r$o,t$o,z,Q1,Sge,a$o,n$o,tO,s$o,l$o,i$o,W1,Rge,d$o,c$o,aO,f$o,m$o,g$o,H1,Pge,h$o,p$o,nO,_$o,u$o,b$o,U1,Bge,v$o,F$o,sO,T$o,M$o,E$o,J1,Ige,C$o,w$o,lO,A$o,L$o,y$o,Y1,Nge,x$o,$$o,iO,k$o,S$o,R$o,K1,qge,P$o,B$o,dO,I$o,N$o,q$o,Z1,jge,j$o,D$o,cO,G$o,O$o,V$o,e2,Dge,X$o,z$o,fO,Q$o,W$o,H$o,o2,Gge,U$o,J$o,mO,Y$o,K$o,Z$o,r2,Oge,eko,oko,gO,rko,tko,ako,t2,Vge,nko,sko,hO,lko,iko,dko,a2,Xge,cko,fko,pO,mko,gko,hko,n2,zge,pko,_ko,_O,uko,bko,vko,s2,Qge,Fko,Tko,uO,Mko,Eko,Cko,l2,Wge,wko,Ako,bO,Lko,yko,xko,i2,Hge,$ko,kko,vO,Sko,Rko,Pko,d2,Uge,Bko,Iko,FO,Nko,qko,jko,c2,Jge,Dko,Gko,TO,Oko,Vko,Xko,f2,Yge,zko,Qko,MO,Wko,Hko,Uko,m2,Kge,Jko,Yko,EO,Kko,Zko,eSo,g2,Zge,oSo,rSo,CO,tSo,aSo,nSo,h2,ehe,sSo,lSo,wO,iSo,dSo,cSo,p2,ohe,fSo,mSo,AO,gSo,hSo,pSo,_2,rhe,_So,uSo,LO,bSo,vSo,FSo,u2,the,TSo,MSo,yO,ESo,CSo,wSo,b2,ahe,ASo,LSo,xO,ySo,xSo,$So,v2,nhe,kSo,SSo,$O,RSo,PSo,BSo,F2,she,ISo,NSo,kO,qSo,jSo,DSo,T2,lhe,GSo,OSo,SO,VSo,XSo,zSo,M2,ihe,QSo,WSo,RO,HSo,USo,JSo,E2,dhe,YSo,KSo,PO,ZSo,eRo,oRo,C2,che,rRo,tRo,BO,aRo,nRo,sRo,w2,fhe,lRo,iRo,IO,dRo,cRo,fRo,A2,mhe,mRo,gRo,NO,hRo,pRo,_Ro,L2,ghe,uRo,bRo,qO,vRo,FRo,TRo,y2,hhe,MRo,ERo,jO,CRo,wRo,ARo,x2,phe,LRo,yRo,DO,xRo,$Ro,kRo,$2,_he,SRo,RRo,GO,PRo,BRo,IRo,k2,uhe,NRo,qRo,OO,jRo,DRo,GRo,S2,ORo,bhe,VRo,XRo,vhe,zRo,QRo,R2,LXe,Ji,P2,Fhe,UL,WRo,The,HRo,yXe,So,JL,URo,Yi,JRo,VO,YRo,KRo,XO,ZRo,ePo,oPo,YL,rPo,Mhe,tPo,aPo,nPo,ct,KL,sPo,Ehe,lPo,iPo,Ki,dPo,Che,cPo,fPo,zO,mPo,gPo,hPo,B2,pPo,Ze,ZL,_Po,whe,uPo,bPo,ja,vPo,Ahe,FPo,TPo,Lhe,MPo,EPo,yhe,CPo,wPo,APo,W,I2,xhe,LPo,yPo,QO,xPo,$Po,kPo,N2,$he,SPo,RPo,WO,PPo,BPo,IPo,q2,khe,NPo,qPo,HO,jPo,DPo,GPo,j2,She,OPo,VPo,UO,XPo,zPo,QPo,D2,Rhe,WPo,HPo,JO,UPo,JPo,YPo,G2,Phe,KPo,ZPo,YO,eBo,oBo,rBo,O2,Bhe,tBo,aBo,KO,nBo,sBo,lBo,V2,Ihe,iBo,dBo,ZO,cBo,fBo,mBo,X2,Nhe,gBo,hBo,eV,pBo,_Bo,uBo,z2,qhe,bBo,vBo,oV,FBo,TBo,MBo,Q2,jhe,EBo,CBo,rV,wBo,ABo,LBo,W2,Dhe,yBo,xBo,tV,$Bo,kBo,SBo,H2,Ghe,RBo,PBo,aV,BBo,IBo,NBo,U2,Ohe,qBo,jBo,nV,DBo,GBo,OBo,J2,Vhe,VBo,XBo,sV,zBo,QBo,WBo,Y2,Xhe,HBo,UBo,lV,JBo,YBo,KBo,K2,zhe,ZBo,eIo,iV,oIo,rIo,tIo,Z2,Qhe,aIo,nIo,dV,sIo,lIo,iIo,e4,Whe,dIo,cIo,cV,fIo,mIo,gIo,o4,Hhe,hIo,pIo,fV,_Io,uIo,bIo,r4,Uhe,vIo,FIo,mV,TIo,MIo,EIo,t4,Jhe,CIo,wIo,gV,AIo,LIo,yIo,a4,Yhe,xIo,$Io,hV,kIo,SIo,RIo,n4,Khe,PIo,BIo,pV,IIo,NIo,qIo,s4,Zhe,jIo,DIo,_V,GIo,OIo,VIo,l4,epe,XIo,zIo,uV,QIo,WIo,HIo,i4,ope,UIo,JIo,bV,YIo,KIo,ZIo,d4,rpe,eNo,oNo,vV,rNo,tNo,aNo,c4,tpe,nNo,sNo,FV,lNo,iNo,dNo,f4,ape,cNo,fNo,TV,mNo,gNo,hNo,m4,npe,pNo,_No,MV,uNo,bNo,vNo,g4,spe,FNo,TNo,EV,MNo,ENo,CNo,h4,lpe,wNo,ANo,CV,LNo,yNo,xNo,p4,ipe,$No,kNo,dpe,SNo,RNo,PNo,_4,cpe,BNo,INo,wV,NNo,qNo,jNo,u4,fpe,DNo,GNo,AV,ONo,VNo,XNo,b4,mpe,zNo,QNo,LV,WNo,HNo,UNo,v4,gpe,JNo,YNo,yV,KNo,ZNo,eqo,F4,oqo,hpe,rqo,tqo,ppe,aqo,nqo,T4,xXe,Zi,M4,_pe,ey,sqo,upe,lqo,$Xe,Ro,oy,iqo,ed,dqo,xV,cqo,fqo,$V,mqo,gqo,hqo,ry,pqo,bpe,_qo,uqo,bqo,ft,ty,vqo,vpe,Fqo,Tqo,od,Mqo,Fpe,Eqo,Cqo,kV,wqo,Aqo,Lqo,E4,yqo,eo,ay,xqo,Tpe,$qo,kqo,Da,Sqo,Mpe,Rqo,Pqo,Epe,Bqo,Iqo,Cpe,Nqo,qqo,jqo,pe,C4,wpe,Dqo,Gqo,SV,Oqo,Vqo,Xqo,w4,Ape,zqo,Qqo,RV,Wqo,Hqo,Uqo,A4,Lpe,Jqo,Yqo,PV,Kqo,Zqo,ejo,L4,ype,ojo,rjo,BV,tjo,ajo,njo,y4,xpe,sjo,ljo,IV,ijo,djo,cjo,x4,$pe,fjo,mjo,NV,gjo,hjo,pjo,$4,kpe,_jo,ujo,qV,bjo,vjo,Fjo,k4,Spe,Tjo,Mjo,jV,Ejo,Cjo,wjo,S4,Rpe,Ajo,Ljo,DV,yjo,xjo,$jo,R4,Ppe,kjo,Sjo,GV,Rjo,Pjo,Bjo,P4,Bpe,Ijo,Njo,OV,qjo,jjo,Djo,B4,Ipe,Gjo,Ojo,VV,Vjo,Xjo,zjo,I4,Npe,Qjo,Wjo,XV,Hjo,Ujo,Jjo,N4,qpe,Yjo,Kjo,zV,Zjo,eDo,oDo,q4,jpe,rDo,tDo,QV,aDo,nDo,sDo,j4,Dpe,lDo,iDo,WV,dDo,cDo,fDo,D4,Gpe,mDo,gDo,HV,hDo,pDo,_Do,G4,Ope,uDo,bDo,UV,vDo,FDo,TDo,O4,MDo,Vpe,EDo,CDo,Xpe,wDo,ADo,V4,kXe,rd,X4,zpe,ny,LDo,Qpe,yDo,SXe,Po,sy,xDo,td,$Do,JV,kDo,SDo,YV,RDo,PDo,BDo,ly,IDo,Wpe,NDo,qDo,jDo,mt,iy,DDo,Hpe,GDo,ODo,ad,VDo,Upe,XDo,zDo,KV,QDo,WDo,HDo,z4,UDo,oo,dy,JDo,Jpe,YDo,KDo,Ga,ZDo,Ype,eGo,oGo,Kpe,rGo,tGo,Zpe,aGo,nGo,sGo,N,Q4,e_e,lGo,iGo,ZV,dGo,cGo,fGo,W4,o_e,mGo,gGo,eX,hGo,pGo,_Go,H4,r_e,uGo,bGo,oX,vGo,FGo,TGo,U4,t_e,MGo,EGo,rX,CGo,wGo,AGo,J4,a_e,LGo,yGo,tX,xGo,$Go,kGo,Y4,n_e,SGo,RGo,aX,PGo,BGo,IGo,K4,s_e,NGo,qGo,nX,jGo,DGo,GGo,Z4,l_e,OGo,VGo,sX,XGo,zGo,QGo,eb,i_e,WGo,HGo,lX,UGo,JGo,YGo,ob,d_e,KGo,ZGo,iX,eOo,oOo,rOo,rb,c_e,tOo,aOo,dX,nOo,sOo,lOo,tb,f_e,iOo,dOo,cX,cOo,fOo,mOo,ab,m_e,gOo,hOo,fX,pOo,_Oo,uOo,nb,g_e,bOo,vOo,mX,FOo,TOo,MOo,sb,h_e,EOo,COo,gX,wOo,AOo,LOo,lb,p_e,yOo,xOo,hX,$Oo,kOo,SOo,ib,__e,ROo,POo,pX,BOo,IOo,NOo,db,u_e,qOo,jOo,_X,DOo,GOo,OOo,cb,b_e,VOo,XOo,uX,zOo,QOo,WOo,fb,v_e,HOo,UOo,bX,JOo,YOo,KOo,mb,F_e,ZOo,eVo,vX,oVo,rVo,tVo,gb,T_e,aVo,nVo,FX,sVo,lVo,iVo,hb,M_e,dVo,cVo,TX,fVo,mVo,gVo,pb,E_e,hVo,pVo,MX,_Vo,uVo,bVo,_b,C_e,vVo,FVo,EX,TVo,MVo,EVo,ub,w_e,CVo,wVo,CX,AVo,LVo,yVo,bb,A_e,xVo,$Vo,wX,kVo,SVo,RVo,vb,L_e,PVo,BVo,AX,IVo,NVo,qVo,Fb,y_e,jVo,DVo,LX,GVo,OVo,VVo,Tb,x_e,XVo,zVo,yX,QVo,WVo,HVo,Mb,$_e,UVo,JVo,xX,YVo,KVo,ZVo,Eb,k_e,eXo,oXo,$X,rXo,tXo,aXo,Cb,S_e,nXo,sXo,kX,lXo,iXo,dXo,wb,R_e,cXo,fXo,SX,mXo,gXo,hXo,Ab,P_e,pXo,_Xo,RX,uXo,bXo,vXo,Lb,B_e,FXo,TXo,PX,MXo,EXo,CXo,yb,I_e,wXo,AXo,BX,LXo,yXo,xXo,xb,N_e,$Xo,kXo,IX,SXo,RXo,PXo,$b,q_e,BXo,IXo,NX,NXo,qXo,jXo,kb,j_e,DXo,GXo,qX,OXo,VXo,XXo,Sb,D_e,zXo,QXo,jX,WXo,HXo,UXo,Rb,G_e,JXo,YXo,DX,KXo,ZXo,ezo,Pb,O_e,ozo,rzo,GX,tzo,azo,nzo,Bb,V_e,szo,lzo,OX,izo,dzo,czo,Ib,X_e,fzo,mzo,VX,gzo,hzo,pzo,Nb,z_e,_zo,uzo,XX,bzo,vzo,Fzo,qb,Q_e,Tzo,Mzo,zX,Ezo,Czo,wzo,jb,W_e,Azo,Lzo,QX,yzo,xzo,$zo,Db,H_e,kzo,Szo,WX,Rzo,Pzo,Bzo,Gb,U_e,Izo,Nzo,HX,qzo,jzo,Dzo,Ob,Gzo,J_e,Ozo,Vzo,Y_e,Xzo,zzo,Vb,RXe,nd,Xb,K_e,cy,Qzo,Z_e,Wzo,PXe,Bo,fy,Hzo,sd,Uzo,UX,Jzo,Yzo,JX,Kzo,Zzo,eQo,my,oQo,eue,rQo,tQo,aQo,gt,gy,nQo,oue,sQo,lQo,ld,iQo,rue,dQo,cQo,YX,fQo,mQo,gQo,zb,hQo,ro,hy,pQo,tue,_Qo,uQo,Oa,bQo,aue,vQo,FQo,nue,TQo,MQo,sue,EQo,CQo,wQo,Z,Qb,lue,AQo,LQo,KX,yQo,xQo,$Qo,Wb,iue,kQo,SQo,ZX,RQo,PQo,BQo,Hb,due,IQo,NQo,ez,qQo,jQo,DQo,Ub,cue,GQo,OQo,oz,VQo,XQo,zQo,Jb,fue,QQo,WQo,rz,HQo,UQo,JQo,Yb,mue,YQo,KQo,tz,ZQo,eWo,oWo,Kb,gue,rWo,tWo,az,aWo,nWo,sWo,Zb,hue,lWo,iWo,nz,dWo,cWo,fWo,ev,pue,mWo,gWo,sz,hWo,pWo,_Wo,ov,_ue,uWo,bWo,lz,vWo,FWo,TWo,rv,uue,MWo,EWo,iz,CWo,wWo,AWo,tv,bue,LWo,yWo,dz,xWo,$Wo,kWo,av,vue,SWo,RWo,cz,PWo,BWo,IWo,nv,Fue,NWo,qWo,fz,jWo,DWo,GWo,sv,Tue,OWo,VWo,mz,XWo,zWo,QWo,lv,Mue,WWo,HWo,gz,UWo,JWo,YWo,iv,Eue,KWo,ZWo,hz,eHo,oHo,rHo,dv,Cue,tHo,aHo,pz,nHo,sHo,lHo,cv,wue,iHo,dHo,_z,cHo,fHo,mHo,fv,Aue,gHo,hHo,uz,pHo,_Ho,uHo,mv,Lue,bHo,vHo,bz,FHo,THo,MHo,gv,yue,EHo,CHo,vz,wHo,AHo,LHo,hv,xue,yHo,xHo,Fz,$Ho,kHo,SHo,pv,$ue,RHo,PHo,Tz,BHo,IHo,NHo,_v,kue,qHo,jHo,Mz,DHo,GHo,OHo,uv,Sue,VHo,XHo,Ez,zHo,QHo,WHo,bv,Rue,HHo,UHo,Cz,JHo,YHo,KHo,vv,Pue,ZHo,eUo,wz,oUo,rUo,tUo,Fv,Bue,aUo,nUo,Az,sUo,lUo,iUo,Tv,Iue,dUo,cUo,Lz,fUo,mUo,gUo,Mv,hUo,Nue,pUo,_Uo,que,uUo,bUo,Ev,BXe,id,Cv,jue,py,vUo,Due,FUo,IXe,Io,_y,TUo,dd,MUo,yz,EUo,CUo,xz,wUo,AUo,LUo,uy,yUo,Gue,xUo,$Uo,kUo,ht,by,SUo,Oue,RUo,PUo,cd,BUo,Vue,IUo,NUo,$z,qUo,jUo,DUo,wv,GUo,to,vy,OUo,Xue,VUo,XUo,Va,zUo,zue,QUo,WUo,Que,HUo,UUo,Wue,JUo,YUo,KUo,No,Av,Hue,ZUo,eJo,kz,oJo,rJo,tJo,Lv,Uue,aJo,nJo,Sz,sJo,lJo,iJo,yv,Jue,dJo,cJo,Rz,fJo,mJo,gJo,xv,Yue,hJo,pJo,Pz,_Jo,uJo,bJo,$v,Kue,vJo,FJo,Bz,TJo,MJo,EJo,kv,Zue,CJo,wJo,Iz,AJo,LJo,yJo,Sv,xJo,e1e,$Jo,kJo,o1e,SJo,RJo,Rv,NXe,fd,Pv,r1e,Fy,PJo,t1e,BJo,qXe,qo,Ty,IJo,md,NJo,Nz,qJo,jJo,qz,DJo,GJo,OJo,My,VJo,a1e,XJo,zJo,QJo,pt,Ey,WJo,n1e,HJo,UJo,gd,JJo,s1e,YJo,KJo,jz,ZJo,eYo,oYo,Bv,rYo,ao,Cy,tYo,l1e,aYo,nYo,Xa,sYo,i1e,lYo,iYo,d1e,dYo,cYo,c1e,fYo,mYo,gYo,U,Iv,f1e,hYo,pYo,Dz,_Yo,uYo,bYo,Nv,m1e,vYo,FYo,Gz,TYo,MYo,EYo,qv,g1e,CYo,wYo,Oz,AYo,LYo,yYo,jv,h1e,xYo,$Yo,Vz,kYo,SYo,RYo,Dv,p1e,PYo,BYo,Xz,IYo,NYo,qYo,Gv,_1e,jYo,DYo,zz,GYo,OYo,VYo,Ov,u1e,XYo,zYo,Qz,QYo,WYo,HYo,Vv,b1e,UYo,JYo,Wz,YYo,KYo,ZYo,Xv,v1e,eKo,oKo,Hz,rKo,tKo,aKo,zv,F1e,nKo,sKo,Uz,lKo,iKo,dKo,Qv,T1e,cKo,fKo,Jz,mKo,gKo,hKo,Wv,M1e,pKo,_Ko,Yz,uKo,bKo,vKo,Hv,E1e,FKo,TKo,Kz,MKo,EKo,CKo,Uv,C1e,wKo,AKo,Zz,LKo,yKo,xKo,Jv,w1e,$Ko,kKo,eQ,SKo,RKo,PKo,Yv,A1e,BKo,IKo,oQ,NKo,qKo,jKo,Kv,L1e,DKo,GKo,rQ,OKo,VKo,XKo,Zv,y1e,zKo,QKo,tQ,WKo,HKo,UKo,eF,x1e,JKo,YKo,aQ,KKo,ZKo,eZo,oF,$1e,oZo,rZo,nQ,tZo,aZo,nZo,rF,k1e,sZo,lZo,sQ,iZo,dZo,cZo,tF,S1e,fZo,mZo,lQ,gZo,hZo,pZo,aF,R1e,_Zo,uZo,iQ,bZo,vZo,FZo,nF,P1e,TZo,MZo,dQ,EZo,CZo,wZo,sF,B1e,AZo,LZo,cQ,yZo,xZo,$Zo,lF,I1e,kZo,SZo,fQ,RZo,PZo,BZo,iF,N1e,IZo,NZo,mQ,qZo,jZo,DZo,dF,q1e,GZo,OZo,gQ,VZo,XZo,zZo,cF,j1e,QZo,WZo,hQ,HZo,UZo,JZo,fF,D1e,YZo,KZo,pQ,ZZo,eer,oer,mF,G1e,rer,ter,_Q,aer,ner,ser,gF,O1e,ler,ier,uQ,der,cer,fer,hF,V1e,mer,ger,bQ,her,per,_er,pF,X1e,uer,ber,vQ,ver,Fer,Ter,_F,z1e,Mer,Eer,FQ,Cer,wer,Aer,uF,Q1e,Ler,yer,TQ,xer,$er,ker,bF,Ser,W1e,Rer,Per,H1e,Ber,Ier,vF,jXe,hd,FF,U1e,wy,Ner,J1e,qer,DXe,jo,Ay,jer,pd,Der,MQ,Ger,Oer,EQ,Ver,Xer,zer,Ly,Qer,Y1e,Wer,Her,Uer,_t,yy,Jer,K1e,Yer,Ker,_d,Zer,Z1e,eor,oor,CQ,ror,tor,aor,TF,nor,no,xy,sor,e2e,lor,ior,za,dor,o2e,cor,mor,r2e,gor,hor,t2e,por,_or,uor,V,MF,a2e,bor,vor,wQ,For,Tor,Mor,EF,n2e,Eor,Cor,AQ,wor,Aor,Lor,CF,s2e,yor,xor,LQ,$or,kor,Sor,wF,l2e,Ror,Por,yQ,Bor,Ior,Nor,AF,i2e,qor,jor,xQ,Dor,Gor,Oor,LF,d2e,Vor,Xor,$Q,zor,Qor,Wor,yF,c2e,Hor,Uor,kQ,Jor,Yor,Kor,xF,f2e,Zor,err,SQ,orr,rrr,trr,$F,m2e,arr,nrr,RQ,srr,lrr,irr,kF,g2e,drr,crr,PQ,frr,mrr,grr,SF,h2e,hrr,prr,BQ,_rr,urr,brr,RF,p2e,vrr,Frr,IQ,Trr,Mrr,Err,PF,_2e,Crr,wrr,NQ,Arr,Lrr,yrr,BF,u2e,xrr,$rr,qQ,krr,Srr,Rrr,IF,b2e,Prr,Brr,jQ,Irr,Nrr,qrr,NF,v2e,jrr,Drr,DQ,Grr,Orr,Vrr,qF,F2e,Xrr,zrr,GQ,Qrr,Wrr,Hrr,jF,T2e,Urr,Jrr,OQ,Yrr,Krr,Zrr,DF,M2e,etr,otr,VQ,rtr,ttr,atr,GF,E2e,ntr,str,XQ,ltr,itr,dtr,OF,C2e,ctr,ftr,zQ,mtr,gtr,htr,VF,w2e,ptr,_tr,QQ,utr,btr,vtr,XF,A2e,Ftr,Ttr,WQ,Mtr,Etr,Ctr,zF,L2e,wtr,Atr,HQ,Ltr,ytr,xtr,QF,y2e,$tr,ktr,UQ,Str,Rtr,Ptr,WF,x2e,Btr,Itr,JQ,Ntr,qtr,jtr,HF,$2e,Dtr,Gtr,YQ,Otr,Vtr,Xtr,UF,k2e,ztr,Qtr,KQ,Wtr,Htr,Utr,JF,S2e,Jtr,Ytr,ZQ,Ktr,Ztr,ear,YF,R2e,oar,rar,eW,tar,aar,nar,KF,P2e,sar,lar,oW,iar,dar,car,ZF,B2e,far,mar,rW,gar,har,par,e6,I2e,_ar,uar,tW,bar,Far,Tar,o6,N2e,Mar,Ear,aW,Car,war,Aar,r6,q2e,Lar,yar,nW,xar,$ar,kar,t6,j2e,Sar,Rar,sW,Par,Bar,Iar,a6,D2e,Nar,qar,lW,jar,Dar,Gar,n6,G2e,Oar,Var,iW,Xar,zar,Qar,s6,O2e,War,Har,dW,Uar,Jar,Yar,l6,V2e,Kar,Zar,cW,enr,onr,rnr,i6,X2e,tnr,anr,fW,nnr,snr,lnr,d6,z2e,inr,dnr,mW,cnr,fnr,mnr,c6,gnr,Q2e,hnr,pnr,W2e,_nr,unr,f6,GXe,ud,m6,H2e,$y,bnr,U2e,vnr,OXe,Do,ky,Fnr,bd,Tnr,gW,Mnr,Enr,hW,Cnr,wnr,Anr,Sy,Lnr,J2e,ynr,xnr,$nr,ut,Ry,knr,Y2e,Snr,Rnr,vd,Pnr,K2e,Bnr,Inr,pW,Nnr,qnr,jnr,g6,Dnr,so,Py,Gnr,Z2e,Onr,Vnr,Qa,Xnr,e4e,znr,Qnr,o4e,Wnr,Hnr,r4e,Unr,Jnr,Ynr,t4e,h6,a4e,Knr,Znr,_W,esr,osr,rsr,p6,tsr,n4e,asr,nsr,s4e,ssr,lsr,_6,VXe,Fd,u6,l4e,By,isr,i4e,dsr,XXe,Go,Iy,csr,Td,fsr,uW,msr,gsr,bW,hsr,psr,_sr,Ny,usr,d4e,bsr,vsr,Fsr,bt,qy,Tsr,c4e,Msr,Esr,Md,Csr,f4e,wsr,Asr,vW,Lsr,ysr,xsr,b6,$sr,lo,jy,ksr,m4e,Ssr,Rsr,Wa,Psr,g4e,Bsr,Isr,h4e,Nsr,qsr,p4e,jsr,Dsr,Gsr,_e,v6,_4e,Osr,Vsr,FW,Xsr,zsr,Qsr,F6,u4e,Wsr,Hsr,TW,Usr,Jsr,Ysr,T6,b4e,Ksr,Zsr,MW,elr,olr,rlr,M6,v4e,tlr,alr,EW,nlr,slr,llr,Us,F4e,ilr,dlr,CW,clr,flr,wW,mlr,glr,hlr,E6,T4e,plr,_lr,AW,ulr,blr,vlr,Js,M4e,Flr,Tlr,LW,Mlr,Elr,yW,Clr,wlr,Alr,C6,E4e,Llr,ylr,xW,xlr,$lr,klr,vt,C4e,Slr,Rlr,$W,Plr,Blr,kW,Ilr,Nlr,SW,qlr,jlr,Dlr,w6,w4e,Glr,Olr,RW,Vlr,Xlr,zlr,A6,A4e,Qlr,Wlr,PW,Hlr,Ulr,Jlr,L6,L4e,Ylr,Klr,BW,Zlr,eir,oir,y6,y4e,rir,tir,IW,air,nir,sir,x6,x4e,lir,iir,NW,dir,cir,fir,$6,$4e,mir,gir,qW,hir,pir,_ir,k6,k4e,uir,bir,jW,vir,Fir,Tir,S6,S4e,Mir,Eir,DW,Cir,wir,Air,R6,Lir,R4e,yir,xir,P4e,$ir,kir,P6,zXe,Ed,B6,B4e,Dy,Sir,I4e,Rir,QXe,Oo,Gy,Pir,Cd,Bir,GW,Iir,Nir,OW,qir,jir,Dir,Oy,Gir,N4e,Oir,Vir,Xir,Ft,Vy,zir,q4e,Qir,Wir,wd,Hir,j4e,Uir,Jir,VW,Yir,Kir,Zir,I6,edr,io,Xy,odr,D4e,rdr,tdr,Ha,adr,G4e,ndr,sdr,O4e,ldr,idr,V4e,ddr,cdr,fdr,X4e,N6,z4e,mdr,gdr,XW,hdr,pdr,_dr,q6,udr,Q4e,bdr,vdr,W4e,Fdr,Tdr,j6,WXe,Ad,D6,H4e,zy,Mdr,U4e,Edr,HXe,Vo,Qy,Cdr,Ld,wdr,zW,Adr,Ldr,QW,ydr,xdr,$dr,Wy,kdr,J4e,Sdr,Rdr,Pdr,Tt,Hy,Bdr,Y4e,Idr,Ndr,yd,qdr,K4e,jdr,Ddr,WW,Gdr,Odr,Vdr,G6,Xdr,co,Uy,zdr,Z4e,Qdr,Wdr,Ua,Hdr,ebe,Udr,Jdr,obe,Ydr,Kdr,rbe,Zdr,ecr,ocr,tbe,O6,abe,rcr,tcr,HW,acr,ncr,scr,V6,lcr,nbe,icr,dcr,sbe,ccr,fcr,X6,UXe,xd,z6,lbe,Jy,mcr,ibe,gcr,JXe,Xo,Yy,hcr,$d,pcr,UW,_cr,ucr,JW,bcr,vcr,Fcr,Ky,Tcr,dbe,Mcr,Ecr,Ccr,Mt,Zy,wcr,cbe,Acr,Lcr,kd,ycr,fbe,xcr,$cr,YW,kcr,Scr,Rcr,Q6,Pcr,fo,e8,Bcr,mbe,Icr,Ncr,Ja,qcr,gbe,jcr,Dcr,hbe,Gcr,Ocr,pbe,Vcr,Xcr,zcr,Pe,W6,_be,Qcr,Wcr,KW,Hcr,Ucr,Jcr,H6,ube,Ycr,Kcr,ZW,Zcr,efr,ofr,U6,bbe,rfr,tfr,eH,afr,nfr,sfr,J6,vbe,lfr,ifr,oH,dfr,cfr,ffr,Y6,Fbe,mfr,gfr,rH,hfr,pfr,_fr,K6,Tbe,ufr,bfr,tH,vfr,Ffr,Tfr,Z6,Mbe,Mfr,Efr,aH,Cfr,wfr,Afr,eT,Ebe,Lfr,yfr,nH,xfr,$fr,kfr,oT,Cbe,Sfr,Rfr,sH,Pfr,Bfr,Ifr,rT,Nfr,wbe,qfr,jfr,Abe,Dfr,Gfr,tT,YXe,Sd,aT,Lbe,o8,Ofr,ybe,Vfr,KXe,zo,r8,Xfr,Rd,zfr,lH,Qfr,Wfr,iH,Hfr,Ufr,Jfr,t8,Yfr,xbe,Kfr,Zfr,emr,Et,a8,omr,$be,rmr,tmr,Pd,amr,kbe,nmr,smr,dH,lmr,imr,dmr,nT,cmr,mo,n8,fmr,Sbe,mmr,gmr,Ya,hmr,Rbe,pmr,_mr,Pbe,umr,bmr,Bbe,vmr,Fmr,Tmr,ot,sT,Ibe,Mmr,Emr,cH,Cmr,wmr,Amr,lT,Nbe,Lmr,ymr,fH,xmr,$mr,kmr,iT,qbe,Smr,Rmr,mH,Pmr,Bmr,Imr,dT,jbe,Nmr,qmr,gH,jmr,Dmr,Gmr,cT,Dbe,Omr,Vmr,hH,Xmr,zmr,Qmr,fT,Wmr,Gbe,Hmr,Umr,Obe,Jmr,Ymr,mT,ZXe,Bd,gT,Vbe,s8,Kmr,Xbe,Zmr,eze,Qo,l8,egr,Id,ogr,pH,rgr,tgr,_H,agr,ngr,sgr,i8,lgr,zbe,igr,dgr,cgr,Ct,d8,fgr,Qbe,mgr,ggr,Nd,hgr,Wbe,pgr,_gr,uH,ugr,bgr,vgr,hT,Fgr,go,c8,Tgr,Hbe,Mgr,Egr,Ka,Cgr,Ube,wgr,Agr,Jbe,Lgr,ygr,Ybe,xgr,$gr,kgr,Le,pT,Kbe,Sgr,Rgr,bH,Pgr,Bgr,Igr,_T,Zbe,Ngr,qgr,vH,jgr,Dgr,Ggr,uT,eve,Ogr,Vgr,FH,Xgr,zgr,Qgr,bT,ove,Wgr,Hgr,TH,Ugr,Jgr,Ygr,vT,rve,Kgr,Zgr,MH,ehr,ohr,rhr,FT,tve,thr,ahr,EH,nhr,shr,lhr,TT,ave,ihr,dhr,CH,chr,fhr,mhr,MT,nve,ghr,hhr,wH,phr,_hr,uhr,ET,sve,bhr,vhr,AH,Fhr,Thr,Mhr,CT,lve,Ehr,Chr,LH,whr,Ahr,Lhr,wT,yhr,ive,xhr,$hr,dve,khr,Shr,AT,oze,qd,LT,cve,f8,Rhr,fve,Phr,rze,Wo,m8,Bhr,jd,Ihr,yH,Nhr,qhr,xH,jhr,Dhr,Ghr,g8,Ohr,mve,Vhr,Xhr,zhr,wt,h8,Qhr,gve,Whr,Hhr,Dd,Uhr,hve,Jhr,Yhr,$H,Khr,Zhr,epr,yT,opr,ho,p8,rpr,pve,tpr,apr,Za,npr,_ve,spr,lpr,uve,ipr,dpr,bve,cpr,fpr,mpr,_8,xT,vve,gpr,hpr,kH,ppr,_pr,upr,$T,Fve,bpr,vpr,SH,Fpr,Tpr,Mpr,kT,Epr,Tve,Cpr,wpr,Mve,Apr,Lpr,ST,tze,Gd,RT,Eve,u8,ypr,Cve,xpr,aze,Ho,b8,$pr,Od,kpr,RH,Spr,Rpr,PH,Ppr,Bpr,Ipr,v8,Npr,wve,qpr,jpr,Dpr,At,F8,Gpr,Ave,Opr,Vpr,Vd,Xpr,Lve,zpr,Qpr,BH,Wpr,Hpr,Upr,PT,Jpr,po,T8,Ypr,yve,Kpr,Zpr,en,e_r,xve,o_r,r_r,$ve,t_r,a_r,kve,n_r,s_r,l_r,rt,BT,Sve,i_r,d_r,IH,c_r,f_r,m_r,IT,Rve,g_r,h_r,NH,p_r,__r,u_r,NT,Pve,b_r,v_r,qH,F_r,T_r,M_r,qT,Bve,E_r,C_r,jH,w_r,A_r,L_r,jT,Ive,y_r,x_r,DH,$_r,k_r,S_r,DT,R_r,Nve,P_r,B_r,qve,I_r,N_r,GT,nze,Xd,OT,jve,M8,q_r,Dve,j_r,sze,Uo,E8,D_r,zd,G_r,GH,O_r,V_r,OH,X_r,z_r,Q_r,C8,W_r,Gve,H_r,U_r,J_r,Lt,w8,Y_r,Ove,K_r,Z_r,Qd,eur,Vve,our,rur,VH,tur,aur,nur,VT,sur,_o,A8,lur,Xve,iur,dur,on,cur,zve,fur,mur,Qve,gur,hur,Wve,pur,_ur,uur,rn,XT,Hve,bur,vur,XH,Fur,Tur,Mur,zT,Uve,Eur,Cur,zH,wur,Aur,Lur,QT,Jve,yur,xur,QH,$ur,kur,Sur,WT,Yve,Rur,Pur,WH,Bur,Iur,Nur,HT,qur,Kve,jur,Dur,Zve,Gur,Our,UT,lze,Wd,JT,eFe,L8,Vur,oFe,Xur,ize,Jo,y8,zur,Hd,Qur,HH,Wur,Hur,UH,Uur,Jur,Yur,x8,Kur,rFe,Zur,e1r,o1r,yt,$8,r1r,tFe,t1r,a1r,Ud,n1r,aFe,s1r,l1r,JH,i1r,d1r,c1r,YT,f1r,uo,k8,m1r,nFe,g1r,h1r,tn,p1r,sFe,_1r,u1r,lFe,b1r,v1r,iFe,F1r,T1r,M1r,S8,KT,dFe,E1r,C1r,YH,w1r,A1r,L1r,ZT,cFe,y1r,x1r,KH,$1r,k1r,S1r,e7,R1r,fFe,P1r,B1r,mFe,I1r,N1r,o7,dze,Jd,r7,gFe,R8,q1r,hFe,j1r,cze,Yo,P8,D1r,Yd,G1r,ZH,O1r,V1r,eU,X1r,z1r,Q1r,B8,W1r,pFe,H1r,U1r,J1r,xt,I8,Y1r,_Fe,K1r,Z1r,Kd,e2r,uFe,o2r,r2r,oU,t2r,a2r,n2r,t7,s2r,bo,N8,l2r,bFe,i2r,d2r,an,c2r,vFe,f2r,m2r,FFe,g2r,h2r,TFe,p2r,_2r,u2r,MFe,a7,EFe,b2r,v2r,rU,F2r,T2r,M2r,n7,E2r,CFe,C2r,w2r,wFe,A2r,L2r,s7,fze,Zd,l7,AFe,q8,y2r,LFe,x2r,mze,Ko,j8,$2r,ec,k2r,tU,S2r,R2r,aU,P2r,B2r,I2r,D8,N2r,yFe,q2r,j2r,D2r,$t,G8,G2r,xFe,O2r,V2r,oc,X2r,$Fe,z2r,Q2r,nU,W2r,H2r,U2r,i7,J2r,vo,O8,Y2r,kFe,K2r,Z2r,nn,e4r,SFe,o4r,r4r,RFe,t4r,a4r,PFe,n4r,s4r,l4r,tt,d7,BFe,i4r,d4r,sU,c4r,f4r,m4r,c7,IFe,g4r,h4r,lU,p4r,_4r,u4r,f7,NFe,b4r,v4r,iU,F4r,T4r,M4r,m7,qFe,E4r,C4r,dU,w4r,A4r,L4r,g7,jFe,y4r,x4r,cU,$4r,k4r,S4r,h7,R4r,DFe,P4r,B4r,GFe,I4r,N4r,p7,gze,rc,_7,OFe,V8,q4r,VFe,j4r,hze,Zo,X8,D4r,tc,G4r,fU,O4r,V4r,mU,X4r,z4r,Q4r,z8,W4r,XFe,H4r,U4r,J4r,kt,Q8,Y4r,zFe,K4r,Z4r,ac,ebr,QFe,obr,rbr,gU,tbr,abr,nbr,u7,sbr,Fo,W8,lbr,WFe,ibr,dbr,sn,cbr,HFe,fbr,mbr,UFe,gbr,hbr,JFe,pbr,_br,ubr,YFe,b7,KFe,bbr,vbr,hU,Fbr,Tbr,Mbr,v7,Ebr,ZFe,Cbr,wbr,e6e,Abr,Lbr,F7,pze,nc,T7,o6e,H8,ybr,r6e,xbr,_ze,er,U8,$br,sc,kbr,pU,Sbr,Rbr,_U,Pbr,Bbr,Ibr,J8,Nbr,t6e,qbr,jbr,Dbr,St,Y8,Gbr,a6e,Obr,Vbr,lc,Xbr,n6e,zbr,Qbr,uU,Wbr,Hbr,Ubr,M7,Jbr,xr,K8,Ybr,s6e,Kbr,Zbr,ln,evr,l6e,ovr,rvr,i6e,tvr,avr,d6e,nvr,svr,lvr,q,E7,c6e,ivr,dvr,bU,cvr,fvr,mvr,C7,f6e,gvr,hvr,vU,pvr,_vr,uvr,w7,m6e,bvr,vvr,FU,Fvr,Tvr,Mvr,A7,g6e,Evr,Cvr,TU,wvr,Avr,Lvr,L7,h6e,yvr,xvr,MU,$vr,kvr,Svr,y7,p6e,Rvr,Pvr,EU,Bvr,Ivr,Nvr,x7,_6e,qvr,jvr,CU,Dvr,Gvr,Ovr,$7,u6e,Vvr,Xvr,wU,zvr,Qvr,Wvr,k7,b6e,Hvr,Uvr,AU,Jvr,Yvr,Kvr,S7,v6e,Zvr,eFr,LU,oFr,rFr,tFr,R7,F6e,aFr,nFr,yU,sFr,lFr,iFr,P7,T6e,dFr,cFr,xU,fFr,mFr,gFr,B7,M6e,hFr,pFr,$U,_Fr,uFr,bFr,I7,E6e,vFr,FFr,kU,TFr,MFr,EFr,N7,C6e,CFr,wFr,SU,AFr,LFr,yFr,q7,w6e,xFr,$Fr,RU,kFr,SFr,RFr,j7,A6e,PFr,BFr,PU,IFr,NFr,qFr,Ys,L6e,jFr,DFr,BU,GFr,OFr,IU,VFr,XFr,zFr,D7,y6e,QFr,WFr,NU,HFr,UFr,JFr,G7,x6e,YFr,KFr,qU,ZFr,e6r,o6r,O7,$6e,r6r,t6r,jU,a6r,n6r,s6r,V7,k6e,l6r,i6r,DU,d6r,c6r,f6r,X7,S6e,m6r,g6r,GU,h6r,p6r,_6r,z7,R6e,u6r,b6r,OU,v6r,F6r,T6r,Q7,P6e,M6r,E6r,VU,C6r,w6r,A6r,W7,B6e,L6r,y6r,XU,x6r,$6r,k6r,H7,I6e,S6r,R6r,zU,P6r,B6r,I6r,U7,N6e,N6r,q6r,QU,j6r,D6r,G6r,J7,q6e,O6r,V6r,WU,X6r,z6r,Q6r,Y7,j6e,W6r,H6r,HU,U6r,J6r,Y6r,K7,D6e,K6r,Z6r,UU,eTr,oTr,rTr,Z7,G6e,tTr,aTr,JU,nTr,sTr,lTr,e9,O6e,iTr,dTr,YU,cTr,fTr,mTr,o9,V6e,gTr,hTr,KU,pTr,_Tr,uTr,r9,X6e,bTr,vTr,ZU,FTr,TTr,MTr,t9,z6e,ETr,CTr,eJ,wTr,ATr,LTr,a9,Q6e,yTr,xTr,oJ,$Tr,kTr,STr,n9,W6e,RTr,PTr,rJ,BTr,ITr,NTr,s9,H6e,qTr,jTr,tJ,DTr,GTr,OTr,l9,U6e,VTr,XTr,aJ,zTr,QTr,WTr,i9,J6e,HTr,UTr,nJ,JTr,YTr,KTr,d9,Y6e,ZTr,e7r,sJ,o7r,r7r,t7r,c9,K6e,a7r,n7r,lJ,s7r,l7r,i7r,f9,Z6e,d7r,c7r,iJ,f7r,m7r,g7r,m9,eTe,h7r,p7r,dJ,_7r,u7r,b7r,g9,oTe,v7r,F7r,cJ,T7r,M7r,E7r,h9,rTe,C7r,w7r,fJ,A7r,L7r,y7r,p9,tTe,x7r,$7r,mJ,k7r,S7r,R7r,_9,aTe,P7r,B7r,gJ,I7r,N7r,q7r,u9,uze,ic,b9,nTe,Z8,j7r,sTe,D7r,bze,or,ex,G7r,dc,O7r,hJ,V7r,X7r,pJ,z7r,Q7r,W7r,ox,H7r,lTe,U7r,J7r,Y7r,Rt,rx,K7r,iTe,Z7r,e9r,cc,o9r,dTe,r9r,t9r,_J,a9r,n9r,s9r,v9,l9r,$r,tx,i9r,cTe,d9r,c9r,dn,f9r,fTe,m9r,g9r,mTe,h9r,p9r,gTe,_9r,u9r,b9r,se,F9,hTe,v9r,F9r,uJ,T9r,M9r,E9r,T9,pTe,C9r,w9r,bJ,A9r,L9r,y9r,M9,_Te,x9r,$9r,vJ,k9r,S9r,R9r,E9,uTe,P9r,B9r,FJ,I9r,N9r,q9r,C9,bTe,j9r,D9r,TJ,G9r,O9r,V9r,w9,vTe,X9r,z9r,MJ,Q9r,W9r,H9r,A9,FTe,U9r,J9r,EJ,Y9r,K9r,Z9r,L9,TTe,eMr,oMr,CJ,rMr,tMr,aMr,y9,MTe,nMr,sMr,wJ,lMr,iMr,dMr,x9,ETe,cMr,fMr,AJ,mMr,gMr,hMr,$9,CTe,pMr,_Mr,LJ,uMr,bMr,vMr,k9,wTe,FMr,TMr,yJ,MMr,EMr,CMr,S9,ATe,wMr,AMr,xJ,LMr,yMr,xMr,R9,LTe,$Mr,kMr,$J,SMr,RMr,PMr,P9,yTe,BMr,IMr,kJ,NMr,qMr,jMr,B9,xTe,DMr,GMr,SJ,OMr,VMr,XMr,I9,$Te,zMr,QMr,RJ,WMr,HMr,UMr,N9,kTe,JMr,YMr,PJ,KMr,ZMr,eEr,q9,STe,oEr,rEr,BJ,tEr,aEr,nEr,j9,RTe,sEr,lEr,IJ,iEr,dEr,cEr,D9,PTe,fEr,mEr,NJ,gEr,hEr,pEr,G9,BTe,_Er,uEr,qJ,bEr,vEr,FEr,O9,ITe,TEr,MEr,jJ,EEr,CEr,wEr,V9,vze,fc,X9,NTe,ax,AEr,qTe,LEr,Fze,rr,nx,yEr,mc,xEr,DJ,$Er,kEr,GJ,SEr,REr,PEr,sx,BEr,jTe,IEr,NEr,qEr,Pt,lx,jEr,DTe,DEr,GEr,gc,OEr,GTe,VEr,XEr,OJ,zEr,QEr,WEr,z9,HEr,kr,ix,UEr,OTe,JEr,YEr,cn,KEr,VTe,ZEr,eCr,XTe,oCr,rCr,zTe,tCr,aCr,nCr,Me,Q9,QTe,sCr,lCr,VJ,iCr,dCr,cCr,W9,WTe,fCr,mCr,XJ,gCr,hCr,pCr,H9,HTe,_Cr,uCr,zJ,bCr,vCr,FCr,U9,UTe,TCr,MCr,QJ,ECr,CCr,wCr,J9,JTe,ACr,LCr,WJ,yCr,xCr,$Cr,Y9,YTe,kCr,SCr,HJ,RCr,PCr,BCr,K9,KTe,ICr,NCr,UJ,qCr,jCr,DCr,Z9,ZTe,GCr,OCr,JJ,VCr,XCr,zCr,eM,e7e,QCr,WCr,YJ,HCr,UCr,JCr,oM,o7e,YCr,KCr,KJ,ZCr,e3r,o3r,rM,r7e,r3r,t3r,ZJ,a3r,n3r,s3r,tM,t7e,l3r,i3r,eY,d3r,c3r,f3r,aM,a7e,m3r,g3r,oY,h3r,p3r,_3r,nM,Tze,hc,sM,n7e,dx,u3r,s7e,b3r,Mze,tr,cx,v3r,pc,F3r,rY,T3r,M3r,tY,E3r,C3r,w3r,fx,A3r,l7e,L3r,y3r,x3r,Bt,mx,$3r,i7e,k3r,S3r,_c,R3r,d7e,P3r,B3r,aY,I3r,N3r,q3r,lM,j3r,Sr,gx,D3r,c7e,G3r,O3r,fn,V3r,f7e,X3r,z3r,m7e,Q3r,W3r,g7e,H3r,U3r,J3r,ar,iM,h7e,Y3r,K3r,nY,Z3r,e5r,o5r,dM,p7e,r5r,t5r,sY,a5r,n5r,s5r,cM,_7e,l5r,i5r,lY,d5r,c5r,f5r,fM,u7e,m5r,g5r,iY,h5r,p5r,_5r,mM,b7e,u5r,b5r,dY,v5r,F5r,T5r,gM,v7e,M5r,E5r,cY,C5r,w5r,A5r,hM,Eze,uc,pM,F7e,hx,L5r,T7e,y5r,Cze,nr,px,x5r,bc,$5r,fY,k5r,S5r,mY,R5r,P5r,B5r,_x,I5r,M7e,N5r,q5r,j5r,It,ux,D5r,E7e,G5r,O5r,vc,V5r,C7e,X5r,z5r,gY,Q5r,W5r,H5r,_M,U5r,Rr,bx,J5r,w7e,Y5r,K5r,mn,Z5r,A7e,e0r,o0r,L7e,r0r,t0r,y7e,a0r,n0r,s0r,ie,uM,x7e,l0r,i0r,hY,d0r,c0r,f0r,bM,$7e,m0r,g0r,pY,h0r,p0r,_0r,vM,k7e,u0r,b0r,_Y,v0r,F0r,T0r,FM,S7e,M0r,E0r,uY,C0r,w0r,A0r,TM,R7e,L0r,y0r,bY,x0r,$0r,k0r,MM,P7e,S0r,R0r,vY,P0r,B0r,I0r,EM,B7e,N0r,q0r,FY,j0r,D0r,G0r,CM,I7e,O0r,V0r,TY,X0r,z0r,Q0r,wM,N7e,W0r,H0r,MY,U0r,J0r,Y0r,AM,q7e,K0r,Z0r,EY,ewr,owr,rwr,LM,j7e,twr,awr,CY,nwr,swr,lwr,yM,D7e,iwr,dwr,wY,cwr,fwr,mwr,xM,G7e,gwr,hwr,AY,pwr,_wr,uwr,$M,O7e,bwr,vwr,LY,Fwr,Twr,Mwr,kM,V7e,Ewr,Cwr,yY,wwr,Awr,Lwr,SM,X7e,ywr,xwr,xY,$wr,kwr,Swr,RM,z7e,Rwr,Pwr,$Y,Bwr,Iwr,Nwr,PM,Q7e,qwr,jwr,kY,Dwr,Gwr,Owr,BM,W7e,Vwr,Xwr,SY,zwr,Qwr,Wwr,IM,H7e,Hwr,Uwr,RY,Jwr,Ywr,Kwr,NM,wze,Fc,qM,U7e,vx,Zwr,J7e,eAr,Aze,sr,Fx,oAr,Tc,rAr,PY,tAr,aAr,BY,nAr,sAr,lAr,Tx,iAr,Y7e,dAr,cAr,fAr,Nt,Mx,mAr,K7e,gAr,hAr,Mc,pAr,Z7e,_Ar,uAr,IY,bAr,vAr,FAr,jM,TAr,Pr,Ex,MAr,e9e,EAr,CAr,gn,wAr,o9e,AAr,LAr,r9e,yAr,xAr,t9e,$Ar,kAr,SAr,ye,DM,a9e,RAr,PAr,NY,BAr,IAr,NAr,GM,n9e,qAr,jAr,qY,DAr,GAr,OAr,OM,s9e,VAr,XAr,jY,zAr,QAr,WAr,VM,l9e,HAr,UAr,DY,JAr,YAr,KAr,XM,i9e,ZAr,eLr,GY,oLr,rLr,tLr,zM,d9e,aLr,nLr,OY,sLr,lLr,iLr,QM,c9e,dLr,cLr,VY,fLr,mLr,gLr,WM,f9e,hLr,pLr,XY,_Lr,uLr,bLr,HM,m9e,vLr,FLr,zY,TLr,MLr,ELr,UM,g9e,CLr,wLr,QY,ALr,LLr,yLr,JM,Lze,Ec,YM,h9e,Cx,xLr,p9e,$Lr,yze,lr,wx,kLr,Cc,SLr,WY,RLr,PLr,HY,BLr,ILr,NLr,Ax,qLr,_9e,jLr,DLr,GLr,qt,Lx,OLr,u9e,VLr,XLr,wc,zLr,b9e,QLr,WLr,UY,HLr,ULr,JLr,KM,YLr,Br,yx,KLr,v9e,ZLr,eyr,hn,oyr,F9e,ryr,tyr,T9e,ayr,nyr,M9e,syr,lyr,iyr,te,ZM,E9e,dyr,cyr,JY,fyr,myr,gyr,eE,C9e,hyr,pyr,YY,_yr,uyr,byr,oE,w9e,vyr,Fyr,KY,Tyr,Myr,Eyr,rE,A9e,Cyr,wyr,ZY,Ayr,Lyr,yyr,tE,L9e,xyr,$yr,eK,kyr,Syr,Ryr,aE,y9e,Pyr,Byr,oK,Iyr,Nyr,qyr,nE,x9e,jyr,Dyr,rK,Gyr,Oyr,Vyr,sE,$9e,Xyr,zyr,tK,Qyr,Wyr,Hyr,lE,k9e,Uyr,Jyr,aK,Yyr,Kyr,Zyr,iE,S9e,e8r,o8r,nK,r8r,t8r,a8r,dE,R9e,n8r,s8r,sK,l8r,i8r,d8r,cE,P9e,c8r,f8r,lK,m8r,g8r,h8r,fE,B9e,p8r,_8r,iK,u8r,b8r,v8r,mE,I9e,F8r,T8r,dK,M8r,E8r,C8r,gE,N9e,w8r,A8r,cK,L8r,y8r,x8r,hE,q9e,$8r,k8r,fK,S8r,R8r,P8r,pE,j9e,B8r,I8r,mK,N8r,q8r,j8r,_E,D9e,D8r,G8r,gK,O8r,V8r,X8r,uE,G9e,z8r,Q8r,hK,W8r,H8r,U8r,bE,O9e,J8r,Y8r,pK,K8r,Z8r,exr,vE,V9e,oxr,rxr,_K,txr,axr,nxr,FE,X9e,sxr,lxr,uK,ixr,dxr,cxr,TE,z9e,fxr,mxr,bK,gxr,hxr,pxr,ME,Q9e,_xr,uxr,vK,bxr,vxr,Fxr,EE,W9e,Txr,Mxr,FK,Exr,Cxr,wxr,CE,H9e,Axr,Lxr,TK,yxr,xxr,$xr,wE,xze,Ac,AE,U9e,xx,kxr,J9e,Sxr,$ze,ir,$x,Rxr,Lc,Pxr,MK,Bxr,Ixr,EK,Nxr,qxr,jxr,kx,Dxr,Y9e,Gxr,Oxr,Vxr,jt,Sx,Xxr,K9e,zxr,Qxr,yc,Wxr,Z9e,Hxr,Uxr,CK,Jxr,Yxr,Kxr,LE,Zxr,Ir,Rx,e$r,eMe,o$r,r$r,pn,t$r,oMe,a$r,n$r,rMe,s$r,l$r,tMe,i$r,d$r,c$r,ue,yE,aMe,f$r,m$r,wK,g$r,h$r,p$r,xE,nMe,_$r,u$r,AK,b$r,v$r,F$r,$E,sMe,T$r,M$r,LK,E$r,C$r,w$r,kE,lMe,A$r,L$r,yK,y$r,x$r,$$r,SE,iMe,k$r,S$r,xK,R$r,P$r,B$r,RE,dMe,I$r,N$r,$K,q$r,j$r,D$r,PE,cMe,G$r,O$r,kK,V$r,X$r,z$r,BE,fMe,Q$r,W$r,SK,H$r,U$r,J$r,IE,mMe,Y$r,K$r,RK,Z$r,ekr,okr,NE,gMe,rkr,tkr,PK,akr,nkr,skr,qE,hMe,lkr,ikr,BK,dkr,ckr,fkr,jE,pMe,mkr,gkr,IK,hkr,pkr,_kr,DE,_Me,ukr,bkr,NK,vkr,Fkr,Tkr,GE,uMe,Mkr,Ekr,qK,Ckr,wkr,Akr,OE,bMe,Lkr,ykr,jK,xkr,$kr,kkr,VE,vMe,Skr,Rkr,DK,Pkr,Bkr,Ikr,XE,FMe,Nkr,qkr,GK,jkr,Dkr,Gkr,zE,kze,xc,QE,TMe,Px,Okr,MMe,Vkr,Sze,dr,Bx,Xkr,$c,zkr,OK,Qkr,Wkr,VK,Hkr,Ukr,Jkr,Ix,Ykr,EMe,Kkr,Zkr,eSr,Dt,Nx,oSr,CMe,rSr,tSr,kc,aSr,wMe,nSr,sSr,XK,lSr,iSr,dSr,WE,cSr,Nr,qx,fSr,AMe,mSr,gSr,_n,hSr,LMe,pSr,_Sr,yMe,uSr,bSr,xMe,vSr,FSr,TSr,jx,HE,$Me,MSr,ESr,zK,CSr,wSr,ASr,UE,kMe,LSr,ySr,QK,xSr,$Sr,kSr,JE,Rze,Sc,YE,SMe,Dx,SSr,RMe,RSr,Pze,cr,Gx,PSr,Rc,BSr,WK,ISr,NSr,HK,qSr,jSr,DSr,Ox,GSr,PMe,OSr,VSr,XSr,Gt,Vx,zSr,BMe,QSr,WSr,Pc,HSr,IMe,USr,JSr,UK,YSr,KSr,ZSr,KE,eRr,qr,Xx,oRr,NMe,rRr,tRr,un,aRr,qMe,nRr,sRr,jMe,lRr,iRr,DMe,dRr,cRr,fRr,GMe,ZE,OMe,mRr,gRr,JK,hRr,pRr,_Rr,eC,Bze,Bc,oC,VMe,zx,uRr,XMe,bRr,Ize,fr,Qx,vRr,Ic,FRr,YK,TRr,MRr,KK,ERr,CRr,wRr,Wx,ARr,zMe,LRr,yRr,xRr,Ot,Hx,$Rr,QMe,kRr,SRr,Nc,RRr,WMe,PRr,BRr,ZK,IRr,NRr,qRr,rC,jRr,jr,Ux,DRr,HMe,GRr,ORr,bn,VRr,UMe,XRr,zRr,JMe,QRr,WRr,YMe,HRr,URr,JRr,de,tC,KMe,YRr,KRr,eZ,ZRr,ePr,oPr,aC,ZMe,rPr,tPr,oZ,aPr,nPr,sPr,nC,eEe,lPr,iPr,rZ,dPr,cPr,fPr,sC,oEe,mPr,gPr,tZ,hPr,pPr,_Pr,lC,rEe,uPr,bPr,aZ,vPr,FPr,TPr,iC,tEe,MPr,EPr,nZ,CPr,wPr,APr,dC,aEe,LPr,yPr,sZ,xPr,$Pr,kPr,cC,nEe,SPr,RPr,lZ,PPr,BPr,IPr,fC,sEe,NPr,qPr,iZ,jPr,DPr,GPr,mC,lEe,OPr,VPr,dZ,XPr,zPr,QPr,gC,iEe,WPr,HPr,cZ,UPr,JPr,YPr,hC,dEe,KPr,ZPr,fZ,eBr,oBr,rBr,pC,cEe,tBr,aBr,mZ,nBr,sBr,lBr,_C,fEe,iBr,dBr,gZ,cBr,fBr,mBr,uC,mEe,gBr,hBr,hZ,pBr,_Br,uBr,bC,gEe,bBr,vBr,pZ,FBr,TBr,MBr,vC,hEe,EBr,CBr,_Z,wBr,ABr,LBr,FC,pEe,yBr,xBr,uZ,$Br,kBr,SBr,TC,_Ee,RBr,PBr,bZ,BBr,IBr,NBr,MC,uEe,qBr,jBr,vZ,DBr,GBr,OBr,EC,Nze,qc,CC,bEe,Jx,VBr,vEe,XBr,qze,mr,Yx,zBr,jc,QBr,FZ,WBr,HBr,TZ,UBr,JBr,YBr,Kx,KBr,FEe,ZBr,eIr,oIr,Vt,Zx,rIr,TEe,tIr,aIr,Dc,nIr,MEe,sIr,lIr,MZ,iIr,dIr,cIr,wC,fIr,Dr,e$,mIr,EEe,gIr,hIr,vn,pIr,CEe,_Ir,uIr,wEe,bIr,vIr,AEe,FIr,TIr,MIr,ce,AC,LEe,EIr,CIr,EZ,wIr,AIr,LIr,LC,yEe,yIr,xIr,CZ,$Ir,kIr,SIr,yC,xEe,RIr,PIr,wZ,BIr,IIr,NIr,xC,$Ee,qIr,jIr,AZ,DIr,GIr,OIr,$C,kEe,VIr,XIr,LZ,zIr,QIr,WIr,kC,SEe,HIr,UIr,yZ,JIr,YIr,KIr,SC,REe,ZIr,eNr,xZ,oNr,rNr,tNr,RC,PEe,aNr,nNr,$Z,sNr,lNr,iNr,PC,BEe,dNr,cNr,kZ,fNr,mNr,gNr,BC,IEe,hNr,pNr,SZ,_Nr,uNr,bNr,IC,NEe,vNr,FNr,RZ,TNr,MNr,ENr,NC,qEe,CNr,wNr,PZ,ANr,LNr,yNr,qC,jEe,xNr,$Nr,BZ,kNr,SNr,RNr,jC,DEe,PNr,BNr,IZ,INr,NNr,qNr,DC,GEe,jNr,DNr,NZ,GNr,ONr,VNr,GC,OEe,XNr,zNr,qZ,QNr,WNr,HNr,OC,VEe,UNr,JNr,jZ,YNr,KNr,ZNr,VC,XEe,eqr,oqr,DZ,rqr,tqr,aqr,XC,zEe,nqr,sqr,GZ,lqr,iqr,dqr,zC,QEe,cqr,fqr,OZ,mqr,gqr,hqr,QC,jze,Gc,WC,WEe,o$,pqr,HEe,_qr,Dze,gr,r$,uqr,Oc,bqr,VZ,vqr,Fqr,XZ,Tqr,Mqr,Eqr,t$,Cqr,UEe,wqr,Aqr,Lqr,Xt,a$,yqr,JEe,xqr,$qr,Vc,kqr,YEe,Sqr,Rqr,zZ,Pqr,Bqr,Iqr,HC,Nqr,Gr,n$,qqr,KEe,jqr,Dqr,Fn,Gqr,ZEe,Oqr,Vqr,eCe,Xqr,zqr,oCe,Qqr,Wqr,Hqr,rCe,UC,tCe,Uqr,Jqr,QZ,Yqr,Kqr,Zqr,JC,Gze,Xc,YC,aCe,s$,ejr,nCe,ojr,Oze,hr,l$,rjr,zc,tjr,WZ,ajr,njr,HZ,sjr,ljr,ijr,i$,djr,sCe,cjr,fjr,mjr,zt,d$,gjr,lCe,hjr,pjr,Qc,_jr,iCe,ujr,bjr,UZ,vjr,Fjr,Tjr,KC,Mjr,Or,c$,Ejr,dCe,Cjr,wjr,Tn,Ajr,cCe,Ljr,yjr,fCe,xjr,$jr,mCe,kjr,Sjr,Rjr,gCe,ZC,hCe,Pjr,Bjr,JZ,Ijr,Njr,qjr,e3,Vze,Wc,o3,pCe,f$,jjr,_Ce,Djr,Xze,pr,m$,Gjr,Hc,Ojr,YZ,Vjr,Xjr,KZ,zjr,Qjr,Wjr,g$,Hjr,uCe,Ujr,Jjr,Yjr,Qt,h$,Kjr,bCe,Zjr,eDr,Uc,oDr,vCe,rDr,tDr,ZZ,aDr,nDr,sDr,r3,lDr,Vr,p$,iDr,FCe,dDr,cDr,Mn,fDr,TCe,mDr,gDr,MCe,hDr,pDr,ECe,_Dr,uDr,bDr,oe,t3,CCe,vDr,FDr,eee,TDr,MDr,EDr,a3,wCe,CDr,wDr,oee,ADr,LDr,yDr,n3,ACe,xDr,$Dr,ree,kDr,SDr,RDr,s3,LCe,PDr,BDr,tee,IDr,NDr,qDr,l3,yCe,jDr,DDr,aee,GDr,ODr,VDr,i3,xCe,XDr,zDr,nee,QDr,WDr,HDr,d3,$Ce,UDr,JDr,see,YDr,KDr,ZDr,c3,kCe,eGr,oGr,lee,rGr,tGr,aGr,f3,SCe,nGr,sGr,iee,lGr,iGr,dGr,m3,RCe,cGr,fGr,dee,mGr,gGr,hGr,g3,PCe,pGr,_Gr,cee,uGr,bGr,vGr,h3,BCe,FGr,TGr,fee,MGr,EGr,CGr,p3,ICe,wGr,AGr,mee,LGr,yGr,xGr,_3,NCe,$Gr,kGr,gee,SGr,RGr,PGr,u3,qCe,BGr,IGr,hee,NGr,qGr,jGr,b3,jCe,DGr,GGr,pee,OGr,VGr,XGr,v3,DCe,zGr,QGr,_ee,WGr,HGr,UGr,F3,GCe,JGr,YGr,uee,KGr,ZGr,eOr,T3,OCe,oOr,rOr,bee,tOr,aOr,nOr,M3,VCe,sOr,lOr,vee,iOr,dOr,cOr,E3,XCe,fOr,mOr,Fee,gOr,hOr,pOr,C3,zCe,_Or,uOr,Tee,bOr,vOr,FOr,w3,QCe,TOr,MOr,Mee,EOr,COr,wOr,A3,WCe,AOr,LOr,Eee,yOr,xOr,$Or,L3,HCe,kOr,SOr,Cee,ROr,POr,BOr,y3,UCe,IOr,NOr,wee,qOr,jOr,DOr,x3,JCe,GOr,OOr,Aee,VOr,XOr,zOr,$3,zze,Jc,k3,YCe,_$,QOr,KCe,WOr,Qze,_r,u$,HOr,Yc,UOr,Lee,JOr,YOr,yee,KOr,ZOr,eVr,b$,oVr,ZCe,rVr,tVr,aVr,Wt,v$,nVr,e3e,sVr,lVr,Kc,iVr,o3e,dVr,cVr,xee,fVr,mVr,gVr,S3,hVr,Xr,F$,pVr,r3e,_Vr,uVr,En,bVr,t3e,vVr,FVr,a3e,TVr,MVr,n3e,EVr,CVr,wVr,xe,R3,s3e,AVr,LVr,$ee,yVr,xVr,$Vr,P3,l3e,kVr,SVr,kee,RVr,PVr,BVr,B3,i3e,IVr,NVr,See,qVr,jVr,DVr,I3,d3e,GVr,OVr,Ree,VVr,XVr,zVr,N3,c3e,QVr,WVr,Pee,HVr,UVr,JVr,q3,f3e,YVr,KVr,Bee,ZVr,eXr,oXr,j3,m3e,rXr,tXr,Iee,aXr,nXr,sXr,D3,g3e,lXr,iXr,Nee,dXr,cXr,fXr,G3,h3e,mXr,gXr,qee,hXr,pXr,_Xr,O3,p3e,uXr,bXr,jee,vXr,FXr,TXr,V3,Wze,Zc,X3,_3e,T$,MXr,u3e,EXr,Hze,ur,M$,CXr,ef,wXr,Dee,AXr,LXr,Gee,yXr,xXr,$Xr,E$,kXr,b3e,SXr,RXr,PXr,Ht,C$,BXr,v3e,IXr,NXr,of,qXr,F3e,jXr,DXr,Oee,GXr,OXr,VXr,z3,XXr,zr,w$,zXr,T3e,QXr,WXr,Cn,HXr,M3e,UXr,JXr,E3e,YXr,KXr,C3e,ZXr,ezr,ozr,Ee,Q3,w3e,rzr,tzr,Vee,azr,nzr,szr,W3,A3e,lzr,izr,Xee,dzr,czr,fzr,H3,L3e,mzr,gzr,zee,hzr,pzr,_zr,U3,y3e,uzr,bzr,Qee,vzr,Fzr,Tzr,J3,x3e,Mzr,Ezr,Wee,Czr,wzr,Azr,Y3,$3e,Lzr,yzr,Hee,xzr,$zr,kzr,K3,k3e,Szr,Rzr,Uee,Pzr,Bzr,Izr,Z3,S3e,Nzr,qzr,Jee,jzr,Dzr,Gzr,e5,R3e,Ozr,Vzr,Yee,Xzr,zzr,Qzr,o5,P3e,Wzr,Hzr,Kee,Uzr,Jzr,Yzr,r5,B3e,Kzr,Zzr,Zee,eQr,oQr,rQr,t5,I3e,tQr,aQr,eoe,nQr,sQr,lQr,a5,N3e,iQr,dQr,ooe,cQr,fQr,mQr,n5,Uze,rf,s5,q3e,A$,gQr,j3e,hQr,Jze,br,L$,pQr,tf,_Qr,roe,uQr,bQr,toe,vQr,FQr,TQr,y$,MQr,D3e,EQr,CQr,wQr,Ut,x$,AQr,G3e,LQr,yQr,af,xQr,O3e,$Qr,kQr,aoe,SQr,RQr,PQr,l5,BQr,Qr,$$,IQr,V3e,NQr,qQr,wn,jQr,X3e,DQr,GQr,z3e,OQr,VQr,Q3e,XQr,zQr,QQr,$e,i5,W3e,WQr,HQr,noe,UQr,JQr,YQr,d5,H3e,KQr,ZQr,soe,eWr,oWr,rWr,c5,U3e,tWr,aWr,loe,nWr,sWr,lWr,f5,J3e,iWr,dWr,ioe,cWr,fWr,mWr,m5,Y3e,gWr,hWr,doe,pWr,_Wr,uWr,g5,K3e,bWr,vWr,coe,FWr,TWr,MWr,h5,Z3e,EWr,CWr,foe,wWr,AWr,LWr,p5,e5e,yWr,xWr,moe,$Wr,kWr,SWr,_5,o5e,RWr,PWr,goe,BWr,IWr,NWr,u5,r5e,qWr,jWr,hoe,DWr,GWr,OWr,b5,Yze,nf,v5,t5e,k$,VWr,a5e,XWr,Kze,vr,S$,zWr,sf,QWr,poe,WWr,HWr,_oe,UWr,JWr,YWr,R$,KWr,n5e,ZWr,eHr,oHr,Jt,P$,rHr,s5e,tHr,aHr,lf,nHr,l5e,sHr,lHr,uoe,iHr,dHr,cHr,F5,fHr,Wr,B$,mHr,i5e,gHr,hHr,An,pHr,d5e,_Hr,uHr,c5e,bHr,vHr,f5e,FHr,THr,MHr,ke,T5,m5e,EHr,CHr,boe,wHr,AHr,LHr,M5,g5e,yHr,xHr,voe,$Hr,kHr,SHr,E5,h5e,RHr,PHr,Foe,BHr,IHr,NHr,C5,p5e,qHr,jHr,Toe,DHr,GHr,OHr,w5,_5e,VHr,XHr,Moe,zHr,QHr,WHr,A5,u5e,HHr,UHr,Eoe,JHr,YHr,KHr,L5,b5e,ZHr,eUr,Coe,oUr,rUr,tUr,y5,v5e,aUr,nUr,woe,sUr,lUr,iUr,x5,F5e,dUr,cUr,Aoe,fUr,mUr,gUr,$5,T5e,hUr,pUr,Loe,_Ur,uUr,bUr,k5,Zze,df,S5,M5e,I$,vUr,E5e,FUr,eQe,Fr,N$,TUr,cf,MUr,yoe,EUr,CUr,xoe,wUr,AUr,LUr,q$,yUr,C5e,xUr,$Ur,kUr,Yt,j$,SUr,w5e,RUr,PUr,ff,BUr,A5e,IUr,NUr,$oe,qUr,jUr,DUr,R5,GUr,Hr,D$,OUr,L5e,VUr,XUr,Ln,zUr,y5e,QUr,WUr,x5e,HUr,UUr,$5e,JUr,YUr,KUr,Se,P5,k5e,ZUr,eJr,koe,oJr,rJr,tJr,B5,S5e,aJr,nJr,Soe,sJr,lJr,iJr,I5,R5e,dJr,cJr,Roe,fJr,mJr,gJr,N5,P5e,hJr,pJr,Poe,_Jr,uJr,bJr,q5,B5e,vJr,FJr,Boe,TJr,MJr,EJr,j5,I5e,CJr,wJr,Ioe,AJr,LJr,yJr,D5,N5e,xJr,$Jr,Noe,kJr,SJr,RJr,G5,q5e,PJr,BJr,qoe,IJr,NJr,qJr,O5,j5e,jJr,DJr,joe,GJr,OJr,VJr,V5,D5e,XJr,zJr,Doe,QJr,WJr,HJr,X5,oQe,mf,z5,G5e,G$,UJr,O5e,JJr,rQe,Tr,O$,YJr,gf,KJr,Goe,ZJr,eYr,Ooe,oYr,rYr,tYr,V$,aYr,V5e,nYr,sYr,lYr,Kt,X$,iYr,X5e,dYr,cYr,hf,fYr,z5e,mYr,gYr,Voe,hYr,pYr,_Yr,Q5,uYr,Ur,z$,bYr,Q5e,vYr,FYr,yn,TYr,W5e,MYr,EYr,H5e,CYr,wYr,U5e,AYr,LYr,yYr,Re,W5,J5e,xYr,$Yr,Xoe,kYr,SYr,RYr,H5,Y5e,PYr,BYr,zoe,IYr,NYr,qYr,U5,K5e,jYr,DYr,Qoe,GYr,OYr,VYr,J5,Z5e,XYr,zYr,Woe,QYr,WYr,HYr,Y5,e0e,UYr,JYr,Hoe,YYr,KYr,ZYr,K5,o0e,eKr,oKr,Uoe,rKr,tKr,aKr,Z5,r0e,nKr,sKr,Joe,lKr,iKr,dKr,e0,t0e,cKr,fKr,Yoe,mKr,gKr,hKr,o0,a0e,pKr,_Kr,Koe,uKr,bKr,vKr,r0,n0e,FKr,TKr,Zoe,MKr,EKr,CKr,t0,tQe,pf,a0,s0e,Q$,wKr,l0e,AKr,aQe,Mr,W$,LKr,_f,yKr,ere,xKr,$Kr,ore,kKr,SKr,RKr,H$,PKr,i0e,BKr,IKr,NKr,Zt,U$,qKr,d0e,jKr,DKr,uf,GKr,c0e,OKr,VKr,rre,XKr,zKr,QKr,n0,WKr,Jr,J$,HKr,f0e,UKr,JKr,xn,YKr,m0e,KKr,ZKr,g0e,eZr,oZr,h0e,rZr,tZr,aZr,Ve,s0,p0e,nZr,sZr,tre,lZr,iZr,dZr,l0,_0e,cZr,fZr,are,mZr,gZr,hZr,i0,u0e,pZr,_Zr,nre,uZr,bZr,vZr,d0,b0e,FZr,TZr,sre,MZr,EZr,CZr,c0,v0e,wZr,AZr,lre,LZr,yZr,xZr,f0,F0e,$Zr,kZr,ire,SZr,RZr,PZr,m0,T0e,BZr,IZr,dre,NZr,qZr,jZr,g0,M0e,DZr,GZr,cre,OZr,VZr,XZr,h0,nQe,bf,p0,E0e,Y$,zZr,C0e,QZr,sQe,Er,K$,WZr,vf,HZr,fre,UZr,JZr,mre,YZr,KZr,ZZr,Z$,eet,w0e,oet,ret,tet,ea,ek,aet,A0e,net,set,Ff,iet,L0e,det,cet,gre,fet,met,get,_0,het,Yr,ok,pet,y0e,_et,uet,$n,bet,x0e,vet,Fet,$0e,Tet,Met,k0e,Eet,Cet,wet,Xe,u0,S0e,Aet,Let,hre,yet,xet,$et,b0,R0e,ket,Set,pre,Ret,Pet,Bet,v0,P0e,Iet,Net,_re,qet,jet,Det,F0,B0e,Get,Oet,ure,Vet,Xet,zet,T0,I0e,Qet,Wet,bre,Het,Uet,Jet,M0,N0e,Yet,Ket,vre,Zet,eot,oot,E0,q0e,rot,tot,Fre,aot,not,sot,C0,j0e,lot,iot,Tre,dot,cot,fot,w0,lQe,Tf,A0,D0e,rk,mot,G0e,got,iQe,Cr,tk,hot,Mf,pot,Mre,_ot,uot,Ere,bot,vot,Fot,ak,Tot,O0e,Mot,Eot,Cot,oa,nk,wot,V0e,Aot,Lot,Ef,yot,X0e,xot,$ot,Cre,kot,Sot,Rot,L0,Pot,Kr,sk,Bot,z0e,Iot,Not,kn,qot,Q0e,jot,Dot,W0e,Got,Oot,H0e,Vot,Xot,zot,U0e,y0,J0e,Qot,Wot,wre,Hot,Uot,Jot,x0,dQe,Cf,$0,Y0e,lk,Yot,K0e,Kot,cQe,wr,ik,Zot,wf,ert,Are,ort,rrt,Lre,trt,art,nrt,dk,srt,Z0e,lrt,irt,drt,ra,ck,crt,ewe,frt,mrt,Af,grt,owe,hrt,prt,yre,_rt,urt,brt,k0,vrt,Zr,fk,Frt,rwe,Trt,Mrt,Sn,Ert,twe,Crt,wrt,awe,Art,Lrt,nwe,yrt,xrt,$rt,mk,S0,swe,krt,Srt,xre,Rrt,Prt,Brt,R0,lwe,Irt,Nrt,$re,qrt,jrt,Drt,P0,fQe,Lf,B0,iwe,gk,Grt,dwe,Ort,mQe,Ar,hk,Vrt,yf,Xrt,kre,zrt,Qrt,Sre,Wrt,Hrt,Urt,pk,Jrt,cwe,Yrt,Krt,Zrt,ta,_k,ett,fwe,ott,rtt,xf,ttt,mwe,att,ntt,Rre,stt,ltt,itt,I0,dtt,et,uk,ctt,gwe,ftt,mtt,Rn,gtt,hwe,htt,ptt,pwe,_tt,utt,_we,btt,vtt,Ftt,uwe,N0,bwe,Ttt,Mtt,Pre,Ett,Ctt,wtt,q0,gQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),iL=new re({}),dL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new Att({props:{warning:!0,$$slots:{default:[cWt]},$$scope:{ctx:$}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L613"}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L636"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),pL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L759"}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L403"}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17469/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),TL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L616"}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),up=new Att({props:{$$slots:{default:[gWt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),LL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L89"}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new Att({props:{$$slots:{default:[pWt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L256"}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L785"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L792"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L807"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),R2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L814"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L821"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L830"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L875"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L882"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L868"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L839"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L846"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L891"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L930"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L857"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L937"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L960"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L944"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),f8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L951"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L969"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L976"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L923"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L898"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L905"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L914"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L411"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2Model">TFSwinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),u9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Z8=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),v9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),V9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),z9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2ForImageClassification">TFSwinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),hx=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),vx=new re({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),Cx=new re({}),wx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),xx=new re({}),$x=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L526"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L533"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L506"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),zx=new re({}),Qx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L517"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L499"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),a$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L542"}}),d$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),I$=new re({}),N$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),G$=new re({}),O$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),X$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),Q$=new re({}),W$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),U$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),Y$=new re({}),K$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),rk=new re({}),tk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),nk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),gk=new re({}),hk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),_k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Li=o("Auto Classes"),Rf=l(),st=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),aL=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),$i=o("Instantiating one of "),Bn=a("a"),nL=o("AutoConfig"),In=o(", "),Nn=a("a"),sL=o("AutoModel"),ki=o(`, and
`),qn=a("a"),lL=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),qS=o("will create a model that is an instance of "),Ri=a("a"),jS=o("BertModel"),DS=o("."),Co=l(),Ra=a("p"),GS=o("There is one class of "),If=a("code"),OS=o("AutoModel"),EHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),iXe=l(),Pi=a("h2"),Nf=a("a"),yae=a("span"),F(iL.$$.fragment),CHe=l(),xae=a("span"),wHe=o("Extending the Auto Classes"),dXe=l(),jn=a("p"),AHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=a("code"),LHe=o("NewModel"),yHe=o(", make sure you have a "),kae=a("code"),xHe=o("NewModelConfig"),$He=o(` then you can add those to the auto
classes like this:`),cXe=l(),F(dL.$$.fragment),fXe=l(),VS=a("p"),kHe=o("You will then be able to use the auto classes like you would usually do!"),mXe=l(),F(qf.$$.fragment),gXe=l(),Bi=a("h2"),jf=a("a"),Sae=a("span"),F(cL.$$.fragment),SHe=l(),Rae=a("span"),RHe=o("AutoConfig"),hXe=l(),wo=a("div"),F(fL.$$.fragment),PHe=l(),mL=a("p"),BHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),XS=a("a"),IHe=o("from_pretrained()"),NHe=o(" class method."),qHe=l(),gL=a("p"),jHe=o("This class cannot be instantiated directly using "),Pae=a("code"),DHe=o("__init__()"),GHe=o(" (throws an error)."),OHe=l(),Lr=a("div"),F(hL.$$.fragment),VHe=l(),Bae=a("p"),XHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),zHe=l(),Ii=a("p"),QHe=o("The configuration class to instantiate is selected based on the "),Iae=a("code"),WHe=o("model_type"),HHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nae=a("code"),UHe=o("pretrained_model_name_or_path"),JHe=o(":"),YHe=l(),A=a("ul"),Df=a("li"),qae=a("strong"),KHe=o("albert"),ZHe=o(" \u2014 "),zS=a("a"),eUe=o("AlbertConfig"),oUe=o(" (ALBERT model)"),rUe=l(),Gf=a("li"),jae=a("strong"),tUe=o("bart"),aUe=o(" \u2014 "),QS=a("a"),nUe=o("BartConfig"),sUe=o(" (BART model)"),lUe=l(),Of=a("li"),Dae=a("strong"),iUe=o("beit"),dUe=o(" \u2014 "),WS=a("a"),cUe=o("BeitConfig"),fUe=o(" (BEiT model)"),mUe=l(),Vf=a("li"),Gae=a("strong"),gUe=o("bert"),hUe=o(" \u2014 "),HS=a("a"),pUe=o("BertConfig"),_Ue=o(" (BERT model)"),uUe=l(),Xf=a("li"),Oae=a("strong"),bUe=o("bert-generation"),vUe=o(" \u2014 "),US=a("a"),FUe=o("BertGenerationConfig"),TUe=o(" (Bert Generation model)"),MUe=l(),zf=a("li"),Vae=a("strong"),EUe=o("big_bird"),CUe=o(" \u2014 "),JS=a("a"),wUe=o("BigBirdConfig"),AUe=o(" (BigBird model)"),LUe=l(),Qf=a("li"),Xae=a("strong"),yUe=o("bigbird_pegasus"),xUe=o(" \u2014 "),YS=a("a"),$Ue=o("BigBirdPegasusConfig"),kUe=o(" (BigBird-Pegasus model)"),SUe=l(),Wf=a("li"),zae=a("strong"),RUe=o("blenderbot"),PUe=o(" \u2014 "),KS=a("a"),BUe=o("BlenderbotConfig"),IUe=o(" (Blenderbot model)"),NUe=l(),Hf=a("li"),Qae=a("strong"),qUe=o("blenderbot-small"),jUe=o(" \u2014 "),ZS=a("a"),DUe=o("BlenderbotSmallConfig"),GUe=o(" (BlenderbotSmall model)"),OUe=l(),Uf=a("li"),Wae=a("strong"),VUe=o("bloom"),XUe=o(" \u2014 "),eR=a("a"),zUe=o("BloomConfig"),QUe=o(" (BLOOM model)"),WUe=l(),Jf=a("li"),Hae=a("strong"),HUe=o("camembert"),UUe=o(" \u2014 "),oR=a("a"),JUe=o("CamembertConfig"),YUe=o(" (CamemBERT model)"),KUe=l(),Yf=a("li"),Uae=a("strong"),ZUe=o("canine"),eJe=o(" \u2014 "),rR=a("a"),oJe=o("CanineConfig"),rJe=o(" (CANINE model)"),tJe=l(),Kf=a("li"),Jae=a("strong"),aJe=o("clip"),nJe=o(" \u2014 "),tR=a("a"),sJe=o("CLIPConfig"),lJe=o(" (CLIP model)"),iJe=l(),Zf=a("li"),Yae=a("strong"),dJe=o("codegen"),cJe=o(" \u2014 "),aR=a("a"),fJe=o("CodeGenConfig"),mJe=o(" (CodeGen model)"),gJe=l(),em=a("li"),Kae=a("strong"),hJe=o("convbert"),pJe=o(" \u2014 "),nR=a("a"),_Je=o("ConvBertConfig"),uJe=o(" (ConvBERT model)"),bJe=l(),om=a("li"),Zae=a("strong"),vJe=o("convnext"),FJe=o(" \u2014 "),sR=a("a"),TJe=o("ConvNextConfig"),MJe=o(" (ConvNeXT model)"),EJe=l(),rm=a("li"),ene=a("strong"),CJe=o("ctrl"),wJe=o(" \u2014 "),lR=a("a"),AJe=o("CTRLConfig"),LJe=o(" (CTRL model)"),yJe=l(),tm=a("li"),one=a("strong"),xJe=o("cvt"),$Je=o(" \u2014 "),iR=a("a"),kJe=o("CvtConfig"),SJe=o(" (CvT model)"),RJe=l(),am=a("li"),rne=a("strong"),PJe=o("data2vec-audio"),BJe=o(" \u2014 "),dR=a("a"),IJe=o("Data2VecAudioConfig"),NJe=o(" (Data2VecAudio model)"),qJe=l(),nm=a("li"),tne=a("strong"),jJe=o("data2vec-text"),DJe=o(" \u2014 "),cR=a("a"),GJe=o("Data2VecTextConfig"),OJe=o(" (Data2VecText model)"),VJe=l(),sm=a("li"),ane=a("strong"),XJe=o("data2vec-vision"),zJe=o(" \u2014 "),fR=a("a"),QJe=o("Data2VecVisionConfig"),WJe=o(" (Data2VecVision model)"),HJe=l(),lm=a("li"),nne=a("strong"),UJe=o("deberta"),JJe=o(" \u2014 "),mR=a("a"),YJe=o("DebertaConfig"),KJe=o(" (DeBERTa model)"),ZJe=l(),im=a("li"),sne=a("strong"),eYe=o("deberta-v2"),oYe=o(" \u2014 "),gR=a("a"),rYe=o("DebertaV2Config"),tYe=o(" (DeBERTa-v2 model)"),aYe=l(),dm=a("li"),lne=a("strong"),nYe=o("decision_transformer"),sYe=o(" \u2014 "),hR=a("a"),lYe=o("DecisionTransformerConfig"),iYe=o(" (Decision Transformer model)"),dYe=l(),cm=a("li"),ine=a("strong"),cYe=o("deit"),fYe=o(" \u2014 "),pR=a("a"),mYe=o("DeiTConfig"),gYe=o(" (DeiT model)"),hYe=l(),fm=a("li"),dne=a("strong"),pYe=o("detr"),_Ye=o(" \u2014 "),_R=a("a"),uYe=o("DetrConfig"),bYe=o(" (DETR model)"),vYe=l(),mm=a("li"),cne=a("strong"),FYe=o("distilbert"),TYe=o(" \u2014 "),uR=a("a"),MYe=o("DistilBertConfig"),EYe=o(" (DistilBERT model)"),CYe=l(),gm=a("li"),fne=a("strong"),wYe=o("dpr"),AYe=o(" \u2014 "),bR=a("a"),LYe=o("DPRConfig"),yYe=o(" (DPR model)"),xYe=l(),hm=a("li"),mne=a("strong"),$Ye=o("dpt"),kYe=o(" \u2014 "),vR=a("a"),SYe=o("DPTConfig"),RYe=o(" (DPT model)"),PYe=l(),pm=a("li"),gne=a("strong"),BYe=o("electra"),IYe=o(" \u2014 "),FR=a("a"),NYe=o("ElectraConfig"),qYe=o(" (ELECTRA model)"),jYe=l(),_m=a("li"),hne=a("strong"),DYe=o("encoder-decoder"),GYe=o(" \u2014 "),TR=a("a"),OYe=o("EncoderDecoderConfig"),VYe=o(" (Encoder decoder model)"),XYe=l(),um=a("li"),pne=a("strong"),zYe=o("flaubert"),QYe=o(" \u2014 "),MR=a("a"),WYe=o("FlaubertConfig"),HYe=o(" (FlauBERT model)"),UYe=l(),bm=a("li"),_ne=a("strong"),JYe=o("flava"),YYe=o(" \u2014 "),ER=a("a"),KYe=o("FlavaConfig"),ZYe=o(" (FLAVA model)"),eKe=l(),vm=a("li"),une=a("strong"),oKe=o("fnet"),rKe=o(" \u2014 "),CR=a("a"),tKe=o("FNetConfig"),aKe=o(" (FNet model)"),nKe=l(),Fm=a("li"),bne=a("strong"),sKe=o("fsmt"),lKe=o(" \u2014 "),wR=a("a"),iKe=o("FSMTConfig"),dKe=o(" (FairSeq Machine-Translation model)"),cKe=l(),Tm=a("li"),vne=a("strong"),fKe=o("funnel"),mKe=o(" \u2014 "),AR=a("a"),gKe=o("FunnelConfig"),hKe=o(" (Funnel Transformer model)"),pKe=l(),Mm=a("li"),Fne=a("strong"),_Ke=o("glpn"),uKe=o(" \u2014 "),LR=a("a"),bKe=o("GLPNConfig"),vKe=o(" (GLPN model)"),FKe=l(),Em=a("li"),Tne=a("strong"),TKe=o("gpt2"),MKe=o(" \u2014 "),yR=a("a"),EKe=o("GPT2Config"),CKe=o(" (OpenAI GPT-2 model)"),wKe=l(),Cm=a("li"),Mne=a("strong"),AKe=o("gpt_neo"),LKe=o(" \u2014 "),xR=a("a"),yKe=o("GPTNeoConfig"),xKe=o(" (GPT Neo model)"),$Ke=l(),wm=a("li"),Ene=a("strong"),kKe=o("gpt_neox"),SKe=o(" \u2014 "),$R=a("a"),RKe=o("GPTNeoXConfig"),PKe=o(" (GPT NeoX model)"),BKe=l(),Am=a("li"),Cne=a("strong"),IKe=o("gptj"),NKe=o(" \u2014 "),kR=a("a"),qKe=o("GPTJConfig"),jKe=o(" (GPT-J model)"),DKe=l(),Lm=a("li"),wne=a("strong"),GKe=o("groupvit"),OKe=o(" \u2014 "),SR=a("a"),VKe=o("GroupViTConfig"),XKe=o(" (GroupViT model)"),zKe=l(),ym=a("li"),Ane=a("strong"),QKe=o("hubert"),WKe=o(" \u2014 "),RR=a("a"),HKe=o("HubertConfig"),UKe=o(" (Hubert model)"),JKe=l(),xm=a("li"),Lne=a("strong"),YKe=o("ibert"),KKe=o(" \u2014 "),PR=a("a"),ZKe=o("IBertConfig"),eZe=o(" (I-BERT model)"),oZe=l(),$m=a("li"),yne=a("strong"),rZe=o("imagegpt"),tZe=o(" \u2014 "),BR=a("a"),aZe=o("ImageGPTConfig"),nZe=o(" (ImageGPT model)"),sZe=l(),km=a("li"),xne=a("strong"),lZe=o("layoutlm"),iZe=o(" \u2014 "),IR=a("a"),dZe=o("LayoutLMConfig"),cZe=o(" (LayoutLM model)"),fZe=l(),Sm=a("li"),$ne=a("strong"),mZe=o("layoutlmv2"),gZe=o(" \u2014 "),NR=a("a"),hZe=o("LayoutLMv2Config"),pZe=o(" (LayoutLMv2 model)"),_Ze=l(),Rm=a("li"),kne=a("strong"),uZe=o("layoutlmv3"),bZe=o(" \u2014 "),qR=a("a"),vZe=o("LayoutLMv3Config"),FZe=o(" (LayoutLMv3 model)"),TZe=l(),Pm=a("li"),Sne=a("strong"),MZe=o("led"),EZe=o(" \u2014 "),jR=a("a"),CZe=o("LEDConfig"),wZe=o(" (LED model)"),AZe=l(),Bm=a("li"),Rne=a("strong"),LZe=o("levit"),yZe=o(" \u2014 "),DR=a("a"),xZe=o("LevitConfig"),$Ze=o(" (LeViT model)"),kZe=l(),Im=a("li"),Pne=a("strong"),SZe=o("longformer"),RZe=o(" \u2014 "),GR=a("a"),PZe=o("LongformerConfig"),BZe=o(" (Longformer model)"),IZe=l(),Nm=a("li"),Bne=a("strong"),NZe=o("longt5"),qZe=o(" \u2014 "),OR=a("a"),jZe=o("LongT5Config"),DZe=o(" (LongT5 model)"),GZe=l(),qm=a("li"),Ine=a("strong"),OZe=o("luke"),VZe=o(" \u2014 "),VR=a("a"),XZe=o("LukeConfig"),zZe=o(" (LUKE model)"),QZe=l(),jm=a("li"),Nne=a("strong"),WZe=o("lxmert"),HZe=o(" \u2014 "),XR=a("a"),UZe=o("LxmertConfig"),JZe=o(" (LXMERT model)"),YZe=l(),Dm=a("li"),qne=a("strong"),KZe=o("m2m_100"),ZZe=o(" \u2014 "),zR=a("a"),eeo=o("M2M100Config"),oeo=o(" (M2M100 model)"),reo=l(),Gm=a("li"),jne=a("strong"),teo=o("marian"),aeo=o(" \u2014 "),QR=a("a"),neo=o("MarianConfig"),seo=o(" (Marian model)"),leo=l(),Om=a("li"),Dne=a("strong"),ieo=o("maskformer"),deo=o(" \u2014 "),WR=a("a"),ceo=o("MaskFormerConfig"),feo=o(" (MaskFormer model)"),meo=l(),Vm=a("li"),Gne=a("strong"),geo=o("mbart"),heo=o(" \u2014 "),HR=a("a"),peo=o("MBartConfig"),_eo=o(" (mBART model)"),ueo=l(),Xm=a("li"),One=a("strong"),beo=o("mctct"),veo=o(" \u2014 "),UR=a("a"),Feo=o("MCTCTConfig"),Teo=o(" (M-CTC-T model)"),Meo=l(),zm=a("li"),Vne=a("strong"),Eeo=o("megatron-bert"),Ceo=o(" \u2014 "),JR=a("a"),weo=o("MegatronBertConfig"),Aeo=o(" (Megatron-BERT model)"),Leo=l(),Qm=a("li"),Xne=a("strong"),yeo=o("mobilebert"),xeo=o(" \u2014 "),YR=a("a"),$eo=o("MobileBertConfig"),keo=o(" (MobileBERT model)"),Seo=l(),Wm=a("li"),zne=a("strong"),Reo=o("mobilevit"),Peo=o(" \u2014 "),KR=a("a"),Beo=o("MobileViTConfig"),Ieo=o(" (MobileViT model)"),Neo=l(),Hm=a("li"),Qne=a("strong"),qeo=o("mpnet"),jeo=o(" \u2014 "),ZR=a("a"),Deo=o("MPNetConfig"),Geo=o(" (MPNet model)"),Oeo=l(),Um=a("li"),Wne=a("strong"),Veo=o("mt5"),Xeo=o(" \u2014 "),eP=a("a"),zeo=o("MT5Config"),Qeo=o(" (MT5 model)"),Weo=l(),Jm=a("li"),Hne=a("strong"),Heo=o("mvp"),Ueo=o(" \u2014 "),oP=a("a"),Jeo=o("MvpConfig"),Yeo=o(" (MVP model)"),Keo=l(),Ym=a("li"),Une=a("strong"),Zeo=o("nezha"),eoo=o(" \u2014 "),rP=a("a"),ooo=o("NezhaConfig"),roo=o(" (Nezha model)"),too=l(),Km=a("li"),Jne=a("strong"),aoo=o("nystromformer"),noo=o(" \u2014 "),tP=a("a"),soo=o("NystromformerConfig"),loo=o(" (Nystr\xF6mformer model)"),ioo=l(),Zm=a("li"),Yne=a("strong"),doo=o("openai-gpt"),coo=o(" \u2014 "),aP=a("a"),foo=o("OpenAIGPTConfig"),moo=o(" (OpenAI GPT model)"),goo=l(),eg=a("li"),Kne=a("strong"),hoo=o("opt"),poo=o(" \u2014 "),nP=a("a"),_oo=o("OPTConfig"),uoo=o(" (OPT model)"),boo=l(),og=a("li"),Zne=a("strong"),voo=o("pegasus"),Foo=o(" \u2014 "),sP=a("a"),Too=o("PegasusConfig"),Moo=o(" (Pegasus model)"),Eoo=l(),rg=a("li"),ese=a("strong"),Coo=o("perceiver"),woo=o(" \u2014 "),lP=a("a"),Aoo=o("PerceiverConfig"),Loo=o(" (Perceiver model)"),yoo=l(),tg=a("li"),ose=a("strong"),xoo=o("plbart"),$oo=o(" \u2014 "),iP=a("a"),koo=o("PLBartConfig"),Soo=o(" (PLBart model)"),Roo=l(),ag=a("li"),rse=a("strong"),Poo=o("poolformer"),Boo=o(" \u2014 "),dP=a("a"),Ioo=o("PoolFormerConfig"),Noo=o(" (PoolFormer model)"),qoo=l(),ng=a("li"),tse=a("strong"),joo=o("prophetnet"),Doo=o(" \u2014 "),cP=a("a"),Goo=o("ProphetNetConfig"),Ooo=o(" (ProphetNet model)"),Voo=l(),sg=a("li"),ase=a("strong"),Xoo=o("qdqbert"),zoo=o(" \u2014 "),fP=a("a"),Qoo=o("QDQBertConfig"),Woo=o(" (QDQBert model)"),Hoo=l(),lg=a("li"),nse=a("strong"),Uoo=o("rag"),Joo=o(" \u2014 "),mP=a("a"),Yoo=o("RagConfig"),Koo=o(" (RAG model)"),Zoo=l(),ig=a("li"),sse=a("strong"),ero=o("realm"),oro=o(" \u2014 "),gP=a("a"),rro=o("RealmConfig"),tro=o(" (REALM model)"),aro=l(),dg=a("li"),lse=a("strong"),nro=o("reformer"),sro=o(" \u2014 "),hP=a("a"),lro=o("ReformerConfig"),iro=o(" (Reformer model)"),dro=l(),cg=a("li"),ise=a("strong"),cro=o("regnet"),fro=o(" \u2014 "),pP=a("a"),mro=o("RegNetConfig"),gro=o(" (RegNet model)"),hro=l(),fg=a("li"),dse=a("strong"),pro=o("rembert"),_ro=o(" \u2014 "),_P=a("a"),uro=o("RemBertConfig"),bro=o(" (RemBERT model)"),vro=l(),mg=a("li"),cse=a("strong"),Fro=o("resnet"),Tro=o(" \u2014 "),uP=a("a"),Mro=o("ResNetConfig"),Ero=o(" (ResNet model)"),Cro=l(),gg=a("li"),fse=a("strong"),wro=o("retribert"),Aro=o(" \u2014 "),bP=a("a"),Lro=o("RetriBertConfig"),yro=o(" (RetriBERT model)"),xro=l(),hg=a("li"),mse=a("strong"),$ro=o("roberta"),kro=o(" \u2014 "),vP=a("a"),Sro=o("RobertaConfig"),Rro=o(" (RoBERTa model)"),Pro=l(),pg=a("li"),gse=a("strong"),Bro=o("roformer"),Iro=o(" \u2014 "),FP=a("a"),Nro=o("RoFormerConfig"),qro=o(" (RoFormer model)"),jro=l(),_g=a("li"),hse=a("strong"),Dro=o("segformer"),Gro=o(" \u2014 "),TP=a("a"),Oro=o("SegformerConfig"),Vro=o(" (SegFormer model)"),Xro=l(),ug=a("li"),pse=a("strong"),zro=o("sew"),Qro=o(" \u2014 "),MP=a("a"),Wro=o("SEWConfig"),Hro=o(" (SEW model)"),Uro=l(),bg=a("li"),_se=a("strong"),Jro=o("sew-d"),Yro=o(" \u2014 "),EP=a("a"),Kro=o("SEWDConfig"),Zro=o(" (SEW-D model)"),eto=l(),vg=a("li"),use=a("strong"),oto=o("speech-encoder-decoder"),rto=o(" \u2014 "),CP=a("a"),tto=o("SpeechEncoderDecoderConfig"),ato=o(" (Speech Encoder decoder model)"),nto=l(),Fg=a("li"),bse=a("strong"),sto=o("speech_to_text"),lto=o(" \u2014 "),wP=a("a"),ito=o("Speech2TextConfig"),dto=o(" (Speech2Text model)"),cto=l(),Tg=a("li"),vse=a("strong"),fto=o("speech_to_text_2"),mto=o(" \u2014 "),AP=a("a"),gto=o("Speech2Text2Config"),hto=o(" (Speech2Text2 model)"),pto=l(),Mg=a("li"),Fse=a("strong"),_to=o("splinter"),uto=o(" \u2014 "),LP=a("a"),bto=o("SplinterConfig"),vto=o(" (Splinter model)"),Fto=l(),Eg=a("li"),Tse=a("strong"),Tto=o("squeezebert"),Mto=o(" \u2014 "),yP=a("a"),Eto=o("SqueezeBertConfig"),Cto=o(" (SqueezeBERT model)"),wto=l(),Cg=a("li"),Mse=a("strong"),Ato=o("swin"),Lto=o(" \u2014 "),xP=a("a"),yto=o("SwinConfig"),xto=o(" (Swin Transformer model)"),$to=l(),wg=a("li"),Ese=a("strong"),kto=o("swinv2"),Sto=o(" \u2014 "),$P=a("a"),Rto=o("Swinv2Config"),Pto=o(" (Swin Transformer V2 model)"),Bto=l(),Ag=a("li"),Cse=a("strong"),Ito=o("t5"),Nto=o(" \u2014 "),kP=a("a"),qto=o("T5Config"),jto=o(" (T5 model)"),Dto=l(),Lg=a("li"),wse=a("strong"),Gto=o("tapas"),Oto=o(" \u2014 "),SP=a("a"),Vto=o("TapasConfig"),Xto=o(" (TAPAS model)"),zto=l(),yg=a("li"),Ase=a("strong"),Qto=o("trajectory_transformer"),Wto=o(" \u2014 "),RP=a("a"),Hto=o("TrajectoryTransformerConfig"),Uto=o(" (Trajectory Transformer model)"),Jto=l(),xg=a("li"),Lse=a("strong"),Yto=o("transfo-xl"),Kto=o(" \u2014 "),PP=a("a"),Zto=o("TransfoXLConfig"),eao=o(" (Transformer-XL model)"),oao=l(),$g=a("li"),yse=a("strong"),rao=o("trocr"),tao=o(" \u2014 "),BP=a("a"),aao=o("TrOCRConfig"),nao=o(" (TrOCR model)"),sao=l(),kg=a("li"),xse=a("strong"),lao=o("unispeech"),iao=o(" \u2014 "),IP=a("a"),dao=o("UniSpeechConfig"),cao=o(" (UniSpeech model)"),fao=l(),Sg=a("li"),$se=a("strong"),mao=o("unispeech-sat"),gao=o(" \u2014 "),NP=a("a"),hao=o("UniSpeechSatConfig"),pao=o(" (UniSpeechSat model)"),_ao=l(),Rg=a("li"),kse=a("strong"),uao=o("van"),bao=o(" \u2014 "),qP=a("a"),vao=o("VanConfig"),Fao=o(" (VAN model)"),Tao=l(),Pg=a("li"),Sse=a("strong"),Mao=o("vilt"),Eao=o(" \u2014 "),jP=a("a"),Cao=o("ViltConfig"),wao=o(" (ViLT model)"),Aao=l(),Bg=a("li"),Rse=a("strong"),Lao=o("vision-encoder-decoder"),yao=o(" \u2014 "),DP=a("a"),xao=o("VisionEncoderDecoderConfig"),$ao=o(" (Vision Encoder decoder model)"),kao=l(),Ig=a("li"),Pse=a("strong"),Sao=o("vision-text-dual-encoder"),Rao=o(" \u2014 "),GP=a("a"),Pao=o("VisionTextDualEncoderConfig"),Bao=o(" (VisionTextDualEncoder model)"),Iao=l(),Ng=a("li"),Bse=a("strong"),Nao=o("visual_bert"),qao=o(" \u2014 "),OP=a("a"),jao=o("VisualBertConfig"),Dao=o(" (VisualBERT model)"),Gao=l(),qg=a("li"),Ise=a("strong"),Oao=o("vit"),Vao=o(" \u2014 "),VP=a("a"),Xao=o("ViTConfig"),zao=o(" (ViT model)"),Qao=l(),jg=a("li"),Nse=a("strong"),Wao=o("vit_mae"),Hao=o(" \u2014 "),XP=a("a"),Uao=o("ViTMAEConfig"),Jao=o(" (ViTMAE model)"),Yao=l(),Dg=a("li"),qse=a("strong"),Kao=o("wav2vec2"),Zao=o(" \u2014 "),zP=a("a"),eno=o("Wav2Vec2Config"),ono=o(" (Wav2Vec2 model)"),rno=l(),Gg=a("li"),jse=a("strong"),tno=o("wav2vec2-conformer"),ano=o(" \u2014 "),QP=a("a"),nno=o("Wav2Vec2ConformerConfig"),sno=o(" (Wav2Vec2-Conformer model)"),lno=l(),Og=a("li"),Dse=a("strong"),ino=o("wavlm"),dno=o(" \u2014 "),WP=a("a"),cno=o("WavLMConfig"),fno=o(" (WavLM model)"),mno=l(),Vg=a("li"),Gse=a("strong"),gno=o("xglm"),hno=o(" \u2014 "),HP=a("a"),pno=o("XGLMConfig"),_no=o(" (XGLM model)"),uno=l(),Xg=a("li"),Ose=a("strong"),bno=o("xlm"),vno=o(" \u2014 "),UP=a("a"),Fno=o("XLMConfig"),Tno=o(" (XLM model)"),Mno=l(),zg=a("li"),Vse=a("strong"),Eno=o("xlm-prophetnet"),Cno=o(" \u2014 "),JP=a("a"),wno=o("XLMProphetNetConfig"),Ano=o(" (XLM-ProphetNet model)"),Lno=l(),Qg=a("li"),Xse=a("strong"),yno=o("xlm-roberta"),xno=o(" \u2014 "),YP=a("a"),$no=o("XLMRobertaConfig"),kno=o(" (XLM-RoBERTa model)"),Sno=l(),Wg=a("li"),zse=a("strong"),Rno=o("xlm-roberta-xl"),Pno=o(" \u2014 "),KP=a("a"),Bno=o("XLMRobertaXLConfig"),Ino=o(" (XLM-RoBERTa-XL model)"),Nno=l(),Hg=a("li"),Qse=a("strong"),qno=o("xlnet"),jno=o(" \u2014 "),ZP=a("a"),Dno=o("XLNetConfig"),Gno=o(" (XLNet model)"),Ono=l(),Ug=a("li"),Wse=a("strong"),Vno=o("yolos"),Xno=o(" \u2014 "),eB=a("a"),zno=o("YolosConfig"),Qno=o(" (YOLOS model)"),Wno=l(),Jg=a("li"),Hse=a("strong"),Hno=o("yoso"),Uno=o(" \u2014 "),oB=a("a"),Jno=o("YosoConfig"),Yno=o(" (YOSO model)"),Kno=l(),F(Yg.$$.fragment),Zno=l(),Kg=a("div"),F(pL.$$.fragment),eso=l(),Use=a("p"),oso=o("Register a new configuration for this class."),pXe=l(),Ni=a("h2"),Zg=a("a"),Jse=a("span"),F(_L.$$.fragment),rso=l(),Yse=a("span"),tso=o("AutoTokenizer"),_Xe=l(),Ao=a("div"),F(uL.$$.fragment),aso=l(),bL=a("p"),nso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=a("a"),sso=o("AutoTokenizer.from_pretrained()"),lso=o(" class method."),iso=l(),vL=a("p"),dso=o("This class cannot be instantiated directly using "),Kse=a("code"),cso=o("__init__()"),fso=o(" (throws an error)."),mso=l(),yr=a("div"),F(FL.$$.fragment),gso=l(),Zse=a("p"),hso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pso=l(),Pa=a("p"),_so=o("The tokenizer class to instantiate is selected based on the "),ele=a("code"),uso=o("model_type"),bso=o(` property of the config object (either
passed as an argument or loaded from `),ole=a("code"),vso=o("pretrained_model_name_or_path"),Fso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=a("code"),Tso=o("pretrained_model_name_or_path"),Mso=o(":"),Eso=l(),k=a("ul"),Dn=a("li"),tle=a("strong"),Cso=o("albert"),wso=o(" \u2014 "),tB=a("a"),Aso=o("AlbertTokenizer"),Lso=o(" or "),aB=a("a"),yso=o("AlbertTokenizerFast"),xso=o(" (ALBERT model)"),$so=l(),Gn=a("li"),ale=a("strong"),kso=o("bart"),Sso=o(" \u2014 "),nB=a("a"),Rso=o("BartTokenizer"),Pso=o(" or "),sB=a("a"),Bso=o("BartTokenizerFast"),Iso=o(" (BART model)"),Nso=l(),On=a("li"),nle=a("strong"),qso=o("barthez"),jso=o(" \u2014 "),lB=a("a"),Dso=o("BarthezTokenizer"),Gso=o(" or "),iB=a("a"),Oso=o("BarthezTokenizerFast"),Vso=o(" (BARThez model)"),Xso=l(),eh=a("li"),sle=a("strong"),zso=o("bartpho"),Qso=o(" \u2014 "),dB=a("a"),Wso=o("BartphoTokenizer"),Hso=o(" (BARTpho model)"),Uso=l(),Vn=a("li"),lle=a("strong"),Jso=o("bert"),Yso=o(" \u2014 "),cB=a("a"),Kso=o("BertTokenizer"),Zso=o(" or "),fB=a("a"),elo=o("BertTokenizerFast"),olo=o(" (BERT model)"),rlo=l(),oh=a("li"),ile=a("strong"),tlo=o("bert-generation"),alo=o(" \u2014 "),mB=a("a"),nlo=o("BertGenerationTokenizer"),slo=o(" (Bert Generation model)"),llo=l(),rh=a("li"),dle=a("strong"),ilo=o("bert-japanese"),dlo=o(" \u2014 "),gB=a("a"),clo=o("BertJapaneseTokenizer"),flo=o(" (BertJapanese model)"),mlo=l(),th=a("li"),cle=a("strong"),glo=o("bertweet"),hlo=o(" \u2014 "),hB=a("a"),plo=o("BertweetTokenizer"),_lo=o(" (BERTweet model)"),ulo=l(),Xn=a("li"),fle=a("strong"),blo=o("big_bird"),vlo=o(" \u2014 "),pB=a("a"),Flo=o("BigBirdTokenizer"),Tlo=o(" or "),_B=a("a"),Mlo=o("BigBirdTokenizerFast"),Elo=o(" (BigBird model)"),Clo=l(),zn=a("li"),mle=a("strong"),wlo=o("bigbird_pegasus"),Alo=o(" \u2014 "),uB=a("a"),Llo=o("PegasusTokenizer"),ylo=o(" or "),bB=a("a"),xlo=o("PegasusTokenizerFast"),$lo=o(" (BigBird-Pegasus model)"),klo=l(),Qn=a("li"),gle=a("strong"),Slo=o("blenderbot"),Rlo=o(" \u2014 "),vB=a("a"),Plo=o("BlenderbotTokenizer"),Blo=o(" or "),FB=a("a"),Ilo=o("BlenderbotTokenizerFast"),Nlo=o(" (Blenderbot model)"),qlo=l(),ah=a("li"),hle=a("strong"),jlo=o("blenderbot-small"),Dlo=o(" \u2014 "),TB=a("a"),Glo=o("BlenderbotSmallTokenizer"),Olo=o(" (BlenderbotSmall model)"),Vlo=l(),nh=a("li"),ple=a("strong"),Xlo=o("bloom"),zlo=o(" \u2014 "),MB=a("a"),Qlo=o("BloomTokenizerFast"),Wlo=o(" (BLOOM model)"),Hlo=l(),sh=a("li"),_le=a("strong"),Ulo=o("byt5"),Jlo=o(" \u2014 "),EB=a("a"),Ylo=o("ByT5Tokenizer"),Klo=o(" (ByT5 model)"),Zlo=l(),Wn=a("li"),ule=a("strong"),eio=o("camembert"),oio=o(" \u2014 "),CB=a("a"),rio=o("CamembertTokenizer"),tio=o(" or "),wB=a("a"),aio=o("CamembertTokenizerFast"),nio=o(" (CamemBERT model)"),sio=l(),lh=a("li"),ble=a("strong"),lio=o("canine"),iio=o(" \u2014 "),AB=a("a"),dio=o("CanineTokenizer"),cio=o(" (CANINE model)"),fio=l(),Hn=a("li"),vle=a("strong"),mio=o("clip"),gio=o(" \u2014 "),LB=a("a"),hio=o("CLIPTokenizer"),pio=o(" or "),yB=a("a"),_io=o("CLIPTokenizerFast"),uio=o(" (CLIP model)"),bio=l(),Un=a("li"),Fle=a("strong"),vio=o("codegen"),Fio=o(" \u2014 "),xB=a("a"),Tio=o("CodeGenTokenizer"),Mio=o(" or "),$B=a("a"),Eio=o("CodeGenTokenizerFast"),Cio=o(" (CodeGen model)"),wio=l(),Jn=a("li"),Tle=a("strong"),Aio=o("convbert"),Lio=o(" \u2014 "),kB=a("a"),yio=o("ConvBertTokenizer"),xio=o(" or "),SB=a("a"),$io=o("ConvBertTokenizerFast"),kio=o(" (ConvBERT model)"),Sio=l(),Yn=a("li"),Mle=a("strong"),Rio=o("cpm"),Pio=o(" \u2014 "),RB=a("a"),Bio=o("CpmTokenizer"),Iio=o(" or "),PB=a("a"),Nio=o("CpmTokenizerFast"),qio=o(" (CPM model)"),jio=l(),ih=a("li"),Ele=a("strong"),Dio=o("ctrl"),Gio=o(" \u2014 "),BB=a("a"),Oio=o("CTRLTokenizer"),Vio=o(" (CTRL model)"),Xio=l(),Kn=a("li"),Cle=a("strong"),zio=o("data2vec-text"),Qio=o(" \u2014 "),IB=a("a"),Wio=o("RobertaTokenizer"),Hio=o(" or "),NB=a("a"),Uio=o("RobertaTokenizerFast"),Jio=o(" (Data2VecText model)"),Yio=l(),Zn=a("li"),wle=a("strong"),Kio=o("deberta"),Zio=o(" \u2014 "),qB=a("a"),edo=o("DebertaTokenizer"),odo=o(" or "),jB=a("a"),rdo=o("DebertaTokenizerFast"),tdo=o(" (DeBERTa model)"),ado=l(),es=a("li"),Ale=a("strong"),ndo=o("deberta-v2"),sdo=o(" \u2014 "),DB=a("a"),ldo=o("DebertaV2Tokenizer"),ido=o(" or "),GB=a("a"),ddo=o("DebertaV2TokenizerFast"),cdo=o(" (DeBERTa-v2 model)"),fdo=l(),os=a("li"),Lle=a("strong"),mdo=o("distilbert"),gdo=o(" \u2014 "),OB=a("a"),hdo=o("DistilBertTokenizer"),pdo=o(" or "),VB=a("a"),_do=o("DistilBertTokenizerFast"),udo=o(" (DistilBERT model)"),bdo=l(),rs=a("li"),yle=a("strong"),vdo=o("dpr"),Fdo=o(" \u2014 "),XB=a("a"),Tdo=o("DPRQuestionEncoderTokenizer"),Mdo=o(" or "),zB=a("a"),Edo=o("DPRQuestionEncoderTokenizerFast"),Cdo=o(" (DPR model)"),wdo=l(),ts=a("li"),xle=a("strong"),Ado=o("electra"),Ldo=o(" \u2014 "),QB=a("a"),ydo=o("ElectraTokenizer"),xdo=o(" or "),WB=a("a"),$do=o("ElectraTokenizerFast"),kdo=o(" (ELECTRA model)"),Sdo=l(),dh=a("li"),$le=a("strong"),Rdo=o("flaubert"),Pdo=o(" \u2014 "),HB=a("a"),Bdo=o("FlaubertTokenizer"),Ido=o(" (FlauBERT model)"),Ndo=l(),as=a("li"),kle=a("strong"),qdo=o("fnet"),jdo=o(" \u2014 "),UB=a("a"),Ddo=o("FNetTokenizer"),Gdo=o(" or "),JB=a("a"),Odo=o("FNetTokenizerFast"),Vdo=o(" (FNet model)"),Xdo=l(),ch=a("li"),Sle=a("strong"),zdo=o("fsmt"),Qdo=o(" \u2014 "),YB=a("a"),Wdo=o("FSMTTokenizer"),Hdo=o(" (FairSeq Machine-Translation model)"),Udo=l(),ns=a("li"),Rle=a("strong"),Jdo=o("funnel"),Ydo=o(" \u2014 "),KB=a("a"),Kdo=o("FunnelTokenizer"),Zdo=o(" or "),ZB=a("a"),eco=o("FunnelTokenizerFast"),oco=o(" (Funnel Transformer model)"),rco=l(),ss=a("li"),Ple=a("strong"),tco=o("gpt2"),aco=o(" \u2014 "),eI=a("a"),nco=o("GPT2Tokenizer"),sco=o(" or "),oI=a("a"),lco=o("GPT2TokenizerFast"),ico=o(" (OpenAI GPT-2 model)"),dco=l(),ls=a("li"),Ble=a("strong"),cco=o("gpt_neo"),fco=o(" \u2014 "),rI=a("a"),mco=o("GPT2Tokenizer"),gco=o(" or "),tI=a("a"),hco=o("GPT2TokenizerFast"),pco=o(" (GPT Neo model)"),_co=l(),fh=a("li"),Ile=a("strong"),uco=o("gpt_neox"),bco=o(" \u2014 "),aI=a("a"),vco=o("GPTNeoXTokenizerFast"),Fco=o(" (GPT NeoX model)"),Tco=l(),is=a("li"),Nle=a("strong"),Mco=o("gptj"),Eco=o(" \u2014 "),nI=a("a"),Cco=o("GPT2Tokenizer"),wco=o(" or "),sI=a("a"),Aco=o("GPT2TokenizerFast"),Lco=o(" (GPT-J model)"),yco=l(),ds=a("li"),qle=a("strong"),xco=o("groupvit"),$co=o(" \u2014 "),lI=a("a"),kco=o("CLIPTokenizer"),Sco=o(" or "),iI=a("a"),Rco=o("CLIPTokenizerFast"),Pco=o(" (GroupViT model)"),Bco=l(),cs=a("li"),jle=a("strong"),Ico=o("herbert"),Nco=o(" \u2014 "),dI=a("a"),qco=o("HerbertTokenizer"),jco=o(" or "),cI=a("a"),Dco=o("HerbertTokenizerFast"),Gco=o(" (HerBERT model)"),Oco=l(),mh=a("li"),Dle=a("strong"),Vco=o("hubert"),Xco=o(" \u2014 "),fI=a("a"),zco=o("Wav2Vec2CTCTokenizer"),Qco=o(" (Hubert model)"),Wco=l(),fs=a("li"),Gle=a("strong"),Hco=o("ibert"),Uco=o(" \u2014 "),mI=a("a"),Jco=o("RobertaTokenizer"),Yco=o(" or "),gI=a("a"),Kco=o("RobertaTokenizerFast"),Zco=o(" (I-BERT model)"),efo=l(),ms=a("li"),Ole=a("strong"),ofo=o("layoutlm"),rfo=o(" \u2014 "),hI=a("a"),tfo=o("LayoutLMTokenizer"),afo=o(" or "),pI=a("a"),nfo=o("LayoutLMTokenizerFast"),sfo=o(" (LayoutLM model)"),lfo=l(),gs=a("li"),Vle=a("strong"),ifo=o("layoutlmv2"),dfo=o(" \u2014 "),_I=a("a"),cfo=o("LayoutLMv2Tokenizer"),ffo=o(" or "),uI=a("a"),mfo=o("LayoutLMv2TokenizerFast"),gfo=o(" (LayoutLMv2 model)"),hfo=l(),hs=a("li"),Xle=a("strong"),pfo=o("layoutlmv3"),_fo=o(" \u2014 "),bI=a("a"),ufo=o("LayoutLMv3Tokenizer"),bfo=o(" or "),vI=a("a"),vfo=o("LayoutLMv3TokenizerFast"),Ffo=o(" (LayoutLMv3 model)"),Tfo=l(),ps=a("li"),zle=a("strong"),Mfo=o("layoutxlm"),Efo=o(" \u2014 "),FI=a("a"),Cfo=o("LayoutXLMTokenizer"),wfo=o(" or "),TI=a("a"),Afo=o("LayoutXLMTokenizerFast"),Lfo=o(" (LayoutXLM model)"),yfo=l(),_s=a("li"),Qle=a("strong"),xfo=o("led"),$fo=o(" \u2014 "),MI=a("a"),kfo=o("LEDTokenizer"),Sfo=o(" or "),EI=a("a"),Rfo=o("LEDTokenizerFast"),Pfo=o(" (LED model)"),Bfo=l(),us=a("li"),Wle=a("strong"),Ifo=o("longformer"),Nfo=o(" \u2014 "),CI=a("a"),qfo=o("LongformerTokenizer"),jfo=o(" or "),wI=a("a"),Dfo=o("LongformerTokenizerFast"),Gfo=o(" (Longformer model)"),Ofo=l(),bs=a("li"),Hle=a("strong"),Vfo=o("longt5"),Xfo=o(" \u2014 "),AI=a("a"),zfo=o("T5Tokenizer"),Qfo=o(" or "),LI=a("a"),Wfo=o("T5TokenizerFast"),Hfo=o(" (LongT5 model)"),Ufo=l(),gh=a("li"),Ule=a("strong"),Jfo=o("luke"),Yfo=o(" \u2014 "),yI=a("a"),Kfo=o("LukeTokenizer"),Zfo=o(" (LUKE model)"),emo=l(),vs=a("li"),Jle=a("strong"),omo=o("lxmert"),rmo=o(" \u2014 "),xI=a("a"),tmo=o("LxmertTokenizer"),amo=o(" or "),$I=a("a"),nmo=o("LxmertTokenizerFast"),smo=o(" (LXMERT model)"),lmo=l(),hh=a("li"),Yle=a("strong"),imo=o("m2m_100"),dmo=o(" \u2014 "),kI=a("a"),cmo=o("M2M100Tokenizer"),fmo=o(" (M2M100 model)"),mmo=l(),ph=a("li"),Kle=a("strong"),gmo=o("marian"),hmo=o(" \u2014 "),SI=a("a"),pmo=o("MarianTokenizer"),_mo=o(" (Marian model)"),umo=l(),Fs=a("li"),Zle=a("strong"),bmo=o("mbart"),vmo=o(" \u2014 "),RI=a("a"),Fmo=o("MBartTokenizer"),Tmo=o(" or "),PI=a("a"),Mmo=o("MBartTokenizerFast"),Emo=o(" (mBART model)"),Cmo=l(),Ts=a("li"),eie=a("strong"),wmo=o("mbart50"),Amo=o(" \u2014 "),BI=a("a"),Lmo=o("MBart50Tokenizer"),ymo=o(" or "),II=a("a"),xmo=o("MBart50TokenizerFast"),$mo=o(" (mBART-50 model)"),kmo=l(),Ms=a("li"),oie=a("strong"),Smo=o("megatron-bert"),Rmo=o(" \u2014 "),NI=a("a"),Pmo=o("BertTokenizer"),Bmo=o(" or "),qI=a("a"),Imo=o("BertTokenizerFast"),Nmo=o(" (Megatron-BERT model)"),qmo=l(),_h=a("li"),rie=a("strong"),jmo=o("mluke"),Dmo=o(" \u2014 "),jI=a("a"),Gmo=o("MLukeTokenizer"),Omo=o(" (mLUKE model)"),Vmo=l(),Es=a("li"),tie=a("strong"),Xmo=o("mobilebert"),zmo=o(" \u2014 "),DI=a("a"),Qmo=o("MobileBertTokenizer"),Wmo=o(" or "),GI=a("a"),Hmo=o("MobileBertTokenizerFast"),Umo=o(" (MobileBERT model)"),Jmo=l(),Cs=a("li"),aie=a("strong"),Ymo=o("mpnet"),Kmo=o(" \u2014 "),OI=a("a"),Zmo=o("MPNetTokenizer"),ego=o(" or "),VI=a("a"),ogo=o("MPNetTokenizerFast"),rgo=o(" (MPNet model)"),tgo=l(),ws=a("li"),nie=a("strong"),ago=o("mt5"),ngo=o(" \u2014 "),XI=a("a"),sgo=o("MT5Tokenizer"),lgo=o(" or "),zI=a("a"),igo=o("MT5TokenizerFast"),dgo=o(" (MT5 model)"),cgo=l(),As=a("li"),sie=a("strong"),fgo=o("mvp"),mgo=o(" \u2014 "),QI=a("a"),ggo=o("MvpTokenizer"),hgo=o(" or "),WI=a("a"),pgo=o("MvpTokenizerFast"),_go=o(" (MVP model)"),ugo=l(),Ls=a("li"),lie=a("strong"),bgo=o("nezha"),vgo=o(" \u2014 "),HI=a("a"),Fgo=o("BertTokenizer"),Tgo=o(" or "),UI=a("a"),Mgo=o("BertTokenizerFast"),Ego=o(" (Nezha model)"),Cgo=l(),ys=a("li"),iie=a("strong"),wgo=o("nystromformer"),Ago=o(" \u2014 "),JI=a("a"),Lgo=o("AlbertTokenizer"),ygo=o(" or "),YI=a("a"),xgo=o("AlbertTokenizerFast"),$go=o(" (Nystr\xF6mformer model)"),kgo=l(),xs=a("li"),die=a("strong"),Sgo=o("openai-gpt"),Rgo=o(" \u2014 "),KI=a("a"),Pgo=o("OpenAIGPTTokenizer"),Bgo=o(" or "),ZI=a("a"),Igo=o("OpenAIGPTTokenizerFast"),Ngo=o(" (OpenAI GPT model)"),qgo=l(),uh=a("li"),cie=a("strong"),jgo=o("opt"),Dgo=o(" \u2014 "),eN=a("a"),Ggo=o("GPT2Tokenizer"),Ogo=o(" (OPT model)"),Vgo=l(),$s=a("li"),fie=a("strong"),Xgo=o("pegasus"),zgo=o(" \u2014 "),oN=a("a"),Qgo=o("PegasusTokenizer"),Wgo=o(" or "),rN=a("a"),Hgo=o("PegasusTokenizerFast"),Ugo=o(" (Pegasus model)"),Jgo=l(),bh=a("li"),mie=a("strong"),Ygo=o("perceiver"),Kgo=o(" \u2014 "),tN=a("a"),Zgo=o("PerceiverTokenizer"),eho=o(" (Perceiver model)"),oho=l(),vh=a("li"),gie=a("strong"),rho=o("phobert"),tho=o(" \u2014 "),aN=a("a"),aho=o("PhobertTokenizer"),nho=o(" (PhoBERT model)"),sho=l(),Fh=a("li"),hie=a("strong"),lho=o("plbart"),iho=o(" \u2014 "),nN=a("a"),dho=o("PLBartTokenizer"),cho=o(" (PLBart model)"),fho=l(),Th=a("li"),pie=a("strong"),mho=o("prophetnet"),gho=o(" \u2014 "),sN=a("a"),hho=o("ProphetNetTokenizer"),pho=o(" (ProphetNet model)"),_ho=l(),ks=a("li"),_ie=a("strong"),uho=o("qdqbert"),bho=o(" \u2014 "),lN=a("a"),vho=o("BertTokenizer"),Fho=o(" or "),iN=a("a"),Tho=o("BertTokenizerFast"),Mho=o(" (QDQBert model)"),Eho=l(),Mh=a("li"),uie=a("strong"),Cho=o("rag"),who=o(" \u2014 "),dN=a("a"),Aho=o("RagTokenizer"),Lho=o(" (RAG model)"),yho=l(),Ss=a("li"),bie=a("strong"),xho=o("realm"),$ho=o(" \u2014 "),cN=a("a"),kho=o("RealmTokenizer"),Sho=o(" or "),fN=a("a"),Rho=o("RealmTokenizerFast"),Pho=o(" (REALM model)"),Bho=l(),Rs=a("li"),vie=a("strong"),Iho=o("reformer"),Nho=o(" \u2014 "),mN=a("a"),qho=o("ReformerTokenizer"),jho=o(" or "),gN=a("a"),Dho=o("ReformerTokenizerFast"),Gho=o(" (Reformer model)"),Oho=l(),Ps=a("li"),Fie=a("strong"),Vho=o("rembert"),Xho=o(" \u2014 "),hN=a("a"),zho=o("RemBertTokenizer"),Qho=o(" or "),pN=a("a"),Who=o("RemBertTokenizerFast"),Hho=o(" (RemBERT model)"),Uho=l(),Bs=a("li"),Tie=a("strong"),Jho=o("retribert"),Yho=o(" \u2014 "),_N=a("a"),Kho=o("RetriBertTokenizer"),Zho=o(" or "),uN=a("a"),epo=o("RetriBertTokenizerFast"),opo=o(" (RetriBERT model)"),rpo=l(),Is=a("li"),Mie=a("strong"),tpo=o("roberta"),apo=o(" \u2014 "),bN=a("a"),npo=o("RobertaTokenizer"),spo=o(" or "),vN=a("a"),lpo=o("RobertaTokenizerFast"),ipo=o(" (RoBERTa model)"),dpo=l(),Ns=a("li"),Eie=a("strong"),cpo=o("roformer"),fpo=o(" \u2014 "),FN=a("a"),mpo=o("RoFormerTokenizer"),gpo=o(" or "),TN=a("a"),hpo=o("RoFormerTokenizerFast"),ppo=o(" (RoFormer model)"),_po=l(),Eh=a("li"),Cie=a("strong"),upo=o("speech_to_text"),bpo=o(" \u2014 "),MN=a("a"),vpo=o("Speech2TextTokenizer"),Fpo=o(" (Speech2Text model)"),Tpo=l(),Ch=a("li"),wie=a("strong"),Mpo=o("speech_to_text_2"),Epo=o(" \u2014 "),EN=a("a"),Cpo=o("Speech2Text2Tokenizer"),wpo=o(" (Speech2Text2 model)"),Apo=l(),qs=a("li"),Aie=a("strong"),Lpo=o("splinter"),ypo=o(" \u2014 "),CN=a("a"),xpo=o("SplinterTokenizer"),$po=o(" or "),wN=a("a"),kpo=o("SplinterTokenizerFast"),Spo=o(" (Splinter model)"),Rpo=l(),js=a("li"),Lie=a("strong"),Ppo=o("squeezebert"),Bpo=o(" \u2014 "),AN=a("a"),Ipo=o("SqueezeBertTokenizer"),Npo=o(" or "),LN=a("a"),qpo=o("SqueezeBertTokenizerFast"),jpo=o(" (SqueezeBERT model)"),Dpo=l(),Ds=a("li"),yie=a("strong"),Gpo=o("t5"),Opo=o(" \u2014 "),yN=a("a"),Vpo=o("T5Tokenizer"),Xpo=o(" or "),xN=a("a"),zpo=o("T5TokenizerFast"),Qpo=o(" (T5 model)"),Wpo=l(),wh=a("li"),xie=a("strong"),Hpo=o("tapas"),Upo=o(" \u2014 "),$N=a("a"),Jpo=o("TapasTokenizer"),Ypo=o(" (TAPAS model)"),Kpo=l(),Ah=a("li"),$ie=a("strong"),Zpo=o("tapex"),e_o=o(" \u2014 "),kN=a("a"),o_o=o("TapexTokenizer"),r_o=o(" (TAPEX model)"),t_o=l(),Lh=a("li"),kie=a("strong"),a_o=o("transfo-xl"),n_o=o(" \u2014 "),SN=a("a"),s_o=o("TransfoXLTokenizer"),l_o=o(" (Transformer-XL model)"),i_o=l(),Gs=a("li"),Sie=a("strong"),d_o=o("vilt"),c_o=o(" \u2014 "),RN=a("a"),f_o=o("BertTokenizer"),m_o=o(" or "),PN=a("a"),g_o=o("BertTokenizerFast"),h_o=o(" (ViLT model)"),p_o=l(),Os=a("li"),Rie=a("strong"),__o=o("visual_bert"),u_o=o(" \u2014 "),BN=a("a"),b_o=o("BertTokenizer"),v_o=o(" or "),IN=a("a"),F_o=o("BertTokenizerFast"),T_o=o(" (VisualBERT model)"),M_o=l(),yh=a("li"),Pie=a("strong"),E_o=o("wav2vec2"),C_o=o(" \u2014 "),NN=a("a"),w_o=o("Wav2Vec2CTCTokenizer"),A_o=o(" (Wav2Vec2 model)"),L_o=l(),xh=a("li"),Bie=a("strong"),y_o=o("wav2vec2-conformer"),x_o=o(" \u2014 "),qN=a("a"),$_o=o("Wav2Vec2CTCTokenizer"),k_o=o(" (Wav2Vec2-Conformer model)"),S_o=l(),$h=a("li"),Iie=a("strong"),R_o=o("wav2vec2_phoneme"),P_o=o(" \u2014 "),jN=a("a"),B_o=o("Wav2Vec2PhonemeCTCTokenizer"),I_o=o(" (Wav2Vec2Phoneme model)"),N_o=l(),Vs=a("li"),Nie=a("strong"),q_o=o("xglm"),j_o=o(" \u2014 "),DN=a("a"),D_o=o("XGLMTokenizer"),G_o=o(" or "),GN=a("a"),O_o=o("XGLMTokenizerFast"),V_o=o(" (XGLM model)"),X_o=l(),kh=a("li"),qie=a("strong"),z_o=o("xlm"),Q_o=o(" \u2014 "),ON=a("a"),W_o=o("XLMTokenizer"),H_o=o(" (XLM model)"),U_o=l(),Sh=a("li"),jie=a("strong"),J_o=o("xlm-prophetnet"),Y_o=o(" \u2014 "),VN=a("a"),K_o=o("XLMProphetNetTokenizer"),Z_o=o(" (XLM-ProphetNet model)"),euo=l(),Xs=a("li"),Die=a("strong"),ouo=o("xlm-roberta"),ruo=o(" \u2014 "),XN=a("a"),tuo=o("XLMRobertaTokenizer"),auo=o(" or "),zN=a("a"),nuo=o("XLMRobertaTokenizerFast"),suo=o(" (XLM-RoBERTa model)"),luo=l(),zs=a("li"),Gie=a("strong"),iuo=o("xlm-roberta-xl"),duo=o(" \u2014 "),QN=a("a"),cuo=o("RobertaTokenizer"),fuo=o(" or "),WN=a("a"),muo=o("RobertaTokenizerFast"),guo=o(" (XLM-RoBERTa-XL model)"),huo=l(),Qs=a("li"),Oie=a("strong"),puo=o("xlnet"),_uo=o(" \u2014 "),HN=a("a"),uuo=o("XLNetTokenizer"),buo=o(" or "),UN=a("a"),vuo=o("XLNetTokenizerFast"),Fuo=o(" (XLNet model)"),Tuo=l(),Ws=a("li"),Vie=a("strong"),Muo=o("yoso"),Euo=o(" \u2014 "),JN=a("a"),Cuo=o("AlbertTokenizer"),wuo=o(" or "),YN=a("a"),Auo=o("AlbertTokenizerFast"),Luo=o(" (YOSO model)"),yuo=l(),F(Rh.$$.fragment),xuo=l(),Ph=a("div"),F(TL.$$.fragment),$uo=l(),Xie=a("p"),kuo=o("Register a new tokenizer in this mapping."),uXe=l(),qi=a("h2"),Bh=a("a"),zie=a("span"),F(ML.$$.fragment),Suo=l(),Qie=a("span"),Ruo=o("AutoFeatureExtractor"),bXe=l(),Lo=a("div"),F(EL.$$.fragment),Puo=l(),CL=a("p"),Buo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KN=a("a"),Iuo=o("AutoFeatureExtractor.from_pretrained()"),Nuo=o(" class method."),quo=l(),wL=a("p"),juo=o("This class cannot be instantiated directly using "),Wie=a("code"),Duo=o("__init__()"),Guo=o(" (throws an error)."),Ouo=l(),He=a("div"),F(AL.$$.fragment),Vuo=l(),Hie=a("p"),Xuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zuo=l(),Ba=a("p"),Quo=o("The feature extractor class to instantiate is selected based on the "),Uie=a("code"),Wuo=o("model_type"),Huo=o(` property of the config object
(either passed as an argument or loaded from `),Jie=a("code"),Uuo=o("pretrained_model_name_or_path"),Juo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yie=a("code"),Yuo=o("pretrained_model_name_or_path"),Kuo=o(":"),Zuo=l(),J=a("ul"),Ih=a("li"),Kie=a("strong"),e1o=o("beit"),o1o=o(" \u2014 "),ZN=a("a"),r1o=o("BeitFeatureExtractor"),t1o=o(" (BEiT model)"),a1o=l(),Nh=a("li"),Zie=a("strong"),n1o=o("clip"),s1o=o(" \u2014 "),eq=a("a"),l1o=o("CLIPFeatureExtractor"),i1o=o(" (CLIP model)"),d1o=l(),qh=a("li"),ede=a("strong"),c1o=o("convnext"),f1o=o(" \u2014 "),oq=a("a"),m1o=o("ConvNextFeatureExtractor"),g1o=o(" (ConvNeXT model)"),h1o=l(),jh=a("li"),ode=a("strong"),p1o=o("cvt"),_1o=o(" \u2014 "),rq=a("a"),u1o=o("ConvNextFeatureExtractor"),b1o=o(" (CvT model)"),v1o=l(),Dh=a("li"),rde=a("strong"),F1o=o("data2vec-audio"),T1o=o(" \u2014 "),tq=a("a"),M1o=o("Wav2Vec2FeatureExtractor"),E1o=o(" (Data2VecAudio model)"),C1o=l(),Gh=a("li"),tde=a("strong"),w1o=o("data2vec-vision"),A1o=o(" \u2014 "),aq=a("a"),L1o=o("BeitFeatureExtractor"),y1o=o(" (Data2VecVision model)"),x1o=l(),Oh=a("li"),ade=a("strong"),$1o=o("deit"),k1o=o(" \u2014 "),nq=a("a"),S1o=o("DeiTFeatureExtractor"),R1o=o(" (DeiT model)"),P1o=l(),Vh=a("li"),nde=a("strong"),B1o=o("detr"),I1o=o(" \u2014 "),sq=a("a"),N1o=o("DetrFeatureExtractor"),q1o=o(" (DETR model)"),j1o=l(),Xh=a("li"),sde=a("strong"),D1o=o("dpt"),G1o=o(" \u2014 "),lq=a("a"),O1o=o("DPTFeatureExtractor"),V1o=o(" (DPT model)"),X1o=l(),zh=a("li"),lde=a("strong"),z1o=o("flava"),Q1o=o(" \u2014 "),iq=a("a"),W1o=o("FlavaFeatureExtractor"),H1o=o(" (FLAVA model)"),U1o=l(),Qh=a("li"),ide=a("strong"),J1o=o("glpn"),Y1o=o(" \u2014 "),dq=a("a"),K1o=o("GLPNFeatureExtractor"),Z1o=o(" (GLPN model)"),e2o=l(),Wh=a("li"),dde=a("strong"),o2o=o("groupvit"),r2o=o(" \u2014 "),cq=a("a"),t2o=o("CLIPFeatureExtractor"),a2o=o(" (GroupViT model)"),n2o=l(),Hh=a("li"),cde=a("strong"),s2o=o("hubert"),l2o=o(" \u2014 "),fq=a("a"),i2o=o("Wav2Vec2FeatureExtractor"),d2o=o(" (Hubert model)"),c2o=l(),Uh=a("li"),fde=a("strong"),f2o=o("imagegpt"),m2o=o(" \u2014 "),mq=a("a"),g2o=o("ImageGPTFeatureExtractor"),h2o=o(" (ImageGPT model)"),p2o=l(),Jh=a("li"),mde=a("strong"),_2o=o("layoutlmv2"),u2o=o(" \u2014 "),gq=a("a"),b2o=o("LayoutLMv2FeatureExtractor"),v2o=o(" (LayoutLMv2 model)"),F2o=l(),Yh=a("li"),gde=a("strong"),T2o=o("layoutlmv3"),M2o=o(" \u2014 "),hq=a("a"),E2o=o("LayoutLMv3FeatureExtractor"),C2o=o(" (LayoutLMv3 model)"),w2o=l(),Kh=a("li"),hde=a("strong"),A2o=o("levit"),L2o=o(" \u2014 "),pq=a("a"),y2o=o("LevitFeatureExtractor"),x2o=o(" (LeViT model)"),$2o=l(),Zh=a("li"),pde=a("strong"),k2o=o("maskformer"),S2o=o(" \u2014 "),_q=a("a"),R2o=o("MaskFormerFeatureExtractor"),P2o=o(" (MaskFormer model)"),B2o=l(),ep=a("li"),_de=a("strong"),I2o=o("mctct"),N2o=o(" \u2014 "),uq=a("a"),q2o=o("MCTCTFeatureExtractor"),j2o=o(" (M-CTC-T model)"),D2o=l(),op=a("li"),ude=a("strong"),G2o=o("mobilevit"),O2o=o(" \u2014 "),bq=a("a"),V2o=o("MobileViTFeatureExtractor"),X2o=o(" (MobileViT model)"),z2o=l(),rp=a("li"),bde=a("strong"),Q2o=o("perceiver"),W2o=o(" \u2014 "),vq=a("a"),H2o=o("PerceiverFeatureExtractor"),U2o=o(" (Perceiver model)"),J2o=l(),tp=a("li"),vde=a("strong"),Y2o=o("poolformer"),K2o=o(" \u2014 "),Fq=a("a"),Z2o=o("PoolFormerFeatureExtractor"),e4o=o(" (PoolFormer model)"),o4o=l(),ap=a("li"),Fde=a("strong"),r4o=o("regnet"),t4o=o(" \u2014 "),Tq=a("a"),a4o=o("ConvNextFeatureExtractor"),n4o=o(" (RegNet model)"),s4o=l(),np=a("li"),Tde=a("strong"),l4o=o("resnet"),i4o=o(" \u2014 "),Mq=a("a"),d4o=o("ConvNextFeatureExtractor"),c4o=o(" (ResNet model)"),f4o=l(),sp=a("li"),Mde=a("strong"),m4o=o("segformer"),g4o=o(" \u2014 "),Eq=a("a"),h4o=o("SegformerFeatureExtractor"),p4o=o(" (SegFormer model)"),_4o=l(),lp=a("li"),Ede=a("strong"),u4o=o("speech_to_text"),b4o=o(" \u2014 "),Cq=a("a"),v4o=o("Speech2TextFeatureExtractor"),F4o=o(" (Speech2Text model)"),T4o=l(),ip=a("li"),Cde=a("strong"),M4o=o("swin"),E4o=o(" \u2014 "),wq=a("a"),C4o=o("ViTFeatureExtractor"),w4o=o(" (Swin Transformer model)"),A4o=l(),dp=a("li"),wde=a("strong"),L4o=o("swinv2"),y4o=o(" \u2014 "),Aq=a("a"),x4o=o("ViTFeatureExtractor"),$4o=o(" (Swin Transformer V2 model)"),k4o=l(),cp=a("li"),Ade=a("strong"),S4o=o("van"),R4o=o(" \u2014 "),Lq=a("a"),P4o=o("ConvNextFeatureExtractor"),B4o=o(" (VAN model)"),I4o=l(),fp=a("li"),Lde=a("strong"),N4o=o("vilt"),q4o=o(" \u2014 "),yq=a("a"),j4o=o("ViltFeatureExtractor"),D4o=o(" (ViLT model)"),G4o=l(),mp=a("li"),yde=a("strong"),O4o=o("vit"),V4o=o(" \u2014 "),xq=a("a"),X4o=o("ViTFeatureExtractor"),z4o=o(" (ViT model)"),Q4o=l(),gp=a("li"),xde=a("strong"),W4o=o("vit_mae"),H4o=o(" \u2014 "),$q=a("a"),U4o=o("ViTFeatureExtractor"),J4o=o(" (ViTMAE model)"),Y4o=l(),hp=a("li"),$de=a("strong"),K4o=o("wav2vec2"),Z4o=o(" \u2014 "),kq=a("a"),ebo=o("Wav2Vec2FeatureExtractor"),obo=o(" (Wav2Vec2 model)"),rbo=l(),pp=a("li"),kde=a("strong"),tbo=o("wav2vec2-conformer"),abo=o(" \u2014 "),Sq=a("a"),nbo=o("Wav2Vec2FeatureExtractor"),sbo=o(" (Wav2Vec2-Conformer model)"),lbo=l(),_p=a("li"),Sde=a("strong"),ibo=o("yolos"),dbo=o(" \u2014 "),Rq=a("a"),cbo=o("YolosFeatureExtractor"),fbo=o(" (YOLOS model)"),mbo=l(),F(up.$$.fragment),gbo=l(),F(bp.$$.fragment),hbo=l(),vp=a("div"),F(LL.$$.fragment),pbo=l(),Rde=a("p"),_bo=o("Register a new feature extractor for this class."),vXe=l(),ji=a("h2"),Fp=a("a"),Pde=a("span"),F(yL.$$.fragment),ubo=l(),Bde=a("span"),bbo=o("AutoProcessor"),FXe=l(),yo=a("div"),F(xL.$$.fragment),vbo=l(),$L=a("p"),Fbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Pq=a("a"),Tbo=o("AutoProcessor.from_pretrained()"),Mbo=o(" class method."),Ebo=l(),kL=a("p"),Cbo=o("This class cannot be instantiated directly using "),Ide=a("code"),wbo=o("__init__()"),Abo=o(" (throws an error)."),Lbo=l(),Ue=a("div"),F(SL.$$.fragment),ybo=l(),Nde=a("p"),xbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$bo=l(),Di=a("p"),kbo=o("The processor class to instantiate is selected based on the "),qde=a("code"),Sbo=o("model_type"),Rbo=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),Pbo=o("pretrained_model_name_or_path"),Bbo=o(" if possible):"),Ibo=l(),he=a("ul"),Tp=a("li"),Dde=a("strong"),Nbo=o("clip"),qbo=o(" \u2014 "),Bq=a("a"),jbo=o("CLIPProcessor"),Dbo=o(" (CLIP model)"),Gbo=l(),Mp=a("li"),Gde=a("strong"),Obo=o("flava"),Vbo=o(" \u2014 "),Ode=a("code"),Xbo=o("FLAVAProcessor"),zbo=o(" (FLAVA model)"),Qbo=l(),Ep=a("li"),Vde=a("strong"),Wbo=o("groupvit"),Hbo=o(" \u2014 "),Iq=a("a"),Ubo=o("CLIPProcessor"),Jbo=o(" (GroupViT model)"),Ybo=l(),Cp=a("li"),Xde=a("strong"),Kbo=o("layoutlmv2"),Zbo=o(" \u2014 "),Nq=a("a"),evo=o("LayoutLMv2Processor"),ovo=o(" (LayoutLMv2 model)"),rvo=l(),wp=a("li"),zde=a("strong"),tvo=o("layoutlmv3"),avo=o(" \u2014 "),qq=a("a"),nvo=o("LayoutLMv3Processor"),svo=o(" (LayoutLMv3 model)"),lvo=l(),Ap=a("li"),Qde=a("strong"),ivo=o("layoutxlm"),dvo=o(" \u2014 "),jq=a("a"),cvo=o("LayoutXLMProcessor"),fvo=o(" (LayoutXLM model)"),mvo=l(),Lp=a("li"),Wde=a("strong"),gvo=o("sew"),hvo=o(" \u2014 "),Dq=a("a"),pvo=o("Wav2Vec2Processor"),_vo=o(" (SEW model)"),uvo=l(),yp=a("li"),Hde=a("strong"),bvo=o("sew-d"),vvo=o(" \u2014 "),Gq=a("a"),Fvo=o("Wav2Vec2Processor"),Tvo=o(" (SEW-D model)"),Mvo=l(),xp=a("li"),Ude=a("strong"),Evo=o("speech_to_text"),Cvo=o(" \u2014 "),Oq=a("a"),wvo=o("Speech2TextProcessor"),Avo=o(" (Speech2Text model)"),Lvo=l(),$p=a("li"),Jde=a("strong"),yvo=o("speech_to_text_2"),xvo=o(" \u2014 "),Vq=a("a"),$vo=o("Speech2Text2Processor"),kvo=o(" (Speech2Text2 model)"),Svo=l(),kp=a("li"),Yde=a("strong"),Rvo=o("trocr"),Pvo=o(" \u2014 "),Xq=a("a"),Bvo=o("TrOCRProcessor"),Ivo=o(" (TrOCR model)"),Nvo=l(),Sp=a("li"),Kde=a("strong"),qvo=o("unispeech"),jvo=o(" \u2014 "),zq=a("a"),Dvo=o("Wav2Vec2Processor"),Gvo=o(" (UniSpeech model)"),Ovo=l(),Rp=a("li"),Zde=a("strong"),Vvo=o("unispeech-sat"),Xvo=o(" \u2014 "),Qq=a("a"),zvo=o("Wav2Vec2Processor"),Qvo=o(" (UniSpeechSat model)"),Wvo=l(),Pp=a("li"),ece=a("strong"),Hvo=o("vilt"),Uvo=o(" \u2014 "),Wq=a("a"),Jvo=o("ViltProcessor"),Yvo=o(" (ViLT model)"),Kvo=l(),Bp=a("li"),oce=a("strong"),Zvo=o("vision-text-dual-encoder"),eFo=o(" \u2014 "),Hq=a("a"),oFo=o("VisionTextDualEncoderProcessor"),rFo=o(" (VisionTextDualEncoder model)"),tFo=l(),Ip=a("li"),rce=a("strong"),aFo=o("wav2vec2"),nFo=o(" \u2014 "),Uq=a("a"),sFo=o("Wav2Vec2Processor"),lFo=o(" (Wav2Vec2 model)"),iFo=l(),Np=a("li"),tce=a("strong"),dFo=o("wav2vec2-conformer"),cFo=o(" \u2014 "),Jq=a("a"),fFo=o("Wav2Vec2Processor"),mFo=o(" (Wav2Vec2-Conformer model)"),gFo=l(),qp=a("li"),ace=a("strong"),hFo=o("wavlm"),pFo=o(" \u2014 "),Yq=a("a"),_Fo=o("Wav2Vec2Processor"),uFo=o(" (WavLM model)"),bFo=l(),F(jp.$$.fragment),vFo=l(),F(Dp.$$.fragment),FFo=l(),Gp=a("div"),F(RL.$$.fragment),TFo=l(),nce=a("p"),MFo=o("Register a new processor for this class."),TXe=l(),Gi=a("h2"),Op=a("a"),sce=a("span"),F(PL.$$.fragment),EFo=l(),lce=a("span"),CFo=o("AutoModel"),MXe=l(),xo=a("div"),F(BL.$$.fragment),wFo=l(),Oi=a("p"),AFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kq=a("a"),LFo=o("from_pretrained()"),yFo=o(" class method or the "),Zq=a("a"),xFo=o("from_config()"),$Fo=o(` class
method.`),kFo=l(),IL=a("p"),SFo=o("This class cannot be instantiated directly using "),ice=a("code"),RFo=o("__init__()"),PFo=o(" (throws an error)."),BFo=l(),lt=a("div"),F(NL.$$.fragment),IFo=l(),dce=a("p"),NFo=o("Instantiates one of the base model classes of the library from a configuration."),qFo=l(),Vi=a("p"),jFo=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),DFo=o("not"),GFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=a("a"),OFo=o("from_pretrained()"),VFo=o(" to load the model weights."),XFo=l(),F(Vp.$$.fragment),zFo=l(),Je=a("div"),F(qL.$$.fragment),QFo=l(),fce=a("p"),WFo=o("Instantiate one of the base model classes of the library from a pretrained model."),HFo=l(),Ia=a("p"),UFo=o("The model class to instantiate is selected based on the "),mce=a("code"),JFo=o("model_type"),YFo=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),KFo=o("pretrained_model_name_or_path"),ZFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),e6o=o("pretrained_model_name_or_path"),o6o=o(":"),r6o=l(),y=a("ul"),Xp=a("li"),pce=a("strong"),t6o=o("albert"),a6o=o(" \u2014 "),oj=a("a"),n6o=o("AlbertModel"),s6o=o(" (ALBERT model)"),l6o=l(),zp=a("li"),_ce=a("strong"),i6o=o("bart"),d6o=o(" \u2014 "),rj=a("a"),c6o=o("BartModel"),f6o=o(" (BART model)"),m6o=l(),Qp=a("li"),uce=a("strong"),g6o=o("beit"),h6o=o(" \u2014 "),tj=a("a"),p6o=o("BeitModel"),_6o=o(" (BEiT model)"),u6o=l(),Wp=a("li"),bce=a("strong"),b6o=o("bert"),v6o=o(" \u2014 "),aj=a("a"),F6o=o("BertModel"),T6o=o(" (BERT model)"),M6o=l(),Hp=a("li"),vce=a("strong"),E6o=o("bert-generation"),C6o=o(" \u2014 "),nj=a("a"),w6o=o("BertGenerationEncoder"),A6o=o(" (Bert Generation model)"),L6o=l(),Up=a("li"),Fce=a("strong"),y6o=o("big_bird"),x6o=o(" \u2014 "),sj=a("a"),$6o=o("BigBirdModel"),k6o=o(" (BigBird model)"),S6o=l(),Jp=a("li"),Tce=a("strong"),R6o=o("bigbird_pegasus"),P6o=o(" \u2014 "),lj=a("a"),B6o=o("BigBirdPegasusModel"),I6o=o(" (BigBird-Pegasus model)"),N6o=l(),Yp=a("li"),Mce=a("strong"),q6o=o("blenderbot"),j6o=o(" \u2014 "),ij=a("a"),D6o=o("BlenderbotModel"),G6o=o(" (Blenderbot model)"),O6o=l(),Kp=a("li"),Ece=a("strong"),V6o=o("blenderbot-small"),X6o=o(" \u2014 "),dj=a("a"),z6o=o("BlenderbotSmallModel"),Q6o=o(" (BlenderbotSmall model)"),W6o=l(),Zp=a("li"),Cce=a("strong"),H6o=o("bloom"),U6o=o(" \u2014 "),cj=a("a"),J6o=o("BloomModel"),Y6o=o(" (BLOOM model)"),K6o=l(),e_=a("li"),wce=a("strong"),Z6o=o("camembert"),eTo=o(" \u2014 "),fj=a("a"),oTo=o("CamembertModel"),rTo=o(" (CamemBERT model)"),tTo=l(),o_=a("li"),Ace=a("strong"),aTo=o("canine"),nTo=o(" \u2014 "),mj=a("a"),sTo=o("CanineModel"),lTo=o(" (CANINE model)"),iTo=l(),r_=a("li"),Lce=a("strong"),dTo=o("clip"),cTo=o(" \u2014 "),gj=a("a"),fTo=o("CLIPModel"),mTo=o(" (CLIP model)"),gTo=l(),t_=a("li"),yce=a("strong"),hTo=o("codegen"),pTo=o(" \u2014 "),hj=a("a"),_To=o("CodeGenModel"),uTo=o(" (CodeGen model)"),bTo=l(),a_=a("li"),xce=a("strong"),vTo=o("convbert"),FTo=o(" \u2014 "),pj=a("a"),TTo=o("ConvBertModel"),MTo=o(" (ConvBERT model)"),ETo=l(),n_=a("li"),$ce=a("strong"),CTo=o("convnext"),wTo=o(" \u2014 "),_j=a("a"),ATo=o("ConvNextModel"),LTo=o(" (ConvNeXT model)"),yTo=l(),s_=a("li"),kce=a("strong"),xTo=o("ctrl"),$To=o(" \u2014 "),uj=a("a"),kTo=o("CTRLModel"),STo=o(" (CTRL model)"),RTo=l(),l_=a("li"),Sce=a("strong"),PTo=o("cvt"),BTo=o(" \u2014 "),bj=a("a"),ITo=o("CvtModel"),NTo=o(" (CvT model)"),qTo=l(),i_=a("li"),Rce=a("strong"),jTo=o("data2vec-audio"),DTo=o(" \u2014 "),vj=a("a"),GTo=o("Data2VecAudioModel"),OTo=o(" (Data2VecAudio model)"),VTo=l(),d_=a("li"),Pce=a("strong"),XTo=o("data2vec-text"),zTo=o(" \u2014 "),Fj=a("a"),QTo=o("Data2VecTextModel"),WTo=o(" (Data2VecText model)"),HTo=l(),c_=a("li"),Bce=a("strong"),UTo=o("data2vec-vision"),JTo=o(" \u2014 "),Tj=a("a"),YTo=o("Data2VecVisionModel"),KTo=o(" (Data2VecVision model)"),ZTo=l(),f_=a("li"),Ice=a("strong"),e7o=o("deberta"),o7o=o(" \u2014 "),Mj=a("a"),r7o=o("DebertaModel"),t7o=o(" (DeBERTa model)"),a7o=l(),m_=a("li"),Nce=a("strong"),n7o=o("deberta-v2"),s7o=o(" \u2014 "),Ej=a("a"),l7o=o("DebertaV2Model"),i7o=o(" (DeBERTa-v2 model)"),d7o=l(),g_=a("li"),qce=a("strong"),c7o=o("decision_transformer"),f7o=o(" \u2014 "),Cj=a("a"),m7o=o("DecisionTransformerModel"),g7o=o(" (Decision Transformer model)"),h7o=l(),h_=a("li"),jce=a("strong"),p7o=o("deit"),_7o=o(" \u2014 "),wj=a("a"),u7o=o("DeiTModel"),b7o=o(" (DeiT model)"),v7o=l(),p_=a("li"),Dce=a("strong"),F7o=o("detr"),T7o=o(" \u2014 "),Aj=a("a"),M7o=o("DetrModel"),E7o=o(" (DETR model)"),C7o=l(),__=a("li"),Gce=a("strong"),w7o=o("distilbert"),A7o=o(" \u2014 "),Lj=a("a"),L7o=o("DistilBertModel"),y7o=o(" (DistilBERT model)"),x7o=l(),u_=a("li"),Oce=a("strong"),$7o=o("dpr"),k7o=o(" \u2014 "),yj=a("a"),S7o=o("DPRQuestionEncoder"),R7o=o(" (DPR model)"),P7o=l(),b_=a("li"),Vce=a("strong"),B7o=o("dpt"),I7o=o(" \u2014 "),xj=a("a"),N7o=o("DPTModel"),q7o=o(" (DPT model)"),j7o=l(),v_=a("li"),Xce=a("strong"),D7o=o("electra"),G7o=o(" \u2014 "),$j=a("a"),O7o=o("ElectraModel"),V7o=o(" (ELECTRA model)"),X7o=l(),F_=a("li"),zce=a("strong"),z7o=o("flaubert"),Q7o=o(" \u2014 "),kj=a("a"),W7o=o("FlaubertModel"),H7o=o(" (FlauBERT model)"),U7o=l(),T_=a("li"),Qce=a("strong"),J7o=o("flava"),Y7o=o(" \u2014 "),Sj=a("a"),K7o=o("FlavaModel"),Z7o=o(" (FLAVA model)"),e9o=l(),M_=a("li"),Wce=a("strong"),o9o=o("fnet"),r9o=o(" \u2014 "),Rj=a("a"),t9o=o("FNetModel"),a9o=o(" (FNet model)"),n9o=l(),E_=a("li"),Hce=a("strong"),s9o=o("fsmt"),l9o=o(" \u2014 "),Pj=a("a"),i9o=o("FSMTModel"),d9o=o(" (FairSeq Machine-Translation model)"),c9o=l(),Hs=a("li"),Uce=a("strong"),f9o=o("funnel"),m9o=o(" \u2014 "),Bj=a("a"),g9o=o("FunnelModel"),h9o=o(" or "),Ij=a("a"),p9o=o("FunnelBaseModel"),_9o=o(" (Funnel Transformer model)"),u9o=l(),C_=a("li"),Jce=a("strong"),b9o=o("glpn"),v9o=o(" \u2014 "),Nj=a("a"),F9o=o("GLPNModel"),T9o=o(" (GLPN model)"),M9o=l(),w_=a("li"),Yce=a("strong"),E9o=o("gpt2"),C9o=o(" \u2014 "),qj=a("a"),w9o=o("GPT2Model"),A9o=o(" (OpenAI GPT-2 model)"),L9o=l(),A_=a("li"),Kce=a("strong"),y9o=o("gpt_neo"),x9o=o(" \u2014 "),jj=a("a"),$9o=o("GPTNeoModel"),k9o=o(" (GPT Neo model)"),S9o=l(),L_=a("li"),Zce=a("strong"),R9o=o("gpt_neox"),P9o=o(" \u2014 "),Dj=a("a"),B9o=o("GPTNeoXModel"),I9o=o(" (GPT NeoX model)"),N9o=l(),y_=a("li"),efe=a("strong"),q9o=o("gptj"),j9o=o(" \u2014 "),Gj=a("a"),D9o=o("GPTJModel"),G9o=o(" (GPT-J model)"),O9o=l(),x_=a("li"),ofe=a("strong"),V9o=o("groupvit"),X9o=o(" \u2014 "),Oj=a("a"),z9o=o("GroupViTModel"),Q9o=o(" (GroupViT model)"),W9o=l(),$_=a("li"),rfe=a("strong"),H9o=o("hubert"),U9o=o(" \u2014 "),Vj=a("a"),J9o=o("HubertModel"),Y9o=o(" (Hubert model)"),K9o=l(),k_=a("li"),tfe=a("strong"),Z9o=o("ibert"),eMo=o(" \u2014 "),Xj=a("a"),oMo=o("IBertModel"),rMo=o(" (I-BERT model)"),tMo=l(),S_=a("li"),afe=a("strong"),aMo=o("imagegpt"),nMo=o(" \u2014 "),zj=a("a"),sMo=o("ImageGPTModel"),lMo=o(" (ImageGPT model)"),iMo=l(),R_=a("li"),nfe=a("strong"),dMo=o("layoutlm"),cMo=o(" \u2014 "),Qj=a("a"),fMo=o("LayoutLMModel"),mMo=o(" (LayoutLM model)"),gMo=l(),P_=a("li"),sfe=a("strong"),hMo=o("layoutlmv2"),pMo=o(" \u2014 "),Wj=a("a"),_Mo=o("LayoutLMv2Model"),uMo=o(" (LayoutLMv2 model)"),bMo=l(),B_=a("li"),lfe=a("strong"),vMo=o("layoutlmv3"),FMo=o(" \u2014 "),Hj=a("a"),TMo=o("LayoutLMv3Model"),MMo=o(" (LayoutLMv3 model)"),EMo=l(),I_=a("li"),ife=a("strong"),CMo=o("led"),wMo=o(" \u2014 "),Uj=a("a"),AMo=o("LEDModel"),LMo=o(" (LED model)"),yMo=l(),N_=a("li"),dfe=a("strong"),xMo=o("levit"),$Mo=o(" \u2014 "),Jj=a("a"),kMo=o("LevitModel"),SMo=o(" (LeViT model)"),RMo=l(),q_=a("li"),cfe=a("strong"),PMo=o("longformer"),BMo=o(" \u2014 "),Yj=a("a"),IMo=o("LongformerModel"),NMo=o(" (Longformer model)"),qMo=l(),j_=a("li"),ffe=a("strong"),jMo=o("longt5"),DMo=o(" \u2014 "),Kj=a("a"),GMo=o("LongT5Model"),OMo=o(" (LongT5 model)"),VMo=l(),D_=a("li"),mfe=a("strong"),XMo=o("luke"),zMo=o(" \u2014 "),Zj=a("a"),QMo=o("LukeModel"),WMo=o(" (LUKE model)"),HMo=l(),G_=a("li"),gfe=a("strong"),UMo=o("lxmert"),JMo=o(" \u2014 "),eD=a("a"),YMo=o("LxmertModel"),KMo=o(" (LXMERT model)"),ZMo=l(),O_=a("li"),hfe=a("strong"),eEo=o("m2m_100"),oEo=o(" \u2014 "),oD=a("a"),rEo=o("M2M100Model"),tEo=o(" (M2M100 model)"),aEo=l(),V_=a("li"),pfe=a("strong"),nEo=o("marian"),sEo=o(" \u2014 "),rD=a("a"),lEo=o("MarianModel"),iEo=o(" (Marian model)"),dEo=l(),X_=a("li"),_fe=a("strong"),cEo=o("maskformer"),fEo=o(" \u2014 "),tD=a("a"),mEo=o("MaskFormerModel"),gEo=o(" (MaskFormer model)"),hEo=l(),z_=a("li"),ufe=a("strong"),pEo=o("mbart"),_Eo=o(" \u2014 "),aD=a("a"),uEo=o("MBartModel"),bEo=o(" (mBART model)"),vEo=l(),Q_=a("li"),bfe=a("strong"),FEo=o("mctct"),TEo=o(" \u2014 "),nD=a("a"),MEo=o("MCTCTModel"),EEo=o(" (M-CTC-T model)"),CEo=l(),W_=a("li"),vfe=a("strong"),wEo=o("megatron-bert"),AEo=o(" \u2014 "),sD=a("a"),LEo=o("MegatronBertModel"),yEo=o(" (Megatron-BERT model)"),xEo=l(),H_=a("li"),Ffe=a("strong"),$Eo=o("mobilebert"),kEo=o(" \u2014 "),lD=a("a"),SEo=o("MobileBertModel"),REo=o(" (MobileBERT model)"),PEo=l(),U_=a("li"),Tfe=a("strong"),BEo=o("mobilevit"),IEo=o(" \u2014 "),iD=a("a"),NEo=o("MobileViTModel"),qEo=o(" (MobileViT model)"),jEo=l(),J_=a("li"),Mfe=a("strong"),DEo=o("mpnet"),GEo=o(" \u2014 "),dD=a("a"),OEo=o("MPNetModel"),VEo=o(" (MPNet model)"),XEo=l(),Y_=a("li"),Efe=a("strong"),zEo=o("mt5"),QEo=o(" \u2014 "),cD=a("a"),WEo=o("MT5Model"),HEo=o(" (MT5 model)"),UEo=l(),K_=a("li"),Cfe=a("strong"),JEo=o("mvp"),YEo=o(" \u2014 "),fD=a("a"),KEo=o("MvpModel"),ZEo=o(" (MVP model)"),eCo=l(),Z_=a("li"),wfe=a("strong"),oCo=o("nezha"),rCo=o(" \u2014 "),mD=a("a"),tCo=o("NezhaModel"),aCo=o(" (Nezha model)"),nCo=l(),eu=a("li"),Afe=a("strong"),sCo=o("nystromformer"),lCo=o(" \u2014 "),gD=a("a"),iCo=o("NystromformerModel"),dCo=o(" (Nystr\xF6mformer model)"),cCo=l(),ou=a("li"),Lfe=a("strong"),fCo=o("openai-gpt"),mCo=o(" \u2014 "),hD=a("a"),gCo=o("OpenAIGPTModel"),hCo=o(" (OpenAI GPT model)"),pCo=l(),ru=a("li"),yfe=a("strong"),_Co=o("opt"),uCo=o(" \u2014 "),pD=a("a"),bCo=o("OPTModel"),vCo=o(" (OPT model)"),FCo=l(),tu=a("li"),xfe=a("strong"),TCo=o("pegasus"),MCo=o(" \u2014 "),_D=a("a"),ECo=o("PegasusModel"),CCo=o(" (Pegasus model)"),wCo=l(),au=a("li"),$fe=a("strong"),ACo=o("perceiver"),LCo=o(" \u2014 "),uD=a("a"),yCo=o("PerceiverModel"),xCo=o(" (Perceiver model)"),$Co=l(),nu=a("li"),kfe=a("strong"),kCo=o("plbart"),SCo=o(" \u2014 "),bD=a("a"),RCo=o("PLBartModel"),PCo=o(" (PLBart model)"),BCo=l(),su=a("li"),Sfe=a("strong"),ICo=o("poolformer"),NCo=o(" \u2014 "),vD=a("a"),qCo=o("PoolFormerModel"),jCo=o(" (PoolFormer model)"),DCo=l(),lu=a("li"),Rfe=a("strong"),GCo=o("prophetnet"),OCo=o(" \u2014 "),FD=a("a"),VCo=o("ProphetNetModel"),XCo=o(" (ProphetNet model)"),zCo=l(),iu=a("li"),Pfe=a("strong"),QCo=o("qdqbert"),WCo=o(" \u2014 "),TD=a("a"),HCo=o("QDQBertModel"),UCo=o(" (QDQBert model)"),JCo=l(),du=a("li"),Bfe=a("strong"),YCo=o("reformer"),KCo=o(" \u2014 "),MD=a("a"),ZCo=o("ReformerModel"),e3o=o(" (Reformer model)"),o3o=l(),cu=a("li"),Ife=a("strong"),r3o=o("regnet"),t3o=o(" \u2014 "),ED=a("a"),a3o=o("RegNetModel"),n3o=o(" (RegNet model)"),s3o=l(),fu=a("li"),Nfe=a("strong"),l3o=o("rembert"),i3o=o(" \u2014 "),CD=a("a"),d3o=o("RemBertModel"),c3o=o(" (RemBERT model)"),f3o=l(),mu=a("li"),qfe=a("strong"),m3o=o("resnet"),g3o=o(" \u2014 "),wD=a("a"),h3o=o("ResNetModel"),p3o=o(" (ResNet model)"),_3o=l(),gu=a("li"),jfe=a("strong"),u3o=o("retribert"),b3o=o(" \u2014 "),AD=a("a"),v3o=o("RetriBertModel"),F3o=o(" (RetriBERT model)"),T3o=l(),hu=a("li"),Dfe=a("strong"),M3o=o("roberta"),E3o=o(" \u2014 "),LD=a("a"),C3o=o("RobertaModel"),w3o=o(" (RoBERTa model)"),A3o=l(),pu=a("li"),Gfe=a("strong"),L3o=o("roformer"),y3o=o(" \u2014 "),yD=a("a"),x3o=o("RoFormerModel"),$3o=o(" (RoFormer model)"),k3o=l(),_u=a("li"),Ofe=a("strong"),S3o=o("segformer"),R3o=o(" \u2014 "),xD=a("a"),P3o=o("SegformerModel"),B3o=o(" (SegFormer model)"),I3o=l(),uu=a("li"),Vfe=a("strong"),N3o=o("sew"),q3o=o(" \u2014 "),$D=a("a"),j3o=o("SEWModel"),D3o=o(" (SEW model)"),G3o=l(),bu=a("li"),Xfe=a("strong"),O3o=o("sew-d"),V3o=o(" \u2014 "),kD=a("a"),X3o=o("SEWDModel"),z3o=o(" (SEW-D model)"),Q3o=l(),vu=a("li"),zfe=a("strong"),W3o=o("speech_to_text"),H3o=o(" \u2014 "),SD=a("a"),U3o=o("Speech2TextModel"),J3o=o(" (Speech2Text model)"),Y3o=l(),Fu=a("li"),Qfe=a("strong"),K3o=o("splinter"),Z3o=o(" \u2014 "),RD=a("a"),e5o=o("SplinterModel"),o5o=o(" (Splinter model)"),r5o=l(),Tu=a("li"),Wfe=a("strong"),t5o=o("squeezebert"),a5o=o(" \u2014 "),PD=a("a"),n5o=o("SqueezeBertModel"),s5o=o(" (SqueezeBERT model)"),l5o=l(),Mu=a("li"),Hfe=a("strong"),i5o=o("swin"),d5o=o(" \u2014 "),BD=a("a"),c5o=o("SwinModel"),f5o=o(" (Swin Transformer model)"),m5o=l(),Eu=a("li"),Ufe=a("strong"),g5o=o("swinv2"),h5o=o(" \u2014 "),ID=a("a"),p5o=o("Swinv2Model"),_5o=o(" (Swin Transformer V2 model)"),u5o=l(),Cu=a("li"),Jfe=a("strong"),b5o=o("t5"),v5o=o(" \u2014 "),ND=a("a"),F5o=o("T5Model"),T5o=o(" (T5 model)"),M5o=l(),wu=a("li"),Yfe=a("strong"),E5o=o("tapas"),C5o=o(" \u2014 "),qD=a("a"),w5o=o("TapasModel"),A5o=o(" (TAPAS model)"),L5o=l(),Au=a("li"),Kfe=a("strong"),y5o=o("trajectory_transformer"),x5o=o(" \u2014 "),jD=a("a"),$5o=o("TrajectoryTransformerModel"),k5o=o(" (Trajectory Transformer model)"),S5o=l(),Lu=a("li"),Zfe=a("strong"),R5o=o("transfo-xl"),P5o=o(" \u2014 "),DD=a("a"),B5o=o("TransfoXLModel"),I5o=o(" (Transformer-XL model)"),N5o=l(),yu=a("li"),eme=a("strong"),q5o=o("unispeech"),j5o=o(" \u2014 "),GD=a("a"),D5o=o("UniSpeechModel"),G5o=o(" (UniSpeech model)"),O5o=l(),xu=a("li"),ome=a("strong"),V5o=o("unispeech-sat"),X5o=o(" \u2014 "),OD=a("a"),z5o=o("UniSpeechSatModel"),Q5o=o(" (UniSpeechSat model)"),W5o=l(),$u=a("li"),rme=a("strong"),H5o=o("van"),U5o=o(" \u2014 "),VD=a("a"),J5o=o("VanModel"),Y5o=o(" (VAN model)"),K5o=l(),ku=a("li"),tme=a("strong"),Z5o=o("vilt"),e0o=o(" \u2014 "),XD=a("a"),o0o=o("ViltModel"),r0o=o(" (ViLT model)"),t0o=l(),Su=a("li"),ame=a("strong"),a0o=o("vision-text-dual-encoder"),n0o=o(" \u2014 "),zD=a("a"),s0o=o("VisionTextDualEncoderModel"),l0o=o(" (VisionTextDualEncoder model)"),i0o=l(),Ru=a("li"),nme=a("strong"),d0o=o("visual_bert"),c0o=o(" \u2014 "),QD=a("a"),f0o=o("VisualBertModel"),m0o=o(" (VisualBERT model)"),g0o=l(),Pu=a("li"),sme=a("strong"),h0o=o("vit"),p0o=o(" \u2014 "),WD=a("a"),_0o=o("ViTModel"),u0o=o(" (ViT model)"),b0o=l(),Bu=a("li"),lme=a("strong"),v0o=o("vit_mae"),F0o=o(" \u2014 "),HD=a("a"),T0o=o("ViTMAEModel"),M0o=o(" (ViTMAE model)"),E0o=l(),Iu=a("li"),ime=a("strong"),C0o=o("wav2vec2"),w0o=o(" \u2014 "),UD=a("a"),A0o=o("Wav2Vec2Model"),L0o=o(" (Wav2Vec2 model)"),y0o=l(),Nu=a("li"),dme=a("strong"),x0o=o("wav2vec2-conformer"),$0o=o(" \u2014 "),JD=a("a"),k0o=o("Wav2Vec2ConformerModel"),S0o=o(" (Wav2Vec2-Conformer model)"),R0o=l(),qu=a("li"),cme=a("strong"),P0o=o("wavlm"),B0o=o(" \u2014 "),YD=a("a"),I0o=o("WavLMModel"),N0o=o(" (WavLM model)"),q0o=l(),ju=a("li"),fme=a("strong"),j0o=o("xglm"),D0o=o(" \u2014 "),KD=a("a"),G0o=o("XGLMModel"),O0o=o(" (XGLM model)"),V0o=l(),Du=a("li"),mme=a("strong"),X0o=o("xlm"),z0o=o(" \u2014 "),ZD=a("a"),Q0o=o("XLMModel"),W0o=o(" (XLM model)"),H0o=l(),Gu=a("li"),gme=a("strong"),U0o=o("xlm-prophetnet"),J0o=o(" \u2014 "),eG=a("a"),Y0o=o("XLMProphetNetModel"),K0o=o(" (XLM-ProphetNet model)"),Z0o=l(),Ou=a("li"),hme=a("strong"),ewo=o("xlm-roberta"),owo=o(" \u2014 "),oG=a("a"),rwo=o("XLMRobertaModel"),two=o(" (XLM-RoBERTa model)"),awo=l(),Vu=a("li"),pme=a("strong"),nwo=o("xlm-roberta-xl"),swo=o(" \u2014 "),rG=a("a"),lwo=o("XLMRobertaXLModel"),iwo=o(" (XLM-RoBERTa-XL model)"),dwo=l(),Xu=a("li"),_me=a("strong"),cwo=o("xlnet"),fwo=o(" \u2014 "),tG=a("a"),mwo=o("XLNetModel"),gwo=o(" (XLNet model)"),hwo=l(),zu=a("li"),ume=a("strong"),pwo=o("yolos"),_wo=o(" \u2014 "),aG=a("a"),uwo=o("YolosModel"),bwo=o(" (YOLOS model)"),vwo=l(),Qu=a("li"),bme=a("strong"),Fwo=o("yoso"),Two=o(" \u2014 "),nG=a("a"),Mwo=o("YosoModel"),Ewo=o(" (YOSO model)"),Cwo=l(),Wu=a("p"),wwo=o("The model is set in evaluation mode by default using "),vme=a("code"),Awo=o("model.eval()"),Lwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),ywo=o("model.train()"),xwo=l(),F(Hu.$$.fragment),EXe=l(),Xi=a("h2"),Uu=a("a"),Tme=a("span"),F(jL.$$.fragment),$wo=l(),Mme=a("span"),kwo=o("AutoModelForPreTraining"),CXe=l(),$o=a("div"),F(DL.$$.fragment),Swo=l(),zi=a("p"),Rwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sG=a("a"),Pwo=o("from_pretrained()"),Bwo=o(" class method or the "),lG=a("a"),Iwo=o("from_config()"),Nwo=o(` class
method.`),qwo=l(),GL=a("p"),jwo=o("This class cannot be instantiated directly using "),Eme=a("code"),Dwo=o("__init__()"),Gwo=o(" (throws an error)."),Owo=l(),it=a("div"),F(OL.$$.fragment),Vwo=l(),Cme=a("p"),Xwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zwo=l(),Qi=a("p"),Qwo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),Wwo=o("not"),Hwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),Uwo=o("from_pretrained()"),Jwo=o(" to load the model weights."),Ywo=l(),F(Ju.$$.fragment),Kwo=l(),Ye=a("div"),F(VL.$$.fragment),Zwo=l(),Ame=a("p"),eAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oAo=l(),Na=a("p"),rAo=o("The model class to instantiate is selected based on the "),Lme=a("code"),tAo=o("model_type"),aAo=o(` property of the config object (either
passed as an argument or loaded from `),yme=a("code"),nAo=o("pretrained_model_name_or_path"),sAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),lAo=o("pretrained_model_name_or_path"),iAo=o(":"),dAo=l(),G=a("ul"),Yu=a("li"),$me=a("strong"),cAo=o("albert"),fAo=o(" \u2014 "),dG=a("a"),mAo=o("AlbertForPreTraining"),gAo=o(" (ALBERT model)"),hAo=l(),Ku=a("li"),kme=a("strong"),pAo=o("bart"),_Ao=o(" \u2014 "),cG=a("a"),uAo=o("BartForConditionalGeneration"),bAo=o(" (BART model)"),vAo=l(),Zu=a("li"),Sme=a("strong"),FAo=o("bert"),TAo=o(" \u2014 "),fG=a("a"),MAo=o("BertForPreTraining"),EAo=o(" (BERT model)"),CAo=l(),e1=a("li"),Rme=a("strong"),wAo=o("big_bird"),AAo=o(" \u2014 "),mG=a("a"),LAo=o("BigBirdForPreTraining"),yAo=o(" (BigBird model)"),xAo=l(),o1=a("li"),Pme=a("strong"),$Ao=o("bloom"),kAo=o(" \u2014 "),gG=a("a"),SAo=o("BloomForCausalLM"),RAo=o(" (BLOOM model)"),PAo=l(),r1=a("li"),Bme=a("strong"),BAo=o("camembert"),IAo=o(" \u2014 "),hG=a("a"),NAo=o("CamembertForMaskedLM"),qAo=o(" (CamemBERT model)"),jAo=l(),t1=a("li"),Ime=a("strong"),DAo=o("ctrl"),GAo=o(" \u2014 "),pG=a("a"),OAo=o("CTRLLMHeadModel"),VAo=o(" (CTRL model)"),XAo=l(),a1=a("li"),Nme=a("strong"),zAo=o("data2vec-text"),QAo=o(" \u2014 "),_G=a("a"),WAo=o("Data2VecTextForMaskedLM"),HAo=o(" (Data2VecText model)"),UAo=l(),n1=a("li"),qme=a("strong"),JAo=o("deberta"),YAo=o(" \u2014 "),uG=a("a"),KAo=o("DebertaForMaskedLM"),ZAo=o(" (DeBERTa model)"),eLo=l(),s1=a("li"),jme=a("strong"),oLo=o("deberta-v2"),rLo=o(" \u2014 "),bG=a("a"),tLo=o("DebertaV2ForMaskedLM"),aLo=o(" (DeBERTa-v2 model)"),nLo=l(),l1=a("li"),Dme=a("strong"),sLo=o("distilbert"),lLo=o(" \u2014 "),vG=a("a"),iLo=o("DistilBertForMaskedLM"),dLo=o(" (DistilBERT model)"),cLo=l(),i1=a("li"),Gme=a("strong"),fLo=o("electra"),mLo=o(" \u2014 "),FG=a("a"),gLo=o("ElectraForPreTraining"),hLo=o(" (ELECTRA model)"),pLo=l(),d1=a("li"),Ome=a("strong"),_Lo=o("flaubert"),uLo=o(" \u2014 "),TG=a("a"),bLo=o("FlaubertWithLMHeadModel"),vLo=o(" (FlauBERT model)"),FLo=l(),c1=a("li"),Vme=a("strong"),TLo=o("flava"),MLo=o(" \u2014 "),MG=a("a"),ELo=o("FlavaForPreTraining"),CLo=o(" (FLAVA model)"),wLo=l(),f1=a("li"),Xme=a("strong"),ALo=o("fnet"),LLo=o(" \u2014 "),EG=a("a"),yLo=o("FNetForPreTraining"),xLo=o(" (FNet model)"),$Lo=l(),m1=a("li"),zme=a("strong"),kLo=o("fsmt"),SLo=o(" \u2014 "),CG=a("a"),RLo=o("FSMTForConditionalGeneration"),PLo=o(" (FairSeq Machine-Translation model)"),BLo=l(),g1=a("li"),Qme=a("strong"),ILo=o("funnel"),NLo=o(" \u2014 "),wG=a("a"),qLo=o("FunnelForPreTraining"),jLo=o(" (Funnel Transformer model)"),DLo=l(),h1=a("li"),Wme=a("strong"),GLo=o("gpt2"),OLo=o(" \u2014 "),AG=a("a"),VLo=o("GPT2LMHeadModel"),XLo=o(" (OpenAI GPT-2 model)"),zLo=l(),p1=a("li"),Hme=a("strong"),QLo=o("ibert"),WLo=o(" \u2014 "),LG=a("a"),HLo=o("IBertForMaskedLM"),ULo=o(" (I-BERT model)"),JLo=l(),_1=a("li"),Ume=a("strong"),YLo=o("layoutlm"),KLo=o(" \u2014 "),yG=a("a"),ZLo=o("LayoutLMForMaskedLM"),eyo=o(" (LayoutLM model)"),oyo=l(),u1=a("li"),Jme=a("strong"),ryo=o("longformer"),tyo=o(" \u2014 "),xG=a("a"),ayo=o("LongformerForMaskedLM"),nyo=o(" (Longformer model)"),syo=l(),b1=a("li"),Yme=a("strong"),lyo=o("lxmert"),iyo=o(" \u2014 "),$G=a("a"),dyo=o("LxmertForPreTraining"),cyo=o(" (LXMERT model)"),fyo=l(),v1=a("li"),Kme=a("strong"),myo=o("megatron-bert"),gyo=o(" \u2014 "),kG=a("a"),hyo=o("MegatronBertForPreTraining"),pyo=o(" (Megatron-BERT model)"),_yo=l(),F1=a("li"),Zme=a("strong"),uyo=o("mobilebert"),byo=o(" \u2014 "),SG=a("a"),vyo=o("MobileBertForPreTraining"),Fyo=o(" (MobileBERT model)"),Tyo=l(),T1=a("li"),ege=a("strong"),Myo=o("mpnet"),Eyo=o(" \u2014 "),RG=a("a"),Cyo=o("MPNetForMaskedLM"),wyo=o(" (MPNet model)"),Ayo=l(),M1=a("li"),oge=a("strong"),Lyo=o("mvp"),yyo=o(" \u2014 "),PG=a("a"),xyo=o("MvpForConditionalGeneration"),$yo=o(" (MVP model)"),kyo=l(),E1=a("li"),rge=a("strong"),Syo=o("nezha"),Ryo=o(" \u2014 "),BG=a("a"),Pyo=o("NezhaForPreTraining"),Byo=o(" (Nezha model)"),Iyo=l(),C1=a("li"),tge=a("strong"),Nyo=o("openai-gpt"),qyo=o(" \u2014 "),IG=a("a"),jyo=o("OpenAIGPTLMHeadModel"),Dyo=o(" (OpenAI GPT model)"),Gyo=l(),w1=a("li"),age=a("strong"),Oyo=o("retribert"),Vyo=o(" \u2014 "),NG=a("a"),Xyo=o("RetriBertModel"),zyo=o(" (RetriBERT model)"),Qyo=l(),A1=a("li"),nge=a("strong"),Wyo=o("roberta"),Hyo=o(" \u2014 "),qG=a("a"),Uyo=o("RobertaForMaskedLM"),Jyo=o(" (RoBERTa model)"),Yyo=l(),L1=a("li"),sge=a("strong"),Kyo=o("splinter"),Zyo=o(" \u2014 "),jG=a("a"),e8o=o("SplinterForPreTraining"),o8o=o(" (Splinter model)"),r8o=l(),y1=a("li"),lge=a("strong"),t8o=o("squeezebert"),a8o=o(" \u2014 "),DG=a("a"),n8o=o("SqueezeBertForMaskedLM"),s8o=o(" (SqueezeBERT model)"),l8o=l(),x1=a("li"),ige=a("strong"),i8o=o("t5"),d8o=o(" \u2014 "),GG=a("a"),c8o=o("T5ForConditionalGeneration"),f8o=o(" (T5 model)"),m8o=l(),$1=a("li"),dge=a("strong"),g8o=o("tapas"),h8o=o(" \u2014 "),OG=a("a"),p8o=o("TapasForMaskedLM"),_8o=o(" (TAPAS model)"),u8o=l(),k1=a("li"),cge=a("strong"),b8o=o("transfo-xl"),v8o=o(" \u2014 "),VG=a("a"),F8o=o("TransfoXLLMHeadModel"),T8o=o(" (Transformer-XL model)"),M8o=l(),S1=a("li"),fge=a("strong"),E8o=o("unispeech"),C8o=o(" \u2014 "),XG=a("a"),w8o=o("UniSpeechForPreTraining"),A8o=o(" (UniSpeech model)"),L8o=l(),R1=a("li"),mge=a("strong"),y8o=o("unispeech-sat"),x8o=o(" \u2014 "),zG=a("a"),$8o=o("UniSpeechSatForPreTraining"),k8o=o(" (UniSpeechSat model)"),S8o=l(),P1=a("li"),gge=a("strong"),R8o=o("visual_bert"),P8o=o(" \u2014 "),QG=a("a"),B8o=o("VisualBertForPreTraining"),I8o=o(" (VisualBERT model)"),N8o=l(),B1=a("li"),hge=a("strong"),q8o=o("vit_mae"),j8o=o(" \u2014 "),WG=a("a"),D8o=o("ViTMAEForPreTraining"),G8o=o(" (ViTMAE model)"),O8o=l(),I1=a("li"),pge=a("strong"),V8o=o("wav2vec2"),X8o=o(" \u2014 "),HG=a("a"),z8o=o("Wav2Vec2ForPreTraining"),Q8o=o(" (Wav2Vec2 model)"),W8o=l(),N1=a("li"),_ge=a("strong"),H8o=o("wav2vec2-conformer"),U8o=o(" \u2014 "),UG=a("a"),J8o=o("Wav2Vec2ConformerForPreTraining"),Y8o=o(" (Wav2Vec2-Conformer model)"),K8o=l(),q1=a("li"),uge=a("strong"),Z8o=o("xlm"),exo=o(" \u2014 "),JG=a("a"),oxo=o("XLMWithLMHeadModel"),rxo=o(" (XLM model)"),txo=l(),j1=a("li"),bge=a("strong"),axo=o("xlm-roberta"),nxo=o(" \u2014 "),YG=a("a"),sxo=o("XLMRobertaForMaskedLM"),lxo=o(" (XLM-RoBERTa model)"),ixo=l(),D1=a("li"),vge=a("strong"),dxo=o("xlm-roberta-xl"),cxo=o(" \u2014 "),KG=a("a"),fxo=o("XLMRobertaXLForMaskedLM"),mxo=o(" (XLM-RoBERTa-XL model)"),gxo=l(),G1=a("li"),Fge=a("strong"),hxo=o("xlnet"),pxo=o(" \u2014 "),ZG=a("a"),_xo=o("XLNetLMHeadModel"),uxo=o(" (XLNet model)"),bxo=l(),O1=a("p"),vxo=o("The model is set in evaluation mode by default using "),Tge=a("code"),Fxo=o("model.eval()"),Txo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),Mxo=o("model.train()"),Exo=l(),F(V1.$$.fragment),wXe=l(),Wi=a("h2"),X1=a("a"),Ege=a("span"),F(XL.$$.fragment),Cxo=l(),Cge=a("span"),wxo=o("AutoModelForCausalLM"),AXe=l(),ko=a("div"),F(zL.$$.fragment),Axo=l(),Hi=a("p"),Lxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eO=a("a"),yxo=o("from_pretrained()"),xxo=o(" class method or the "),oO=a("a"),$xo=o("from_config()"),kxo=o(` class
method.`),Sxo=l(),QL=a("p"),Rxo=o("This class cannot be instantiated directly using "),wge=a("code"),Pxo=o("__init__()"),Bxo=o(" (throws an error)."),Ixo=l(),dt=a("div"),F(WL.$$.fragment),Nxo=l(),Age=a("p"),qxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jxo=l(),Ui=a("p"),Dxo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),Gxo=o("not"),Oxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),Vxo=o("from_pretrained()"),Xxo=o(" to load the model weights."),zxo=l(),F(z1.$$.fragment),Qxo=l(),Ke=a("div"),F(HL.$$.fragment),Wxo=l(),yge=a("p"),Hxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Uxo=l(),qa=a("p"),Jxo=o("The model class to instantiate is selected based on the "),xge=a("code"),Yxo=o("model_type"),Kxo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),Zxo=o("pretrained_model_name_or_path"),e$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),o$o=o("pretrained_model_name_or_path"),r$o=o(":"),t$o=l(),z=a("ul"),Q1=a("li"),Sge=a("strong"),a$o=o("bart"),n$o=o(" \u2014 "),tO=a("a"),s$o=o("BartForCausalLM"),l$o=o(" (BART model)"),i$o=l(),W1=a("li"),Rge=a("strong"),d$o=o("bert"),c$o=o(" \u2014 "),aO=a("a"),f$o=o("BertLMHeadModel"),m$o=o(" (BERT model)"),g$o=l(),H1=a("li"),Pge=a("strong"),h$o=o("bert-generation"),p$o=o(" \u2014 "),nO=a("a"),_$o=o("BertGenerationDecoder"),u$o=o(" (Bert Generation model)"),b$o=l(),U1=a("li"),Bge=a("strong"),v$o=o("big_bird"),F$o=o(" \u2014 "),sO=a("a"),T$o=o("BigBirdForCausalLM"),M$o=o(" (BigBird model)"),E$o=l(),J1=a("li"),Ige=a("strong"),C$o=o("bigbird_pegasus"),w$o=o(" \u2014 "),lO=a("a"),A$o=o("BigBirdPegasusForCausalLM"),L$o=o(" (BigBird-Pegasus model)"),y$o=l(),Y1=a("li"),Nge=a("strong"),x$o=o("blenderbot"),$$o=o(" \u2014 "),iO=a("a"),k$o=o("BlenderbotForCausalLM"),S$o=o(" (Blenderbot model)"),R$o=l(),K1=a("li"),qge=a("strong"),P$o=o("blenderbot-small"),B$o=o(" \u2014 "),dO=a("a"),I$o=o("BlenderbotSmallForCausalLM"),N$o=o(" (BlenderbotSmall model)"),q$o=l(),Z1=a("li"),jge=a("strong"),j$o=o("bloom"),D$o=o(" \u2014 "),cO=a("a"),G$o=o("BloomForCausalLM"),O$o=o(" (BLOOM model)"),V$o=l(),e2=a("li"),Dge=a("strong"),X$o=o("camembert"),z$o=o(" \u2014 "),fO=a("a"),Q$o=o("CamembertForCausalLM"),W$o=o(" (CamemBERT model)"),H$o=l(),o2=a("li"),Gge=a("strong"),U$o=o("codegen"),J$o=o(" \u2014 "),mO=a("a"),Y$o=o("CodeGenForCausalLM"),K$o=o(" (CodeGen model)"),Z$o=l(),r2=a("li"),Oge=a("strong"),eko=o("ctrl"),oko=o(" \u2014 "),gO=a("a"),rko=o("CTRLLMHeadModel"),tko=o(" (CTRL model)"),ako=l(),t2=a("li"),Vge=a("strong"),nko=o("data2vec-text"),sko=o(" \u2014 "),hO=a("a"),lko=o("Data2VecTextForCausalLM"),iko=o(" (Data2VecText model)"),dko=l(),a2=a("li"),Xge=a("strong"),cko=o("electra"),fko=o(" \u2014 "),pO=a("a"),mko=o("ElectraForCausalLM"),gko=o(" (ELECTRA model)"),hko=l(),n2=a("li"),zge=a("strong"),pko=o("gpt2"),_ko=o(" \u2014 "),_O=a("a"),uko=o("GPT2LMHeadModel"),bko=o(" (OpenAI GPT-2 model)"),vko=l(),s2=a("li"),Qge=a("strong"),Fko=o("gpt_neo"),Tko=o(" \u2014 "),uO=a("a"),Mko=o("GPTNeoForCausalLM"),Eko=o(" (GPT Neo model)"),Cko=l(),l2=a("li"),Wge=a("strong"),wko=o("gpt_neox"),Ako=o(" \u2014 "),bO=a("a"),Lko=o("GPTNeoXForCausalLM"),yko=o(" (GPT NeoX model)"),xko=l(),i2=a("li"),Hge=a("strong"),$ko=o("gptj"),kko=o(" \u2014 "),vO=a("a"),Sko=o("GPTJForCausalLM"),Rko=o(" (GPT-J model)"),Pko=l(),d2=a("li"),Uge=a("strong"),Bko=o("marian"),Iko=o(" \u2014 "),FO=a("a"),Nko=o("MarianForCausalLM"),qko=o(" (Marian model)"),jko=l(),c2=a("li"),Jge=a("strong"),Dko=o("mbart"),Gko=o(" \u2014 "),TO=a("a"),Oko=o("MBartForCausalLM"),Vko=o(" (mBART model)"),Xko=l(),f2=a("li"),Yge=a("strong"),zko=o("megatron-bert"),Qko=o(" \u2014 "),MO=a("a"),Wko=o("MegatronBertForCausalLM"),Hko=o(" (Megatron-BERT model)"),Uko=l(),m2=a("li"),Kge=a("strong"),Jko=o("mvp"),Yko=o(" \u2014 "),EO=a("a"),Kko=o("MvpForCausalLM"),Zko=o(" (MVP model)"),eSo=l(),g2=a("li"),Zge=a("strong"),oSo=o("openai-gpt"),rSo=o(" \u2014 "),CO=a("a"),tSo=o("OpenAIGPTLMHeadModel"),aSo=o(" (OpenAI GPT model)"),nSo=l(),h2=a("li"),ehe=a("strong"),sSo=o("opt"),lSo=o(" \u2014 "),wO=a("a"),iSo=o("OPTForCausalLM"),dSo=o(" (OPT model)"),cSo=l(),p2=a("li"),ohe=a("strong"),fSo=o("pegasus"),mSo=o(" \u2014 "),AO=a("a"),gSo=o("PegasusForCausalLM"),hSo=o(" (Pegasus model)"),pSo=l(),_2=a("li"),rhe=a("strong"),_So=o("plbart"),uSo=o(" \u2014 "),LO=a("a"),bSo=o("PLBartForCausalLM"),vSo=o(" (PLBart model)"),FSo=l(),u2=a("li"),the=a("strong"),TSo=o("prophetnet"),MSo=o(" \u2014 "),yO=a("a"),ESo=o("ProphetNetForCausalLM"),CSo=o(" (ProphetNet model)"),wSo=l(),b2=a("li"),ahe=a("strong"),ASo=o("qdqbert"),LSo=o(" \u2014 "),xO=a("a"),ySo=o("QDQBertLMHeadModel"),xSo=o(" (QDQBert model)"),$So=l(),v2=a("li"),nhe=a("strong"),kSo=o("reformer"),SSo=o(" \u2014 "),$O=a("a"),RSo=o("ReformerModelWithLMHead"),PSo=o(" (Reformer model)"),BSo=l(),F2=a("li"),she=a("strong"),ISo=o("rembert"),NSo=o(" \u2014 "),kO=a("a"),qSo=o("RemBertForCausalLM"),jSo=o(" (RemBERT model)"),DSo=l(),T2=a("li"),lhe=a("strong"),GSo=o("roberta"),OSo=o(" \u2014 "),SO=a("a"),VSo=o("RobertaForCausalLM"),XSo=o(" (RoBERTa model)"),zSo=l(),M2=a("li"),ihe=a("strong"),QSo=o("roformer"),WSo=o(" \u2014 "),RO=a("a"),HSo=o("RoFormerForCausalLM"),USo=o(" (RoFormer model)"),JSo=l(),E2=a("li"),dhe=a("strong"),YSo=o("speech_to_text_2"),KSo=o(" \u2014 "),PO=a("a"),ZSo=o("Speech2Text2ForCausalLM"),eRo=o(" (Speech2Text2 model)"),oRo=l(),C2=a("li"),che=a("strong"),rRo=o("transfo-xl"),tRo=o(" \u2014 "),BO=a("a"),aRo=o("TransfoXLLMHeadModel"),nRo=o(" (Transformer-XL model)"),sRo=l(),w2=a("li"),fhe=a("strong"),lRo=o("trocr"),iRo=o(" \u2014 "),IO=a("a"),dRo=o("TrOCRForCausalLM"),cRo=o(" (TrOCR model)"),fRo=l(),A2=a("li"),mhe=a("strong"),mRo=o("xglm"),gRo=o(" \u2014 "),NO=a("a"),hRo=o("XGLMForCausalLM"),pRo=o(" (XGLM model)"),_Ro=l(),L2=a("li"),ghe=a("strong"),uRo=o("xlm"),bRo=o(" \u2014 "),qO=a("a"),vRo=o("XLMWithLMHeadModel"),FRo=o(" (XLM model)"),TRo=l(),y2=a("li"),hhe=a("strong"),MRo=o("xlm-prophetnet"),ERo=o(" \u2014 "),jO=a("a"),CRo=o("XLMProphetNetForCausalLM"),wRo=o(" (XLM-ProphetNet model)"),ARo=l(),x2=a("li"),phe=a("strong"),LRo=o("xlm-roberta"),yRo=o(" \u2014 "),DO=a("a"),xRo=o("XLMRobertaForCausalLM"),$Ro=o(" (XLM-RoBERTa model)"),kRo=l(),$2=a("li"),_he=a("strong"),SRo=o("xlm-roberta-xl"),RRo=o(" \u2014 "),GO=a("a"),PRo=o("XLMRobertaXLForCausalLM"),BRo=o(" (XLM-RoBERTa-XL model)"),IRo=l(),k2=a("li"),uhe=a("strong"),NRo=o("xlnet"),qRo=o(" \u2014 "),OO=a("a"),jRo=o("XLNetLMHeadModel"),DRo=o(" (XLNet model)"),GRo=l(),S2=a("p"),ORo=o("The model is set in evaluation mode by default using "),bhe=a("code"),VRo=o("model.eval()"),XRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),zRo=o("model.train()"),QRo=l(),F(R2.$$.fragment),LXe=l(),Ji=a("h2"),P2=a("a"),Fhe=a("span"),F(UL.$$.fragment),WRo=l(),The=a("span"),HRo=o("AutoModelForMaskedLM"),yXe=l(),So=a("div"),F(JL.$$.fragment),URo=l(),Yi=a("p"),JRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VO=a("a"),YRo=o("from_pretrained()"),KRo=o(" class method or the "),XO=a("a"),ZRo=o("from_config()"),ePo=o(` class
method.`),oPo=l(),YL=a("p"),rPo=o("This class cannot be instantiated directly using "),Mhe=a("code"),tPo=o("__init__()"),aPo=o(" (throws an error)."),nPo=l(),ct=a("div"),F(KL.$$.fragment),sPo=l(),Ehe=a("p"),lPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iPo=l(),Ki=a("p"),dPo=o(`Note:
Loading a model from its configuration file does `),Che=a("strong"),cPo=o("not"),fPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=a("a"),mPo=o("from_pretrained()"),gPo=o(" to load the model weights."),hPo=l(),F(B2.$$.fragment),pPo=l(),Ze=a("div"),F(ZL.$$.fragment),_Po=l(),whe=a("p"),uPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bPo=l(),ja=a("p"),vPo=o("The model class to instantiate is selected based on the "),Ahe=a("code"),FPo=o("model_type"),TPo=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),MPo=o("pretrained_model_name_or_path"),EPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),CPo=o("pretrained_model_name_or_path"),wPo=o(":"),APo=l(),W=a("ul"),I2=a("li"),xhe=a("strong"),LPo=o("albert"),yPo=o(" \u2014 "),QO=a("a"),xPo=o("AlbertForMaskedLM"),$Po=o(" (ALBERT model)"),kPo=l(),N2=a("li"),$he=a("strong"),SPo=o("bart"),RPo=o(" \u2014 "),WO=a("a"),PPo=o("BartForConditionalGeneration"),BPo=o(" (BART model)"),IPo=l(),q2=a("li"),khe=a("strong"),NPo=o("bert"),qPo=o(" \u2014 "),HO=a("a"),jPo=o("BertForMaskedLM"),DPo=o(" (BERT model)"),GPo=l(),j2=a("li"),She=a("strong"),OPo=o("big_bird"),VPo=o(" \u2014 "),UO=a("a"),XPo=o("BigBirdForMaskedLM"),zPo=o(" (BigBird model)"),QPo=l(),D2=a("li"),Rhe=a("strong"),WPo=o("camembert"),HPo=o(" \u2014 "),JO=a("a"),UPo=o("CamembertForMaskedLM"),JPo=o(" (CamemBERT model)"),YPo=l(),G2=a("li"),Phe=a("strong"),KPo=o("convbert"),ZPo=o(" \u2014 "),YO=a("a"),eBo=o("ConvBertForMaskedLM"),oBo=o(" (ConvBERT model)"),rBo=l(),O2=a("li"),Bhe=a("strong"),tBo=o("data2vec-text"),aBo=o(" \u2014 "),KO=a("a"),nBo=o("Data2VecTextForMaskedLM"),sBo=o(" (Data2VecText model)"),lBo=l(),V2=a("li"),Ihe=a("strong"),iBo=o("deberta"),dBo=o(" \u2014 "),ZO=a("a"),cBo=o("DebertaForMaskedLM"),fBo=o(" (DeBERTa model)"),mBo=l(),X2=a("li"),Nhe=a("strong"),gBo=o("deberta-v2"),hBo=o(" \u2014 "),eV=a("a"),pBo=o("DebertaV2ForMaskedLM"),_Bo=o(" (DeBERTa-v2 model)"),uBo=l(),z2=a("li"),qhe=a("strong"),bBo=o("distilbert"),vBo=o(" \u2014 "),oV=a("a"),FBo=o("DistilBertForMaskedLM"),TBo=o(" (DistilBERT model)"),MBo=l(),Q2=a("li"),jhe=a("strong"),EBo=o("electra"),CBo=o(" \u2014 "),rV=a("a"),wBo=o("ElectraForMaskedLM"),ABo=o(" (ELECTRA model)"),LBo=l(),W2=a("li"),Dhe=a("strong"),yBo=o("flaubert"),xBo=o(" \u2014 "),tV=a("a"),$Bo=o("FlaubertWithLMHeadModel"),kBo=o(" (FlauBERT model)"),SBo=l(),H2=a("li"),Ghe=a("strong"),RBo=o("fnet"),PBo=o(" \u2014 "),aV=a("a"),BBo=o("FNetForMaskedLM"),IBo=o(" (FNet model)"),NBo=l(),U2=a("li"),Ohe=a("strong"),qBo=o("funnel"),jBo=o(" \u2014 "),nV=a("a"),DBo=o("FunnelForMaskedLM"),GBo=o(" (Funnel Transformer model)"),OBo=l(),J2=a("li"),Vhe=a("strong"),VBo=o("ibert"),XBo=o(" \u2014 "),sV=a("a"),zBo=o("IBertForMaskedLM"),QBo=o(" (I-BERT model)"),WBo=l(),Y2=a("li"),Xhe=a("strong"),HBo=o("layoutlm"),UBo=o(" \u2014 "),lV=a("a"),JBo=o("LayoutLMForMaskedLM"),YBo=o(" (LayoutLM model)"),KBo=l(),K2=a("li"),zhe=a("strong"),ZBo=o("longformer"),eIo=o(" \u2014 "),iV=a("a"),oIo=o("LongformerForMaskedLM"),rIo=o(" (Longformer model)"),tIo=l(),Z2=a("li"),Qhe=a("strong"),aIo=o("luke"),nIo=o(" \u2014 "),dV=a("a"),sIo=o("LukeForMaskedLM"),lIo=o(" (LUKE model)"),iIo=l(),e4=a("li"),Whe=a("strong"),dIo=o("mbart"),cIo=o(" \u2014 "),cV=a("a"),fIo=o("MBartForConditionalGeneration"),mIo=o(" (mBART model)"),gIo=l(),o4=a("li"),Hhe=a("strong"),hIo=o("megatron-bert"),pIo=o(" \u2014 "),fV=a("a"),_Io=o("MegatronBertForMaskedLM"),uIo=o(" (Megatron-BERT model)"),bIo=l(),r4=a("li"),Uhe=a("strong"),vIo=o("mobilebert"),FIo=o(" \u2014 "),mV=a("a"),TIo=o("MobileBertForMaskedLM"),MIo=o(" (MobileBERT model)"),EIo=l(),t4=a("li"),Jhe=a("strong"),CIo=o("mpnet"),wIo=o(" \u2014 "),gV=a("a"),AIo=o("MPNetForMaskedLM"),LIo=o(" (MPNet model)"),yIo=l(),a4=a("li"),Yhe=a("strong"),xIo=o("mvp"),$Io=o(" \u2014 "),hV=a("a"),kIo=o("MvpForConditionalGeneration"),SIo=o(" (MVP model)"),RIo=l(),n4=a("li"),Khe=a("strong"),PIo=o("nezha"),BIo=o(" \u2014 "),pV=a("a"),IIo=o("NezhaForMaskedLM"),NIo=o(" (Nezha model)"),qIo=l(),s4=a("li"),Zhe=a("strong"),jIo=o("nystromformer"),DIo=o(" \u2014 "),_V=a("a"),GIo=o("NystromformerForMaskedLM"),OIo=o(" (Nystr\xF6mformer model)"),VIo=l(),l4=a("li"),epe=a("strong"),XIo=o("perceiver"),zIo=o(" \u2014 "),uV=a("a"),QIo=o("PerceiverForMaskedLM"),WIo=o(" (Perceiver model)"),HIo=l(),i4=a("li"),ope=a("strong"),UIo=o("qdqbert"),JIo=o(" \u2014 "),bV=a("a"),YIo=o("QDQBertForMaskedLM"),KIo=o(" (QDQBert model)"),ZIo=l(),d4=a("li"),rpe=a("strong"),eNo=o("reformer"),oNo=o(" \u2014 "),vV=a("a"),rNo=o("ReformerForMaskedLM"),tNo=o(" (Reformer model)"),aNo=l(),c4=a("li"),tpe=a("strong"),nNo=o("rembert"),sNo=o(" \u2014 "),FV=a("a"),lNo=o("RemBertForMaskedLM"),iNo=o(" (RemBERT model)"),dNo=l(),f4=a("li"),ape=a("strong"),cNo=o("roberta"),fNo=o(" \u2014 "),TV=a("a"),mNo=o("RobertaForMaskedLM"),gNo=o(" (RoBERTa model)"),hNo=l(),m4=a("li"),npe=a("strong"),pNo=o("roformer"),_No=o(" \u2014 "),MV=a("a"),uNo=o("RoFormerForMaskedLM"),bNo=o(" (RoFormer model)"),vNo=l(),g4=a("li"),spe=a("strong"),FNo=o("squeezebert"),TNo=o(" \u2014 "),EV=a("a"),MNo=o("SqueezeBertForMaskedLM"),ENo=o(" (SqueezeBERT model)"),CNo=l(),h4=a("li"),lpe=a("strong"),wNo=o("tapas"),ANo=o(" \u2014 "),CV=a("a"),LNo=o("TapasForMaskedLM"),yNo=o(" (TAPAS model)"),xNo=l(),p4=a("li"),ipe=a("strong"),$No=o("wav2vec2"),kNo=o(" \u2014 "),dpe=a("code"),SNo=o("Wav2Vec2ForMaskedLM"),RNo=o(" (Wav2Vec2 model)"),PNo=l(),_4=a("li"),cpe=a("strong"),BNo=o("xlm"),INo=o(" \u2014 "),wV=a("a"),NNo=o("XLMWithLMHeadModel"),qNo=o(" (XLM model)"),jNo=l(),u4=a("li"),fpe=a("strong"),DNo=o("xlm-roberta"),GNo=o(" \u2014 "),AV=a("a"),ONo=o("XLMRobertaForMaskedLM"),VNo=o(" (XLM-RoBERTa model)"),XNo=l(),b4=a("li"),mpe=a("strong"),zNo=o("xlm-roberta-xl"),QNo=o(" \u2014 "),LV=a("a"),WNo=o("XLMRobertaXLForMaskedLM"),HNo=o(" (XLM-RoBERTa-XL model)"),UNo=l(),v4=a("li"),gpe=a("strong"),JNo=o("yoso"),YNo=o(" \u2014 "),yV=a("a"),KNo=o("YosoForMaskedLM"),ZNo=o(" (YOSO model)"),eqo=l(),F4=a("p"),oqo=o("The model is set in evaluation mode by default using "),hpe=a("code"),rqo=o("model.eval()"),tqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),aqo=o("model.train()"),nqo=l(),F(T4.$$.fragment),xXe=l(),Zi=a("h2"),M4=a("a"),_pe=a("span"),F(ey.$$.fragment),sqo=l(),upe=a("span"),lqo=o("AutoModelForSeq2SeqLM"),$Xe=l(),Ro=a("div"),F(oy.$$.fragment),iqo=l(),ed=a("p"),dqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xV=a("a"),cqo=o("from_pretrained()"),fqo=o(" class method or the "),$V=a("a"),mqo=o("from_config()"),gqo=o(` class
method.`),hqo=l(),ry=a("p"),pqo=o("This class cannot be instantiated directly using "),bpe=a("code"),_qo=o("__init__()"),uqo=o(" (throws an error)."),bqo=l(),ft=a("div"),F(ty.$$.fragment),vqo=l(),vpe=a("p"),Fqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tqo=l(),od=a("p"),Mqo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),Eqo=o("not"),Cqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),wqo=o("from_pretrained()"),Aqo=o(" to load the model weights."),Lqo=l(),F(E4.$$.fragment),yqo=l(),eo=a("div"),F(ay.$$.fragment),xqo=l(),Tpe=a("p"),$qo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kqo=l(),Da=a("p"),Sqo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),Rqo=o("model_type"),Pqo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),Bqo=o("pretrained_model_name_or_path"),Iqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),Nqo=o("pretrained_model_name_or_path"),qqo=o(":"),jqo=l(),pe=a("ul"),C4=a("li"),wpe=a("strong"),Dqo=o("bart"),Gqo=o(" \u2014 "),SV=a("a"),Oqo=o("BartForConditionalGeneration"),Vqo=o(" (BART model)"),Xqo=l(),w4=a("li"),Ape=a("strong"),zqo=o("bigbird_pegasus"),Qqo=o(" \u2014 "),RV=a("a"),Wqo=o("BigBirdPegasusForConditionalGeneration"),Hqo=o(" (BigBird-Pegasus model)"),Uqo=l(),A4=a("li"),Lpe=a("strong"),Jqo=o("blenderbot"),Yqo=o(" \u2014 "),PV=a("a"),Kqo=o("BlenderbotForConditionalGeneration"),Zqo=o(" (Blenderbot model)"),ejo=l(),L4=a("li"),ype=a("strong"),ojo=o("blenderbot-small"),rjo=o(" \u2014 "),BV=a("a"),tjo=o("BlenderbotSmallForConditionalGeneration"),ajo=o(" (BlenderbotSmall model)"),njo=l(),y4=a("li"),xpe=a("strong"),sjo=o("encoder-decoder"),ljo=o(" \u2014 "),IV=a("a"),ijo=o("EncoderDecoderModel"),djo=o(" (Encoder decoder model)"),cjo=l(),x4=a("li"),$pe=a("strong"),fjo=o("fsmt"),mjo=o(" \u2014 "),NV=a("a"),gjo=o("FSMTForConditionalGeneration"),hjo=o(" (FairSeq Machine-Translation model)"),pjo=l(),$4=a("li"),kpe=a("strong"),_jo=o("led"),ujo=o(" \u2014 "),qV=a("a"),bjo=o("LEDForConditionalGeneration"),vjo=o(" (LED model)"),Fjo=l(),k4=a("li"),Spe=a("strong"),Tjo=o("longt5"),Mjo=o(" \u2014 "),jV=a("a"),Ejo=o("LongT5ForConditionalGeneration"),Cjo=o(" (LongT5 model)"),wjo=l(),S4=a("li"),Rpe=a("strong"),Ajo=o("m2m_100"),Ljo=o(" \u2014 "),DV=a("a"),yjo=o("M2M100ForConditionalGeneration"),xjo=o(" (M2M100 model)"),$jo=l(),R4=a("li"),Ppe=a("strong"),kjo=o("marian"),Sjo=o(" \u2014 "),GV=a("a"),Rjo=o("MarianMTModel"),Pjo=o(" (Marian model)"),Bjo=l(),P4=a("li"),Bpe=a("strong"),Ijo=o("mbart"),Njo=o(" \u2014 "),OV=a("a"),qjo=o("MBartForConditionalGeneration"),jjo=o(" (mBART model)"),Djo=l(),B4=a("li"),Ipe=a("strong"),Gjo=o("mt5"),Ojo=o(" \u2014 "),VV=a("a"),Vjo=o("MT5ForConditionalGeneration"),Xjo=o(" (MT5 model)"),zjo=l(),I4=a("li"),Npe=a("strong"),Qjo=o("mvp"),Wjo=o(" \u2014 "),XV=a("a"),Hjo=o("MvpForConditionalGeneration"),Ujo=o(" (MVP model)"),Jjo=l(),N4=a("li"),qpe=a("strong"),Yjo=o("pegasus"),Kjo=o(" \u2014 "),zV=a("a"),Zjo=o("PegasusForConditionalGeneration"),eDo=o(" (Pegasus model)"),oDo=l(),q4=a("li"),jpe=a("strong"),rDo=o("plbart"),tDo=o(" \u2014 "),QV=a("a"),aDo=o("PLBartForConditionalGeneration"),nDo=o(" (PLBart model)"),sDo=l(),j4=a("li"),Dpe=a("strong"),lDo=o("prophetnet"),iDo=o(" \u2014 "),WV=a("a"),dDo=o("ProphetNetForConditionalGeneration"),cDo=o(" (ProphetNet model)"),fDo=l(),D4=a("li"),Gpe=a("strong"),mDo=o("t5"),gDo=o(" \u2014 "),HV=a("a"),hDo=o("T5ForConditionalGeneration"),pDo=o(" (T5 model)"),_Do=l(),G4=a("li"),Ope=a("strong"),uDo=o("xlm-prophetnet"),bDo=o(" \u2014 "),UV=a("a"),vDo=o("XLMProphetNetForConditionalGeneration"),FDo=o(" (XLM-ProphetNet model)"),TDo=l(),O4=a("p"),MDo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),EDo=o("model.eval()"),CDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),wDo=o("model.train()"),ADo=l(),F(V4.$$.fragment),kXe=l(),rd=a("h2"),X4=a("a"),zpe=a("span"),F(ny.$$.fragment),LDo=l(),Qpe=a("span"),yDo=o("AutoModelForSequenceClassification"),SXe=l(),Po=a("div"),F(sy.$$.fragment),xDo=l(),td=a("p"),$Do=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JV=a("a"),kDo=o("from_pretrained()"),SDo=o(" class method or the "),YV=a("a"),RDo=o("from_config()"),PDo=o(` class
method.`),BDo=l(),ly=a("p"),IDo=o("This class cannot be instantiated directly using "),Wpe=a("code"),NDo=o("__init__()"),qDo=o(" (throws an error)."),jDo=l(),mt=a("div"),F(iy.$$.fragment),DDo=l(),Hpe=a("p"),GDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ODo=l(),ad=a("p"),VDo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),XDo=o("not"),zDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),QDo=o("from_pretrained()"),WDo=o(" to load the model weights."),HDo=l(),F(z4.$$.fragment),UDo=l(),oo=a("div"),F(dy.$$.fragment),JDo=l(),Jpe=a("p"),YDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KDo=l(),Ga=a("p"),ZDo=o("The model class to instantiate is selected based on the "),Ype=a("code"),eGo=o("model_type"),oGo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),rGo=o("pretrained_model_name_or_path"),tGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),aGo=o("pretrained_model_name_or_path"),nGo=o(":"),sGo=l(),N=a("ul"),Q4=a("li"),e_e=a("strong"),lGo=o("albert"),iGo=o(" \u2014 "),ZV=a("a"),dGo=o("AlbertForSequenceClassification"),cGo=o(" (ALBERT model)"),fGo=l(),W4=a("li"),o_e=a("strong"),mGo=o("bart"),gGo=o(" \u2014 "),eX=a("a"),hGo=o("BartForSequenceClassification"),pGo=o(" (BART model)"),_Go=l(),H4=a("li"),r_e=a("strong"),uGo=o("bert"),bGo=o(" \u2014 "),oX=a("a"),vGo=o("BertForSequenceClassification"),FGo=o(" (BERT model)"),TGo=l(),U4=a("li"),t_e=a("strong"),MGo=o("big_bird"),EGo=o(" \u2014 "),rX=a("a"),CGo=o("BigBirdForSequenceClassification"),wGo=o(" (BigBird model)"),AGo=l(),J4=a("li"),a_e=a("strong"),LGo=o("bigbird_pegasus"),yGo=o(" \u2014 "),tX=a("a"),xGo=o("BigBirdPegasusForSequenceClassification"),$Go=o(" (BigBird-Pegasus model)"),kGo=l(),Y4=a("li"),n_e=a("strong"),SGo=o("bloom"),RGo=o(" \u2014 "),aX=a("a"),PGo=o("BloomForSequenceClassification"),BGo=o(" (BLOOM model)"),IGo=l(),K4=a("li"),s_e=a("strong"),NGo=o("camembert"),qGo=o(" \u2014 "),nX=a("a"),jGo=o("CamembertForSequenceClassification"),DGo=o(" (CamemBERT model)"),GGo=l(),Z4=a("li"),l_e=a("strong"),OGo=o("canine"),VGo=o(" \u2014 "),sX=a("a"),XGo=o("CanineForSequenceClassification"),zGo=o(" (CANINE model)"),QGo=l(),eb=a("li"),i_e=a("strong"),WGo=o("convbert"),HGo=o(" \u2014 "),lX=a("a"),UGo=o("ConvBertForSequenceClassification"),JGo=o(" (ConvBERT model)"),YGo=l(),ob=a("li"),d_e=a("strong"),KGo=o("ctrl"),ZGo=o(" \u2014 "),iX=a("a"),eOo=o("CTRLForSequenceClassification"),oOo=o(" (CTRL model)"),rOo=l(),rb=a("li"),c_e=a("strong"),tOo=o("data2vec-text"),aOo=o(" \u2014 "),dX=a("a"),nOo=o("Data2VecTextForSequenceClassification"),sOo=o(" (Data2VecText model)"),lOo=l(),tb=a("li"),f_e=a("strong"),iOo=o("deberta"),dOo=o(" \u2014 "),cX=a("a"),cOo=o("DebertaForSequenceClassification"),fOo=o(" (DeBERTa model)"),mOo=l(),ab=a("li"),m_e=a("strong"),gOo=o("deberta-v2"),hOo=o(" \u2014 "),fX=a("a"),pOo=o("DebertaV2ForSequenceClassification"),_Oo=o(" (DeBERTa-v2 model)"),uOo=l(),nb=a("li"),g_e=a("strong"),bOo=o("distilbert"),vOo=o(" \u2014 "),mX=a("a"),FOo=o("DistilBertForSequenceClassification"),TOo=o(" (DistilBERT model)"),MOo=l(),sb=a("li"),h_e=a("strong"),EOo=o("electra"),COo=o(" \u2014 "),gX=a("a"),wOo=o("ElectraForSequenceClassification"),AOo=o(" (ELECTRA model)"),LOo=l(),lb=a("li"),p_e=a("strong"),yOo=o("flaubert"),xOo=o(" \u2014 "),hX=a("a"),$Oo=o("FlaubertForSequenceClassification"),kOo=o(" (FlauBERT model)"),SOo=l(),ib=a("li"),__e=a("strong"),ROo=o("fnet"),POo=o(" \u2014 "),pX=a("a"),BOo=o("FNetForSequenceClassification"),IOo=o(" (FNet model)"),NOo=l(),db=a("li"),u_e=a("strong"),qOo=o("funnel"),jOo=o(" \u2014 "),_X=a("a"),DOo=o("FunnelForSequenceClassification"),GOo=o(" (Funnel Transformer model)"),OOo=l(),cb=a("li"),b_e=a("strong"),VOo=o("gpt2"),XOo=o(" \u2014 "),uX=a("a"),zOo=o("GPT2ForSequenceClassification"),QOo=o(" (OpenAI GPT-2 model)"),WOo=l(),fb=a("li"),v_e=a("strong"),HOo=o("gpt_neo"),UOo=o(" \u2014 "),bX=a("a"),JOo=o("GPTNeoForSequenceClassification"),YOo=o(" (GPT Neo model)"),KOo=l(),mb=a("li"),F_e=a("strong"),ZOo=o("gptj"),eVo=o(" \u2014 "),vX=a("a"),oVo=o("GPTJForSequenceClassification"),rVo=o(" (GPT-J model)"),tVo=l(),gb=a("li"),T_e=a("strong"),aVo=o("ibert"),nVo=o(" \u2014 "),FX=a("a"),sVo=o("IBertForSequenceClassification"),lVo=o(" (I-BERT model)"),iVo=l(),hb=a("li"),M_e=a("strong"),dVo=o("layoutlm"),cVo=o(" \u2014 "),TX=a("a"),fVo=o("LayoutLMForSequenceClassification"),mVo=o(" (LayoutLM model)"),gVo=l(),pb=a("li"),E_e=a("strong"),hVo=o("layoutlmv2"),pVo=o(" \u2014 "),MX=a("a"),_Vo=o("LayoutLMv2ForSequenceClassification"),uVo=o(" (LayoutLMv2 model)"),bVo=l(),_b=a("li"),C_e=a("strong"),vVo=o("layoutlmv3"),FVo=o(" \u2014 "),EX=a("a"),TVo=o("LayoutLMv3ForSequenceClassification"),MVo=o(" (LayoutLMv3 model)"),EVo=l(),ub=a("li"),w_e=a("strong"),CVo=o("led"),wVo=o(" \u2014 "),CX=a("a"),AVo=o("LEDForSequenceClassification"),LVo=o(" (LED model)"),yVo=l(),bb=a("li"),A_e=a("strong"),xVo=o("longformer"),$Vo=o(" \u2014 "),wX=a("a"),kVo=o("LongformerForSequenceClassification"),SVo=o(" (Longformer model)"),RVo=l(),vb=a("li"),L_e=a("strong"),PVo=o("mbart"),BVo=o(" \u2014 "),AX=a("a"),IVo=o("MBartForSequenceClassification"),NVo=o(" (mBART model)"),qVo=l(),Fb=a("li"),y_e=a("strong"),jVo=o("megatron-bert"),DVo=o(" \u2014 "),LX=a("a"),GVo=o("MegatronBertForSequenceClassification"),OVo=o(" (Megatron-BERT model)"),VVo=l(),Tb=a("li"),x_e=a("strong"),XVo=o("mobilebert"),zVo=o(" \u2014 "),yX=a("a"),QVo=o("MobileBertForSequenceClassification"),WVo=o(" (MobileBERT model)"),HVo=l(),Mb=a("li"),$_e=a("strong"),UVo=o("mpnet"),JVo=o(" \u2014 "),xX=a("a"),YVo=o("MPNetForSequenceClassification"),KVo=o(" (MPNet model)"),ZVo=l(),Eb=a("li"),k_e=a("strong"),eXo=o("mvp"),oXo=o(" \u2014 "),$X=a("a"),rXo=o("MvpForSequenceClassification"),tXo=o(" (MVP model)"),aXo=l(),Cb=a("li"),S_e=a("strong"),nXo=o("nezha"),sXo=o(" \u2014 "),kX=a("a"),lXo=o("NezhaForSequenceClassification"),iXo=o(" (Nezha model)"),dXo=l(),wb=a("li"),R_e=a("strong"),cXo=o("nystromformer"),fXo=o(" \u2014 "),SX=a("a"),mXo=o("NystromformerForSequenceClassification"),gXo=o(" (Nystr\xF6mformer model)"),hXo=l(),Ab=a("li"),P_e=a("strong"),pXo=o("openai-gpt"),_Xo=o(" \u2014 "),RX=a("a"),uXo=o("OpenAIGPTForSequenceClassification"),bXo=o(" (OpenAI GPT model)"),vXo=l(),Lb=a("li"),B_e=a("strong"),FXo=o("perceiver"),TXo=o(" \u2014 "),PX=a("a"),MXo=o("PerceiverForSequenceClassification"),EXo=o(" (Perceiver model)"),CXo=l(),yb=a("li"),I_e=a("strong"),wXo=o("plbart"),AXo=o(" \u2014 "),BX=a("a"),LXo=o("PLBartForSequenceClassification"),yXo=o(" (PLBart model)"),xXo=l(),xb=a("li"),N_e=a("strong"),$Xo=o("qdqbert"),kXo=o(" \u2014 "),IX=a("a"),SXo=o("QDQBertForSequenceClassification"),RXo=o(" (QDQBert model)"),PXo=l(),$b=a("li"),q_e=a("strong"),BXo=o("reformer"),IXo=o(" \u2014 "),NX=a("a"),NXo=o("ReformerForSequenceClassification"),qXo=o(" (Reformer model)"),jXo=l(),kb=a("li"),j_e=a("strong"),DXo=o("rembert"),GXo=o(" \u2014 "),qX=a("a"),OXo=o("RemBertForSequenceClassification"),VXo=o(" (RemBERT model)"),XXo=l(),Sb=a("li"),D_e=a("strong"),zXo=o("roberta"),QXo=o(" \u2014 "),jX=a("a"),WXo=o("RobertaForSequenceClassification"),HXo=o(" (RoBERTa model)"),UXo=l(),Rb=a("li"),G_e=a("strong"),JXo=o("roformer"),YXo=o(" \u2014 "),DX=a("a"),KXo=o("RoFormerForSequenceClassification"),ZXo=o(" (RoFormer model)"),ezo=l(),Pb=a("li"),O_e=a("strong"),ozo=o("squeezebert"),rzo=o(" \u2014 "),GX=a("a"),tzo=o("SqueezeBertForSequenceClassification"),azo=o(" (SqueezeBERT model)"),nzo=l(),Bb=a("li"),V_e=a("strong"),szo=o("tapas"),lzo=o(" \u2014 "),OX=a("a"),izo=o("TapasForSequenceClassification"),dzo=o(" (TAPAS model)"),czo=l(),Ib=a("li"),X_e=a("strong"),fzo=o("transfo-xl"),mzo=o(" \u2014 "),VX=a("a"),gzo=o("TransfoXLForSequenceClassification"),hzo=o(" (Transformer-XL model)"),pzo=l(),Nb=a("li"),z_e=a("strong"),_zo=o("xlm"),uzo=o(" \u2014 "),XX=a("a"),bzo=o("XLMForSequenceClassification"),vzo=o(" (XLM model)"),Fzo=l(),qb=a("li"),Q_e=a("strong"),Tzo=o("xlm-roberta"),Mzo=o(" \u2014 "),zX=a("a"),Ezo=o("XLMRobertaForSequenceClassification"),Czo=o(" (XLM-RoBERTa model)"),wzo=l(),jb=a("li"),W_e=a("strong"),Azo=o("xlm-roberta-xl"),Lzo=o(" \u2014 "),QX=a("a"),yzo=o("XLMRobertaXLForSequenceClassification"),xzo=o(" (XLM-RoBERTa-XL model)"),$zo=l(),Db=a("li"),H_e=a("strong"),kzo=o("xlnet"),Szo=o(" \u2014 "),WX=a("a"),Rzo=o("XLNetForSequenceClassification"),Pzo=o(" (XLNet model)"),Bzo=l(),Gb=a("li"),U_e=a("strong"),Izo=o("yoso"),Nzo=o(" \u2014 "),HX=a("a"),qzo=o("YosoForSequenceClassification"),jzo=o(" (YOSO model)"),Dzo=l(),Ob=a("p"),Gzo=o("The model is set in evaluation mode by default using "),J_e=a("code"),Ozo=o("model.eval()"),Vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=a("code"),Xzo=o("model.train()"),zzo=l(),F(Vb.$$.fragment),RXe=l(),nd=a("h2"),Xb=a("a"),K_e=a("span"),F(cy.$$.fragment),Qzo=l(),Z_e=a("span"),Wzo=o("AutoModelForMultipleChoice"),PXe=l(),Bo=a("div"),F(fy.$$.fragment),Hzo=l(),sd=a("p"),Uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UX=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" class method or the "),JX=a("a"),Kzo=o("from_config()"),Zzo=o(` class
method.`),eQo=l(),my=a("p"),oQo=o("This class cannot be instantiated directly using "),eue=a("code"),rQo=o("__init__()"),tQo=o(" (throws an error)."),aQo=l(),gt=a("div"),F(gy.$$.fragment),nQo=l(),oue=a("p"),sQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lQo=l(),ld=a("p"),iQo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),dQo=o("not"),cQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),fQo=o("from_pretrained()"),mQo=o(" to load the model weights."),gQo=l(),F(zb.$$.fragment),hQo=l(),ro=a("div"),F(hy.$$.fragment),pQo=l(),tue=a("p"),_Qo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uQo=l(),Oa=a("p"),bQo=o("The model class to instantiate is selected based on the "),aue=a("code"),vQo=o("model_type"),FQo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),TQo=o("pretrained_model_name_or_path"),MQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),EQo=o("pretrained_model_name_or_path"),CQo=o(":"),wQo=l(),Z=a("ul"),Qb=a("li"),lue=a("strong"),AQo=o("albert"),LQo=o(" \u2014 "),KX=a("a"),yQo=o("AlbertForMultipleChoice"),xQo=o(" (ALBERT model)"),$Qo=l(),Wb=a("li"),iue=a("strong"),kQo=o("bert"),SQo=o(" \u2014 "),ZX=a("a"),RQo=o("BertForMultipleChoice"),PQo=o(" (BERT model)"),BQo=l(),Hb=a("li"),due=a("strong"),IQo=o("big_bird"),NQo=o(" \u2014 "),ez=a("a"),qQo=o("BigBirdForMultipleChoice"),jQo=o(" (BigBird model)"),DQo=l(),Ub=a("li"),cue=a("strong"),GQo=o("camembert"),OQo=o(" \u2014 "),oz=a("a"),VQo=o("CamembertForMultipleChoice"),XQo=o(" (CamemBERT model)"),zQo=l(),Jb=a("li"),fue=a("strong"),QQo=o("canine"),WQo=o(" \u2014 "),rz=a("a"),HQo=o("CanineForMultipleChoice"),UQo=o(" (CANINE model)"),JQo=l(),Yb=a("li"),mue=a("strong"),YQo=o("convbert"),KQo=o(" \u2014 "),tz=a("a"),ZQo=o("ConvBertForMultipleChoice"),eWo=o(" (ConvBERT model)"),oWo=l(),Kb=a("li"),gue=a("strong"),rWo=o("data2vec-text"),tWo=o(" \u2014 "),az=a("a"),aWo=o("Data2VecTextForMultipleChoice"),nWo=o(" (Data2VecText model)"),sWo=l(),Zb=a("li"),hue=a("strong"),lWo=o("deberta-v2"),iWo=o(" \u2014 "),nz=a("a"),dWo=o("DebertaV2ForMultipleChoice"),cWo=o(" (DeBERTa-v2 model)"),fWo=l(),ev=a("li"),pue=a("strong"),mWo=o("distilbert"),gWo=o(" \u2014 "),sz=a("a"),hWo=o("DistilBertForMultipleChoice"),pWo=o(" (DistilBERT model)"),_Wo=l(),ov=a("li"),_ue=a("strong"),uWo=o("electra"),bWo=o(" \u2014 "),lz=a("a"),vWo=o("ElectraForMultipleChoice"),FWo=o(" (ELECTRA model)"),TWo=l(),rv=a("li"),uue=a("strong"),MWo=o("flaubert"),EWo=o(" \u2014 "),iz=a("a"),CWo=o("FlaubertForMultipleChoice"),wWo=o(" (FlauBERT model)"),AWo=l(),tv=a("li"),bue=a("strong"),LWo=o("fnet"),yWo=o(" \u2014 "),dz=a("a"),xWo=o("FNetForMultipleChoice"),$Wo=o(" (FNet model)"),kWo=l(),av=a("li"),vue=a("strong"),SWo=o("funnel"),RWo=o(" \u2014 "),cz=a("a"),PWo=o("FunnelForMultipleChoice"),BWo=o(" (Funnel Transformer model)"),IWo=l(),nv=a("li"),Fue=a("strong"),NWo=o("ibert"),qWo=o(" \u2014 "),fz=a("a"),jWo=o("IBertForMultipleChoice"),DWo=o(" (I-BERT model)"),GWo=l(),sv=a("li"),Tue=a("strong"),OWo=o("longformer"),VWo=o(" \u2014 "),mz=a("a"),XWo=o("LongformerForMultipleChoice"),zWo=o(" (Longformer model)"),QWo=l(),lv=a("li"),Mue=a("strong"),WWo=o("megatron-bert"),HWo=o(" \u2014 "),gz=a("a"),UWo=o("MegatronBertForMultipleChoice"),JWo=o(" (Megatron-BERT model)"),YWo=l(),iv=a("li"),Eue=a("strong"),KWo=o("mobilebert"),ZWo=o(" \u2014 "),hz=a("a"),eHo=o("MobileBertForMultipleChoice"),oHo=o(" (MobileBERT model)"),rHo=l(),dv=a("li"),Cue=a("strong"),tHo=o("mpnet"),aHo=o(" \u2014 "),pz=a("a"),nHo=o("MPNetForMultipleChoice"),sHo=o(" (MPNet model)"),lHo=l(),cv=a("li"),wue=a("strong"),iHo=o("nezha"),dHo=o(" \u2014 "),_z=a("a"),cHo=o("NezhaForMultipleChoice"),fHo=o(" (Nezha model)"),mHo=l(),fv=a("li"),Aue=a("strong"),gHo=o("nystromformer"),hHo=o(" \u2014 "),uz=a("a"),pHo=o("NystromformerForMultipleChoice"),_Ho=o(" (Nystr\xF6mformer model)"),uHo=l(),mv=a("li"),Lue=a("strong"),bHo=o("qdqbert"),vHo=o(" \u2014 "),bz=a("a"),FHo=o("QDQBertForMultipleChoice"),THo=o(" (QDQBert model)"),MHo=l(),gv=a("li"),yue=a("strong"),EHo=o("rembert"),CHo=o(" \u2014 "),vz=a("a"),wHo=o("RemBertForMultipleChoice"),AHo=o(" (RemBERT model)"),LHo=l(),hv=a("li"),xue=a("strong"),yHo=o("roberta"),xHo=o(" \u2014 "),Fz=a("a"),$Ho=o("RobertaForMultipleChoice"),kHo=o(" (RoBERTa model)"),SHo=l(),pv=a("li"),$ue=a("strong"),RHo=o("roformer"),PHo=o(" \u2014 "),Tz=a("a"),BHo=o("RoFormerForMultipleChoice"),IHo=o(" (RoFormer model)"),NHo=l(),_v=a("li"),kue=a("strong"),qHo=o("squeezebert"),jHo=o(" \u2014 "),Mz=a("a"),DHo=o("SqueezeBertForMultipleChoice"),GHo=o(" (SqueezeBERT model)"),OHo=l(),uv=a("li"),Sue=a("strong"),VHo=o("xlm"),XHo=o(" \u2014 "),Ez=a("a"),zHo=o("XLMForMultipleChoice"),QHo=o(" (XLM model)"),WHo=l(),bv=a("li"),Rue=a("strong"),HHo=o("xlm-roberta"),UHo=o(" \u2014 "),Cz=a("a"),JHo=o("XLMRobertaForMultipleChoice"),YHo=o(" (XLM-RoBERTa model)"),KHo=l(),vv=a("li"),Pue=a("strong"),ZHo=o("xlm-roberta-xl"),eUo=o(" \u2014 "),wz=a("a"),oUo=o("XLMRobertaXLForMultipleChoice"),rUo=o(" (XLM-RoBERTa-XL model)"),tUo=l(),Fv=a("li"),Bue=a("strong"),aUo=o("xlnet"),nUo=o(" \u2014 "),Az=a("a"),sUo=o("XLNetForMultipleChoice"),lUo=o(" (XLNet model)"),iUo=l(),Tv=a("li"),Iue=a("strong"),dUo=o("yoso"),cUo=o(" \u2014 "),Lz=a("a"),fUo=o("YosoForMultipleChoice"),mUo=o(" (YOSO model)"),gUo=l(),Mv=a("p"),hUo=o("The model is set in evaluation mode by default using "),Nue=a("code"),pUo=o("model.eval()"),_Uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),uUo=o("model.train()"),bUo=l(),F(Ev.$$.fragment),BXe=l(),id=a("h2"),Cv=a("a"),jue=a("span"),F(py.$$.fragment),vUo=l(),Due=a("span"),FUo=o("AutoModelForNextSentencePrediction"),IXe=l(),Io=a("div"),F(_y.$$.fragment),TUo=l(),dd=a("p"),MUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yz=a("a"),EUo=o("from_pretrained()"),CUo=o(" class method or the "),xz=a("a"),wUo=o("from_config()"),AUo=o(` class
method.`),LUo=l(),uy=a("p"),yUo=o("This class cannot be instantiated directly using "),Gue=a("code"),xUo=o("__init__()"),$Uo=o(" (throws an error)."),kUo=l(),ht=a("div"),F(by.$$.fragment),SUo=l(),Oue=a("p"),RUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PUo=l(),cd=a("p"),BUo=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),IUo=o("not"),NUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),qUo=o("from_pretrained()"),jUo=o(" to load the model weights."),DUo=l(),F(wv.$$.fragment),GUo=l(),to=a("div"),F(vy.$$.fragment),OUo=l(),Xue=a("p"),VUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XUo=l(),Va=a("p"),zUo=o("The model class to instantiate is selected based on the "),zue=a("code"),QUo=o("model_type"),WUo=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),JUo=o("pretrained_model_name_or_path"),YUo=o(":"),KUo=l(),No=a("ul"),Av=a("li"),Hue=a("strong"),ZUo=o("bert"),eJo=o(" \u2014 "),kz=a("a"),oJo=o("BertForNextSentencePrediction"),rJo=o(" (BERT model)"),tJo=l(),Lv=a("li"),Uue=a("strong"),aJo=o("fnet"),nJo=o(" \u2014 "),Sz=a("a"),sJo=o("FNetForNextSentencePrediction"),lJo=o(" (FNet model)"),iJo=l(),yv=a("li"),Jue=a("strong"),dJo=o("megatron-bert"),cJo=o(" \u2014 "),Rz=a("a"),fJo=o("MegatronBertForNextSentencePrediction"),mJo=o(" (Megatron-BERT model)"),gJo=l(),xv=a("li"),Yue=a("strong"),hJo=o("mobilebert"),pJo=o(" \u2014 "),Pz=a("a"),_Jo=o("MobileBertForNextSentencePrediction"),uJo=o(" (MobileBERT model)"),bJo=l(),$v=a("li"),Kue=a("strong"),vJo=o("nezha"),FJo=o(" \u2014 "),Bz=a("a"),TJo=o("NezhaForNextSentencePrediction"),MJo=o(" (Nezha model)"),EJo=l(),kv=a("li"),Zue=a("strong"),CJo=o("qdqbert"),wJo=o(" \u2014 "),Iz=a("a"),AJo=o("QDQBertForNextSentencePrediction"),LJo=o(" (QDQBert model)"),yJo=l(),Sv=a("p"),xJo=o("The model is set in evaluation mode by default using "),e1e=a("code"),$Jo=o("model.eval()"),kJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),SJo=o("model.train()"),RJo=l(),F(Rv.$$.fragment),NXe=l(),fd=a("h2"),Pv=a("a"),r1e=a("span"),F(Fy.$$.fragment),PJo=l(),t1e=a("span"),BJo=o("AutoModelForTokenClassification"),qXe=l(),qo=a("div"),F(Ty.$$.fragment),IJo=l(),md=a("p"),NJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Nz=a("a"),qJo=o("from_pretrained()"),jJo=o(" class method or the "),qz=a("a"),DJo=o("from_config()"),GJo=o(` class
method.`),OJo=l(),My=a("p"),VJo=o("This class cannot be instantiated directly using "),a1e=a("code"),XJo=o("__init__()"),zJo=o(" (throws an error)."),QJo=l(),pt=a("div"),F(Ey.$$.fragment),WJo=l(),n1e=a("p"),HJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UJo=l(),gd=a("p"),JJo=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),YJo=o("not"),KJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),ZJo=o("from_pretrained()"),eYo=o(" to load the model weights."),oYo=l(),F(Bv.$$.fragment),rYo=l(),ao=a("div"),F(Cy.$$.fragment),tYo=l(),l1e=a("p"),aYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nYo=l(),Xa=a("p"),sYo=o("The model class to instantiate is selected based on the "),i1e=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(":"),gYo=l(),U=a("ul"),Iv=a("li"),f1e=a("strong"),hYo=o("albert"),pYo=o(" \u2014 "),Dz=a("a"),_Yo=o("AlbertForTokenClassification"),uYo=o(" (ALBERT model)"),bYo=l(),Nv=a("li"),m1e=a("strong"),vYo=o("bert"),FYo=o(" \u2014 "),Gz=a("a"),TYo=o("BertForTokenClassification"),MYo=o(" (BERT model)"),EYo=l(),qv=a("li"),g1e=a("strong"),CYo=o("big_bird"),wYo=o(" \u2014 "),Oz=a("a"),AYo=o("BigBirdForTokenClassification"),LYo=o(" (BigBird model)"),yYo=l(),jv=a("li"),h1e=a("strong"),xYo=o("bloom"),$Yo=o(" \u2014 "),Vz=a("a"),kYo=o("BloomForTokenClassification"),SYo=o(" (BLOOM model)"),RYo=l(),Dv=a("li"),p1e=a("strong"),PYo=o("camembert"),BYo=o(" \u2014 "),Xz=a("a"),IYo=o("CamembertForTokenClassification"),NYo=o(" (CamemBERT model)"),qYo=l(),Gv=a("li"),_1e=a("strong"),jYo=o("canine"),DYo=o(" \u2014 "),zz=a("a"),GYo=o("CanineForTokenClassification"),OYo=o(" (CANINE model)"),VYo=l(),Ov=a("li"),u1e=a("strong"),XYo=o("convbert"),zYo=o(" \u2014 "),Qz=a("a"),QYo=o("ConvBertForTokenClassification"),WYo=o(" (ConvBERT model)"),HYo=l(),Vv=a("li"),b1e=a("strong"),UYo=o("data2vec-text"),JYo=o(" \u2014 "),Wz=a("a"),YYo=o("Data2VecTextForTokenClassification"),KYo=o(" (Data2VecText model)"),ZYo=l(),Xv=a("li"),v1e=a("strong"),eKo=o("deberta"),oKo=o(" \u2014 "),Hz=a("a"),rKo=o("DebertaForTokenClassification"),tKo=o(" (DeBERTa model)"),aKo=l(),zv=a("li"),F1e=a("strong"),nKo=o("deberta-v2"),sKo=o(" \u2014 "),Uz=a("a"),lKo=o("DebertaV2ForTokenClassification"),iKo=o(" (DeBERTa-v2 model)"),dKo=l(),Qv=a("li"),T1e=a("strong"),cKo=o("distilbert"),fKo=o(" \u2014 "),Jz=a("a"),mKo=o("DistilBertForTokenClassification"),gKo=o(" (DistilBERT model)"),hKo=l(),Wv=a("li"),M1e=a("strong"),pKo=o("electra"),_Ko=o(" \u2014 "),Yz=a("a"),uKo=o("ElectraForTokenClassification"),bKo=o(" (ELECTRA model)"),vKo=l(),Hv=a("li"),E1e=a("strong"),FKo=o("flaubert"),TKo=o(" \u2014 "),Kz=a("a"),MKo=o("FlaubertForTokenClassification"),EKo=o(" (FlauBERT model)"),CKo=l(),Uv=a("li"),C1e=a("strong"),wKo=o("fnet"),AKo=o(" \u2014 "),Zz=a("a"),LKo=o("FNetForTokenClassification"),yKo=o(" (FNet model)"),xKo=l(),Jv=a("li"),w1e=a("strong"),$Ko=o("funnel"),kKo=o(" \u2014 "),eQ=a("a"),SKo=o("FunnelForTokenClassification"),RKo=o(" (Funnel Transformer model)"),PKo=l(),Yv=a("li"),A1e=a("strong"),BKo=o("gpt2"),IKo=o(" \u2014 "),oQ=a("a"),NKo=o("GPT2ForTokenClassification"),qKo=o(" (OpenAI GPT-2 model)"),jKo=l(),Kv=a("li"),L1e=a("strong"),DKo=o("ibert"),GKo=o(" \u2014 "),rQ=a("a"),OKo=o("IBertForTokenClassification"),VKo=o(" (I-BERT model)"),XKo=l(),Zv=a("li"),y1e=a("strong"),zKo=o("layoutlm"),QKo=o(" \u2014 "),tQ=a("a"),WKo=o("LayoutLMForTokenClassification"),HKo=o(" (LayoutLM model)"),UKo=l(),eF=a("li"),x1e=a("strong"),JKo=o("layoutlmv2"),YKo=o(" \u2014 "),aQ=a("a"),KKo=o("LayoutLMv2ForTokenClassification"),ZKo=o(" (LayoutLMv2 model)"),eZo=l(),oF=a("li"),$1e=a("strong"),oZo=o("layoutlmv3"),rZo=o(" \u2014 "),nQ=a("a"),tZo=o("LayoutLMv3ForTokenClassification"),aZo=o(" (LayoutLMv3 model)"),nZo=l(),rF=a("li"),k1e=a("strong"),sZo=o("longformer"),lZo=o(" \u2014 "),sQ=a("a"),iZo=o("LongformerForTokenClassification"),dZo=o(" (Longformer model)"),cZo=l(),tF=a("li"),S1e=a("strong"),fZo=o("megatron-bert"),mZo=o(" \u2014 "),lQ=a("a"),gZo=o("MegatronBertForTokenClassification"),hZo=o(" (Megatron-BERT model)"),pZo=l(),aF=a("li"),R1e=a("strong"),_Zo=o("mobilebert"),uZo=o(" \u2014 "),iQ=a("a"),bZo=o("MobileBertForTokenClassification"),vZo=o(" (MobileBERT model)"),FZo=l(),nF=a("li"),P1e=a("strong"),TZo=o("mpnet"),MZo=o(" \u2014 "),dQ=a("a"),EZo=o("MPNetForTokenClassification"),CZo=o(" (MPNet model)"),wZo=l(),sF=a("li"),B1e=a("strong"),AZo=o("nezha"),LZo=o(" \u2014 "),cQ=a("a"),yZo=o("NezhaForTokenClassification"),xZo=o(" (Nezha model)"),$Zo=l(),lF=a("li"),I1e=a("strong"),kZo=o("nystromformer"),SZo=o(" \u2014 "),fQ=a("a"),RZo=o("NystromformerForTokenClassification"),PZo=o(" (Nystr\xF6mformer model)"),BZo=l(),iF=a("li"),N1e=a("strong"),IZo=o("qdqbert"),NZo=o(" \u2014 "),mQ=a("a"),qZo=o("QDQBertForTokenClassification"),jZo=o(" (QDQBert model)"),DZo=l(),dF=a("li"),q1e=a("strong"),GZo=o("rembert"),OZo=o(" \u2014 "),gQ=a("a"),VZo=o("RemBertForTokenClassification"),XZo=o(" (RemBERT model)"),zZo=l(),cF=a("li"),j1e=a("strong"),QZo=o("roberta"),WZo=o(" \u2014 "),hQ=a("a"),HZo=o("RobertaForTokenClassification"),UZo=o(" (RoBERTa model)"),JZo=l(),fF=a("li"),D1e=a("strong"),YZo=o("roformer"),KZo=o(" \u2014 "),pQ=a("a"),ZZo=o("RoFormerForTokenClassification"),eer=o(" (RoFormer model)"),oer=l(),mF=a("li"),G1e=a("strong"),rer=o("squeezebert"),ter=o(" \u2014 "),_Q=a("a"),aer=o("SqueezeBertForTokenClassification"),ner=o(" (SqueezeBERT model)"),ser=l(),gF=a("li"),O1e=a("strong"),ler=o("xlm"),ier=o(" \u2014 "),uQ=a("a"),der=o("XLMForTokenClassification"),cer=o(" (XLM model)"),fer=l(),hF=a("li"),V1e=a("strong"),mer=o("xlm-roberta"),ger=o(" \u2014 "),bQ=a("a"),her=o("XLMRobertaForTokenClassification"),per=o(" (XLM-RoBERTa model)"),_er=l(),pF=a("li"),X1e=a("strong"),uer=o("xlm-roberta-xl"),ber=o(" \u2014 "),vQ=a("a"),ver=o("XLMRobertaXLForTokenClassification"),Fer=o(" (XLM-RoBERTa-XL model)"),Ter=l(),_F=a("li"),z1e=a("strong"),Mer=o("xlnet"),Eer=o(" \u2014 "),FQ=a("a"),Cer=o("XLNetForTokenClassification"),wer=o(" (XLNet model)"),Aer=l(),uF=a("li"),Q1e=a("strong"),Ler=o("yoso"),yer=o(" \u2014 "),TQ=a("a"),xer=o("YosoForTokenClassification"),$er=o(" (YOSO model)"),ker=l(),bF=a("p"),Ser=o("The model is set in evaluation mode by default using "),W1e=a("code"),Rer=o("model.eval()"),Per=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=a("code"),Ber=o("model.train()"),Ier=l(),F(vF.$$.fragment),jXe=l(),hd=a("h2"),FF=a("a"),U1e=a("span"),F(wy.$$.fragment),Ner=l(),J1e=a("span"),qer=o("AutoModelForQuestionAnswering"),DXe=l(),jo=a("div"),F(Ay.$$.fragment),jer=l(),pd=a("p"),Der=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MQ=a("a"),Ger=o("from_pretrained()"),Oer=o(" class method or the "),EQ=a("a"),Ver=o("from_config()"),Xer=o(` class
method.`),zer=l(),Ly=a("p"),Qer=o("This class cannot be instantiated directly using "),Y1e=a("code"),Wer=o("__init__()"),Her=o(" (throws an error)."),Uer=l(),_t=a("div"),F(yy.$$.fragment),Jer=l(),K1e=a("p"),Yer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ker=l(),_d=a("p"),Zer=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),eor=o("not"),oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),ror=o("from_pretrained()"),tor=o(" to load the model weights."),aor=l(),F(TF.$$.fragment),nor=l(),no=a("div"),F(xy.$$.fragment),sor=l(),e2e=a("p"),lor=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ior=l(),za=a("p"),dor=o("The model class to instantiate is selected based on the "),o2e=a("code"),cor=o("model_type"),mor=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),por=o("pretrained_model_name_or_path"),_or=o(":"),uor=l(),V=a("ul"),MF=a("li"),a2e=a("strong"),bor=o("albert"),vor=o(" \u2014 "),wQ=a("a"),For=o("AlbertForQuestionAnswering"),Tor=o(" (ALBERT model)"),Mor=l(),EF=a("li"),n2e=a("strong"),Eor=o("bart"),Cor=o(" \u2014 "),AQ=a("a"),wor=o("BartForQuestionAnswering"),Aor=o(" (BART model)"),Lor=l(),CF=a("li"),s2e=a("strong"),yor=o("bert"),xor=o(" \u2014 "),LQ=a("a"),$or=o("BertForQuestionAnswering"),kor=o(" (BERT model)"),Sor=l(),wF=a("li"),l2e=a("strong"),Ror=o("big_bird"),Por=o(" \u2014 "),yQ=a("a"),Bor=o("BigBirdForQuestionAnswering"),Ior=o(" (BigBird model)"),Nor=l(),AF=a("li"),i2e=a("strong"),qor=o("bigbird_pegasus"),jor=o(" \u2014 "),xQ=a("a"),Dor=o("BigBirdPegasusForQuestionAnswering"),Gor=o(" (BigBird-Pegasus model)"),Oor=l(),LF=a("li"),d2e=a("strong"),Vor=o("camembert"),Xor=o(" \u2014 "),$Q=a("a"),zor=o("CamembertForQuestionAnswering"),Qor=o(" (CamemBERT model)"),Wor=l(),yF=a("li"),c2e=a("strong"),Hor=o("canine"),Uor=o(" \u2014 "),kQ=a("a"),Jor=o("CanineForQuestionAnswering"),Yor=o(" (CANINE model)"),Kor=l(),xF=a("li"),f2e=a("strong"),Zor=o("convbert"),err=o(" \u2014 "),SQ=a("a"),orr=o("ConvBertForQuestionAnswering"),rrr=o(" (ConvBERT model)"),trr=l(),$F=a("li"),m2e=a("strong"),arr=o("data2vec-text"),nrr=o(" \u2014 "),RQ=a("a"),srr=o("Data2VecTextForQuestionAnswering"),lrr=o(" (Data2VecText model)"),irr=l(),kF=a("li"),g2e=a("strong"),drr=o("deberta"),crr=o(" \u2014 "),PQ=a("a"),frr=o("DebertaForQuestionAnswering"),mrr=o(" (DeBERTa model)"),grr=l(),SF=a("li"),h2e=a("strong"),hrr=o("deberta-v2"),prr=o(" \u2014 "),BQ=a("a"),_rr=o("DebertaV2ForQuestionAnswering"),urr=o(" (DeBERTa-v2 model)"),brr=l(),RF=a("li"),p2e=a("strong"),vrr=o("distilbert"),Frr=o(" \u2014 "),IQ=a("a"),Trr=o("DistilBertForQuestionAnswering"),Mrr=o(" (DistilBERT model)"),Err=l(),PF=a("li"),_2e=a("strong"),Crr=o("electra"),wrr=o(" \u2014 "),NQ=a("a"),Arr=o("ElectraForQuestionAnswering"),Lrr=o(" (ELECTRA model)"),yrr=l(),BF=a("li"),u2e=a("strong"),xrr=o("flaubert"),$rr=o(" \u2014 "),qQ=a("a"),krr=o("FlaubertForQuestionAnsweringSimple"),Srr=o(" (FlauBERT model)"),Rrr=l(),IF=a("li"),b2e=a("strong"),Prr=o("fnet"),Brr=o(" \u2014 "),jQ=a("a"),Irr=o("FNetForQuestionAnswering"),Nrr=o(" (FNet model)"),qrr=l(),NF=a("li"),v2e=a("strong"),jrr=o("funnel"),Drr=o(" \u2014 "),DQ=a("a"),Grr=o("FunnelForQuestionAnswering"),Orr=o(" (Funnel Transformer model)"),Vrr=l(),qF=a("li"),F2e=a("strong"),Xrr=o("gptj"),zrr=o(" \u2014 "),GQ=a("a"),Qrr=o("GPTJForQuestionAnswering"),Wrr=o(" (GPT-J model)"),Hrr=l(),jF=a("li"),T2e=a("strong"),Urr=o("ibert"),Jrr=o(" \u2014 "),OQ=a("a"),Yrr=o("IBertForQuestionAnswering"),Krr=o(" (I-BERT model)"),Zrr=l(),DF=a("li"),M2e=a("strong"),etr=o("layoutlmv2"),otr=o(" \u2014 "),VQ=a("a"),rtr=o("LayoutLMv2ForQuestionAnswering"),ttr=o(" (LayoutLMv2 model)"),atr=l(),GF=a("li"),E2e=a("strong"),ntr=o("layoutlmv3"),str=o(" \u2014 "),XQ=a("a"),ltr=o("LayoutLMv3ForQuestionAnswering"),itr=o(" (LayoutLMv3 model)"),dtr=l(),OF=a("li"),C2e=a("strong"),ctr=o("led"),ftr=o(" \u2014 "),zQ=a("a"),mtr=o("LEDForQuestionAnswering"),gtr=o(" (LED model)"),htr=l(),VF=a("li"),w2e=a("strong"),ptr=o("longformer"),_tr=o(" \u2014 "),QQ=a("a"),utr=o("LongformerForQuestionAnswering"),btr=o(" (Longformer model)"),vtr=l(),XF=a("li"),A2e=a("strong"),Ftr=o("lxmert"),Ttr=o(" \u2014 "),WQ=a("a"),Mtr=o("LxmertForQuestionAnswering"),Etr=o(" (LXMERT model)"),Ctr=l(),zF=a("li"),L2e=a("strong"),wtr=o("mbart"),Atr=o(" \u2014 "),HQ=a("a"),Ltr=o("MBartForQuestionAnswering"),ytr=o(" (mBART model)"),xtr=l(),QF=a("li"),y2e=a("strong"),$tr=o("megatron-bert"),ktr=o(" \u2014 "),UQ=a("a"),Str=o("MegatronBertForQuestionAnswering"),Rtr=o(" (Megatron-BERT model)"),Ptr=l(),WF=a("li"),x2e=a("strong"),Btr=o("mobilebert"),Itr=o(" \u2014 "),JQ=a("a"),Ntr=o("MobileBertForQuestionAnswering"),qtr=o(" (MobileBERT model)"),jtr=l(),HF=a("li"),$2e=a("strong"),Dtr=o("mpnet"),Gtr=o(" \u2014 "),YQ=a("a"),Otr=o("MPNetForQuestionAnswering"),Vtr=o(" (MPNet model)"),Xtr=l(),UF=a("li"),k2e=a("strong"),ztr=o("mvp"),Qtr=o(" \u2014 "),KQ=a("a"),Wtr=o("MvpForQuestionAnswering"),Htr=o(" (MVP model)"),Utr=l(),JF=a("li"),S2e=a("strong"),Jtr=o("nezha"),Ytr=o(" \u2014 "),ZQ=a("a"),Ktr=o("NezhaForQuestionAnswering"),Ztr=o(" (Nezha model)"),ear=l(),YF=a("li"),R2e=a("strong"),oar=o("nystromformer"),rar=o(" \u2014 "),eW=a("a"),tar=o("NystromformerForQuestionAnswering"),aar=o(" (Nystr\xF6mformer model)"),nar=l(),KF=a("li"),P2e=a("strong"),sar=o("qdqbert"),lar=o(" \u2014 "),oW=a("a"),iar=o("QDQBertForQuestionAnswering"),dar=o(" (QDQBert model)"),car=l(),ZF=a("li"),B2e=a("strong"),far=o("reformer"),mar=o(" \u2014 "),rW=a("a"),gar=o("ReformerForQuestionAnswering"),har=o(" (Reformer model)"),par=l(),e6=a("li"),I2e=a("strong"),_ar=o("rembert"),uar=o(" \u2014 "),tW=a("a"),bar=o("RemBertForQuestionAnswering"),Far=o(" (RemBERT model)"),Tar=l(),o6=a("li"),N2e=a("strong"),Mar=o("roberta"),Ear=o(" \u2014 "),aW=a("a"),Car=o("RobertaForQuestionAnswering"),war=o(" (RoBERTa model)"),Aar=l(),r6=a("li"),q2e=a("strong"),Lar=o("roformer"),yar=o(" \u2014 "),nW=a("a"),xar=o("RoFormerForQuestionAnswering"),$ar=o(" (RoFormer model)"),kar=l(),t6=a("li"),j2e=a("strong"),Sar=o("splinter"),Rar=o(" \u2014 "),sW=a("a"),Par=o("SplinterForQuestionAnswering"),Bar=o(" (Splinter model)"),Iar=l(),a6=a("li"),D2e=a("strong"),Nar=o("squeezebert"),qar=o(" \u2014 "),lW=a("a"),jar=o("SqueezeBertForQuestionAnswering"),Dar=o(" (SqueezeBERT model)"),Gar=l(),n6=a("li"),G2e=a("strong"),Oar=o("xlm"),Var=o(" \u2014 "),iW=a("a"),Xar=o("XLMForQuestionAnsweringSimple"),zar=o(" (XLM model)"),Qar=l(),s6=a("li"),O2e=a("strong"),War=o("xlm-roberta"),Har=o(" \u2014 "),dW=a("a"),Uar=o("XLMRobertaForQuestionAnswering"),Jar=o(" (XLM-RoBERTa model)"),Yar=l(),l6=a("li"),V2e=a("strong"),Kar=o("xlm-roberta-xl"),Zar=o(" \u2014 "),cW=a("a"),enr=o("XLMRobertaXLForQuestionAnswering"),onr=o(" (XLM-RoBERTa-XL model)"),rnr=l(),i6=a("li"),X2e=a("strong"),tnr=o("xlnet"),anr=o(" \u2014 "),fW=a("a"),nnr=o("XLNetForQuestionAnsweringSimple"),snr=o(" (XLNet model)"),lnr=l(),d6=a("li"),z2e=a("strong"),inr=o("yoso"),dnr=o(" \u2014 "),mW=a("a"),cnr=o("YosoForQuestionAnswering"),fnr=o(" (YOSO model)"),mnr=l(),c6=a("p"),gnr=o("The model is set in evaluation mode by default using "),Q2e=a("code"),hnr=o("model.eval()"),pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=a("code"),_nr=o("model.train()"),unr=l(),F(f6.$$.fragment),GXe=l(),ud=a("h2"),m6=a("a"),H2e=a("span"),F($y.$$.fragment),bnr=l(),U2e=a("span"),vnr=o("AutoModelForTableQuestionAnswering"),OXe=l(),Do=a("div"),F(ky.$$.fragment),Fnr=l(),bd=a("p"),Tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gW=a("a"),Mnr=o("from_pretrained()"),Enr=o(" class method or the "),hW=a("a"),Cnr=o("from_config()"),wnr=o(` class
method.`),Anr=l(),Sy=a("p"),Lnr=o("This class cannot be instantiated directly using "),J2e=a("code"),ynr=o("__init__()"),xnr=o(" (throws an error)."),$nr=l(),ut=a("div"),F(Ry.$$.fragment),knr=l(),Y2e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rnr=l(),vd=a("p"),Pnr=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),Bnr=o("not"),Inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Nnr=o("from_pretrained()"),qnr=o(" to load the model weights."),jnr=l(),F(g6.$$.fragment),Dnr=l(),so=a("div"),F(Py.$$.fragment),Gnr=l(),Z2e=a("p"),Onr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Vnr=l(),Qa=a("p"),Xnr=o("The model class to instantiate is selected based on the "),e4e=a("code"),znr=o("model_type"),Qnr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),Wnr=o("pretrained_model_name_or_path"),Hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(":"),Ynr=l(),t4e=a("ul"),h6=a("li"),a4e=a("strong"),Knr=o("tapas"),Znr=o(" \u2014 "),_W=a("a"),esr=o("TapasForQuestionAnswering"),osr=o(" (TAPAS model)"),rsr=l(),p6=a("p"),tsr=o("The model is set in evaluation mode by default using "),n4e=a("code"),asr=o("model.eval()"),nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s4e=a("code"),ssr=o("model.train()"),lsr=l(),F(_6.$$.fragment),VXe=l(),Fd=a("h2"),u6=a("a"),l4e=a("span"),F(By.$$.fragment),isr=l(),i4e=a("span"),dsr=o("AutoModelForImageClassification"),XXe=l(),Go=a("div"),F(Iy.$$.fragment),csr=l(),Td=a("p"),fsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uW=a("a"),msr=o("from_pretrained()"),gsr=o(" class method or the "),bW=a("a"),hsr=o("from_config()"),psr=o(` class
method.`),_sr=l(),Ny=a("p"),usr=o("This class cannot be instantiated directly using "),d4e=a("code"),bsr=o("__init__()"),vsr=o(" (throws an error)."),Fsr=l(),bt=a("div"),F(qy.$$.fragment),Tsr=l(),c4e=a("p"),Msr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Esr=l(),Md=a("p"),Csr=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),wsr=o("not"),Asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),Lsr=o("from_pretrained()"),ysr=o(" to load the model weights."),xsr=l(),F(b6.$$.fragment),$sr=l(),lo=a("div"),F(jy.$$.fragment),ksr=l(),m4e=a("p"),Ssr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rsr=l(),Wa=a("p"),Psr=o("The model class to instantiate is selected based on the "),g4e=a("code"),Bsr=o("model_type"),Isr=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),Nsr=o("pretrained_model_name_or_path"),qsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(":"),Gsr=l(),_e=a("ul"),v6=a("li"),_4e=a("strong"),Osr=o("beit"),Vsr=o(" \u2014 "),FW=a("a"),Xsr=o("BeitForImageClassification"),zsr=o(" (BEiT model)"),Qsr=l(),F6=a("li"),u4e=a("strong"),Wsr=o("convnext"),Hsr=o(" \u2014 "),TW=a("a"),Usr=o("ConvNextForImageClassification"),Jsr=o(" (ConvNeXT model)"),Ysr=l(),T6=a("li"),b4e=a("strong"),Ksr=o("cvt"),Zsr=o(" \u2014 "),MW=a("a"),elr=o("CvtForImageClassification"),olr=o(" (CvT model)"),rlr=l(),M6=a("li"),v4e=a("strong"),tlr=o("data2vec-vision"),alr=o(" \u2014 "),EW=a("a"),nlr=o("Data2VecVisionForImageClassification"),slr=o(" (Data2VecVision model)"),llr=l(),Us=a("li"),F4e=a("strong"),ilr=o("deit"),dlr=o(" \u2014 "),CW=a("a"),clr=o("DeiTForImageClassification"),flr=o(" or "),wW=a("a"),mlr=o("DeiTForImageClassificationWithTeacher"),glr=o(" (DeiT model)"),hlr=l(),E6=a("li"),T4e=a("strong"),plr=o("imagegpt"),_lr=o(" \u2014 "),AW=a("a"),ulr=o("ImageGPTForImageClassification"),blr=o(" (ImageGPT model)"),vlr=l(),Js=a("li"),M4e=a("strong"),Flr=o("levit"),Tlr=o(" \u2014 "),LW=a("a"),Mlr=o("LevitForImageClassification"),Elr=o(" or "),yW=a("a"),Clr=o("LevitForImageClassificationWithTeacher"),wlr=o(" (LeViT model)"),Alr=l(),C6=a("li"),E4e=a("strong"),Llr=o("mobilevit"),ylr=o(" \u2014 "),xW=a("a"),xlr=o("MobileViTForImageClassification"),$lr=o(" (MobileViT model)"),klr=l(),vt=a("li"),C4e=a("strong"),Slr=o("perceiver"),Rlr=o(" \u2014 "),$W=a("a"),Plr=o("PerceiverForImageClassificationLearned"),Blr=o(" or "),kW=a("a"),Ilr=o("PerceiverForImageClassificationFourier"),Nlr=o(" or "),SW=a("a"),qlr=o("PerceiverForImageClassificationConvProcessing"),jlr=o(" (Perceiver model)"),Dlr=l(),w6=a("li"),w4e=a("strong"),Glr=o("poolformer"),Olr=o(" \u2014 "),RW=a("a"),Vlr=o("PoolFormerForImageClassification"),Xlr=o(" (PoolFormer model)"),zlr=l(),A6=a("li"),A4e=a("strong"),Qlr=o("regnet"),Wlr=o(" \u2014 "),PW=a("a"),Hlr=o("RegNetForImageClassification"),Ulr=o(" (RegNet model)"),Jlr=l(),L6=a("li"),L4e=a("strong"),Ylr=o("resnet"),Klr=o(" \u2014 "),BW=a("a"),Zlr=o("ResNetForImageClassification"),eir=o(" (ResNet model)"),oir=l(),y6=a("li"),y4e=a("strong"),rir=o("segformer"),tir=o(" \u2014 "),IW=a("a"),air=o("SegformerForImageClassification"),nir=o(" (SegFormer model)"),sir=l(),x6=a("li"),x4e=a("strong"),lir=o("swin"),iir=o(" \u2014 "),NW=a("a"),dir=o("SwinForImageClassification"),cir=o(" (Swin Transformer model)"),fir=l(),$6=a("li"),$4e=a("strong"),mir=o("swinv2"),gir=o(" \u2014 "),qW=a("a"),hir=o("Swinv2ForImageClassification"),pir=o(" (Swin Transformer V2 model)"),_ir=l(),k6=a("li"),k4e=a("strong"),uir=o("van"),bir=o(" \u2014 "),jW=a("a"),vir=o("VanForImageClassification"),Fir=o(" (VAN model)"),Tir=l(),S6=a("li"),S4e=a("strong"),Mir=o("vit"),Eir=o(" \u2014 "),DW=a("a"),Cir=o("ViTForImageClassification"),wir=o(" (ViT model)"),Air=l(),R6=a("p"),Lir=o("The model is set in evaluation mode by default using "),R4e=a("code"),yir=o("model.eval()"),xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P4e=a("code"),$ir=o("model.train()"),kir=l(),F(P6.$$.fragment),zXe=l(),Ed=a("h2"),B6=a("a"),B4e=a("span"),F(Dy.$$.fragment),Sir=l(),I4e=a("span"),Rir=o("AutoModelForVision2Seq"),QXe=l(),Oo=a("div"),F(Gy.$$.fragment),Pir=l(),Cd=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GW=a("a"),Iir=o("from_pretrained()"),Nir=o(" class method or the "),OW=a("a"),qir=o("from_config()"),jir=o(` class
method.`),Dir=l(),Oy=a("p"),Gir=o("This class cannot be instantiated directly using "),N4e=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Ft=a("div"),F(Vy.$$.fragment),zir=l(),q4e=a("p"),Qir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wir=l(),wd=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(I6.$$.fragment),edr=l(),io=a("div"),F(Xy.$$.fragment),odr=l(),D4e=a("p"),rdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tdr=l(),Ha=a("p"),adr=o("The model class to instantiate is selected based on the "),G4e=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),X4e=a("ul"),N6=a("li"),z4e=a("strong"),mdr=o("vision-encoder-decoder"),gdr=o(" \u2014 "),XW=a("a"),hdr=o("VisionEncoderDecoderModel"),pdr=o(" (Vision Encoder decoder model)"),_dr=l(),q6=a("p"),udr=o("The model is set in evaluation mode by default using "),Q4e=a("code"),bdr=o("model.eval()"),vdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W4e=a("code"),Fdr=o("model.train()"),Tdr=l(),F(j6.$$.fragment),WXe=l(),Ad=a("h2"),D6=a("a"),H4e=a("span"),F(zy.$$.fragment),Mdr=l(),U4e=a("span"),Edr=o("AutoModelForVisualQuestionAnswering"),HXe=l(),Vo=a("div"),F(Qy.$$.fragment),Cdr=l(),Ld=a("p"),wdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zW=a("a"),Adr=o("from_pretrained()"),Ldr=o(" class method or the "),QW=a("a"),ydr=o("from_config()"),xdr=o(` class
method.`),$dr=l(),Wy=a("p"),kdr=o("This class cannot be instantiated directly using "),J4e=a("code"),Sdr=o("__init__()"),Rdr=o(" (throws an error)."),Pdr=l(),Tt=a("div"),F(Hy.$$.fragment),Bdr=l(),Y4e=a("p"),Idr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Ndr=l(),yd=a("p"),qdr=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),jdr=o("not"),Ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),Gdr=o("from_pretrained()"),Odr=o(" to load the model weights."),Vdr=l(),F(G6.$$.fragment),Xdr=l(),co=a("div"),F(Uy.$$.fragment),zdr=l(),Z4e=a("p"),Qdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Wdr=l(),Ua=a("p"),Hdr=o("The model class to instantiate is selected based on the "),ebe=a("code"),Udr=o("model_type"),Jdr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),Zdr=o("pretrained_model_name_or_path"),ecr=o(":"),ocr=l(),tbe=a("ul"),O6=a("li"),abe=a("strong"),rcr=o("vilt"),tcr=o(" \u2014 "),HW=a("a"),acr=o("ViltForQuestionAnswering"),ncr=o(" (ViLT model)"),scr=l(),V6=a("p"),lcr=o("The model is set in evaluation mode by default using "),nbe=a("code"),icr=o("model.eval()"),dcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=a("code"),ccr=o("model.train()"),fcr=l(),F(X6.$$.fragment),UXe=l(),xd=a("h2"),z6=a("a"),lbe=a("span"),F(Jy.$$.fragment),mcr=l(),ibe=a("span"),gcr=o("AutoModelForAudioClassification"),JXe=l(),Xo=a("div"),F(Yy.$$.fragment),hcr=l(),$d=a("p"),pcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UW=a("a"),_cr=o("from_pretrained()"),ucr=o(" class method or the "),JW=a("a"),bcr=o("from_config()"),vcr=o(` class
method.`),Fcr=l(),Ky=a("p"),Tcr=o("This class cannot be instantiated directly using "),dbe=a("code"),Mcr=o("__init__()"),Ecr=o(" (throws an error)."),Ccr=l(),Mt=a("div"),F(Zy.$$.fragment),wcr=l(),cbe=a("p"),Acr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lcr=l(),kd=a("p"),ycr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),xcr=o("not"),$cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),kcr=o("from_pretrained()"),Scr=o(" to load the model weights."),Rcr=l(),F(Q6.$$.fragment),Pcr=l(),fo=a("div"),F(e8.$$.fragment),Bcr=l(),mbe=a("p"),Icr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ncr=l(),Ja=a("p"),qcr=o("The model class to instantiate is selected based on the "),gbe=a("code"),jcr=o("model_type"),Dcr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),Gcr=o("pretrained_model_name_or_path"),Ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Vcr=o("pretrained_model_name_or_path"),Xcr=o(":"),zcr=l(),Pe=a("ul"),W6=a("li"),_be=a("strong"),Qcr=o("data2vec-audio"),Wcr=o(" \u2014 "),KW=a("a"),Hcr=o("Data2VecAudioForSequenceClassification"),Ucr=o(" (Data2VecAudio model)"),Jcr=l(),H6=a("li"),ube=a("strong"),Ycr=o("hubert"),Kcr=o(" \u2014 "),ZW=a("a"),Zcr=o("HubertForSequenceClassification"),efr=o(" (Hubert model)"),ofr=l(),U6=a("li"),bbe=a("strong"),rfr=o("sew"),tfr=o(" \u2014 "),eH=a("a"),afr=o("SEWForSequenceClassification"),nfr=o(" (SEW model)"),sfr=l(),J6=a("li"),vbe=a("strong"),lfr=o("sew-d"),ifr=o(" \u2014 "),oH=a("a"),dfr=o("SEWDForSequenceClassification"),cfr=o(" (SEW-D model)"),ffr=l(),Y6=a("li"),Fbe=a("strong"),mfr=o("unispeech"),gfr=o(" \u2014 "),rH=a("a"),hfr=o("UniSpeechForSequenceClassification"),pfr=o(" (UniSpeech model)"),_fr=l(),K6=a("li"),Tbe=a("strong"),ufr=o("unispeech-sat"),bfr=o(" \u2014 "),tH=a("a"),vfr=o("UniSpeechSatForSequenceClassification"),Ffr=o(" (UniSpeechSat model)"),Tfr=l(),Z6=a("li"),Mbe=a("strong"),Mfr=o("wav2vec2"),Efr=o(" \u2014 "),aH=a("a"),Cfr=o("Wav2Vec2ForSequenceClassification"),wfr=o(" (Wav2Vec2 model)"),Afr=l(),eT=a("li"),Ebe=a("strong"),Lfr=o("wav2vec2-conformer"),yfr=o(" \u2014 "),nH=a("a"),xfr=o("Wav2Vec2ConformerForSequenceClassification"),$fr=o(" (Wav2Vec2-Conformer model)"),kfr=l(),oT=a("li"),Cbe=a("strong"),Sfr=o("wavlm"),Rfr=o(" \u2014 "),sH=a("a"),Pfr=o("WavLMForSequenceClassification"),Bfr=o(" (WavLM model)"),Ifr=l(),rT=a("p"),Nfr=o("The model is set in evaluation mode by default using "),wbe=a("code"),qfr=o("model.eval()"),jfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),Dfr=o("model.train()"),Gfr=l(),F(tT.$$.fragment),YXe=l(),Sd=a("h2"),aT=a("a"),Lbe=a("span"),F(o8.$$.fragment),Ofr=l(),ybe=a("span"),Vfr=o("AutoModelForAudioFrameClassification"),KXe=l(),zo=a("div"),F(r8.$$.fragment),Xfr=l(),Rd=a("p"),zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lH=a("a"),Qfr=o("from_pretrained()"),Wfr=o(" class method or the "),iH=a("a"),Hfr=o("from_config()"),Ufr=o(` class
method.`),Jfr=l(),t8=a("p"),Yfr=o("This class cannot be instantiated directly using "),xbe=a("code"),Kfr=o("__init__()"),Zfr=o(" (throws an error)."),emr=l(),Et=a("div"),F(a8.$$.fragment),omr=l(),$be=a("p"),rmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tmr=l(),Pd=a("p"),amr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),nmr=o("not"),smr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),lmr=o("from_pretrained()"),imr=o(" to load the model weights."),dmr=l(),F(nT.$$.fragment),cmr=l(),mo=a("div"),F(n8.$$.fragment),fmr=l(),Sbe=a("p"),mmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gmr=l(),Ya=a("p"),hmr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),pmr=o("model_type"),_mr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),umr=o("pretrained_model_name_or_path"),bmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),vmr=o("pretrained_model_name_or_path"),Fmr=o(":"),Tmr=l(),ot=a("ul"),sT=a("li"),Ibe=a("strong"),Mmr=o("data2vec-audio"),Emr=o(" \u2014 "),cH=a("a"),Cmr=o("Data2VecAudioForAudioFrameClassification"),wmr=o(" (Data2VecAudio model)"),Amr=l(),lT=a("li"),Nbe=a("strong"),Lmr=o("unispeech-sat"),ymr=o(" \u2014 "),fH=a("a"),xmr=o("UniSpeechSatForAudioFrameClassification"),$mr=o(" (UniSpeechSat model)"),kmr=l(),iT=a("li"),qbe=a("strong"),Smr=o("wav2vec2"),Rmr=o(" \u2014 "),mH=a("a"),Pmr=o("Wav2Vec2ForAudioFrameClassification"),Bmr=o(" (Wav2Vec2 model)"),Imr=l(),dT=a("li"),jbe=a("strong"),Nmr=o("wav2vec2-conformer"),qmr=o(" \u2014 "),gH=a("a"),jmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Dmr=o(" (Wav2Vec2-Conformer model)"),Gmr=l(),cT=a("li"),Dbe=a("strong"),Omr=o("wavlm"),Vmr=o(" \u2014 "),hH=a("a"),Xmr=o("WavLMForAudioFrameClassification"),zmr=o(" (WavLM model)"),Qmr=l(),fT=a("p"),Wmr=o("The model is set in evaluation mode by default using "),Gbe=a("code"),Hmr=o("model.eval()"),Umr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=a("code"),Jmr=o("model.train()"),Ymr=l(),F(mT.$$.fragment),ZXe=l(),Bd=a("h2"),gT=a("a"),Vbe=a("span"),F(s8.$$.fragment),Kmr=l(),Xbe=a("span"),Zmr=o("AutoModelForCTC"),eze=l(),Qo=a("div"),F(l8.$$.fragment),egr=l(),Id=a("p"),ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pH=a("a"),rgr=o("from_pretrained()"),tgr=o(" class method or the "),_H=a("a"),agr=o("from_config()"),ngr=o(` class
method.`),sgr=l(),i8=a("p"),lgr=o("This class cannot be instantiated directly using "),zbe=a("code"),igr=o("__init__()"),dgr=o(" (throws an error)."),cgr=l(),Ct=a("div"),F(d8.$$.fragment),fgr=l(),Qbe=a("p"),mgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ggr=l(),Nd=a("p"),hgr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),pgr=o("not"),_gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),ugr=o("from_pretrained()"),bgr=o(" to load the model weights."),vgr=l(),F(hT.$$.fragment),Fgr=l(),go=a("div"),F(c8.$$.fragment),Tgr=l(),Hbe=a("p"),Mgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Egr=l(),Ka=a("p"),Cgr=o("The model class to instantiate is selected based on the "),Ube=a("code"),wgr=o("model_type"),Agr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),Lgr=o("pretrained_model_name_or_path"),ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),xgr=o("pretrained_model_name_or_path"),$gr=o(":"),kgr=l(),Le=a("ul"),pT=a("li"),Kbe=a("strong"),Sgr=o("data2vec-audio"),Rgr=o(" \u2014 "),bH=a("a"),Pgr=o("Data2VecAudioForCTC"),Bgr=o(" (Data2VecAudio model)"),Igr=l(),_T=a("li"),Zbe=a("strong"),Ngr=o("hubert"),qgr=o(" \u2014 "),vH=a("a"),jgr=o("HubertForCTC"),Dgr=o(" (Hubert model)"),Ggr=l(),uT=a("li"),eve=a("strong"),Ogr=o("mctct"),Vgr=o(" \u2014 "),FH=a("a"),Xgr=o("MCTCTForCTC"),zgr=o(" (M-CTC-T model)"),Qgr=l(),bT=a("li"),ove=a("strong"),Wgr=o("sew"),Hgr=o(" \u2014 "),TH=a("a"),Ugr=o("SEWForCTC"),Jgr=o(" (SEW model)"),Ygr=l(),vT=a("li"),rve=a("strong"),Kgr=o("sew-d"),Zgr=o(" \u2014 "),MH=a("a"),ehr=o("SEWDForCTC"),ohr=o(" (SEW-D model)"),rhr=l(),FT=a("li"),tve=a("strong"),thr=o("unispeech"),ahr=o(" \u2014 "),EH=a("a"),nhr=o("UniSpeechForCTC"),shr=o(" (UniSpeech model)"),lhr=l(),TT=a("li"),ave=a("strong"),ihr=o("unispeech-sat"),dhr=o(" \u2014 "),CH=a("a"),chr=o("UniSpeechSatForCTC"),fhr=o(" (UniSpeechSat model)"),mhr=l(),MT=a("li"),nve=a("strong"),ghr=o("wav2vec2"),hhr=o(" \u2014 "),wH=a("a"),phr=o("Wav2Vec2ForCTC"),_hr=o(" (Wav2Vec2 model)"),uhr=l(),ET=a("li"),sve=a("strong"),bhr=o("wav2vec2-conformer"),vhr=o(" \u2014 "),AH=a("a"),Fhr=o("Wav2Vec2ConformerForCTC"),Thr=o(" (Wav2Vec2-Conformer model)"),Mhr=l(),CT=a("li"),lve=a("strong"),Ehr=o("wavlm"),Chr=o(" \u2014 "),LH=a("a"),whr=o("WavLMForCTC"),Ahr=o(" (WavLM model)"),Lhr=l(),wT=a("p"),yhr=o("The model is set in evaluation mode by default using "),ive=a("code"),xhr=o("model.eval()"),$hr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=a("code"),khr=o("model.train()"),Shr=l(),F(AT.$$.fragment),oze=l(),qd=a("h2"),LT=a("a"),cve=a("span"),F(f8.$$.fragment),Rhr=l(),fve=a("span"),Phr=o("AutoModelForSpeechSeq2Seq"),rze=l(),Wo=a("div"),F(m8.$$.fragment),Bhr=l(),jd=a("p"),Ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yH=a("a"),Nhr=o("from_pretrained()"),qhr=o(" class method or the "),xH=a("a"),jhr=o("from_config()"),Dhr=o(` class
method.`),Ghr=l(),g8=a("p"),Ohr=o("This class cannot be instantiated directly using "),mve=a("code"),Vhr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),wt=a("div"),F(h8.$$.fragment),Qhr=l(),gve=a("p"),Whr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hhr=l(),Dd=a("p"),Uhr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),Jhr=o("not"),Yhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Khr=o("from_pretrained()"),Zhr=o(" to load the model weights."),epr=l(),F(yT.$$.fragment),opr=l(),ho=a("div"),F(p8.$$.fragment),rpr=l(),pve=a("p"),tpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),apr=l(),Za=a("p"),npr=o("The model class to instantiate is selected based on the "),_ve=a("code"),spr=o("model_type"),lpr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(":"),mpr=l(),_8=a("ul"),xT=a("li"),vve=a("strong"),gpr=o("speech-encoder-decoder"),hpr=o(" \u2014 "),kH=a("a"),ppr=o("SpeechEncoderDecoderModel"),_pr=o(" (Speech Encoder decoder model)"),upr=l(),$T=a("li"),Fve=a("strong"),bpr=o("speech_to_text"),vpr=o(" \u2014 "),SH=a("a"),Fpr=o("Speech2TextForConditionalGeneration"),Tpr=o(" (Speech2Text model)"),Mpr=l(),kT=a("p"),Epr=o("The model is set in evaluation mode by default using "),Tve=a("code"),Cpr=o("model.eval()"),wpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=a("code"),Apr=o("model.train()"),Lpr=l(),F(ST.$$.fragment),tze=l(),Gd=a("h2"),RT=a("a"),Eve=a("span"),F(u8.$$.fragment),ypr=l(),Cve=a("span"),xpr=o("AutoModelForAudioXVector"),aze=l(),Ho=a("div"),F(b8.$$.fragment),$pr=l(),Od=a("p"),kpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RH=a("a"),Spr=o("from_pretrained()"),Rpr=o(" class method or the "),PH=a("a"),Ppr=o("from_config()"),Bpr=o(` class
method.`),Ipr=l(),v8=a("p"),Npr=o("This class cannot be instantiated directly using "),wve=a("code"),qpr=o("__init__()"),jpr=o(" (throws an error)."),Dpr=l(),At=a("div"),F(F8.$$.fragment),Gpr=l(),Ave=a("p"),Opr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Vpr=l(),Vd=a("p"),Xpr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),zpr=o("not"),Qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Wpr=o("from_pretrained()"),Hpr=o(" to load the model weights."),Upr=l(),F(PT.$$.fragment),Jpr=l(),po=a("div"),F(T8.$$.fragment),Ypr=l(),yve=a("p"),Kpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zpr=l(),en=a("p"),e_r=o("The model class to instantiate is selected based on the "),xve=a("code"),o_r=o("model_type"),r_r=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),n_r=o("pretrained_model_name_or_path"),s_r=o(":"),l_r=l(),rt=a("ul"),BT=a("li"),Sve=a("strong"),i_r=o("data2vec-audio"),d_r=o(" \u2014 "),IH=a("a"),c_r=o("Data2VecAudioForXVector"),f_r=o(" (Data2VecAudio model)"),m_r=l(),IT=a("li"),Rve=a("strong"),g_r=o("unispeech-sat"),h_r=o(" \u2014 "),NH=a("a"),p_r=o("UniSpeechSatForXVector"),__r=o(" (UniSpeechSat model)"),u_r=l(),NT=a("li"),Pve=a("strong"),b_r=o("wav2vec2"),v_r=o(" \u2014 "),qH=a("a"),F_r=o("Wav2Vec2ForXVector"),T_r=o(" (Wav2Vec2 model)"),M_r=l(),qT=a("li"),Bve=a("strong"),E_r=o("wav2vec2-conformer"),C_r=o(" \u2014 "),jH=a("a"),w_r=o("Wav2Vec2ConformerForXVector"),A_r=o(" (Wav2Vec2-Conformer model)"),L_r=l(),jT=a("li"),Ive=a("strong"),y_r=o("wavlm"),x_r=o(" \u2014 "),DH=a("a"),$_r=o("WavLMForXVector"),k_r=o(" (WavLM model)"),S_r=l(),DT=a("p"),R_r=o("The model is set in evaluation mode by default using "),Nve=a("code"),P_r=o("model.eval()"),B_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=a("code"),I_r=o("model.train()"),N_r=l(),F(GT.$$.fragment),nze=l(),Xd=a("h2"),OT=a("a"),jve=a("span"),F(M8.$$.fragment),q_r=l(),Dve=a("span"),j_r=o("AutoModelForMaskedImageModeling"),sze=l(),Uo=a("div"),F(E8.$$.fragment),D_r=l(),zd=a("p"),G_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GH=a("a"),O_r=o("from_pretrained()"),V_r=o(" class method or the "),OH=a("a"),X_r=o("from_config()"),z_r=o(` class
method.`),Q_r=l(),C8=a("p"),W_r=o("This class cannot be instantiated directly using "),Gve=a("code"),H_r=o("__init__()"),U_r=o(" (throws an error)."),J_r=l(),Lt=a("div"),F(w8.$$.fragment),Y_r=l(),Ove=a("p"),K_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Z_r=l(),Qd=a("p"),eur=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),our=o("not"),rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),tur=o("from_pretrained()"),aur=o(" to load the model weights."),nur=l(),F(VT.$$.fragment),sur=l(),_o=a("div"),F(A8.$$.fragment),lur=l(),Xve=a("p"),iur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dur=l(),on=a("p"),cur=o("The model class to instantiate is selected based on the "),zve=a("code"),fur=o("model_type"),mur=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),pur=o("pretrained_model_name_or_path"),_ur=o(":"),uur=l(),rn=a("ul"),XT=a("li"),Hve=a("strong"),bur=o("deit"),vur=o(" \u2014 "),XH=a("a"),Fur=o("DeiTForMaskedImageModeling"),Tur=o(" (DeiT model)"),Mur=l(),zT=a("li"),Uve=a("strong"),Eur=o("swin"),Cur=o(" \u2014 "),zH=a("a"),wur=o("SwinForMaskedImageModeling"),Aur=o(" (Swin Transformer model)"),Lur=l(),QT=a("li"),Jve=a("strong"),yur=o("swinv2"),xur=o(" \u2014 "),QH=a("a"),$ur=o("Swinv2ForMaskedImageModeling"),kur=o(" (Swin Transformer V2 model)"),Sur=l(),WT=a("li"),Yve=a("strong"),Rur=o("vit"),Pur=o(" \u2014 "),WH=a("a"),Bur=o("ViTForMaskedImageModeling"),Iur=o(" (ViT model)"),Nur=l(),HT=a("p"),qur=o("The model is set in evaluation mode by default using "),Kve=a("code"),jur=o("model.eval()"),Dur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=a("code"),Gur=o("model.train()"),Our=l(),F(UT.$$.fragment),lze=l(),Wd=a("h2"),JT=a("a"),eFe=a("span"),F(L8.$$.fragment),Vur=l(),oFe=a("span"),Xur=o("AutoModelForObjectDetection"),ize=l(),Jo=a("div"),F(y8.$$.fragment),zur=l(),Hd=a("p"),Qur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HH=a("a"),Wur=o("from_pretrained()"),Hur=o(" class method or the "),UH=a("a"),Uur=o("from_config()"),Jur=o(` class
method.`),Yur=l(),x8=a("p"),Kur=o("This class cannot be instantiated directly using "),rFe=a("code"),Zur=o("__init__()"),e1r=o(" (throws an error)."),o1r=l(),yt=a("div"),F($8.$$.fragment),r1r=l(),tFe=a("p"),t1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),a1r=l(),Ud=a("p"),n1r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),s1r=o("not"),l1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),i1r=o("from_pretrained()"),d1r=o(" to load the model weights."),c1r=l(),F(YT.$$.fragment),f1r=l(),uo=a("div"),F(k8.$$.fragment),m1r=l(),nFe=a("p"),g1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),h1r=l(),tn=a("p"),p1r=o("The model class to instantiate is selected based on the "),sFe=a("code"),_1r=o("model_type"),u1r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),b1r=o("pretrained_model_name_or_path"),v1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),F1r=o("pretrained_model_name_or_path"),T1r=o(":"),M1r=l(),S8=a("ul"),KT=a("li"),dFe=a("strong"),E1r=o("detr"),C1r=o(" \u2014 "),YH=a("a"),w1r=o("DetrForObjectDetection"),A1r=o(" (DETR model)"),L1r=l(),ZT=a("li"),cFe=a("strong"),y1r=o("yolos"),x1r=o(" \u2014 "),KH=a("a"),$1r=o("YolosForObjectDetection"),k1r=o(" (YOLOS model)"),S1r=l(),e7=a("p"),R1r=o("The model is set in evaluation mode by default using "),fFe=a("code"),P1r=o("model.eval()"),B1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=a("code"),I1r=o("model.train()"),N1r=l(),F(o7.$$.fragment),dze=l(),Jd=a("h2"),r7=a("a"),gFe=a("span"),F(R8.$$.fragment),q1r=l(),hFe=a("span"),j1r=o("AutoModelForImageSegmentation"),cze=l(),Yo=a("div"),F(P8.$$.fragment),D1r=l(),Yd=a("p"),G1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZH=a("a"),O1r=o("from_pretrained()"),V1r=o(" class method or the "),eU=a("a"),X1r=o("from_config()"),z1r=o(` class
method.`),Q1r=l(),B8=a("p"),W1r=o("This class cannot be instantiated directly using "),pFe=a("code"),H1r=o("__init__()"),U1r=o(" (throws an error)."),J1r=l(),xt=a("div"),F(I8.$$.fragment),Y1r=l(),_Fe=a("p"),K1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Z1r=l(),Kd=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),t2r=o("from_pretrained()"),a2r=o(" to load the model weights."),n2r=l(),F(t7.$$.fragment),s2r=l(),bo=a("div"),F(N8.$$.fragment),l2r=l(),bFe=a("p"),i2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),d2r=l(),an=a("p"),c2r=o("The model class to instantiate is selected based on the "),vFe=a("code"),f2r=o("model_type"),m2r=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),p2r=o("pretrained_model_name_or_path"),_2r=o(":"),u2r=l(),MFe=a("ul"),a7=a("li"),EFe=a("strong"),b2r=o("detr"),v2r=o(" \u2014 "),rU=a("a"),F2r=o("DetrForSegmentation"),T2r=o(" (DETR model)"),M2r=l(),n7=a("p"),E2r=o("The model is set in evaluation mode by default using "),CFe=a("code"),C2r=o("model.eval()"),w2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=a("code"),A2r=o("model.train()"),L2r=l(),F(s7.$$.fragment),fze=l(),Zd=a("h2"),l7=a("a"),AFe=a("span"),F(q8.$$.fragment),y2r=l(),LFe=a("span"),x2r=o("AutoModelForSemanticSegmentation"),mze=l(),Ko=a("div"),F(j8.$$.fragment),$2r=l(),ec=a("p"),k2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tU=a("a"),S2r=o("from_pretrained()"),R2r=o(" class method or the "),aU=a("a"),P2r=o("from_config()"),B2r=o(` class
method.`),I2r=l(),D8=a("p"),N2r=o("This class cannot be instantiated directly using "),yFe=a("code"),q2r=o("__init__()"),j2r=o(" (throws an error)."),D2r=l(),$t=a("div"),F(G8.$$.fragment),G2r=l(),xFe=a("p"),O2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),V2r=l(),oc=a("p"),X2r=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),z2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),W2r=o("from_pretrained()"),H2r=o(" to load the model weights."),U2r=l(),F(i7.$$.fragment),J2r=l(),vo=a("div"),F(O8.$$.fragment),Y2r=l(),kFe=a("p"),K2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Z2r=l(),nn=a("p"),e4r=o("The model class to instantiate is selected based on the "),SFe=a("code"),o4r=o("model_type"),r4r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),n4r=o("pretrained_model_name_or_path"),s4r=o(":"),l4r=l(),tt=a("ul"),d7=a("li"),BFe=a("strong"),i4r=o("beit"),d4r=o(" \u2014 "),sU=a("a"),c4r=o("BeitForSemanticSegmentation"),f4r=o(" (BEiT model)"),m4r=l(),c7=a("li"),IFe=a("strong"),g4r=o("data2vec-vision"),h4r=o(" \u2014 "),lU=a("a"),p4r=o("Data2VecVisionForSemanticSegmentation"),_4r=o(" (Data2VecVision model)"),u4r=l(),f7=a("li"),NFe=a("strong"),b4r=o("dpt"),v4r=o(" \u2014 "),iU=a("a"),F4r=o("DPTForSemanticSegmentation"),T4r=o(" (DPT model)"),M4r=l(),m7=a("li"),qFe=a("strong"),E4r=o("mobilevit"),C4r=o(" \u2014 "),dU=a("a"),w4r=o("MobileViTForSemanticSegmentation"),A4r=o(" (MobileViT model)"),L4r=l(),g7=a("li"),jFe=a("strong"),y4r=o("segformer"),x4r=o(" \u2014 "),cU=a("a"),$4r=o("SegformerForSemanticSegmentation"),k4r=o(" (SegFormer model)"),S4r=l(),h7=a("p"),R4r=o("The model is set in evaluation mode by default using "),DFe=a("code"),P4r=o("model.eval()"),B4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=a("code"),I4r=o("model.train()"),N4r=l(),F(p7.$$.fragment),gze=l(),rc=a("h2"),_7=a("a"),OFe=a("span"),F(V8.$$.fragment),q4r=l(),VFe=a("span"),j4r=o("AutoModelForInstanceSegmentation"),hze=l(),Zo=a("div"),F(X8.$$.fragment),D4r=l(),tc=a("p"),G4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fU=a("a"),O4r=o("from_pretrained()"),V4r=o(" class method or the "),mU=a("a"),X4r=o("from_config()"),z4r=o(` class
method.`),Q4r=l(),z8=a("p"),W4r=o("This class cannot be instantiated directly using "),XFe=a("code"),H4r=o("__init__()"),U4r=o(" (throws an error)."),J4r=l(),kt=a("div"),F(Q8.$$.fragment),Y4r=l(),zFe=a("p"),K4r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Z4r=l(),ac=a("p"),ebr=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),obr=o("not"),rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),tbr=o("from_pretrained()"),abr=o(" to load the model weights."),nbr=l(),F(u7.$$.fragment),sbr=l(),Fo=a("div"),F(W8.$$.fragment),lbr=l(),WFe=a("p"),ibr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),dbr=l(),sn=a("p"),cbr=o("The model class to instantiate is selected based on the "),HFe=a("code"),fbr=o("model_type"),mbr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),gbr=o("pretrained_model_name_or_path"),hbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),pbr=o("pretrained_model_name_or_path"),_br=o(":"),ubr=l(),YFe=a("ul"),b7=a("li"),KFe=a("strong"),bbr=o("maskformer"),vbr=o(" \u2014 "),hU=a("a"),Fbr=o("MaskFormerForInstanceSegmentation"),Tbr=o(" (MaskFormer model)"),Mbr=l(),v7=a("p"),Ebr=o("The model is set in evaluation mode by default using "),ZFe=a("code"),Cbr=o("model.eval()"),wbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e6e=a("code"),Abr=o("model.train()"),Lbr=l(),F(F7.$$.fragment),pze=l(),nc=a("h2"),T7=a("a"),o6e=a("span"),F(H8.$$.fragment),ybr=l(),r6e=a("span"),xbr=o("TFAutoModel"),_ze=l(),er=a("div"),F(U8.$$.fragment),$br=l(),sc=a("p"),kbr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pU=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" class method or the "),_U=a("a"),Pbr=o("from_config()"),Bbr=o(` class
method.`),Ibr=l(),J8=a("p"),Nbr=o("This class cannot be instantiated directly using "),t6e=a("code"),qbr=o("__init__()"),jbr=o(" (throws an error)."),Dbr=l(),St=a("div"),F(Y8.$$.fragment),Gbr=l(),a6e=a("p"),Obr=o("Instantiates one of the base model classes of the library from a configuration."),Vbr=l(),lc=a("p"),Xbr=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),zbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),Wbr=o("from_pretrained()"),Hbr=o(" to load the model weights."),Ubr=l(),F(M7.$$.fragment),Jbr=l(),xr=a("div"),F(K8.$$.fragment),Ybr=l(),s6e=a("p"),Kbr=o("Instantiate one of the base model classes of the library from a pretrained model."),Zbr=l(),ln=a("p"),evr=o("The model class to instantiate is selected based on the "),l6e=a("code"),ovr=o("model_type"),rvr=o(` property of the config object (either
passed as an argument or loaded from `),i6e=a("code"),tvr=o("pretrained_model_name_or_path"),avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=a("code"),nvr=o("pretrained_model_name_or_path"),svr=o(":"),lvr=l(),q=a("ul"),E7=a("li"),c6e=a("strong"),ivr=o("albert"),dvr=o(" \u2014 "),bU=a("a"),cvr=o("TFAlbertModel"),fvr=o(" (ALBERT model)"),mvr=l(),C7=a("li"),f6e=a("strong"),gvr=o("bart"),hvr=o(" \u2014 "),vU=a("a"),pvr=o("TFBartModel"),_vr=o(" (BART model)"),uvr=l(),w7=a("li"),m6e=a("strong"),bvr=o("bert"),vvr=o(" \u2014 "),FU=a("a"),Fvr=o("TFBertModel"),Tvr=o(" (BERT model)"),Mvr=l(),A7=a("li"),g6e=a("strong"),Evr=o("blenderbot"),Cvr=o(" \u2014 "),TU=a("a"),wvr=o("TFBlenderbotModel"),Avr=o(" (Blenderbot model)"),Lvr=l(),L7=a("li"),h6e=a("strong"),yvr=o("blenderbot-small"),xvr=o(" \u2014 "),MU=a("a"),$vr=o("TFBlenderbotSmallModel"),kvr=o(" (BlenderbotSmall model)"),Svr=l(),y7=a("li"),p6e=a("strong"),Rvr=o("camembert"),Pvr=o(" \u2014 "),EU=a("a"),Bvr=o("TFCamembertModel"),Ivr=o(" (CamemBERT model)"),Nvr=l(),x7=a("li"),_6e=a("strong"),qvr=o("clip"),jvr=o(" \u2014 "),CU=a("a"),Dvr=o("TFCLIPModel"),Gvr=o(" (CLIP model)"),Ovr=l(),$7=a("li"),u6e=a("strong"),Vvr=o("convbert"),Xvr=o(" \u2014 "),wU=a("a"),zvr=o("TFConvBertModel"),Qvr=o(" (ConvBERT model)"),Wvr=l(),k7=a("li"),b6e=a("strong"),Hvr=o("convnext"),Uvr=o(" \u2014 "),AU=a("a"),Jvr=o("TFConvNextModel"),Yvr=o(" (ConvNeXT model)"),Kvr=l(),S7=a("li"),v6e=a("strong"),Zvr=o("ctrl"),eFr=o(" \u2014 "),LU=a("a"),oFr=o("TFCTRLModel"),rFr=o(" (CTRL model)"),tFr=l(),R7=a("li"),F6e=a("strong"),aFr=o("data2vec-vision"),nFr=o(" \u2014 "),yU=a("a"),sFr=o("TFData2VecVisionModel"),lFr=o(" (Data2VecVision model)"),iFr=l(),P7=a("li"),T6e=a("strong"),dFr=o("deberta"),cFr=o(" \u2014 "),xU=a("a"),fFr=o("TFDebertaModel"),mFr=o(" (DeBERTa model)"),gFr=l(),B7=a("li"),M6e=a("strong"),hFr=o("deberta-v2"),pFr=o(" \u2014 "),$U=a("a"),_Fr=o("TFDebertaV2Model"),uFr=o(" (DeBERTa-v2 model)"),bFr=l(),I7=a("li"),E6e=a("strong"),vFr=o("distilbert"),FFr=o(" \u2014 "),kU=a("a"),TFr=o("TFDistilBertModel"),MFr=o(" (DistilBERT model)"),EFr=l(),N7=a("li"),C6e=a("strong"),CFr=o("dpr"),wFr=o(" \u2014 "),SU=a("a"),AFr=o("TFDPRQuestionEncoder"),LFr=o(" (DPR model)"),yFr=l(),q7=a("li"),w6e=a("strong"),xFr=o("electra"),$Fr=o(" \u2014 "),RU=a("a"),kFr=o("TFElectraModel"),SFr=o(" (ELECTRA model)"),RFr=l(),j7=a("li"),A6e=a("strong"),PFr=o("flaubert"),BFr=o(" \u2014 "),PU=a("a"),IFr=o("TFFlaubertModel"),NFr=o(" (FlauBERT model)"),qFr=l(),Ys=a("li"),L6e=a("strong"),jFr=o("funnel"),DFr=o(" \u2014 "),BU=a("a"),GFr=o("TFFunnelModel"),OFr=o(" or "),IU=a("a"),VFr=o("TFFunnelBaseModel"),XFr=o(" (Funnel Transformer model)"),zFr=l(),D7=a("li"),y6e=a("strong"),QFr=o("gpt2"),WFr=o(" \u2014 "),NU=a("a"),HFr=o("TFGPT2Model"),UFr=o(" (OpenAI GPT-2 model)"),JFr=l(),G7=a("li"),x6e=a("strong"),YFr=o("gptj"),KFr=o(" \u2014 "),qU=a("a"),ZFr=o("TFGPTJModel"),e6r=o(" (GPT-J model)"),o6r=l(),O7=a("li"),$6e=a("strong"),r6r=o("hubert"),t6r=o(" \u2014 "),jU=a("a"),a6r=o("TFHubertModel"),n6r=o(" (Hubert model)"),s6r=l(),V7=a("li"),k6e=a("strong"),l6r=o("layoutlm"),i6r=o(" \u2014 "),DU=a("a"),d6r=o("TFLayoutLMModel"),c6r=o(" (LayoutLM model)"),f6r=l(),X7=a("li"),S6e=a("strong"),m6r=o("led"),g6r=o(" \u2014 "),GU=a("a"),h6r=o("TFLEDModel"),p6r=o(" (LED model)"),_6r=l(),z7=a("li"),R6e=a("strong"),u6r=o("longformer"),b6r=o(" \u2014 "),OU=a("a"),v6r=o("TFLongformerModel"),F6r=o(" (Longformer model)"),T6r=l(),Q7=a("li"),P6e=a("strong"),M6r=o("lxmert"),E6r=o(" \u2014 "),VU=a("a"),C6r=o("TFLxmertModel"),w6r=o(" (LXMERT model)"),A6r=l(),W7=a("li"),B6e=a("strong"),L6r=o("marian"),y6r=o(" \u2014 "),XU=a("a"),x6r=o("TFMarianModel"),$6r=o(" (Marian model)"),k6r=l(),H7=a("li"),I6e=a("strong"),S6r=o("mbart"),R6r=o(" \u2014 "),zU=a("a"),P6r=o("TFMBartModel"),B6r=o(" (mBART model)"),I6r=l(),U7=a("li"),N6e=a("strong"),N6r=o("mobilebert"),q6r=o(" \u2014 "),QU=a("a"),j6r=o("TFMobileBertModel"),D6r=o(" (MobileBERT model)"),G6r=l(),J7=a("li"),q6e=a("strong"),O6r=o("mpnet"),V6r=o(" \u2014 "),WU=a("a"),X6r=o("TFMPNetModel"),z6r=o(" (MPNet model)"),Q6r=l(),Y7=a("li"),j6e=a("strong"),W6r=o("mt5"),H6r=o(" \u2014 "),HU=a("a"),U6r=o("TFMT5Model"),J6r=o(" (MT5 model)"),Y6r=l(),K7=a("li"),D6e=a("strong"),K6r=o("openai-gpt"),Z6r=o(" \u2014 "),UU=a("a"),eTr=o("TFOpenAIGPTModel"),oTr=o(" (OpenAI GPT model)"),rTr=l(),Z7=a("li"),G6e=a("strong"),tTr=o("opt"),aTr=o(" \u2014 "),JU=a("a"),nTr=o("TFOPTModel"),sTr=o(" (OPT model)"),lTr=l(),e9=a("li"),O6e=a("strong"),iTr=o("pegasus"),dTr=o(" \u2014 "),YU=a("a"),cTr=o("TFPegasusModel"),fTr=o(" (Pegasus model)"),mTr=l(),o9=a("li"),V6e=a("strong"),gTr=o("regnet"),hTr=o(" \u2014 "),KU=a("a"),pTr=o("TFRegNetModel"),_Tr=o(" (RegNet model)"),uTr=l(),r9=a("li"),X6e=a("strong"),bTr=o("rembert"),vTr=o(" \u2014 "),ZU=a("a"),FTr=o("TFRemBertModel"),TTr=o(" (RemBERT model)"),MTr=l(),t9=a("li"),z6e=a("strong"),ETr=o("roberta"),CTr=o(" \u2014 "),eJ=a("a"),wTr=o("TFRobertaModel"),ATr=o(" (RoBERTa model)"),LTr=l(),a9=a("li"),Q6e=a("strong"),yTr=o("roformer"),xTr=o(" \u2014 "),oJ=a("a"),$Tr=o("TFRoFormerModel"),kTr=o(" (RoFormer model)"),STr=l(),n9=a("li"),W6e=a("strong"),RTr=o("speech_to_text"),PTr=o(" \u2014 "),rJ=a("a"),BTr=o("TFSpeech2TextModel"),ITr=o(" (Speech2Text model)"),NTr=l(),s9=a("li"),H6e=a("strong"),qTr=o("swin"),jTr=o(" \u2014 "),tJ=a("a"),DTr=o("TFSwinModel"),GTr=o(" (Swin Transformer model)"),OTr=l(),l9=a("li"),U6e=a("strong"),VTr=o("swinv2"),XTr=o(" \u2014 "),aJ=a("a"),zTr=o("TFSwinv2Model"),QTr=o(" (Swin Transformer V2 model)"),WTr=l(),i9=a("li"),J6e=a("strong"),HTr=o("t5"),UTr=o(" \u2014 "),nJ=a("a"),JTr=o("TFT5Model"),YTr=o(" (T5 model)"),KTr=l(),d9=a("li"),Y6e=a("strong"),ZTr=o("tapas"),e7r=o(" \u2014 "),sJ=a("a"),o7r=o("TFTapasModel"),r7r=o(" (TAPAS model)"),t7r=l(),c9=a("li"),K6e=a("strong"),a7r=o("transfo-xl"),n7r=o(" \u2014 "),lJ=a("a"),s7r=o("TFTransfoXLModel"),l7r=o(" (Transformer-XL model)"),i7r=l(),f9=a("li"),Z6e=a("strong"),d7r=o("vit"),c7r=o(" \u2014 "),iJ=a("a"),f7r=o("TFViTModel"),m7r=o(" (ViT model)"),g7r=l(),m9=a("li"),eTe=a("strong"),h7r=o("vit_mae"),p7r=o(" \u2014 "),dJ=a("a"),_7r=o("TFViTMAEModel"),u7r=o(" (ViTMAE model)"),b7r=l(),g9=a("li"),oTe=a("strong"),v7r=o("wav2vec2"),F7r=o(" \u2014 "),cJ=a("a"),T7r=o("TFWav2Vec2Model"),M7r=o(" (Wav2Vec2 model)"),E7r=l(),h9=a("li"),rTe=a("strong"),C7r=o("xlm"),w7r=o(" \u2014 "),fJ=a("a"),A7r=o("TFXLMModel"),L7r=o(" (XLM model)"),y7r=l(),p9=a("li"),tTe=a("strong"),x7r=o("xlm-roberta"),$7r=o(" \u2014 "),mJ=a("a"),k7r=o("TFXLMRobertaModel"),S7r=o(" (XLM-RoBERTa model)"),R7r=l(),_9=a("li"),aTe=a("strong"),P7r=o("xlnet"),B7r=o(" \u2014 "),gJ=a("a"),I7r=o("TFXLNetModel"),N7r=o(" (XLNet model)"),q7r=l(),F(u9.$$.fragment),uze=l(),ic=a("h2"),b9=a("a"),nTe=a("span"),F(Z8.$$.fragment),j7r=l(),sTe=a("span"),D7r=o("TFAutoModelForPreTraining"),bze=l(),or=a("div"),F(ex.$$.fragment),G7r=l(),dc=a("p"),O7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hJ=a("a"),V7r=o("from_pretrained()"),X7r=o(" class method or the "),pJ=a("a"),z7r=o("from_config()"),Q7r=o(` class
method.`),W7r=l(),ox=a("p"),H7r=o("This class cannot be instantiated directly using "),lTe=a("code"),U7r=o("__init__()"),J7r=o(" (throws an error)."),Y7r=l(),Rt=a("div"),F(rx.$$.fragment),K7r=l(),iTe=a("p"),Z7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e9r=l(),cc=a("p"),o9r=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),r9r=o("not"),t9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),a9r=o("from_pretrained()"),n9r=o(" to load the model weights."),s9r=l(),F(v9.$$.fragment),l9r=l(),$r=a("div"),F(tx.$$.fragment),i9r=l(),cTe=a("p"),d9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c9r=l(),dn=a("p"),f9r=o("The model class to instantiate is selected based on the "),fTe=a("code"),m9r=o("model_type"),g9r=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),h9r=o("pretrained_model_name_or_path"),p9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),_9r=o("pretrained_model_name_or_path"),u9r=o(":"),b9r=l(),se=a("ul"),F9=a("li"),hTe=a("strong"),v9r=o("albert"),F9r=o(" \u2014 "),uJ=a("a"),T9r=o("TFAlbertForPreTraining"),M9r=o(" (ALBERT model)"),E9r=l(),T9=a("li"),pTe=a("strong"),C9r=o("bart"),w9r=o(" \u2014 "),bJ=a("a"),A9r=o("TFBartForConditionalGeneration"),L9r=o(" (BART model)"),y9r=l(),M9=a("li"),_Te=a("strong"),x9r=o("bert"),$9r=o(" \u2014 "),vJ=a("a"),k9r=o("TFBertForPreTraining"),S9r=o(" (BERT model)"),R9r=l(),E9=a("li"),uTe=a("strong"),P9r=o("camembert"),B9r=o(" \u2014 "),FJ=a("a"),I9r=o("TFCamembertForMaskedLM"),N9r=o(" (CamemBERT model)"),q9r=l(),C9=a("li"),bTe=a("strong"),j9r=o("ctrl"),D9r=o(" \u2014 "),TJ=a("a"),G9r=o("TFCTRLLMHeadModel"),O9r=o(" (CTRL model)"),V9r=l(),w9=a("li"),vTe=a("strong"),X9r=o("distilbert"),z9r=o(" \u2014 "),MJ=a("a"),Q9r=o("TFDistilBertForMaskedLM"),W9r=o(" (DistilBERT model)"),H9r=l(),A9=a("li"),FTe=a("strong"),U9r=o("electra"),J9r=o(" \u2014 "),EJ=a("a"),Y9r=o("TFElectraForPreTraining"),K9r=o(" (ELECTRA model)"),Z9r=l(),L9=a("li"),TTe=a("strong"),eMr=o("flaubert"),oMr=o(" \u2014 "),CJ=a("a"),rMr=o("TFFlaubertWithLMHeadModel"),tMr=o(" (FlauBERT model)"),aMr=l(),y9=a("li"),MTe=a("strong"),nMr=o("funnel"),sMr=o(" \u2014 "),wJ=a("a"),lMr=o("TFFunnelForPreTraining"),iMr=o(" (Funnel Transformer model)"),dMr=l(),x9=a("li"),ETe=a("strong"),cMr=o("gpt2"),fMr=o(" \u2014 "),AJ=a("a"),mMr=o("TFGPT2LMHeadModel"),gMr=o(" (OpenAI GPT-2 model)"),hMr=l(),$9=a("li"),CTe=a("strong"),pMr=o("layoutlm"),_Mr=o(" \u2014 "),LJ=a("a"),uMr=o("TFLayoutLMForMaskedLM"),bMr=o(" (LayoutLM model)"),vMr=l(),k9=a("li"),wTe=a("strong"),FMr=o("lxmert"),TMr=o(" \u2014 "),yJ=a("a"),MMr=o("TFLxmertForPreTraining"),EMr=o(" (LXMERT model)"),CMr=l(),S9=a("li"),ATe=a("strong"),wMr=o("mobilebert"),AMr=o(" \u2014 "),xJ=a("a"),LMr=o("TFMobileBertForPreTraining"),yMr=o(" (MobileBERT model)"),xMr=l(),R9=a("li"),LTe=a("strong"),$Mr=o("mpnet"),kMr=o(" \u2014 "),$J=a("a"),SMr=o("TFMPNetForMaskedLM"),RMr=o(" (MPNet model)"),PMr=l(),P9=a("li"),yTe=a("strong"),BMr=o("openai-gpt"),IMr=o(" \u2014 "),kJ=a("a"),NMr=o("TFOpenAIGPTLMHeadModel"),qMr=o(" (OpenAI GPT model)"),jMr=l(),B9=a("li"),xTe=a("strong"),DMr=o("roberta"),GMr=o(" \u2014 "),SJ=a("a"),OMr=o("TFRobertaForMaskedLM"),VMr=o(" (RoBERTa model)"),XMr=l(),I9=a("li"),$Te=a("strong"),zMr=o("t5"),QMr=o(" \u2014 "),RJ=a("a"),WMr=o("TFT5ForConditionalGeneration"),HMr=o(" (T5 model)"),UMr=l(),N9=a("li"),kTe=a("strong"),JMr=o("tapas"),YMr=o(" \u2014 "),PJ=a("a"),KMr=o("TFTapasForMaskedLM"),ZMr=o(" (TAPAS model)"),eEr=l(),q9=a("li"),STe=a("strong"),oEr=o("transfo-xl"),rEr=o(" \u2014 "),BJ=a("a"),tEr=o("TFTransfoXLLMHeadModel"),aEr=o(" (Transformer-XL model)"),nEr=l(),j9=a("li"),RTe=a("strong"),sEr=o("vit_mae"),lEr=o(" \u2014 "),IJ=a("a"),iEr=o("TFViTMAEForPreTraining"),dEr=o(" (ViTMAE model)"),cEr=l(),D9=a("li"),PTe=a("strong"),fEr=o("xlm"),mEr=o(" \u2014 "),NJ=a("a"),gEr=o("TFXLMWithLMHeadModel"),hEr=o(" (XLM model)"),pEr=l(),G9=a("li"),BTe=a("strong"),_Er=o("xlm-roberta"),uEr=o(" \u2014 "),qJ=a("a"),bEr=o("TFXLMRobertaForMaskedLM"),vEr=o(" (XLM-RoBERTa model)"),FEr=l(),O9=a("li"),ITe=a("strong"),TEr=o("xlnet"),MEr=o(" \u2014 "),jJ=a("a"),EEr=o("TFXLNetLMHeadModel"),CEr=o(" (XLNet model)"),wEr=l(),F(V9.$$.fragment),vze=l(),fc=a("h2"),X9=a("a"),NTe=a("span"),F(ax.$$.fragment),AEr=l(),qTe=a("span"),LEr=o("TFAutoModelForCausalLM"),Fze=l(),rr=a("div"),F(nx.$$.fragment),yEr=l(),mc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DJ=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),GJ=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),sx=a("p"),BEr=o("This class cannot be instantiated directly using "),jTe=a("code"),IEr=o("__init__()"),NEr=o(" (throws an error)."),qEr=l(),Pt=a("div"),F(lx.$$.fragment),jEr=l(),DTe=a("p"),DEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GEr=l(),gc=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),zEr=o("from_pretrained()"),QEr=o(" to load the model weights."),WEr=l(),F(z9.$$.fragment),HEr=l(),kr=a("div"),F(ix.$$.fragment),UEr=l(),OTe=a("p"),JEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YEr=l(),cn=a("p"),KEr=o("The model class to instantiate is selected based on the "),VTe=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),Me=a("ul"),Q9=a("li"),QTe=a("strong"),sCr=o("bert"),lCr=o(" \u2014 "),VJ=a("a"),iCr=o("TFBertLMHeadModel"),dCr=o(" (BERT model)"),cCr=l(),W9=a("li"),WTe=a("strong"),fCr=o("camembert"),mCr=o(" \u2014 "),XJ=a("a"),gCr=o("TFCamembertForCausalLM"),hCr=o(" (CamemBERT model)"),pCr=l(),H9=a("li"),HTe=a("strong"),_Cr=o("ctrl"),uCr=o(" \u2014 "),zJ=a("a"),bCr=o("TFCTRLLMHeadModel"),vCr=o(" (CTRL model)"),FCr=l(),U9=a("li"),UTe=a("strong"),TCr=o("gpt2"),MCr=o(" \u2014 "),QJ=a("a"),ECr=o("TFGPT2LMHeadModel"),CCr=o(" (OpenAI GPT-2 model)"),wCr=l(),J9=a("li"),JTe=a("strong"),ACr=o("gptj"),LCr=o(" \u2014 "),WJ=a("a"),yCr=o("TFGPTJForCausalLM"),xCr=o(" (GPT-J model)"),$Cr=l(),Y9=a("li"),YTe=a("strong"),kCr=o("openai-gpt"),SCr=o(" \u2014 "),HJ=a("a"),RCr=o("TFOpenAIGPTLMHeadModel"),PCr=o(" (OpenAI GPT model)"),BCr=l(),K9=a("li"),KTe=a("strong"),ICr=o("opt"),NCr=o(" \u2014 "),UJ=a("a"),qCr=o("TFOPTForCausalLM"),jCr=o(" (OPT model)"),DCr=l(),Z9=a("li"),ZTe=a("strong"),GCr=o("rembert"),OCr=o(" \u2014 "),JJ=a("a"),VCr=o("TFRemBertForCausalLM"),XCr=o(" (RemBERT model)"),zCr=l(),eM=a("li"),e7e=a("strong"),QCr=o("roberta"),WCr=o(" \u2014 "),YJ=a("a"),HCr=o("TFRobertaForCausalLM"),UCr=o(" (RoBERTa model)"),JCr=l(),oM=a("li"),o7e=a("strong"),YCr=o("roformer"),KCr=o(" \u2014 "),KJ=a("a"),ZCr=o("TFRoFormerForCausalLM"),e3r=o(" (RoFormer model)"),o3r=l(),rM=a("li"),r7e=a("strong"),r3r=o("transfo-xl"),t3r=o(" \u2014 "),ZJ=a("a"),a3r=o("TFTransfoXLLMHeadModel"),n3r=o(" (Transformer-XL model)"),s3r=l(),tM=a("li"),t7e=a("strong"),l3r=o("xlm"),i3r=o(" \u2014 "),eY=a("a"),d3r=o("TFXLMWithLMHeadModel"),c3r=o(" (XLM model)"),f3r=l(),aM=a("li"),a7e=a("strong"),m3r=o("xlnet"),g3r=o(" \u2014 "),oY=a("a"),h3r=o("TFXLNetLMHeadModel"),p3r=o(" (XLNet model)"),_3r=l(),F(nM.$$.fragment),Tze=l(),hc=a("h2"),sM=a("a"),n7e=a("span"),F(dx.$$.fragment),u3r=l(),s7e=a("span"),b3r=o("TFAutoModelForImageClassification"),Mze=l(),tr=a("div"),F(cx.$$.fragment),v3r=l(),pc=a("p"),F3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rY=a("a"),T3r=o("from_pretrained()"),M3r=o(" class method or the "),tY=a("a"),E3r=o("from_config()"),C3r=o(` class
method.`),w3r=l(),fx=a("p"),A3r=o("This class cannot be instantiated directly using "),l7e=a("code"),L3r=o("__init__()"),y3r=o(" (throws an error)."),x3r=l(),Bt=a("div"),F(mx.$$.fragment),$3r=l(),i7e=a("p"),k3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S3r=l(),_c=a("p"),R3r=o(`Note:
Loading a model from its configuration file does `),d7e=a("strong"),P3r=o("not"),B3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),I3r=o("from_pretrained()"),N3r=o(" to load the model weights."),q3r=l(),F(lM.$$.fragment),j3r=l(),Sr=a("div"),F(gx.$$.fragment),D3r=l(),c7e=a("p"),G3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),O3r=l(),fn=a("p"),V3r=o("The model class to instantiate is selected based on the "),f7e=a("code"),X3r=o("model_type"),z3r=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),Q3r=o("pretrained_model_name_or_path"),W3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=a("code"),H3r=o("pretrained_model_name_or_path"),U3r=o(":"),J3r=l(),ar=a("ul"),iM=a("li"),h7e=a("strong"),Y3r=o("convnext"),K3r=o(" \u2014 "),nY=a("a"),Z3r=o("TFConvNextForImageClassification"),e5r=o(" (ConvNeXT model)"),o5r=l(),dM=a("li"),p7e=a("strong"),r5r=o("data2vec-vision"),t5r=o(" \u2014 "),sY=a("a"),a5r=o("TFData2VecVisionForImageClassification"),n5r=o(" (Data2VecVision model)"),s5r=l(),cM=a("li"),_7e=a("strong"),l5r=o("regnet"),i5r=o(" \u2014 "),lY=a("a"),d5r=o("TFRegNetForImageClassification"),c5r=o(" (RegNet model)"),f5r=l(),fM=a("li"),u7e=a("strong"),m5r=o("swin"),g5r=o(" \u2014 "),iY=a("a"),h5r=o("TFSwinForImageClassification"),p5r=o(" (Swin Transformer model)"),_5r=l(),mM=a("li"),b7e=a("strong"),u5r=o("swinv2"),b5r=o(" \u2014 "),dY=a("a"),v5r=o("TFSwinv2ForImageClassification"),F5r=o(" (Swin Transformer V2 model)"),T5r=l(),gM=a("li"),v7e=a("strong"),M5r=o("vit"),E5r=o(" \u2014 "),cY=a("a"),C5r=o("TFViTForImageClassification"),w5r=o(" (ViT model)"),A5r=l(),F(hM.$$.fragment),Eze=l(),uc=a("h2"),pM=a("a"),F7e=a("span"),F(hx.$$.fragment),L5r=l(),T7e=a("span"),y5r=o("TFAutoModelForMaskedLM"),Cze=l(),nr=a("div"),F(px.$$.fragment),x5r=l(),bc=a("p"),$5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fY=a("a"),k5r=o("from_pretrained()"),S5r=o(" class method or the "),mY=a("a"),R5r=o("from_config()"),P5r=o(` class
method.`),B5r=l(),_x=a("p"),I5r=o("This class cannot be instantiated directly using "),M7e=a("code"),N5r=o("__init__()"),q5r=o(" (throws an error)."),j5r=l(),It=a("div"),F(ux.$$.fragment),D5r=l(),E7e=a("p"),G5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O5r=l(),vc=a("p"),V5r=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),X5r=o("not"),z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),Q5r=o("from_pretrained()"),W5r=o(" to load the model weights."),H5r=l(),F(_M.$$.fragment),U5r=l(),Rr=a("div"),F(bx.$$.fragment),J5r=l(),w7e=a("p"),Y5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K5r=l(),mn=a("p"),Z5r=o("The model class to instantiate is selected based on the "),A7e=a("code"),e0r=o("model_type"),o0r=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(":"),s0r=l(),ie=a("ul"),uM=a("li"),x7e=a("strong"),l0r=o("albert"),i0r=o(" \u2014 "),hY=a("a"),d0r=o("TFAlbertForMaskedLM"),c0r=o(" (ALBERT model)"),f0r=l(),bM=a("li"),$7e=a("strong"),m0r=o("bert"),g0r=o(" \u2014 "),pY=a("a"),h0r=o("TFBertForMaskedLM"),p0r=o(" (BERT model)"),_0r=l(),vM=a("li"),k7e=a("strong"),u0r=o("camembert"),b0r=o(" \u2014 "),_Y=a("a"),v0r=o("TFCamembertForMaskedLM"),F0r=o(" (CamemBERT model)"),T0r=l(),FM=a("li"),S7e=a("strong"),M0r=o("convbert"),E0r=o(" \u2014 "),uY=a("a"),C0r=o("TFConvBertForMaskedLM"),w0r=o(" (ConvBERT model)"),A0r=l(),TM=a("li"),R7e=a("strong"),L0r=o("deberta"),y0r=o(" \u2014 "),bY=a("a"),x0r=o("TFDebertaForMaskedLM"),$0r=o(" (DeBERTa model)"),k0r=l(),MM=a("li"),P7e=a("strong"),S0r=o("deberta-v2"),R0r=o(" \u2014 "),vY=a("a"),P0r=o("TFDebertaV2ForMaskedLM"),B0r=o(" (DeBERTa-v2 model)"),I0r=l(),EM=a("li"),B7e=a("strong"),N0r=o("distilbert"),q0r=o(" \u2014 "),FY=a("a"),j0r=o("TFDistilBertForMaskedLM"),D0r=o(" (DistilBERT model)"),G0r=l(),CM=a("li"),I7e=a("strong"),O0r=o("electra"),V0r=o(" \u2014 "),TY=a("a"),X0r=o("TFElectraForMaskedLM"),z0r=o(" (ELECTRA model)"),Q0r=l(),wM=a("li"),N7e=a("strong"),W0r=o("flaubert"),H0r=o(" \u2014 "),MY=a("a"),U0r=o("TFFlaubertWithLMHeadModel"),J0r=o(" (FlauBERT model)"),Y0r=l(),AM=a("li"),q7e=a("strong"),K0r=o("funnel"),Z0r=o(" \u2014 "),EY=a("a"),ewr=o("TFFunnelForMaskedLM"),owr=o(" (Funnel Transformer model)"),rwr=l(),LM=a("li"),j7e=a("strong"),twr=o("layoutlm"),awr=o(" \u2014 "),CY=a("a"),nwr=o("TFLayoutLMForMaskedLM"),swr=o(" (LayoutLM model)"),lwr=l(),yM=a("li"),D7e=a("strong"),iwr=o("longformer"),dwr=o(" \u2014 "),wY=a("a"),cwr=o("TFLongformerForMaskedLM"),fwr=o(" (Longformer model)"),mwr=l(),xM=a("li"),G7e=a("strong"),gwr=o("mobilebert"),hwr=o(" \u2014 "),AY=a("a"),pwr=o("TFMobileBertForMaskedLM"),_wr=o(" (MobileBERT model)"),uwr=l(),$M=a("li"),O7e=a("strong"),bwr=o("mpnet"),vwr=o(" \u2014 "),LY=a("a"),Fwr=o("TFMPNetForMaskedLM"),Twr=o(" (MPNet model)"),Mwr=l(),kM=a("li"),V7e=a("strong"),Ewr=o("rembert"),Cwr=o(" \u2014 "),yY=a("a"),wwr=o("TFRemBertForMaskedLM"),Awr=o(" (RemBERT model)"),Lwr=l(),SM=a("li"),X7e=a("strong"),ywr=o("roberta"),xwr=o(" \u2014 "),xY=a("a"),$wr=o("TFRobertaForMaskedLM"),kwr=o(" (RoBERTa model)"),Swr=l(),RM=a("li"),z7e=a("strong"),Rwr=o("roformer"),Pwr=o(" \u2014 "),$Y=a("a"),Bwr=o("TFRoFormerForMaskedLM"),Iwr=o(" (RoFormer model)"),Nwr=l(),PM=a("li"),Q7e=a("strong"),qwr=o("tapas"),jwr=o(" \u2014 "),kY=a("a"),Dwr=o("TFTapasForMaskedLM"),Gwr=o(" (TAPAS model)"),Owr=l(),BM=a("li"),W7e=a("strong"),Vwr=o("xlm"),Xwr=o(" \u2014 "),SY=a("a"),zwr=o("TFXLMWithLMHeadModel"),Qwr=o(" (XLM model)"),Wwr=l(),IM=a("li"),H7e=a("strong"),Hwr=o("xlm-roberta"),Uwr=o(" \u2014 "),RY=a("a"),Jwr=o("TFXLMRobertaForMaskedLM"),Ywr=o(" (XLM-RoBERTa model)"),Kwr=l(),F(NM.$$.fragment),wze=l(),Fc=a("h2"),qM=a("a"),U7e=a("span"),F(vx.$$.fragment),Zwr=l(),J7e=a("span"),eAr=o("TFAutoModelForSeq2SeqLM"),Aze=l(),sr=a("div"),F(Fx.$$.fragment),oAr=l(),Tc=a("p"),rAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PY=a("a"),tAr=o("from_pretrained()"),aAr=o(" class method or the "),BY=a("a"),nAr=o("from_config()"),sAr=o(` class
method.`),lAr=l(),Tx=a("p"),iAr=o("This class cannot be instantiated directly using "),Y7e=a("code"),dAr=o("__init__()"),cAr=o(" (throws an error)."),fAr=l(),Nt=a("div"),F(Mx.$$.fragment),mAr=l(),K7e=a("p"),gAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hAr=l(),Mc=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),_Ar=o("not"),uAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),bAr=o("from_pretrained()"),vAr=o(" to load the model weights."),FAr=l(),F(jM.$$.fragment),TAr=l(),Pr=a("div"),F(Ex.$$.fragment),MAr=l(),e9e=a("p"),EAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CAr=l(),gn=a("p"),wAr=o("The model class to instantiate is selected based on the "),o9e=a("code"),AAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),r9e=a("code"),yAr=o("pretrained_model_name_or_path"),xAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=a("code"),$Ar=o("pretrained_model_name_or_path"),kAr=o(":"),SAr=l(),ye=a("ul"),DM=a("li"),a9e=a("strong"),RAr=o("bart"),PAr=o(" \u2014 "),NY=a("a"),BAr=o("TFBartForConditionalGeneration"),IAr=o(" (BART model)"),NAr=l(),GM=a("li"),n9e=a("strong"),qAr=o("blenderbot"),jAr=o(" \u2014 "),qY=a("a"),DAr=o("TFBlenderbotForConditionalGeneration"),GAr=o(" (Blenderbot model)"),OAr=l(),OM=a("li"),s9e=a("strong"),VAr=o("blenderbot-small"),XAr=o(" \u2014 "),jY=a("a"),zAr=o("TFBlenderbotSmallForConditionalGeneration"),QAr=o(" (BlenderbotSmall model)"),WAr=l(),VM=a("li"),l9e=a("strong"),HAr=o("encoder-decoder"),UAr=o(" \u2014 "),DY=a("a"),JAr=o("TFEncoderDecoderModel"),YAr=o(" (Encoder decoder model)"),KAr=l(),XM=a("li"),i9e=a("strong"),ZAr=o("led"),eLr=o(" \u2014 "),GY=a("a"),oLr=o("TFLEDForConditionalGeneration"),rLr=o(" (LED model)"),tLr=l(),zM=a("li"),d9e=a("strong"),aLr=o("marian"),nLr=o(" \u2014 "),OY=a("a"),sLr=o("TFMarianMTModel"),lLr=o(" (Marian model)"),iLr=l(),QM=a("li"),c9e=a("strong"),dLr=o("mbart"),cLr=o(" \u2014 "),VY=a("a"),fLr=o("TFMBartForConditionalGeneration"),mLr=o(" (mBART model)"),gLr=l(),WM=a("li"),f9e=a("strong"),hLr=o("mt5"),pLr=o(" \u2014 "),XY=a("a"),_Lr=o("TFMT5ForConditionalGeneration"),uLr=o(" (MT5 model)"),bLr=l(),HM=a("li"),m9e=a("strong"),vLr=o("pegasus"),FLr=o(" \u2014 "),zY=a("a"),TLr=o("TFPegasusForConditionalGeneration"),MLr=o(" (Pegasus model)"),ELr=l(),UM=a("li"),g9e=a("strong"),CLr=o("t5"),wLr=o(" \u2014 "),QY=a("a"),ALr=o("TFT5ForConditionalGeneration"),LLr=o(" (T5 model)"),yLr=l(),F(JM.$$.fragment),Lze=l(),Ec=a("h2"),YM=a("a"),h9e=a("span"),F(Cx.$$.fragment),xLr=l(),p9e=a("span"),$Lr=o("TFAutoModelForSequenceClassification"),yze=l(),lr=a("div"),F(wx.$$.fragment),kLr=l(),Cc=a("p"),SLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WY=a("a"),RLr=o("from_pretrained()"),PLr=o(" class method or the "),HY=a("a"),BLr=o("from_config()"),ILr=o(` class
method.`),NLr=l(),Ax=a("p"),qLr=o("This class cannot be instantiated directly using "),_9e=a("code"),jLr=o("__init__()"),DLr=o(" (throws an error)."),GLr=l(),qt=a("div"),F(Lx.$$.fragment),OLr=l(),u9e=a("p"),VLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XLr=l(),wc=a("p"),zLr=o(`Note:
Loading a model from its configuration file does `),b9e=a("strong"),QLr=o("not"),WLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),HLr=o("from_pretrained()"),ULr=o(" to load the model weights."),JLr=l(),F(KM.$$.fragment),YLr=l(),Br=a("div"),F(yx.$$.fragment),KLr=l(),v9e=a("p"),ZLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eyr=l(),hn=a("p"),oyr=o("The model class to instantiate is selected based on the "),F9e=a("code"),ryr=o("model_type"),tyr=o(` property of the config object (either
passed as an argument or loaded from `),T9e=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=a("code"),syr=o("pretrained_model_name_or_path"),lyr=o(":"),iyr=l(),te=a("ul"),ZM=a("li"),E9e=a("strong"),dyr=o("albert"),cyr=o(" \u2014 "),JY=a("a"),fyr=o("TFAlbertForSequenceClassification"),myr=o(" (ALBERT model)"),gyr=l(),eE=a("li"),C9e=a("strong"),hyr=o("bert"),pyr=o(" \u2014 "),YY=a("a"),_yr=o("TFBertForSequenceClassification"),uyr=o(" (BERT model)"),byr=l(),oE=a("li"),w9e=a("strong"),vyr=o("camembert"),Fyr=o(" \u2014 "),KY=a("a"),Tyr=o("TFCamembertForSequenceClassification"),Myr=o(" (CamemBERT model)"),Eyr=l(),rE=a("li"),A9e=a("strong"),Cyr=o("convbert"),wyr=o(" \u2014 "),ZY=a("a"),Ayr=o("TFConvBertForSequenceClassification"),Lyr=o(" (ConvBERT model)"),yyr=l(),tE=a("li"),L9e=a("strong"),xyr=o("ctrl"),$yr=o(" \u2014 "),eK=a("a"),kyr=o("TFCTRLForSequenceClassification"),Syr=o(" (CTRL model)"),Ryr=l(),aE=a("li"),y9e=a("strong"),Pyr=o("deberta"),Byr=o(" \u2014 "),oK=a("a"),Iyr=o("TFDebertaForSequenceClassification"),Nyr=o(" (DeBERTa model)"),qyr=l(),nE=a("li"),x9e=a("strong"),jyr=o("deberta-v2"),Dyr=o(" \u2014 "),rK=a("a"),Gyr=o("TFDebertaV2ForSequenceClassification"),Oyr=o(" (DeBERTa-v2 model)"),Vyr=l(),sE=a("li"),$9e=a("strong"),Xyr=o("distilbert"),zyr=o(" \u2014 "),tK=a("a"),Qyr=o("TFDistilBertForSequenceClassification"),Wyr=o(" (DistilBERT model)"),Hyr=l(),lE=a("li"),k9e=a("strong"),Uyr=o("electra"),Jyr=o(" \u2014 "),aK=a("a"),Yyr=o("TFElectraForSequenceClassification"),Kyr=o(" (ELECTRA model)"),Zyr=l(),iE=a("li"),S9e=a("strong"),e8r=o("flaubert"),o8r=o(" \u2014 "),nK=a("a"),r8r=o("TFFlaubertForSequenceClassification"),t8r=o(" (FlauBERT model)"),a8r=l(),dE=a("li"),R9e=a("strong"),n8r=o("funnel"),s8r=o(" \u2014 "),sK=a("a"),l8r=o("TFFunnelForSequenceClassification"),i8r=o(" (Funnel Transformer model)"),d8r=l(),cE=a("li"),P9e=a("strong"),c8r=o("gpt2"),f8r=o(" \u2014 "),lK=a("a"),m8r=o("TFGPT2ForSequenceClassification"),g8r=o(" (OpenAI GPT-2 model)"),h8r=l(),fE=a("li"),B9e=a("strong"),p8r=o("gptj"),_8r=o(" \u2014 "),iK=a("a"),u8r=o("TFGPTJForSequenceClassification"),b8r=o(" (GPT-J model)"),v8r=l(),mE=a("li"),I9e=a("strong"),F8r=o("layoutlm"),T8r=o(" \u2014 "),dK=a("a"),M8r=o("TFLayoutLMForSequenceClassification"),E8r=o(" (LayoutLM model)"),C8r=l(),gE=a("li"),N9e=a("strong"),w8r=o("longformer"),A8r=o(" \u2014 "),cK=a("a"),L8r=o("TFLongformerForSequenceClassification"),y8r=o(" (Longformer model)"),x8r=l(),hE=a("li"),q9e=a("strong"),$8r=o("mobilebert"),k8r=o(" \u2014 "),fK=a("a"),S8r=o("TFMobileBertForSequenceClassification"),R8r=o(" (MobileBERT model)"),P8r=l(),pE=a("li"),j9e=a("strong"),B8r=o("mpnet"),I8r=o(" \u2014 "),mK=a("a"),N8r=o("TFMPNetForSequenceClassification"),q8r=o(" (MPNet model)"),j8r=l(),_E=a("li"),D9e=a("strong"),D8r=o("openai-gpt"),G8r=o(" \u2014 "),gK=a("a"),O8r=o("TFOpenAIGPTForSequenceClassification"),V8r=o(" (OpenAI GPT model)"),X8r=l(),uE=a("li"),G9e=a("strong"),z8r=o("rembert"),Q8r=o(" \u2014 "),hK=a("a"),W8r=o("TFRemBertForSequenceClassification"),H8r=o(" (RemBERT model)"),U8r=l(),bE=a("li"),O9e=a("strong"),J8r=o("roberta"),Y8r=o(" \u2014 "),pK=a("a"),K8r=o("TFRobertaForSequenceClassification"),Z8r=o(" (RoBERTa model)"),exr=l(),vE=a("li"),V9e=a("strong"),oxr=o("roformer"),rxr=o(" \u2014 "),_K=a("a"),txr=o("TFRoFormerForSequenceClassification"),axr=o(" (RoFormer model)"),nxr=l(),FE=a("li"),X9e=a("strong"),sxr=o("tapas"),lxr=o(" \u2014 "),uK=a("a"),ixr=o("TFTapasForSequenceClassification"),dxr=o(" (TAPAS model)"),cxr=l(),TE=a("li"),z9e=a("strong"),fxr=o("transfo-xl"),mxr=o(" \u2014 "),bK=a("a"),gxr=o("TFTransfoXLForSequenceClassification"),hxr=o(" (Transformer-XL model)"),pxr=l(),ME=a("li"),Q9e=a("strong"),_xr=o("xlm"),uxr=o(" \u2014 "),vK=a("a"),bxr=o("TFXLMForSequenceClassification"),vxr=o(" (XLM model)"),Fxr=l(),EE=a("li"),W9e=a("strong"),Txr=o("xlm-roberta"),Mxr=o(" \u2014 "),FK=a("a"),Exr=o("TFXLMRobertaForSequenceClassification"),Cxr=o(" (XLM-RoBERTa model)"),wxr=l(),CE=a("li"),H9e=a("strong"),Axr=o("xlnet"),Lxr=o(" \u2014 "),TK=a("a"),yxr=o("TFXLNetForSequenceClassification"),xxr=o(" (XLNet model)"),$xr=l(),F(wE.$$.fragment),xze=l(),Ac=a("h2"),AE=a("a"),U9e=a("span"),F(xx.$$.fragment),kxr=l(),J9e=a("span"),Sxr=o("TFAutoModelForMultipleChoice"),$ze=l(),ir=a("div"),F($x.$$.fragment),Rxr=l(),Lc=a("p"),Pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MK=a("a"),Bxr=o("from_pretrained()"),Ixr=o(" class method or the "),EK=a("a"),Nxr=o("from_config()"),qxr=o(` class
method.`),jxr=l(),kx=a("p"),Dxr=o("This class cannot be instantiated directly using "),Y9e=a("code"),Gxr=o("__init__()"),Oxr=o(" (throws an error)."),Vxr=l(),jt=a("div"),F(Sx.$$.fragment),Xxr=l(),K9e=a("p"),zxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qxr=l(),yc=a("p"),Wxr=o(`Note:
Loading a model from its configuration file does `),Z9e=a("strong"),Hxr=o("not"),Uxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("a"),Jxr=o("from_pretrained()"),Yxr=o(" to load the model weights."),Kxr=l(),F(LE.$$.fragment),Zxr=l(),Ir=a("div"),F(Rx.$$.fragment),e$r=l(),eMe=a("p"),o$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r$r=l(),pn=a("p"),t$r=o("The model class to instantiate is selected based on the "),oMe=a("code"),a$r=o("model_type"),n$r=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),s$r=o("pretrained_model_name_or_path"),l$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),i$r=o("pretrained_model_name_or_path"),d$r=o(":"),c$r=l(),ue=a("ul"),yE=a("li"),aMe=a("strong"),f$r=o("albert"),m$r=o(" \u2014 "),wK=a("a"),g$r=o("TFAlbertForMultipleChoice"),h$r=o(" (ALBERT model)"),p$r=l(),xE=a("li"),nMe=a("strong"),_$r=o("bert"),u$r=o(" \u2014 "),AK=a("a"),b$r=o("TFBertForMultipleChoice"),v$r=o(" (BERT model)"),F$r=l(),$E=a("li"),sMe=a("strong"),T$r=o("camembert"),M$r=o(" \u2014 "),LK=a("a"),E$r=o("TFCamembertForMultipleChoice"),C$r=o(" (CamemBERT model)"),w$r=l(),kE=a("li"),lMe=a("strong"),A$r=o("convbert"),L$r=o(" \u2014 "),yK=a("a"),y$r=o("TFConvBertForMultipleChoice"),x$r=o(" (ConvBERT model)"),$$r=l(),SE=a("li"),iMe=a("strong"),k$r=o("distilbert"),S$r=o(" \u2014 "),xK=a("a"),R$r=o("TFDistilBertForMultipleChoice"),P$r=o(" (DistilBERT model)"),B$r=l(),RE=a("li"),dMe=a("strong"),I$r=o("electra"),N$r=o(" \u2014 "),$K=a("a"),q$r=o("TFElectraForMultipleChoice"),j$r=o(" (ELECTRA model)"),D$r=l(),PE=a("li"),cMe=a("strong"),G$r=o("flaubert"),O$r=o(" \u2014 "),kK=a("a"),V$r=o("TFFlaubertForMultipleChoice"),X$r=o(" (FlauBERT model)"),z$r=l(),BE=a("li"),fMe=a("strong"),Q$r=o("funnel"),W$r=o(" \u2014 "),SK=a("a"),H$r=o("TFFunnelForMultipleChoice"),U$r=o(" (Funnel Transformer model)"),J$r=l(),IE=a("li"),mMe=a("strong"),Y$r=o("longformer"),K$r=o(" \u2014 "),RK=a("a"),Z$r=o("TFLongformerForMultipleChoice"),ekr=o(" (Longformer model)"),okr=l(),NE=a("li"),gMe=a("strong"),rkr=o("mobilebert"),tkr=o(" \u2014 "),PK=a("a"),akr=o("TFMobileBertForMultipleChoice"),nkr=o(" (MobileBERT model)"),skr=l(),qE=a("li"),hMe=a("strong"),lkr=o("mpnet"),ikr=o(" \u2014 "),BK=a("a"),dkr=o("TFMPNetForMultipleChoice"),ckr=o(" (MPNet model)"),fkr=l(),jE=a("li"),pMe=a("strong"),mkr=o("rembert"),gkr=o(" \u2014 "),IK=a("a"),hkr=o("TFRemBertForMultipleChoice"),pkr=o(" (RemBERT model)"),_kr=l(),DE=a("li"),_Me=a("strong"),ukr=o("roberta"),bkr=o(" \u2014 "),NK=a("a"),vkr=o("TFRobertaForMultipleChoice"),Fkr=o(" (RoBERTa model)"),Tkr=l(),GE=a("li"),uMe=a("strong"),Mkr=o("roformer"),Ekr=o(" \u2014 "),qK=a("a"),Ckr=o("TFRoFormerForMultipleChoice"),wkr=o(" (RoFormer model)"),Akr=l(),OE=a("li"),bMe=a("strong"),Lkr=o("xlm"),ykr=o(" \u2014 "),jK=a("a"),xkr=o("TFXLMForMultipleChoice"),$kr=o(" (XLM model)"),kkr=l(),VE=a("li"),vMe=a("strong"),Skr=o("xlm-roberta"),Rkr=o(" \u2014 "),DK=a("a"),Pkr=o("TFXLMRobertaForMultipleChoice"),Bkr=o(" (XLM-RoBERTa model)"),Ikr=l(),XE=a("li"),FMe=a("strong"),Nkr=o("xlnet"),qkr=o(" \u2014 "),GK=a("a"),jkr=o("TFXLNetForMultipleChoice"),Dkr=o(" (XLNet model)"),Gkr=l(),F(zE.$$.fragment),kze=l(),xc=a("h2"),QE=a("a"),TMe=a("span"),F(Px.$$.fragment),Okr=l(),MMe=a("span"),Vkr=o("TFAutoModelForNextSentencePrediction"),Sze=l(),dr=a("div"),F(Bx.$$.fragment),Xkr=l(),$c=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OK=a("a"),Qkr=o("from_pretrained()"),Wkr=o(" class method or the "),VK=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),Ix=a("p"),Ykr=o("This class cannot be instantiated directly using "),EMe=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),Dt=a("div"),F(Nx.$$.fragment),oSr=l(),CMe=a("p"),rSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tSr=l(),kc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F(WE.$$.fragment),cSr=l(),Nr=a("div"),F(qx.$$.fragment),fSr=l(),AMe=a("p"),mSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gSr=l(),_n=a("p"),hSr=o("The model class to instantiate is selected based on the "),LMe=a("code"),pSr=o("model_type"),_Sr=o(` property of the config object (either
passed as an argument or loaded from `),yMe=a("code"),uSr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),jx=a("ul"),HE=a("li"),$Me=a("strong"),MSr=o("bert"),ESr=o(" \u2014 "),zK=a("a"),CSr=o("TFBertForNextSentencePrediction"),wSr=o(" (BERT model)"),ASr=l(),UE=a("li"),kMe=a("strong"),LSr=o("mobilebert"),ySr=o(" \u2014 "),QK=a("a"),xSr=o("TFMobileBertForNextSentencePrediction"),$Sr=o(" (MobileBERT model)"),kSr=l(),F(JE.$$.fragment),Rze=l(),Sc=a("h2"),YE=a("a"),SMe=a("span"),F(Dx.$$.fragment),SSr=l(),RMe=a("span"),RSr=o("TFAutoModelForTableQuestionAnswering"),Pze=l(),cr=a("div"),F(Gx.$$.fragment),PSr=l(),Rc=a("p"),BSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WK=a("a"),ISr=o("from_pretrained()"),NSr=o(" class method or the "),HK=a("a"),qSr=o("from_config()"),jSr=o(` class
method.`),DSr=l(),Ox=a("p"),GSr=o("This class cannot be instantiated directly using "),PMe=a("code"),OSr=o("__init__()"),VSr=o(" (throws an error)."),XSr=l(),Gt=a("div"),F(Vx.$$.fragment),zSr=l(),BMe=a("p"),QSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),WSr=l(),Pc=a("p"),HSr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),USr=o("not"),JSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=a("a"),YSr=o("from_pretrained()"),KSr=o(" to load the model weights."),ZSr=l(),F(KE.$$.fragment),eRr=l(),qr=a("div"),F(Xx.$$.fragment),oRr=l(),NMe=a("p"),rRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tRr=l(),un=a("p"),aRr=o("The model class to instantiate is selected based on the "),qMe=a("code"),nRr=o("model_type"),sRr=o(` property of the config object (either
passed as an argument or loaded from `),jMe=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=a("code"),dRr=o("pretrained_model_name_or_path"),cRr=o(":"),fRr=l(),GMe=a("ul"),ZE=a("li"),OMe=a("strong"),mRr=o("tapas"),gRr=o(" \u2014 "),JK=a("a"),hRr=o("TFTapasForQuestionAnswering"),pRr=o(" (TAPAS model)"),_Rr=l(),F(eC.$$.fragment),Bze=l(),Bc=a("h2"),oC=a("a"),VMe=a("span"),F(zx.$$.fragment),uRr=l(),XMe=a("span"),bRr=o("TFAutoModelForTokenClassification"),Ize=l(),fr=a("div"),F(Qx.$$.fragment),vRr=l(),Ic=a("p"),FRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=a("a"),TRr=o("from_pretrained()"),MRr=o(" class method or the "),KK=a("a"),ERr=o("from_config()"),CRr=o(` class
method.`),wRr=l(),Wx=a("p"),ARr=o("This class cannot be instantiated directly using "),zMe=a("code"),LRr=o("__init__()"),yRr=o(" (throws an error)."),xRr=l(),Ot=a("div"),F(Hx.$$.fragment),$Rr=l(),QMe=a("p"),kRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SRr=l(),Nc=a("p"),RRr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),PRr=o("not"),BRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),IRr=o("from_pretrained()"),NRr=o(" to load the model weights."),qRr=l(),F(rC.$$.fragment),jRr=l(),jr=a("div"),F(Ux.$$.fragment),DRr=l(),HMe=a("p"),GRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ORr=l(),bn=a("p"),VRr=o("The model class to instantiate is selected based on the "),UMe=a("code"),XRr=o("model_type"),zRr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),QRr=o("pretrained_model_name_or_path"),WRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),HRr=o("pretrained_model_name_or_path"),URr=o(":"),JRr=l(),de=a("ul"),tC=a("li"),KMe=a("strong"),YRr=o("albert"),KRr=o(" \u2014 "),eZ=a("a"),ZRr=o("TFAlbertForTokenClassification"),ePr=o(" (ALBERT model)"),oPr=l(),aC=a("li"),ZMe=a("strong"),rPr=o("bert"),tPr=o(" \u2014 "),oZ=a("a"),aPr=o("TFBertForTokenClassification"),nPr=o(" (BERT model)"),sPr=l(),nC=a("li"),eEe=a("strong"),lPr=o("camembert"),iPr=o(" \u2014 "),rZ=a("a"),dPr=o("TFCamembertForTokenClassification"),cPr=o(" (CamemBERT model)"),fPr=l(),sC=a("li"),oEe=a("strong"),mPr=o("convbert"),gPr=o(" \u2014 "),tZ=a("a"),hPr=o("TFConvBertForTokenClassification"),pPr=o(" (ConvBERT model)"),_Pr=l(),lC=a("li"),rEe=a("strong"),uPr=o("deberta"),bPr=o(" \u2014 "),aZ=a("a"),vPr=o("TFDebertaForTokenClassification"),FPr=o(" (DeBERTa model)"),TPr=l(),iC=a("li"),tEe=a("strong"),MPr=o("deberta-v2"),EPr=o(" \u2014 "),nZ=a("a"),CPr=o("TFDebertaV2ForTokenClassification"),wPr=o(" (DeBERTa-v2 model)"),APr=l(),dC=a("li"),aEe=a("strong"),LPr=o("distilbert"),yPr=o(" \u2014 "),sZ=a("a"),xPr=o("TFDistilBertForTokenClassification"),$Pr=o(" (DistilBERT model)"),kPr=l(),cC=a("li"),nEe=a("strong"),SPr=o("electra"),RPr=o(" \u2014 "),lZ=a("a"),PPr=o("TFElectraForTokenClassification"),BPr=o(" (ELECTRA model)"),IPr=l(),fC=a("li"),sEe=a("strong"),NPr=o("flaubert"),qPr=o(" \u2014 "),iZ=a("a"),jPr=o("TFFlaubertForTokenClassification"),DPr=o(" (FlauBERT model)"),GPr=l(),mC=a("li"),lEe=a("strong"),OPr=o("funnel"),VPr=o(" \u2014 "),dZ=a("a"),XPr=o("TFFunnelForTokenClassification"),zPr=o(" (Funnel Transformer model)"),QPr=l(),gC=a("li"),iEe=a("strong"),WPr=o("layoutlm"),HPr=o(" \u2014 "),cZ=a("a"),UPr=o("TFLayoutLMForTokenClassification"),JPr=o(" (LayoutLM model)"),YPr=l(),hC=a("li"),dEe=a("strong"),KPr=o("longformer"),ZPr=o(" \u2014 "),fZ=a("a"),eBr=o("TFLongformerForTokenClassification"),oBr=o(" (Longformer model)"),rBr=l(),pC=a("li"),cEe=a("strong"),tBr=o("mobilebert"),aBr=o(" \u2014 "),mZ=a("a"),nBr=o("TFMobileBertForTokenClassification"),sBr=o(" (MobileBERT model)"),lBr=l(),_C=a("li"),fEe=a("strong"),iBr=o("mpnet"),dBr=o(" \u2014 "),gZ=a("a"),cBr=o("TFMPNetForTokenClassification"),fBr=o(" (MPNet model)"),mBr=l(),uC=a("li"),mEe=a("strong"),gBr=o("rembert"),hBr=o(" \u2014 "),hZ=a("a"),pBr=o("TFRemBertForTokenClassification"),_Br=o(" (RemBERT model)"),uBr=l(),bC=a("li"),gEe=a("strong"),bBr=o("roberta"),vBr=o(" \u2014 "),pZ=a("a"),FBr=o("TFRobertaForTokenClassification"),TBr=o(" (RoBERTa model)"),MBr=l(),vC=a("li"),hEe=a("strong"),EBr=o("roformer"),CBr=o(" \u2014 "),_Z=a("a"),wBr=o("TFRoFormerForTokenClassification"),ABr=o(" (RoFormer model)"),LBr=l(),FC=a("li"),pEe=a("strong"),yBr=o("xlm"),xBr=o(" \u2014 "),uZ=a("a"),$Br=o("TFXLMForTokenClassification"),kBr=o(" (XLM model)"),SBr=l(),TC=a("li"),_Ee=a("strong"),RBr=o("xlm-roberta"),PBr=o(" \u2014 "),bZ=a("a"),BBr=o("TFXLMRobertaForTokenClassification"),IBr=o(" (XLM-RoBERTa model)"),NBr=l(),MC=a("li"),uEe=a("strong"),qBr=o("xlnet"),jBr=o(" \u2014 "),vZ=a("a"),DBr=o("TFXLNetForTokenClassification"),GBr=o(" (XLNet model)"),OBr=l(),F(EC.$$.fragment),Nze=l(),qc=a("h2"),CC=a("a"),bEe=a("span"),F(Jx.$$.fragment),VBr=l(),vEe=a("span"),XBr=o("TFAutoModelForQuestionAnswering"),qze=l(),mr=a("div"),F(Yx.$$.fragment),zBr=l(),jc=a("p"),QBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FZ=a("a"),WBr=o("from_pretrained()"),HBr=o(" class method or the "),TZ=a("a"),UBr=o("from_config()"),JBr=o(` class
method.`),YBr=l(),Kx=a("p"),KBr=o("This class cannot be instantiated directly using "),FEe=a("code"),ZBr=o("__init__()"),eIr=o(" (throws an error)."),oIr=l(),Vt=a("div"),F(Zx.$$.fragment),rIr=l(),TEe=a("p"),tIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aIr=l(),Dc=a("p"),nIr=o(`Note:
Loading a model from its configuration file does `),MEe=a("strong"),sIr=o("not"),lIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),iIr=o("from_pretrained()"),dIr=o(" to load the model weights."),cIr=l(),F(wC.$$.fragment),fIr=l(),Dr=a("div"),F(e$.$$.fragment),mIr=l(),EEe=a("p"),gIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hIr=l(),vn=a("p"),pIr=o("The model class to instantiate is selected based on the "),CEe=a("code"),_Ir=o("model_type"),uIr=o(` property of the config object (either
passed as an argument or loaded from `),wEe=a("code"),bIr=o("pretrained_model_name_or_path"),vIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(":"),MIr=l(),ce=a("ul"),AC=a("li"),LEe=a("strong"),EIr=o("albert"),CIr=o(" \u2014 "),EZ=a("a"),wIr=o("TFAlbertForQuestionAnswering"),AIr=o(" (ALBERT model)"),LIr=l(),LC=a("li"),yEe=a("strong"),yIr=o("bert"),xIr=o(" \u2014 "),CZ=a("a"),$Ir=o("TFBertForQuestionAnswering"),kIr=o(" (BERT model)"),SIr=l(),yC=a("li"),xEe=a("strong"),RIr=o("camembert"),PIr=o(" \u2014 "),wZ=a("a"),BIr=o("TFCamembertForQuestionAnswering"),IIr=o(" (CamemBERT model)"),NIr=l(),xC=a("li"),$Ee=a("strong"),qIr=o("convbert"),jIr=o(" \u2014 "),AZ=a("a"),DIr=o("TFConvBertForQuestionAnswering"),GIr=o(" (ConvBERT model)"),OIr=l(),$C=a("li"),kEe=a("strong"),VIr=o("deberta"),XIr=o(" \u2014 "),LZ=a("a"),zIr=o("TFDebertaForQuestionAnswering"),QIr=o(" (DeBERTa model)"),WIr=l(),kC=a("li"),SEe=a("strong"),HIr=o("deberta-v2"),UIr=o(" \u2014 "),yZ=a("a"),JIr=o("TFDebertaV2ForQuestionAnswering"),YIr=o(" (DeBERTa-v2 model)"),KIr=l(),SC=a("li"),REe=a("strong"),ZIr=o("distilbert"),eNr=o(" \u2014 "),xZ=a("a"),oNr=o("TFDistilBertForQuestionAnswering"),rNr=o(" (DistilBERT model)"),tNr=l(),RC=a("li"),PEe=a("strong"),aNr=o("electra"),nNr=o(" \u2014 "),$Z=a("a"),sNr=o("TFElectraForQuestionAnswering"),lNr=o(" (ELECTRA model)"),iNr=l(),PC=a("li"),BEe=a("strong"),dNr=o("flaubert"),cNr=o(" \u2014 "),kZ=a("a"),fNr=o("TFFlaubertForQuestionAnsweringSimple"),mNr=o(" (FlauBERT model)"),gNr=l(),BC=a("li"),IEe=a("strong"),hNr=o("funnel"),pNr=o(" \u2014 "),SZ=a("a"),_Nr=o("TFFunnelForQuestionAnswering"),uNr=o(" (Funnel Transformer model)"),bNr=l(),IC=a("li"),NEe=a("strong"),vNr=o("gptj"),FNr=o(" \u2014 "),RZ=a("a"),TNr=o("TFGPTJForQuestionAnswering"),MNr=o(" (GPT-J model)"),ENr=l(),NC=a("li"),qEe=a("strong"),CNr=o("longformer"),wNr=o(" \u2014 "),PZ=a("a"),ANr=o("TFLongformerForQuestionAnswering"),LNr=o(" (Longformer model)"),yNr=l(),qC=a("li"),jEe=a("strong"),xNr=o("mobilebert"),$Nr=o(" \u2014 "),BZ=a("a"),kNr=o("TFMobileBertForQuestionAnswering"),SNr=o(" (MobileBERT model)"),RNr=l(),jC=a("li"),DEe=a("strong"),PNr=o("mpnet"),BNr=o(" \u2014 "),IZ=a("a"),INr=o("TFMPNetForQuestionAnswering"),NNr=o(" (MPNet model)"),qNr=l(),DC=a("li"),GEe=a("strong"),jNr=o("rembert"),DNr=o(" \u2014 "),NZ=a("a"),GNr=o("TFRemBertForQuestionAnswering"),ONr=o(" (RemBERT model)"),VNr=l(),GC=a("li"),OEe=a("strong"),XNr=o("roberta"),zNr=o(" \u2014 "),qZ=a("a"),QNr=o("TFRobertaForQuestionAnswering"),WNr=o(" (RoBERTa model)"),HNr=l(),OC=a("li"),VEe=a("strong"),UNr=o("roformer"),JNr=o(" \u2014 "),jZ=a("a"),YNr=o("TFRoFormerForQuestionAnswering"),KNr=o(" (RoFormer model)"),ZNr=l(),VC=a("li"),XEe=a("strong"),eqr=o("xlm"),oqr=o(" \u2014 "),DZ=a("a"),rqr=o("TFXLMForQuestionAnsweringSimple"),tqr=o(" (XLM model)"),aqr=l(),XC=a("li"),zEe=a("strong"),nqr=o("xlm-roberta"),sqr=o(" \u2014 "),GZ=a("a"),lqr=o("TFXLMRobertaForQuestionAnswering"),iqr=o(" (XLM-RoBERTa model)"),dqr=l(),zC=a("li"),QEe=a("strong"),cqr=o("xlnet"),fqr=o(" \u2014 "),OZ=a("a"),mqr=o("TFXLNetForQuestionAnsweringSimple"),gqr=o(" (XLNet model)"),hqr=l(),F(QC.$$.fragment),jze=l(),Gc=a("h2"),WC=a("a"),WEe=a("span"),F(o$.$$.fragment),pqr=l(),HEe=a("span"),_qr=o("TFAutoModelForVision2Seq"),Dze=l(),gr=a("div"),F(r$.$$.fragment),uqr=l(),Oc=a("p"),bqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VZ=a("a"),vqr=o("from_pretrained()"),Fqr=o(" class method or the "),XZ=a("a"),Tqr=o("from_config()"),Mqr=o(` class
method.`),Eqr=l(),t$=a("p"),Cqr=o("This class cannot be instantiated directly using "),UEe=a("code"),wqr=o("__init__()"),Aqr=o(" (throws an error)."),Lqr=l(),Xt=a("div"),F(a$.$$.fragment),yqr=l(),JEe=a("p"),xqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$qr=l(),Vc=a("p"),kqr=o(`Note:
Loading a model from its configuration file does `),YEe=a("strong"),Sqr=o("not"),Rqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),Pqr=o("from_pretrained()"),Bqr=o(" to load the model weights."),Iqr=l(),F(HC.$$.fragment),Nqr=l(),Gr=a("div"),F(n$.$$.fragment),qqr=l(),KEe=a("p"),jqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dqr=l(),Fn=a("p"),Gqr=o("The model class to instantiate is selected based on the "),ZEe=a("code"),Oqr=o("model_type"),Vqr=o(` property of the config object (either
passed as an argument or loaded from `),eCe=a("code"),Xqr=o("pretrained_model_name_or_path"),zqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=a("code"),Qqr=o("pretrained_model_name_or_path"),Wqr=o(":"),Hqr=l(),rCe=a("ul"),UC=a("li"),tCe=a("strong"),Uqr=o("vision-encoder-decoder"),Jqr=o(" \u2014 "),QZ=a("a"),Yqr=o("TFVisionEncoderDecoderModel"),Kqr=o(" (Vision Encoder decoder model)"),Zqr=l(),F(JC.$$.fragment),Gze=l(),Xc=a("h2"),YC=a("a"),aCe=a("span"),F(s$.$$.fragment),ejr=l(),nCe=a("span"),ojr=o("TFAutoModelForSpeechSeq2Seq"),Oze=l(),hr=a("div"),F(l$.$$.fragment),rjr=l(),zc=a("p"),tjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WZ=a("a"),ajr=o("from_pretrained()"),njr=o(" class method or the "),HZ=a("a"),sjr=o("from_config()"),ljr=o(` class
method.`),ijr=l(),i$=a("p"),djr=o("This class cannot be instantiated directly using "),sCe=a("code"),cjr=o("__init__()"),fjr=o(" (throws an error)."),mjr=l(),zt=a("div"),F(d$.$$.fragment),gjr=l(),lCe=a("p"),hjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pjr=l(),Qc=a("p"),_jr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),ujr=o("not"),bjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),vjr=o("from_pretrained()"),Fjr=o(" to load the model weights."),Tjr=l(),F(KC.$$.fragment),Mjr=l(),Or=a("div"),F(c$.$$.fragment),Ejr=l(),dCe=a("p"),Cjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wjr=l(),Tn=a("p"),Ajr=o("The model class to instantiate is selected based on the "),cCe=a("code"),Ljr=o("model_type"),yjr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),xjr=o("pretrained_model_name_or_path"),$jr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),kjr=o("pretrained_model_name_or_path"),Sjr=o(":"),Rjr=l(),gCe=a("ul"),ZC=a("li"),hCe=a("strong"),Pjr=o("speech_to_text"),Bjr=o(" \u2014 "),JZ=a("a"),Ijr=o("TFSpeech2TextForConditionalGeneration"),Njr=o(" (Speech2Text model)"),qjr=l(),F(e3.$$.fragment),Vze=l(),Wc=a("h2"),o3=a("a"),pCe=a("span"),F(f$.$$.fragment),jjr=l(),_Ce=a("span"),Djr=o("FlaxAutoModel"),Xze=l(),pr=a("div"),F(m$.$$.fragment),Gjr=l(),Hc=a("p"),Ojr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YZ=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" class method or the "),KZ=a("a"),zjr=o("from_config()"),Qjr=o(` class
method.`),Wjr=l(),g$=a("p"),Hjr=o("This class cannot be instantiated directly using "),uCe=a("code"),Ujr=o("__init__()"),Jjr=o(" (throws an error)."),Yjr=l(),Qt=a("div"),F(h$.$$.fragment),Kjr=l(),bCe=a("p"),Zjr=o("Instantiates one of the base model classes of the library from a configuration."),eDr=l(),Uc=a("p"),oDr=o(`Note:
Loading a model from its configuration file does `),vCe=a("strong"),rDr=o("not"),tDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),aDr=o("from_pretrained()"),nDr=o(" to load the model weights."),sDr=l(),F(r3.$$.fragment),lDr=l(),Vr=a("div"),F(p$.$$.fragment),iDr=l(),FCe=a("p"),dDr=o("Instantiate one of the base model classes of the library from a pretrained model."),cDr=l(),Mn=a("p"),fDr=o("The model class to instantiate is selected based on the "),TCe=a("code"),mDr=o("model_type"),gDr=o(` property of the config object (either
passed as an argument or loaded from `),MCe=a("code"),hDr=o("pretrained_model_name_or_path"),pDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=a("code"),_Dr=o("pretrained_model_name_or_path"),uDr=o(":"),bDr=l(),oe=a("ul"),t3=a("li"),CCe=a("strong"),vDr=o("albert"),FDr=o(" \u2014 "),eee=a("a"),TDr=o("FlaxAlbertModel"),MDr=o(" (ALBERT model)"),EDr=l(),a3=a("li"),wCe=a("strong"),CDr=o("bart"),wDr=o(" \u2014 "),oee=a("a"),ADr=o("FlaxBartModel"),LDr=o(" (BART model)"),yDr=l(),n3=a("li"),ACe=a("strong"),xDr=o("beit"),$Dr=o(" \u2014 "),ree=a("a"),kDr=o("FlaxBeitModel"),SDr=o(" (BEiT model)"),RDr=l(),s3=a("li"),LCe=a("strong"),PDr=o("bert"),BDr=o(" \u2014 "),tee=a("a"),IDr=o("FlaxBertModel"),NDr=o(" (BERT model)"),qDr=l(),l3=a("li"),yCe=a("strong"),jDr=o("big_bird"),DDr=o(" \u2014 "),aee=a("a"),GDr=o("FlaxBigBirdModel"),ODr=o(" (BigBird model)"),VDr=l(),i3=a("li"),xCe=a("strong"),XDr=o("blenderbot"),zDr=o(" \u2014 "),nee=a("a"),QDr=o("FlaxBlenderbotModel"),WDr=o(" (Blenderbot model)"),HDr=l(),d3=a("li"),$Ce=a("strong"),UDr=o("blenderbot-small"),JDr=o(" \u2014 "),see=a("a"),YDr=o("FlaxBlenderbotSmallModel"),KDr=o(" (BlenderbotSmall model)"),ZDr=l(),c3=a("li"),kCe=a("strong"),eGr=o("clip"),oGr=o(" \u2014 "),lee=a("a"),rGr=o("FlaxCLIPModel"),tGr=o(" (CLIP model)"),aGr=l(),f3=a("li"),SCe=a("strong"),nGr=o("distilbert"),sGr=o(" \u2014 "),iee=a("a"),lGr=o("FlaxDistilBertModel"),iGr=o(" (DistilBERT model)"),dGr=l(),m3=a("li"),RCe=a("strong"),cGr=o("electra"),fGr=o(" \u2014 "),dee=a("a"),mGr=o("FlaxElectraModel"),gGr=o(" (ELECTRA model)"),hGr=l(),g3=a("li"),PCe=a("strong"),pGr=o("gpt2"),_Gr=o(" \u2014 "),cee=a("a"),uGr=o("FlaxGPT2Model"),bGr=o(" (OpenAI GPT-2 model)"),vGr=l(),h3=a("li"),BCe=a("strong"),FGr=o("gpt_neo"),TGr=o(" \u2014 "),fee=a("a"),MGr=o("FlaxGPTNeoModel"),EGr=o(" (GPT Neo model)"),CGr=l(),p3=a("li"),ICe=a("strong"),wGr=o("gptj"),AGr=o(" \u2014 "),mee=a("a"),LGr=o("FlaxGPTJModel"),yGr=o(" (GPT-J model)"),xGr=l(),_3=a("li"),NCe=a("strong"),$Gr=o("longt5"),kGr=o(" \u2014 "),gee=a("a"),SGr=o("FlaxLongT5Model"),RGr=o(" (LongT5 model)"),PGr=l(),u3=a("li"),qCe=a("strong"),BGr=o("marian"),IGr=o(" \u2014 "),hee=a("a"),NGr=o("FlaxMarianModel"),qGr=o(" (Marian model)"),jGr=l(),b3=a("li"),jCe=a("strong"),DGr=o("mbart"),GGr=o(" \u2014 "),pee=a("a"),OGr=o("FlaxMBartModel"),VGr=o(" (mBART model)"),XGr=l(),v3=a("li"),DCe=a("strong"),zGr=o("mt5"),QGr=o(" \u2014 "),_ee=a("a"),WGr=o("FlaxMT5Model"),HGr=o(" (MT5 model)"),UGr=l(),F3=a("li"),GCe=a("strong"),JGr=o("opt"),YGr=o(" \u2014 "),uee=a("a"),KGr=o("FlaxOPTModel"),ZGr=o(" (OPT model)"),eOr=l(),T3=a("li"),OCe=a("strong"),oOr=o("pegasus"),rOr=o(" \u2014 "),bee=a("a"),tOr=o("FlaxPegasusModel"),aOr=o(" (Pegasus model)"),nOr=l(),M3=a("li"),VCe=a("strong"),sOr=o("roberta"),lOr=o(" \u2014 "),vee=a("a"),iOr=o("FlaxRobertaModel"),dOr=o(" (RoBERTa model)"),cOr=l(),E3=a("li"),XCe=a("strong"),fOr=o("roformer"),mOr=o(" \u2014 "),Fee=a("a"),gOr=o("FlaxRoFormerModel"),hOr=o(" (RoFormer model)"),pOr=l(),C3=a("li"),zCe=a("strong"),_Or=o("t5"),uOr=o(" \u2014 "),Tee=a("a"),bOr=o("FlaxT5Model"),vOr=o(" (T5 model)"),FOr=l(),w3=a("li"),QCe=a("strong"),TOr=o("vision-text-dual-encoder"),MOr=o(" \u2014 "),Mee=a("a"),EOr=o("FlaxVisionTextDualEncoderModel"),COr=o(" (VisionTextDualEncoder model)"),wOr=l(),A3=a("li"),WCe=a("strong"),AOr=o("vit"),LOr=o(" \u2014 "),Eee=a("a"),yOr=o("FlaxViTModel"),xOr=o(" (ViT model)"),$Or=l(),L3=a("li"),HCe=a("strong"),kOr=o("wav2vec2"),SOr=o(" \u2014 "),Cee=a("a"),ROr=o("FlaxWav2Vec2Model"),POr=o(" (Wav2Vec2 model)"),BOr=l(),y3=a("li"),UCe=a("strong"),IOr=o("xglm"),NOr=o(" \u2014 "),wee=a("a"),qOr=o("FlaxXGLMModel"),jOr=o(" (XGLM model)"),DOr=l(),x3=a("li"),JCe=a("strong"),GOr=o("xlm-roberta"),OOr=o(" \u2014 "),Aee=a("a"),VOr=o("FlaxXLMRobertaModel"),XOr=o(" (XLM-RoBERTa model)"),zOr=l(),F($3.$$.fragment),zze=l(),Jc=a("h2"),k3=a("a"),YCe=a("span"),F(_$.$$.fragment),QOr=l(),KCe=a("span"),WOr=o("FlaxAutoModelForCausalLM"),Qze=l(),_r=a("div"),F(u$.$$.fragment),HOr=l(),Yc=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lee=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),yee=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),b$=a("p"),oVr=o("This class cannot be instantiated directly using "),ZCe=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Wt=a("div"),F(v$.$$.fragment),nVr=l(),e3e=a("p"),sVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lVr=l(),Kc=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(S3.$$.fragment),hVr=l(),Xr=a("div"),F(F$.$$.fragment),pVr=l(),r3e=a("p"),_Vr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uVr=l(),En=a("p"),bVr=o("The model class to instantiate is selected based on the "),t3e=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),xe=a("ul"),R3=a("li"),s3e=a("strong"),AVr=o("bart"),LVr=o(" \u2014 "),$ee=a("a"),yVr=o("FlaxBartForCausalLM"),xVr=o(" (BART model)"),$Vr=l(),P3=a("li"),l3e=a("strong"),kVr=o("bert"),SVr=o(" \u2014 "),kee=a("a"),RVr=o("FlaxBertForCausalLM"),PVr=o(" (BERT model)"),BVr=l(),B3=a("li"),i3e=a("strong"),IVr=o("big_bird"),NVr=o(" \u2014 "),See=a("a"),qVr=o("FlaxBigBirdForCausalLM"),jVr=o(" (BigBird model)"),DVr=l(),I3=a("li"),d3e=a("strong"),GVr=o("electra"),OVr=o(" \u2014 "),Ree=a("a"),VVr=o("FlaxElectraForCausalLM"),XVr=o(" (ELECTRA model)"),zVr=l(),N3=a("li"),c3e=a("strong"),QVr=o("gpt2"),WVr=o(" \u2014 "),Pee=a("a"),HVr=o("FlaxGPT2LMHeadModel"),UVr=o(" (OpenAI GPT-2 model)"),JVr=l(),q3=a("li"),f3e=a("strong"),YVr=o("gpt_neo"),KVr=o(" \u2014 "),Bee=a("a"),ZVr=o("FlaxGPTNeoForCausalLM"),eXr=o(" (GPT Neo model)"),oXr=l(),j3=a("li"),m3e=a("strong"),rXr=o("gptj"),tXr=o(" \u2014 "),Iee=a("a"),aXr=o("FlaxGPTJForCausalLM"),nXr=o(" (GPT-J model)"),sXr=l(),D3=a("li"),g3e=a("strong"),lXr=o("opt"),iXr=o(" \u2014 "),Nee=a("a"),dXr=o("FlaxOPTForCausalLM"),cXr=o(" (OPT model)"),fXr=l(),G3=a("li"),h3e=a("strong"),mXr=o("roberta"),gXr=o(" \u2014 "),qee=a("a"),hXr=o("FlaxRobertaForCausalLM"),pXr=o(" (RoBERTa model)"),_Xr=l(),O3=a("li"),p3e=a("strong"),uXr=o("xglm"),bXr=o(" \u2014 "),jee=a("a"),vXr=o("FlaxXGLMForCausalLM"),FXr=o(" (XGLM model)"),TXr=l(),F(V3.$$.fragment),Wze=l(),Zc=a("h2"),X3=a("a"),_3e=a("span"),F(T$.$$.fragment),MXr=l(),u3e=a("span"),EXr=o("FlaxAutoModelForPreTraining"),Hze=l(),ur=a("div"),F(M$.$$.fragment),CXr=l(),ef=a("p"),wXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dee=a("a"),AXr=o("from_pretrained()"),LXr=o(" class method or the "),Gee=a("a"),yXr=o("from_config()"),xXr=o(` class
method.`),$Xr=l(),E$=a("p"),kXr=o("This class cannot be instantiated directly using "),b3e=a("code"),SXr=o("__init__()"),RXr=o(" (throws an error)."),PXr=l(),Ht=a("div"),F(C$.$$.fragment),BXr=l(),v3e=a("p"),IXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NXr=l(),of=a("p"),qXr=o(`Note:
Loading a model from its configuration file does `),F3e=a("strong"),jXr=o("not"),DXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=a("a"),GXr=o("from_pretrained()"),OXr=o(" to load the model weights."),VXr=l(),F(z3.$$.fragment),XXr=l(),zr=a("div"),F(w$.$$.fragment),zXr=l(),T3e=a("p"),QXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WXr=l(),Cn=a("p"),HXr=o("The model class to instantiate is selected based on the "),M3e=a("code"),UXr=o("model_type"),JXr=o(` property of the config object (either
passed as an argument or loaded from `),E3e=a("code"),YXr=o("pretrained_model_name_or_path"),KXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),ZXr=o("pretrained_model_name_or_path"),ezr=o(":"),ozr=l(),Ee=a("ul"),Q3=a("li"),w3e=a("strong"),rzr=o("albert"),tzr=o(" \u2014 "),Vee=a("a"),azr=o("FlaxAlbertForPreTraining"),nzr=o(" (ALBERT model)"),szr=l(),W3=a("li"),A3e=a("strong"),lzr=o("bart"),izr=o(" \u2014 "),Xee=a("a"),dzr=o("FlaxBartForConditionalGeneration"),czr=o(" (BART model)"),fzr=l(),H3=a("li"),L3e=a("strong"),mzr=o("bert"),gzr=o(" \u2014 "),zee=a("a"),hzr=o("FlaxBertForPreTraining"),pzr=o(" (BERT model)"),_zr=l(),U3=a("li"),y3e=a("strong"),uzr=o("big_bird"),bzr=o(" \u2014 "),Qee=a("a"),vzr=o("FlaxBigBirdForPreTraining"),Fzr=o(" (BigBird model)"),Tzr=l(),J3=a("li"),x3e=a("strong"),Mzr=o("electra"),Ezr=o(" \u2014 "),Wee=a("a"),Czr=o("FlaxElectraForPreTraining"),wzr=o(" (ELECTRA model)"),Azr=l(),Y3=a("li"),$3e=a("strong"),Lzr=o("longt5"),yzr=o(" \u2014 "),Hee=a("a"),xzr=o("FlaxLongT5ForConditionalGeneration"),$zr=o(" (LongT5 model)"),kzr=l(),K3=a("li"),k3e=a("strong"),Szr=o("mbart"),Rzr=o(" \u2014 "),Uee=a("a"),Pzr=o("FlaxMBartForConditionalGeneration"),Bzr=o(" (mBART model)"),Izr=l(),Z3=a("li"),S3e=a("strong"),Nzr=o("mt5"),qzr=o(" \u2014 "),Jee=a("a"),jzr=o("FlaxMT5ForConditionalGeneration"),Dzr=o(" (MT5 model)"),Gzr=l(),e5=a("li"),R3e=a("strong"),Ozr=o("roberta"),Vzr=o(" \u2014 "),Yee=a("a"),Xzr=o("FlaxRobertaForMaskedLM"),zzr=o(" (RoBERTa model)"),Qzr=l(),o5=a("li"),P3e=a("strong"),Wzr=o("roformer"),Hzr=o(" \u2014 "),Kee=a("a"),Uzr=o("FlaxRoFormerForMaskedLM"),Jzr=o(" (RoFormer model)"),Yzr=l(),r5=a("li"),B3e=a("strong"),Kzr=o("t5"),Zzr=o(" \u2014 "),Zee=a("a"),eQr=o("FlaxT5ForConditionalGeneration"),oQr=o(" (T5 model)"),rQr=l(),t5=a("li"),I3e=a("strong"),tQr=o("wav2vec2"),aQr=o(" \u2014 "),eoe=a("a"),nQr=o("FlaxWav2Vec2ForPreTraining"),sQr=o(" (Wav2Vec2 model)"),lQr=l(),a5=a("li"),N3e=a("strong"),iQr=o("xlm-roberta"),dQr=o(" \u2014 "),ooe=a("a"),cQr=o("FlaxXLMRobertaForMaskedLM"),fQr=o(" (XLM-RoBERTa model)"),mQr=l(),F(n5.$$.fragment),Uze=l(),rf=a("h2"),s5=a("a"),q3e=a("span"),F(A$.$$.fragment),gQr=l(),j3e=a("span"),hQr=o("FlaxAutoModelForMaskedLM"),Jze=l(),br=a("div"),F(L$.$$.fragment),pQr=l(),tf=a("p"),_Qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),roe=a("a"),uQr=o("from_pretrained()"),bQr=o(" class method or the "),toe=a("a"),vQr=o("from_config()"),FQr=o(` class
method.`),TQr=l(),y$=a("p"),MQr=o("This class cannot be instantiated directly using "),D3e=a("code"),EQr=o("__init__()"),CQr=o(" (throws an error)."),wQr=l(),Ut=a("div"),F(x$.$$.fragment),AQr=l(),G3e=a("p"),LQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yQr=l(),af=a("p"),xQr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),$Qr=o("not"),kQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=a("a"),SQr=o("from_pretrained()"),RQr=o(" to load the model weights."),PQr=l(),F(l5.$$.fragment),BQr=l(),Qr=a("div"),F($$.$$.fragment),IQr=l(),V3e=a("p"),NQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qQr=l(),wn=a("p"),jQr=o("The model class to instantiate is selected based on the "),X3e=a("code"),DQr=o("model_type"),GQr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),OQr=o("pretrained_model_name_or_path"),VQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=a("code"),XQr=o("pretrained_model_name_or_path"),zQr=o(":"),QQr=l(),$e=a("ul"),i5=a("li"),W3e=a("strong"),WQr=o("albert"),HQr=o(" \u2014 "),noe=a("a"),UQr=o("FlaxAlbertForMaskedLM"),JQr=o(" (ALBERT model)"),YQr=l(),d5=a("li"),H3e=a("strong"),KQr=o("bart"),ZQr=o(" \u2014 "),soe=a("a"),eWr=o("FlaxBartForConditionalGeneration"),oWr=o(" (BART model)"),rWr=l(),c5=a("li"),U3e=a("strong"),tWr=o("bert"),aWr=o(" \u2014 "),loe=a("a"),nWr=o("FlaxBertForMaskedLM"),sWr=o(" (BERT model)"),lWr=l(),f5=a("li"),J3e=a("strong"),iWr=o("big_bird"),dWr=o(" \u2014 "),ioe=a("a"),cWr=o("FlaxBigBirdForMaskedLM"),fWr=o(" (BigBird model)"),mWr=l(),m5=a("li"),Y3e=a("strong"),gWr=o("distilbert"),hWr=o(" \u2014 "),doe=a("a"),pWr=o("FlaxDistilBertForMaskedLM"),_Wr=o(" (DistilBERT model)"),uWr=l(),g5=a("li"),K3e=a("strong"),bWr=o("electra"),vWr=o(" \u2014 "),coe=a("a"),FWr=o("FlaxElectraForMaskedLM"),TWr=o(" (ELECTRA model)"),MWr=l(),h5=a("li"),Z3e=a("strong"),EWr=o("mbart"),CWr=o(" \u2014 "),foe=a("a"),wWr=o("FlaxMBartForConditionalGeneration"),AWr=o(" (mBART model)"),LWr=l(),p5=a("li"),e5e=a("strong"),yWr=o("roberta"),xWr=o(" \u2014 "),moe=a("a"),$Wr=o("FlaxRobertaForMaskedLM"),kWr=o(" (RoBERTa model)"),SWr=l(),_5=a("li"),o5e=a("strong"),RWr=o("roformer"),PWr=o(" \u2014 "),goe=a("a"),BWr=o("FlaxRoFormerForMaskedLM"),IWr=o(" (RoFormer model)"),NWr=l(),u5=a("li"),r5e=a("strong"),qWr=o("xlm-roberta"),jWr=o(" \u2014 "),hoe=a("a"),DWr=o("FlaxXLMRobertaForMaskedLM"),GWr=o(" (XLM-RoBERTa model)"),OWr=l(),F(b5.$$.fragment),Yze=l(),nf=a("h2"),v5=a("a"),t5e=a("span"),F(k$.$$.fragment),VWr=l(),a5e=a("span"),XWr=o("FlaxAutoModelForSeq2SeqLM"),Kze=l(),vr=a("div"),F(S$.$$.fragment),zWr=l(),sf=a("p"),QWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),poe=a("a"),WWr=o("from_pretrained()"),HWr=o(" class method or the "),_oe=a("a"),UWr=o("from_config()"),JWr=o(` class
method.`),YWr=l(),R$=a("p"),KWr=o("This class cannot be instantiated directly using "),n5e=a("code"),ZWr=o("__init__()"),eHr=o(" (throws an error)."),oHr=l(),Jt=a("div"),F(P$.$$.fragment),rHr=l(),s5e=a("p"),tHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aHr=l(),lf=a("p"),nHr=o(`Note:
Loading a model from its configuration file does `),l5e=a("strong"),sHr=o("not"),lHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("a"),iHr=o("from_pretrained()"),dHr=o(" to load the model weights."),cHr=l(),F(F5.$$.fragment),fHr=l(),Wr=a("div"),F(B$.$$.fragment),mHr=l(),i5e=a("p"),gHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hHr=l(),An=a("p"),pHr=o("The model class to instantiate is selected based on the "),d5e=a("code"),_Hr=o("model_type"),uHr=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),bHr=o("pretrained_model_name_or_path"),vHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),FHr=o("pretrained_model_name_or_path"),THr=o(":"),MHr=l(),ke=a("ul"),T5=a("li"),m5e=a("strong"),EHr=o("bart"),CHr=o(" \u2014 "),boe=a("a"),wHr=o("FlaxBartForConditionalGeneration"),AHr=o(" (BART model)"),LHr=l(),M5=a("li"),g5e=a("strong"),yHr=o("blenderbot"),xHr=o(" \u2014 "),voe=a("a"),$Hr=o("FlaxBlenderbotForConditionalGeneration"),kHr=o(" (Blenderbot model)"),SHr=l(),E5=a("li"),h5e=a("strong"),RHr=o("blenderbot-small"),PHr=o(" \u2014 "),Foe=a("a"),BHr=o("FlaxBlenderbotSmallForConditionalGeneration"),IHr=o(" (BlenderbotSmall model)"),NHr=l(),C5=a("li"),p5e=a("strong"),qHr=o("encoder-decoder"),jHr=o(" \u2014 "),Toe=a("a"),DHr=o("FlaxEncoderDecoderModel"),GHr=o(" (Encoder decoder model)"),OHr=l(),w5=a("li"),_5e=a("strong"),VHr=o("longt5"),XHr=o(" \u2014 "),Moe=a("a"),zHr=o("FlaxLongT5ForConditionalGeneration"),QHr=o(" (LongT5 model)"),WHr=l(),A5=a("li"),u5e=a("strong"),HHr=o("marian"),UHr=o(" \u2014 "),Eoe=a("a"),JHr=o("FlaxMarianMTModel"),YHr=o(" (Marian model)"),KHr=l(),L5=a("li"),b5e=a("strong"),ZHr=o("mbart"),eUr=o(" \u2014 "),Coe=a("a"),oUr=o("FlaxMBartForConditionalGeneration"),rUr=o(" (mBART model)"),tUr=l(),y5=a("li"),v5e=a("strong"),aUr=o("mt5"),nUr=o(" \u2014 "),woe=a("a"),sUr=o("FlaxMT5ForConditionalGeneration"),lUr=o(" (MT5 model)"),iUr=l(),x5=a("li"),F5e=a("strong"),dUr=o("pegasus"),cUr=o(" \u2014 "),Aoe=a("a"),fUr=o("FlaxPegasusForConditionalGeneration"),mUr=o(" (Pegasus model)"),gUr=l(),$5=a("li"),T5e=a("strong"),hUr=o("t5"),pUr=o(" \u2014 "),Loe=a("a"),_Ur=o("FlaxT5ForConditionalGeneration"),uUr=o(" (T5 model)"),bUr=l(),F(k5.$$.fragment),Zze=l(),df=a("h2"),S5=a("a"),M5e=a("span"),F(I$.$$.fragment),vUr=l(),E5e=a("span"),FUr=o("FlaxAutoModelForSequenceClassification"),eQe=l(),Fr=a("div"),F(N$.$$.fragment),TUr=l(),cf=a("p"),MUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yoe=a("a"),EUr=o("from_pretrained()"),CUr=o(" class method or the "),xoe=a("a"),wUr=o("from_config()"),AUr=o(` class
method.`),LUr=l(),q$=a("p"),yUr=o("This class cannot be instantiated directly using "),C5e=a("code"),xUr=o("__init__()"),$Ur=o(" (throws an error)."),kUr=l(),Yt=a("div"),F(j$.$$.fragment),SUr=l(),w5e=a("p"),RUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PUr=l(),ff=a("p"),BUr=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),IUr=o("not"),NUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),qUr=o("from_pretrained()"),jUr=o(" to load the model weights."),DUr=l(),F(R5.$$.fragment),GUr=l(),Hr=a("div"),F(D$.$$.fragment),OUr=l(),L5e=a("p"),VUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XUr=l(),Ln=a("p"),zUr=o("The model class to instantiate is selected based on the "),y5e=a("code"),QUr=o("model_type"),WUr=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),HUr=o("pretrained_model_name_or_path"),UUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),JUr=o("pretrained_model_name_or_path"),YUr=o(":"),KUr=l(),Se=a("ul"),P5=a("li"),k5e=a("strong"),ZUr=o("albert"),eJr=o(" \u2014 "),koe=a("a"),oJr=o("FlaxAlbertForSequenceClassification"),rJr=o(" (ALBERT model)"),tJr=l(),B5=a("li"),S5e=a("strong"),aJr=o("bart"),nJr=o(" \u2014 "),Soe=a("a"),sJr=o("FlaxBartForSequenceClassification"),lJr=o(" (BART model)"),iJr=l(),I5=a("li"),R5e=a("strong"),dJr=o("bert"),cJr=o(" \u2014 "),Roe=a("a"),fJr=o("FlaxBertForSequenceClassification"),mJr=o(" (BERT model)"),gJr=l(),N5=a("li"),P5e=a("strong"),hJr=o("big_bird"),pJr=o(" \u2014 "),Poe=a("a"),_Jr=o("FlaxBigBirdForSequenceClassification"),uJr=o(" (BigBird model)"),bJr=l(),q5=a("li"),B5e=a("strong"),vJr=o("distilbert"),FJr=o(" \u2014 "),Boe=a("a"),TJr=o("FlaxDistilBertForSequenceClassification"),MJr=o(" (DistilBERT model)"),EJr=l(),j5=a("li"),I5e=a("strong"),CJr=o("electra"),wJr=o(" \u2014 "),Ioe=a("a"),AJr=o("FlaxElectraForSequenceClassification"),LJr=o(" (ELECTRA model)"),yJr=l(),D5=a("li"),N5e=a("strong"),xJr=o("mbart"),$Jr=o(" \u2014 "),Noe=a("a"),kJr=o("FlaxMBartForSequenceClassification"),SJr=o(" (mBART model)"),RJr=l(),G5=a("li"),q5e=a("strong"),PJr=o("roberta"),BJr=o(" \u2014 "),qoe=a("a"),IJr=o("FlaxRobertaForSequenceClassification"),NJr=o(" (RoBERTa model)"),qJr=l(),O5=a("li"),j5e=a("strong"),jJr=o("roformer"),DJr=o(" \u2014 "),joe=a("a"),GJr=o("FlaxRoFormerForSequenceClassification"),OJr=o(" (RoFormer model)"),VJr=l(),V5=a("li"),D5e=a("strong"),XJr=o("xlm-roberta"),zJr=o(" \u2014 "),Doe=a("a"),QJr=o("FlaxXLMRobertaForSequenceClassification"),WJr=o(" (XLM-RoBERTa model)"),HJr=l(),F(X5.$$.fragment),oQe=l(),mf=a("h2"),z5=a("a"),G5e=a("span"),F(G$.$$.fragment),UJr=l(),O5e=a("span"),JJr=o("FlaxAutoModelForQuestionAnswering"),rQe=l(),Tr=a("div"),F(O$.$$.fragment),YJr=l(),gf=a("p"),KJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Goe=a("a"),ZJr=o("from_pretrained()"),eYr=o(" class method or the "),Ooe=a("a"),oYr=o("from_config()"),rYr=o(` class
method.`),tYr=l(),V$=a("p"),aYr=o("This class cannot be instantiated directly using "),V5e=a("code"),nYr=o("__init__()"),sYr=o(" (throws an error)."),lYr=l(),Kt=a("div"),F(X$.$$.fragment),iYr=l(),X5e=a("p"),dYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cYr=l(),hf=a("p"),fYr=o(`Note:
Loading a model from its configuration file does `),z5e=a("strong"),mYr=o("not"),gYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=a("a"),hYr=o("from_pretrained()"),pYr=o(" to load the model weights."),_Yr=l(),F(Q5.$$.fragment),uYr=l(),Ur=a("div"),F(z$.$$.fragment),bYr=l(),Q5e=a("p"),vYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FYr=l(),yn=a("p"),TYr=o("The model class to instantiate is selected based on the "),W5e=a("code"),MYr=o("model_type"),EYr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),CYr=o("pretrained_model_name_or_path"),wYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),AYr=o("pretrained_model_name_or_path"),LYr=o(":"),yYr=l(),Re=a("ul"),W5=a("li"),J5e=a("strong"),xYr=o("albert"),$Yr=o(" \u2014 "),Xoe=a("a"),kYr=o("FlaxAlbertForQuestionAnswering"),SYr=o(" (ALBERT model)"),RYr=l(),H5=a("li"),Y5e=a("strong"),PYr=o("bart"),BYr=o(" \u2014 "),zoe=a("a"),IYr=o("FlaxBartForQuestionAnswering"),NYr=o(" (BART model)"),qYr=l(),U5=a("li"),K5e=a("strong"),jYr=o("bert"),DYr=o(" \u2014 "),Qoe=a("a"),GYr=o("FlaxBertForQuestionAnswering"),OYr=o(" (BERT model)"),VYr=l(),J5=a("li"),Z5e=a("strong"),XYr=o("big_bird"),zYr=o(" \u2014 "),Woe=a("a"),QYr=o("FlaxBigBirdForQuestionAnswering"),WYr=o(" (BigBird model)"),HYr=l(),Y5=a("li"),e0e=a("strong"),UYr=o("distilbert"),JYr=o(" \u2014 "),Hoe=a("a"),YYr=o("FlaxDistilBertForQuestionAnswering"),KYr=o(" (DistilBERT model)"),ZYr=l(),K5=a("li"),o0e=a("strong"),eKr=o("electra"),oKr=o(" \u2014 "),Uoe=a("a"),rKr=o("FlaxElectraForQuestionAnswering"),tKr=o(" (ELECTRA model)"),aKr=l(),Z5=a("li"),r0e=a("strong"),nKr=o("mbart"),sKr=o(" \u2014 "),Joe=a("a"),lKr=o("FlaxMBartForQuestionAnswering"),iKr=o(" (mBART model)"),dKr=l(),e0=a("li"),t0e=a("strong"),cKr=o("roberta"),fKr=o(" \u2014 "),Yoe=a("a"),mKr=o("FlaxRobertaForQuestionAnswering"),gKr=o(" (RoBERTa model)"),hKr=l(),o0=a("li"),a0e=a("strong"),pKr=o("roformer"),_Kr=o(" \u2014 "),Koe=a("a"),uKr=o("FlaxRoFormerForQuestionAnswering"),bKr=o(" (RoFormer model)"),vKr=l(),r0=a("li"),n0e=a("strong"),FKr=o("xlm-roberta"),TKr=o(" \u2014 "),Zoe=a("a"),MKr=o("FlaxXLMRobertaForQuestionAnswering"),EKr=o(" (XLM-RoBERTa model)"),CKr=l(),F(t0.$$.fragment),tQe=l(),pf=a("h2"),a0=a("a"),s0e=a("span"),F(Q$.$$.fragment),wKr=l(),l0e=a("span"),AKr=o("FlaxAutoModelForTokenClassification"),aQe=l(),Mr=a("div"),F(W$.$$.fragment),LKr=l(),_f=a("p"),yKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ere=a("a"),xKr=o("from_pretrained()"),$Kr=o(" class method or the "),ore=a("a"),kKr=o("from_config()"),SKr=o(` class
method.`),RKr=l(),H$=a("p"),PKr=o("This class cannot be instantiated directly using "),i0e=a("code"),BKr=o("__init__()"),IKr=o(" (throws an error)."),NKr=l(),Zt=a("div"),F(U$.$$.fragment),qKr=l(),d0e=a("p"),jKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DKr=l(),uf=a("p"),GKr=o(`Note:
Loading a model from its configuration file does `),c0e=a("strong"),OKr=o("not"),VKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),XKr=o("from_pretrained()"),zKr=o(" to load the model weights."),QKr=l(),F(n0.$$.fragment),WKr=l(),Jr=a("div"),F(J$.$$.fragment),HKr=l(),f0e=a("p"),UKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JKr=l(),xn=a("p"),YKr=o("The model class to instantiate is selected based on the "),m0e=a("code"),KKr=o("model_type"),ZKr=o(` property of the config object (either
passed as an argument or loaded from `),g0e=a("code"),eZr=o("pretrained_model_name_or_path"),oZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=a("code"),rZr=o("pretrained_model_name_or_path"),tZr=o(":"),aZr=l(),Ve=a("ul"),s0=a("li"),p0e=a("strong"),nZr=o("albert"),sZr=o(" \u2014 "),tre=a("a"),lZr=o("FlaxAlbertForTokenClassification"),iZr=o(" (ALBERT model)"),dZr=l(),l0=a("li"),_0e=a("strong"),cZr=o("bert"),fZr=o(" \u2014 "),are=a("a"),mZr=o("FlaxBertForTokenClassification"),gZr=o(" (BERT model)"),hZr=l(),i0=a("li"),u0e=a("strong"),pZr=o("big_bird"),_Zr=o(" \u2014 "),nre=a("a"),uZr=o("FlaxBigBirdForTokenClassification"),bZr=o(" (BigBird model)"),vZr=l(),d0=a("li"),b0e=a("strong"),FZr=o("distilbert"),TZr=o(" \u2014 "),sre=a("a"),MZr=o("FlaxDistilBertForTokenClassification"),EZr=o(" (DistilBERT model)"),CZr=l(),c0=a("li"),v0e=a("strong"),wZr=o("electra"),AZr=o(" \u2014 "),lre=a("a"),LZr=o("FlaxElectraForTokenClassification"),yZr=o(" (ELECTRA model)"),xZr=l(),f0=a("li"),F0e=a("strong"),$Zr=o("roberta"),kZr=o(" \u2014 "),ire=a("a"),SZr=o("FlaxRobertaForTokenClassification"),RZr=o(" (RoBERTa model)"),PZr=l(),m0=a("li"),T0e=a("strong"),BZr=o("roformer"),IZr=o(" \u2014 "),dre=a("a"),NZr=o("FlaxRoFormerForTokenClassification"),qZr=o(" (RoFormer model)"),jZr=l(),g0=a("li"),M0e=a("strong"),DZr=o("xlm-roberta"),GZr=o(" \u2014 "),cre=a("a"),OZr=o("FlaxXLMRobertaForTokenClassification"),VZr=o(" (XLM-RoBERTa model)"),XZr=l(),F(h0.$$.fragment),nQe=l(),bf=a("h2"),p0=a("a"),E0e=a("span"),F(Y$.$$.fragment),zZr=l(),C0e=a("span"),QZr=o("FlaxAutoModelForMultipleChoice"),sQe=l(),Er=a("div"),F(K$.$$.fragment),WZr=l(),vf=a("p"),HZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fre=a("a"),UZr=o("from_pretrained()"),JZr=o(" class method or the "),mre=a("a"),YZr=o("from_config()"),KZr=o(` class
method.`),ZZr=l(),Z$=a("p"),eet=o("This class cannot be instantiated directly using "),w0e=a("code"),oet=o("__init__()"),ret=o(" (throws an error)."),tet=l(),ea=a("div"),F(ek.$$.fragment),aet=l(),A0e=a("p"),net=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),set=l(),Ff=a("p"),iet=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),det=o("not"),cet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),fet=o("from_pretrained()"),met=o(" to load the model weights."),get=l(),F(_0.$$.fragment),het=l(),Yr=a("div"),F(ok.$$.fragment),pet=l(),y0e=a("p"),_et=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uet=l(),$n=a("p"),bet=o("The model class to instantiate is selected based on the "),x0e=a("code"),vet=o("model_type"),Fet=o(` property of the config object (either
passed as an argument or loaded from `),$0e=a("code"),Tet=o("pretrained_model_name_or_path"),Met=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=a("code"),Eet=o("pretrained_model_name_or_path"),Cet=o(":"),wet=l(),Xe=a("ul"),u0=a("li"),S0e=a("strong"),Aet=o("albert"),Let=o(" \u2014 "),hre=a("a"),yet=o("FlaxAlbertForMultipleChoice"),xet=o(" (ALBERT model)"),$et=l(),b0=a("li"),R0e=a("strong"),ket=o("bert"),Set=o(" \u2014 "),pre=a("a"),Ret=o("FlaxBertForMultipleChoice"),Pet=o(" (BERT model)"),Bet=l(),v0=a("li"),P0e=a("strong"),Iet=o("big_bird"),Net=o(" \u2014 "),_re=a("a"),qet=o("FlaxBigBirdForMultipleChoice"),jet=o(" (BigBird model)"),Det=l(),F0=a("li"),B0e=a("strong"),Get=o("distilbert"),Oet=o(" \u2014 "),ure=a("a"),Vet=o("FlaxDistilBertForMultipleChoice"),Xet=o(" (DistilBERT model)"),zet=l(),T0=a("li"),I0e=a("strong"),Qet=o("electra"),Wet=o(" \u2014 "),bre=a("a"),Het=o("FlaxElectraForMultipleChoice"),Uet=o(" (ELECTRA model)"),Jet=l(),M0=a("li"),N0e=a("strong"),Yet=o("roberta"),Ket=o(" \u2014 "),vre=a("a"),Zet=o("FlaxRobertaForMultipleChoice"),eot=o(" (RoBERTa model)"),oot=l(),E0=a("li"),q0e=a("strong"),rot=o("roformer"),tot=o(" \u2014 "),Fre=a("a"),aot=o("FlaxRoFormerForMultipleChoice"),not=o(" (RoFormer model)"),sot=l(),C0=a("li"),j0e=a("strong"),lot=o("xlm-roberta"),iot=o(" \u2014 "),Tre=a("a"),dot=o("FlaxXLMRobertaForMultipleChoice"),cot=o(" (XLM-RoBERTa model)"),fot=l(),F(w0.$$.fragment),lQe=l(),Tf=a("h2"),A0=a("a"),D0e=a("span"),F(rk.$$.fragment),mot=l(),G0e=a("span"),got=o("FlaxAutoModelForNextSentencePrediction"),iQe=l(),Cr=a("div"),F(tk.$$.fragment),hot=l(),Mf=a("p"),pot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mre=a("a"),_ot=o("from_pretrained()"),uot=o(" class method or the "),Ere=a("a"),bot=o("from_config()"),vot=o(` class
method.`),Fot=l(),ak=a("p"),Tot=o("This class cannot be instantiated directly using "),O0e=a("code"),Mot=o("__init__()"),Eot=o(" (throws an error)."),Cot=l(),oa=a("div"),F(nk.$$.fragment),wot=l(),V0e=a("p"),Aot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lot=l(),Ef=a("p"),yot=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),xot=o("not"),$ot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),kot=o("from_pretrained()"),Sot=o(" to load the model weights."),Rot=l(),F(L0.$$.fragment),Pot=l(),Kr=a("div"),F(sk.$$.fragment),Bot=l(),z0e=a("p"),Iot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Not=l(),kn=a("p"),qot=o("The model class to instantiate is selected based on the "),Q0e=a("code"),jot=o("model_type"),Dot=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),Got=o("pretrained_model_name_or_path"),Oot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),Vot=o("pretrained_model_name_or_path"),Xot=o(":"),zot=l(),U0e=a("ul"),y0=a("li"),J0e=a("strong"),Qot=o("bert"),Wot=o(" \u2014 "),wre=a("a"),Hot=o("FlaxBertForNextSentencePrediction"),Uot=o(" (BERT model)"),Jot=l(),F(x0.$$.fragment),dQe=l(),Cf=a("h2"),$0=a("a"),Y0e=a("span"),F(lk.$$.fragment),Yot=l(),K0e=a("span"),Kot=o("FlaxAutoModelForImageClassification"),cQe=l(),wr=a("div"),F(ik.$$.fragment),Zot=l(),wf=a("p"),ert=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Are=a("a"),ort=o("from_pretrained()"),rrt=o(" class method or the "),Lre=a("a"),trt=o("from_config()"),art=o(` class
method.`),nrt=l(),dk=a("p"),srt=o("This class cannot be instantiated directly using "),Z0e=a("code"),lrt=o("__init__()"),irt=o(" (throws an error)."),drt=l(),ra=a("div"),F(ck.$$.fragment),crt=l(),ewe=a("p"),frt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mrt=l(),Af=a("p"),grt=o(`Note:
Loading a model from its configuration file does `),owe=a("strong"),hrt=o("not"),prt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),_rt=o("from_pretrained()"),urt=o(" to load the model weights."),brt=l(),F(k0.$$.fragment),vrt=l(),Zr=a("div"),F(fk.$$.fragment),Frt=l(),rwe=a("p"),Trt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mrt=l(),Sn=a("p"),Ert=o("The model class to instantiate is selected based on the "),twe=a("code"),Crt=o("model_type"),wrt=o(` property of the config object (either
passed as an argument or loaded from `),awe=a("code"),Art=o("pretrained_model_name_or_path"),Lrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=a("code"),yrt=o("pretrained_model_name_or_path"),xrt=o(":"),$rt=l(),mk=a("ul"),S0=a("li"),swe=a("strong"),krt=o("beit"),Srt=o(" \u2014 "),xre=a("a"),Rrt=o("FlaxBeitForImageClassification"),Prt=o(" (BEiT model)"),Brt=l(),R0=a("li"),lwe=a("strong"),Irt=o("vit"),Nrt=o(" \u2014 "),$re=a("a"),qrt=o("FlaxViTForImageClassification"),jrt=o(" (ViT model)"),Drt=l(),F(P0.$$.fragment),fQe=l(),Lf=a("h2"),B0=a("a"),iwe=a("span"),F(gk.$$.fragment),Grt=l(),dwe=a("span"),Ort=o("FlaxAutoModelForVision2Seq"),mQe=l(),Ar=a("div"),F(hk.$$.fragment),Vrt=l(),yf=a("p"),Xrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kre=a("a"),zrt=o("from_pretrained()"),Qrt=o(" class method or the "),Sre=a("a"),Wrt=o("from_config()"),Hrt=o(` class
method.`),Urt=l(),pk=a("p"),Jrt=o("This class cannot be instantiated directly using "),cwe=a("code"),Yrt=o("__init__()"),Krt=o(" (throws an error)."),Zrt=l(),ta=a("div"),F(_k.$$.fragment),ett=l(),fwe=a("p"),ott=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rtt=l(),xf=a("p"),ttt=o(`Note:
Loading a model from its configuration file does `),mwe=a("strong"),att=o("not"),ntt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=a("a"),stt=o("from_pretrained()"),ltt=o(" to load the model weights."),itt=l(),F(I0.$$.fragment),dtt=l(),et=a("div"),F(uk.$$.fragment),ctt=l(),gwe=a("p"),ftt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mtt=l(),Rn=a("p"),gtt=o("The model class to instantiate is selected based on the "),hwe=a("code"),htt=o("model_type"),ptt=o(` property of the config object (either
passed as an argument or loaded from `),pwe=a("code"),_tt=o("pretrained_model_name_or_path"),utt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=a("code"),btt=o("pretrained_model_name_or_path"),vtt=o(":"),Ftt=l(),uwe=a("ul"),N0=a("li"),bwe=a("strong"),Ttt=o("vision-encoder-decoder"),Mtt=o(" \u2014 "),Pre=a("a"),Ett=o("FlaxVisionEncoderDecoderModel"),Ctt=o(" (Vision Encoder decoder model)"),wtt=l(),F(q0.$$.fragment),this.h()},l(f){const u=iWt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var bk=s(p);m=n(bk,"A",{id:!0,class:!0,href:!0});var vwe=s(m);_=n(vwe,"SPAN",{});var Fwe=s(_);T(d.$$.fragment,Fwe),Fwe.forEach(t),vwe.forEach(t),h=i(bk),Eo=n(bk,"SPAN",{});var Twe=s(Eo);Li=r(Twe,"Auto Classes"),Twe.forEach(t),bk.forEach(t),Rf=i(f),st=n(f,"P",{});var vk=s(st);yi=r(vk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(vk,"CODE",{});var Mwe=s(xi);aL=r(Mwe,"from_pretrained()"),Mwe.forEach(t),Pf=r(vk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),vk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Pn=s(Qe);$i=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var Ewe=s(Bn);nL=r(Ewe,"AutoConfig"),Ewe.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var Cwe=s(Nn);sL=r(Cwe,"AutoModel"),Cwe.forEach(t),ki=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var wwe=s(qn);lL=r(wwe,"AutoTokenizer"),wwe.forEach(t),Si=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var Fk=s(Ae);qS=r(Fk,"will create a model that is an instance of "),Ri=n(Fk,"A",{href:!0});var Awe=s(Ri);jS=r(Awe,"BertModel"),Awe.forEach(t),DS=r(Fk,"."),Fk.forEach(t),Co=i(f),Ra=n(f,"P",{});var Tk=s(Ra);GS=r(Tk,"There is one class of "),If=n(Tk,"CODE",{});var Lwe=s(If);OS=r(Lwe,"AutoModel"),Lwe.forEach(t),EHe=r(Tk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Tk.forEach(t),iXe=i(f),Pi=n(f,"H2",{class:!0});var Mk=s(Pi);Nf=n(Mk,"A",{id:!0,class:!0,href:!0});var ywe=s(Nf);yae=n(ywe,"SPAN",{});var xwe=s(yae);T(iL.$$.fragment,xwe),xwe.forEach(t),ywe.forEach(t),CHe=i(Mk),xae=n(Mk,"SPAN",{});var $we=s(xae);wHe=r($we,"Extending the Auto Classes"),$we.forEach(t),Mk.forEach(t),dXe=i(f),jn=n(f,"P",{});var $f=s(jn);AHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ae=n($f,"CODE",{});var kwe=s($ae);LHe=r(kwe,"NewModel"),kwe.forEach(t),yHe=r($f,", make sure you have a "),kae=n($f,"CODE",{});var Swe=s(kae);xHe=r(Swe,"NewModelConfig"),Swe.forEach(t),$He=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),cXe=i(f),T(dL.$$.fragment,f),fXe=i(f),VS=n(f,"P",{});var Rwe=s(VS);kHe=r(Rwe,"You will then be able to use the auto classes like you would usually do!"),Rwe.forEach(t),mXe=i(f),T(qf.$$.fragment,f),gXe=i(f),Bi=n(f,"H2",{class:!0});var Ek=s(Bi);jf=n(Ek,"A",{id:!0,class:!0,href:!0});var Pwe=s(jf);Sae=n(Pwe,"SPAN",{});var Bwe=s(Sae);T(cL.$$.fragment,Bwe),Bwe.forEach(t),Pwe.forEach(t),SHe=i(Ek),Rae=n(Ek,"SPAN",{});var Iwe=s(Rae);RHe=r(Iwe,"AutoConfig"),Iwe.forEach(t),Ek.forEach(t),hXe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(fL.$$.fragment,at),PHe=i(at),mL=n(at,"P",{});var Ck=s(mL);BHe=r(Ck,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),XS=n(Ck,"A",{href:!0});var Nwe=s(XS);IHe=r(Nwe,"from_pretrained()"),Nwe.forEach(t),NHe=r(Ck," class method."),Ck.forEach(t),qHe=i(at),gL=n(at,"P",{});var wk=s(gL);jHe=r(wk,"This class cannot be instantiated directly using "),Pae=n(wk,"CODE",{});var qwe=s(Pae);DHe=r(qwe,"__init__()"),qwe.forEach(t),GHe=r(wk," (throws an error)."),wk.forEach(t),OHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(hL.$$.fragment,nt),VHe=i(nt),Bae=n(nt,"P",{});var jwe=s(Bae);XHe=r(jwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),jwe.forEach(t),zHe=i(nt),Ii=n(nt,"P",{});var kf=s(Ii);QHe=r(kf,"The configuration class to instantiate is selected based on the "),Iae=n(kf,"CODE",{});var Dwe=s(Iae);WHe=r(Dwe,"model_type"),Dwe.forEach(t),HHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nae=n(kf,"CODE",{});var Gwe=s(Nae);UHe=r(Gwe,"pretrained_model_name_or_path"),Gwe.forEach(t),JHe=r(kf,":"),kf.forEach(t),YHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var j0=s(Df);qae=n(j0,"STRONG",{});var Owe=s(qae);KHe=r(Owe,"albert"),Owe.forEach(t),ZHe=r(j0," \u2014 "),zS=n(j0,"A",{href:!0});var Vwe=s(zS);eUe=r(Vwe,"AlbertConfig"),Vwe.forEach(t),oUe=r(j0," (ALBERT model)"),j0.forEach(t),rUe=i(L),Gf=n(L,"LI",{});var D0=s(Gf);jae=n(D0,"STRONG",{});var Xwe=s(jae);tUe=r(Xwe,"bart"),Xwe.forEach(t),aUe=r(D0," \u2014 "),QS=n(D0,"A",{href:!0});var zwe=s(QS);nUe=r(zwe,"BartConfig"),zwe.forEach(t),sUe=r(D0," (BART model)"),D0.forEach(t),lUe=i(L),Of=n(L,"LI",{});var G0=s(Of);Dae=n(G0,"STRONG",{});var Qwe=s(Dae);iUe=r(Qwe,"beit"),Qwe.forEach(t),dUe=r(G0," \u2014 "),WS=n(G0,"A",{href:!0});var Wwe=s(WS);cUe=r(Wwe,"BeitConfig"),Wwe.forEach(t),fUe=r(G0," (BEiT model)"),G0.forEach(t),mUe=i(L),Vf=n(L,"LI",{});var O0=s(Vf);Gae=n(O0,"STRONG",{});var Hwe=s(Gae);gUe=r(Hwe,"bert"),Hwe.forEach(t),hUe=r(O0," \u2014 "),HS=n(O0,"A",{href:!0});var Uwe=s(HS);pUe=r(Uwe,"BertConfig"),Uwe.forEach(t),_Ue=r(O0," (BERT model)"),O0.forEach(t),uUe=i(L),Xf=n(L,"LI",{});var V0=s(Xf);Oae=n(V0,"STRONG",{});var Jwe=s(Oae);bUe=r(Jwe,"bert-generation"),Jwe.forEach(t),vUe=r(V0," \u2014 "),US=n(V0,"A",{href:!0});var Ywe=s(US);FUe=r(Ywe,"BertGenerationConfig"),Ywe.forEach(t),TUe=r(V0," (Bert Generation model)"),V0.forEach(t),MUe=i(L),zf=n(L,"LI",{});var X0=s(zf);Vae=n(X0,"STRONG",{});var Kwe=s(Vae);EUe=r(Kwe,"big_bird"),Kwe.forEach(t),CUe=r(X0," \u2014 "),JS=n(X0,"A",{href:!0});var Zwe=s(JS);wUe=r(Zwe,"BigBirdConfig"),Zwe.forEach(t),AUe=r(X0," (BigBird model)"),X0.forEach(t),LUe=i(L),Qf=n(L,"LI",{});var z0=s(Qf);Xae=n(z0,"STRONG",{});var eAe=s(Xae);yUe=r(eAe,"bigbird_pegasus"),eAe.forEach(t),xUe=r(z0," \u2014 "),YS=n(z0,"A",{href:!0});var oAe=s(YS);$Ue=r(oAe,"BigBirdPegasusConfig"),oAe.forEach(t),kUe=r(z0," (BigBird-Pegasus model)"),z0.forEach(t),SUe=i(L),Wf=n(L,"LI",{});var Q0=s(Wf);zae=n(Q0,"STRONG",{});var rAe=s(zae);RUe=r(rAe,"blenderbot"),rAe.forEach(t),PUe=r(Q0," \u2014 "),KS=n(Q0,"A",{href:!0});var tAe=s(KS);BUe=r(tAe,"BlenderbotConfig"),tAe.forEach(t),IUe=r(Q0," (Blenderbot model)"),Q0.forEach(t),NUe=i(L),Hf=n(L,"LI",{});var W0=s(Hf);Qae=n(W0,"STRONG",{});var aAe=s(Qae);qUe=r(aAe,"blenderbot-small"),aAe.forEach(t),jUe=r(W0," \u2014 "),ZS=n(W0,"A",{href:!0});var nAe=s(ZS);DUe=r(nAe,"BlenderbotSmallConfig"),nAe.forEach(t),GUe=r(W0," (BlenderbotSmall model)"),W0.forEach(t),OUe=i(L),Uf=n(L,"LI",{});var H0=s(Uf);Wae=n(H0,"STRONG",{});var sAe=s(Wae);VUe=r(sAe,"bloom"),sAe.forEach(t),XUe=r(H0," \u2014 "),eR=n(H0,"A",{href:!0});var lAe=s(eR);zUe=r(lAe,"BloomConfig"),lAe.forEach(t),QUe=r(H0," (BLOOM model)"),H0.forEach(t),WUe=i(L),Jf=n(L,"LI",{});var U0=s(Jf);Hae=n(U0,"STRONG",{});var iAe=s(Hae);HUe=r(iAe,"camembert"),iAe.forEach(t),UUe=r(U0," \u2014 "),oR=n(U0,"A",{href:!0});var dAe=s(oR);JUe=r(dAe,"CamembertConfig"),dAe.forEach(t),YUe=r(U0," (CamemBERT model)"),U0.forEach(t),KUe=i(L),Yf=n(L,"LI",{});var J0=s(Yf);Uae=n(J0,"STRONG",{});var cAe=s(Uae);ZUe=r(cAe,"canine"),cAe.forEach(t),eJe=r(J0," \u2014 "),rR=n(J0,"A",{href:!0});var fAe=s(rR);oJe=r(fAe,"CanineConfig"),fAe.forEach(t),rJe=r(J0," (CANINE model)"),J0.forEach(t),tJe=i(L),Kf=n(L,"LI",{});var Y0=s(Kf);Jae=n(Y0,"STRONG",{});var mAe=s(Jae);aJe=r(mAe,"clip"),mAe.forEach(t),nJe=r(Y0," \u2014 "),tR=n(Y0,"A",{href:!0});var gAe=s(tR);sJe=r(gAe,"CLIPConfig"),gAe.forEach(t),lJe=r(Y0," (CLIP model)"),Y0.forEach(t),iJe=i(L),Zf=n(L,"LI",{});var K0=s(Zf);Yae=n(K0,"STRONG",{});var hAe=s(Yae);dJe=r(hAe,"codegen"),hAe.forEach(t),cJe=r(K0," \u2014 "),aR=n(K0,"A",{href:!0});var pAe=s(aR);fJe=r(pAe,"CodeGenConfig"),pAe.forEach(t),mJe=r(K0," (CodeGen model)"),K0.forEach(t),gJe=i(L),em=n(L,"LI",{});var Z0=s(em);Kae=n(Z0,"STRONG",{});var _Ae=s(Kae);hJe=r(_Ae,"convbert"),_Ae.forEach(t),pJe=r(Z0," \u2014 "),nR=n(Z0,"A",{href:!0});var uAe=s(nR);_Je=r(uAe,"ConvBertConfig"),uAe.forEach(t),uJe=r(Z0," (ConvBERT model)"),Z0.forEach(t),bJe=i(L),om=n(L,"LI",{});var ew=s(om);Zae=n(ew,"STRONG",{});var bAe=s(Zae);vJe=r(bAe,"convnext"),bAe.forEach(t),FJe=r(ew," \u2014 "),sR=n(ew,"A",{href:!0});var vAe=s(sR);TJe=r(vAe,"ConvNextConfig"),vAe.forEach(t),MJe=r(ew," (ConvNeXT model)"),ew.forEach(t),EJe=i(L),rm=n(L,"LI",{});var ow=s(rm);ene=n(ow,"STRONG",{});var FAe=s(ene);CJe=r(FAe,"ctrl"),FAe.forEach(t),wJe=r(ow," \u2014 "),lR=n(ow,"A",{href:!0});var TAe=s(lR);AJe=r(TAe,"CTRLConfig"),TAe.forEach(t),LJe=r(ow," (CTRL model)"),ow.forEach(t),yJe=i(L),tm=n(L,"LI",{});var rw=s(tm);one=n(rw,"STRONG",{});var MAe=s(one);xJe=r(MAe,"cvt"),MAe.forEach(t),$Je=r(rw," \u2014 "),iR=n(rw,"A",{href:!0});var EAe=s(iR);kJe=r(EAe,"CvtConfig"),EAe.forEach(t),SJe=r(rw," (CvT model)"),rw.forEach(t),RJe=i(L),am=n(L,"LI",{});var tw=s(am);rne=n(tw,"STRONG",{});var CAe=s(rne);PJe=r(CAe,"data2vec-audio"),CAe.forEach(t),BJe=r(tw," \u2014 "),dR=n(tw,"A",{href:!0});var wAe=s(dR);IJe=r(wAe,"Data2VecAudioConfig"),wAe.forEach(t),NJe=r(tw," (Data2VecAudio model)"),tw.forEach(t),qJe=i(L),nm=n(L,"LI",{});var aw=s(nm);tne=n(aw,"STRONG",{});var AAe=s(tne);jJe=r(AAe,"data2vec-text"),AAe.forEach(t),DJe=r(aw," \u2014 "),cR=n(aw,"A",{href:!0});var LAe=s(cR);GJe=r(LAe,"Data2VecTextConfig"),LAe.forEach(t),OJe=r(aw," (Data2VecText model)"),aw.forEach(t),VJe=i(L),sm=n(L,"LI",{});var nw=s(sm);ane=n(nw,"STRONG",{});var yAe=s(ane);XJe=r(yAe,"data2vec-vision"),yAe.forEach(t),zJe=r(nw," \u2014 "),fR=n(nw,"A",{href:!0});var xAe=s(fR);QJe=r(xAe,"Data2VecVisionConfig"),xAe.forEach(t),WJe=r(nw," (Data2VecVision model)"),nw.forEach(t),HJe=i(L),lm=n(L,"LI",{});var sw=s(lm);nne=n(sw,"STRONG",{});var $Ae=s(nne);UJe=r($Ae,"deberta"),$Ae.forEach(t),JJe=r(sw," \u2014 "),mR=n(sw,"A",{href:!0});var kAe=s(mR);YJe=r(kAe,"DebertaConfig"),kAe.forEach(t),KJe=r(sw," (DeBERTa model)"),sw.forEach(t),ZJe=i(L),im=n(L,"LI",{});var lw=s(im);sne=n(lw,"STRONG",{});var SAe=s(sne);eYe=r(SAe,"deberta-v2"),SAe.forEach(t),oYe=r(lw," \u2014 "),gR=n(lw,"A",{href:!0});var RAe=s(gR);rYe=r(RAe,"DebertaV2Config"),RAe.forEach(t),tYe=r(lw," (DeBERTa-v2 model)"),lw.forEach(t),aYe=i(L),dm=n(L,"LI",{});var iw=s(dm);lne=n(iw,"STRONG",{});var Ltt=s(lne);nYe=r(Ltt,"decision_transformer"),Ltt.forEach(t),sYe=r(iw," \u2014 "),hR=n(iw,"A",{href:!0});var ytt=s(hR);lYe=r(ytt,"DecisionTransformerConfig"),ytt.forEach(t),iYe=r(iw," (Decision Transformer model)"),iw.forEach(t),dYe=i(L),cm=n(L,"LI",{});var PAe=s(cm);ine=n(PAe,"STRONG",{});var xtt=s(ine);cYe=r(xtt,"deit"),xtt.forEach(t),fYe=r(PAe," \u2014 "),pR=n(PAe,"A",{href:!0});var $tt=s(pR);mYe=r($tt,"DeiTConfig"),$tt.forEach(t),gYe=r(PAe," (DeiT model)"),PAe.forEach(t),hYe=i(L),fm=n(L,"LI",{});var BAe=s(fm);dne=n(BAe,"STRONG",{});var ktt=s(dne);pYe=r(ktt,"detr"),ktt.forEach(t),_Ye=r(BAe," \u2014 "),_R=n(BAe,"A",{href:!0});var Stt=s(_R);uYe=r(Stt,"DetrConfig"),Stt.forEach(t),bYe=r(BAe," (DETR model)"),BAe.forEach(t),vYe=i(L),mm=n(L,"LI",{});var IAe=s(mm);cne=n(IAe,"STRONG",{});var Rtt=s(cne);FYe=r(Rtt,"distilbert"),Rtt.forEach(t),TYe=r(IAe," \u2014 "),uR=n(IAe,"A",{href:!0});var Ptt=s(uR);MYe=r(Ptt,"DistilBertConfig"),Ptt.forEach(t),EYe=r(IAe," (DistilBERT model)"),IAe.forEach(t),CYe=i(L),gm=n(L,"LI",{});var NAe=s(gm);fne=n(NAe,"STRONG",{});var Btt=s(fne);wYe=r(Btt,"dpr"),Btt.forEach(t),AYe=r(NAe," \u2014 "),bR=n(NAe,"A",{href:!0});var Itt=s(bR);LYe=r(Itt,"DPRConfig"),Itt.forEach(t),yYe=r(NAe," (DPR model)"),NAe.forEach(t),xYe=i(L),hm=n(L,"LI",{});var qAe=s(hm);mne=n(qAe,"STRONG",{});var Ntt=s(mne);$Ye=r(Ntt,"dpt"),Ntt.forEach(t),kYe=r(qAe," \u2014 "),vR=n(qAe,"A",{href:!0});var qtt=s(vR);SYe=r(qtt,"DPTConfig"),qtt.forEach(t),RYe=r(qAe," (DPT model)"),qAe.forEach(t),PYe=i(L),pm=n(L,"LI",{});var jAe=s(pm);gne=n(jAe,"STRONG",{});var jtt=s(gne);BYe=r(jtt,"electra"),jtt.forEach(t),IYe=r(jAe," \u2014 "),FR=n(jAe,"A",{href:!0});var Dtt=s(FR);NYe=r(Dtt,"ElectraConfig"),Dtt.forEach(t),qYe=r(jAe," (ELECTRA model)"),jAe.forEach(t),jYe=i(L),_m=n(L,"LI",{});var DAe=s(_m);hne=n(DAe,"STRONG",{});var Gtt=s(hne);DYe=r(Gtt,"encoder-decoder"),Gtt.forEach(t),GYe=r(DAe," \u2014 "),TR=n(DAe,"A",{href:!0});var Ott=s(TR);OYe=r(Ott,"EncoderDecoderConfig"),Ott.forEach(t),VYe=r(DAe," (Encoder decoder model)"),DAe.forEach(t),XYe=i(L),um=n(L,"LI",{});var GAe=s(um);pne=n(GAe,"STRONG",{});var Vtt=s(pne);zYe=r(Vtt,"flaubert"),Vtt.forEach(t),QYe=r(GAe," \u2014 "),MR=n(GAe,"A",{href:!0});var Xtt=s(MR);WYe=r(Xtt,"FlaubertConfig"),Xtt.forEach(t),HYe=r(GAe," (FlauBERT model)"),GAe.forEach(t),UYe=i(L),bm=n(L,"LI",{});var OAe=s(bm);_ne=n(OAe,"STRONG",{});var ztt=s(_ne);JYe=r(ztt,"flava"),ztt.forEach(t),YYe=r(OAe," \u2014 "),ER=n(OAe,"A",{href:!0});var Qtt=s(ER);KYe=r(Qtt,"FlavaConfig"),Qtt.forEach(t),ZYe=r(OAe," (FLAVA model)"),OAe.forEach(t),eKe=i(L),vm=n(L,"LI",{});var VAe=s(vm);une=n(VAe,"STRONG",{});var Wtt=s(une);oKe=r(Wtt,"fnet"),Wtt.forEach(t),rKe=r(VAe," \u2014 "),CR=n(VAe,"A",{href:!0});var Htt=s(CR);tKe=r(Htt,"FNetConfig"),Htt.forEach(t),aKe=r(VAe," (FNet model)"),VAe.forEach(t),nKe=i(L),Fm=n(L,"LI",{});var XAe=s(Fm);bne=n(XAe,"STRONG",{});var Utt=s(bne);sKe=r(Utt,"fsmt"),Utt.forEach(t),lKe=r(XAe," \u2014 "),wR=n(XAe,"A",{href:!0});var Jtt=s(wR);iKe=r(Jtt,"FSMTConfig"),Jtt.forEach(t),dKe=r(XAe," (FairSeq Machine-Translation model)"),XAe.forEach(t),cKe=i(L),Tm=n(L,"LI",{});var zAe=s(Tm);vne=n(zAe,"STRONG",{});var Ytt=s(vne);fKe=r(Ytt,"funnel"),Ytt.forEach(t),mKe=r(zAe," \u2014 "),AR=n(zAe,"A",{href:!0});var Ktt=s(AR);gKe=r(Ktt,"FunnelConfig"),Ktt.forEach(t),hKe=r(zAe," (Funnel Transformer model)"),zAe.forEach(t),pKe=i(L),Mm=n(L,"LI",{});var QAe=s(Mm);Fne=n(QAe,"STRONG",{});var Ztt=s(Fne);_Ke=r(Ztt,"glpn"),Ztt.forEach(t),uKe=r(QAe," \u2014 "),LR=n(QAe,"A",{href:!0});var eat=s(LR);bKe=r(eat,"GLPNConfig"),eat.forEach(t),vKe=r(QAe," (GLPN model)"),QAe.forEach(t),FKe=i(L),Em=n(L,"LI",{});var WAe=s(Em);Tne=n(WAe,"STRONG",{});var oat=s(Tne);TKe=r(oat,"gpt2"),oat.forEach(t),MKe=r(WAe," \u2014 "),yR=n(WAe,"A",{href:!0});var rat=s(yR);EKe=r(rat,"GPT2Config"),rat.forEach(t),CKe=r(WAe," (OpenAI GPT-2 model)"),WAe.forEach(t),wKe=i(L),Cm=n(L,"LI",{});var HAe=s(Cm);Mne=n(HAe,"STRONG",{});var tat=s(Mne);AKe=r(tat,"gpt_neo"),tat.forEach(t),LKe=r(HAe," \u2014 "),xR=n(HAe,"A",{href:!0});var aat=s(xR);yKe=r(aat,"GPTNeoConfig"),aat.forEach(t),xKe=r(HAe," (GPT Neo model)"),HAe.forEach(t),$Ke=i(L),wm=n(L,"LI",{});var UAe=s(wm);Ene=n(UAe,"STRONG",{});var nat=s(Ene);kKe=r(nat,"gpt_neox"),nat.forEach(t),SKe=r(UAe," \u2014 "),$R=n(UAe,"A",{href:!0});var sat=s($R);RKe=r(sat,"GPTNeoXConfig"),sat.forEach(t),PKe=r(UAe," (GPT NeoX model)"),UAe.forEach(t),BKe=i(L),Am=n(L,"LI",{});var JAe=s(Am);Cne=n(JAe,"STRONG",{});var lat=s(Cne);IKe=r(lat,"gptj"),lat.forEach(t),NKe=r(JAe," \u2014 "),kR=n(JAe,"A",{href:!0});var iat=s(kR);qKe=r(iat,"GPTJConfig"),iat.forEach(t),jKe=r(JAe," (GPT-J model)"),JAe.forEach(t),DKe=i(L),Lm=n(L,"LI",{});var YAe=s(Lm);wne=n(YAe,"STRONG",{});var dat=s(wne);GKe=r(dat,"groupvit"),dat.forEach(t),OKe=r(YAe," \u2014 "),SR=n(YAe,"A",{href:!0});var cat=s(SR);VKe=r(cat,"GroupViTConfig"),cat.forEach(t),XKe=r(YAe," (GroupViT model)"),YAe.forEach(t),zKe=i(L),ym=n(L,"LI",{});var KAe=s(ym);Ane=n(KAe,"STRONG",{});var fat=s(Ane);QKe=r(fat,"hubert"),fat.forEach(t),WKe=r(KAe," \u2014 "),RR=n(KAe,"A",{href:!0});var mat=s(RR);HKe=r(mat,"HubertConfig"),mat.forEach(t),UKe=r(KAe," (Hubert model)"),KAe.forEach(t),JKe=i(L),xm=n(L,"LI",{});var ZAe=s(xm);Lne=n(ZAe,"STRONG",{});var gat=s(Lne);YKe=r(gat,"ibert"),gat.forEach(t),KKe=r(ZAe," \u2014 "),PR=n(ZAe,"A",{href:!0});var hat=s(PR);ZKe=r(hat,"IBertConfig"),hat.forEach(t),eZe=r(ZAe," (I-BERT model)"),ZAe.forEach(t),oZe=i(L),$m=n(L,"LI",{});var eLe=s($m);yne=n(eLe,"STRONG",{});var pat=s(yne);rZe=r(pat,"imagegpt"),pat.forEach(t),tZe=r(eLe," \u2014 "),BR=n(eLe,"A",{href:!0});var _at=s(BR);aZe=r(_at,"ImageGPTConfig"),_at.forEach(t),nZe=r(eLe," (ImageGPT model)"),eLe.forEach(t),sZe=i(L),km=n(L,"LI",{});var oLe=s(km);xne=n(oLe,"STRONG",{});var uat=s(xne);lZe=r(uat,"layoutlm"),uat.forEach(t),iZe=r(oLe," \u2014 "),IR=n(oLe,"A",{href:!0});var bat=s(IR);dZe=r(bat,"LayoutLMConfig"),bat.forEach(t),cZe=r(oLe," (LayoutLM model)"),oLe.forEach(t),fZe=i(L),Sm=n(L,"LI",{});var rLe=s(Sm);$ne=n(rLe,"STRONG",{});var vat=s($ne);mZe=r(vat,"layoutlmv2"),vat.forEach(t),gZe=r(rLe," \u2014 "),NR=n(rLe,"A",{href:!0});var Fat=s(NR);hZe=r(Fat,"LayoutLMv2Config"),Fat.forEach(t),pZe=r(rLe," (LayoutLMv2 model)"),rLe.forEach(t),_Ze=i(L),Rm=n(L,"LI",{});var tLe=s(Rm);kne=n(tLe,"STRONG",{});var Tat=s(kne);uZe=r(Tat,"layoutlmv3"),Tat.forEach(t),bZe=r(tLe," \u2014 "),qR=n(tLe,"A",{href:!0});var Mat=s(qR);vZe=r(Mat,"LayoutLMv3Config"),Mat.forEach(t),FZe=r(tLe," (LayoutLMv3 model)"),tLe.forEach(t),TZe=i(L),Pm=n(L,"LI",{});var aLe=s(Pm);Sne=n(aLe,"STRONG",{});var Eat=s(Sne);MZe=r(Eat,"led"),Eat.forEach(t),EZe=r(aLe," \u2014 "),jR=n(aLe,"A",{href:!0});var Cat=s(jR);CZe=r(Cat,"LEDConfig"),Cat.forEach(t),wZe=r(aLe," (LED model)"),aLe.forEach(t),AZe=i(L),Bm=n(L,"LI",{});var nLe=s(Bm);Rne=n(nLe,"STRONG",{});var wat=s(Rne);LZe=r(wat,"levit"),wat.forEach(t),yZe=r(nLe," \u2014 "),DR=n(nLe,"A",{href:!0});var Aat=s(DR);xZe=r(Aat,"LevitConfig"),Aat.forEach(t),$Ze=r(nLe," (LeViT model)"),nLe.forEach(t),kZe=i(L),Im=n(L,"LI",{});var sLe=s(Im);Pne=n(sLe,"STRONG",{});var Lat=s(Pne);SZe=r(Lat,"longformer"),Lat.forEach(t),RZe=r(sLe," \u2014 "),GR=n(sLe,"A",{href:!0});var yat=s(GR);PZe=r(yat,"LongformerConfig"),yat.forEach(t),BZe=r(sLe," (Longformer model)"),sLe.forEach(t),IZe=i(L),Nm=n(L,"LI",{});var lLe=s(Nm);Bne=n(lLe,"STRONG",{});var xat=s(Bne);NZe=r(xat,"longt5"),xat.forEach(t),qZe=r(lLe," \u2014 "),OR=n(lLe,"A",{href:!0});var $at=s(OR);jZe=r($at,"LongT5Config"),$at.forEach(t),DZe=r(lLe," (LongT5 model)"),lLe.forEach(t),GZe=i(L),qm=n(L,"LI",{});var iLe=s(qm);Ine=n(iLe,"STRONG",{});var kat=s(Ine);OZe=r(kat,"luke"),kat.forEach(t),VZe=r(iLe," \u2014 "),VR=n(iLe,"A",{href:!0});var Sat=s(VR);XZe=r(Sat,"LukeConfig"),Sat.forEach(t),zZe=r(iLe," (LUKE model)"),iLe.forEach(t),QZe=i(L),jm=n(L,"LI",{});var dLe=s(jm);Nne=n(dLe,"STRONG",{});var Rat=s(Nne);WZe=r(Rat,"lxmert"),Rat.forEach(t),HZe=r(dLe," \u2014 "),XR=n(dLe,"A",{href:!0});var Pat=s(XR);UZe=r(Pat,"LxmertConfig"),Pat.forEach(t),JZe=r(dLe," (LXMERT model)"),dLe.forEach(t),YZe=i(L),Dm=n(L,"LI",{});var cLe=s(Dm);qne=n(cLe,"STRONG",{});var Bat=s(qne);KZe=r(Bat,"m2m_100"),Bat.forEach(t),ZZe=r(cLe," \u2014 "),zR=n(cLe,"A",{href:!0});var Iat=s(zR);eeo=r(Iat,"M2M100Config"),Iat.forEach(t),oeo=r(cLe," (M2M100 model)"),cLe.forEach(t),reo=i(L),Gm=n(L,"LI",{});var fLe=s(Gm);jne=n(fLe,"STRONG",{});var Nat=s(jne);teo=r(Nat,"marian"),Nat.forEach(t),aeo=r(fLe," \u2014 "),QR=n(fLe,"A",{href:!0});var qat=s(QR);neo=r(qat,"MarianConfig"),qat.forEach(t),seo=r(fLe," (Marian model)"),fLe.forEach(t),leo=i(L),Om=n(L,"LI",{});var mLe=s(Om);Dne=n(mLe,"STRONG",{});var jat=s(Dne);ieo=r(jat,"maskformer"),jat.forEach(t),deo=r(mLe," \u2014 "),WR=n(mLe,"A",{href:!0});var Dat=s(WR);ceo=r(Dat,"MaskFormerConfig"),Dat.forEach(t),feo=r(mLe," (MaskFormer model)"),mLe.forEach(t),meo=i(L),Vm=n(L,"LI",{});var gLe=s(Vm);Gne=n(gLe,"STRONG",{});var Gat=s(Gne);geo=r(Gat,"mbart"),Gat.forEach(t),heo=r(gLe," \u2014 "),HR=n(gLe,"A",{href:!0});var Oat=s(HR);peo=r(Oat,"MBartConfig"),Oat.forEach(t),_eo=r(gLe," (mBART model)"),gLe.forEach(t),ueo=i(L),Xm=n(L,"LI",{});var hLe=s(Xm);One=n(hLe,"STRONG",{});var Vat=s(One);beo=r(Vat,"mctct"),Vat.forEach(t),veo=r(hLe," \u2014 "),UR=n(hLe,"A",{href:!0});var Xat=s(UR);Feo=r(Xat,"MCTCTConfig"),Xat.forEach(t),Teo=r(hLe," (M-CTC-T model)"),hLe.forEach(t),Meo=i(L),zm=n(L,"LI",{});var pLe=s(zm);Vne=n(pLe,"STRONG",{});var zat=s(Vne);Eeo=r(zat,"megatron-bert"),zat.forEach(t),Ceo=r(pLe," \u2014 "),JR=n(pLe,"A",{href:!0});var Qat=s(JR);weo=r(Qat,"MegatronBertConfig"),Qat.forEach(t),Aeo=r(pLe," (Megatron-BERT model)"),pLe.forEach(t),Leo=i(L),Qm=n(L,"LI",{});var _Le=s(Qm);Xne=n(_Le,"STRONG",{});var Wat=s(Xne);yeo=r(Wat,"mobilebert"),Wat.forEach(t),xeo=r(_Le," \u2014 "),YR=n(_Le,"A",{href:!0});var Hat=s(YR);$eo=r(Hat,"MobileBertConfig"),Hat.forEach(t),keo=r(_Le," (MobileBERT model)"),_Le.forEach(t),Seo=i(L),Wm=n(L,"LI",{});var uLe=s(Wm);zne=n(uLe,"STRONG",{});var Uat=s(zne);Reo=r(Uat,"mobilevit"),Uat.forEach(t),Peo=r(uLe," \u2014 "),KR=n(uLe,"A",{href:!0});var Jat=s(KR);Beo=r(Jat,"MobileViTConfig"),Jat.forEach(t),Ieo=r(uLe," (MobileViT model)"),uLe.forEach(t),Neo=i(L),Hm=n(L,"LI",{});var bLe=s(Hm);Qne=n(bLe,"STRONG",{});var Yat=s(Qne);qeo=r(Yat,"mpnet"),Yat.forEach(t),jeo=r(bLe," \u2014 "),ZR=n(bLe,"A",{href:!0});var Kat=s(ZR);Deo=r(Kat,"MPNetConfig"),Kat.forEach(t),Geo=r(bLe," (MPNet model)"),bLe.forEach(t),Oeo=i(L),Um=n(L,"LI",{});var vLe=s(Um);Wne=n(vLe,"STRONG",{});var Zat=s(Wne);Veo=r(Zat,"mt5"),Zat.forEach(t),Xeo=r(vLe," \u2014 "),eP=n(vLe,"A",{href:!0});var ent=s(eP);zeo=r(ent,"MT5Config"),ent.forEach(t),Qeo=r(vLe," (MT5 model)"),vLe.forEach(t),Weo=i(L),Jm=n(L,"LI",{});var FLe=s(Jm);Hne=n(FLe,"STRONG",{});var ont=s(Hne);Heo=r(ont,"mvp"),ont.forEach(t),Ueo=r(FLe," \u2014 "),oP=n(FLe,"A",{href:!0});var rnt=s(oP);Jeo=r(rnt,"MvpConfig"),rnt.forEach(t),Yeo=r(FLe," (MVP model)"),FLe.forEach(t),Keo=i(L),Ym=n(L,"LI",{});var TLe=s(Ym);Une=n(TLe,"STRONG",{});var tnt=s(Une);Zeo=r(tnt,"nezha"),tnt.forEach(t),eoo=r(TLe," \u2014 "),rP=n(TLe,"A",{href:!0});var ant=s(rP);ooo=r(ant,"NezhaConfig"),ant.forEach(t),roo=r(TLe," (Nezha model)"),TLe.forEach(t),too=i(L),Km=n(L,"LI",{});var MLe=s(Km);Jne=n(MLe,"STRONG",{});var nnt=s(Jne);aoo=r(nnt,"nystromformer"),nnt.forEach(t),noo=r(MLe," \u2014 "),tP=n(MLe,"A",{href:!0});var snt=s(tP);soo=r(snt,"NystromformerConfig"),snt.forEach(t),loo=r(MLe," (Nystr\xF6mformer model)"),MLe.forEach(t),ioo=i(L),Zm=n(L,"LI",{});var ELe=s(Zm);Yne=n(ELe,"STRONG",{});var lnt=s(Yne);doo=r(lnt,"openai-gpt"),lnt.forEach(t),coo=r(ELe," \u2014 "),aP=n(ELe,"A",{href:!0});var int=s(aP);foo=r(int,"OpenAIGPTConfig"),int.forEach(t),moo=r(ELe," (OpenAI GPT model)"),ELe.forEach(t),goo=i(L),eg=n(L,"LI",{});var CLe=s(eg);Kne=n(CLe,"STRONG",{});var dnt=s(Kne);hoo=r(dnt,"opt"),dnt.forEach(t),poo=r(CLe," \u2014 "),nP=n(CLe,"A",{href:!0});var cnt=s(nP);_oo=r(cnt,"OPTConfig"),cnt.forEach(t),uoo=r(CLe," (OPT model)"),CLe.forEach(t),boo=i(L),og=n(L,"LI",{});var wLe=s(og);Zne=n(wLe,"STRONG",{});var fnt=s(Zne);voo=r(fnt,"pegasus"),fnt.forEach(t),Foo=r(wLe," \u2014 "),sP=n(wLe,"A",{href:!0});var mnt=s(sP);Too=r(mnt,"PegasusConfig"),mnt.forEach(t),Moo=r(wLe," (Pegasus model)"),wLe.forEach(t),Eoo=i(L),rg=n(L,"LI",{});var ALe=s(rg);ese=n(ALe,"STRONG",{});var gnt=s(ese);Coo=r(gnt,"perceiver"),gnt.forEach(t),woo=r(ALe," \u2014 "),lP=n(ALe,"A",{href:!0});var hnt=s(lP);Aoo=r(hnt,"PerceiverConfig"),hnt.forEach(t),Loo=r(ALe," (Perceiver model)"),ALe.forEach(t),yoo=i(L),tg=n(L,"LI",{});var LLe=s(tg);ose=n(LLe,"STRONG",{});var pnt=s(ose);xoo=r(pnt,"plbart"),pnt.forEach(t),$oo=r(LLe," \u2014 "),iP=n(LLe,"A",{href:!0});var _nt=s(iP);koo=r(_nt,"PLBartConfig"),_nt.forEach(t),Soo=r(LLe," (PLBart model)"),LLe.forEach(t),Roo=i(L),ag=n(L,"LI",{});var yLe=s(ag);rse=n(yLe,"STRONG",{});var unt=s(rse);Poo=r(unt,"poolformer"),unt.forEach(t),Boo=r(yLe," \u2014 "),dP=n(yLe,"A",{href:!0});var bnt=s(dP);Ioo=r(bnt,"PoolFormerConfig"),bnt.forEach(t),Noo=r(yLe," (PoolFormer model)"),yLe.forEach(t),qoo=i(L),ng=n(L,"LI",{});var xLe=s(ng);tse=n(xLe,"STRONG",{});var vnt=s(tse);joo=r(vnt,"prophetnet"),vnt.forEach(t),Doo=r(xLe," \u2014 "),cP=n(xLe,"A",{href:!0});var Fnt=s(cP);Goo=r(Fnt,"ProphetNetConfig"),Fnt.forEach(t),Ooo=r(xLe," (ProphetNet model)"),xLe.forEach(t),Voo=i(L),sg=n(L,"LI",{});var $Le=s(sg);ase=n($Le,"STRONG",{});var Tnt=s(ase);Xoo=r(Tnt,"qdqbert"),Tnt.forEach(t),zoo=r($Le," \u2014 "),fP=n($Le,"A",{href:!0});var Mnt=s(fP);Qoo=r(Mnt,"QDQBertConfig"),Mnt.forEach(t),Woo=r($Le," (QDQBert model)"),$Le.forEach(t),Hoo=i(L),lg=n(L,"LI",{});var kLe=s(lg);nse=n(kLe,"STRONG",{});var Ent=s(nse);Uoo=r(Ent,"rag"),Ent.forEach(t),Joo=r(kLe," \u2014 "),mP=n(kLe,"A",{href:!0});var Cnt=s(mP);Yoo=r(Cnt,"RagConfig"),Cnt.forEach(t),Koo=r(kLe," (RAG model)"),kLe.forEach(t),Zoo=i(L),ig=n(L,"LI",{});var SLe=s(ig);sse=n(SLe,"STRONG",{});var wnt=s(sse);ero=r(wnt,"realm"),wnt.forEach(t),oro=r(SLe," \u2014 "),gP=n(SLe,"A",{href:!0});var Ant=s(gP);rro=r(Ant,"RealmConfig"),Ant.forEach(t),tro=r(SLe," (REALM model)"),SLe.forEach(t),aro=i(L),dg=n(L,"LI",{});var RLe=s(dg);lse=n(RLe,"STRONG",{});var Lnt=s(lse);nro=r(Lnt,"reformer"),Lnt.forEach(t),sro=r(RLe," \u2014 "),hP=n(RLe,"A",{href:!0});var ynt=s(hP);lro=r(ynt,"ReformerConfig"),ynt.forEach(t),iro=r(RLe," (Reformer model)"),RLe.forEach(t),dro=i(L),cg=n(L,"LI",{});var PLe=s(cg);ise=n(PLe,"STRONG",{});var xnt=s(ise);cro=r(xnt,"regnet"),xnt.forEach(t),fro=r(PLe," \u2014 "),pP=n(PLe,"A",{href:!0});var $nt=s(pP);mro=r($nt,"RegNetConfig"),$nt.forEach(t),gro=r(PLe," (RegNet model)"),PLe.forEach(t),hro=i(L),fg=n(L,"LI",{});var BLe=s(fg);dse=n(BLe,"STRONG",{});var knt=s(dse);pro=r(knt,"rembert"),knt.forEach(t),_ro=r(BLe," \u2014 "),_P=n(BLe,"A",{href:!0});var Snt=s(_P);uro=r(Snt,"RemBertConfig"),Snt.forEach(t),bro=r(BLe," (RemBERT model)"),BLe.forEach(t),vro=i(L),mg=n(L,"LI",{});var ILe=s(mg);cse=n(ILe,"STRONG",{});var Rnt=s(cse);Fro=r(Rnt,"resnet"),Rnt.forEach(t),Tro=r(ILe," \u2014 "),uP=n(ILe,"A",{href:!0});var Pnt=s(uP);Mro=r(Pnt,"ResNetConfig"),Pnt.forEach(t),Ero=r(ILe," (ResNet model)"),ILe.forEach(t),Cro=i(L),gg=n(L,"LI",{});var NLe=s(gg);fse=n(NLe,"STRONG",{});var Bnt=s(fse);wro=r(Bnt,"retribert"),Bnt.forEach(t),Aro=r(NLe," \u2014 "),bP=n(NLe,"A",{href:!0});var Int=s(bP);Lro=r(Int,"RetriBertConfig"),Int.forEach(t),yro=r(NLe," (RetriBERT model)"),NLe.forEach(t),xro=i(L),hg=n(L,"LI",{});var qLe=s(hg);mse=n(qLe,"STRONG",{});var Nnt=s(mse);$ro=r(Nnt,"roberta"),Nnt.forEach(t),kro=r(qLe," \u2014 "),vP=n(qLe,"A",{href:!0});var qnt=s(vP);Sro=r(qnt,"RobertaConfig"),qnt.forEach(t),Rro=r(qLe," (RoBERTa model)"),qLe.forEach(t),Pro=i(L),pg=n(L,"LI",{});var jLe=s(pg);gse=n(jLe,"STRONG",{});var jnt=s(gse);Bro=r(jnt,"roformer"),jnt.forEach(t),Iro=r(jLe," \u2014 "),FP=n(jLe,"A",{href:!0});var Dnt=s(FP);Nro=r(Dnt,"RoFormerConfig"),Dnt.forEach(t),qro=r(jLe," (RoFormer model)"),jLe.forEach(t),jro=i(L),_g=n(L,"LI",{});var DLe=s(_g);hse=n(DLe,"STRONG",{});var Gnt=s(hse);Dro=r(Gnt,"segformer"),Gnt.forEach(t),Gro=r(DLe," \u2014 "),TP=n(DLe,"A",{href:!0});var Ont=s(TP);Oro=r(Ont,"SegformerConfig"),Ont.forEach(t),Vro=r(DLe," (SegFormer model)"),DLe.forEach(t),Xro=i(L),ug=n(L,"LI",{});var GLe=s(ug);pse=n(GLe,"STRONG",{});var Vnt=s(pse);zro=r(Vnt,"sew"),Vnt.forEach(t),Qro=r(GLe," \u2014 "),MP=n(GLe,"A",{href:!0});var Xnt=s(MP);Wro=r(Xnt,"SEWConfig"),Xnt.forEach(t),Hro=r(GLe," (SEW model)"),GLe.forEach(t),Uro=i(L),bg=n(L,"LI",{});var OLe=s(bg);_se=n(OLe,"STRONG",{});var znt=s(_se);Jro=r(znt,"sew-d"),znt.forEach(t),Yro=r(OLe," \u2014 "),EP=n(OLe,"A",{href:!0});var Qnt=s(EP);Kro=r(Qnt,"SEWDConfig"),Qnt.forEach(t),Zro=r(OLe," (SEW-D model)"),OLe.forEach(t),eto=i(L),vg=n(L,"LI",{});var VLe=s(vg);use=n(VLe,"STRONG",{});var Wnt=s(use);oto=r(Wnt,"speech-encoder-decoder"),Wnt.forEach(t),rto=r(VLe," \u2014 "),CP=n(VLe,"A",{href:!0});var Hnt=s(CP);tto=r(Hnt,"SpeechEncoderDecoderConfig"),Hnt.forEach(t),ato=r(VLe," (Speech Encoder decoder model)"),VLe.forEach(t),nto=i(L),Fg=n(L,"LI",{});var XLe=s(Fg);bse=n(XLe,"STRONG",{});var Unt=s(bse);sto=r(Unt,"speech_to_text"),Unt.forEach(t),lto=r(XLe," \u2014 "),wP=n(XLe,"A",{href:!0});var Jnt=s(wP);ito=r(Jnt,"Speech2TextConfig"),Jnt.forEach(t),dto=r(XLe," (Speech2Text model)"),XLe.forEach(t),cto=i(L),Tg=n(L,"LI",{});var zLe=s(Tg);vse=n(zLe,"STRONG",{});var Ynt=s(vse);fto=r(Ynt,"speech_to_text_2"),Ynt.forEach(t),mto=r(zLe," \u2014 "),AP=n(zLe,"A",{href:!0});var Knt=s(AP);gto=r(Knt,"Speech2Text2Config"),Knt.forEach(t),hto=r(zLe," (Speech2Text2 model)"),zLe.forEach(t),pto=i(L),Mg=n(L,"LI",{});var QLe=s(Mg);Fse=n(QLe,"STRONG",{});var Znt=s(Fse);_to=r(Znt,"splinter"),Znt.forEach(t),uto=r(QLe," \u2014 "),LP=n(QLe,"A",{href:!0});var est=s(LP);bto=r(est,"SplinterConfig"),est.forEach(t),vto=r(QLe," (Splinter model)"),QLe.forEach(t),Fto=i(L),Eg=n(L,"LI",{});var WLe=s(Eg);Tse=n(WLe,"STRONG",{});var ost=s(Tse);Tto=r(ost,"squeezebert"),ost.forEach(t),Mto=r(WLe," \u2014 "),yP=n(WLe,"A",{href:!0});var rst=s(yP);Eto=r(rst,"SqueezeBertConfig"),rst.forEach(t),Cto=r(WLe," (SqueezeBERT model)"),WLe.forEach(t),wto=i(L),Cg=n(L,"LI",{});var HLe=s(Cg);Mse=n(HLe,"STRONG",{});var tst=s(Mse);Ato=r(tst,"swin"),tst.forEach(t),Lto=r(HLe," \u2014 "),xP=n(HLe,"A",{href:!0});var ast=s(xP);yto=r(ast,"SwinConfig"),ast.forEach(t),xto=r(HLe," (Swin Transformer model)"),HLe.forEach(t),$to=i(L),wg=n(L,"LI",{});var ULe=s(wg);Ese=n(ULe,"STRONG",{});var nst=s(Ese);kto=r(nst,"swinv2"),nst.forEach(t),Sto=r(ULe," \u2014 "),$P=n(ULe,"A",{href:!0});var sst=s($P);Rto=r(sst,"Swinv2Config"),sst.forEach(t),Pto=r(ULe," (Swin Transformer V2 model)"),ULe.forEach(t),Bto=i(L),Ag=n(L,"LI",{});var JLe=s(Ag);Cse=n(JLe,"STRONG",{});var lst=s(Cse);Ito=r(lst,"t5"),lst.forEach(t),Nto=r(JLe," \u2014 "),kP=n(JLe,"A",{href:!0});var ist=s(kP);qto=r(ist,"T5Config"),ist.forEach(t),jto=r(JLe," (T5 model)"),JLe.forEach(t),Dto=i(L),Lg=n(L,"LI",{});var YLe=s(Lg);wse=n(YLe,"STRONG",{});var dst=s(wse);Gto=r(dst,"tapas"),dst.forEach(t),Oto=r(YLe," \u2014 "),SP=n(YLe,"A",{href:!0});var cst=s(SP);Vto=r(cst,"TapasConfig"),cst.forEach(t),Xto=r(YLe," (TAPAS model)"),YLe.forEach(t),zto=i(L),yg=n(L,"LI",{});var KLe=s(yg);Ase=n(KLe,"STRONG",{});var fst=s(Ase);Qto=r(fst,"trajectory_transformer"),fst.forEach(t),Wto=r(KLe," \u2014 "),RP=n(KLe,"A",{href:!0});var mst=s(RP);Hto=r(mst,"TrajectoryTransformerConfig"),mst.forEach(t),Uto=r(KLe," (Trajectory Transformer model)"),KLe.forEach(t),Jto=i(L),xg=n(L,"LI",{});var ZLe=s(xg);Lse=n(ZLe,"STRONG",{});var gst=s(Lse);Yto=r(gst,"transfo-xl"),gst.forEach(t),Kto=r(ZLe," \u2014 "),PP=n(ZLe,"A",{href:!0});var hst=s(PP);Zto=r(hst,"TransfoXLConfig"),hst.forEach(t),eao=r(ZLe," (Transformer-XL model)"),ZLe.forEach(t),oao=i(L),$g=n(L,"LI",{});var eye=s($g);yse=n(eye,"STRONG",{});var pst=s(yse);rao=r(pst,"trocr"),pst.forEach(t),tao=r(eye," \u2014 "),BP=n(eye,"A",{href:!0});var _st=s(BP);aao=r(_st,"TrOCRConfig"),_st.forEach(t),nao=r(eye," (TrOCR model)"),eye.forEach(t),sao=i(L),kg=n(L,"LI",{});var oye=s(kg);xse=n(oye,"STRONG",{});var ust=s(xse);lao=r(ust,"unispeech"),ust.forEach(t),iao=r(oye," \u2014 "),IP=n(oye,"A",{href:!0});var bst=s(IP);dao=r(bst,"UniSpeechConfig"),bst.forEach(t),cao=r(oye," (UniSpeech model)"),oye.forEach(t),fao=i(L),Sg=n(L,"LI",{});var rye=s(Sg);$se=n(rye,"STRONG",{});var vst=s($se);mao=r(vst,"unispeech-sat"),vst.forEach(t),gao=r(rye," \u2014 "),NP=n(rye,"A",{href:!0});var Fst=s(NP);hao=r(Fst,"UniSpeechSatConfig"),Fst.forEach(t),pao=r(rye," (UniSpeechSat model)"),rye.forEach(t),_ao=i(L),Rg=n(L,"LI",{});var tye=s(Rg);kse=n(tye,"STRONG",{});var Tst=s(kse);uao=r(Tst,"van"),Tst.forEach(t),bao=r(tye," \u2014 "),qP=n(tye,"A",{href:!0});var Mst=s(qP);vao=r(Mst,"VanConfig"),Mst.forEach(t),Fao=r(tye," (VAN model)"),tye.forEach(t),Tao=i(L),Pg=n(L,"LI",{});var aye=s(Pg);Sse=n(aye,"STRONG",{});var Est=s(Sse);Mao=r(Est,"vilt"),Est.forEach(t),Eao=r(aye," \u2014 "),jP=n(aye,"A",{href:!0});var Cst=s(jP);Cao=r(Cst,"ViltConfig"),Cst.forEach(t),wao=r(aye," (ViLT model)"),aye.forEach(t),Aao=i(L),Bg=n(L,"LI",{});var nye=s(Bg);Rse=n(nye,"STRONG",{});var wst=s(Rse);Lao=r(wst,"vision-encoder-decoder"),wst.forEach(t),yao=r(nye," \u2014 "),DP=n(nye,"A",{href:!0});var Ast=s(DP);xao=r(Ast,"VisionEncoderDecoderConfig"),Ast.forEach(t),$ao=r(nye," (Vision Encoder decoder model)"),nye.forEach(t),kao=i(L),Ig=n(L,"LI",{});var sye=s(Ig);Pse=n(sye,"STRONG",{});var Lst=s(Pse);Sao=r(Lst,"vision-text-dual-encoder"),Lst.forEach(t),Rao=r(sye," \u2014 "),GP=n(sye,"A",{href:!0});var yst=s(GP);Pao=r(yst,"VisionTextDualEncoderConfig"),yst.forEach(t),Bao=r(sye," (VisionTextDualEncoder model)"),sye.forEach(t),Iao=i(L),Ng=n(L,"LI",{});var lye=s(Ng);Bse=n(lye,"STRONG",{});var xst=s(Bse);Nao=r(xst,"visual_bert"),xst.forEach(t),qao=r(lye," \u2014 "),OP=n(lye,"A",{href:!0});var $st=s(OP);jao=r($st,"VisualBertConfig"),$st.forEach(t),Dao=r(lye," (VisualBERT model)"),lye.forEach(t),Gao=i(L),qg=n(L,"LI",{});var iye=s(qg);Ise=n(iye,"STRONG",{});var kst=s(Ise);Oao=r(kst,"vit"),kst.forEach(t),Vao=r(iye," \u2014 "),VP=n(iye,"A",{href:!0});var Sst=s(VP);Xao=r(Sst,"ViTConfig"),Sst.forEach(t),zao=r(iye," (ViT model)"),iye.forEach(t),Qao=i(L),jg=n(L,"LI",{});var dye=s(jg);Nse=n(dye,"STRONG",{});var Rst=s(Nse);Wao=r(Rst,"vit_mae"),Rst.forEach(t),Hao=r(dye," \u2014 "),XP=n(dye,"A",{href:!0});var Pst=s(XP);Uao=r(Pst,"ViTMAEConfig"),Pst.forEach(t),Jao=r(dye," (ViTMAE model)"),dye.forEach(t),Yao=i(L),Dg=n(L,"LI",{});var cye=s(Dg);qse=n(cye,"STRONG",{});var Bst=s(qse);Kao=r(Bst,"wav2vec2"),Bst.forEach(t),Zao=r(cye," \u2014 "),zP=n(cye,"A",{href:!0});var Ist=s(zP);eno=r(Ist,"Wav2Vec2Config"),Ist.forEach(t),ono=r(cye," (Wav2Vec2 model)"),cye.forEach(t),rno=i(L),Gg=n(L,"LI",{});var fye=s(Gg);jse=n(fye,"STRONG",{});var Nst=s(jse);tno=r(Nst,"wav2vec2-conformer"),Nst.forEach(t),ano=r(fye," \u2014 "),QP=n(fye,"A",{href:!0});var qst=s(QP);nno=r(qst,"Wav2Vec2ConformerConfig"),qst.forEach(t),sno=r(fye," (Wav2Vec2-Conformer model)"),fye.forEach(t),lno=i(L),Og=n(L,"LI",{});var mye=s(Og);Dse=n(mye,"STRONG",{});var jst=s(Dse);ino=r(jst,"wavlm"),jst.forEach(t),dno=r(mye," \u2014 "),WP=n(mye,"A",{href:!0});var Dst=s(WP);cno=r(Dst,"WavLMConfig"),Dst.forEach(t),fno=r(mye," (WavLM model)"),mye.forEach(t),mno=i(L),Vg=n(L,"LI",{});var gye=s(Vg);Gse=n(gye,"STRONG",{});var Gst=s(Gse);gno=r(Gst,"xglm"),Gst.forEach(t),hno=r(gye," \u2014 "),HP=n(gye,"A",{href:!0});var Ost=s(HP);pno=r(Ost,"XGLMConfig"),Ost.forEach(t),_no=r(gye," (XGLM model)"),gye.forEach(t),uno=i(L),Xg=n(L,"LI",{});var hye=s(Xg);Ose=n(hye,"STRONG",{});var Vst=s(Ose);bno=r(Vst,"xlm"),Vst.forEach(t),vno=r(hye," \u2014 "),UP=n(hye,"A",{href:!0});var Xst=s(UP);Fno=r(Xst,"XLMConfig"),Xst.forEach(t),Tno=r(hye," (XLM model)"),hye.forEach(t),Mno=i(L),zg=n(L,"LI",{});var pye=s(zg);Vse=n(pye,"STRONG",{});var zst=s(Vse);Eno=r(zst,"xlm-prophetnet"),zst.forEach(t),Cno=r(pye," \u2014 "),JP=n(pye,"A",{href:!0});var Qst=s(JP);wno=r(Qst,"XLMProphetNetConfig"),Qst.forEach(t),Ano=r(pye," (XLM-ProphetNet model)"),pye.forEach(t),Lno=i(L),Qg=n(L,"LI",{});var _ye=s(Qg);Xse=n(_ye,"STRONG",{});var Wst=s(Xse);yno=r(Wst,"xlm-roberta"),Wst.forEach(t),xno=r(_ye," \u2014 "),YP=n(_ye,"A",{href:!0});var Hst=s(YP);$no=r(Hst,"XLMRobertaConfig"),Hst.forEach(t),kno=r(_ye," (XLM-RoBERTa model)"),_ye.forEach(t),Sno=i(L),Wg=n(L,"LI",{});var uye=s(Wg);zse=n(uye,"STRONG",{});var Ust=s(zse);Rno=r(Ust,"xlm-roberta-xl"),Ust.forEach(t),Pno=r(uye," \u2014 "),KP=n(uye,"A",{href:!0});var Jst=s(KP);Bno=r(Jst,"XLMRobertaXLConfig"),Jst.forEach(t),Ino=r(uye," (XLM-RoBERTa-XL model)"),uye.forEach(t),Nno=i(L),Hg=n(L,"LI",{});var bye=s(Hg);Qse=n(bye,"STRONG",{});var Yst=s(Qse);qno=r(Yst,"xlnet"),Yst.forEach(t),jno=r(bye," \u2014 "),ZP=n(bye,"A",{href:!0});var Kst=s(ZP);Dno=r(Kst,"XLNetConfig"),Kst.forEach(t),Gno=r(bye," (XLNet model)"),bye.forEach(t),Ono=i(L),Ug=n(L,"LI",{});var vye=s(Ug);Wse=n(vye,"STRONG",{});var Zst=s(Wse);Vno=r(Zst,"yolos"),Zst.forEach(t),Xno=r(vye," \u2014 "),eB=n(vye,"A",{href:!0});var elt=s(eB);zno=r(elt,"YolosConfig"),elt.forEach(t),Qno=r(vye," (YOLOS model)"),vye.forEach(t),Wno=i(L),Jg=n(L,"LI",{});var Fye=s(Jg);Hse=n(Fye,"STRONG",{});var olt=s(Hse);Hno=r(olt,"yoso"),olt.forEach(t),Uno=r(Fye," \u2014 "),oB=n(Fye,"A",{href:!0});var rlt=s(oB);Jno=r(rlt,"YosoConfig"),rlt.forEach(t),Yno=r(Fye," (YOSO model)"),Fye.forEach(t),L.forEach(t),Kno=i(nt),T(Yg.$$.fragment,nt),nt.forEach(t),Zno=i(at),Kg=n(at,"DIV",{class:!0});var hQe=s(Kg);T(pL.$$.fragment,hQe),eso=i(hQe),Use=n(hQe,"P",{});var tlt=s(Use);oso=r(tlt,"Register a new configuration for this class."),tlt.forEach(t),hQe.forEach(t),at.forEach(t),pXe=i(f),Ni=n(f,"H2",{class:!0});var pQe=s(Ni);Zg=n(pQe,"A",{id:!0,class:!0,href:!0});var alt=s(Zg);Jse=n(alt,"SPAN",{});var nlt=s(Jse);T(_L.$$.fragment,nlt),nlt.forEach(t),alt.forEach(t),rso=i(pQe),Yse=n(pQe,"SPAN",{});var slt=s(Yse);tso=r(slt,"AutoTokenizer"),slt.forEach(t),pQe.forEach(t),_Xe=i(f),Ao=n(f,"DIV",{class:!0});var Ks=s(Ao);T(uL.$$.fragment,Ks),aso=i(Ks),bL=n(Ks,"P",{});var _Qe=s(bL);nso=r(_Qe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=n(_Qe,"A",{href:!0});var llt=s(rB);sso=r(llt,"AutoTokenizer.from_pretrained()"),llt.forEach(t),lso=r(_Qe," class method."),_Qe.forEach(t),iso=i(Ks),vL=n(Ks,"P",{});var uQe=s(vL);dso=r(uQe,"This class cannot be instantiated directly using "),Kse=n(uQe,"CODE",{});var ilt=s(Kse);cso=r(ilt,"__init__()"),ilt.forEach(t),fso=r(uQe," (throws an error)."),uQe.forEach(t),mso=i(Ks),yr=n(Ks,"DIV",{class:!0});var Zs=s(yr);T(FL.$$.fragment,Zs),gso=i(Zs),Zse=n(Zs,"P",{});var dlt=s(Zse);hso=r(dlt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dlt.forEach(t),pso=i(Zs),Pa=n(Zs,"P",{});var dw=s(Pa);_so=r(dw,"The tokenizer class to instantiate is selected based on the "),ele=n(dw,"CODE",{});var clt=s(ele);uso=r(clt,"model_type"),clt.forEach(t),bso=r(dw,` property of the config object (either
passed as an argument or loaded from `),ole=n(dw,"CODE",{});var flt=s(ole);vso=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),Fso=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rle=n(dw,"CODE",{});var mlt=s(rle);Tso=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),Mso=r(dw,":"),dw.forEach(t),Eso=i(Zs),k=n(Zs,"UL",{});var S=s(k);Dn=n(S,"LI",{});var Ak=s(Dn);tle=n(Ak,"STRONG",{});var glt=s(tle);Cso=r(glt,"albert"),glt.forEach(t),wso=r(Ak," \u2014 "),tB=n(Ak,"A",{href:!0});var hlt=s(tB);Aso=r(hlt,"AlbertTokenizer"),hlt.forEach(t),Lso=r(Ak," or "),aB=n(Ak,"A",{href:!0});var plt=s(aB);yso=r(plt,"AlbertTokenizerFast"),plt.forEach(t),xso=r(Ak," (ALBERT model)"),Ak.forEach(t),$so=i(S),Gn=n(S,"LI",{});var Lk=s(Gn);ale=n(Lk,"STRONG",{});var _lt=s(ale);kso=r(_lt,"bart"),_lt.forEach(t),Sso=r(Lk," \u2014 "),nB=n(Lk,"A",{href:!0});var ult=s(nB);Rso=r(ult,"BartTokenizer"),ult.forEach(t),Pso=r(Lk," or "),sB=n(Lk,"A",{href:!0});var blt=s(sB);Bso=r(blt,"BartTokenizerFast"),blt.forEach(t),Iso=r(Lk," (BART model)"),Lk.forEach(t),Nso=i(S),On=n(S,"LI",{});var yk=s(On);nle=n(yk,"STRONG",{});var vlt=s(nle);qso=r(vlt,"barthez"),vlt.forEach(t),jso=r(yk," \u2014 "),lB=n(yk,"A",{href:!0});var Flt=s(lB);Dso=r(Flt,"BarthezTokenizer"),Flt.forEach(t),Gso=r(yk," or "),iB=n(yk,"A",{href:!0});var Tlt=s(iB);Oso=r(Tlt,"BarthezTokenizerFast"),Tlt.forEach(t),Vso=r(yk," (BARThez model)"),yk.forEach(t),Xso=i(S),eh=n(S,"LI",{});var Tye=s(eh);sle=n(Tye,"STRONG",{});var Mlt=s(sle);zso=r(Mlt,"bartpho"),Mlt.forEach(t),Qso=r(Tye," \u2014 "),dB=n(Tye,"A",{href:!0});var Elt=s(dB);Wso=r(Elt,"BartphoTokenizer"),Elt.forEach(t),Hso=r(Tye," (BARTpho model)"),Tye.forEach(t),Uso=i(S),Vn=n(S,"LI",{});var xk=s(Vn);lle=n(xk,"STRONG",{});var Clt=s(lle);Jso=r(Clt,"bert"),Clt.forEach(t),Yso=r(xk," \u2014 "),cB=n(xk,"A",{href:!0});var wlt=s(cB);Kso=r(wlt,"BertTokenizer"),wlt.forEach(t),Zso=r(xk," or "),fB=n(xk,"A",{href:!0});var Alt=s(fB);elo=r(Alt,"BertTokenizerFast"),Alt.forEach(t),olo=r(xk," (BERT model)"),xk.forEach(t),rlo=i(S),oh=n(S,"LI",{});var Mye=s(oh);ile=n(Mye,"STRONG",{});var Llt=s(ile);tlo=r(Llt,"bert-generation"),Llt.forEach(t),alo=r(Mye," \u2014 "),mB=n(Mye,"A",{href:!0});var ylt=s(mB);nlo=r(ylt,"BertGenerationTokenizer"),ylt.forEach(t),slo=r(Mye," (Bert Generation model)"),Mye.forEach(t),llo=i(S),rh=n(S,"LI",{});var Eye=s(rh);dle=n(Eye,"STRONG",{});var xlt=s(dle);ilo=r(xlt,"bert-japanese"),xlt.forEach(t),dlo=r(Eye," \u2014 "),gB=n(Eye,"A",{href:!0});var $lt=s(gB);clo=r($lt,"BertJapaneseTokenizer"),$lt.forEach(t),flo=r(Eye," (BertJapanese model)"),Eye.forEach(t),mlo=i(S),th=n(S,"LI",{});var Cye=s(th);cle=n(Cye,"STRONG",{});var klt=s(cle);glo=r(klt,"bertweet"),klt.forEach(t),hlo=r(Cye," \u2014 "),hB=n(Cye,"A",{href:!0});var Slt=s(hB);plo=r(Slt,"BertweetTokenizer"),Slt.forEach(t),_lo=r(Cye," (BERTweet model)"),Cye.forEach(t),ulo=i(S),Xn=n(S,"LI",{});var $k=s(Xn);fle=n($k,"STRONG",{});var Rlt=s(fle);blo=r(Rlt,"big_bird"),Rlt.forEach(t),vlo=r($k," \u2014 "),pB=n($k,"A",{href:!0});var Plt=s(pB);Flo=r(Plt,"BigBirdTokenizer"),Plt.forEach(t),Tlo=r($k," or "),_B=n($k,"A",{href:!0});var Blt=s(_B);Mlo=r(Blt,"BigBirdTokenizerFast"),Blt.forEach(t),Elo=r($k," (BigBird model)"),$k.forEach(t),Clo=i(S),zn=n(S,"LI",{});var kk=s(zn);mle=n(kk,"STRONG",{});var Ilt=s(mle);wlo=r(Ilt,"bigbird_pegasus"),Ilt.forEach(t),Alo=r(kk," \u2014 "),uB=n(kk,"A",{href:!0});var Nlt=s(uB);Llo=r(Nlt,"PegasusTokenizer"),Nlt.forEach(t),ylo=r(kk," or "),bB=n(kk,"A",{href:!0});var qlt=s(bB);xlo=r(qlt,"PegasusTokenizerFast"),qlt.forEach(t),$lo=r(kk," (BigBird-Pegasus model)"),kk.forEach(t),klo=i(S),Qn=n(S,"LI",{});var Sk=s(Qn);gle=n(Sk,"STRONG",{});var jlt=s(gle);Slo=r(jlt,"blenderbot"),jlt.forEach(t),Rlo=r(Sk," \u2014 "),vB=n(Sk,"A",{href:!0});var Dlt=s(vB);Plo=r(Dlt,"BlenderbotTokenizer"),Dlt.forEach(t),Blo=r(Sk," or "),FB=n(Sk,"A",{href:!0});var Glt=s(FB);Ilo=r(Glt,"BlenderbotTokenizerFast"),Glt.forEach(t),Nlo=r(Sk," (Blenderbot model)"),Sk.forEach(t),qlo=i(S),ah=n(S,"LI",{});var wye=s(ah);hle=n(wye,"STRONG",{});var Olt=s(hle);jlo=r(Olt,"blenderbot-small"),Olt.forEach(t),Dlo=r(wye," \u2014 "),TB=n(wye,"A",{href:!0});var Vlt=s(TB);Glo=r(Vlt,"BlenderbotSmallTokenizer"),Vlt.forEach(t),Olo=r(wye," (BlenderbotSmall model)"),wye.forEach(t),Vlo=i(S),nh=n(S,"LI",{});var Aye=s(nh);ple=n(Aye,"STRONG",{});var Xlt=s(ple);Xlo=r(Xlt,"bloom"),Xlt.forEach(t),zlo=r(Aye," \u2014 "),MB=n(Aye,"A",{href:!0});var zlt=s(MB);Qlo=r(zlt,"BloomTokenizerFast"),zlt.forEach(t),Wlo=r(Aye," (BLOOM model)"),Aye.forEach(t),Hlo=i(S),sh=n(S,"LI",{});var Lye=s(sh);_le=n(Lye,"STRONG",{});var Qlt=s(_le);Ulo=r(Qlt,"byt5"),Qlt.forEach(t),Jlo=r(Lye," \u2014 "),EB=n(Lye,"A",{href:!0});var Wlt=s(EB);Ylo=r(Wlt,"ByT5Tokenizer"),Wlt.forEach(t),Klo=r(Lye," (ByT5 model)"),Lye.forEach(t),Zlo=i(S),Wn=n(S,"LI",{});var Rk=s(Wn);ule=n(Rk,"STRONG",{});var Hlt=s(ule);eio=r(Hlt,"camembert"),Hlt.forEach(t),oio=r(Rk," \u2014 "),CB=n(Rk,"A",{href:!0});var Ult=s(CB);rio=r(Ult,"CamembertTokenizer"),Ult.forEach(t),tio=r(Rk," or "),wB=n(Rk,"A",{href:!0});var Jlt=s(wB);aio=r(Jlt,"CamembertTokenizerFast"),Jlt.forEach(t),nio=r(Rk," (CamemBERT model)"),Rk.forEach(t),sio=i(S),lh=n(S,"LI",{});var yye=s(lh);ble=n(yye,"STRONG",{});var Ylt=s(ble);lio=r(Ylt,"canine"),Ylt.forEach(t),iio=r(yye," \u2014 "),AB=n(yye,"A",{href:!0});var Klt=s(AB);dio=r(Klt,"CanineTokenizer"),Klt.forEach(t),cio=r(yye," (CANINE model)"),yye.forEach(t),fio=i(S),Hn=n(S,"LI",{});var Pk=s(Hn);vle=n(Pk,"STRONG",{});var Zlt=s(vle);mio=r(Zlt,"clip"),Zlt.forEach(t),gio=r(Pk," \u2014 "),LB=n(Pk,"A",{href:!0});var eit=s(LB);hio=r(eit,"CLIPTokenizer"),eit.forEach(t),pio=r(Pk," or "),yB=n(Pk,"A",{href:!0});var oit=s(yB);_io=r(oit,"CLIPTokenizerFast"),oit.forEach(t),uio=r(Pk," (CLIP model)"),Pk.forEach(t),bio=i(S),Un=n(S,"LI",{});var Bk=s(Un);Fle=n(Bk,"STRONG",{});var rit=s(Fle);vio=r(rit,"codegen"),rit.forEach(t),Fio=r(Bk," \u2014 "),xB=n(Bk,"A",{href:!0});var tit=s(xB);Tio=r(tit,"CodeGenTokenizer"),tit.forEach(t),Mio=r(Bk," or "),$B=n(Bk,"A",{href:!0});var ait=s($B);Eio=r(ait,"CodeGenTokenizerFast"),ait.forEach(t),Cio=r(Bk," (CodeGen model)"),Bk.forEach(t),wio=i(S),Jn=n(S,"LI",{});var Ik=s(Jn);Tle=n(Ik,"STRONG",{});var nit=s(Tle);Aio=r(nit,"convbert"),nit.forEach(t),Lio=r(Ik," \u2014 "),kB=n(Ik,"A",{href:!0});var sit=s(kB);yio=r(sit,"ConvBertTokenizer"),sit.forEach(t),xio=r(Ik," or "),SB=n(Ik,"A",{href:!0});var lit=s(SB);$io=r(lit,"ConvBertTokenizerFast"),lit.forEach(t),kio=r(Ik," (ConvBERT model)"),Ik.forEach(t),Sio=i(S),Yn=n(S,"LI",{});var Nk=s(Yn);Mle=n(Nk,"STRONG",{});var iit=s(Mle);Rio=r(iit,"cpm"),iit.forEach(t),Pio=r(Nk," \u2014 "),RB=n(Nk,"A",{href:!0});var dit=s(RB);Bio=r(dit,"CpmTokenizer"),dit.forEach(t),Iio=r(Nk," or "),PB=n(Nk,"A",{href:!0});var cit=s(PB);Nio=r(cit,"CpmTokenizerFast"),cit.forEach(t),qio=r(Nk," (CPM model)"),Nk.forEach(t),jio=i(S),ih=n(S,"LI",{});var xye=s(ih);Ele=n(xye,"STRONG",{});var fit=s(Ele);Dio=r(fit,"ctrl"),fit.forEach(t),Gio=r(xye," \u2014 "),BB=n(xye,"A",{href:!0});var mit=s(BB);Oio=r(mit,"CTRLTokenizer"),mit.forEach(t),Vio=r(xye," (CTRL model)"),xye.forEach(t),Xio=i(S),Kn=n(S,"LI",{});var qk=s(Kn);Cle=n(qk,"STRONG",{});var git=s(Cle);zio=r(git,"data2vec-text"),git.forEach(t),Qio=r(qk," \u2014 "),IB=n(qk,"A",{href:!0});var hit=s(IB);Wio=r(hit,"RobertaTokenizer"),hit.forEach(t),Hio=r(qk," or "),NB=n(qk,"A",{href:!0});var pit=s(NB);Uio=r(pit,"RobertaTokenizerFast"),pit.forEach(t),Jio=r(qk," (Data2VecText model)"),qk.forEach(t),Yio=i(S),Zn=n(S,"LI",{});var jk=s(Zn);wle=n(jk,"STRONG",{});var _it=s(wle);Kio=r(_it,"deberta"),_it.forEach(t),Zio=r(jk," \u2014 "),qB=n(jk,"A",{href:!0});var uit=s(qB);edo=r(uit,"DebertaTokenizer"),uit.forEach(t),odo=r(jk," or "),jB=n(jk,"A",{href:!0});var bit=s(jB);rdo=r(bit,"DebertaTokenizerFast"),bit.forEach(t),tdo=r(jk," (DeBERTa model)"),jk.forEach(t),ado=i(S),es=n(S,"LI",{});var Dk=s(es);Ale=n(Dk,"STRONG",{});var vit=s(Ale);ndo=r(vit,"deberta-v2"),vit.forEach(t),sdo=r(Dk," \u2014 "),DB=n(Dk,"A",{href:!0});var Fit=s(DB);ldo=r(Fit,"DebertaV2Tokenizer"),Fit.forEach(t),ido=r(Dk," or "),GB=n(Dk,"A",{href:!0});var Tit=s(GB);ddo=r(Tit,"DebertaV2TokenizerFast"),Tit.forEach(t),cdo=r(Dk," (DeBERTa-v2 model)"),Dk.forEach(t),fdo=i(S),os=n(S,"LI",{});var Gk=s(os);Lle=n(Gk,"STRONG",{});var Mit=s(Lle);mdo=r(Mit,"distilbert"),Mit.forEach(t),gdo=r(Gk," \u2014 "),OB=n(Gk,"A",{href:!0});var Eit=s(OB);hdo=r(Eit,"DistilBertTokenizer"),Eit.forEach(t),pdo=r(Gk," or "),VB=n(Gk,"A",{href:!0});var Cit=s(VB);_do=r(Cit,"DistilBertTokenizerFast"),Cit.forEach(t),udo=r(Gk," (DistilBERT model)"),Gk.forEach(t),bdo=i(S),rs=n(S,"LI",{});var Ok=s(rs);yle=n(Ok,"STRONG",{});var wit=s(yle);vdo=r(wit,"dpr"),wit.forEach(t),Fdo=r(Ok," \u2014 "),XB=n(Ok,"A",{href:!0});var Ait=s(XB);Tdo=r(Ait,"DPRQuestionEncoderTokenizer"),Ait.forEach(t),Mdo=r(Ok," or "),zB=n(Ok,"A",{href:!0});var Lit=s(zB);Edo=r(Lit,"DPRQuestionEncoderTokenizerFast"),Lit.forEach(t),Cdo=r(Ok," (DPR model)"),Ok.forEach(t),wdo=i(S),ts=n(S,"LI",{});var Vk=s(ts);xle=n(Vk,"STRONG",{});var yit=s(xle);Ado=r(yit,"electra"),yit.forEach(t),Ldo=r(Vk," \u2014 "),QB=n(Vk,"A",{href:!0});var xit=s(QB);ydo=r(xit,"ElectraTokenizer"),xit.forEach(t),xdo=r(Vk," or "),WB=n(Vk,"A",{href:!0});var $it=s(WB);$do=r($it,"ElectraTokenizerFast"),$it.forEach(t),kdo=r(Vk," (ELECTRA model)"),Vk.forEach(t),Sdo=i(S),dh=n(S,"LI",{});var $ye=s(dh);$le=n($ye,"STRONG",{});var kit=s($le);Rdo=r(kit,"flaubert"),kit.forEach(t),Pdo=r($ye," \u2014 "),HB=n($ye,"A",{href:!0});var Sit=s(HB);Bdo=r(Sit,"FlaubertTokenizer"),Sit.forEach(t),Ido=r($ye," (FlauBERT model)"),$ye.forEach(t),Ndo=i(S),as=n(S,"LI",{});var Xk=s(as);kle=n(Xk,"STRONG",{});var Rit=s(kle);qdo=r(Rit,"fnet"),Rit.forEach(t),jdo=r(Xk," \u2014 "),UB=n(Xk,"A",{href:!0});var Pit=s(UB);Ddo=r(Pit,"FNetTokenizer"),Pit.forEach(t),Gdo=r(Xk," or "),JB=n(Xk,"A",{href:!0});var Bit=s(JB);Odo=r(Bit,"FNetTokenizerFast"),Bit.forEach(t),Vdo=r(Xk," (FNet model)"),Xk.forEach(t),Xdo=i(S),ch=n(S,"LI",{});var kye=s(ch);Sle=n(kye,"STRONG",{});var Iit=s(Sle);zdo=r(Iit,"fsmt"),Iit.forEach(t),Qdo=r(kye," \u2014 "),YB=n(kye,"A",{href:!0});var Nit=s(YB);Wdo=r(Nit,"FSMTTokenizer"),Nit.forEach(t),Hdo=r(kye," (FairSeq Machine-Translation model)"),kye.forEach(t),Udo=i(S),ns=n(S,"LI",{});var zk=s(ns);Rle=n(zk,"STRONG",{});var qit=s(Rle);Jdo=r(qit,"funnel"),qit.forEach(t),Ydo=r(zk," \u2014 "),KB=n(zk,"A",{href:!0});var jit=s(KB);Kdo=r(jit,"FunnelTokenizer"),jit.forEach(t),Zdo=r(zk," or "),ZB=n(zk,"A",{href:!0});var Dit=s(ZB);eco=r(Dit,"FunnelTokenizerFast"),Dit.forEach(t),oco=r(zk," (Funnel Transformer model)"),zk.forEach(t),rco=i(S),ss=n(S,"LI",{});var Qk=s(ss);Ple=n(Qk,"STRONG",{});var Git=s(Ple);tco=r(Git,"gpt2"),Git.forEach(t),aco=r(Qk," \u2014 "),eI=n(Qk,"A",{href:!0});var Oit=s(eI);nco=r(Oit,"GPT2Tokenizer"),Oit.forEach(t),sco=r(Qk," or "),oI=n(Qk,"A",{href:!0});var Vit=s(oI);lco=r(Vit,"GPT2TokenizerFast"),Vit.forEach(t),ico=r(Qk," (OpenAI GPT-2 model)"),Qk.forEach(t),dco=i(S),ls=n(S,"LI",{});var Wk=s(ls);Ble=n(Wk,"STRONG",{});var Xit=s(Ble);cco=r(Xit,"gpt_neo"),Xit.forEach(t),fco=r(Wk," \u2014 "),rI=n(Wk,"A",{href:!0});var zit=s(rI);mco=r(zit,"GPT2Tokenizer"),zit.forEach(t),gco=r(Wk," or "),tI=n(Wk,"A",{href:!0});var Qit=s(tI);hco=r(Qit,"GPT2TokenizerFast"),Qit.forEach(t),pco=r(Wk," (GPT Neo model)"),Wk.forEach(t),_co=i(S),fh=n(S,"LI",{});var Sye=s(fh);Ile=n(Sye,"STRONG",{});var Wit=s(Ile);uco=r(Wit,"gpt_neox"),Wit.forEach(t),bco=r(Sye," \u2014 "),aI=n(Sye,"A",{href:!0});var Hit=s(aI);vco=r(Hit,"GPTNeoXTokenizerFast"),Hit.forEach(t),Fco=r(Sye," (GPT NeoX model)"),Sye.forEach(t),Tco=i(S),is=n(S,"LI",{});var Hk=s(is);Nle=n(Hk,"STRONG",{});var Uit=s(Nle);Mco=r(Uit,"gptj"),Uit.forEach(t),Eco=r(Hk," \u2014 "),nI=n(Hk,"A",{href:!0});var Jit=s(nI);Cco=r(Jit,"GPT2Tokenizer"),Jit.forEach(t),wco=r(Hk," or "),sI=n(Hk,"A",{href:!0});var Yit=s(sI);Aco=r(Yit,"GPT2TokenizerFast"),Yit.forEach(t),Lco=r(Hk," (GPT-J model)"),Hk.forEach(t),yco=i(S),ds=n(S,"LI",{});var Uk=s(ds);qle=n(Uk,"STRONG",{});var Kit=s(qle);xco=r(Kit,"groupvit"),Kit.forEach(t),$co=r(Uk," \u2014 "),lI=n(Uk,"A",{href:!0});var Zit=s(lI);kco=r(Zit,"CLIPTokenizer"),Zit.forEach(t),Sco=r(Uk," or "),iI=n(Uk,"A",{href:!0});var edt=s(iI);Rco=r(edt,"CLIPTokenizerFast"),edt.forEach(t),Pco=r(Uk," (GroupViT model)"),Uk.forEach(t),Bco=i(S),cs=n(S,"LI",{});var Jk=s(cs);jle=n(Jk,"STRONG",{});var odt=s(jle);Ico=r(odt,"herbert"),odt.forEach(t),Nco=r(Jk," \u2014 "),dI=n(Jk,"A",{href:!0});var rdt=s(dI);qco=r(rdt,"HerbertTokenizer"),rdt.forEach(t),jco=r(Jk," or "),cI=n(Jk,"A",{href:!0});var tdt=s(cI);Dco=r(tdt,"HerbertTokenizerFast"),tdt.forEach(t),Gco=r(Jk," (HerBERT model)"),Jk.forEach(t),Oco=i(S),mh=n(S,"LI",{});var Rye=s(mh);Dle=n(Rye,"STRONG",{});var adt=s(Dle);Vco=r(adt,"hubert"),adt.forEach(t),Xco=r(Rye," \u2014 "),fI=n(Rye,"A",{href:!0});var ndt=s(fI);zco=r(ndt,"Wav2Vec2CTCTokenizer"),ndt.forEach(t),Qco=r(Rye," (Hubert model)"),Rye.forEach(t),Wco=i(S),fs=n(S,"LI",{});var Yk=s(fs);Gle=n(Yk,"STRONG",{});var sdt=s(Gle);Hco=r(sdt,"ibert"),sdt.forEach(t),Uco=r(Yk," \u2014 "),mI=n(Yk,"A",{href:!0});var ldt=s(mI);Jco=r(ldt,"RobertaTokenizer"),ldt.forEach(t),Yco=r(Yk," or "),gI=n(Yk,"A",{href:!0});var idt=s(gI);Kco=r(idt,"RobertaTokenizerFast"),idt.forEach(t),Zco=r(Yk," (I-BERT model)"),Yk.forEach(t),efo=i(S),ms=n(S,"LI",{});var Kk=s(ms);Ole=n(Kk,"STRONG",{});var ddt=s(Ole);ofo=r(ddt,"layoutlm"),ddt.forEach(t),rfo=r(Kk," \u2014 "),hI=n(Kk,"A",{href:!0});var cdt=s(hI);tfo=r(cdt,"LayoutLMTokenizer"),cdt.forEach(t),afo=r(Kk," or "),pI=n(Kk,"A",{href:!0});var fdt=s(pI);nfo=r(fdt,"LayoutLMTokenizerFast"),fdt.forEach(t),sfo=r(Kk," (LayoutLM model)"),Kk.forEach(t),lfo=i(S),gs=n(S,"LI",{});var Zk=s(gs);Vle=n(Zk,"STRONG",{});var mdt=s(Vle);ifo=r(mdt,"layoutlmv2"),mdt.forEach(t),dfo=r(Zk," \u2014 "),_I=n(Zk,"A",{href:!0});var gdt=s(_I);cfo=r(gdt,"LayoutLMv2Tokenizer"),gdt.forEach(t),ffo=r(Zk," or "),uI=n(Zk,"A",{href:!0});var hdt=s(uI);mfo=r(hdt,"LayoutLMv2TokenizerFast"),hdt.forEach(t),gfo=r(Zk," (LayoutLMv2 model)"),Zk.forEach(t),hfo=i(S),hs=n(S,"LI",{});var eS=s(hs);Xle=n(eS,"STRONG",{});var pdt=s(Xle);pfo=r(pdt,"layoutlmv3"),pdt.forEach(t),_fo=r(eS," \u2014 "),bI=n(eS,"A",{href:!0});var _dt=s(bI);ufo=r(_dt,"LayoutLMv3Tokenizer"),_dt.forEach(t),bfo=r(eS," or "),vI=n(eS,"A",{href:!0});var udt=s(vI);vfo=r(udt,"LayoutLMv3TokenizerFast"),udt.forEach(t),Ffo=r(eS," (LayoutLMv3 model)"),eS.forEach(t),Tfo=i(S),ps=n(S,"LI",{});var oS=s(ps);zle=n(oS,"STRONG",{});var bdt=s(zle);Mfo=r(bdt,"layoutxlm"),bdt.forEach(t),Efo=r(oS," \u2014 "),FI=n(oS,"A",{href:!0});var vdt=s(FI);Cfo=r(vdt,"LayoutXLMTokenizer"),vdt.forEach(t),wfo=r(oS," or "),TI=n(oS,"A",{href:!0});var Fdt=s(TI);Afo=r(Fdt,"LayoutXLMTokenizerFast"),Fdt.forEach(t),Lfo=r(oS," (LayoutXLM model)"),oS.forEach(t),yfo=i(S),_s=n(S,"LI",{});var rS=s(_s);Qle=n(rS,"STRONG",{});var Tdt=s(Qle);xfo=r(Tdt,"led"),Tdt.forEach(t),$fo=r(rS," \u2014 "),MI=n(rS,"A",{href:!0});var Mdt=s(MI);kfo=r(Mdt,"LEDTokenizer"),Mdt.forEach(t),Sfo=r(rS," or "),EI=n(rS,"A",{href:!0});var Edt=s(EI);Rfo=r(Edt,"LEDTokenizerFast"),Edt.forEach(t),Pfo=r(rS," (LED model)"),rS.forEach(t),Bfo=i(S),us=n(S,"LI",{});var tS=s(us);Wle=n(tS,"STRONG",{});var Cdt=s(Wle);Ifo=r(Cdt,"longformer"),Cdt.forEach(t),Nfo=r(tS," \u2014 "),CI=n(tS,"A",{href:!0});var wdt=s(CI);qfo=r(wdt,"LongformerTokenizer"),wdt.forEach(t),jfo=r(tS," or "),wI=n(tS,"A",{href:!0});var Adt=s(wI);Dfo=r(Adt,"LongformerTokenizerFast"),Adt.forEach(t),Gfo=r(tS," (Longformer model)"),tS.forEach(t),Ofo=i(S),bs=n(S,"LI",{});var aS=s(bs);Hle=n(aS,"STRONG",{});var Ldt=s(Hle);Vfo=r(Ldt,"longt5"),Ldt.forEach(t),Xfo=r(aS," \u2014 "),AI=n(aS,"A",{href:!0});var ydt=s(AI);zfo=r(ydt,"T5Tokenizer"),ydt.forEach(t),Qfo=r(aS," or "),LI=n(aS,"A",{href:!0});var xdt=s(LI);Wfo=r(xdt,"T5TokenizerFast"),xdt.forEach(t),Hfo=r(aS," (LongT5 model)"),aS.forEach(t),Ufo=i(S),gh=n(S,"LI",{});var Pye=s(gh);Ule=n(Pye,"STRONG",{});var $dt=s(Ule);Jfo=r($dt,"luke"),$dt.forEach(t),Yfo=r(Pye," \u2014 "),yI=n(Pye,"A",{href:!0});var kdt=s(yI);Kfo=r(kdt,"LukeTokenizer"),kdt.forEach(t),Zfo=r(Pye," (LUKE model)"),Pye.forEach(t),emo=i(S),vs=n(S,"LI",{});var nS=s(vs);Jle=n(nS,"STRONG",{});var Sdt=s(Jle);omo=r(Sdt,"lxmert"),Sdt.forEach(t),rmo=r(nS," \u2014 "),xI=n(nS,"A",{href:!0});var Rdt=s(xI);tmo=r(Rdt,"LxmertTokenizer"),Rdt.forEach(t),amo=r(nS," or "),$I=n(nS,"A",{href:!0});var Pdt=s($I);nmo=r(Pdt,"LxmertTokenizerFast"),Pdt.forEach(t),smo=r(nS," (LXMERT model)"),nS.forEach(t),lmo=i(S),hh=n(S,"LI",{});var Bye=s(hh);Yle=n(Bye,"STRONG",{});var Bdt=s(Yle);imo=r(Bdt,"m2m_100"),Bdt.forEach(t),dmo=r(Bye," \u2014 "),kI=n(Bye,"A",{href:!0});var Idt=s(kI);cmo=r(Idt,"M2M100Tokenizer"),Idt.forEach(t),fmo=r(Bye," (M2M100 model)"),Bye.forEach(t),mmo=i(S),ph=n(S,"LI",{});var Iye=s(ph);Kle=n(Iye,"STRONG",{});var Ndt=s(Kle);gmo=r(Ndt,"marian"),Ndt.forEach(t),hmo=r(Iye," \u2014 "),SI=n(Iye,"A",{href:!0});var qdt=s(SI);pmo=r(qdt,"MarianTokenizer"),qdt.forEach(t),_mo=r(Iye," (Marian model)"),Iye.forEach(t),umo=i(S),Fs=n(S,"LI",{});var sS=s(Fs);Zle=n(sS,"STRONG",{});var jdt=s(Zle);bmo=r(jdt,"mbart"),jdt.forEach(t),vmo=r(sS," \u2014 "),RI=n(sS,"A",{href:!0});var Ddt=s(RI);Fmo=r(Ddt,"MBartTokenizer"),Ddt.forEach(t),Tmo=r(sS," or "),PI=n(sS,"A",{href:!0});var Gdt=s(PI);Mmo=r(Gdt,"MBartTokenizerFast"),Gdt.forEach(t),Emo=r(sS," (mBART model)"),sS.forEach(t),Cmo=i(S),Ts=n(S,"LI",{});var lS=s(Ts);eie=n(lS,"STRONG",{});var Odt=s(eie);wmo=r(Odt,"mbart50"),Odt.forEach(t),Amo=r(lS," \u2014 "),BI=n(lS,"A",{href:!0});var Vdt=s(BI);Lmo=r(Vdt,"MBart50Tokenizer"),Vdt.forEach(t),ymo=r(lS," or "),II=n(lS,"A",{href:!0});var Xdt=s(II);xmo=r(Xdt,"MBart50TokenizerFast"),Xdt.forEach(t),$mo=r(lS," (mBART-50 model)"),lS.forEach(t),kmo=i(S),Ms=n(S,"LI",{});var iS=s(Ms);oie=n(iS,"STRONG",{});var zdt=s(oie);Smo=r(zdt,"megatron-bert"),zdt.forEach(t),Rmo=r(iS," \u2014 "),NI=n(iS,"A",{href:!0});var Qdt=s(NI);Pmo=r(Qdt,"BertTokenizer"),Qdt.forEach(t),Bmo=r(iS," or "),qI=n(iS,"A",{href:!0});var Wdt=s(qI);Imo=r(Wdt,"BertTokenizerFast"),Wdt.forEach(t),Nmo=r(iS," (Megatron-BERT model)"),iS.forEach(t),qmo=i(S),_h=n(S,"LI",{});var Nye=s(_h);rie=n(Nye,"STRONG",{});var Hdt=s(rie);jmo=r(Hdt,"mluke"),Hdt.forEach(t),Dmo=r(Nye," \u2014 "),jI=n(Nye,"A",{href:!0});var Udt=s(jI);Gmo=r(Udt,"MLukeTokenizer"),Udt.forEach(t),Omo=r(Nye," (mLUKE model)"),Nye.forEach(t),Vmo=i(S),Es=n(S,"LI",{});var dS=s(Es);tie=n(dS,"STRONG",{});var Jdt=s(tie);Xmo=r(Jdt,"mobilebert"),Jdt.forEach(t),zmo=r(dS," \u2014 "),DI=n(dS,"A",{href:!0});var Ydt=s(DI);Qmo=r(Ydt,"MobileBertTokenizer"),Ydt.forEach(t),Wmo=r(dS," or "),GI=n(dS,"A",{href:!0});var Kdt=s(GI);Hmo=r(Kdt,"MobileBertTokenizerFast"),Kdt.forEach(t),Umo=r(dS," (MobileBERT model)"),dS.forEach(t),Jmo=i(S),Cs=n(S,"LI",{});var cS=s(Cs);aie=n(cS,"STRONG",{});var Zdt=s(aie);Ymo=r(Zdt,"mpnet"),Zdt.forEach(t),Kmo=r(cS," \u2014 "),OI=n(cS,"A",{href:!0});var ect=s(OI);Zmo=r(ect,"MPNetTokenizer"),ect.forEach(t),ego=r(cS," or "),VI=n(cS,"A",{href:!0});var oct=s(VI);ogo=r(oct,"MPNetTokenizerFast"),oct.forEach(t),rgo=r(cS," (MPNet model)"),cS.forEach(t),tgo=i(S),ws=n(S,"LI",{});var fS=s(ws);nie=n(fS,"STRONG",{});var rct=s(nie);ago=r(rct,"mt5"),rct.forEach(t),ngo=r(fS," \u2014 "),XI=n(fS,"A",{href:!0});var tct=s(XI);sgo=r(tct,"MT5Tokenizer"),tct.forEach(t),lgo=r(fS," or "),zI=n(fS,"A",{href:!0});var act=s(zI);igo=r(act,"MT5TokenizerFast"),act.forEach(t),dgo=r(fS," (MT5 model)"),fS.forEach(t),cgo=i(S),As=n(S,"LI",{});var mS=s(As);sie=n(mS,"STRONG",{});var nct=s(sie);fgo=r(nct,"mvp"),nct.forEach(t),mgo=r(mS," \u2014 "),QI=n(mS,"A",{href:!0});var sct=s(QI);ggo=r(sct,"MvpTokenizer"),sct.forEach(t),hgo=r(mS," or "),WI=n(mS,"A",{href:!0});var lct=s(WI);pgo=r(lct,"MvpTokenizerFast"),lct.forEach(t),_go=r(mS," (MVP model)"),mS.forEach(t),ugo=i(S),Ls=n(S,"LI",{});var gS=s(Ls);lie=n(gS,"STRONG",{});var ict=s(lie);bgo=r(ict,"nezha"),ict.forEach(t),vgo=r(gS," \u2014 "),HI=n(gS,"A",{href:!0});var dct=s(HI);Fgo=r(dct,"BertTokenizer"),dct.forEach(t),Tgo=r(gS," or "),UI=n(gS,"A",{href:!0});var cct=s(UI);Mgo=r(cct,"BertTokenizerFast"),cct.forEach(t),Ego=r(gS," (Nezha model)"),gS.forEach(t),Cgo=i(S),ys=n(S,"LI",{});var hS=s(ys);iie=n(hS,"STRONG",{});var fct=s(iie);wgo=r(fct,"nystromformer"),fct.forEach(t),Ago=r(hS," \u2014 "),JI=n(hS,"A",{href:!0});var mct=s(JI);Lgo=r(mct,"AlbertTokenizer"),mct.forEach(t),ygo=r(hS," or "),YI=n(hS,"A",{href:!0});var gct=s(YI);xgo=r(gct,"AlbertTokenizerFast"),gct.forEach(t),$go=r(hS," (Nystr\xF6mformer model)"),hS.forEach(t),kgo=i(S),xs=n(S,"LI",{});var pS=s(xs);die=n(pS,"STRONG",{});var hct=s(die);Sgo=r(hct,"openai-gpt"),hct.forEach(t),Rgo=r(pS," \u2014 "),KI=n(pS,"A",{href:!0});var pct=s(KI);Pgo=r(pct,"OpenAIGPTTokenizer"),pct.forEach(t),Bgo=r(pS," or "),ZI=n(pS,"A",{href:!0});var _ct=s(ZI);Igo=r(_ct,"OpenAIGPTTokenizerFast"),_ct.forEach(t),Ngo=r(pS," (OpenAI GPT model)"),pS.forEach(t),qgo=i(S),uh=n(S,"LI",{});var qye=s(uh);cie=n(qye,"STRONG",{});var uct=s(cie);jgo=r(uct,"opt"),uct.forEach(t),Dgo=r(qye," \u2014 "),eN=n(qye,"A",{href:!0});var bct=s(eN);Ggo=r(bct,"GPT2Tokenizer"),bct.forEach(t),Ogo=r(qye," (OPT model)"),qye.forEach(t),Vgo=i(S),$s=n(S,"LI",{});var _S=s($s);fie=n(_S,"STRONG",{});var vct=s(fie);Xgo=r(vct,"pegasus"),vct.forEach(t),zgo=r(_S," \u2014 "),oN=n(_S,"A",{href:!0});var Fct=s(oN);Qgo=r(Fct,"PegasusTokenizer"),Fct.forEach(t),Wgo=r(_S," or "),rN=n(_S,"A",{href:!0});var Tct=s(rN);Hgo=r(Tct,"PegasusTokenizerFast"),Tct.forEach(t),Ugo=r(_S," (Pegasus model)"),_S.forEach(t),Jgo=i(S),bh=n(S,"LI",{});var jye=s(bh);mie=n(jye,"STRONG",{});var Mct=s(mie);Ygo=r(Mct,"perceiver"),Mct.forEach(t),Kgo=r(jye," \u2014 "),tN=n(jye,"A",{href:!0});var Ect=s(tN);Zgo=r(Ect,"PerceiverTokenizer"),Ect.forEach(t),eho=r(jye," (Perceiver model)"),jye.forEach(t),oho=i(S),vh=n(S,"LI",{});var Dye=s(vh);gie=n(Dye,"STRONG",{});var Cct=s(gie);rho=r(Cct,"phobert"),Cct.forEach(t),tho=r(Dye," \u2014 "),aN=n(Dye,"A",{href:!0});var wct=s(aN);aho=r(wct,"PhobertTokenizer"),wct.forEach(t),nho=r(Dye," (PhoBERT model)"),Dye.forEach(t),sho=i(S),Fh=n(S,"LI",{});var Gye=s(Fh);hie=n(Gye,"STRONG",{});var Act=s(hie);lho=r(Act,"plbart"),Act.forEach(t),iho=r(Gye," \u2014 "),nN=n(Gye,"A",{href:!0});var Lct=s(nN);dho=r(Lct,"PLBartTokenizer"),Lct.forEach(t),cho=r(Gye," (PLBart model)"),Gye.forEach(t),fho=i(S),Th=n(S,"LI",{});var Oye=s(Th);pie=n(Oye,"STRONG",{});var yct=s(pie);mho=r(yct,"prophetnet"),yct.forEach(t),gho=r(Oye," \u2014 "),sN=n(Oye,"A",{href:!0});var xct=s(sN);hho=r(xct,"ProphetNetTokenizer"),xct.forEach(t),pho=r(Oye," (ProphetNet model)"),Oye.forEach(t),_ho=i(S),ks=n(S,"LI",{});var uS=s(ks);_ie=n(uS,"STRONG",{});var $ct=s(_ie);uho=r($ct,"qdqbert"),$ct.forEach(t),bho=r(uS," \u2014 "),lN=n(uS,"A",{href:!0});var kct=s(lN);vho=r(kct,"BertTokenizer"),kct.forEach(t),Fho=r(uS," or "),iN=n(uS,"A",{href:!0});var Sct=s(iN);Tho=r(Sct,"BertTokenizerFast"),Sct.forEach(t),Mho=r(uS," (QDQBert model)"),uS.forEach(t),Eho=i(S),Mh=n(S,"LI",{});var Vye=s(Mh);uie=n(Vye,"STRONG",{});var Rct=s(uie);Cho=r(Rct,"rag"),Rct.forEach(t),who=r(Vye," \u2014 "),dN=n(Vye,"A",{href:!0});var Pct=s(dN);Aho=r(Pct,"RagTokenizer"),Pct.forEach(t),Lho=r(Vye," (RAG model)"),Vye.forEach(t),yho=i(S),Ss=n(S,"LI",{});var bS=s(Ss);bie=n(bS,"STRONG",{});var Bct=s(bie);xho=r(Bct,"realm"),Bct.forEach(t),$ho=r(bS," \u2014 "),cN=n(bS,"A",{href:!0});var Ict=s(cN);kho=r(Ict,"RealmTokenizer"),Ict.forEach(t),Sho=r(bS," or "),fN=n(bS,"A",{href:!0});var Nct=s(fN);Rho=r(Nct,"RealmTokenizerFast"),Nct.forEach(t),Pho=r(bS," (REALM model)"),bS.forEach(t),Bho=i(S),Rs=n(S,"LI",{});var vS=s(Rs);vie=n(vS,"STRONG",{});var qct=s(vie);Iho=r(qct,"reformer"),qct.forEach(t),Nho=r(vS," \u2014 "),mN=n(vS,"A",{href:!0});var jct=s(mN);qho=r(jct,"ReformerTokenizer"),jct.forEach(t),jho=r(vS," or "),gN=n(vS,"A",{href:!0});var Dct=s(gN);Dho=r(Dct,"ReformerTokenizerFast"),Dct.forEach(t),Gho=r(vS," (Reformer model)"),vS.forEach(t),Oho=i(S),Ps=n(S,"LI",{});var FS=s(Ps);Fie=n(FS,"STRONG",{});var Gct=s(Fie);Vho=r(Gct,"rembert"),Gct.forEach(t),Xho=r(FS," \u2014 "),hN=n(FS,"A",{href:!0});var Oct=s(hN);zho=r(Oct,"RemBertTokenizer"),Oct.forEach(t),Qho=r(FS," or "),pN=n(FS,"A",{href:!0});var Vct=s(pN);Who=r(Vct,"RemBertTokenizerFast"),Vct.forEach(t),Hho=r(FS," (RemBERT model)"),FS.forEach(t),Uho=i(S),Bs=n(S,"LI",{});var TS=s(Bs);Tie=n(TS,"STRONG",{});var Xct=s(Tie);Jho=r(Xct,"retribert"),Xct.forEach(t),Yho=r(TS," \u2014 "),_N=n(TS,"A",{href:!0});var zct=s(_N);Kho=r(zct,"RetriBertTokenizer"),zct.forEach(t),Zho=r(TS," or "),uN=n(TS,"A",{href:!0});var Qct=s(uN);epo=r(Qct,"RetriBertTokenizerFast"),Qct.forEach(t),opo=r(TS," (RetriBERT model)"),TS.forEach(t),rpo=i(S),Is=n(S,"LI",{});var MS=s(Is);Mie=n(MS,"STRONG",{});var Wct=s(Mie);tpo=r(Wct,"roberta"),Wct.forEach(t),apo=r(MS," \u2014 "),bN=n(MS,"A",{href:!0});var Hct=s(bN);npo=r(Hct,"RobertaTokenizer"),Hct.forEach(t),spo=r(MS," or "),vN=n(MS,"A",{href:!0});var Uct=s(vN);lpo=r(Uct,"RobertaTokenizerFast"),Uct.forEach(t),ipo=r(MS," (RoBERTa model)"),MS.forEach(t),dpo=i(S),Ns=n(S,"LI",{});var ES=s(Ns);Eie=n(ES,"STRONG",{});var Jct=s(Eie);cpo=r(Jct,"roformer"),Jct.forEach(t),fpo=r(ES," \u2014 "),FN=n(ES,"A",{href:!0});var Yct=s(FN);mpo=r(Yct,"RoFormerTokenizer"),Yct.forEach(t),gpo=r(ES," or "),TN=n(ES,"A",{href:!0});var Kct=s(TN);hpo=r(Kct,"RoFormerTokenizerFast"),Kct.forEach(t),ppo=r(ES," (RoFormer model)"),ES.forEach(t),_po=i(S),Eh=n(S,"LI",{});var Xye=s(Eh);Cie=n(Xye,"STRONG",{});var Zct=s(Cie);upo=r(Zct,"speech_to_text"),Zct.forEach(t),bpo=r(Xye," \u2014 "),MN=n(Xye,"A",{href:!0});var eft=s(MN);vpo=r(eft,"Speech2TextTokenizer"),eft.forEach(t),Fpo=r(Xye," (Speech2Text model)"),Xye.forEach(t),Tpo=i(S),Ch=n(S,"LI",{});var zye=s(Ch);wie=n(zye,"STRONG",{});var oft=s(wie);Mpo=r(oft,"speech_to_text_2"),oft.forEach(t),Epo=r(zye," \u2014 "),EN=n(zye,"A",{href:!0});var rft=s(EN);Cpo=r(rft,"Speech2Text2Tokenizer"),rft.forEach(t),wpo=r(zye," (Speech2Text2 model)"),zye.forEach(t),Apo=i(S),qs=n(S,"LI",{});var CS=s(qs);Aie=n(CS,"STRONG",{});var tft=s(Aie);Lpo=r(tft,"splinter"),tft.forEach(t),ypo=r(CS," \u2014 "),CN=n(CS,"A",{href:!0});var aft=s(CN);xpo=r(aft,"SplinterTokenizer"),aft.forEach(t),$po=r(CS," or "),wN=n(CS,"A",{href:!0});var nft=s(wN);kpo=r(nft,"SplinterTokenizerFast"),nft.forEach(t),Spo=r(CS," (Splinter model)"),CS.forEach(t),Rpo=i(S),js=n(S,"LI",{});var wS=s(js);Lie=n(wS,"STRONG",{});var sft=s(Lie);Ppo=r(sft,"squeezebert"),sft.forEach(t),Bpo=r(wS," \u2014 "),AN=n(wS,"A",{href:!0});var lft=s(AN);Ipo=r(lft,"SqueezeBertTokenizer"),lft.forEach(t),Npo=r(wS," or "),LN=n(wS,"A",{href:!0});var ift=s(LN);qpo=r(ift,"SqueezeBertTokenizerFast"),ift.forEach(t),jpo=r(wS," (SqueezeBERT model)"),wS.forEach(t),Dpo=i(S),Ds=n(S,"LI",{});var AS=s(Ds);yie=n(AS,"STRONG",{});var dft=s(yie);Gpo=r(dft,"t5"),dft.forEach(t),Opo=r(AS," \u2014 "),yN=n(AS,"A",{href:!0});var cft=s(yN);Vpo=r(cft,"T5Tokenizer"),cft.forEach(t),Xpo=r(AS," or "),xN=n(AS,"A",{href:!0});var fft=s(xN);zpo=r(fft,"T5TokenizerFast"),fft.forEach(t),Qpo=r(AS," (T5 model)"),AS.forEach(t),Wpo=i(S),wh=n(S,"LI",{});var Qye=s(wh);xie=n(Qye,"STRONG",{});var mft=s(xie);Hpo=r(mft,"tapas"),mft.forEach(t),Upo=r(Qye," \u2014 "),$N=n(Qye,"A",{href:!0});var gft=s($N);Jpo=r(gft,"TapasTokenizer"),gft.forEach(t),Ypo=r(Qye," (TAPAS model)"),Qye.forEach(t),Kpo=i(S),Ah=n(S,"LI",{});var Wye=s(Ah);$ie=n(Wye,"STRONG",{});var hft=s($ie);Zpo=r(hft,"tapex"),hft.forEach(t),e_o=r(Wye," \u2014 "),kN=n(Wye,"A",{href:!0});var pft=s(kN);o_o=r(pft,"TapexTokenizer"),pft.forEach(t),r_o=r(Wye," (TAPEX model)"),Wye.forEach(t),t_o=i(S),Lh=n(S,"LI",{});var Hye=s(Lh);kie=n(Hye,"STRONG",{});var _ft=s(kie);a_o=r(_ft,"transfo-xl"),_ft.forEach(t),n_o=r(Hye," \u2014 "),SN=n(Hye,"A",{href:!0});var uft=s(SN);s_o=r(uft,"TransfoXLTokenizer"),uft.forEach(t),l_o=r(Hye," (Transformer-XL model)"),Hye.forEach(t),i_o=i(S),Gs=n(S,"LI",{});var LS=s(Gs);Sie=n(LS,"STRONG",{});var bft=s(Sie);d_o=r(bft,"vilt"),bft.forEach(t),c_o=r(LS," \u2014 "),RN=n(LS,"A",{href:!0});var vft=s(RN);f_o=r(vft,"BertTokenizer"),vft.forEach(t),m_o=r(LS," or "),PN=n(LS,"A",{href:!0});var Fft=s(PN);g_o=r(Fft,"BertTokenizerFast"),Fft.forEach(t),h_o=r(LS," (ViLT model)"),LS.forEach(t),p_o=i(S),Os=n(S,"LI",{});var yS=s(Os);Rie=n(yS,"STRONG",{});var Tft=s(Rie);__o=r(Tft,"visual_bert"),Tft.forEach(t),u_o=r(yS," \u2014 "),BN=n(yS,"A",{href:!0});var Mft=s(BN);b_o=r(Mft,"BertTokenizer"),Mft.forEach(t),v_o=r(yS," or "),IN=n(yS,"A",{href:!0});var Eft=s(IN);F_o=r(Eft,"BertTokenizerFast"),Eft.forEach(t),T_o=r(yS," (VisualBERT model)"),yS.forEach(t),M_o=i(S),yh=n(S,"LI",{});var Uye=s(yh);Pie=n(Uye,"STRONG",{});var Cft=s(Pie);E_o=r(Cft,"wav2vec2"),Cft.forEach(t),C_o=r(Uye," \u2014 "),NN=n(Uye,"A",{href:!0});var wft=s(NN);w_o=r(wft,"Wav2Vec2CTCTokenizer"),wft.forEach(t),A_o=r(Uye," (Wav2Vec2 model)"),Uye.forEach(t),L_o=i(S),xh=n(S,"LI",{});var Jye=s(xh);Bie=n(Jye,"STRONG",{});var Aft=s(Bie);y_o=r(Aft,"wav2vec2-conformer"),Aft.forEach(t),x_o=r(Jye," \u2014 "),qN=n(Jye,"A",{href:!0});var Lft=s(qN);$_o=r(Lft,"Wav2Vec2CTCTokenizer"),Lft.forEach(t),k_o=r(Jye," (Wav2Vec2-Conformer model)"),Jye.forEach(t),S_o=i(S),$h=n(S,"LI",{});var Yye=s($h);Iie=n(Yye,"STRONG",{});var yft=s(Iie);R_o=r(yft,"wav2vec2_phoneme"),yft.forEach(t),P_o=r(Yye," \u2014 "),jN=n(Yye,"A",{href:!0});var xft=s(jN);B_o=r(xft,"Wav2Vec2PhonemeCTCTokenizer"),xft.forEach(t),I_o=r(Yye," (Wav2Vec2Phoneme model)"),Yye.forEach(t),N_o=i(S),Vs=n(S,"LI",{});var xS=s(Vs);Nie=n(xS,"STRONG",{});var $ft=s(Nie);q_o=r($ft,"xglm"),$ft.forEach(t),j_o=r(xS," \u2014 "),DN=n(xS,"A",{href:!0});var kft=s(DN);D_o=r(kft,"XGLMTokenizer"),kft.forEach(t),G_o=r(xS," or "),GN=n(xS,"A",{href:!0});var Sft=s(GN);O_o=r(Sft,"XGLMTokenizerFast"),Sft.forEach(t),V_o=r(xS," (XGLM model)"),xS.forEach(t),X_o=i(S),kh=n(S,"LI",{});var Kye=s(kh);qie=n(Kye,"STRONG",{});var Rft=s(qie);z_o=r(Rft,"xlm"),Rft.forEach(t),Q_o=r(Kye," \u2014 "),ON=n(Kye,"A",{href:!0});var Pft=s(ON);W_o=r(Pft,"XLMTokenizer"),Pft.forEach(t),H_o=r(Kye," (XLM model)"),Kye.forEach(t),U_o=i(S),Sh=n(S,"LI",{});var Zye=s(Sh);jie=n(Zye,"STRONG",{});var Bft=s(jie);J_o=r(Bft,"xlm-prophetnet"),Bft.forEach(t),Y_o=r(Zye," \u2014 "),VN=n(Zye,"A",{href:!0});var Ift=s(VN);K_o=r(Ift,"XLMProphetNetTokenizer"),Ift.forEach(t),Z_o=r(Zye," (XLM-ProphetNet model)"),Zye.forEach(t),euo=i(S),Xs=n(S,"LI",{});var $S=s(Xs);Die=n($S,"STRONG",{});var Nft=s(Die);ouo=r(Nft,"xlm-roberta"),Nft.forEach(t),ruo=r($S," \u2014 "),XN=n($S,"A",{href:!0});var qft=s(XN);tuo=r(qft,"XLMRobertaTokenizer"),qft.forEach(t),auo=r($S," or "),zN=n($S,"A",{href:!0});var jft=s(zN);nuo=r(jft,"XLMRobertaTokenizerFast"),jft.forEach(t),suo=r($S," (XLM-RoBERTa model)"),$S.forEach(t),luo=i(S),zs=n(S,"LI",{});var kS=s(zs);Gie=n(kS,"STRONG",{});var Dft=s(Gie);iuo=r(Dft,"xlm-roberta-xl"),Dft.forEach(t),duo=r(kS," \u2014 "),QN=n(kS,"A",{href:!0});var Gft=s(QN);cuo=r(Gft,"RobertaTokenizer"),Gft.forEach(t),fuo=r(kS," or "),WN=n(kS,"A",{href:!0});var Oft=s(WN);muo=r(Oft,"RobertaTokenizerFast"),Oft.forEach(t),guo=r(kS," (XLM-RoBERTa-XL model)"),kS.forEach(t),huo=i(S),Qs=n(S,"LI",{});var SS=s(Qs);Oie=n(SS,"STRONG",{});var Vft=s(Oie);puo=r(Vft,"xlnet"),Vft.forEach(t),_uo=r(SS," \u2014 "),HN=n(SS,"A",{href:!0});var Xft=s(HN);uuo=r(Xft,"XLNetTokenizer"),Xft.forEach(t),buo=r(SS," or "),UN=n(SS,"A",{href:!0});var zft=s(UN);vuo=r(zft,"XLNetTokenizerFast"),zft.forEach(t),Fuo=r(SS," (XLNet model)"),SS.forEach(t),Tuo=i(S),Ws=n(S,"LI",{});var RS=s(Ws);Vie=n(RS,"STRONG",{});var Qft=s(Vie);Muo=r(Qft,"yoso"),Qft.forEach(t),Euo=r(RS," \u2014 "),JN=n(RS,"A",{href:!0});var Wft=s(JN);Cuo=r(Wft,"AlbertTokenizer"),Wft.forEach(t),wuo=r(RS," or "),YN=n(RS,"A",{href:!0});var Hft=s(YN);Auo=r(Hft,"AlbertTokenizerFast"),Hft.forEach(t),Luo=r(RS," (YOSO model)"),RS.forEach(t),S.forEach(t),yuo=i(Zs),T(Rh.$$.fragment,Zs),Zs.forEach(t),xuo=i(Ks),Ph=n(Ks,"DIV",{class:!0});var bQe=s(Ph);T(TL.$$.fragment,bQe),$uo=i(bQe),Xie=n(bQe,"P",{});var Uft=s(Xie);kuo=r(Uft,"Register a new tokenizer in this mapping."),Uft.forEach(t),bQe.forEach(t),Ks.forEach(t),uXe=i(f),qi=n(f,"H2",{class:!0});var vQe=s(qi);Bh=n(vQe,"A",{id:!0,class:!0,href:!0});var Jft=s(Bh);zie=n(Jft,"SPAN",{});var Yft=s(zie);T(ML.$$.fragment,Yft),Yft.forEach(t),Jft.forEach(t),Suo=i(vQe),Qie=n(vQe,"SPAN",{});var Kft=s(Qie);Ruo=r(Kft,"AutoFeatureExtractor"),Kft.forEach(t),vQe.forEach(t),bXe=i(f),Lo=n(f,"DIV",{class:!0});var el=s(Lo);T(EL.$$.fragment,el),Puo=i(el),CL=n(el,"P",{});var FQe=s(CL);Buo=r(FQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KN=n(FQe,"A",{href:!0});var Zft=s(KN);Iuo=r(Zft,"AutoFeatureExtractor.from_pretrained()"),Zft.forEach(t),Nuo=r(FQe," class method."),FQe.forEach(t),quo=i(el),wL=n(el,"P",{});var TQe=s(wL);juo=r(TQe,"This class cannot be instantiated directly using "),Wie=n(TQe,"CODE",{});var emt=s(Wie);Duo=r(emt,"__init__()"),emt.forEach(t),Guo=r(TQe," (throws an error)."),TQe.forEach(t),Ouo=i(el),He=n(el,"DIV",{class:!0});var aa=s(He);T(AL.$$.fragment,aa),Vuo=i(aa),Hie=n(aa,"P",{});var omt=s(Hie);Xuo=r(omt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),omt.forEach(t),zuo=i(aa),Ba=n(aa,"P",{});var cw=s(Ba);Quo=r(cw,"The feature extractor class to instantiate is selected based on the "),Uie=n(cw,"CODE",{});var rmt=s(Uie);Wuo=r(rmt,"model_type"),rmt.forEach(t),Huo=r(cw,` property of the config object
(either passed as an argument or loaded from `),Jie=n(cw,"CODE",{});var tmt=s(Jie);Uuo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),Juo=r(cw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Yie=n(cw,"CODE",{});var amt=s(Yie);Yuo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),Kuo=r(cw,":"),cw.forEach(t),Zuo=i(aa),J=n(aa,"UL",{});var K=s(J);Ih=n(K,"LI",{});var e8e=s(Ih);Kie=n(e8e,"STRONG",{});var nmt=s(Kie);e1o=r(nmt,"beit"),nmt.forEach(t),o1o=r(e8e," \u2014 "),ZN=n(e8e,"A",{href:!0});var smt=s(ZN);r1o=r(smt,"BeitFeatureExtractor"),smt.forEach(t),t1o=r(e8e," (BEiT model)"),e8e.forEach(t),a1o=i(K),Nh=n(K,"LI",{});var o8e=s(Nh);Zie=n(o8e,"STRONG",{});var lmt=s(Zie);n1o=r(lmt,"clip"),lmt.forEach(t),s1o=r(o8e," \u2014 "),eq=n(o8e,"A",{href:!0});var imt=s(eq);l1o=r(imt,"CLIPFeatureExtractor"),imt.forEach(t),i1o=r(o8e," (CLIP model)"),o8e.forEach(t),d1o=i(K),qh=n(K,"LI",{});var r8e=s(qh);ede=n(r8e,"STRONG",{});var dmt=s(ede);c1o=r(dmt,"convnext"),dmt.forEach(t),f1o=r(r8e," \u2014 "),oq=n(r8e,"A",{href:!0});var cmt=s(oq);m1o=r(cmt,"ConvNextFeatureExtractor"),cmt.forEach(t),g1o=r(r8e," (ConvNeXT model)"),r8e.forEach(t),h1o=i(K),jh=n(K,"LI",{});var t8e=s(jh);ode=n(t8e,"STRONG",{});var fmt=s(ode);p1o=r(fmt,"cvt"),fmt.forEach(t),_1o=r(t8e," \u2014 "),rq=n(t8e,"A",{href:!0});var mmt=s(rq);u1o=r(mmt,"ConvNextFeatureExtractor"),mmt.forEach(t),b1o=r(t8e," (CvT model)"),t8e.forEach(t),v1o=i(K),Dh=n(K,"LI",{});var a8e=s(Dh);rde=n(a8e,"STRONG",{});var gmt=s(rde);F1o=r(gmt,"data2vec-audio"),gmt.forEach(t),T1o=r(a8e," \u2014 "),tq=n(a8e,"A",{href:!0});var hmt=s(tq);M1o=r(hmt,"Wav2Vec2FeatureExtractor"),hmt.forEach(t),E1o=r(a8e," (Data2VecAudio model)"),a8e.forEach(t),C1o=i(K),Gh=n(K,"LI",{});var n8e=s(Gh);tde=n(n8e,"STRONG",{});var pmt=s(tde);w1o=r(pmt,"data2vec-vision"),pmt.forEach(t),A1o=r(n8e," \u2014 "),aq=n(n8e,"A",{href:!0});var _mt=s(aq);L1o=r(_mt,"BeitFeatureExtractor"),_mt.forEach(t),y1o=r(n8e," (Data2VecVision model)"),n8e.forEach(t),x1o=i(K),Oh=n(K,"LI",{});var s8e=s(Oh);ade=n(s8e,"STRONG",{});var umt=s(ade);$1o=r(umt,"deit"),umt.forEach(t),k1o=r(s8e," \u2014 "),nq=n(s8e,"A",{href:!0});var bmt=s(nq);S1o=r(bmt,"DeiTFeatureExtractor"),bmt.forEach(t),R1o=r(s8e," (DeiT model)"),s8e.forEach(t),P1o=i(K),Vh=n(K,"LI",{});var l8e=s(Vh);nde=n(l8e,"STRONG",{});var vmt=s(nde);B1o=r(vmt,"detr"),vmt.forEach(t),I1o=r(l8e," \u2014 "),sq=n(l8e,"A",{href:!0});var Fmt=s(sq);N1o=r(Fmt,"DetrFeatureExtractor"),Fmt.forEach(t),q1o=r(l8e," (DETR model)"),l8e.forEach(t),j1o=i(K),Xh=n(K,"LI",{});var i8e=s(Xh);sde=n(i8e,"STRONG",{});var Tmt=s(sde);D1o=r(Tmt,"dpt"),Tmt.forEach(t),G1o=r(i8e," \u2014 "),lq=n(i8e,"A",{href:!0});var Mmt=s(lq);O1o=r(Mmt,"DPTFeatureExtractor"),Mmt.forEach(t),V1o=r(i8e," (DPT model)"),i8e.forEach(t),X1o=i(K),zh=n(K,"LI",{});var d8e=s(zh);lde=n(d8e,"STRONG",{});var Emt=s(lde);z1o=r(Emt,"flava"),Emt.forEach(t),Q1o=r(d8e," \u2014 "),iq=n(d8e,"A",{href:!0});var Cmt=s(iq);W1o=r(Cmt,"FlavaFeatureExtractor"),Cmt.forEach(t),H1o=r(d8e," (FLAVA model)"),d8e.forEach(t),U1o=i(K),Qh=n(K,"LI",{});var c8e=s(Qh);ide=n(c8e,"STRONG",{});var wmt=s(ide);J1o=r(wmt,"glpn"),wmt.forEach(t),Y1o=r(c8e," \u2014 "),dq=n(c8e,"A",{href:!0});var Amt=s(dq);K1o=r(Amt,"GLPNFeatureExtractor"),Amt.forEach(t),Z1o=r(c8e," (GLPN model)"),c8e.forEach(t),e2o=i(K),Wh=n(K,"LI",{});var f8e=s(Wh);dde=n(f8e,"STRONG",{});var Lmt=s(dde);o2o=r(Lmt,"groupvit"),Lmt.forEach(t),r2o=r(f8e," \u2014 "),cq=n(f8e,"A",{href:!0});var ymt=s(cq);t2o=r(ymt,"CLIPFeatureExtractor"),ymt.forEach(t),a2o=r(f8e," (GroupViT model)"),f8e.forEach(t),n2o=i(K),Hh=n(K,"LI",{});var m8e=s(Hh);cde=n(m8e,"STRONG",{});var xmt=s(cde);s2o=r(xmt,"hubert"),xmt.forEach(t),l2o=r(m8e," \u2014 "),fq=n(m8e,"A",{href:!0});var $mt=s(fq);i2o=r($mt,"Wav2Vec2FeatureExtractor"),$mt.forEach(t),d2o=r(m8e," (Hubert model)"),m8e.forEach(t),c2o=i(K),Uh=n(K,"LI",{});var g8e=s(Uh);fde=n(g8e,"STRONG",{});var kmt=s(fde);f2o=r(kmt,"imagegpt"),kmt.forEach(t),m2o=r(g8e," \u2014 "),mq=n(g8e,"A",{href:!0});var Smt=s(mq);g2o=r(Smt,"ImageGPTFeatureExtractor"),Smt.forEach(t),h2o=r(g8e," (ImageGPT model)"),g8e.forEach(t),p2o=i(K),Jh=n(K,"LI",{});var h8e=s(Jh);mde=n(h8e,"STRONG",{});var Rmt=s(mde);_2o=r(Rmt,"layoutlmv2"),Rmt.forEach(t),u2o=r(h8e," \u2014 "),gq=n(h8e,"A",{href:!0});var Pmt=s(gq);b2o=r(Pmt,"LayoutLMv2FeatureExtractor"),Pmt.forEach(t),v2o=r(h8e," (LayoutLMv2 model)"),h8e.forEach(t),F2o=i(K),Yh=n(K,"LI",{});var p8e=s(Yh);gde=n(p8e,"STRONG",{});var Bmt=s(gde);T2o=r(Bmt,"layoutlmv3"),Bmt.forEach(t),M2o=r(p8e," \u2014 "),hq=n(p8e,"A",{href:!0});var Imt=s(hq);E2o=r(Imt,"LayoutLMv3FeatureExtractor"),Imt.forEach(t),C2o=r(p8e," (LayoutLMv3 model)"),p8e.forEach(t),w2o=i(K),Kh=n(K,"LI",{});var _8e=s(Kh);hde=n(_8e,"STRONG",{});var Nmt=s(hde);A2o=r(Nmt,"levit"),Nmt.forEach(t),L2o=r(_8e," \u2014 "),pq=n(_8e,"A",{href:!0});var qmt=s(pq);y2o=r(qmt,"LevitFeatureExtractor"),qmt.forEach(t),x2o=r(_8e," (LeViT model)"),_8e.forEach(t),$2o=i(K),Zh=n(K,"LI",{});var u8e=s(Zh);pde=n(u8e,"STRONG",{});var jmt=s(pde);k2o=r(jmt,"maskformer"),jmt.forEach(t),S2o=r(u8e," \u2014 "),_q=n(u8e,"A",{href:!0});var Dmt=s(_q);R2o=r(Dmt,"MaskFormerFeatureExtractor"),Dmt.forEach(t),P2o=r(u8e," (MaskFormer model)"),u8e.forEach(t),B2o=i(K),ep=n(K,"LI",{});var b8e=s(ep);_de=n(b8e,"STRONG",{});var Gmt=s(_de);I2o=r(Gmt,"mctct"),Gmt.forEach(t),N2o=r(b8e," \u2014 "),uq=n(b8e,"A",{href:!0});var Omt=s(uq);q2o=r(Omt,"MCTCTFeatureExtractor"),Omt.forEach(t),j2o=r(b8e," (M-CTC-T model)"),b8e.forEach(t),D2o=i(K),op=n(K,"LI",{});var v8e=s(op);ude=n(v8e,"STRONG",{});var Vmt=s(ude);G2o=r(Vmt,"mobilevit"),Vmt.forEach(t),O2o=r(v8e," \u2014 "),bq=n(v8e,"A",{href:!0});var Xmt=s(bq);V2o=r(Xmt,"MobileViTFeatureExtractor"),Xmt.forEach(t),X2o=r(v8e," (MobileViT model)"),v8e.forEach(t),z2o=i(K),rp=n(K,"LI",{});var F8e=s(rp);bde=n(F8e,"STRONG",{});var zmt=s(bde);Q2o=r(zmt,"perceiver"),zmt.forEach(t),W2o=r(F8e," \u2014 "),vq=n(F8e,"A",{href:!0});var Qmt=s(vq);H2o=r(Qmt,"PerceiverFeatureExtractor"),Qmt.forEach(t),U2o=r(F8e," (Perceiver model)"),F8e.forEach(t),J2o=i(K),tp=n(K,"LI",{});var T8e=s(tp);vde=n(T8e,"STRONG",{});var Wmt=s(vde);Y2o=r(Wmt,"poolformer"),Wmt.forEach(t),K2o=r(T8e," \u2014 "),Fq=n(T8e,"A",{href:!0});var Hmt=s(Fq);Z2o=r(Hmt,"PoolFormerFeatureExtractor"),Hmt.forEach(t),e4o=r(T8e," (PoolFormer model)"),T8e.forEach(t),o4o=i(K),ap=n(K,"LI",{});var M8e=s(ap);Fde=n(M8e,"STRONG",{});var Umt=s(Fde);r4o=r(Umt,"regnet"),Umt.forEach(t),t4o=r(M8e," \u2014 "),Tq=n(M8e,"A",{href:!0});var Jmt=s(Tq);a4o=r(Jmt,"ConvNextFeatureExtractor"),Jmt.forEach(t),n4o=r(M8e," (RegNet model)"),M8e.forEach(t),s4o=i(K),np=n(K,"LI",{});var E8e=s(np);Tde=n(E8e,"STRONG",{});var Ymt=s(Tde);l4o=r(Ymt,"resnet"),Ymt.forEach(t),i4o=r(E8e," \u2014 "),Mq=n(E8e,"A",{href:!0});var Kmt=s(Mq);d4o=r(Kmt,"ConvNextFeatureExtractor"),Kmt.forEach(t),c4o=r(E8e," (ResNet model)"),E8e.forEach(t),f4o=i(K),sp=n(K,"LI",{});var C8e=s(sp);Mde=n(C8e,"STRONG",{});var Zmt=s(Mde);m4o=r(Zmt,"segformer"),Zmt.forEach(t),g4o=r(C8e," \u2014 "),Eq=n(C8e,"A",{href:!0});var egt=s(Eq);h4o=r(egt,"SegformerFeatureExtractor"),egt.forEach(t),p4o=r(C8e," (SegFormer model)"),C8e.forEach(t),_4o=i(K),lp=n(K,"LI",{});var w8e=s(lp);Ede=n(w8e,"STRONG",{});var ogt=s(Ede);u4o=r(ogt,"speech_to_text"),ogt.forEach(t),b4o=r(w8e," \u2014 "),Cq=n(w8e,"A",{href:!0});var rgt=s(Cq);v4o=r(rgt,"Speech2TextFeatureExtractor"),rgt.forEach(t),F4o=r(w8e," (Speech2Text model)"),w8e.forEach(t),T4o=i(K),ip=n(K,"LI",{});var A8e=s(ip);Cde=n(A8e,"STRONG",{});var tgt=s(Cde);M4o=r(tgt,"swin"),tgt.forEach(t),E4o=r(A8e," \u2014 "),wq=n(A8e,"A",{href:!0});var agt=s(wq);C4o=r(agt,"ViTFeatureExtractor"),agt.forEach(t),w4o=r(A8e," (Swin Transformer model)"),A8e.forEach(t),A4o=i(K),dp=n(K,"LI",{});var L8e=s(dp);wde=n(L8e,"STRONG",{});var ngt=s(wde);L4o=r(ngt,"swinv2"),ngt.forEach(t),y4o=r(L8e," \u2014 "),Aq=n(L8e,"A",{href:!0});var sgt=s(Aq);x4o=r(sgt,"ViTFeatureExtractor"),sgt.forEach(t),$4o=r(L8e," (Swin Transformer V2 model)"),L8e.forEach(t),k4o=i(K),cp=n(K,"LI",{});var y8e=s(cp);Ade=n(y8e,"STRONG",{});var lgt=s(Ade);S4o=r(lgt,"van"),lgt.forEach(t),R4o=r(y8e," \u2014 "),Lq=n(y8e,"A",{href:!0});var igt=s(Lq);P4o=r(igt,"ConvNextFeatureExtractor"),igt.forEach(t),B4o=r(y8e," (VAN model)"),y8e.forEach(t),I4o=i(K),fp=n(K,"LI",{});var x8e=s(fp);Lde=n(x8e,"STRONG",{});var dgt=s(Lde);N4o=r(dgt,"vilt"),dgt.forEach(t),q4o=r(x8e," \u2014 "),yq=n(x8e,"A",{href:!0});var cgt=s(yq);j4o=r(cgt,"ViltFeatureExtractor"),cgt.forEach(t),D4o=r(x8e," (ViLT model)"),x8e.forEach(t),G4o=i(K),mp=n(K,"LI",{});var $8e=s(mp);yde=n($8e,"STRONG",{});var fgt=s(yde);O4o=r(fgt,"vit"),fgt.forEach(t),V4o=r($8e," \u2014 "),xq=n($8e,"A",{href:!0});var mgt=s(xq);X4o=r(mgt,"ViTFeatureExtractor"),mgt.forEach(t),z4o=r($8e," (ViT model)"),$8e.forEach(t),Q4o=i(K),gp=n(K,"LI",{});var k8e=s(gp);xde=n(k8e,"STRONG",{});var ggt=s(xde);W4o=r(ggt,"vit_mae"),ggt.forEach(t),H4o=r(k8e," \u2014 "),$q=n(k8e,"A",{href:!0});var hgt=s($q);U4o=r(hgt,"ViTFeatureExtractor"),hgt.forEach(t),J4o=r(k8e," (ViTMAE model)"),k8e.forEach(t),Y4o=i(K),hp=n(K,"LI",{});var S8e=s(hp);$de=n(S8e,"STRONG",{});var pgt=s($de);K4o=r(pgt,"wav2vec2"),pgt.forEach(t),Z4o=r(S8e," \u2014 "),kq=n(S8e,"A",{href:!0});var _gt=s(kq);ebo=r(_gt,"Wav2Vec2FeatureExtractor"),_gt.forEach(t),obo=r(S8e," (Wav2Vec2 model)"),S8e.forEach(t),rbo=i(K),pp=n(K,"LI",{});var R8e=s(pp);kde=n(R8e,"STRONG",{});var ugt=s(kde);tbo=r(ugt,"wav2vec2-conformer"),ugt.forEach(t),abo=r(R8e," \u2014 "),Sq=n(R8e,"A",{href:!0});var bgt=s(Sq);nbo=r(bgt,"Wav2Vec2FeatureExtractor"),bgt.forEach(t),sbo=r(R8e," (Wav2Vec2-Conformer model)"),R8e.forEach(t),lbo=i(K),_p=n(K,"LI",{});var P8e=s(_p);Sde=n(P8e,"STRONG",{});var vgt=s(Sde);ibo=r(vgt,"yolos"),vgt.forEach(t),dbo=r(P8e," \u2014 "),Rq=n(P8e,"A",{href:!0});var Fgt=s(Rq);cbo=r(Fgt,"YolosFeatureExtractor"),Fgt.forEach(t),fbo=r(P8e," (YOLOS model)"),P8e.forEach(t),K.forEach(t),mbo=i(aa),T(up.$$.fragment,aa),gbo=i(aa),T(bp.$$.fragment,aa),aa.forEach(t),hbo=i(el),vp=n(el,"DIV",{class:!0});var MQe=s(vp);T(LL.$$.fragment,MQe),pbo=i(MQe),Rde=n(MQe,"P",{});var Tgt=s(Rde);_bo=r(Tgt,"Register a new feature extractor for this class."),Tgt.forEach(t),MQe.forEach(t),el.forEach(t),vXe=i(f),ji=n(f,"H2",{class:!0});var EQe=s(ji);Fp=n(EQe,"A",{id:!0,class:!0,href:!0});var Mgt=s(Fp);Pde=n(Mgt,"SPAN",{});var Egt=s(Pde);T(yL.$$.fragment,Egt),Egt.forEach(t),Mgt.forEach(t),ubo=i(EQe),Bde=n(EQe,"SPAN",{});var Cgt=s(Bde);bbo=r(Cgt,"AutoProcessor"),Cgt.forEach(t),EQe.forEach(t),FXe=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(xL.$$.fragment,ol),vbo=i(ol),$L=n(ol,"P",{});var CQe=s($L);Fbo=r(CQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Pq=n(CQe,"A",{href:!0});var wgt=s(Pq);Tbo=r(wgt,"AutoProcessor.from_pretrained()"),wgt.forEach(t),Mbo=r(CQe," class method."),CQe.forEach(t),Ebo=i(ol),kL=n(ol,"P",{});var wQe=s(kL);Cbo=r(wQe,"This class cannot be instantiated directly using "),Ide=n(wQe,"CODE",{});var Agt=s(Ide);wbo=r(Agt,"__init__()"),Agt.forEach(t),Abo=r(wQe," (throws an error)."),wQe.forEach(t),Lbo=i(ol),Ue=n(ol,"DIV",{class:!0});var na=s(Ue);T(SL.$$.fragment,na),ybo=i(na),Nde=n(na,"P",{});var Lgt=s(Nde);xbo=r(Lgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Lgt.forEach(t),$bo=i(na),Di=n(na,"P",{});var Bre=s(Di);kbo=r(Bre,"The processor class to instantiate is selected based on the "),qde=n(Bre,"CODE",{});var ygt=s(qde);Sbo=r(ygt,"model_type"),ygt.forEach(t),Rbo=r(Bre,` property of the config object (either
passed as an argument or loaded from `),jde=n(Bre,"CODE",{});var xgt=s(jde);Pbo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),Bbo=r(Bre," if possible):"),Bre.forEach(t),Ibo=i(na),he=n(na,"UL",{});var be=s(he);Tp=n(be,"LI",{});var B8e=s(Tp);Dde=n(B8e,"STRONG",{});var $gt=s(Dde);Nbo=r($gt,"clip"),$gt.forEach(t),qbo=r(B8e," \u2014 "),Bq=n(B8e,"A",{href:!0});var kgt=s(Bq);jbo=r(kgt,"CLIPProcessor"),kgt.forEach(t),Dbo=r(B8e," (CLIP model)"),B8e.forEach(t),Gbo=i(be),Mp=n(be,"LI",{});var I8e=s(Mp);Gde=n(I8e,"STRONG",{});var Sgt=s(Gde);Obo=r(Sgt,"flava"),Sgt.forEach(t),Vbo=r(I8e," \u2014 "),Ode=n(I8e,"CODE",{});var Rgt=s(Ode);Xbo=r(Rgt,"FLAVAProcessor"),Rgt.forEach(t),zbo=r(I8e," (FLAVA model)"),I8e.forEach(t),Qbo=i(be),Ep=n(be,"LI",{});var N8e=s(Ep);Vde=n(N8e,"STRONG",{});var Pgt=s(Vde);Wbo=r(Pgt,"groupvit"),Pgt.forEach(t),Hbo=r(N8e," \u2014 "),Iq=n(N8e,"A",{href:!0});var Bgt=s(Iq);Ubo=r(Bgt,"CLIPProcessor"),Bgt.forEach(t),Jbo=r(N8e," (GroupViT model)"),N8e.forEach(t),Ybo=i(be),Cp=n(be,"LI",{});var q8e=s(Cp);Xde=n(q8e,"STRONG",{});var Igt=s(Xde);Kbo=r(Igt,"layoutlmv2"),Igt.forEach(t),Zbo=r(q8e," \u2014 "),Nq=n(q8e,"A",{href:!0});var Ngt=s(Nq);evo=r(Ngt,"LayoutLMv2Processor"),Ngt.forEach(t),ovo=r(q8e," (LayoutLMv2 model)"),q8e.forEach(t),rvo=i(be),wp=n(be,"LI",{});var j8e=s(wp);zde=n(j8e,"STRONG",{});var qgt=s(zde);tvo=r(qgt,"layoutlmv3"),qgt.forEach(t),avo=r(j8e," \u2014 "),qq=n(j8e,"A",{href:!0});var jgt=s(qq);nvo=r(jgt,"LayoutLMv3Processor"),jgt.forEach(t),svo=r(j8e," (LayoutLMv3 model)"),j8e.forEach(t),lvo=i(be),Ap=n(be,"LI",{});var D8e=s(Ap);Qde=n(D8e,"STRONG",{});var Dgt=s(Qde);ivo=r(Dgt,"layoutxlm"),Dgt.forEach(t),dvo=r(D8e," \u2014 "),jq=n(D8e,"A",{href:!0});var Ggt=s(jq);cvo=r(Ggt,"LayoutXLMProcessor"),Ggt.forEach(t),fvo=r(D8e," (LayoutXLM model)"),D8e.forEach(t),mvo=i(be),Lp=n(be,"LI",{});var G8e=s(Lp);Wde=n(G8e,"STRONG",{});var Ogt=s(Wde);gvo=r(Ogt,"sew"),Ogt.forEach(t),hvo=r(G8e," \u2014 "),Dq=n(G8e,"A",{href:!0});var Vgt=s(Dq);pvo=r(Vgt,"Wav2Vec2Processor"),Vgt.forEach(t),_vo=r(G8e," (SEW model)"),G8e.forEach(t),uvo=i(be),yp=n(be,"LI",{});var O8e=s(yp);Hde=n(O8e,"STRONG",{});var Xgt=s(Hde);bvo=r(Xgt,"sew-d"),Xgt.forEach(t),vvo=r(O8e," \u2014 "),Gq=n(O8e,"A",{href:!0});var zgt=s(Gq);Fvo=r(zgt,"Wav2Vec2Processor"),zgt.forEach(t),Tvo=r(O8e," (SEW-D model)"),O8e.forEach(t),Mvo=i(be),xp=n(be,"LI",{});var V8e=s(xp);Ude=n(V8e,"STRONG",{});var Qgt=s(Ude);Evo=r(Qgt,"speech_to_text"),Qgt.forEach(t),Cvo=r(V8e," \u2014 "),Oq=n(V8e,"A",{href:!0});var Wgt=s(Oq);wvo=r(Wgt,"Speech2TextProcessor"),Wgt.forEach(t),Avo=r(V8e," (Speech2Text model)"),V8e.forEach(t),Lvo=i(be),$p=n(be,"LI",{});var X8e=s($p);Jde=n(X8e,"STRONG",{});var Hgt=s(Jde);yvo=r(Hgt,"speech_to_text_2"),Hgt.forEach(t),xvo=r(X8e," \u2014 "),Vq=n(X8e,"A",{href:!0});var Ugt=s(Vq);$vo=r(Ugt,"Speech2Text2Processor"),Ugt.forEach(t),kvo=r(X8e," (Speech2Text2 model)"),X8e.forEach(t),Svo=i(be),kp=n(be,"LI",{});var z8e=s(kp);Yde=n(z8e,"STRONG",{});var Jgt=s(Yde);Rvo=r(Jgt,"trocr"),Jgt.forEach(t),Pvo=r(z8e," \u2014 "),Xq=n(z8e,"A",{href:!0});var Ygt=s(Xq);Bvo=r(Ygt,"TrOCRProcessor"),Ygt.forEach(t),Ivo=r(z8e," (TrOCR model)"),z8e.forEach(t),Nvo=i(be),Sp=n(be,"LI",{});var Q8e=s(Sp);Kde=n(Q8e,"STRONG",{});var Kgt=s(Kde);qvo=r(Kgt,"unispeech"),Kgt.forEach(t),jvo=r(Q8e," \u2014 "),zq=n(Q8e,"A",{href:!0});var Zgt=s(zq);Dvo=r(Zgt,"Wav2Vec2Processor"),Zgt.forEach(t),Gvo=r(Q8e," (UniSpeech model)"),Q8e.forEach(t),Ovo=i(be),Rp=n(be,"LI",{});var W8e=s(Rp);Zde=n(W8e,"STRONG",{});var eht=s(Zde);Vvo=r(eht,"unispeech-sat"),eht.forEach(t),Xvo=r(W8e," \u2014 "),Qq=n(W8e,"A",{href:!0});var oht=s(Qq);zvo=r(oht,"Wav2Vec2Processor"),oht.forEach(t),Qvo=r(W8e," (UniSpeechSat model)"),W8e.forEach(t),Wvo=i(be),Pp=n(be,"LI",{});var H8e=s(Pp);ece=n(H8e,"STRONG",{});var rht=s(ece);Hvo=r(rht,"vilt"),rht.forEach(t),Uvo=r(H8e," \u2014 "),Wq=n(H8e,"A",{href:!0});var tht=s(Wq);Jvo=r(tht,"ViltProcessor"),tht.forEach(t),Yvo=r(H8e," (ViLT model)"),H8e.forEach(t),Kvo=i(be),Bp=n(be,"LI",{});var U8e=s(Bp);oce=n(U8e,"STRONG",{});var aht=s(oce);Zvo=r(aht,"vision-text-dual-encoder"),aht.forEach(t),eFo=r(U8e," \u2014 "),Hq=n(U8e,"A",{href:!0});var nht=s(Hq);oFo=r(nht,"VisionTextDualEncoderProcessor"),nht.forEach(t),rFo=r(U8e," (VisionTextDualEncoder model)"),U8e.forEach(t),tFo=i(be),Ip=n(be,"LI",{});var J8e=s(Ip);rce=n(J8e,"STRONG",{});var sht=s(rce);aFo=r(sht,"wav2vec2"),sht.forEach(t),nFo=r(J8e," \u2014 "),Uq=n(J8e,"A",{href:!0});var lht=s(Uq);sFo=r(lht,"Wav2Vec2Processor"),lht.forEach(t),lFo=r(J8e," (Wav2Vec2 model)"),J8e.forEach(t),iFo=i(be),Np=n(be,"LI",{});var Y8e=s(Np);tce=n(Y8e,"STRONG",{});var iht=s(tce);dFo=r(iht,"wav2vec2-conformer"),iht.forEach(t),cFo=r(Y8e," \u2014 "),Jq=n(Y8e,"A",{href:!0});var dht=s(Jq);fFo=r(dht,"Wav2Vec2Processor"),dht.forEach(t),mFo=r(Y8e," (Wav2Vec2-Conformer model)"),Y8e.forEach(t),gFo=i(be),qp=n(be,"LI",{});var K8e=s(qp);ace=n(K8e,"STRONG",{});var cht=s(ace);hFo=r(cht,"wavlm"),cht.forEach(t),pFo=r(K8e," \u2014 "),Yq=n(K8e,"A",{href:!0});var fht=s(Yq);_Fo=r(fht,"Wav2Vec2Processor"),fht.forEach(t),uFo=r(K8e," (WavLM model)"),K8e.forEach(t),be.forEach(t),bFo=i(na),T(jp.$$.fragment,na),vFo=i(na),T(Dp.$$.fragment,na),na.forEach(t),FFo=i(ol),Gp=n(ol,"DIV",{class:!0});var AQe=s(Gp);T(RL.$$.fragment,AQe),TFo=i(AQe),nce=n(AQe,"P",{});var mht=s(nce);MFo=r(mht,"Register a new processor for this class."),mht.forEach(t),AQe.forEach(t),ol.forEach(t),TXe=i(f),Gi=n(f,"H2",{class:!0});var LQe=s(Gi);Op=n(LQe,"A",{id:!0,class:!0,href:!0});var ght=s(Op);sce=n(ght,"SPAN",{});var hht=s(sce);T(PL.$$.fragment,hht),hht.forEach(t),ght.forEach(t),EFo=i(LQe),lce=n(LQe,"SPAN",{});var pht=s(lce);CFo=r(pht,"AutoModel"),pht.forEach(t),LQe.forEach(t),MXe=i(f),xo=n(f,"DIV",{class:!0});var rl=s(xo);T(BL.$$.fragment,rl),wFo=i(rl),Oi=n(rl,"P",{});var Ire=s(Oi);AFo=r(Ire,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Kq=n(Ire,"A",{href:!0});var _ht=s(Kq);LFo=r(_ht,"from_pretrained()"),_ht.forEach(t),yFo=r(Ire," class method or the "),Zq=n(Ire,"A",{href:!0});var uht=s(Zq);xFo=r(uht,"from_config()"),uht.forEach(t),$Fo=r(Ire,` class
method.`),Ire.forEach(t),kFo=i(rl),IL=n(rl,"P",{});var yQe=s(IL);SFo=r(yQe,"This class cannot be instantiated directly using "),ice=n(yQe,"CODE",{});var bht=s(ice);RFo=r(bht,"__init__()"),bht.forEach(t),PFo=r(yQe," (throws an error)."),yQe.forEach(t),BFo=i(rl),lt=n(rl,"DIV",{class:!0});var fw=s(lt);T(NL.$$.fragment,fw),IFo=i(fw),dce=n(fw,"P",{});var vht=s(dce);NFo=r(vht,"Instantiates one of the base model classes of the library from a configuration."),vht.forEach(t),qFo=i(fw),Vi=n(fw,"P",{});var Nre=s(Vi);jFo=r(Nre,`Note:
Loading a model from its configuration file does `),cce=n(Nre,"STRONG",{});var Fht=s(cce);DFo=r(Fht,"not"),Fht.forEach(t),GFo=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=n(Nre,"A",{href:!0});var Tht=s(ej);OFo=r(Tht,"from_pretrained()"),Tht.forEach(t),VFo=r(Nre," to load the model weights."),Nre.forEach(t),XFo=i(fw),T(Vp.$$.fragment,fw),fw.forEach(t),zFo=i(rl),Je=n(rl,"DIV",{class:!0});var sa=s(Je);T(qL.$$.fragment,sa),QFo=i(sa),fce=n(sa,"P",{});var Mht=s(fce);WFo=r(Mht,"Instantiate one of the base model classes of the library from a pretrained model."),Mht.forEach(t),HFo=i(sa),Ia=n(sa,"P",{});var mw=s(Ia);UFo=r(mw,"The model class to instantiate is selected based on the "),mce=n(mw,"CODE",{});var Eht=s(mce);JFo=r(Eht,"model_type"),Eht.forEach(t),YFo=r(mw,` property of the config object (either
passed as an argument or loaded from `),gce=n(mw,"CODE",{});var Cht=s(gce);KFo=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),ZFo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(mw,"CODE",{});var wht=s(hce);e6o=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),o6o=r(mw,":"),mw.forEach(t),r6o=i(sa),y=n(sa,"UL",{});var x=s(y);Xp=n(x,"LI",{});var Z8e=s(Xp);pce=n(Z8e,"STRONG",{});var Aht=s(pce);t6o=r(Aht,"albert"),Aht.forEach(t),a6o=r(Z8e," \u2014 "),oj=n(Z8e,"A",{href:!0});var Lht=s(oj);n6o=r(Lht,"AlbertModel"),Lht.forEach(t),s6o=r(Z8e," (ALBERT model)"),Z8e.forEach(t),l6o=i(x),zp=n(x,"LI",{});var exe=s(zp);_ce=n(exe,"STRONG",{});var yht=s(_ce);i6o=r(yht,"bart"),yht.forEach(t),d6o=r(exe," \u2014 "),rj=n(exe,"A",{href:!0});var xht=s(rj);c6o=r(xht,"BartModel"),xht.forEach(t),f6o=r(exe," (BART model)"),exe.forEach(t),m6o=i(x),Qp=n(x,"LI",{});var oxe=s(Qp);uce=n(oxe,"STRONG",{});var $ht=s(uce);g6o=r($ht,"beit"),$ht.forEach(t),h6o=r(oxe," \u2014 "),tj=n(oxe,"A",{href:!0});var kht=s(tj);p6o=r(kht,"BeitModel"),kht.forEach(t),_6o=r(oxe," (BEiT model)"),oxe.forEach(t),u6o=i(x),Wp=n(x,"LI",{});var rxe=s(Wp);bce=n(rxe,"STRONG",{});var Sht=s(bce);b6o=r(Sht,"bert"),Sht.forEach(t),v6o=r(rxe," \u2014 "),aj=n(rxe,"A",{href:!0});var Rht=s(aj);F6o=r(Rht,"BertModel"),Rht.forEach(t),T6o=r(rxe," (BERT model)"),rxe.forEach(t),M6o=i(x),Hp=n(x,"LI",{});var txe=s(Hp);vce=n(txe,"STRONG",{});var Pht=s(vce);E6o=r(Pht,"bert-generation"),Pht.forEach(t),C6o=r(txe," \u2014 "),nj=n(txe,"A",{href:!0});var Bht=s(nj);w6o=r(Bht,"BertGenerationEncoder"),Bht.forEach(t),A6o=r(txe," (Bert Generation model)"),txe.forEach(t),L6o=i(x),Up=n(x,"LI",{});var axe=s(Up);Fce=n(axe,"STRONG",{});var Iht=s(Fce);y6o=r(Iht,"big_bird"),Iht.forEach(t),x6o=r(axe," \u2014 "),sj=n(axe,"A",{href:!0});var Nht=s(sj);$6o=r(Nht,"BigBirdModel"),Nht.forEach(t),k6o=r(axe," (BigBird model)"),axe.forEach(t),S6o=i(x),Jp=n(x,"LI",{});var nxe=s(Jp);Tce=n(nxe,"STRONG",{});var qht=s(Tce);R6o=r(qht,"bigbird_pegasus"),qht.forEach(t),P6o=r(nxe," \u2014 "),lj=n(nxe,"A",{href:!0});var jht=s(lj);B6o=r(jht,"BigBirdPegasusModel"),jht.forEach(t),I6o=r(nxe," (BigBird-Pegasus model)"),nxe.forEach(t),N6o=i(x),Yp=n(x,"LI",{});var sxe=s(Yp);Mce=n(sxe,"STRONG",{});var Dht=s(Mce);q6o=r(Dht,"blenderbot"),Dht.forEach(t),j6o=r(sxe," \u2014 "),ij=n(sxe,"A",{href:!0});var Ght=s(ij);D6o=r(Ght,"BlenderbotModel"),Ght.forEach(t),G6o=r(sxe," (Blenderbot model)"),sxe.forEach(t),O6o=i(x),Kp=n(x,"LI",{});var lxe=s(Kp);Ece=n(lxe,"STRONG",{});var Oht=s(Ece);V6o=r(Oht,"blenderbot-small"),Oht.forEach(t),X6o=r(lxe," \u2014 "),dj=n(lxe,"A",{href:!0});var Vht=s(dj);z6o=r(Vht,"BlenderbotSmallModel"),Vht.forEach(t),Q6o=r(lxe," (BlenderbotSmall model)"),lxe.forEach(t),W6o=i(x),Zp=n(x,"LI",{});var ixe=s(Zp);Cce=n(ixe,"STRONG",{});var Xht=s(Cce);H6o=r(Xht,"bloom"),Xht.forEach(t),U6o=r(ixe," \u2014 "),cj=n(ixe,"A",{href:!0});var zht=s(cj);J6o=r(zht,"BloomModel"),zht.forEach(t),Y6o=r(ixe," (BLOOM model)"),ixe.forEach(t),K6o=i(x),e_=n(x,"LI",{});var dxe=s(e_);wce=n(dxe,"STRONG",{});var Qht=s(wce);Z6o=r(Qht,"camembert"),Qht.forEach(t),eTo=r(dxe," \u2014 "),fj=n(dxe,"A",{href:!0});var Wht=s(fj);oTo=r(Wht,"CamembertModel"),Wht.forEach(t),rTo=r(dxe," (CamemBERT model)"),dxe.forEach(t),tTo=i(x),o_=n(x,"LI",{});var cxe=s(o_);Ace=n(cxe,"STRONG",{});var Hht=s(Ace);aTo=r(Hht,"canine"),Hht.forEach(t),nTo=r(cxe," \u2014 "),mj=n(cxe,"A",{href:!0});var Uht=s(mj);sTo=r(Uht,"CanineModel"),Uht.forEach(t),lTo=r(cxe," (CANINE model)"),cxe.forEach(t),iTo=i(x),r_=n(x,"LI",{});var fxe=s(r_);Lce=n(fxe,"STRONG",{});var Jht=s(Lce);dTo=r(Jht,"clip"),Jht.forEach(t),cTo=r(fxe," \u2014 "),gj=n(fxe,"A",{href:!0});var Yht=s(gj);fTo=r(Yht,"CLIPModel"),Yht.forEach(t),mTo=r(fxe," (CLIP model)"),fxe.forEach(t),gTo=i(x),t_=n(x,"LI",{});var mxe=s(t_);yce=n(mxe,"STRONG",{});var Kht=s(yce);hTo=r(Kht,"codegen"),Kht.forEach(t),pTo=r(mxe," \u2014 "),hj=n(mxe,"A",{href:!0});var Zht=s(hj);_To=r(Zht,"CodeGenModel"),Zht.forEach(t),uTo=r(mxe," (CodeGen model)"),mxe.forEach(t),bTo=i(x),a_=n(x,"LI",{});var gxe=s(a_);xce=n(gxe,"STRONG",{});var ept=s(xce);vTo=r(ept,"convbert"),ept.forEach(t),FTo=r(gxe," \u2014 "),pj=n(gxe,"A",{href:!0});var opt=s(pj);TTo=r(opt,"ConvBertModel"),opt.forEach(t),MTo=r(gxe," (ConvBERT model)"),gxe.forEach(t),ETo=i(x),n_=n(x,"LI",{});var hxe=s(n_);$ce=n(hxe,"STRONG",{});var rpt=s($ce);CTo=r(rpt,"convnext"),rpt.forEach(t),wTo=r(hxe," \u2014 "),_j=n(hxe,"A",{href:!0});var tpt=s(_j);ATo=r(tpt,"ConvNextModel"),tpt.forEach(t),LTo=r(hxe," (ConvNeXT model)"),hxe.forEach(t),yTo=i(x),s_=n(x,"LI",{});var pxe=s(s_);kce=n(pxe,"STRONG",{});var apt=s(kce);xTo=r(apt,"ctrl"),apt.forEach(t),$To=r(pxe," \u2014 "),uj=n(pxe,"A",{href:!0});var npt=s(uj);kTo=r(npt,"CTRLModel"),npt.forEach(t),STo=r(pxe," (CTRL model)"),pxe.forEach(t),RTo=i(x),l_=n(x,"LI",{});var _xe=s(l_);Sce=n(_xe,"STRONG",{});var spt=s(Sce);PTo=r(spt,"cvt"),spt.forEach(t),BTo=r(_xe," \u2014 "),bj=n(_xe,"A",{href:!0});var lpt=s(bj);ITo=r(lpt,"CvtModel"),lpt.forEach(t),NTo=r(_xe," (CvT model)"),_xe.forEach(t),qTo=i(x),i_=n(x,"LI",{});var uxe=s(i_);Rce=n(uxe,"STRONG",{});var ipt=s(Rce);jTo=r(ipt,"data2vec-audio"),ipt.forEach(t),DTo=r(uxe," \u2014 "),vj=n(uxe,"A",{href:!0});var dpt=s(vj);GTo=r(dpt,"Data2VecAudioModel"),dpt.forEach(t),OTo=r(uxe," (Data2VecAudio model)"),uxe.forEach(t),VTo=i(x),d_=n(x,"LI",{});var bxe=s(d_);Pce=n(bxe,"STRONG",{});var cpt=s(Pce);XTo=r(cpt,"data2vec-text"),cpt.forEach(t),zTo=r(bxe," \u2014 "),Fj=n(bxe,"A",{href:!0});var fpt=s(Fj);QTo=r(fpt,"Data2VecTextModel"),fpt.forEach(t),WTo=r(bxe," (Data2VecText model)"),bxe.forEach(t),HTo=i(x),c_=n(x,"LI",{});var vxe=s(c_);Bce=n(vxe,"STRONG",{});var mpt=s(Bce);UTo=r(mpt,"data2vec-vision"),mpt.forEach(t),JTo=r(vxe," \u2014 "),Tj=n(vxe,"A",{href:!0});var gpt=s(Tj);YTo=r(gpt,"Data2VecVisionModel"),gpt.forEach(t),KTo=r(vxe," (Data2VecVision model)"),vxe.forEach(t),ZTo=i(x),f_=n(x,"LI",{});var Fxe=s(f_);Ice=n(Fxe,"STRONG",{});var hpt=s(Ice);e7o=r(hpt,"deberta"),hpt.forEach(t),o7o=r(Fxe," \u2014 "),Mj=n(Fxe,"A",{href:!0});var ppt=s(Mj);r7o=r(ppt,"DebertaModel"),ppt.forEach(t),t7o=r(Fxe," (DeBERTa model)"),Fxe.forEach(t),a7o=i(x),m_=n(x,"LI",{});var Txe=s(m_);Nce=n(Txe,"STRONG",{});var _pt=s(Nce);n7o=r(_pt,"deberta-v2"),_pt.forEach(t),s7o=r(Txe," \u2014 "),Ej=n(Txe,"A",{href:!0});var upt=s(Ej);l7o=r(upt,"DebertaV2Model"),upt.forEach(t),i7o=r(Txe," (DeBERTa-v2 model)"),Txe.forEach(t),d7o=i(x),g_=n(x,"LI",{});var Mxe=s(g_);qce=n(Mxe,"STRONG",{});var bpt=s(qce);c7o=r(bpt,"decision_transformer"),bpt.forEach(t),f7o=r(Mxe," \u2014 "),Cj=n(Mxe,"A",{href:!0});var vpt=s(Cj);m7o=r(vpt,"DecisionTransformerModel"),vpt.forEach(t),g7o=r(Mxe," (Decision Transformer model)"),Mxe.forEach(t),h7o=i(x),h_=n(x,"LI",{});var Exe=s(h_);jce=n(Exe,"STRONG",{});var Fpt=s(jce);p7o=r(Fpt,"deit"),Fpt.forEach(t),_7o=r(Exe," \u2014 "),wj=n(Exe,"A",{href:!0});var Tpt=s(wj);u7o=r(Tpt,"DeiTModel"),Tpt.forEach(t),b7o=r(Exe," (DeiT model)"),Exe.forEach(t),v7o=i(x),p_=n(x,"LI",{});var Cxe=s(p_);Dce=n(Cxe,"STRONG",{});var Mpt=s(Dce);F7o=r(Mpt,"detr"),Mpt.forEach(t),T7o=r(Cxe," \u2014 "),Aj=n(Cxe,"A",{href:!0});var Ept=s(Aj);M7o=r(Ept,"DetrModel"),Ept.forEach(t),E7o=r(Cxe," (DETR model)"),Cxe.forEach(t),C7o=i(x),__=n(x,"LI",{});var wxe=s(__);Gce=n(wxe,"STRONG",{});var Cpt=s(Gce);w7o=r(Cpt,"distilbert"),Cpt.forEach(t),A7o=r(wxe," \u2014 "),Lj=n(wxe,"A",{href:!0});var wpt=s(Lj);L7o=r(wpt,"DistilBertModel"),wpt.forEach(t),y7o=r(wxe," (DistilBERT model)"),wxe.forEach(t),x7o=i(x),u_=n(x,"LI",{});var Axe=s(u_);Oce=n(Axe,"STRONG",{});var Apt=s(Oce);$7o=r(Apt,"dpr"),Apt.forEach(t),k7o=r(Axe," \u2014 "),yj=n(Axe,"A",{href:!0});var Lpt=s(yj);S7o=r(Lpt,"DPRQuestionEncoder"),Lpt.forEach(t),R7o=r(Axe," (DPR model)"),Axe.forEach(t),P7o=i(x),b_=n(x,"LI",{});var Lxe=s(b_);Vce=n(Lxe,"STRONG",{});var ypt=s(Vce);B7o=r(ypt,"dpt"),ypt.forEach(t),I7o=r(Lxe," \u2014 "),xj=n(Lxe,"A",{href:!0});var xpt=s(xj);N7o=r(xpt,"DPTModel"),xpt.forEach(t),q7o=r(Lxe," (DPT model)"),Lxe.forEach(t),j7o=i(x),v_=n(x,"LI",{});var yxe=s(v_);Xce=n(yxe,"STRONG",{});var $pt=s(Xce);D7o=r($pt,"electra"),$pt.forEach(t),G7o=r(yxe," \u2014 "),$j=n(yxe,"A",{href:!0});var kpt=s($j);O7o=r(kpt,"ElectraModel"),kpt.forEach(t),V7o=r(yxe," (ELECTRA model)"),yxe.forEach(t),X7o=i(x),F_=n(x,"LI",{});var xxe=s(F_);zce=n(xxe,"STRONG",{});var Spt=s(zce);z7o=r(Spt,"flaubert"),Spt.forEach(t),Q7o=r(xxe," \u2014 "),kj=n(xxe,"A",{href:!0});var Rpt=s(kj);W7o=r(Rpt,"FlaubertModel"),Rpt.forEach(t),H7o=r(xxe," (FlauBERT model)"),xxe.forEach(t),U7o=i(x),T_=n(x,"LI",{});var $xe=s(T_);Qce=n($xe,"STRONG",{});var Ppt=s(Qce);J7o=r(Ppt,"flava"),Ppt.forEach(t),Y7o=r($xe," \u2014 "),Sj=n($xe,"A",{href:!0});var Bpt=s(Sj);K7o=r(Bpt,"FlavaModel"),Bpt.forEach(t),Z7o=r($xe," (FLAVA model)"),$xe.forEach(t),e9o=i(x),M_=n(x,"LI",{});var kxe=s(M_);Wce=n(kxe,"STRONG",{});var Ipt=s(Wce);o9o=r(Ipt,"fnet"),Ipt.forEach(t),r9o=r(kxe," \u2014 "),Rj=n(kxe,"A",{href:!0});var Npt=s(Rj);t9o=r(Npt,"FNetModel"),Npt.forEach(t),a9o=r(kxe," (FNet model)"),kxe.forEach(t),n9o=i(x),E_=n(x,"LI",{});var Sxe=s(E_);Hce=n(Sxe,"STRONG",{});var qpt=s(Hce);s9o=r(qpt,"fsmt"),qpt.forEach(t),l9o=r(Sxe," \u2014 "),Pj=n(Sxe,"A",{href:!0});var jpt=s(Pj);i9o=r(jpt,"FSMTModel"),jpt.forEach(t),d9o=r(Sxe," (FairSeq Machine-Translation model)"),Sxe.forEach(t),c9o=i(x),Hs=n(x,"LI",{});var PS=s(Hs);Uce=n(PS,"STRONG",{});var Dpt=s(Uce);f9o=r(Dpt,"funnel"),Dpt.forEach(t),m9o=r(PS," \u2014 "),Bj=n(PS,"A",{href:!0});var Gpt=s(Bj);g9o=r(Gpt,"FunnelModel"),Gpt.forEach(t),h9o=r(PS," or "),Ij=n(PS,"A",{href:!0});var Opt=s(Ij);p9o=r(Opt,"FunnelBaseModel"),Opt.forEach(t),_9o=r(PS," (Funnel Transformer model)"),PS.forEach(t),u9o=i(x),C_=n(x,"LI",{});var Rxe=s(C_);Jce=n(Rxe,"STRONG",{});var Vpt=s(Jce);b9o=r(Vpt,"glpn"),Vpt.forEach(t),v9o=r(Rxe," \u2014 "),Nj=n(Rxe,"A",{href:!0});var Xpt=s(Nj);F9o=r(Xpt,"GLPNModel"),Xpt.forEach(t),T9o=r(Rxe," (GLPN model)"),Rxe.forEach(t),M9o=i(x),w_=n(x,"LI",{});var Pxe=s(w_);Yce=n(Pxe,"STRONG",{});var zpt=s(Yce);E9o=r(zpt,"gpt2"),zpt.forEach(t),C9o=r(Pxe," \u2014 "),qj=n(Pxe,"A",{href:!0});var Qpt=s(qj);w9o=r(Qpt,"GPT2Model"),Qpt.forEach(t),A9o=r(Pxe," (OpenAI GPT-2 model)"),Pxe.forEach(t),L9o=i(x),A_=n(x,"LI",{});var Bxe=s(A_);Kce=n(Bxe,"STRONG",{});var Wpt=s(Kce);y9o=r(Wpt,"gpt_neo"),Wpt.forEach(t),x9o=r(Bxe," \u2014 "),jj=n(Bxe,"A",{href:!0});var Hpt=s(jj);$9o=r(Hpt,"GPTNeoModel"),Hpt.forEach(t),k9o=r(Bxe," (GPT Neo model)"),Bxe.forEach(t),S9o=i(x),L_=n(x,"LI",{});var Ixe=s(L_);Zce=n(Ixe,"STRONG",{});var Upt=s(Zce);R9o=r(Upt,"gpt_neox"),Upt.forEach(t),P9o=r(Ixe," \u2014 "),Dj=n(Ixe,"A",{href:!0});var Jpt=s(Dj);B9o=r(Jpt,"GPTNeoXModel"),Jpt.forEach(t),I9o=r(Ixe," (GPT NeoX model)"),Ixe.forEach(t),N9o=i(x),y_=n(x,"LI",{});var Nxe=s(y_);efe=n(Nxe,"STRONG",{});var Ypt=s(efe);q9o=r(Ypt,"gptj"),Ypt.forEach(t),j9o=r(Nxe," \u2014 "),Gj=n(Nxe,"A",{href:!0});var Kpt=s(Gj);D9o=r(Kpt,"GPTJModel"),Kpt.forEach(t),G9o=r(Nxe," (GPT-J model)"),Nxe.forEach(t),O9o=i(x),x_=n(x,"LI",{});var qxe=s(x_);ofe=n(qxe,"STRONG",{});var Zpt=s(ofe);V9o=r(Zpt,"groupvit"),Zpt.forEach(t),X9o=r(qxe," \u2014 "),Oj=n(qxe,"A",{href:!0});var e_t=s(Oj);z9o=r(e_t,"GroupViTModel"),e_t.forEach(t),Q9o=r(qxe," (GroupViT model)"),qxe.forEach(t),W9o=i(x),$_=n(x,"LI",{});var jxe=s($_);rfe=n(jxe,"STRONG",{});var o_t=s(rfe);H9o=r(o_t,"hubert"),o_t.forEach(t),U9o=r(jxe," \u2014 "),Vj=n(jxe,"A",{href:!0});var r_t=s(Vj);J9o=r(r_t,"HubertModel"),r_t.forEach(t),Y9o=r(jxe," (Hubert model)"),jxe.forEach(t),K9o=i(x),k_=n(x,"LI",{});var Dxe=s(k_);tfe=n(Dxe,"STRONG",{});var t_t=s(tfe);Z9o=r(t_t,"ibert"),t_t.forEach(t),eMo=r(Dxe," \u2014 "),Xj=n(Dxe,"A",{href:!0});var a_t=s(Xj);oMo=r(a_t,"IBertModel"),a_t.forEach(t),rMo=r(Dxe," (I-BERT model)"),Dxe.forEach(t),tMo=i(x),S_=n(x,"LI",{});var Gxe=s(S_);afe=n(Gxe,"STRONG",{});var n_t=s(afe);aMo=r(n_t,"imagegpt"),n_t.forEach(t),nMo=r(Gxe," \u2014 "),zj=n(Gxe,"A",{href:!0});var s_t=s(zj);sMo=r(s_t,"ImageGPTModel"),s_t.forEach(t),lMo=r(Gxe," (ImageGPT model)"),Gxe.forEach(t),iMo=i(x),R_=n(x,"LI",{});var Oxe=s(R_);nfe=n(Oxe,"STRONG",{});var l_t=s(nfe);dMo=r(l_t,"layoutlm"),l_t.forEach(t),cMo=r(Oxe," \u2014 "),Qj=n(Oxe,"A",{href:!0});var i_t=s(Qj);fMo=r(i_t,"LayoutLMModel"),i_t.forEach(t),mMo=r(Oxe," (LayoutLM model)"),Oxe.forEach(t),gMo=i(x),P_=n(x,"LI",{});var Vxe=s(P_);sfe=n(Vxe,"STRONG",{});var d_t=s(sfe);hMo=r(d_t,"layoutlmv2"),d_t.forEach(t),pMo=r(Vxe," \u2014 "),Wj=n(Vxe,"A",{href:!0});var c_t=s(Wj);_Mo=r(c_t,"LayoutLMv2Model"),c_t.forEach(t),uMo=r(Vxe," (LayoutLMv2 model)"),Vxe.forEach(t),bMo=i(x),B_=n(x,"LI",{});var Xxe=s(B_);lfe=n(Xxe,"STRONG",{});var f_t=s(lfe);vMo=r(f_t,"layoutlmv3"),f_t.forEach(t),FMo=r(Xxe," \u2014 "),Hj=n(Xxe,"A",{href:!0});var m_t=s(Hj);TMo=r(m_t,"LayoutLMv3Model"),m_t.forEach(t),MMo=r(Xxe," (LayoutLMv3 model)"),Xxe.forEach(t),EMo=i(x),I_=n(x,"LI",{});var zxe=s(I_);ife=n(zxe,"STRONG",{});var g_t=s(ife);CMo=r(g_t,"led"),g_t.forEach(t),wMo=r(zxe," \u2014 "),Uj=n(zxe,"A",{href:!0});var h_t=s(Uj);AMo=r(h_t,"LEDModel"),h_t.forEach(t),LMo=r(zxe," (LED model)"),zxe.forEach(t),yMo=i(x),N_=n(x,"LI",{});var Qxe=s(N_);dfe=n(Qxe,"STRONG",{});var p_t=s(dfe);xMo=r(p_t,"levit"),p_t.forEach(t),$Mo=r(Qxe," \u2014 "),Jj=n(Qxe,"A",{href:!0});var __t=s(Jj);kMo=r(__t,"LevitModel"),__t.forEach(t),SMo=r(Qxe," (LeViT model)"),Qxe.forEach(t),RMo=i(x),q_=n(x,"LI",{});var Wxe=s(q_);cfe=n(Wxe,"STRONG",{});var u_t=s(cfe);PMo=r(u_t,"longformer"),u_t.forEach(t),BMo=r(Wxe," \u2014 "),Yj=n(Wxe,"A",{href:!0});var b_t=s(Yj);IMo=r(b_t,"LongformerModel"),b_t.forEach(t),NMo=r(Wxe," (Longformer model)"),Wxe.forEach(t),qMo=i(x),j_=n(x,"LI",{});var Hxe=s(j_);ffe=n(Hxe,"STRONG",{});var v_t=s(ffe);jMo=r(v_t,"longt5"),v_t.forEach(t),DMo=r(Hxe," \u2014 "),Kj=n(Hxe,"A",{href:!0});var F_t=s(Kj);GMo=r(F_t,"LongT5Model"),F_t.forEach(t),OMo=r(Hxe," (LongT5 model)"),Hxe.forEach(t),VMo=i(x),D_=n(x,"LI",{});var Uxe=s(D_);mfe=n(Uxe,"STRONG",{});var T_t=s(mfe);XMo=r(T_t,"luke"),T_t.forEach(t),zMo=r(Uxe," \u2014 "),Zj=n(Uxe,"A",{href:!0});var M_t=s(Zj);QMo=r(M_t,"LukeModel"),M_t.forEach(t),WMo=r(Uxe," (LUKE model)"),Uxe.forEach(t),HMo=i(x),G_=n(x,"LI",{});var Jxe=s(G_);gfe=n(Jxe,"STRONG",{});var E_t=s(gfe);UMo=r(E_t,"lxmert"),E_t.forEach(t),JMo=r(Jxe," \u2014 "),eD=n(Jxe,"A",{href:!0});var C_t=s(eD);YMo=r(C_t,"LxmertModel"),C_t.forEach(t),KMo=r(Jxe," (LXMERT model)"),Jxe.forEach(t),ZMo=i(x),O_=n(x,"LI",{});var Yxe=s(O_);hfe=n(Yxe,"STRONG",{});var w_t=s(hfe);eEo=r(w_t,"m2m_100"),w_t.forEach(t),oEo=r(Yxe," \u2014 "),oD=n(Yxe,"A",{href:!0});var A_t=s(oD);rEo=r(A_t,"M2M100Model"),A_t.forEach(t),tEo=r(Yxe," (M2M100 model)"),Yxe.forEach(t),aEo=i(x),V_=n(x,"LI",{});var Kxe=s(V_);pfe=n(Kxe,"STRONG",{});var L_t=s(pfe);nEo=r(L_t,"marian"),L_t.forEach(t),sEo=r(Kxe," \u2014 "),rD=n(Kxe,"A",{href:!0});var y_t=s(rD);lEo=r(y_t,"MarianModel"),y_t.forEach(t),iEo=r(Kxe," (Marian model)"),Kxe.forEach(t),dEo=i(x),X_=n(x,"LI",{});var Zxe=s(X_);_fe=n(Zxe,"STRONG",{});var x_t=s(_fe);cEo=r(x_t,"maskformer"),x_t.forEach(t),fEo=r(Zxe," \u2014 "),tD=n(Zxe,"A",{href:!0});var $_t=s(tD);mEo=r($_t,"MaskFormerModel"),$_t.forEach(t),gEo=r(Zxe," (MaskFormer model)"),Zxe.forEach(t),hEo=i(x),z_=n(x,"LI",{});var e$e=s(z_);ufe=n(e$e,"STRONG",{});var k_t=s(ufe);pEo=r(k_t,"mbart"),k_t.forEach(t),_Eo=r(e$e," \u2014 "),aD=n(e$e,"A",{href:!0});var S_t=s(aD);uEo=r(S_t,"MBartModel"),S_t.forEach(t),bEo=r(e$e," (mBART model)"),e$e.forEach(t),vEo=i(x),Q_=n(x,"LI",{});var o$e=s(Q_);bfe=n(o$e,"STRONG",{});var R_t=s(bfe);FEo=r(R_t,"mctct"),R_t.forEach(t),TEo=r(o$e," \u2014 "),nD=n(o$e,"A",{href:!0});var P_t=s(nD);MEo=r(P_t,"MCTCTModel"),P_t.forEach(t),EEo=r(o$e," (M-CTC-T model)"),o$e.forEach(t),CEo=i(x),W_=n(x,"LI",{});var r$e=s(W_);vfe=n(r$e,"STRONG",{});var B_t=s(vfe);wEo=r(B_t,"megatron-bert"),B_t.forEach(t),AEo=r(r$e," \u2014 "),sD=n(r$e,"A",{href:!0});var I_t=s(sD);LEo=r(I_t,"MegatronBertModel"),I_t.forEach(t),yEo=r(r$e," (Megatron-BERT model)"),r$e.forEach(t),xEo=i(x),H_=n(x,"LI",{});var t$e=s(H_);Ffe=n(t$e,"STRONG",{});var N_t=s(Ffe);$Eo=r(N_t,"mobilebert"),N_t.forEach(t),kEo=r(t$e," \u2014 "),lD=n(t$e,"A",{href:!0});var q_t=s(lD);SEo=r(q_t,"MobileBertModel"),q_t.forEach(t),REo=r(t$e," (MobileBERT model)"),t$e.forEach(t),PEo=i(x),U_=n(x,"LI",{});var a$e=s(U_);Tfe=n(a$e,"STRONG",{});var j_t=s(Tfe);BEo=r(j_t,"mobilevit"),j_t.forEach(t),IEo=r(a$e," \u2014 "),iD=n(a$e,"A",{href:!0});var D_t=s(iD);NEo=r(D_t,"MobileViTModel"),D_t.forEach(t),qEo=r(a$e," (MobileViT model)"),a$e.forEach(t),jEo=i(x),J_=n(x,"LI",{});var n$e=s(J_);Mfe=n(n$e,"STRONG",{});var G_t=s(Mfe);DEo=r(G_t,"mpnet"),G_t.forEach(t),GEo=r(n$e," \u2014 "),dD=n(n$e,"A",{href:!0});var O_t=s(dD);OEo=r(O_t,"MPNetModel"),O_t.forEach(t),VEo=r(n$e," (MPNet model)"),n$e.forEach(t),XEo=i(x),Y_=n(x,"LI",{});var s$e=s(Y_);Efe=n(s$e,"STRONG",{});var V_t=s(Efe);zEo=r(V_t,"mt5"),V_t.forEach(t),QEo=r(s$e," \u2014 "),cD=n(s$e,"A",{href:!0});var X_t=s(cD);WEo=r(X_t,"MT5Model"),X_t.forEach(t),HEo=r(s$e," (MT5 model)"),s$e.forEach(t),UEo=i(x),K_=n(x,"LI",{});var l$e=s(K_);Cfe=n(l$e,"STRONG",{});var z_t=s(Cfe);JEo=r(z_t,"mvp"),z_t.forEach(t),YEo=r(l$e," \u2014 "),fD=n(l$e,"A",{href:!0});var Q_t=s(fD);KEo=r(Q_t,"MvpModel"),Q_t.forEach(t),ZEo=r(l$e," (MVP model)"),l$e.forEach(t),eCo=i(x),Z_=n(x,"LI",{});var i$e=s(Z_);wfe=n(i$e,"STRONG",{});var W_t=s(wfe);oCo=r(W_t,"nezha"),W_t.forEach(t),rCo=r(i$e," \u2014 "),mD=n(i$e,"A",{href:!0});var H_t=s(mD);tCo=r(H_t,"NezhaModel"),H_t.forEach(t),aCo=r(i$e," (Nezha model)"),i$e.forEach(t),nCo=i(x),eu=n(x,"LI",{});var d$e=s(eu);Afe=n(d$e,"STRONG",{});var U_t=s(Afe);sCo=r(U_t,"nystromformer"),U_t.forEach(t),lCo=r(d$e," \u2014 "),gD=n(d$e,"A",{href:!0});var J_t=s(gD);iCo=r(J_t,"NystromformerModel"),J_t.forEach(t),dCo=r(d$e," (Nystr\xF6mformer model)"),d$e.forEach(t),cCo=i(x),ou=n(x,"LI",{});var c$e=s(ou);Lfe=n(c$e,"STRONG",{});var Y_t=s(Lfe);fCo=r(Y_t,"openai-gpt"),Y_t.forEach(t),mCo=r(c$e," \u2014 "),hD=n(c$e,"A",{href:!0});var K_t=s(hD);gCo=r(K_t,"OpenAIGPTModel"),K_t.forEach(t),hCo=r(c$e," (OpenAI GPT model)"),c$e.forEach(t),pCo=i(x),ru=n(x,"LI",{});var f$e=s(ru);yfe=n(f$e,"STRONG",{});var Z_t=s(yfe);_Co=r(Z_t,"opt"),Z_t.forEach(t),uCo=r(f$e," \u2014 "),pD=n(f$e,"A",{href:!0});var eut=s(pD);bCo=r(eut,"OPTModel"),eut.forEach(t),vCo=r(f$e," (OPT model)"),f$e.forEach(t),FCo=i(x),tu=n(x,"LI",{});var m$e=s(tu);xfe=n(m$e,"STRONG",{});var out=s(xfe);TCo=r(out,"pegasus"),out.forEach(t),MCo=r(m$e," \u2014 "),_D=n(m$e,"A",{href:!0});var rut=s(_D);ECo=r(rut,"PegasusModel"),rut.forEach(t),CCo=r(m$e," (Pegasus model)"),m$e.forEach(t),wCo=i(x),au=n(x,"LI",{});var g$e=s(au);$fe=n(g$e,"STRONG",{});var tut=s($fe);ACo=r(tut,"perceiver"),tut.forEach(t),LCo=r(g$e," \u2014 "),uD=n(g$e,"A",{href:!0});var aut=s(uD);yCo=r(aut,"PerceiverModel"),aut.forEach(t),xCo=r(g$e," (Perceiver model)"),g$e.forEach(t),$Co=i(x),nu=n(x,"LI",{});var h$e=s(nu);kfe=n(h$e,"STRONG",{});var nut=s(kfe);kCo=r(nut,"plbart"),nut.forEach(t),SCo=r(h$e," \u2014 "),bD=n(h$e,"A",{href:!0});var sut=s(bD);RCo=r(sut,"PLBartModel"),sut.forEach(t),PCo=r(h$e," (PLBart model)"),h$e.forEach(t),BCo=i(x),su=n(x,"LI",{});var p$e=s(su);Sfe=n(p$e,"STRONG",{});var lut=s(Sfe);ICo=r(lut,"poolformer"),lut.forEach(t),NCo=r(p$e," \u2014 "),vD=n(p$e,"A",{href:!0});var iut=s(vD);qCo=r(iut,"PoolFormerModel"),iut.forEach(t),jCo=r(p$e," (PoolFormer model)"),p$e.forEach(t),DCo=i(x),lu=n(x,"LI",{});var _$e=s(lu);Rfe=n(_$e,"STRONG",{});var dut=s(Rfe);GCo=r(dut,"prophetnet"),dut.forEach(t),OCo=r(_$e," \u2014 "),FD=n(_$e,"A",{href:!0});var cut=s(FD);VCo=r(cut,"ProphetNetModel"),cut.forEach(t),XCo=r(_$e," (ProphetNet model)"),_$e.forEach(t),zCo=i(x),iu=n(x,"LI",{});var u$e=s(iu);Pfe=n(u$e,"STRONG",{});var fut=s(Pfe);QCo=r(fut,"qdqbert"),fut.forEach(t),WCo=r(u$e," \u2014 "),TD=n(u$e,"A",{href:!0});var mut=s(TD);HCo=r(mut,"QDQBertModel"),mut.forEach(t),UCo=r(u$e," (QDQBert model)"),u$e.forEach(t),JCo=i(x),du=n(x,"LI",{});var b$e=s(du);Bfe=n(b$e,"STRONG",{});var gut=s(Bfe);YCo=r(gut,"reformer"),gut.forEach(t),KCo=r(b$e," \u2014 "),MD=n(b$e,"A",{href:!0});var hut=s(MD);ZCo=r(hut,"ReformerModel"),hut.forEach(t),e3o=r(b$e," (Reformer model)"),b$e.forEach(t),o3o=i(x),cu=n(x,"LI",{});var v$e=s(cu);Ife=n(v$e,"STRONG",{});var put=s(Ife);r3o=r(put,"regnet"),put.forEach(t),t3o=r(v$e," \u2014 "),ED=n(v$e,"A",{href:!0});var _ut=s(ED);a3o=r(_ut,"RegNetModel"),_ut.forEach(t),n3o=r(v$e," (RegNet model)"),v$e.forEach(t),s3o=i(x),fu=n(x,"LI",{});var F$e=s(fu);Nfe=n(F$e,"STRONG",{});var uut=s(Nfe);l3o=r(uut,"rembert"),uut.forEach(t),i3o=r(F$e," \u2014 "),CD=n(F$e,"A",{href:!0});var but=s(CD);d3o=r(but,"RemBertModel"),but.forEach(t),c3o=r(F$e," (RemBERT model)"),F$e.forEach(t),f3o=i(x),mu=n(x,"LI",{});var T$e=s(mu);qfe=n(T$e,"STRONG",{});var vut=s(qfe);m3o=r(vut,"resnet"),vut.forEach(t),g3o=r(T$e," \u2014 "),wD=n(T$e,"A",{href:!0});var Fut=s(wD);h3o=r(Fut,"ResNetModel"),Fut.forEach(t),p3o=r(T$e," (ResNet model)"),T$e.forEach(t),_3o=i(x),gu=n(x,"LI",{});var M$e=s(gu);jfe=n(M$e,"STRONG",{});var Tut=s(jfe);u3o=r(Tut,"retribert"),Tut.forEach(t),b3o=r(M$e," \u2014 "),AD=n(M$e,"A",{href:!0});var Mut=s(AD);v3o=r(Mut,"RetriBertModel"),Mut.forEach(t),F3o=r(M$e," (RetriBERT model)"),M$e.forEach(t),T3o=i(x),hu=n(x,"LI",{});var E$e=s(hu);Dfe=n(E$e,"STRONG",{});var Eut=s(Dfe);M3o=r(Eut,"roberta"),Eut.forEach(t),E3o=r(E$e," \u2014 "),LD=n(E$e,"A",{href:!0});var Cut=s(LD);C3o=r(Cut,"RobertaModel"),Cut.forEach(t),w3o=r(E$e," (RoBERTa model)"),E$e.forEach(t),A3o=i(x),pu=n(x,"LI",{});var C$e=s(pu);Gfe=n(C$e,"STRONG",{});var wut=s(Gfe);L3o=r(wut,"roformer"),wut.forEach(t),y3o=r(C$e," \u2014 "),yD=n(C$e,"A",{href:!0});var Aut=s(yD);x3o=r(Aut,"RoFormerModel"),Aut.forEach(t),$3o=r(C$e," (RoFormer model)"),C$e.forEach(t),k3o=i(x),_u=n(x,"LI",{});var w$e=s(_u);Ofe=n(w$e,"STRONG",{});var Lut=s(Ofe);S3o=r(Lut,"segformer"),Lut.forEach(t),R3o=r(w$e," \u2014 "),xD=n(w$e,"A",{href:!0});var yut=s(xD);P3o=r(yut,"SegformerModel"),yut.forEach(t),B3o=r(w$e," (SegFormer model)"),w$e.forEach(t),I3o=i(x),uu=n(x,"LI",{});var A$e=s(uu);Vfe=n(A$e,"STRONG",{});var xut=s(Vfe);N3o=r(xut,"sew"),xut.forEach(t),q3o=r(A$e," \u2014 "),$D=n(A$e,"A",{href:!0});var $ut=s($D);j3o=r($ut,"SEWModel"),$ut.forEach(t),D3o=r(A$e," (SEW model)"),A$e.forEach(t),G3o=i(x),bu=n(x,"LI",{});var L$e=s(bu);Xfe=n(L$e,"STRONG",{});var kut=s(Xfe);O3o=r(kut,"sew-d"),kut.forEach(t),V3o=r(L$e," \u2014 "),kD=n(L$e,"A",{href:!0});var Sut=s(kD);X3o=r(Sut,"SEWDModel"),Sut.forEach(t),z3o=r(L$e," (SEW-D model)"),L$e.forEach(t),Q3o=i(x),vu=n(x,"LI",{});var y$e=s(vu);zfe=n(y$e,"STRONG",{});var Rut=s(zfe);W3o=r(Rut,"speech_to_text"),Rut.forEach(t),H3o=r(y$e," \u2014 "),SD=n(y$e,"A",{href:!0});var Put=s(SD);U3o=r(Put,"Speech2TextModel"),Put.forEach(t),J3o=r(y$e," (Speech2Text model)"),y$e.forEach(t),Y3o=i(x),Fu=n(x,"LI",{});var x$e=s(Fu);Qfe=n(x$e,"STRONG",{});var But=s(Qfe);K3o=r(But,"splinter"),But.forEach(t),Z3o=r(x$e," \u2014 "),RD=n(x$e,"A",{href:!0});var Iut=s(RD);e5o=r(Iut,"SplinterModel"),Iut.forEach(t),o5o=r(x$e," (Splinter model)"),x$e.forEach(t),r5o=i(x),Tu=n(x,"LI",{});var $$e=s(Tu);Wfe=n($$e,"STRONG",{});var Nut=s(Wfe);t5o=r(Nut,"squeezebert"),Nut.forEach(t),a5o=r($$e," \u2014 "),PD=n($$e,"A",{href:!0});var qut=s(PD);n5o=r(qut,"SqueezeBertModel"),qut.forEach(t),s5o=r($$e," (SqueezeBERT model)"),$$e.forEach(t),l5o=i(x),Mu=n(x,"LI",{});var k$e=s(Mu);Hfe=n(k$e,"STRONG",{});var jut=s(Hfe);i5o=r(jut,"swin"),jut.forEach(t),d5o=r(k$e," \u2014 "),BD=n(k$e,"A",{href:!0});var Dut=s(BD);c5o=r(Dut,"SwinModel"),Dut.forEach(t),f5o=r(k$e," (Swin Transformer model)"),k$e.forEach(t),m5o=i(x),Eu=n(x,"LI",{});var S$e=s(Eu);Ufe=n(S$e,"STRONG",{});var Gut=s(Ufe);g5o=r(Gut,"swinv2"),Gut.forEach(t),h5o=r(S$e," \u2014 "),ID=n(S$e,"A",{href:!0});var Out=s(ID);p5o=r(Out,"Swinv2Model"),Out.forEach(t),_5o=r(S$e," (Swin Transformer V2 model)"),S$e.forEach(t),u5o=i(x),Cu=n(x,"LI",{});var R$e=s(Cu);Jfe=n(R$e,"STRONG",{});var Vut=s(Jfe);b5o=r(Vut,"t5"),Vut.forEach(t),v5o=r(R$e," \u2014 "),ND=n(R$e,"A",{href:!0});var Xut=s(ND);F5o=r(Xut,"T5Model"),Xut.forEach(t),T5o=r(R$e," (T5 model)"),R$e.forEach(t),M5o=i(x),wu=n(x,"LI",{});var P$e=s(wu);Yfe=n(P$e,"STRONG",{});var zut=s(Yfe);E5o=r(zut,"tapas"),zut.forEach(t),C5o=r(P$e," \u2014 "),qD=n(P$e,"A",{href:!0});var Qut=s(qD);w5o=r(Qut,"TapasModel"),Qut.forEach(t),A5o=r(P$e," (TAPAS model)"),P$e.forEach(t),L5o=i(x),Au=n(x,"LI",{});var B$e=s(Au);Kfe=n(B$e,"STRONG",{});var Wut=s(Kfe);y5o=r(Wut,"trajectory_transformer"),Wut.forEach(t),x5o=r(B$e," \u2014 "),jD=n(B$e,"A",{href:!0});var Hut=s(jD);$5o=r(Hut,"TrajectoryTransformerModel"),Hut.forEach(t),k5o=r(B$e," (Trajectory Transformer model)"),B$e.forEach(t),S5o=i(x),Lu=n(x,"LI",{});var I$e=s(Lu);Zfe=n(I$e,"STRONG",{});var Uut=s(Zfe);R5o=r(Uut,"transfo-xl"),Uut.forEach(t),P5o=r(I$e," \u2014 "),DD=n(I$e,"A",{href:!0});var Jut=s(DD);B5o=r(Jut,"TransfoXLModel"),Jut.forEach(t),I5o=r(I$e," (Transformer-XL model)"),I$e.forEach(t),N5o=i(x),yu=n(x,"LI",{});var N$e=s(yu);eme=n(N$e,"STRONG",{});var Yut=s(eme);q5o=r(Yut,"unispeech"),Yut.forEach(t),j5o=r(N$e," \u2014 "),GD=n(N$e,"A",{href:!0});var Kut=s(GD);D5o=r(Kut,"UniSpeechModel"),Kut.forEach(t),G5o=r(N$e," (UniSpeech model)"),N$e.forEach(t),O5o=i(x),xu=n(x,"LI",{});var q$e=s(xu);ome=n(q$e,"STRONG",{});var Zut=s(ome);V5o=r(Zut,"unispeech-sat"),Zut.forEach(t),X5o=r(q$e," \u2014 "),OD=n(q$e,"A",{href:!0});var e1t=s(OD);z5o=r(e1t,"UniSpeechSatModel"),e1t.forEach(t),Q5o=r(q$e," (UniSpeechSat model)"),q$e.forEach(t),W5o=i(x),$u=n(x,"LI",{});var j$e=s($u);rme=n(j$e,"STRONG",{});var o1t=s(rme);H5o=r(o1t,"van"),o1t.forEach(t),U5o=r(j$e," \u2014 "),VD=n(j$e,"A",{href:!0});var r1t=s(VD);J5o=r(r1t,"VanModel"),r1t.forEach(t),Y5o=r(j$e," (VAN model)"),j$e.forEach(t),K5o=i(x),ku=n(x,"LI",{});var D$e=s(ku);tme=n(D$e,"STRONG",{});var t1t=s(tme);Z5o=r(t1t,"vilt"),t1t.forEach(t),e0o=r(D$e," \u2014 "),XD=n(D$e,"A",{href:!0});var a1t=s(XD);o0o=r(a1t,"ViltModel"),a1t.forEach(t),r0o=r(D$e," (ViLT model)"),D$e.forEach(t),t0o=i(x),Su=n(x,"LI",{});var G$e=s(Su);ame=n(G$e,"STRONG",{});var n1t=s(ame);a0o=r(n1t,"vision-text-dual-encoder"),n1t.forEach(t),n0o=r(G$e," \u2014 "),zD=n(G$e,"A",{href:!0});var s1t=s(zD);s0o=r(s1t,"VisionTextDualEncoderModel"),s1t.forEach(t),l0o=r(G$e," (VisionTextDualEncoder model)"),G$e.forEach(t),i0o=i(x),Ru=n(x,"LI",{});var O$e=s(Ru);nme=n(O$e,"STRONG",{});var l1t=s(nme);d0o=r(l1t,"visual_bert"),l1t.forEach(t),c0o=r(O$e," \u2014 "),QD=n(O$e,"A",{href:!0});var i1t=s(QD);f0o=r(i1t,"VisualBertModel"),i1t.forEach(t),m0o=r(O$e," (VisualBERT model)"),O$e.forEach(t),g0o=i(x),Pu=n(x,"LI",{});var V$e=s(Pu);sme=n(V$e,"STRONG",{});var d1t=s(sme);h0o=r(d1t,"vit"),d1t.forEach(t),p0o=r(V$e," \u2014 "),WD=n(V$e,"A",{href:!0});var c1t=s(WD);_0o=r(c1t,"ViTModel"),c1t.forEach(t),u0o=r(V$e," (ViT model)"),V$e.forEach(t),b0o=i(x),Bu=n(x,"LI",{});var X$e=s(Bu);lme=n(X$e,"STRONG",{});var f1t=s(lme);v0o=r(f1t,"vit_mae"),f1t.forEach(t),F0o=r(X$e," \u2014 "),HD=n(X$e,"A",{href:!0});var m1t=s(HD);T0o=r(m1t,"ViTMAEModel"),m1t.forEach(t),M0o=r(X$e," (ViTMAE model)"),X$e.forEach(t),E0o=i(x),Iu=n(x,"LI",{});var z$e=s(Iu);ime=n(z$e,"STRONG",{});var g1t=s(ime);C0o=r(g1t,"wav2vec2"),g1t.forEach(t),w0o=r(z$e," \u2014 "),UD=n(z$e,"A",{href:!0});var h1t=s(UD);A0o=r(h1t,"Wav2Vec2Model"),h1t.forEach(t),L0o=r(z$e," (Wav2Vec2 model)"),z$e.forEach(t),y0o=i(x),Nu=n(x,"LI",{});var Q$e=s(Nu);dme=n(Q$e,"STRONG",{});var p1t=s(dme);x0o=r(p1t,"wav2vec2-conformer"),p1t.forEach(t),$0o=r(Q$e," \u2014 "),JD=n(Q$e,"A",{href:!0});var _1t=s(JD);k0o=r(_1t,"Wav2Vec2ConformerModel"),_1t.forEach(t),S0o=r(Q$e," (Wav2Vec2-Conformer model)"),Q$e.forEach(t),R0o=i(x),qu=n(x,"LI",{});var W$e=s(qu);cme=n(W$e,"STRONG",{});var u1t=s(cme);P0o=r(u1t,"wavlm"),u1t.forEach(t),B0o=r(W$e," \u2014 "),YD=n(W$e,"A",{href:!0});var b1t=s(YD);I0o=r(b1t,"WavLMModel"),b1t.forEach(t),N0o=r(W$e," (WavLM model)"),W$e.forEach(t),q0o=i(x),ju=n(x,"LI",{});var H$e=s(ju);fme=n(H$e,"STRONG",{});var v1t=s(fme);j0o=r(v1t,"xglm"),v1t.forEach(t),D0o=r(H$e," \u2014 "),KD=n(H$e,"A",{href:!0});var F1t=s(KD);G0o=r(F1t,"XGLMModel"),F1t.forEach(t),O0o=r(H$e," (XGLM model)"),H$e.forEach(t),V0o=i(x),Du=n(x,"LI",{});var U$e=s(Du);mme=n(U$e,"STRONG",{});var T1t=s(mme);X0o=r(T1t,"xlm"),T1t.forEach(t),z0o=r(U$e," \u2014 "),ZD=n(U$e,"A",{href:!0});var M1t=s(ZD);Q0o=r(M1t,"XLMModel"),M1t.forEach(t),W0o=r(U$e," (XLM model)"),U$e.forEach(t),H0o=i(x),Gu=n(x,"LI",{});var J$e=s(Gu);gme=n(J$e,"STRONG",{});var E1t=s(gme);U0o=r(E1t,"xlm-prophetnet"),E1t.forEach(t),J0o=r(J$e," \u2014 "),eG=n(J$e,"A",{href:!0});var C1t=s(eG);Y0o=r(C1t,"XLMProphetNetModel"),C1t.forEach(t),K0o=r(J$e," (XLM-ProphetNet model)"),J$e.forEach(t),Z0o=i(x),Ou=n(x,"LI",{});var Y$e=s(Ou);hme=n(Y$e,"STRONG",{});var w1t=s(hme);ewo=r(w1t,"xlm-roberta"),w1t.forEach(t),owo=r(Y$e," \u2014 "),oG=n(Y$e,"A",{href:!0});var A1t=s(oG);rwo=r(A1t,"XLMRobertaModel"),A1t.forEach(t),two=r(Y$e," (XLM-RoBERTa model)"),Y$e.forEach(t),awo=i(x),Vu=n(x,"LI",{});var K$e=s(Vu);pme=n(K$e,"STRONG",{});var L1t=s(pme);nwo=r(L1t,"xlm-roberta-xl"),L1t.forEach(t),swo=r(K$e," \u2014 "),rG=n(K$e,"A",{href:!0});var y1t=s(rG);lwo=r(y1t,"XLMRobertaXLModel"),y1t.forEach(t),iwo=r(K$e," (XLM-RoBERTa-XL model)"),K$e.forEach(t),dwo=i(x),Xu=n(x,"LI",{});var Z$e=s(Xu);_me=n(Z$e,"STRONG",{});var x1t=s(_me);cwo=r(x1t,"xlnet"),x1t.forEach(t),fwo=r(Z$e," \u2014 "),tG=n(Z$e,"A",{href:!0});var $1t=s(tG);mwo=r($1t,"XLNetModel"),$1t.forEach(t),gwo=r(Z$e," (XLNet model)"),Z$e.forEach(t),hwo=i(x),zu=n(x,"LI",{});var eke=s(zu);ume=n(eke,"STRONG",{});var k1t=s(ume);pwo=r(k1t,"yolos"),k1t.forEach(t),_wo=r(eke," \u2014 "),aG=n(eke,"A",{href:!0});var S1t=s(aG);uwo=r(S1t,"YolosModel"),S1t.forEach(t),bwo=r(eke," (YOLOS model)"),eke.forEach(t),vwo=i(x),Qu=n(x,"LI",{});var oke=s(Qu);bme=n(oke,"STRONG",{});var R1t=s(bme);Fwo=r(R1t,"yoso"),R1t.forEach(t),Two=r(oke," \u2014 "),nG=n(oke,"A",{href:!0});var P1t=s(nG);Mwo=r(P1t,"YosoModel"),P1t.forEach(t),Ewo=r(oke," (YOSO model)"),oke.forEach(t),x.forEach(t),Cwo=i(sa),Wu=n(sa,"P",{});var rke=s(Wu);wwo=r(rke,"The model is set in evaluation mode by default using "),vme=n(rke,"CODE",{});var B1t=s(vme);Awo=r(B1t,"model.eval()"),B1t.forEach(t),Lwo=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(rke,"CODE",{});var I1t=s(Fme);ywo=r(I1t,"model.train()"),I1t.forEach(t),rke.forEach(t),xwo=i(sa),T(Hu.$$.fragment,sa),sa.forEach(t),rl.forEach(t),EXe=i(f),Xi=n(f,"H2",{class:!0});var xQe=s(Xi);Uu=n(xQe,"A",{id:!0,class:!0,href:!0});var N1t=s(Uu);Tme=n(N1t,"SPAN",{});var q1t=s(Tme);T(jL.$$.fragment,q1t),q1t.forEach(t),N1t.forEach(t),$wo=i(xQe),Mme=n(xQe,"SPAN",{});var j1t=s(Mme);kwo=r(j1t,"AutoModelForPreTraining"),j1t.forEach(t),xQe.forEach(t),CXe=i(f),$o=n(f,"DIV",{class:!0});var tl=s($o);T(DL.$$.fragment,tl),Swo=i(tl),zi=n(tl,"P",{});var qre=s(zi);Rwo=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sG=n(qre,"A",{href:!0});var D1t=s(sG);Pwo=r(D1t,"from_pretrained()"),D1t.forEach(t),Bwo=r(qre," class method or the "),lG=n(qre,"A",{href:!0});var G1t=s(lG);Iwo=r(G1t,"from_config()"),G1t.forEach(t),Nwo=r(qre,` class
method.`),qre.forEach(t),qwo=i(tl),GL=n(tl,"P",{});var $Qe=s(GL);jwo=r($Qe,"This class cannot be instantiated directly using "),Eme=n($Qe,"CODE",{});var O1t=s(Eme);Dwo=r(O1t,"__init__()"),O1t.forEach(t),Gwo=r($Qe," (throws an error)."),$Qe.forEach(t),Owo=i(tl),it=n(tl,"DIV",{class:!0});var gw=s(it);T(OL.$$.fragment,gw),Vwo=i(gw),Cme=n(gw,"P",{});var V1t=s(Cme);Xwo=r(V1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V1t.forEach(t),zwo=i(gw),Qi=n(gw,"P",{});var jre=s(Qi);Qwo=r(jre,`Note:
Loading a model from its configuration file does `),wme=n(jre,"STRONG",{});var X1t=s(wme);Wwo=r(X1t,"not"),X1t.forEach(t),Hwo=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(jre,"A",{href:!0});var z1t=s(iG);Uwo=r(z1t,"from_pretrained()"),z1t.forEach(t),Jwo=r(jre," to load the model weights."),jre.forEach(t),Ywo=i(gw),T(Ju.$$.fragment,gw),gw.forEach(t),Kwo=i(tl),Ye=n(tl,"DIV",{class:!0});var la=s(Ye);T(VL.$$.fragment,la),Zwo=i(la),Ame=n(la,"P",{});var Q1t=s(Ame);eAo=r(Q1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q1t.forEach(t),oAo=i(la),Na=n(la,"P",{});var hw=s(Na);rAo=r(hw,"The model class to instantiate is selected based on the "),Lme=n(hw,"CODE",{});var W1t=s(Lme);tAo=r(W1t,"model_type"),W1t.forEach(t),aAo=r(hw,` property of the config object (either
passed as an argument or loaded from `),yme=n(hw,"CODE",{});var H1t=s(yme);nAo=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),sAo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n(hw,"CODE",{});var U1t=s(xme);lAo=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),iAo=r(hw,":"),hw.forEach(t),dAo=i(la),G=n(la,"UL",{});var O=s(G);Yu=n(O,"LI",{});var tke=s(Yu);$me=n(tke,"STRONG",{});var J1t=s($me);cAo=r(J1t,"albert"),J1t.forEach(t),fAo=r(tke," \u2014 "),dG=n(tke,"A",{href:!0});var Y1t=s(dG);mAo=r(Y1t,"AlbertForPreTraining"),Y1t.forEach(t),gAo=r(tke," (ALBERT model)"),tke.forEach(t),hAo=i(O),Ku=n(O,"LI",{});var ake=s(Ku);kme=n(ake,"STRONG",{});var K1t=s(kme);pAo=r(K1t,"bart"),K1t.forEach(t),_Ao=r(ake," \u2014 "),cG=n(ake,"A",{href:!0});var Z1t=s(cG);uAo=r(Z1t,"BartForConditionalGeneration"),Z1t.forEach(t),bAo=r(ake," (BART model)"),ake.forEach(t),vAo=i(O),Zu=n(O,"LI",{});var nke=s(Zu);Sme=n(nke,"STRONG",{});var e2t=s(Sme);FAo=r(e2t,"bert"),e2t.forEach(t),TAo=r(nke," \u2014 "),fG=n(nke,"A",{href:!0});var o2t=s(fG);MAo=r(o2t,"BertForPreTraining"),o2t.forEach(t),EAo=r(nke," (BERT model)"),nke.forEach(t),CAo=i(O),e1=n(O,"LI",{});var ske=s(e1);Rme=n(ske,"STRONG",{});var r2t=s(Rme);wAo=r(r2t,"big_bird"),r2t.forEach(t),AAo=r(ske," \u2014 "),mG=n(ske,"A",{href:!0});var t2t=s(mG);LAo=r(t2t,"BigBirdForPreTraining"),t2t.forEach(t),yAo=r(ske," (BigBird model)"),ske.forEach(t),xAo=i(O),o1=n(O,"LI",{});var lke=s(o1);Pme=n(lke,"STRONG",{});var a2t=s(Pme);$Ao=r(a2t,"bloom"),a2t.forEach(t),kAo=r(lke," \u2014 "),gG=n(lke,"A",{href:!0});var n2t=s(gG);SAo=r(n2t,"BloomForCausalLM"),n2t.forEach(t),RAo=r(lke," (BLOOM model)"),lke.forEach(t),PAo=i(O),r1=n(O,"LI",{});var ike=s(r1);Bme=n(ike,"STRONG",{});var s2t=s(Bme);BAo=r(s2t,"camembert"),s2t.forEach(t),IAo=r(ike," \u2014 "),hG=n(ike,"A",{href:!0});var l2t=s(hG);NAo=r(l2t,"CamembertForMaskedLM"),l2t.forEach(t),qAo=r(ike," (CamemBERT model)"),ike.forEach(t),jAo=i(O),t1=n(O,"LI",{});var dke=s(t1);Ime=n(dke,"STRONG",{});var i2t=s(Ime);DAo=r(i2t,"ctrl"),i2t.forEach(t),GAo=r(dke," \u2014 "),pG=n(dke,"A",{href:!0});var d2t=s(pG);OAo=r(d2t,"CTRLLMHeadModel"),d2t.forEach(t),VAo=r(dke," (CTRL model)"),dke.forEach(t),XAo=i(O),a1=n(O,"LI",{});var cke=s(a1);Nme=n(cke,"STRONG",{});var c2t=s(Nme);zAo=r(c2t,"data2vec-text"),c2t.forEach(t),QAo=r(cke," \u2014 "),_G=n(cke,"A",{href:!0});var f2t=s(_G);WAo=r(f2t,"Data2VecTextForMaskedLM"),f2t.forEach(t),HAo=r(cke," (Data2VecText model)"),cke.forEach(t),UAo=i(O),n1=n(O,"LI",{});var fke=s(n1);qme=n(fke,"STRONG",{});var m2t=s(qme);JAo=r(m2t,"deberta"),m2t.forEach(t),YAo=r(fke," \u2014 "),uG=n(fke,"A",{href:!0});var g2t=s(uG);KAo=r(g2t,"DebertaForMaskedLM"),g2t.forEach(t),ZAo=r(fke," (DeBERTa model)"),fke.forEach(t),eLo=i(O),s1=n(O,"LI",{});var mke=s(s1);jme=n(mke,"STRONG",{});var h2t=s(jme);oLo=r(h2t,"deberta-v2"),h2t.forEach(t),rLo=r(mke," \u2014 "),bG=n(mke,"A",{href:!0});var p2t=s(bG);tLo=r(p2t,"DebertaV2ForMaskedLM"),p2t.forEach(t),aLo=r(mke," (DeBERTa-v2 model)"),mke.forEach(t),nLo=i(O),l1=n(O,"LI",{});var gke=s(l1);Dme=n(gke,"STRONG",{});var _2t=s(Dme);sLo=r(_2t,"distilbert"),_2t.forEach(t),lLo=r(gke," \u2014 "),vG=n(gke,"A",{href:!0});var u2t=s(vG);iLo=r(u2t,"DistilBertForMaskedLM"),u2t.forEach(t),dLo=r(gke," (DistilBERT model)"),gke.forEach(t),cLo=i(O),i1=n(O,"LI",{});var hke=s(i1);Gme=n(hke,"STRONG",{});var b2t=s(Gme);fLo=r(b2t,"electra"),b2t.forEach(t),mLo=r(hke," \u2014 "),FG=n(hke,"A",{href:!0});var v2t=s(FG);gLo=r(v2t,"ElectraForPreTraining"),v2t.forEach(t),hLo=r(hke," (ELECTRA model)"),hke.forEach(t),pLo=i(O),d1=n(O,"LI",{});var pke=s(d1);Ome=n(pke,"STRONG",{});var F2t=s(Ome);_Lo=r(F2t,"flaubert"),F2t.forEach(t),uLo=r(pke," \u2014 "),TG=n(pke,"A",{href:!0});var T2t=s(TG);bLo=r(T2t,"FlaubertWithLMHeadModel"),T2t.forEach(t),vLo=r(pke," (FlauBERT model)"),pke.forEach(t),FLo=i(O),c1=n(O,"LI",{});var _ke=s(c1);Vme=n(_ke,"STRONG",{});var M2t=s(Vme);TLo=r(M2t,"flava"),M2t.forEach(t),MLo=r(_ke," \u2014 "),MG=n(_ke,"A",{href:!0});var E2t=s(MG);ELo=r(E2t,"FlavaForPreTraining"),E2t.forEach(t),CLo=r(_ke," (FLAVA model)"),_ke.forEach(t),wLo=i(O),f1=n(O,"LI",{});var uke=s(f1);Xme=n(uke,"STRONG",{});var C2t=s(Xme);ALo=r(C2t,"fnet"),C2t.forEach(t),LLo=r(uke," \u2014 "),EG=n(uke,"A",{href:!0});var w2t=s(EG);yLo=r(w2t,"FNetForPreTraining"),w2t.forEach(t),xLo=r(uke," (FNet model)"),uke.forEach(t),$Lo=i(O),m1=n(O,"LI",{});var bke=s(m1);zme=n(bke,"STRONG",{});var A2t=s(zme);kLo=r(A2t,"fsmt"),A2t.forEach(t),SLo=r(bke," \u2014 "),CG=n(bke,"A",{href:!0});var L2t=s(CG);RLo=r(L2t,"FSMTForConditionalGeneration"),L2t.forEach(t),PLo=r(bke," (FairSeq Machine-Translation model)"),bke.forEach(t),BLo=i(O),g1=n(O,"LI",{});var vke=s(g1);Qme=n(vke,"STRONG",{});var y2t=s(Qme);ILo=r(y2t,"funnel"),y2t.forEach(t),NLo=r(vke," \u2014 "),wG=n(vke,"A",{href:!0});var x2t=s(wG);qLo=r(x2t,"FunnelForPreTraining"),x2t.forEach(t),jLo=r(vke," (Funnel Transformer model)"),vke.forEach(t),DLo=i(O),h1=n(O,"LI",{});var Fke=s(h1);Wme=n(Fke,"STRONG",{});var $2t=s(Wme);GLo=r($2t,"gpt2"),$2t.forEach(t),OLo=r(Fke," \u2014 "),AG=n(Fke,"A",{href:!0});var k2t=s(AG);VLo=r(k2t,"GPT2LMHeadModel"),k2t.forEach(t),XLo=r(Fke," (OpenAI GPT-2 model)"),Fke.forEach(t),zLo=i(O),p1=n(O,"LI",{});var Tke=s(p1);Hme=n(Tke,"STRONG",{});var S2t=s(Hme);QLo=r(S2t,"ibert"),S2t.forEach(t),WLo=r(Tke," \u2014 "),LG=n(Tke,"A",{href:!0});var R2t=s(LG);HLo=r(R2t,"IBertForMaskedLM"),R2t.forEach(t),ULo=r(Tke," (I-BERT model)"),Tke.forEach(t),JLo=i(O),_1=n(O,"LI",{});var Mke=s(_1);Ume=n(Mke,"STRONG",{});var P2t=s(Ume);YLo=r(P2t,"layoutlm"),P2t.forEach(t),KLo=r(Mke," \u2014 "),yG=n(Mke,"A",{href:!0});var B2t=s(yG);ZLo=r(B2t,"LayoutLMForMaskedLM"),B2t.forEach(t),eyo=r(Mke," (LayoutLM model)"),Mke.forEach(t),oyo=i(O),u1=n(O,"LI",{});var Eke=s(u1);Jme=n(Eke,"STRONG",{});var I2t=s(Jme);ryo=r(I2t,"longformer"),I2t.forEach(t),tyo=r(Eke," \u2014 "),xG=n(Eke,"A",{href:!0});var N2t=s(xG);ayo=r(N2t,"LongformerForMaskedLM"),N2t.forEach(t),nyo=r(Eke," (Longformer model)"),Eke.forEach(t),syo=i(O),b1=n(O,"LI",{});var Cke=s(b1);Yme=n(Cke,"STRONG",{});var q2t=s(Yme);lyo=r(q2t,"lxmert"),q2t.forEach(t),iyo=r(Cke," \u2014 "),$G=n(Cke,"A",{href:!0});var j2t=s($G);dyo=r(j2t,"LxmertForPreTraining"),j2t.forEach(t),cyo=r(Cke," (LXMERT model)"),Cke.forEach(t),fyo=i(O),v1=n(O,"LI",{});var wke=s(v1);Kme=n(wke,"STRONG",{});var D2t=s(Kme);myo=r(D2t,"megatron-bert"),D2t.forEach(t),gyo=r(wke," \u2014 "),kG=n(wke,"A",{href:!0});var G2t=s(kG);hyo=r(G2t,"MegatronBertForPreTraining"),G2t.forEach(t),pyo=r(wke," (Megatron-BERT model)"),wke.forEach(t),_yo=i(O),F1=n(O,"LI",{});var Ake=s(F1);Zme=n(Ake,"STRONG",{});var O2t=s(Zme);uyo=r(O2t,"mobilebert"),O2t.forEach(t),byo=r(Ake," \u2014 "),SG=n(Ake,"A",{href:!0});var V2t=s(SG);vyo=r(V2t,"MobileBertForPreTraining"),V2t.forEach(t),Fyo=r(Ake," (MobileBERT model)"),Ake.forEach(t),Tyo=i(O),T1=n(O,"LI",{});var Lke=s(T1);ege=n(Lke,"STRONG",{});var X2t=s(ege);Myo=r(X2t,"mpnet"),X2t.forEach(t),Eyo=r(Lke," \u2014 "),RG=n(Lke,"A",{href:!0});var z2t=s(RG);Cyo=r(z2t,"MPNetForMaskedLM"),z2t.forEach(t),wyo=r(Lke," (MPNet model)"),Lke.forEach(t),Ayo=i(O),M1=n(O,"LI",{});var yke=s(M1);oge=n(yke,"STRONG",{});var Q2t=s(oge);Lyo=r(Q2t,"mvp"),Q2t.forEach(t),yyo=r(yke," \u2014 "),PG=n(yke,"A",{href:!0});var W2t=s(PG);xyo=r(W2t,"MvpForConditionalGeneration"),W2t.forEach(t),$yo=r(yke," (MVP model)"),yke.forEach(t),kyo=i(O),E1=n(O,"LI",{});var xke=s(E1);rge=n(xke,"STRONG",{});var H2t=s(rge);Syo=r(H2t,"nezha"),H2t.forEach(t),Ryo=r(xke," \u2014 "),BG=n(xke,"A",{href:!0});var U2t=s(BG);Pyo=r(U2t,"NezhaForPreTraining"),U2t.forEach(t),Byo=r(xke," (Nezha model)"),xke.forEach(t),Iyo=i(O),C1=n(O,"LI",{});var $ke=s(C1);tge=n($ke,"STRONG",{});var J2t=s(tge);Nyo=r(J2t,"openai-gpt"),J2t.forEach(t),qyo=r($ke," \u2014 "),IG=n($ke,"A",{href:!0});var Y2t=s(IG);jyo=r(Y2t,"OpenAIGPTLMHeadModel"),Y2t.forEach(t),Dyo=r($ke," (OpenAI GPT model)"),$ke.forEach(t),Gyo=i(O),w1=n(O,"LI",{});var kke=s(w1);age=n(kke,"STRONG",{});var K2t=s(age);Oyo=r(K2t,"retribert"),K2t.forEach(t),Vyo=r(kke," \u2014 "),NG=n(kke,"A",{href:!0});var Z2t=s(NG);Xyo=r(Z2t,"RetriBertModel"),Z2t.forEach(t),zyo=r(kke," (RetriBERT model)"),kke.forEach(t),Qyo=i(O),A1=n(O,"LI",{});var Ske=s(A1);nge=n(Ske,"STRONG",{});var e4t=s(nge);Wyo=r(e4t,"roberta"),e4t.forEach(t),Hyo=r(Ske," \u2014 "),qG=n(Ske,"A",{href:!0});var o4t=s(qG);Uyo=r(o4t,"RobertaForMaskedLM"),o4t.forEach(t),Jyo=r(Ske," (RoBERTa model)"),Ske.forEach(t),Yyo=i(O),L1=n(O,"LI",{});var Rke=s(L1);sge=n(Rke,"STRONG",{});var r4t=s(sge);Kyo=r(r4t,"splinter"),r4t.forEach(t),Zyo=r(Rke," \u2014 "),jG=n(Rke,"A",{href:!0});var t4t=s(jG);e8o=r(t4t,"SplinterForPreTraining"),t4t.forEach(t),o8o=r(Rke," (Splinter model)"),Rke.forEach(t),r8o=i(O),y1=n(O,"LI",{});var Pke=s(y1);lge=n(Pke,"STRONG",{});var a4t=s(lge);t8o=r(a4t,"squeezebert"),a4t.forEach(t),a8o=r(Pke," \u2014 "),DG=n(Pke,"A",{href:!0});var n4t=s(DG);n8o=r(n4t,"SqueezeBertForMaskedLM"),n4t.forEach(t),s8o=r(Pke," (SqueezeBERT model)"),Pke.forEach(t),l8o=i(O),x1=n(O,"LI",{});var Bke=s(x1);ige=n(Bke,"STRONG",{});var s4t=s(ige);i8o=r(s4t,"t5"),s4t.forEach(t),d8o=r(Bke," \u2014 "),GG=n(Bke,"A",{href:!0});var l4t=s(GG);c8o=r(l4t,"T5ForConditionalGeneration"),l4t.forEach(t),f8o=r(Bke," (T5 model)"),Bke.forEach(t),m8o=i(O),$1=n(O,"LI",{});var Ike=s($1);dge=n(Ike,"STRONG",{});var i4t=s(dge);g8o=r(i4t,"tapas"),i4t.forEach(t),h8o=r(Ike," \u2014 "),OG=n(Ike,"A",{href:!0});var d4t=s(OG);p8o=r(d4t,"TapasForMaskedLM"),d4t.forEach(t),_8o=r(Ike," (TAPAS model)"),Ike.forEach(t),u8o=i(O),k1=n(O,"LI",{});var Nke=s(k1);cge=n(Nke,"STRONG",{});var c4t=s(cge);b8o=r(c4t,"transfo-xl"),c4t.forEach(t),v8o=r(Nke," \u2014 "),VG=n(Nke,"A",{href:!0});var f4t=s(VG);F8o=r(f4t,"TransfoXLLMHeadModel"),f4t.forEach(t),T8o=r(Nke," (Transformer-XL model)"),Nke.forEach(t),M8o=i(O),S1=n(O,"LI",{});var qke=s(S1);fge=n(qke,"STRONG",{});var m4t=s(fge);E8o=r(m4t,"unispeech"),m4t.forEach(t),C8o=r(qke," \u2014 "),XG=n(qke,"A",{href:!0});var g4t=s(XG);w8o=r(g4t,"UniSpeechForPreTraining"),g4t.forEach(t),A8o=r(qke," (UniSpeech model)"),qke.forEach(t),L8o=i(O),R1=n(O,"LI",{});var jke=s(R1);mge=n(jke,"STRONG",{});var h4t=s(mge);y8o=r(h4t,"unispeech-sat"),h4t.forEach(t),x8o=r(jke," \u2014 "),zG=n(jke,"A",{href:!0});var p4t=s(zG);$8o=r(p4t,"UniSpeechSatForPreTraining"),p4t.forEach(t),k8o=r(jke," (UniSpeechSat model)"),jke.forEach(t),S8o=i(O),P1=n(O,"LI",{});var Dke=s(P1);gge=n(Dke,"STRONG",{});var _4t=s(gge);R8o=r(_4t,"visual_bert"),_4t.forEach(t),P8o=r(Dke," \u2014 "),QG=n(Dke,"A",{href:!0});var u4t=s(QG);B8o=r(u4t,"VisualBertForPreTraining"),u4t.forEach(t),I8o=r(Dke," (VisualBERT model)"),Dke.forEach(t),N8o=i(O),B1=n(O,"LI",{});var Gke=s(B1);hge=n(Gke,"STRONG",{});var b4t=s(hge);q8o=r(b4t,"vit_mae"),b4t.forEach(t),j8o=r(Gke," \u2014 "),WG=n(Gke,"A",{href:!0});var v4t=s(WG);D8o=r(v4t,"ViTMAEForPreTraining"),v4t.forEach(t),G8o=r(Gke," (ViTMAE model)"),Gke.forEach(t),O8o=i(O),I1=n(O,"LI",{});var Oke=s(I1);pge=n(Oke,"STRONG",{});var F4t=s(pge);V8o=r(F4t,"wav2vec2"),F4t.forEach(t),X8o=r(Oke," \u2014 "),HG=n(Oke,"A",{href:!0});var T4t=s(HG);z8o=r(T4t,"Wav2Vec2ForPreTraining"),T4t.forEach(t),Q8o=r(Oke," (Wav2Vec2 model)"),Oke.forEach(t),W8o=i(O),N1=n(O,"LI",{});var Vke=s(N1);_ge=n(Vke,"STRONG",{});var M4t=s(_ge);H8o=r(M4t,"wav2vec2-conformer"),M4t.forEach(t),U8o=r(Vke," \u2014 "),UG=n(Vke,"A",{href:!0});var E4t=s(UG);J8o=r(E4t,"Wav2Vec2ConformerForPreTraining"),E4t.forEach(t),Y8o=r(Vke," (Wav2Vec2-Conformer model)"),Vke.forEach(t),K8o=i(O),q1=n(O,"LI",{});var Xke=s(q1);uge=n(Xke,"STRONG",{});var C4t=s(uge);Z8o=r(C4t,"xlm"),C4t.forEach(t),exo=r(Xke," \u2014 "),JG=n(Xke,"A",{href:!0});var w4t=s(JG);oxo=r(w4t,"XLMWithLMHeadModel"),w4t.forEach(t),rxo=r(Xke," (XLM model)"),Xke.forEach(t),txo=i(O),j1=n(O,"LI",{});var zke=s(j1);bge=n(zke,"STRONG",{});var A4t=s(bge);axo=r(A4t,"xlm-roberta"),A4t.forEach(t),nxo=r(zke," \u2014 "),YG=n(zke,"A",{href:!0});var L4t=s(YG);sxo=r(L4t,"XLMRobertaForMaskedLM"),L4t.forEach(t),lxo=r(zke," (XLM-RoBERTa model)"),zke.forEach(t),ixo=i(O),D1=n(O,"LI",{});var Qke=s(D1);vge=n(Qke,"STRONG",{});var y4t=s(vge);dxo=r(y4t,"xlm-roberta-xl"),y4t.forEach(t),cxo=r(Qke," \u2014 "),KG=n(Qke,"A",{href:!0});var x4t=s(KG);fxo=r(x4t,"XLMRobertaXLForMaskedLM"),x4t.forEach(t),mxo=r(Qke," (XLM-RoBERTa-XL model)"),Qke.forEach(t),gxo=i(O),G1=n(O,"LI",{});var Wke=s(G1);Fge=n(Wke,"STRONG",{});var $4t=s(Fge);hxo=r($4t,"xlnet"),$4t.forEach(t),pxo=r(Wke," \u2014 "),ZG=n(Wke,"A",{href:!0});var k4t=s(ZG);_xo=r(k4t,"XLNetLMHeadModel"),k4t.forEach(t),uxo=r(Wke," (XLNet model)"),Wke.forEach(t),O.forEach(t),bxo=i(la),O1=n(la,"P",{});var Hke=s(O1);vxo=r(Hke,"The model is set in evaluation mode by default using "),Tge=n(Hke,"CODE",{});var S4t=s(Tge);Fxo=r(S4t,"model.eval()"),S4t.forEach(t),Txo=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(Hke,"CODE",{});var R4t=s(Mge);Mxo=r(R4t,"model.train()"),R4t.forEach(t),Hke.forEach(t),Exo=i(la),T(V1.$$.fragment,la),la.forEach(t),tl.forEach(t),wXe=i(f),Wi=n(f,"H2",{class:!0});var kQe=s(Wi);X1=n(kQe,"A",{id:!0,class:!0,href:!0});var P4t=s(X1);Ege=n(P4t,"SPAN",{});var B4t=s(Ege);T(XL.$$.fragment,B4t),B4t.forEach(t),P4t.forEach(t),Cxo=i(kQe),Cge=n(kQe,"SPAN",{});var I4t=s(Cge);wxo=r(I4t,"AutoModelForCausalLM"),I4t.forEach(t),kQe.forEach(t),AXe=i(f),ko=n(f,"DIV",{class:!0});var al=s(ko);T(zL.$$.fragment,al),Axo=i(al),Hi=n(al,"P",{});var Dre=s(Hi);Lxo=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eO=n(Dre,"A",{href:!0});var N4t=s(eO);yxo=r(N4t,"from_pretrained()"),N4t.forEach(t),xxo=r(Dre," class method or the "),oO=n(Dre,"A",{href:!0});var q4t=s(oO);$xo=r(q4t,"from_config()"),q4t.forEach(t),kxo=r(Dre,` class
method.`),Dre.forEach(t),Sxo=i(al),QL=n(al,"P",{});var SQe=s(QL);Rxo=r(SQe,"This class cannot be instantiated directly using "),wge=n(SQe,"CODE",{});var j4t=s(wge);Pxo=r(j4t,"__init__()"),j4t.forEach(t),Bxo=r(SQe," (throws an error)."),SQe.forEach(t),Ixo=i(al),dt=n(al,"DIV",{class:!0});var pw=s(dt);T(WL.$$.fragment,pw),Nxo=i(pw),Age=n(pw,"P",{});var D4t=s(Age);qxo=r(D4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),D4t.forEach(t),jxo=i(pw),Ui=n(pw,"P",{});var Gre=s(Ui);Dxo=r(Gre,`Note:
Loading a model from its configuration file does `),Lge=n(Gre,"STRONG",{});var G4t=s(Lge);Gxo=r(G4t,"not"),G4t.forEach(t),Oxo=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(Gre,"A",{href:!0});var O4t=s(rO);Vxo=r(O4t,"from_pretrained()"),O4t.forEach(t),Xxo=r(Gre," to load the model weights."),Gre.forEach(t),zxo=i(pw),T(z1.$$.fragment,pw),pw.forEach(t),Qxo=i(al),Ke=n(al,"DIV",{class:!0});var ia=s(Ke);T(HL.$$.fragment,ia),Wxo=i(ia),yge=n(ia,"P",{});var V4t=s(yge);Hxo=r(V4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V4t.forEach(t),Uxo=i(ia),qa=n(ia,"P",{});var _w=s(qa);Jxo=r(_w,"The model class to instantiate is selected based on the "),xge=n(_w,"CODE",{});var X4t=s(xge);Yxo=r(X4t,"model_type"),X4t.forEach(t),Kxo=r(_w,` property of the config object (either
passed as an argument or loaded from `),$ge=n(_w,"CODE",{});var z4t=s($ge);Zxo=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),e$o=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(_w,"CODE",{});var Q4t=s(kge);o$o=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),r$o=r(_w,":"),_w.forEach(t),t$o=i(ia),z=n(ia,"UL",{});var Q=s(z);Q1=n(Q,"LI",{});var Uke=s(Q1);Sge=n(Uke,"STRONG",{});var W4t=s(Sge);a$o=r(W4t,"bart"),W4t.forEach(t),n$o=r(Uke," \u2014 "),tO=n(Uke,"A",{href:!0});var H4t=s(tO);s$o=r(H4t,"BartForCausalLM"),H4t.forEach(t),l$o=r(Uke," (BART model)"),Uke.forEach(t),i$o=i(Q),W1=n(Q,"LI",{});var Jke=s(W1);Rge=n(Jke,"STRONG",{});var U4t=s(Rge);d$o=r(U4t,"bert"),U4t.forEach(t),c$o=r(Jke," \u2014 "),aO=n(Jke,"A",{href:!0});var J4t=s(aO);f$o=r(J4t,"BertLMHeadModel"),J4t.forEach(t),m$o=r(Jke," (BERT model)"),Jke.forEach(t),g$o=i(Q),H1=n(Q,"LI",{});var Yke=s(H1);Pge=n(Yke,"STRONG",{});var Y4t=s(Pge);h$o=r(Y4t,"bert-generation"),Y4t.forEach(t),p$o=r(Yke," \u2014 "),nO=n(Yke,"A",{href:!0});var K4t=s(nO);_$o=r(K4t,"BertGenerationDecoder"),K4t.forEach(t),u$o=r(Yke," (Bert Generation model)"),Yke.forEach(t),b$o=i(Q),U1=n(Q,"LI",{});var Kke=s(U1);Bge=n(Kke,"STRONG",{});var Z4t=s(Bge);v$o=r(Z4t,"big_bird"),Z4t.forEach(t),F$o=r(Kke," \u2014 "),sO=n(Kke,"A",{href:!0});var ebt=s(sO);T$o=r(ebt,"BigBirdForCausalLM"),ebt.forEach(t),M$o=r(Kke," (BigBird model)"),Kke.forEach(t),E$o=i(Q),J1=n(Q,"LI",{});var Zke=s(J1);Ige=n(Zke,"STRONG",{});var obt=s(Ige);C$o=r(obt,"bigbird_pegasus"),obt.forEach(t),w$o=r(Zke," \u2014 "),lO=n(Zke,"A",{href:!0});var rbt=s(lO);A$o=r(rbt,"BigBirdPegasusForCausalLM"),rbt.forEach(t),L$o=r(Zke," (BigBird-Pegasus model)"),Zke.forEach(t),y$o=i(Q),Y1=n(Q,"LI",{});var eSe=s(Y1);Nge=n(eSe,"STRONG",{});var tbt=s(Nge);x$o=r(tbt,"blenderbot"),tbt.forEach(t),$$o=r(eSe," \u2014 "),iO=n(eSe,"A",{href:!0});var abt=s(iO);k$o=r(abt,"BlenderbotForCausalLM"),abt.forEach(t),S$o=r(eSe," (Blenderbot model)"),eSe.forEach(t),R$o=i(Q),K1=n(Q,"LI",{});var oSe=s(K1);qge=n(oSe,"STRONG",{});var nbt=s(qge);P$o=r(nbt,"blenderbot-small"),nbt.forEach(t),B$o=r(oSe," \u2014 "),dO=n(oSe,"A",{href:!0});var sbt=s(dO);I$o=r(sbt,"BlenderbotSmallForCausalLM"),sbt.forEach(t),N$o=r(oSe," (BlenderbotSmall model)"),oSe.forEach(t),q$o=i(Q),Z1=n(Q,"LI",{});var rSe=s(Z1);jge=n(rSe,"STRONG",{});var lbt=s(jge);j$o=r(lbt,"bloom"),lbt.forEach(t),D$o=r(rSe," \u2014 "),cO=n(rSe,"A",{href:!0});var ibt=s(cO);G$o=r(ibt,"BloomForCausalLM"),ibt.forEach(t),O$o=r(rSe," (BLOOM model)"),rSe.forEach(t),V$o=i(Q),e2=n(Q,"LI",{});var tSe=s(e2);Dge=n(tSe,"STRONG",{});var dbt=s(Dge);X$o=r(dbt,"camembert"),dbt.forEach(t),z$o=r(tSe," \u2014 "),fO=n(tSe,"A",{href:!0});var cbt=s(fO);Q$o=r(cbt,"CamembertForCausalLM"),cbt.forEach(t),W$o=r(tSe," (CamemBERT model)"),tSe.forEach(t),H$o=i(Q),o2=n(Q,"LI",{});var aSe=s(o2);Gge=n(aSe,"STRONG",{});var fbt=s(Gge);U$o=r(fbt,"codegen"),fbt.forEach(t),J$o=r(aSe," \u2014 "),mO=n(aSe,"A",{href:!0});var mbt=s(mO);Y$o=r(mbt,"CodeGenForCausalLM"),mbt.forEach(t),K$o=r(aSe," (CodeGen model)"),aSe.forEach(t),Z$o=i(Q),r2=n(Q,"LI",{});var nSe=s(r2);Oge=n(nSe,"STRONG",{});var gbt=s(Oge);eko=r(gbt,"ctrl"),gbt.forEach(t),oko=r(nSe," \u2014 "),gO=n(nSe,"A",{href:!0});var hbt=s(gO);rko=r(hbt,"CTRLLMHeadModel"),hbt.forEach(t),tko=r(nSe," (CTRL model)"),nSe.forEach(t),ako=i(Q),t2=n(Q,"LI",{});var sSe=s(t2);Vge=n(sSe,"STRONG",{});var pbt=s(Vge);nko=r(pbt,"data2vec-text"),pbt.forEach(t),sko=r(sSe," \u2014 "),hO=n(sSe,"A",{href:!0});var _bt=s(hO);lko=r(_bt,"Data2VecTextForCausalLM"),_bt.forEach(t),iko=r(sSe," (Data2VecText model)"),sSe.forEach(t),dko=i(Q),a2=n(Q,"LI",{});var lSe=s(a2);Xge=n(lSe,"STRONG",{});var ubt=s(Xge);cko=r(ubt,"electra"),ubt.forEach(t),fko=r(lSe," \u2014 "),pO=n(lSe,"A",{href:!0});var bbt=s(pO);mko=r(bbt,"ElectraForCausalLM"),bbt.forEach(t),gko=r(lSe," (ELECTRA model)"),lSe.forEach(t),hko=i(Q),n2=n(Q,"LI",{});var iSe=s(n2);zge=n(iSe,"STRONG",{});var vbt=s(zge);pko=r(vbt,"gpt2"),vbt.forEach(t),_ko=r(iSe," \u2014 "),_O=n(iSe,"A",{href:!0});var Fbt=s(_O);uko=r(Fbt,"GPT2LMHeadModel"),Fbt.forEach(t),bko=r(iSe," (OpenAI GPT-2 model)"),iSe.forEach(t),vko=i(Q),s2=n(Q,"LI",{});var dSe=s(s2);Qge=n(dSe,"STRONG",{});var Tbt=s(Qge);Fko=r(Tbt,"gpt_neo"),Tbt.forEach(t),Tko=r(dSe," \u2014 "),uO=n(dSe,"A",{href:!0});var Mbt=s(uO);Mko=r(Mbt,"GPTNeoForCausalLM"),Mbt.forEach(t),Eko=r(dSe," (GPT Neo model)"),dSe.forEach(t),Cko=i(Q),l2=n(Q,"LI",{});var cSe=s(l2);Wge=n(cSe,"STRONG",{});var Ebt=s(Wge);wko=r(Ebt,"gpt_neox"),Ebt.forEach(t),Ako=r(cSe," \u2014 "),bO=n(cSe,"A",{href:!0});var Cbt=s(bO);Lko=r(Cbt,"GPTNeoXForCausalLM"),Cbt.forEach(t),yko=r(cSe," (GPT NeoX model)"),cSe.forEach(t),xko=i(Q),i2=n(Q,"LI",{});var fSe=s(i2);Hge=n(fSe,"STRONG",{});var wbt=s(Hge);$ko=r(wbt,"gptj"),wbt.forEach(t),kko=r(fSe," \u2014 "),vO=n(fSe,"A",{href:!0});var Abt=s(vO);Sko=r(Abt,"GPTJForCausalLM"),Abt.forEach(t),Rko=r(fSe," (GPT-J model)"),fSe.forEach(t),Pko=i(Q),d2=n(Q,"LI",{});var mSe=s(d2);Uge=n(mSe,"STRONG",{});var Lbt=s(Uge);Bko=r(Lbt,"marian"),Lbt.forEach(t),Iko=r(mSe," \u2014 "),FO=n(mSe,"A",{href:!0});var ybt=s(FO);Nko=r(ybt,"MarianForCausalLM"),ybt.forEach(t),qko=r(mSe," (Marian model)"),mSe.forEach(t),jko=i(Q),c2=n(Q,"LI",{});var gSe=s(c2);Jge=n(gSe,"STRONG",{});var xbt=s(Jge);Dko=r(xbt,"mbart"),xbt.forEach(t),Gko=r(gSe," \u2014 "),TO=n(gSe,"A",{href:!0});var $bt=s(TO);Oko=r($bt,"MBartForCausalLM"),$bt.forEach(t),Vko=r(gSe," (mBART model)"),gSe.forEach(t),Xko=i(Q),f2=n(Q,"LI",{});var hSe=s(f2);Yge=n(hSe,"STRONG",{});var kbt=s(Yge);zko=r(kbt,"megatron-bert"),kbt.forEach(t),Qko=r(hSe," \u2014 "),MO=n(hSe,"A",{href:!0});var Sbt=s(MO);Wko=r(Sbt,"MegatronBertForCausalLM"),Sbt.forEach(t),Hko=r(hSe," (Megatron-BERT model)"),hSe.forEach(t),Uko=i(Q),m2=n(Q,"LI",{});var pSe=s(m2);Kge=n(pSe,"STRONG",{});var Rbt=s(Kge);Jko=r(Rbt,"mvp"),Rbt.forEach(t),Yko=r(pSe," \u2014 "),EO=n(pSe,"A",{href:!0});var Pbt=s(EO);Kko=r(Pbt,"MvpForCausalLM"),Pbt.forEach(t),Zko=r(pSe," (MVP model)"),pSe.forEach(t),eSo=i(Q),g2=n(Q,"LI",{});var _Se=s(g2);Zge=n(_Se,"STRONG",{});var Bbt=s(Zge);oSo=r(Bbt,"openai-gpt"),Bbt.forEach(t),rSo=r(_Se," \u2014 "),CO=n(_Se,"A",{href:!0});var Ibt=s(CO);tSo=r(Ibt,"OpenAIGPTLMHeadModel"),Ibt.forEach(t),aSo=r(_Se," (OpenAI GPT model)"),_Se.forEach(t),nSo=i(Q),h2=n(Q,"LI",{});var uSe=s(h2);ehe=n(uSe,"STRONG",{});var Nbt=s(ehe);sSo=r(Nbt,"opt"),Nbt.forEach(t),lSo=r(uSe," \u2014 "),wO=n(uSe,"A",{href:!0});var qbt=s(wO);iSo=r(qbt,"OPTForCausalLM"),qbt.forEach(t),dSo=r(uSe," (OPT model)"),uSe.forEach(t),cSo=i(Q),p2=n(Q,"LI",{});var bSe=s(p2);ohe=n(bSe,"STRONG",{});var jbt=s(ohe);fSo=r(jbt,"pegasus"),jbt.forEach(t),mSo=r(bSe," \u2014 "),AO=n(bSe,"A",{href:!0});var Dbt=s(AO);gSo=r(Dbt,"PegasusForCausalLM"),Dbt.forEach(t),hSo=r(bSe," (Pegasus model)"),bSe.forEach(t),pSo=i(Q),_2=n(Q,"LI",{});var vSe=s(_2);rhe=n(vSe,"STRONG",{});var Gbt=s(rhe);_So=r(Gbt,"plbart"),Gbt.forEach(t),uSo=r(vSe," \u2014 "),LO=n(vSe,"A",{href:!0});var Obt=s(LO);bSo=r(Obt,"PLBartForCausalLM"),Obt.forEach(t),vSo=r(vSe," (PLBart model)"),vSe.forEach(t),FSo=i(Q),u2=n(Q,"LI",{});var FSe=s(u2);the=n(FSe,"STRONG",{});var Vbt=s(the);TSo=r(Vbt,"prophetnet"),Vbt.forEach(t),MSo=r(FSe," \u2014 "),yO=n(FSe,"A",{href:!0});var Xbt=s(yO);ESo=r(Xbt,"ProphetNetForCausalLM"),Xbt.forEach(t),CSo=r(FSe," (ProphetNet model)"),FSe.forEach(t),wSo=i(Q),b2=n(Q,"LI",{});var TSe=s(b2);ahe=n(TSe,"STRONG",{});var zbt=s(ahe);ASo=r(zbt,"qdqbert"),zbt.forEach(t),LSo=r(TSe," \u2014 "),xO=n(TSe,"A",{href:!0});var Qbt=s(xO);ySo=r(Qbt,"QDQBertLMHeadModel"),Qbt.forEach(t),xSo=r(TSe," (QDQBert model)"),TSe.forEach(t),$So=i(Q),v2=n(Q,"LI",{});var MSe=s(v2);nhe=n(MSe,"STRONG",{});var Wbt=s(nhe);kSo=r(Wbt,"reformer"),Wbt.forEach(t),SSo=r(MSe," \u2014 "),$O=n(MSe,"A",{href:!0});var Hbt=s($O);RSo=r(Hbt,"ReformerModelWithLMHead"),Hbt.forEach(t),PSo=r(MSe," (Reformer model)"),MSe.forEach(t),BSo=i(Q),F2=n(Q,"LI",{});var ESe=s(F2);she=n(ESe,"STRONG",{});var Ubt=s(she);ISo=r(Ubt,"rembert"),Ubt.forEach(t),NSo=r(ESe," \u2014 "),kO=n(ESe,"A",{href:!0});var Jbt=s(kO);qSo=r(Jbt,"RemBertForCausalLM"),Jbt.forEach(t),jSo=r(ESe," (RemBERT model)"),ESe.forEach(t),DSo=i(Q),T2=n(Q,"LI",{});var CSe=s(T2);lhe=n(CSe,"STRONG",{});var Ybt=s(lhe);GSo=r(Ybt,"roberta"),Ybt.forEach(t),OSo=r(CSe," \u2014 "),SO=n(CSe,"A",{href:!0});var Kbt=s(SO);VSo=r(Kbt,"RobertaForCausalLM"),Kbt.forEach(t),XSo=r(CSe," (RoBERTa model)"),CSe.forEach(t),zSo=i(Q),M2=n(Q,"LI",{});var wSe=s(M2);ihe=n(wSe,"STRONG",{});var Zbt=s(ihe);QSo=r(Zbt,"roformer"),Zbt.forEach(t),WSo=r(wSe," \u2014 "),RO=n(wSe,"A",{href:!0});var evt=s(RO);HSo=r(evt,"RoFormerForCausalLM"),evt.forEach(t),USo=r(wSe," (RoFormer model)"),wSe.forEach(t),JSo=i(Q),E2=n(Q,"LI",{});var ASe=s(E2);dhe=n(ASe,"STRONG",{});var ovt=s(dhe);YSo=r(ovt,"speech_to_text_2"),ovt.forEach(t),KSo=r(ASe," \u2014 "),PO=n(ASe,"A",{href:!0});var rvt=s(PO);ZSo=r(rvt,"Speech2Text2ForCausalLM"),rvt.forEach(t),eRo=r(ASe," (Speech2Text2 model)"),ASe.forEach(t),oRo=i(Q),C2=n(Q,"LI",{});var LSe=s(C2);che=n(LSe,"STRONG",{});var tvt=s(che);rRo=r(tvt,"transfo-xl"),tvt.forEach(t),tRo=r(LSe," \u2014 "),BO=n(LSe,"A",{href:!0});var avt=s(BO);aRo=r(avt,"TransfoXLLMHeadModel"),avt.forEach(t),nRo=r(LSe," (Transformer-XL model)"),LSe.forEach(t),sRo=i(Q),w2=n(Q,"LI",{});var ySe=s(w2);fhe=n(ySe,"STRONG",{});var nvt=s(fhe);lRo=r(nvt,"trocr"),nvt.forEach(t),iRo=r(ySe," \u2014 "),IO=n(ySe,"A",{href:!0});var svt=s(IO);dRo=r(svt,"TrOCRForCausalLM"),svt.forEach(t),cRo=r(ySe," (TrOCR model)"),ySe.forEach(t),fRo=i(Q),A2=n(Q,"LI",{});var xSe=s(A2);mhe=n(xSe,"STRONG",{});var lvt=s(mhe);mRo=r(lvt,"xglm"),lvt.forEach(t),gRo=r(xSe," \u2014 "),NO=n(xSe,"A",{href:!0});var ivt=s(NO);hRo=r(ivt,"XGLMForCausalLM"),ivt.forEach(t),pRo=r(xSe," (XGLM model)"),xSe.forEach(t),_Ro=i(Q),L2=n(Q,"LI",{});var $Se=s(L2);ghe=n($Se,"STRONG",{});var dvt=s(ghe);uRo=r(dvt,"xlm"),dvt.forEach(t),bRo=r($Se," \u2014 "),qO=n($Se,"A",{href:!0});var cvt=s(qO);vRo=r(cvt,"XLMWithLMHeadModel"),cvt.forEach(t),FRo=r($Se," (XLM model)"),$Se.forEach(t),TRo=i(Q),y2=n(Q,"LI",{});var kSe=s(y2);hhe=n(kSe,"STRONG",{});var fvt=s(hhe);MRo=r(fvt,"xlm-prophetnet"),fvt.forEach(t),ERo=r(kSe," \u2014 "),jO=n(kSe,"A",{href:!0});var mvt=s(jO);CRo=r(mvt,"XLMProphetNetForCausalLM"),mvt.forEach(t),wRo=r(kSe," (XLM-ProphetNet model)"),kSe.forEach(t),ARo=i(Q),x2=n(Q,"LI",{});var SSe=s(x2);phe=n(SSe,"STRONG",{});var gvt=s(phe);LRo=r(gvt,"xlm-roberta"),gvt.forEach(t),yRo=r(SSe," \u2014 "),DO=n(SSe,"A",{href:!0});var hvt=s(DO);xRo=r(hvt,"XLMRobertaForCausalLM"),hvt.forEach(t),$Ro=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),kRo=i(Q),$2=n(Q,"LI",{});var RSe=s($2);_he=n(RSe,"STRONG",{});var pvt=s(_he);SRo=r(pvt,"xlm-roberta-xl"),pvt.forEach(t),RRo=r(RSe," \u2014 "),GO=n(RSe,"A",{href:!0});var _vt=s(GO);PRo=r(_vt,"XLMRobertaXLForCausalLM"),_vt.forEach(t),BRo=r(RSe," (XLM-RoBERTa-XL model)"),RSe.forEach(t),IRo=i(Q),k2=n(Q,"LI",{});var PSe=s(k2);uhe=n(PSe,"STRONG",{});var uvt=s(uhe);NRo=r(uvt,"xlnet"),uvt.forEach(t),qRo=r(PSe," \u2014 "),OO=n(PSe,"A",{href:!0});var bvt=s(OO);jRo=r(bvt,"XLNetLMHeadModel"),bvt.forEach(t),DRo=r(PSe," (XLNet model)"),PSe.forEach(t),Q.forEach(t),GRo=i(ia),S2=n(ia,"P",{});var BSe=s(S2);ORo=r(BSe,"The model is set in evaluation mode by default using "),bhe=n(BSe,"CODE",{});var vvt=s(bhe);VRo=r(vvt,"model.eval()"),vvt.forEach(t),XRo=r(BSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(BSe,"CODE",{});var Fvt=s(vhe);zRo=r(Fvt,"model.train()"),Fvt.forEach(t),BSe.forEach(t),QRo=i(ia),T(R2.$$.fragment,ia),ia.forEach(t),al.forEach(t),LXe=i(f),Ji=n(f,"H2",{class:!0});var RQe=s(Ji);P2=n(RQe,"A",{id:!0,class:!0,href:!0});var Tvt=s(P2);Fhe=n(Tvt,"SPAN",{});var Mvt=s(Fhe);T(UL.$$.fragment,Mvt),Mvt.forEach(t),Tvt.forEach(t),WRo=i(RQe),The=n(RQe,"SPAN",{});var Evt=s(The);HRo=r(Evt,"AutoModelForMaskedLM"),Evt.forEach(t),RQe.forEach(t),yXe=i(f),So=n(f,"DIV",{class:!0});var nl=s(So);T(JL.$$.fragment,nl),URo=i(nl),Yi=n(nl,"P",{});var Ore=s(Yi);JRo=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VO=n(Ore,"A",{href:!0});var Cvt=s(VO);YRo=r(Cvt,"from_pretrained()"),Cvt.forEach(t),KRo=r(Ore," class method or the "),XO=n(Ore,"A",{href:!0});var wvt=s(XO);ZRo=r(wvt,"from_config()"),wvt.forEach(t),ePo=r(Ore,` class
method.`),Ore.forEach(t),oPo=i(nl),YL=n(nl,"P",{});var PQe=s(YL);rPo=r(PQe,"This class cannot be instantiated directly using "),Mhe=n(PQe,"CODE",{});var Avt=s(Mhe);tPo=r(Avt,"__init__()"),Avt.forEach(t),aPo=r(PQe," (throws an error)."),PQe.forEach(t),nPo=i(nl),ct=n(nl,"DIV",{class:!0});var uw=s(ct);T(KL.$$.fragment,uw),sPo=i(uw),Ehe=n(uw,"P",{});var Lvt=s(Ehe);lPo=r(Lvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lvt.forEach(t),iPo=i(uw),Ki=n(uw,"P",{});var Vre=s(Ki);dPo=r(Vre,`Note:
Loading a model from its configuration file does `),Che=n(Vre,"STRONG",{});var yvt=s(Che);cPo=r(yvt,"not"),yvt.forEach(t),fPo=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=n(Vre,"A",{href:!0});var xvt=s(zO);mPo=r(xvt,"from_pretrained()"),xvt.forEach(t),gPo=r(Vre," to load the model weights."),Vre.forEach(t),hPo=i(uw),T(B2.$$.fragment,uw),uw.forEach(t),pPo=i(nl),Ze=n(nl,"DIV",{class:!0});var da=s(Ze);T(ZL.$$.fragment,da),_Po=i(da),whe=n(da,"P",{});var $vt=s(whe);uPo=r($vt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$vt.forEach(t),bPo=i(da),ja=n(da,"P",{});var bw=s(ja);vPo=r(bw,"The model class to instantiate is selected based on the "),Ahe=n(bw,"CODE",{});var kvt=s(Ahe);FPo=r(kvt,"model_type"),kvt.forEach(t),TPo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(bw,"CODE",{});var Svt=s(Lhe);MPo=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),EPo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(bw,"CODE",{});var Rvt=s(yhe);CPo=r(Rvt,"pretrained_model_name_or_path"),Rvt.forEach(t),wPo=r(bw,":"),bw.forEach(t),APo=i(da),W=n(da,"UL",{});var H=s(W);I2=n(H,"LI",{});var ISe=s(I2);xhe=n(ISe,"STRONG",{});var Pvt=s(xhe);LPo=r(Pvt,"albert"),Pvt.forEach(t),yPo=r(ISe," \u2014 "),QO=n(ISe,"A",{href:!0});var Bvt=s(QO);xPo=r(Bvt,"AlbertForMaskedLM"),Bvt.forEach(t),$Po=r(ISe," (ALBERT model)"),ISe.forEach(t),kPo=i(H),N2=n(H,"LI",{});var NSe=s(N2);$he=n(NSe,"STRONG",{});var Ivt=s($he);SPo=r(Ivt,"bart"),Ivt.forEach(t),RPo=r(NSe," \u2014 "),WO=n(NSe,"A",{href:!0});var Nvt=s(WO);PPo=r(Nvt,"BartForConditionalGeneration"),Nvt.forEach(t),BPo=r(NSe," (BART model)"),NSe.forEach(t),IPo=i(H),q2=n(H,"LI",{});var qSe=s(q2);khe=n(qSe,"STRONG",{});var qvt=s(khe);NPo=r(qvt,"bert"),qvt.forEach(t),qPo=r(qSe," \u2014 "),HO=n(qSe,"A",{href:!0});var jvt=s(HO);jPo=r(jvt,"BertForMaskedLM"),jvt.forEach(t),DPo=r(qSe," (BERT model)"),qSe.forEach(t),GPo=i(H),j2=n(H,"LI",{});var jSe=s(j2);She=n(jSe,"STRONG",{});var Dvt=s(She);OPo=r(Dvt,"big_bird"),Dvt.forEach(t),VPo=r(jSe," \u2014 "),UO=n(jSe,"A",{href:!0});var Gvt=s(UO);XPo=r(Gvt,"BigBirdForMaskedLM"),Gvt.forEach(t),zPo=r(jSe," (BigBird model)"),jSe.forEach(t),QPo=i(H),D2=n(H,"LI",{});var DSe=s(D2);Rhe=n(DSe,"STRONG",{});var Ovt=s(Rhe);WPo=r(Ovt,"camembert"),Ovt.forEach(t),HPo=r(DSe," \u2014 "),JO=n(DSe,"A",{href:!0});var Vvt=s(JO);UPo=r(Vvt,"CamembertForMaskedLM"),Vvt.forEach(t),JPo=r(DSe," (CamemBERT model)"),DSe.forEach(t),YPo=i(H),G2=n(H,"LI",{});var GSe=s(G2);Phe=n(GSe,"STRONG",{});var Xvt=s(Phe);KPo=r(Xvt,"convbert"),Xvt.forEach(t),ZPo=r(GSe," \u2014 "),YO=n(GSe,"A",{href:!0});var zvt=s(YO);eBo=r(zvt,"ConvBertForMaskedLM"),zvt.forEach(t),oBo=r(GSe," (ConvBERT model)"),GSe.forEach(t),rBo=i(H),O2=n(H,"LI",{});var OSe=s(O2);Bhe=n(OSe,"STRONG",{});var Qvt=s(Bhe);tBo=r(Qvt,"data2vec-text"),Qvt.forEach(t),aBo=r(OSe," \u2014 "),KO=n(OSe,"A",{href:!0});var Wvt=s(KO);nBo=r(Wvt,"Data2VecTextForMaskedLM"),Wvt.forEach(t),sBo=r(OSe," (Data2VecText model)"),OSe.forEach(t),lBo=i(H),V2=n(H,"LI",{});var VSe=s(V2);Ihe=n(VSe,"STRONG",{});var Hvt=s(Ihe);iBo=r(Hvt,"deberta"),Hvt.forEach(t),dBo=r(VSe," \u2014 "),ZO=n(VSe,"A",{href:!0});var Uvt=s(ZO);cBo=r(Uvt,"DebertaForMaskedLM"),Uvt.forEach(t),fBo=r(VSe," (DeBERTa model)"),VSe.forEach(t),mBo=i(H),X2=n(H,"LI",{});var XSe=s(X2);Nhe=n(XSe,"STRONG",{});var Jvt=s(Nhe);gBo=r(Jvt,"deberta-v2"),Jvt.forEach(t),hBo=r(XSe," \u2014 "),eV=n(XSe,"A",{href:!0});var Yvt=s(eV);pBo=r(Yvt,"DebertaV2ForMaskedLM"),Yvt.forEach(t),_Bo=r(XSe," (DeBERTa-v2 model)"),XSe.forEach(t),uBo=i(H),z2=n(H,"LI",{});var zSe=s(z2);qhe=n(zSe,"STRONG",{});var Kvt=s(qhe);bBo=r(Kvt,"distilbert"),Kvt.forEach(t),vBo=r(zSe," \u2014 "),oV=n(zSe,"A",{href:!0});var Zvt=s(oV);FBo=r(Zvt,"DistilBertForMaskedLM"),Zvt.forEach(t),TBo=r(zSe," (DistilBERT model)"),zSe.forEach(t),MBo=i(H),Q2=n(H,"LI",{});var QSe=s(Q2);jhe=n(QSe,"STRONG",{});var eFt=s(jhe);EBo=r(eFt,"electra"),eFt.forEach(t),CBo=r(QSe," \u2014 "),rV=n(QSe,"A",{href:!0});var oFt=s(rV);wBo=r(oFt,"ElectraForMaskedLM"),oFt.forEach(t),ABo=r(QSe," (ELECTRA model)"),QSe.forEach(t),LBo=i(H),W2=n(H,"LI",{});var WSe=s(W2);Dhe=n(WSe,"STRONG",{});var rFt=s(Dhe);yBo=r(rFt,"flaubert"),rFt.forEach(t),xBo=r(WSe," \u2014 "),tV=n(WSe,"A",{href:!0});var tFt=s(tV);$Bo=r(tFt,"FlaubertWithLMHeadModel"),tFt.forEach(t),kBo=r(WSe," (FlauBERT model)"),WSe.forEach(t),SBo=i(H),H2=n(H,"LI",{});var HSe=s(H2);Ghe=n(HSe,"STRONG",{});var aFt=s(Ghe);RBo=r(aFt,"fnet"),aFt.forEach(t),PBo=r(HSe," \u2014 "),aV=n(HSe,"A",{href:!0});var nFt=s(aV);BBo=r(nFt,"FNetForMaskedLM"),nFt.forEach(t),IBo=r(HSe," (FNet model)"),HSe.forEach(t),NBo=i(H),U2=n(H,"LI",{});var USe=s(U2);Ohe=n(USe,"STRONG",{});var sFt=s(Ohe);qBo=r(sFt,"funnel"),sFt.forEach(t),jBo=r(USe," \u2014 "),nV=n(USe,"A",{href:!0});var lFt=s(nV);DBo=r(lFt,"FunnelForMaskedLM"),lFt.forEach(t),GBo=r(USe," (Funnel Transformer model)"),USe.forEach(t),OBo=i(H),J2=n(H,"LI",{});var JSe=s(J2);Vhe=n(JSe,"STRONG",{});var iFt=s(Vhe);VBo=r(iFt,"ibert"),iFt.forEach(t),XBo=r(JSe," \u2014 "),sV=n(JSe,"A",{href:!0});var dFt=s(sV);zBo=r(dFt,"IBertForMaskedLM"),dFt.forEach(t),QBo=r(JSe," (I-BERT model)"),JSe.forEach(t),WBo=i(H),Y2=n(H,"LI",{});var YSe=s(Y2);Xhe=n(YSe,"STRONG",{});var cFt=s(Xhe);HBo=r(cFt,"layoutlm"),cFt.forEach(t),UBo=r(YSe," \u2014 "),lV=n(YSe,"A",{href:!0});var fFt=s(lV);JBo=r(fFt,"LayoutLMForMaskedLM"),fFt.forEach(t),YBo=r(YSe," (LayoutLM model)"),YSe.forEach(t),KBo=i(H),K2=n(H,"LI",{});var KSe=s(K2);zhe=n(KSe,"STRONG",{});var mFt=s(zhe);ZBo=r(mFt,"longformer"),mFt.forEach(t),eIo=r(KSe," \u2014 "),iV=n(KSe,"A",{href:!0});var gFt=s(iV);oIo=r(gFt,"LongformerForMaskedLM"),gFt.forEach(t),rIo=r(KSe," (Longformer model)"),KSe.forEach(t),tIo=i(H),Z2=n(H,"LI",{});var ZSe=s(Z2);Qhe=n(ZSe,"STRONG",{});var hFt=s(Qhe);aIo=r(hFt,"luke"),hFt.forEach(t),nIo=r(ZSe," \u2014 "),dV=n(ZSe,"A",{href:!0});var pFt=s(dV);sIo=r(pFt,"LukeForMaskedLM"),pFt.forEach(t),lIo=r(ZSe," (LUKE model)"),ZSe.forEach(t),iIo=i(H),e4=n(H,"LI",{});var eRe=s(e4);Whe=n(eRe,"STRONG",{});var _Ft=s(Whe);dIo=r(_Ft,"mbart"),_Ft.forEach(t),cIo=r(eRe," \u2014 "),cV=n(eRe,"A",{href:!0});var uFt=s(cV);fIo=r(uFt,"MBartForConditionalGeneration"),uFt.forEach(t),mIo=r(eRe," (mBART model)"),eRe.forEach(t),gIo=i(H),o4=n(H,"LI",{});var oRe=s(o4);Hhe=n(oRe,"STRONG",{});var bFt=s(Hhe);hIo=r(bFt,"megatron-bert"),bFt.forEach(t),pIo=r(oRe," \u2014 "),fV=n(oRe,"A",{href:!0});var vFt=s(fV);_Io=r(vFt,"MegatronBertForMaskedLM"),vFt.forEach(t),uIo=r(oRe," (Megatron-BERT model)"),oRe.forEach(t),bIo=i(H),r4=n(H,"LI",{});var rRe=s(r4);Uhe=n(rRe,"STRONG",{});var FFt=s(Uhe);vIo=r(FFt,"mobilebert"),FFt.forEach(t),FIo=r(rRe," \u2014 "),mV=n(rRe,"A",{href:!0});var TFt=s(mV);TIo=r(TFt,"MobileBertForMaskedLM"),TFt.forEach(t),MIo=r(rRe," (MobileBERT model)"),rRe.forEach(t),EIo=i(H),t4=n(H,"LI",{});var tRe=s(t4);Jhe=n(tRe,"STRONG",{});var MFt=s(Jhe);CIo=r(MFt,"mpnet"),MFt.forEach(t),wIo=r(tRe," \u2014 "),gV=n(tRe,"A",{href:!0});var EFt=s(gV);AIo=r(EFt,"MPNetForMaskedLM"),EFt.forEach(t),LIo=r(tRe," (MPNet model)"),tRe.forEach(t),yIo=i(H),a4=n(H,"LI",{});var aRe=s(a4);Yhe=n(aRe,"STRONG",{});var CFt=s(Yhe);xIo=r(CFt,"mvp"),CFt.forEach(t),$Io=r(aRe," \u2014 "),hV=n(aRe,"A",{href:!0});var wFt=s(hV);kIo=r(wFt,"MvpForConditionalGeneration"),wFt.forEach(t),SIo=r(aRe," (MVP model)"),aRe.forEach(t),RIo=i(H),n4=n(H,"LI",{});var nRe=s(n4);Khe=n(nRe,"STRONG",{});var AFt=s(Khe);PIo=r(AFt,"nezha"),AFt.forEach(t),BIo=r(nRe," \u2014 "),pV=n(nRe,"A",{href:!0});var LFt=s(pV);IIo=r(LFt,"NezhaForMaskedLM"),LFt.forEach(t),NIo=r(nRe," (Nezha model)"),nRe.forEach(t),qIo=i(H),s4=n(H,"LI",{});var sRe=s(s4);Zhe=n(sRe,"STRONG",{});var yFt=s(Zhe);jIo=r(yFt,"nystromformer"),yFt.forEach(t),DIo=r(sRe," \u2014 "),_V=n(sRe,"A",{href:!0});var xFt=s(_V);GIo=r(xFt,"NystromformerForMaskedLM"),xFt.forEach(t),OIo=r(sRe," (Nystr\xF6mformer model)"),sRe.forEach(t),VIo=i(H),l4=n(H,"LI",{});var lRe=s(l4);epe=n(lRe,"STRONG",{});var $Ft=s(epe);XIo=r($Ft,"perceiver"),$Ft.forEach(t),zIo=r(lRe," \u2014 "),uV=n(lRe,"A",{href:!0});var kFt=s(uV);QIo=r(kFt,"PerceiverForMaskedLM"),kFt.forEach(t),WIo=r(lRe," (Perceiver model)"),lRe.forEach(t),HIo=i(H),i4=n(H,"LI",{});var iRe=s(i4);ope=n(iRe,"STRONG",{});var SFt=s(ope);UIo=r(SFt,"qdqbert"),SFt.forEach(t),JIo=r(iRe," \u2014 "),bV=n(iRe,"A",{href:!0});var RFt=s(bV);YIo=r(RFt,"QDQBertForMaskedLM"),RFt.forEach(t),KIo=r(iRe," (QDQBert model)"),iRe.forEach(t),ZIo=i(H),d4=n(H,"LI",{});var dRe=s(d4);rpe=n(dRe,"STRONG",{});var PFt=s(rpe);eNo=r(PFt,"reformer"),PFt.forEach(t),oNo=r(dRe," \u2014 "),vV=n(dRe,"A",{href:!0});var BFt=s(vV);rNo=r(BFt,"ReformerForMaskedLM"),BFt.forEach(t),tNo=r(dRe," (Reformer model)"),dRe.forEach(t),aNo=i(H),c4=n(H,"LI",{});var cRe=s(c4);tpe=n(cRe,"STRONG",{});var IFt=s(tpe);nNo=r(IFt,"rembert"),IFt.forEach(t),sNo=r(cRe," \u2014 "),FV=n(cRe,"A",{href:!0});var NFt=s(FV);lNo=r(NFt,"RemBertForMaskedLM"),NFt.forEach(t),iNo=r(cRe," (RemBERT model)"),cRe.forEach(t),dNo=i(H),f4=n(H,"LI",{});var fRe=s(f4);ape=n(fRe,"STRONG",{});var qFt=s(ape);cNo=r(qFt,"roberta"),qFt.forEach(t),fNo=r(fRe," \u2014 "),TV=n(fRe,"A",{href:!0});var jFt=s(TV);mNo=r(jFt,"RobertaForMaskedLM"),jFt.forEach(t),gNo=r(fRe," (RoBERTa model)"),fRe.forEach(t),hNo=i(H),m4=n(H,"LI",{});var mRe=s(m4);npe=n(mRe,"STRONG",{});var DFt=s(npe);pNo=r(DFt,"roformer"),DFt.forEach(t),_No=r(mRe," \u2014 "),MV=n(mRe,"A",{href:!0});var GFt=s(MV);uNo=r(GFt,"RoFormerForMaskedLM"),GFt.forEach(t),bNo=r(mRe," (RoFormer model)"),mRe.forEach(t),vNo=i(H),g4=n(H,"LI",{});var gRe=s(g4);spe=n(gRe,"STRONG",{});var OFt=s(spe);FNo=r(OFt,"squeezebert"),OFt.forEach(t),TNo=r(gRe," \u2014 "),EV=n(gRe,"A",{href:!0});var VFt=s(EV);MNo=r(VFt,"SqueezeBertForMaskedLM"),VFt.forEach(t),ENo=r(gRe," (SqueezeBERT model)"),gRe.forEach(t),CNo=i(H),h4=n(H,"LI",{});var hRe=s(h4);lpe=n(hRe,"STRONG",{});var XFt=s(lpe);wNo=r(XFt,"tapas"),XFt.forEach(t),ANo=r(hRe," \u2014 "),CV=n(hRe,"A",{href:!0});var zFt=s(CV);LNo=r(zFt,"TapasForMaskedLM"),zFt.forEach(t),yNo=r(hRe," (TAPAS model)"),hRe.forEach(t),xNo=i(H),p4=n(H,"LI",{});var pRe=s(p4);ipe=n(pRe,"STRONG",{});var QFt=s(ipe);$No=r(QFt,"wav2vec2"),QFt.forEach(t),kNo=r(pRe," \u2014 "),dpe=n(pRe,"CODE",{});var WFt=s(dpe);SNo=r(WFt,"Wav2Vec2ForMaskedLM"),WFt.forEach(t),RNo=r(pRe," (Wav2Vec2 model)"),pRe.forEach(t),PNo=i(H),_4=n(H,"LI",{});var _Re=s(_4);cpe=n(_Re,"STRONG",{});var HFt=s(cpe);BNo=r(HFt,"xlm"),HFt.forEach(t),INo=r(_Re," \u2014 "),wV=n(_Re,"A",{href:!0});var UFt=s(wV);NNo=r(UFt,"XLMWithLMHeadModel"),UFt.forEach(t),qNo=r(_Re," (XLM model)"),_Re.forEach(t),jNo=i(H),u4=n(H,"LI",{});var uRe=s(u4);fpe=n(uRe,"STRONG",{});var JFt=s(fpe);DNo=r(JFt,"xlm-roberta"),JFt.forEach(t),GNo=r(uRe," \u2014 "),AV=n(uRe,"A",{href:!0});var YFt=s(AV);ONo=r(YFt,"XLMRobertaForMaskedLM"),YFt.forEach(t),VNo=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),XNo=i(H),b4=n(H,"LI",{});var bRe=s(b4);mpe=n(bRe,"STRONG",{});var KFt=s(mpe);zNo=r(KFt,"xlm-roberta-xl"),KFt.forEach(t),QNo=r(bRe," \u2014 "),LV=n(bRe,"A",{href:!0});var ZFt=s(LV);WNo=r(ZFt,"XLMRobertaXLForMaskedLM"),ZFt.forEach(t),HNo=r(bRe," (XLM-RoBERTa-XL model)"),bRe.forEach(t),UNo=i(H),v4=n(H,"LI",{});var vRe=s(v4);gpe=n(vRe,"STRONG",{});var e6t=s(gpe);JNo=r(e6t,"yoso"),e6t.forEach(t),YNo=r(vRe," \u2014 "),yV=n(vRe,"A",{href:!0});var o6t=s(yV);KNo=r(o6t,"YosoForMaskedLM"),o6t.forEach(t),ZNo=r(vRe," (YOSO model)"),vRe.forEach(t),H.forEach(t),eqo=i(da),F4=n(da,"P",{});var FRe=s(F4);oqo=r(FRe,"The model is set in evaluation mode by default using "),hpe=n(FRe,"CODE",{});var r6t=s(hpe);rqo=r(r6t,"model.eval()"),r6t.forEach(t),tqo=r(FRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(FRe,"CODE",{});var t6t=s(ppe);aqo=r(t6t,"model.train()"),t6t.forEach(t),FRe.forEach(t),nqo=i(da),T(T4.$$.fragment,da),da.forEach(t),nl.forEach(t),xXe=i(f),Zi=n(f,"H2",{class:!0});var BQe=s(Zi);M4=n(BQe,"A",{id:!0,class:!0,href:!0});var a6t=s(M4);_pe=n(a6t,"SPAN",{});var n6t=s(_pe);T(ey.$$.fragment,n6t),n6t.forEach(t),a6t.forEach(t),sqo=i(BQe),upe=n(BQe,"SPAN",{});var s6t=s(upe);lqo=r(s6t,"AutoModelForSeq2SeqLM"),s6t.forEach(t),BQe.forEach(t),$Xe=i(f),Ro=n(f,"DIV",{class:!0});var sl=s(Ro);T(oy.$$.fragment,sl),iqo=i(sl),ed=n(sl,"P",{});var Xre=s(ed);dqo=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xV=n(Xre,"A",{href:!0});var l6t=s(xV);cqo=r(l6t,"from_pretrained()"),l6t.forEach(t),fqo=r(Xre," class method or the "),$V=n(Xre,"A",{href:!0});var i6t=s($V);mqo=r(i6t,"from_config()"),i6t.forEach(t),gqo=r(Xre,` class
method.`),Xre.forEach(t),hqo=i(sl),ry=n(sl,"P",{});var IQe=s(ry);pqo=r(IQe,"This class cannot be instantiated directly using "),bpe=n(IQe,"CODE",{});var d6t=s(bpe);_qo=r(d6t,"__init__()"),d6t.forEach(t),uqo=r(IQe," (throws an error)."),IQe.forEach(t),bqo=i(sl),ft=n(sl,"DIV",{class:!0});var vw=s(ft);T(ty.$$.fragment,vw),vqo=i(vw),vpe=n(vw,"P",{});var c6t=s(vpe);Fqo=r(c6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c6t.forEach(t),Tqo=i(vw),od=n(vw,"P",{});var zre=s(od);Mqo=r(zre,`Note:
Loading a model from its configuration file does `),Fpe=n(zre,"STRONG",{});var f6t=s(Fpe);Eqo=r(f6t,"not"),f6t.forEach(t),Cqo=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(zre,"A",{href:!0});var m6t=s(kV);wqo=r(m6t,"from_pretrained()"),m6t.forEach(t),Aqo=r(zre," to load the model weights."),zre.forEach(t),Lqo=i(vw),T(E4.$$.fragment,vw),vw.forEach(t),yqo=i(sl),eo=n(sl,"DIV",{class:!0});var ca=s(eo);T(ay.$$.fragment,ca),xqo=i(ca),Tpe=n(ca,"P",{});var g6t=s(Tpe);$qo=r(g6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g6t.forEach(t),kqo=i(ca),Da=n(ca,"P",{});var Fw=s(Da);Sqo=r(Fw,"The model class to instantiate is selected based on the "),Mpe=n(Fw,"CODE",{});var h6t=s(Mpe);Rqo=r(h6t,"model_type"),h6t.forEach(t),Pqo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Epe=n(Fw,"CODE",{});var p6t=s(Epe);Bqo=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),Iqo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(Fw,"CODE",{});var _6t=s(Cpe);Nqo=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),qqo=r(Fw,":"),Fw.forEach(t),jqo=i(ca),pe=n(ca,"UL",{});var ve=s(pe);C4=n(ve,"LI",{});var TRe=s(C4);wpe=n(TRe,"STRONG",{});var u6t=s(wpe);Dqo=r(u6t,"bart"),u6t.forEach(t),Gqo=r(TRe," \u2014 "),SV=n(TRe,"A",{href:!0});var b6t=s(SV);Oqo=r(b6t,"BartForConditionalGeneration"),b6t.forEach(t),Vqo=r(TRe," (BART model)"),TRe.forEach(t),Xqo=i(ve),w4=n(ve,"LI",{});var MRe=s(w4);Ape=n(MRe,"STRONG",{});var v6t=s(Ape);zqo=r(v6t,"bigbird_pegasus"),v6t.forEach(t),Qqo=r(MRe," \u2014 "),RV=n(MRe,"A",{href:!0});var F6t=s(RV);Wqo=r(F6t,"BigBirdPegasusForConditionalGeneration"),F6t.forEach(t),Hqo=r(MRe," (BigBird-Pegasus model)"),MRe.forEach(t),Uqo=i(ve),A4=n(ve,"LI",{});var ERe=s(A4);Lpe=n(ERe,"STRONG",{});var T6t=s(Lpe);Jqo=r(T6t,"blenderbot"),T6t.forEach(t),Yqo=r(ERe," \u2014 "),PV=n(ERe,"A",{href:!0});var M6t=s(PV);Kqo=r(M6t,"BlenderbotForConditionalGeneration"),M6t.forEach(t),Zqo=r(ERe," (Blenderbot model)"),ERe.forEach(t),ejo=i(ve),L4=n(ve,"LI",{});var CRe=s(L4);ype=n(CRe,"STRONG",{});var E6t=s(ype);ojo=r(E6t,"blenderbot-small"),E6t.forEach(t),rjo=r(CRe," \u2014 "),BV=n(CRe,"A",{href:!0});var C6t=s(BV);tjo=r(C6t,"BlenderbotSmallForConditionalGeneration"),C6t.forEach(t),ajo=r(CRe," (BlenderbotSmall model)"),CRe.forEach(t),njo=i(ve),y4=n(ve,"LI",{});var wRe=s(y4);xpe=n(wRe,"STRONG",{});var w6t=s(xpe);sjo=r(w6t,"encoder-decoder"),w6t.forEach(t),ljo=r(wRe," \u2014 "),IV=n(wRe,"A",{href:!0});var A6t=s(IV);ijo=r(A6t,"EncoderDecoderModel"),A6t.forEach(t),djo=r(wRe," (Encoder decoder model)"),wRe.forEach(t),cjo=i(ve),x4=n(ve,"LI",{});var ARe=s(x4);$pe=n(ARe,"STRONG",{});var L6t=s($pe);fjo=r(L6t,"fsmt"),L6t.forEach(t),mjo=r(ARe," \u2014 "),NV=n(ARe,"A",{href:!0});var y6t=s(NV);gjo=r(y6t,"FSMTForConditionalGeneration"),y6t.forEach(t),hjo=r(ARe," (FairSeq Machine-Translation model)"),ARe.forEach(t),pjo=i(ve),$4=n(ve,"LI",{});var LRe=s($4);kpe=n(LRe,"STRONG",{});var x6t=s(kpe);_jo=r(x6t,"led"),x6t.forEach(t),ujo=r(LRe," \u2014 "),qV=n(LRe,"A",{href:!0});var $6t=s(qV);bjo=r($6t,"LEDForConditionalGeneration"),$6t.forEach(t),vjo=r(LRe," (LED model)"),LRe.forEach(t),Fjo=i(ve),k4=n(ve,"LI",{});var yRe=s(k4);Spe=n(yRe,"STRONG",{});var k6t=s(Spe);Tjo=r(k6t,"longt5"),k6t.forEach(t),Mjo=r(yRe," \u2014 "),jV=n(yRe,"A",{href:!0});var S6t=s(jV);Ejo=r(S6t,"LongT5ForConditionalGeneration"),S6t.forEach(t),Cjo=r(yRe," (LongT5 model)"),yRe.forEach(t),wjo=i(ve),S4=n(ve,"LI",{});var xRe=s(S4);Rpe=n(xRe,"STRONG",{});var R6t=s(Rpe);Ajo=r(R6t,"m2m_100"),R6t.forEach(t),Ljo=r(xRe," \u2014 "),DV=n(xRe,"A",{href:!0});var P6t=s(DV);yjo=r(P6t,"M2M100ForConditionalGeneration"),P6t.forEach(t),xjo=r(xRe," (M2M100 model)"),xRe.forEach(t),$jo=i(ve),R4=n(ve,"LI",{});var $Re=s(R4);Ppe=n($Re,"STRONG",{});var B6t=s(Ppe);kjo=r(B6t,"marian"),B6t.forEach(t),Sjo=r($Re," \u2014 "),GV=n($Re,"A",{href:!0});var I6t=s(GV);Rjo=r(I6t,"MarianMTModel"),I6t.forEach(t),Pjo=r($Re," (Marian model)"),$Re.forEach(t),Bjo=i(ve),P4=n(ve,"LI",{});var kRe=s(P4);Bpe=n(kRe,"STRONG",{});var N6t=s(Bpe);Ijo=r(N6t,"mbart"),N6t.forEach(t),Njo=r(kRe," \u2014 "),OV=n(kRe,"A",{href:!0});var q6t=s(OV);qjo=r(q6t,"MBartForConditionalGeneration"),q6t.forEach(t),jjo=r(kRe," (mBART model)"),kRe.forEach(t),Djo=i(ve),B4=n(ve,"LI",{});var SRe=s(B4);Ipe=n(SRe,"STRONG",{});var j6t=s(Ipe);Gjo=r(j6t,"mt5"),j6t.forEach(t),Ojo=r(SRe," \u2014 "),VV=n(SRe,"A",{href:!0});var D6t=s(VV);Vjo=r(D6t,"MT5ForConditionalGeneration"),D6t.forEach(t),Xjo=r(SRe," (MT5 model)"),SRe.forEach(t),zjo=i(ve),I4=n(ve,"LI",{});var RRe=s(I4);Npe=n(RRe,"STRONG",{});var G6t=s(Npe);Qjo=r(G6t,"mvp"),G6t.forEach(t),Wjo=r(RRe," \u2014 "),XV=n(RRe,"A",{href:!0});var O6t=s(XV);Hjo=r(O6t,"MvpForConditionalGeneration"),O6t.forEach(t),Ujo=r(RRe," (MVP model)"),RRe.forEach(t),Jjo=i(ve),N4=n(ve,"LI",{});var PRe=s(N4);qpe=n(PRe,"STRONG",{});var V6t=s(qpe);Yjo=r(V6t,"pegasus"),V6t.forEach(t),Kjo=r(PRe," \u2014 "),zV=n(PRe,"A",{href:!0});var X6t=s(zV);Zjo=r(X6t,"PegasusForConditionalGeneration"),X6t.forEach(t),eDo=r(PRe," (Pegasus model)"),PRe.forEach(t),oDo=i(ve),q4=n(ve,"LI",{});var BRe=s(q4);jpe=n(BRe,"STRONG",{});var z6t=s(jpe);rDo=r(z6t,"plbart"),z6t.forEach(t),tDo=r(BRe," \u2014 "),QV=n(BRe,"A",{href:!0});var Q6t=s(QV);aDo=r(Q6t,"PLBartForConditionalGeneration"),Q6t.forEach(t),nDo=r(BRe," (PLBart model)"),BRe.forEach(t),sDo=i(ve),j4=n(ve,"LI",{});var IRe=s(j4);Dpe=n(IRe,"STRONG",{});var W6t=s(Dpe);lDo=r(W6t,"prophetnet"),W6t.forEach(t),iDo=r(IRe," \u2014 "),WV=n(IRe,"A",{href:!0});var H6t=s(WV);dDo=r(H6t,"ProphetNetForConditionalGeneration"),H6t.forEach(t),cDo=r(IRe," (ProphetNet model)"),IRe.forEach(t),fDo=i(ve),D4=n(ve,"LI",{});var NRe=s(D4);Gpe=n(NRe,"STRONG",{});var U6t=s(Gpe);mDo=r(U6t,"t5"),U6t.forEach(t),gDo=r(NRe," \u2014 "),HV=n(NRe,"A",{href:!0});var J6t=s(HV);hDo=r(J6t,"T5ForConditionalGeneration"),J6t.forEach(t),pDo=r(NRe," (T5 model)"),NRe.forEach(t),_Do=i(ve),G4=n(ve,"LI",{});var qRe=s(G4);Ope=n(qRe,"STRONG",{});var Y6t=s(Ope);uDo=r(Y6t,"xlm-prophetnet"),Y6t.forEach(t),bDo=r(qRe," \u2014 "),UV=n(qRe,"A",{href:!0});var K6t=s(UV);vDo=r(K6t,"XLMProphetNetForConditionalGeneration"),K6t.forEach(t),FDo=r(qRe," (XLM-ProphetNet model)"),qRe.forEach(t),ve.forEach(t),TDo=i(ca),O4=n(ca,"P",{});var jRe=s(O4);MDo=r(jRe,"The model is set in evaluation mode by default using "),Vpe=n(jRe,"CODE",{});var Z6t=s(Vpe);EDo=r(Z6t,"model.eval()"),Z6t.forEach(t),CDo=r(jRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(jRe,"CODE",{});var eTt=s(Xpe);wDo=r(eTt,"model.train()"),eTt.forEach(t),jRe.forEach(t),ADo=i(ca),T(V4.$$.fragment,ca),ca.forEach(t),sl.forEach(t),kXe=i(f),rd=n(f,"H2",{class:!0});var NQe=s(rd);X4=n(NQe,"A",{id:!0,class:!0,href:!0});var oTt=s(X4);zpe=n(oTt,"SPAN",{});var rTt=s(zpe);T(ny.$$.fragment,rTt),rTt.forEach(t),oTt.forEach(t),LDo=i(NQe),Qpe=n(NQe,"SPAN",{});var tTt=s(Qpe);yDo=r(tTt,"AutoModelForSequenceClassification"),tTt.forEach(t),NQe.forEach(t),SXe=i(f),Po=n(f,"DIV",{class:!0});var ll=s(Po);T(sy.$$.fragment,ll),xDo=i(ll),td=n(ll,"P",{});var Qre=s(td);$Do=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JV=n(Qre,"A",{href:!0});var aTt=s(JV);kDo=r(aTt,"from_pretrained()"),aTt.forEach(t),SDo=r(Qre," class method or the "),YV=n(Qre,"A",{href:!0});var nTt=s(YV);RDo=r(nTt,"from_config()"),nTt.forEach(t),PDo=r(Qre,` class
method.`),Qre.forEach(t),BDo=i(ll),ly=n(ll,"P",{});var qQe=s(ly);IDo=r(qQe,"This class cannot be instantiated directly using "),Wpe=n(qQe,"CODE",{});var sTt=s(Wpe);NDo=r(sTt,"__init__()"),sTt.forEach(t),qDo=r(qQe," (throws an error)."),qQe.forEach(t),jDo=i(ll),mt=n(ll,"DIV",{class:!0});var Tw=s(mt);T(iy.$$.fragment,Tw),DDo=i(Tw),Hpe=n(Tw,"P",{});var lTt=s(Hpe);GDo=r(lTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lTt.forEach(t),ODo=i(Tw),ad=n(Tw,"P",{});var Wre=s(ad);VDo=r(Wre,`Note:
Loading a model from its configuration file does `),Upe=n(Wre,"STRONG",{});var iTt=s(Upe);XDo=r(iTt,"not"),iTt.forEach(t),zDo=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(Wre,"A",{href:!0});var dTt=s(KV);QDo=r(dTt,"from_pretrained()"),dTt.forEach(t),WDo=r(Wre," to load the model weights."),Wre.forEach(t),HDo=i(Tw),T(z4.$$.fragment,Tw),Tw.forEach(t),UDo=i(ll),oo=n(ll,"DIV",{class:!0});var fa=s(oo);T(dy.$$.fragment,fa),JDo=i(fa),Jpe=n(fa,"P",{});var cTt=s(Jpe);YDo=r(cTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cTt.forEach(t),KDo=i(fa),Ga=n(fa,"P",{});var Mw=s(Ga);ZDo=r(Mw,"The model class to instantiate is selected based on the "),Ype=n(Mw,"CODE",{});var fTt=s(Ype);eGo=r(fTt,"model_type"),fTt.forEach(t),oGo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(Mw,"CODE",{});var mTt=s(Kpe);rGo=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),tGo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(Mw,"CODE",{});var gTt=s(Zpe);aGo=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),nGo=r(Mw,":"),Mw.forEach(t),sGo=i(fa),N=n(fa,"UL",{});var j=s(N);Q4=n(j,"LI",{});var DRe=s(Q4);e_e=n(DRe,"STRONG",{});var hTt=s(e_e);lGo=r(hTt,"albert"),hTt.forEach(t),iGo=r(DRe," \u2014 "),ZV=n(DRe,"A",{href:!0});var pTt=s(ZV);dGo=r(pTt,"AlbertForSequenceClassification"),pTt.forEach(t),cGo=r(DRe," (ALBERT model)"),DRe.forEach(t),fGo=i(j),W4=n(j,"LI",{});var GRe=s(W4);o_e=n(GRe,"STRONG",{});var _Tt=s(o_e);mGo=r(_Tt,"bart"),_Tt.forEach(t),gGo=r(GRe," \u2014 "),eX=n(GRe,"A",{href:!0});var uTt=s(eX);hGo=r(uTt,"BartForSequenceClassification"),uTt.forEach(t),pGo=r(GRe," (BART model)"),GRe.forEach(t),_Go=i(j),H4=n(j,"LI",{});var ORe=s(H4);r_e=n(ORe,"STRONG",{});var bTt=s(r_e);uGo=r(bTt,"bert"),bTt.forEach(t),bGo=r(ORe," \u2014 "),oX=n(ORe,"A",{href:!0});var vTt=s(oX);vGo=r(vTt,"BertForSequenceClassification"),vTt.forEach(t),FGo=r(ORe," (BERT model)"),ORe.forEach(t),TGo=i(j),U4=n(j,"LI",{});var VRe=s(U4);t_e=n(VRe,"STRONG",{});var FTt=s(t_e);MGo=r(FTt,"big_bird"),FTt.forEach(t),EGo=r(VRe," \u2014 "),rX=n(VRe,"A",{href:!0});var TTt=s(rX);CGo=r(TTt,"BigBirdForSequenceClassification"),TTt.forEach(t),wGo=r(VRe," (BigBird model)"),VRe.forEach(t),AGo=i(j),J4=n(j,"LI",{});var XRe=s(J4);a_e=n(XRe,"STRONG",{});var MTt=s(a_e);LGo=r(MTt,"bigbird_pegasus"),MTt.forEach(t),yGo=r(XRe," \u2014 "),tX=n(XRe,"A",{href:!0});var ETt=s(tX);xGo=r(ETt,"BigBirdPegasusForSequenceClassification"),ETt.forEach(t),$Go=r(XRe," (BigBird-Pegasus model)"),XRe.forEach(t),kGo=i(j),Y4=n(j,"LI",{});var zRe=s(Y4);n_e=n(zRe,"STRONG",{});var CTt=s(n_e);SGo=r(CTt,"bloom"),CTt.forEach(t),RGo=r(zRe," \u2014 "),aX=n(zRe,"A",{href:!0});var wTt=s(aX);PGo=r(wTt,"BloomForSequenceClassification"),wTt.forEach(t),BGo=r(zRe," (BLOOM model)"),zRe.forEach(t),IGo=i(j),K4=n(j,"LI",{});var QRe=s(K4);s_e=n(QRe,"STRONG",{});var ATt=s(s_e);NGo=r(ATt,"camembert"),ATt.forEach(t),qGo=r(QRe," \u2014 "),nX=n(QRe,"A",{href:!0});var LTt=s(nX);jGo=r(LTt,"CamembertForSequenceClassification"),LTt.forEach(t),DGo=r(QRe," (CamemBERT model)"),QRe.forEach(t),GGo=i(j),Z4=n(j,"LI",{});var WRe=s(Z4);l_e=n(WRe,"STRONG",{});var yTt=s(l_e);OGo=r(yTt,"canine"),yTt.forEach(t),VGo=r(WRe," \u2014 "),sX=n(WRe,"A",{href:!0});var xTt=s(sX);XGo=r(xTt,"CanineForSequenceClassification"),xTt.forEach(t),zGo=r(WRe," (CANINE model)"),WRe.forEach(t),QGo=i(j),eb=n(j,"LI",{});var HRe=s(eb);i_e=n(HRe,"STRONG",{});var $Tt=s(i_e);WGo=r($Tt,"convbert"),$Tt.forEach(t),HGo=r(HRe," \u2014 "),lX=n(HRe,"A",{href:!0});var kTt=s(lX);UGo=r(kTt,"ConvBertForSequenceClassification"),kTt.forEach(t),JGo=r(HRe," (ConvBERT model)"),HRe.forEach(t),YGo=i(j),ob=n(j,"LI",{});var URe=s(ob);d_e=n(URe,"STRONG",{});var STt=s(d_e);KGo=r(STt,"ctrl"),STt.forEach(t),ZGo=r(URe," \u2014 "),iX=n(URe,"A",{href:!0});var RTt=s(iX);eOo=r(RTt,"CTRLForSequenceClassification"),RTt.forEach(t),oOo=r(URe," (CTRL model)"),URe.forEach(t),rOo=i(j),rb=n(j,"LI",{});var JRe=s(rb);c_e=n(JRe,"STRONG",{});var PTt=s(c_e);tOo=r(PTt,"data2vec-text"),PTt.forEach(t),aOo=r(JRe," \u2014 "),dX=n(JRe,"A",{href:!0});var BTt=s(dX);nOo=r(BTt,"Data2VecTextForSequenceClassification"),BTt.forEach(t),sOo=r(JRe," (Data2VecText model)"),JRe.forEach(t),lOo=i(j),tb=n(j,"LI",{});var YRe=s(tb);f_e=n(YRe,"STRONG",{});var ITt=s(f_e);iOo=r(ITt,"deberta"),ITt.forEach(t),dOo=r(YRe," \u2014 "),cX=n(YRe,"A",{href:!0});var NTt=s(cX);cOo=r(NTt,"DebertaForSequenceClassification"),NTt.forEach(t),fOo=r(YRe," (DeBERTa model)"),YRe.forEach(t),mOo=i(j),ab=n(j,"LI",{});var KRe=s(ab);m_e=n(KRe,"STRONG",{});var qTt=s(m_e);gOo=r(qTt,"deberta-v2"),qTt.forEach(t),hOo=r(KRe," \u2014 "),fX=n(KRe,"A",{href:!0});var jTt=s(fX);pOo=r(jTt,"DebertaV2ForSequenceClassification"),jTt.forEach(t),_Oo=r(KRe," (DeBERTa-v2 model)"),KRe.forEach(t),uOo=i(j),nb=n(j,"LI",{});var ZRe=s(nb);g_e=n(ZRe,"STRONG",{});var DTt=s(g_e);bOo=r(DTt,"distilbert"),DTt.forEach(t),vOo=r(ZRe," \u2014 "),mX=n(ZRe,"A",{href:!0});var GTt=s(mX);FOo=r(GTt,"DistilBertForSequenceClassification"),GTt.forEach(t),TOo=r(ZRe," (DistilBERT model)"),ZRe.forEach(t),MOo=i(j),sb=n(j,"LI",{});var ePe=s(sb);h_e=n(ePe,"STRONG",{});var OTt=s(h_e);EOo=r(OTt,"electra"),OTt.forEach(t),COo=r(ePe," \u2014 "),gX=n(ePe,"A",{href:!0});var VTt=s(gX);wOo=r(VTt,"ElectraForSequenceClassification"),VTt.forEach(t),AOo=r(ePe," (ELECTRA model)"),ePe.forEach(t),LOo=i(j),lb=n(j,"LI",{});var oPe=s(lb);p_e=n(oPe,"STRONG",{});var XTt=s(p_e);yOo=r(XTt,"flaubert"),XTt.forEach(t),xOo=r(oPe," \u2014 "),hX=n(oPe,"A",{href:!0});var zTt=s(hX);$Oo=r(zTt,"FlaubertForSequenceClassification"),zTt.forEach(t),kOo=r(oPe," (FlauBERT model)"),oPe.forEach(t),SOo=i(j),ib=n(j,"LI",{});var rPe=s(ib);__e=n(rPe,"STRONG",{});var QTt=s(__e);ROo=r(QTt,"fnet"),QTt.forEach(t),POo=r(rPe," \u2014 "),pX=n(rPe,"A",{href:!0});var WTt=s(pX);BOo=r(WTt,"FNetForSequenceClassification"),WTt.forEach(t),IOo=r(rPe," (FNet model)"),rPe.forEach(t),NOo=i(j),db=n(j,"LI",{});var tPe=s(db);u_e=n(tPe,"STRONG",{});var HTt=s(u_e);qOo=r(HTt,"funnel"),HTt.forEach(t),jOo=r(tPe," \u2014 "),_X=n(tPe,"A",{href:!0});var UTt=s(_X);DOo=r(UTt,"FunnelForSequenceClassification"),UTt.forEach(t),GOo=r(tPe," (Funnel Transformer model)"),tPe.forEach(t),OOo=i(j),cb=n(j,"LI",{});var aPe=s(cb);b_e=n(aPe,"STRONG",{});var JTt=s(b_e);VOo=r(JTt,"gpt2"),JTt.forEach(t),XOo=r(aPe," \u2014 "),uX=n(aPe,"A",{href:!0});var YTt=s(uX);zOo=r(YTt,"GPT2ForSequenceClassification"),YTt.forEach(t),QOo=r(aPe," (OpenAI GPT-2 model)"),aPe.forEach(t),WOo=i(j),fb=n(j,"LI",{});var nPe=s(fb);v_e=n(nPe,"STRONG",{});var KTt=s(v_e);HOo=r(KTt,"gpt_neo"),KTt.forEach(t),UOo=r(nPe," \u2014 "),bX=n(nPe,"A",{href:!0});var ZTt=s(bX);JOo=r(ZTt,"GPTNeoForSequenceClassification"),ZTt.forEach(t),YOo=r(nPe," (GPT Neo model)"),nPe.forEach(t),KOo=i(j),mb=n(j,"LI",{});var sPe=s(mb);F_e=n(sPe,"STRONG",{});var e7t=s(F_e);ZOo=r(e7t,"gptj"),e7t.forEach(t),eVo=r(sPe," \u2014 "),vX=n(sPe,"A",{href:!0});var o7t=s(vX);oVo=r(o7t,"GPTJForSequenceClassification"),o7t.forEach(t),rVo=r(sPe," (GPT-J model)"),sPe.forEach(t),tVo=i(j),gb=n(j,"LI",{});var lPe=s(gb);T_e=n(lPe,"STRONG",{});var r7t=s(T_e);aVo=r(r7t,"ibert"),r7t.forEach(t),nVo=r(lPe," \u2014 "),FX=n(lPe,"A",{href:!0});var t7t=s(FX);sVo=r(t7t,"IBertForSequenceClassification"),t7t.forEach(t),lVo=r(lPe," (I-BERT model)"),lPe.forEach(t),iVo=i(j),hb=n(j,"LI",{});var iPe=s(hb);M_e=n(iPe,"STRONG",{});var a7t=s(M_e);dVo=r(a7t,"layoutlm"),a7t.forEach(t),cVo=r(iPe," \u2014 "),TX=n(iPe,"A",{href:!0});var n7t=s(TX);fVo=r(n7t,"LayoutLMForSequenceClassification"),n7t.forEach(t),mVo=r(iPe," (LayoutLM model)"),iPe.forEach(t),gVo=i(j),pb=n(j,"LI",{});var dPe=s(pb);E_e=n(dPe,"STRONG",{});var s7t=s(E_e);hVo=r(s7t,"layoutlmv2"),s7t.forEach(t),pVo=r(dPe," \u2014 "),MX=n(dPe,"A",{href:!0});var l7t=s(MX);_Vo=r(l7t,"LayoutLMv2ForSequenceClassification"),l7t.forEach(t),uVo=r(dPe," (LayoutLMv2 model)"),dPe.forEach(t),bVo=i(j),_b=n(j,"LI",{});var cPe=s(_b);C_e=n(cPe,"STRONG",{});var i7t=s(C_e);vVo=r(i7t,"layoutlmv3"),i7t.forEach(t),FVo=r(cPe," \u2014 "),EX=n(cPe,"A",{href:!0});var d7t=s(EX);TVo=r(d7t,"LayoutLMv3ForSequenceClassification"),d7t.forEach(t),MVo=r(cPe," (LayoutLMv3 model)"),cPe.forEach(t),EVo=i(j),ub=n(j,"LI",{});var fPe=s(ub);w_e=n(fPe,"STRONG",{});var c7t=s(w_e);CVo=r(c7t,"led"),c7t.forEach(t),wVo=r(fPe," \u2014 "),CX=n(fPe,"A",{href:!0});var f7t=s(CX);AVo=r(f7t,"LEDForSequenceClassification"),f7t.forEach(t),LVo=r(fPe," (LED model)"),fPe.forEach(t),yVo=i(j),bb=n(j,"LI",{});var mPe=s(bb);A_e=n(mPe,"STRONG",{});var m7t=s(A_e);xVo=r(m7t,"longformer"),m7t.forEach(t),$Vo=r(mPe," \u2014 "),wX=n(mPe,"A",{href:!0});var g7t=s(wX);kVo=r(g7t,"LongformerForSequenceClassification"),g7t.forEach(t),SVo=r(mPe," (Longformer model)"),mPe.forEach(t),RVo=i(j),vb=n(j,"LI",{});var gPe=s(vb);L_e=n(gPe,"STRONG",{});var h7t=s(L_e);PVo=r(h7t,"mbart"),h7t.forEach(t),BVo=r(gPe," \u2014 "),AX=n(gPe,"A",{href:!0});var p7t=s(AX);IVo=r(p7t,"MBartForSequenceClassification"),p7t.forEach(t),NVo=r(gPe," (mBART model)"),gPe.forEach(t),qVo=i(j),Fb=n(j,"LI",{});var hPe=s(Fb);y_e=n(hPe,"STRONG",{});var _7t=s(y_e);jVo=r(_7t,"megatron-bert"),_7t.forEach(t),DVo=r(hPe," \u2014 "),LX=n(hPe,"A",{href:!0});var u7t=s(LX);GVo=r(u7t,"MegatronBertForSequenceClassification"),u7t.forEach(t),OVo=r(hPe," (Megatron-BERT model)"),hPe.forEach(t),VVo=i(j),Tb=n(j,"LI",{});var pPe=s(Tb);x_e=n(pPe,"STRONG",{});var b7t=s(x_e);XVo=r(b7t,"mobilebert"),b7t.forEach(t),zVo=r(pPe," \u2014 "),yX=n(pPe,"A",{href:!0});var v7t=s(yX);QVo=r(v7t,"MobileBertForSequenceClassification"),v7t.forEach(t),WVo=r(pPe," (MobileBERT model)"),pPe.forEach(t),HVo=i(j),Mb=n(j,"LI",{});var _Pe=s(Mb);$_e=n(_Pe,"STRONG",{});var F7t=s($_e);UVo=r(F7t,"mpnet"),F7t.forEach(t),JVo=r(_Pe," \u2014 "),xX=n(_Pe,"A",{href:!0});var T7t=s(xX);YVo=r(T7t,"MPNetForSequenceClassification"),T7t.forEach(t),KVo=r(_Pe," (MPNet model)"),_Pe.forEach(t),ZVo=i(j),Eb=n(j,"LI",{});var uPe=s(Eb);k_e=n(uPe,"STRONG",{});var M7t=s(k_e);eXo=r(M7t,"mvp"),M7t.forEach(t),oXo=r(uPe," \u2014 "),$X=n(uPe,"A",{href:!0});var E7t=s($X);rXo=r(E7t,"MvpForSequenceClassification"),E7t.forEach(t),tXo=r(uPe," (MVP model)"),uPe.forEach(t),aXo=i(j),Cb=n(j,"LI",{});var bPe=s(Cb);S_e=n(bPe,"STRONG",{});var C7t=s(S_e);nXo=r(C7t,"nezha"),C7t.forEach(t),sXo=r(bPe," \u2014 "),kX=n(bPe,"A",{href:!0});var w7t=s(kX);lXo=r(w7t,"NezhaForSequenceClassification"),w7t.forEach(t),iXo=r(bPe," (Nezha model)"),bPe.forEach(t),dXo=i(j),wb=n(j,"LI",{});var vPe=s(wb);R_e=n(vPe,"STRONG",{});var A7t=s(R_e);cXo=r(A7t,"nystromformer"),A7t.forEach(t),fXo=r(vPe," \u2014 "),SX=n(vPe,"A",{href:!0});var L7t=s(SX);mXo=r(L7t,"NystromformerForSequenceClassification"),L7t.forEach(t),gXo=r(vPe," (Nystr\xF6mformer model)"),vPe.forEach(t),hXo=i(j),Ab=n(j,"LI",{});var FPe=s(Ab);P_e=n(FPe,"STRONG",{});var y7t=s(P_e);pXo=r(y7t,"openai-gpt"),y7t.forEach(t),_Xo=r(FPe," \u2014 "),RX=n(FPe,"A",{href:!0});var x7t=s(RX);uXo=r(x7t,"OpenAIGPTForSequenceClassification"),x7t.forEach(t),bXo=r(FPe," (OpenAI GPT model)"),FPe.forEach(t),vXo=i(j),Lb=n(j,"LI",{});var TPe=s(Lb);B_e=n(TPe,"STRONG",{});var $7t=s(B_e);FXo=r($7t,"perceiver"),$7t.forEach(t),TXo=r(TPe," \u2014 "),PX=n(TPe,"A",{href:!0});var k7t=s(PX);MXo=r(k7t,"PerceiverForSequenceClassification"),k7t.forEach(t),EXo=r(TPe," (Perceiver model)"),TPe.forEach(t),CXo=i(j),yb=n(j,"LI",{});var MPe=s(yb);I_e=n(MPe,"STRONG",{});var S7t=s(I_e);wXo=r(S7t,"plbart"),S7t.forEach(t),AXo=r(MPe," \u2014 "),BX=n(MPe,"A",{href:!0});var R7t=s(BX);LXo=r(R7t,"PLBartForSequenceClassification"),R7t.forEach(t),yXo=r(MPe," (PLBart model)"),MPe.forEach(t),xXo=i(j),xb=n(j,"LI",{});var EPe=s(xb);N_e=n(EPe,"STRONG",{});var P7t=s(N_e);$Xo=r(P7t,"qdqbert"),P7t.forEach(t),kXo=r(EPe," \u2014 "),IX=n(EPe,"A",{href:!0});var B7t=s(IX);SXo=r(B7t,"QDQBertForSequenceClassification"),B7t.forEach(t),RXo=r(EPe," (QDQBert model)"),EPe.forEach(t),PXo=i(j),$b=n(j,"LI",{});var CPe=s($b);q_e=n(CPe,"STRONG",{});var I7t=s(q_e);BXo=r(I7t,"reformer"),I7t.forEach(t),IXo=r(CPe," \u2014 "),NX=n(CPe,"A",{href:!0});var N7t=s(NX);NXo=r(N7t,"ReformerForSequenceClassification"),N7t.forEach(t),qXo=r(CPe," (Reformer model)"),CPe.forEach(t),jXo=i(j),kb=n(j,"LI",{});var wPe=s(kb);j_e=n(wPe,"STRONG",{});var q7t=s(j_e);DXo=r(q7t,"rembert"),q7t.forEach(t),GXo=r(wPe," \u2014 "),qX=n(wPe,"A",{href:!0});var j7t=s(qX);OXo=r(j7t,"RemBertForSequenceClassification"),j7t.forEach(t),VXo=r(wPe," (RemBERT model)"),wPe.forEach(t),XXo=i(j),Sb=n(j,"LI",{});var APe=s(Sb);D_e=n(APe,"STRONG",{});var D7t=s(D_e);zXo=r(D7t,"roberta"),D7t.forEach(t),QXo=r(APe," \u2014 "),jX=n(APe,"A",{href:!0});var G7t=s(jX);WXo=r(G7t,"RobertaForSequenceClassification"),G7t.forEach(t),HXo=r(APe," (RoBERTa model)"),APe.forEach(t),UXo=i(j),Rb=n(j,"LI",{});var LPe=s(Rb);G_e=n(LPe,"STRONG",{});var O7t=s(G_e);JXo=r(O7t,"roformer"),O7t.forEach(t),YXo=r(LPe," \u2014 "),DX=n(LPe,"A",{href:!0});var V7t=s(DX);KXo=r(V7t,"RoFormerForSequenceClassification"),V7t.forEach(t),ZXo=r(LPe," (RoFormer model)"),LPe.forEach(t),ezo=i(j),Pb=n(j,"LI",{});var yPe=s(Pb);O_e=n(yPe,"STRONG",{});var X7t=s(O_e);ozo=r(X7t,"squeezebert"),X7t.forEach(t),rzo=r(yPe," \u2014 "),GX=n(yPe,"A",{href:!0});var z7t=s(GX);tzo=r(z7t,"SqueezeBertForSequenceClassification"),z7t.forEach(t),azo=r(yPe," (SqueezeBERT model)"),yPe.forEach(t),nzo=i(j),Bb=n(j,"LI",{});var xPe=s(Bb);V_e=n(xPe,"STRONG",{});var Q7t=s(V_e);szo=r(Q7t,"tapas"),Q7t.forEach(t),lzo=r(xPe," \u2014 "),OX=n(xPe,"A",{href:!0});var W7t=s(OX);izo=r(W7t,"TapasForSequenceClassification"),W7t.forEach(t),dzo=r(xPe," (TAPAS model)"),xPe.forEach(t),czo=i(j),Ib=n(j,"LI",{});var $Pe=s(Ib);X_e=n($Pe,"STRONG",{});var H7t=s(X_e);fzo=r(H7t,"transfo-xl"),H7t.forEach(t),mzo=r($Pe," \u2014 "),VX=n($Pe,"A",{href:!0});var U7t=s(VX);gzo=r(U7t,"TransfoXLForSequenceClassification"),U7t.forEach(t),hzo=r($Pe," (Transformer-XL model)"),$Pe.forEach(t),pzo=i(j),Nb=n(j,"LI",{});var kPe=s(Nb);z_e=n(kPe,"STRONG",{});var J7t=s(z_e);_zo=r(J7t,"xlm"),J7t.forEach(t),uzo=r(kPe," \u2014 "),XX=n(kPe,"A",{href:!0});var Y7t=s(XX);bzo=r(Y7t,"XLMForSequenceClassification"),Y7t.forEach(t),vzo=r(kPe," (XLM model)"),kPe.forEach(t),Fzo=i(j),qb=n(j,"LI",{});var SPe=s(qb);Q_e=n(SPe,"STRONG",{});var K7t=s(Q_e);Tzo=r(K7t,"xlm-roberta"),K7t.forEach(t),Mzo=r(SPe," \u2014 "),zX=n(SPe,"A",{href:!0});var Z7t=s(zX);Ezo=r(Z7t,"XLMRobertaForSequenceClassification"),Z7t.forEach(t),Czo=r(SPe," (XLM-RoBERTa model)"),SPe.forEach(t),wzo=i(j),jb=n(j,"LI",{});var RPe=s(jb);W_e=n(RPe,"STRONG",{});var e9t=s(W_e);Azo=r(e9t,"xlm-roberta-xl"),e9t.forEach(t),Lzo=r(RPe," \u2014 "),QX=n(RPe,"A",{href:!0});var o9t=s(QX);yzo=r(o9t,"XLMRobertaXLForSequenceClassification"),o9t.forEach(t),xzo=r(RPe," (XLM-RoBERTa-XL model)"),RPe.forEach(t),$zo=i(j),Db=n(j,"LI",{});var PPe=s(Db);H_e=n(PPe,"STRONG",{});var r9t=s(H_e);kzo=r(r9t,"xlnet"),r9t.forEach(t),Szo=r(PPe," \u2014 "),WX=n(PPe,"A",{href:!0});var t9t=s(WX);Rzo=r(t9t,"XLNetForSequenceClassification"),t9t.forEach(t),Pzo=r(PPe," (XLNet model)"),PPe.forEach(t),Bzo=i(j),Gb=n(j,"LI",{});var BPe=s(Gb);U_e=n(BPe,"STRONG",{});var a9t=s(U_e);Izo=r(a9t,"yoso"),a9t.forEach(t),Nzo=r(BPe," \u2014 "),HX=n(BPe,"A",{href:!0});var n9t=s(HX);qzo=r(n9t,"YosoForSequenceClassification"),n9t.forEach(t),jzo=r(BPe," (YOSO model)"),BPe.forEach(t),j.forEach(t),Dzo=i(fa),Ob=n(fa,"P",{});var IPe=s(Ob);Gzo=r(IPe,"The model is set in evaluation mode by default using "),J_e=n(IPe,"CODE",{});var s9t=s(J_e);Ozo=r(s9t,"model.eval()"),s9t.forEach(t),Vzo=r(IPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=n(IPe,"CODE",{});var l9t=s(Y_e);Xzo=r(l9t,"model.train()"),l9t.forEach(t),IPe.forEach(t),zzo=i(fa),T(Vb.$$.fragment,fa),fa.forEach(t),ll.forEach(t),RXe=i(f),nd=n(f,"H2",{class:!0});var jQe=s(nd);Xb=n(jQe,"A",{id:!0,class:!0,href:!0});var i9t=s(Xb);K_e=n(i9t,"SPAN",{});var d9t=s(K_e);T(cy.$$.fragment,d9t),d9t.forEach(t),i9t.forEach(t),Qzo=i(jQe),Z_e=n(jQe,"SPAN",{});var c9t=s(Z_e);Wzo=r(c9t,"AutoModelForMultipleChoice"),c9t.forEach(t),jQe.forEach(t),PXe=i(f),Bo=n(f,"DIV",{class:!0});var il=s(Bo);T(fy.$$.fragment,il),Hzo=i(il),sd=n(il,"P",{});var Hre=s(sd);Uzo=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UX=n(Hre,"A",{href:!0});var f9t=s(UX);Jzo=r(f9t,"from_pretrained()"),f9t.forEach(t),Yzo=r(Hre," class method or the "),JX=n(Hre,"A",{href:!0});var m9t=s(JX);Kzo=r(m9t,"from_config()"),m9t.forEach(t),Zzo=r(Hre,` class
method.`),Hre.forEach(t),eQo=i(il),my=n(il,"P",{});var DQe=s(my);oQo=r(DQe,"This class cannot be instantiated directly using "),eue=n(DQe,"CODE",{});var g9t=s(eue);rQo=r(g9t,"__init__()"),g9t.forEach(t),tQo=r(DQe," (throws an error)."),DQe.forEach(t),aQo=i(il),gt=n(il,"DIV",{class:!0});var Ew=s(gt);T(gy.$$.fragment,Ew),nQo=i(Ew),oue=n(Ew,"P",{});var h9t=s(oue);sQo=r(h9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h9t.forEach(t),lQo=i(Ew),ld=n(Ew,"P",{});var Ure=s(ld);iQo=r(Ure,`Note:
Loading a model from its configuration file does `),rue=n(Ure,"STRONG",{});var p9t=s(rue);dQo=r(p9t,"not"),p9t.forEach(t),cQo=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(Ure,"A",{href:!0});var _9t=s(YX);fQo=r(_9t,"from_pretrained()"),_9t.forEach(t),mQo=r(Ure," to load the model weights."),Ure.forEach(t),gQo=i(Ew),T(zb.$$.fragment,Ew),Ew.forEach(t),hQo=i(il),ro=n(il,"DIV",{class:!0});var ma=s(ro);T(hy.$$.fragment,ma),pQo=i(ma),tue=n(ma,"P",{});var u9t=s(tue);_Qo=r(u9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),u9t.forEach(t),uQo=i(ma),Oa=n(ma,"P",{});var Cw=s(Oa);bQo=r(Cw,"The model class to instantiate is selected based on the "),aue=n(Cw,"CODE",{});var b9t=s(aue);vQo=r(b9t,"model_type"),b9t.forEach(t),FQo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),nue=n(Cw,"CODE",{});var v9t=s(nue);TQo=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),MQo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(Cw,"CODE",{});var F9t=s(sue);EQo=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),CQo=r(Cw,":"),Cw.forEach(t),wQo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Qb=n(ee,"LI",{});var NPe=s(Qb);lue=n(NPe,"STRONG",{});var T9t=s(lue);AQo=r(T9t,"albert"),T9t.forEach(t),LQo=r(NPe," \u2014 "),KX=n(NPe,"A",{href:!0});var M9t=s(KX);yQo=r(M9t,"AlbertForMultipleChoice"),M9t.forEach(t),xQo=r(NPe," (ALBERT model)"),NPe.forEach(t),$Qo=i(ee),Wb=n(ee,"LI",{});var qPe=s(Wb);iue=n(qPe,"STRONG",{});var E9t=s(iue);kQo=r(E9t,"bert"),E9t.forEach(t),SQo=r(qPe," \u2014 "),ZX=n(qPe,"A",{href:!0});var C9t=s(ZX);RQo=r(C9t,"BertForMultipleChoice"),C9t.forEach(t),PQo=r(qPe," (BERT model)"),qPe.forEach(t),BQo=i(ee),Hb=n(ee,"LI",{});var jPe=s(Hb);due=n(jPe,"STRONG",{});var w9t=s(due);IQo=r(w9t,"big_bird"),w9t.forEach(t),NQo=r(jPe," \u2014 "),ez=n(jPe,"A",{href:!0});var A9t=s(ez);qQo=r(A9t,"BigBirdForMultipleChoice"),A9t.forEach(t),jQo=r(jPe," (BigBird model)"),jPe.forEach(t),DQo=i(ee),Ub=n(ee,"LI",{});var DPe=s(Ub);cue=n(DPe,"STRONG",{});var L9t=s(cue);GQo=r(L9t,"camembert"),L9t.forEach(t),OQo=r(DPe," \u2014 "),oz=n(DPe,"A",{href:!0});var y9t=s(oz);VQo=r(y9t,"CamembertForMultipleChoice"),y9t.forEach(t),XQo=r(DPe," (CamemBERT model)"),DPe.forEach(t),zQo=i(ee),Jb=n(ee,"LI",{});var GPe=s(Jb);fue=n(GPe,"STRONG",{});var x9t=s(fue);QQo=r(x9t,"canine"),x9t.forEach(t),WQo=r(GPe," \u2014 "),rz=n(GPe,"A",{href:!0});var $9t=s(rz);HQo=r($9t,"CanineForMultipleChoice"),$9t.forEach(t),UQo=r(GPe," (CANINE model)"),GPe.forEach(t),JQo=i(ee),Yb=n(ee,"LI",{});var OPe=s(Yb);mue=n(OPe,"STRONG",{});var k9t=s(mue);YQo=r(k9t,"convbert"),k9t.forEach(t),KQo=r(OPe," \u2014 "),tz=n(OPe,"A",{href:!0});var S9t=s(tz);ZQo=r(S9t,"ConvBertForMultipleChoice"),S9t.forEach(t),eWo=r(OPe," (ConvBERT model)"),OPe.forEach(t),oWo=i(ee),Kb=n(ee,"LI",{});var VPe=s(Kb);gue=n(VPe,"STRONG",{});var R9t=s(gue);rWo=r(R9t,"data2vec-text"),R9t.forEach(t),tWo=r(VPe," \u2014 "),az=n(VPe,"A",{href:!0});var P9t=s(az);aWo=r(P9t,"Data2VecTextForMultipleChoice"),P9t.forEach(t),nWo=r(VPe," (Data2VecText model)"),VPe.forEach(t),sWo=i(ee),Zb=n(ee,"LI",{});var XPe=s(Zb);hue=n(XPe,"STRONG",{});var B9t=s(hue);lWo=r(B9t,"deberta-v2"),B9t.forEach(t),iWo=r(XPe," \u2014 "),nz=n(XPe,"A",{href:!0});var I9t=s(nz);dWo=r(I9t,"DebertaV2ForMultipleChoice"),I9t.forEach(t),cWo=r(XPe," (DeBERTa-v2 model)"),XPe.forEach(t),fWo=i(ee),ev=n(ee,"LI",{});var zPe=s(ev);pue=n(zPe,"STRONG",{});var N9t=s(pue);mWo=r(N9t,"distilbert"),N9t.forEach(t),gWo=r(zPe," \u2014 "),sz=n(zPe,"A",{href:!0});var q9t=s(sz);hWo=r(q9t,"DistilBertForMultipleChoice"),q9t.forEach(t),pWo=r(zPe," (DistilBERT model)"),zPe.forEach(t),_Wo=i(ee),ov=n(ee,"LI",{});var QPe=s(ov);_ue=n(QPe,"STRONG",{});var j9t=s(_ue);uWo=r(j9t,"electra"),j9t.forEach(t),bWo=r(QPe," \u2014 "),lz=n(QPe,"A",{href:!0});var D9t=s(lz);vWo=r(D9t,"ElectraForMultipleChoice"),D9t.forEach(t),FWo=r(QPe," (ELECTRA model)"),QPe.forEach(t),TWo=i(ee),rv=n(ee,"LI",{});var WPe=s(rv);uue=n(WPe,"STRONG",{});var G9t=s(uue);MWo=r(G9t,"flaubert"),G9t.forEach(t),EWo=r(WPe," \u2014 "),iz=n(WPe,"A",{href:!0});var O9t=s(iz);CWo=r(O9t,"FlaubertForMultipleChoice"),O9t.forEach(t),wWo=r(WPe," (FlauBERT model)"),WPe.forEach(t),AWo=i(ee),tv=n(ee,"LI",{});var HPe=s(tv);bue=n(HPe,"STRONG",{});var V9t=s(bue);LWo=r(V9t,"fnet"),V9t.forEach(t),yWo=r(HPe," \u2014 "),dz=n(HPe,"A",{href:!0});var X9t=s(dz);xWo=r(X9t,"FNetForMultipleChoice"),X9t.forEach(t),$Wo=r(HPe," (FNet model)"),HPe.forEach(t),kWo=i(ee),av=n(ee,"LI",{});var UPe=s(av);vue=n(UPe,"STRONG",{});var z9t=s(vue);SWo=r(z9t,"funnel"),z9t.forEach(t),RWo=r(UPe," \u2014 "),cz=n(UPe,"A",{href:!0});var Q9t=s(cz);PWo=r(Q9t,"FunnelForMultipleChoice"),Q9t.forEach(t),BWo=r(UPe," (Funnel Transformer model)"),UPe.forEach(t),IWo=i(ee),nv=n(ee,"LI",{});var JPe=s(nv);Fue=n(JPe,"STRONG",{});var W9t=s(Fue);NWo=r(W9t,"ibert"),W9t.forEach(t),qWo=r(JPe," \u2014 "),fz=n(JPe,"A",{href:!0});var H9t=s(fz);jWo=r(H9t,"IBertForMultipleChoice"),H9t.forEach(t),DWo=r(JPe," (I-BERT model)"),JPe.forEach(t),GWo=i(ee),sv=n(ee,"LI",{});var YPe=s(sv);Tue=n(YPe,"STRONG",{});var U9t=s(Tue);OWo=r(U9t,"longformer"),U9t.forEach(t),VWo=r(YPe," \u2014 "),mz=n(YPe,"A",{href:!0});var J9t=s(mz);XWo=r(J9t,"LongformerForMultipleChoice"),J9t.forEach(t),zWo=r(YPe," (Longformer model)"),YPe.forEach(t),QWo=i(ee),lv=n(ee,"LI",{});var KPe=s(lv);Mue=n(KPe,"STRONG",{});var Y9t=s(Mue);WWo=r(Y9t,"megatron-bert"),Y9t.forEach(t),HWo=r(KPe," \u2014 "),gz=n(KPe,"A",{href:!0});var K9t=s(gz);UWo=r(K9t,"MegatronBertForMultipleChoice"),K9t.forEach(t),JWo=r(KPe," (Megatron-BERT model)"),KPe.forEach(t),YWo=i(ee),iv=n(ee,"LI",{});var ZPe=s(iv);Eue=n(ZPe,"STRONG",{});var Z9t=s(Eue);KWo=r(Z9t,"mobilebert"),Z9t.forEach(t),ZWo=r(ZPe," \u2014 "),hz=n(ZPe,"A",{href:!0});var eMt=s(hz);eHo=r(eMt,"MobileBertForMultipleChoice"),eMt.forEach(t),oHo=r(ZPe," (MobileBERT model)"),ZPe.forEach(t),rHo=i(ee),dv=n(ee,"LI",{});var eBe=s(dv);Cue=n(eBe,"STRONG",{});var oMt=s(Cue);tHo=r(oMt,"mpnet"),oMt.forEach(t),aHo=r(eBe," \u2014 "),pz=n(eBe,"A",{href:!0});var rMt=s(pz);nHo=r(rMt,"MPNetForMultipleChoice"),rMt.forEach(t),sHo=r(eBe," (MPNet model)"),eBe.forEach(t),lHo=i(ee),cv=n(ee,"LI",{});var oBe=s(cv);wue=n(oBe,"STRONG",{});var tMt=s(wue);iHo=r(tMt,"nezha"),tMt.forEach(t),dHo=r(oBe," \u2014 "),_z=n(oBe,"A",{href:!0});var aMt=s(_z);cHo=r(aMt,"NezhaForMultipleChoice"),aMt.forEach(t),fHo=r(oBe," (Nezha model)"),oBe.forEach(t),mHo=i(ee),fv=n(ee,"LI",{});var rBe=s(fv);Aue=n(rBe,"STRONG",{});var nMt=s(Aue);gHo=r(nMt,"nystromformer"),nMt.forEach(t),hHo=r(rBe," \u2014 "),uz=n(rBe,"A",{href:!0});var sMt=s(uz);pHo=r(sMt,"NystromformerForMultipleChoice"),sMt.forEach(t),_Ho=r(rBe," (Nystr\xF6mformer model)"),rBe.forEach(t),uHo=i(ee),mv=n(ee,"LI",{});var tBe=s(mv);Lue=n(tBe,"STRONG",{});var lMt=s(Lue);bHo=r(lMt,"qdqbert"),lMt.forEach(t),vHo=r(tBe," \u2014 "),bz=n(tBe,"A",{href:!0});var iMt=s(bz);FHo=r(iMt,"QDQBertForMultipleChoice"),iMt.forEach(t),THo=r(tBe," (QDQBert model)"),tBe.forEach(t),MHo=i(ee),gv=n(ee,"LI",{});var aBe=s(gv);yue=n(aBe,"STRONG",{});var dMt=s(yue);EHo=r(dMt,"rembert"),dMt.forEach(t),CHo=r(aBe," \u2014 "),vz=n(aBe,"A",{href:!0});var cMt=s(vz);wHo=r(cMt,"RemBertForMultipleChoice"),cMt.forEach(t),AHo=r(aBe," (RemBERT model)"),aBe.forEach(t),LHo=i(ee),hv=n(ee,"LI",{});var nBe=s(hv);xue=n(nBe,"STRONG",{});var fMt=s(xue);yHo=r(fMt,"roberta"),fMt.forEach(t),xHo=r(nBe," \u2014 "),Fz=n(nBe,"A",{href:!0});var mMt=s(Fz);$Ho=r(mMt,"RobertaForMultipleChoice"),mMt.forEach(t),kHo=r(nBe," (RoBERTa model)"),nBe.forEach(t),SHo=i(ee),pv=n(ee,"LI",{});var sBe=s(pv);$ue=n(sBe,"STRONG",{});var gMt=s($ue);RHo=r(gMt,"roformer"),gMt.forEach(t),PHo=r(sBe," \u2014 "),Tz=n(sBe,"A",{href:!0});var hMt=s(Tz);BHo=r(hMt,"RoFormerForMultipleChoice"),hMt.forEach(t),IHo=r(sBe," (RoFormer model)"),sBe.forEach(t),NHo=i(ee),_v=n(ee,"LI",{});var lBe=s(_v);kue=n(lBe,"STRONG",{});var pMt=s(kue);qHo=r(pMt,"squeezebert"),pMt.forEach(t),jHo=r(lBe," \u2014 "),Mz=n(lBe,"A",{href:!0});var _Mt=s(Mz);DHo=r(_Mt,"SqueezeBertForMultipleChoice"),_Mt.forEach(t),GHo=r(lBe," (SqueezeBERT model)"),lBe.forEach(t),OHo=i(ee),uv=n(ee,"LI",{});var iBe=s(uv);Sue=n(iBe,"STRONG",{});var uMt=s(Sue);VHo=r(uMt,"xlm"),uMt.forEach(t),XHo=r(iBe," \u2014 "),Ez=n(iBe,"A",{href:!0});var bMt=s(Ez);zHo=r(bMt,"XLMForMultipleChoice"),bMt.forEach(t),QHo=r(iBe," (XLM model)"),iBe.forEach(t),WHo=i(ee),bv=n(ee,"LI",{});var dBe=s(bv);Rue=n(dBe,"STRONG",{});var vMt=s(Rue);HHo=r(vMt,"xlm-roberta"),vMt.forEach(t),UHo=r(dBe," \u2014 "),Cz=n(dBe,"A",{href:!0});var FMt=s(Cz);JHo=r(FMt,"XLMRobertaForMultipleChoice"),FMt.forEach(t),YHo=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),KHo=i(ee),vv=n(ee,"LI",{});var cBe=s(vv);Pue=n(cBe,"STRONG",{});var TMt=s(Pue);ZHo=r(TMt,"xlm-roberta-xl"),TMt.forEach(t),eUo=r(cBe," \u2014 "),wz=n(cBe,"A",{href:!0});var MMt=s(wz);oUo=r(MMt,"XLMRobertaXLForMultipleChoice"),MMt.forEach(t),rUo=r(cBe," (XLM-RoBERTa-XL model)"),cBe.forEach(t),tUo=i(ee),Fv=n(ee,"LI",{});var fBe=s(Fv);Bue=n(fBe,"STRONG",{});var EMt=s(Bue);aUo=r(EMt,"xlnet"),EMt.forEach(t),nUo=r(fBe," \u2014 "),Az=n(fBe,"A",{href:!0});var CMt=s(Az);sUo=r(CMt,"XLNetForMultipleChoice"),CMt.forEach(t),lUo=r(fBe," (XLNet model)"),fBe.forEach(t),iUo=i(ee),Tv=n(ee,"LI",{});var mBe=s(Tv);Iue=n(mBe,"STRONG",{});var wMt=s(Iue);dUo=r(wMt,"yoso"),wMt.forEach(t),cUo=r(mBe," \u2014 "),Lz=n(mBe,"A",{href:!0});var AMt=s(Lz);fUo=r(AMt,"YosoForMultipleChoice"),AMt.forEach(t),mUo=r(mBe," (YOSO model)"),mBe.forEach(t),ee.forEach(t),gUo=i(ma),Mv=n(ma,"P",{});var gBe=s(Mv);hUo=r(gBe,"The model is set in evaluation mode by default using "),Nue=n(gBe,"CODE",{});var LMt=s(Nue);pUo=r(LMt,"model.eval()"),LMt.forEach(t),_Uo=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(gBe,"CODE",{});var yMt=s(que);uUo=r(yMt,"model.train()"),yMt.forEach(t),gBe.forEach(t),bUo=i(ma),T(Ev.$$.fragment,ma),ma.forEach(t),il.forEach(t),BXe=i(f),id=n(f,"H2",{class:!0});var GQe=s(id);Cv=n(GQe,"A",{id:!0,class:!0,href:!0});var xMt=s(Cv);jue=n(xMt,"SPAN",{});var $Mt=s(jue);T(py.$$.fragment,$Mt),$Mt.forEach(t),xMt.forEach(t),vUo=i(GQe),Due=n(GQe,"SPAN",{});var kMt=s(Due);FUo=r(kMt,"AutoModelForNextSentencePrediction"),kMt.forEach(t),GQe.forEach(t),IXe=i(f),Io=n(f,"DIV",{class:!0});var dl=s(Io);T(_y.$$.fragment,dl),TUo=i(dl),dd=n(dl,"P",{});var Jre=s(dd);MUo=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yz=n(Jre,"A",{href:!0});var SMt=s(yz);EUo=r(SMt,"from_pretrained()"),SMt.forEach(t),CUo=r(Jre," class method or the "),xz=n(Jre,"A",{href:!0});var RMt=s(xz);wUo=r(RMt,"from_config()"),RMt.forEach(t),AUo=r(Jre,` class
method.`),Jre.forEach(t),LUo=i(dl),uy=n(dl,"P",{});var OQe=s(uy);yUo=r(OQe,"This class cannot be instantiated directly using "),Gue=n(OQe,"CODE",{});var PMt=s(Gue);xUo=r(PMt,"__init__()"),PMt.forEach(t),$Uo=r(OQe," (throws an error)."),OQe.forEach(t),kUo=i(dl),ht=n(dl,"DIV",{class:!0});var ww=s(ht);T(by.$$.fragment,ww),SUo=i(ww),Oue=n(ww,"P",{});var BMt=s(Oue);RUo=r(BMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BMt.forEach(t),PUo=i(ww),cd=n(ww,"P",{});var Yre=s(cd);BUo=r(Yre,`Note:
Loading a model from its configuration file does `),Vue=n(Yre,"STRONG",{});var IMt=s(Vue);IUo=r(IMt,"not"),IMt.forEach(t),NUo=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(Yre,"A",{href:!0});var NMt=s($z);qUo=r(NMt,"from_pretrained()"),NMt.forEach(t),jUo=r(Yre," to load the model weights."),Yre.forEach(t),DUo=i(ww),T(wv.$$.fragment,ww),ww.forEach(t),GUo=i(dl),to=n(dl,"DIV",{class:!0});var ga=s(to);T(vy.$$.fragment,ga),OUo=i(ga),Xue=n(ga,"P",{});var qMt=s(Xue);VUo=r(qMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qMt.forEach(t),XUo=i(ga),Va=n(ga,"P",{});var Aw=s(Va);zUo=r(Aw,"The model class to instantiate is selected based on the "),zue=n(Aw,"CODE",{});var jMt=s(zue);QUo=r(jMt,"model_type"),jMt.forEach(t),WUo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Que=n(Aw,"CODE",{});var DMt=s(Que);HUo=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),UUo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(Aw,"CODE",{});var GMt=s(Wue);JUo=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),YUo=r(Aw,":"),Aw.forEach(t),KUo=i(ga),No=n(ga,"UL",{});var ha=s(No);Av=n(ha,"LI",{});var hBe=s(Av);Hue=n(hBe,"STRONG",{});var OMt=s(Hue);ZUo=r(OMt,"bert"),OMt.forEach(t),eJo=r(hBe," \u2014 "),kz=n(hBe,"A",{href:!0});var VMt=s(kz);oJo=r(VMt,"BertForNextSentencePrediction"),VMt.forEach(t),rJo=r(hBe," (BERT model)"),hBe.forEach(t),tJo=i(ha),Lv=n(ha,"LI",{});var pBe=s(Lv);Uue=n(pBe,"STRONG",{});var XMt=s(Uue);aJo=r(XMt,"fnet"),XMt.forEach(t),nJo=r(pBe," \u2014 "),Sz=n(pBe,"A",{href:!0});var zMt=s(Sz);sJo=r(zMt,"FNetForNextSentencePrediction"),zMt.forEach(t),lJo=r(pBe," (FNet model)"),pBe.forEach(t),iJo=i(ha),yv=n(ha,"LI",{});var _Be=s(yv);Jue=n(_Be,"STRONG",{});var QMt=s(Jue);dJo=r(QMt,"megatron-bert"),QMt.forEach(t),cJo=r(_Be," \u2014 "),Rz=n(_Be,"A",{href:!0});var WMt=s(Rz);fJo=r(WMt,"MegatronBertForNextSentencePrediction"),WMt.forEach(t),mJo=r(_Be," (Megatron-BERT model)"),_Be.forEach(t),gJo=i(ha),xv=n(ha,"LI",{});var uBe=s(xv);Yue=n(uBe,"STRONG",{});var HMt=s(Yue);hJo=r(HMt,"mobilebert"),HMt.forEach(t),pJo=r(uBe," \u2014 "),Pz=n(uBe,"A",{href:!0});var UMt=s(Pz);_Jo=r(UMt,"MobileBertForNextSentencePrediction"),UMt.forEach(t),uJo=r(uBe," (MobileBERT model)"),uBe.forEach(t),bJo=i(ha),$v=n(ha,"LI",{});var bBe=s($v);Kue=n(bBe,"STRONG",{});var JMt=s(Kue);vJo=r(JMt,"nezha"),JMt.forEach(t),FJo=r(bBe," \u2014 "),Bz=n(bBe,"A",{href:!0});var YMt=s(Bz);TJo=r(YMt,"NezhaForNextSentencePrediction"),YMt.forEach(t),MJo=r(bBe," (Nezha model)"),bBe.forEach(t),EJo=i(ha),kv=n(ha,"LI",{});var vBe=s(kv);Zue=n(vBe,"STRONG",{});var KMt=s(Zue);CJo=r(KMt,"qdqbert"),KMt.forEach(t),wJo=r(vBe," \u2014 "),Iz=n(vBe,"A",{href:!0});var ZMt=s(Iz);AJo=r(ZMt,"QDQBertForNextSentencePrediction"),ZMt.forEach(t),LJo=r(vBe," (QDQBert model)"),vBe.forEach(t),ha.forEach(t),yJo=i(ga),Sv=n(ga,"P",{});var FBe=s(Sv);xJo=r(FBe,"The model is set in evaluation mode by default using "),e1e=n(FBe,"CODE",{});var eEt=s(e1e);$Jo=r(eEt,"model.eval()"),eEt.forEach(t),kJo=r(FBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(FBe,"CODE",{});var oEt=s(o1e);SJo=r(oEt,"model.train()"),oEt.forEach(t),FBe.forEach(t),RJo=i(ga),T(Rv.$$.fragment,ga),ga.forEach(t),dl.forEach(t),NXe=i(f),fd=n(f,"H2",{class:!0});var VQe=s(fd);Pv=n(VQe,"A",{id:!0,class:!0,href:!0});var rEt=s(Pv);r1e=n(rEt,"SPAN",{});var tEt=s(r1e);T(Fy.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),PJo=i(VQe),t1e=n(VQe,"SPAN",{});var aEt=s(t1e);BJo=r(aEt,"AutoModelForTokenClassification"),aEt.forEach(t),VQe.forEach(t),qXe=i(f),qo=n(f,"DIV",{class:!0});var cl=s(qo);T(Ty.$$.fragment,cl),IJo=i(cl),md=n(cl,"P",{});var Kre=s(md);NJo=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Nz=n(Kre,"A",{href:!0});var nEt=s(Nz);qJo=r(nEt,"from_pretrained()"),nEt.forEach(t),jJo=r(Kre," class method or the "),qz=n(Kre,"A",{href:!0});var sEt=s(qz);DJo=r(sEt,"from_config()"),sEt.forEach(t),GJo=r(Kre,` class
method.`),Kre.forEach(t),OJo=i(cl),My=n(cl,"P",{});var XQe=s(My);VJo=r(XQe,"This class cannot be instantiated directly using "),a1e=n(XQe,"CODE",{});var lEt=s(a1e);XJo=r(lEt,"__init__()"),lEt.forEach(t),zJo=r(XQe," (throws an error)."),XQe.forEach(t),QJo=i(cl),pt=n(cl,"DIV",{class:!0});var Lw=s(pt);T(Ey.$$.fragment,Lw),WJo=i(Lw),n1e=n(Lw,"P",{});var iEt=s(n1e);HJo=r(iEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iEt.forEach(t),UJo=i(Lw),gd=n(Lw,"P",{});var Zre=s(gd);JJo=r(Zre,`Note:
Loading a model from its configuration file does `),s1e=n(Zre,"STRONG",{});var dEt=s(s1e);YJo=r(dEt,"not"),dEt.forEach(t),KJo=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(Zre,"A",{href:!0});var cEt=s(jz);ZJo=r(cEt,"from_pretrained()"),cEt.forEach(t),eYo=r(Zre," to load the model weights."),Zre.forEach(t),oYo=i(Lw),T(Bv.$$.fragment,Lw),Lw.forEach(t),rYo=i(cl),ao=n(cl,"DIV",{class:!0});var pa=s(ao);T(Cy.$$.fragment,pa),tYo=i(pa),l1e=n(pa,"P",{});var fEt=s(l1e);aYo=r(fEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fEt.forEach(t),nYo=i(pa),Xa=n(pa,"P",{});var yw=s(Xa);sYo=r(yw,"The model class to instantiate is selected based on the "),i1e=n(yw,"CODE",{});var mEt=s(i1e);lYo=r(mEt,"model_type"),mEt.forEach(t),iYo=r(yw,` property of the config object (either
passed as an argument or loaded from `),d1e=n(yw,"CODE",{});var gEt=s(d1e);dYo=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),cYo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(yw,"CODE",{});var hEt=s(c1e);fYo=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),mYo=r(yw,":"),yw.forEach(t),gYo=i(pa),U=n(pa,"UL",{});var Y=s(U);Iv=n(Y,"LI",{});var TBe=s(Iv);f1e=n(TBe,"STRONG",{});var pEt=s(f1e);hYo=r(pEt,"albert"),pEt.forEach(t),pYo=r(TBe," \u2014 "),Dz=n(TBe,"A",{href:!0});var _Et=s(Dz);_Yo=r(_Et,"AlbertForTokenClassification"),_Et.forEach(t),uYo=r(TBe," (ALBERT model)"),TBe.forEach(t),bYo=i(Y),Nv=n(Y,"LI",{});var MBe=s(Nv);m1e=n(MBe,"STRONG",{});var uEt=s(m1e);vYo=r(uEt,"bert"),uEt.forEach(t),FYo=r(MBe," \u2014 "),Gz=n(MBe,"A",{href:!0});var bEt=s(Gz);TYo=r(bEt,"BertForTokenClassification"),bEt.forEach(t),MYo=r(MBe," (BERT model)"),MBe.forEach(t),EYo=i(Y),qv=n(Y,"LI",{});var EBe=s(qv);g1e=n(EBe,"STRONG",{});var vEt=s(g1e);CYo=r(vEt,"big_bird"),vEt.forEach(t),wYo=r(EBe," \u2014 "),Oz=n(EBe,"A",{href:!0});var FEt=s(Oz);AYo=r(FEt,"BigBirdForTokenClassification"),FEt.forEach(t),LYo=r(EBe," (BigBird model)"),EBe.forEach(t),yYo=i(Y),jv=n(Y,"LI",{});var CBe=s(jv);h1e=n(CBe,"STRONG",{});var TEt=s(h1e);xYo=r(TEt,"bloom"),TEt.forEach(t),$Yo=r(CBe," \u2014 "),Vz=n(CBe,"A",{href:!0});var MEt=s(Vz);kYo=r(MEt,"BloomForTokenClassification"),MEt.forEach(t),SYo=r(CBe," (BLOOM model)"),CBe.forEach(t),RYo=i(Y),Dv=n(Y,"LI",{});var wBe=s(Dv);p1e=n(wBe,"STRONG",{});var EEt=s(p1e);PYo=r(EEt,"camembert"),EEt.forEach(t),BYo=r(wBe," \u2014 "),Xz=n(wBe,"A",{href:!0});var CEt=s(Xz);IYo=r(CEt,"CamembertForTokenClassification"),CEt.forEach(t),NYo=r(wBe," (CamemBERT model)"),wBe.forEach(t),qYo=i(Y),Gv=n(Y,"LI",{});var ABe=s(Gv);_1e=n(ABe,"STRONG",{});var wEt=s(_1e);jYo=r(wEt,"canine"),wEt.forEach(t),DYo=r(ABe," \u2014 "),zz=n(ABe,"A",{href:!0});var AEt=s(zz);GYo=r(AEt,"CanineForTokenClassification"),AEt.forEach(t),OYo=r(ABe," (CANINE model)"),ABe.forEach(t),VYo=i(Y),Ov=n(Y,"LI",{});var LBe=s(Ov);u1e=n(LBe,"STRONG",{});var LEt=s(u1e);XYo=r(LEt,"convbert"),LEt.forEach(t),zYo=r(LBe," \u2014 "),Qz=n(LBe,"A",{href:!0});var yEt=s(Qz);QYo=r(yEt,"ConvBertForTokenClassification"),yEt.forEach(t),WYo=r(LBe," (ConvBERT model)"),LBe.forEach(t),HYo=i(Y),Vv=n(Y,"LI",{});var yBe=s(Vv);b1e=n(yBe,"STRONG",{});var xEt=s(b1e);UYo=r(xEt,"data2vec-text"),xEt.forEach(t),JYo=r(yBe," \u2014 "),Wz=n(yBe,"A",{href:!0});var $Et=s(Wz);YYo=r($Et,"Data2VecTextForTokenClassification"),$Et.forEach(t),KYo=r(yBe," (Data2VecText model)"),yBe.forEach(t),ZYo=i(Y),Xv=n(Y,"LI",{});var xBe=s(Xv);v1e=n(xBe,"STRONG",{});var kEt=s(v1e);eKo=r(kEt,"deberta"),kEt.forEach(t),oKo=r(xBe," \u2014 "),Hz=n(xBe,"A",{href:!0});var SEt=s(Hz);rKo=r(SEt,"DebertaForTokenClassification"),SEt.forEach(t),tKo=r(xBe," (DeBERTa model)"),xBe.forEach(t),aKo=i(Y),zv=n(Y,"LI",{});var $Be=s(zv);F1e=n($Be,"STRONG",{});var REt=s(F1e);nKo=r(REt,"deberta-v2"),REt.forEach(t),sKo=r($Be," \u2014 "),Uz=n($Be,"A",{href:!0});var PEt=s(Uz);lKo=r(PEt,"DebertaV2ForTokenClassification"),PEt.forEach(t),iKo=r($Be," (DeBERTa-v2 model)"),$Be.forEach(t),dKo=i(Y),Qv=n(Y,"LI",{});var kBe=s(Qv);T1e=n(kBe,"STRONG",{});var BEt=s(T1e);cKo=r(BEt,"distilbert"),BEt.forEach(t),fKo=r(kBe," \u2014 "),Jz=n(kBe,"A",{href:!0});var IEt=s(Jz);mKo=r(IEt,"DistilBertForTokenClassification"),IEt.forEach(t),gKo=r(kBe," (DistilBERT model)"),kBe.forEach(t),hKo=i(Y),Wv=n(Y,"LI",{});var SBe=s(Wv);M1e=n(SBe,"STRONG",{});var NEt=s(M1e);pKo=r(NEt,"electra"),NEt.forEach(t),_Ko=r(SBe," \u2014 "),Yz=n(SBe,"A",{href:!0});var qEt=s(Yz);uKo=r(qEt,"ElectraForTokenClassification"),qEt.forEach(t),bKo=r(SBe," (ELECTRA model)"),SBe.forEach(t),vKo=i(Y),Hv=n(Y,"LI",{});var RBe=s(Hv);E1e=n(RBe,"STRONG",{});var jEt=s(E1e);FKo=r(jEt,"flaubert"),jEt.forEach(t),TKo=r(RBe," \u2014 "),Kz=n(RBe,"A",{href:!0});var DEt=s(Kz);MKo=r(DEt,"FlaubertForTokenClassification"),DEt.forEach(t),EKo=r(RBe," (FlauBERT model)"),RBe.forEach(t),CKo=i(Y),Uv=n(Y,"LI",{});var PBe=s(Uv);C1e=n(PBe,"STRONG",{});var GEt=s(C1e);wKo=r(GEt,"fnet"),GEt.forEach(t),AKo=r(PBe," \u2014 "),Zz=n(PBe,"A",{href:!0});var OEt=s(Zz);LKo=r(OEt,"FNetForTokenClassification"),OEt.forEach(t),yKo=r(PBe," (FNet model)"),PBe.forEach(t),xKo=i(Y),Jv=n(Y,"LI",{});var BBe=s(Jv);w1e=n(BBe,"STRONG",{});var VEt=s(w1e);$Ko=r(VEt,"funnel"),VEt.forEach(t),kKo=r(BBe," \u2014 "),eQ=n(BBe,"A",{href:!0});var XEt=s(eQ);SKo=r(XEt,"FunnelForTokenClassification"),XEt.forEach(t),RKo=r(BBe," (Funnel Transformer model)"),BBe.forEach(t),PKo=i(Y),Yv=n(Y,"LI",{});var IBe=s(Yv);A1e=n(IBe,"STRONG",{});var zEt=s(A1e);BKo=r(zEt,"gpt2"),zEt.forEach(t),IKo=r(IBe," \u2014 "),oQ=n(IBe,"A",{href:!0});var QEt=s(oQ);NKo=r(QEt,"GPT2ForTokenClassification"),QEt.forEach(t),qKo=r(IBe," (OpenAI GPT-2 model)"),IBe.forEach(t),jKo=i(Y),Kv=n(Y,"LI",{});var NBe=s(Kv);L1e=n(NBe,"STRONG",{});var WEt=s(L1e);DKo=r(WEt,"ibert"),WEt.forEach(t),GKo=r(NBe," \u2014 "),rQ=n(NBe,"A",{href:!0});var HEt=s(rQ);OKo=r(HEt,"IBertForTokenClassification"),HEt.forEach(t),VKo=r(NBe," (I-BERT model)"),NBe.forEach(t),XKo=i(Y),Zv=n(Y,"LI",{});var qBe=s(Zv);y1e=n(qBe,"STRONG",{});var UEt=s(y1e);zKo=r(UEt,"layoutlm"),UEt.forEach(t),QKo=r(qBe," \u2014 "),tQ=n(qBe,"A",{href:!0});var JEt=s(tQ);WKo=r(JEt,"LayoutLMForTokenClassification"),JEt.forEach(t),HKo=r(qBe," (LayoutLM model)"),qBe.forEach(t),UKo=i(Y),eF=n(Y,"LI",{});var jBe=s(eF);x1e=n(jBe,"STRONG",{});var YEt=s(x1e);JKo=r(YEt,"layoutlmv2"),YEt.forEach(t),YKo=r(jBe," \u2014 "),aQ=n(jBe,"A",{href:!0});var KEt=s(aQ);KKo=r(KEt,"LayoutLMv2ForTokenClassification"),KEt.forEach(t),ZKo=r(jBe," (LayoutLMv2 model)"),jBe.forEach(t),eZo=i(Y),oF=n(Y,"LI",{});var DBe=s(oF);$1e=n(DBe,"STRONG",{});var ZEt=s($1e);oZo=r(ZEt,"layoutlmv3"),ZEt.forEach(t),rZo=r(DBe," \u2014 "),nQ=n(DBe,"A",{href:!0});var eCt=s(nQ);tZo=r(eCt,"LayoutLMv3ForTokenClassification"),eCt.forEach(t),aZo=r(DBe," (LayoutLMv3 model)"),DBe.forEach(t),nZo=i(Y),rF=n(Y,"LI",{});var GBe=s(rF);k1e=n(GBe,"STRONG",{});var oCt=s(k1e);sZo=r(oCt,"longformer"),oCt.forEach(t),lZo=r(GBe," \u2014 "),sQ=n(GBe,"A",{href:!0});var rCt=s(sQ);iZo=r(rCt,"LongformerForTokenClassification"),rCt.forEach(t),dZo=r(GBe," (Longformer model)"),GBe.forEach(t),cZo=i(Y),tF=n(Y,"LI",{});var OBe=s(tF);S1e=n(OBe,"STRONG",{});var tCt=s(S1e);fZo=r(tCt,"megatron-bert"),tCt.forEach(t),mZo=r(OBe," \u2014 "),lQ=n(OBe,"A",{href:!0});var aCt=s(lQ);gZo=r(aCt,"MegatronBertForTokenClassification"),aCt.forEach(t),hZo=r(OBe," (Megatron-BERT model)"),OBe.forEach(t),pZo=i(Y),aF=n(Y,"LI",{});var VBe=s(aF);R1e=n(VBe,"STRONG",{});var nCt=s(R1e);_Zo=r(nCt,"mobilebert"),nCt.forEach(t),uZo=r(VBe," \u2014 "),iQ=n(VBe,"A",{href:!0});var sCt=s(iQ);bZo=r(sCt,"MobileBertForTokenClassification"),sCt.forEach(t),vZo=r(VBe," (MobileBERT model)"),VBe.forEach(t),FZo=i(Y),nF=n(Y,"LI",{});var XBe=s(nF);P1e=n(XBe,"STRONG",{});var lCt=s(P1e);TZo=r(lCt,"mpnet"),lCt.forEach(t),MZo=r(XBe," \u2014 "),dQ=n(XBe,"A",{href:!0});var iCt=s(dQ);EZo=r(iCt,"MPNetForTokenClassification"),iCt.forEach(t),CZo=r(XBe," (MPNet model)"),XBe.forEach(t),wZo=i(Y),sF=n(Y,"LI",{});var zBe=s(sF);B1e=n(zBe,"STRONG",{});var dCt=s(B1e);AZo=r(dCt,"nezha"),dCt.forEach(t),LZo=r(zBe," \u2014 "),cQ=n(zBe,"A",{href:!0});var cCt=s(cQ);yZo=r(cCt,"NezhaForTokenClassification"),cCt.forEach(t),xZo=r(zBe," (Nezha model)"),zBe.forEach(t),$Zo=i(Y),lF=n(Y,"LI",{});var QBe=s(lF);I1e=n(QBe,"STRONG",{});var fCt=s(I1e);kZo=r(fCt,"nystromformer"),fCt.forEach(t),SZo=r(QBe," \u2014 "),fQ=n(QBe,"A",{href:!0});var mCt=s(fQ);RZo=r(mCt,"NystromformerForTokenClassification"),mCt.forEach(t),PZo=r(QBe," (Nystr\xF6mformer model)"),QBe.forEach(t),BZo=i(Y),iF=n(Y,"LI",{});var WBe=s(iF);N1e=n(WBe,"STRONG",{});var gCt=s(N1e);IZo=r(gCt,"qdqbert"),gCt.forEach(t),NZo=r(WBe," \u2014 "),mQ=n(WBe,"A",{href:!0});var hCt=s(mQ);qZo=r(hCt,"QDQBertForTokenClassification"),hCt.forEach(t),jZo=r(WBe," (QDQBert model)"),WBe.forEach(t),DZo=i(Y),dF=n(Y,"LI",{});var HBe=s(dF);q1e=n(HBe,"STRONG",{});var pCt=s(q1e);GZo=r(pCt,"rembert"),pCt.forEach(t),OZo=r(HBe," \u2014 "),gQ=n(HBe,"A",{href:!0});var _Ct=s(gQ);VZo=r(_Ct,"RemBertForTokenClassification"),_Ct.forEach(t),XZo=r(HBe," (RemBERT model)"),HBe.forEach(t),zZo=i(Y),cF=n(Y,"LI",{});var UBe=s(cF);j1e=n(UBe,"STRONG",{});var uCt=s(j1e);QZo=r(uCt,"roberta"),uCt.forEach(t),WZo=r(UBe," \u2014 "),hQ=n(UBe,"A",{href:!0});var bCt=s(hQ);HZo=r(bCt,"RobertaForTokenClassification"),bCt.forEach(t),UZo=r(UBe," (RoBERTa model)"),UBe.forEach(t),JZo=i(Y),fF=n(Y,"LI",{});var JBe=s(fF);D1e=n(JBe,"STRONG",{});var vCt=s(D1e);YZo=r(vCt,"roformer"),vCt.forEach(t),KZo=r(JBe," \u2014 "),pQ=n(JBe,"A",{href:!0});var FCt=s(pQ);ZZo=r(FCt,"RoFormerForTokenClassification"),FCt.forEach(t),eer=r(JBe," (RoFormer model)"),JBe.forEach(t),oer=i(Y),mF=n(Y,"LI",{});var YBe=s(mF);G1e=n(YBe,"STRONG",{});var TCt=s(G1e);rer=r(TCt,"squeezebert"),TCt.forEach(t),ter=r(YBe," \u2014 "),_Q=n(YBe,"A",{href:!0});var MCt=s(_Q);aer=r(MCt,"SqueezeBertForTokenClassification"),MCt.forEach(t),ner=r(YBe," (SqueezeBERT model)"),YBe.forEach(t),ser=i(Y),gF=n(Y,"LI",{});var KBe=s(gF);O1e=n(KBe,"STRONG",{});var ECt=s(O1e);ler=r(ECt,"xlm"),ECt.forEach(t),ier=r(KBe," \u2014 "),uQ=n(KBe,"A",{href:!0});var CCt=s(uQ);der=r(CCt,"XLMForTokenClassification"),CCt.forEach(t),cer=r(KBe," (XLM model)"),KBe.forEach(t),fer=i(Y),hF=n(Y,"LI",{});var ZBe=s(hF);V1e=n(ZBe,"STRONG",{});var wCt=s(V1e);mer=r(wCt,"xlm-roberta"),wCt.forEach(t),ger=r(ZBe," \u2014 "),bQ=n(ZBe,"A",{href:!0});var ACt=s(bQ);her=r(ACt,"XLMRobertaForTokenClassification"),ACt.forEach(t),per=r(ZBe," (XLM-RoBERTa model)"),ZBe.forEach(t),_er=i(Y),pF=n(Y,"LI",{});var eIe=s(pF);X1e=n(eIe,"STRONG",{});var LCt=s(X1e);uer=r(LCt,"xlm-roberta-xl"),LCt.forEach(t),ber=r(eIe," \u2014 "),vQ=n(eIe,"A",{href:!0});var yCt=s(vQ);ver=r(yCt,"XLMRobertaXLForTokenClassification"),yCt.forEach(t),Fer=r(eIe," (XLM-RoBERTa-XL model)"),eIe.forEach(t),Ter=i(Y),_F=n(Y,"LI",{});var oIe=s(_F);z1e=n(oIe,"STRONG",{});var xCt=s(z1e);Mer=r(xCt,"xlnet"),xCt.forEach(t),Eer=r(oIe," \u2014 "),FQ=n(oIe,"A",{href:!0});var $Ct=s(FQ);Cer=r($Ct,"XLNetForTokenClassification"),$Ct.forEach(t),wer=r(oIe," (XLNet model)"),oIe.forEach(t),Aer=i(Y),uF=n(Y,"LI",{});var rIe=s(uF);Q1e=n(rIe,"STRONG",{});var kCt=s(Q1e);Ler=r(kCt,"yoso"),kCt.forEach(t),yer=r(rIe," \u2014 "),TQ=n(rIe,"A",{href:!0});var SCt=s(TQ);xer=r(SCt,"YosoForTokenClassification"),SCt.forEach(t),$er=r(rIe," (YOSO model)"),rIe.forEach(t),Y.forEach(t),ker=i(pa),bF=n(pa,"P",{});var tIe=s(bF);Ser=r(tIe,"The model is set in evaluation mode by default using "),W1e=n(tIe,"CODE",{});var RCt=s(W1e);Rer=r(RCt,"model.eval()"),RCt.forEach(t),Per=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H1e=n(tIe,"CODE",{});var PCt=s(H1e);Ber=r(PCt,"model.train()"),PCt.forEach(t),tIe.forEach(t),Ier=i(pa),T(vF.$$.fragment,pa),pa.forEach(t),cl.forEach(t),jXe=i(f),hd=n(f,"H2",{class:!0});var zQe=s(hd);FF=n(zQe,"A",{id:!0,class:!0,href:!0});var BCt=s(FF);U1e=n(BCt,"SPAN",{});var ICt=s(U1e);T(wy.$$.fragment,ICt),ICt.forEach(t),BCt.forEach(t),Ner=i(zQe),J1e=n(zQe,"SPAN",{});var NCt=s(J1e);qer=r(NCt,"AutoModelForQuestionAnswering"),NCt.forEach(t),zQe.forEach(t),DXe=i(f),jo=n(f,"DIV",{class:!0});var fl=s(jo);T(Ay.$$.fragment,fl),jer=i(fl),pd=n(fl,"P",{});var ete=s(pd);Der=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MQ=n(ete,"A",{href:!0});var qCt=s(MQ);Ger=r(qCt,"from_pretrained()"),qCt.forEach(t),Oer=r(ete," class method or the "),EQ=n(ete,"A",{href:!0});var jCt=s(EQ);Ver=r(jCt,"from_config()"),jCt.forEach(t),Xer=r(ete,` class
method.`),ete.forEach(t),zer=i(fl),Ly=n(fl,"P",{});var QQe=s(Ly);Qer=r(QQe,"This class cannot be instantiated directly using "),Y1e=n(QQe,"CODE",{});var DCt=s(Y1e);Wer=r(DCt,"__init__()"),DCt.forEach(t),Her=r(QQe," (throws an error)."),QQe.forEach(t),Uer=i(fl),_t=n(fl,"DIV",{class:!0});var xw=s(_t);T(yy.$$.fragment,xw),Jer=i(xw),K1e=n(xw,"P",{});var GCt=s(K1e);Yer=r(GCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GCt.forEach(t),Ker=i(xw),_d=n(xw,"P",{});var ote=s(_d);Zer=r(ote,`Note:
Loading a model from its configuration file does `),Z1e=n(ote,"STRONG",{});var OCt=s(Z1e);eor=r(OCt,"not"),OCt.forEach(t),oor=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(ote,"A",{href:!0});var VCt=s(CQ);ror=r(VCt,"from_pretrained()"),VCt.forEach(t),tor=r(ote," to load the model weights."),ote.forEach(t),aor=i(xw),T(TF.$$.fragment,xw),xw.forEach(t),nor=i(fl),no=n(fl,"DIV",{class:!0});var _a=s(no);T(xy.$$.fragment,_a),sor=i(_a),e2e=n(_a,"P",{});var XCt=s(e2e);lor=r(XCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XCt.forEach(t),ior=i(_a),za=n(_a,"P",{});var $w=s(za);dor=r($w,"The model class to instantiate is selected based on the "),o2e=n($w,"CODE",{});var zCt=s(o2e);cor=r(zCt,"model_type"),zCt.forEach(t),mor=r($w,` property of the config object (either
passed as an argument or loaded from `),r2e=n($w,"CODE",{});var QCt=s(r2e);gor=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),hor=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n($w,"CODE",{});var WCt=s(t2e);por=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),_or=r($w,":"),$w.forEach(t),uor=i(_a),V=n(_a,"UL",{});var X=s(V);MF=n(X,"LI",{});var aIe=s(MF);a2e=n(aIe,"STRONG",{});var HCt=s(a2e);bor=r(HCt,"albert"),HCt.forEach(t),vor=r(aIe," \u2014 "),wQ=n(aIe,"A",{href:!0});var UCt=s(wQ);For=r(UCt,"AlbertForQuestionAnswering"),UCt.forEach(t),Tor=r(aIe," (ALBERT model)"),aIe.forEach(t),Mor=i(X),EF=n(X,"LI",{});var nIe=s(EF);n2e=n(nIe,"STRONG",{});var JCt=s(n2e);Eor=r(JCt,"bart"),JCt.forEach(t),Cor=r(nIe," \u2014 "),AQ=n(nIe,"A",{href:!0});var YCt=s(AQ);wor=r(YCt,"BartForQuestionAnswering"),YCt.forEach(t),Aor=r(nIe," (BART model)"),nIe.forEach(t),Lor=i(X),CF=n(X,"LI",{});var sIe=s(CF);s2e=n(sIe,"STRONG",{});var KCt=s(s2e);yor=r(KCt,"bert"),KCt.forEach(t),xor=r(sIe," \u2014 "),LQ=n(sIe,"A",{href:!0});var ZCt=s(LQ);$or=r(ZCt,"BertForQuestionAnswering"),ZCt.forEach(t),kor=r(sIe," (BERT model)"),sIe.forEach(t),Sor=i(X),wF=n(X,"LI",{});var lIe=s(wF);l2e=n(lIe,"STRONG",{});var e3t=s(l2e);Ror=r(e3t,"big_bird"),e3t.forEach(t),Por=r(lIe," \u2014 "),yQ=n(lIe,"A",{href:!0});var o3t=s(yQ);Bor=r(o3t,"BigBirdForQuestionAnswering"),o3t.forEach(t),Ior=r(lIe," (BigBird model)"),lIe.forEach(t),Nor=i(X),AF=n(X,"LI",{});var iIe=s(AF);i2e=n(iIe,"STRONG",{});var r3t=s(i2e);qor=r(r3t,"bigbird_pegasus"),r3t.forEach(t),jor=r(iIe," \u2014 "),xQ=n(iIe,"A",{href:!0});var t3t=s(xQ);Dor=r(t3t,"BigBirdPegasusForQuestionAnswering"),t3t.forEach(t),Gor=r(iIe," (BigBird-Pegasus model)"),iIe.forEach(t),Oor=i(X),LF=n(X,"LI",{});var dIe=s(LF);d2e=n(dIe,"STRONG",{});var a3t=s(d2e);Vor=r(a3t,"camembert"),a3t.forEach(t),Xor=r(dIe," \u2014 "),$Q=n(dIe,"A",{href:!0});var n3t=s($Q);zor=r(n3t,"CamembertForQuestionAnswering"),n3t.forEach(t),Qor=r(dIe," (CamemBERT model)"),dIe.forEach(t),Wor=i(X),yF=n(X,"LI",{});var cIe=s(yF);c2e=n(cIe,"STRONG",{});var s3t=s(c2e);Hor=r(s3t,"canine"),s3t.forEach(t),Uor=r(cIe," \u2014 "),kQ=n(cIe,"A",{href:!0});var l3t=s(kQ);Jor=r(l3t,"CanineForQuestionAnswering"),l3t.forEach(t),Yor=r(cIe," (CANINE model)"),cIe.forEach(t),Kor=i(X),xF=n(X,"LI",{});var fIe=s(xF);f2e=n(fIe,"STRONG",{});var i3t=s(f2e);Zor=r(i3t,"convbert"),i3t.forEach(t),err=r(fIe," \u2014 "),SQ=n(fIe,"A",{href:!0});var d3t=s(SQ);orr=r(d3t,"ConvBertForQuestionAnswering"),d3t.forEach(t),rrr=r(fIe," (ConvBERT model)"),fIe.forEach(t),trr=i(X),$F=n(X,"LI",{});var mIe=s($F);m2e=n(mIe,"STRONG",{});var c3t=s(m2e);arr=r(c3t,"data2vec-text"),c3t.forEach(t),nrr=r(mIe," \u2014 "),RQ=n(mIe,"A",{href:!0});var f3t=s(RQ);srr=r(f3t,"Data2VecTextForQuestionAnswering"),f3t.forEach(t),lrr=r(mIe," (Data2VecText model)"),mIe.forEach(t),irr=i(X),kF=n(X,"LI",{});var gIe=s(kF);g2e=n(gIe,"STRONG",{});var m3t=s(g2e);drr=r(m3t,"deberta"),m3t.forEach(t),crr=r(gIe," \u2014 "),PQ=n(gIe,"A",{href:!0});var g3t=s(PQ);frr=r(g3t,"DebertaForQuestionAnswering"),g3t.forEach(t),mrr=r(gIe," (DeBERTa model)"),gIe.forEach(t),grr=i(X),SF=n(X,"LI",{});var hIe=s(SF);h2e=n(hIe,"STRONG",{});var h3t=s(h2e);hrr=r(h3t,"deberta-v2"),h3t.forEach(t),prr=r(hIe," \u2014 "),BQ=n(hIe,"A",{href:!0});var p3t=s(BQ);_rr=r(p3t,"DebertaV2ForQuestionAnswering"),p3t.forEach(t),urr=r(hIe," (DeBERTa-v2 model)"),hIe.forEach(t),brr=i(X),RF=n(X,"LI",{});var pIe=s(RF);p2e=n(pIe,"STRONG",{});var _3t=s(p2e);vrr=r(_3t,"distilbert"),_3t.forEach(t),Frr=r(pIe," \u2014 "),IQ=n(pIe,"A",{href:!0});var u3t=s(IQ);Trr=r(u3t,"DistilBertForQuestionAnswering"),u3t.forEach(t),Mrr=r(pIe," (DistilBERT model)"),pIe.forEach(t),Err=i(X),PF=n(X,"LI",{});var _Ie=s(PF);_2e=n(_Ie,"STRONG",{});var b3t=s(_2e);Crr=r(b3t,"electra"),b3t.forEach(t),wrr=r(_Ie," \u2014 "),NQ=n(_Ie,"A",{href:!0});var v3t=s(NQ);Arr=r(v3t,"ElectraForQuestionAnswering"),v3t.forEach(t),Lrr=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),yrr=i(X),BF=n(X,"LI",{});var uIe=s(BF);u2e=n(uIe,"STRONG",{});var F3t=s(u2e);xrr=r(F3t,"flaubert"),F3t.forEach(t),$rr=r(uIe," \u2014 "),qQ=n(uIe,"A",{href:!0});var T3t=s(qQ);krr=r(T3t,"FlaubertForQuestionAnsweringSimple"),T3t.forEach(t),Srr=r(uIe," (FlauBERT model)"),uIe.forEach(t),Rrr=i(X),IF=n(X,"LI",{});var bIe=s(IF);b2e=n(bIe,"STRONG",{});var M3t=s(b2e);Prr=r(M3t,"fnet"),M3t.forEach(t),Brr=r(bIe," \u2014 "),jQ=n(bIe,"A",{href:!0});var E3t=s(jQ);Irr=r(E3t,"FNetForQuestionAnswering"),E3t.forEach(t),Nrr=r(bIe," (FNet model)"),bIe.forEach(t),qrr=i(X),NF=n(X,"LI",{});var vIe=s(NF);v2e=n(vIe,"STRONG",{});var C3t=s(v2e);jrr=r(C3t,"funnel"),C3t.forEach(t),Drr=r(vIe," \u2014 "),DQ=n(vIe,"A",{href:!0});var w3t=s(DQ);Grr=r(w3t,"FunnelForQuestionAnswering"),w3t.forEach(t),Orr=r(vIe," (Funnel Transformer model)"),vIe.forEach(t),Vrr=i(X),qF=n(X,"LI",{});var FIe=s(qF);F2e=n(FIe,"STRONG",{});var A3t=s(F2e);Xrr=r(A3t,"gptj"),A3t.forEach(t),zrr=r(FIe," \u2014 "),GQ=n(FIe,"A",{href:!0});var L3t=s(GQ);Qrr=r(L3t,"GPTJForQuestionAnswering"),L3t.forEach(t),Wrr=r(FIe," (GPT-J model)"),FIe.forEach(t),Hrr=i(X),jF=n(X,"LI",{});var TIe=s(jF);T2e=n(TIe,"STRONG",{});var y3t=s(T2e);Urr=r(y3t,"ibert"),y3t.forEach(t),Jrr=r(TIe," \u2014 "),OQ=n(TIe,"A",{href:!0});var x3t=s(OQ);Yrr=r(x3t,"IBertForQuestionAnswering"),x3t.forEach(t),Krr=r(TIe," (I-BERT model)"),TIe.forEach(t),Zrr=i(X),DF=n(X,"LI",{});var MIe=s(DF);M2e=n(MIe,"STRONG",{});var $3t=s(M2e);etr=r($3t,"layoutlmv2"),$3t.forEach(t),otr=r(MIe," \u2014 "),VQ=n(MIe,"A",{href:!0});var k3t=s(VQ);rtr=r(k3t,"LayoutLMv2ForQuestionAnswering"),k3t.forEach(t),ttr=r(MIe," (LayoutLMv2 model)"),MIe.forEach(t),atr=i(X),GF=n(X,"LI",{});var EIe=s(GF);E2e=n(EIe,"STRONG",{});var S3t=s(E2e);ntr=r(S3t,"layoutlmv3"),S3t.forEach(t),str=r(EIe," \u2014 "),XQ=n(EIe,"A",{href:!0});var R3t=s(XQ);ltr=r(R3t,"LayoutLMv3ForQuestionAnswering"),R3t.forEach(t),itr=r(EIe," (LayoutLMv3 model)"),EIe.forEach(t),dtr=i(X),OF=n(X,"LI",{});var CIe=s(OF);C2e=n(CIe,"STRONG",{});var P3t=s(C2e);ctr=r(P3t,"led"),P3t.forEach(t),ftr=r(CIe," \u2014 "),zQ=n(CIe,"A",{href:!0});var B3t=s(zQ);mtr=r(B3t,"LEDForQuestionAnswering"),B3t.forEach(t),gtr=r(CIe," (LED model)"),CIe.forEach(t),htr=i(X),VF=n(X,"LI",{});var wIe=s(VF);w2e=n(wIe,"STRONG",{});var I3t=s(w2e);ptr=r(I3t,"longformer"),I3t.forEach(t),_tr=r(wIe," \u2014 "),QQ=n(wIe,"A",{href:!0});var N3t=s(QQ);utr=r(N3t,"LongformerForQuestionAnswering"),N3t.forEach(t),btr=r(wIe," (Longformer model)"),wIe.forEach(t),vtr=i(X),XF=n(X,"LI",{});var AIe=s(XF);A2e=n(AIe,"STRONG",{});var q3t=s(A2e);Ftr=r(q3t,"lxmert"),q3t.forEach(t),Ttr=r(AIe," \u2014 "),WQ=n(AIe,"A",{href:!0});var j3t=s(WQ);Mtr=r(j3t,"LxmertForQuestionAnswering"),j3t.forEach(t),Etr=r(AIe," (LXMERT model)"),AIe.forEach(t),Ctr=i(X),zF=n(X,"LI",{});var LIe=s(zF);L2e=n(LIe,"STRONG",{});var D3t=s(L2e);wtr=r(D3t,"mbart"),D3t.forEach(t),Atr=r(LIe," \u2014 "),HQ=n(LIe,"A",{href:!0});var G3t=s(HQ);Ltr=r(G3t,"MBartForQuestionAnswering"),G3t.forEach(t),ytr=r(LIe," (mBART model)"),LIe.forEach(t),xtr=i(X),QF=n(X,"LI",{});var yIe=s(QF);y2e=n(yIe,"STRONG",{});var O3t=s(y2e);$tr=r(O3t,"megatron-bert"),O3t.forEach(t),ktr=r(yIe," \u2014 "),UQ=n(yIe,"A",{href:!0});var V3t=s(UQ);Str=r(V3t,"MegatronBertForQuestionAnswering"),V3t.forEach(t),Rtr=r(yIe," (Megatron-BERT model)"),yIe.forEach(t),Ptr=i(X),WF=n(X,"LI",{});var xIe=s(WF);x2e=n(xIe,"STRONG",{});var X3t=s(x2e);Btr=r(X3t,"mobilebert"),X3t.forEach(t),Itr=r(xIe," \u2014 "),JQ=n(xIe,"A",{href:!0});var z3t=s(JQ);Ntr=r(z3t,"MobileBertForQuestionAnswering"),z3t.forEach(t),qtr=r(xIe," (MobileBERT model)"),xIe.forEach(t),jtr=i(X),HF=n(X,"LI",{});var $Ie=s(HF);$2e=n($Ie,"STRONG",{});var Q3t=s($2e);Dtr=r(Q3t,"mpnet"),Q3t.forEach(t),Gtr=r($Ie," \u2014 "),YQ=n($Ie,"A",{href:!0});var W3t=s(YQ);Otr=r(W3t,"MPNetForQuestionAnswering"),W3t.forEach(t),Vtr=r($Ie," (MPNet model)"),$Ie.forEach(t),Xtr=i(X),UF=n(X,"LI",{});var kIe=s(UF);k2e=n(kIe,"STRONG",{});var H3t=s(k2e);ztr=r(H3t,"mvp"),H3t.forEach(t),Qtr=r(kIe," \u2014 "),KQ=n(kIe,"A",{href:!0});var U3t=s(KQ);Wtr=r(U3t,"MvpForQuestionAnswering"),U3t.forEach(t),Htr=r(kIe," (MVP model)"),kIe.forEach(t),Utr=i(X),JF=n(X,"LI",{});var SIe=s(JF);S2e=n(SIe,"STRONG",{});var J3t=s(S2e);Jtr=r(J3t,"nezha"),J3t.forEach(t),Ytr=r(SIe," \u2014 "),ZQ=n(SIe,"A",{href:!0});var Y3t=s(ZQ);Ktr=r(Y3t,"NezhaForQuestionAnswering"),Y3t.forEach(t),Ztr=r(SIe," (Nezha model)"),SIe.forEach(t),ear=i(X),YF=n(X,"LI",{});var RIe=s(YF);R2e=n(RIe,"STRONG",{});var K3t=s(R2e);oar=r(K3t,"nystromformer"),K3t.forEach(t),rar=r(RIe," \u2014 "),eW=n(RIe,"A",{href:!0});var Z3t=s(eW);tar=r(Z3t,"NystromformerForQuestionAnswering"),Z3t.forEach(t),aar=r(RIe," (Nystr\xF6mformer model)"),RIe.forEach(t),nar=i(X),KF=n(X,"LI",{});var PIe=s(KF);P2e=n(PIe,"STRONG",{});var e5t=s(P2e);sar=r(e5t,"qdqbert"),e5t.forEach(t),lar=r(PIe," \u2014 "),oW=n(PIe,"A",{href:!0});var o5t=s(oW);iar=r(o5t,"QDQBertForQuestionAnswering"),o5t.forEach(t),dar=r(PIe," (QDQBert model)"),PIe.forEach(t),car=i(X),ZF=n(X,"LI",{});var BIe=s(ZF);B2e=n(BIe,"STRONG",{});var r5t=s(B2e);far=r(r5t,"reformer"),r5t.forEach(t),mar=r(BIe," \u2014 "),rW=n(BIe,"A",{href:!0});var t5t=s(rW);gar=r(t5t,"ReformerForQuestionAnswering"),t5t.forEach(t),har=r(BIe," (Reformer model)"),BIe.forEach(t),par=i(X),e6=n(X,"LI",{});var IIe=s(e6);I2e=n(IIe,"STRONG",{});var a5t=s(I2e);_ar=r(a5t,"rembert"),a5t.forEach(t),uar=r(IIe," \u2014 "),tW=n(IIe,"A",{href:!0});var n5t=s(tW);bar=r(n5t,"RemBertForQuestionAnswering"),n5t.forEach(t),Far=r(IIe," (RemBERT model)"),IIe.forEach(t),Tar=i(X),o6=n(X,"LI",{});var NIe=s(o6);N2e=n(NIe,"STRONG",{});var s5t=s(N2e);Mar=r(s5t,"roberta"),s5t.forEach(t),Ear=r(NIe," \u2014 "),aW=n(NIe,"A",{href:!0});var l5t=s(aW);Car=r(l5t,"RobertaForQuestionAnswering"),l5t.forEach(t),war=r(NIe," (RoBERTa model)"),NIe.forEach(t),Aar=i(X),r6=n(X,"LI",{});var qIe=s(r6);q2e=n(qIe,"STRONG",{});var i5t=s(q2e);Lar=r(i5t,"roformer"),i5t.forEach(t),yar=r(qIe," \u2014 "),nW=n(qIe,"A",{href:!0});var d5t=s(nW);xar=r(d5t,"RoFormerForQuestionAnswering"),d5t.forEach(t),$ar=r(qIe," (RoFormer model)"),qIe.forEach(t),kar=i(X),t6=n(X,"LI",{});var jIe=s(t6);j2e=n(jIe,"STRONG",{});var c5t=s(j2e);Sar=r(c5t,"splinter"),c5t.forEach(t),Rar=r(jIe," \u2014 "),sW=n(jIe,"A",{href:!0});var f5t=s(sW);Par=r(f5t,"SplinterForQuestionAnswering"),f5t.forEach(t),Bar=r(jIe," (Splinter model)"),jIe.forEach(t),Iar=i(X),a6=n(X,"LI",{});var DIe=s(a6);D2e=n(DIe,"STRONG",{});var m5t=s(D2e);Nar=r(m5t,"squeezebert"),m5t.forEach(t),qar=r(DIe," \u2014 "),lW=n(DIe,"A",{href:!0});var g5t=s(lW);jar=r(g5t,"SqueezeBertForQuestionAnswering"),g5t.forEach(t),Dar=r(DIe," (SqueezeBERT model)"),DIe.forEach(t),Gar=i(X),n6=n(X,"LI",{});var GIe=s(n6);G2e=n(GIe,"STRONG",{});var h5t=s(G2e);Oar=r(h5t,"xlm"),h5t.forEach(t),Var=r(GIe," \u2014 "),iW=n(GIe,"A",{href:!0});var p5t=s(iW);Xar=r(p5t,"XLMForQuestionAnsweringSimple"),p5t.forEach(t),zar=r(GIe," (XLM model)"),GIe.forEach(t),Qar=i(X),s6=n(X,"LI",{});var OIe=s(s6);O2e=n(OIe,"STRONG",{});var _5t=s(O2e);War=r(_5t,"xlm-roberta"),_5t.forEach(t),Har=r(OIe," \u2014 "),dW=n(OIe,"A",{href:!0});var u5t=s(dW);Uar=r(u5t,"XLMRobertaForQuestionAnswering"),u5t.forEach(t),Jar=r(OIe," (XLM-RoBERTa model)"),OIe.forEach(t),Yar=i(X),l6=n(X,"LI",{});var VIe=s(l6);V2e=n(VIe,"STRONG",{});var b5t=s(V2e);Kar=r(b5t,"xlm-roberta-xl"),b5t.forEach(t),Zar=r(VIe," \u2014 "),cW=n(VIe,"A",{href:!0});var v5t=s(cW);enr=r(v5t,"XLMRobertaXLForQuestionAnswering"),v5t.forEach(t),onr=r(VIe," (XLM-RoBERTa-XL model)"),VIe.forEach(t),rnr=i(X),i6=n(X,"LI",{});var XIe=s(i6);X2e=n(XIe,"STRONG",{});var F5t=s(X2e);tnr=r(F5t,"xlnet"),F5t.forEach(t),anr=r(XIe," \u2014 "),fW=n(XIe,"A",{href:!0});var T5t=s(fW);nnr=r(T5t,"XLNetForQuestionAnsweringSimple"),T5t.forEach(t),snr=r(XIe," (XLNet model)"),XIe.forEach(t),lnr=i(X),d6=n(X,"LI",{});var zIe=s(d6);z2e=n(zIe,"STRONG",{});var M5t=s(z2e);inr=r(M5t,"yoso"),M5t.forEach(t),dnr=r(zIe," \u2014 "),mW=n(zIe,"A",{href:!0});var E5t=s(mW);cnr=r(E5t,"YosoForQuestionAnswering"),E5t.forEach(t),fnr=r(zIe," (YOSO model)"),zIe.forEach(t),X.forEach(t),mnr=i(_a),c6=n(_a,"P",{});var QIe=s(c6);gnr=r(QIe,"The model is set in evaluation mode by default using "),Q2e=n(QIe,"CODE",{});var C5t=s(Q2e);hnr=r(C5t,"model.eval()"),C5t.forEach(t),pnr=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=n(QIe,"CODE",{});var w5t=s(W2e);_nr=r(w5t,"model.train()"),w5t.forEach(t),QIe.forEach(t),unr=i(_a),T(f6.$$.fragment,_a),_a.forEach(t),fl.forEach(t),GXe=i(f),ud=n(f,"H2",{class:!0});var WQe=s(ud);m6=n(WQe,"A",{id:!0,class:!0,href:!0});var A5t=s(m6);H2e=n(A5t,"SPAN",{});var L5t=s(H2e);T($y.$$.fragment,L5t),L5t.forEach(t),A5t.forEach(t),bnr=i(WQe),U2e=n(WQe,"SPAN",{});var y5t=s(U2e);vnr=r(y5t,"AutoModelForTableQuestionAnswering"),y5t.forEach(t),WQe.forEach(t),OXe=i(f),Do=n(f,"DIV",{class:!0});var ml=s(Do);T(ky.$$.fragment,ml),Fnr=i(ml),bd=n(ml,"P",{});var rte=s(bd);Tnr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gW=n(rte,"A",{href:!0});var x5t=s(gW);Mnr=r(x5t,"from_pretrained()"),x5t.forEach(t),Enr=r(rte," class method or the "),hW=n(rte,"A",{href:!0});var $5t=s(hW);Cnr=r($5t,"from_config()"),$5t.forEach(t),wnr=r(rte,` class
method.`),rte.forEach(t),Anr=i(ml),Sy=n(ml,"P",{});var HQe=s(Sy);Lnr=r(HQe,"This class cannot be instantiated directly using "),J2e=n(HQe,"CODE",{});var k5t=s(J2e);ynr=r(k5t,"__init__()"),k5t.forEach(t),xnr=r(HQe," (throws an error)."),HQe.forEach(t),$nr=i(ml),ut=n(ml,"DIV",{class:!0});var kw=s(ut);T(Ry.$$.fragment,kw),knr=i(kw),Y2e=n(kw,"P",{});var S5t=s(Y2e);Snr=r(S5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),S5t.forEach(t),Rnr=i(kw),vd=n(kw,"P",{});var tte=s(vd);Pnr=r(tte,`Note:
Loading a model from its configuration file does `),K2e=n(tte,"STRONG",{});var R5t=s(K2e);Bnr=r(R5t,"not"),R5t.forEach(t),Inr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(tte,"A",{href:!0});var P5t=s(pW);Nnr=r(P5t,"from_pretrained()"),P5t.forEach(t),qnr=r(tte," to load the model weights."),tte.forEach(t),jnr=i(kw),T(g6.$$.fragment,kw),kw.forEach(t),Dnr=i(ml),so=n(ml,"DIV",{class:!0});var ua=s(so);T(Py.$$.fragment,ua),Gnr=i(ua),Z2e=n(ua,"P",{});var B5t=s(Z2e);Onr=r(B5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),B5t.forEach(t),Vnr=i(ua),Qa=n(ua,"P",{});var Sw=s(Qa);Xnr=r(Sw,"The model class to instantiate is selected based on the "),e4e=n(Sw,"CODE",{});var I5t=s(e4e);znr=r(I5t,"model_type"),I5t.forEach(t),Qnr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),o4e=n(Sw,"CODE",{});var N5t=s(o4e);Wnr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),Hnr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(Sw,"CODE",{});var q5t=s(r4e);Unr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),Jnr=r(Sw,":"),Sw.forEach(t),Ynr=i(ua),t4e=n(ua,"UL",{});var j5t=s(t4e);h6=n(j5t,"LI",{});var WIe=s(h6);a4e=n(WIe,"STRONG",{});var D5t=s(a4e);Knr=r(D5t,"tapas"),D5t.forEach(t),Znr=r(WIe," \u2014 "),_W=n(WIe,"A",{href:!0});var G5t=s(_W);esr=r(G5t,"TapasForQuestionAnswering"),G5t.forEach(t),osr=r(WIe," (TAPAS model)"),WIe.forEach(t),j5t.forEach(t),rsr=i(ua),p6=n(ua,"P",{});var HIe=s(p6);tsr=r(HIe,"The model is set in evaluation mode by default using "),n4e=n(HIe,"CODE",{});var O5t=s(n4e);asr=r(O5t,"model.eval()"),O5t.forEach(t),nsr=r(HIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s4e=n(HIe,"CODE",{});var V5t=s(s4e);ssr=r(V5t,"model.train()"),V5t.forEach(t),HIe.forEach(t),lsr=i(ua),T(_6.$$.fragment,ua),ua.forEach(t),ml.forEach(t),VXe=i(f),Fd=n(f,"H2",{class:!0});var UQe=s(Fd);u6=n(UQe,"A",{id:!0,class:!0,href:!0});var X5t=s(u6);l4e=n(X5t,"SPAN",{});var z5t=s(l4e);T(By.$$.fragment,z5t),z5t.forEach(t),X5t.forEach(t),isr=i(UQe),i4e=n(UQe,"SPAN",{});var Q5t=s(i4e);dsr=r(Q5t,"AutoModelForImageClassification"),Q5t.forEach(t),UQe.forEach(t),XXe=i(f),Go=n(f,"DIV",{class:!0});var gl=s(Go);T(Iy.$$.fragment,gl),csr=i(gl),Td=n(gl,"P",{});var ate=s(Td);fsr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uW=n(ate,"A",{href:!0});var W5t=s(uW);msr=r(W5t,"from_pretrained()"),W5t.forEach(t),gsr=r(ate," class method or the "),bW=n(ate,"A",{href:!0});var H5t=s(bW);hsr=r(H5t,"from_config()"),H5t.forEach(t),psr=r(ate,` class
method.`),ate.forEach(t),_sr=i(gl),Ny=n(gl,"P",{});var JQe=s(Ny);usr=r(JQe,"This class cannot be instantiated directly using "),d4e=n(JQe,"CODE",{});var U5t=s(d4e);bsr=r(U5t,"__init__()"),U5t.forEach(t),vsr=r(JQe," (throws an error)."),JQe.forEach(t),Fsr=i(gl),bt=n(gl,"DIV",{class:!0});var Rw=s(bt);T(qy.$$.fragment,Rw),Tsr=i(Rw),c4e=n(Rw,"P",{});var J5t=s(c4e);Msr=r(J5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),J5t.forEach(t),Esr=i(Rw),Md=n(Rw,"P",{});var nte=s(Md);Csr=r(nte,`Note:
Loading a model from its configuration file does `),f4e=n(nte,"STRONG",{});var Y5t=s(f4e);wsr=r(Y5t,"not"),Y5t.forEach(t),Asr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(nte,"A",{href:!0});var K5t=s(vW);Lsr=r(K5t,"from_pretrained()"),K5t.forEach(t),ysr=r(nte," to load the model weights."),nte.forEach(t),xsr=i(Rw),T(b6.$$.fragment,Rw),Rw.forEach(t),$sr=i(gl),lo=n(gl,"DIV",{class:!0});var ba=s(lo);T(jy.$$.fragment,ba),ksr=i(ba),m4e=n(ba,"P",{});var Z5t=s(m4e);Ssr=r(Z5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Z5t.forEach(t),Rsr=i(ba),Wa=n(ba,"P",{});var Pw=s(Wa);Psr=r(Pw,"The model class to instantiate is selected based on the "),g4e=n(Pw,"CODE",{});var e0t=s(g4e);Bsr=r(e0t,"model_type"),e0t.forEach(t),Isr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),h4e=n(Pw,"CODE",{});var o0t=s(h4e);Nsr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),qsr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p4e=n(Pw,"CODE",{});var r0t=s(p4e);jsr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),Dsr=r(Pw,":"),Pw.forEach(t),Gsr=i(ba),_e=n(ba,"UL",{});var Fe=s(_e);v6=n(Fe,"LI",{});var UIe=s(v6);_4e=n(UIe,"STRONG",{});var t0t=s(_4e);Osr=r(t0t,"beit"),t0t.forEach(t),Vsr=r(UIe," \u2014 "),FW=n(UIe,"A",{href:!0});var a0t=s(FW);Xsr=r(a0t,"BeitForImageClassification"),a0t.forEach(t),zsr=r(UIe," (BEiT model)"),UIe.forEach(t),Qsr=i(Fe),F6=n(Fe,"LI",{});var JIe=s(F6);u4e=n(JIe,"STRONG",{});var n0t=s(u4e);Wsr=r(n0t,"convnext"),n0t.forEach(t),Hsr=r(JIe," \u2014 "),TW=n(JIe,"A",{href:!0});var s0t=s(TW);Usr=r(s0t,"ConvNextForImageClassification"),s0t.forEach(t),Jsr=r(JIe," (ConvNeXT model)"),JIe.forEach(t),Ysr=i(Fe),T6=n(Fe,"LI",{});var YIe=s(T6);b4e=n(YIe,"STRONG",{});var l0t=s(b4e);Ksr=r(l0t,"cvt"),l0t.forEach(t),Zsr=r(YIe," \u2014 "),MW=n(YIe,"A",{href:!0});var i0t=s(MW);elr=r(i0t,"CvtForImageClassification"),i0t.forEach(t),olr=r(YIe," (CvT model)"),YIe.forEach(t),rlr=i(Fe),M6=n(Fe,"LI",{});var KIe=s(M6);v4e=n(KIe,"STRONG",{});var d0t=s(v4e);tlr=r(d0t,"data2vec-vision"),d0t.forEach(t),alr=r(KIe," \u2014 "),EW=n(KIe,"A",{href:!0});var c0t=s(EW);nlr=r(c0t,"Data2VecVisionForImageClassification"),c0t.forEach(t),slr=r(KIe," (Data2VecVision model)"),KIe.forEach(t),llr=i(Fe),Us=n(Fe,"LI",{});var BS=s(Us);F4e=n(BS,"STRONG",{});var f0t=s(F4e);ilr=r(f0t,"deit"),f0t.forEach(t),dlr=r(BS," \u2014 "),CW=n(BS,"A",{href:!0});var m0t=s(CW);clr=r(m0t,"DeiTForImageClassification"),m0t.forEach(t),flr=r(BS," or "),wW=n(BS,"A",{href:!0});var g0t=s(wW);mlr=r(g0t,"DeiTForImageClassificationWithTeacher"),g0t.forEach(t),glr=r(BS," (DeiT model)"),BS.forEach(t),hlr=i(Fe),E6=n(Fe,"LI",{});var ZIe=s(E6);T4e=n(ZIe,"STRONG",{});var h0t=s(T4e);plr=r(h0t,"imagegpt"),h0t.forEach(t),_lr=r(ZIe," \u2014 "),AW=n(ZIe,"A",{href:!0});var p0t=s(AW);ulr=r(p0t,"ImageGPTForImageClassification"),p0t.forEach(t),blr=r(ZIe," (ImageGPT model)"),ZIe.forEach(t),vlr=i(Fe),Js=n(Fe,"LI",{});var IS=s(Js);M4e=n(IS,"STRONG",{});var _0t=s(M4e);Flr=r(_0t,"levit"),_0t.forEach(t),Tlr=r(IS," \u2014 "),LW=n(IS,"A",{href:!0});var u0t=s(LW);Mlr=r(u0t,"LevitForImageClassification"),u0t.forEach(t),Elr=r(IS," or "),yW=n(IS,"A",{href:!0});var b0t=s(yW);Clr=r(b0t,"LevitForImageClassificationWithTeacher"),b0t.forEach(t),wlr=r(IS," (LeViT model)"),IS.forEach(t),Alr=i(Fe),C6=n(Fe,"LI",{});var eNe=s(C6);E4e=n(eNe,"STRONG",{});var v0t=s(E4e);Llr=r(v0t,"mobilevit"),v0t.forEach(t),ylr=r(eNe," \u2014 "),xW=n(eNe,"A",{href:!0});var F0t=s(xW);xlr=r(F0t,"MobileViTForImageClassification"),F0t.forEach(t),$lr=r(eNe," (MobileViT model)"),eNe.forEach(t),klr=i(Fe),vt=n(Fe,"LI",{});var Sf=s(vt);C4e=n(Sf,"STRONG",{});var T0t=s(C4e);Slr=r(T0t,"perceiver"),T0t.forEach(t),Rlr=r(Sf," \u2014 "),$W=n(Sf,"A",{href:!0});var M0t=s($W);Plr=r(M0t,"PerceiverForImageClassificationLearned"),M0t.forEach(t),Blr=r(Sf," or "),kW=n(Sf,"A",{href:!0});var E0t=s(kW);Ilr=r(E0t,"PerceiverForImageClassificationFourier"),E0t.forEach(t),Nlr=r(Sf," or "),SW=n(Sf,"A",{href:!0});var C0t=s(SW);qlr=r(C0t,"PerceiverForImageClassificationConvProcessing"),C0t.forEach(t),jlr=r(Sf," (Perceiver model)"),Sf.forEach(t),Dlr=i(Fe),w6=n(Fe,"LI",{});var oNe=s(w6);w4e=n(oNe,"STRONG",{});var w0t=s(w4e);Glr=r(w0t,"poolformer"),w0t.forEach(t),Olr=r(oNe," \u2014 "),RW=n(oNe,"A",{href:!0});var A0t=s(RW);Vlr=r(A0t,"PoolFormerForImageClassification"),A0t.forEach(t),Xlr=r(oNe," (PoolFormer model)"),oNe.forEach(t),zlr=i(Fe),A6=n(Fe,"LI",{});var rNe=s(A6);A4e=n(rNe,"STRONG",{});var L0t=s(A4e);Qlr=r(L0t,"regnet"),L0t.forEach(t),Wlr=r(rNe," \u2014 "),PW=n(rNe,"A",{href:!0});var y0t=s(PW);Hlr=r(y0t,"RegNetForImageClassification"),y0t.forEach(t),Ulr=r(rNe," (RegNet model)"),rNe.forEach(t),Jlr=i(Fe),L6=n(Fe,"LI",{});var tNe=s(L6);L4e=n(tNe,"STRONG",{});var x0t=s(L4e);Ylr=r(x0t,"resnet"),x0t.forEach(t),Klr=r(tNe," \u2014 "),BW=n(tNe,"A",{href:!0});var $0t=s(BW);Zlr=r($0t,"ResNetForImageClassification"),$0t.forEach(t),eir=r(tNe," (ResNet model)"),tNe.forEach(t),oir=i(Fe),y6=n(Fe,"LI",{});var aNe=s(y6);y4e=n(aNe,"STRONG",{});var k0t=s(y4e);rir=r(k0t,"segformer"),k0t.forEach(t),tir=r(aNe," \u2014 "),IW=n(aNe,"A",{href:!0});var S0t=s(IW);air=r(S0t,"SegformerForImageClassification"),S0t.forEach(t),nir=r(aNe," (SegFormer model)"),aNe.forEach(t),sir=i(Fe),x6=n(Fe,"LI",{});var nNe=s(x6);x4e=n(nNe,"STRONG",{});var R0t=s(x4e);lir=r(R0t,"swin"),R0t.forEach(t),iir=r(nNe," \u2014 "),NW=n(nNe,"A",{href:!0});var P0t=s(NW);dir=r(P0t,"SwinForImageClassification"),P0t.forEach(t),cir=r(nNe," (Swin Transformer model)"),nNe.forEach(t),fir=i(Fe),$6=n(Fe,"LI",{});var sNe=s($6);$4e=n(sNe,"STRONG",{});var B0t=s($4e);mir=r(B0t,"swinv2"),B0t.forEach(t),gir=r(sNe," \u2014 "),qW=n(sNe,"A",{href:!0});var I0t=s(qW);hir=r(I0t,"Swinv2ForImageClassification"),I0t.forEach(t),pir=r(sNe," (Swin Transformer V2 model)"),sNe.forEach(t),_ir=i(Fe),k6=n(Fe,"LI",{});var lNe=s(k6);k4e=n(lNe,"STRONG",{});var N0t=s(k4e);uir=r(N0t,"van"),N0t.forEach(t),bir=r(lNe," \u2014 "),jW=n(lNe,"A",{href:!0});var q0t=s(jW);vir=r(q0t,"VanForImageClassification"),q0t.forEach(t),Fir=r(lNe," (VAN model)"),lNe.forEach(t),Tir=i(Fe),S6=n(Fe,"LI",{});var iNe=s(S6);S4e=n(iNe,"STRONG",{});var j0t=s(S4e);Mir=r(j0t,"vit"),j0t.forEach(t),Eir=r(iNe," \u2014 "),DW=n(iNe,"A",{href:!0});var D0t=s(DW);Cir=r(D0t,"ViTForImageClassification"),D0t.forEach(t),wir=r(iNe," (ViT model)"),iNe.forEach(t),Fe.forEach(t),Air=i(ba),R6=n(ba,"P",{});var dNe=s(R6);Lir=r(dNe,"The model is set in evaluation mode by default using "),R4e=n(dNe,"CODE",{});var G0t=s(R4e);yir=r(G0t,"model.eval()"),G0t.forEach(t),xir=r(dNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P4e=n(dNe,"CODE",{});var O0t=s(P4e);$ir=r(O0t,"model.train()"),O0t.forEach(t),dNe.forEach(t),kir=i(ba),T(P6.$$.fragment,ba),ba.forEach(t),gl.forEach(t),zXe=i(f),Ed=n(f,"H2",{class:!0});var YQe=s(Ed);B6=n(YQe,"A",{id:!0,class:!0,href:!0});var V0t=s(B6);B4e=n(V0t,"SPAN",{});var X0t=s(B4e);T(Dy.$$.fragment,X0t),X0t.forEach(t),V0t.forEach(t),Sir=i(YQe),I4e=n(YQe,"SPAN",{});var z0t=s(I4e);Rir=r(z0t,"AutoModelForVision2Seq"),z0t.forEach(t),YQe.forEach(t),QXe=i(f),Oo=n(f,"DIV",{class:!0});var hl=s(Oo);T(Gy.$$.fragment,hl),Pir=i(hl),Cd=n(hl,"P",{});var ste=s(Cd);Bir=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GW=n(ste,"A",{href:!0});var Q0t=s(GW);Iir=r(Q0t,"from_pretrained()"),Q0t.forEach(t),Nir=r(ste," class method or the "),OW=n(ste,"A",{href:!0});var W0t=s(OW);qir=r(W0t,"from_config()"),W0t.forEach(t),jir=r(ste,` class
method.`),ste.forEach(t),Dir=i(hl),Oy=n(hl,"P",{});var KQe=s(Oy);Gir=r(KQe,"This class cannot be instantiated directly using "),N4e=n(KQe,"CODE",{});var H0t=s(N4e);Oir=r(H0t,"__init__()"),H0t.forEach(t),Vir=r(KQe," (throws an error)."),KQe.forEach(t),Xir=i(hl),Ft=n(hl,"DIV",{class:!0});var Bw=s(Ft);T(Vy.$$.fragment,Bw),zir=i(Bw),q4e=n(Bw,"P",{});var U0t=s(q4e);Qir=r(U0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U0t.forEach(t),Wir=i(Bw),wd=n(Bw,"P",{});var lte=s(wd);Hir=r(lte,`Note:
Loading a model from its configuration file does `),j4e=n(lte,"STRONG",{});var J0t=s(j4e);Uir=r(J0t,"not"),J0t.forEach(t),Jir=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(lte,"A",{href:!0});var Y0t=s(VW);Yir=r(Y0t,"from_pretrained()"),Y0t.forEach(t),Kir=r(lte," to load the model weights."),lte.forEach(t),Zir=i(Bw),T(I6.$$.fragment,Bw),Bw.forEach(t),edr=i(hl),io=n(hl,"DIV",{class:!0});var va=s(io);T(Xy.$$.fragment,va),odr=i(va),D4e=n(va,"P",{});var K0t=s(D4e);rdr=r(K0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K0t.forEach(t),tdr=i(va),Ha=n(va,"P",{});var Iw=s(Ha);adr=r(Iw,"The model class to instantiate is selected based on the "),G4e=n(Iw,"CODE",{});var Z0t=s(G4e);ndr=r(Z0t,"model_type"),Z0t.forEach(t),sdr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),O4e=n(Iw,"CODE",{});var ewt=s(O4e);ldr=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),idr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(Iw,"CODE",{});var owt=s(V4e);ddr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),cdr=r(Iw,":"),Iw.forEach(t),fdr=i(va),X4e=n(va,"UL",{});var rwt=s(X4e);N6=n(rwt,"LI",{});var cNe=s(N6);z4e=n(cNe,"STRONG",{});var twt=s(z4e);mdr=r(twt,"vision-encoder-decoder"),twt.forEach(t),gdr=r(cNe," \u2014 "),XW=n(cNe,"A",{href:!0});var awt=s(XW);hdr=r(awt,"VisionEncoderDecoderModel"),awt.forEach(t),pdr=r(cNe," (Vision Encoder decoder model)"),cNe.forEach(t),rwt.forEach(t),_dr=i(va),q6=n(va,"P",{});var fNe=s(q6);udr=r(fNe,"The model is set in evaluation mode by default using "),Q4e=n(fNe,"CODE",{});var nwt=s(Q4e);bdr=r(nwt,"model.eval()"),nwt.forEach(t),vdr=r(fNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W4e=n(fNe,"CODE",{});var swt=s(W4e);Fdr=r(swt,"model.train()"),swt.forEach(t),fNe.forEach(t),Tdr=i(va),T(j6.$$.fragment,va),va.forEach(t),hl.forEach(t),WXe=i(f),Ad=n(f,"H2",{class:!0});var ZQe=s(Ad);D6=n(ZQe,"A",{id:!0,class:!0,href:!0});var lwt=s(D6);H4e=n(lwt,"SPAN",{});var iwt=s(H4e);T(zy.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),Mdr=i(ZQe),U4e=n(ZQe,"SPAN",{});var dwt=s(U4e);Edr=r(dwt,"AutoModelForVisualQuestionAnswering"),dwt.forEach(t),ZQe.forEach(t),HXe=i(f),Vo=n(f,"DIV",{class:!0});var pl=s(Vo);T(Qy.$$.fragment,pl),Cdr=i(pl),Ld=n(pl,"P",{});var ite=s(Ld);wdr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zW=n(ite,"A",{href:!0});var cwt=s(zW);Adr=r(cwt,"from_pretrained()"),cwt.forEach(t),Ldr=r(ite," class method or the "),QW=n(ite,"A",{href:!0});var fwt=s(QW);ydr=r(fwt,"from_config()"),fwt.forEach(t),xdr=r(ite,` class
method.`),ite.forEach(t),$dr=i(pl),Wy=n(pl,"P",{});var eWe=s(Wy);kdr=r(eWe,"This class cannot be instantiated directly using "),J4e=n(eWe,"CODE",{});var mwt=s(J4e);Sdr=r(mwt,"__init__()"),mwt.forEach(t),Rdr=r(eWe," (throws an error)."),eWe.forEach(t),Pdr=i(pl),Tt=n(pl,"DIV",{class:!0});var Nw=s(Tt);T(Hy.$$.fragment,Nw),Bdr=i(Nw),Y4e=n(Nw,"P",{});var gwt=s(Y4e);Idr=r(gwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),gwt.forEach(t),Ndr=i(Nw),yd=n(Nw,"P",{});var dte=s(yd);qdr=r(dte,`Note:
Loading a model from its configuration file does `),K4e=n(dte,"STRONG",{});var hwt=s(K4e);jdr=r(hwt,"not"),hwt.forEach(t),Ddr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(dte,"A",{href:!0});var pwt=s(WW);Gdr=r(pwt,"from_pretrained()"),pwt.forEach(t),Odr=r(dte," to load the model weights."),dte.forEach(t),Vdr=i(Nw),T(G6.$$.fragment,Nw),Nw.forEach(t),Xdr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(Uy.$$.fragment,Fa),zdr=i(Fa),Z4e=n(Fa,"P",{});var _wt=s(Z4e);Qdr=r(_wt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),_wt.forEach(t),Wdr=i(Fa),Ua=n(Fa,"P",{});var qw=s(Ua);Hdr=r(qw,"The model class to instantiate is selected based on the "),ebe=n(qw,"CODE",{});var uwt=s(ebe);Udr=r(uwt,"model_type"),uwt.forEach(t),Jdr=r(qw,` property of the config object (either
passed as an argument or loaded from `),obe=n(qw,"CODE",{});var bwt=s(obe);Ydr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),Kdr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(qw,"CODE",{});var vwt=s(rbe);Zdr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),ecr=r(qw,":"),qw.forEach(t),ocr=i(Fa),tbe=n(Fa,"UL",{});var Fwt=s(tbe);O6=n(Fwt,"LI",{});var mNe=s(O6);abe=n(mNe,"STRONG",{});var Twt=s(abe);rcr=r(Twt,"vilt"),Twt.forEach(t),tcr=r(mNe," \u2014 "),HW=n(mNe,"A",{href:!0});var Mwt=s(HW);acr=r(Mwt,"ViltForQuestionAnswering"),Mwt.forEach(t),ncr=r(mNe," (ViLT model)"),mNe.forEach(t),Fwt.forEach(t),scr=i(Fa),V6=n(Fa,"P",{});var gNe=s(V6);lcr=r(gNe,"The model is set in evaluation mode by default using "),nbe=n(gNe,"CODE",{});var Ewt=s(nbe);icr=r(Ewt,"model.eval()"),Ewt.forEach(t),dcr=r(gNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sbe=n(gNe,"CODE",{});var Cwt=s(sbe);ccr=r(Cwt,"model.train()"),Cwt.forEach(t),gNe.forEach(t),fcr=i(Fa),T(X6.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),UXe=i(f),xd=n(f,"H2",{class:!0});var oWe=s(xd);z6=n(oWe,"A",{id:!0,class:!0,href:!0});var wwt=s(z6);lbe=n(wwt,"SPAN",{});var Awt=s(lbe);T(Jy.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),mcr=i(oWe),ibe=n(oWe,"SPAN",{});var Lwt=s(ibe);gcr=r(Lwt,"AutoModelForAudioClassification"),Lwt.forEach(t),oWe.forEach(t),JXe=i(f),Xo=n(f,"DIV",{class:!0});var _l=s(Xo);T(Yy.$$.fragment,_l),hcr=i(_l),$d=n(_l,"P",{});var cte=s($d);pcr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),UW=n(cte,"A",{href:!0});var ywt=s(UW);_cr=r(ywt,"from_pretrained()"),ywt.forEach(t),ucr=r(cte," class method or the "),JW=n(cte,"A",{href:!0});var xwt=s(JW);bcr=r(xwt,"from_config()"),xwt.forEach(t),vcr=r(cte,` class
method.`),cte.forEach(t),Fcr=i(_l),Ky=n(_l,"P",{});var rWe=s(Ky);Tcr=r(rWe,"This class cannot be instantiated directly using "),dbe=n(rWe,"CODE",{});var $wt=s(dbe);Mcr=r($wt,"__init__()"),$wt.forEach(t),Ecr=r(rWe," (throws an error)."),rWe.forEach(t),Ccr=i(_l),Mt=n(_l,"DIV",{class:!0});var jw=s(Mt);T(Zy.$$.fragment,jw),wcr=i(jw),cbe=n(jw,"P",{});var kwt=s(cbe);Acr=r(kwt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),kwt.forEach(t),Lcr=i(jw),kd=n(jw,"P",{});var fte=s(kd);ycr=r(fte,`Note:
Loading a model from its configuration file does `),fbe=n(fte,"STRONG",{});var Swt=s(fbe);xcr=r(Swt,"not"),Swt.forEach(t),$cr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(fte,"A",{href:!0});var Rwt=s(YW);kcr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),Scr=r(fte," to load the model weights."),fte.forEach(t),Rcr=i(jw),T(Q6.$$.fragment,jw),jw.forEach(t),Pcr=i(_l),fo=n(_l,"DIV",{class:!0});var Ta=s(fo);T(e8.$$.fragment,Ta),Bcr=i(Ta),mbe=n(Ta,"P",{});var Pwt=s(mbe);Icr=r(Pwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Pwt.forEach(t),Ncr=i(Ta),Ja=n(Ta,"P",{});var Dw=s(Ja);qcr=r(Dw,"The model class to instantiate is selected based on the "),gbe=n(Dw,"CODE",{});var Bwt=s(gbe);jcr=r(Bwt,"model_type"),Bwt.forEach(t),Dcr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),hbe=n(Dw,"CODE",{});var Iwt=s(hbe);Gcr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),Ocr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(Dw,"CODE",{});var Nwt=s(pbe);Vcr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),Xcr=r(Dw,":"),Dw.forEach(t),zcr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);W6=n(ze,"LI",{});var hNe=s(W6);_be=n(hNe,"STRONG",{});var qwt=s(_be);Qcr=r(qwt,"data2vec-audio"),qwt.forEach(t),Wcr=r(hNe," \u2014 "),KW=n(hNe,"A",{href:!0});var jwt=s(KW);Hcr=r(jwt,"Data2VecAudioForSequenceClassification"),jwt.forEach(t),Ucr=r(hNe," (Data2VecAudio model)"),hNe.forEach(t),Jcr=i(ze),H6=n(ze,"LI",{});var pNe=s(H6);ube=n(pNe,"STRONG",{});var Dwt=s(ube);Ycr=r(Dwt,"hubert"),Dwt.forEach(t),Kcr=r(pNe," \u2014 "),ZW=n(pNe,"A",{href:!0});var Gwt=s(ZW);Zcr=r(Gwt,"HubertForSequenceClassification"),Gwt.forEach(t),efr=r(pNe," (Hubert model)"),pNe.forEach(t),ofr=i(ze),U6=n(ze,"LI",{});var _Ne=s(U6);bbe=n(_Ne,"STRONG",{});var Owt=s(bbe);rfr=r(Owt,"sew"),Owt.forEach(t),tfr=r(_Ne," \u2014 "),eH=n(_Ne,"A",{href:!0});var Vwt=s(eH);afr=r(Vwt,"SEWForSequenceClassification"),Vwt.forEach(t),nfr=r(_Ne," (SEW model)"),_Ne.forEach(t),sfr=i(ze),J6=n(ze,"LI",{});var uNe=s(J6);vbe=n(uNe,"STRONG",{});var Xwt=s(vbe);lfr=r(Xwt,"sew-d"),Xwt.forEach(t),ifr=r(uNe," \u2014 "),oH=n(uNe,"A",{href:!0});var zwt=s(oH);dfr=r(zwt,"SEWDForSequenceClassification"),zwt.forEach(t),cfr=r(uNe," (SEW-D model)"),uNe.forEach(t),ffr=i(ze),Y6=n(ze,"LI",{});var bNe=s(Y6);Fbe=n(bNe,"STRONG",{});var Qwt=s(Fbe);mfr=r(Qwt,"unispeech"),Qwt.forEach(t),gfr=r(bNe," \u2014 "),rH=n(bNe,"A",{href:!0});var Wwt=s(rH);hfr=r(Wwt,"UniSpeechForSequenceClassification"),Wwt.forEach(t),pfr=r(bNe," (UniSpeech model)"),bNe.forEach(t),_fr=i(ze),K6=n(ze,"LI",{});var vNe=s(K6);Tbe=n(vNe,"STRONG",{});var Hwt=s(Tbe);ufr=r(Hwt,"unispeech-sat"),Hwt.forEach(t),bfr=r(vNe," \u2014 "),tH=n(vNe,"A",{href:!0});var Uwt=s(tH);vfr=r(Uwt,"UniSpeechSatForSequenceClassification"),Uwt.forEach(t),Ffr=r(vNe," (UniSpeechSat model)"),vNe.forEach(t),Tfr=i(ze),Z6=n(ze,"LI",{});var FNe=s(Z6);Mbe=n(FNe,"STRONG",{});var Jwt=s(Mbe);Mfr=r(Jwt,"wav2vec2"),Jwt.forEach(t),Efr=r(FNe," \u2014 "),aH=n(FNe,"A",{href:!0});var Ywt=s(aH);Cfr=r(Ywt,"Wav2Vec2ForSequenceClassification"),Ywt.forEach(t),wfr=r(FNe," (Wav2Vec2 model)"),FNe.forEach(t),Afr=i(ze),eT=n(ze,"LI",{});var TNe=s(eT);Ebe=n(TNe,"STRONG",{});var Kwt=s(Ebe);Lfr=r(Kwt,"wav2vec2-conformer"),Kwt.forEach(t),yfr=r(TNe," \u2014 "),nH=n(TNe,"A",{href:!0});var Zwt=s(nH);xfr=r(Zwt,"Wav2Vec2ConformerForSequenceClassification"),Zwt.forEach(t),$fr=r(TNe," (Wav2Vec2-Conformer model)"),TNe.forEach(t),kfr=i(ze),oT=n(ze,"LI",{});var MNe=s(oT);Cbe=n(MNe,"STRONG",{});var eAt=s(Cbe);Sfr=r(eAt,"wavlm"),eAt.forEach(t),Rfr=r(MNe," \u2014 "),sH=n(MNe,"A",{href:!0});var oAt=s(sH);Pfr=r(oAt,"WavLMForSequenceClassification"),oAt.forEach(t),Bfr=r(MNe," (WavLM model)"),MNe.forEach(t),ze.forEach(t),Ifr=i(Ta),rT=n(Ta,"P",{});var ENe=s(rT);Nfr=r(ENe,"The model is set in evaluation mode by default using "),wbe=n(ENe,"CODE",{});var rAt=s(wbe);qfr=r(rAt,"model.eval()"),rAt.forEach(t),jfr=r(ENe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(ENe,"CODE",{});var tAt=s(Abe);Dfr=r(tAt,"model.train()"),tAt.forEach(t),ENe.forEach(t),Gfr=i(Ta),T(tT.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),YXe=i(f),Sd=n(f,"H2",{class:!0});var tWe=s(Sd);aT=n(tWe,"A",{id:!0,class:!0,href:!0});var aAt=s(aT);Lbe=n(aAt,"SPAN",{});var nAt=s(Lbe);T(o8.$$.fragment,nAt),nAt.forEach(t),aAt.forEach(t),Ofr=i(tWe),ybe=n(tWe,"SPAN",{});var sAt=s(ybe);Vfr=r(sAt,"AutoModelForAudioFrameClassification"),sAt.forEach(t),tWe.forEach(t),KXe=i(f),zo=n(f,"DIV",{class:!0});var ul=s(zo);T(r8.$$.fragment,ul),Xfr=i(ul),Rd=n(ul,"P",{});var mte=s(Rd);zfr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lH=n(mte,"A",{href:!0});var lAt=s(lH);Qfr=r(lAt,"from_pretrained()"),lAt.forEach(t),Wfr=r(mte," class method or the "),iH=n(mte,"A",{href:!0});var iAt=s(iH);Hfr=r(iAt,"from_config()"),iAt.forEach(t),Ufr=r(mte,` class
method.`),mte.forEach(t),Jfr=i(ul),t8=n(ul,"P",{});var aWe=s(t8);Yfr=r(aWe,"This class cannot be instantiated directly using "),xbe=n(aWe,"CODE",{});var dAt=s(xbe);Kfr=r(dAt,"__init__()"),dAt.forEach(t),Zfr=r(aWe," (throws an error)."),aWe.forEach(t),emr=i(ul),Et=n(ul,"DIV",{class:!0});var Gw=s(Et);T(a8.$$.fragment,Gw),omr=i(Gw),$be=n(Gw,"P",{});var cAt=s($be);rmr=r(cAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cAt.forEach(t),tmr=i(Gw),Pd=n(Gw,"P",{});var gte=s(Pd);amr=r(gte,`Note:
Loading a model from its configuration file does `),kbe=n(gte,"STRONG",{});var fAt=s(kbe);nmr=r(fAt,"not"),fAt.forEach(t),smr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(gte,"A",{href:!0});var mAt=s(dH);lmr=r(mAt,"from_pretrained()"),mAt.forEach(t),imr=r(gte," to load the model weights."),gte.forEach(t),dmr=i(Gw),T(nT.$$.fragment,Gw),Gw.forEach(t),cmr=i(ul),mo=n(ul,"DIV",{class:!0});var Ma=s(mo);T(n8.$$.fragment,Ma),fmr=i(Ma),Sbe=n(Ma,"P",{});var gAt=s(Sbe);mmr=r(gAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gAt.forEach(t),gmr=i(Ma),Ya=n(Ma,"P",{});var Ow=s(Ya);hmr=r(Ow,"The model class to instantiate is selected based on the "),Rbe=n(Ow,"CODE",{});var hAt=s(Rbe);pmr=r(hAt,"model_type"),hAt.forEach(t),_mr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(Ow,"CODE",{});var pAt=s(Pbe);umr=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),bmr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(Ow,"CODE",{});var _At=s(Bbe);vmr=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),Fmr=r(Ow,":"),Ow.forEach(t),Tmr=i(Ma),ot=n(Ma,"UL",{});var bl=s(ot);sT=n(bl,"LI",{});var CNe=s(sT);Ibe=n(CNe,"STRONG",{});var uAt=s(Ibe);Mmr=r(uAt,"data2vec-audio"),uAt.forEach(t),Emr=r(CNe," \u2014 "),cH=n(CNe,"A",{href:!0});var bAt=s(cH);Cmr=r(bAt,"Data2VecAudioForAudioFrameClassification"),bAt.forEach(t),wmr=r(CNe," (Data2VecAudio model)"),CNe.forEach(t),Amr=i(bl),lT=n(bl,"LI",{});var wNe=s(lT);Nbe=n(wNe,"STRONG",{});var vAt=s(Nbe);Lmr=r(vAt,"unispeech-sat"),vAt.forEach(t),ymr=r(wNe," \u2014 "),fH=n(wNe,"A",{href:!0});var FAt=s(fH);xmr=r(FAt,"UniSpeechSatForAudioFrameClassification"),FAt.forEach(t),$mr=r(wNe," (UniSpeechSat model)"),wNe.forEach(t),kmr=i(bl),iT=n(bl,"LI",{});var ANe=s(iT);qbe=n(ANe,"STRONG",{});var TAt=s(qbe);Smr=r(TAt,"wav2vec2"),TAt.forEach(t),Rmr=r(ANe," \u2014 "),mH=n(ANe,"A",{href:!0});var MAt=s(mH);Pmr=r(MAt,"Wav2Vec2ForAudioFrameClassification"),MAt.forEach(t),Bmr=r(ANe," (Wav2Vec2 model)"),ANe.forEach(t),Imr=i(bl),dT=n(bl,"LI",{});var LNe=s(dT);jbe=n(LNe,"STRONG",{});var EAt=s(jbe);Nmr=r(EAt,"wav2vec2-conformer"),EAt.forEach(t),qmr=r(LNe," \u2014 "),gH=n(LNe,"A",{href:!0});var CAt=s(gH);jmr=r(CAt,"Wav2Vec2ConformerForAudioFrameClassification"),CAt.forEach(t),Dmr=r(LNe," (Wav2Vec2-Conformer model)"),LNe.forEach(t),Gmr=i(bl),cT=n(bl,"LI",{});var yNe=s(cT);Dbe=n(yNe,"STRONG",{});var wAt=s(Dbe);Omr=r(wAt,"wavlm"),wAt.forEach(t),Vmr=r(yNe," \u2014 "),hH=n(yNe,"A",{href:!0});var AAt=s(hH);Xmr=r(AAt,"WavLMForAudioFrameClassification"),AAt.forEach(t),zmr=r(yNe," (WavLM model)"),yNe.forEach(t),bl.forEach(t),Qmr=i(Ma),fT=n(Ma,"P",{});var xNe=s(fT);Wmr=r(xNe,"The model is set in evaluation mode by default using "),Gbe=n(xNe,"CODE",{});var LAt=s(Gbe);Hmr=r(LAt,"model.eval()"),LAt.forEach(t),Umr=r(xNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=n(xNe,"CODE",{});var yAt=s(Obe);Jmr=r(yAt,"model.train()"),yAt.forEach(t),xNe.forEach(t),Ymr=i(Ma),T(mT.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),ZXe=i(f),Bd=n(f,"H2",{class:!0});var nWe=s(Bd);gT=n(nWe,"A",{id:!0,class:!0,href:!0});var xAt=s(gT);Vbe=n(xAt,"SPAN",{});var $At=s(Vbe);T(s8.$$.fragment,$At),$At.forEach(t),xAt.forEach(t),Kmr=i(nWe),Xbe=n(nWe,"SPAN",{});var kAt=s(Xbe);Zmr=r(kAt,"AutoModelForCTC"),kAt.forEach(t),nWe.forEach(t),eze=i(f),Qo=n(f,"DIV",{class:!0});var vl=s(Qo);T(l8.$$.fragment,vl),egr=i(vl),Id=n(vl,"P",{});var hte=s(Id);ogr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pH=n(hte,"A",{href:!0});var SAt=s(pH);rgr=r(SAt,"from_pretrained()"),SAt.forEach(t),tgr=r(hte," class method or the "),_H=n(hte,"A",{href:!0});var RAt=s(_H);agr=r(RAt,"from_config()"),RAt.forEach(t),ngr=r(hte,` class
method.`),hte.forEach(t),sgr=i(vl),i8=n(vl,"P",{});var sWe=s(i8);lgr=r(sWe,"This class cannot be instantiated directly using "),zbe=n(sWe,"CODE",{});var PAt=s(zbe);igr=r(PAt,"__init__()"),PAt.forEach(t),dgr=r(sWe," (throws an error)."),sWe.forEach(t),cgr=i(vl),Ct=n(vl,"DIV",{class:!0});var Vw=s(Ct);T(d8.$$.fragment,Vw),fgr=i(Vw),Qbe=n(Vw,"P",{});var BAt=s(Qbe);mgr=r(BAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),BAt.forEach(t),ggr=i(Vw),Nd=n(Vw,"P",{});var pte=s(Nd);hgr=r(pte,`Note:
Loading a model from its configuration file does `),Wbe=n(pte,"STRONG",{});var IAt=s(Wbe);pgr=r(IAt,"not"),IAt.forEach(t),_gr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(pte,"A",{href:!0});var NAt=s(uH);ugr=r(NAt,"from_pretrained()"),NAt.forEach(t),bgr=r(pte," to load the model weights."),pte.forEach(t),vgr=i(Vw),T(hT.$$.fragment,Vw),Vw.forEach(t),Fgr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(c8.$$.fragment,Ea),Tgr=i(Ea),Hbe=n(Ea,"P",{});var qAt=s(Hbe);Mgr=r(qAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),qAt.forEach(t),Egr=i(Ea),Ka=n(Ea,"P",{});var Xw=s(Ka);Cgr=r(Xw,"The model class to instantiate is selected based on the "),Ube=n(Xw,"CODE",{});var jAt=s(Ube);wgr=r(jAt,"model_type"),jAt.forEach(t),Agr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(Xw,"CODE",{});var DAt=s(Jbe);Lgr=r(DAt,"pretrained_model_name_or_path"),DAt.forEach(t),ygr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(Xw,"CODE",{});var GAt=s(Ybe);xgr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),$gr=r(Xw,":"),Xw.forEach(t),kgr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);pT=n(Be,"LI",{});var $Ne=s(pT);Kbe=n($Ne,"STRONG",{});var OAt=s(Kbe);Sgr=r(OAt,"data2vec-audio"),OAt.forEach(t),Rgr=r($Ne," \u2014 "),bH=n($Ne,"A",{href:!0});var VAt=s(bH);Pgr=r(VAt,"Data2VecAudioForCTC"),VAt.forEach(t),Bgr=r($Ne," (Data2VecAudio model)"),$Ne.forEach(t),Igr=i(Be),_T=n(Be,"LI",{});var kNe=s(_T);Zbe=n(kNe,"STRONG",{});var XAt=s(Zbe);Ngr=r(XAt,"hubert"),XAt.forEach(t),qgr=r(kNe," \u2014 "),vH=n(kNe,"A",{href:!0});var zAt=s(vH);jgr=r(zAt,"HubertForCTC"),zAt.forEach(t),Dgr=r(kNe," (Hubert model)"),kNe.forEach(t),Ggr=i(Be),uT=n(Be,"LI",{});var SNe=s(uT);eve=n(SNe,"STRONG",{});var QAt=s(eve);Ogr=r(QAt,"mctct"),QAt.forEach(t),Vgr=r(SNe," \u2014 "),FH=n(SNe,"A",{href:!0});var WAt=s(FH);Xgr=r(WAt,"MCTCTForCTC"),WAt.forEach(t),zgr=r(SNe," (M-CTC-T model)"),SNe.forEach(t),Qgr=i(Be),bT=n(Be,"LI",{});var RNe=s(bT);ove=n(RNe,"STRONG",{});var HAt=s(ove);Wgr=r(HAt,"sew"),HAt.forEach(t),Hgr=r(RNe," \u2014 "),TH=n(RNe,"A",{href:!0});var UAt=s(TH);Ugr=r(UAt,"SEWForCTC"),UAt.forEach(t),Jgr=r(RNe," (SEW model)"),RNe.forEach(t),Ygr=i(Be),vT=n(Be,"LI",{});var PNe=s(vT);rve=n(PNe,"STRONG",{});var JAt=s(rve);Kgr=r(JAt,"sew-d"),JAt.forEach(t),Zgr=r(PNe," \u2014 "),MH=n(PNe,"A",{href:!0});var YAt=s(MH);ehr=r(YAt,"SEWDForCTC"),YAt.forEach(t),ohr=r(PNe," (SEW-D model)"),PNe.forEach(t),rhr=i(Be),FT=n(Be,"LI",{});var BNe=s(FT);tve=n(BNe,"STRONG",{});var KAt=s(tve);thr=r(KAt,"unispeech"),KAt.forEach(t),ahr=r(BNe," \u2014 "),EH=n(BNe,"A",{href:!0});var ZAt=s(EH);nhr=r(ZAt,"UniSpeechForCTC"),ZAt.forEach(t),shr=r(BNe," (UniSpeech model)"),BNe.forEach(t),lhr=i(Be),TT=n(Be,"LI",{});var INe=s(TT);ave=n(INe,"STRONG",{});var eLt=s(ave);ihr=r(eLt,"unispeech-sat"),eLt.forEach(t),dhr=r(INe," \u2014 "),CH=n(INe,"A",{href:!0});var oLt=s(CH);chr=r(oLt,"UniSpeechSatForCTC"),oLt.forEach(t),fhr=r(INe," (UniSpeechSat model)"),INe.forEach(t),mhr=i(Be),MT=n(Be,"LI",{});var NNe=s(MT);nve=n(NNe,"STRONG",{});var rLt=s(nve);ghr=r(rLt,"wav2vec2"),rLt.forEach(t),hhr=r(NNe," \u2014 "),wH=n(NNe,"A",{href:!0});var tLt=s(wH);phr=r(tLt,"Wav2Vec2ForCTC"),tLt.forEach(t),_hr=r(NNe," (Wav2Vec2 model)"),NNe.forEach(t),uhr=i(Be),ET=n(Be,"LI",{});var qNe=s(ET);sve=n(qNe,"STRONG",{});var aLt=s(sve);bhr=r(aLt,"wav2vec2-conformer"),aLt.forEach(t),vhr=r(qNe," \u2014 "),AH=n(qNe,"A",{href:!0});var nLt=s(AH);Fhr=r(nLt,"Wav2Vec2ConformerForCTC"),nLt.forEach(t),Thr=r(qNe," (Wav2Vec2-Conformer model)"),qNe.forEach(t),Mhr=i(Be),CT=n(Be,"LI",{});var jNe=s(CT);lve=n(jNe,"STRONG",{});var sLt=s(lve);Ehr=r(sLt,"wavlm"),sLt.forEach(t),Chr=r(jNe," \u2014 "),LH=n(jNe,"A",{href:!0});var lLt=s(LH);whr=r(lLt,"WavLMForCTC"),lLt.forEach(t),Ahr=r(jNe," (WavLM model)"),jNe.forEach(t),Be.forEach(t),Lhr=i(Ea),wT=n(Ea,"P",{});var DNe=s(wT);yhr=r(DNe,"The model is set in evaluation mode by default using "),ive=n(DNe,"CODE",{});var iLt=s(ive);xhr=r(iLt,"model.eval()"),iLt.forEach(t),$hr=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dve=n(DNe,"CODE",{});var dLt=s(dve);khr=r(dLt,"model.train()"),dLt.forEach(t),DNe.forEach(t),Shr=i(Ea),T(AT.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),oze=i(f),qd=n(f,"H2",{class:!0});var lWe=s(qd);LT=n(lWe,"A",{id:!0,class:!0,href:!0});var cLt=s(LT);cve=n(cLt,"SPAN",{});var fLt=s(cve);T(f8.$$.fragment,fLt),fLt.forEach(t),cLt.forEach(t),Rhr=i(lWe),fve=n(lWe,"SPAN",{});var mLt=s(fve);Phr=r(mLt,"AutoModelForSpeechSeq2Seq"),mLt.forEach(t),lWe.forEach(t),rze=i(f),Wo=n(f,"DIV",{class:!0});var Fl=s(Wo);T(m8.$$.fragment,Fl),Bhr=i(Fl),jd=n(Fl,"P",{});var _te=s(jd);Ihr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yH=n(_te,"A",{href:!0});var gLt=s(yH);Nhr=r(gLt,"from_pretrained()"),gLt.forEach(t),qhr=r(_te," class method or the "),xH=n(_te,"A",{href:!0});var hLt=s(xH);jhr=r(hLt,"from_config()"),hLt.forEach(t),Dhr=r(_te,` class
method.`),_te.forEach(t),Ghr=i(Fl),g8=n(Fl,"P",{});var iWe=s(g8);Ohr=r(iWe,"This class cannot be instantiated directly using "),mve=n(iWe,"CODE",{});var pLt=s(mve);Vhr=r(pLt,"__init__()"),pLt.forEach(t),Xhr=r(iWe," (throws an error)."),iWe.forEach(t),zhr=i(Fl),wt=n(Fl,"DIV",{class:!0});var zw=s(wt);T(h8.$$.fragment,zw),Qhr=i(zw),gve=n(zw,"P",{});var _Lt=s(gve);Whr=r(_Lt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_Lt.forEach(t),Hhr=i(zw),Dd=n(zw,"P",{});var ute=s(Dd);Uhr=r(ute,`Note:
Loading a model from its configuration file does `),hve=n(ute,"STRONG",{});var uLt=s(hve);Jhr=r(uLt,"not"),uLt.forEach(t),Yhr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(ute,"A",{href:!0});var bLt=s($H);Khr=r(bLt,"from_pretrained()"),bLt.forEach(t),Zhr=r(ute," to load the model weights."),ute.forEach(t),epr=i(zw),T(yT.$$.fragment,zw),zw.forEach(t),opr=i(Fl),ho=n(Fl,"DIV",{class:!0});var Ca=s(ho);T(p8.$$.fragment,Ca),rpr=i(Ca),pve=n(Ca,"P",{});var vLt=s(pve);tpr=r(vLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vLt.forEach(t),apr=i(Ca),Za=n(Ca,"P",{});var Qw=s(Za);npr=r(Qw,"The model class to instantiate is selected based on the "),_ve=n(Qw,"CODE",{});var FLt=s(_ve);spr=r(FLt,"model_type"),FLt.forEach(t),lpr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),uve=n(Qw,"CODE",{});var TLt=s(uve);ipr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),dpr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(Qw,"CODE",{});var MLt=s(bve);cpr=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),fpr=r(Qw,":"),Qw.forEach(t),mpr=i(Ca),_8=n(Ca,"UL",{});var dWe=s(_8);xT=n(dWe,"LI",{});var GNe=s(xT);vve=n(GNe,"STRONG",{});var ELt=s(vve);gpr=r(ELt,"speech-encoder-decoder"),ELt.forEach(t),hpr=r(GNe," \u2014 "),kH=n(GNe,"A",{href:!0});var CLt=s(kH);ppr=r(CLt,"SpeechEncoderDecoderModel"),CLt.forEach(t),_pr=r(GNe," (Speech Encoder decoder model)"),GNe.forEach(t),upr=i(dWe),$T=n(dWe,"LI",{});var ONe=s($T);Fve=n(ONe,"STRONG",{});var wLt=s(Fve);bpr=r(wLt,"speech_to_text"),wLt.forEach(t),vpr=r(ONe," \u2014 "),SH=n(ONe,"A",{href:!0});var ALt=s(SH);Fpr=r(ALt,"Speech2TextForConditionalGeneration"),ALt.forEach(t),Tpr=r(ONe," (Speech2Text model)"),ONe.forEach(t),dWe.forEach(t),Mpr=i(Ca),kT=n(Ca,"P",{});var VNe=s(kT);Epr=r(VNe,"The model is set in evaluation mode by default using "),Tve=n(VNe,"CODE",{});var LLt=s(Tve);Cpr=r(LLt,"model.eval()"),LLt.forEach(t),wpr=r(VNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=n(VNe,"CODE",{});var yLt=s(Mve);Apr=r(yLt,"model.train()"),yLt.forEach(t),VNe.forEach(t),Lpr=i(Ca),T(ST.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),tze=i(f),Gd=n(f,"H2",{class:!0});var cWe=s(Gd);RT=n(cWe,"A",{id:!0,class:!0,href:!0});var xLt=s(RT);Eve=n(xLt,"SPAN",{});var $Lt=s(Eve);T(u8.$$.fragment,$Lt),$Lt.forEach(t),xLt.forEach(t),ypr=i(cWe),Cve=n(cWe,"SPAN",{});var kLt=s(Cve);xpr=r(kLt,"AutoModelForAudioXVector"),kLt.forEach(t),cWe.forEach(t),aze=i(f),Ho=n(f,"DIV",{class:!0});var Tl=s(Ho);T(b8.$$.fragment,Tl),$pr=i(Tl),Od=n(Tl,"P",{});var bte=s(Od);kpr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RH=n(bte,"A",{href:!0});var SLt=s(RH);Spr=r(SLt,"from_pretrained()"),SLt.forEach(t),Rpr=r(bte," class method or the "),PH=n(bte,"A",{href:!0});var RLt=s(PH);Ppr=r(RLt,"from_config()"),RLt.forEach(t),Bpr=r(bte,` class
method.`),bte.forEach(t),Ipr=i(Tl),v8=n(Tl,"P",{});var fWe=s(v8);Npr=r(fWe,"This class cannot be instantiated directly using "),wve=n(fWe,"CODE",{});var PLt=s(wve);qpr=r(PLt,"__init__()"),PLt.forEach(t),jpr=r(fWe," (throws an error)."),fWe.forEach(t),Dpr=i(Tl),At=n(Tl,"DIV",{class:!0});var Ww=s(At);T(F8.$$.fragment,Ww),Gpr=i(Ww),Ave=n(Ww,"P",{});var BLt=s(Ave);Opr=r(BLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),BLt.forEach(t),Vpr=i(Ww),Vd=n(Ww,"P",{});var vte=s(Vd);Xpr=r(vte,`Note:
Loading a model from its configuration file does `),Lve=n(vte,"STRONG",{});var ILt=s(Lve);zpr=r(ILt,"not"),ILt.forEach(t),Qpr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(vte,"A",{href:!0});var NLt=s(BH);Wpr=r(NLt,"from_pretrained()"),NLt.forEach(t),Hpr=r(vte," to load the model weights."),vte.forEach(t),Upr=i(Ww),T(PT.$$.fragment,Ww),Ww.forEach(t),Jpr=i(Tl),po=n(Tl,"DIV",{class:!0});var wa=s(po);T(T8.$$.fragment,wa),Ypr=i(wa),yve=n(wa,"P",{});var qLt=s(yve);Kpr=r(qLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),qLt.forEach(t),Zpr=i(wa),en=n(wa,"P",{});var Hw=s(en);e_r=r(Hw,"The model class to instantiate is selected based on the "),xve=n(Hw,"CODE",{});var jLt=s(xve);o_r=r(jLt,"model_type"),jLt.forEach(t),r_r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),$ve=n(Hw,"CODE",{});var DLt=s($ve);t_r=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),a_r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(Hw,"CODE",{});var GLt=s(kve);n_r=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),s_r=r(Hw,":"),Hw.forEach(t),l_r=i(wa),rt=n(wa,"UL",{});var Ml=s(rt);BT=n(Ml,"LI",{});var XNe=s(BT);Sve=n(XNe,"STRONG",{});var OLt=s(Sve);i_r=r(OLt,"data2vec-audio"),OLt.forEach(t),d_r=r(XNe," \u2014 "),IH=n(XNe,"A",{href:!0});var VLt=s(IH);c_r=r(VLt,"Data2VecAudioForXVector"),VLt.forEach(t),f_r=r(XNe," (Data2VecAudio model)"),XNe.forEach(t),m_r=i(Ml),IT=n(Ml,"LI",{});var zNe=s(IT);Rve=n(zNe,"STRONG",{});var XLt=s(Rve);g_r=r(XLt,"unispeech-sat"),XLt.forEach(t),h_r=r(zNe," \u2014 "),NH=n(zNe,"A",{href:!0});var zLt=s(NH);p_r=r(zLt,"UniSpeechSatForXVector"),zLt.forEach(t),__r=r(zNe," (UniSpeechSat model)"),zNe.forEach(t),u_r=i(Ml),NT=n(Ml,"LI",{});var QNe=s(NT);Pve=n(QNe,"STRONG",{});var QLt=s(Pve);b_r=r(QLt,"wav2vec2"),QLt.forEach(t),v_r=r(QNe," \u2014 "),qH=n(QNe,"A",{href:!0});var WLt=s(qH);F_r=r(WLt,"Wav2Vec2ForXVector"),WLt.forEach(t),T_r=r(QNe," (Wav2Vec2 model)"),QNe.forEach(t),M_r=i(Ml),qT=n(Ml,"LI",{});var WNe=s(qT);Bve=n(WNe,"STRONG",{});var HLt=s(Bve);E_r=r(HLt,"wav2vec2-conformer"),HLt.forEach(t),C_r=r(WNe," \u2014 "),jH=n(WNe,"A",{href:!0});var ULt=s(jH);w_r=r(ULt,"Wav2Vec2ConformerForXVector"),ULt.forEach(t),A_r=r(WNe," (Wav2Vec2-Conformer model)"),WNe.forEach(t),L_r=i(Ml),jT=n(Ml,"LI",{});var HNe=s(jT);Ive=n(HNe,"STRONG",{});var JLt=s(Ive);y_r=r(JLt,"wavlm"),JLt.forEach(t),x_r=r(HNe," \u2014 "),DH=n(HNe,"A",{href:!0});var YLt=s(DH);$_r=r(YLt,"WavLMForXVector"),YLt.forEach(t),k_r=r(HNe," (WavLM model)"),HNe.forEach(t),Ml.forEach(t),S_r=i(wa),DT=n(wa,"P",{});var UNe=s(DT);R_r=r(UNe,"The model is set in evaluation mode by default using "),Nve=n(UNe,"CODE",{});var KLt=s(Nve);P_r=r(KLt,"model.eval()"),KLt.forEach(t),B_r=r(UNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=n(UNe,"CODE",{});var ZLt=s(qve);I_r=r(ZLt,"model.train()"),ZLt.forEach(t),UNe.forEach(t),N_r=i(wa),T(GT.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),nze=i(f),Xd=n(f,"H2",{class:!0});var mWe=s(Xd);OT=n(mWe,"A",{id:!0,class:!0,href:!0});var eyt=s(OT);jve=n(eyt,"SPAN",{});var oyt=s(jve);T(M8.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),q_r=i(mWe),Dve=n(mWe,"SPAN",{});var ryt=s(Dve);j_r=r(ryt,"AutoModelForMaskedImageModeling"),ryt.forEach(t),mWe.forEach(t),sze=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T(E8.$$.fragment,El),D_r=i(El),zd=n(El,"P",{});var Fte=s(zd);G_r=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GH=n(Fte,"A",{href:!0});var tyt=s(GH);O_r=r(tyt,"from_pretrained()"),tyt.forEach(t),V_r=r(Fte," class method or the "),OH=n(Fte,"A",{href:!0});var ayt=s(OH);X_r=r(ayt,"from_config()"),ayt.forEach(t),z_r=r(Fte,` class
method.`),Fte.forEach(t),Q_r=i(El),C8=n(El,"P",{});var gWe=s(C8);W_r=r(gWe,"This class cannot be instantiated directly using "),Gve=n(gWe,"CODE",{});var nyt=s(Gve);H_r=r(nyt,"__init__()"),nyt.forEach(t),U_r=r(gWe," (throws an error)."),gWe.forEach(t),J_r=i(El),Lt=n(El,"DIV",{class:!0});var Uw=s(Lt);T(w8.$$.fragment,Uw),Y_r=i(Uw),Ove=n(Uw,"P",{});var syt=s(Ove);K_r=r(syt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),syt.forEach(t),Z_r=i(Uw),Qd=n(Uw,"P",{});var Tte=s(Qd);eur=r(Tte,`Note:
Loading a model from its configuration file does `),Vve=n(Tte,"STRONG",{});var lyt=s(Vve);our=r(lyt,"not"),lyt.forEach(t),rur=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(Tte,"A",{href:!0});var iyt=s(VH);tur=r(iyt,"from_pretrained()"),iyt.forEach(t),aur=r(Tte," to load the model weights."),Tte.forEach(t),nur=i(Uw),T(VT.$$.fragment,Uw),Uw.forEach(t),sur=i(El),_o=n(El,"DIV",{class:!0});var Aa=s(_o);T(A8.$$.fragment,Aa),lur=i(Aa),Xve=n(Aa,"P",{});var dyt=s(Xve);iur=r(dyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dyt.forEach(t),dur=i(Aa),on=n(Aa,"P",{});var Jw=s(on);cur=r(Jw,"The model class to instantiate is selected based on the "),zve=n(Jw,"CODE",{});var cyt=s(zve);fur=r(cyt,"model_type"),cyt.forEach(t),mur=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Qve=n(Jw,"CODE",{});var fyt=s(Qve);gur=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),hur=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(Jw,"CODE",{});var myt=s(Wve);pur=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),_ur=r(Jw,":"),Jw.forEach(t),uur=i(Aa),rn=n(Aa,"UL",{});var Yw=s(rn);XT=n(Yw,"LI",{});var JNe=s(XT);Hve=n(JNe,"STRONG",{});var gyt=s(Hve);bur=r(gyt,"deit"),gyt.forEach(t),vur=r(JNe," \u2014 "),XH=n(JNe,"A",{href:!0});var hyt=s(XH);Fur=r(hyt,"DeiTForMaskedImageModeling"),hyt.forEach(t),Tur=r(JNe," (DeiT model)"),JNe.forEach(t),Mur=i(Yw),zT=n(Yw,"LI",{});var YNe=s(zT);Uve=n(YNe,"STRONG",{});var pyt=s(Uve);Eur=r(pyt,"swin"),pyt.forEach(t),Cur=r(YNe," \u2014 "),zH=n(YNe,"A",{href:!0});var _yt=s(zH);wur=r(_yt,"SwinForMaskedImageModeling"),_yt.forEach(t),Aur=r(YNe," (Swin Transformer model)"),YNe.forEach(t),Lur=i(Yw),QT=n(Yw,"LI",{});var KNe=s(QT);Jve=n(KNe,"STRONG",{});var uyt=s(Jve);yur=r(uyt,"swinv2"),uyt.forEach(t),xur=r(KNe," \u2014 "),QH=n(KNe,"A",{href:!0});var byt=s(QH);$ur=r(byt,"Swinv2ForMaskedImageModeling"),byt.forEach(t),kur=r(KNe," (Swin Transformer V2 model)"),KNe.forEach(t),Sur=i(Yw),WT=n(Yw,"LI",{});var ZNe=s(WT);Yve=n(ZNe,"STRONG",{});var vyt=s(Yve);Rur=r(vyt,"vit"),vyt.forEach(t),Pur=r(ZNe," \u2014 "),WH=n(ZNe,"A",{href:!0});var Fyt=s(WH);Bur=r(Fyt,"ViTForMaskedImageModeling"),Fyt.forEach(t),Iur=r(ZNe," (ViT model)"),ZNe.forEach(t),Yw.forEach(t),Nur=i(Aa),HT=n(Aa,"P",{});var eqe=s(HT);qur=r(eqe,"The model is set in evaluation mode by default using "),Kve=n(eqe,"CODE",{});var Tyt=s(Kve);jur=r(Tyt,"model.eval()"),Tyt.forEach(t),Dur=r(eqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zve=n(eqe,"CODE",{});var Myt=s(Zve);Gur=r(Myt,"model.train()"),Myt.forEach(t),eqe.forEach(t),Our=i(Aa),T(UT.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),lze=i(f),Wd=n(f,"H2",{class:!0});var hWe=s(Wd);JT=n(hWe,"A",{id:!0,class:!0,href:!0});var Eyt=s(JT);eFe=n(Eyt,"SPAN",{});var Cyt=s(eFe);T(L8.$$.fragment,Cyt),Cyt.forEach(t),Eyt.forEach(t),Vur=i(hWe),oFe=n(hWe,"SPAN",{});var wyt=s(oFe);Xur=r(wyt,"AutoModelForObjectDetection"),wyt.forEach(t),hWe.forEach(t),ize=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(y8.$$.fragment,Cl),zur=i(Cl),Hd=n(Cl,"P",{});var Mte=s(Hd);Qur=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),HH=n(Mte,"A",{href:!0});var Ayt=s(HH);Wur=r(Ayt,"from_pretrained()"),Ayt.forEach(t),Hur=r(Mte," class method or the "),UH=n(Mte,"A",{href:!0});var Lyt=s(UH);Uur=r(Lyt,"from_config()"),Lyt.forEach(t),Jur=r(Mte,` class
method.`),Mte.forEach(t),Yur=i(Cl),x8=n(Cl,"P",{});var pWe=s(x8);Kur=r(pWe,"This class cannot be instantiated directly using "),rFe=n(pWe,"CODE",{});var yyt=s(rFe);Zur=r(yyt,"__init__()"),yyt.forEach(t),e1r=r(pWe," (throws an error)."),pWe.forEach(t),o1r=i(Cl),yt=n(Cl,"DIV",{class:!0});var Kw=s(yt);T($8.$$.fragment,Kw),r1r=i(Kw),tFe=n(Kw,"P",{});var xyt=s(tFe);t1r=r(xyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xyt.forEach(t),a1r=i(Kw),Ud=n(Kw,"P",{});var Ete=s(Ud);n1r=r(Ete,`Note:
Loading a model from its configuration file does `),aFe=n(Ete,"STRONG",{});var $yt=s(aFe);s1r=r($yt,"not"),$yt.forEach(t),l1r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(Ete,"A",{href:!0});var kyt=s(JH);i1r=r(kyt,"from_pretrained()"),kyt.forEach(t),d1r=r(Ete," to load the model weights."),Ete.forEach(t),c1r=i(Kw),T(YT.$$.fragment,Kw),Kw.forEach(t),f1r=i(Cl),uo=n(Cl,"DIV",{class:!0});var La=s(uo);T(k8.$$.fragment,La),m1r=i(La),nFe=n(La,"P",{});var Syt=s(nFe);g1r=r(Syt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Syt.forEach(t),h1r=i(La),tn=n(La,"P",{});var Zw=s(tn);p1r=r(Zw,"The model class to instantiate is selected based on the "),sFe=n(Zw,"CODE",{});var Ryt=s(sFe);_1r=r(Ryt,"model_type"),Ryt.forEach(t),u1r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),lFe=n(Zw,"CODE",{});var Pyt=s(lFe);b1r=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),v1r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(Zw,"CODE",{});var Byt=s(iFe);F1r=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),T1r=r(Zw,":"),Zw.forEach(t),M1r=i(La),S8=n(La,"UL",{});var _We=s(S8);KT=n(_We,"LI",{});var oqe=s(KT);dFe=n(oqe,"STRONG",{});var Iyt=s(dFe);E1r=r(Iyt,"detr"),Iyt.forEach(t),C1r=r(oqe," \u2014 "),YH=n(oqe,"A",{href:!0});var Nyt=s(YH);w1r=r(Nyt,"DetrForObjectDetection"),Nyt.forEach(t),A1r=r(oqe," (DETR model)"),oqe.forEach(t),L1r=i(_We),ZT=n(_We,"LI",{});var rqe=s(ZT);cFe=n(rqe,"STRONG",{});var qyt=s(cFe);y1r=r(qyt,"yolos"),qyt.forEach(t),x1r=r(rqe," \u2014 "),KH=n(rqe,"A",{href:!0});var jyt=s(KH);$1r=r(jyt,"YolosForObjectDetection"),jyt.forEach(t),k1r=r(rqe," (YOLOS model)"),rqe.forEach(t),_We.forEach(t),S1r=i(La),e7=n(La,"P",{});var tqe=s(e7);R1r=r(tqe,"The model is set in evaluation mode by default using "),fFe=n(tqe,"CODE",{});var Dyt=s(fFe);P1r=r(Dyt,"model.eval()"),Dyt.forEach(t),B1r=r(tqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mFe=n(tqe,"CODE",{});var Gyt=s(mFe);I1r=r(Gyt,"model.train()"),Gyt.forEach(t),tqe.forEach(t),N1r=i(La),T(o7.$$.fragment,La),La.forEach(t),Cl.forEach(t),dze=i(f),Jd=n(f,"H2",{class:!0});var uWe=s(Jd);r7=n(uWe,"A",{id:!0,class:!0,href:!0});var Oyt=s(r7);gFe=n(Oyt,"SPAN",{});var Vyt=s(gFe);T(R8.$$.fragment,Vyt),Vyt.forEach(t),Oyt.forEach(t),q1r=i(uWe),hFe=n(uWe,"SPAN",{});var Xyt=s(hFe);j1r=r(Xyt,"AutoModelForImageSegmentation"),Xyt.forEach(t),uWe.forEach(t),cze=i(f),Yo=n(f,"DIV",{class:!0});var wl=s(Yo);T(P8.$$.fragment,wl),D1r=i(wl),Yd=n(wl,"P",{});var Cte=s(Yd);G1r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZH=n(Cte,"A",{href:!0});var zyt=s(ZH);O1r=r(zyt,"from_pretrained()"),zyt.forEach(t),V1r=r(Cte," class method or the "),eU=n(Cte,"A",{href:!0});var Qyt=s(eU);X1r=r(Qyt,"from_config()"),Qyt.forEach(t),z1r=r(Cte,` class
method.`),Cte.forEach(t),Q1r=i(wl),B8=n(wl,"P",{});var bWe=s(B8);W1r=r(bWe,"This class cannot be instantiated directly using "),pFe=n(bWe,"CODE",{});var Wyt=s(pFe);H1r=r(Wyt,"__init__()"),Wyt.forEach(t),U1r=r(bWe," (throws an error)."),bWe.forEach(t),J1r=i(wl),xt=n(wl,"DIV",{class:!0});var eA=s(xt);T(I8.$$.fragment,eA),Y1r=i(eA),_Fe=n(eA,"P",{});var Hyt=s(_Fe);K1r=r(Hyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Hyt.forEach(t),Z1r=i(eA),Kd=n(eA,"P",{});var wte=s(Kd);e2r=r(wte,`Note:
Loading a model from its configuration file does `),uFe=n(wte,"STRONG",{});var Uyt=s(uFe);o2r=r(Uyt,"not"),Uyt.forEach(t),r2r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(wte,"A",{href:!0});var Jyt=s(oU);t2r=r(Jyt,"from_pretrained()"),Jyt.forEach(t),a2r=r(wte," to load the model weights."),wte.forEach(t),n2r=i(eA),T(t7.$$.fragment,eA),eA.forEach(t),s2r=i(wl),bo=n(wl,"DIV",{class:!0});var ya=s(bo);T(N8.$$.fragment,ya),l2r=i(ya),bFe=n(ya,"P",{});var Yyt=s(bFe);i2r=r(Yyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Yyt.forEach(t),d2r=i(ya),an=n(ya,"P",{});var oA=s(an);c2r=r(oA,"The model class to instantiate is selected based on the "),vFe=n(oA,"CODE",{});var Kyt=s(vFe);f2r=r(Kyt,"model_type"),Kyt.forEach(t),m2r=r(oA,` property of the config object (either
passed as an argument or loaded from `),FFe=n(oA,"CODE",{});var Zyt=s(FFe);g2r=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),h2r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(oA,"CODE",{});var e8t=s(TFe);p2r=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),_2r=r(oA,":"),oA.forEach(t),u2r=i(ya),MFe=n(ya,"UL",{});var o8t=s(MFe);a7=n(o8t,"LI",{});var aqe=s(a7);EFe=n(aqe,"STRONG",{});var r8t=s(EFe);b2r=r(r8t,"detr"),r8t.forEach(t),v2r=r(aqe," \u2014 "),rU=n(aqe,"A",{href:!0});var t8t=s(rU);F2r=r(t8t,"DetrForSegmentation"),t8t.forEach(t),T2r=r(aqe," (DETR model)"),aqe.forEach(t),o8t.forEach(t),M2r=i(ya),n7=n(ya,"P",{});var nqe=s(n7);E2r=r(nqe,"The model is set in evaluation mode by default using "),CFe=n(nqe,"CODE",{});var a8t=s(CFe);C2r=r(a8t,"model.eval()"),a8t.forEach(t),w2r=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=n(nqe,"CODE",{});var n8t=s(wFe);A2r=r(n8t,"model.train()"),n8t.forEach(t),nqe.forEach(t),L2r=i(ya),T(s7.$$.fragment,ya),ya.forEach(t),wl.forEach(t),fze=i(f),Zd=n(f,"H2",{class:!0});var vWe=s(Zd);l7=n(vWe,"A",{id:!0,class:!0,href:!0});var s8t=s(l7);AFe=n(s8t,"SPAN",{});var l8t=s(AFe);T(q8.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),y2r=i(vWe),LFe=n(vWe,"SPAN",{});var i8t=s(LFe);x2r=r(i8t,"AutoModelForSemanticSegmentation"),i8t.forEach(t),vWe.forEach(t),mze=i(f),Ko=n(f,"DIV",{class:!0});var Al=s(Ko);T(j8.$$.fragment,Al),$2r=i(Al),ec=n(Al,"P",{});var Ate=s(ec);k2r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tU=n(Ate,"A",{href:!0});var d8t=s(tU);S2r=r(d8t,"from_pretrained()"),d8t.forEach(t),R2r=r(Ate," class method or the "),aU=n(Ate,"A",{href:!0});var c8t=s(aU);P2r=r(c8t,"from_config()"),c8t.forEach(t),B2r=r(Ate,` class
method.`),Ate.forEach(t),I2r=i(Al),D8=n(Al,"P",{});var FWe=s(D8);N2r=r(FWe,"This class cannot be instantiated directly using "),yFe=n(FWe,"CODE",{});var f8t=s(yFe);q2r=r(f8t,"__init__()"),f8t.forEach(t),j2r=r(FWe," (throws an error)."),FWe.forEach(t),D2r=i(Al),$t=n(Al,"DIV",{class:!0});var rA=s($t);T(G8.$$.fragment,rA),G2r=i(rA),xFe=n(rA,"P",{});var m8t=s(xFe);O2r=r(m8t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),m8t.forEach(t),V2r=i(rA),oc=n(rA,"P",{});var Lte=s(oc);X2r=r(Lte,`Note:
Loading a model from its configuration file does `),$Fe=n(Lte,"STRONG",{});var g8t=s($Fe);z2r=r(g8t,"not"),g8t.forEach(t),Q2r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(Lte,"A",{href:!0});var h8t=s(nU);W2r=r(h8t,"from_pretrained()"),h8t.forEach(t),H2r=r(Lte," to load the model weights."),Lte.forEach(t),U2r=i(rA),T(i7.$$.fragment,rA),rA.forEach(t),J2r=i(Al),vo=n(Al,"DIV",{class:!0});var xa=s(vo);T(O8.$$.fragment,xa),Y2r=i(xa),kFe=n(xa,"P",{});var p8t=s(kFe);K2r=r(p8t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),p8t.forEach(t),Z2r=i(xa),nn=n(xa,"P",{});var tA=s(nn);e4r=r(tA,"The model class to instantiate is selected based on the "),SFe=n(tA,"CODE",{});var _8t=s(SFe);o4r=r(_8t,"model_type"),_8t.forEach(t),r4r=r(tA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(tA,"CODE",{});var u8t=s(RFe);t4r=r(u8t,"pretrained_model_name_or_path"),u8t.forEach(t),a4r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(tA,"CODE",{});var b8t=s(PFe);n4r=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),s4r=r(tA,":"),tA.forEach(t),l4r=i(xa),tt=n(xa,"UL",{});var Ll=s(tt);d7=n(Ll,"LI",{});var sqe=s(d7);BFe=n(sqe,"STRONG",{});var v8t=s(BFe);i4r=r(v8t,"beit"),v8t.forEach(t),d4r=r(sqe," \u2014 "),sU=n(sqe,"A",{href:!0});var F8t=s(sU);c4r=r(F8t,"BeitForSemanticSegmentation"),F8t.forEach(t),f4r=r(sqe," (BEiT model)"),sqe.forEach(t),m4r=i(Ll),c7=n(Ll,"LI",{});var lqe=s(c7);IFe=n(lqe,"STRONG",{});var T8t=s(IFe);g4r=r(T8t,"data2vec-vision"),T8t.forEach(t),h4r=r(lqe," \u2014 "),lU=n(lqe,"A",{href:!0});var M8t=s(lU);p4r=r(M8t,"Data2VecVisionForSemanticSegmentation"),M8t.forEach(t),_4r=r(lqe," (Data2VecVision model)"),lqe.forEach(t),u4r=i(Ll),f7=n(Ll,"LI",{});var iqe=s(f7);NFe=n(iqe,"STRONG",{});var E8t=s(NFe);b4r=r(E8t,"dpt"),E8t.forEach(t),v4r=r(iqe," \u2014 "),iU=n(iqe,"A",{href:!0});var C8t=s(iU);F4r=r(C8t,"DPTForSemanticSegmentation"),C8t.forEach(t),T4r=r(iqe," (DPT model)"),iqe.forEach(t),M4r=i(Ll),m7=n(Ll,"LI",{});var dqe=s(m7);qFe=n(dqe,"STRONG",{});var w8t=s(qFe);E4r=r(w8t,"mobilevit"),w8t.forEach(t),C4r=r(dqe," \u2014 "),dU=n(dqe,"A",{href:!0});var A8t=s(dU);w4r=r(A8t,"MobileViTForSemanticSegmentation"),A8t.forEach(t),A4r=r(dqe," (MobileViT model)"),dqe.forEach(t),L4r=i(Ll),g7=n(Ll,"LI",{});var cqe=s(g7);jFe=n(cqe,"STRONG",{});var L8t=s(jFe);y4r=r(L8t,"segformer"),L8t.forEach(t),x4r=r(cqe," \u2014 "),cU=n(cqe,"A",{href:!0});var y8t=s(cU);$4r=r(y8t,"SegformerForSemanticSegmentation"),y8t.forEach(t),k4r=r(cqe," (SegFormer model)"),cqe.forEach(t),Ll.forEach(t),S4r=i(xa),h7=n(xa,"P",{});var fqe=s(h7);R4r=r(fqe,"The model is set in evaluation mode by default using "),DFe=n(fqe,"CODE",{});var x8t=s(DFe);P4r=r(x8t,"model.eval()"),x8t.forEach(t),B4r=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=n(fqe,"CODE",{});var $8t=s(GFe);I4r=r($8t,"model.train()"),$8t.forEach(t),fqe.forEach(t),N4r=i(xa),T(p7.$$.fragment,xa),xa.forEach(t),Al.forEach(t),gze=i(f),rc=n(f,"H2",{class:!0});var TWe=s(rc);_7=n(TWe,"A",{id:!0,class:!0,href:!0});var k8t=s(_7);OFe=n(k8t,"SPAN",{});var S8t=s(OFe);T(V8.$$.fragment,S8t),S8t.forEach(t),k8t.forEach(t),q4r=i(TWe),VFe=n(TWe,"SPAN",{});var R8t=s(VFe);j4r=r(R8t,"AutoModelForInstanceSegmentation"),R8t.forEach(t),TWe.forEach(t),hze=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(X8.$$.fragment,yl),D4r=i(yl),tc=n(yl,"P",{});var yte=s(tc);G4r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fU=n(yte,"A",{href:!0});var P8t=s(fU);O4r=r(P8t,"from_pretrained()"),P8t.forEach(t),V4r=r(yte," class method or the "),mU=n(yte,"A",{href:!0});var B8t=s(mU);X4r=r(B8t,"from_config()"),B8t.forEach(t),z4r=r(yte,` class
method.`),yte.forEach(t),Q4r=i(yl),z8=n(yl,"P",{});var MWe=s(z8);W4r=r(MWe,"This class cannot be instantiated directly using "),XFe=n(MWe,"CODE",{});var I8t=s(XFe);H4r=r(I8t,"__init__()"),I8t.forEach(t),U4r=r(MWe," (throws an error)."),MWe.forEach(t),J4r=i(yl),kt=n(yl,"DIV",{class:!0});var aA=s(kt);T(Q8.$$.fragment,aA),Y4r=i(aA),zFe=n(aA,"P",{});var N8t=s(zFe);K4r=r(N8t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),N8t.forEach(t),Z4r=i(aA),ac=n(aA,"P",{});var xte=s(ac);ebr=r(xte,`Note:
Loading a model from its configuration file does `),QFe=n(xte,"STRONG",{});var q8t=s(QFe);obr=r(q8t,"not"),q8t.forEach(t),rbr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(xte,"A",{href:!0});var j8t=s(gU);tbr=r(j8t,"from_pretrained()"),j8t.forEach(t),abr=r(xte," to load the model weights."),xte.forEach(t),nbr=i(aA),T(u7.$$.fragment,aA),aA.forEach(t),sbr=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(W8.$$.fragment,$a),lbr=i($a),WFe=n($a,"P",{});var D8t=s(WFe);ibr=r(D8t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),D8t.forEach(t),dbr=i($a),sn=n($a,"P",{});var nA=s(sn);cbr=r(nA,"The model class to instantiate is selected based on the "),HFe=n(nA,"CODE",{});var G8t=s(HFe);fbr=r(G8t,"model_type"),G8t.forEach(t),mbr=r(nA,` property of the config object (either
passed as an argument or loaded from `),UFe=n(nA,"CODE",{});var O8t=s(UFe);gbr=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),hbr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(nA,"CODE",{});var V8t=s(JFe);pbr=r(V8t,"pretrained_model_name_or_path"),V8t.forEach(t),_br=r(nA,":"),nA.forEach(t),ubr=i($a),YFe=n($a,"UL",{});var X8t=s(YFe);b7=n(X8t,"LI",{});var mqe=s(b7);KFe=n(mqe,"STRONG",{});var z8t=s(KFe);bbr=r(z8t,"maskformer"),z8t.forEach(t),vbr=r(mqe," \u2014 "),hU=n(mqe,"A",{href:!0});var Q8t=s(hU);Fbr=r(Q8t,"MaskFormerForInstanceSegmentation"),Q8t.forEach(t),Tbr=r(mqe," (MaskFormer model)"),mqe.forEach(t),X8t.forEach(t),Mbr=i($a),v7=n($a,"P",{});var gqe=s(v7);Ebr=r(gqe,"The model is set in evaluation mode by default using "),ZFe=n(gqe,"CODE",{});var W8t=s(ZFe);Cbr=r(W8t,"model.eval()"),W8t.forEach(t),wbr=r(gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e6e=n(gqe,"CODE",{});var H8t=s(e6e);Abr=r(H8t,"model.train()"),H8t.forEach(t),gqe.forEach(t),Lbr=i($a),T(F7.$$.fragment,$a),$a.forEach(t),yl.forEach(t),pze=i(f),nc=n(f,"H2",{class:!0});var EWe=s(nc);T7=n(EWe,"A",{id:!0,class:!0,href:!0});var U8t=s(T7);o6e=n(U8t,"SPAN",{});var J8t=s(o6e);T(H8.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),ybr=i(EWe),r6e=n(EWe,"SPAN",{});var Y8t=s(r6e);xbr=r(Y8t,"TFAutoModel"),Y8t.forEach(t),EWe.forEach(t),_ze=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(U8.$$.fragment,xl),$br=i(xl),sc=n(xl,"P",{});var $te=s(sc);kbr=r($te,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pU=n($te,"A",{href:!0});var K8t=s(pU);Sbr=r(K8t,"from_pretrained()"),K8t.forEach(t),Rbr=r($te," class method or the "),_U=n($te,"A",{href:!0});var Z8t=s(_U);Pbr=r(Z8t,"from_config()"),Z8t.forEach(t),Bbr=r($te,` class
method.`),$te.forEach(t),Ibr=i(xl),J8=n(xl,"P",{});var CWe=s(J8);Nbr=r(CWe,"This class cannot be instantiated directly using "),t6e=n(CWe,"CODE",{});var ext=s(t6e);qbr=r(ext,"__init__()"),ext.forEach(t),jbr=r(CWe," (throws an error)."),CWe.forEach(t),Dbr=i(xl),St=n(xl,"DIV",{class:!0});var sA=s(St);T(Y8.$$.fragment,sA),Gbr=i(sA),a6e=n(sA,"P",{});var oxt=s(a6e);Obr=r(oxt,"Instantiates one of the base model classes of the library from a configuration."),oxt.forEach(t),Vbr=i(sA),lc=n(sA,"P",{});var kte=s(lc);Xbr=r(kte,`Note:
Loading a model from its configuration file does `),n6e=n(kte,"STRONG",{});var rxt=s(n6e);zbr=r(rxt,"not"),rxt.forEach(t),Qbr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(kte,"A",{href:!0});var txt=s(uU);Wbr=r(txt,"from_pretrained()"),txt.forEach(t),Hbr=r(kte," to load the model weights."),kte.forEach(t),Ubr=i(sA),T(M7.$$.fragment,sA),sA.forEach(t),Jbr=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(K8.$$.fragment,$l),Ybr=i($l),s6e=n($l,"P",{});var axt=s(s6e);Kbr=r(axt,"Instantiate one of the base model classes of the library from a pretrained model."),axt.forEach(t),Zbr=i($l),ln=n($l,"P",{});var lA=s(ln);evr=r(lA,"The model class to instantiate is selected based on the "),l6e=n(lA,"CODE",{});var nxt=s(l6e);ovr=r(nxt,"model_type"),nxt.forEach(t),rvr=r(lA,` property of the config object (either
passed as an argument or loaded from `),i6e=n(lA,"CODE",{});var sxt=s(i6e);tvr=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),avr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=n(lA,"CODE",{});var lxt=s(d6e);nvr=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),svr=r(lA,":"),lA.forEach(t),lvr=i($l),q=n($l,"UL",{});var D=s(q);E7=n(D,"LI",{});var hqe=s(E7);c6e=n(hqe,"STRONG",{});var ixt=s(c6e);ivr=r(ixt,"albert"),ixt.forEach(t),dvr=r(hqe," \u2014 "),bU=n(hqe,"A",{href:!0});var dxt=s(bU);cvr=r(dxt,"TFAlbertModel"),dxt.forEach(t),fvr=r(hqe," (ALBERT model)"),hqe.forEach(t),mvr=i(D),C7=n(D,"LI",{});var pqe=s(C7);f6e=n(pqe,"STRONG",{});var cxt=s(f6e);gvr=r(cxt,"bart"),cxt.forEach(t),hvr=r(pqe," \u2014 "),vU=n(pqe,"A",{href:!0});var fxt=s(vU);pvr=r(fxt,"TFBartModel"),fxt.forEach(t),_vr=r(pqe," (BART model)"),pqe.forEach(t),uvr=i(D),w7=n(D,"LI",{});var _qe=s(w7);m6e=n(_qe,"STRONG",{});var mxt=s(m6e);bvr=r(mxt,"bert"),mxt.forEach(t),vvr=r(_qe," \u2014 "),FU=n(_qe,"A",{href:!0});var gxt=s(FU);Fvr=r(gxt,"TFBertModel"),gxt.forEach(t),Tvr=r(_qe," (BERT model)"),_qe.forEach(t),Mvr=i(D),A7=n(D,"LI",{});var uqe=s(A7);g6e=n(uqe,"STRONG",{});var hxt=s(g6e);Evr=r(hxt,"blenderbot"),hxt.forEach(t),Cvr=r(uqe," \u2014 "),TU=n(uqe,"A",{href:!0});var pxt=s(TU);wvr=r(pxt,"TFBlenderbotModel"),pxt.forEach(t),Avr=r(uqe," (Blenderbot model)"),uqe.forEach(t),Lvr=i(D),L7=n(D,"LI",{});var bqe=s(L7);h6e=n(bqe,"STRONG",{});var _xt=s(h6e);yvr=r(_xt,"blenderbot-small"),_xt.forEach(t),xvr=r(bqe," \u2014 "),MU=n(bqe,"A",{href:!0});var uxt=s(MU);$vr=r(uxt,"TFBlenderbotSmallModel"),uxt.forEach(t),kvr=r(bqe," (BlenderbotSmall model)"),bqe.forEach(t),Svr=i(D),y7=n(D,"LI",{});var vqe=s(y7);p6e=n(vqe,"STRONG",{});var bxt=s(p6e);Rvr=r(bxt,"camembert"),bxt.forEach(t),Pvr=r(vqe," \u2014 "),EU=n(vqe,"A",{href:!0});var vxt=s(EU);Bvr=r(vxt,"TFCamembertModel"),vxt.forEach(t),Ivr=r(vqe," (CamemBERT model)"),vqe.forEach(t),Nvr=i(D),x7=n(D,"LI",{});var Fqe=s(x7);_6e=n(Fqe,"STRONG",{});var Fxt=s(_6e);qvr=r(Fxt,"clip"),Fxt.forEach(t),jvr=r(Fqe," \u2014 "),CU=n(Fqe,"A",{href:!0});var Txt=s(CU);Dvr=r(Txt,"TFCLIPModel"),Txt.forEach(t),Gvr=r(Fqe," (CLIP model)"),Fqe.forEach(t),Ovr=i(D),$7=n(D,"LI",{});var Tqe=s($7);u6e=n(Tqe,"STRONG",{});var Mxt=s(u6e);Vvr=r(Mxt,"convbert"),Mxt.forEach(t),Xvr=r(Tqe," \u2014 "),wU=n(Tqe,"A",{href:!0});var Ext=s(wU);zvr=r(Ext,"TFConvBertModel"),Ext.forEach(t),Qvr=r(Tqe," (ConvBERT model)"),Tqe.forEach(t),Wvr=i(D),k7=n(D,"LI",{});var Mqe=s(k7);b6e=n(Mqe,"STRONG",{});var Cxt=s(b6e);Hvr=r(Cxt,"convnext"),Cxt.forEach(t),Uvr=r(Mqe," \u2014 "),AU=n(Mqe,"A",{href:!0});var wxt=s(AU);Jvr=r(wxt,"TFConvNextModel"),wxt.forEach(t),Yvr=r(Mqe," (ConvNeXT model)"),Mqe.forEach(t),Kvr=i(D),S7=n(D,"LI",{});var Eqe=s(S7);v6e=n(Eqe,"STRONG",{});var Axt=s(v6e);Zvr=r(Axt,"ctrl"),Axt.forEach(t),eFr=r(Eqe," \u2014 "),LU=n(Eqe,"A",{href:!0});var Lxt=s(LU);oFr=r(Lxt,"TFCTRLModel"),Lxt.forEach(t),rFr=r(Eqe," (CTRL model)"),Eqe.forEach(t),tFr=i(D),R7=n(D,"LI",{});var Cqe=s(R7);F6e=n(Cqe,"STRONG",{});var yxt=s(F6e);aFr=r(yxt,"data2vec-vision"),yxt.forEach(t),nFr=r(Cqe," \u2014 "),yU=n(Cqe,"A",{href:!0});var xxt=s(yU);sFr=r(xxt,"TFData2VecVisionModel"),xxt.forEach(t),lFr=r(Cqe," (Data2VecVision model)"),Cqe.forEach(t),iFr=i(D),P7=n(D,"LI",{});var wqe=s(P7);T6e=n(wqe,"STRONG",{});var $xt=s(T6e);dFr=r($xt,"deberta"),$xt.forEach(t),cFr=r(wqe," \u2014 "),xU=n(wqe,"A",{href:!0});var kxt=s(xU);fFr=r(kxt,"TFDebertaModel"),kxt.forEach(t),mFr=r(wqe," (DeBERTa model)"),wqe.forEach(t),gFr=i(D),B7=n(D,"LI",{});var Aqe=s(B7);M6e=n(Aqe,"STRONG",{});var Sxt=s(M6e);hFr=r(Sxt,"deberta-v2"),Sxt.forEach(t),pFr=r(Aqe," \u2014 "),$U=n(Aqe,"A",{href:!0});var Rxt=s($U);_Fr=r(Rxt,"TFDebertaV2Model"),Rxt.forEach(t),uFr=r(Aqe," (DeBERTa-v2 model)"),Aqe.forEach(t),bFr=i(D),I7=n(D,"LI",{});var Lqe=s(I7);E6e=n(Lqe,"STRONG",{});var Pxt=s(E6e);vFr=r(Pxt,"distilbert"),Pxt.forEach(t),FFr=r(Lqe," \u2014 "),kU=n(Lqe,"A",{href:!0});var Bxt=s(kU);TFr=r(Bxt,"TFDistilBertModel"),Bxt.forEach(t),MFr=r(Lqe," (DistilBERT model)"),Lqe.forEach(t),EFr=i(D),N7=n(D,"LI",{});var yqe=s(N7);C6e=n(yqe,"STRONG",{});var Ixt=s(C6e);CFr=r(Ixt,"dpr"),Ixt.forEach(t),wFr=r(yqe," \u2014 "),SU=n(yqe,"A",{href:!0});var Nxt=s(SU);AFr=r(Nxt,"TFDPRQuestionEncoder"),Nxt.forEach(t),LFr=r(yqe," (DPR model)"),yqe.forEach(t),yFr=i(D),q7=n(D,"LI",{});var xqe=s(q7);w6e=n(xqe,"STRONG",{});var qxt=s(w6e);xFr=r(qxt,"electra"),qxt.forEach(t),$Fr=r(xqe," \u2014 "),RU=n(xqe,"A",{href:!0});var jxt=s(RU);kFr=r(jxt,"TFElectraModel"),jxt.forEach(t),SFr=r(xqe," (ELECTRA model)"),xqe.forEach(t),RFr=i(D),j7=n(D,"LI",{});var $qe=s(j7);A6e=n($qe,"STRONG",{});var Dxt=s(A6e);PFr=r(Dxt,"flaubert"),Dxt.forEach(t),BFr=r($qe," \u2014 "),PU=n($qe,"A",{href:!0});var Gxt=s(PU);IFr=r(Gxt,"TFFlaubertModel"),Gxt.forEach(t),NFr=r($qe," (FlauBERT model)"),$qe.forEach(t),qFr=i(D),Ys=n(D,"LI",{});var NS=s(Ys);L6e=n(NS,"STRONG",{});var Oxt=s(L6e);jFr=r(Oxt,"funnel"),Oxt.forEach(t),DFr=r(NS," \u2014 "),BU=n(NS,"A",{href:!0});var Vxt=s(BU);GFr=r(Vxt,"TFFunnelModel"),Vxt.forEach(t),OFr=r(NS," or "),IU=n(NS,"A",{href:!0});var Xxt=s(IU);VFr=r(Xxt,"TFFunnelBaseModel"),Xxt.forEach(t),XFr=r(NS," (Funnel Transformer model)"),NS.forEach(t),zFr=i(D),D7=n(D,"LI",{});var kqe=s(D7);y6e=n(kqe,"STRONG",{});var zxt=s(y6e);QFr=r(zxt,"gpt2"),zxt.forEach(t),WFr=r(kqe," \u2014 "),NU=n(kqe,"A",{href:!0});var Qxt=s(NU);HFr=r(Qxt,"TFGPT2Model"),Qxt.forEach(t),UFr=r(kqe," (OpenAI GPT-2 model)"),kqe.forEach(t),JFr=i(D),G7=n(D,"LI",{});var Sqe=s(G7);x6e=n(Sqe,"STRONG",{});var Wxt=s(x6e);YFr=r(Wxt,"gptj"),Wxt.forEach(t),KFr=r(Sqe," \u2014 "),qU=n(Sqe,"A",{href:!0});var Hxt=s(qU);ZFr=r(Hxt,"TFGPTJModel"),Hxt.forEach(t),e6r=r(Sqe," (GPT-J model)"),Sqe.forEach(t),o6r=i(D),O7=n(D,"LI",{});var Rqe=s(O7);$6e=n(Rqe,"STRONG",{});var Uxt=s($6e);r6r=r(Uxt,"hubert"),Uxt.forEach(t),t6r=r(Rqe," \u2014 "),jU=n(Rqe,"A",{href:!0});var Jxt=s(jU);a6r=r(Jxt,"TFHubertModel"),Jxt.forEach(t),n6r=r(Rqe," (Hubert model)"),Rqe.forEach(t),s6r=i(D),V7=n(D,"LI",{});var Pqe=s(V7);k6e=n(Pqe,"STRONG",{});var Yxt=s(k6e);l6r=r(Yxt,"layoutlm"),Yxt.forEach(t),i6r=r(Pqe," \u2014 "),DU=n(Pqe,"A",{href:!0});var Kxt=s(DU);d6r=r(Kxt,"TFLayoutLMModel"),Kxt.forEach(t),c6r=r(Pqe," (LayoutLM model)"),Pqe.forEach(t),f6r=i(D),X7=n(D,"LI",{});var Bqe=s(X7);S6e=n(Bqe,"STRONG",{});var Zxt=s(S6e);m6r=r(Zxt,"led"),Zxt.forEach(t),g6r=r(Bqe," \u2014 "),GU=n(Bqe,"A",{href:!0});var e$t=s(GU);h6r=r(e$t,"TFLEDModel"),e$t.forEach(t),p6r=r(Bqe," (LED model)"),Bqe.forEach(t),_6r=i(D),z7=n(D,"LI",{});var Iqe=s(z7);R6e=n(Iqe,"STRONG",{});var o$t=s(R6e);u6r=r(o$t,"longformer"),o$t.forEach(t),b6r=r(Iqe," \u2014 "),OU=n(Iqe,"A",{href:!0});var r$t=s(OU);v6r=r(r$t,"TFLongformerModel"),r$t.forEach(t),F6r=r(Iqe," (Longformer model)"),Iqe.forEach(t),T6r=i(D),Q7=n(D,"LI",{});var Nqe=s(Q7);P6e=n(Nqe,"STRONG",{});var t$t=s(P6e);M6r=r(t$t,"lxmert"),t$t.forEach(t),E6r=r(Nqe," \u2014 "),VU=n(Nqe,"A",{href:!0});var a$t=s(VU);C6r=r(a$t,"TFLxmertModel"),a$t.forEach(t),w6r=r(Nqe," (LXMERT model)"),Nqe.forEach(t),A6r=i(D),W7=n(D,"LI",{});var qqe=s(W7);B6e=n(qqe,"STRONG",{});var n$t=s(B6e);L6r=r(n$t,"marian"),n$t.forEach(t),y6r=r(qqe," \u2014 "),XU=n(qqe,"A",{href:!0});var s$t=s(XU);x6r=r(s$t,"TFMarianModel"),s$t.forEach(t),$6r=r(qqe," (Marian model)"),qqe.forEach(t),k6r=i(D),H7=n(D,"LI",{});var jqe=s(H7);I6e=n(jqe,"STRONG",{});var l$t=s(I6e);S6r=r(l$t,"mbart"),l$t.forEach(t),R6r=r(jqe," \u2014 "),zU=n(jqe,"A",{href:!0});var i$t=s(zU);P6r=r(i$t,"TFMBartModel"),i$t.forEach(t),B6r=r(jqe," (mBART model)"),jqe.forEach(t),I6r=i(D),U7=n(D,"LI",{});var Dqe=s(U7);N6e=n(Dqe,"STRONG",{});var d$t=s(N6e);N6r=r(d$t,"mobilebert"),d$t.forEach(t),q6r=r(Dqe," \u2014 "),QU=n(Dqe,"A",{href:!0});var c$t=s(QU);j6r=r(c$t,"TFMobileBertModel"),c$t.forEach(t),D6r=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),G6r=i(D),J7=n(D,"LI",{});var Gqe=s(J7);q6e=n(Gqe,"STRONG",{});var f$t=s(q6e);O6r=r(f$t,"mpnet"),f$t.forEach(t),V6r=r(Gqe," \u2014 "),WU=n(Gqe,"A",{href:!0});var m$t=s(WU);X6r=r(m$t,"TFMPNetModel"),m$t.forEach(t),z6r=r(Gqe," (MPNet model)"),Gqe.forEach(t),Q6r=i(D),Y7=n(D,"LI",{});var Oqe=s(Y7);j6e=n(Oqe,"STRONG",{});var g$t=s(j6e);W6r=r(g$t,"mt5"),g$t.forEach(t),H6r=r(Oqe," \u2014 "),HU=n(Oqe,"A",{href:!0});var h$t=s(HU);U6r=r(h$t,"TFMT5Model"),h$t.forEach(t),J6r=r(Oqe," (MT5 model)"),Oqe.forEach(t),Y6r=i(D),K7=n(D,"LI",{});var Vqe=s(K7);D6e=n(Vqe,"STRONG",{});var p$t=s(D6e);K6r=r(p$t,"openai-gpt"),p$t.forEach(t),Z6r=r(Vqe," \u2014 "),UU=n(Vqe,"A",{href:!0});var _$t=s(UU);eTr=r(_$t,"TFOpenAIGPTModel"),_$t.forEach(t),oTr=r(Vqe," (OpenAI GPT model)"),Vqe.forEach(t),rTr=i(D),Z7=n(D,"LI",{});var Xqe=s(Z7);G6e=n(Xqe,"STRONG",{});var u$t=s(G6e);tTr=r(u$t,"opt"),u$t.forEach(t),aTr=r(Xqe," \u2014 "),JU=n(Xqe,"A",{href:!0});var b$t=s(JU);nTr=r(b$t,"TFOPTModel"),b$t.forEach(t),sTr=r(Xqe," (OPT model)"),Xqe.forEach(t),lTr=i(D),e9=n(D,"LI",{});var zqe=s(e9);O6e=n(zqe,"STRONG",{});var v$t=s(O6e);iTr=r(v$t,"pegasus"),v$t.forEach(t),dTr=r(zqe," \u2014 "),YU=n(zqe,"A",{href:!0});var F$t=s(YU);cTr=r(F$t,"TFPegasusModel"),F$t.forEach(t),fTr=r(zqe," (Pegasus model)"),zqe.forEach(t),mTr=i(D),o9=n(D,"LI",{});var Qqe=s(o9);V6e=n(Qqe,"STRONG",{});var T$t=s(V6e);gTr=r(T$t,"regnet"),T$t.forEach(t),hTr=r(Qqe," \u2014 "),KU=n(Qqe,"A",{href:!0});var M$t=s(KU);pTr=r(M$t,"TFRegNetModel"),M$t.forEach(t),_Tr=r(Qqe," (RegNet model)"),Qqe.forEach(t),uTr=i(D),r9=n(D,"LI",{});var Wqe=s(r9);X6e=n(Wqe,"STRONG",{});var E$t=s(X6e);bTr=r(E$t,"rembert"),E$t.forEach(t),vTr=r(Wqe," \u2014 "),ZU=n(Wqe,"A",{href:!0});var C$t=s(ZU);FTr=r(C$t,"TFRemBertModel"),C$t.forEach(t),TTr=r(Wqe," (RemBERT model)"),Wqe.forEach(t),MTr=i(D),t9=n(D,"LI",{});var Hqe=s(t9);z6e=n(Hqe,"STRONG",{});var w$t=s(z6e);ETr=r(w$t,"roberta"),w$t.forEach(t),CTr=r(Hqe," \u2014 "),eJ=n(Hqe,"A",{href:!0});var A$t=s(eJ);wTr=r(A$t,"TFRobertaModel"),A$t.forEach(t),ATr=r(Hqe," (RoBERTa model)"),Hqe.forEach(t),LTr=i(D),a9=n(D,"LI",{});var Uqe=s(a9);Q6e=n(Uqe,"STRONG",{});var L$t=s(Q6e);yTr=r(L$t,"roformer"),L$t.forEach(t),xTr=r(Uqe," \u2014 "),oJ=n(Uqe,"A",{href:!0});var y$t=s(oJ);$Tr=r(y$t,"TFRoFormerModel"),y$t.forEach(t),kTr=r(Uqe," (RoFormer model)"),Uqe.forEach(t),STr=i(D),n9=n(D,"LI",{});var Jqe=s(n9);W6e=n(Jqe,"STRONG",{});var x$t=s(W6e);RTr=r(x$t,"speech_to_text"),x$t.forEach(t),PTr=r(Jqe," \u2014 "),rJ=n(Jqe,"A",{href:!0});var $$t=s(rJ);BTr=r($$t,"TFSpeech2TextModel"),$$t.forEach(t),ITr=r(Jqe," (Speech2Text model)"),Jqe.forEach(t),NTr=i(D),s9=n(D,"LI",{});var Yqe=s(s9);H6e=n(Yqe,"STRONG",{});var k$t=s(H6e);qTr=r(k$t,"swin"),k$t.forEach(t),jTr=r(Yqe," \u2014 "),tJ=n(Yqe,"A",{href:!0});var S$t=s(tJ);DTr=r(S$t,"TFSwinModel"),S$t.forEach(t),GTr=r(Yqe," (Swin Transformer model)"),Yqe.forEach(t),OTr=i(D),l9=n(D,"LI",{});var Kqe=s(l9);U6e=n(Kqe,"STRONG",{});var R$t=s(U6e);VTr=r(R$t,"swinv2"),R$t.forEach(t),XTr=r(Kqe," \u2014 "),aJ=n(Kqe,"A",{href:!0});var P$t=s(aJ);zTr=r(P$t,"TFSwinv2Model"),P$t.forEach(t),QTr=r(Kqe," (Swin Transformer V2 model)"),Kqe.forEach(t),WTr=i(D),i9=n(D,"LI",{});var Zqe=s(i9);J6e=n(Zqe,"STRONG",{});var B$t=s(J6e);HTr=r(B$t,"t5"),B$t.forEach(t),UTr=r(Zqe," \u2014 "),nJ=n(Zqe,"A",{href:!0});var I$t=s(nJ);JTr=r(I$t,"TFT5Model"),I$t.forEach(t),YTr=r(Zqe," (T5 model)"),Zqe.forEach(t),KTr=i(D),d9=n(D,"LI",{});var eje=s(d9);Y6e=n(eje,"STRONG",{});var N$t=s(Y6e);ZTr=r(N$t,"tapas"),N$t.forEach(t),e7r=r(eje," \u2014 "),sJ=n(eje,"A",{href:!0});var q$t=s(sJ);o7r=r(q$t,"TFTapasModel"),q$t.forEach(t),r7r=r(eje," (TAPAS model)"),eje.forEach(t),t7r=i(D),c9=n(D,"LI",{});var oje=s(c9);K6e=n(oje,"STRONG",{});var j$t=s(K6e);a7r=r(j$t,"transfo-xl"),j$t.forEach(t),n7r=r(oje," \u2014 "),lJ=n(oje,"A",{href:!0});var D$t=s(lJ);s7r=r(D$t,"TFTransfoXLModel"),D$t.forEach(t),l7r=r(oje," (Transformer-XL model)"),oje.forEach(t),i7r=i(D),f9=n(D,"LI",{});var rje=s(f9);Z6e=n(rje,"STRONG",{});var G$t=s(Z6e);d7r=r(G$t,"vit"),G$t.forEach(t),c7r=r(rje," \u2014 "),iJ=n(rje,"A",{href:!0});var O$t=s(iJ);f7r=r(O$t,"TFViTModel"),O$t.forEach(t),m7r=r(rje," (ViT model)"),rje.forEach(t),g7r=i(D),m9=n(D,"LI",{});var tje=s(m9);eTe=n(tje,"STRONG",{});var V$t=s(eTe);h7r=r(V$t,"vit_mae"),V$t.forEach(t),p7r=r(tje," \u2014 "),dJ=n(tje,"A",{href:!0});var X$t=s(dJ);_7r=r(X$t,"TFViTMAEModel"),X$t.forEach(t),u7r=r(tje," (ViTMAE model)"),tje.forEach(t),b7r=i(D),g9=n(D,"LI",{});var aje=s(g9);oTe=n(aje,"STRONG",{});var z$t=s(oTe);v7r=r(z$t,"wav2vec2"),z$t.forEach(t),F7r=r(aje," \u2014 "),cJ=n(aje,"A",{href:!0});var Q$t=s(cJ);T7r=r(Q$t,"TFWav2Vec2Model"),Q$t.forEach(t),M7r=r(aje," (Wav2Vec2 model)"),aje.forEach(t),E7r=i(D),h9=n(D,"LI",{});var nje=s(h9);rTe=n(nje,"STRONG",{});var W$t=s(rTe);C7r=r(W$t,"xlm"),W$t.forEach(t),w7r=r(nje," \u2014 "),fJ=n(nje,"A",{href:!0});var H$t=s(fJ);A7r=r(H$t,"TFXLMModel"),H$t.forEach(t),L7r=r(nje," (XLM model)"),nje.forEach(t),y7r=i(D),p9=n(D,"LI",{});var sje=s(p9);tTe=n(sje,"STRONG",{});var U$t=s(tTe);x7r=r(U$t,"xlm-roberta"),U$t.forEach(t),$7r=r(sje," \u2014 "),mJ=n(sje,"A",{href:!0});var J$t=s(mJ);k7r=r(J$t,"TFXLMRobertaModel"),J$t.forEach(t),S7r=r(sje," (XLM-RoBERTa model)"),sje.forEach(t),R7r=i(D),_9=n(D,"LI",{});var lje=s(_9);aTe=n(lje,"STRONG",{});var Y$t=s(aTe);P7r=r(Y$t,"xlnet"),Y$t.forEach(t),B7r=r(lje," \u2014 "),gJ=n(lje,"A",{href:!0});var K$t=s(gJ);I7r=r(K$t,"TFXLNetModel"),K$t.forEach(t),N7r=r(lje," (XLNet model)"),lje.forEach(t),D.forEach(t),q7r=i($l),T(u9.$$.fragment,$l),$l.forEach(t),xl.forEach(t),uze=i(f),ic=n(f,"H2",{class:!0});var wWe=s(ic);b9=n(wWe,"A",{id:!0,class:!0,href:!0});var Z$t=s(b9);nTe=n(Z$t,"SPAN",{});var ekt=s(nTe);T(Z8.$$.fragment,ekt),ekt.forEach(t),Z$t.forEach(t),j7r=i(wWe),sTe=n(wWe,"SPAN",{});var okt=s(sTe);D7r=r(okt,"TFAutoModelForPreTraining"),okt.forEach(t),wWe.forEach(t),bze=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(ex.$$.fragment,kl),G7r=i(kl),dc=n(kl,"P",{});var Ste=s(dc);O7r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hJ=n(Ste,"A",{href:!0});var rkt=s(hJ);V7r=r(rkt,"from_pretrained()"),rkt.forEach(t),X7r=r(Ste," class method or the "),pJ=n(Ste,"A",{href:!0});var tkt=s(pJ);z7r=r(tkt,"from_config()"),tkt.forEach(t),Q7r=r(Ste,` class
method.`),Ste.forEach(t),W7r=i(kl),ox=n(kl,"P",{});var AWe=s(ox);H7r=r(AWe,"This class cannot be instantiated directly using "),lTe=n(AWe,"CODE",{});var akt=s(lTe);U7r=r(akt,"__init__()"),akt.forEach(t),J7r=r(AWe," (throws an error)."),AWe.forEach(t),Y7r=i(kl),Rt=n(kl,"DIV",{class:!0});var iA=s(Rt);T(rx.$$.fragment,iA),K7r=i(iA),iTe=n(iA,"P",{});var nkt=s(iTe);Z7r=r(nkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nkt.forEach(t),e9r=i(iA),cc=n(iA,"P",{});var Rte=s(cc);o9r=r(Rte,`Note:
Loading a model from its configuration file does `),dTe=n(Rte,"STRONG",{});var skt=s(dTe);r9r=r(skt,"not"),skt.forEach(t),t9r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Rte,"A",{href:!0});var lkt=s(_J);a9r=r(lkt,"from_pretrained()"),lkt.forEach(t),n9r=r(Rte," to load the model weights."),Rte.forEach(t),s9r=i(iA),T(v9.$$.fragment,iA),iA.forEach(t),l9r=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(tx.$$.fragment,Sl),i9r=i(Sl),cTe=n(Sl,"P",{});var ikt=s(cTe);d9r=r(ikt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ikt.forEach(t),c9r=i(Sl),dn=n(Sl,"P",{});var dA=s(dn);f9r=r(dA,"The model class to instantiate is selected based on the "),fTe=n(dA,"CODE",{});var dkt=s(fTe);m9r=r(dkt,"model_type"),dkt.forEach(t),g9r=r(dA,` property of the config object (either
passed as an argument or loaded from `),mTe=n(dA,"CODE",{});var ckt=s(mTe);h9r=r(ckt,"pretrained_model_name_or_path"),ckt.forEach(t),p9r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(dA,"CODE",{});var fkt=s(gTe);_9r=r(fkt,"pretrained_model_name_or_path"),fkt.forEach(t),u9r=r(dA,":"),dA.forEach(t),b9r=i(Sl),se=n(Sl,"UL",{});var le=s(se);F9=n(le,"LI",{});var ije=s(F9);hTe=n(ije,"STRONG",{});var mkt=s(hTe);v9r=r(mkt,"albert"),mkt.forEach(t),F9r=r(ije," \u2014 "),uJ=n(ije,"A",{href:!0});var gkt=s(uJ);T9r=r(gkt,"TFAlbertForPreTraining"),gkt.forEach(t),M9r=r(ije," (ALBERT model)"),ije.forEach(t),E9r=i(le),T9=n(le,"LI",{});var dje=s(T9);pTe=n(dje,"STRONG",{});var hkt=s(pTe);C9r=r(hkt,"bart"),hkt.forEach(t),w9r=r(dje," \u2014 "),bJ=n(dje,"A",{href:!0});var pkt=s(bJ);A9r=r(pkt,"TFBartForConditionalGeneration"),pkt.forEach(t),L9r=r(dje," (BART model)"),dje.forEach(t),y9r=i(le),M9=n(le,"LI",{});var cje=s(M9);_Te=n(cje,"STRONG",{});var _kt=s(_Te);x9r=r(_kt,"bert"),_kt.forEach(t),$9r=r(cje," \u2014 "),vJ=n(cje,"A",{href:!0});var ukt=s(vJ);k9r=r(ukt,"TFBertForPreTraining"),ukt.forEach(t),S9r=r(cje," (BERT model)"),cje.forEach(t),R9r=i(le),E9=n(le,"LI",{});var fje=s(E9);uTe=n(fje,"STRONG",{});var bkt=s(uTe);P9r=r(bkt,"camembert"),bkt.forEach(t),B9r=r(fje," \u2014 "),FJ=n(fje,"A",{href:!0});var vkt=s(FJ);I9r=r(vkt,"TFCamembertForMaskedLM"),vkt.forEach(t),N9r=r(fje," (CamemBERT model)"),fje.forEach(t),q9r=i(le),C9=n(le,"LI",{});var mje=s(C9);bTe=n(mje,"STRONG",{});var Fkt=s(bTe);j9r=r(Fkt,"ctrl"),Fkt.forEach(t),D9r=r(mje," \u2014 "),TJ=n(mje,"A",{href:!0});var Tkt=s(TJ);G9r=r(Tkt,"TFCTRLLMHeadModel"),Tkt.forEach(t),O9r=r(mje," (CTRL model)"),mje.forEach(t),V9r=i(le),w9=n(le,"LI",{});var gje=s(w9);vTe=n(gje,"STRONG",{});var Mkt=s(vTe);X9r=r(Mkt,"distilbert"),Mkt.forEach(t),z9r=r(gje," \u2014 "),MJ=n(gje,"A",{href:!0});var Ekt=s(MJ);Q9r=r(Ekt,"TFDistilBertForMaskedLM"),Ekt.forEach(t),W9r=r(gje," (DistilBERT model)"),gje.forEach(t),H9r=i(le),A9=n(le,"LI",{});var hje=s(A9);FTe=n(hje,"STRONG",{});var Ckt=s(FTe);U9r=r(Ckt,"electra"),Ckt.forEach(t),J9r=r(hje," \u2014 "),EJ=n(hje,"A",{href:!0});var wkt=s(EJ);Y9r=r(wkt,"TFElectraForPreTraining"),wkt.forEach(t),K9r=r(hje," (ELECTRA model)"),hje.forEach(t),Z9r=i(le),L9=n(le,"LI",{});var pje=s(L9);TTe=n(pje,"STRONG",{});var Akt=s(TTe);eMr=r(Akt,"flaubert"),Akt.forEach(t),oMr=r(pje," \u2014 "),CJ=n(pje,"A",{href:!0});var Lkt=s(CJ);rMr=r(Lkt,"TFFlaubertWithLMHeadModel"),Lkt.forEach(t),tMr=r(pje," (FlauBERT model)"),pje.forEach(t),aMr=i(le),y9=n(le,"LI",{});var _je=s(y9);MTe=n(_je,"STRONG",{});var ykt=s(MTe);nMr=r(ykt,"funnel"),ykt.forEach(t),sMr=r(_je," \u2014 "),wJ=n(_je,"A",{href:!0});var xkt=s(wJ);lMr=r(xkt,"TFFunnelForPreTraining"),xkt.forEach(t),iMr=r(_je," (Funnel Transformer model)"),_je.forEach(t),dMr=i(le),x9=n(le,"LI",{});var uje=s(x9);ETe=n(uje,"STRONG",{});var $kt=s(ETe);cMr=r($kt,"gpt2"),$kt.forEach(t),fMr=r(uje," \u2014 "),AJ=n(uje,"A",{href:!0});var kkt=s(AJ);mMr=r(kkt,"TFGPT2LMHeadModel"),kkt.forEach(t),gMr=r(uje," (OpenAI GPT-2 model)"),uje.forEach(t),hMr=i(le),$9=n(le,"LI",{});var bje=s($9);CTe=n(bje,"STRONG",{});var Skt=s(CTe);pMr=r(Skt,"layoutlm"),Skt.forEach(t),_Mr=r(bje," \u2014 "),LJ=n(bje,"A",{href:!0});var Rkt=s(LJ);uMr=r(Rkt,"TFLayoutLMForMaskedLM"),Rkt.forEach(t),bMr=r(bje," (LayoutLM model)"),bje.forEach(t),vMr=i(le),k9=n(le,"LI",{});var vje=s(k9);wTe=n(vje,"STRONG",{});var Pkt=s(wTe);FMr=r(Pkt,"lxmert"),Pkt.forEach(t),TMr=r(vje," \u2014 "),yJ=n(vje,"A",{href:!0});var Bkt=s(yJ);MMr=r(Bkt,"TFLxmertForPreTraining"),Bkt.forEach(t),EMr=r(vje," (LXMERT model)"),vje.forEach(t),CMr=i(le),S9=n(le,"LI",{});var Fje=s(S9);ATe=n(Fje,"STRONG",{});var Ikt=s(ATe);wMr=r(Ikt,"mobilebert"),Ikt.forEach(t),AMr=r(Fje," \u2014 "),xJ=n(Fje,"A",{href:!0});var Nkt=s(xJ);LMr=r(Nkt,"TFMobileBertForPreTraining"),Nkt.forEach(t),yMr=r(Fje," (MobileBERT model)"),Fje.forEach(t),xMr=i(le),R9=n(le,"LI",{});var Tje=s(R9);LTe=n(Tje,"STRONG",{});var qkt=s(LTe);$Mr=r(qkt,"mpnet"),qkt.forEach(t),kMr=r(Tje," \u2014 "),$J=n(Tje,"A",{href:!0});var jkt=s($J);SMr=r(jkt,"TFMPNetForMaskedLM"),jkt.forEach(t),RMr=r(Tje," (MPNet model)"),Tje.forEach(t),PMr=i(le),P9=n(le,"LI",{});var Mje=s(P9);yTe=n(Mje,"STRONG",{});var Dkt=s(yTe);BMr=r(Dkt,"openai-gpt"),Dkt.forEach(t),IMr=r(Mje," \u2014 "),kJ=n(Mje,"A",{href:!0});var Gkt=s(kJ);NMr=r(Gkt,"TFOpenAIGPTLMHeadModel"),Gkt.forEach(t),qMr=r(Mje," (OpenAI GPT model)"),Mje.forEach(t),jMr=i(le),B9=n(le,"LI",{});var Eje=s(B9);xTe=n(Eje,"STRONG",{});var Okt=s(xTe);DMr=r(Okt,"roberta"),Okt.forEach(t),GMr=r(Eje," \u2014 "),SJ=n(Eje,"A",{href:!0});var Vkt=s(SJ);OMr=r(Vkt,"TFRobertaForMaskedLM"),Vkt.forEach(t),VMr=r(Eje," (RoBERTa model)"),Eje.forEach(t),XMr=i(le),I9=n(le,"LI",{});var Cje=s(I9);$Te=n(Cje,"STRONG",{});var Xkt=s($Te);zMr=r(Xkt,"t5"),Xkt.forEach(t),QMr=r(Cje," \u2014 "),RJ=n(Cje,"A",{href:!0});var zkt=s(RJ);WMr=r(zkt,"TFT5ForConditionalGeneration"),zkt.forEach(t),HMr=r(Cje," (T5 model)"),Cje.forEach(t),UMr=i(le),N9=n(le,"LI",{});var wje=s(N9);kTe=n(wje,"STRONG",{});var Qkt=s(kTe);JMr=r(Qkt,"tapas"),Qkt.forEach(t),YMr=r(wje," \u2014 "),PJ=n(wje,"A",{href:!0});var Wkt=s(PJ);KMr=r(Wkt,"TFTapasForMaskedLM"),Wkt.forEach(t),ZMr=r(wje," (TAPAS model)"),wje.forEach(t),eEr=i(le),q9=n(le,"LI",{});var Aje=s(q9);STe=n(Aje,"STRONG",{});var Hkt=s(STe);oEr=r(Hkt,"transfo-xl"),Hkt.forEach(t),rEr=r(Aje," \u2014 "),BJ=n(Aje,"A",{href:!0});var Ukt=s(BJ);tEr=r(Ukt,"TFTransfoXLLMHeadModel"),Ukt.forEach(t),aEr=r(Aje," (Transformer-XL model)"),Aje.forEach(t),nEr=i(le),j9=n(le,"LI",{});var Lje=s(j9);RTe=n(Lje,"STRONG",{});var Jkt=s(RTe);sEr=r(Jkt,"vit_mae"),Jkt.forEach(t),lEr=r(Lje," \u2014 "),IJ=n(Lje,"A",{href:!0});var Ykt=s(IJ);iEr=r(Ykt,"TFViTMAEForPreTraining"),Ykt.forEach(t),dEr=r(Lje," (ViTMAE model)"),Lje.forEach(t),cEr=i(le),D9=n(le,"LI",{});var yje=s(D9);PTe=n(yje,"STRONG",{});var Kkt=s(PTe);fEr=r(Kkt,"xlm"),Kkt.forEach(t),mEr=r(yje," \u2014 "),NJ=n(yje,"A",{href:!0});var Zkt=s(NJ);gEr=r(Zkt,"TFXLMWithLMHeadModel"),Zkt.forEach(t),hEr=r(yje," (XLM model)"),yje.forEach(t),pEr=i(le),G9=n(le,"LI",{});var xje=s(G9);BTe=n(xje,"STRONG",{});var eSt=s(BTe);_Er=r(eSt,"xlm-roberta"),eSt.forEach(t),uEr=r(xje," \u2014 "),qJ=n(xje,"A",{href:!0});var oSt=s(qJ);bEr=r(oSt,"TFXLMRobertaForMaskedLM"),oSt.forEach(t),vEr=r(xje," (XLM-RoBERTa model)"),xje.forEach(t),FEr=i(le),O9=n(le,"LI",{});var $je=s(O9);ITe=n($je,"STRONG",{});var rSt=s(ITe);TEr=r(rSt,"xlnet"),rSt.forEach(t),MEr=r($je," \u2014 "),jJ=n($je,"A",{href:!0});var tSt=s(jJ);EEr=r(tSt,"TFXLNetLMHeadModel"),tSt.forEach(t),CEr=r($je," (XLNet model)"),$je.forEach(t),le.forEach(t),wEr=i(Sl),T(V9.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),vze=i(f),fc=n(f,"H2",{class:!0});var LWe=s(fc);X9=n(LWe,"A",{id:!0,class:!0,href:!0});var aSt=s(X9);NTe=n(aSt,"SPAN",{});var nSt=s(NTe);T(ax.$$.fragment,nSt),nSt.forEach(t),aSt.forEach(t),AEr=i(LWe),qTe=n(LWe,"SPAN",{});var sSt=s(qTe);LEr=r(sSt,"TFAutoModelForCausalLM"),sSt.forEach(t),LWe.forEach(t),Fze=i(f),rr=n(f,"DIV",{class:!0});var Rl=s(rr);T(nx.$$.fragment,Rl),yEr=i(Rl),mc=n(Rl,"P",{});var Pte=s(mc);xEr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DJ=n(Pte,"A",{href:!0});var lSt=s(DJ);$Er=r(lSt,"from_pretrained()"),lSt.forEach(t),kEr=r(Pte," class method or the "),GJ=n(Pte,"A",{href:!0});var iSt=s(GJ);SEr=r(iSt,"from_config()"),iSt.forEach(t),REr=r(Pte,` class
method.`),Pte.forEach(t),PEr=i(Rl),sx=n(Rl,"P",{});var yWe=s(sx);BEr=r(yWe,"This class cannot be instantiated directly using "),jTe=n(yWe,"CODE",{});var dSt=s(jTe);IEr=r(dSt,"__init__()"),dSt.forEach(t),NEr=r(yWe," (throws an error)."),yWe.forEach(t),qEr=i(Rl),Pt=n(Rl,"DIV",{class:!0});var cA=s(Pt);T(lx.$$.fragment,cA),jEr=i(cA),DTe=n(cA,"P",{});var cSt=s(DTe);DEr=r(cSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cSt.forEach(t),GEr=i(cA),gc=n(cA,"P",{});var Bte=s(gc);OEr=r(Bte,`Note:
Loading a model from its configuration file does `),GTe=n(Bte,"STRONG",{});var fSt=s(GTe);VEr=r(fSt,"not"),fSt.forEach(t),XEr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(Bte,"A",{href:!0});var mSt=s(OJ);zEr=r(mSt,"from_pretrained()"),mSt.forEach(t),QEr=r(Bte," to load the model weights."),Bte.forEach(t),WEr=i(cA),T(z9.$$.fragment,cA),cA.forEach(t),HEr=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(ix.$$.fragment,Pl),UEr=i(Pl),OTe=n(Pl,"P",{});var gSt=s(OTe);JEr=r(gSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gSt.forEach(t),YEr=i(Pl),cn=n(Pl,"P",{});var fA=s(cn);KEr=r(fA,"The model class to instantiate is selected based on the "),VTe=n(fA,"CODE",{});var hSt=s(VTe);ZEr=r(hSt,"model_type"),hSt.forEach(t),eCr=r(fA,` property of the config object (either
passed as an argument or loaded from `),XTe=n(fA,"CODE",{});var pSt=s(XTe);oCr=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),rCr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(fA,"CODE",{});var _St=s(zTe);tCr=r(_St,"pretrained_model_name_or_path"),_St.forEach(t),aCr=r(fA,":"),fA.forEach(t),nCr=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);Q9=n(Ce,"LI",{});var kje=s(Q9);QTe=n(kje,"STRONG",{});var uSt=s(QTe);sCr=r(uSt,"bert"),uSt.forEach(t),lCr=r(kje," \u2014 "),VJ=n(kje,"A",{href:!0});var bSt=s(VJ);iCr=r(bSt,"TFBertLMHeadModel"),bSt.forEach(t),dCr=r(kje," (BERT model)"),kje.forEach(t),cCr=i(Ce),W9=n(Ce,"LI",{});var Sje=s(W9);WTe=n(Sje,"STRONG",{});var vSt=s(WTe);fCr=r(vSt,"camembert"),vSt.forEach(t),mCr=r(Sje," \u2014 "),XJ=n(Sje,"A",{href:!0});var FSt=s(XJ);gCr=r(FSt,"TFCamembertForCausalLM"),FSt.forEach(t),hCr=r(Sje," (CamemBERT model)"),Sje.forEach(t),pCr=i(Ce),H9=n(Ce,"LI",{});var Rje=s(H9);HTe=n(Rje,"STRONG",{});var TSt=s(HTe);_Cr=r(TSt,"ctrl"),TSt.forEach(t),uCr=r(Rje," \u2014 "),zJ=n(Rje,"A",{href:!0});var MSt=s(zJ);bCr=r(MSt,"TFCTRLLMHeadModel"),MSt.forEach(t),vCr=r(Rje," (CTRL model)"),Rje.forEach(t),FCr=i(Ce),U9=n(Ce,"LI",{});var Pje=s(U9);UTe=n(Pje,"STRONG",{});var ESt=s(UTe);TCr=r(ESt,"gpt2"),ESt.forEach(t),MCr=r(Pje," \u2014 "),QJ=n(Pje,"A",{href:!0});var CSt=s(QJ);ECr=r(CSt,"TFGPT2LMHeadModel"),CSt.forEach(t),CCr=r(Pje," (OpenAI GPT-2 model)"),Pje.forEach(t),wCr=i(Ce),J9=n(Ce,"LI",{});var Bje=s(J9);JTe=n(Bje,"STRONG",{});var wSt=s(JTe);ACr=r(wSt,"gptj"),wSt.forEach(t),LCr=r(Bje," \u2014 "),WJ=n(Bje,"A",{href:!0});var ASt=s(WJ);yCr=r(ASt,"TFGPTJForCausalLM"),ASt.forEach(t),xCr=r(Bje," (GPT-J model)"),Bje.forEach(t),$Cr=i(Ce),Y9=n(Ce,"LI",{});var Ije=s(Y9);YTe=n(Ije,"STRONG",{});var LSt=s(YTe);kCr=r(LSt,"openai-gpt"),LSt.forEach(t),SCr=r(Ije," \u2014 "),HJ=n(Ije,"A",{href:!0});var ySt=s(HJ);RCr=r(ySt,"TFOpenAIGPTLMHeadModel"),ySt.forEach(t),PCr=r(Ije," (OpenAI GPT model)"),Ije.forEach(t),BCr=i(Ce),K9=n(Ce,"LI",{});var Nje=s(K9);KTe=n(Nje,"STRONG",{});var xSt=s(KTe);ICr=r(xSt,"opt"),xSt.forEach(t),NCr=r(Nje," \u2014 "),UJ=n(Nje,"A",{href:!0});var $St=s(UJ);qCr=r($St,"TFOPTForCausalLM"),$St.forEach(t),jCr=r(Nje," (OPT model)"),Nje.forEach(t),DCr=i(Ce),Z9=n(Ce,"LI",{});var qje=s(Z9);ZTe=n(qje,"STRONG",{});var kSt=s(ZTe);GCr=r(kSt,"rembert"),kSt.forEach(t),OCr=r(qje," \u2014 "),JJ=n(qje,"A",{href:!0});var SSt=s(JJ);VCr=r(SSt,"TFRemBertForCausalLM"),SSt.forEach(t),XCr=r(qje," (RemBERT model)"),qje.forEach(t),zCr=i(Ce),eM=n(Ce,"LI",{});var jje=s(eM);e7e=n(jje,"STRONG",{});var RSt=s(e7e);QCr=r(RSt,"roberta"),RSt.forEach(t),WCr=r(jje," \u2014 "),YJ=n(jje,"A",{href:!0});var PSt=s(YJ);HCr=r(PSt,"TFRobertaForCausalLM"),PSt.forEach(t),UCr=r(jje," (RoBERTa model)"),jje.forEach(t),JCr=i(Ce),oM=n(Ce,"LI",{});var Dje=s(oM);o7e=n(Dje,"STRONG",{});var BSt=s(o7e);YCr=r(BSt,"roformer"),BSt.forEach(t),KCr=r(Dje," \u2014 "),KJ=n(Dje,"A",{href:!0});var ISt=s(KJ);ZCr=r(ISt,"TFRoFormerForCausalLM"),ISt.forEach(t),e3r=r(Dje," (RoFormer model)"),Dje.forEach(t),o3r=i(Ce),rM=n(Ce,"LI",{});var Gje=s(rM);r7e=n(Gje,"STRONG",{});var NSt=s(r7e);r3r=r(NSt,"transfo-xl"),NSt.forEach(t),t3r=r(Gje," \u2014 "),ZJ=n(Gje,"A",{href:!0});var qSt=s(ZJ);a3r=r(qSt,"TFTransfoXLLMHeadModel"),qSt.forEach(t),n3r=r(Gje," (Transformer-XL model)"),Gje.forEach(t),s3r=i(Ce),tM=n(Ce,"LI",{});var Oje=s(tM);t7e=n(Oje,"STRONG",{});var jSt=s(t7e);l3r=r(jSt,"xlm"),jSt.forEach(t),i3r=r(Oje," \u2014 "),eY=n(Oje,"A",{href:!0});var DSt=s(eY);d3r=r(DSt,"TFXLMWithLMHeadModel"),DSt.forEach(t),c3r=r(Oje," (XLM model)"),Oje.forEach(t),f3r=i(Ce),aM=n(Ce,"LI",{});var Vje=s(aM);a7e=n(Vje,"STRONG",{});var GSt=s(a7e);m3r=r(GSt,"xlnet"),GSt.forEach(t),g3r=r(Vje," \u2014 "),oY=n(Vje,"A",{href:!0});var OSt=s(oY);h3r=r(OSt,"TFXLNetLMHeadModel"),OSt.forEach(t),p3r=r(Vje," (XLNet model)"),Vje.forEach(t),Ce.forEach(t),_3r=i(Pl),T(nM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Tze=i(f),hc=n(f,"H2",{class:!0});var xWe=s(hc);sM=n(xWe,"A",{id:!0,class:!0,href:!0});var VSt=s(sM);n7e=n(VSt,"SPAN",{});var XSt=s(n7e);T(dx.$$.fragment,XSt),XSt.forEach(t),VSt.forEach(t),u3r=i(xWe),s7e=n(xWe,"SPAN",{});var zSt=s(s7e);b3r=r(zSt,"TFAutoModelForImageClassification"),zSt.forEach(t),xWe.forEach(t),Mze=i(f),tr=n(f,"DIV",{class:!0});var Bl=s(tr);T(cx.$$.fragment,Bl),v3r=i(Bl),pc=n(Bl,"P",{});var Ite=s(pc);F3r=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rY=n(Ite,"A",{href:!0});var QSt=s(rY);T3r=r(QSt,"from_pretrained()"),QSt.forEach(t),M3r=r(Ite," class method or the "),tY=n(Ite,"A",{href:!0});var WSt=s(tY);E3r=r(WSt,"from_config()"),WSt.forEach(t),C3r=r(Ite,` class
method.`),Ite.forEach(t),w3r=i(Bl),fx=n(Bl,"P",{});var $We=s(fx);A3r=r($We,"This class cannot be instantiated directly using "),l7e=n($We,"CODE",{});var HSt=s(l7e);L3r=r(HSt,"__init__()"),HSt.forEach(t),y3r=r($We," (throws an error)."),$We.forEach(t),x3r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var mA=s(Bt);T(mx.$$.fragment,mA),$3r=i(mA),i7e=n(mA,"P",{});var USt=s(i7e);k3r=r(USt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),USt.forEach(t),S3r=i(mA),_c=n(mA,"P",{});var Nte=s(_c);R3r=r(Nte,`Note:
Loading a model from its configuration file does `),d7e=n(Nte,"STRONG",{});var JSt=s(d7e);P3r=r(JSt,"not"),JSt.forEach(t),B3r=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(Nte,"A",{href:!0});var YSt=s(aY);I3r=r(YSt,"from_pretrained()"),YSt.forEach(t),N3r=r(Nte," to load the model weights."),Nte.forEach(t),q3r=i(mA),T(lM.$$.fragment,mA),mA.forEach(t),j3r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(gx.$$.fragment,Il),D3r=i(Il),c7e=n(Il,"P",{});var KSt=s(c7e);G3r=r(KSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KSt.forEach(t),O3r=i(Il),fn=n(Il,"P",{});var gA=s(fn);V3r=r(gA,"The model class to instantiate is selected based on the "),f7e=n(gA,"CODE",{});var ZSt=s(f7e);X3r=r(ZSt,"model_type"),ZSt.forEach(t),z3r=r(gA,` property of the config object (either
passed as an argument or loaded from `),m7e=n(gA,"CODE",{});var eRt=s(m7e);Q3r=r(eRt,"pretrained_model_name_or_path"),eRt.forEach(t),W3r=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g7e=n(gA,"CODE",{});var oRt=s(g7e);H3r=r(oRt,"pretrained_model_name_or_path"),oRt.forEach(t),U3r=r(gA,":"),gA.forEach(t),J3r=i(Il),ar=n(Il,"UL",{});var ka=s(ar);iM=n(ka,"LI",{});var Xje=s(iM);h7e=n(Xje,"STRONG",{});var rRt=s(h7e);Y3r=r(rRt,"convnext"),rRt.forEach(t),K3r=r(Xje," \u2014 "),nY=n(Xje,"A",{href:!0});var tRt=s(nY);Z3r=r(tRt,"TFConvNextForImageClassification"),tRt.forEach(t),e5r=r(Xje," (ConvNeXT model)"),Xje.forEach(t),o5r=i(ka),dM=n(ka,"LI",{});var zje=s(dM);p7e=n(zje,"STRONG",{});var aRt=s(p7e);r5r=r(aRt,"data2vec-vision"),aRt.forEach(t),t5r=r(zje," \u2014 "),sY=n(zje,"A",{href:!0});var nRt=s(sY);a5r=r(nRt,"TFData2VecVisionForImageClassification"),nRt.forEach(t),n5r=r(zje," (Data2VecVision model)"),zje.forEach(t),s5r=i(ka),cM=n(ka,"LI",{});var Qje=s(cM);_7e=n(Qje,"STRONG",{});var sRt=s(_7e);l5r=r(sRt,"regnet"),sRt.forEach(t),i5r=r(Qje," \u2014 "),lY=n(Qje,"A",{href:!0});var lRt=s(lY);d5r=r(lRt,"TFRegNetForImageClassification"),lRt.forEach(t),c5r=r(Qje," (RegNet model)"),Qje.forEach(t),f5r=i(ka),fM=n(ka,"LI",{});var Wje=s(fM);u7e=n(Wje,"STRONG",{});var iRt=s(u7e);m5r=r(iRt,"swin"),iRt.forEach(t),g5r=r(Wje," \u2014 "),iY=n(Wje,"A",{href:!0});var dRt=s(iY);h5r=r(dRt,"TFSwinForImageClassification"),dRt.forEach(t),p5r=r(Wje," (Swin Transformer model)"),Wje.forEach(t),_5r=i(ka),mM=n(ka,"LI",{});var Hje=s(mM);b7e=n(Hje,"STRONG",{});var cRt=s(b7e);u5r=r(cRt,"swinv2"),cRt.forEach(t),b5r=r(Hje," \u2014 "),dY=n(Hje,"A",{href:!0});var fRt=s(dY);v5r=r(fRt,"TFSwinv2ForImageClassification"),fRt.forEach(t),F5r=r(Hje," (Swin Transformer V2 model)"),Hje.forEach(t),T5r=i(ka),gM=n(ka,"LI",{});var Uje=s(gM);v7e=n(Uje,"STRONG",{});var mRt=s(v7e);M5r=r(mRt,"vit"),mRt.forEach(t),E5r=r(Uje," \u2014 "),cY=n(Uje,"A",{href:!0});var gRt=s(cY);C5r=r(gRt,"TFViTForImageClassification"),gRt.forEach(t),w5r=r(Uje," (ViT model)"),Uje.forEach(t),ka.forEach(t),A5r=i(Il),T(hM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Eze=i(f),uc=n(f,"H2",{class:!0});var kWe=s(uc);pM=n(kWe,"A",{id:!0,class:!0,href:!0});var hRt=s(pM);F7e=n(hRt,"SPAN",{});var pRt=s(F7e);T(hx.$$.fragment,pRt),pRt.forEach(t),hRt.forEach(t),L5r=i(kWe),T7e=n(kWe,"SPAN",{});var _Rt=s(T7e);y5r=r(_Rt,"TFAutoModelForMaskedLM"),_Rt.forEach(t),kWe.forEach(t),Cze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(px.$$.fragment,Nl),x5r=i(Nl),bc=n(Nl,"P",{});var qte=s(bc);$5r=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fY=n(qte,"A",{href:!0});var uRt=s(fY);k5r=r(uRt,"from_pretrained()"),uRt.forEach(t),S5r=r(qte," class method or the "),mY=n(qte,"A",{href:!0});var bRt=s(mY);R5r=r(bRt,"from_config()"),bRt.forEach(t),P5r=r(qte,` class
method.`),qte.forEach(t),B5r=i(Nl),_x=n(Nl,"P",{});var SWe=s(_x);I5r=r(SWe,"This class cannot be instantiated directly using "),M7e=n(SWe,"CODE",{});var vRt=s(M7e);N5r=r(vRt,"__init__()"),vRt.forEach(t),q5r=r(SWe," (throws an error)."),SWe.forEach(t),j5r=i(Nl),It=n(Nl,"DIV",{class:!0});var hA=s(It);T(ux.$$.fragment,hA),D5r=i(hA),E7e=n(hA,"P",{});var FRt=s(E7e);G5r=r(FRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FRt.forEach(t),O5r=i(hA),vc=n(hA,"P",{});var jte=s(vc);V5r=r(jte,`Note:
Loading a model from its configuration file does `),C7e=n(jte,"STRONG",{});var TRt=s(C7e);X5r=r(TRt,"not"),TRt.forEach(t),z5r=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(jte,"A",{href:!0});var MRt=s(gY);Q5r=r(MRt,"from_pretrained()"),MRt.forEach(t),W5r=r(jte," to load the model weights."),jte.forEach(t),H5r=i(hA),T(_M.$$.fragment,hA),hA.forEach(t),U5r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(bx.$$.fragment,ql),J5r=i(ql),w7e=n(ql,"P",{});var ERt=s(w7e);Y5r=r(ERt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ERt.forEach(t),K5r=i(ql),mn=n(ql,"P",{});var pA=s(mn);Z5r=r(pA,"The model class to instantiate is selected based on the "),A7e=n(pA,"CODE",{});var CRt=s(A7e);e0r=r(CRt,"model_type"),CRt.forEach(t),o0r=r(pA,` property of the config object (either
passed as an argument or loaded from `),L7e=n(pA,"CODE",{});var wRt=s(L7e);r0r=r(wRt,"pretrained_model_name_or_path"),wRt.forEach(t),t0r=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(pA,"CODE",{});var ARt=s(y7e);a0r=r(ARt,"pretrained_model_name_or_path"),ARt.forEach(t),n0r=r(pA,":"),pA.forEach(t),s0r=i(ql),ie=n(ql,"UL",{});var fe=s(ie);uM=n(fe,"LI",{});var Jje=s(uM);x7e=n(Jje,"STRONG",{});var LRt=s(x7e);l0r=r(LRt,"albert"),LRt.forEach(t),i0r=r(Jje," \u2014 "),hY=n(Jje,"A",{href:!0});var yRt=s(hY);d0r=r(yRt,"TFAlbertForMaskedLM"),yRt.forEach(t),c0r=r(Jje," (ALBERT model)"),Jje.forEach(t),f0r=i(fe),bM=n(fe,"LI",{});var Yje=s(bM);$7e=n(Yje,"STRONG",{});var xRt=s($7e);m0r=r(xRt,"bert"),xRt.forEach(t),g0r=r(Yje," \u2014 "),pY=n(Yje,"A",{href:!0});var $Rt=s(pY);h0r=r($Rt,"TFBertForMaskedLM"),$Rt.forEach(t),p0r=r(Yje," (BERT model)"),Yje.forEach(t),_0r=i(fe),vM=n(fe,"LI",{});var Kje=s(vM);k7e=n(Kje,"STRONG",{});var kRt=s(k7e);u0r=r(kRt,"camembert"),kRt.forEach(t),b0r=r(Kje," \u2014 "),_Y=n(Kje,"A",{href:!0});var SRt=s(_Y);v0r=r(SRt,"TFCamembertForMaskedLM"),SRt.forEach(t),F0r=r(Kje," (CamemBERT model)"),Kje.forEach(t),T0r=i(fe),FM=n(fe,"LI",{});var Zje=s(FM);S7e=n(Zje,"STRONG",{});var RRt=s(S7e);M0r=r(RRt,"convbert"),RRt.forEach(t),E0r=r(Zje," \u2014 "),uY=n(Zje,"A",{href:!0});var PRt=s(uY);C0r=r(PRt,"TFConvBertForMaskedLM"),PRt.forEach(t),w0r=r(Zje," (ConvBERT model)"),Zje.forEach(t),A0r=i(fe),TM=n(fe,"LI",{});var eDe=s(TM);R7e=n(eDe,"STRONG",{});var BRt=s(R7e);L0r=r(BRt,"deberta"),BRt.forEach(t),y0r=r(eDe," \u2014 "),bY=n(eDe,"A",{href:!0});var IRt=s(bY);x0r=r(IRt,"TFDebertaForMaskedLM"),IRt.forEach(t),$0r=r(eDe," (DeBERTa model)"),eDe.forEach(t),k0r=i(fe),MM=n(fe,"LI",{});var oDe=s(MM);P7e=n(oDe,"STRONG",{});var NRt=s(P7e);S0r=r(NRt,"deberta-v2"),NRt.forEach(t),R0r=r(oDe," \u2014 "),vY=n(oDe,"A",{href:!0});var qRt=s(vY);P0r=r(qRt,"TFDebertaV2ForMaskedLM"),qRt.forEach(t),B0r=r(oDe," (DeBERTa-v2 model)"),oDe.forEach(t),I0r=i(fe),EM=n(fe,"LI",{});var rDe=s(EM);B7e=n(rDe,"STRONG",{});var jRt=s(B7e);N0r=r(jRt,"distilbert"),jRt.forEach(t),q0r=r(rDe," \u2014 "),FY=n(rDe,"A",{href:!0});var DRt=s(FY);j0r=r(DRt,"TFDistilBertForMaskedLM"),DRt.forEach(t),D0r=r(rDe," (DistilBERT model)"),rDe.forEach(t),G0r=i(fe),CM=n(fe,"LI",{});var tDe=s(CM);I7e=n(tDe,"STRONG",{});var GRt=s(I7e);O0r=r(GRt,"electra"),GRt.forEach(t),V0r=r(tDe," \u2014 "),TY=n(tDe,"A",{href:!0});var ORt=s(TY);X0r=r(ORt,"TFElectraForMaskedLM"),ORt.forEach(t),z0r=r(tDe," (ELECTRA model)"),tDe.forEach(t),Q0r=i(fe),wM=n(fe,"LI",{});var aDe=s(wM);N7e=n(aDe,"STRONG",{});var VRt=s(N7e);W0r=r(VRt,"flaubert"),VRt.forEach(t),H0r=r(aDe," \u2014 "),MY=n(aDe,"A",{href:!0});var XRt=s(MY);U0r=r(XRt,"TFFlaubertWithLMHeadModel"),XRt.forEach(t),J0r=r(aDe," (FlauBERT model)"),aDe.forEach(t),Y0r=i(fe),AM=n(fe,"LI",{});var nDe=s(AM);q7e=n(nDe,"STRONG",{});var zRt=s(q7e);K0r=r(zRt,"funnel"),zRt.forEach(t),Z0r=r(nDe," \u2014 "),EY=n(nDe,"A",{href:!0});var QRt=s(EY);ewr=r(QRt,"TFFunnelForMaskedLM"),QRt.forEach(t),owr=r(nDe," (Funnel Transformer model)"),nDe.forEach(t),rwr=i(fe),LM=n(fe,"LI",{});var sDe=s(LM);j7e=n(sDe,"STRONG",{});var WRt=s(j7e);twr=r(WRt,"layoutlm"),WRt.forEach(t),awr=r(sDe," \u2014 "),CY=n(sDe,"A",{href:!0});var HRt=s(CY);nwr=r(HRt,"TFLayoutLMForMaskedLM"),HRt.forEach(t),swr=r(sDe," (LayoutLM model)"),sDe.forEach(t),lwr=i(fe),yM=n(fe,"LI",{});var lDe=s(yM);D7e=n(lDe,"STRONG",{});var URt=s(D7e);iwr=r(URt,"longformer"),URt.forEach(t),dwr=r(lDe," \u2014 "),wY=n(lDe,"A",{href:!0});var JRt=s(wY);cwr=r(JRt,"TFLongformerForMaskedLM"),JRt.forEach(t),fwr=r(lDe," (Longformer model)"),lDe.forEach(t),mwr=i(fe),xM=n(fe,"LI",{});var iDe=s(xM);G7e=n(iDe,"STRONG",{});var YRt=s(G7e);gwr=r(YRt,"mobilebert"),YRt.forEach(t),hwr=r(iDe," \u2014 "),AY=n(iDe,"A",{href:!0});var KRt=s(AY);pwr=r(KRt,"TFMobileBertForMaskedLM"),KRt.forEach(t),_wr=r(iDe," (MobileBERT model)"),iDe.forEach(t),uwr=i(fe),$M=n(fe,"LI",{});var dDe=s($M);O7e=n(dDe,"STRONG",{});var ZRt=s(O7e);bwr=r(ZRt,"mpnet"),ZRt.forEach(t),vwr=r(dDe," \u2014 "),LY=n(dDe,"A",{href:!0});var ePt=s(LY);Fwr=r(ePt,"TFMPNetForMaskedLM"),ePt.forEach(t),Twr=r(dDe," (MPNet model)"),dDe.forEach(t),Mwr=i(fe),kM=n(fe,"LI",{});var cDe=s(kM);V7e=n(cDe,"STRONG",{});var oPt=s(V7e);Ewr=r(oPt,"rembert"),oPt.forEach(t),Cwr=r(cDe," \u2014 "),yY=n(cDe,"A",{href:!0});var rPt=s(yY);wwr=r(rPt,"TFRemBertForMaskedLM"),rPt.forEach(t),Awr=r(cDe," (RemBERT model)"),cDe.forEach(t),Lwr=i(fe),SM=n(fe,"LI",{});var fDe=s(SM);X7e=n(fDe,"STRONG",{});var tPt=s(X7e);ywr=r(tPt,"roberta"),tPt.forEach(t),xwr=r(fDe," \u2014 "),xY=n(fDe,"A",{href:!0});var aPt=s(xY);$wr=r(aPt,"TFRobertaForMaskedLM"),aPt.forEach(t),kwr=r(fDe," (RoBERTa model)"),fDe.forEach(t),Swr=i(fe),RM=n(fe,"LI",{});var mDe=s(RM);z7e=n(mDe,"STRONG",{});var nPt=s(z7e);Rwr=r(nPt,"roformer"),nPt.forEach(t),Pwr=r(mDe," \u2014 "),$Y=n(mDe,"A",{href:!0});var sPt=s($Y);Bwr=r(sPt,"TFRoFormerForMaskedLM"),sPt.forEach(t),Iwr=r(mDe," (RoFormer model)"),mDe.forEach(t),Nwr=i(fe),PM=n(fe,"LI",{});var gDe=s(PM);Q7e=n(gDe,"STRONG",{});var lPt=s(Q7e);qwr=r(lPt,"tapas"),lPt.forEach(t),jwr=r(gDe," \u2014 "),kY=n(gDe,"A",{href:!0});var iPt=s(kY);Dwr=r(iPt,"TFTapasForMaskedLM"),iPt.forEach(t),Gwr=r(gDe," (TAPAS model)"),gDe.forEach(t),Owr=i(fe),BM=n(fe,"LI",{});var hDe=s(BM);W7e=n(hDe,"STRONG",{});var dPt=s(W7e);Vwr=r(dPt,"xlm"),dPt.forEach(t),Xwr=r(hDe," \u2014 "),SY=n(hDe,"A",{href:!0});var cPt=s(SY);zwr=r(cPt,"TFXLMWithLMHeadModel"),cPt.forEach(t),Qwr=r(hDe," (XLM model)"),hDe.forEach(t),Wwr=i(fe),IM=n(fe,"LI",{});var pDe=s(IM);H7e=n(pDe,"STRONG",{});var fPt=s(H7e);Hwr=r(fPt,"xlm-roberta"),fPt.forEach(t),Uwr=r(pDe," \u2014 "),RY=n(pDe,"A",{href:!0});var mPt=s(RY);Jwr=r(mPt,"TFXLMRobertaForMaskedLM"),mPt.forEach(t),Ywr=r(pDe," (XLM-RoBERTa model)"),pDe.forEach(t),fe.forEach(t),Kwr=i(ql),T(NM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),wze=i(f),Fc=n(f,"H2",{class:!0});var RWe=s(Fc);qM=n(RWe,"A",{id:!0,class:!0,href:!0});var gPt=s(qM);U7e=n(gPt,"SPAN",{});var hPt=s(U7e);T(vx.$$.fragment,hPt),hPt.forEach(t),gPt.forEach(t),Zwr=i(RWe),J7e=n(RWe,"SPAN",{});var pPt=s(J7e);eAr=r(pPt,"TFAutoModelForSeq2SeqLM"),pPt.forEach(t),RWe.forEach(t),Aze=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(Fx.$$.fragment,jl),oAr=i(jl),Tc=n(jl,"P",{});var Dte=s(Tc);rAr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PY=n(Dte,"A",{href:!0});var _Pt=s(PY);tAr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),aAr=r(Dte," class method or the "),BY=n(Dte,"A",{href:!0});var uPt=s(BY);nAr=r(uPt,"from_config()"),uPt.forEach(t),sAr=r(Dte,` class
method.`),Dte.forEach(t),lAr=i(jl),Tx=n(jl,"P",{});var PWe=s(Tx);iAr=r(PWe,"This class cannot be instantiated directly using "),Y7e=n(PWe,"CODE",{});var bPt=s(Y7e);dAr=r(bPt,"__init__()"),bPt.forEach(t),cAr=r(PWe," (throws an error)."),PWe.forEach(t),fAr=i(jl),Nt=n(jl,"DIV",{class:!0});var _A=s(Nt);T(Mx.$$.fragment,_A),mAr=i(_A),K7e=n(_A,"P",{});var vPt=s(K7e);gAr=r(vPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vPt.forEach(t),hAr=i(_A),Mc=n(_A,"P",{});var Gte=s(Mc);pAr=r(Gte,`Note:
Loading a model from its configuration file does `),Z7e=n(Gte,"STRONG",{});var FPt=s(Z7e);_Ar=r(FPt,"not"),FPt.forEach(t),uAr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(Gte,"A",{href:!0});var TPt=s(IY);bAr=r(TPt,"from_pretrained()"),TPt.forEach(t),vAr=r(Gte," to load the model weights."),Gte.forEach(t),FAr=i(_A),T(jM.$$.fragment,_A),_A.forEach(t),TAr=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(Ex.$$.fragment,Dl),MAr=i(Dl),e9e=n(Dl,"P",{});var MPt=s(e9e);EAr=r(MPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MPt.forEach(t),CAr=i(Dl),gn=n(Dl,"P",{});var uA=s(gn);wAr=r(uA,"The model class to instantiate is selected based on the "),o9e=n(uA,"CODE",{});var EPt=s(o9e);AAr=r(EPt,"model_type"),EPt.forEach(t),LAr=r(uA,` property of the config object (either
passed as an argument or loaded from `),r9e=n(uA,"CODE",{});var CPt=s(r9e);yAr=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),xAr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=n(uA,"CODE",{});var wPt=s(t9e);$Ar=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),kAr=r(uA,":"),uA.forEach(t),SAr=i(Dl),ye=n(Dl,"UL",{});var Ie=s(ye);DM=n(Ie,"LI",{});var _De=s(DM);a9e=n(_De,"STRONG",{});var APt=s(a9e);RAr=r(APt,"bart"),APt.forEach(t),PAr=r(_De," \u2014 "),NY=n(_De,"A",{href:!0});var LPt=s(NY);BAr=r(LPt,"TFBartForConditionalGeneration"),LPt.forEach(t),IAr=r(_De," (BART model)"),_De.forEach(t),NAr=i(Ie),GM=n(Ie,"LI",{});var uDe=s(GM);n9e=n(uDe,"STRONG",{});var yPt=s(n9e);qAr=r(yPt,"blenderbot"),yPt.forEach(t),jAr=r(uDe," \u2014 "),qY=n(uDe,"A",{href:!0});var xPt=s(qY);DAr=r(xPt,"TFBlenderbotForConditionalGeneration"),xPt.forEach(t),GAr=r(uDe," (Blenderbot model)"),uDe.forEach(t),OAr=i(Ie),OM=n(Ie,"LI",{});var bDe=s(OM);s9e=n(bDe,"STRONG",{});var $Pt=s(s9e);VAr=r($Pt,"blenderbot-small"),$Pt.forEach(t),XAr=r(bDe," \u2014 "),jY=n(bDe,"A",{href:!0});var kPt=s(jY);zAr=r(kPt,"TFBlenderbotSmallForConditionalGeneration"),kPt.forEach(t),QAr=r(bDe," (BlenderbotSmall model)"),bDe.forEach(t),WAr=i(Ie),VM=n(Ie,"LI",{});var vDe=s(VM);l9e=n(vDe,"STRONG",{});var SPt=s(l9e);HAr=r(SPt,"encoder-decoder"),SPt.forEach(t),UAr=r(vDe," \u2014 "),DY=n(vDe,"A",{href:!0});var RPt=s(DY);JAr=r(RPt,"TFEncoderDecoderModel"),RPt.forEach(t),YAr=r(vDe," (Encoder decoder model)"),vDe.forEach(t),KAr=i(Ie),XM=n(Ie,"LI",{});var FDe=s(XM);i9e=n(FDe,"STRONG",{});var PPt=s(i9e);ZAr=r(PPt,"led"),PPt.forEach(t),eLr=r(FDe," \u2014 "),GY=n(FDe,"A",{href:!0});var BPt=s(GY);oLr=r(BPt,"TFLEDForConditionalGeneration"),BPt.forEach(t),rLr=r(FDe," (LED model)"),FDe.forEach(t),tLr=i(Ie),zM=n(Ie,"LI",{});var TDe=s(zM);d9e=n(TDe,"STRONG",{});var IPt=s(d9e);aLr=r(IPt,"marian"),IPt.forEach(t),nLr=r(TDe," \u2014 "),OY=n(TDe,"A",{href:!0});var NPt=s(OY);sLr=r(NPt,"TFMarianMTModel"),NPt.forEach(t),lLr=r(TDe," (Marian model)"),TDe.forEach(t),iLr=i(Ie),QM=n(Ie,"LI",{});var MDe=s(QM);c9e=n(MDe,"STRONG",{});var qPt=s(c9e);dLr=r(qPt,"mbart"),qPt.forEach(t),cLr=r(MDe," \u2014 "),VY=n(MDe,"A",{href:!0});var jPt=s(VY);fLr=r(jPt,"TFMBartForConditionalGeneration"),jPt.forEach(t),mLr=r(MDe," (mBART model)"),MDe.forEach(t),gLr=i(Ie),WM=n(Ie,"LI",{});var EDe=s(WM);f9e=n(EDe,"STRONG",{});var DPt=s(f9e);hLr=r(DPt,"mt5"),DPt.forEach(t),pLr=r(EDe," \u2014 "),XY=n(EDe,"A",{href:!0});var GPt=s(XY);_Lr=r(GPt,"TFMT5ForConditionalGeneration"),GPt.forEach(t),uLr=r(EDe," (MT5 model)"),EDe.forEach(t),bLr=i(Ie),HM=n(Ie,"LI",{});var CDe=s(HM);m9e=n(CDe,"STRONG",{});var OPt=s(m9e);vLr=r(OPt,"pegasus"),OPt.forEach(t),FLr=r(CDe," \u2014 "),zY=n(CDe,"A",{href:!0});var VPt=s(zY);TLr=r(VPt,"TFPegasusForConditionalGeneration"),VPt.forEach(t),MLr=r(CDe," (Pegasus model)"),CDe.forEach(t),ELr=i(Ie),UM=n(Ie,"LI",{});var wDe=s(UM);g9e=n(wDe,"STRONG",{});var XPt=s(g9e);CLr=r(XPt,"t5"),XPt.forEach(t),wLr=r(wDe," \u2014 "),QY=n(wDe,"A",{href:!0});var zPt=s(QY);ALr=r(zPt,"TFT5ForConditionalGeneration"),zPt.forEach(t),LLr=r(wDe," (T5 model)"),wDe.forEach(t),Ie.forEach(t),yLr=i(Dl),T(JM.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Lze=i(f),Ec=n(f,"H2",{class:!0});var BWe=s(Ec);YM=n(BWe,"A",{id:!0,class:!0,href:!0});var QPt=s(YM);h9e=n(QPt,"SPAN",{});var WPt=s(h9e);T(Cx.$$.fragment,WPt),WPt.forEach(t),QPt.forEach(t),xLr=i(BWe),p9e=n(BWe,"SPAN",{});var HPt=s(p9e);$Lr=r(HPt,"TFAutoModelForSequenceClassification"),HPt.forEach(t),BWe.forEach(t),yze=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(wx.$$.fragment,Gl),kLr=i(Gl),Cc=n(Gl,"P",{});var Ote=s(Cc);SLr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WY=n(Ote,"A",{href:!0});var UPt=s(WY);RLr=r(UPt,"from_pretrained()"),UPt.forEach(t),PLr=r(Ote," class method or the "),HY=n(Ote,"A",{href:!0});var JPt=s(HY);BLr=r(JPt,"from_config()"),JPt.forEach(t),ILr=r(Ote,` class
method.`),Ote.forEach(t),NLr=i(Gl),Ax=n(Gl,"P",{});var IWe=s(Ax);qLr=r(IWe,"This class cannot be instantiated directly using "),_9e=n(IWe,"CODE",{});var YPt=s(_9e);jLr=r(YPt,"__init__()"),YPt.forEach(t),DLr=r(IWe," (throws an error)."),IWe.forEach(t),GLr=i(Gl),qt=n(Gl,"DIV",{class:!0});var bA=s(qt);T(Lx.$$.fragment,bA),OLr=i(bA),u9e=n(bA,"P",{});var KPt=s(u9e);VLr=r(KPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KPt.forEach(t),XLr=i(bA),wc=n(bA,"P",{});var Vte=s(wc);zLr=r(Vte,`Note:
Loading a model from its configuration file does `),b9e=n(Vte,"STRONG",{});var ZPt=s(b9e);QLr=r(ZPt,"not"),ZPt.forEach(t),WLr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(Vte,"A",{href:!0});var eBt=s(UY);HLr=r(eBt,"from_pretrained()"),eBt.forEach(t),ULr=r(Vte," to load the model weights."),Vte.forEach(t),JLr=i(bA),T(KM.$$.fragment,bA),bA.forEach(t),YLr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T(yx.$$.fragment,Ol),KLr=i(Ol),v9e=n(Ol,"P",{});var oBt=s(v9e);ZLr=r(oBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oBt.forEach(t),eyr=i(Ol),hn=n(Ol,"P",{});var vA=s(hn);oyr=r(vA,"The model class to instantiate is selected based on the "),F9e=n(vA,"CODE",{});var rBt=s(F9e);ryr=r(rBt,"model_type"),rBt.forEach(t),tyr=r(vA,` property of the config object (either
passed as an argument or loaded from `),T9e=n(vA,"CODE",{});var tBt=s(T9e);ayr=r(tBt,"pretrained_model_name_or_path"),tBt.forEach(t),nyr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=n(vA,"CODE",{});var aBt=s(M9e);syr=r(aBt,"pretrained_model_name_or_path"),aBt.forEach(t),lyr=r(vA,":"),vA.forEach(t),iyr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);ZM=n(ne,"LI",{});var ADe=s(ZM);E9e=n(ADe,"STRONG",{});var nBt=s(E9e);dyr=r(nBt,"albert"),nBt.forEach(t),cyr=r(ADe," \u2014 "),JY=n(ADe,"A",{href:!0});var sBt=s(JY);fyr=r(sBt,"TFAlbertForSequenceClassification"),sBt.forEach(t),myr=r(ADe," (ALBERT model)"),ADe.forEach(t),gyr=i(ne),eE=n(ne,"LI",{});var LDe=s(eE);C9e=n(LDe,"STRONG",{});var lBt=s(C9e);hyr=r(lBt,"bert"),lBt.forEach(t),pyr=r(LDe," \u2014 "),YY=n(LDe,"A",{href:!0});var iBt=s(YY);_yr=r(iBt,"TFBertForSequenceClassification"),iBt.forEach(t),uyr=r(LDe," (BERT model)"),LDe.forEach(t),byr=i(ne),oE=n(ne,"LI",{});var yDe=s(oE);w9e=n(yDe,"STRONG",{});var dBt=s(w9e);vyr=r(dBt,"camembert"),dBt.forEach(t),Fyr=r(yDe," \u2014 "),KY=n(yDe,"A",{href:!0});var cBt=s(KY);Tyr=r(cBt,"TFCamembertForSequenceClassification"),cBt.forEach(t),Myr=r(yDe," (CamemBERT model)"),yDe.forEach(t),Eyr=i(ne),rE=n(ne,"LI",{});var xDe=s(rE);A9e=n(xDe,"STRONG",{});var fBt=s(A9e);Cyr=r(fBt,"convbert"),fBt.forEach(t),wyr=r(xDe," \u2014 "),ZY=n(xDe,"A",{href:!0});var mBt=s(ZY);Ayr=r(mBt,"TFConvBertForSequenceClassification"),mBt.forEach(t),Lyr=r(xDe," (ConvBERT model)"),xDe.forEach(t),yyr=i(ne),tE=n(ne,"LI",{});var $De=s(tE);L9e=n($De,"STRONG",{});var gBt=s(L9e);xyr=r(gBt,"ctrl"),gBt.forEach(t),$yr=r($De," \u2014 "),eK=n($De,"A",{href:!0});var hBt=s(eK);kyr=r(hBt,"TFCTRLForSequenceClassification"),hBt.forEach(t),Syr=r($De," (CTRL model)"),$De.forEach(t),Ryr=i(ne),aE=n(ne,"LI",{});var kDe=s(aE);y9e=n(kDe,"STRONG",{});var pBt=s(y9e);Pyr=r(pBt,"deberta"),pBt.forEach(t),Byr=r(kDe," \u2014 "),oK=n(kDe,"A",{href:!0});var _Bt=s(oK);Iyr=r(_Bt,"TFDebertaForSequenceClassification"),_Bt.forEach(t),Nyr=r(kDe," (DeBERTa model)"),kDe.forEach(t),qyr=i(ne),nE=n(ne,"LI",{});var SDe=s(nE);x9e=n(SDe,"STRONG",{});var uBt=s(x9e);jyr=r(uBt,"deberta-v2"),uBt.forEach(t),Dyr=r(SDe," \u2014 "),rK=n(SDe,"A",{href:!0});var bBt=s(rK);Gyr=r(bBt,"TFDebertaV2ForSequenceClassification"),bBt.forEach(t),Oyr=r(SDe," (DeBERTa-v2 model)"),SDe.forEach(t),Vyr=i(ne),sE=n(ne,"LI",{});var RDe=s(sE);$9e=n(RDe,"STRONG",{});var vBt=s($9e);Xyr=r(vBt,"distilbert"),vBt.forEach(t),zyr=r(RDe," \u2014 "),tK=n(RDe,"A",{href:!0});var FBt=s(tK);Qyr=r(FBt,"TFDistilBertForSequenceClassification"),FBt.forEach(t),Wyr=r(RDe," (DistilBERT model)"),RDe.forEach(t),Hyr=i(ne),lE=n(ne,"LI",{});var PDe=s(lE);k9e=n(PDe,"STRONG",{});var TBt=s(k9e);Uyr=r(TBt,"electra"),TBt.forEach(t),Jyr=r(PDe," \u2014 "),aK=n(PDe,"A",{href:!0});var MBt=s(aK);Yyr=r(MBt,"TFElectraForSequenceClassification"),MBt.forEach(t),Kyr=r(PDe," (ELECTRA model)"),PDe.forEach(t),Zyr=i(ne),iE=n(ne,"LI",{});var BDe=s(iE);S9e=n(BDe,"STRONG",{});var EBt=s(S9e);e8r=r(EBt,"flaubert"),EBt.forEach(t),o8r=r(BDe," \u2014 "),nK=n(BDe,"A",{href:!0});var CBt=s(nK);r8r=r(CBt,"TFFlaubertForSequenceClassification"),CBt.forEach(t),t8r=r(BDe," (FlauBERT model)"),BDe.forEach(t),a8r=i(ne),dE=n(ne,"LI",{});var IDe=s(dE);R9e=n(IDe,"STRONG",{});var wBt=s(R9e);n8r=r(wBt,"funnel"),wBt.forEach(t),s8r=r(IDe," \u2014 "),sK=n(IDe,"A",{href:!0});var ABt=s(sK);l8r=r(ABt,"TFFunnelForSequenceClassification"),ABt.forEach(t),i8r=r(IDe," (Funnel Transformer model)"),IDe.forEach(t),d8r=i(ne),cE=n(ne,"LI",{});var NDe=s(cE);P9e=n(NDe,"STRONG",{});var LBt=s(P9e);c8r=r(LBt,"gpt2"),LBt.forEach(t),f8r=r(NDe," \u2014 "),lK=n(NDe,"A",{href:!0});var yBt=s(lK);m8r=r(yBt,"TFGPT2ForSequenceClassification"),yBt.forEach(t),g8r=r(NDe," (OpenAI GPT-2 model)"),NDe.forEach(t),h8r=i(ne),fE=n(ne,"LI",{});var qDe=s(fE);B9e=n(qDe,"STRONG",{});var xBt=s(B9e);p8r=r(xBt,"gptj"),xBt.forEach(t),_8r=r(qDe," \u2014 "),iK=n(qDe,"A",{href:!0});var $Bt=s(iK);u8r=r($Bt,"TFGPTJForSequenceClassification"),$Bt.forEach(t),b8r=r(qDe," (GPT-J model)"),qDe.forEach(t),v8r=i(ne),mE=n(ne,"LI",{});var jDe=s(mE);I9e=n(jDe,"STRONG",{});var kBt=s(I9e);F8r=r(kBt,"layoutlm"),kBt.forEach(t),T8r=r(jDe," \u2014 "),dK=n(jDe,"A",{href:!0});var SBt=s(dK);M8r=r(SBt,"TFLayoutLMForSequenceClassification"),SBt.forEach(t),E8r=r(jDe," (LayoutLM model)"),jDe.forEach(t),C8r=i(ne),gE=n(ne,"LI",{});var DDe=s(gE);N9e=n(DDe,"STRONG",{});var RBt=s(N9e);w8r=r(RBt,"longformer"),RBt.forEach(t),A8r=r(DDe," \u2014 "),cK=n(DDe,"A",{href:!0});var PBt=s(cK);L8r=r(PBt,"TFLongformerForSequenceClassification"),PBt.forEach(t),y8r=r(DDe," (Longformer model)"),DDe.forEach(t),x8r=i(ne),hE=n(ne,"LI",{});var GDe=s(hE);q9e=n(GDe,"STRONG",{});var BBt=s(q9e);$8r=r(BBt,"mobilebert"),BBt.forEach(t),k8r=r(GDe," \u2014 "),fK=n(GDe,"A",{href:!0});var IBt=s(fK);S8r=r(IBt,"TFMobileBertForSequenceClassification"),IBt.forEach(t),R8r=r(GDe," (MobileBERT model)"),GDe.forEach(t),P8r=i(ne),pE=n(ne,"LI",{});var ODe=s(pE);j9e=n(ODe,"STRONG",{});var NBt=s(j9e);B8r=r(NBt,"mpnet"),NBt.forEach(t),I8r=r(ODe," \u2014 "),mK=n(ODe,"A",{href:!0});var qBt=s(mK);N8r=r(qBt,"TFMPNetForSequenceClassification"),qBt.forEach(t),q8r=r(ODe," (MPNet model)"),ODe.forEach(t),j8r=i(ne),_E=n(ne,"LI",{});var VDe=s(_E);D9e=n(VDe,"STRONG",{});var jBt=s(D9e);D8r=r(jBt,"openai-gpt"),jBt.forEach(t),G8r=r(VDe," \u2014 "),gK=n(VDe,"A",{href:!0});var DBt=s(gK);O8r=r(DBt,"TFOpenAIGPTForSequenceClassification"),DBt.forEach(t),V8r=r(VDe," (OpenAI GPT model)"),VDe.forEach(t),X8r=i(ne),uE=n(ne,"LI",{});var XDe=s(uE);G9e=n(XDe,"STRONG",{});var GBt=s(G9e);z8r=r(GBt,"rembert"),GBt.forEach(t),Q8r=r(XDe," \u2014 "),hK=n(XDe,"A",{href:!0});var OBt=s(hK);W8r=r(OBt,"TFRemBertForSequenceClassification"),OBt.forEach(t),H8r=r(XDe," (RemBERT model)"),XDe.forEach(t),U8r=i(ne),bE=n(ne,"LI",{});var zDe=s(bE);O9e=n(zDe,"STRONG",{});var VBt=s(O9e);J8r=r(VBt,"roberta"),VBt.forEach(t),Y8r=r(zDe," \u2014 "),pK=n(zDe,"A",{href:!0});var XBt=s(pK);K8r=r(XBt,"TFRobertaForSequenceClassification"),XBt.forEach(t),Z8r=r(zDe," (RoBERTa model)"),zDe.forEach(t),exr=i(ne),vE=n(ne,"LI",{});var QDe=s(vE);V9e=n(QDe,"STRONG",{});var zBt=s(V9e);oxr=r(zBt,"roformer"),zBt.forEach(t),rxr=r(QDe," \u2014 "),_K=n(QDe,"A",{href:!0});var QBt=s(_K);txr=r(QBt,"TFRoFormerForSequenceClassification"),QBt.forEach(t),axr=r(QDe," (RoFormer model)"),QDe.forEach(t),nxr=i(ne),FE=n(ne,"LI",{});var WDe=s(FE);X9e=n(WDe,"STRONG",{});var WBt=s(X9e);sxr=r(WBt,"tapas"),WBt.forEach(t),lxr=r(WDe," \u2014 "),uK=n(WDe,"A",{href:!0});var HBt=s(uK);ixr=r(HBt,"TFTapasForSequenceClassification"),HBt.forEach(t),dxr=r(WDe," (TAPAS model)"),WDe.forEach(t),cxr=i(ne),TE=n(ne,"LI",{});var HDe=s(TE);z9e=n(HDe,"STRONG",{});var UBt=s(z9e);fxr=r(UBt,"transfo-xl"),UBt.forEach(t),mxr=r(HDe," \u2014 "),bK=n(HDe,"A",{href:!0});var JBt=s(bK);gxr=r(JBt,"TFTransfoXLForSequenceClassification"),JBt.forEach(t),hxr=r(HDe," (Transformer-XL model)"),HDe.forEach(t),pxr=i(ne),ME=n(ne,"LI",{});var UDe=s(ME);Q9e=n(UDe,"STRONG",{});var YBt=s(Q9e);_xr=r(YBt,"xlm"),YBt.forEach(t),uxr=r(UDe," \u2014 "),vK=n(UDe,"A",{href:!0});var KBt=s(vK);bxr=r(KBt,"TFXLMForSequenceClassification"),KBt.forEach(t),vxr=r(UDe," (XLM model)"),UDe.forEach(t),Fxr=i(ne),EE=n(ne,"LI",{});var JDe=s(EE);W9e=n(JDe,"STRONG",{});var ZBt=s(W9e);Txr=r(ZBt,"xlm-roberta"),ZBt.forEach(t),Mxr=r(JDe," \u2014 "),FK=n(JDe,"A",{href:!0});var eIt=s(FK);Exr=r(eIt,"TFXLMRobertaForSequenceClassification"),eIt.forEach(t),Cxr=r(JDe," (XLM-RoBERTa model)"),JDe.forEach(t),wxr=i(ne),CE=n(ne,"LI",{});var YDe=s(CE);H9e=n(YDe,"STRONG",{});var oIt=s(H9e);Axr=r(oIt,"xlnet"),oIt.forEach(t),Lxr=r(YDe," \u2014 "),TK=n(YDe,"A",{href:!0});var rIt=s(TK);yxr=r(rIt,"TFXLNetForSequenceClassification"),rIt.forEach(t),xxr=r(YDe," (XLNet model)"),YDe.forEach(t),ne.forEach(t),$xr=i(Ol),T(wE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),xze=i(f),Ac=n(f,"H2",{class:!0});var NWe=s(Ac);AE=n(NWe,"A",{id:!0,class:!0,href:!0});var tIt=s(AE);U9e=n(tIt,"SPAN",{});var aIt=s(U9e);T(xx.$$.fragment,aIt),aIt.forEach(t),tIt.forEach(t),kxr=i(NWe),J9e=n(NWe,"SPAN",{});var nIt=s(J9e);Sxr=r(nIt,"TFAutoModelForMultipleChoice"),nIt.forEach(t),NWe.forEach(t),$ze=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T($x.$$.fragment,Vl),Rxr=i(Vl),Lc=n(Vl,"P",{});var Xte=s(Lc);Pxr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MK=n(Xte,"A",{href:!0});var sIt=s(MK);Bxr=r(sIt,"from_pretrained()"),sIt.forEach(t),Ixr=r(Xte," class method or the "),EK=n(Xte,"A",{href:!0});var lIt=s(EK);Nxr=r(lIt,"from_config()"),lIt.forEach(t),qxr=r(Xte,` class
method.`),Xte.forEach(t),jxr=i(Vl),kx=n(Vl,"P",{});var qWe=s(kx);Dxr=r(qWe,"This class cannot be instantiated directly using "),Y9e=n(qWe,"CODE",{});var iIt=s(Y9e);Gxr=r(iIt,"__init__()"),iIt.forEach(t),Oxr=r(qWe," (throws an error)."),qWe.forEach(t),Vxr=i(Vl),jt=n(Vl,"DIV",{class:!0});var FA=s(jt);T(Sx.$$.fragment,FA),Xxr=i(FA),K9e=n(FA,"P",{});var dIt=s(K9e);zxr=r(dIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dIt.forEach(t),Qxr=i(FA),yc=n(FA,"P",{});var zte=s(yc);Wxr=r(zte,`Note:
Loading a model from its configuration file does `),Z9e=n(zte,"STRONG",{});var cIt=s(Z9e);Hxr=r(cIt,"not"),cIt.forEach(t),Uxr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(zte,"A",{href:!0});var fIt=s(CK);Jxr=r(fIt,"from_pretrained()"),fIt.forEach(t),Yxr=r(zte," to load the model weights."),zte.forEach(t),Kxr=i(FA),T(LE.$$.fragment,FA),FA.forEach(t),Zxr=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(Rx.$$.fragment,Xl),e$r=i(Xl),eMe=n(Xl,"P",{});var mIt=s(eMe);o$r=r(mIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mIt.forEach(t),r$r=i(Xl),pn=n(Xl,"P",{});var TA=s(pn);t$r=r(TA,"The model class to instantiate is selected based on the "),oMe=n(TA,"CODE",{});var gIt=s(oMe);a$r=r(gIt,"model_type"),gIt.forEach(t),n$r=r(TA,` property of the config object (either
passed as an argument or loaded from `),rMe=n(TA,"CODE",{});var hIt=s(rMe);s$r=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),l$r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(TA,"CODE",{});var pIt=s(tMe);i$r=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),d$r=r(TA,":"),TA.forEach(t),c$r=i(Xl),ue=n(Xl,"UL",{});var Te=s(ue);yE=n(Te,"LI",{});var KDe=s(yE);aMe=n(KDe,"STRONG",{});var _It=s(aMe);f$r=r(_It,"albert"),_It.forEach(t),m$r=r(KDe," \u2014 "),wK=n(KDe,"A",{href:!0});var uIt=s(wK);g$r=r(uIt,"TFAlbertForMultipleChoice"),uIt.forEach(t),h$r=r(KDe," (ALBERT model)"),KDe.forEach(t),p$r=i(Te),xE=n(Te,"LI",{});var ZDe=s(xE);nMe=n(ZDe,"STRONG",{});var bIt=s(nMe);_$r=r(bIt,"bert"),bIt.forEach(t),u$r=r(ZDe," \u2014 "),AK=n(ZDe,"A",{href:!0});var vIt=s(AK);b$r=r(vIt,"TFBertForMultipleChoice"),vIt.forEach(t),v$r=r(ZDe," (BERT model)"),ZDe.forEach(t),F$r=i(Te),$E=n(Te,"LI",{});var eGe=s($E);sMe=n(eGe,"STRONG",{});var FIt=s(sMe);T$r=r(FIt,"camembert"),FIt.forEach(t),M$r=r(eGe," \u2014 "),LK=n(eGe,"A",{href:!0});var TIt=s(LK);E$r=r(TIt,"TFCamembertForMultipleChoice"),TIt.forEach(t),C$r=r(eGe," (CamemBERT model)"),eGe.forEach(t),w$r=i(Te),kE=n(Te,"LI",{});var oGe=s(kE);lMe=n(oGe,"STRONG",{});var MIt=s(lMe);A$r=r(MIt,"convbert"),MIt.forEach(t),L$r=r(oGe," \u2014 "),yK=n(oGe,"A",{href:!0});var EIt=s(yK);y$r=r(EIt,"TFConvBertForMultipleChoice"),EIt.forEach(t),x$r=r(oGe," (ConvBERT model)"),oGe.forEach(t),$$r=i(Te),SE=n(Te,"LI",{});var rGe=s(SE);iMe=n(rGe,"STRONG",{});var CIt=s(iMe);k$r=r(CIt,"distilbert"),CIt.forEach(t),S$r=r(rGe," \u2014 "),xK=n(rGe,"A",{href:!0});var wIt=s(xK);R$r=r(wIt,"TFDistilBertForMultipleChoice"),wIt.forEach(t),P$r=r(rGe," (DistilBERT model)"),rGe.forEach(t),B$r=i(Te),RE=n(Te,"LI",{});var tGe=s(RE);dMe=n(tGe,"STRONG",{});var AIt=s(dMe);I$r=r(AIt,"electra"),AIt.forEach(t),N$r=r(tGe," \u2014 "),$K=n(tGe,"A",{href:!0});var LIt=s($K);q$r=r(LIt,"TFElectraForMultipleChoice"),LIt.forEach(t),j$r=r(tGe," (ELECTRA model)"),tGe.forEach(t),D$r=i(Te),PE=n(Te,"LI",{});var aGe=s(PE);cMe=n(aGe,"STRONG",{});var yIt=s(cMe);G$r=r(yIt,"flaubert"),yIt.forEach(t),O$r=r(aGe," \u2014 "),kK=n(aGe,"A",{href:!0});var xIt=s(kK);V$r=r(xIt,"TFFlaubertForMultipleChoice"),xIt.forEach(t),X$r=r(aGe," (FlauBERT model)"),aGe.forEach(t),z$r=i(Te),BE=n(Te,"LI",{});var nGe=s(BE);fMe=n(nGe,"STRONG",{});var $It=s(fMe);Q$r=r($It,"funnel"),$It.forEach(t),W$r=r(nGe," \u2014 "),SK=n(nGe,"A",{href:!0});var kIt=s(SK);H$r=r(kIt,"TFFunnelForMultipleChoice"),kIt.forEach(t),U$r=r(nGe," (Funnel Transformer model)"),nGe.forEach(t),J$r=i(Te),IE=n(Te,"LI",{});var sGe=s(IE);mMe=n(sGe,"STRONG",{});var SIt=s(mMe);Y$r=r(SIt,"longformer"),SIt.forEach(t),K$r=r(sGe," \u2014 "),RK=n(sGe,"A",{href:!0});var RIt=s(RK);Z$r=r(RIt,"TFLongformerForMultipleChoice"),RIt.forEach(t),ekr=r(sGe," (Longformer model)"),sGe.forEach(t),okr=i(Te),NE=n(Te,"LI",{});var lGe=s(NE);gMe=n(lGe,"STRONG",{});var PIt=s(gMe);rkr=r(PIt,"mobilebert"),PIt.forEach(t),tkr=r(lGe," \u2014 "),PK=n(lGe,"A",{href:!0});var BIt=s(PK);akr=r(BIt,"TFMobileBertForMultipleChoice"),BIt.forEach(t),nkr=r(lGe," (MobileBERT model)"),lGe.forEach(t),skr=i(Te),qE=n(Te,"LI",{});var iGe=s(qE);hMe=n(iGe,"STRONG",{});var IIt=s(hMe);lkr=r(IIt,"mpnet"),IIt.forEach(t),ikr=r(iGe," \u2014 "),BK=n(iGe,"A",{href:!0});var NIt=s(BK);dkr=r(NIt,"TFMPNetForMultipleChoice"),NIt.forEach(t),ckr=r(iGe," (MPNet model)"),iGe.forEach(t),fkr=i(Te),jE=n(Te,"LI",{});var dGe=s(jE);pMe=n(dGe,"STRONG",{});var qIt=s(pMe);mkr=r(qIt,"rembert"),qIt.forEach(t),gkr=r(dGe," \u2014 "),IK=n(dGe,"A",{href:!0});var jIt=s(IK);hkr=r(jIt,"TFRemBertForMultipleChoice"),jIt.forEach(t),pkr=r(dGe," (RemBERT model)"),dGe.forEach(t),_kr=i(Te),DE=n(Te,"LI",{});var cGe=s(DE);_Me=n(cGe,"STRONG",{});var DIt=s(_Me);ukr=r(DIt,"roberta"),DIt.forEach(t),bkr=r(cGe," \u2014 "),NK=n(cGe,"A",{href:!0});var GIt=s(NK);vkr=r(GIt,"TFRobertaForMultipleChoice"),GIt.forEach(t),Fkr=r(cGe," (RoBERTa model)"),cGe.forEach(t),Tkr=i(Te),GE=n(Te,"LI",{});var fGe=s(GE);uMe=n(fGe,"STRONG",{});var OIt=s(uMe);Mkr=r(OIt,"roformer"),OIt.forEach(t),Ekr=r(fGe," \u2014 "),qK=n(fGe,"A",{href:!0});var VIt=s(qK);Ckr=r(VIt,"TFRoFormerForMultipleChoice"),VIt.forEach(t),wkr=r(fGe," (RoFormer model)"),fGe.forEach(t),Akr=i(Te),OE=n(Te,"LI",{});var mGe=s(OE);bMe=n(mGe,"STRONG",{});var XIt=s(bMe);Lkr=r(XIt,"xlm"),XIt.forEach(t),ykr=r(mGe," \u2014 "),jK=n(mGe,"A",{href:!0});var zIt=s(jK);xkr=r(zIt,"TFXLMForMultipleChoice"),zIt.forEach(t),$kr=r(mGe," (XLM model)"),mGe.forEach(t),kkr=i(Te),VE=n(Te,"LI",{});var gGe=s(VE);vMe=n(gGe,"STRONG",{});var QIt=s(vMe);Skr=r(QIt,"xlm-roberta"),QIt.forEach(t),Rkr=r(gGe," \u2014 "),DK=n(gGe,"A",{href:!0});var WIt=s(DK);Pkr=r(WIt,"TFXLMRobertaForMultipleChoice"),WIt.forEach(t),Bkr=r(gGe," (XLM-RoBERTa model)"),gGe.forEach(t),Ikr=i(Te),XE=n(Te,"LI",{});var hGe=s(XE);FMe=n(hGe,"STRONG",{});var HIt=s(FMe);Nkr=r(HIt,"xlnet"),HIt.forEach(t),qkr=r(hGe," \u2014 "),GK=n(hGe,"A",{href:!0});var UIt=s(GK);jkr=r(UIt,"TFXLNetForMultipleChoice"),UIt.forEach(t),Dkr=r(hGe," (XLNet model)"),hGe.forEach(t),Te.forEach(t),Gkr=i(Xl),T(zE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),kze=i(f),xc=n(f,"H2",{class:!0});var jWe=s(xc);QE=n(jWe,"A",{id:!0,class:!0,href:!0});var JIt=s(QE);TMe=n(JIt,"SPAN",{});var YIt=s(TMe);T(Px.$$.fragment,YIt),YIt.forEach(t),JIt.forEach(t),Okr=i(jWe),MMe=n(jWe,"SPAN",{});var KIt=s(MMe);Vkr=r(KIt,"TFAutoModelForNextSentencePrediction"),KIt.forEach(t),jWe.forEach(t),Sze=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(Bx.$$.fragment,zl),Xkr=i(zl),$c=n(zl,"P",{});var Qte=s($c);zkr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OK=n(Qte,"A",{href:!0});var ZIt=s(OK);Qkr=r(ZIt,"from_pretrained()"),ZIt.forEach(t),Wkr=r(Qte," class method or the "),VK=n(Qte,"A",{href:!0});var eNt=s(VK);Hkr=r(eNt,"from_config()"),eNt.forEach(t),Ukr=r(Qte,` class
method.`),Qte.forEach(t),Jkr=i(zl),Ix=n(zl,"P",{});var DWe=s(Ix);Ykr=r(DWe,"This class cannot be instantiated directly using "),EMe=n(DWe,"CODE",{});var oNt=s(EMe);Kkr=r(oNt,"__init__()"),oNt.forEach(t),Zkr=r(DWe," (throws an error)."),DWe.forEach(t),eSr=i(zl),Dt=n(zl,"DIV",{class:!0});var MA=s(Dt);T(Nx.$$.fragment,MA),oSr=i(MA),CMe=n(MA,"P",{});var rNt=s(CMe);rSr=r(rNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rNt.forEach(t),tSr=i(MA),kc=n(MA,"P",{});var Wte=s(kc);aSr=r(Wte,`Note:
Loading a model from its configuration file does `),wMe=n(Wte,"STRONG",{});var tNt=s(wMe);nSr=r(tNt,"not"),tNt.forEach(t),sSr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Wte,"A",{href:!0});var aNt=s(XK);lSr=r(aNt,"from_pretrained()"),aNt.forEach(t),iSr=r(Wte," to load the model weights."),Wte.forEach(t),dSr=i(MA),T(WE.$$.fragment,MA),MA.forEach(t),cSr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(qx.$$.fragment,Ql),fSr=i(Ql),AMe=n(Ql,"P",{});var nNt=s(AMe);mSr=r(nNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nNt.forEach(t),gSr=i(Ql),_n=n(Ql,"P",{});var EA=s(_n);hSr=r(EA,"The model class to instantiate is selected based on the "),LMe=n(EA,"CODE",{});var sNt=s(LMe);pSr=r(sNt,"model_type"),sNt.forEach(t),_Sr=r(EA,` property of the config object (either
passed as an argument or loaded from `),yMe=n(EA,"CODE",{});var lNt=s(yMe);uSr=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),bSr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(EA,"CODE",{});var iNt=s(xMe);vSr=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),FSr=r(EA,":"),EA.forEach(t),TSr=i(Ql),jx=n(Ql,"UL",{});var GWe=s(jx);HE=n(GWe,"LI",{});var pGe=s(HE);$Me=n(pGe,"STRONG",{});var dNt=s($Me);MSr=r(dNt,"bert"),dNt.forEach(t),ESr=r(pGe," \u2014 "),zK=n(pGe,"A",{href:!0});var cNt=s(zK);CSr=r(cNt,"TFBertForNextSentencePrediction"),cNt.forEach(t),wSr=r(pGe," (BERT model)"),pGe.forEach(t),ASr=i(GWe),UE=n(GWe,"LI",{});var _Ge=s(UE);kMe=n(_Ge,"STRONG",{});var fNt=s(kMe);LSr=r(fNt,"mobilebert"),fNt.forEach(t),ySr=r(_Ge," \u2014 "),QK=n(_Ge,"A",{href:!0});var mNt=s(QK);xSr=r(mNt,"TFMobileBertForNextSentencePrediction"),mNt.forEach(t),$Sr=r(_Ge," (MobileBERT model)"),_Ge.forEach(t),GWe.forEach(t),kSr=i(Ql),T(JE.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Rze=i(f),Sc=n(f,"H2",{class:!0});var OWe=s(Sc);YE=n(OWe,"A",{id:!0,class:!0,href:!0});var gNt=s(YE);SMe=n(gNt,"SPAN",{});var hNt=s(SMe);T(Dx.$$.fragment,hNt),hNt.forEach(t),gNt.forEach(t),SSr=i(OWe),RMe=n(OWe,"SPAN",{});var pNt=s(RMe);RSr=r(pNt,"TFAutoModelForTableQuestionAnswering"),pNt.forEach(t),OWe.forEach(t),Pze=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(Gx.$$.fragment,Wl),PSr=i(Wl),Rc=n(Wl,"P",{});var Hte=s(Rc);BSr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WK=n(Hte,"A",{href:!0});var _Nt=s(WK);ISr=r(_Nt,"from_pretrained()"),_Nt.forEach(t),NSr=r(Hte," class method or the "),HK=n(Hte,"A",{href:!0});var uNt=s(HK);qSr=r(uNt,"from_config()"),uNt.forEach(t),jSr=r(Hte,` class
method.`),Hte.forEach(t),DSr=i(Wl),Ox=n(Wl,"P",{});var VWe=s(Ox);GSr=r(VWe,"This class cannot be instantiated directly using "),PMe=n(VWe,"CODE",{});var bNt=s(PMe);OSr=r(bNt,"__init__()"),bNt.forEach(t),VSr=r(VWe," (throws an error)."),VWe.forEach(t),XSr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var CA=s(Gt);T(Vx.$$.fragment,CA),zSr=i(CA),BMe=n(CA,"P",{});var vNt=s(BMe);QSr=r(vNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vNt.forEach(t),WSr=i(CA),Pc=n(CA,"P",{});var Ute=s(Pc);HSr=r(Ute,`Note:
Loading a model from its configuration file does `),IMe=n(Ute,"STRONG",{});var FNt=s(IMe);USr=r(FNt,"not"),FNt.forEach(t),JSr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),UK=n(Ute,"A",{href:!0});var TNt=s(UK);YSr=r(TNt,"from_pretrained()"),TNt.forEach(t),KSr=r(Ute," to load the model weights."),Ute.forEach(t),ZSr=i(CA),T(KE.$$.fragment,CA),CA.forEach(t),eRr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Xx.$$.fragment,Hl),oRr=i(Hl),NMe=n(Hl,"P",{});var MNt=s(NMe);rRr=r(MNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MNt.forEach(t),tRr=i(Hl),un=n(Hl,"P",{});var wA=s(un);aRr=r(wA,"The model class to instantiate is selected based on the "),qMe=n(wA,"CODE",{});var ENt=s(qMe);nRr=r(ENt,"model_type"),ENt.forEach(t),sRr=r(wA,` property of the config object (either
passed as an argument or loaded from `),jMe=n(wA,"CODE",{});var CNt=s(jMe);lRr=r(CNt,"pretrained_model_name_or_path"),CNt.forEach(t),iRr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DMe=n(wA,"CODE",{});var wNt=s(DMe);dRr=r(wNt,"pretrained_model_name_or_path"),wNt.forEach(t),cRr=r(wA,":"),wA.forEach(t),fRr=i(Hl),GMe=n(Hl,"UL",{});var ANt=s(GMe);ZE=n(ANt,"LI",{});var uGe=s(ZE);OMe=n(uGe,"STRONG",{});var LNt=s(OMe);mRr=r(LNt,"tapas"),LNt.forEach(t),gRr=r(uGe," \u2014 "),JK=n(uGe,"A",{href:!0});var yNt=s(JK);hRr=r(yNt,"TFTapasForQuestionAnswering"),yNt.forEach(t),pRr=r(uGe," (TAPAS model)"),uGe.forEach(t),ANt.forEach(t),_Rr=i(Hl),T(eC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Bze=i(f),Bc=n(f,"H2",{class:!0});var XWe=s(Bc);oC=n(XWe,"A",{id:!0,class:!0,href:!0});var xNt=s(oC);VMe=n(xNt,"SPAN",{});var $Nt=s(VMe);T(zx.$$.fragment,$Nt),$Nt.forEach(t),xNt.forEach(t),uRr=i(XWe),XMe=n(XWe,"SPAN",{});var kNt=s(XMe);bRr=r(kNt,"TFAutoModelForTokenClassification"),kNt.forEach(t),XWe.forEach(t),Ize=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(Qx.$$.fragment,Ul),vRr=i(Ul),Ic=n(Ul,"P",{});var Jte=s(Ic);FRr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YK=n(Jte,"A",{href:!0});var SNt=s(YK);TRr=r(SNt,"from_pretrained()"),SNt.forEach(t),MRr=r(Jte," class method or the "),KK=n(Jte,"A",{href:!0});var RNt=s(KK);ERr=r(RNt,"from_config()"),RNt.forEach(t),CRr=r(Jte,` class
method.`),Jte.forEach(t),wRr=i(Ul),Wx=n(Ul,"P",{});var zWe=s(Wx);ARr=r(zWe,"This class cannot be instantiated directly using "),zMe=n(zWe,"CODE",{});var PNt=s(zMe);LRr=r(PNt,"__init__()"),PNt.forEach(t),yRr=r(zWe," (throws an error)."),zWe.forEach(t),xRr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var AA=s(Ot);T(Hx.$$.fragment,AA),$Rr=i(AA),QMe=n(AA,"P",{});var BNt=s(QMe);kRr=r(BNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),BNt.forEach(t),SRr=i(AA),Nc=n(AA,"P",{});var Yte=s(Nc);RRr=r(Yte,`Note:
Loading a model from its configuration file does `),WMe=n(Yte,"STRONG",{});var INt=s(WMe);PRr=r(INt,"not"),INt.forEach(t),BRr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(Yte,"A",{href:!0});var NNt=s(ZK);IRr=r(NNt,"from_pretrained()"),NNt.forEach(t),NRr=r(Yte," to load the model weights."),Yte.forEach(t),qRr=i(AA),T(rC.$$.fragment,AA),AA.forEach(t),jRr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Ux.$$.fragment,Jl),DRr=i(Jl),HMe=n(Jl,"P",{});var qNt=s(HMe);GRr=r(qNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qNt.forEach(t),ORr=i(Jl),bn=n(Jl,"P",{});var LA=s(bn);VRr=r(LA,"The model class to instantiate is selected based on the "),UMe=n(LA,"CODE",{});var jNt=s(UMe);XRr=r(jNt,"model_type"),jNt.forEach(t),zRr=r(LA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(LA,"CODE",{});var DNt=s(JMe);QRr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),WRr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(LA,"CODE",{});var GNt=s(YMe);HRr=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),URr=r(LA,":"),LA.forEach(t),JRr=i(Jl),de=n(Jl,"UL",{});var me=s(de);tC=n(me,"LI",{});var bGe=s(tC);KMe=n(bGe,"STRONG",{});var ONt=s(KMe);YRr=r(ONt,"albert"),ONt.forEach(t),KRr=r(bGe," \u2014 "),eZ=n(bGe,"A",{href:!0});var VNt=s(eZ);ZRr=r(VNt,"TFAlbertForTokenClassification"),VNt.forEach(t),ePr=r(bGe," (ALBERT model)"),bGe.forEach(t),oPr=i(me),aC=n(me,"LI",{});var vGe=s(aC);ZMe=n(vGe,"STRONG",{});var XNt=s(ZMe);rPr=r(XNt,"bert"),XNt.forEach(t),tPr=r(vGe," \u2014 "),oZ=n(vGe,"A",{href:!0});var zNt=s(oZ);aPr=r(zNt,"TFBertForTokenClassification"),zNt.forEach(t),nPr=r(vGe," (BERT model)"),vGe.forEach(t),sPr=i(me),nC=n(me,"LI",{});var FGe=s(nC);eEe=n(FGe,"STRONG",{});var QNt=s(eEe);lPr=r(QNt,"camembert"),QNt.forEach(t),iPr=r(FGe," \u2014 "),rZ=n(FGe,"A",{href:!0});var WNt=s(rZ);dPr=r(WNt,"TFCamembertForTokenClassification"),WNt.forEach(t),cPr=r(FGe," (CamemBERT model)"),FGe.forEach(t),fPr=i(me),sC=n(me,"LI",{});var TGe=s(sC);oEe=n(TGe,"STRONG",{});var HNt=s(oEe);mPr=r(HNt,"convbert"),HNt.forEach(t),gPr=r(TGe," \u2014 "),tZ=n(TGe,"A",{href:!0});var UNt=s(tZ);hPr=r(UNt,"TFConvBertForTokenClassification"),UNt.forEach(t),pPr=r(TGe," (ConvBERT model)"),TGe.forEach(t),_Pr=i(me),lC=n(me,"LI",{});var MGe=s(lC);rEe=n(MGe,"STRONG",{});var JNt=s(rEe);uPr=r(JNt,"deberta"),JNt.forEach(t),bPr=r(MGe," \u2014 "),aZ=n(MGe,"A",{href:!0});var YNt=s(aZ);vPr=r(YNt,"TFDebertaForTokenClassification"),YNt.forEach(t),FPr=r(MGe," (DeBERTa model)"),MGe.forEach(t),TPr=i(me),iC=n(me,"LI",{});var EGe=s(iC);tEe=n(EGe,"STRONG",{});var KNt=s(tEe);MPr=r(KNt,"deberta-v2"),KNt.forEach(t),EPr=r(EGe," \u2014 "),nZ=n(EGe,"A",{href:!0});var ZNt=s(nZ);CPr=r(ZNt,"TFDebertaV2ForTokenClassification"),ZNt.forEach(t),wPr=r(EGe," (DeBERTa-v2 model)"),EGe.forEach(t),APr=i(me),dC=n(me,"LI",{});var CGe=s(dC);aEe=n(CGe,"STRONG",{});var eqt=s(aEe);LPr=r(eqt,"distilbert"),eqt.forEach(t),yPr=r(CGe," \u2014 "),sZ=n(CGe,"A",{href:!0});var oqt=s(sZ);xPr=r(oqt,"TFDistilBertForTokenClassification"),oqt.forEach(t),$Pr=r(CGe," (DistilBERT model)"),CGe.forEach(t),kPr=i(me),cC=n(me,"LI",{});var wGe=s(cC);nEe=n(wGe,"STRONG",{});var rqt=s(nEe);SPr=r(rqt,"electra"),rqt.forEach(t),RPr=r(wGe," \u2014 "),lZ=n(wGe,"A",{href:!0});var tqt=s(lZ);PPr=r(tqt,"TFElectraForTokenClassification"),tqt.forEach(t),BPr=r(wGe," (ELECTRA model)"),wGe.forEach(t),IPr=i(me),fC=n(me,"LI",{});var AGe=s(fC);sEe=n(AGe,"STRONG",{});var aqt=s(sEe);NPr=r(aqt,"flaubert"),aqt.forEach(t),qPr=r(AGe," \u2014 "),iZ=n(AGe,"A",{href:!0});var nqt=s(iZ);jPr=r(nqt,"TFFlaubertForTokenClassification"),nqt.forEach(t),DPr=r(AGe," (FlauBERT model)"),AGe.forEach(t),GPr=i(me),mC=n(me,"LI",{});var LGe=s(mC);lEe=n(LGe,"STRONG",{});var sqt=s(lEe);OPr=r(sqt,"funnel"),sqt.forEach(t),VPr=r(LGe," \u2014 "),dZ=n(LGe,"A",{href:!0});var lqt=s(dZ);XPr=r(lqt,"TFFunnelForTokenClassification"),lqt.forEach(t),zPr=r(LGe," (Funnel Transformer model)"),LGe.forEach(t),QPr=i(me),gC=n(me,"LI",{});var yGe=s(gC);iEe=n(yGe,"STRONG",{});var iqt=s(iEe);WPr=r(iqt,"layoutlm"),iqt.forEach(t),HPr=r(yGe," \u2014 "),cZ=n(yGe,"A",{href:!0});var dqt=s(cZ);UPr=r(dqt,"TFLayoutLMForTokenClassification"),dqt.forEach(t),JPr=r(yGe," (LayoutLM model)"),yGe.forEach(t),YPr=i(me),hC=n(me,"LI",{});var xGe=s(hC);dEe=n(xGe,"STRONG",{});var cqt=s(dEe);KPr=r(cqt,"longformer"),cqt.forEach(t),ZPr=r(xGe," \u2014 "),fZ=n(xGe,"A",{href:!0});var fqt=s(fZ);eBr=r(fqt,"TFLongformerForTokenClassification"),fqt.forEach(t),oBr=r(xGe," (Longformer model)"),xGe.forEach(t),rBr=i(me),pC=n(me,"LI",{});var $Ge=s(pC);cEe=n($Ge,"STRONG",{});var mqt=s(cEe);tBr=r(mqt,"mobilebert"),mqt.forEach(t),aBr=r($Ge," \u2014 "),mZ=n($Ge,"A",{href:!0});var gqt=s(mZ);nBr=r(gqt,"TFMobileBertForTokenClassification"),gqt.forEach(t),sBr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),lBr=i(me),_C=n(me,"LI",{});var kGe=s(_C);fEe=n(kGe,"STRONG",{});var hqt=s(fEe);iBr=r(hqt,"mpnet"),hqt.forEach(t),dBr=r(kGe," \u2014 "),gZ=n(kGe,"A",{href:!0});var pqt=s(gZ);cBr=r(pqt,"TFMPNetForTokenClassification"),pqt.forEach(t),fBr=r(kGe," (MPNet model)"),kGe.forEach(t),mBr=i(me),uC=n(me,"LI",{});var SGe=s(uC);mEe=n(SGe,"STRONG",{});var _qt=s(mEe);gBr=r(_qt,"rembert"),_qt.forEach(t),hBr=r(SGe," \u2014 "),hZ=n(SGe,"A",{href:!0});var uqt=s(hZ);pBr=r(uqt,"TFRemBertForTokenClassification"),uqt.forEach(t),_Br=r(SGe," (RemBERT model)"),SGe.forEach(t),uBr=i(me),bC=n(me,"LI",{});var RGe=s(bC);gEe=n(RGe,"STRONG",{});var bqt=s(gEe);bBr=r(bqt,"roberta"),bqt.forEach(t),vBr=r(RGe," \u2014 "),pZ=n(RGe,"A",{href:!0});var vqt=s(pZ);FBr=r(vqt,"TFRobertaForTokenClassification"),vqt.forEach(t),TBr=r(RGe," (RoBERTa model)"),RGe.forEach(t),MBr=i(me),vC=n(me,"LI",{});var PGe=s(vC);hEe=n(PGe,"STRONG",{});var Fqt=s(hEe);EBr=r(Fqt,"roformer"),Fqt.forEach(t),CBr=r(PGe," \u2014 "),_Z=n(PGe,"A",{href:!0});var Tqt=s(_Z);wBr=r(Tqt,"TFRoFormerForTokenClassification"),Tqt.forEach(t),ABr=r(PGe," (RoFormer model)"),PGe.forEach(t),LBr=i(me),FC=n(me,"LI",{});var BGe=s(FC);pEe=n(BGe,"STRONG",{});var Mqt=s(pEe);yBr=r(Mqt,"xlm"),Mqt.forEach(t),xBr=r(BGe," \u2014 "),uZ=n(BGe,"A",{href:!0});var Eqt=s(uZ);$Br=r(Eqt,"TFXLMForTokenClassification"),Eqt.forEach(t),kBr=r(BGe," (XLM model)"),BGe.forEach(t),SBr=i(me),TC=n(me,"LI",{});var IGe=s(TC);_Ee=n(IGe,"STRONG",{});var Cqt=s(_Ee);RBr=r(Cqt,"xlm-roberta"),Cqt.forEach(t),PBr=r(IGe," \u2014 "),bZ=n(IGe,"A",{href:!0});var wqt=s(bZ);BBr=r(wqt,"TFXLMRobertaForTokenClassification"),wqt.forEach(t),IBr=r(IGe," (XLM-RoBERTa model)"),IGe.forEach(t),NBr=i(me),MC=n(me,"LI",{});var NGe=s(MC);uEe=n(NGe,"STRONG",{});var Aqt=s(uEe);qBr=r(Aqt,"xlnet"),Aqt.forEach(t),jBr=r(NGe," \u2014 "),vZ=n(NGe,"A",{href:!0});var Lqt=s(vZ);DBr=r(Lqt,"TFXLNetForTokenClassification"),Lqt.forEach(t),GBr=r(NGe," (XLNet model)"),NGe.forEach(t),me.forEach(t),OBr=i(Jl),T(EC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Nze=i(f),qc=n(f,"H2",{class:!0});var QWe=s(qc);CC=n(QWe,"A",{id:!0,class:!0,href:!0});var yqt=s(CC);bEe=n(yqt,"SPAN",{});var xqt=s(bEe);T(Jx.$$.fragment,xqt),xqt.forEach(t),yqt.forEach(t),VBr=i(QWe),vEe=n(QWe,"SPAN",{});var $qt=s(vEe);XBr=r($qt,"TFAutoModelForQuestionAnswering"),$qt.forEach(t),QWe.forEach(t),qze=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Yx.$$.fragment,Yl),zBr=i(Yl),jc=n(Yl,"P",{});var Kte=s(jc);QBr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FZ=n(Kte,"A",{href:!0});var kqt=s(FZ);WBr=r(kqt,"from_pretrained()"),kqt.forEach(t),HBr=r(Kte," class method or the "),TZ=n(Kte,"A",{href:!0});var Sqt=s(TZ);UBr=r(Sqt,"from_config()"),Sqt.forEach(t),JBr=r(Kte,` class
method.`),Kte.forEach(t),YBr=i(Yl),Kx=n(Yl,"P",{});var WWe=s(Kx);KBr=r(WWe,"This class cannot be instantiated directly using "),FEe=n(WWe,"CODE",{});var Rqt=s(FEe);ZBr=r(Rqt,"__init__()"),Rqt.forEach(t),eIr=r(WWe," (throws an error)."),WWe.forEach(t),oIr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var yA=s(Vt);T(Zx.$$.fragment,yA),rIr=i(yA),TEe=n(yA,"P",{});var Pqt=s(TEe);tIr=r(Pqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pqt.forEach(t),aIr=i(yA),Dc=n(yA,"P",{});var Zte=s(Dc);nIr=r(Zte,`Note:
Loading a model from its configuration file does `),MEe=n(Zte,"STRONG",{});var Bqt=s(MEe);sIr=r(Bqt,"not"),Bqt.forEach(t),lIr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(Zte,"A",{href:!0});var Iqt=s(MZ);iIr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),dIr=r(Zte," to load the model weights."),Zte.forEach(t),cIr=i(yA),T(wC.$$.fragment,yA),yA.forEach(t),fIr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(e$.$$.fragment,Kl),mIr=i(Kl),EEe=n(Kl,"P",{});var Nqt=s(EEe);gIr=r(Nqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nqt.forEach(t),hIr=i(Kl),vn=n(Kl,"P",{});var xA=s(vn);pIr=r(xA,"The model class to instantiate is selected based on the "),CEe=n(xA,"CODE",{});var qqt=s(CEe);_Ir=r(qqt,"model_type"),qqt.forEach(t),uIr=r(xA,` property of the config object (either
passed as an argument or loaded from `),wEe=n(xA,"CODE",{});var jqt=s(wEe);bIr=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),vIr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AEe=n(xA,"CODE",{});var Dqt=s(AEe);FIr=r(Dqt,"pretrained_model_name_or_path"),Dqt.forEach(t),TIr=r(xA,":"),xA.forEach(t),MIr=i(Kl),ce=n(Kl,"UL",{});var ge=s(ce);AC=n(ge,"LI",{});var qGe=s(AC);LEe=n(qGe,"STRONG",{});var Gqt=s(LEe);EIr=r(Gqt,"albert"),Gqt.forEach(t),CIr=r(qGe," \u2014 "),EZ=n(qGe,"A",{href:!0});var Oqt=s(EZ);wIr=r(Oqt,"TFAlbertForQuestionAnswering"),Oqt.forEach(t),AIr=r(qGe," (ALBERT model)"),qGe.forEach(t),LIr=i(ge),LC=n(ge,"LI",{});var jGe=s(LC);yEe=n(jGe,"STRONG",{});var Vqt=s(yEe);yIr=r(Vqt,"bert"),Vqt.forEach(t),xIr=r(jGe," \u2014 "),CZ=n(jGe,"A",{href:!0});var Xqt=s(CZ);$Ir=r(Xqt,"TFBertForQuestionAnswering"),Xqt.forEach(t),kIr=r(jGe," (BERT model)"),jGe.forEach(t),SIr=i(ge),yC=n(ge,"LI",{});var DGe=s(yC);xEe=n(DGe,"STRONG",{});var zqt=s(xEe);RIr=r(zqt,"camembert"),zqt.forEach(t),PIr=r(DGe," \u2014 "),wZ=n(DGe,"A",{href:!0});var Qqt=s(wZ);BIr=r(Qqt,"TFCamembertForQuestionAnswering"),Qqt.forEach(t),IIr=r(DGe," (CamemBERT model)"),DGe.forEach(t),NIr=i(ge),xC=n(ge,"LI",{});var GGe=s(xC);$Ee=n(GGe,"STRONG",{});var Wqt=s($Ee);qIr=r(Wqt,"convbert"),Wqt.forEach(t),jIr=r(GGe," \u2014 "),AZ=n(GGe,"A",{href:!0});var Hqt=s(AZ);DIr=r(Hqt,"TFConvBertForQuestionAnswering"),Hqt.forEach(t),GIr=r(GGe," (ConvBERT model)"),GGe.forEach(t),OIr=i(ge),$C=n(ge,"LI",{});var OGe=s($C);kEe=n(OGe,"STRONG",{});var Uqt=s(kEe);VIr=r(Uqt,"deberta"),Uqt.forEach(t),XIr=r(OGe," \u2014 "),LZ=n(OGe,"A",{href:!0});var Jqt=s(LZ);zIr=r(Jqt,"TFDebertaForQuestionAnswering"),Jqt.forEach(t),QIr=r(OGe," (DeBERTa model)"),OGe.forEach(t),WIr=i(ge),kC=n(ge,"LI",{});var VGe=s(kC);SEe=n(VGe,"STRONG",{});var Yqt=s(SEe);HIr=r(Yqt,"deberta-v2"),Yqt.forEach(t),UIr=r(VGe," \u2014 "),yZ=n(VGe,"A",{href:!0});var Kqt=s(yZ);JIr=r(Kqt,"TFDebertaV2ForQuestionAnswering"),Kqt.forEach(t),YIr=r(VGe," (DeBERTa-v2 model)"),VGe.forEach(t),KIr=i(ge),SC=n(ge,"LI",{});var XGe=s(SC);REe=n(XGe,"STRONG",{});var Zqt=s(REe);ZIr=r(Zqt,"distilbert"),Zqt.forEach(t),eNr=r(XGe," \u2014 "),xZ=n(XGe,"A",{href:!0});var ejt=s(xZ);oNr=r(ejt,"TFDistilBertForQuestionAnswering"),ejt.forEach(t),rNr=r(XGe," (DistilBERT model)"),XGe.forEach(t),tNr=i(ge),RC=n(ge,"LI",{});var zGe=s(RC);PEe=n(zGe,"STRONG",{});var ojt=s(PEe);aNr=r(ojt,"electra"),ojt.forEach(t),nNr=r(zGe," \u2014 "),$Z=n(zGe,"A",{href:!0});var rjt=s($Z);sNr=r(rjt,"TFElectraForQuestionAnswering"),rjt.forEach(t),lNr=r(zGe," (ELECTRA model)"),zGe.forEach(t),iNr=i(ge),PC=n(ge,"LI",{});var QGe=s(PC);BEe=n(QGe,"STRONG",{});var tjt=s(BEe);dNr=r(tjt,"flaubert"),tjt.forEach(t),cNr=r(QGe," \u2014 "),kZ=n(QGe,"A",{href:!0});var ajt=s(kZ);fNr=r(ajt,"TFFlaubertForQuestionAnsweringSimple"),ajt.forEach(t),mNr=r(QGe," (FlauBERT model)"),QGe.forEach(t),gNr=i(ge),BC=n(ge,"LI",{});var WGe=s(BC);IEe=n(WGe,"STRONG",{});var njt=s(IEe);hNr=r(njt,"funnel"),njt.forEach(t),pNr=r(WGe," \u2014 "),SZ=n(WGe,"A",{href:!0});var sjt=s(SZ);_Nr=r(sjt,"TFFunnelForQuestionAnswering"),sjt.forEach(t),uNr=r(WGe," (Funnel Transformer model)"),WGe.forEach(t),bNr=i(ge),IC=n(ge,"LI",{});var HGe=s(IC);NEe=n(HGe,"STRONG",{});var ljt=s(NEe);vNr=r(ljt,"gptj"),ljt.forEach(t),FNr=r(HGe," \u2014 "),RZ=n(HGe,"A",{href:!0});var ijt=s(RZ);TNr=r(ijt,"TFGPTJForQuestionAnswering"),ijt.forEach(t),MNr=r(HGe," (GPT-J model)"),HGe.forEach(t),ENr=i(ge),NC=n(ge,"LI",{});var UGe=s(NC);qEe=n(UGe,"STRONG",{});var djt=s(qEe);CNr=r(djt,"longformer"),djt.forEach(t),wNr=r(UGe," \u2014 "),PZ=n(UGe,"A",{href:!0});var cjt=s(PZ);ANr=r(cjt,"TFLongformerForQuestionAnswering"),cjt.forEach(t),LNr=r(UGe," (Longformer model)"),UGe.forEach(t),yNr=i(ge),qC=n(ge,"LI",{});var JGe=s(qC);jEe=n(JGe,"STRONG",{});var fjt=s(jEe);xNr=r(fjt,"mobilebert"),fjt.forEach(t),$Nr=r(JGe," \u2014 "),BZ=n(JGe,"A",{href:!0});var mjt=s(BZ);kNr=r(mjt,"TFMobileBertForQuestionAnswering"),mjt.forEach(t),SNr=r(JGe," (MobileBERT model)"),JGe.forEach(t),RNr=i(ge),jC=n(ge,"LI",{});var YGe=s(jC);DEe=n(YGe,"STRONG",{});var gjt=s(DEe);PNr=r(gjt,"mpnet"),gjt.forEach(t),BNr=r(YGe," \u2014 "),IZ=n(YGe,"A",{href:!0});var hjt=s(IZ);INr=r(hjt,"TFMPNetForQuestionAnswering"),hjt.forEach(t),NNr=r(YGe," (MPNet model)"),YGe.forEach(t),qNr=i(ge),DC=n(ge,"LI",{});var KGe=s(DC);GEe=n(KGe,"STRONG",{});var pjt=s(GEe);jNr=r(pjt,"rembert"),pjt.forEach(t),DNr=r(KGe," \u2014 "),NZ=n(KGe,"A",{href:!0});var _jt=s(NZ);GNr=r(_jt,"TFRemBertForQuestionAnswering"),_jt.forEach(t),ONr=r(KGe," (RemBERT model)"),KGe.forEach(t),VNr=i(ge),GC=n(ge,"LI",{});var ZGe=s(GC);OEe=n(ZGe,"STRONG",{});var ujt=s(OEe);XNr=r(ujt,"roberta"),ujt.forEach(t),zNr=r(ZGe," \u2014 "),qZ=n(ZGe,"A",{href:!0});var bjt=s(qZ);QNr=r(bjt,"TFRobertaForQuestionAnswering"),bjt.forEach(t),WNr=r(ZGe," (RoBERTa model)"),ZGe.forEach(t),HNr=i(ge),OC=n(ge,"LI",{});var eOe=s(OC);VEe=n(eOe,"STRONG",{});var vjt=s(VEe);UNr=r(vjt,"roformer"),vjt.forEach(t),JNr=r(eOe," \u2014 "),jZ=n(eOe,"A",{href:!0});var Fjt=s(jZ);YNr=r(Fjt,"TFRoFormerForQuestionAnswering"),Fjt.forEach(t),KNr=r(eOe," (RoFormer model)"),eOe.forEach(t),ZNr=i(ge),VC=n(ge,"LI",{});var oOe=s(VC);XEe=n(oOe,"STRONG",{});var Tjt=s(XEe);eqr=r(Tjt,"xlm"),Tjt.forEach(t),oqr=r(oOe," \u2014 "),DZ=n(oOe,"A",{href:!0});var Mjt=s(DZ);rqr=r(Mjt,"TFXLMForQuestionAnsweringSimple"),Mjt.forEach(t),tqr=r(oOe," (XLM model)"),oOe.forEach(t),aqr=i(ge),XC=n(ge,"LI",{});var rOe=s(XC);zEe=n(rOe,"STRONG",{});var Ejt=s(zEe);nqr=r(Ejt,"xlm-roberta"),Ejt.forEach(t),sqr=r(rOe," \u2014 "),GZ=n(rOe,"A",{href:!0});var Cjt=s(GZ);lqr=r(Cjt,"TFXLMRobertaForQuestionAnswering"),Cjt.forEach(t),iqr=r(rOe," (XLM-RoBERTa model)"),rOe.forEach(t),dqr=i(ge),zC=n(ge,"LI",{});var tOe=s(zC);QEe=n(tOe,"STRONG",{});var wjt=s(QEe);cqr=r(wjt,"xlnet"),wjt.forEach(t),fqr=r(tOe," \u2014 "),OZ=n(tOe,"A",{href:!0});var Ajt=s(OZ);mqr=r(Ajt,"TFXLNetForQuestionAnsweringSimple"),Ajt.forEach(t),gqr=r(tOe," (XLNet model)"),tOe.forEach(t),ge.forEach(t),hqr=i(Kl),T(QC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),jze=i(f),Gc=n(f,"H2",{class:!0});var HWe=s(Gc);WC=n(HWe,"A",{id:!0,class:!0,href:!0});var Ljt=s(WC);WEe=n(Ljt,"SPAN",{});var yjt=s(WEe);T(o$.$$.fragment,yjt),yjt.forEach(t),Ljt.forEach(t),pqr=i(HWe),HEe=n(HWe,"SPAN",{});var xjt=s(HEe);_qr=r(xjt,"TFAutoModelForVision2Seq"),xjt.forEach(t),HWe.forEach(t),Dze=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(r$.$$.fragment,Zl),uqr=i(Zl),Oc=n(Zl,"P",{});var eae=s(Oc);bqr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VZ=n(eae,"A",{href:!0});var $jt=s(VZ);vqr=r($jt,"from_pretrained()"),$jt.forEach(t),Fqr=r(eae," class method or the "),XZ=n(eae,"A",{href:!0});var kjt=s(XZ);Tqr=r(kjt,"from_config()"),kjt.forEach(t),Mqr=r(eae,` class
method.`),eae.forEach(t),Eqr=i(Zl),t$=n(Zl,"P",{});var UWe=s(t$);Cqr=r(UWe,"This class cannot be instantiated directly using "),UEe=n(UWe,"CODE",{});var Sjt=s(UEe);wqr=r(Sjt,"__init__()"),Sjt.forEach(t),Aqr=r(UWe," (throws an error)."),UWe.forEach(t),Lqr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var $A=s(Xt);T(a$.$$.fragment,$A),yqr=i($A),JEe=n($A,"P",{});var Rjt=s(JEe);xqr=r(Rjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rjt.forEach(t),$qr=i($A),Vc=n($A,"P",{});var oae=s(Vc);kqr=r(oae,`Note:
Loading a model from its configuration file does `),YEe=n(oae,"STRONG",{});var Pjt=s(YEe);Sqr=r(Pjt,"not"),Pjt.forEach(t),Rqr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(oae,"A",{href:!0});var Bjt=s(zZ);Pqr=r(Bjt,"from_pretrained()"),Bjt.forEach(t),Bqr=r(oae," to load the model weights."),oae.forEach(t),Iqr=i($A),T(HC.$$.fragment,$A),$A.forEach(t),Nqr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(n$.$$.fragment,ei),qqr=i(ei),KEe=n(ei,"P",{});var Ijt=s(KEe);jqr=r(Ijt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ijt.forEach(t),Dqr=i(ei),Fn=n(ei,"P",{});var kA=s(Fn);Gqr=r(kA,"The model class to instantiate is selected based on the "),ZEe=n(kA,"CODE",{});var Njt=s(ZEe);Oqr=r(Njt,"model_type"),Njt.forEach(t),Vqr=r(kA,` property of the config object (either
passed as an argument or loaded from `),eCe=n(kA,"CODE",{});var qjt=s(eCe);Xqr=r(qjt,"pretrained_model_name_or_path"),qjt.forEach(t),zqr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=n(kA,"CODE",{});var jjt=s(oCe);Qqr=r(jjt,"pretrained_model_name_or_path"),jjt.forEach(t),Wqr=r(kA,":"),kA.forEach(t),Hqr=i(ei),rCe=n(ei,"UL",{});var Djt=s(rCe);UC=n(Djt,"LI",{});var aOe=s(UC);tCe=n(aOe,"STRONG",{});var Gjt=s(tCe);Uqr=r(Gjt,"vision-encoder-decoder"),Gjt.forEach(t),Jqr=r(aOe," \u2014 "),QZ=n(aOe,"A",{href:!0});var Ojt=s(QZ);Yqr=r(Ojt,"TFVisionEncoderDecoderModel"),Ojt.forEach(t),Kqr=r(aOe," (Vision Encoder decoder model)"),aOe.forEach(t),Djt.forEach(t),Zqr=i(ei),T(JC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Gze=i(f),Xc=n(f,"H2",{class:!0});var JWe=s(Xc);YC=n(JWe,"A",{id:!0,class:!0,href:!0});var Vjt=s(YC);aCe=n(Vjt,"SPAN",{});var Xjt=s(aCe);T(s$.$$.fragment,Xjt),Xjt.forEach(t),Vjt.forEach(t),ejr=i(JWe),nCe=n(JWe,"SPAN",{});var zjt=s(nCe);ojr=r(zjt,"TFAutoModelForSpeechSeq2Seq"),zjt.forEach(t),JWe.forEach(t),Oze=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(l$.$$.fragment,oi),rjr=i(oi),zc=n(oi,"P",{});var rae=s(zc);tjr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WZ=n(rae,"A",{href:!0});var Qjt=s(WZ);ajr=r(Qjt,"from_pretrained()"),Qjt.forEach(t),njr=r(rae," class method or the "),HZ=n(rae,"A",{href:!0});var Wjt=s(HZ);sjr=r(Wjt,"from_config()"),Wjt.forEach(t),ljr=r(rae,` class
method.`),rae.forEach(t),ijr=i(oi),i$=n(oi,"P",{});var YWe=s(i$);djr=r(YWe,"This class cannot be instantiated directly using "),sCe=n(YWe,"CODE",{});var Hjt=s(sCe);cjr=r(Hjt,"__init__()"),Hjt.forEach(t),fjr=r(YWe," (throws an error)."),YWe.forEach(t),mjr=i(oi),zt=n(oi,"DIV",{class:!0});var SA=s(zt);T(d$.$$.fragment,SA),gjr=i(SA),lCe=n(SA,"P",{});var Ujt=s(lCe);hjr=r(Ujt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ujt.forEach(t),pjr=i(SA),Qc=n(SA,"P",{});var tae=s(Qc);_jr=r(tae,`Note:
Loading a model from its configuration file does `),iCe=n(tae,"STRONG",{});var Jjt=s(iCe);ujr=r(Jjt,"not"),Jjt.forEach(t),bjr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(tae,"A",{href:!0});var Yjt=s(UZ);vjr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),Fjr=r(tae," to load the model weights."),tae.forEach(t),Tjr=i(SA),T(KC.$$.fragment,SA),SA.forEach(t),Mjr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(c$.$$.fragment,ri),Ejr=i(ri),dCe=n(ri,"P",{});var Kjt=s(dCe);Cjr=r(Kjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kjt.forEach(t),wjr=i(ri),Tn=n(ri,"P",{});var RA=s(Tn);Ajr=r(RA,"The model class to instantiate is selected based on the "),cCe=n(RA,"CODE",{});var Zjt=s(cCe);Ljr=r(Zjt,"model_type"),Zjt.forEach(t),yjr=r(RA,` property of the config object (either
passed as an argument or loaded from `),fCe=n(RA,"CODE",{});var eDt=s(fCe);xjr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),$jr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(RA,"CODE",{});var oDt=s(mCe);kjr=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),Sjr=r(RA,":"),RA.forEach(t),Rjr=i(ri),gCe=n(ri,"UL",{});var rDt=s(gCe);ZC=n(rDt,"LI",{});var nOe=s(ZC);hCe=n(nOe,"STRONG",{});var tDt=s(hCe);Pjr=r(tDt,"speech_to_text"),tDt.forEach(t),Bjr=r(nOe," \u2014 "),JZ=n(nOe,"A",{href:!0});var aDt=s(JZ);Ijr=r(aDt,"TFSpeech2TextForConditionalGeneration"),aDt.forEach(t),Njr=r(nOe," (Speech2Text model)"),nOe.forEach(t),rDt.forEach(t),qjr=i(ri),T(e3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Vze=i(f),Wc=n(f,"H2",{class:!0});var KWe=s(Wc);o3=n(KWe,"A",{id:!0,class:!0,href:!0});var nDt=s(o3);pCe=n(nDt,"SPAN",{});var sDt=s(pCe);T(f$.$$.fragment,sDt),sDt.forEach(t),nDt.forEach(t),jjr=i(KWe),_Ce=n(KWe,"SPAN",{});var lDt=s(_Ce);Djr=r(lDt,"FlaxAutoModel"),lDt.forEach(t),KWe.forEach(t),Xze=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(m$.$$.fragment,ti),Gjr=i(ti),Hc=n(ti,"P",{});var aae=s(Hc);Ojr=r(aae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YZ=n(aae,"A",{href:!0});var iDt=s(YZ);Vjr=r(iDt,"from_pretrained()"),iDt.forEach(t),Xjr=r(aae," class method or the "),KZ=n(aae,"A",{href:!0});var dDt=s(KZ);zjr=r(dDt,"from_config()"),dDt.forEach(t),Qjr=r(aae,` class
method.`),aae.forEach(t),Wjr=i(ti),g$=n(ti,"P",{});var ZWe=s(g$);Hjr=r(ZWe,"This class cannot be instantiated directly using "),uCe=n(ZWe,"CODE",{});var cDt=s(uCe);Ujr=r(cDt,"__init__()"),cDt.forEach(t),Jjr=r(ZWe," (throws an error)."),ZWe.forEach(t),Yjr=i(ti),Qt=n(ti,"DIV",{class:!0});var PA=s(Qt);T(h$.$$.fragment,PA),Kjr=i(PA),bCe=n(PA,"P",{});var fDt=s(bCe);Zjr=r(fDt,"Instantiates one of the base model classes of the library from a configuration."),fDt.forEach(t),eDr=i(PA),Uc=n(PA,"P",{});var nae=s(Uc);oDr=r(nae,`Note:
Loading a model from its configuration file does `),vCe=n(nae,"STRONG",{});var mDt=s(vCe);rDr=r(mDt,"not"),mDt.forEach(t),tDr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(nae,"A",{href:!0});var gDt=s(ZZ);aDr=r(gDt,"from_pretrained()"),gDt.forEach(t),nDr=r(nae," to load the model weights."),nae.forEach(t),sDr=i(PA),T(r3.$$.fragment,PA),PA.forEach(t),lDr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(p$.$$.fragment,ai),iDr=i(ai),FCe=n(ai,"P",{});var hDt=s(FCe);dDr=r(hDt,"Instantiate one of the base model classes of the library from a pretrained model."),hDt.forEach(t),cDr=i(ai),Mn=n(ai,"P",{});var BA=s(Mn);fDr=r(BA,"The model class to instantiate is selected based on the "),TCe=n(BA,"CODE",{});var pDt=s(TCe);mDr=r(pDt,"model_type"),pDt.forEach(t),gDr=r(BA,` property of the config object (either
passed as an argument or loaded from `),MCe=n(BA,"CODE",{});var _Dt=s(MCe);hDr=r(_Dt,"pretrained_model_name_or_path"),_Dt.forEach(t),pDr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=n(BA,"CODE",{});var uDt=s(ECe);_Dr=r(uDt,"pretrained_model_name_or_path"),uDt.forEach(t),uDr=r(BA,":"),BA.forEach(t),bDr=i(ai),oe=n(ai,"UL",{});var ae=s(oe);t3=n(ae,"LI",{});var sOe=s(t3);CCe=n(sOe,"STRONG",{});var bDt=s(CCe);vDr=r(bDt,"albert"),bDt.forEach(t),FDr=r(sOe," \u2014 "),eee=n(sOe,"A",{href:!0});var vDt=s(eee);TDr=r(vDt,"FlaxAlbertModel"),vDt.forEach(t),MDr=r(sOe," (ALBERT model)"),sOe.forEach(t),EDr=i(ae),a3=n(ae,"LI",{});var lOe=s(a3);wCe=n(lOe,"STRONG",{});var FDt=s(wCe);CDr=r(FDt,"bart"),FDt.forEach(t),wDr=r(lOe," \u2014 "),oee=n(lOe,"A",{href:!0});var TDt=s(oee);ADr=r(TDt,"FlaxBartModel"),TDt.forEach(t),LDr=r(lOe," (BART model)"),lOe.forEach(t),yDr=i(ae),n3=n(ae,"LI",{});var iOe=s(n3);ACe=n(iOe,"STRONG",{});var MDt=s(ACe);xDr=r(MDt,"beit"),MDt.forEach(t),$Dr=r(iOe," \u2014 "),ree=n(iOe,"A",{href:!0});var EDt=s(ree);kDr=r(EDt,"FlaxBeitModel"),EDt.forEach(t),SDr=r(iOe," (BEiT model)"),iOe.forEach(t),RDr=i(ae),s3=n(ae,"LI",{});var dOe=s(s3);LCe=n(dOe,"STRONG",{});var CDt=s(LCe);PDr=r(CDt,"bert"),CDt.forEach(t),BDr=r(dOe," \u2014 "),tee=n(dOe,"A",{href:!0});var wDt=s(tee);IDr=r(wDt,"FlaxBertModel"),wDt.forEach(t),NDr=r(dOe," (BERT model)"),dOe.forEach(t),qDr=i(ae),l3=n(ae,"LI",{});var cOe=s(l3);yCe=n(cOe,"STRONG",{});var ADt=s(yCe);jDr=r(ADt,"big_bird"),ADt.forEach(t),DDr=r(cOe," \u2014 "),aee=n(cOe,"A",{href:!0});var LDt=s(aee);GDr=r(LDt,"FlaxBigBirdModel"),LDt.forEach(t),ODr=r(cOe," (BigBird model)"),cOe.forEach(t),VDr=i(ae),i3=n(ae,"LI",{});var fOe=s(i3);xCe=n(fOe,"STRONG",{});var yDt=s(xCe);XDr=r(yDt,"blenderbot"),yDt.forEach(t),zDr=r(fOe," \u2014 "),nee=n(fOe,"A",{href:!0});var xDt=s(nee);QDr=r(xDt,"FlaxBlenderbotModel"),xDt.forEach(t),WDr=r(fOe," (Blenderbot model)"),fOe.forEach(t),HDr=i(ae),d3=n(ae,"LI",{});var mOe=s(d3);$Ce=n(mOe,"STRONG",{});var $Dt=s($Ce);UDr=r($Dt,"blenderbot-small"),$Dt.forEach(t),JDr=r(mOe," \u2014 "),see=n(mOe,"A",{href:!0});var kDt=s(see);YDr=r(kDt,"FlaxBlenderbotSmallModel"),kDt.forEach(t),KDr=r(mOe," (BlenderbotSmall model)"),mOe.forEach(t),ZDr=i(ae),c3=n(ae,"LI",{});var gOe=s(c3);kCe=n(gOe,"STRONG",{});var SDt=s(kCe);eGr=r(SDt,"clip"),SDt.forEach(t),oGr=r(gOe," \u2014 "),lee=n(gOe,"A",{href:!0});var RDt=s(lee);rGr=r(RDt,"FlaxCLIPModel"),RDt.forEach(t),tGr=r(gOe," (CLIP model)"),gOe.forEach(t),aGr=i(ae),f3=n(ae,"LI",{});var hOe=s(f3);SCe=n(hOe,"STRONG",{});var PDt=s(SCe);nGr=r(PDt,"distilbert"),PDt.forEach(t),sGr=r(hOe," \u2014 "),iee=n(hOe,"A",{href:!0});var BDt=s(iee);lGr=r(BDt,"FlaxDistilBertModel"),BDt.forEach(t),iGr=r(hOe," (DistilBERT model)"),hOe.forEach(t),dGr=i(ae),m3=n(ae,"LI",{});var pOe=s(m3);RCe=n(pOe,"STRONG",{});var IDt=s(RCe);cGr=r(IDt,"electra"),IDt.forEach(t),fGr=r(pOe," \u2014 "),dee=n(pOe,"A",{href:!0});var NDt=s(dee);mGr=r(NDt,"FlaxElectraModel"),NDt.forEach(t),gGr=r(pOe," (ELECTRA model)"),pOe.forEach(t),hGr=i(ae),g3=n(ae,"LI",{});var _Oe=s(g3);PCe=n(_Oe,"STRONG",{});var qDt=s(PCe);pGr=r(qDt,"gpt2"),qDt.forEach(t),_Gr=r(_Oe," \u2014 "),cee=n(_Oe,"A",{href:!0});var jDt=s(cee);uGr=r(jDt,"FlaxGPT2Model"),jDt.forEach(t),bGr=r(_Oe," (OpenAI GPT-2 model)"),_Oe.forEach(t),vGr=i(ae),h3=n(ae,"LI",{});var uOe=s(h3);BCe=n(uOe,"STRONG",{});var DDt=s(BCe);FGr=r(DDt,"gpt_neo"),DDt.forEach(t),TGr=r(uOe," \u2014 "),fee=n(uOe,"A",{href:!0});var GDt=s(fee);MGr=r(GDt,"FlaxGPTNeoModel"),GDt.forEach(t),EGr=r(uOe," (GPT Neo model)"),uOe.forEach(t),CGr=i(ae),p3=n(ae,"LI",{});var bOe=s(p3);ICe=n(bOe,"STRONG",{});var ODt=s(ICe);wGr=r(ODt,"gptj"),ODt.forEach(t),AGr=r(bOe," \u2014 "),mee=n(bOe,"A",{href:!0});var VDt=s(mee);LGr=r(VDt,"FlaxGPTJModel"),VDt.forEach(t),yGr=r(bOe," (GPT-J model)"),bOe.forEach(t),xGr=i(ae),_3=n(ae,"LI",{});var vOe=s(_3);NCe=n(vOe,"STRONG",{});var XDt=s(NCe);$Gr=r(XDt,"longt5"),XDt.forEach(t),kGr=r(vOe," \u2014 "),gee=n(vOe,"A",{href:!0});var zDt=s(gee);SGr=r(zDt,"FlaxLongT5Model"),zDt.forEach(t),RGr=r(vOe," (LongT5 model)"),vOe.forEach(t),PGr=i(ae),u3=n(ae,"LI",{});var FOe=s(u3);qCe=n(FOe,"STRONG",{});var QDt=s(qCe);BGr=r(QDt,"marian"),QDt.forEach(t),IGr=r(FOe," \u2014 "),hee=n(FOe,"A",{href:!0});var WDt=s(hee);NGr=r(WDt,"FlaxMarianModel"),WDt.forEach(t),qGr=r(FOe," (Marian model)"),FOe.forEach(t),jGr=i(ae),b3=n(ae,"LI",{});var TOe=s(b3);jCe=n(TOe,"STRONG",{});var HDt=s(jCe);DGr=r(HDt,"mbart"),HDt.forEach(t),GGr=r(TOe," \u2014 "),pee=n(TOe,"A",{href:!0});var UDt=s(pee);OGr=r(UDt,"FlaxMBartModel"),UDt.forEach(t),VGr=r(TOe," (mBART model)"),TOe.forEach(t),XGr=i(ae),v3=n(ae,"LI",{});var MOe=s(v3);DCe=n(MOe,"STRONG",{});var JDt=s(DCe);zGr=r(JDt,"mt5"),JDt.forEach(t),QGr=r(MOe," \u2014 "),_ee=n(MOe,"A",{href:!0});var YDt=s(_ee);WGr=r(YDt,"FlaxMT5Model"),YDt.forEach(t),HGr=r(MOe," (MT5 model)"),MOe.forEach(t),UGr=i(ae),F3=n(ae,"LI",{});var EOe=s(F3);GCe=n(EOe,"STRONG",{});var KDt=s(GCe);JGr=r(KDt,"opt"),KDt.forEach(t),YGr=r(EOe," \u2014 "),uee=n(EOe,"A",{href:!0});var ZDt=s(uee);KGr=r(ZDt,"FlaxOPTModel"),ZDt.forEach(t),ZGr=r(EOe," (OPT model)"),EOe.forEach(t),eOr=i(ae),T3=n(ae,"LI",{});var COe=s(T3);OCe=n(COe,"STRONG",{});var eGt=s(OCe);oOr=r(eGt,"pegasus"),eGt.forEach(t),rOr=r(COe," \u2014 "),bee=n(COe,"A",{href:!0});var oGt=s(bee);tOr=r(oGt,"FlaxPegasusModel"),oGt.forEach(t),aOr=r(COe," (Pegasus model)"),COe.forEach(t),nOr=i(ae),M3=n(ae,"LI",{});var wOe=s(M3);VCe=n(wOe,"STRONG",{});var rGt=s(VCe);sOr=r(rGt,"roberta"),rGt.forEach(t),lOr=r(wOe," \u2014 "),vee=n(wOe,"A",{href:!0});var tGt=s(vee);iOr=r(tGt,"FlaxRobertaModel"),tGt.forEach(t),dOr=r(wOe," (RoBERTa model)"),wOe.forEach(t),cOr=i(ae),E3=n(ae,"LI",{});var AOe=s(E3);XCe=n(AOe,"STRONG",{});var aGt=s(XCe);fOr=r(aGt,"roformer"),aGt.forEach(t),mOr=r(AOe," \u2014 "),Fee=n(AOe,"A",{href:!0});var nGt=s(Fee);gOr=r(nGt,"FlaxRoFormerModel"),nGt.forEach(t),hOr=r(AOe," (RoFormer model)"),AOe.forEach(t),pOr=i(ae),C3=n(ae,"LI",{});var LOe=s(C3);zCe=n(LOe,"STRONG",{});var sGt=s(zCe);_Or=r(sGt,"t5"),sGt.forEach(t),uOr=r(LOe," \u2014 "),Tee=n(LOe,"A",{href:!0});var lGt=s(Tee);bOr=r(lGt,"FlaxT5Model"),lGt.forEach(t),vOr=r(LOe," (T5 model)"),LOe.forEach(t),FOr=i(ae),w3=n(ae,"LI",{});var yOe=s(w3);QCe=n(yOe,"STRONG",{});var iGt=s(QCe);TOr=r(iGt,"vision-text-dual-encoder"),iGt.forEach(t),MOr=r(yOe," \u2014 "),Mee=n(yOe,"A",{href:!0});var dGt=s(Mee);EOr=r(dGt,"FlaxVisionTextDualEncoderModel"),dGt.forEach(t),COr=r(yOe," (VisionTextDualEncoder model)"),yOe.forEach(t),wOr=i(ae),A3=n(ae,"LI",{});var xOe=s(A3);WCe=n(xOe,"STRONG",{});var cGt=s(WCe);AOr=r(cGt,"vit"),cGt.forEach(t),LOr=r(xOe," \u2014 "),Eee=n(xOe,"A",{href:!0});var fGt=s(Eee);yOr=r(fGt,"FlaxViTModel"),fGt.forEach(t),xOr=r(xOe," (ViT model)"),xOe.forEach(t),$Or=i(ae),L3=n(ae,"LI",{});var $Oe=s(L3);HCe=n($Oe,"STRONG",{});var mGt=s(HCe);kOr=r(mGt,"wav2vec2"),mGt.forEach(t),SOr=r($Oe," \u2014 "),Cee=n($Oe,"A",{href:!0});var gGt=s(Cee);ROr=r(gGt,"FlaxWav2Vec2Model"),gGt.forEach(t),POr=r($Oe," (Wav2Vec2 model)"),$Oe.forEach(t),BOr=i(ae),y3=n(ae,"LI",{});var kOe=s(y3);UCe=n(kOe,"STRONG",{});var hGt=s(UCe);IOr=r(hGt,"xglm"),hGt.forEach(t),NOr=r(kOe," \u2014 "),wee=n(kOe,"A",{href:!0});var pGt=s(wee);qOr=r(pGt,"FlaxXGLMModel"),pGt.forEach(t),jOr=r(kOe," (XGLM model)"),kOe.forEach(t),DOr=i(ae),x3=n(ae,"LI",{});var SOe=s(x3);JCe=n(SOe,"STRONG",{});var _Gt=s(JCe);GOr=r(_Gt,"xlm-roberta"),_Gt.forEach(t),OOr=r(SOe," \u2014 "),Aee=n(SOe,"A",{href:!0});var uGt=s(Aee);VOr=r(uGt,"FlaxXLMRobertaModel"),uGt.forEach(t),XOr=r(SOe," (XLM-RoBERTa model)"),SOe.forEach(t),ae.forEach(t),zOr=i(ai),T($3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),zze=i(f),Jc=n(f,"H2",{class:!0});var eHe=s(Jc);k3=n(eHe,"A",{id:!0,class:!0,href:!0});var bGt=s(k3);YCe=n(bGt,"SPAN",{});var vGt=s(YCe);T(_$.$$.fragment,vGt),vGt.forEach(t),bGt.forEach(t),QOr=i(eHe),KCe=n(eHe,"SPAN",{});var FGt=s(KCe);WOr=r(FGt,"FlaxAutoModelForCausalLM"),FGt.forEach(t),eHe.forEach(t),Qze=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(u$.$$.fragment,ni),HOr=i(ni),Yc=n(ni,"P",{});var sae=s(Yc);UOr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lee=n(sae,"A",{href:!0});var TGt=s(Lee);JOr=r(TGt,"from_pretrained()"),TGt.forEach(t),YOr=r(sae," class method or the "),yee=n(sae,"A",{href:!0});var MGt=s(yee);KOr=r(MGt,"from_config()"),MGt.forEach(t),ZOr=r(sae,` class
method.`),sae.forEach(t),eVr=i(ni),b$=n(ni,"P",{});var oHe=s(b$);oVr=r(oHe,"This class cannot be instantiated directly using "),ZCe=n(oHe,"CODE",{});var EGt=s(ZCe);rVr=r(EGt,"__init__()"),EGt.forEach(t),tVr=r(oHe," (throws an error)."),oHe.forEach(t),aVr=i(ni),Wt=n(ni,"DIV",{class:!0});var IA=s(Wt);T(v$.$$.fragment,IA),nVr=i(IA),e3e=n(IA,"P",{});var CGt=s(e3e);sVr=r(CGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CGt.forEach(t),lVr=i(IA),Kc=n(IA,"P",{});var lae=s(Kc);iVr=r(lae,`Note:
Loading a model from its configuration file does `),o3e=n(lae,"STRONG",{});var wGt=s(o3e);dVr=r(wGt,"not"),wGt.forEach(t),cVr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(lae,"A",{href:!0});var AGt=s(xee);fVr=r(AGt,"from_pretrained()"),AGt.forEach(t),mVr=r(lae," to load the model weights."),lae.forEach(t),gVr=i(IA),T(S3.$$.fragment,IA),IA.forEach(t),hVr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(F$.$$.fragment,si),pVr=i(si),r3e=n(si,"P",{});var LGt=s(r3e);_Vr=r(LGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),LGt.forEach(t),uVr=i(si),En=n(si,"P",{});var NA=s(En);bVr=r(NA,"The model class to instantiate is selected based on the "),t3e=n(NA,"CODE",{});var yGt=s(t3e);vVr=r(yGt,"model_type"),yGt.forEach(t),FVr=r(NA,` property of the config object (either
passed as an argument or loaded from `),a3e=n(NA,"CODE",{});var xGt=s(a3e);TVr=r(xGt,"pretrained_model_name_or_path"),xGt.forEach(t),MVr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(NA,"CODE",{});var $Gt=s(n3e);EVr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),CVr=r(NA,":"),NA.forEach(t),wVr=i(si),xe=n(si,"UL",{});var Ne=s(xe);R3=n(Ne,"LI",{});var ROe=s(R3);s3e=n(ROe,"STRONG",{});var kGt=s(s3e);AVr=r(kGt,"bart"),kGt.forEach(t),LVr=r(ROe," \u2014 "),$ee=n(ROe,"A",{href:!0});var SGt=s($ee);yVr=r(SGt,"FlaxBartForCausalLM"),SGt.forEach(t),xVr=r(ROe," (BART model)"),ROe.forEach(t),$Vr=i(Ne),P3=n(Ne,"LI",{});var POe=s(P3);l3e=n(POe,"STRONG",{});var RGt=s(l3e);kVr=r(RGt,"bert"),RGt.forEach(t),SVr=r(POe," \u2014 "),kee=n(POe,"A",{href:!0});var PGt=s(kee);RVr=r(PGt,"FlaxBertForCausalLM"),PGt.forEach(t),PVr=r(POe," (BERT model)"),POe.forEach(t),BVr=i(Ne),B3=n(Ne,"LI",{});var BOe=s(B3);i3e=n(BOe,"STRONG",{});var BGt=s(i3e);IVr=r(BGt,"big_bird"),BGt.forEach(t),NVr=r(BOe," \u2014 "),See=n(BOe,"A",{href:!0});var IGt=s(See);qVr=r(IGt,"FlaxBigBirdForCausalLM"),IGt.forEach(t),jVr=r(BOe," (BigBird model)"),BOe.forEach(t),DVr=i(Ne),I3=n(Ne,"LI",{});var IOe=s(I3);d3e=n(IOe,"STRONG",{});var NGt=s(d3e);GVr=r(NGt,"electra"),NGt.forEach(t),OVr=r(IOe," \u2014 "),Ree=n(IOe,"A",{href:!0});var qGt=s(Ree);VVr=r(qGt,"FlaxElectraForCausalLM"),qGt.forEach(t),XVr=r(IOe," (ELECTRA model)"),IOe.forEach(t),zVr=i(Ne),N3=n(Ne,"LI",{});var NOe=s(N3);c3e=n(NOe,"STRONG",{});var jGt=s(c3e);QVr=r(jGt,"gpt2"),jGt.forEach(t),WVr=r(NOe," \u2014 "),Pee=n(NOe,"A",{href:!0});var DGt=s(Pee);HVr=r(DGt,"FlaxGPT2LMHeadModel"),DGt.forEach(t),UVr=r(NOe," (OpenAI GPT-2 model)"),NOe.forEach(t),JVr=i(Ne),q3=n(Ne,"LI",{});var qOe=s(q3);f3e=n(qOe,"STRONG",{});var GGt=s(f3e);YVr=r(GGt,"gpt_neo"),GGt.forEach(t),KVr=r(qOe," \u2014 "),Bee=n(qOe,"A",{href:!0});var OGt=s(Bee);ZVr=r(OGt,"FlaxGPTNeoForCausalLM"),OGt.forEach(t),eXr=r(qOe," (GPT Neo model)"),qOe.forEach(t),oXr=i(Ne),j3=n(Ne,"LI",{});var jOe=s(j3);m3e=n(jOe,"STRONG",{});var VGt=s(m3e);rXr=r(VGt,"gptj"),VGt.forEach(t),tXr=r(jOe," \u2014 "),Iee=n(jOe,"A",{href:!0});var XGt=s(Iee);aXr=r(XGt,"FlaxGPTJForCausalLM"),XGt.forEach(t),nXr=r(jOe," (GPT-J model)"),jOe.forEach(t),sXr=i(Ne),D3=n(Ne,"LI",{});var DOe=s(D3);g3e=n(DOe,"STRONG",{});var zGt=s(g3e);lXr=r(zGt,"opt"),zGt.forEach(t),iXr=r(DOe," \u2014 "),Nee=n(DOe,"A",{href:!0});var QGt=s(Nee);dXr=r(QGt,"FlaxOPTForCausalLM"),QGt.forEach(t),cXr=r(DOe," (OPT model)"),DOe.forEach(t),fXr=i(Ne),G3=n(Ne,"LI",{});var GOe=s(G3);h3e=n(GOe,"STRONG",{});var WGt=s(h3e);mXr=r(WGt,"roberta"),WGt.forEach(t),gXr=r(GOe," \u2014 "),qee=n(GOe,"A",{href:!0});var HGt=s(qee);hXr=r(HGt,"FlaxRobertaForCausalLM"),HGt.forEach(t),pXr=r(GOe," (RoBERTa model)"),GOe.forEach(t),_Xr=i(Ne),O3=n(Ne,"LI",{});var OOe=s(O3);p3e=n(OOe,"STRONG",{});var UGt=s(p3e);uXr=r(UGt,"xglm"),UGt.forEach(t),bXr=r(OOe," \u2014 "),jee=n(OOe,"A",{href:!0});var JGt=s(jee);vXr=r(JGt,"FlaxXGLMForCausalLM"),JGt.forEach(t),FXr=r(OOe," (XGLM model)"),OOe.forEach(t),Ne.forEach(t),TXr=i(si),T(V3.$$.fragment,si),si.forEach(t),ni.forEach(t),Wze=i(f),Zc=n(f,"H2",{class:!0});var rHe=s(Zc);X3=n(rHe,"A",{id:!0,class:!0,href:!0});var YGt=s(X3);_3e=n(YGt,"SPAN",{});var KGt=s(_3e);T(T$.$$.fragment,KGt),KGt.forEach(t),YGt.forEach(t),MXr=i(rHe),u3e=n(rHe,"SPAN",{});var ZGt=s(u3e);EXr=r(ZGt,"FlaxAutoModelForPreTraining"),ZGt.forEach(t),rHe.forEach(t),Hze=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(M$.$$.fragment,li),CXr=i(li),ef=n(li,"P",{});var iae=s(ef);wXr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Dee=n(iae,"A",{href:!0});var eOt=s(Dee);AXr=r(eOt,"from_pretrained()"),eOt.forEach(t),LXr=r(iae," class method or the "),Gee=n(iae,"A",{href:!0});var oOt=s(Gee);yXr=r(oOt,"from_config()"),oOt.forEach(t),xXr=r(iae,` class
method.`),iae.forEach(t),$Xr=i(li),E$=n(li,"P",{});var tHe=s(E$);kXr=r(tHe,"This class cannot be instantiated directly using "),b3e=n(tHe,"CODE",{});var rOt=s(b3e);SXr=r(rOt,"__init__()"),rOt.forEach(t),RXr=r(tHe," (throws an error)."),tHe.forEach(t),PXr=i(li),Ht=n(li,"DIV",{class:!0});var qA=s(Ht);T(C$.$$.fragment,qA),BXr=i(qA),v3e=n(qA,"P",{});var tOt=s(v3e);IXr=r(tOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tOt.forEach(t),NXr=i(qA),of=n(qA,"P",{});var dae=s(of);qXr=r(dae,`Note:
Loading a model from its configuration file does `),F3e=n(dae,"STRONG",{});var aOt=s(F3e);jXr=r(aOt,"not"),aOt.forEach(t),DXr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=n(dae,"A",{href:!0});var nOt=s(Oee);GXr=r(nOt,"from_pretrained()"),nOt.forEach(t),OXr=r(dae," to load the model weights."),dae.forEach(t),VXr=i(qA),T(z3.$$.fragment,qA),qA.forEach(t),XXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(w$.$$.fragment,ii),zXr=i(ii),T3e=n(ii,"P",{});var sOt=s(T3e);QXr=r(sOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sOt.forEach(t),WXr=i(ii),Cn=n(ii,"P",{});var jA=s(Cn);HXr=r(jA,"The model class to instantiate is selected based on the "),M3e=n(jA,"CODE",{});var lOt=s(M3e);UXr=r(lOt,"model_type"),lOt.forEach(t),JXr=r(jA,` property of the config object (either
passed as an argument or loaded from `),E3e=n(jA,"CODE",{});var iOt=s(E3e);YXr=r(iOt,"pretrained_model_name_or_path"),iOt.forEach(t),KXr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(jA,"CODE",{});var dOt=s(C3e);ZXr=r(dOt,"pretrained_model_name_or_path"),dOt.forEach(t),ezr=r(jA,":"),jA.forEach(t),ozr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);Q3=n(we,"LI",{});var VOe=s(Q3);w3e=n(VOe,"STRONG",{});var cOt=s(w3e);rzr=r(cOt,"albert"),cOt.forEach(t),tzr=r(VOe," \u2014 "),Vee=n(VOe,"A",{href:!0});var fOt=s(Vee);azr=r(fOt,"FlaxAlbertForPreTraining"),fOt.forEach(t),nzr=r(VOe," (ALBERT model)"),VOe.forEach(t),szr=i(we),W3=n(we,"LI",{});var XOe=s(W3);A3e=n(XOe,"STRONG",{});var mOt=s(A3e);lzr=r(mOt,"bart"),mOt.forEach(t),izr=r(XOe," \u2014 "),Xee=n(XOe,"A",{href:!0});var gOt=s(Xee);dzr=r(gOt,"FlaxBartForConditionalGeneration"),gOt.forEach(t),czr=r(XOe," (BART model)"),XOe.forEach(t),fzr=i(we),H3=n(we,"LI",{});var zOe=s(H3);L3e=n(zOe,"STRONG",{});var hOt=s(L3e);mzr=r(hOt,"bert"),hOt.forEach(t),gzr=r(zOe," \u2014 "),zee=n(zOe,"A",{href:!0});var pOt=s(zee);hzr=r(pOt,"FlaxBertForPreTraining"),pOt.forEach(t),pzr=r(zOe," (BERT model)"),zOe.forEach(t),_zr=i(we),U3=n(we,"LI",{});var QOe=s(U3);y3e=n(QOe,"STRONG",{});var _Ot=s(y3e);uzr=r(_Ot,"big_bird"),_Ot.forEach(t),bzr=r(QOe," \u2014 "),Qee=n(QOe,"A",{href:!0});var uOt=s(Qee);vzr=r(uOt,"FlaxBigBirdForPreTraining"),uOt.forEach(t),Fzr=r(QOe," (BigBird model)"),QOe.forEach(t),Tzr=i(we),J3=n(we,"LI",{});var WOe=s(J3);x3e=n(WOe,"STRONG",{});var bOt=s(x3e);Mzr=r(bOt,"electra"),bOt.forEach(t),Ezr=r(WOe," \u2014 "),Wee=n(WOe,"A",{href:!0});var vOt=s(Wee);Czr=r(vOt,"FlaxElectraForPreTraining"),vOt.forEach(t),wzr=r(WOe," (ELECTRA model)"),WOe.forEach(t),Azr=i(we),Y3=n(we,"LI",{});var HOe=s(Y3);$3e=n(HOe,"STRONG",{});var FOt=s($3e);Lzr=r(FOt,"longt5"),FOt.forEach(t),yzr=r(HOe," \u2014 "),Hee=n(HOe,"A",{href:!0});var TOt=s(Hee);xzr=r(TOt,"FlaxLongT5ForConditionalGeneration"),TOt.forEach(t),$zr=r(HOe," (LongT5 model)"),HOe.forEach(t),kzr=i(we),K3=n(we,"LI",{});var UOe=s(K3);k3e=n(UOe,"STRONG",{});var MOt=s(k3e);Szr=r(MOt,"mbart"),MOt.forEach(t),Rzr=r(UOe," \u2014 "),Uee=n(UOe,"A",{href:!0});var EOt=s(Uee);Pzr=r(EOt,"FlaxMBartForConditionalGeneration"),EOt.forEach(t),Bzr=r(UOe," (mBART model)"),UOe.forEach(t),Izr=i(we),Z3=n(we,"LI",{});var JOe=s(Z3);S3e=n(JOe,"STRONG",{});var COt=s(S3e);Nzr=r(COt,"mt5"),COt.forEach(t),qzr=r(JOe," \u2014 "),Jee=n(JOe,"A",{href:!0});var wOt=s(Jee);jzr=r(wOt,"FlaxMT5ForConditionalGeneration"),wOt.forEach(t),Dzr=r(JOe," (MT5 model)"),JOe.forEach(t),Gzr=i(we),e5=n(we,"LI",{});var YOe=s(e5);R3e=n(YOe,"STRONG",{});var AOt=s(R3e);Ozr=r(AOt,"roberta"),AOt.forEach(t),Vzr=r(YOe," \u2014 "),Yee=n(YOe,"A",{href:!0});var LOt=s(Yee);Xzr=r(LOt,"FlaxRobertaForMaskedLM"),LOt.forEach(t),zzr=r(YOe," (RoBERTa model)"),YOe.forEach(t),Qzr=i(we),o5=n(we,"LI",{});var KOe=s(o5);P3e=n(KOe,"STRONG",{});var yOt=s(P3e);Wzr=r(yOt,"roformer"),yOt.forEach(t),Hzr=r(KOe," \u2014 "),Kee=n(KOe,"A",{href:!0});var xOt=s(Kee);Uzr=r(xOt,"FlaxRoFormerForMaskedLM"),xOt.forEach(t),Jzr=r(KOe," (RoFormer model)"),KOe.forEach(t),Yzr=i(we),r5=n(we,"LI",{});var ZOe=s(r5);B3e=n(ZOe,"STRONG",{});var $Ot=s(B3e);Kzr=r($Ot,"t5"),$Ot.forEach(t),Zzr=r(ZOe," \u2014 "),Zee=n(ZOe,"A",{href:!0});var kOt=s(Zee);eQr=r(kOt,"FlaxT5ForConditionalGeneration"),kOt.forEach(t),oQr=r(ZOe," (T5 model)"),ZOe.forEach(t),rQr=i(we),t5=n(we,"LI",{});var eVe=s(t5);I3e=n(eVe,"STRONG",{});var SOt=s(I3e);tQr=r(SOt,"wav2vec2"),SOt.forEach(t),aQr=r(eVe," \u2014 "),eoe=n(eVe,"A",{href:!0});var ROt=s(eoe);nQr=r(ROt,"FlaxWav2Vec2ForPreTraining"),ROt.forEach(t),sQr=r(eVe," (Wav2Vec2 model)"),eVe.forEach(t),lQr=i(we),a5=n(we,"LI",{});var oVe=s(a5);N3e=n(oVe,"STRONG",{});var POt=s(N3e);iQr=r(POt,"xlm-roberta"),POt.forEach(t),dQr=r(oVe," \u2014 "),ooe=n(oVe,"A",{href:!0});var BOt=s(ooe);cQr=r(BOt,"FlaxXLMRobertaForMaskedLM"),BOt.forEach(t),fQr=r(oVe," (XLM-RoBERTa model)"),oVe.forEach(t),we.forEach(t),mQr=i(ii),T(n5.$$.fragment,ii),ii.forEach(t),li.forEach(t),Uze=i(f),rf=n(f,"H2",{class:!0});var aHe=s(rf);s5=n(aHe,"A",{id:!0,class:!0,href:!0});var IOt=s(s5);q3e=n(IOt,"SPAN",{});var NOt=s(q3e);T(A$.$$.fragment,NOt),NOt.forEach(t),IOt.forEach(t),gQr=i(aHe),j3e=n(aHe,"SPAN",{});var qOt=s(j3e);hQr=r(qOt,"FlaxAutoModelForMaskedLM"),qOt.forEach(t),aHe.forEach(t),Jze=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(L$.$$.fragment,di),pQr=i(di),tf=n(di,"P",{});var cae=s(tf);_Qr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),roe=n(cae,"A",{href:!0});var jOt=s(roe);uQr=r(jOt,"from_pretrained()"),jOt.forEach(t),bQr=r(cae," class method or the "),toe=n(cae,"A",{href:!0});var DOt=s(toe);vQr=r(DOt,"from_config()"),DOt.forEach(t),FQr=r(cae,` class
method.`),cae.forEach(t),TQr=i(di),y$=n(di,"P",{});var nHe=s(y$);MQr=r(nHe,"This class cannot be instantiated directly using "),D3e=n(nHe,"CODE",{});var GOt=s(D3e);EQr=r(GOt,"__init__()"),GOt.forEach(t),CQr=r(nHe," (throws an error)."),nHe.forEach(t),wQr=i(di),Ut=n(di,"DIV",{class:!0});var DA=s(Ut);T(x$.$$.fragment,DA),AQr=i(DA),G3e=n(DA,"P",{});var OOt=s(G3e);LQr=r(OOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),OOt.forEach(t),yQr=i(DA),af=n(DA,"P",{});var fae=s(af);xQr=r(fae,`Note:
Loading a model from its configuration file does `),O3e=n(fae,"STRONG",{});var VOt=s(O3e);$Qr=r(VOt,"not"),VOt.forEach(t),kQr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=n(fae,"A",{href:!0});var XOt=s(aoe);SQr=r(XOt,"from_pretrained()"),XOt.forEach(t),RQr=r(fae," to load the model weights."),fae.forEach(t),PQr=i(DA),T(l5.$$.fragment,DA),DA.forEach(t),BQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T($$.$$.fragment,ci),IQr=i(ci),V3e=n(ci,"P",{});var zOt=s(V3e);NQr=r(zOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zOt.forEach(t),qQr=i(ci),wn=n(ci,"P",{});var GA=s(wn);jQr=r(GA,"The model class to instantiate is selected based on the "),X3e=n(GA,"CODE",{});var QOt=s(X3e);DQr=r(QOt,"model_type"),QOt.forEach(t),GQr=r(GA,` property of the config object (either
passed as an argument or loaded from `),z3e=n(GA,"CODE",{});var WOt=s(z3e);OQr=r(WOt,"pretrained_model_name_or_path"),WOt.forEach(t),VQr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=n(GA,"CODE",{});var HOt=s(Q3e);XQr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),zQr=r(GA,":"),GA.forEach(t),QQr=i(ci),$e=n(ci,"UL",{});var qe=s($e);i5=n(qe,"LI",{});var rVe=s(i5);W3e=n(rVe,"STRONG",{});var UOt=s(W3e);WQr=r(UOt,"albert"),UOt.forEach(t),HQr=r(rVe," \u2014 "),noe=n(rVe,"A",{href:!0});var JOt=s(noe);UQr=r(JOt,"FlaxAlbertForMaskedLM"),JOt.forEach(t),JQr=r(rVe," (ALBERT model)"),rVe.forEach(t),YQr=i(qe),d5=n(qe,"LI",{});var tVe=s(d5);H3e=n(tVe,"STRONG",{});var YOt=s(H3e);KQr=r(YOt,"bart"),YOt.forEach(t),ZQr=r(tVe," \u2014 "),soe=n(tVe,"A",{href:!0});var KOt=s(soe);eWr=r(KOt,"FlaxBartForConditionalGeneration"),KOt.forEach(t),oWr=r(tVe," (BART model)"),tVe.forEach(t),rWr=i(qe),c5=n(qe,"LI",{});var aVe=s(c5);U3e=n(aVe,"STRONG",{});var ZOt=s(U3e);tWr=r(ZOt,"bert"),ZOt.forEach(t),aWr=r(aVe," \u2014 "),loe=n(aVe,"A",{href:!0});var eVt=s(loe);nWr=r(eVt,"FlaxBertForMaskedLM"),eVt.forEach(t),sWr=r(aVe," (BERT model)"),aVe.forEach(t),lWr=i(qe),f5=n(qe,"LI",{});var nVe=s(f5);J3e=n(nVe,"STRONG",{});var oVt=s(J3e);iWr=r(oVt,"big_bird"),oVt.forEach(t),dWr=r(nVe," \u2014 "),ioe=n(nVe,"A",{href:!0});var rVt=s(ioe);cWr=r(rVt,"FlaxBigBirdForMaskedLM"),rVt.forEach(t),fWr=r(nVe," (BigBird model)"),nVe.forEach(t),mWr=i(qe),m5=n(qe,"LI",{});var sVe=s(m5);Y3e=n(sVe,"STRONG",{});var tVt=s(Y3e);gWr=r(tVt,"distilbert"),tVt.forEach(t),hWr=r(sVe," \u2014 "),doe=n(sVe,"A",{href:!0});var aVt=s(doe);pWr=r(aVt,"FlaxDistilBertForMaskedLM"),aVt.forEach(t),_Wr=r(sVe," (DistilBERT model)"),sVe.forEach(t),uWr=i(qe),g5=n(qe,"LI",{});var lVe=s(g5);K3e=n(lVe,"STRONG",{});var nVt=s(K3e);bWr=r(nVt,"electra"),nVt.forEach(t),vWr=r(lVe," \u2014 "),coe=n(lVe,"A",{href:!0});var sVt=s(coe);FWr=r(sVt,"FlaxElectraForMaskedLM"),sVt.forEach(t),TWr=r(lVe," (ELECTRA model)"),lVe.forEach(t),MWr=i(qe),h5=n(qe,"LI",{});var iVe=s(h5);Z3e=n(iVe,"STRONG",{});var lVt=s(Z3e);EWr=r(lVt,"mbart"),lVt.forEach(t),CWr=r(iVe," \u2014 "),foe=n(iVe,"A",{href:!0});var iVt=s(foe);wWr=r(iVt,"FlaxMBartForConditionalGeneration"),iVt.forEach(t),AWr=r(iVe," (mBART model)"),iVe.forEach(t),LWr=i(qe),p5=n(qe,"LI",{});var dVe=s(p5);e5e=n(dVe,"STRONG",{});var dVt=s(e5e);yWr=r(dVt,"roberta"),dVt.forEach(t),xWr=r(dVe," \u2014 "),moe=n(dVe,"A",{href:!0});var cVt=s(moe);$Wr=r(cVt,"FlaxRobertaForMaskedLM"),cVt.forEach(t),kWr=r(dVe," (RoBERTa model)"),dVe.forEach(t),SWr=i(qe),_5=n(qe,"LI",{});var cVe=s(_5);o5e=n(cVe,"STRONG",{});var fVt=s(o5e);RWr=r(fVt,"roformer"),fVt.forEach(t),PWr=r(cVe," \u2014 "),goe=n(cVe,"A",{href:!0});var mVt=s(goe);BWr=r(mVt,"FlaxRoFormerForMaskedLM"),mVt.forEach(t),IWr=r(cVe," (RoFormer model)"),cVe.forEach(t),NWr=i(qe),u5=n(qe,"LI",{});var fVe=s(u5);r5e=n(fVe,"STRONG",{});var gVt=s(r5e);qWr=r(gVt,"xlm-roberta"),gVt.forEach(t),jWr=r(fVe," \u2014 "),hoe=n(fVe,"A",{href:!0});var hVt=s(hoe);DWr=r(hVt,"FlaxXLMRobertaForMaskedLM"),hVt.forEach(t),GWr=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),qe.forEach(t),OWr=i(ci),T(b5.$$.fragment,ci),ci.forEach(t),di.forEach(t),Yze=i(f),nf=n(f,"H2",{class:!0});var sHe=s(nf);v5=n(sHe,"A",{id:!0,class:!0,href:!0});var pVt=s(v5);t5e=n(pVt,"SPAN",{});var _Vt=s(t5e);T(k$.$$.fragment,_Vt),_Vt.forEach(t),pVt.forEach(t),VWr=i(sHe),a5e=n(sHe,"SPAN",{});var uVt=s(a5e);XWr=r(uVt,"FlaxAutoModelForSeq2SeqLM"),uVt.forEach(t),sHe.forEach(t),Kze=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(S$.$$.fragment,fi),zWr=i(fi),sf=n(fi,"P",{});var mae=s(sf);QWr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),poe=n(mae,"A",{href:!0});var bVt=s(poe);WWr=r(bVt,"from_pretrained()"),bVt.forEach(t),HWr=r(mae," class method or the "),_oe=n(mae,"A",{href:!0});var vVt=s(_oe);UWr=r(vVt,"from_config()"),vVt.forEach(t),JWr=r(mae,` class
method.`),mae.forEach(t),YWr=i(fi),R$=n(fi,"P",{});var lHe=s(R$);KWr=r(lHe,"This class cannot be instantiated directly using "),n5e=n(lHe,"CODE",{});var FVt=s(n5e);ZWr=r(FVt,"__init__()"),FVt.forEach(t),eHr=r(lHe," (throws an error)."),lHe.forEach(t),oHr=i(fi),Jt=n(fi,"DIV",{class:!0});var OA=s(Jt);T(P$.$$.fragment,OA),rHr=i(OA),s5e=n(OA,"P",{});var TVt=s(s5e);tHr=r(TVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TVt.forEach(t),aHr=i(OA),lf=n(OA,"P",{});var gae=s(lf);nHr=r(gae,`Note:
Loading a model from its configuration file does `),l5e=n(gae,"STRONG",{});var MVt=s(l5e);sHr=r(MVt,"not"),MVt.forEach(t),lHr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(gae,"A",{href:!0});var EVt=s(uoe);iHr=r(EVt,"from_pretrained()"),EVt.forEach(t),dHr=r(gae," to load the model weights."),gae.forEach(t),cHr=i(OA),T(F5.$$.fragment,OA),OA.forEach(t),fHr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(B$.$$.fragment,mi),mHr=i(mi),i5e=n(mi,"P",{});var CVt=s(i5e);gHr=r(CVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CVt.forEach(t),hHr=i(mi),An=n(mi,"P",{});var VA=s(An);pHr=r(VA,"The model class to instantiate is selected based on the "),d5e=n(VA,"CODE",{});var wVt=s(d5e);_Hr=r(wVt,"model_type"),wVt.forEach(t),uHr=r(VA,` property of the config object (either
passed as an argument or loaded from `),c5e=n(VA,"CODE",{});var AVt=s(c5e);bHr=r(AVt,"pretrained_model_name_or_path"),AVt.forEach(t),vHr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(VA,"CODE",{});var LVt=s(f5e);FHr=r(LVt,"pretrained_model_name_or_path"),LVt.forEach(t),THr=r(VA,":"),VA.forEach(t),MHr=i(mi),ke=n(mi,"UL",{});var je=s(ke);T5=n(je,"LI",{});var mVe=s(T5);m5e=n(mVe,"STRONG",{});var yVt=s(m5e);EHr=r(yVt,"bart"),yVt.forEach(t),CHr=r(mVe," \u2014 "),boe=n(mVe,"A",{href:!0});var xVt=s(boe);wHr=r(xVt,"FlaxBartForConditionalGeneration"),xVt.forEach(t),AHr=r(mVe," (BART model)"),mVe.forEach(t),LHr=i(je),M5=n(je,"LI",{});var gVe=s(M5);g5e=n(gVe,"STRONG",{});var $Vt=s(g5e);yHr=r($Vt,"blenderbot"),$Vt.forEach(t),xHr=r(gVe," \u2014 "),voe=n(gVe,"A",{href:!0});var kVt=s(voe);$Hr=r(kVt,"FlaxBlenderbotForConditionalGeneration"),kVt.forEach(t),kHr=r(gVe," (Blenderbot model)"),gVe.forEach(t),SHr=i(je),E5=n(je,"LI",{});var hVe=s(E5);h5e=n(hVe,"STRONG",{});var SVt=s(h5e);RHr=r(SVt,"blenderbot-small"),SVt.forEach(t),PHr=r(hVe," \u2014 "),Foe=n(hVe,"A",{href:!0});var RVt=s(Foe);BHr=r(RVt,"FlaxBlenderbotSmallForConditionalGeneration"),RVt.forEach(t),IHr=r(hVe," (BlenderbotSmall model)"),hVe.forEach(t),NHr=i(je),C5=n(je,"LI",{});var pVe=s(C5);p5e=n(pVe,"STRONG",{});var PVt=s(p5e);qHr=r(PVt,"encoder-decoder"),PVt.forEach(t),jHr=r(pVe," \u2014 "),Toe=n(pVe,"A",{href:!0});var BVt=s(Toe);DHr=r(BVt,"FlaxEncoderDecoderModel"),BVt.forEach(t),GHr=r(pVe," (Encoder decoder model)"),pVe.forEach(t),OHr=i(je),w5=n(je,"LI",{});var _Ve=s(w5);_5e=n(_Ve,"STRONG",{});var IVt=s(_5e);VHr=r(IVt,"longt5"),IVt.forEach(t),XHr=r(_Ve," \u2014 "),Moe=n(_Ve,"A",{href:!0});var NVt=s(Moe);zHr=r(NVt,"FlaxLongT5ForConditionalGeneration"),NVt.forEach(t),QHr=r(_Ve," (LongT5 model)"),_Ve.forEach(t),WHr=i(je),A5=n(je,"LI",{});var uVe=s(A5);u5e=n(uVe,"STRONG",{});var qVt=s(u5e);HHr=r(qVt,"marian"),qVt.forEach(t),UHr=r(uVe," \u2014 "),Eoe=n(uVe,"A",{href:!0});var jVt=s(Eoe);JHr=r(jVt,"FlaxMarianMTModel"),jVt.forEach(t),YHr=r(uVe," (Marian model)"),uVe.forEach(t),KHr=i(je),L5=n(je,"LI",{});var bVe=s(L5);b5e=n(bVe,"STRONG",{});var DVt=s(b5e);ZHr=r(DVt,"mbart"),DVt.forEach(t),eUr=r(bVe," \u2014 "),Coe=n(bVe,"A",{href:!0});var GVt=s(Coe);oUr=r(GVt,"FlaxMBartForConditionalGeneration"),GVt.forEach(t),rUr=r(bVe," (mBART model)"),bVe.forEach(t),tUr=i(je),y5=n(je,"LI",{});var vVe=s(y5);v5e=n(vVe,"STRONG",{});var OVt=s(v5e);aUr=r(OVt,"mt5"),OVt.forEach(t),nUr=r(vVe," \u2014 "),woe=n(vVe,"A",{href:!0});var VVt=s(woe);sUr=r(VVt,"FlaxMT5ForConditionalGeneration"),VVt.forEach(t),lUr=r(vVe," (MT5 model)"),vVe.forEach(t),iUr=i(je),x5=n(je,"LI",{});var FVe=s(x5);F5e=n(FVe,"STRONG",{});var XVt=s(F5e);dUr=r(XVt,"pegasus"),XVt.forEach(t),cUr=r(FVe," \u2014 "),Aoe=n(FVe,"A",{href:!0});var zVt=s(Aoe);fUr=r(zVt,"FlaxPegasusForConditionalGeneration"),zVt.forEach(t),mUr=r(FVe," (Pegasus model)"),FVe.forEach(t),gUr=i(je),$5=n(je,"LI",{});var TVe=s($5);T5e=n(TVe,"STRONG",{});var QVt=s(T5e);hUr=r(QVt,"t5"),QVt.forEach(t),pUr=r(TVe," \u2014 "),Loe=n(TVe,"A",{href:!0});var WVt=s(Loe);_Ur=r(WVt,"FlaxT5ForConditionalGeneration"),WVt.forEach(t),uUr=r(TVe," (T5 model)"),TVe.forEach(t),je.forEach(t),bUr=i(mi),T(k5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),Zze=i(f),df=n(f,"H2",{class:!0});var iHe=s(df);S5=n(iHe,"A",{id:!0,class:!0,href:!0});var HVt=s(S5);M5e=n(HVt,"SPAN",{});var UVt=s(M5e);T(I$.$$.fragment,UVt),UVt.forEach(t),HVt.forEach(t),vUr=i(iHe),E5e=n(iHe,"SPAN",{});var JVt=s(E5e);FUr=r(JVt,"FlaxAutoModelForSequenceClassification"),JVt.forEach(t),iHe.forEach(t),eQe=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(N$.$$.fragment,gi),TUr=i(gi),cf=n(gi,"P",{});var hae=s(cf);MUr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yoe=n(hae,"A",{href:!0});var YVt=s(yoe);EUr=r(YVt,"from_pretrained()"),YVt.forEach(t),CUr=r(hae," class method or the "),xoe=n(hae,"A",{href:!0});var KVt=s(xoe);wUr=r(KVt,"from_config()"),KVt.forEach(t),AUr=r(hae,` class
method.`),hae.forEach(t),LUr=i(gi),q$=n(gi,"P",{});var dHe=s(q$);yUr=r(dHe,"This class cannot be instantiated directly using "),C5e=n(dHe,"CODE",{});var ZVt=s(C5e);xUr=r(ZVt,"__init__()"),ZVt.forEach(t),$Ur=r(dHe," (throws an error)."),dHe.forEach(t),kUr=i(gi),Yt=n(gi,"DIV",{class:!0});var XA=s(Yt);T(j$.$$.fragment,XA),SUr=i(XA),w5e=n(XA,"P",{});var eXt=s(w5e);RUr=r(eXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eXt.forEach(t),PUr=i(XA),ff=n(XA,"P",{});var pae=s(ff);BUr=r(pae,`Note:
Loading a model from its configuration file does `),A5e=n(pae,"STRONG",{});var oXt=s(A5e);IUr=r(oXt,"not"),oXt.forEach(t),NUr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(pae,"A",{href:!0});var rXt=s($oe);qUr=r(rXt,"from_pretrained()"),rXt.forEach(t),jUr=r(pae," to load the model weights."),pae.forEach(t),DUr=i(XA),T(R5.$$.fragment,XA),XA.forEach(t),GUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(D$.$$.fragment,hi),OUr=i(hi),L5e=n(hi,"P",{});var tXt=s(L5e);VUr=r(tXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tXt.forEach(t),XUr=i(hi),Ln=n(hi,"P",{});var zA=s(Ln);zUr=r(zA,"The model class to instantiate is selected based on the "),y5e=n(zA,"CODE",{});var aXt=s(y5e);QUr=r(aXt,"model_type"),aXt.forEach(t),WUr=r(zA,` property of the config object (either
passed as an argument or loaded from `),x5e=n(zA,"CODE",{});var nXt=s(x5e);HUr=r(nXt,"pretrained_model_name_or_path"),nXt.forEach(t),UUr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(zA,"CODE",{});var sXt=s($5e);JUr=r(sXt,"pretrained_model_name_or_path"),sXt.forEach(t),YUr=r(zA,":"),zA.forEach(t),KUr=i(hi),Se=n(hi,"UL",{});var De=s(Se);P5=n(De,"LI",{});var MVe=s(P5);k5e=n(MVe,"STRONG",{});var lXt=s(k5e);ZUr=r(lXt,"albert"),lXt.forEach(t),eJr=r(MVe," \u2014 "),koe=n(MVe,"A",{href:!0});var iXt=s(koe);oJr=r(iXt,"FlaxAlbertForSequenceClassification"),iXt.forEach(t),rJr=r(MVe," (ALBERT model)"),MVe.forEach(t),tJr=i(De),B5=n(De,"LI",{});var EVe=s(B5);S5e=n(EVe,"STRONG",{});var dXt=s(S5e);aJr=r(dXt,"bart"),dXt.forEach(t),nJr=r(EVe," \u2014 "),Soe=n(EVe,"A",{href:!0});var cXt=s(Soe);sJr=r(cXt,"FlaxBartForSequenceClassification"),cXt.forEach(t),lJr=r(EVe," (BART model)"),EVe.forEach(t),iJr=i(De),I5=n(De,"LI",{});var CVe=s(I5);R5e=n(CVe,"STRONG",{});var fXt=s(R5e);dJr=r(fXt,"bert"),fXt.forEach(t),cJr=r(CVe," \u2014 "),Roe=n(CVe,"A",{href:!0});var mXt=s(Roe);fJr=r(mXt,"FlaxBertForSequenceClassification"),mXt.forEach(t),mJr=r(CVe," (BERT model)"),CVe.forEach(t),gJr=i(De),N5=n(De,"LI",{});var wVe=s(N5);P5e=n(wVe,"STRONG",{});var gXt=s(P5e);hJr=r(gXt,"big_bird"),gXt.forEach(t),pJr=r(wVe," \u2014 "),Poe=n(wVe,"A",{href:!0});var hXt=s(Poe);_Jr=r(hXt,"FlaxBigBirdForSequenceClassification"),hXt.forEach(t),uJr=r(wVe," (BigBird model)"),wVe.forEach(t),bJr=i(De),q5=n(De,"LI",{});var AVe=s(q5);B5e=n(AVe,"STRONG",{});var pXt=s(B5e);vJr=r(pXt,"distilbert"),pXt.forEach(t),FJr=r(AVe," \u2014 "),Boe=n(AVe,"A",{href:!0});var _Xt=s(Boe);TJr=r(_Xt,"FlaxDistilBertForSequenceClassification"),_Xt.forEach(t),MJr=r(AVe," (DistilBERT model)"),AVe.forEach(t),EJr=i(De),j5=n(De,"LI",{});var LVe=s(j5);I5e=n(LVe,"STRONG",{});var uXt=s(I5e);CJr=r(uXt,"electra"),uXt.forEach(t),wJr=r(LVe," \u2014 "),Ioe=n(LVe,"A",{href:!0});var bXt=s(Ioe);AJr=r(bXt,"FlaxElectraForSequenceClassification"),bXt.forEach(t),LJr=r(LVe," (ELECTRA model)"),LVe.forEach(t),yJr=i(De),D5=n(De,"LI",{});var yVe=s(D5);N5e=n(yVe,"STRONG",{});var vXt=s(N5e);xJr=r(vXt,"mbart"),vXt.forEach(t),$Jr=r(yVe," \u2014 "),Noe=n(yVe,"A",{href:!0});var FXt=s(Noe);kJr=r(FXt,"FlaxMBartForSequenceClassification"),FXt.forEach(t),SJr=r(yVe," (mBART model)"),yVe.forEach(t),RJr=i(De),G5=n(De,"LI",{});var xVe=s(G5);q5e=n(xVe,"STRONG",{});var TXt=s(q5e);PJr=r(TXt,"roberta"),TXt.forEach(t),BJr=r(xVe," \u2014 "),qoe=n(xVe,"A",{href:!0});var MXt=s(qoe);IJr=r(MXt,"FlaxRobertaForSequenceClassification"),MXt.forEach(t),NJr=r(xVe," (RoBERTa model)"),xVe.forEach(t),qJr=i(De),O5=n(De,"LI",{});var $Ve=s(O5);j5e=n($Ve,"STRONG",{});var EXt=s(j5e);jJr=r(EXt,"roformer"),EXt.forEach(t),DJr=r($Ve," \u2014 "),joe=n($Ve,"A",{href:!0});var CXt=s(joe);GJr=r(CXt,"FlaxRoFormerForSequenceClassification"),CXt.forEach(t),OJr=r($Ve," (RoFormer model)"),$Ve.forEach(t),VJr=i(De),V5=n(De,"LI",{});var kVe=s(V5);D5e=n(kVe,"STRONG",{});var wXt=s(D5e);XJr=r(wXt,"xlm-roberta"),wXt.forEach(t),zJr=r(kVe," \u2014 "),Doe=n(kVe,"A",{href:!0});var AXt=s(Doe);QJr=r(AXt,"FlaxXLMRobertaForSequenceClassification"),AXt.forEach(t),WJr=r(kVe," (XLM-RoBERTa model)"),kVe.forEach(t),De.forEach(t),HJr=i(hi),T(X5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),oQe=i(f),mf=n(f,"H2",{class:!0});var cHe=s(mf);z5=n(cHe,"A",{id:!0,class:!0,href:!0});var LXt=s(z5);G5e=n(LXt,"SPAN",{});var yXt=s(G5e);T(G$.$$.fragment,yXt),yXt.forEach(t),LXt.forEach(t),UJr=i(cHe),O5e=n(cHe,"SPAN",{});var xXt=s(O5e);JJr=r(xXt,"FlaxAutoModelForQuestionAnswering"),xXt.forEach(t),cHe.forEach(t),rQe=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(O$.$$.fragment,pi),YJr=i(pi),gf=n(pi,"P",{});var _ae=s(gf);KJr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Goe=n(_ae,"A",{href:!0});var $Xt=s(Goe);ZJr=r($Xt,"from_pretrained()"),$Xt.forEach(t),eYr=r(_ae," class method or the "),Ooe=n(_ae,"A",{href:!0});var kXt=s(Ooe);oYr=r(kXt,"from_config()"),kXt.forEach(t),rYr=r(_ae,` class
method.`),_ae.forEach(t),tYr=i(pi),V$=n(pi,"P",{});var fHe=s(V$);aYr=r(fHe,"This class cannot be instantiated directly using "),V5e=n(fHe,"CODE",{});var SXt=s(V5e);nYr=r(SXt,"__init__()"),SXt.forEach(t),sYr=r(fHe," (throws an error)."),fHe.forEach(t),lYr=i(pi),Kt=n(pi,"DIV",{class:!0});var QA=s(Kt);T(X$.$$.fragment,QA),iYr=i(QA),X5e=n(QA,"P",{});var RXt=s(X5e);dYr=r(RXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RXt.forEach(t),cYr=i(QA),hf=n(QA,"P",{});var uae=s(hf);fYr=r(uae,`Note:
Loading a model from its configuration file does `),z5e=n(uae,"STRONG",{});var PXt=s(z5e);mYr=r(PXt,"not"),PXt.forEach(t),gYr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=n(uae,"A",{href:!0});var BXt=s(Voe);hYr=r(BXt,"from_pretrained()"),BXt.forEach(t),pYr=r(uae," to load the model weights."),uae.forEach(t),_Yr=i(QA),T(Q5.$$.fragment,QA),QA.forEach(t),uYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(z$.$$.fragment,_i),bYr=i(_i),Q5e=n(_i,"P",{});var IXt=s(Q5e);vYr=r(IXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),IXt.forEach(t),FYr=i(_i),yn=n(_i,"P",{});var WA=s(yn);TYr=r(WA,"The model class to instantiate is selected based on the "),W5e=n(WA,"CODE",{});var NXt=s(W5e);MYr=r(NXt,"model_type"),NXt.forEach(t),EYr=r(WA,` property of the config object (either
passed as an argument or loaded from `),H5e=n(WA,"CODE",{});var qXt=s(H5e);CYr=r(qXt,"pretrained_model_name_or_path"),qXt.forEach(t),wYr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(WA,"CODE",{});var jXt=s(U5e);AYr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),LYr=r(WA,":"),WA.forEach(t),yYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);W5=n(Ge,"LI",{});var SVe=s(W5);J5e=n(SVe,"STRONG",{});var DXt=s(J5e);xYr=r(DXt,"albert"),DXt.forEach(t),$Yr=r(SVe," \u2014 "),Xoe=n(SVe,"A",{href:!0});var GXt=s(Xoe);kYr=r(GXt,"FlaxAlbertForQuestionAnswering"),GXt.forEach(t),SYr=r(SVe," (ALBERT model)"),SVe.forEach(t),RYr=i(Ge),H5=n(Ge,"LI",{});var RVe=s(H5);Y5e=n(RVe,"STRONG",{});var OXt=s(Y5e);PYr=r(OXt,"bart"),OXt.forEach(t),BYr=r(RVe," \u2014 "),zoe=n(RVe,"A",{href:!0});var VXt=s(zoe);IYr=r(VXt,"FlaxBartForQuestionAnswering"),VXt.forEach(t),NYr=r(RVe," (BART model)"),RVe.forEach(t),qYr=i(Ge),U5=n(Ge,"LI",{});var PVe=s(U5);K5e=n(PVe,"STRONG",{});var XXt=s(K5e);jYr=r(XXt,"bert"),XXt.forEach(t),DYr=r(PVe," \u2014 "),Qoe=n(PVe,"A",{href:!0});var zXt=s(Qoe);GYr=r(zXt,"FlaxBertForQuestionAnswering"),zXt.forEach(t),OYr=r(PVe," (BERT model)"),PVe.forEach(t),VYr=i(Ge),J5=n(Ge,"LI",{});var BVe=s(J5);Z5e=n(BVe,"STRONG",{});var QXt=s(Z5e);XYr=r(QXt,"big_bird"),QXt.forEach(t),zYr=r(BVe," \u2014 "),Woe=n(BVe,"A",{href:!0});var WXt=s(Woe);QYr=r(WXt,"FlaxBigBirdForQuestionAnswering"),WXt.forEach(t),WYr=r(BVe," (BigBird model)"),BVe.forEach(t),HYr=i(Ge),Y5=n(Ge,"LI",{});var IVe=s(Y5);e0e=n(IVe,"STRONG",{});var HXt=s(e0e);UYr=r(HXt,"distilbert"),HXt.forEach(t),JYr=r(IVe," \u2014 "),Hoe=n(IVe,"A",{href:!0});var UXt=s(Hoe);YYr=r(UXt,"FlaxDistilBertForQuestionAnswering"),UXt.forEach(t),KYr=r(IVe," (DistilBERT model)"),IVe.forEach(t),ZYr=i(Ge),K5=n(Ge,"LI",{});var NVe=s(K5);o0e=n(NVe,"STRONG",{});var JXt=s(o0e);eKr=r(JXt,"electra"),JXt.forEach(t),oKr=r(NVe," \u2014 "),Uoe=n(NVe,"A",{href:!0});var YXt=s(Uoe);rKr=r(YXt,"FlaxElectraForQuestionAnswering"),YXt.forEach(t),tKr=r(NVe," (ELECTRA model)"),NVe.forEach(t),aKr=i(Ge),Z5=n(Ge,"LI",{});var qVe=s(Z5);r0e=n(qVe,"STRONG",{});var KXt=s(r0e);nKr=r(KXt,"mbart"),KXt.forEach(t),sKr=r(qVe," \u2014 "),Joe=n(qVe,"A",{href:!0});var ZXt=s(Joe);lKr=r(ZXt,"FlaxMBartForQuestionAnswering"),ZXt.forEach(t),iKr=r(qVe," (mBART model)"),qVe.forEach(t),dKr=i(Ge),e0=n(Ge,"LI",{});var jVe=s(e0);t0e=n(jVe,"STRONG",{});var ezt=s(t0e);cKr=r(ezt,"roberta"),ezt.forEach(t),fKr=r(jVe," \u2014 "),Yoe=n(jVe,"A",{href:!0});var ozt=s(Yoe);mKr=r(ozt,"FlaxRobertaForQuestionAnswering"),ozt.forEach(t),gKr=r(jVe," (RoBERTa model)"),jVe.forEach(t),hKr=i(Ge),o0=n(Ge,"LI",{});var DVe=s(o0);a0e=n(DVe,"STRONG",{});var rzt=s(a0e);pKr=r(rzt,"roformer"),rzt.forEach(t),_Kr=r(DVe," \u2014 "),Koe=n(DVe,"A",{href:!0});var tzt=s(Koe);uKr=r(tzt,"FlaxRoFormerForQuestionAnswering"),tzt.forEach(t),bKr=r(DVe," (RoFormer model)"),DVe.forEach(t),vKr=i(Ge),r0=n(Ge,"LI",{});var GVe=s(r0);n0e=n(GVe,"STRONG",{});var azt=s(n0e);FKr=r(azt,"xlm-roberta"),azt.forEach(t),TKr=r(GVe," \u2014 "),Zoe=n(GVe,"A",{href:!0});var nzt=s(Zoe);MKr=r(nzt,"FlaxXLMRobertaForQuestionAnswering"),nzt.forEach(t),EKr=r(GVe," (XLM-RoBERTa model)"),GVe.forEach(t),Ge.forEach(t),CKr=i(_i),T(t0.$$.fragment,_i),_i.forEach(t),pi.forEach(t),tQe=i(f),pf=n(f,"H2",{class:!0});var mHe=s(pf);a0=n(mHe,"A",{id:!0,class:!0,href:!0});var szt=s(a0);s0e=n(szt,"SPAN",{});var lzt=s(s0e);T(Q$.$$.fragment,lzt),lzt.forEach(t),szt.forEach(t),wKr=i(mHe),l0e=n(mHe,"SPAN",{});var izt=s(l0e);AKr=r(izt,"FlaxAutoModelForTokenClassification"),izt.forEach(t),mHe.forEach(t),aQe=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(W$.$$.fragment,ui),LKr=i(ui),_f=n(ui,"P",{});var bae=s(_f);yKr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ere=n(bae,"A",{href:!0});var dzt=s(ere);xKr=r(dzt,"from_pretrained()"),dzt.forEach(t),$Kr=r(bae," class method or the "),ore=n(bae,"A",{href:!0});var czt=s(ore);kKr=r(czt,"from_config()"),czt.forEach(t),SKr=r(bae,` class
method.`),bae.forEach(t),RKr=i(ui),H$=n(ui,"P",{});var gHe=s(H$);PKr=r(gHe,"This class cannot be instantiated directly using "),i0e=n(gHe,"CODE",{});var fzt=s(i0e);BKr=r(fzt,"__init__()"),fzt.forEach(t),IKr=r(gHe," (throws an error)."),gHe.forEach(t),NKr=i(ui),Zt=n(ui,"DIV",{class:!0});var HA=s(Zt);T(U$.$$.fragment,HA),qKr=i(HA),d0e=n(HA,"P",{});var mzt=s(d0e);jKr=r(mzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mzt.forEach(t),DKr=i(HA),uf=n(HA,"P",{});var vae=s(uf);GKr=r(vae,`Note:
Loading a model from its configuration file does `),c0e=n(vae,"STRONG",{});var gzt=s(c0e);OKr=r(gzt,"not"),gzt.forEach(t),VKr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(vae,"A",{href:!0});var hzt=s(rre);XKr=r(hzt,"from_pretrained()"),hzt.forEach(t),zKr=r(vae," to load the model weights."),vae.forEach(t),QKr=i(HA),T(n0.$$.fragment,HA),HA.forEach(t),WKr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(J$.$$.fragment,bi),HKr=i(bi),f0e=n(bi,"P",{});var pzt=s(f0e);UKr=r(pzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pzt.forEach(t),JKr=i(bi),xn=n(bi,"P",{});var UA=s(xn);YKr=r(UA,"The model class to instantiate is selected based on the "),m0e=n(UA,"CODE",{});var _zt=s(m0e);KKr=r(_zt,"model_type"),_zt.forEach(t),ZKr=r(UA,` property of the config object (either
passed as an argument or loaded from `),g0e=n(UA,"CODE",{});var uzt=s(g0e);eZr=r(uzt,"pretrained_model_name_or_path"),uzt.forEach(t),oZr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h0e=n(UA,"CODE",{});var bzt=s(h0e);rZr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),tZr=r(UA,":"),UA.forEach(t),aZr=i(bi),Ve=n(bi,"UL",{});var To=s(Ve);s0=n(To,"LI",{});var OVe=s(s0);p0e=n(OVe,"STRONG",{});var vzt=s(p0e);nZr=r(vzt,"albert"),vzt.forEach(t),sZr=r(OVe," \u2014 "),tre=n(OVe,"A",{href:!0});var Fzt=s(tre);lZr=r(Fzt,"FlaxAlbertForTokenClassification"),Fzt.forEach(t),iZr=r(OVe," (ALBERT model)"),OVe.forEach(t),dZr=i(To),l0=n(To,"LI",{});var VVe=s(l0);_0e=n(VVe,"STRONG",{});var Tzt=s(_0e);cZr=r(Tzt,"bert"),Tzt.forEach(t),fZr=r(VVe," \u2014 "),are=n(VVe,"A",{href:!0});var Mzt=s(are);mZr=r(Mzt,"FlaxBertForTokenClassification"),Mzt.forEach(t),gZr=r(VVe," (BERT model)"),VVe.forEach(t),hZr=i(To),i0=n(To,"LI",{});var XVe=s(i0);u0e=n(XVe,"STRONG",{});var Ezt=s(u0e);pZr=r(Ezt,"big_bird"),Ezt.forEach(t),_Zr=r(XVe," \u2014 "),nre=n(XVe,"A",{href:!0});var Czt=s(nre);uZr=r(Czt,"FlaxBigBirdForTokenClassification"),Czt.forEach(t),bZr=r(XVe," (BigBird model)"),XVe.forEach(t),vZr=i(To),d0=n(To,"LI",{});var zVe=s(d0);b0e=n(zVe,"STRONG",{});var wzt=s(b0e);FZr=r(wzt,"distilbert"),wzt.forEach(t),TZr=r(zVe," \u2014 "),sre=n(zVe,"A",{href:!0});var Azt=s(sre);MZr=r(Azt,"FlaxDistilBertForTokenClassification"),Azt.forEach(t),EZr=r(zVe," (DistilBERT model)"),zVe.forEach(t),CZr=i(To),c0=n(To,"LI",{});var QVe=s(c0);v0e=n(QVe,"STRONG",{});var Lzt=s(v0e);wZr=r(Lzt,"electra"),Lzt.forEach(t),AZr=r(QVe," \u2014 "),lre=n(QVe,"A",{href:!0});var yzt=s(lre);LZr=r(yzt,"FlaxElectraForTokenClassification"),yzt.forEach(t),yZr=r(QVe," (ELECTRA model)"),QVe.forEach(t),xZr=i(To),f0=n(To,"LI",{});var WVe=s(f0);F0e=n(WVe,"STRONG",{});var xzt=s(F0e);$Zr=r(xzt,"roberta"),xzt.forEach(t),kZr=r(WVe," \u2014 "),ire=n(WVe,"A",{href:!0});var $zt=s(ire);SZr=r($zt,"FlaxRobertaForTokenClassification"),$zt.forEach(t),RZr=r(WVe," (RoBERTa model)"),WVe.forEach(t),PZr=i(To),m0=n(To,"LI",{});var HVe=s(m0);T0e=n(HVe,"STRONG",{});var kzt=s(T0e);BZr=r(kzt,"roformer"),kzt.forEach(t),IZr=r(HVe," \u2014 "),dre=n(HVe,"A",{href:!0});var Szt=s(dre);NZr=r(Szt,"FlaxRoFormerForTokenClassification"),Szt.forEach(t),qZr=r(HVe," (RoFormer model)"),HVe.forEach(t),jZr=i(To),g0=n(To,"LI",{});var UVe=s(g0);M0e=n(UVe,"STRONG",{});var Rzt=s(M0e);DZr=r(Rzt,"xlm-roberta"),Rzt.forEach(t),GZr=r(UVe," \u2014 "),cre=n(UVe,"A",{href:!0});var Pzt=s(cre);OZr=r(Pzt,"FlaxXLMRobertaForTokenClassification"),Pzt.forEach(t),VZr=r(UVe," (XLM-RoBERTa model)"),UVe.forEach(t),To.forEach(t),XZr=i(bi),T(h0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),nQe=i(f),bf=n(f,"H2",{class:!0});var hHe=s(bf);p0=n(hHe,"A",{id:!0,class:!0,href:!0});var Bzt=s(p0);E0e=n(Bzt,"SPAN",{});var Izt=s(E0e);T(Y$.$$.fragment,Izt),Izt.forEach(t),Bzt.forEach(t),zZr=i(hHe),C0e=n(hHe,"SPAN",{});var Nzt=s(C0e);QZr=r(Nzt,"FlaxAutoModelForMultipleChoice"),Nzt.forEach(t),hHe.forEach(t),sQe=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(K$.$$.fragment,vi),WZr=i(vi),vf=n(vi,"P",{});var Fae=s(vf);HZr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fre=n(Fae,"A",{href:!0});var qzt=s(fre);UZr=r(qzt,"from_pretrained()"),qzt.forEach(t),JZr=r(Fae," class method or the "),mre=n(Fae,"A",{href:!0});var jzt=s(mre);YZr=r(jzt,"from_config()"),jzt.forEach(t),KZr=r(Fae,` class
method.`),Fae.forEach(t),ZZr=i(vi),Z$=n(vi,"P",{});var pHe=s(Z$);eet=r(pHe,"This class cannot be instantiated directly using "),w0e=n(pHe,"CODE",{});var Dzt=s(w0e);oet=r(Dzt,"__init__()"),Dzt.forEach(t),ret=r(pHe," (throws an error)."),pHe.forEach(t),tet=i(vi),ea=n(vi,"DIV",{class:!0});var JA=s(ea);T(ek.$$.fragment,JA),aet=i(JA),A0e=n(JA,"P",{});var Gzt=s(A0e);net=r(Gzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Gzt.forEach(t),set=i(JA),Ff=n(JA,"P",{});var Tae=s(Ff);iet=r(Tae,`Note:
Loading a model from its configuration file does `),L0e=n(Tae,"STRONG",{});var Ozt=s(L0e);det=r(Ozt,"not"),Ozt.forEach(t),cet=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n(Tae,"A",{href:!0});var Vzt=s(gre);fet=r(Vzt,"from_pretrained()"),Vzt.forEach(t),met=r(Tae," to load the model weights."),Tae.forEach(t),get=i(JA),T(_0.$$.fragment,JA),JA.forEach(t),het=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(ok.$$.fragment,Fi),pet=i(Fi),y0e=n(Fi,"P",{});var Xzt=s(y0e);_et=r(Xzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xzt.forEach(t),uet=i(Fi),$n=n(Fi,"P",{});var YA=s($n);bet=r(YA,"The model class to instantiate is selected based on the "),x0e=n(YA,"CODE",{});var zzt=s(x0e);vet=r(zzt,"model_type"),zzt.forEach(t),Fet=r(YA,` property of the config object (either
passed as an argument or loaded from `),$0e=n(YA,"CODE",{});var Qzt=s($0e);Tet=r(Qzt,"pretrained_model_name_or_path"),Qzt.forEach(t),Met=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=n(YA,"CODE",{});var Wzt=s(k0e);Eet=r(Wzt,"pretrained_model_name_or_path"),Wzt.forEach(t),Cet=r(YA,":"),YA.forEach(t),wet=i(Fi),Xe=n(Fi,"UL",{});var Mo=s(Xe);u0=n(Mo,"LI",{});var JVe=s(u0);S0e=n(JVe,"STRONG",{});var Hzt=s(S0e);Aet=r(Hzt,"albert"),Hzt.forEach(t),Let=r(JVe," \u2014 "),hre=n(JVe,"A",{href:!0});var Uzt=s(hre);yet=r(Uzt,"FlaxAlbertForMultipleChoice"),Uzt.forEach(t),xet=r(JVe," (ALBERT model)"),JVe.forEach(t),$et=i(Mo),b0=n(Mo,"LI",{});var YVe=s(b0);R0e=n(YVe,"STRONG",{});var Jzt=s(R0e);ket=r(Jzt,"bert"),Jzt.forEach(t),Set=r(YVe," \u2014 "),pre=n(YVe,"A",{href:!0});var Yzt=s(pre);Ret=r(Yzt,"FlaxBertForMultipleChoice"),Yzt.forEach(t),Pet=r(YVe," (BERT model)"),YVe.forEach(t),Bet=i(Mo),v0=n(Mo,"LI",{});var KVe=s(v0);P0e=n(KVe,"STRONG",{});var Kzt=s(P0e);Iet=r(Kzt,"big_bird"),Kzt.forEach(t),Net=r(KVe," \u2014 "),_re=n(KVe,"A",{href:!0});var Zzt=s(_re);qet=r(Zzt,"FlaxBigBirdForMultipleChoice"),Zzt.forEach(t),jet=r(KVe," (BigBird model)"),KVe.forEach(t),Det=i(Mo),F0=n(Mo,"LI",{});var ZVe=s(F0);B0e=n(ZVe,"STRONG",{});var eQt=s(B0e);Get=r(eQt,"distilbert"),eQt.forEach(t),Oet=r(ZVe," \u2014 "),ure=n(ZVe,"A",{href:!0});var oQt=s(ure);Vet=r(oQt,"FlaxDistilBertForMultipleChoice"),oQt.forEach(t),Xet=r(ZVe," (DistilBERT model)"),ZVe.forEach(t),zet=i(Mo),T0=n(Mo,"LI",{});var eXe=s(T0);I0e=n(eXe,"STRONG",{});var rQt=s(I0e);Qet=r(rQt,"electra"),rQt.forEach(t),Wet=r(eXe," \u2014 "),bre=n(eXe,"A",{href:!0});var tQt=s(bre);Het=r(tQt,"FlaxElectraForMultipleChoice"),tQt.forEach(t),Uet=r(eXe," (ELECTRA model)"),eXe.forEach(t),Jet=i(Mo),M0=n(Mo,"LI",{});var oXe=s(M0);N0e=n(oXe,"STRONG",{});var aQt=s(N0e);Yet=r(aQt,"roberta"),aQt.forEach(t),Ket=r(oXe," \u2014 "),vre=n(oXe,"A",{href:!0});var nQt=s(vre);Zet=r(nQt,"FlaxRobertaForMultipleChoice"),nQt.forEach(t),eot=r(oXe," (RoBERTa model)"),oXe.forEach(t),oot=i(Mo),E0=n(Mo,"LI",{});var rXe=s(E0);q0e=n(rXe,"STRONG",{});var sQt=s(q0e);rot=r(sQt,"roformer"),sQt.forEach(t),tot=r(rXe," \u2014 "),Fre=n(rXe,"A",{href:!0});var lQt=s(Fre);aot=r(lQt,"FlaxRoFormerForMultipleChoice"),lQt.forEach(t),not=r(rXe," (RoFormer model)"),rXe.forEach(t),sot=i(Mo),C0=n(Mo,"LI",{});var tXe=s(C0);j0e=n(tXe,"STRONG",{});var iQt=s(j0e);lot=r(iQt,"xlm-roberta"),iQt.forEach(t),iot=r(tXe," \u2014 "),Tre=n(tXe,"A",{href:!0});var dQt=s(Tre);dot=r(dQt,"FlaxXLMRobertaForMultipleChoice"),dQt.forEach(t),cot=r(tXe," (XLM-RoBERTa model)"),tXe.forEach(t),Mo.forEach(t),fot=i(Fi),T(w0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),lQe=i(f),Tf=n(f,"H2",{class:!0});var _He=s(Tf);A0=n(_He,"A",{id:!0,class:!0,href:!0});var cQt=s(A0);D0e=n(cQt,"SPAN",{});var fQt=s(D0e);T(rk.$$.fragment,fQt),fQt.forEach(t),cQt.forEach(t),mot=i(_He),G0e=n(_He,"SPAN",{});var mQt=s(G0e);got=r(mQt,"FlaxAutoModelForNextSentencePrediction"),mQt.forEach(t),_He.forEach(t),iQe=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(tk.$$.fragment,Ti),hot=i(Ti),Mf=n(Ti,"P",{});var Mae=s(Mf);pot=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Mre=n(Mae,"A",{href:!0});var gQt=s(Mre);_ot=r(gQt,"from_pretrained()"),gQt.forEach(t),uot=r(Mae," class method or the "),Ere=n(Mae,"A",{href:!0});var hQt=s(Ere);bot=r(hQt,"from_config()"),hQt.forEach(t),vot=r(Mae,` class
method.`),Mae.forEach(t),Fot=i(Ti),ak=n(Ti,"P",{});var uHe=s(ak);Tot=r(uHe,"This class cannot be instantiated directly using "),O0e=n(uHe,"CODE",{});var pQt=s(O0e);Mot=r(pQt,"__init__()"),pQt.forEach(t),Eot=r(uHe," (throws an error)."),uHe.forEach(t),Cot=i(Ti),oa=n(Ti,"DIV",{class:!0});var KA=s(oa);T(nk.$$.fragment,KA),wot=i(KA),V0e=n(KA,"P",{});var _Qt=s(V0e);Aot=r(_Qt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Qt.forEach(t),Lot=i(KA),Ef=n(KA,"P",{});var Eae=s(Ef);yot=r(Eae,`Note:
Loading a model from its configuration file does `),X0e=n(Eae,"STRONG",{});var uQt=s(X0e);xot=r(uQt,"not"),uQt.forEach(t),$ot=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(Eae,"A",{href:!0});var bQt=s(Cre);kot=r(bQt,"from_pretrained()"),bQt.forEach(t),Sot=r(Eae," to load the model weights."),Eae.forEach(t),Rot=i(KA),T(L0.$$.fragment,KA),KA.forEach(t),Pot=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(sk.$$.fragment,Mi),Bot=i(Mi),z0e=n(Mi,"P",{});var vQt=s(z0e);Iot=r(vQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vQt.forEach(t),Not=i(Mi),kn=n(Mi,"P",{});var ZA=s(kn);qot=r(ZA,"The model class to instantiate is selected based on the "),Q0e=n(ZA,"CODE",{});var FQt=s(Q0e);jot=r(FQt,"model_type"),FQt.forEach(t),Dot=r(ZA,` property of the config object (either
passed as an argument or loaded from `),W0e=n(ZA,"CODE",{});var TQt=s(W0e);Got=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),Oot=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(ZA,"CODE",{});var MQt=s(H0e);Vot=r(MQt,"pretrained_model_name_or_path"),MQt.forEach(t),Xot=r(ZA,":"),ZA.forEach(t),zot=i(Mi),U0e=n(Mi,"UL",{});var EQt=s(U0e);y0=n(EQt,"LI",{});var aXe=s(y0);J0e=n(aXe,"STRONG",{});var CQt=s(J0e);Qot=r(CQt,"bert"),CQt.forEach(t),Wot=r(aXe," \u2014 "),wre=n(aXe,"A",{href:!0});var wQt=s(wre);Hot=r(wQt,"FlaxBertForNextSentencePrediction"),wQt.forEach(t),Uot=r(aXe," (BERT model)"),aXe.forEach(t),EQt.forEach(t),Jot=i(Mi),T(x0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),dQe=i(f),Cf=n(f,"H2",{class:!0});var bHe=s(Cf);$0=n(bHe,"A",{id:!0,class:!0,href:!0});var AQt=s($0);Y0e=n(AQt,"SPAN",{});var LQt=s(Y0e);T(lk.$$.fragment,LQt),LQt.forEach(t),AQt.forEach(t),Yot=i(bHe),K0e=n(bHe,"SPAN",{});var yQt=s(K0e);Kot=r(yQt,"FlaxAutoModelForImageClassification"),yQt.forEach(t),bHe.forEach(t),cQe=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(ik.$$.fragment,Ei),Zot=i(Ei),wf=n(Ei,"P",{});var Cae=s(wf);ert=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Are=n(Cae,"A",{href:!0});var xQt=s(Are);ort=r(xQt,"from_pretrained()"),xQt.forEach(t),rrt=r(Cae," class method or the "),Lre=n(Cae,"A",{href:!0});var $Qt=s(Lre);trt=r($Qt,"from_config()"),$Qt.forEach(t),art=r(Cae,` class
method.`),Cae.forEach(t),nrt=i(Ei),dk=n(Ei,"P",{});var vHe=s(dk);srt=r(vHe,"This class cannot be instantiated directly using "),Z0e=n(vHe,"CODE",{});var kQt=s(Z0e);lrt=r(kQt,"__init__()"),kQt.forEach(t),irt=r(vHe," (throws an error)."),vHe.forEach(t),drt=i(Ei),ra=n(Ei,"DIV",{class:!0});var eL=s(ra);T(ck.$$.fragment,eL),crt=i(eL),ewe=n(eL,"P",{});var SQt=s(ewe);frt=r(SQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SQt.forEach(t),mrt=i(eL),Af=n(eL,"P",{});var wae=s(Af);grt=r(wae,`Note:
Loading a model from its configuration file does `),owe=n(wae,"STRONG",{});var RQt=s(owe);hrt=r(RQt,"not"),RQt.forEach(t),prt=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(wae,"A",{href:!0});var PQt=s(yre);_rt=r(PQt,"from_pretrained()"),PQt.forEach(t),urt=r(wae," to load the model weights."),wae.forEach(t),brt=i(eL),T(k0.$$.fragment,eL),eL.forEach(t),vrt=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(fk.$$.fragment,Ci),Frt=i(Ci),rwe=n(Ci,"P",{});var BQt=s(rwe);Trt=r(BQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BQt.forEach(t),Mrt=i(Ci),Sn=n(Ci,"P",{});var oL=s(Sn);Ert=r(oL,"The model class to instantiate is selected based on the "),twe=n(oL,"CODE",{});var IQt=s(twe);Crt=r(IQt,"model_type"),IQt.forEach(t),wrt=r(oL,` property of the config object (either
passed as an argument or loaded from `),awe=n(oL,"CODE",{});var NQt=s(awe);Art=r(NQt,"pretrained_model_name_or_path"),NQt.forEach(t),Lrt=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nwe=n(oL,"CODE",{});var qQt=s(nwe);yrt=r(qQt,"pretrained_model_name_or_path"),qQt.forEach(t),xrt=r(oL,":"),oL.forEach(t),$rt=i(Ci),mk=n(Ci,"UL",{});var FHe=s(mk);S0=n(FHe,"LI",{});var nXe=s(S0);swe=n(nXe,"STRONG",{});var jQt=s(swe);krt=r(jQt,"beit"),jQt.forEach(t),Srt=r(nXe," \u2014 "),xre=n(nXe,"A",{href:!0});var DQt=s(xre);Rrt=r(DQt,"FlaxBeitForImageClassification"),DQt.forEach(t),Prt=r(nXe," (BEiT model)"),nXe.forEach(t),Brt=i(FHe),R0=n(FHe,"LI",{});var sXe=s(R0);lwe=n(sXe,"STRONG",{});var GQt=s(lwe);Irt=r(GQt,"vit"),GQt.forEach(t),Nrt=r(sXe," \u2014 "),$re=n(sXe,"A",{href:!0});var OQt=s($re);qrt=r(OQt,"FlaxViTForImageClassification"),OQt.forEach(t),jrt=r(sXe," (ViT model)"),sXe.forEach(t),FHe.forEach(t),Drt=i(Ci),T(P0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),fQe=i(f),Lf=n(f,"H2",{class:!0});var THe=s(Lf);B0=n(THe,"A",{id:!0,class:!0,href:!0});var VQt=s(B0);iwe=n(VQt,"SPAN",{});var XQt=s(iwe);T(gk.$$.fragment,XQt),XQt.forEach(t),VQt.forEach(t),Grt=i(THe),dwe=n(THe,"SPAN",{});var zQt=s(dwe);Ort=r(zQt,"FlaxAutoModelForVision2Seq"),zQt.forEach(t),THe.forEach(t),mQe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(hk.$$.fragment,wi),Vrt=i(wi),yf=n(wi,"P",{});var Aae=s(yf);Xrt=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kre=n(Aae,"A",{href:!0});var QQt=s(kre);zrt=r(QQt,"from_pretrained()"),QQt.forEach(t),Qrt=r(Aae," class method or the "),Sre=n(Aae,"A",{href:!0});var WQt=s(Sre);Wrt=r(WQt,"from_config()"),WQt.forEach(t),Hrt=r(Aae,` class
method.`),Aae.forEach(t),Urt=i(wi),pk=n(wi,"P",{});var MHe=s(pk);Jrt=r(MHe,"This class cannot be instantiated directly using "),cwe=n(MHe,"CODE",{});var HQt=s(cwe);Yrt=r(HQt,"__init__()"),HQt.forEach(t),Krt=r(MHe," (throws an error)."),MHe.forEach(t),Zrt=i(wi),ta=n(wi,"DIV",{class:!0});var rL=s(ta);T(_k.$$.fragment,rL),ett=i(rL),fwe=n(rL,"P",{});var UQt=s(fwe);ott=r(UQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UQt.forEach(t),rtt=i(rL),xf=n(rL,"P",{});var Lae=s(xf);ttt=r(Lae,`Note:
Loading a model from its configuration file does `),mwe=n(Lae,"STRONG",{});var JQt=s(mwe);att=r(JQt,"not"),JQt.forEach(t),ntt=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=n(Lae,"A",{href:!0});var YQt=s(Rre);stt=r(YQt,"from_pretrained()"),YQt.forEach(t),ltt=r(Lae," to load the model weights."),Lae.forEach(t),itt=i(rL),T(I0.$$.fragment,rL),rL.forEach(t),dtt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(uk.$$.fragment,Ai),ctt=i(Ai),gwe=n(Ai,"P",{});var KQt=s(gwe);ftt=r(KQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KQt.forEach(t),mtt=i(Ai),Rn=n(Ai,"P",{});var tL=s(Rn);gtt=r(tL,"The model class to instantiate is selected based on the "),hwe=n(tL,"CODE",{});var ZQt=s(hwe);htt=r(ZQt,"model_type"),ZQt.forEach(t),ptt=r(tL,` property of the config object (either
passed as an argument or loaded from `),pwe=n(tL,"CODE",{});var eWt=s(pwe);_tt=r(eWt,"pretrained_model_name_or_path"),eWt.forEach(t),utt=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=n(tL,"CODE",{});var oWt=s(_we);btt=r(oWt,"pretrained_model_name_or_path"),oWt.forEach(t),vtt=r(tL,":"),tL.forEach(t),Ftt=i(Ai),uwe=n(Ai,"UL",{});var rWt=s(uwe);N0=n(rWt,"LI",{});var lXe=s(N0);bwe=n(lXe,"STRONG",{});var tWt=s(bwe);Ttt=r(tWt,"vision-encoder-decoder"),tWt.forEach(t),Mtt=r(lXe," \u2014 "),Pre=n(lXe,"A",{href:!0});var aWt=s(Pre);Ett=r(aWt,"FlaxVisionEncoderDecoderModel"),aWt.forEach(t),Ctt=r(lXe," (Vision Encoder decoder model)"),lXe.forEach(t),rWt.forEach(t),wtt=i(Ai),T(q0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Bn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoModel"),c(qn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(XS,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(zS,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig"),c(QS,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig"),c(WS,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig"),c(HS,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig"),c(US,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(JS,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig"),c(YS,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(KS,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ZS,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(eR,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig"),c(oR,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig"),c(rR,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig"),c(tR,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig"),c(aR,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig"),c(nR,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig"),c(sR,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig"),c(lR,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig"),c(iR,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig"),c(dR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(cR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(fR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(mR,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig"),c(gR,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(hR,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(pR,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig"),c(_R,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig"),c(uR,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig"),c(bR,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig"),c(vR,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig"),c(FR,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig"),c(TR,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(MR,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig"),c(ER,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig"),c(CR,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig"),c(wR,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig"),c(AR,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig"),c(LR,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig"),c(yR,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config"),c(xR,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($R,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(kR,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig"),c(SR,"href","/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTConfig"),c(RR,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig"),c(PR,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig"),c(BR,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(IR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(NR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(qR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(jR,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig"),c(DR,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig"),c(GR,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig"),c(OR,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config"),c(VR,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig"),c(XR,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig"),c(zR,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config"),c(QR,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig"),c(WR,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(HR,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig"),c(UR,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig"),c(JR,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(YR,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(KR,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(ZR,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig"),c(eP,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config"),c(oP,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig"),c(rP,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig"),c(tP,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(aP,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(nP,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig"),c(sP,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig"),c(lP,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig"),c(iP,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig"),c(dP,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(cP,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(fP,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(mP,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagConfig"),c(gP,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmConfig"),c(hP,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig"),c(pP,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig"),c(_P,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig"),c(uP,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig"),c(bP,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig"),c(vP,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig"),c(FP,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig"),c(TP,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig"),c(MP,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig"),c(EP,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig"),c(CP,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wP,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(AP,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(LP,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig"),c(yP,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xP,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig"),c($P,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config"),c(kP,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config"),c(SP,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig"),c(RP,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(PP,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(BP,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig"),c(IP,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(NP,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(qP,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig"),c(jP,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig"),c(DP,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(GP,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(OP,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(VP,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig"),c(XP,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(zP,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QP,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(WP,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig"),c(HP,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig"),c(UP,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig"),c(JP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(YP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(KP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(ZP,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig"),c(eB,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig"),c(oB,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(rB,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(tB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(aB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizer"),c(sB,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizerFast"),c(lB,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizer"),c(iB,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(dB,"href","/docs/transformers/pr_17469/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(cB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(gB,"href","/docs/transformers/pr_17469/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(hB,"href","/docs/transformers/pr_17469/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(pB,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_B,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(uB,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bB,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(FB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(TB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(MB,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(EB,"href","/docs/transformers/pr_17469/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(CB,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizer"),c(wB,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineTokenizer"),c(LB,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizer"),c(yB,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xB,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenTokenizer"),c($B,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(kB,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(SB,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizer"),c(PB,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(BB,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(IB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizer"),c(jB,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(GB,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(OB,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(VB,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(zB,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(QB,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizer"),c(WB,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(HB,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(UB,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizer"),c(JB,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(YB,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(KB,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ZB,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(eI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aI,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(nI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lI,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizer"),c(iI,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dI,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizer"),c(cI,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(pI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(_I,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(uI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(bI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(vI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(FI,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(TI,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(MI,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizer"),c(EI,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizerFast"),c(CI,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizer"),c(wI,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(AI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Tokenizer"),c(LI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5TokenizerFast"),c(yI,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeTokenizer"),c(xI,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($I,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kI,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SI,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianTokenizer"),c(RI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizer"),c(PI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(BI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(II,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(NI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(qI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(jI,"href","/docs/transformers/pr_17469/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DI,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GI,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OI,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VI,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Tokenizer"),c(zI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5TokenizerFast"),c(QI,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpTokenizer"),c(WI,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(HI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(UI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(JI,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(YI,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KI,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ZI,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(eN,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oN,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rN,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tN,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(aN,"href","/docs/transformers/pr_17469/en/model_doc/phobert#transformers.PhobertTokenizer"),c(nN,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartTokenizer"),c(sN,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(lN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(iN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(dN,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagTokenizer"),c(cN,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizer"),c(fN,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizerFast"),c(mN,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizer"),c(gN,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(hN,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pN,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_N,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(uN,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(bN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FN,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(TN,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(MN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(EN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(CN,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizer"),c(wN,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(AN,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(LN,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(yN,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Tokenizer"),c(xN,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5TokenizerFast"),c($N,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasTokenizer"),c(kN,"href","/docs/transformers/pr_17469/en/model_doc/tapex#transformers.TapexTokenizer"),c(SN,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(RN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(PN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(BN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(IN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(NN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(DN,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizer"),c(GN,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ON,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMTokenizer"),c(VN,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(XN,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zN,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(QN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HN,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(UN,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(JN,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(YN,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(KN,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ZN,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aq,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mq,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(hq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(pq,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($q,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c(Pq,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Bq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPProcessor"),c(Iq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPProcessor"),c(Nq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(qq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(jq,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Dq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Gq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Vq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Xq,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRProcessor"),c(zq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltProcessor"),c(Hq,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Uq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Jq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Yq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(Kq,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zq,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ej,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oj,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel"),c(rj,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel"),c(tj,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel"),c(aj,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(nj,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(sj,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel"),c(lj,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ij,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(dj,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(cj,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel"),c(fj,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel"),c(mj,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel"),c(gj,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel"),c(hj,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenModel"),c(pj,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel"),c(_j,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel"),c(uj,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel"),c(bj,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel"),c(vj,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Fj,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Tj,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Mj,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel"),c(Ej,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Cj,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(wj,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel"),c(Aj,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel"),c(Lj,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel"),c(yj,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(xj,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel"),c($j,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel"),c(kj,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel"),c(Sj,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel"),c(Rj,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel"),c(Pj,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel"),c(Bj,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel"),c(Ij,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Nj,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel"),c(qj,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model"),c(jj,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Dj,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Gj,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel"),c(Oj,"href","/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTModel"),c(Vj,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel"),c(Xj,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel"),c(zj,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Qj,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Wj,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Hj,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Uj,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel"),c(Jj,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel"),c(Yj,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel"),c(Kj,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model"),c(Zj,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel"),c(eD,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel"),c(oD,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model"),c(rD,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel"),c(tD,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel"),c(aD,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel"),c(nD,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel"),c(sD,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(lD,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel"),c(iD,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTModel"),c(dD,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel"),c(cD,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model"),c(fD,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpModel"),c(mD,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaModel"),c(gD,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel"),c(hD,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pD,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel"),c(_D,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel"),c(uD,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel"),c(bD,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel"),c(vD,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel"),c(FD,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(TD,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel"),c(MD,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel"),c(ED,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel"),c(CD,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel"),c(wD,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel"),c(AD,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c(LD,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel"),c(yD,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel"),c(xD,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel"),c($D,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel"),c(kD,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel"),c(SD,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(RD,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel"),c(PD,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(BD,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel"),c(ID,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model"),c(ND,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model"),c(qD,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel"),c(jD,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(DD,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(GD,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel"),c(OD,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(VD,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel"),c(XD,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel"),c(zD,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(QD,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel"),c(WD,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel"),c(HD,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(UD,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(JD,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(YD,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel"),c(KD,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel"),c(ZD,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel"),c(eG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(oG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(rG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(tG,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel"),c(aG,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel"),c(nG,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(sG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining"),c(cG,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining"),c(mG,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(gG,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(hG,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pG,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(_G,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(uG,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(bG,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(vG,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(FG,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining"),c(TG,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(MG,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining"),c(EG,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining"),c(CG,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wG,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(AG,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(LG,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yG,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(xG,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($G,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(kG,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(SG,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(RG,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(PG,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(IG,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(NG,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c(qG,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jG,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(DG,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GG,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(OG,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VG,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XG,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(zG,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(QG,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(WG,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(HG,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(UG,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(JG,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(KG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForCausalLM"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(eO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tO,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM"),c(aO,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel"),c(nO,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(sO,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(lO,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(iO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(dO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(cO,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fO,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(mO,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(gO,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hO,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pO,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_O,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uO,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(bO,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(vO,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(FO,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM"),c(TO,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM"),c(MO,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(EO,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForCausalLM"),c(CO,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(wO,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM"),c(AO,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(LO,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(yO,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(xO,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c($O,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(kO,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(SO,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(RO,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(PO,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(BO,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(IO,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(NO,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(qO,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(DO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(GO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(OO,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P2,"id","transformers.AutoModelForMaskedLM"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(VO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM"),c(UO,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(JO,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(YO,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(KO,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eV,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oV,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(tV,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aV,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(nV,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(sV,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lV,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(iV,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dV,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM"),c(cV,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(hV,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(pV,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(_V,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(uV,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(bV,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(FV,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(TV,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MV,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(EV,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(wV,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(LV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(yV,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.AutoModelForSeq2SeqLM"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(xV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(NV,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel"),c(OV,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForSequenceClassification"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(JV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c($X,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForMultipleChoice"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(UX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(az,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForNextSentencePrediction"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(yz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Rz,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Pz,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Bz,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Iz,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForTokenClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(zz,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(bQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(vQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(FQ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(TQ,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForQuestionAnswering"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(jQ,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(dW,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(mW,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.AutoModelForTableQuestionAnswering"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(gW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.AutoModelForImageClassification"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(uW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification"),c(TW,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(MW,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification"),c(EW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(CW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification"),c(wW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(AW,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LW,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification"),c(yW,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(xW,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c($W,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RW,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PW,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BW,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IW,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(NW,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification"),c(qW,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(jW,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification"),c(DW,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.AutoModelForVision2Seq"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(GW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(zW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForAudioClassification"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForAudioFrameClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(lH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(fH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(mH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(gH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(hH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForCTC"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(pH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vH,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC"),c(FH,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC"),c(TH,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC"),c(MH,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC"),c(EH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(CH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(wH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(AH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(LH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c(yH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(SH,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForAudioXVector"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(RH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(NH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(qH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(DH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForMaskedImageModeling"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(GH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(zH,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(QH,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(WH,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForObjectDetection"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(HH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KH,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.AutoModelForImageSegmentation"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.AutoModelForSemanticSegmentation"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(tU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lU,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iU,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dU,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(cU,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.AutoModelForInstanceSegmentation"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(fU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModel"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(pU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel"),c(vU,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel"),c(FU,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel"),c(TU,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MU,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EU,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel"),c(CU,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel"),c(wU,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel"),c(AU,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel"),c(LU,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yU,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xU,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel"),c($U,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kU,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(SU,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(RU,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel"),c(PU,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(BU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel"),c(IU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(NU,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model"),c(qU,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel"),c(jU,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel"),c(DU,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(GU,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel"),c(OU,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel"),c(VU,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel"),c(XU,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel"),c(zU,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel"),c(QU,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(WU,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel"),c(HU,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model"),c(UU,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(JU,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel"),c(YU,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel"),c(KU,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetModel"),c(ZU,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel"),c(eJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel"),c(oJ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rJ,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(tJ,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel"),c(aJ,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2Model"),c(nJ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model"),c(sJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel"),c(lJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(iJ,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel"),c(dJ,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(cJ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(fJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel"),c(mJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(gJ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b9,"id","transformers.TFAutoModelForPreTraining"),c(b9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b9,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(bJ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining"),c(FJ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MJ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(CJ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wJ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(AJ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LJ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(xJ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c($J,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IJ,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X9,"id","transformers.TFAutoModelForCausalLM"),c(X9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X9,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(XJ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(zJ,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QJ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WJ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(HJ,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UJ,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(JJ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KJ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oY,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForImageClassification"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(rY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sY,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lY,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(iY,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dY,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2ForImageClassification"),c(cY,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForMaskedLM"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(fY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(pY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uY,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(vY,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(FY,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TY,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(MY,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(EY,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(CY,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wY,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(AY,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(LY,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(yY,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(xY,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($Y,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(kY,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RY,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(PY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(GY,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel"),c(VY,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(QY,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForSequenceClassification"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(WY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForMultipleChoice"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(MK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wK,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(QK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(WK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForTokenClassification"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(YK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForQuestionAnswering"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(SZ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(GZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.TFAutoModelForVision2Seq"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(WZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModel"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(YZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel"),c(oee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel"),c(ree,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel"),c(tee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel"),c(aee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(nee,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(see,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(lee,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel"),c(iee,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(dee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel"),c(cee,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(fee,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(mee,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(gee,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(hee,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel"),c(pee,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel"),c(_ee,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model"),c(uee,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel"),c(bee,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(vee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Fee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Tee,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model"),c(Mee,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Eee,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel"),c(Cee,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(wee,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Aee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForCausalLM"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(Lee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(kee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(See,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Ree,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Pee,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Bee,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Iee,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Nee,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(qee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(jee,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForPreTraining"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(Dee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Xee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Qee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Wee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Hee,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Yee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Kee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Zee,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ooe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForMaskedLM"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(roe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(toe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(noe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(soe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(loe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ioe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(doe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(coe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(foe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(goe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hoe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(poe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_oe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(boe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Toe,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Moe,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Eoe,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Coe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(woe,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Aoe,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Loe,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(yoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($oe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(koe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(joe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c(Goe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ooe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Voe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xoe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForTokenClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(ere,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ore,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tre,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(are,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(nre,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(sre,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(lre,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ire,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(dre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(cre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(fre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(pre,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(_re,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(ure,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(bre,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(vre,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Tre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(Mre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ere,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wre,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForImageClassification"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(Are,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xre,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c($re,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.FlaxAutoModelForVision2Seq"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(kre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pre,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Li),b(f,Rf,u),b(f,st,u),e(st,yi),e(st,xi),e(xi,aL),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,$i),e(Qe,Bn),e(Bn,nL),e(Qe,In),e(Qe,Nn),e(Nn,sL),e(Qe,ki),e(Qe,qn),e(qn,lL),e(Qe,Si),b(f,Bf,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,qS),e(Ae,Ri),e(Ri,jS),e(Ae,DS),b(f,Co,u),b(f,Ra,u),e(Ra,GS),e(Ra,If),e(If,OS),e(Ra,EHe),b(f,iXe,u),b(f,Pi,u),e(Pi,Nf),e(Nf,yae),M(iL,yae,null),e(Pi,CHe),e(Pi,xae),e(xae,wHe),b(f,dXe,u),b(f,jn,u),e(jn,AHe),e(jn,$ae),e($ae,LHe),e(jn,yHe),e(jn,kae),e(kae,xHe),e(jn,$He),b(f,cXe,u),M(dL,f,u),b(f,fXe,u),b(f,VS,u),e(VS,kHe),b(f,mXe,u),M(qf,f,u),b(f,gXe,u),b(f,Bi,u),e(Bi,jf),e(jf,Sae),M(cL,Sae,null),e(Bi,SHe),e(Bi,Rae),e(Rae,RHe),b(f,hXe,u),b(f,wo,u),M(fL,wo,null),e(wo,PHe),e(wo,mL),e(mL,BHe),e(mL,XS),e(XS,IHe),e(mL,NHe),e(wo,qHe),e(wo,gL),e(gL,jHe),e(gL,Pae),e(Pae,DHe),e(gL,GHe),e(wo,OHe),e(wo,Lr),M(hL,Lr,null),e(Lr,VHe),e(Lr,Bae),e(Bae,XHe),e(Lr,zHe),e(Lr,Ii),e(Ii,QHe),e(Ii,Iae),e(Iae,WHe),e(Ii,HHe),e(Ii,Nae),e(Nae,UHe),e(Ii,JHe),e(Lr,YHe),e(Lr,A),e(A,Df),e(Df,qae),e(qae,KHe),e(Df,ZHe),e(Df,zS),e(zS,eUe),e(Df,oUe),e(A,rUe),e(A,Gf),e(Gf,jae),e(jae,tUe),e(Gf,aUe),e(Gf,QS),e(QS,nUe),e(Gf,sUe),e(A,lUe),e(A,Of),e(Of,Dae),e(Dae,iUe),e(Of,dUe),e(Of,WS),e(WS,cUe),e(Of,fUe),e(A,mUe),e(A,Vf),e(Vf,Gae),e(Gae,gUe),e(Vf,hUe),e(Vf,HS),e(HS,pUe),e(Vf,_Ue),e(A,uUe),e(A,Xf),e(Xf,Oae),e(Oae,bUe),e(Xf,vUe),e(Xf,US),e(US,FUe),e(Xf,TUe),e(A,MUe),e(A,zf),e(zf,Vae),e(Vae,EUe),e(zf,CUe),e(zf,JS),e(JS,wUe),e(zf,AUe),e(A,LUe),e(A,Qf),e(Qf,Xae),e(Xae,yUe),e(Qf,xUe),e(Qf,YS),e(YS,$Ue),e(Qf,kUe),e(A,SUe),e(A,Wf),e(Wf,zae),e(zae,RUe),e(Wf,PUe),e(Wf,KS),e(KS,BUe),e(Wf,IUe),e(A,NUe),e(A,Hf),e(Hf,Qae),e(Qae,qUe),e(Hf,jUe),e(Hf,ZS),e(ZS,DUe),e(Hf,GUe),e(A,OUe),e(A,Uf),e(Uf,Wae),e(Wae,VUe),e(Uf,XUe),e(Uf,eR),e(eR,zUe),e(Uf,QUe),e(A,WUe),e(A,Jf),e(Jf,Hae),e(Hae,HUe),e(Jf,UUe),e(Jf,oR),e(oR,JUe),e(Jf,YUe),e(A,KUe),e(A,Yf),e(Yf,Uae),e(Uae,ZUe),e(Yf,eJe),e(Yf,rR),e(rR,oJe),e(Yf,rJe),e(A,tJe),e(A,Kf),e(Kf,Jae),e(Jae,aJe),e(Kf,nJe),e(Kf,tR),e(tR,sJe),e(Kf,lJe),e(A,iJe),e(A,Zf),e(Zf,Yae),e(Yae,dJe),e(Zf,cJe),e(Zf,aR),e(aR,fJe),e(Zf,mJe),e(A,gJe),e(A,em),e(em,Kae),e(Kae,hJe),e(em,pJe),e(em,nR),e(nR,_Je),e(em,uJe),e(A,bJe),e(A,om),e(om,Zae),e(Zae,vJe),e(om,FJe),e(om,sR),e(sR,TJe),e(om,MJe),e(A,EJe),e(A,rm),e(rm,ene),e(ene,CJe),e(rm,wJe),e(rm,lR),e(lR,AJe),e(rm,LJe),e(A,yJe),e(A,tm),e(tm,one),e(one,xJe),e(tm,$Je),e(tm,iR),e(iR,kJe),e(tm,SJe),e(A,RJe),e(A,am),e(am,rne),e(rne,PJe),e(am,BJe),e(am,dR),e(dR,IJe),e(am,NJe),e(A,qJe),e(A,nm),e(nm,tne),e(tne,jJe),e(nm,DJe),e(nm,cR),e(cR,GJe),e(nm,OJe),e(A,VJe),e(A,sm),e(sm,ane),e(ane,XJe),e(sm,zJe),e(sm,fR),e(fR,QJe),e(sm,WJe),e(A,HJe),e(A,lm),e(lm,nne),e(nne,UJe),e(lm,JJe),e(lm,mR),e(mR,YJe),e(lm,KJe),e(A,ZJe),e(A,im),e(im,sne),e(sne,eYe),e(im,oYe),e(im,gR),e(gR,rYe),e(im,tYe),e(A,aYe),e(A,dm),e(dm,lne),e(lne,nYe),e(dm,sYe),e(dm,hR),e(hR,lYe),e(dm,iYe),e(A,dYe),e(A,cm),e(cm,ine),e(ine,cYe),e(cm,fYe),e(cm,pR),e(pR,mYe),e(cm,gYe),e(A,hYe),e(A,fm),e(fm,dne),e(dne,pYe),e(fm,_Ye),e(fm,_R),e(_R,uYe),e(fm,bYe),e(A,vYe),e(A,mm),e(mm,cne),e(cne,FYe),e(mm,TYe),e(mm,uR),e(uR,MYe),e(mm,EYe),e(A,CYe),e(A,gm),e(gm,fne),e(fne,wYe),e(gm,AYe),e(gm,bR),e(bR,LYe),e(gm,yYe),e(A,xYe),e(A,hm),e(hm,mne),e(mne,$Ye),e(hm,kYe),e(hm,vR),e(vR,SYe),e(hm,RYe),e(A,PYe),e(A,pm),e(pm,gne),e(gne,BYe),e(pm,IYe),e(pm,FR),e(FR,NYe),e(pm,qYe),e(A,jYe),e(A,_m),e(_m,hne),e(hne,DYe),e(_m,GYe),e(_m,TR),e(TR,OYe),e(_m,VYe),e(A,XYe),e(A,um),e(um,pne),e(pne,zYe),e(um,QYe),e(um,MR),e(MR,WYe),e(um,HYe),e(A,UYe),e(A,bm),e(bm,_ne),e(_ne,JYe),e(bm,YYe),e(bm,ER),e(ER,KYe),e(bm,ZYe),e(A,eKe),e(A,vm),e(vm,une),e(une,oKe),e(vm,rKe),e(vm,CR),e(CR,tKe),e(vm,aKe),e(A,nKe),e(A,Fm),e(Fm,bne),e(bne,sKe),e(Fm,lKe),e(Fm,wR),e(wR,iKe),e(Fm,dKe),e(A,cKe),e(A,Tm),e(Tm,vne),e(vne,fKe),e(Tm,mKe),e(Tm,AR),e(AR,gKe),e(Tm,hKe),e(A,pKe),e(A,Mm),e(Mm,Fne),e(Fne,_Ke),e(Mm,uKe),e(Mm,LR),e(LR,bKe),e(Mm,vKe),e(A,FKe),e(A,Em),e(Em,Tne),e(Tne,TKe),e(Em,MKe),e(Em,yR),e(yR,EKe),e(Em,CKe),e(A,wKe),e(A,Cm),e(Cm,Mne),e(Mne,AKe),e(Cm,LKe),e(Cm,xR),e(xR,yKe),e(Cm,xKe),e(A,$Ke),e(A,wm),e(wm,Ene),e(Ene,kKe),e(wm,SKe),e(wm,$R),e($R,RKe),e(wm,PKe),e(A,BKe),e(A,Am),e(Am,Cne),e(Cne,IKe),e(Am,NKe),e(Am,kR),e(kR,qKe),e(Am,jKe),e(A,DKe),e(A,Lm),e(Lm,wne),e(wne,GKe),e(Lm,OKe),e(Lm,SR),e(SR,VKe),e(Lm,XKe),e(A,zKe),e(A,ym),e(ym,Ane),e(Ane,QKe),e(ym,WKe),e(ym,RR),e(RR,HKe),e(ym,UKe),e(A,JKe),e(A,xm),e(xm,Lne),e(Lne,YKe),e(xm,KKe),e(xm,PR),e(PR,ZKe),e(xm,eZe),e(A,oZe),e(A,$m),e($m,yne),e(yne,rZe),e($m,tZe),e($m,BR),e(BR,aZe),e($m,nZe),e(A,sZe),e(A,km),e(km,xne),e(xne,lZe),e(km,iZe),e(km,IR),e(IR,dZe),e(km,cZe),e(A,fZe),e(A,Sm),e(Sm,$ne),e($ne,mZe),e(Sm,gZe),e(Sm,NR),e(NR,hZe),e(Sm,pZe),e(A,_Ze),e(A,Rm),e(Rm,kne),e(kne,uZe),e(Rm,bZe),e(Rm,qR),e(qR,vZe),e(Rm,FZe),e(A,TZe),e(A,Pm),e(Pm,Sne),e(Sne,MZe),e(Pm,EZe),e(Pm,jR),e(jR,CZe),e(Pm,wZe),e(A,AZe),e(A,Bm),e(Bm,Rne),e(Rne,LZe),e(Bm,yZe),e(Bm,DR),e(DR,xZe),e(Bm,$Ze),e(A,kZe),e(A,Im),e(Im,Pne),e(Pne,SZe),e(Im,RZe),e(Im,GR),e(GR,PZe),e(Im,BZe),e(A,IZe),e(A,Nm),e(Nm,Bne),e(Bne,NZe),e(Nm,qZe),e(Nm,OR),e(OR,jZe),e(Nm,DZe),e(A,GZe),e(A,qm),e(qm,Ine),e(Ine,OZe),e(qm,VZe),e(qm,VR),e(VR,XZe),e(qm,zZe),e(A,QZe),e(A,jm),e(jm,Nne),e(Nne,WZe),e(jm,HZe),e(jm,XR),e(XR,UZe),e(jm,JZe),e(A,YZe),e(A,Dm),e(Dm,qne),e(qne,KZe),e(Dm,ZZe),e(Dm,zR),e(zR,eeo),e(Dm,oeo),e(A,reo),e(A,Gm),e(Gm,jne),e(jne,teo),e(Gm,aeo),e(Gm,QR),e(QR,neo),e(Gm,seo),e(A,leo),e(A,Om),e(Om,Dne),e(Dne,ieo),e(Om,deo),e(Om,WR),e(WR,ceo),e(Om,feo),e(A,meo),e(A,Vm),e(Vm,Gne),e(Gne,geo),e(Vm,heo),e(Vm,HR),e(HR,peo),e(Vm,_eo),e(A,ueo),e(A,Xm),e(Xm,One),e(One,beo),e(Xm,veo),e(Xm,UR),e(UR,Feo),e(Xm,Teo),e(A,Meo),e(A,zm),e(zm,Vne),e(Vne,Eeo),e(zm,Ceo),e(zm,JR),e(JR,weo),e(zm,Aeo),e(A,Leo),e(A,Qm),e(Qm,Xne),e(Xne,yeo),e(Qm,xeo),e(Qm,YR),e(YR,$eo),e(Qm,keo),e(A,Seo),e(A,Wm),e(Wm,zne),e(zne,Reo),e(Wm,Peo),e(Wm,KR),e(KR,Beo),e(Wm,Ieo),e(A,Neo),e(A,Hm),e(Hm,Qne),e(Qne,qeo),e(Hm,jeo),e(Hm,ZR),e(ZR,Deo),e(Hm,Geo),e(A,Oeo),e(A,Um),e(Um,Wne),e(Wne,Veo),e(Um,Xeo),e(Um,eP),e(eP,zeo),e(Um,Qeo),e(A,Weo),e(A,Jm),e(Jm,Hne),e(Hne,Heo),e(Jm,Ueo),e(Jm,oP),e(oP,Jeo),e(Jm,Yeo),e(A,Keo),e(A,Ym),e(Ym,Une),e(Une,Zeo),e(Ym,eoo),e(Ym,rP),e(rP,ooo),e(Ym,roo),e(A,too),e(A,Km),e(Km,Jne),e(Jne,aoo),e(Km,noo),e(Km,tP),e(tP,soo),e(Km,loo),e(A,ioo),e(A,Zm),e(Zm,Yne),e(Yne,doo),e(Zm,coo),e(Zm,aP),e(aP,foo),e(Zm,moo),e(A,goo),e(A,eg),e(eg,Kne),e(Kne,hoo),e(eg,poo),e(eg,nP),e(nP,_oo),e(eg,uoo),e(A,boo),e(A,og),e(og,Zne),e(Zne,voo),e(og,Foo),e(og,sP),e(sP,Too),e(og,Moo),e(A,Eoo),e(A,rg),e(rg,ese),e(ese,Coo),e(rg,woo),e(rg,lP),e(lP,Aoo),e(rg,Loo),e(A,yoo),e(A,tg),e(tg,ose),e(ose,xoo),e(tg,$oo),e(tg,iP),e(iP,koo),e(tg,Soo),e(A,Roo),e(A,ag),e(ag,rse),e(rse,Poo),e(ag,Boo),e(ag,dP),e(dP,Ioo),e(ag,Noo),e(A,qoo),e(A,ng),e(ng,tse),e(tse,joo),e(ng,Doo),e(ng,cP),e(cP,Goo),e(ng,Ooo),e(A,Voo),e(A,sg),e(sg,ase),e(ase,Xoo),e(sg,zoo),e(sg,fP),e(fP,Qoo),e(sg,Woo),e(A,Hoo),e(A,lg),e(lg,nse),e(nse,Uoo),e(lg,Joo),e(lg,mP),e(mP,Yoo),e(lg,Koo),e(A,Zoo),e(A,ig),e(ig,sse),e(sse,ero),e(ig,oro),e(ig,gP),e(gP,rro),e(ig,tro),e(A,aro),e(A,dg),e(dg,lse),e(lse,nro),e(dg,sro),e(dg,hP),e(hP,lro),e(dg,iro),e(A,dro),e(A,cg),e(cg,ise),e(ise,cro),e(cg,fro),e(cg,pP),e(pP,mro),e(cg,gro),e(A,hro),e(A,fg),e(fg,dse),e(dse,pro),e(fg,_ro),e(fg,_P),e(_P,uro),e(fg,bro),e(A,vro),e(A,mg),e(mg,cse),e(cse,Fro),e(mg,Tro),e(mg,uP),e(uP,Mro),e(mg,Ero),e(A,Cro),e(A,gg),e(gg,fse),e(fse,wro),e(gg,Aro),e(gg,bP),e(bP,Lro),e(gg,yro),e(A,xro),e(A,hg),e(hg,mse),e(mse,$ro),e(hg,kro),e(hg,vP),e(vP,Sro),e(hg,Rro),e(A,Pro),e(A,pg),e(pg,gse),e(gse,Bro),e(pg,Iro),e(pg,FP),e(FP,Nro),e(pg,qro),e(A,jro),e(A,_g),e(_g,hse),e(hse,Dro),e(_g,Gro),e(_g,TP),e(TP,Oro),e(_g,Vro),e(A,Xro),e(A,ug),e(ug,pse),e(pse,zro),e(ug,Qro),e(ug,MP),e(MP,Wro),e(ug,Hro),e(A,Uro),e(A,bg),e(bg,_se),e(_se,Jro),e(bg,Yro),e(bg,EP),e(EP,Kro),e(bg,Zro),e(A,eto),e(A,vg),e(vg,use),e(use,oto),e(vg,rto),e(vg,CP),e(CP,tto),e(vg,ato),e(A,nto),e(A,Fg),e(Fg,bse),e(bse,sto),e(Fg,lto),e(Fg,wP),e(wP,ito),e(Fg,dto),e(A,cto),e(A,Tg),e(Tg,vse),e(vse,fto),e(Tg,mto),e(Tg,AP),e(AP,gto),e(Tg,hto),e(A,pto),e(A,Mg),e(Mg,Fse),e(Fse,_to),e(Mg,uto),e(Mg,LP),e(LP,bto),e(Mg,vto),e(A,Fto),e(A,Eg),e(Eg,Tse),e(Tse,Tto),e(Eg,Mto),e(Eg,yP),e(yP,Eto),e(Eg,Cto),e(A,wto),e(A,Cg),e(Cg,Mse),e(Mse,Ato),e(Cg,Lto),e(Cg,xP),e(xP,yto),e(Cg,xto),e(A,$to),e(A,wg),e(wg,Ese),e(Ese,kto),e(wg,Sto),e(wg,$P),e($P,Rto),e(wg,Pto),e(A,Bto),e(A,Ag),e(Ag,Cse),e(Cse,Ito),e(Ag,Nto),e(Ag,kP),e(kP,qto),e(Ag,jto),e(A,Dto),e(A,Lg),e(Lg,wse),e(wse,Gto),e(Lg,Oto),e(Lg,SP),e(SP,Vto),e(Lg,Xto),e(A,zto),e(A,yg),e(yg,Ase),e(Ase,Qto),e(yg,Wto),e(yg,RP),e(RP,Hto),e(yg,Uto),e(A,Jto),e(A,xg),e(xg,Lse),e(Lse,Yto),e(xg,Kto),e(xg,PP),e(PP,Zto),e(xg,eao),e(A,oao),e(A,$g),e($g,yse),e(yse,rao),e($g,tao),e($g,BP),e(BP,aao),e($g,nao),e(A,sao),e(A,kg),e(kg,xse),e(xse,lao),e(kg,iao),e(kg,IP),e(IP,dao),e(kg,cao),e(A,fao),e(A,Sg),e(Sg,$se),e($se,mao),e(Sg,gao),e(Sg,NP),e(NP,hao),e(Sg,pao),e(A,_ao),e(A,Rg),e(Rg,kse),e(kse,uao),e(Rg,bao),e(Rg,qP),e(qP,vao),e(Rg,Fao),e(A,Tao),e(A,Pg),e(Pg,Sse),e(Sse,Mao),e(Pg,Eao),e(Pg,jP),e(jP,Cao),e(Pg,wao),e(A,Aao),e(A,Bg),e(Bg,Rse),e(Rse,Lao),e(Bg,yao),e(Bg,DP),e(DP,xao),e(Bg,$ao),e(A,kao),e(A,Ig),e(Ig,Pse),e(Pse,Sao),e(Ig,Rao),e(Ig,GP),e(GP,Pao),e(Ig,Bao),e(A,Iao),e(A,Ng),e(Ng,Bse),e(Bse,Nao),e(Ng,qao),e(Ng,OP),e(OP,jao),e(Ng,Dao),e(A,Gao),e(A,qg),e(qg,Ise),e(Ise,Oao),e(qg,Vao),e(qg,VP),e(VP,Xao),e(qg,zao),e(A,Qao),e(A,jg),e(jg,Nse),e(Nse,Wao),e(jg,Hao),e(jg,XP),e(XP,Uao),e(jg,Jao),e(A,Yao),e(A,Dg),e(Dg,qse),e(qse,Kao),e(Dg,Zao),e(Dg,zP),e(zP,eno),e(Dg,ono),e(A,rno),e(A,Gg),e(Gg,jse),e(jse,tno),e(Gg,ano),e(Gg,QP),e(QP,nno),e(Gg,sno),e(A,lno),e(A,Og),e(Og,Dse),e(Dse,ino),e(Og,dno),e(Og,WP),e(WP,cno),e(Og,fno),e(A,mno),e(A,Vg),e(Vg,Gse),e(Gse,gno),e(Vg,hno),e(Vg,HP),e(HP,pno),e(Vg,_no),e(A,uno),e(A,Xg),e(Xg,Ose),e(Ose,bno),e(Xg,vno),e(Xg,UP),e(UP,Fno),e(Xg,Tno),e(A,Mno),e(A,zg),e(zg,Vse),e(Vse,Eno),e(zg,Cno),e(zg,JP),e(JP,wno),e(zg,Ano),e(A,Lno),e(A,Qg),e(Qg,Xse),e(Xse,yno),e(Qg,xno),e(Qg,YP),e(YP,$no),e(Qg,kno),e(A,Sno),e(A,Wg),e(Wg,zse),e(zse,Rno),e(Wg,Pno),e(Wg,KP),e(KP,Bno),e(Wg,Ino),e(A,Nno),e(A,Hg),e(Hg,Qse),e(Qse,qno),e(Hg,jno),e(Hg,ZP),e(ZP,Dno),e(Hg,Gno),e(A,Ono),e(A,Ug),e(Ug,Wse),e(Wse,Vno),e(Ug,Xno),e(Ug,eB),e(eB,zno),e(Ug,Qno),e(A,Wno),e(A,Jg),e(Jg,Hse),e(Hse,Hno),e(Jg,Uno),e(Jg,oB),e(oB,Jno),e(Jg,Yno),e(Lr,Kno),M(Yg,Lr,null),e(wo,Zno),e(wo,Kg),M(pL,Kg,null),e(Kg,eso),e(Kg,Use),e(Use,oso),b(f,pXe,u),b(f,Ni,u),e(Ni,Zg),e(Zg,Jse),M(_L,Jse,null),e(Ni,rso),e(Ni,Yse),e(Yse,tso),b(f,_Xe,u),b(f,Ao,u),M(uL,Ao,null),e(Ao,aso),e(Ao,bL),e(bL,nso),e(bL,rB),e(rB,sso),e(bL,lso),e(Ao,iso),e(Ao,vL),e(vL,dso),e(vL,Kse),e(Kse,cso),e(vL,fso),e(Ao,mso),e(Ao,yr),M(FL,yr,null),e(yr,gso),e(yr,Zse),e(Zse,hso),e(yr,pso),e(yr,Pa),e(Pa,_so),e(Pa,ele),e(ele,uso),e(Pa,bso),e(Pa,ole),e(ole,vso),e(Pa,Fso),e(Pa,rle),e(rle,Tso),e(Pa,Mso),e(yr,Eso),e(yr,k),e(k,Dn),e(Dn,tle),e(tle,Cso),e(Dn,wso),e(Dn,tB),e(tB,Aso),e(Dn,Lso),e(Dn,aB),e(aB,yso),e(Dn,xso),e(k,$so),e(k,Gn),e(Gn,ale),e(ale,kso),e(Gn,Sso),e(Gn,nB),e(nB,Rso),e(Gn,Pso),e(Gn,sB),e(sB,Bso),e(Gn,Iso),e(k,Nso),e(k,On),e(On,nle),e(nle,qso),e(On,jso),e(On,lB),e(lB,Dso),e(On,Gso),e(On,iB),e(iB,Oso),e(On,Vso),e(k,Xso),e(k,eh),e(eh,sle),e(sle,zso),e(eh,Qso),e(eh,dB),e(dB,Wso),e(eh,Hso),e(k,Uso),e(k,Vn),e(Vn,lle),e(lle,Jso),e(Vn,Yso),e(Vn,cB),e(cB,Kso),e(Vn,Zso),e(Vn,fB),e(fB,elo),e(Vn,olo),e(k,rlo),e(k,oh),e(oh,ile),e(ile,tlo),e(oh,alo),e(oh,mB),e(mB,nlo),e(oh,slo),e(k,llo),e(k,rh),e(rh,dle),e(dle,ilo),e(rh,dlo),e(rh,gB),e(gB,clo),e(rh,flo),e(k,mlo),e(k,th),e(th,cle),e(cle,glo),e(th,hlo),e(th,hB),e(hB,plo),e(th,_lo),e(k,ulo),e(k,Xn),e(Xn,fle),e(fle,blo),e(Xn,vlo),e(Xn,pB),e(pB,Flo),e(Xn,Tlo),e(Xn,_B),e(_B,Mlo),e(Xn,Elo),e(k,Clo),e(k,zn),e(zn,mle),e(mle,wlo),e(zn,Alo),e(zn,uB),e(uB,Llo),e(zn,ylo),e(zn,bB),e(bB,xlo),e(zn,$lo),e(k,klo),e(k,Qn),e(Qn,gle),e(gle,Slo),e(Qn,Rlo),e(Qn,vB),e(vB,Plo),e(Qn,Blo),e(Qn,FB),e(FB,Ilo),e(Qn,Nlo),e(k,qlo),e(k,ah),e(ah,hle),e(hle,jlo),e(ah,Dlo),e(ah,TB),e(TB,Glo),e(ah,Olo),e(k,Vlo),e(k,nh),e(nh,ple),e(ple,Xlo),e(nh,zlo),e(nh,MB),e(MB,Qlo),e(nh,Wlo),e(k,Hlo),e(k,sh),e(sh,_le),e(_le,Ulo),e(sh,Jlo),e(sh,EB),e(EB,Ylo),e(sh,Klo),e(k,Zlo),e(k,Wn),e(Wn,ule),e(ule,eio),e(Wn,oio),e(Wn,CB),e(CB,rio),e(Wn,tio),e(Wn,wB),e(wB,aio),e(Wn,nio),e(k,sio),e(k,lh),e(lh,ble),e(ble,lio),e(lh,iio),e(lh,AB),e(AB,dio),e(lh,cio),e(k,fio),e(k,Hn),e(Hn,vle),e(vle,mio),e(Hn,gio),e(Hn,LB),e(LB,hio),e(Hn,pio),e(Hn,yB),e(yB,_io),e(Hn,uio),e(k,bio),e(k,Un),e(Un,Fle),e(Fle,vio),e(Un,Fio),e(Un,xB),e(xB,Tio),e(Un,Mio),e(Un,$B),e($B,Eio),e(Un,Cio),e(k,wio),e(k,Jn),e(Jn,Tle),e(Tle,Aio),e(Jn,Lio),e(Jn,kB),e(kB,yio),e(Jn,xio),e(Jn,SB),e(SB,$io),e(Jn,kio),e(k,Sio),e(k,Yn),e(Yn,Mle),e(Mle,Rio),e(Yn,Pio),e(Yn,RB),e(RB,Bio),e(Yn,Iio),e(Yn,PB),e(PB,Nio),e(Yn,qio),e(k,jio),e(k,ih),e(ih,Ele),e(Ele,Dio),e(ih,Gio),e(ih,BB),e(BB,Oio),e(ih,Vio),e(k,Xio),e(k,Kn),e(Kn,Cle),e(Cle,zio),e(Kn,Qio),e(Kn,IB),e(IB,Wio),e(Kn,Hio),e(Kn,NB),e(NB,Uio),e(Kn,Jio),e(k,Yio),e(k,Zn),e(Zn,wle),e(wle,Kio),e(Zn,Zio),e(Zn,qB),e(qB,edo),e(Zn,odo),e(Zn,jB),e(jB,rdo),e(Zn,tdo),e(k,ado),e(k,es),e(es,Ale),e(Ale,ndo),e(es,sdo),e(es,DB),e(DB,ldo),e(es,ido),e(es,GB),e(GB,ddo),e(es,cdo),e(k,fdo),e(k,os),e(os,Lle),e(Lle,mdo),e(os,gdo),e(os,OB),e(OB,hdo),e(os,pdo),e(os,VB),e(VB,_do),e(os,udo),e(k,bdo),e(k,rs),e(rs,yle),e(yle,vdo),e(rs,Fdo),e(rs,XB),e(XB,Tdo),e(rs,Mdo),e(rs,zB),e(zB,Edo),e(rs,Cdo),e(k,wdo),e(k,ts),e(ts,xle),e(xle,Ado),e(ts,Ldo),e(ts,QB),e(QB,ydo),e(ts,xdo),e(ts,WB),e(WB,$do),e(ts,kdo),e(k,Sdo),e(k,dh),e(dh,$le),e($le,Rdo),e(dh,Pdo),e(dh,HB),e(HB,Bdo),e(dh,Ido),e(k,Ndo),e(k,as),e(as,kle),e(kle,qdo),e(as,jdo),e(as,UB),e(UB,Ddo),e(as,Gdo),e(as,JB),e(JB,Odo),e(as,Vdo),e(k,Xdo),e(k,ch),e(ch,Sle),e(Sle,zdo),e(ch,Qdo),e(ch,YB),e(YB,Wdo),e(ch,Hdo),e(k,Udo),e(k,ns),e(ns,Rle),e(Rle,Jdo),e(ns,Ydo),e(ns,KB),e(KB,Kdo),e(ns,Zdo),e(ns,ZB),e(ZB,eco),e(ns,oco),e(k,rco),e(k,ss),e(ss,Ple),e(Ple,tco),e(ss,aco),e(ss,eI),e(eI,nco),e(ss,sco),e(ss,oI),e(oI,lco),e(ss,ico),e(k,dco),e(k,ls),e(ls,Ble),e(Ble,cco),e(ls,fco),e(ls,rI),e(rI,mco),e(ls,gco),e(ls,tI),e(tI,hco),e(ls,pco),e(k,_co),e(k,fh),e(fh,Ile),e(Ile,uco),e(fh,bco),e(fh,aI),e(aI,vco),e(fh,Fco),e(k,Tco),e(k,is),e(is,Nle),e(Nle,Mco),e(is,Eco),e(is,nI),e(nI,Cco),e(is,wco),e(is,sI),e(sI,Aco),e(is,Lco),e(k,yco),e(k,ds),e(ds,qle),e(qle,xco),e(ds,$co),e(ds,lI),e(lI,kco),e(ds,Sco),e(ds,iI),e(iI,Rco),e(ds,Pco),e(k,Bco),e(k,cs),e(cs,jle),e(jle,Ico),e(cs,Nco),e(cs,dI),e(dI,qco),e(cs,jco),e(cs,cI),e(cI,Dco),e(cs,Gco),e(k,Oco),e(k,mh),e(mh,Dle),e(Dle,Vco),e(mh,Xco),e(mh,fI),e(fI,zco),e(mh,Qco),e(k,Wco),e(k,fs),e(fs,Gle),e(Gle,Hco),e(fs,Uco),e(fs,mI),e(mI,Jco),e(fs,Yco),e(fs,gI),e(gI,Kco),e(fs,Zco),e(k,efo),e(k,ms),e(ms,Ole),e(Ole,ofo),e(ms,rfo),e(ms,hI),e(hI,tfo),e(ms,afo),e(ms,pI),e(pI,nfo),e(ms,sfo),e(k,lfo),e(k,gs),e(gs,Vle),e(Vle,ifo),e(gs,dfo),e(gs,_I),e(_I,cfo),e(gs,ffo),e(gs,uI),e(uI,mfo),e(gs,gfo),e(k,hfo),e(k,hs),e(hs,Xle),e(Xle,pfo),e(hs,_fo),e(hs,bI),e(bI,ufo),e(hs,bfo),e(hs,vI),e(vI,vfo),e(hs,Ffo),e(k,Tfo),e(k,ps),e(ps,zle),e(zle,Mfo),e(ps,Efo),e(ps,FI),e(FI,Cfo),e(ps,wfo),e(ps,TI),e(TI,Afo),e(ps,Lfo),e(k,yfo),e(k,_s),e(_s,Qle),e(Qle,xfo),e(_s,$fo),e(_s,MI),e(MI,kfo),e(_s,Sfo),e(_s,EI),e(EI,Rfo),e(_s,Pfo),e(k,Bfo),e(k,us),e(us,Wle),e(Wle,Ifo),e(us,Nfo),e(us,CI),e(CI,qfo),e(us,jfo),e(us,wI),e(wI,Dfo),e(us,Gfo),e(k,Ofo),e(k,bs),e(bs,Hle),e(Hle,Vfo),e(bs,Xfo),e(bs,AI),e(AI,zfo),e(bs,Qfo),e(bs,LI),e(LI,Wfo),e(bs,Hfo),e(k,Ufo),e(k,gh),e(gh,Ule),e(Ule,Jfo),e(gh,Yfo),e(gh,yI),e(yI,Kfo),e(gh,Zfo),e(k,emo),e(k,vs),e(vs,Jle),e(Jle,omo),e(vs,rmo),e(vs,xI),e(xI,tmo),e(vs,amo),e(vs,$I),e($I,nmo),e(vs,smo),e(k,lmo),e(k,hh),e(hh,Yle),e(Yle,imo),e(hh,dmo),e(hh,kI),e(kI,cmo),e(hh,fmo),e(k,mmo),e(k,ph),e(ph,Kle),e(Kle,gmo),e(ph,hmo),e(ph,SI),e(SI,pmo),e(ph,_mo),e(k,umo),e(k,Fs),e(Fs,Zle),e(Zle,bmo),e(Fs,vmo),e(Fs,RI),e(RI,Fmo),e(Fs,Tmo),e(Fs,PI),e(PI,Mmo),e(Fs,Emo),e(k,Cmo),e(k,Ts),e(Ts,eie),e(eie,wmo),e(Ts,Amo),e(Ts,BI),e(BI,Lmo),e(Ts,ymo),e(Ts,II),e(II,xmo),e(Ts,$mo),e(k,kmo),e(k,Ms),e(Ms,oie),e(oie,Smo),e(Ms,Rmo),e(Ms,NI),e(NI,Pmo),e(Ms,Bmo),e(Ms,qI),e(qI,Imo),e(Ms,Nmo),e(k,qmo),e(k,_h),e(_h,rie),e(rie,jmo),e(_h,Dmo),e(_h,jI),e(jI,Gmo),e(_h,Omo),e(k,Vmo),e(k,Es),e(Es,tie),e(tie,Xmo),e(Es,zmo),e(Es,DI),e(DI,Qmo),e(Es,Wmo),e(Es,GI),e(GI,Hmo),e(Es,Umo),e(k,Jmo),e(k,Cs),e(Cs,aie),e(aie,Ymo),e(Cs,Kmo),e(Cs,OI),e(OI,Zmo),e(Cs,ego),e(Cs,VI),e(VI,ogo),e(Cs,rgo),e(k,tgo),e(k,ws),e(ws,nie),e(nie,ago),e(ws,ngo),e(ws,XI),e(XI,sgo),e(ws,lgo),e(ws,zI),e(zI,igo),e(ws,dgo),e(k,cgo),e(k,As),e(As,sie),e(sie,fgo),e(As,mgo),e(As,QI),e(QI,ggo),e(As,hgo),e(As,WI),e(WI,pgo),e(As,_go),e(k,ugo),e(k,Ls),e(Ls,lie),e(lie,bgo),e(Ls,vgo),e(Ls,HI),e(HI,Fgo),e(Ls,Tgo),e(Ls,UI),e(UI,Mgo),e(Ls,Ego),e(k,Cgo),e(k,ys),e(ys,iie),e(iie,wgo),e(ys,Ago),e(ys,JI),e(JI,Lgo),e(ys,ygo),e(ys,YI),e(YI,xgo),e(ys,$go),e(k,kgo),e(k,xs),e(xs,die),e(die,Sgo),e(xs,Rgo),e(xs,KI),e(KI,Pgo),e(xs,Bgo),e(xs,ZI),e(ZI,Igo),e(xs,Ngo),e(k,qgo),e(k,uh),e(uh,cie),e(cie,jgo),e(uh,Dgo),e(uh,eN),e(eN,Ggo),e(uh,Ogo),e(k,Vgo),e(k,$s),e($s,fie),e(fie,Xgo),e($s,zgo),e($s,oN),e(oN,Qgo),e($s,Wgo),e($s,rN),e(rN,Hgo),e($s,Ugo),e(k,Jgo),e(k,bh),e(bh,mie),e(mie,Ygo),e(bh,Kgo),e(bh,tN),e(tN,Zgo),e(bh,eho),e(k,oho),e(k,vh),e(vh,gie),e(gie,rho),e(vh,tho),e(vh,aN),e(aN,aho),e(vh,nho),e(k,sho),e(k,Fh),e(Fh,hie),e(hie,lho),e(Fh,iho),e(Fh,nN),e(nN,dho),e(Fh,cho),e(k,fho),e(k,Th),e(Th,pie),e(pie,mho),e(Th,gho),e(Th,sN),e(sN,hho),e(Th,pho),e(k,_ho),e(k,ks),e(ks,_ie),e(_ie,uho),e(ks,bho),e(ks,lN),e(lN,vho),e(ks,Fho),e(ks,iN),e(iN,Tho),e(ks,Mho),e(k,Eho),e(k,Mh),e(Mh,uie),e(uie,Cho),e(Mh,who),e(Mh,dN),e(dN,Aho),e(Mh,Lho),e(k,yho),e(k,Ss),e(Ss,bie),e(bie,xho),e(Ss,$ho),e(Ss,cN),e(cN,kho),e(Ss,Sho),e(Ss,fN),e(fN,Rho),e(Ss,Pho),e(k,Bho),e(k,Rs),e(Rs,vie),e(vie,Iho),e(Rs,Nho),e(Rs,mN),e(mN,qho),e(Rs,jho),e(Rs,gN),e(gN,Dho),e(Rs,Gho),e(k,Oho),e(k,Ps),e(Ps,Fie),e(Fie,Vho),e(Ps,Xho),e(Ps,hN),e(hN,zho),e(Ps,Qho),e(Ps,pN),e(pN,Who),e(Ps,Hho),e(k,Uho),e(k,Bs),e(Bs,Tie),e(Tie,Jho),e(Bs,Yho),e(Bs,_N),e(_N,Kho),e(Bs,Zho),e(Bs,uN),e(uN,epo),e(Bs,opo),e(k,rpo),e(k,Is),e(Is,Mie),e(Mie,tpo),e(Is,apo),e(Is,bN),e(bN,npo),e(Is,spo),e(Is,vN),e(vN,lpo),e(Is,ipo),e(k,dpo),e(k,Ns),e(Ns,Eie),e(Eie,cpo),e(Ns,fpo),e(Ns,FN),e(FN,mpo),e(Ns,gpo),e(Ns,TN),e(TN,hpo),e(Ns,ppo),e(k,_po),e(k,Eh),e(Eh,Cie),e(Cie,upo),e(Eh,bpo),e(Eh,MN),e(MN,vpo),e(Eh,Fpo),e(k,Tpo),e(k,Ch),e(Ch,wie),e(wie,Mpo),e(Ch,Epo),e(Ch,EN),e(EN,Cpo),e(Ch,wpo),e(k,Apo),e(k,qs),e(qs,Aie),e(Aie,Lpo),e(qs,ypo),e(qs,CN),e(CN,xpo),e(qs,$po),e(qs,wN),e(wN,kpo),e(qs,Spo),e(k,Rpo),e(k,js),e(js,Lie),e(Lie,Ppo),e(js,Bpo),e(js,AN),e(AN,Ipo),e(js,Npo),e(js,LN),e(LN,qpo),e(js,jpo),e(k,Dpo),e(k,Ds),e(Ds,yie),e(yie,Gpo),e(Ds,Opo),e(Ds,yN),e(yN,Vpo),e(Ds,Xpo),e(Ds,xN),e(xN,zpo),e(Ds,Qpo),e(k,Wpo),e(k,wh),e(wh,xie),e(xie,Hpo),e(wh,Upo),e(wh,$N),e($N,Jpo),e(wh,Ypo),e(k,Kpo),e(k,Ah),e(Ah,$ie),e($ie,Zpo),e(Ah,e_o),e(Ah,kN),e(kN,o_o),e(Ah,r_o),e(k,t_o),e(k,Lh),e(Lh,kie),e(kie,a_o),e(Lh,n_o),e(Lh,SN),e(SN,s_o),e(Lh,l_o),e(k,i_o),e(k,Gs),e(Gs,Sie),e(Sie,d_o),e(Gs,c_o),e(Gs,RN),e(RN,f_o),e(Gs,m_o),e(Gs,PN),e(PN,g_o),e(Gs,h_o),e(k,p_o),e(k,Os),e(Os,Rie),e(Rie,__o),e(Os,u_o),e(Os,BN),e(BN,b_o),e(Os,v_o),e(Os,IN),e(IN,F_o),e(Os,T_o),e(k,M_o),e(k,yh),e(yh,Pie),e(Pie,E_o),e(yh,C_o),e(yh,NN),e(NN,w_o),e(yh,A_o),e(k,L_o),e(k,xh),e(xh,Bie),e(Bie,y_o),e(xh,x_o),e(xh,qN),e(qN,$_o),e(xh,k_o),e(k,S_o),e(k,$h),e($h,Iie),e(Iie,R_o),e($h,P_o),e($h,jN),e(jN,B_o),e($h,I_o),e(k,N_o),e(k,Vs),e(Vs,Nie),e(Nie,q_o),e(Vs,j_o),e(Vs,DN),e(DN,D_o),e(Vs,G_o),e(Vs,GN),e(GN,O_o),e(Vs,V_o),e(k,X_o),e(k,kh),e(kh,qie),e(qie,z_o),e(kh,Q_o),e(kh,ON),e(ON,W_o),e(kh,H_o),e(k,U_o),e(k,Sh),e(Sh,jie),e(jie,J_o),e(Sh,Y_o),e(Sh,VN),e(VN,K_o),e(Sh,Z_o),e(k,euo),e(k,Xs),e(Xs,Die),e(Die,ouo),e(Xs,ruo),e(Xs,XN),e(XN,tuo),e(Xs,auo),e(Xs,zN),e(zN,nuo),e(Xs,suo),e(k,luo),e(k,zs),e(zs,Gie),e(Gie,iuo),e(zs,duo),e(zs,QN),e(QN,cuo),e(zs,fuo),e(zs,WN),e(WN,muo),e(zs,guo),e(k,huo),e(k,Qs),e(Qs,Oie),e(Oie,puo),e(Qs,_uo),e(Qs,HN),e(HN,uuo),e(Qs,buo),e(Qs,UN),e(UN,vuo),e(Qs,Fuo),e(k,Tuo),e(k,Ws),e(Ws,Vie),e(Vie,Muo),e(Ws,Euo),e(Ws,JN),e(JN,Cuo),e(Ws,wuo),e(Ws,YN),e(YN,Auo),e(Ws,Luo),e(yr,yuo),M(Rh,yr,null),e(Ao,xuo),e(Ao,Ph),M(TL,Ph,null),e(Ph,$uo),e(Ph,Xie),e(Xie,kuo),b(f,uXe,u),b(f,qi,u),e(qi,Bh),e(Bh,zie),M(ML,zie,null),e(qi,Suo),e(qi,Qie),e(Qie,Ruo),b(f,bXe,u),b(f,Lo,u),M(EL,Lo,null),e(Lo,Puo),e(Lo,CL),e(CL,Buo),e(CL,KN),e(KN,Iuo),e(CL,Nuo),e(Lo,quo),e(Lo,wL),e(wL,juo),e(wL,Wie),e(Wie,Duo),e(wL,Guo),e(Lo,Ouo),e(Lo,He),M(AL,He,null),e(He,Vuo),e(He,Hie),e(Hie,Xuo),e(He,zuo),e(He,Ba),e(Ba,Quo),e(Ba,Uie),e(Uie,Wuo),e(Ba,Huo),e(Ba,Jie),e(Jie,Uuo),e(Ba,Juo),e(Ba,Yie),e(Yie,Yuo),e(Ba,Kuo),e(He,Zuo),e(He,J),e(J,Ih),e(Ih,Kie),e(Kie,e1o),e(Ih,o1o),e(Ih,ZN),e(ZN,r1o),e(Ih,t1o),e(J,a1o),e(J,Nh),e(Nh,Zie),e(Zie,n1o),e(Nh,s1o),e(Nh,eq),e(eq,l1o),e(Nh,i1o),e(J,d1o),e(J,qh),e(qh,ede),e(ede,c1o),e(qh,f1o),e(qh,oq),e(oq,m1o),e(qh,g1o),e(J,h1o),e(J,jh),e(jh,ode),e(ode,p1o),e(jh,_1o),e(jh,rq),e(rq,u1o),e(jh,b1o),e(J,v1o),e(J,Dh),e(Dh,rde),e(rde,F1o),e(Dh,T1o),e(Dh,tq),e(tq,M1o),e(Dh,E1o),e(J,C1o),e(J,Gh),e(Gh,tde),e(tde,w1o),e(Gh,A1o),e(Gh,aq),e(aq,L1o),e(Gh,y1o),e(J,x1o),e(J,Oh),e(Oh,ade),e(ade,$1o),e(Oh,k1o),e(Oh,nq),e(nq,S1o),e(Oh,R1o),e(J,P1o),e(J,Vh),e(Vh,nde),e(nde,B1o),e(Vh,I1o),e(Vh,sq),e(sq,N1o),e(Vh,q1o),e(J,j1o),e(J,Xh),e(Xh,sde),e(sde,D1o),e(Xh,G1o),e(Xh,lq),e(lq,O1o),e(Xh,V1o),e(J,X1o),e(J,zh),e(zh,lde),e(lde,z1o),e(zh,Q1o),e(zh,iq),e(iq,W1o),e(zh,H1o),e(J,U1o),e(J,Qh),e(Qh,ide),e(ide,J1o),e(Qh,Y1o),e(Qh,dq),e(dq,K1o),e(Qh,Z1o),e(J,e2o),e(J,Wh),e(Wh,dde),e(dde,o2o),e(Wh,r2o),e(Wh,cq),e(cq,t2o),e(Wh,a2o),e(J,n2o),e(J,Hh),e(Hh,cde),e(cde,s2o),e(Hh,l2o),e(Hh,fq),e(fq,i2o),e(Hh,d2o),e(J,c2o),e(J,Uh),e(Uh,fde),e(fde,f2o),e(Uh,m2o),e(Uh,mq),e(mq,g2o),e(Uh,h2o),e(J,p2o),e(J,Jh),e(Jh,mde),e(mde,_2o),e(Jh,u2o),e(Jh,gq),e(gq,b2o),e(Jh,v2o),e(J,F2o),e(J,Yh),e(Yh,gde),e(gde,T2o),e(Yh,M2o),e(Yh,hq),e(hq,E2o),e(Yh,C2o),e(J,w2o),e(J,Kh),e(Kh,hde),e(hde,A2o),e(Kh,L2o),e(Kh,pq),e(pq,y2o),e(Kh,x2o),e(J,$2o),e(J,Zh),e(Zh,pde),e(pde,k2o),e(Zh,S2o),e(Zh,_q),e(_q,R2o),e(Zh,P2o),e(J,B2o),e(J,ep),e(ep,_de),e(_de,I2o),e(ep,N2o),e(ep,uq),e(uq,q2o),e(ep,j2o),e(J,D2o),e(J,op),e(op,ude),e(ude,G2o),e(op,O2o),e(op,bq),e(bq,V2o),e(op,X2o),e(J,z2o),e(J,rp),e(rp,bde),e(bde,Q2o),e(rp,W2o),e(rp,vq),e(vq,H2o),e(rp,U2o),e(J,J2o),e(J,tp),e(tp,vde),e(vde,Y2o),e(tp,K2o),e(tp,Fq),e(Fq,Z2o),e(tp,e4o),e(J,o4o),e(J,ap),e(ap,Fde),e(Fde,r4o),e(ap,t4o),e(ap,Tq),e(Tq,a4o),e(ap,n4o),e(J,s4o),e(J,np),e(np,Tde),e(Tde,l4o),e(np,i4o),e(np,Mq),e(Mq,d4o),e(np,c4o),e(J,f4o),e(J,sp),e(sp,Mde),e(Mde,m4o),e(sp,g4o),e(sp,Eq),e(Eq,h4o),e(sp,p4o),e(J,_4o),e(J,lp),e(lp,Ede),e(Ede,u4o),e(lp,b4o),e(lp,Cq),e(Cq,v4o),e(lp,F4o),e(J,T4o),e(J,ip),e(ip,Cde),e(Cde,M4o),e(ip,E4o),e(ip,wq),e(wq,C4o),e(ip,w4o),e(J,A4o),e(J,dp),e(dp,wde),e(wde,L4o),e(dp,y4o),e(dp,Aq),e(Aq,x4o),e(dp,$4o),e(J,k4o),e(J,cp),e(cp,Ade),e(Ade,S4o),e(cp,R4o),e(cp,Lq),e(Lq,P4o),e(cp,B4o),e(J,I4o),e(J,fp),e(fp,Lde),e(Lde,N4o),e(fp,q4o),e(fp,yq),e(yq,j4o),e(fp,D4o),e(J,G4o),e(J,mp),e(mp,yde),e(yde,O4o),e(mp,V4o),e(mp,xq),e(xq,X4o),e(mp,z4o),e(J,Q4o),e(J,gp),e(gp,xde),e(xde,W4o),e(gp,H4o),e(gp,$q),e($q,U4o),e(gp,J4o),e(J,Y4o),e(J,hp),e(hp,$de),e($de,K4o),e(hp,Z4o),e(hp,kq),e(kq,ebo),e(hp,obo),e(J,rbo),e(J,pp),e(pp,kde),e(kde,tbo),e(pp,abo),e(pp,Sq),e(Sq,nbo),e(pp,sbo),e(J,lbo),e(J,_p),e(_p,Sde),e(Sde,ibo),e(_p,dbo),e(_p,Rq),e(Rq,cbo),e(_p,fbo),e(He,mbo),M(up,He,null),e(He,gbo),M(bp,He,null),e(Lo,hbo),e(Lo,vp),M(LL,vp,null),e(vp,pbo),e(vp,Rde),e(Rde,_bo),b(f,vXe,u),b(f,ji,u),e(ji,Fp),e(Fp,Pde),M(yL,Pde,null),e(ji,ubo),e(ji,Bde),e(Bde,bbo),b(f,FXe,u),b(f,yo,u),M(xL,yo,null),e(yo,vbo),e(yo,$L),e($L,Fbo),e($L,Pq),e(Pq,Tbo),e($L,Mbo),e(yo,Ebo),e(yo,kL),e(kL,Cbo),e(kL,Ide),e(Ide,wbo),e(kL,Abo),e(yo,Lbo),e(yo,Ue),M(SL,Ue,null),e(Ue,ybo),e(Ue,Nde),e(Nde,xbo),e(Ue,$bo),e(Ue,Di),e(Di,kbo),e(Di,qde),e(qde,Sbo),e(Di,Rbo),e(Di,jde),e(jde,Pbo),e(Di,Bbo),e(Ue,Ibo),e(Ue,he),e(he,Tp),e(Tp,Dde),e(Dde,Nbo),e(Tp,qbo),e(Tp,Bq),e(Bq,jbo),e(Tp,Dbo),e(he,Gbo),e(he,Mp),e(Mp,Gde),e(Gde,Obo),e(Mp,Vbo),e(Mp,Ode),e(Ode,Xbo),e(Mp,zbo),e(he,Qbo),e(he,Ep),e(Ep,Vde),e(Vde,Wbo),e(Ep,Hbo),e(Ep,Iq),e(Iq,Ubo),e(Ep,Jbo),e(he,Ybo),e(he,Cp),e(Cp,Xde),e(Xde,Kbo),e(Cp,Zbo),e(Cp,Nq),e(Nq,evo),e(Cp,ovo),e(he,rvo),e(he,wp),e(wp,zde),e(zde,tvo),e(wp,avo),e(wp,qq),e(qq,nvo),e(wp,svo),e(he,lvo),e(he,Ap),e(Ap,Qde),e(Qde,ivo),e(Ap,dvo),e(Ap,jq),e(jq,cvo),e(Ap,fvo),e(he,mvo),e(he,Lp),e(Lp,Wde),e(Wde,gvo),e(Lp,hvo),e(Lp,Dq),e(Dq,pvo),e(Lp,_vo),e(he,uvo),e(he,yp),e(yp,Hde),e(Hde,bvo),e(yp,vvo),e(yp,Gq),e(Gq,Fvo),e(yp,Tvo),e(he,Mvo),e(he,xp),e(xp,Ude),e(Ude,Evo),e(xp,Cvo),e(xp,Oq),e(Oq,wvo),e(xp,Avo),e(he,Lvo),e(he,$p),e($p,Jde),e(Jde,yvo),e($p,xvo),e($p,Vq),e(Vq,$vo),e($p,kvo),e(he,Svo),e(he,kp),e(kp,Yde),e(Yde,Rvo),e(kp,Pvo),e(kp,Xq),e(Xq,Bvo),e(kp,Ivo),e(he,Nvo),e(he,Sp),e(Sp,Kde),e(Kde,qvo),e(Sp,jvo),e(Sp,zq),e(zq,Dvo),e(Sp,Gvo),e(he,Ovo),e(he,Rp),e(Rp,Zde),e(Zde,Vvo),e(Rp,Xvo),e(Rp,Qq),e(Qq,zvo),e(Rp,Qvo),e(he,Wvo),e(he,Pp),e(Pp,ece),e(ece,Hvo),e(Pp,Uvo),e(Pp,Wq),e(Wq,Jvo),e(Pp,Yvo),e(he,Kvo),e(he,Bp),e(Bp,oce),e(oce,Zvo),e(Bp,eFo),e(Bp,Hq),e(Hq,oFo),e(Bp,rFo),e(he,tFo),e(he,Ip),e(Ip,rce),e(rce,aFo),e(Ip,nFo),e(Ip,Uq),e(Uq,sFo),e(Ip,lFo),e(he,iFo),e(he,Np),e(Np,tce),e(tce,dFo),e(Np,cFo),e(Np,Jq),e(Jq,fFo),e(Np,mFo),e(he,gFo),e(he,qp),e(qp,ace),e(ace,hFo),e(qp,pFo),e(qp,Yq),e(Yq,_Fo),e(qp,uFo),e(Ue,bFo),M(jp,Ue,null),e(Ue,vFo),M(Dp,Ue,null),e(yo,FFo),e(yo,Gp),M(RL,Gp,null),e(Gp,TFo),e(Gp,nce),e(nce,MFo),b(f,TXe,u),b(f,Gi,u),e(Gi,Op),e(Op,sce),M(PL,sce,null),e(Gi,EFo),e(Gi,lce),e(lce,CFo),b(f,MXe,u),b(f,xo,u),M(BL,xo,null),e(xo,wFo),e(xo,Oi),e(Oi,AFo),e(Oi,Kq),e(Kq,LFo),e(Oi,yFo),e(Oi,Zq),e(Zq,xFo),e(Oi,$Fo),e(xo,kFo),e(xo,IL),e(IL,SFo),e(IL,ice),e(ice,RFo),e(IL,PFo),e(xo,BFo),e(xo,lt),M(NL,lt,null),e(lt,IFo),e(lt,dce),e(dce,NFo),e(lt,qFo),e(lt,Vi),e(Vi,jFo),e(Vi,cce),e(cce,DFo),e(Vi,GFo),e(Vi,ej),e(ej,OFo),e(Vi,VFo),e(lt,XFo),M(Vp,lt,null),e(xo,zFo),e(xo,Je),M(qL,Je,null),e(Je,QFo),e(Je,fce),e(fce,WFo),e(Je,HFo),e(Je,Ia),e(Ia,UFo),e(Ia,mce),e(mce,JFo),e(Ia,YFo),e(Ia,gce),e(gce,KFo),e(Ia,ZFo),e(Ia,hce),e(hce,e6o),e(Ia,o6o),e(Je,r6o),e(Je,y),e(y,Xp),e(Xp,pce),e(pce,t6o),e(Xp,a6o),e(Xp,oj),e(oj,n6o),e(Xp,s6o),e(y,l6o),e(y,zp),e(zp,_ce),e(_ce,i6o),e(zp,d6o),e(zp,rj),e(rj,c6o),e(zp,f6o),e(y,m6o),e(y,Qp),e(Qp,uce),e(uce,g6o),e(Qp,h6o),e(Qp,tj),e(tj,p6o),e(Qp,_6o),e(y,u6o),e(y,Wp),e(Wp,bce),e(bce,b6o),e(Wp,v6o),e(Wp,aj),e(aj,F6o),e(Wp,T6o),e(y,M6o),e(y,Hp),e(Hp,vce),e(vce,E6o),e(Hp,C6o),e(Hp,nj),e(nj,w6o),e(Hp,A6o),e(y,L6o),e(y,Up),e(Up,Fce),e(Fce,y6o),e(Up,x6o),e(Up,sj),e(sj,$6o),e(Up,k6o),e(y,S6o),e(y,Jp),e(Jp,Tce),e(Tce,R6o),e(Jp,P6o),e(Jp,lj),e(lj,B6o),e(Jp,I6o),e(y,N6o),e(y,Yp),e(Yp,Mce),e(Mce,q6o),e(Yp,j6o),e(Yp,ij),e(ij,D6o),e(Yp,G6o),e(y,O6o),e(y,Kp),e(Kp,Ece),e(Ece,V6o),e(Kp,X6o),e(Kp,dj),e(dj,z6o),e(Kp,Q6o),e(y,W6o),e(y,Zp),e(Zp,Cce),e(Cce,H6o),e(Zp,U6o),e(Zp,cj),e(cj,J6o),e(Zp,Y6o),e(y,K6o),e(y,e_),e(e_,wce),e(wce,Z6o),e(e_,eTo),e(e_,fj),e(fj,oTo),e(e_,rTo),e(y,tTo),e(y,o_),e(o_,Ace),e(Ace,aTo),e(o_,nTo),e(o_,mj),e(mj,sTo),e(o_,lTo),e(y,iTo),e(y,r_),e(r_,Lce),e(Lce,dTo),e(r_,cTo),e(r_,gj),e(gj,fTo),e(r_,mTo),e(y,gTo),e(y,t_),e(t_,yce),e(yce,hTo),e(t_,pTo),e(t_,hj),e(hj,_To),e(t_,uTo),e(y,bTo),e(y,a_),e(a_,xce),e(xce,vTo),e(a_,FTo),e(a_,pj),e(pj,TTo),e(a_,MTo),e(y,ETo),e(y,n_),e(n_,$ce),e($ce,CTo),e(n_,wTo),e(n_,_j),e(_j,ATo),e(n_,LTo),e(y,yTo),e(y,s_),e(s_,kce),e(kce,xTo),e(s_,$To),e(s_,uj),e(uj,kTo),e(s_,STo),e(y,RTo),e(y,l_),e(l_,Sce),e(Sce,PTo),e(l_,BTo),e(l_,bj),e(bj,ITo),e(l_,NTo),e(y,qTo),e(y,i_),e(i_,Rce),e(Rce,jTo),e(i_,DTo),e(i_,vj),e(vj,GTo),e(i_,OTo),e(y,VTo),e(y,d_),e(d_,Pce),e(Pce,XTo),e(d_,zTo),e(d_,Fj),e(Fj,QTo),e(d_,WTo),e(y,HTo),e(y,c_),e(c_,Bce),e(Bce,UTo),e(c_,JTo),e(c_,Tj),e(Tj,YTo),e(c_,KTo),e(y,ZTo),e(y,f_),e(f_,Ice),e(Ice,e7o),e(f_,o7o),e(f_,Mj),e(Mj,r7o),e(f_,t7o),e(y,a7o),e(y,m_),e(m_,Nce),e(Nce,n7o),e(m_,s7o),e(m_,Ej),e(Ej,l7o),e(m_,i7o),e(y,d7o),e(y,g_),e(g_,qce),e(qce,c7o),e(g_,f7o),e(g_,Cj),e(Cj,m7o),e(g_,g7o),e(y,h7o),e(y,h_),e(h_,jce),e(jce,p7o),e(h_,_7o),e(h_,wj),e(wj,u7o),e(h_,b7o),e(y,v7o),e(y,p_),e(p_,Dce),e(Dce,F7o),e(p_,T7o),e(p_,Aj),e(Aj,M7o),e(p_,E7o),e(y,C7o),e(y,__),e(__,Gce),e(Gce,w7o),e(__,A7o),e(__,Lj),e(Lj,L7o),e(__,y7o),e(y,x7o),e(y,u_),e(u_,Oce),e(Oce,$7o),e(u_,k7o),e(u_,yj),e(yj,S7o),e(u_,R7o),e(y,P7o),e(y,b_),e(b_,Vce),e(Vce,B7o),e(b_,I7o),e(b_,xj),e(xj,N7o),e(b_,q7o),e(y,j7o),e(y,v_),e(v_,Xce),e(Xce,D7o),e(v_,G7o),e(v_,$j),e($j,O7o),e(v_,V7o),e(y,X7o),e(y,F_),e(F_,zce),e(zce,z7o),e(F_,Q7o),e(F_,kj),e(kj,W7o),e(F_,H7o),e(y,U7o),e(y,T_),e(T_,Qce),e(Qce,J7o),e(T_,Y7o),e(T_,Sj),e(Sj,K7o),e(T_,Z7o),e(y,e9o),e(y,M_),e(M_,Wce),e(Wce,o9o),e(M_,r9o),e(M_,Rj),e(Rj,t9o),e(M_,a9o),e(y,n9o),e(y,E_),e(E_,Hce),e(Hce,s9o),e(E_,l9o),e(E_,Pj),e(Pj,i9o),e(E_,d9o),e(y,c9o),e(y,Hs),e(Hs,Uce),e(Uce,f9o),e(Hs,m9o),e(Hs,Bj),e(Bj,g9o),e(Hs,h9o),e(Hs,Ij),e(Ij,p9o),e(Hs,_9o),e(y,u9o),e(y,C_),e(C_,Jce),e(Jce,b9o),e(C_,v9o),e(C_,Nj),e(Nj,F9o),e(C_,T9o),e(y,M9o),e(y,w_),e(w_,Yce),e(Yce,E9o),e(w_,C9o),e(w_,qj),e(qj,w9o),e(w_,A9o),e(y,L9o),e(y,A_),e(A_,Kce),e(Kce,y9o),e(A_,x9o),e(A_,jj),e(jj,$9o),e(A_,k9o),e(y,S9o),e(y,L_),e(L_,Zce),e(Zce,R9o),e(L_,P9o),e(L_,Dj),e(Dj,B9o),e(L_,I9o),e(y,N9o),e(y,y_),e(y_,efe),e(efe,q9o),e(y_,j9o),e(y_,Gj),e(Gj,D9o),e(y_,G9o),e(y,O9o),e(y,x_),e(x_,ofe),e(ofe,V9o),e(x_,X9o),e(x_,Oj),e(Oj,z9o),e(x_,Q9o),e(y,W9o),e(y,$_),e($_,rfe),e(rfe,H9o),e($_,U9o),e($_,Vj),e(Vj,J9o),e($_,Y9o),e(y,K9o),e(y,k_),e(k_,tfe),e(tfe,Z9o),e(k_,eMo),e(k_,Xj),e(Xj,oMo),e(k_,rMo),e(y,tMo),e(y,S_),e(S_,afe),e(afe,aMo),e(S_,nMo),e(S_,zj),e(zj,sMo),e(S_,lMo),e(y,iMo),e(y,R_),e(R_,nfe),e(nfe,dMo),e(R_,cMo),e(R_,Qj),e(Qj,fMo),e(R_,mMo),e(y,gMo),e(y,P_),e(P_,sfe),e(sfe,hMo),e(P_,pMo),e(P_,Wj),e(Wj,_Mo),e(P_,uMo),e(y,bMo),e(y,B_),e(B_,lfe),e(lfe,vMo),e(B_,FMo),e(B_,Hj),e(Hj,TMo),e(B_,MMo),e(y,EMo),e(y,I_),e(I_,ife),e(ife,CMo),e(I_,wMo),e(I_,Uj),e(Uj,AMo),e(I_,LMo),e(y,yMo),e(y,N_),e(N_,dfe),e(dfe,xMo),e(N_,$Mo),e(N_,Jj),e(Jj,kMo),e(N_,SMo),e(y,RMo),e(y,q_),e(q_,cfe),e(cfe,PMo),e(q_,BMo),e(q_,Yj),e(Yj,IMo),e(q_,NMo),e(y,qMo),e(y,j_),e(j_,ffe),e(ffe,jMo),e(j_,DMo),e(j_,Kj),e(Kj,GMo),e(j_,OMo),e(y,VMo),e(y,D_),e(D_,mfe),e(mfe,XMo),e(D_,zMo),e(D_,Zj),e(Zj,QMo),e(D_,WMo),e(y,HMo),e(y,G_),e(G_,gfe),e(gfe,UMo),e(G_,JMo),e(G_,eD),e(eD,YMo),e(G_,KMo),e(y,ZMo),e(y,O_),e(O_,hfe),e(hfe,eEo),e(O_,oEo),e(O_,oD),e(oD,rEo),e(O_,tEo),e(y,aEo),e(y,V_),e(V_,pfe),e(pfe,nEo),e(V_,sEo),e(V_,rD),e(rD,lEo),e(V_,iEo),e(y,dEo),e(y,X_),e(X_,_fe),e(_fe,cEo),e(X_,fEo),e(X_,tD),e(tD,mEo),e(X_,gEo),e(y,hEo),e(y,z_),e(z_,ufe),e(ufe,pEo),e(z_,_Eo),e(z_,aD),e(aD,uEo),e(z_,bEo),e(y,vEo),e(y,Q_),e(Q_,bfe),e(bfe,FEo),e(Q_,TEo),e(Q_,nD),e(nD,MEo),e(Q_,EEo),e(y,CEo),e(y,W_),e(W_,vfe),e(vfe,wEo),e(W_,AEo),e(W_,sD),e(sD,LEo),e(W_,yEo),e(y,xEo),e(y,H_),e(H_,Ffe),e(Ffe,$Eo),e(H_,kEo),e(H_,lD),e(lD,SEo),e(H_,REo),e(y,PEo),e(y,U_),e(U_,Tfe),e(Tfe,BEo),e(U_,IEo),e(U_,iD),e(iD,NEo),e(U_,qEo),e(y,jEo),e(y,J_),e(J_,Mfe),e(Mfe,DEo),e(J_,GEo),e(J_,dD),e(dD,OEo),e(J_,VEo),e(y,XEo),e(y,Y_),e(Y_,Efe),e(Efe,zEo),e(Y_,QEo),e(Y_,cD),e(cD,WEo),e(Y_,HEo),e(y,UEo),e(y,K_),e(K_,Cfe),e(Cfe,JEo),e(K_,YEo),e(K_,fD),e(fD,KEo),e(K_,ZEo),e(y,eCo),e(y,Z_),e(Z_,wfe),e(wfe,oCo),e(Z_,rCo),e(Z_,mD),e(mD,tCo),e(Z_,aCo),e(y,nCo),e(y,eu),e(eu,Afe),e(Afe,sCo),e(eu,lCo),e(eu,gD),e(gD,iCo),e(eu,dCo),e(y,cCo),e(y,ou),e(ou,Lfe),e(Lfe,fCo),e(ou,mCo),e(ou,hD),e(hD,gCo),e(ou,hCo),e(y,pCo),e(y,ru),e(ru,yfe),e(yfe,_Co),e(ru,uCo),e(ru,pD),e(pD,bCo),e(ru,vCo),e(y,FCo),e(y,tu),e(tu,xfe),e(xfe,TCo),e(tu,MCo),e(tu,_D),e(_D,ECo),e(tu,CCo),e(y,wCo),e(y,au),e(au,$fe),e($fe,ACo),e(au,LCo),e(au,uD),e(uD,yCo),e(au,xCo),e(y,$Co),e(y,nu),e(nu,kfe),e(kfe,kCo),e(nu,SCo),e(nu,bD),e(bD,RCo),e(nu,PCo),e(y,BCo),e(y,su),e(su,Sfe),e(Sfe,ICo),e(su,NCo),e(su,vD),e(vD,qCo),e(su,jCo),e(y,DCo),e(y,lu),e(lu,Rfe),e(Rfe,GCo),e(lu,OCo),e(lu,FD),e(FD,VCo),e(lu,XCo),e(y,zCo),e(y,iu),e(iu,Pfe),e(Pfe,QCo),e(iu,WCo),e(iu,TD),e(TD,HCo),e(iu,UCo),e(y,JCo),e(y,du),e(du,Bfe),e(Bfe,YCo),e(du,KCo),e(du,MD),e(MD,ZCo),e(du,e3o),e(y,o3o),e(y,cu),e(cu,Ife),e(Ife,r3o),e(cu,t3o),e(cu,ED),e(ED,a3o),e(cu,n3o),e(y,s3o),e(y,fu),e(fu,Nfe),e(Nfe,l3o),e(fu,i3o),e(fu,CD),e(CD,d3o),e(fu,c3o),e(y,f3o),e(y,mu),e(mu,qfe),e(qfe,m3o),e(mu,g3o),e(mu,wD),e(wD,h3o),e(mu,p3o),e(y,_3o),e(y,gu),e(gu,jfe),e(jfe,u3o),e(gu,b3o),e(gu,AD),e(AD,v3o),e(gu,F3o),e(y,T3o),e(y,hu),e(hu,Dfe),e(Dfe,M3o),e(hu,E3o),e(hu,LD),e(LD,C3o),e(hu,w3o),e(y,A3o),e(y,pu),e(pu,Gfe),e(Gfe,L3o),e(pu,y3o),e(pu,yD),e(yD,x3o),e(pu,$3o),e(y,k3o),e(y,_u),e(_u,Ofe),e(Ofe,S3o),e(_u,R3o),e(_u,xD),e(xD,P3o),e(_u,B3o),e(y,I3o),e(y,uu),e(uu,Vfe),e(Vfe,N3o),e(uu,q3o),e(uu,$D),e($D,j3o),e(uu,D3o),e(y,G3o),e(y,bu),e(bu,Xfe),e(Xfe,O3o),e(bu,V3o),e(bu,kD),e(kD,X3o),e(bu,z3o),e(y,Q3o),e(y,vu),e(vu,zfe),e(zfe,W3o),e(vu,H3o),e(vu,SD),e(SD,U3o),e(vu,J3o),e(y,Y3o),e(y,Fu),e(Fu,Qfe),e(Qfe,K3o),e(Fu,Z3o),e(Fu,RD),e(RD,e5o),e(Fu,o5o),e(y,r5o),e(y,Tu),e(Tu,Wfe),e(Wfe,t5o),e(Tu,a5o),e(Tu,PD),e(PD,n5o),e(Tu,s5o),e(y,l5o),e(y,Mu),e(Mu,Hfe),e(Hfe,i5o),e(Mu,d5o),e(Mu,BD),e(BD,c5o),e(Mu,f5o),e(y,m5o),e(y,Eu),e(Eu,Ufe),e(Ufe,g5o),e(Eu,h5o),e(Eu,ID),e(ID,p5o),e(Eu,_5o),e(y,u5o),e(y,Cu),e(Cu,Jfe),e(Jfe,b5o),e(Cu,v5o),e(Cu,ND),e(ND,F5o),e(Cu,T5o),e(y,M5o),e(y,wu),e(wu,Yfe),e(Yfe,E5o),e(wu,C5o),e(wu,qD),e(qD,w5o),e(wu,A5o),e(y,L5o),e(y,Au),e(Au,Kfe),e(Kfe,y5o),e(Au,x5o),e(Au,jD),e(jD,$5o),e(Au,k5o),e(y,S5o),e(y,Lu),e(Lu,Zfe),e(Zfe,R5o),e(Lu,P5o),e(Lu,DD),e(DD,B5o),e(Lu,I5o),e(y,N5o),e(y,yu),e(yu,eme),e(eme,q5o),e(yu,j5o),e(yu,GD),e(GD,D5o),e(yu,G5o),e(y,O5o),e(y,xu),e(xu,ome),e(ome,V5o),e(xu,X5o),e(xu,OD),e(OD,z5o),e(xu,Q5o),e(y,W5o),e(y,$u),e($u,rme),e(rme,H5o),e($u,U5o),e($u,VD),e(VD,J5o),e($u,Y5o),e(y,K5o),e(y,ku),e(ku,tme),e(tme,Z5o),e(ku,e0o),e(ku,XD),e(XD,o0o),e(ku,r0o),e(y,t0o),e(y,Su),e(Su,ame),e(ame,a0o),e(Su,n0o),e(Su,zD),e(zD,s0o),e(Su,l0o),e(y,i0o),e(y,Ru),e(Ru,nme),e(nme,d0o),e(Ru,c0o),e(Ru,QD),e(QD,f0o),e(Ru,m0o),e(y,g0o),e(y,Pu),e(Pu,sme),e(sme,h0o),e(Pu,p0o),e(Pu,WD),e(WD,_0o),e(Pu,u0o),e(y,b0o),e(y,Bu),e(Bu,lme),e(lme,v0o),e(Bu,F0o),e(Bu,HD),e(HD,T0o),e(Bu,M0o),e(y,E0o),e(y,Iu),e(Iu,ime),e(ime,C0o),e(Iu,w0o),e(Iu,UD),e(UD,A0o),e(Iu,L0o),e(y,y0o),e(y,Nu),e(Nu,dme),e(dme,x0o),e(Nu,$0o),e(Nu,JD),e(JD,k0o),e(Nu,S0o),e(y,R0o),e(y,qu),e(qu,cme),e(cme,P0o),e(qu,B0o),e(qu,YD),e(YD,I0o),e(qu,N0o),e(y,q0o),e(y,ju),e(ju,fme),e(fme,j0o),e(ju,D0o),e(ju,KD),e(KD,G0o),e(ju,O0o),e(y,V0o),e(y,Du),e(Du,mme),e(mme,X0o),e(Du,z0o),e(Du,ZD),e(ZD,Q0o),e(Du,W0o),e(y,H0o),e(y,Gu),e(Gu,gme),e(gme,U0o),e(Gu,J0o),e(Gu,eG),e(eG,Y0o),e(Gu,K0o),e(y,Z0o),e(y,Ou),e(Ou,hme),e(hme,ewo),e(Ou,owo),e(Ou,oG),e(oG,rwo),e(Ou,two),e(y,awo),e(y,Vu),e(Vu,pme),e(pme,nwo),e(Vu,swo),e(Vu,rG),e(rG,lwo),e(Vu,iwo),e(y,dwo),e(y,Xu),e(Xu,_me),e(_me,cwo),e(Xu,fwo),e(Xu,tG),e(tG,mwo),e(Xu,gwo),e(y,hwo),e(y,zu),e(zu,ume),e(ume,pwo),e(zu,_wo),e(zu,aG),e(aG,uwo),e(zu,bwo),e(y,vwo),e(y,Qu),e(Qu,bme),e(bme,Fwo),e(Qu,Two),e(Qu,nG),e(nG,Mwo),e(Qu,Ewo),e(Je,Cwo),e(Je,Wu),e(Wu,wwo),e(Wu,vme),e(vme,Awo),e(Wu,Lwo),e(Wu,Fme),e(Fme,ywo),e(Je,xwo),M(Hu,Je,null),b(f,EXe,u),b(f,Xi,u),e(Xi,Uu),e(Uu,Tme),M(jL,Tme,null),e(Xi,$wo),e(Xi,Mme),e(Mme,kwo),b(f,CXe,u),b(f,$o,u),M(DL,$o,null),e($o,Swo),e($o,zi),e(zi,Rwo),e(zi,sG),e(sG,Pwo),e(zi,Bwo),e(zi,lG),e(lG,Iwo),e(zi,Nwo),e($o,qwo),e($o,GL),e(GL,jwo),e(GL,Eme),e(Eme,Dwo),e(GL,Gwo),e($o,Owo),e($o,it),M(OL,it,null),e(it,Vwo),e(it,Cme),e(Cme,Xwo),e(it,zwo),e(it,Qi),e(Qi,Qwo),e(Qi,wme),e(wme,Wwo),e(Qi,Hwo),e(Qi,iG),e(iG,Uwo),e(Qi,Jwo),e(it,Ywo),M(Ju,it,null),e($o,Kwo),e($o,Ye),M(VL,Ye,null),e(Ye,Zwo),e(Ye,Ame),e(Ame,eAo),e(Ye,oAo),e(Ye,Na),e(Na,rAo),e(Na,Lme),e(Lme,tAo),e(Na,aAo),e(Na,yme),e(yme,nAo),e(Na,sAo),e(Na,xme),e(xme,lAo),e(Na,iAo),e(Ye,dAo),e(Ye,G),e(G,Yu),e(Yu,$me),e($me,cAo),e(Yu,fAo),e(Yu,dG),e(dG,mAo),e(Yu,gAo),e(G,hAo),e(G,Ku),e(Ku,kme),e(kme,pAo),e(Ku,_Ao),e(Ku,cG),e(cG,uAo),e(Ku,bAo),e(G,vAo),e(G,Zu),e(Zu,Sme),e(Sme,FAo),e(Zu,TAo),e(Zu,fG),e(fG,MAo),e(Zu,EAo),e(G,CAo),e(G,e1),e(e1,Rme),e(Rme,wAo),e(e1,AAo),e(e1,mG),e(mG,LAo),e(e1,yAo),e(G,xAo),e(G,o1),e(o1,Pme),e(Pme,$Ao),e(o1,kAo),e(o1,gG),e(gG,SAo),e(o1,RAo),e(G,PAo),e(G,r1),e(r1,Bme),e(Bme,BAo),e(r1,IAo),e(r1,hG),e(hG,NAo),e(r1,qAo),e(G,jAo),e(G,t1),e(t1,Ime),e(Ime,DAo),e(t1,GAo),e(t1,pG),e(pG,OAo),e(t1,VAo),e(G,XAo),e(G,a1),e(a1,Nme),e(Nme,zAo),e(a1,QAo),e(a1,_G),e(_G,WAo),e(a1,HAo),e(G,UAo),e(G,n1),e(n1,qme),e(qme,JAo),e(n1,YAo),e(n1,uG),e(uG,KAo),e(n1,ZAo),e(G,eLo),e(G,s1),e(s1,jme),e(jme,oLo),e(s1,rLo),e(s1,bG),e(bG,tLo),e(s1,aLo),e(G,nLo),e(G,l1),e(l1,Dme),e(Dme,sLo),e(l1,lLo),e(l1,vG),e(vG,iLo),e(l1,dLo),e(G,cLo),e(G,i1),e(i1,Gme),e(Gme,fLo),e(i1,mLo),e(i1,FG),e(FG,gLo),e(i1,hLo),e(G,pLo),e(G,d1),e(d1,Ome),e(Ome,_Lo),e(d1,uLo),e(d1,TG),e(TG,bLo),e(d1,vLo),e(G,FLo),e(G,c1),e(c1,Vme),e(Vme,TLo),e(c1,MLo),e(c1,MG),e(MG,ELo),e(c1,CLo),e(G,wLo),e(G,f1),e(f1,Xme),e(Xme,ALo),e(f1,LLo),e(f1,EG),e(EG,yLo),e(f1,xLo),e(G,$Lo),e(G,m1),e(m1,zme),e(zme,kLo),e(m1,SLo),e(m1,CG),e(CG,RLo),e(m1,PLo),e(G,BLo),e(G,g1),e(g1,Qme),e(Qme,ILo),e(g1,NLo),e(g1,wG),e(wG,qLo),e(g1,jLo),e(G,DLo),e(G,h1),e(h1,Wme),e(Wme,GLo),e(h1,OLo),e(h1,AG),e(AG,VLo),e(h1,XLo),e(G,zLo),e(G,p1),e(p1,Hme),e(Hme,QLo),e(p1,WLo),e(p1,LG),e(LG,HLo),e(p1,ULo),e(G,JLo),e(G,_1),e(_1,Ume),e(Ume,YLo),e(_1,KLo),e(_1,yG),e(yG,ZLo),e(_1,eyo),e(G,oyo),e(G,u1),e(u1,Jme),e(Jme,ryo),e(u1,tyo),e(u1,xG),e(xG,ayo),e(u1,nyo),e(G,syo),e(G,b1),e(b1,Yme),e(Yme,lyo),e(b1,iyo),e(b1,$G),e($G,dyo),e(b1,cyo),e(G,fyo),e(G,v1),e(v1,Kme),e(Kme,myo),e(v1,gyo),e(v1,kG),e(kG,hyo),e(v1,pyo),e(G,_yo),e(G,F1),e(F1,Zme),e(Zme,uyo),e(F1,byo),e(F1,SG),e(SG,vyo),e(F1,Fyo),e(G,Tyo),e(G,T1),e(T1,ege),e(ege,Myo),e(T1,Eyo),e(T1,RG),e(RG,Cyo),e(T1,wyo),e(G,Ayo),e(G,M1),e(M1,oge),e(oge,Lyo),e(M1,yyo),e(M1,PG),e(PG,xyo),e(M1,$yo),e(G,kyo),e(G,E1),e(E1,rge),e(rge,Syo),e(E1,Ryo),e(E1,BG),e(BG,Pyo),e(E1,Byo),e(G,Iyo),e(G,C1),e(C1,tge),e(tge,Nyo),e(C1,qyo),e(C1,IG),e(IG,jyo),e(C1,Dyo),e(G,Gyo),e(G,w1),e(w1,age),e(age,Oyo),e(w1,Vyo),e(w1,NG),e(NG,Xyo),e(w1,zyo),e(G,Qyo),e(G,A1),e(A1,nge),e(nge,Wyo),e(A1,Hyo),e(A1,qG),e(qG,Uyo),e(A1,Jyo),e(G,Yyo),e(G,L1),e(L1,sge),e(sge,Kyo),e(L1,Zyo),e(L1,jG),e(jG,e8o),e(L1,o8o),e(G,r8o),e(G,y1),e(y1,lge),e(lge,t8o),e(y1,a8o),e(y1,DG),e(DG,n8o),e(y1,s8o),e(G,l8o),e(G,x1),e(x1,ige),e(ige,i8o),e(x1,d8o),e(x1,GG),e(GG,c8o),e(x1,f8o),e(G,m8o),e(G,$1),e($1,dge),e(dge,g8o),e($1,h8o),e($1,OG),e(OG,p8o),e($1,_8o),e(G,u8o),e(G,k1),e(k1,cge),e(cge,b8o),e(k1,v8o),e(k1,VG),e(VG,F8o),e(k1,T8o),e(G,M8o),e(G,S1),e(S1,fge),e(fge,E8o),e(S1,C8o),e(S1,XG),e(XG,w8o),e(S1,A8o),e(G,L8o),e(G,R1),e(R1,mge),e(mge,y8o),e(R1,x8o),e(R1,zG),e(zG,$8o),e(R1,k8o),e(G,S8o),e(G,P1),e(P1,gge),e(gge,R8o),e(P1,P8o),e(P1,QG),e(QG,B8o),e(P1,I8o),e(G,N8o),e(G,B1),e(B1,hge),e(hge,q8o),e(B1,j8o),e(B1,WG),e(WG,D8o),e(B1,G8o),e(G,O8o),e(G,I1),e(I1,pge),e(pge,V8o),e(I1,X8o),e(I1,HG),e(HG,z8o),e(I1,Q8o),e(G,W8o),e(G,N1),e(N1,_ge),e(_ge,H8o),e(N1,U8o),e(N1,UG),e(UG,J8o),e(N1,Y8o),e(G,K8o),e(G,q1),e(q1,uge),e(uge,Z8o),e(q1,exo),e(q1,JG),e(JG,oxo),e(q1,rxo),e(G,txo),e(G,j1),e(j1,bge),e(bge,axo),e(j1,nxo),e(j1,YG),e(YG,sxo),e(j1,lxo),e(G,ixo),e(G,D1),e(D1,vge),e(vge,dxo),e(D1,cxo),e(D1,KG),e(KG,fxo),e(D1,mxo),e(G,gxo),e(G,G1),e(G1,Fge),e(Fge,hxo),e(G1,pxo),e(G1,ZG),e(ZG,_xo),e(G1,uxo),e(Ye,bxo),e(Ye,O1),e(O1,vxo),e(O1,Tge),e(Tge,Fxo),e(O1,Txo),e(O1,Mge),e(Mge,Mxo),e(Ye,Exo),M(V1,Ye,null),b(f,wXe,u),b(f,Wi,u),e(Wi,X1),e(X1,Ege),M(XL,Ege,null),e(Wi,Cxo),e(Wi,Cge),e(Cge,wxo),b(f,AXe,u),b(f,ko,u),M(zL,ko,null),e(ko,Axo),e(ko,Hi),e(Hi,Lxo),e(Hi,eO),e(eO,yxo),e(Hi,xxo),e(Hi,oO),e(oO,$xo),e(Hi,kxo),e(ko,Sxo),e(ko,QL),e(QL,Rxo),e(QL,wge),e(wge,Pxo),e(QL,Bxo),e(ko,Ixo),e(ko,dt),M(WL,dt,null),e(dt,Nxo),e(dt,Age),e(Age,qxo),e(dt,jxo),e(dt,Ui),e(Ui,Dxo),e(Ui,Lge),e(Lge,Gxo),e(Ui,Oxo),e(Ui,rO),e(rO,Vxo),e(Ui,Xxo),e(dt,zxo),M(z1,dt,null),e(ko,Qxo),e(ko,Ke),M(HL,Ke,null),e(Ke,Wxo),e(Ke,yge),e(yge,Hxo),e(Ke,Uxo),e(Ke,qa),e(qa,Jxo),e(qa,xge),e(xge,Yxo),e(qa,Kxo),e(qa,$ge),e($ge,Zxo),e(qa,e$o),e(qa,kge),e(kge,o$o),e(qa,r$o),e(Ke,t$o),e(Ke,z),e(z,Q1),e(Q1,Sge),e(Sge,a$o),e(Q1,n$o),e(Q1,tO),e(tO,s$o),e(Q1,l$o),e(z,i$o),e(z,W1),e(W1,Rge),e(Rge,d$o),e(W1,c$o),e(W1,aO),e(aO,f$o),e(W1,m$o),e(z,g$o),e(z,H1),e(H1,Pge),e(Pge,h$o),e(H1,p$o),e(H1,nO),e(nO,_$o),e(H1,u$o),e(z,b$o),e(z,U1),e(U1,Bge),e(Bge,v$o),e(U1,F$o),e(U1,sO),e(sO,T$o),e(U1,M$o),e(z,E$o),e(z,J1),e(J1,Ige),e(Ige,C$o),e(J1,w$o),e(J1,lO),e(lO,A$o),e(J1,L$o),e(z,y$o),e(z,Y1),e(Y1,Nge),e(Nge,x$o),e(Y1,$$o),e(Y1,iO),e(iO,k$o),e(Y1,S$o),e(z,R$o),e(z,K1),e(K1,qge),e(qge,P$o),e(K1,B$o),e(K1,dO),e(dO,I$o),e(K1,N$o),e(z,q$o),e(z,Z1),e(Z1,jge),e(jge,j$o),e(Z1,D$o),e(Z1,cO),e(cO,G$o),e(Z1,O$o),e(z,V$o),e(z,e2),e(e2,Dge),e(Dge,X$o),e(e2,z$o),e(e2,fO),e(fO,Q$o),e(e2,W$o),e(z,H$o),e(z,o2),e(o2,Gge),e(Gge,U$o),e(o2,J$o),e(o2,mO),e(mO,Y$o),e(o2,K$o),e(z,Z$o),e(z,r2),e(r2,Oge),e(Oge,eko),e(r2,oko),e(r2,gO),e(gO,rko),e(r2,tko),e(z,ako),e(z,t2),e(t2,Vge),e(Vge,nko),e(t2,sko),e(t2,hO),e(hO,lko),e(t2,iko),e(z,dko),e(z,a2),e(a2,Xge),e(Xge,cko),e(a2,fko),e(a2,pO),e(pO,mko),e(a2,gko),e(z,hko),e(z,n2),e(n2,zge),e(zge,pko),e(n2,_ko),e(n2,_O),e(_O,uko),e(n2,bko),e(z,vko),e(z,s2),e(s2,Qge),e(Qge,Fko),e(s2,Tko),e(s2,uO),e(uO,Mko),e(s2,Eko),e(z,Cko),e(z,l2),e(l2,Wge),e(Wge,wko),e(l2,Ako),e(l2,bO),e(bO,Lko),e(l2,yko),e(z,xko),e(z,i2),e(i2,Hge),e(Hge,$ko),e(i2,kko),e(i2,vO),e(vO,Sko),e(i2,Rko),e(z,Pko),e(z,d2),e(d2,Uge),e(Uge,Bko),e(d2,Iko),e(d2,FO),e(FO,Nko),e(d2,qko),e(z,jko),e(z,c2),e(c2,Jge),e(Jge,Dko),e(c2,Gko),e(c2,TO),e(TO,Oko),e(c2,Vko),e(z,Xko),e(z,f2),e(f2,Yge),e(Yge,zko),e(f2,Qko),e(f2,MO),e(MO,Wko),e(f2,Hko),e(z,Uko),e(z,m2),e(m2,Kge),e(Kge,Jko),e(m2,Yko),e(m2,EO),e(EO,Kko),e(m2,Zko),e(z,eSo),e(z,g2),e(g2,Zge),e(Zge,oSo),e(g2,rSo),e(g2,CO),e(CO,tSo),e(g2,aSo),e(z,nSo),e(z,h2),e(h2,ehe),e(ehe,sSo),e(h2,lSo),e(h2,wO),e(wO,iSo),e(h2,dSo),e(z,cSo),e(z,p2),e(p2,ohe),e(ohe,fSo),e(p2,mSo),e(p2,AO),e(AO,gSo),e(p2,hSo),e(z,pSo),e(z,_2),e(_2,rhe),e(rhe,_So),e(_2,uSo),e(_2,LO),e(LO,bSo),e(_2,vSo),e(z,FSo),e(z,u2),e(u2,the),e(the,TSo),e(u2,MSo),e(u2,yO),e(yO,ESo),e(u2,CSo),e(z,wSo),e(z,b2),e(b2,ahe),e(ahe,ASo),e(b2,LSo),e(b2,xO),e(xO,ySo),e(b2,xSo),e(z,$So),e(z,v2),e(v2,nhe),e(nhe,kSo),e(v2,SSo),e(v2,$O),e($O,RSo),e(v2,PSo),e(z,BSo),e(z,F2),e(F2,she),e(she,ISo),e(F2,NSo),e(F2,kO),e(kO,qSo),e(F2,jSo),e(z,DSo),e(z,T2),e(T2,lhe),e(lhe,GSo),e(T2,OSo),e(T2,SO),e(SO,VSo),e(T2,XSo),e(z,zSo),e(z,M2),e(M2,ihe),e(ihe,QSo),e(M2,WSo),e(M2,RO),e(RO,HSo),e(M2,USo),e(z,JSo),e(z,E2),e(E2,dhe),e(dhe,YSo),e(E2,KSo),e(E2,PO),e(PO,ZSo),e(E2,eRo),e(z,oRo),e(z,C2),e(C2,che),e(che,rRo),e(C2,tRo),e(C2,BO),e(BO,aRo),e(C2,nRo),e(z,sRo),e(z,w2),e(w2,fhe),e(fhe,lRo),e(w2,iRo),e(w2,IO),e(IO,dRo),e(w2,cRo),e(z,fRo),e(z,A2),e(A2,mhe),e(mhe,mRo),e(A2,gRo),e(A2,NO),e(NO,hRo),e(A2,pRo),e(z,_Ro),e(z,L2),e(L2,ghe),e(ghe,uRo),e(L2,bRo),e(L2,qO),e(qO,vRo),e(L2,FRo),e(z,TRo),e(z,y2),e(y2,hhe),e(hhe,MRo),e(y2,ERo),e(y2,jO),e(jO,CRo),e(y2,wRo),e(z,ARo),e(z,x2),e(x2,phe),e(phe,LRo),e(x2,yRo),e(x2,DO),e(DO,xRo),e(x2,$Ro),e(z,kRo),e(z,$2),e($2,_he),e(_he,SRo),e($2,RRo),e($2,GO),e(GO,PRo),e($2,BRo),e(z,IRo),e(z,k2),e(k2,uhe),e(uhe,NRo),e(k2,qRo),e(k2,OO),e(OO,jRo),e(k2,DRo),e(Ke,GRo),e(Ke,S2),e(S2,ORo),e(S2,bhe),e(bhe,VRo),e(S2,XRo),e(S2,vhe),e(vhe,zRo),e(Ke,QRo),M(R2,Ke,null),b(f,LXe,u),b(f,Ji,u),e(Ji,P2),e(P2,Fhe),M(UL,Fhe,null),e(Ji,WRo),e(Ji,The),e(The,HRo),b(f,yXe,u),b(f,So,u),M(JL,So,null),e(So,URo),e(So,Yi),e(Yi,JRo),e(Yi,VO),e(VO,YRo),e(Yi,KRo),e(Yi,XO),e(XO,ZRo),e(Yi,ePo),e(So,oPo),e(So,YL),e(YL,rPo),e(YL,Mhe),e(Mhe,tPo),e(YL,aPo),e(So,nPo),e(So,ct),M(KL,ct,null),e(ct,sPo),e(ct,Ehe),e(Ehe,lPo),e(ct,iPo),e(ct,Ki),e(Ki,dPo),e(Ki,Che),e(Che,cPo),e(Ki,fPo),e(Ki,zO),e(zO,mPo),e(Ki,gPo),e(ct,hPo),M(B2,ct,null),e(So,pPo),e(So,Ze),M(ZL,Ze,null),e(Ze,_Po),e(Ze,whe),e(whe,uPo),e(Ze,bPo),e(Ze,ja),e(ja,vPo),e(ja,Ahe),e(Ahe,FPo),e(ja,TPo),e(ja,Lhe),e(Lhe,MPo),e(ja,EPo),e(ja,yhe),e(yhe,CPo),e(ja,wPo),e(Ze,APo),e(Ze,W),e(W,I2),e(I2,xhe),e(xhe,LPo),e(I2,yPo),e(I2,QO),e(QO,xPo),e(I2,$Po),e(W,kPo),e(W,N2),e(N2,$he),e($he,SPo),e(N2,RPo),e(N2,WO),e(WO,PPo),e(N2,BPo),e(W,IPo),e(W,q2),e(q2,khe),e(khe,NPo),e(q2,qPo),e(q2,HO),e(HO,jPo),e(q2,DPo),e(W,GPo),e(W,j2),e(j2,She),e(She,OPo),e(j2,VPo),e(j2,UO),e(UO,XPo),e(j2,zPo),e(W,QPo),e(W,D2),e(D2,Rhe),e(Rhe,WPo),e(D2,HPo),e(D2,JO),e(JO,UPo),e(D2,JPo),e(W,YPo),e(W,G2),e(G2,Phe),e(Phe,KPo),e(G2,ZPo),e(G2,YO),e(YO,eBo),e(G2,oBo),e(W,rBo),e(W,O2),e(O2,Bhe),e(Bhe,tBo),e(O2,aBo),e(O2,KO),e(KO,nBo),e(O2,sBo),e(W,lBo),e(W,V2),e(V2,Ihe),e(Ihe,iBo),e(V2,dBo),e(V2,ZO),e(ZO,cBo),e(V2,fBo),e(W,mBo),e(W,X2),e(X2,Nhe),e(Nhe,gBo),e(X2,hBo),e(X2,eV),e(eV,pBo),e(X2,_Bo),e(W,uBo),e(W,z2),e(z2,qhe),e(qhe,bBo),e(z2,vBo),e(z2,oV),e(oV,FBo),e(z2,TBo),e(W,MBo),e(W,Q2),e(Q2,jhe),e(jhe,EBo),e(Q2,CBo),e(Q2,rV),e(rV,wBo),e(Q2,ABo),e(W,LBo),e(W,W2),e(W2,Dhe),e(Dhe,yBo),e(W2,xBo),e(W2,tV),e(tV,$Bo),e(W2,kBo),e(W,SBo),e(W,H2),e(H2,Ghe),e(Ghe,RBo),e(H2,PBo),e(H2,aV),e(aV,BBo),e(H2,IBo),e(W,NBo),e(W,U2),e(U2,Ohe),e(Ohe,qBo),e(U2,jBo),e(U2,nV),e(nV,DBo),e(U2,GBo),e(W,OBo),e(W,J2),e(J2,Vhe),e(Vhe,VBo),e(J2,XBo),e(J2,sV),e(sV,zBo),e(J2,QBo),e(W,WBo),e(W,Y2),e(Y2,Xhe),e(Xhe,HBo),e(Y2,UBo),e(Y2,lV),e(lV,JBo),e(Y2,YBo),e(W,KBo),e(W,K2),e(K2,zhe),e(zhe,ZBo),e(K2,eIo),e(K2,iV),e(iV,oIo),e(K2,rIo),e(W,tIo),e(W,Z2),e(Z2,Qhe),e(Qhe,aIo),e(Z2,nIo),e(Z2,dV),e(dV,sIo),e(Z2,lIo),e(W,iIo),e(W,e4),e(e4,Whe),e(Whe,dIo),e(e4,cIo),e(e4,cV),e(cV,fIo),e(e4,mIo),e(W,gIo),e(W,o4),e(o4,Hhe),e(Hhe,hIo),e(o4,pIo),e(o4,fV),e(fV,_Io),e(o4,uIo),e(W,bIo),e(W,r4),e(r4,Uhe),e(Uhe,vIo),e(r4,FIo),e(r4,mV),e(mV,TIo),e(r4,MIo),e(W,EIo),e(W,t4),e(t4,Jhe),e(Jhe,CIo),e(t4,wIo),e(t4,gV),e(gV,AIo),e(t4,LIo),e(W,yIo),e(W,a4),e(a4,Yhe),e(Yhe,xIo),e(a4,$Io),e(a4,hV),e(hV,kIo),e(a4,SIo),e(W,RIo),e(W,n4),e(n4,Khe),e(Khe,PIo),e(n4,BIo),e(n4,pV),e(pV,IIo),e(n4,NIo),e(W,qIo),e(W,s4),e(s4,Zhe),e(Zhe,jIo),e(s4,DIo),e(s4,_V),e(_V,GIo),e(s4,OIo),e(W,VIo),e(W,l4),e(l4,epe),e(epe,XIo),e(l4,zIo),e(l4,uV),e(uV,QIo),e(l4,WIo),e(W,HIo),e(W,i4),e(i4,ope),e(ope,UIo),e(i4,JIo),e(i4,bV),e(bV,YIo),e(i4,KIo),e(W,ZIo),e(W,d4),e(d4,rpe),e(rpe,eNo),e(d4,oNo),e(d4,vV),e(vV,rNo),e(d4,tNo),e(W,aNo),e(W,c4),e(c4,tpe),e(tpe,nNo),e(c4,sNo),e(c4,FV),e(FV,lNo),e(c4,iNo),e(W,dNo),e(W,f4),e(f4,ape),e(ape,cNo),e(f4,fNo),e(f4,TV),e(TV,mNo),e(f4,gNo),e(W,hNo),e(W,m4),e(m4,npe),e(npe,pNo),e(m4,_No),e(m4,MV),e(MV,uNo),e(m4,bNo),e(W,vNo),e(W,g4),e(g4,spe),e(spe,FNo),e(g4,TNo),e(g4,EV),e(EV,MNo),e(g4,ENo),e(W,CNo),e(W,h4),e(h4,lpe),e(lpe,wNo),e(h4,ANo),e(h4,CV),e(CV,LNo),e(h4,yNo),e(W,xNo),e(W,p4),e(p4,ipe),e(ipe,$No),e(p4,kNo),e(p4,dpe),e(dpe,SNo),e(p4,RNo),e(W,PNo),e(W,_4),e(_4,cpe),e(cpe,BNo),e(_4,INo),e(_4,wV),e(wV,NNo),e(_4,qNo),e(W,jNo),e(W,u4),e(u4,fpe),e(fpe,DNo),e(u4,GNo),e(u4,AV),e(AV,ONo),e(u4,VNo),e(W,XNo),e(W,b4),e(b4,mpe),e(mpe,zNo),e(b4,QNo),e(b4,LV),e(LV,WNo),e(b4,HNo),e(W,UNo),e(W,v4),e(v4,gpe),e(gpe,JNo),e(v4,YNo),e(v4,yV),e(yV,KNo),e(v4,ZNo),e(Ze,eqo),e(Ze,F4),e(F4,oqo),e(F4,hpe),e(hpe,rqo),e(F4,tqo),e(F4,ppe),e(ppe,aqo),e(Ze,nqo),M(T4,Ze,null),b(f,xXe,u),b(f,Zi,u),e(Zi,M4),e(M4,_pe),M(ey,_pe,null),e(Zi,sqo),e(Zi,upe),e(upe,lqo),b(f,$Xe,u),b(f,Ro,u),M(oy,Ro,null),e(Ro,iqo),e(Ro,ed),e(ed,dqo),e(ed,xV),e(xV,cqo),e(ed,fqo),e(ed,$V),e($V,mqo),e(ed,gqo),e(Ro,hqo),e(Ro,ry),e(ry,pqo),e(ry,bpe),e(bpe,_qo),e(ry,uqo),e(Ro,bqo),e(Ro,ft),M(ty,ft,null),e(ft,vqo),e(ft,vpe),e(vpe,Fqo),e(ft,Tqo),e(ft,od),e(od,Mqo),e(od,Fpe),e(Fpe,Eqo),e(od,Cqo),e(od,kV),e(kV,wqo),e(od,Aqo),e(ft,Lqo),M(E4,ft,null),e(Ro,yqo),e(Ro,eo),M(ay,eo,null),e(eo,xqo),e(eo,Tpe),e(Tpe,$qo),e(eo,kqo),e(eo,Da),e(Da,Sqo),e(Da,Mpe),e(Mpe,Rqo),e(Da,Pqo),e(Da,Epe),e(Epe,Bqo),e(Da,Iqo),e(Da,Cpe),e(Cpe,Nqo),e(Da,qqo),e(eo,jqo),e(eo,pe),e(pe,C4),e(C4,wpe),e(wpe,Dqo),e(C4,Gqo),e(C4,SV),e(SV,Oqo),e(C4,Vqo),e(pe,Xqo),e(pe,w4),e(w4,Ape),e(Ape,zqo),e(w4,Qqo),e(w4,RV),e(RV,Wqo),e(w4,Hqo),e(pe,Uqo),e(pe,A4),e(A4,Lpe),e(Lpe,Jqo),e(A4,Yqo),e(A4,PV),e(PV,Kqo),e(A4,Zqo),e(pe,ejo),e(pe,L4),e(L4,ype),e(ype,ojo),e(L4,rjo),e(L4,BV),e(BV,tjo),e(L4,ajo),e(pe,njo),e(pe,y4),e(y4,xpe),e(xpe,sjo),e(y4,ljo),e(y4,IV),e(IV,ijo),e(y4,djo),e(pe,cjo),e(pe,x4),e(x4,$pe),e($pe,fjo),e(x4,mjo),e(x4,NV),e(NV,gjo),e(x4,hjo),e(pe,pjo),e(pe,$4),e($4,kpe),e(kpe,_jo),e($4,ujo),e($4,qV),e(qV,bjo),e($4,vjo),e(pe,Fjo),e(pe,k4),e(k4,Spe),e(Spe,Tjo),e(k4,Mjo),e(k4,jV),e(jV,Ejo),e(k4,Cjo),e(pe,wjo),e(pe,S4),e(S4,Rpe),e(Rpe,Ajo),e(S4,Ljo),e(S4,DV),e(DV,yjo),e(S4,xjo),e(pe,$jo),e(pe,R4),e(R4,Ppe),e(Ppe,kjo),e(R4,Sjo),e(R4,GV),e(GV,Rjo),e(R4,Pjo),e(pe,Bjo),e(pe,P4),e(P4,Bpe),e(Bpe,Ijo),e(P4,Njo),e(P4,OV),e(OV,qjo),e(P4,jjo),e(pe,Djo),e(pe,B4),e(B4,Ipe),e(Ipe,Gjo),e(B4,Ojo),e(B4,VV),e(VV,Vjo),e(B4,Xjo),e(pe,zjo),e(pe,I4),e(I4,Npe),e(Npe,Qjo),e(I4,Wjo),e(I4,XV),e(XV,Hjo),e(I4,Ujo),e(pe,Jjo),e(pe,N4),e(N4,qpe),e(qpe,Yjo),e(N4,Kjo),e(N4,zV),e(zV,Zjo),e(N4,eDo),e(pe,oDo),e(pe,q4),e(q4,jpe),e(jpe,rDo),e(q4,tDo),e(q4,QV),e(QV,aDo),e(q4,nDo),e(pe,sDo),e(pe,j4),e(j4,Dpe),e(Dpe,lDo),e(j4,iDo),e(j4,WV),e(WV,dDo),e(j4,cDo),e(pe,fDo),e(pe,D4),e(D4,Gpe),e(Gpe,mDo),e(D4,gDo),e(D4,HV),e(HV,hDo),e(D4,pDo),e(pe,_Do),e(pe,G4),e(G4,Ope),e(Ope,uDo),e(G4,bDo),e(G4,UV),e(UV,vDo),e(G4,FDo),e(eo,TDo),e(eo,O4),e(O4,MDo),e(O4,Vpe),e(Vpe,EDo),e(O4,CDo),e(O4,Xpe),e(Xpe,wDo),e(eo,ADo),M(V4,eo,null),b(f,kXe,u),b(f,rd,u),e(rd,X4),e(X4,zpe),M(ny,zpe,null),e(rd,LDo),e(rd,Qpe),e(Qpe,yDo),b(f,SXe,u),b(f,Po,u),M(sy,Po,null),e(Po,xDo),e(Po,td),e(td,$Do),e(td,JV),e(JV,kDo),e(td,SDo),e(td,YV),e(YV,RDo),e(td,PDo),e(Po,BDo),e(Po,ly),e(ly,IDo),e(ly,Wpe),e(Wpe,NDo),e(ly,qDo),e(Po,jDo),e(Po,mt),M(iy,mt,null),e(mt,DDo),e(mt,Hpe),e(Hpe,GDo),e(mt,ODo),e(mt,ad),e(ad,VDo),e(ad,Upe),e(Upe,XDo),e(ad,zDo),e(ad,KV),e(KV,QDo),e(ad,WDo),e(mt,HDo),M(z4,mt,null),e(Po,UDo),e(Po,oo),M(dy,oo,null),e(oo,JDo),e(oo,Jpe),e(Jpe,YDo),e(oo,KDo),e(oo,Ga),e(Ga,ZDo),e(Ga,Ype),e(Ype,eGo),e(Ga,oGo),e(Ga,Kpe),e(Kpe,rGo),e(Ga,tGo),e(Ga,Zpe),e(Zpe,aGo),e(Ga,nGo),e(oo,sGo),e(oo,N),e(N,Q4),e(Q4,e_e),e(e_e,lGo),e(Q4,iGo),e(Q4,ZV),e(ZV,dGo),e(Q4,cGo),e(N,fGo),e(N,W4),e(W4,o_e),e(o_e,mGo),e(W4,gGo),e(W4,eX),e(eX,hGo),e(W4,pGo),e(N,_Go),e(N,H4),e(H4,r_e),e(r_e,uGo),e(H4,bGo),e(H4,oX),e(oX,vGo),e(H4,FGo),e(N,TGo),e(N,U4),e(U4,t_e),e(t_e,MGo),e(U4,EGo),e(U4,rX),e(rX,CGo),e(U4,wGo),e(N,AGo),e(N,J4),e(J4,a_e),e(a_e,LGo),e(J4,yGo),e(J4,tX),e(tX,xGo),e(J4,$Go),e(N,kGo),e(N,Y4),e(Y4,n_e),e(n_e,SGo),e(Y4,RGo),e(Y4,aX),e(aX,PGo),e(Y4,BGo),e(N,IGo),e(N,K4),e(K4,s_e),e(s_e,NGo),e(K4,qGo),e(K4,nX),e(nX,jGo),e(K4,DGo),e(N,GGo),e(N,Z4),e(Z4,l_e),e(l_e,OGo),e(Z4,VGo),e(Z4,sX),e(sX,XGo),e(Z4,zGo),e(N,QGo),e(N,eb),e(eb,i_e),e(i_e,WGo),e(eb,HGo),e(eb,lX),e(lX,UGo),e(eb,JGo),e(N,YGo),e(N,ob),e(ob,d_e),e(d_e,KGo),e(ob,ZGo),e(ob,iX),e(iX,eOo),e(ob,oOo),e(N,rOo),e(N,rb),e(rb,c_e),e(c_e,tOo),e(rb,aOo),e(rb,dX),e(dX,nOo),e(rb,sOo),e(N,lOo),e(N,tb),e(tb,f_e),e(f_e,iOo),e(tb,dOo),e(tb,cX),e(cX,cOo),e(tb,fOo),e(N,mOo),e(N,ab),e(ab,m_e),e(m_e,gOo),e(ab,hOo),e(ab,fX),e(fX,pOo),e(ab,_Oo),e(N,uOo),e(N,nb),e(nb,g_e),e(g_e,bOo),e(nb,vOo),e(nb,mX),e(mX,FOo),e(nb,TOo),e(N,MOo),e(N,sb),e(sb,h_e),e(h_e,EOo),e(sb,COo),e(sb,gX),e(gX,wOo),e(sb,AOo),e(N,LOo),e(N,lb),e(lb,p_e),e(p_e,yOo),e(lb,xOo),e(lb,hX),e(hX,$Oo),e(lb,kOo),e(N,SOo),e(N,ib),e(ib,__e),e(__e,ROo),e(ib,POo),e(ib,pX),e(pX,BOo),e(ib,IOo),e(N,NOo),e(N,db),e(db,u_e),e(u_e,qOo),e(db,jOo),e(db,_X),e(_X,DOo),e(db,GOo),e(N,OOo),e(N,cb),e(cb,b_e),e(b_e,VOo),e(cb,XOo),e(cb,uX),e(uX,zOo),e(cb,QOo),e(N,WOo),e(N,fb),e(fb,v_e),e(v_e,HOo),e(fb,UOo),e(fb,bX),e(bX,JOo),e(fb,YOo),e(N,KOo),e(N,mb),e(mb,F_e),e(F_e,ZOo),e(mb,eVo),e(mb,vX),e(vX,oVo),e(mb,rVo),e(N,tVo),e(N,gb),e(gb,T_e),e(T_e,aVo),e(gb,nVo),e(gb,FX),e(FX,sVo),e(gb,lVo),e(N,iVo),e(N,hb),e(hb,M_e),e(M_e,dVo),e(hb,cVo),e(hb,TX),e(TX,fVo),e(hb,mVo),e(N,gVo),e(N,pb),e(pb,E_e),e(E_e,hVo),e(pb,pVo),e(pb,MX),e(MX,_Vo),e(pb,uVo),e(N,bVo),e(N,_b),e(_b,C_e),e(C_e,vVo),e(_b,FVo),e(_b,EX),e(EX,TVo),e(_b,MVo),e(N,EVo),e(N,ub),e(ub,w_e),e(w_e,CVo),e(ub,wVo),e(ub,CX),e(CX,AVo),e(ub,LVo),e(N,yVo),e(N,bb),e(bb,A_e),e(A_e,xVo),e(bb,$Vo),e(bb,wX),e(wX,kVo),e(bb,SVo),e(N,RVo),e(N,vb),e(vb,L_e),e(L_e,PVo),e(vb,BVo),e(vb,AX),e(AX,IVo),e(vb,NVo),e(N,qVo),e(N,Fb),e(Fb,y_e),e(y_e,jVo),e(Fb,DVo),e(Fb,LX),e(LX,GVo),e(Fb,OVo),e(N,VVo),e(N,Tb),e(Tb,x_e),e(x_e,XVo),e(Tb,zVo),e(Tb,yX),e(yX,QVo),e(Tb,WVo),e(N,HVo),e(N,Mb),e(Mb,$_e),e($_e,UVo),e(Mb,JVo),e(Mb,xX),e(xX,YVo),e(Mb,KVo),e(N,ZVo),e(N,Eb),e(Eb,k_e),e(k_e,eXo),e(Eb,oXo),e(Eb,$X),e($X,rXo),e(Eb,tXo),e(N,aXo),e(N,Cb),e(Cb,S_e),e(S_e,nXo),e(Cb,sXo),e(Cb,kX),e(kX,lXo),e(Cb,iXo),e(N,dXo),e(N,wb),e(wb,R_e),e(R_e,cXo),e(wb,fXo),e(wb,SX),e(SX,mXo),e(wb,gXo),e(N,hXo),e(N,Ab),e(Ab,P_e),e(P_e,pXo),e(Ab,_Xo),e(Ab,RX),e(RX,uXo),e(Ab,bXo),e(N,vXo),e(N,Lb),e(Lb,B_e),e(B_e,FXo),e(Lb,TXo),e(Lb,PX),e(PX,MXo),e(Lb,EXo),e(N,CXo),e(N,yb),e(yb,I_e),e(I_e,wXo),e(yb,AXo),e(yb,BX),e(BX,LXo),e(yb,yXo),e(N,xXo),e(N,xb),e(xb,N_e),e(N_e,$Xo),e(xb,kXo),e(xb,IX),e(IX,SXo),e(xb,RXo),e(N,PXo),e(N,$b),e($b,q_e),e(q_e,BXo),e($b,IXo),e($b,NX),e(NX,NXo),e($b,qXo),e(N,jXo),e(N,kb),e(kb,j_e),e(j_e,DXo),e(kb,GXo),e(kb,qX),e(qX,OXo),e(kb,VXo),e(N,XXo),e(N,Sb),e(Sb,D_e),e(D_e,zXo),e(Sb,QXo),e(Sb,jX),e(jX,WXo),e(Sb,HXo),e(N,UXo),e(N,Rb),e(Rb,G_e),e(G_e,JXo),e(Rb,YXo),e(Rb,DX),e(DX,KXo),e(Rb,ZXo),e(N,ezo),e(N,Pb),e(Pb,O_e),e(O_e,ozo),e(Pb,rzo),e(Pb,GX),e(GX,tzo),e(Pb,azo),e(N,nzo),e(N,Bb),e(Bb,V_e),e(V_e,szo),e(Bb,lzo),e(Bb,OX),e(OX,izo),e(Bb,dzo),e(N,czo),e(N,Ib),e(Ib,X_e),e(X_e,fzo),e(Ib,mzo),e(Ib,VX),e(VX,gzo),e(Ib,hzo),e(N,pzo),e(N,Nb),e(Nb,z_e),e(z_e,_zo),e(Nb,uzo),e(Nb,XX),e(XX,bzo),e(Nb,vzo),e(N,Fzo),e(N,qb),e(qb,Q_e),e(Q_e,Tzo),e(qb,Mzo),e(qb,zX),e(zX,Ezo),e(qb,Czo),e(N,wzo),e(N,jb),e(jb,W_e),e(W_e,Azo),e(jb,Lzo),e(jb,QX),e(QX,yzo),e(jb,xzo),e(N,$zo),e(N,Db),e(Db,H_e),e(H_e,kzo),e(Db,Szo),e(Db,WX),e(WX,Rzo),e(Db,Pzo),e(N,Bzo),e(N,Gb),e(Gb,U_e),e(U_e,Izo),e(Gb,Nzo),e(Gb,HX),e(HX,qzo),e(Gb,jzo),e(oo,Dzo),e(oo,Ob),e(Ob,Gzo),e(Ob,J_e),e(J_e,Ozo),e(Ob,Vzo),e(Ob,Y_e),e(Y_e,Xzo),e(oo,zzo),M(Vb,oo,null),b(f,RXe,u),b(f,nd,u),e(nd,Xb),e(Xb,K_e),M(cy,K_e,null),e(nd,Qzo),e(nd,Z_e),e(Z_e,Wzo),b(f,PXe,u),b(f,Bo,u),M(fy,Bo,null),e(Bo,Hzo),e(Bo,sd),e(sd,Uzo),e(sd,UX),e(UX,Jzo),e(sd,Yzo),e(sd,JX),e(JX,Kzo),e(sd,Zzo),e(Bo,eQo),e(Bo,my),e(my,oQo),e(my,eue),e(eue,rQo),e(my,tQo),e(Bo,aQo),e(Bo,gt),M(gy,gt,null),e(gt,nQo),e(gt,oue),e(oue,sQo),e(gt,lQo),e(gt,ld),e(ld,iQo),e(ld,rue),e(rue,dQo),e(ld,cQo),e(ld,YX),e(YX,fQo),e(ld,mQo),e(gt,gQo),M(zb,gt,null),e(Bo,hQo),e(Bo,ro),M(hy,ro,null),e(ro,pQo),e(ro,tue),e(tue,_Qo),e(ro,uQo),e(ro,Oa),e(Oa,bQo),e(Oa,aue),e(aue,vQo),e(Oa,FQo),e(Oa,nue),e(nue,TQo),e(Oa,MQo),e(Oa,sue),e(sue,EQo),e(Oa,CQo),e(ro,wQo),e(ro,Z),e(Z,Qb),e(Qb,lue),e(lue,AQo),e(Qb,LQo),e(Qb,KX),e(KX,yQo),e(Qb,xQo),e(Z,$Qo),e(Z,Wb),e(Wb,iue),e(iue,kQo),e(Wb,SQo),e(Wb,ZX),e(ZX,RQo),e(Wb,PQo),e(Z,BQo),e(Z,Hb),e(Hb,due),e(due,IQo),e(Hb,NQo),e(Hb,ez),e(ez,qQo),e(Hb,jQo),e(Z,DQo),e(Z,Ub),e(Ub,cue),e(cue,GQo),e(Ub,OQo),e(Ub,oz),e(oz,VQo),e(Ub,XQo),e(Z,zQo),e(Z,Jb),e(Jb,fue),e(fue,QQo),e(Jb,WQo),e(Jb,rz),e(rz,HQo),e(Jb,UQo),e(Z,JQo),e(Z,Yb),e(Yb,mue),e(mue,YQo),e(Yb,KQo),e(Yb,tz),e(tz,ZQo),e(Yb,eWo),e(Z,oWo),e(Z,Kb),e(Kb,gue),e(gue,rWo),e(Kb,tWo),e(Kb,az),e(az,aWo),e(Kb,nWo),e(Z,sWo),e(Z,Zb),e(Zb,hue),e(hue,lWo),e(Zb,iWo),e(Zb,nz),e(nz,dWo),e(Zb,cWo),e(Z,fWo),e(Z,ev),e(ev,pue),e(pue,mWo),e(ev,gWo),e(ev,sz),e(sz,hWo),e(ev,pWo),e(Z,_Wo),e(Z,ov),e(ov,_ue),e(_ue,uWo),e(ov,bWo),e(ov,lz),e(lz,vWo),e(ov,FWo),e(Z,TWo),e(Z,rv),e(rv,uue),e(uue,MWo),e(rv,EWo),e(rv,iz),e(iz,CWo),e(rv,wWo),e(Z,AWo),e(Z,tv),e(tv,bue),e(bue,LWo),e(tv,yWo),e(tv,dz),e(dz,xWo),e(tv,$Wo),e(Z,kWo),e(Z,av),e(av,vue),e(vue,SWo),e(av,RWo),e(av,cz),e(cz,PWo),e(av,BWo),e(Z,IWo),e(Z,nv),e(nv,Fue),e(Fue,NWo),e(nv,qWo),e(nv,fz),e(fz,jWo),e(nv,DWo),e(Z,GWo),e(Z,sv),e(sv,Tue),e(Tue,OWo),e(sv,VWo),e(sv,mz),e(mz,XWo),e(sv,zWo),e(Z,QWo),e(Z,lv),e(lv,Mue),e(Mue,WWo),e(lv,HWo),e(lv,gz),e(gz,UWo),e(lv,JWo),e(Z,YWo),e(Z,iv),e(iv,Eue),e(Eue,KWo),e(iv,ZWo),e(iv,hz),e(hz,eHo),e(iv,oHo),e(Z,rHo),e(Z,dv),e(dv,Cue),e(Cue,tHo),e(dv,aHo),e(dv,pz),e(pz,nHo),e(dv,sHo),e(Z,lHo),e(Z,cv),e(cv,wue),e(wue,iHo),e(cv,dHo),e(cv,_z),e(_z,cHo),e(cv,fHo),e(Z,mHo),e(Z,fv),e(fv,Aue),e(Aue,gHo),e(fv,hHo),e(fv,uz),e(uz,pHo),e(fv,_Ho),e(Z,uHo),e(Z,mv),e(mv,Lue),e(Lue,bHo),e(mv,vHo),e(mv,bz),e(bz,FHo),e(mv,THo),e(Z,MHo),e(Z,gv),e(gv,yue),e(yue,EHo),e(gv,CHo),e(gv,vz),e(vz,wHo),e(gv,AHo),e(Z,LHo),e(Z,hv),e(hv,xue),e(xue,yHo),e(hv,xHo),e(hv,Fz),e(Fz,$Ho),e(hv,kHo),e(Z,SHo),e(Z,pv),e(pv,$ue),e($ue,RHo),e(pv,PHo),e(pv,Tz),e(Tz,BHo),e(pv,IHo),e(Z,NHo),e(Z,_v),e(_v,kue),e(kue,qHo),e(_v,jHo),e(_v,Mz),e(Mz,DHo),e(_v,GHo),e(Z,OHo),e(Z,uv),e(uv,Sue),e(Sue,VHo),e(uv,XHo),e(uv,Ez),e(Ez,zHo),e(uv,QHo),e(Z,WHo),e(Z,bv),e(bv,Rue),e(Rue,HHo),e(bv,UHo),e(bv,Cz),e(Cz,JHo),e(bv,YHo),e(Z,KHo),e(Z,vv),e(vv,Pue),e(Pue,ZHo),e(vv,eUo),e(vv,wz),e(wz,oUo),e(vv,rUo),e(Z,tUo),e(Z,Fv),e(Fv,Bue),e(Bue,aUo),e(Fv,nUo),e(Fv,Az),e(Az,sUo),e(Fv,lUo),e(Z,iUo),e(Z,Tv),e(Tv,Iue),e(Iue,dUo),e(Tv,cUo),e(Tv,Lz),e(Lz,fUo),e(Tv,mUo),e(ro,gUo),e(ro,Mv),e(Mv,hUo),e(Mv,Nue),e(Nue,pUo),e(Mv,_Uo),e(Mv,que),e(que,uUo),e(ro,bUo),M(Ev,ro,null),b(f,BXe,u),b(f,id,u),e(id,Cv),e(Cv,jue),M(py,jue,null),e(id,vUo),e(id,Due),e(Due,FUo),b(f,IXe,u),b(f,Io,u),M(_y,Io,null),e(Io,TUo),e(Io,dd),e(dd,MUo),e(dd,yz),e(yz,EUo),e(dd,CUo),e(dd,xz),e(xz,wUo),e(dd,AUo),e(Io,LUo),e(Io,uy),e(uy,yUo),e(uy,Gue),e(Gue,xUo),e(uy,$Uo),e(Io,kUo),e(Io,ht),M(by,ht,null),e(ht,SUo),e(ht,Oue),e(Oue,RUo),e(ht,PUo),e(ht,cd),e(cd,BUo),e(cd,Vue),e(Vue,IUo),e(cd,NUo),e(cd,$z),e($z,qUo),e(cd,jUo),e(ht,DUo),M(wv,ht,null),e(Io,GUo),e(Io,to),M(vy,to,null),e(to,OUo),e(to,Xue),e(Xue,VUo),e(to,XUo),e(to,Va),e(Va,zUo),e(Va,zue),e(zue,QUo),e(Va,WUo),e(Va,Que),e(Que,HUo),e(Va,UUo),e(Va,Wue),e(Wue,JUo),e(Va,YUo),e(to,KUo),e(to,No),e(No,Av),e(Av,Hue),e(Hue,ZUo),e(Av,eJo),e(Av,kz),e(kz,oJo),e(Av,rJo),e(No,tJo),e(No,Lv),e(Lv,Uue),e(Uue,aJo),e(Lv,nJo),e(Lv,Sz),e(Sz,sJo),e(Lv,lJo),e(No,iJo),e(No,yv),e(yv,Jue),e(Jue,dJo),e(yv,cJo),e(yv,Rz),e(Rz,fJo),e(yv,mJo),e(No,gJo),e(No,xv),e(xv,Yue),e(Yue,hJo),e(xv,pJo),e(xv,Pz),e(Pz,_Jo),e(xv,uJo),e(No,bJo),e(No,$v),e($v,Kue),e(Kue,vJo),e($v,FJo),e($v,Bz),e(Bz,TJo),e($v,MJo),e(No,EJo),e(No,kv),e(kv,Zue),e(Zue,CJo),e(kv,wJo),e(kv,Iz),e(Iz,AJo),e(kv,LJo),e(to,yJo),e(to,Sv),e(Sv,xJo),e(Sv,e1e),e(e1e,$Jo),e(Sv,kJo),e(Sv,o1e),e(o1e,SJo),e(to,RJo),M(Rv,to,null),b(f,NXe,u),b(f,fd,u),e(fd,Pv),e(Pv,r1e),M(Fy,r1e,null),e(fd,PJo),e(fd,t1e),e(t1e,BJo),b(f,qXe,u),b(f,qo,u),M(Ty,qo,null),e(qo,IJo),e(qo,md),e(md,NJo),e(md,Nz),e(Nz,qJo),e(md,jJo),e(md,qz),e(qz,DJo),e(md,GJo),e(qo,OJo),e(qo,My),e(My,VJo),e(My,a1e),e(a1e,XJo),e(My,zJo),e(qo,QJo),e(qo,pt),M(Ey,pt,null),e(pt,WJo),e(pt,n1e),e(n1e,HJo),e(pt,UJo),e(pt,gd),e(gd,JJo),e(gd,s1e),e(s1e,YJo),e(gd,KJo),e(gd,jz),e(jz,ZJo),e(gd,eYo),e(pt,oYo),M(Bv,pt,null),e(qo,rYo),e(qo,ao),M(Cy,ao,null),e(ao,tYo),e(ao,l1e),e(l1e,aYo),e(ao,nYo),e(ao,Xa),e(Xa,sYo),e(Xa,i1e),e(i1e,lYo),e(Xa,iYo),e(Xa,d1e),e(d1e,dYo),e(Xa,cYo),e(Xa,c1e),e(c1e,fYo),e(Xa,mYo),e(ao,gYo),e(ao,U),e(U,Iv),e(Iv,f1e),e(f1e,hYo),e(Iv,pYo),e(Iv,Dz),e(Dz,_Yo),e(Iv,uYo),e(U,bYo),e(U,Nv),e(Nv,m1e),e(m1e,vYo),e(Nv,FYo),e(Nv,Gz),e(Gz,TYo),e(Nv,MYo),e(U,EYo),e(U,qv),e(qv,g1e),e(g1e,CYo),e(qv,wYo),e(qv,Oz),e(Oz,AYo),e(qv,LYo),e(U,yYo),e(U,jv),e(jv,h1e),e(h1e,xYo),e(jv,$Yo),e(jv,Vz),e(Vz,kYo),e(jv,SYo),e(U,RYo),e(U,Dv),e(Dv,p1e),e(p1e,PYo),e(Dv,BYo),e(Dv,Xz),e(Xz,IYo),e(Dv,NYo),e(U,qYo),e(U,Gv),e(Gv,_1e),e(_1e,jYo),e(Gv,DYo),e(Gv,zz),e(zz,GYo),e(Gv,OYo),e(U,VYo),e(U,Ov),e(Ov,u1e),e(u1e,XYo),e(Ov,zYo),e(Ov,Qz),e(Qz,QYo),e(Ov,WYo),e(U,HYo),e(U,Vv),e(Vv,b1e),e(b1e,UYo),e(Vv,JYo),e(Vv,Wz),e(Wz,YYo),e(Vv,KYo),e(U,ZYo),e(U,Xv),e(Xv,v1e),e(v1e,eKo),e(Xv,oKo),e(Xv,Hz),e(Hz,rKo),e(Xv,tKo),e(U,aKo),e(U,zv),e(zv,F1e),e(F1e,nKo),e(zv,sKo),e(zv,Uz),e(Uz,lKo),e(zv,iKo),e(U,dKo),e(U,Qv),e(Qv,T1e),e(T1e,cKo),e(Qv,fKo),e(Qv,Jz),e(Jz,mKo),e(Qv,gKo),e(U,hKo),e(U,Wv),e(Wv,M1e),e(M1e,pKo),e(Wv,_Ko),e(Wv,Yz),e(Yz,uKo),e(Wv,bKo),e(U,vKo),e(U,Hv),e(Hv,E1e),e(E1e,FKo),e(Hv,TKo),e(Hv,Kz),e(Kz,MKo),e(Hv,EKo),e(U,CKo),e(U,Uv),e(Uv,C1e),e(C1e,wKo),e(Uv,AKo),e(Uv,Zz),e(Zz,LKo),e(Uv,yKo),e(U,xKo),e(U,Jv),e(Jv,w1e),e(w1e,$Ko),e(Jv,kKo),e(Jv,eQ),e(eQ,SKo),e(Jv,RKo),e(U,PKo),e(U,Yv),e(Yv,A1e),e(A1e,BKo),e(Yv,IKo),e(Yv,oQ),e(oQ,NKo),e(Yv,qKo),e(U,jKo),e(U,Kv),e(Kv,L1e),e(L1e,DKo),e(Kv,GKo),e(Kv,rQ),e(rQ,OKo),e(Kv,VKo),e(U,XKo),e(U,Zv),e(Zv,y1e),e(y1e,zKo),e(Zv,QKo),e(Zv,tQ),e(tQ,WKo),e(Zv,HKo),e(U,UKo),e(U,eF),e(eF,x1e),e(x1e,JKo),e(eF,YKo),e(eF,aQ),e(aQ,KKo),e(eF,ZKo),e(U,eZo),e(U,oF),e(oF,$1e),e($1e,oZo),e(oF,rZo),e(oF,nQ),e(nQ,tZo),e(oF,aZo),e(U,nZo),e(U,rF),e(rF,k1e),e(k1e,sZo),e(rF,lZo),e(rF,sQ),e(sQ,iZo),e(rF,dZo),e(U,cZo),e(U,tF),e(tF,S1e),e(S1e,fZo),e(tF,mZo),e(tF,lQ),e(lQ,gZo),e(tF,hZo),e(U,pZo),e(U,aF),e(aF,R1e),e(R1e,_Zo),e(aF,uZo),e(aF,iQ),e(iQ,bZo),e(aF,vZo),e(U,FZo),e(U,nF),e(nF,P1e),e(P1e,TZo),e(nF,MZo),e(nF,dQ),e(dQ,EZo),e(nF,CZo),e(U,wZo),e(U,sF),e(sF,B1e),e(B1e,AZo),e(sF,LZo),e(sF,cQ),e(cQ,yZo),e(sF,xZo),e(U,$Zo),e(U,lF),e(lF,I1e),e(I1e,kZo),e(lF,SZo),e(lF,fQ),e(fQ,RZo),e(lF,PZo),e(U,BZo),e(U,iF),e(iF,N1e),e(N1e,IZo),e(iF,NZo),e(iF,mQ),e(mQ,qZo),e(iF,jZo),e(U,DZo),e(U,dF),e(dF,q1e),e(q1e,GZo),e(dF,OZo),e(dF,gQ),e(gQ,VZo),e(dF,XZo),e(U,zZo),e(U,cF),e(cF,j1e),e(j1e,QZo),e(cF,WZo),e(cF,hQ),e(hQ,HZo),e(cF,UZo),e(U,JZo),e(U,fF),e(fF,D1e),e(D1e,YZo),e(fF,KZo),e(fF,pQ),e(pQ,ZZo),e(fF,eer),e(U,oer),e(U,mF),e(mF,G1e),e(G1e,rer),e(mF,ter),e(mF,_Q),e(_Q,aer),e(mF,ner),e(U,ser),e(U,gF),e(gF,O1e),e(O1e,ler),e(gF,ier),e(gF,uQ),e(uQ,der),e(gF,cer),e(U,fer),e(U,hF),e(hF,V1e),e(V1e,mer),e(hF,ger),e(hF,bQ),e(bQ,her),e(hF,per),e(U,_er),e(U,pF),e(pF,X1e),e(X1e,uer),e(pF,ber),e(pF,vQ),e(vQ,ver),e(pF,Fer),e(U,Ter),e(U,_F),e(_F,z1e),e(z1e,Mer),e(_F,Eer),e(_F,FQ),e(FQ,Cer),e(_F,wer),e(U,Aer),e(U,uF),e(uF,Q1e),e(Q1e,Ler),e(uF,yer),e(uF,TQ),e(TQ,xer),e(uF,$er),e(ao,ker),e(ao,bF),e(bF,Ser),e(bF,W1e),e(W1e,Rer),e(bF,Per),e(bF,H1e),e(H1e,Ber),e(ao,Ier),M(vF,ao,null),b(f,jXe,u),b(f,hd,u),e(hd,FF),e(FF,U1e),M(wy,U1e,null),e(hd,Ner),e(hd,J1e),e(J1e,qer),b(f,DXe,u),b(f,jo,u),M(Ay,jo,null),e(jo,jer),e(jo,pd),e(pd,Der),e(pd,MQ),e(MQ,Ger),e(pd,Oer),e(pd,EQ),e(EQ,Ver),e(pd,Xer),e(jo,zer),e(jo,Ly),e(Ly,Qer),e(Ly,Y1e),e(Y1e,Wer),e(Ly,Her),e(jo,Uer),e(jo,_t),M(yy,_t,null),e(_t,Jer),e(_t,K1e),e(K1e,Yer),e(_t,Ker),e(_t,_d),e(_d,Zer),e(_d,Z1e),e(Z1e,eor),e(_d,oor),e(_d,CQ),e(CQ,ror),e(_d,tor),e(_t,aor),M(TF,_t,null),e(jo,nor),e(jo,no),M(xy,no,null),e(no,sor),e(no,e2e),e(e2e,lor),e(no,ior),e(no,za),e(za,dor),e(za,o2e),e(o2e,cor),e(za,mor),e(za,r2e),e(r2e,gor),e(za,hor),e(za,t2e),e(t2e,por),e(za,_or),e(no,uor),e(no,V),e(V,MF),e(MF,a2e),e(a2e,bor),e(MF,vor),e(MF,wQ),e(wQ,For),e(MF,Tor),e(V,Mor),e(V,EF),e(EF,n2e),e(n2e,Eor),e(EF,Cor),e(EF,AQ),e(AQ,wor),e(EF,Aor),e(V,Lor),e(V,CF),e(CF,s2e),e(s2e,yor),e(CF,xor),e(CF,LQ),e(LQ,$or),e(CF,kor),e(V,Sor),e(V,wF),e(wF,l2e),e(l2e,Ror),e(wF,Por),e(wF,yQ),e(yQ,Bor),e(wF,Ior),e(V,Nor),e(V,AF),e(AF,i2e),e(i2e,qor),e(AF,jor),e(AF,xQ),e(xQ,Dor),e(AF,Gor),e(V,Oor),e(V,LF),e(LF,d2e),e(d2e,Vor),e(LF,Xor),e(LF,$Q),e($Q,zor),e(LF,Qor),e(V,Wor),e(V,yF),e(yF,c2e),e(c2e,Hor),e(yF,Uor),e(yF,kQ),e(kQ,Jor),e(yF,Yor),e(V,Kor),e(V,xF),e(xF,f2e),e(f2e,Zor),e(xF,err),e(xF,SQ),e(SQ,orr),e(xF,rrr),e(V,trr),e(V,$F),e($F,m2e),e(m2e,arr),e($F,nrr),e($F,RQ),e(RQ,srr),e($F,lrr),e(V,irr),e(V,kF),e(kF,g2e),e(g2e,drr),e(kF,crr),e(kF,PQ),e(PQ,frr),e(kF,mrr),e(V,grr),e(V,SF),e(SF,h2e),e(h2e,hrr),e(SF,prr),e(SF,BQ),e(BQ,_rr),e(SF,urr),e(V,brr),e(V,RF),e(RF,p2e),e(p2e,vrr),e(RF,Frr),e(RF,IQ),e(IQ,Trr),e(RF,Mrr),e(V,Err),e(V,PF),e(PF,_2e),e(_2e,Crr),e(PF,wrr),e(PF,NQ),e(NQ,Arr),e(PF,Lrr),e(V,yrr),e(V,BF),e(BF,u2e),e(u2e,xrr),e(BF,$rr),e(BF,qQ),e(qQ,krr),e(BF,Srr),e(V,Rrr),e(V,IF),e(IF,b2e),e(b2e,Prr),e(IF,Brr),e(IF,jQ),e(jQ,Irr),e(IF,Nrr),e(V,qrr),e(V,NF),e(NF,v2e),e(v2e,jrr),e(NF,Drr),e(NF,DQ),e(DQ,Grr),e(NF,Orr),e(V,Vrr),e(V,qF),e(qF,F2e),e(F2e,Xrr),e(qF,zrr),e(qF,GQ),e(GQ,Qrr),e(qF,Wrr),e(V,Hrr),e(V,jF),e(jF,T2e),e(T2e,Urr),e(jF,Jrr),e(jF,OQ),e(OQ,Yrr),e(jF,Krr),e(V,Zrr),e(V,DF),e(DF,M2e),e(M2e,etr),e(DF,otr),e(DF,VQ),e(VQ,rtr),e(DF,ttr),e(V,atr),e(V,GF),e(GF,E2e),e(E2e,ntr),e(GF,str),e(GF,XQ),e(XQ,ltr),e(GF,itr),e(V,dtr),e(V,OF),e(OF,C2e),e(C2e,ctr),e(OF,ftr),e(OF,zQ),e(zQ,mtr),e(OF,gtr),e(V,htr),e(V,VF),e(VF,w2e),e(w2e,ptr),e(VF,_tr),e(VF,QQ),e(QQ,utr),e(VF,btr),e(V,vtr),e(V,XF),e(XF,A2e),e(A2e,Ftr),e(XF,Ttr),e(XF,WQ),e(WQ,Mtr),e(XF,Etr),e(V,Ctr),e(V,zF),e(zF,L2e),e(L2e,wtr),e(zF,Atr),e(zF,HQ),e(HQ,Ltr),e(zF,ytr),e(V,xtr),e(V,QF),e(QF,y2e),e(y2e,$tr),e(QF,ktr),e(QF,UQ),e(UQ,Str),e(QF,Rtr),e(V,Ptr),e(V,WF),e(WF,x2e),e(x2e,Btr),e(WF,Itr),e(WF,JQ),e(JQ,Ntr),e(WF,qtr),e(V,jtr),e(V,HF),e(HF,$2e),e($2e,Dtr),e(HF,Gtr),e(HF,YQ),e(YQ,Otr),e(HF,Vtr),e(V,Xtr),e(V,UF),e(UF,k2e),e(k2e,ztr),e(UF,Qtr),e(UF,KQ),e(KQ,Wtr),e(UF,Htr),e(V,Utr),e(V,JF),e(JF,S2e),e(S2e,Jtr),e(JF,Ytr),e(JF,ZQ),e(ZQ,Ktr),e(JF,Ztr),e(V,ear),e(V,YF),e(YF,R2e),e(R2e,oar),e(YF,rar),e(YF,eW),e(eW,tar),e(YF,aar),e(V,nar),e(V,KF),e(KF,P2e),e(P2e,sar),e(KF,lar),e(KF,oW),e(oW,iar),e(KF,dar),e(V,car),e(V,ZF),e(ZF,B2e),e(B2e,far),e(ZF,mar),e(ZF,rW),e(rW,gar),e(ZF,har),e(V,par),e(V,e6),e(e6,I2e),e(I2e,_ar),e(e6,uar),e(e6,tW),e(tW,bar),e(e6,Far),e(V,Tar),e(V,o6),e(o6,N2e),e(N2e,Mar),e(o6,Ear),e(o6,aW),e(aW,Car),e(o6,war),e(V,Aar),e(V,r6),e(r6,q2e),e(q2e,Lar),e(r6,yar),e(r6,nW),e(nW,xar),e(r6,$ar),e(V,kar),e(V,t6),e(t6,j2e),e(j2e,Sar),e(t6,Rar),e(t6,sW),e(sW,Par),e(t6,Bar),e(V,Iar),e(V,a6),e(a6,D2e),e(D2e,Nar),e(a6,qar),e(a6,lW),e(lW,jar),e(a6,Dar),e(V,Gar),e(V,n6),e(n6,G2e),e(G2e,Oar),e(n6,Var),e(n6,iW),e(iW,Xar),e(n6,zar),e(V,Qar),e(V,s6),e(s6,O2e),e(O2e,War),e(s6,Har),e(s6,dW),e(dW,Uar),e(s6,Jar),e(V,Yar),e(V,l6),e(l6,V2e),e(V2e,Kar),e(l6,Zar),e(l6,cW),e(cW,enr),e(l6,onr),e(V,rnr),e(V,i6),e(i6,X2e),e(X2e,tnr),e(i6,anr),e(i6,fW),e(fW,nnr),e(i6,snr),e(V,lnr),e(V,d6),e(d6,z2e),e(z2e,inr),e(d6,dnr),e(d6,mW),e(mW,cnr),e(d6,fnr),e(no,mnr),e(no,c6),e(c6,gnr),e(c6,Q2e),e(Q2e,hnr),e(c6,pnr),e(c6,W2e),e(W2e,_nr),e(no,unr),M(f6,no,null),b(f,GXe,u),b(f,ud,u),e(ud,m6),e(m6,H2e),M($y,H2e,null),e(ud,bnr),e(ud,U2e),e(U2e,vnr),b(f,OXe,u),b(f,Do,u),M(ky,Do,null),e(Do,Fnr),e(Do,bd),e(bd,Tnr),e(bd,gW),e(gW,Mnr),e(bd,Enr),e(bd,hW),e(hW,Cnr),e(bd,wnr),e(Do,Anr),e(Do,Sy),e(Sy,Lnr),e(Sy,J2e),e(J2e,ynr),e(Sy,xnr),e(Do,$nr),e(Do,ut),M(Ry,ut,null),e(ut,knr),e(ut,Y2e),e(Y2e,Snr),e(ut,Rnr),e(ut,vd),e(vd,Pnr),e(vd,K2e),e(K2e,Bnr),e(vd,Inr),e(vd,pW),e(pW,Nnr),e(vd,qnr),e(ut,jnr),M(g6,ut,null),e(Do,Dnr),e(Do,so),M(Py,so,null),e(so,Gnr),e(so,Z2e),e(Z2e,Onr),e(so,Vnr),e(so,Qa),e(Qa,Xnr),e(Qa,e4e),e(e4e,znr),e(Qa,Qnr),e(Qa,o4e),e(o4e,Wnr),e(Qa,Hnr),e(Qa,r4e),e(r4e,Unr),e(Qa,Jnr),e(so,Ynr),e(so,t4e),e(t4e,h6),e(h6,a4e),e(a4e,Knr),e(h6,Znr),e(h6,_W),e(_W,esr),e(h6,osr),e(so,rsr),e(so,p6),e(p6,tsr),e(p6,n4e),e(n4e,asr),e(p6,nsr),e(p6,s4e),e(s4e,ssr),e(so,lsr),M(_6,so,null),b(f,VXe,u),b(f,Fd,u),e(Fd,u6),e(u6,l4e),M(By,l4e,null),e(Fd,isr),e(Fd,i4e),e(i4e,dsr),b(f,XXe,u),b(f,Go,u),M(Iy,Go,null),e(Go,csr),e(Go,Td),e(Td,fsr),e(Td,uW),e(uW,msr),e(Td,gsr),e(Td,bW),e(bW,hsr),e(Td,psr),e(Go,_sr),e(Go,Ny),e(Ny,usr),e(Ny,d4e),e(d4e,bsr),e(Ny,vsr),e(Go,Fsr),e(Go,bt),M(qy,bt,null),e(bt,Tsr),e(bt,c4e),e(c4e,Msr),e(bt,Esr),e(bt,Md),e(Md,Csr),e(Md,f4e),e(f4e,wsr),e(Md,Asr),e(Md,vW),e(vW,Lsr),e(Md,ysr),e(bt,xsr),M(b6,bt,null),e(Go,$sr),e(Go,lo),M(jy,lo,null),e(lo,ksr),e(lo,m4e),e(m4e,Ssr),e(lo,Rsr),e(lo,Wa),e(Wa,Psr),e(Wa,g4e),e(g4e,Bsr),e(Wa,Isr),e(Wa,h4e),e(h4e,Nsr),e(Wa,qsr),e(Wa,p4e),e(p4e,jsr),e(Wa,Dsr),e(lo,Gsr),e(lo,_e),e(_e,v6),e(v6,_4e),e(_4e,Osr),e(v6,Vsr),e(v6,FW),e(FW,Xsr),e(v6,zsr),e(_e,Qsr),e(_e,F6),e(F6,u4e),e(u4e,Wsr),e(F6,Hsr),e(F6,TW),e(TW,Usr),e(F6,Jsr),e(_e,Ysr),e(_e,T6),e(T6,b4e),e(b4e,Ksr),e(T6,Zsr),e(T6,MW),e(MW,elr),e(T6,olr),e(_e,rlr),e(_e,M6),e(M6,v4e),e(v4e,tlr),e(M6,alr),e(M6,EW),e(EW,nlr),e(M6,slr),e(_e,llr),e(_e,Us),e(Us,F4e),e(F4e,ilr),e(Us,dlr),e(Us,CW),e(CW,clr),e(Us,flr),e(Us,wW),e(wW,mlr),e(Us,glr),e(_e,hlr),e(_e,E6),e(E6,T4e),e(T4e,plr),e(E6,_lr),e(E6,AW),e(AW,ulr),e(E6,blr),e(_e,vlr),e(_e,Js),e(Js,M4e),e(M4e,Flr),e(Js,Tlr),e(Js,LW),e(LW,Mlr),e(Js,Elr),e(Js,yW),e(yW,Clr),e(Js,wlr),e(_e,Alr),e(_e,C6),e(C6,E4e),e(E4e,Llr),e(C6,ylr),e(C6,xW),e(xW,xlr),e(C6,$lr),e(_e,klr),e(_e,vt),e(vt,C4e),e(C4e,Slr),e(vt,Rlr),e(vt,$W),e($W,Plr),e(vt,Blr),e(vt,kW),e(kW,Ilr),e(vt,Nlr),e(vt,SW),e(SW,qlr),e(vt,jlr),e(_e,Dlr),e(_e,w6),e(w6,w4e),e(w4e,Glr),e(w6,Olr),e(w6,RW),e(RW,Vlr),e(w6,Xlr),e(_e,zlr),e(_e,A6),e(A6,A4e),e(A4e,Qlr),e(A6,Wlr),e(A6,PW),e(PW,Hlr),e(A6,Ulr),e(_e,Jlr),e(_e,L6),e(L6,L4e),e(L4e,Ylr),e(L6,Klr),e(L6,BW),e(BW,Zlr),e(L6,eir),e(_e,oir),e(_e,y6),e(y6,y4e),e(y4e,rir),e(y6,tir),e(y6,IW),e(IW,air),e(y6,nir),e(_e,sir),e(_e,x6),e(x6,x4e),e(x4e,lir),e(x6,iir),e(x6,NW),e(NW,dir),e(x6,cir),e(_e,fir),e(_e,$6),e($6,$4e),e($4e,mir),e($6,gir),e($6,qW),e(qW,hir),e($6,pir),e(_e,_ir),e(_e,k6),e(k6,k4e),e(k4e,uir),e(k6,bir),e(k6,jW),e(jW,vir),e(k6,Fir),e(_e,Tir),e(_e,S6),e(S6,S4e),e(S4e,Mir),e(S6,Eir),e(S6,DW),e(DW,Cir),e(S6,wir),e(lo,Air),e(lo,R6),e(R6,Lir),e(R6,R4e),e(R4e,yir),e(R6,xir),e(R6,P4e),e(P4e,$ir),e(lo,kir),M(P6,lo,null),b(f,zXe,u),b(f,Ed,u),e(Ed,B6),e(B6,B4e),M(Dy,B4e,null),e(Ed,Sir),e(Ed,I4e),e(I4e,Rir),b(f,QXe,u),b(f,Oo,u),M(Gy,Oo,null),e(Oo,Pir),e(Oo,Cd),e(Cd,Bir),e(Cd,GW),e(GW,Iir),e(Cd,Nir),e(Cd,OW),e(OW,qir),e(Cd,jir),e(Oo,Dir),e(Oo,Oy),e(Oy,Gir),e(Oy,N4e),e(N4e,Oir),e(Oy,Vir),e(Oo,Xir),e(Oo,Ft),M(Vy,Ft,null),e(Ft,zir),e(Ft,q4e),e(q4e,Qir),e(Ft,Wir),e(Ft,wd),e(wd,Hir),e(wd,j4e),e(j4e,Uir),e(wd,Jir),e(wd,VW),e(VW,Yir),e(wd,Kir),e(Ft,Zir),M(I6,Ft,null),e(Oo,edr),e(Oo,io),M(Xy,io,null),e(io,odr),e(io,D4e),e(D4e,rdr),e(io,tdr),e(io,Ha),e(Ha,adr),e(Ha,G4e),e(G4e,ndr),e(Ha,sdr),e(Ha,O4e),e(O4e,ldr),e(Ha,idr),e(Ha,V4e),e(V4e,ddr),e(Ha,cdr),e(io,fdr),e(io,X4e),e(X4e,N6),e(N6,z4e),e(z4e,mdr),e(N6,gdr),e(N6,XW),e(XW,hdr),e(N6,pdr),e(io,_dr),e(io,q6),e(q6,udr),e(q6,Q4e),e(Q4e,bdr),e(q6,vdr),e(q6,W4e),e(W4e,Fdr),e(io,Tdr),M(j6,io,null),b(f,WXe,u),b(f,Ad,u),e(Ad,D6),e(D6,H4e),M(zy,H4e,null),e(Ad,Mdr),e(Ad,U4e),e(U4e,Edr),b(f,HXe,u),b(f,Vo,u),M(Qy,Vo,null),e(Vo,Cdr),e(Vo,Ld),e(Ld,wdr),e(Ld,zW),e(zW,Adr),e(Ld,Ldr),e(Ld,QW),e(QW,ydr),e(Ld,xdr),e(Vo,$dr),e(Vo,Wy),e(Wy,kdr),e(Wy,J4e),e(J4e,Sdr),e(Wy,Rdr),e(Vo,Pdr),e(Vo,Tt),M(Hy,Tt,null),e(Tt,Bdr),e(Tt,Y4e),e(Y4e,Idr),e(Tt,Ndr),e(Tt,yd),e(yd,qdr),e(yd,K4e),e(K4e,jdr),e(yd,Ddr),e(yd,WW),e(WW,Gdr),e(yd,Odr),e(Tt,Vdr),M(G6,Tt,null),e(Vo,Xdr),e(Vo,co),M(Uy,co,null),e(co,zdr),e(co,Z4e),e(Z4e,Qdr),e(co,Wdr),e(co,Ua),e(Ua,Hdr),e(Ua,ebe),e(ebe,Udr),e(Ua,Jdr),e(Ua,obe),e(obe,Ydr),e(Ua,Kdr),e(Ua,rbe),e(rbe,Zdr),e(Ua,ecr),e(co,ocr),e(co,tbe),e(tbe,O6),e(O6,abe),e(abe,rcr),e(O6,tcr),e(O6,HW),e(HW,acr),e(O6,ncr),e(co,scr),e(co,V6),e(V6,lcr),e(V6,nbe),e(nbe,icr),e(V6,dcr),e(V6,sbe),e(sbe,ccr),e(co,fcr),M(X6,co,null),b(f,UXe,u),b(f,xd,u),e(xd,z6),e(z6,lbe),M(Jy,lbe,null),e(xd,mcr),e(xd,ibe),e(ibe,gcr),b(f,JXe,u),b(f,Xo,u),M(Yy,Xo,null),e(Xo,hcr),e(Xo,$d),e($d,pcr),e($d,UW),e(UW,_cr),e($d,ucr),e($d,JW),e(JW,bcr),e($d,vcr),e(Xo,Fcr),e(Xo,Ky),e(Ky,Tcr),e(Ky,dbe),e(dbe,Mcr),e(Ky,Ecr),e(Xo,Ccr),e(Xo,Mt),M(Zy,Mt,null),e(Mt,wcr),e(Mt,cbe),e(cbe,Acr),e(Mt,Lcr),e(Mt,kd),e(kd,ycr),e(kd,fbe),e(fbe,xcr),e(kd,$cr),e(kd,YW),e(YW,kcr),e(kd,Scr),e(Mt,Rcr),M(Q6,Mt,null),e(Xo,Pcr),e(Xo,fo),M(e8,fo,null),e(fo,Bcr),e(fo,mbe),e(mbe,Icr),e(fo,Ncr),e(fo,Ja),e(Ja,qcr),e(Ja,gbe),e(gbe,jcr),e(Ja,Dcr),e(Ja,hbe),e(hbe,Gcr),e(Ja,Ocr),e(Ja,pbe),e(pbe,Vcr),e(Ja,Xcr),e(fo,zcr),e(fo,Pe),e(Pe,W6),e(W6,_be),e(_be,Qcr),e(W6,Wcr),e(W6,KW),e(KW,Hcr),e(W6,Ucr),e(Pe,Jcr),e(Pe,H6),e(H6,ube),e(ube,Ycr),e(H6,Kcr),e(H6,ZW),e(ZW,Zcr),e(H6,efr),e(Pe,ofr),e(Pe,U6),e(U6,bbe),e(bbe,rfr),e(U6,tfr),e(U6,eH),e(eH,afr),e(U6,nfr),e(Pe,sfr),e(Pe,J6),e(J6,vbe),e(vbe,lfr),e(J6,ifr),e(J6,oH),e(oH,dfr),e(J6,cfr),e(Pe,ffr),e(Pe,Y6),e(Y6,Fbe),e(Fbe,mfr),e(Y6,gfr),e(Y6,rH),e(rH,hfr),e(Y6,pfr),e(Pe,_fr),e(Pe,K6),e(K6,Tbe),e(Tbe,ufr),e(K6,bfr),e(K6,tH),e(tH,vfr),e(K6,Ffr),e(Pe,Tfr),e(Pe,Z6),e(Z6,Mbe),e(Mbe,Mfr),e(Z6,Efr),e(Z6,aH),e(aH,Cfr),e(Z6,wfr),e(Pe,Afr),e(Pe,eT),e(eT,Ebe),e(Ebe,Lfr),e(eT,yfr),e(eT,nH),e(nH,xfr),e(eT,$fr),e(Pe,kfr),e(Pe,oT),e(oT,Cbe),e(Cbe,Sfr),e(oT,Rfr),e(oT,sH),e(sH,Pfr),e(oT,Bfr),e(fo,Ifr),e(fo,rT),e(rT,Nfr),e(rT,wbe),e(wbe,qfr),e(rT,jfr),e(rT,Abe),e(Abe,Dfr),e(fo,Gfr),M(tT,fo,null),b(f,YXe,u),b(f,Sd,u),e(Sd,aT),e(aT,Lbe),M(o8,Lbe,null),e(Sd,Ofr),e(Sd,ybe),e(ybe,Vfr),b(f,KXe,u),b(f,zo,u),M(r8,zo,null),e(zo,Xfr),e(zo,Rd),e(Rd,zfr),e(Rd,lH),e(lH,Qfr),e(Rd,Wfr),e(Rd,iH),e(iH,Hfr),e(Rd,Ufr),e(zo,Jfr),e(zo,t8),e(t8,Yfr),e(t8,xbe),e(xbe,Kfr),e(t8,Zfr),e(zo,emr),e(zo,Et),M(a8,Et,null),e(Et,omr),e(Et,$be),e($be,rmr),e(Et,tmr),e(Et,Pd),e(Pd,amr),e(Pd,kbe),e(kbe,nmr),e(Pd,smr),e(Pd,dH),e(dH,lmr),e(Pd,imr),e(Et,dmr),M(nT,Et,null),e(zo,cmr),e(zo,mo),M(n8,mo,null),e(mo,fmr),e(mo,Sbe),e(Sbe,mmr),e(mo,gmr),e(mo,Ya),e(Ya,hmr),e(Ya,Rbe),e(Rbe,pmr),e(Ya,_mr),e(Ya,Pbe),e(Pbe,umr),e(Ya,bmr),e(Ya,Bbe),e(Bbe,vmr),e(Ya,Fmr),e(mo,Tmr),e(mo,ot),e(ot,sT),e(sT,Ibe),e(Ibe,Mmr),e(sT,Emr),e(sT,cH),e(cH,Cmr),e(sT,wmr),e(ot,Amr),e(ot,lT),e(lT,Nbe),e(Nbe,Lmr),e(lT,ymr),e(lT,fH),e(fH,xmr),e(lT,$mr),e(ot,kmr),e(ot,iT),e(iT,qbe),e(qbe,Smr),e(iT,Rmr),e(iT,mH),e(mH,Pmr),e(iT,Bmr),e(ot,Imr),e(ot,dT),e(dT,jbe),e(jbe,Nmr),e(dT,qmr),e(dT,gH),e(gH,jmr),e(dT,Dmr),e(ot,Gmr),e(ot,cT),e(cT,Dbe),e(Dbe,Omr),e(cT,Vmr),e(cT,hH),e(hH,Xmr),e(cT,zmr),e(mo,Qmr),e(mo,fT),e(fT,Wmr),e(fT,Gbe),e(Gbe,Hmr),e(fT,Umr),e(fT,Obe),e(Obe,Jmr),e(mo,Ymr),M(mT,mo,null),b(f,ZXe,u),b(f,Bd,u),e(Bd,gT),e(gT,Vbe),M(s8,Vbe,null),e(Bd,Kmr),e(Bd,Xbe),e(Xbe,Zmr),b(f,eze,u),b(f,Qo,u),M(l8,Qo,null),e(Qo,egr),e(Qo,Id),e(Id,ogr),e(Id,pH),e(pH,rgr),e(Id,tgr),e(Id,_H),e(_H,agr),e(Id,ngr),e(Qo,sgr),e(Qo,i8),e(i8,lgr),e(i8,zbe),e(zbe,igr),e(i8,dgr),e(Qo,cgr),e(Qo,Ct),M(d8,Ct,null),e(Ct,fgr),e(Ct,Qbe),e(Qbe,mgr),e(Ct,ggr),e(Ct,Nd),e(Nd,hgr),e(Nd,Wbe),e(Wbe,pgr),e(Nd,_gr),e(Nd,uH),e(uH,ugr),e(Nd,bgr),e(Ct,vgr),M(hT,Ct,null),e(Qo,Fgr),e(Qo,go),M(c8,go,null),e(go,Tgr),e(go,Hbe),e(Hbe,Mgr),e(go,Egr),e(go,Ka),e(Ka,Cgr),e(Ka,Ube),e(Ube,wgr),e(Ka,Agr),e(Ka,Jbe),e(Jbe,Lgr),e(Ka,ygr),e(Ka,Ybe),e(Ybe,xgr),e(Ka,$gr),e(go,kgr),e(go,Le),e(Le,pT),e(pT,Kbe),e(Kbe,Sgr),e(pT,Rgr),e(pT,bH),e(bH,Pgr),e(pT,Bgr),e(Le,Igr),e(Le,_T),e(_T,Zbe),e(Zbe,Ngr),e(_T,qgr),e(_T,vH),e(vH,jgr),e(_T,Dgr),e(Le,Ggr),e(Le,uT),e(uT,eve),e(eve,Ogr),e(uT,Vgr),e(uT,FH),e(FH,Xgr),e(uT,zgr),e(Le,Qgr),e(Le,bT),e(bT,ove),e(ove,Wgr),e(bT,Hgr),e(bT,TH),e(TH,Ugr),e(bT,Jgr),e(Le,Ygr),e(Le,vT),e(vT,rve),e(rve,Kgr),e(vT,Zgr),e(vT,MH),e(MH,ehr),e(vT,ohr),e(Le,rhr),e(Le,FT),e(FT,tve),e(tve,thr),e(FT,ahr),e(FT,EH),e(EH,nhr),e(FT,shr),e(Le,lhr),e(Le,TT),e(TT,ave),e(ave,ihr),e(TT,dhr),e(TT,CH),e(CH,chr),e(TT,fhr),e(Le,mhr),e(Le,MT),e(MT,nve),e(nve,ghr),e(MT,hhr),e(MT,wH),e(wH,phr),e(MT,_hr),e(Le,uhr),e(Le,ET),e(ET,sve),e(sve,bhr),e(ET,vhr),e(ET,AH),e(AH,Fhr),e(ET,Thr),e(Le,Mhr),e(Le,CT),e(CT,lve),e(lve,Ehr),e(CT,Chr),e(CT,LH),e(LH,whr),e(CT,Ahr),e(go,Lhr),e(go,wT),e(wT,yhr),e(wT,ive),e(ive,xhr),e(wT,$hr),e(wT,dve),e(dve,khr),e(go,Shr),M(AT,go,null),b(f,oze,u),b(f,qd,u),e(qd,LT),e(LT,cve),M(f8,cve,null),e(qd,Rhr),e(qd,fve),e(fve,Phr),b(f,rze,u),b(f,Wo,u),M(m8,Wo,null),e(Wo,Bhr),e(Wo,jd),e(jd,Ihr),e(jd,yH),e(yH,Nhr),e(jd,qhr),e(jd,xH),e(xH,jhr),e(jd,Dhr),e(Wo,Ghr),e(Wo,g8),e(g8,Ohr),e(g8,mve),e(mve,Vhr),e(g8,Xhr),e(Wo,zhr),e(Wo,wt),M(h8,wt,null),e(wt,Qhr),e(wt,gve),e(gve,Whr),e(wt,Hhr),e(wt,Dd),e(Dd,Uhr),e(Dd,hve),e(hve,Jhr),e(Dd,Yhr),e(Dd,$H),e($H,Khr),e(Dd,Zhr),e(wt,epr),M(yT,wt,null),e(Wo,opr),e(Wo,ho),M(p8,ho,null),e(ho,rpr),e(ho,pve),e(pve,tpr),e(ho,apr),e(ho,Za),e(Za,npr),e(Za,_ve),e(_ve,spr),e(Za,lpr),e(Za,uve),e(uve,ipr),e(Za,dpr),e(Za,bve),e(bve,cpr),e(Za,fpr),e(ho,mpr),e(ho,_8),e(_8,xT),e(xT,vve),e(vve,gpr),e(xT,hpr),e(xT,kH),e(kH,ppr),e(xT,_pr),e(_8,upr),e(_8,$T),e($T,Fve),e(Fve,bpr),e($T,vpr),e($T,SH),e(SH,Fpr),e($T,Tpr),e(ho,Mpr),e(ho,kT),e(kT,Epr),e(kT,Tve),e(Tve,Cpr),e(kT,wpr),e(kT,Mve),e(Mve,Apr),e(ho,Lpr),M(ST,ho,null),b(f,tze,u),b(f,Gd,u),e(Gd,RT),e(RT,Eve),M(u8,Eve,null),e(Gd,ypr),e(Gd,Cve),e(Cve,xpr),b(f,aze,u),b(f,Ho,u),M(b8,Ho,null),e(Ho,$pr),e(Ho,Od),e(Od,kpr),e(Od,RH),e(RH,Spr),e(Od,Rpr),e(Od,PH),e(PH,Ppr),e(Od,Bpr),e(Ho,Ipr),e(Ho,v8),e(v8,Npr),e(v8,wve),e(wve,qpr),e(v8,jpr),e(Ho,Dpr),e(Ho,At),M(F8,At,null),e(At,Gpr),e(At,Ave),e(Ave,Opr),e(At,Vpr),e(At,Vd),e(Vd,Xpr),e(Vd,Lve),e(Lve,zpr),e(Vd,Qpr),e(Vd,BH),e(BH,Wpr),e(Vd,Hpr),e(At,Upr),M(PT,At,null),e(Ho,Jpr),e(Ho,po),M(T8,po,null),e(po,Ypr),e(po,yve),e(yve,Kpr),e(po,Zpr),e(po,en),e(en,e_r),e(en,xve),e(xve,o_r),e(en,r_r),e(en,$ve),e($ve,t_r),e(en,a_r),e(en,kve),e(kve,n_r),e(en,s_r),e(po,l_r),e(po,rt),e(rt,BT),e(BT,Sve),e(Sve,i_r),e(BT,d_r),e(BT,IH),e(IH,c_r),e(BT,f_r),e(rt,m_r),e(rt,IT),e(IT,Rve),e(Rve,g_r),e(IT,h_r),e(IT,NH),e(NH,p_r),e(IT,__r),e(rt,u_r),e(rt,NT),e(NT,Pve),e(Pve,b_r),e(NT,v_r),e(NT,qH),e(qH,F_r),e(NT,T_r),e(rt,M_r),e(rt,qT),e(qT,Bve),e(Bve,E_r),e(qT,C_r),e(qT,jH),e(jH,w_r),e(qT,A_r),e(rt,L_r),e(rt,jT),e(jT,Ive),e(Ive,y_r),e(jT,x_r),e(jT,DH),e(DH,$_r),e(jT,k_r),e(po,S_r),e(po,DT),e(DT,R_r),e(DT,Nve),e(Nve,P_r),e(DT,B_r),e(DT,qve),e(qve,I_r),e(po,N_r),M(GT,po,null),b(f,nze,u),b(f,Xd,u),e(Xd,OT),e(OT,jve),M(M8,jve,null),e(Xd,q_r),e(Xd,Dve),e(Dve,j_r),b(f,sze,u),b(f,Uo,u),M(E8,Uo,null),e(Uo,D_r),e(Uo,zd),e(zd,G_r),e(zd,GH),e(GH,O_r),e(zd,V_r),e(zd,OH),e(OH,X_r),e(zd,z_r),e(Uo,Q_r),e(Uo,C8),e(C8,W_r),e(C8,Gve),e(Gve,H_r),e(C8,U_r),e(Uo,J_r),e(Uo,Lt),M(w8,Lt,null),e(Lt,Y_r),e(Lt,Ove),e(Ove,K_r),e(Lt,Z_r),e(Lt,Qd),e(Qd,eur),e(Qd,Vve),e(Vve,our),e(Qd,rur),e(Qd,VH),e(VH,tur),e(Qd,aur),e(Lt,nur),M(VT,Lt,null),e(Uo,sur),e(Uo,_o),M(A8,_o,null),e(_o,lur),e(_o,Xve),e(Xve,iur),e(_o,dur),e(_o,on),e(on,cur),e(on,zve),e(zve,fur),e(on,mur),e(on,Qve),e(Qve,gur),e(on,hur),e(on,Wve),e(Wve,pur),e(on,_ur),e(_o,uur),e(_o,rn),e(rn,XT),e(XT,Hve),e(Hve,bur),e(XT,vur),e(XT,XH),e(XH,Fur),e(XT,Tur),e(rn,Mur),e(rn,zT),e(zT,Uve),e(Uve,Eur),e(zT,Cur),e(zT,zH),e(zH,wur),e(zT,Aur),e(rn,Lur),e(rn,QT),e(QT,Jve),e(Jve,yur),e(QT,xur),e(QT,QH),e(QH,$ur),e(QT,kur),e(rn,Sur),e(rn,WT),e(WT,Yve),e(Yve,Rur),e(WT,Pur),e(WT,WH),e(WH,Bur),e(WT,Iur),e(_o,Nur),e(_o,HT),e(HT,qur),e(HT,Kve),e(Kve,jur),e(HT,Dur),e(HT,Zve),e(Zve,Gur),e(_o,Our),M(UT,_o,null),b(f,lze,u),b(f,Wd,u),e(Wd,JT),e(JT,eFe),M(L8,eFe,null),e(Wd,Vur),e(Wd,oFe),e(oFe,Xur),b(f,ize,u),b(f,Jo,u),M(y8,Jo,null),e(Jo,zur),e(Jo,Hd),e(Hd,Qur),e(Hd,HH),e(HH,Wur),e(Hd,Hur),e(Hd,UH),e(UH,Uur),e(Hd,Jur),e(Jo,Yur),e(Jo,x8),e(x8,Kur),e(x8,rFe),e(rFe,Zur),e(x8,e1r),e(Jo,o1r),e(Jo,yt),M($8,yt,null),e(yt,r1r),e(yt,tFe),e(tFe,t1r),e(yt,a1r),e(yt,Ud),e(Ud,n1r),e(Ud,aFe),e(aFe,s1r),e(Ud,l1r),e(Ud,JH),e(JH,i1r),e(Ud,d1r),e(yt,c1r),M(YT,yt,null),e(Jo,f1r),e(Jo,uo),M(k8,uo,null),e(uo,m1r),e(uo,nFe),e(nFe,g1r),e(uo,h1r),e(uo,tn),e(tn,p1r),e(tn,sFe),e(sFe,_1r),e(tn,u1r),e(tn,lFe),e(lFe,b1r),e(tn,v1r),e(tn,iFe),e(iFe,F1r),e(tn,T1r),e(uo,M1r),e(uo,S8),e(S8,KT),e(KT,dFe),e(dFe,E1r),e(KT,C1r),e(KT,YH),e(YH,w1r),e(KT,A1r),e(S8,L1r),e(S8,ZT),e(ZT,cFe),e(cFe,y1r),e(ZT,x1r),e(ZT,KH),e(KH,$1r),e(ZT,k1r),e(uo,S1r),e(uo,e7),e(e7,R1r),e(e7,fFe),e(fFe,P1r),e(e7,B1r),e(e7,mFe),e(mFe,I1r),e(uo,N1r),M(o7,uo,null),b(f,dze,u),b(f,Jd,u),e(Jd,r7),e(r7,gFe),M(R8,gFe,null),e(Jd,q1r),e(Jd,hFe),e(hFe,j1r),b(f,cze,u),b(f,Yo,u),M(P8,Yo,null),e(Yo,D1r),e(Yo,Yd),e(Yd,G1r),e(Yd,ZH),e(ZH,O1r),e(Yd,V1r),e(Yd,eU),e(eU,X1r),e(Yd,z1r),e(Yo,Q1r),e(Yo,B8),e(B8,W1r),e(B8,pFe),e(pFe,H1r),e(B8,U1r),e(Yo,J1r),e(Yo,xt),M(I8,xt,null),e(xt,Y1r),e(xt,_Fe),e(_Fe,K1r),e(xt,Z1r),e(xt,Kd),e(Kd,e2r),e(Kd,uFe),e(uFe,o2r),e(Kd,r2r),e(Kd,oU),e(oU,t2r),e(Kd,a2r),e(xt,n2r),M(t7,xt,null),e(Yo,s2r),e(Yo,bo),M(N8,bo,null),e(bo,l2r),e(bo,bFe),e(bFe,i2r),e(bo,d2r),e(bo,an),e(an,c2r),e(an,vFe),e(vFe,f2r),e(an,m2r),e(an,FFe),e(FFe,g2r),e(an,h2r),e(an,TFe),e(TFe,p2r),e(an,_2r),e(bo,u2r),e(bo,MFe),e(MFe,a7),e(a7,EFe),e(EFe,b2r),e(a7,v2r),e(a7,rU),e(rU,F2r),e(a7,T2r),e(bo,M2r),e(bo,n7),e(n7,E2r),e(n7,CFe),e(CFe,C2r),e(n7,w2r),e(n7,wFe),e(wFe,A2r),e(bo,L2r),M(s7,bo,null),b(f,fze,u),b(f,Zd,u),e(Zd,l7),e(l7,AFe),M(q8,AFe,null),e(Zd,y2r),e(Zd,LFe),e(LFe,x2r),b(f,mze,u),b(f,Ko,u),M(j8,Ko,null),e(Ko,$2r),e(Ko,ec),e(ec,k2r),e(ec,tU),e(tU,S2r),e(ec,R2r),e(ec,aU),e(aU,P2r),e(ec,B2r),e(Ko,I2r),e(Ko,D8),e(D8,N2r),e(D8,yFe),e(yFe,q2r),e(D8,j2r),e(Ko,D2r),e(Ko,$t),M(G8,$t,null),e($t,G2r),e($t,xFe),e(xFe,O2r),e($t,V2r),e($t,oc),e(oc,X2r),e(oc,$Fe),e($Fe,z2r),e(oc,Q2r),e(oc,nU),e(nU,W2r),e(oc,H2r),e($t,U2r),M(i7,$t,null),e(Ko,J2r),e(Ko,vo),M(O8,vo,null),e(vo,Y2r),e(vo,kFe),e(kFe,K2r),e(vo,Z2r),e(vo,nn),e(nn,e4r),e(nn,SFe),e(SFe,o4r),e(nn,r4r),e(nn,RFe),e(RFe,t4r),e(nn,a4r),e(nn,PFe),e(PFe,n4r),e(nn,s4r),e(vo,l4r),e(vo,tt),e(tt,d7),e(d7,BFe),e(BFe,i4r),e(d7,d4r),e(d7,sU),e(sU,c4r),e(d7,f4r),e(tt,m4r),e(tt,c7),e(c7,IFe),e(IFe,g4r),e(c7,h4r),e(c7,lU),e(lU,p4r),e(c7,_4r),e(tt,u4r),e(tt,f7),e(f7,NFe),e(NFe,b4r),e(f7,v4r),e(f7,iU),e(iU,F4r),e(f7,T4r),e(tt,M4r),e(tt,m7),e(m7,qFe),e(qFe,E4r),e(m7,C4r),e(m7,dU),e(dU,w4r),e(m7,A4r),e(tt,L4r),e(tt,g7),e(g7,jFe),e(jFe,y4r),e(g7,x4r),e(g7,cU),e(cU,$4r),e(g7,k4r),e(vo,S4r),e(vo,h7),e(h7,R4r),e(h7,DFe),e(DFe,P4r),e(h7,B4r),e(h7,GFe),e(GFe,I4r),e(vo,N4r),M(p7,vo,null),b(f,gze,u),b(f,rc,u),e(rc,_7),e(_7,OFe),M(V8,OFe,null),e(rc,q4r),e(rc,VFe),e(VFe,j4r),b(f,hze,u),b(f,Zo,u),M(X8,Zo,null),e(Zo,D4r),e(Zo,tc),e(tc,G4r),e(tc,fU),e(fU,O4r),e(tc,V4r),e(tc,mU),e(mU,X4r),e(tc,z4r),e(Zo,Q4r),e(Zo,z8),e(z8,W4r),e(z8,XFe),e(XFe,H4r),e(z8,U4r),e(Zo,J4r),e(Zo,kt),M(Q8,kt,null),e(kt,Y4r),e(kt,zFe),e(zFe,K4r),e(kt,Z4r),e(kt,ac),e(ac,ebr),e(ac,QFe),e(QFe,obr),e(ac,rbr),e(ac,gU),e(gU,tbr),e(ac,abr),e(kt,nbr),M(u7,kt,null),e(Zo,sbr),e(Zo,Fo),M(W8,Fo,null),e(Fo,lbr),e(Fo,WFe),e(WFe,ibr),e(Fo,dbr),e(Fo,sn),e(sn,cbr),e(sn,HFe),e(HFe,fbr),e(sn,mbr),e(sn,UFe),e(UFe,gbr),e(sn,hbr),e(sn,JFe),e(JFe,pbr),e(sn,_br),e(Fo,ubr),e(Fo,YFe),e(YFe,b7),e(b7,KFe),e(KFe,bbr),e(b7,vbr),e(b7,hU),e(hU,Fbr),e(b7,Tbr),e(Fo,Mbr),e(Fo,v7),e(v7,Ebr),e(v7,ZFe),e(ZFe,Cbr),e(v7,wbr),e(v7,e6e),e(e6e,Abr),e(Fo,Lbr),M(F7,Fo,null),b(f,pze,u),b(f,nc,u),e(nc,T7),e(T7,o6e),M(H8,o6e,null),e(nc,ybr),e(nc,r6e),e(r6e,xbr),b(f,_ze,u),b(f,er,u),M(U8,er,null),e(er,$br),e(er,sc),e(sc,kbr),e(sc,pU),e(pU,Sbr),e(sc,Rbr),e(sc,_U),e(_U,Pbr),e(sc,Bbr),e(er,Ibr),e(er,J8),e(J8,Nbr),e(J8,t6e),e(t6e,qbr),e(J8,jbr),e(er,Dbr),e(er,St),M(Y8,St,null),e(St,Gbr),e(St,a6e),e(a6e,Obr),e(St,Vbr),e(St,lc),e(lc,Xbr),e(lc,n6e),e(n6e,zbr),e(lc,Qbr),e(lc,uU),e(uU,Wbr),e(lc,Hbr),e(St,Ubr),M(M7,St,null),e(er,Jbr),e(er,xr),M(K8,xr,null),e(xr,Ybr),e(xr,s6e),e(s6e,Kbr),e(xr,Zbr),e(xr,ln),e(ln,evr),e(ln,l6e),e(l6e,ovr),e(ln,rvr),e(ln,i6e),e(i6e,tvr),e(ln,avr),e(ln,d6e),e(d6e,nvr),e(ln,svr),e(xr,lvr),e(xr,q),e(q,E7),e(E7,c6e),e(c6e,ivr),e(E7,dvr),e(E7,bU),e(bU,cvr),e(E7,fvr),e(q,mvr),e(q,C7),e(C7,f6e),e(f6e,gvr),e(C7,hvr),e(C7,vU),e(vU,pvr),e(C7,_vr),e(q,uvr),e(q,w7),e(w7,m6e),e(m6e,bvr),e(w7,vvr),e(w7,FU),e(FU,Fvr),e(w7,Tvr),e(q,Mvr),e(q,A7),e(A7,g6e),e(g6e,Evr),e(A7,Cvr),e(A7,TU),e(TU,wvr),e(A7,Avr),e(q,Lvr),e(q,L7),e(L7,h6e),e(h6e,yvr),e(L7,xvr),e(L7,MU),e(MU,$vr),e(L7,kvr),e(q,Svr),e(q,y7),e(y7,p6e),e(p6e,Rvr),e(y7,Pvr),e(y7,EU),e(EU,Bvr),e(y7,Ivr),e(q,Nvr),e(q,x7),e(x7,_6e),e(_6e,qvr),e(x7,jvr),e(x7,CU),e(CU,Dvr),e(x7,Gvr),e(q,Ovr),e(q,$7),e($7,u6e),e(u6e,Vvr),e($7,Xvr),e($7,wU),e(wU,zvr),e($7,Qvr),e(q,Wvr),e(q,k7),e(k7,b6e),e(b6e,Hvr),e(k7,Uvr),e(k7,AU),e(AU,Jvr),e(k7,Yvr),e(q,Kvr),e(q,S7),e(S7,v6e),e(v6e,Zvr),e(S7,eFr),e(S7,LU),e(LU,oFr),e(S7,rFr),e(q,tFr),e(q,R7),e(R7,F6e),e(F6e,aFr),e(R7,nFr),e(R7,yU),e(yU,sFr),e(R7,lFr),e(q,iFr),e(q,P7),e(P7,T6e),e(T6e,dFr),e(P7,cFr),e(P7,xU),e(xU,fFr),e(P7,mFr),e(q,gFr),e(q,B7),e(B7,M6e),e(M6e,hFr),e(B7,pFr),e(B7,$U),e($U,_Fr),e(B7,uFr),e(q,bFr),e(q,I7),e(I7,E6e),e(E6e,vFr),e(I7,FFr),e(I7,kU),e(kU,TFr),e(I7,MFr),e(q,EFr),e(q,N7),e(N7,C6e),e(C6e,CFr),e(N7,wFr),e(N7,SU),e(SU,AFr),e(N7,LFr),e(q,yFr),e(q,q7),e(q7,w6e),e(w6e,xFr),e(q7,$Fr),e(q7,RU),e(RU,kFr),e(q7,SFr),e(q,RFr),e(q,j7),e(j7,A6e),e(A6e,PFr),e(j7,BFr),e(j7,PU),e(PU,IFr),e(j7,NFr),e(q,qFr),e(q,Ys),e(Ys,L6e),e(L6e,jFr),e(Ys,DFr),e(Ys,BU),e(BU,GFr),e(Ys,OFr),e(Ys,IU),e(IU,VFr),e(Ys,XFr),e(q,zFr),e(q,D7),e(D7,y6e),e(y6e,QFr),e(D7,WFr),e(D7,NU),e(NU,HFr),e(D7,UFr),e(q,JFr),e(q,G7),e(G7,x6e),e(x6e,YFr),e(G7,KFr),e(G7,qU),e(qU,ZFr),e(G7,e6r),e(q,o6r),e(q,O7),e(O7,$6e),e($6e,r6r),e(O7,t6r),e(O7,jU),e(jU,a6r),e(O7,n6r),e(q,s6r),e(q,V7),e(V7,k6e),e(k6e,l6r),e(V7,i6r),e(V7,DU),e(DU,d6r),e(V7,c6r),e(q,f6r),e(q,X7),e(X7,S6e),e(S6e,m6r),e(X7,g6r),e(X7,GU),e(GU,h6r),e(X7,p6r),e(q,_6r),e(q,z7),e(z7,R6e),e(R6e,u6r),e(z7,b6r),e(z7,OU),e(OU,v6r),e(z7,F6r),e(q,T6r),e(q,Q7),e(Q7,P6e),e(P6e,M6r),e(Q7,E6r),e(Q7,VU),e(VU,C6r),e(Q7,w6r),e(q,A6r),e(q,W7),e(W7,B6e),e(B6e,L6r),e(W7,y6r),e(W7,XU),e(XU,x6r),e(W7,$6r),e(q,k6r),e(q,H7),e(H7,I6e),e(I6e,S6r),e(H7,R6r),e(H7,zU),e(zU,P6r),e(H7,B6r),e(q,I6r),e(q,U7),e(U7,N6e),e(N6e,N6r),e(U7,q6r),e(U7,QU),e(QU,j6r),e(U7,D6r),e(q,G6r),e(q,J7),e(J7,q6e),e(q6e,O6r),e(J7,V6r),e(J7,WU),e(WU,X6r),e(J7,z6r),e(q,Q6r),e(q,Y7),e(Y7,j6e),e(j6e,W6r),e(Y7,H6r),e(Y7,HU),e(HU,U6r),e(Y7,J6r),e(q,Y6r),e(q,K7),e(K7,D6e),e(D6e,K6r),e(K7,Z6r),e(K7,UU),e(UU,eTr),e(K7,oTr),e(q,rTr),e(q,Z7),e(Z7,G6e),e(G6e,tTr),e(Z7,aTr),e(Z7,JU),e(JU,nTr),e(Z7,sTr),e(q,lTr),e(q,e9),e(e9,O6e),e(O6e,iTr),e(e9,dTr),e(e9,YU),e(YU,cTr),e(e9,fTr),e(q,mTr),e(q,o9),e(o9,V6e),e(V6e,gTr),e(o9,hTr),e(o9,KU),e(KU,pTr),e(o9,_Tr),e(q,uTr),e(q,r9),e(r9,X6e),e(X6e,bTr),e(r9,vTr),e(r9,ZU),e(ZU,FTr),e(r9,TTr),e(q,MTr),e(q,t9),e(t9,z6e),e(z6e,ETr),e(t9,CTr),e(t9,eJ),e(eJ,wTr),e(t9,ATr),e(q,LTr),e(q,a9),e(a9,Q6e),e(Q6e,yTr),e(a9,xTr),e(a9,oJ),e(oJ,$Tr),e(a9,kTr),e(q,STr),e(q,n9),e(n9,W6e),e(W6e,RTr),e(n9,PTr),e(n9,rJ),e(rJ,BTr),e(n9,ITr),e(q,NTr),e(q,s9),e(s9,H6e),e(H6e,qTr),e(s9,jTr),e(s9,tJ),e(tJ,DTr),e(s9,GTr),e(q,OTr),e(q,l9),e(l9,U6e),e(U6e,VTr),e(l9,XTr),e(l9,aJ),e(aJ,zTr),e(l9,QTr),e(q,WTr),e(q,i9),e(i9,J6e),e(J6e,HTr),e(i9,UTr),e(i9,nJ),e(nJ,JTr),e(i9,YTr),e(q,KTr),e(q,d9),e(d9,Y6e),e(Y6e,ZTr),e(d9,e7r),e(d9,sJ),e(sJ,o7r),e(d9,r7r),e(q,t7r),e(q,c9),e(c9,K6e),e(K6e,a7r),e(c9,n7r),e(c9,lJ),e(lJ,s7r),e(c9,l7r),e(q,i7r),e(q,f9),e(f9,Z6e),e(Z6e,d7r),e(f9,c7r),e(f9,iJ),e(iJ,f7r),e(f9,m7r),e(q,g7r),e(q,m9),e(m9,eTe),e(eTe,h7r),e(m9,p7r),e(m9,dJ),e(dJ,_7r),e(m9,u7r),e(q,b7r),e(q,g9),e(g9,oTe),e(oTe,v7r),e(g9,F7r),e(g9,cJ),e(cJ,T7r),e(g9,M7r),e(q,E7r),e(q,h9),e(h9,rTe),e(rTe,C7r),e(h9,w7r),e(h9,fJ),e(fJ,A7r),e(h9,L7r),e(q,y7r),e(q,p9),e(p9,tTe),e(tTe,x7r),e(p9,$7r),e(p9,mJ),e(mJ,k7r),e(p9,S7r),e(q,R7r),e(q,_9),e(_9,aTe),e(aTe,P7r),e(_9,B7r),e(_9,gJ),e(gJ,I7r),e(_9,N7r),e(xr,q7r),M(u9,xr,null),b(f,uze,u),b(f,ic,u),e(ic,b9),e(b9,nTe),M(Z8,nTe,null),e(ic,j7r),e(ic,sTe),e(sTe,D7r),b(f,bze,u),b(f,or,u),M(ex,or,null),e(or,G7r),e(or,dc),e(dc,O7r),e(dc,hJ),e(hJ,V7r),e(dc,X7r),e(dc,pJ),e(pJ,z7r),e(dc,Q7r),e(or,W7r),e(or,ox),e(ox,H7r),e(ox,lTe),e(lTe,U7r),e(ox,J7r),e(or,Y7r),e(or,Rt),M(rx,Rt,null),e(Rt,K7r),e(Rt,iTe),e(iTe,Z7r),e(Rt,e9r),e(Rt,cc),e(cc,o9r),e(cc,dTe),e(dTe,r9r),e(cc,t9r),e(cc,_J),e(_J,a9r),e(cc,n9r),e(Rt,s9r),M(v9,Rt,null),e(or,l9r),e(or,$r),M(tx,$r,null),e($r,i9r),e($r,cTe),e(cTe,d9r),e($r,c9r),e($r,dn),e(dn,f9r),e(dn,fTe),e(fTe,m9r),e(dn,g9r),e(dn,mTe),e(mTe,h9r),e(dn,p9r),e(dn,gTe),e(gTe,_9r),e(dn,u9r),e($r,b9r),e($r,se),e(se,F9),e(F9,hTe),e(hTe,v9r),e(F9,F9r),e(F9,uJ),e(uJ,T9r),e(F9,M9r),e(se,E9r),e(se,T9),e(T9,pTe),e(pTe,C9r),e(T9,w9r),e(T9,bJ),e(bJ,A9r),e(T9,L9r),e(se,y9r),e(se,M9),e(M9,_Te),e(_Te,x9r),e(M9,$9r),e(M9,vJ),e(vJ,k9r),e(M9,S9r),e(se,R9r),e(se,E9),e(E9,uTe),e(uTe,P9r),e(E9,B9r),e(E9,FJ),e(FJ,I9r),e(E9,N9r),e(se,q9r),e(se,C9),e(C9,bTe),e(bTe,j9r),e(C9,D9r),e(C9,TJ),e(TJ,G9r),e(C9,O9r),e(se,V9r),e(se,w9),e(w9,vTe),e(vTe,X9r),e(w9,z9r),e(w9,MJ),e(MJ,Q9r),e(w9,W9r),e(se,H9r),e(se,A9),e(A9,FTe),e(FTe,U9r),e(A9,J9r),e(A9,EJ),e(EJ,Y9r),e(A9,K9r),e(se,Z9r),e(se,L9),e(L9,TTe),e(TTe,eMr),e(L9,oMr),e(L9,CJ),e(CJ,rMr),e(L9,tMr),e(se,aMr),e(se,y9),e(y9,MTe),e(MTe,nMr),e(y9,sMr),e(y9,wJ),e(wJ,lMr),e(y9,iMr),e(se,dMr),e(se,x9),e(x9,ETe),e(ETe,cMr),e(x9,fMr),e(x9,AJ),e(AJ,mMr),e(x9,gMr),e(se,hMr),e(se,$9),e($9,CTe),e(CTe,pMr),e($9,_Mr),e($9,LJ),e(LJ,uMr),e($9,bMr),e(se,vMr),e(se,k9),e(k9,wTe),e(wTe,FMr),e(k9,TMr),e(k9,yJ),e(yJ,MMr),e(k9,EMr),e(se,CMr),e(se,S9),e(S9,ATe),e(ATe,wMr),e(S9,AMr),e(S9,xJ),e(xJ,LMr),e(S9,yMr),e(se,xMr),e(se,R9),e(R9,LTe),e(LTe,$Mr),e(R9,kMr),e(R9,$J),e($J,SMr),e(R9,RMr),e(se,PMr),e(se,P9),e(P9,yTe),e(yTe,BMr),e(P9,IMr),e(P9,kJ),e(kJ,NMr),e(P9,qMr),e(se,jMr),e(se,B9),e(B9,xTe),e(xTe,DMr),e(B9,GMr),e(B9,SJ),e(SJ,OMr),e(B9,VMr),e(se,XMr),e(se,I9),e(I9,$Te),e($Te,zMr),e(I9,QMr),e(I9,RJ),e(RJ,WMr),e(I9,HMr),e(se,UMr),e(se,N9),e(N9,kTe),e(kTe,JMr),e(N9,YMr),e(N9,PJ),e(PJ,KMr),e(N9,ZMr),e(se,eEr),e(se,q9),e(q9,STe),e(STe,oEr),e(q9,rEr),e(q9,BJ),e(BJ,tEr),e(q9,aEr),e(se,nEr),e(se,j9),e(j9,RTe),e(RTe,sEr),e(j9,lEr),e(j9,IJ),e(IJ,iEr),e(j9,dEr),e(se,cEr),e(se,D9),e(D9,PTe),e(PTe,fEr),e(D9,mEr),e(D9,NJ),e(NJ,gEr),e(D9,hEr),e(se,pEr),e(se,G9),e(G9,BTe),e(BTe,_Er),e(G9,uEr),e(G9,qJ),e(qJ,bEr),e(G9,vEr),e(se,FEr),e(se,O9),e(O9,ITe),e(ITe,TEr),e(O9,MEr),e(O9,jJ),e(jJ,EEr),e(O9,CEr),e($r,wEr),M(V9,$r,null),b(f,vze,u),b(f,fc,u),e(fc,X9),e(X9,NTe),M(ax,NTe,null),e(fc,AEr),e(fc,qTe),e(qTe,LEr),b(f,Fze,u),b(f,rr,u),M(nx,rr,null),e(rr,yEr),e(rr,mc),e(mc,xEr),e(mc,DJ),e(DJ,$Er),e(mc,kEr),e(mc,GJ),e(GJ,SEr),e(mc,REr),e(rr,PEr),e(rr,sx),e(sx,BEr),e(sx,jTe),e(jTe,IEr),e(sx,NEr),e(rr,qEr),e(rr,Pt),M(lx,Pt,null),e(Pt,jEr),e(Pt,DTe),e(DTe,DEr),e(Pt,GEr),e(Pt,gc),e(gc,OEr),e(gc,GTe),e(GTe,VEr),e(gc,XEr),e(gc,OJ),e(OJ,zEr),e(gc,QEr),e(Pt,WEr),M(z9,Pt,null),e(rr,HEr),e(rr,kr),M(ix,kr,null),e(kr,UEr),e(kr,OTe),e(OTe,JEr),e(kr,YEr),e(kr,cn),e(cn,KEr),e(cn,VTe),e(VTe,ZEr),e(cn,eCr),e(cn,XTe),e(XTe,oCr),e(cn,rCr),e(cn,zTe),e(zTe,tCr),e(cn,aCr),e(kr,nCr),e(kr,Me),e(Me,Q9),e(Q9,QTe),e(QTe,sCr),e(Q9,lCr),e(Q9,VJ),e(VJ,iCr),e(Q9,dCr),e(Me,cCr),e(Me,W9),e(W9,WTe),e(WTe,fCr),e(W9,mCr),e(W9,XJ),e(XJ,gCr),e(W9,hCr),e(Me,pCr),e(Me,H9),e(H9,HTe),e(HTe,_Cr),e(H9,uCr),e(H9,zJ),e(zJ,bCr),e(H9,vCr),e(Me,FCr),e(Me,U9),e(U9,UTe),e(UTe,TCr),e(U9,MCr),e(U9,QJ),e(QJ,ECr),e(U9,CCr),e(Me,wCr),e(Me,J9),e(J9,JTe),e(JTe,ACr),e(J9,LCr),e(J9,WJ),e(WJ,yCr),e(J9,xCr),e(Me,$Cr),e(Me,Y9),e(Y9,YTe),e(YTe,kCr),e(Y9,SCr),e(Y9,HJ),e(HJ,RCr),e(Y9,PCr),e(Me,BCr),e(Me,K9),e(K9,KTe),e(KTe,ICr),e(K9,NCr),e(K9,UJ),e(UJ,qCr),e(K9,jCr),e(Me,DCr),e(Me,Z9),e(Z9,ZTe),e(ZTe,GCr),e(Z9,OCr),e(Z9,JJ),e(JJ,VCr),e(Z9,XCr),e(Me,zCr),e(Me,eM),e(eM,e7e),e(e7e,QCr),e(eM,WCr),e(eM,YJ),e(YJ,HCr),e(eM,UCr),e(Me,JCr),e(Me,oM),e(oM,o7e),e(o7e,YCr),e(oM,KCr),e(oM,KJ),e(KJ,ZCr),e(oM,e3r),e(Me,o3r),e(Me,rM),e(rM,r7e),e(r7e,r3r),e(rM,t3r),e(rM,ZJ),e(ZJ,a3r),e(rM,n3r),e(Me,s3r),e(Me,tM),e(tM,t7e),e(t7e,l3r),e(tM,i3r),e(tM,eY),e(eY,d3r),e(tM,c3r),e(Me,f3r),e(Me,aM),e(aM,a7e),e(a7e,m3r),e(aM,g3r),e(aM,oY),e(oY,h3r),e(aM,p3r),e(kr,_3r),M(nM,kr,null),b(f,Tze,u),b(f,hc,u),e(hc,sM),e(sM,n7e),M(dx,n7e,null),e(hc,u3r),e(hc,s7e),e(s7e,b3r),b(f,Mze,u),b(f,tr,u),M(cx,tr,null),e(tr,v3r),e(tr,pc),e(pc,F3r),e(pc,rY),e(rY,T3r),e(pc,M3r),e(pc,tY),e(tY,E3r),e(pc,C3r),e(tr,w3r),e(tr,fx),e(fx,A3r),e(fx,l7e),e(l7e,L3r),e(fx,y3r),e(tr,x3r),e(tr,Bt),M(mx,Bt,null),e(Bt,$3r),e(Bt,i7e),e(i7e,k3r),e(Bt,S3r),e(Bt,_c),e(_c,R3r),e(_c,d7e),e(d7e,P3r),e(_c,B3r),e(_c,aY),e(aY,I3r),e(_c,N3r),e(Bt,q3r),M(lM,Bt,null),e(tr,j3r),e(tr,Sr),M(gx,Sr,null),e(Sr,D3r),e(Sr,c7e),e(c7e,G3r),e(Sr,O3r),e(Sr,fn),e(fn,V3r),e(fn,f7e),e(f7e,X3r),e(fn,z3r),e(fn,m7e),e(m7e,Q3r),e(fn,W3r),e(fn,g7e),e(g7e,H3r),e(fn,U3r),e(Sr,J3r),e(Sr,ar),e(ar,iM),e(iM,h7e),e(h7e,Y3r),e(iM,K3r),e(iM,nY),e(nY,Z3r),e(iM,e5r),e(ar,o5r),e(ar,dM),e(dM,p7e),e(p7e,r5r),e(dM,t5r),e(dM,sY),e(sY,a5r),e(dM,n5r),e(ar,s5r),e(ar,cM),e(cM,_7e),e(_7e,l5r),e(cM,i5r),e(cM,lY),e(lY,d5r),e(cM,c5r),e(ar,f5r),e(ar,fM),e(fM,u7e),e(u7e,m5r),e(fM,g5r),e(fM,iY),e(iY,h5r),e(fM,p5r),e(ar,_5r),e(ar,mM),e(mM,b7e),e(b7e,u5r),e(mM,b5r),e(mM,dY),e(dY,v5r),e(mM,F5r),e(ar,T5r),e(ar,gM),e(gM,v7e),e(v7e,M5r),e(gM,E5r),e(gM,cY),e(cY,C5r),e(gM,w5r),e(Sr,A5r),M(hM,Sr,null),b(f,Eze,u),b(f,uc,u),e(uc,pM),e(pM,F7e),M(hx,F7e,null),e(uc,L5r),e(uc,T7e),e(T7e,y5r),b(f,Cze,u),b(f,nr,u),M(px,nr,null),e(nr,x5r),e(nr,bc),e(bc,$5r),e(bc,fY),e(fY,k5r),e(bc,S5r),e(bc,mY),e(mY,R5r),e(bc,P5r),e(nr,B5r),e(nr,_x),e(_x,I5r),e(_x,M7e),e(M7e,N5r),e(_x,q5r),e(nr,j5r),e(nr,It),M(ux,It,null),e(It,D5r),e(It,E7e),e(E7e,G5r),e(It,O5r),e(It,vc),e(vc,V5r),e(vc,C7e),e(C7e,X5r),e(vc,z5r),e(vc,gY),e(gY,Q5r),e(vc,W5r),e(It,H5r),M(_M,It,null),e(nr,U5r),e(nr,Rr),M(bx,Rr,null),e(Rr,J5r),e(Rr,w7e),e(w7e,Y5r),e(Rr,K5r),e(Rr,mn),e(mn,Z5r),e(mn,A7e),e(A7e,e0r),e(mn,o0r),e(mn,L7e),e(L7e,r0r),e(mn,t0r),e(mn,y7e),e(y7e,a0r),e(mn,n0r),e(Rr,s0r),e(Rr,ie),e(ie,uM),e(uM,x7e),e(x7e,l0r),e(uM,i0r),e(uM,hY),e(hY,d0r),e(uM,c0r),e(ie,f0r),e(ie,bM),e(bM,$7e),e($7e,m0r),e(bM,g0r),e(bM,pY),e(pY,h0r),e(bM,p0r),e(ie,_0r),e(ie,vM),e(vM,k7e),e(k7e,u0r),e(vM,b0r),e(vM,_Y),e(_Y,v0r),e(vM,F0r),e(ie,T0r),e(ie,FM),e(FM,S7e),e(S7e,M0r),e(FM,E0r),e(FM,uY),e(uY,C0r),e(FM,w0r),e(ie,A0r),e(ie,TM),e(TM,R7e),e(R7e,L0r),e(TM,y0r),e(TM,bY),e(bY,x0r),e(TM,$0r),e(ie,k0r),e(ie,MM),e(MM,P7e),e(P7e,S0r),e(MM,R0r),e(MM,vY),e(vY,P0r),e(MM,B0r),e(ie,I0r),e(ie,EM),e(EM,B7e),e(B7e,N0r),e(EM,q0r),e(EM,FY),e(FY,j0r),e(EM,D0r),e(ie,G0r),e(ie,CM),e(CM,I7e),e(I7e,O0r),e(CM,V0r),e(CM,TY),e(TY,X0r),e(CM,z0r),e(ie,Q0r),e(ie,wM),e(wM,N7e),e(N7e,W0r),e(wM,H0r),e(wM,MY),e(MY,U0r),e(wM,J0r),e(ie,Y0r),e(ie,AM),e(AM,q7e),e(q7e,K0r),e(AM,Z0r),e(AM,EY),e(EY,ewr),e(AM,owr),e(ie,rwr),e(ie,LM),e(LM,j7e),e(j7e,twr),e(LM,awr),e(LM,CY),e(CY,nwr),e(LM,swr),e(ie,lwr),e(ie,yM),e(yM,D7e),e(D7e,iwr),e(yM,dwr),e(yM,wY),e(wY,cwr),e(yM,fwr),e(ie,mwr),e(ie,xM),e(xM,G7e),e(G7e,gwr),e(xM,hwr),e(xM,AY),e(AY,pwr),e(xM,_wr),e(ie,uwr),e(ie,$M),e($M,O7e),e(O7e,bwr),e($M,vwr),e($M,LY),e(LY,Fwr),e($M,Twr),e(ie,Mwr),e(ie,kM),e(kM,V7e),e(V7e,Ewr),e(kM,Cwr),e(kM,yY),e(yY,wwr),e(kM,Awr),e(ie,Lwr),e(ie,SM),e(SM,X7e),e(X7e,ywr),e(SM,xwr),e(SM,xY),e(xY,$wr),e(SM,kwr),e(ie,Swr),e(ie,RM),e(RM,z7e),e(z7e,Rwr),e(RM,Pwr),e(RM,$Y),e($Y,Bwr),e(RM,Iwr),e(ie,Nwr),e(ie,PM),e(PM,Q7e),e(Q7e,qwr),e(PM,jwr),e(PM,kY),e(kY,Dwr),e(PM,Gwr),e(ie,Owr),e(ie,BM),e(BM,W7e),e(W7e,Vwr),e(BM,Xwr),e(BM,SY),e(SY,zwr),e(BM,Qwr),e(ie,Wwr),e(ie,IM),e(IM,H7e),e(H7e,Hwr),e(IM,Uwr),e(IM,RY),e(RY,Jwr),e(IM,Ywr),e(Rr,Kwr),M(NM,Rr,null),b(f,wze,u),b(f,Fc,u),e(Fc,qM),e(qM,U7e),M(vx,U7e,null),e(Fc,Zwr),e(Fc,J7e),e(J7e,eAr),b(f,Aze,u),b(f,sr,u),M(Fx,sr,null),e(sr,oAr),e(sr,Tc),e(Tc,rAr),e(Tc,PY),e(PY,tAr),e(Tc,aAr),e(Tc,BY),e(BY,nAr),e(Tc,sAr),e(sr,lAr),e(sr,Tx),e(Tx,iAr),e(Tx,Y7e),e(Y7e,dAr),e(Tx,cAr),e(sr,fAr),e(sr,Nt),M(Mx,Nt,null),e(Nt,mAr),e(Nt,K7e),e(K7e,gAr),e(Nt,hAr),e(Nt,Mc),e(Mc,pAr),e(Mc,Z7e),e(Z7e,_Ar),e(Mc,uAr),e(Mc,IY),e(IY,bAr),e(Mc,vAr),e(Nt,FAr),M(jM,Nt,null),e(sr,TAr),e(sr,Pr),M(Ex,Pr,null),e(Pr,MAr),e(Pr,e9e),e(e9e,EAr),e(Pr,CAr),e(Pr,gn),e(gn,wAr),e(gn,o9e),e(o9e,AAr),e(gn,LAr),e(gn,r9e),e(r9e,yAr),e(gn,xAr),e(gn,t9e),e(t9e,$Ar),e(gn,kAr),e(Pr,SAr),e(Pr,ye),e(ye,DM),e(DM,a9e),e(a9e,RAr),e(DM,PAr),e(DM,NY),e(NY,BAr),e(DM,IAr),e(ye,NAr),e(ye,GM),e(GM,n9e),e(n9e,qAr),e(GM,jAr),e(GM,qY),e(qY,DAr),e(GM,GAr),e(ye,OAr),e(ye,OM),e(OM,s9e),e(s9e,VAr),e(OM,XAr),e(OM,jY),e(jY,zAr),e(OM,QAr),e(ye,WAr),e(ye,VM),e(VM,l9e),e(l9e,HAr),e(VM,UAr),e(VM,DY),e(DY,JAr),e(VM,YAr),e(ye,KAr),e(ye,XM),e(XM,i9e),e(i9e,ZAr),e(XM,eLr),e(XM,GY),e(GY,oLr),e(XM,rLr),e(ye,tLr),e(ye,zM),e(zM,d9e),e(d9e,aLr),e(zM,nLr),e(zM,OY),e(OY,sLr),e(zM,lLr),e(ye,iLr),e(ye,QM),e(QM,c9e),e(c9e,dLr),e(QM,cLr),e(QM,VY),e(VY,fLr),e(QM,mLr),e(ye,gLr),e(ye,WM),e(WM,f9e),e(f9e,hLr),e(WM,pLr),e(WM,XY),e(XY,_Lr),e(WM,uLr),e(ye,bLr),e(ye,HM),e(HM,m9e),e(m9e,vLr),e(HM,FLr),e(HM,zY),e(zY,TLr),e(HM,MLr),e(ye,ELr),e(ye,UM),e(UM,g9e),e(g9e,CLr),e(UM,wLr),e(UM,QY),e(QY,ALr),e(UM,LLr),e(Pr,yLr),M(JM,Pr,null),b(f,Lze,u),b(f,Ec,u),e(Ec,YM),e(YM,h9e),M(Cx,h9e,null),e(Ec,xLr),e(Ec,p9e),e(p9e,$Lr),b(f,yze,u),b(f,lr,u),M(wx,lr,null),e(lr,kLr),e(lr,Cc),e(Cc,SLr),e(Cc,WY),e(WY,RLr),e(Cc,PLr),e(Cc,HY),e(HY,BLr),e(Cc,ILr),e(lr,NLr),e(lr,Ax),e(Ax,qLr),e(Ax,_9e),e(_9e,jLr),e(Ax,DLr),e(lr,GLr),e(lr,qt),M(Lx,qt,null),e(qt,OLr),e(qt,u9e),e(u9e,VLr),e(qt,XLr),e(qt,wc),e(wc,zLr),e(wc,b9e),e(b9e,QLr),e(wc,WLr),e(wc,UY),e(UY,HLr),e(wc,ULr),e(qt,JLr),M(KM,qt,null),e(lr,YLr),e(lr,Br),M(yx,Br,null),e(Br,KLr),e(Br,v9e),e(v9e,ZLr),e(Br,eyr),e(Br,hn),e(hn,oyr),e(hn,F9e),e(F9e,ryr),e(hn,tyr),e(hn,T9e),e(T9e,ayr),e(hn,nyr),e(hn,M9e),e(M9e,syr),e(hn,lyr),e(Br,iyr),e(Br,te),e(te,ZM),e(ZM,E9e),e(E9e,dyr),e(ZM,cyr),e(ZM,JY),e(JY,fyr),e(ZM,myr),e(te,gyr),e(te,eE),e(eE,C9e),e(C9e,hyr),e(eE,pyr),e(eE,YY),e(YY,_yr),e(eE,uyr),e(te,byr),e(te,oE),e(oE,w9e),e(w9e,vyr),e(oE,Fyr),e(oE,KY),e(KY,Tyr),e(oE,Myr),e(te,Eyr),e(te,rE),e(rE,A9e),e(A9e,Cyr),e(rE,wyr),e(rE,ZY),e(ZY,Ayr),e(rE,Lyr),e(te,yyr),e(te,tE),e(tE,L9e),e(L9e,xyr),e(tE,$yr),e(tE,eK),e(eK,kyr),e(tE,Syr),e(te,Ryr),e(te,aE),e(aE,y9e),e(y9e,Pyr),e(aE,Byr),e(aE,oK),e(oK,Iyr),e(aE,Nyr),e(te,qyr),e(te,nE),e(nE,x9e),e(x9e,jyr),e(nE,Dyr),e(nE,rK),e(rK,Gyr),e(nE,Oyr),e(te,Vyr),e(te,sE),e(sE,$9e),e($9e,Xyr),e(sE,zyr),e(sE,tK),e(tK,Qyr),e(sE,Wyr),e(te,Hyr),e(te,lE),e(lE,k9e),e(k9e,Uyr),e(lE,Jyr),e(lE,aK),e(aK,Yyr),e(lE,Kyr),e(te,Zyr),e(te,iE),e(iE,S9e),e(S9e,e8r),e(iE,o8r),e(iE,nK),e(nK,r8r),e(iE,t8r),e(te,a8r),e(te,dE),e(dE,R9e),e(R9e,n8r),e(dE,s8r),e(dE,sK),e(sK,l8r),e(dE,i8r),e(te,d8r),e(te,cE),e(cE,P9e),e(P9e,c8r),e(cE,f8r),e(cE,lK),e(lK,m8r),e(cE,g8r),e(te,h8r),e(te,fE),e(fE,B9e),e(B9e,p8r),e(fE,_8r),e(fE,iK),e(iK,u8r),e(fE,b8r),e(te,v8r),e(te,mE),e(mE,I9e),e(I9e,F8r),e(mE,T8r),e(mE,dK),e(dK,M8r),e(mE,E8r),e(te,C8r),e(te,gE),e(gE,N9e),e(N9e,w8r),e(gE,A8r),e(gE,cK),e(cK,L8r),e(gE,y8r),e(te,x8r),e(te,hE),e(hE,q9e),e(q9e,$8r),e(hE,k8r),e(hE,fK),e(fK,S8r),e(hE,R8r),e(te,P8r),e(te,pE),e(pE,j9e),e(j9e,B8r),e(pE,I8r),e(pE,mK),e(mK,N8r),e(pE,q8r),e(te,j8r),e(te,_E),e(_E,D9e),e(D9e,D8r),e(_E,G8r),e(_E,gK),e(gK,O8r),e(_E,V8r),e(te,X8r),e(te,uE),e(uE,G9e),e(G9e,z8r),e(uE,Q8r),e(uE,hK),e(hK,W8r),e(uE,H8r),e(te,U8r),e(te,bE),e(bE,O9e),e(O9e,J8r),e(bE,Y8r),e(bE,pK),e(pK,K8r),e(bE,Z8r),e(te,exr),e(te,vE),e(vE,V9e),e(V9e,oxr),e(vE,rxr),e(vE,_K),e(_K,txr),e(vE,axr),e(te,nxr),e(te,FE),e(FE,X9e),e(X9e,sxr),e(FE,lxr),e(FE,uK),e(uK,ixr),e(FE,dxr),e(te,cxr),e(te,TE),e(TE,z9e),e(z9e,fxr),e(TE,mxr),e(TE,bK),e(bK,gxr),e(TE,hxr),e(te,pxr),e(te,ME),e(ME,Q9e),e(Q9e,_xr),e(ME,uxr),e(ME,vK),e(vK,bxr),e(ME,vxr),e(te,Fxr),e(te,EE),e(EE,W9e),e(W9e,Txr),e(EE,Mxr),e(EE,FK),e(FK,Exr),e(EE,Cxr),e(te,wxr),e(te,CE),e(CE,H9e),e(H9e,Axr),e(CE,Lxr),e(CE,TK),e(TK,yxr),e(CE,xxr),e(Br,$xr),M(wE,Br,null),b(f,xze,u),b(f,Ac,u),e(Ac,AE),e(AE,U9e),M(xx,U9e,null),e(Ac,kxr),e(Ac,J9e),e(J9e,Sxr),b(f,$ze,u),b(f,ir,u),M($x,ir,null),e(ir,Rxr),e(ir,Lc),e(Lc,Pxr),e(Lc,MK),e(MK,Bxr),e(Lc,Ixr),e(Lc,EK),e(EK,Nxr),e(Lc,qxr),e(ir,jxr),e(ir,kx),e(kx,Dxr),e(kx,Y9e),e(Y9e,Gxr),e(kx,Oxr),e(ir,Vxr),e(ir,jt),M(Sx,jt,null),e(jt,Xxr),e(jt,K9e),e(K9e,zxr),e(jt,Qxr),e(jt,yc),e(yc,Wxr),e(yc,Z9e),e(Z9e,Hxr),e(yc,Uxr),e(yc,CK),e(CK,Jxr),e(yc,Yxr),e(jt,Kxr),M(LE,jt,null),e(ir,Zxr),e(ir,Ir),M(Rx,Ir,null),e(Ir,e$r),e(Ir,eMe),e(eMe,o$r),e(Ir,r$r),e(Ir,pn),e(pn,t$r),e(pn,oMe),e(oMe,a$r),e(pn,n$r),e(pn,rMe),e(rMe,s$r),e(pn,l$r),e(pn,tMe),e(tMe,i$r),e(pn,d$r),e(Ir,c$r),e(Ir,ue),e(ue,yE),e(yE,aMe),e(aMe,f$r),e(yE,m$r),e(yE,wK),e(wK,g$r),e(yE,h$r),e(ue,p$r),e(ue,xE),e(xE,nMe),e(nMe,_$r),e(xE,u$r),e(xE,AK),e(AK,b$r),e(xE,v$r),e(ue,F$r),e(ue,$E),e($E,sMe),e(sMe,T$r),e($E,M$r),e($E,LK),e(LK,E$r),e($E,C$r),e(ue,w$r),e(ue,kE),e(kE,lMe),e(lMe,A$r),e(kE,L$r),e(kE,yK),e(yK,y$r),e(kE,x$r),e(ue,$$r),e(ue,SE),e(SE,iMe),e(iMe,k$r),e(SE,S$r),e(SE,xK),e(xK,R$r),e(SE,P$r),e(ue,B$r),e(ue,RE),e(RE,dMe),e(dMe,I$r),e(RE,N$r),e(RE,$K),e($K,q$r),e(RE,j$r),e(ue,D$r),e(ue,PE),e(PE,cMe),e(cMe,G$r),e(PE,O$r),e(PE,kK),e(kK,V$r),e(PE,X$r),e(ue,z$r),e(ue,BE),e(BE,fMe),e(fMe,Q$r),e(BE,W$r),e(BE,SK),e(SK,H$r),e(BE,U$r),e(ue,J$r),e(ue,IE),e(IE,mMe),e(mMe,Y$r),e(IE,K$r),e(IE,RK),e(RK,Z$r),e(IE,ekr),e(ue,okr),e(ue,NE),e(NE,gMe),e(gMe,rkr),e(NE,tkr),e(NE,PK),e(PK,akr),e(NE,nkr),e(ue,skr),e(ue,qE),e(qE,hMe),e(hMe,lkr),e(qE,ikr),e(qE,BK),e(BK,dkr),e(qE,ckr),e(ue,fkr),e(ue,jE),e(jE,pMe),e(pMe,mkr),e(jE,gkr),e(jE,IK),e(IK,hkr),e(jE,pkr),e(ue,_kr),e(ue,DE),e(DE,_Me),e(_Me,ukr),e(DE,bkr),e(DE,NK),e(NK,vkr),e(DE,Fkr),e(ue,Tkr),e(ue,GE),e(GE,uMe),e(uMe,Mkr),e(GE,Ekr),e(GE,qK),e(qK,Ckr),e(GE,wkr),e(ue,Akr),e(ue,OE),e(OE,bMe),e(bMe,Lkr),e(OE,ykr),e(OE,jK),e(jK,xkr),e(OE,$kr),e(ue,kkr),e(ue,VE),e(VE,vMe),e(vMe,Skr),e(VE,Rkr),e(VE,DK),e(DK,Pkr),e(VE,Bkr),e(ue,Ikr),e(ue,XE),e(XE,FMe),e(FMe,Nkr),e(XE,qkr),e(XE,GK),e(GK,jkr),e(XE,Dkr),e(Ir,Gkr),M(zE,Ir,null),b(f,kze,u),b(f,xc,u),e(xc,QE),e(QE,TMe),M(Px,TMe,null),e(xc,Okr),e(xc,MMe),e(MMe,Vkr),b(f,Sze,u),b(f,dr,u),M(Bx,dr,null),e(dr,Xkr),e(dr,$c),e($c,zkr),e($c,OK),e(OK,Qkr),e($c,Wkr),e($c,VK),e(VK,Hkr),e($c,Ukr),e(dr,Jkr),e(dr,Ix),e(Ix,Ykr),e(Ix,EMe),e(EMe,Kkr),e(Ix,Zkr),e(dr,eSr),e(dr,Dt),M(Nx,Dt,null),e(Dt,oSr),e(Dt,CMe),e(CMe,rSr),e(Dt,tSr),e(Dt,kc),e(kc,aSr),e(kc,wMe),e(wMe,nSr),e(kc,sSr),e(kc,XK),e(XK,lSr),e(kc,iSr),e(Dt,dSr),M(WE,Dt,null),e(dr,cSr),e(dr,Nr),M(qx,Nr,null),e(Nr,fSr),e(Nr,AMe),e(AMe,mSr),e(Nr,gSr),e(Nr,_n),e(_n,hSr),e(_n,LMe),e(LMe,pSr),e(_n,_Sr),e(_n,yMe),e(yMe,uSr),e(_n,bSr),e(_n,xMe),e(xMe,vSr),e(_n,FSr),e(Nr,TSr),e(Nr,jx),e(jx,HE),e(HE,$Me),e($Me,MSr),e(HE,ESr),e(HE,zK),e(zK,CSr),e(HE,wSr),e(jx,ASr),e(jx,UE),e(UE,kMe),e(kMe,LSr),e(UE,ySr),e(UE,QK),e(QK,xSr),e(UE,$Sr),e(Nr,kSr),M(JE,Nr,null),b(f,Rze,u),b(f,Sc,u),e(Sc,YE),e(YE,SMe),M(Dx,SMe,null),e(Sc,SSr),e(Sc,RMe),e(RMe,RSr),b(f,Pze,u),b(f,cr,u),M(Gx,cr,null),e(cr,PSr),e(cr,Rc),e(Rc,BSr),e(Rc,WK),e(WK,ISr),e(Rc,NSr),e(Rc,HK),e(HK,qSr),e(Rc,jSr),e(cr,DSr),e(cr,Ox),e(Ox,GSr),e(Ox,PMe),e(PMe,OSr),e(Ox,VSr),e(cr,XSr),e(cr,Gt),M(Vx,Gt,null),e(Gt,zSr),e(Gt,BMe),e(BMe,QSr),e(Gt,WSr),e(Gt,Pc),e(Pc,HSr),e(Pc,IMe),e(IMe,USr),e(Pc,JSr),e(Pc,UK),e(UK,YSr),e(Pc,KSr),e(Gt,ZSr),M(KE,Gt,null),e(cr,eRr),e(cr,qr),M(Xx,qr,null),e(qr,oRr),e(qr,NMe),e(NMe,rRr),e(qr,tRr),e(qr,un),e(un,aRr),e(un,qMe),e(qMe,nRr),e(un,sRr),e(un,jMe),e(jMe,lRr),e(un,iRr),e(un,DMe),e(DMe,dRr),e(un,cRr),e(qr,fRr),e(qr,GMe),e(GMe,ZE),e(ZE,OMe),e(OMe,mRr),e(ZE,gRr),e(ZE,JK),e(JK,hRr),e(ZE,pRr),e(qr,_Rr),M(eC,qr,null),b(f,Bze,u),b(f,Bc,u),e(Bc,oC),e(oC,VMe),M(zx,VMe,null),e(Bc,uRr),e(Bc,XMe),e(XMe,bRr),b(f,Ize,u),b(f,fr,u),M(Qx,fr,null),e(fr,vRr),e(fr,Ic),e(Ic,FRr),e(Ic,YK),e(YK,TRr),e(Ic,MRr),e(Ic,KK),e(KK,ERr),e(Ic,CRr),e(fr,wRr),e(fr,Wx),e(Wx,ARr),e(Wx,zMe),e(zMe,LRr),e(Wx,yRr),e(fr,xRr),e(fr,Ot),M(Hx,Ot,null),e(Ot,$Rr),e(Ot,QMe),e(QMe,kRr),e(Ot,SRr),e(Ot,Nc),e(Nc,RRr),e(Nc,WMe),e(WMe,PRr),e(Nc,BRr),e(Nc,ZK),e(ZK,IRr),e(Nc,NRr),e(Ot,qRr),M(rC,Ot,null),e(fr,jRr),e(fr,jr),M(Ux,jr,null),e(jr,DRr),e(jr,HMe),e(HMe,GRr),e(jr,ORr),e(jr,bn),e(bn,VRr),e(bn,UMe),e(UMe,XRr),e(bn,zRr),e(bn,JMe),e(JMe,QRr),e(bn,WRr),e(bn,YMe),e(YMe,HRr),e(bn,URr),e(jr,JRr),e(jr,de),e(de,tC),e(tC,KMe),e(KMe,YRr),e(tC,KRr),e(tC,eZ),e(eZ,ZRr),e(tC,ePr),e(de,oPr),e(de,aC),e(aC,ZMe),e(ZMe,rPr),e(aC,tPr),e(aC,oZ),e(oZ,aPr),e(aC,nPr),e(de,sPr),e(de,nC),e(nC,eEe),e(eEe,lPr),e(nC,iPr),e(nC,rZ),e(rZ,dPr),e(nC,cPr),e(de,fPr),e(de,sC),e(sC,oEe),e(oEe,mPr),e(sC,gPr),e(sC,tZ),e(tZ,hPr),e(sC,pPr),e(de,_Pr),e(de,lC),e(lC,rEe),e(rEe,uPr),e(lC,bPr),e(lC,aZ),e(aZ,vPr),e(lC,FPr),e(de,TPr),e(de,iC),e(iC,tEe),e(tEe,MPr),e(iC,EPr),e(iC,nZ),e(nZ,CPr),e(iC,wPr),e(de,APr),e(de,dC),e(dC,aEe),e(aEe,LPr),e(dC,yPr),e(dC,sZ),e(sZ,xPr),e(dC,$Pr),e(de,kPr),e(de,cC),e(cC,nEe),e(nEe,SPr),e(cC,RPr),e(cC,lZ),e(lZ,PPr),e(cC,BPr),e(de,IPr),e(de,fC),e(fC,sEe),e(sEe,NPr),e(fC,qPr),e(fC,iZ),e(iZ,jPr),e(fC,DPr),e(de,GPr),e(de,mC),e(mC,lEe),e(lEe,OPr),e(mC,VPr),e(mC,dZ),e(dZ,XPr),e(mC,zPr),e(de,QPr),e(de,gC),e(gC,iEe),e(iEe,WPr),e(gC,HPr),e(gC,cZ),e(cZ,UPr),e(gC,JPr),e(de,YPr),e(de,hC),e(hC,dEe),e(dEe,KPr),e(hC,ZPr),e(hC,fZ),e(fZ,eBr),e(hC,oBr),e(de,rBr),e(de,pC),e(pC,cEe),e(cEe,tBr),e(pC,aBr),e(pC,mZ),e(mZ,nBr),e(pC,sBr),e(de,lBr),e(de,_C),e(_C,fEe),e(fEe,iBr),e(_C,dBr),e(_C,gZ),e(gZ,cBr),e(_C,fBr),e(de,mBr),e(de,uC),e(uC,mEe),e(mEe,gBr),e(uC,hBr),e(uC,hZ),e(hZ,pBr),e(uC,_Br),e(de,uBr),e(de,bC),e(bC,gEe),e(gEe,bBr),e(bC,vBr),e(bC,pZ),e(pZ,FBr),e(bC,TBr),e(de,MBr),e(de,vC),e(vC,hEe),e(hEe,EBr),e(vC,CBr),e(vC,_Z),e(_Z,wBr),e(vC,ABr),e(de,LBr),e(de,FC),e(FC,pEe),e(pEe,yBr),e(FC,xBr),e(FC,uZ),e(uZ,$Br),e(FC,kBr),e(de,SBr),e(de,TC),e(TC,_Ee),e(_Ee,RBr),e(TC,PBr),e(TC,bZ),e(bZ,BBr),e(TC,IBr),e(de,NBr),e(de,MC),e(MC,uEe),e(uEe,qBr),e(MC,jBr),e(MC,vZ),e(vZ,DBr),e(MC,GBr),e(jr,OBr),M(EC,jr,null),b(f,Nze,u),b(f,qc,u),e(qc,CC),e(CC,bEe),M(Jx,bEe,null),e(qc,VBr),e(qc,vEe),e(vEe,XBr),b(f,qze,u),b(f,mr,u),M(Yx,mr,null),e(mr,zBr),e(mr,jc),e(jc,QBr),e(jc,FZ),e(FZ,WBr),e(jc,HBr),e(jc,TZ),e(TZ,UBr),e(jc,JBr),e(mr,YBr),e(mr,Kx),e(Kx,KBr),e(Kx,FEe),e(FEe,ZBr),e(Kx,eIr),e(mr,oIr),e(mr,Vt),M(Zx,Vt,null),e(Vt,rIr),e(Vt,TEe),e(TEe,tIr),e(Vt,aIr),e(Vt,Dc),e(Dc,nIr),e(Dc,MEe),e(MEe,sIr),e(Dc,lIr),e(Dc,MZ),e(MZ,iIr),e(Dc,dIr),e(Vt,cIr),M(wC,Vt,null),e(mr,fIr),e(mr,Dr),M(e$,Dr,null),e(Dr,mIr),e(Dr,EEe),e(EEe,gIr),e(Dr,hIr),e(Dr,vn),e(vn,pIr),e(vn,CEe),e(CEe,_Ir),e(vn,uIr),e(vn,wEe),e(wEe,bIr),e(vn,vIr),e(vn,AEe),e(AEe,FIr),e(vn,TIr),e(Dr,MIr),e(Dr,ce),e(ce,AC),e(AC,LEe),e(LEe,EIr),e(AC,CIr),e(AC,EZ),e(EZ,wIr),e(AC,AIr),e(ce,LIr),e(ce,LC),e(LC,yEe),e(yEe,yIr),e(LC,xIr),e(LC,CZ),e(CZ,$Ir),e(LC,kIr),e(ce,SIr),e(ce,yC),e(yC,xEe),e(xEe,RIr),e(yC,PIr),e(yC,wZ),e(wZ,BIr),e(yC,IIr),e(ce,NIr),e(ce,xC),e(xC,$Ee),e($Ee,qIr),e(xC,jIr),e(xC,AZ),e(AZ,DIr),e(xC,GIr),e(ce,OIr),e(ce,$C),e($C,kEe),e(kEe,VIr),e($C,XIr),e($C,LZ),e(LZ,zIr),e($C,QIr),e(ce,WIr),e(ce,kC),e(kC,SEe),e(SEe,HIr),e(kC,UIr),e(kC,yZ),e(yZ,JIr),e(kC,YIr),e(ce,KIr),e(ce,SC),e(SC,REe),e(REe,ZIr),e(SC,eNr),e(SC,xZ),e(xZ,oNr),e(SC,rNr),e(ce,tNr),e(ce,RC),e(RC,PEe),e(PEe,aNr),e(RC,nNr),e(RC,$Z),e($Z,sNr),e(RC,lNr),e(ce,iNr),e(ce,PC),e(PC,BEe),e(BEe,dNr),e(PC,cNr),e(PC,kZ),e(kZ,fNr),e(PC,mNr),e(ce,gNr),e(ce,BC),e(BC,IEe),e(IEe,hNr),e(BC,pNr),e(BC,SZ),e(SZ,_Nr),e(BC,uNr),e(ce,bNr),e(ce,IC),e(IC,NEe),e(NEe,vNr),e(IC,FNr),e(IC,RZ),e(RZ,TNr),e(IC,MNr),e(ce,ENr),e(ce,NC),e(NC,qEe),e(qEe,CNr),e(NC,wNr),e(NC,PZ),e(PZ,ANr),e(NC,LNr),e(ce,yNr),e(ce,qC),e(qC,jEe),e(jEe,xNr),e(qC,$Nr),e(qC,BZ),e(BZ,kNr),e(qC,SNr),e(ce,RNr),e(ce,jC),e(jC,DEe),e(DEe,PNr),e(jC,BNr),e(jC,IZ),e(IZ,INr),e(jC,NNr),e(ce,qNr),e(ce,DC),e(DC,GEe),e(GEe,jNr),e(DC,DNr),e(DC,NZ),e(NZ,GNr),e(DC,ONr),e(ce,VNr),e(ce,GC),e(GC,OEe),e(OEe,XNr),e(GC,zNr),e(GC,qZ),e(qZ,QNr),e(GC,WNr),e(ce,HNr),e(ce,OC),e(OC,VEe),e(VEe,UNr),e(OC,JNr),e(OC,jZ),e(jZ,YNr),e(OC,KNr),e(ce,ZNr),e(ce,VC),e(VC,XEe),e(XEe,eqr),e(VC,oqr),e(VC,DZ),e(DZ,rqr),e(VC,tqr),e(ce,aqr),e(ce,XC),e(XC,zEe),e(zEe,nqr),e(XC,sqr),e(XC,GZ),e(GZ,lqr),e(XC,iqr),e(ce,dqr),e(ce,zC),e(zC,QEe),e(QEe,cqr),e(zC,fqr),e(zC,OZ),e(OZ,mqr),e(zC,gqr),e(Dr,hqr),M(QC,Dr,null),b(f,jze,u),b(f,Gc,u),e(Gc,WC),e(WC,WEe),M(o$,WEe,null),e(Gc,pqr),e(Gc,HEe),e(HEe,_qr),b(f,Dze,u),b(f,gr,u),M(r$,gr,null),e(gr,uqr),e(gr,Oc),e(Oc,bqr),e(Oc,VZ),e(VZ,vqr),e(Oc,Fqr),e(Oc,XZ),e(XZ,Tqr),e(Oc,Mqr),e(gr,Eqr),e(gr,t$),e(t$,Cqr),e(t$,UEe),e(UEe,wqr),e(t$,Aqr),e(gr,Lqr),e(gr,Xt),M(a$,Xt,null),e(Xt,yqr),e(Xt,JEe),e(JEe,xqr),e(Xt,$qr),e(Xt,Vc),e(Vc,kqr),e(Vc,YEe),e(YEe,Sqr),e(Vc,Rqr),e(Vc,zZ),e(zZ,Pqr),e(Vc,Bqr),e(Xt,Iqr),M(HC,Xt,null),e(gr,Nqr),e(gr,Gr),M(n$,Gr,null),e(Gr,qqr),e(Gr,KEe),e(KEe,jqr),e(Gr,Dqr),e(Gr,Fn),e(Fn,Gqr),e(Fn,ZEe),e(ZEe,Oqr),e(Fn,Vqr),e(Fn,eCe),e(eCe,Xqr),e(Fn,zqr),e(Fn,oCe),e(oCe,Qqr),e(Fn,Wqr),e(Gr,Hqr),e(Gr,rCe),e(rCe,UC),e(UC,tCe),e(tCe,Uqr),e(UC,Jqr),e(UC,QZ),e(QZ,Yqr),e(UC,Kqr),e(Gr,Zqr),M(JC,Gr,null),b(f,Gze,u),b(f,Xc,u),e(Xc,YC),e(YC,aCe),M(s$,aCe,null),e(Xc,ejr),e(Xc,nCe),e(nCe,ojr),b(f,Oze,u),b(f,hr,u),M(l$,hr,null),e(hr,rjr),e(hr,zc),e(zc,tjr),e(zc,WZ),e(WZ,ajr),e(zc,njr),e(zc,HZ),e(HZ,sjr),e(zc,ljr),e(hr,ijr),e(hr,i$),e(i$,djr),e(i$,sCe),e(sCe,cjr),e(i$,fjr),e(hr,mjr),e(hr,zt),M(d$,zt,null),e(zt,gjr),e(zt,lCe),e(lCe,hjr),e(zt,pjr),e(zt,Qc),e(Qc,_jr),e(Qc,iCe),e(iCe,ujr),e(Qc,bjr),e(Qc,UZ),e(UZ,vjr),e(Qc,Fjr),e(zt,Tjr),M(KC,zt,null),e(hr,Mjr),e(hr,Or),M(c$,Or,null),e(Or,Ejr),e(Or,dCe),e(dCe,Cjr),e(Or,wjr),e(Or,Tn),e(Tn,Ajr),e(Tn,cCe),e(cCe,Ljr),e(Tn,yjr),e(Tn,fCe),e(fCe,xjr),e(Tn,$jr),e(Tn,mCe),e(mCe,kjr),e(Tn,Sjr),e(Or,Rjr),e(Or,gCe),e(gCe,ZC),e(ZC,hCe),e(hCe,Pjr),e(ZC,Bjr),e(ZC,JZ),e(JZ,Ijr),e(ZC,Njr),e(Or,qjr),M(e3,Or,null),b(f,Vze,u),b(f,Wc,u),e(Wc,o3),e(o3,pCe),M(f$,pCe,null),e(Wc,jjr),e(Wc,_Ce),e(_Ce,Djr),b(f,Xze,u),b(f,pr,u),M(m$,pr,null),e(pr,Gjr),e(pr,Hc),e(Hc,Ojr),e(Hc,YZ),e(YZ,Vjr),e(Hc,Xjr),e(Hc,KZ),e(KZ,zjr),e(Hc,Qjr),e(pr,Wjr),e(pr,g$),e(g$,Hjr),e(g$,uCe),e(uCe,Ujr),e(g$,Jjr),e(pr,Yjr),e(pr,Qt),M(h$,Qt,null),e(Qt,Kjr),e(Qt,bCe),e(bCe,Zjr),e(Qt,eDr),e(Qt,Uc),e(Uc,oDr),e(Uc,vCe),e(vCe,rDr),e(Uc,tDr),e(Uc,ZZ),e(ZZ,aDr),e(Uc,nDr),e(Qt,sDr),M(r3,Qt,null),e(pr,lDr),e(pr,Vr),M(p$,Vr,null),e(Vr,iDr),e(Vr,FCe),e(FCe,dDr),e(Vr,cDr),e(Vr,Mn),e(Mn,fDr),e(Mn,TCe),e(TCe,mDr),e(Mn,gDr),e(Mn,MCe),e(MCe,hDr),e(Mn,pDr),e(Mn,ECe),e(ECe,_Dr),e(Mn,uDr),e(Vr,bDr),e(Vr,oe),e(oe,t3),e(t3,CCe),e(CCe,vDr),e(t3,FDr),e(t3,eee),e(eee,TDr),e(t3,MDr),e(oe,EDr),e(oe,a3),e(a3,wCe),e(wCe,CDr),e(a3,wDr),e(a3,oee),e(oee,ADr),e(a3,LDr),e(oe,yDr),e(oe,n3),e(n3,ACe),e(ACe,xDr),e(n3,$Dr),e(n3,ree),e(ree,kDr),e(n3,SDr),e(oe,RDr),e(oe,s3),e(s3,LCe),e(LCe,PDr),e(s3,BDr),e(s3,tee),e(tee,IDr),e(s3,NDr),e(oe,qDr),e(oe,l3),e(l3,yCe),e(yCe,jDr),e(l3,DDr),e(l3,aee),e(aee,GDr),e(l3,ODr),e(oe,VDr),e(oe,i3),e(i3,xCe),e(xCe,XDr),e(i3,zDr),e(i3,nee),e(nee,QDr),e(i3,WDr),e(oe,HDr),e(oe,d3),e(d3,$Ce),e($Ce,UDr),e(d3,JDr),e(d3,see),e(see,YDr),e(d3,KDr),e(oe,ZDr),e(oe,c3),e(c3,kCe),e(kCe,eGr),e(c3,oGr),e(c3,lee),e(lee,rGr),e(c3,tGr),e(oe,aGr),e(oe,f3),e(f3,SCe),e(SCe,nGr),e(f3,sGr),e(f3,iee),e(iee,lGr),e(f3,iGr),e(oe,dGr),e(oe,m3),e(m3,RCe),e(RCe,cGr),e(m3,fGr),e(m3,dee),e(dee,mGr),e(m3,gGr),e(oe,hGr),e(oe,g3),e(g3,PCe),e(PCe,pGr),e(g3,_Gr),e(g3,cee),e(cee,uGr),e(g3,bGr),e(oe,vGr),e(oe,h3),e(h3,BCe),e(BCe,FGr),e(h3,TGr),e(h3,fee),e(fee,MGr),e(h3,EGr),e(oe,CGr),e(oe,p3),e(p3,ICe),e(ICe,wGr),e(p3,AGr),e(p3,mee),e(mee,LGr),e(p3,yGr),e(oe,xGr),e(oe,_3),e(_3,NCe),e(NCe,$Gr),e(_3,kGr),e(_3,gee),e(gee,SGr),e(_3,RGr),e(oe,PGr),e(oe,u3),e(u3,qCe),e(qCe,BGr),e(u3,IGr),e(u3,hee),e(hee,NGr),e(u3,qGr),e(oe,jGr),e(oe,b3),e(b3,jCe),e(jCe,DGr),e(b3,GGr),e(b3,pee),e(pee,OGr),e(b3,VGr),e(oe,XGr),e(oe,v3),e(v3,DCe),e(DCe,zGr),e(v3,QGr),e(v3,_ee),e(_ee,WGr),e(v3,HGr),e(oe,UGr),e(oe,F3),e(F3,GCe),e(GCe,JGr),e(F3,YGr),e(F3,uee),e(uee,KGr),e(F3,ZGr),e(oe,eOr),e(oe,T3),e(T3,OCe),e(OCe,oOr),e(T3,rOr),e(T3,bee),e(bee,tOr),e(T3,aOr),e(oe,nOr),e(oe,M3),e(M3,VCe),e(VCe,sOr),e(M3,lOr),e(M3,vee),e(vee,iOr),e(M3,dOr),e(oe,cOr),e(oe,E3),e(E3,XCe),e(XCe,fOr),e(E3,mOr),e(E3,Fee),e(Fee,gOr),e(E3,hOr),e(oe,pOr),e(oe,C3),e(C3,zCe),e(zCe,_Or),e(C3,uOr),e(C3,Tee),e(Tee,bOr),e(C3,vOr),e(oe,FOr),e(oe,w3),e(w3,QCe),e(QCe,TOr),e(w3,MOr),e(w3,Mee),e(Mee,EOr),e(w3,COr),e(oe,wOr),e(oe,A3),e(A3,WCe),e(WCe,AOr),e(A3,LOr),e(A3,Eee),e(Eee,yOr),e(A3,xOr),e(oe,$Or),e(oe,L3),e(L3,HCe),e(HCe,kOr),e(L3,SOr),e(L3,Cee),e(Cee,ROr),e(L3,POr),e(oe,BOr),e(oe,y3),e(y3,UCe),e(UCe,IOr),e(y3,NOr),e(y3,wee),e(wee,qOr),e(y3,jOr),e(oe,DOr),e(oe,x3),e(x3,JCe),e(JCe,GOr),e(x3,OOr),e(x3,Aee),e(Aee,VOr),e(x3,XOr),e(Vr,zOr),M($3,Vr,null),b(f,zze,u),b(f,Jc,u),e(Jc,k3),e(k3,YCe),M(_$,YCe,null),e(Jc,QOr),e(Jc,KCe),e(KCe,WOr),b(f,Qze,u),b(f,_r,u),M(u$,_r,null),e(_r,HOr),e(_r,Yc),e(Yc,UOr),e(Yc,Lee),e(Lee,JOr),e(Yc,YOr),e(Yc,yee),e(yee,KOr),e(Yc,ZOr),e(_r,eVr),e(_r,b$),e(b$,oVr),e(b$,ZCe),e(ZCe,rVr),e(b$,tVr),e(_r,aVr),e(_r,Wt),M(v$,Wt,null),e(Wt,nVr),e(Wt,e3e),e(e3e,sVr),e(Wt,lVr),e(Wt,Kc),e(Kc,iVr),e(Kc,o3e),e(o3e,dVr),e(Kc,cVr),e(Kc,xee),e(xee,fVr),e(Kc,mVr),e(Wt,gVr),M(S3,Wt,null),e(_r,hVr),e(_r,Xr),M(F$,Xr,null),e(Xr,pVr),e(Xr,r3e),e(r3e,_Vr),e(Xr,uVr),e(Xr,En),e(En,bVr),e(En,t3e),e(t3e,vVr),e(En,FVr),e(En,a3e),e(a3e,TVr),e(En,MVr),e(En,n3e),e(n3e,EVr),e(En,CVr),e(Xr,wVr),e(Xr,xe),e(xe,R3),e(R3,s3e),e(s3e,AVr),e(R3,LVr),e(R3,$ee),e($ee,yVr),e(R3,xVr),e(xe,$Vr),e(xe,P3),e(P3,l3e),e(l3e,kVr),e(P3,SVr),e(P3,kee),e(kee,RVr),e(P3,PVr),e(xe,BVr),e(xe,B3),e(B3,i3e),e(i3e,IVr),e(B3,NVr),e(B3,See),e(See,qVr),e(B3,jVr),e(xe,DVr),e(xe,I3),e(I3,d3e),e(d3e,GVr),e(I3,OVr),e(I3,Ree),e(Ree,VVr),e(I3,XVr),e(xe,zVr),e(xe,N3),e(N3,c3e),e(c3e,QVr),e(N3,WVr),e(N3,Pee),e(Pee,HVr),e(N3,UVr),e(xe,JVr),e(xe,q3),e(q3,f3e),e(f3e,YVr),e(q3,KVr),e(q3,Bee),e(Bee,ZVr),e(q3,eXr),e(xe,oXr),e(xe,j3),e(j3,m3e),e(m3e,rXr),e(j3,tXr),e(j3,Iee),e(Iee,aXr),e(j3,nXr),e(xe,sXr),e(xe,D3),e(D3,g3e),e(g3e,lXr),e(D3,iXr),e(D3,Nee),e(Nee,dXr),e(D3,cXr),e(xe,fXr),e(xe,G3),e(G3,h3e),e(h3e,mXr),e(G3,gXr),e(G3,qee),e(qee,hXr),e(G3,pXr),e(xe,_Xr),e(xe,O3),e(O3,p3e),e(p3e,uXr),e(O3,bXr),e(O3,jee),e(jee,vXr),e(O3,FXr),e(Xr,TXr),M(V3,Xr,null),b(f,Wze,u),b(f,Zc,u),e(Zc,X3),e(X3,_3e),M(T$,_3e,null),e(Zc,MXr),e(Zc,u3e),e(u3e,EXr),b(f,Hze,u),b(f,ur,u),M(M$,ur,null),e(ur,CXr),e(ur,ef),e(ef,wXr),e(ef,Dee),e(Dee,AXr),e(ef,LXr),e(ef,Gee),e(Gee,yXr),e(ef,xXr),e(ur,$Xr),e(ur,E$),e(E$,kXr),e(E$,b3e),e(b3e,SXr),e(E$,RXr),e(ur,PXr),e(ur,Ht),M(C$,Ht,null),e(Ht,BXr),e(Ht,v3e),e(v3e,IXr),e(Ht,NXr),e(Ht,of),e(of,qXr),e(of,F3e),e(F3e,jXr),e(of,DXr),e(of,Oee),e(Oee,GXr),e(of,OXr),e(Ht,VXr),M(z3,Ht,null),e(ur,XXr),e(ur,zr),M(w$,zr,null),e(zr,zXr),e(zr,T3e),e(T3e,QXr),e(zr,WXr),e(zr,Cn),e(Cn,HXr),e(Cn,M3e),e(M3e,UXr),e(Cn,JXr),e(Cn,E3e),e(E3e,YXr),e(Cn,KXr),e(Cn,C3e),e(C3e,ZXr),e(Cn,ezr),e(zr,ozr),e(zr,Ee),e(Ee,Q3),e(Q3,w3e),e(w3e,rzr),e(Q3,tzr),e(Q3,Vee),e(Vee,azr),e(Q3,nzr),e(Ee,szr),e(Ee,W3),e(W3,A3e),e(A3e,lzr),e(W3,izr),e(W3,Xee),e(Xee,dzr),e(W3,czr),e(Ee,fzr),e(Ee,H3),e(H3,L3e),e(L3e,mzr),e(H3,gzr),e(H3,zee),e(zee,hzr),e(H3,pzr),e(Ee,_zr),e(Ee,U3),e(U3,y3e),e(y3e,uzr),e(U3,bzr),e(U3,Qee),e(Qee,vzr),e(U3,Fzr),e(Ee,Tzr),e(Ee,J3),e(J3,x3e),e(x3e,Mzr),e(J3,Ezr),e(J3,Wee),e(Wee,Czr),e(J3,wzr),e(Ee,Azr),e(Ee,Y3),e(Y3,$3e),e($3e,Lzr),e(Y3,yzr),e(Y3,Hee),e(Hee,xzr),e(Y3,$zr),e(Ee,kzr),e(Ee,K3),e(K3,k3e),e(k3e,Szr),e(K3,Rzr),e(K3,Uee),e(Uee,Pzr),e(K3,Bzr),e(Ee,Izr),e(Ee,Z3),e(Z3,S3e),e(S3e,Nzr),e(Z3,qzr),e(Z3,Jee),e(Jee,jzr),e(Z3,Dzr),e(Ee,Gzr),e(Ee,e5),e(e5,R3e),e(R3e,Ozr),e(e5,Vzr),e(e5,Yee),e(Yee,Xzr),e(e5,zzr),e(Ee,Qzr),e(Ee,o5),e(o5,P3e),e(P3e,Wzr),e(o5,Hzr),e(o5,Kee),e(Kee,Uzr),e(o5,Jzr),e(Ee,Yzr),e(Ee,r5),e(r5,B3e),e(B3e,Kzr),e(r5,Zzr),e(r5,Zee),e(Zee,eQr),e(r5,oQr),e(Ee,rQr),e(Ee,t5),e(t5,I3e),e(I3e,tQr),e(t5,aQr),e(t5,eoe),e(eoe,nQr),e(t5,sQr),e(Ee,lQr),e(Ee,a5),e(a5,N3e),e(N3e,iQr),e(a5,dQr),e(a5,ooe),e(ooe,cQr),e(a5,fQr),e(zr,mQr),M(n5,zr,null),b(f,Uze,u),b(f,rf,u),e(rf,s5),e(s5,q3e),M(A$,q3e,null),e(rf,gQr),e(rf,j3e),e(j3e,hQr),b(f,Jze,u),b(f,br,u),M(L$,br,null),e(br,pQr),e(br,tf),e(tf,_Qr),e(tf,roe),e(roe,uQr),e(tf,bQr),e(tf,toe),e(toe,vQr),e(tf,FQr),e(br,TQr),e(br,y$),e(y$,MQr),e(y$,D3e),e(D3e,EQr),e(y$,CQr),e(br,wQr),e(br,Ut),M(x$,Ut,null),e(Ut,AQr),e(Ut,G3e),e(G3e,LQr),e(Ut,yQr),e(Ut,af),e(af,xQr),e(af,O3e),e(O3e,$Qr),e(af,kQr),e(af,aoe),e(aoe,SQr),e(af,RQr),e(Ut,PQr),M(l5,Ut,null),e(br,BQr),e(br,Qr),M($$,Qr,null),e(Qr,IQr),e(Qr,V3e),e(V3e,NQr),e(Qr,qQr),e(Qr,wn),e(wn,jQr),e(wn,X3e),e(X3e,DQr),e(wn,GQr),e(wn,z3e),e(z3e,OQr),e(wn,VQr),e(wn,Q3e),e(Q3e,XQr),e(wn,zQr),e(Qr,QQr),e(Qr,$e),e($e,i5),e(i5,W3e),e(W3e,WQr),e(i5,HQr),e(i5,noe),e(noe,UQr),e(i5,JQr),e($e,YQr),e($e,d5),e(d5,H3e),e(H3e,KQr),e(d5,ZQr),e(d5,soe),e(soe,eWr),e(d5,oWr),e($e,rWr),e($e,c5),e(c5,U3e),e(U3e,tWr),e(c5,aWr),e(c5,loe),e(loe,nWr),e(c5,sWr),e($e,lWr),e($e,f5),e(f5,J3e),e(J3e,iWr),e(f5,dWr),e(f5,ioe),e(ioe,cWr),e(f5,fWr),e($e,mWr),e($e,m5),e(m5,Y3e),e(Y3e,gWr),e(m5,hWr),e(m5,doe),e(doe,pWr),e(m5,_Wr),e($e,uWr),e($e,g5),e(g5,K3e),e(K3e,bWr),e(g5,vWr),e(g5,coe),e(coe,FWr),e(g5,TWr),e($e,MWr),e($e,h5),e(h5,Z3e),e(Z3e,EWr),e(h5,CWr),e(h5,foe),e(foe,wWr),e(h5,AWr),e($e,LWr),e($e,p5),e(p5,e5e),e(e5e,yWr),e(p5,xWr),e(p5,moe),e(moe,$Wr),e(p5,kWr),e($e,SWr),e($e,_5),e(_5,o5e),e(o5e,RWr),e(_5,PWr),e(_5,goe),e(goe,BWr),e(_5,IWr),e($e,NWr),e($e,u5),e(u5,r5e),e(r5e,qWr),e(u5,jWr),e(u5,hoe),e(hoe,DWr),e(u5,GWr),e(Qr,OWr),M(b5,Qr,null),b(f,Yze,u),b(f,nf,u),e(nf,v5),e(v5,t5e),M(k$,t5e,null),e(nf,VWr),e(nf,a5e),e(a5e,XWr),b(f,Kze,u),b(f,vr,u),M(S$,vr,null),e(vr,zWr),e(vr,sf),e(sf,QWr),e(sf,poe),e(poe,WWr),e(sf,HWr),e(sf,_oe),e(_oe,UWr),e(sf,JWr),e(vr,YWr),e(vr,R$),e(R$,KWr),e(R$,n5e),e(n5e,ZWr),e(R$,eHr),e(vr,oHr),e(vr,Jt),M(P$,Jt,null),e(Jt,rHr),e(Jt,s5e),e(s5e,tHr),e(Jt,aHr),e(Jt,lf),e(lf,nHr),e(lf,l5e),e(l5e,sHr),e(lf,lHr),e(lf,uoe),e(uoe,iHr),e(lf,dHr),e(Jt,cHr),M(F5,Jt,null),e(vr,fHr),e(vr,Wr),M(B$,Wr,null),e(Wr,mHr),e(Wr,i5e),e(i5e,gHr),e(Wr,hHr),e(Wr,An),e(An,pHr),e(An,d5e),e(d5e,_Hr),e(An,uHr),e(An,c5e),e(c5e,bHr),e(An,vHr),e(An,f5e),e(f5e,FHr),e(An,THr),e(Wr,MHr),e(Wr,ke),e(ke,T5),e(T5,m5e),e(m5e,EHr),e(T5,CHr),e(T5,boe),e(boe,wHr),e(T5,AHr),e(ke,LHr),e(ke,M5),e(M5,g5e),e(g5e,yHr),e(M5,xHr),e(M5,voe),e(voe,$Hr),e(M5,kHr),e(ke,SHr),e(ke,E5),e(E5,h5e),e(h5e,RHr),e(E5,PHr),e(E5,Foe),e(Foe,BHr),e(E5,IHr),e(ke,NHr),e(ke,C5),e(C5,p5e),e(p5e,qHr),e(C5,jHr),e(C5,Toe),e(Toe,DHr),e(C5,GHr),e(ke,OHr),e(ke,w5),e(w5,_5e),e(_5e,VHr),e(w5,XHr),e(w5,Moe),e(Moe,zHr),e(w5,QHr),e(ke,WHr),e(ke,A5),e(A5,u5e),e(u5e,HHr),e(A5,UHr),e(A5,Eoe),e(Eoe,JHr),e(A5,YHr),e(ke,KHr),e(ke,L5),e(L5,b5e),e(b5e,ZHr),e(L5,eUr),e(L5,Coe),e(Coe,oUr),e(L5,rUr),e(ke,tUr),e(ke,y5),e(y5,v5e),e(v5e,aUr),e(y5,nUr),e(y5,woe),e(woe,sUr),e(y5,lUr),e(ke,iUr),e(ke,x5),e(x5,F5e),e(F5e,dUr),e(x5,cUr),e(x5,Aoe),e(Aoe,fUr),e(x5,mUr),e(ke,gUr),e(ke,$5),e($5,T5e),e(T5e,hUr),e($5,pUr),e($5,Loe),e(Loe,_Ur),e($5,uUr),e(Wr,bUr),M(k5,Wr,null),b(f,Zze,u),b(f,df,u),e(df,S5),e(S5,M5e),M(I$,M5e,null),e(df,vUr),e(df,E5e),e(E5e,FUr),b(f,eQe,u),b(f,Fr,u),M(N$,Fr,null),e(Fr,TUr),e(Fr,cf),e(cf,MUr),e(cf,yoe),e(yoe,EUr),e(cf,CUr),e(cf,xoe),e(xoe,wUr),e(cf,AUr),e(Fr,LUr),e(Fr,q$),e(q$,yUr),e(q$,C5e),e(C5e,xUr),e(q$,$Ur),e(Fr,kUr),e(Fr,Yt),M(j$,Yt,null),e(Yt,SUr),e(Yt,w5e),e(w5e,RUr),e(Yt,PUr),e(Yt,ff),e(ff,BUr),e(ff,A5e),e(A5e,IUr),e(ff,NUr),e(ff,$oe),e($oe,qUr),e(ff,jUr),e(Yt,DUr),M(R5,Yt,null),e(Fr,GUr),e(Fr,Hr),M(D$,Hr,null),e(Hr,OUr),e(Hr,L5e),e(L5e,VUr),e(Hr,XUr),e(Hr,Ln),e(Ln,zUr),e(Ln,y5e),e(y5e,QUr),e(Ln,WUr),e(Ln,x5e),e(x5e,HUr),e(Ln,UUr),e(Ln,$5e),e($5e,JUr),e(Ln,YUr),e(Hr,KUr),e(Hr,Se),e(Se,P5),e(P5,k5e),e(k5e,ZUr),e(P5,eJr),e(P5,koe),e(koe,oJr),e(P5,rJr),e(Se,tJr),e(Se,B5),e(B5,S5e),e(S5e,aJr),e(B5,nJr),e(B5,Soe),e(Soe,sJr),e(B5,lJr),e(Se,iJr),e(Se,I5),e(I5,R5e),e(R5e,dJr),e(I5,cJr),e(I5,Roe),e(Roe,fJr),e(I5,mJr),e(Se,gJr),e(Se,N5),e(N5,P5e),e(P5e,hJr),e(N5,pJr),e(N5,Poe),e(Poe,_Jr),e(N5,uJr),e(Se,bJr),e(Se,q5),e(q5,B5e),e(B5e,vJr),e(q5,FJr),e(q5,Boe),e(Boe,TJr),e(q5,MJr),e(Se,EJr),e(Se,j5),e(j5,I5e),e(I5e,CJr),e(j5,wJr),e(j5,Ioe),e(Ioe,AJr),e(j5,LJr),e(Se,yJr),e(Se,D5),e(D5,N5e),e(N5e,xJr),e(D5,$Jr),e(D5,Noe),e(Noe,kJr),e(D5,SJr),e(Se,RJr),e(Se,G5),e(G5,q5e),e(q5e,PJr),e(G5,BJr),e(G5,qoe),e(qoe,IJr),e(G5,NJr),e(Se,qJr),e(Se,O5),e(O5,j5e),e(j5e,jJr),e(O5,DJr),e(O5,joe),e(joe,GJr),e(O5,OJr),e(Se,VJr),e(Se,V5),e(V5,D5e),e(D5e,XJr),e(V5,zJr),e(V5,Doe),e(Doe,QJr),e(V5,WJr),e(Hr,HJr),M(X5,Hr,null),b(f,oQe,u),b(f,mf,u),e(mf,z5),e(z5,G5e),M(G$,G5e,null),e(mf,UJr),e(mf,O5e),e(O5e,JJr),b(f,rQe,u),b(f,Tr,u),M(O$,Tr,null),e(Tr,YJr),e(Tr,gf),e(gf,KJr),e(gf,Goe),e(Goe,ZJr),e(gf,eYr),e(gf,Ooe),e(Ooe,oYr),e(gf,rYr),e(Tr,tYr),e(Tr,V$),e(V$,aYr),e(V$,V5e),e(V5e,nYr),e(V$,sYr),e(Tr,lYr),e(Tr,Kt),M(X$,Kt,null),e(Kt,iYr),e(Kt,X5e),e(X5e,dYr),e(Kt,cYr),e(Kt,hf),e(hf,fYr),e(hf,z5e),e(z5e,mYr),e(hf,gYr),e(hf,Voe),e(Voe,hYr),e(hf,pYr),e(Kt,_Yr),M(Q5,Kt,null),e(Tr,uYr),e(Tr,Ur),M(z$,Ur,null),e(Ur,bYr),e(Ur,Q5e),e(Q5e,vYr),e(Ur,FYr),e(Ur,yn),e(yn,TYr),e(yn,W5e),e(W5e,MYr),e(yn,EYr),e(yn,H5e),e(H5e,CYr),e(yn,wYr),e(yn,U5e),e(U5e,AYr),e(yn,LYr),e(Ur,yYr),e(Ur,Re),e(Re,W5),e(W5,J5e),e(J5e,xYr),e(W5,$Yr),e(W5,Xoe),e(Xoe,kYr),e(W5,SYr),e(Re,RYr),e(Re,H5),e(H5,Y5e),e(Y5e,PYr),e(H5,BYr),e(H5,zoe),e(zoe,IYr),e(H5,NYr),e(Re,qYr),e(Re,U5),e(U5,K5e),e(K5e,jYr),e(U5,DYr),e(U5,Qoe),e(Qoe,GYr),e(U5,OYr),e(Re,VYr),e(Re,J5),e(J5,Z5e),e(Z5e,XYr),e(J5,zYr),e(J5,Woe),e(Woe,QYr),e(J5,WYr),e(Re,HYr),e(Re,Y5),e(Y5,e0e),e(e0e,UYr),e(Y5,JYr),e(Y5,Hoe),e(Hoe,YYr),e(Y5,KYr),e(Re,ZYr),e(Re,K5),e(K5,o0e),e(o0e,eKr),e(K5,oKr),e(K5,Uoe),e(Uoe,rKr),e(K5,tKr),e(Re,aKr),e(Re,Z5),e(Z5,r0e),e(r0e,nKr),e(Z5,sKr),e(Z5,Joe),e(Joe,lKr),e(Z5,iKr),e(Re,dKr),e(Re,e0),e(e0,t0e),e(t0e,cKr),e(e0,fKr),e(e0,Yoe),e(Yoe,mKr),e(e0,gKr),e(Re,hKr),e(Re,o0),e(o0,a0e),e(a0e,pKr),e(o0,_Kr),e(o0,Koe),e(Koe,uKr),e(o0,bKr),e(Re,vKr),e(Re,r0),e(r0,n0e),e(n0e,FKr),e(r0,TKr),e(r0,Zoe),e(Zoe,MKr),e(r0,EKr),e(Ur,CKr),M(t0,Ur,null),b(f,tQe,u),b(f,pf,u),e(pf,a0),e(a0,s0e),M(Q$,s0e,null),e(pf,wKr),e(pf,l0e),e(l0e,AKr),b(f,aQe,u),b(f,Mr,u),M(W$,Mr,null),e(Mr,LKr),e(Mr,_f),e(_f,yKr),e(_f,ere),e(ere,xKr),e(_f,$Kr),e(_f,ore),e(ore,kKr),e(_f,SKr),e(Mr,RKr),e(Mr,H$),e(H$,PKr),e(H$,i0e),e(i0e,BKr),e(H$,IKr),e(Mr,NKr),e(Mr,Zt),M(U$,Zt,null),e(Zt,qKr),e(Zt,d0e),e(d0e,jKr),e(Zt,DKr),e(Zt,uf),e(uf,GKr),e(uf,c0e),e(c0e,OKr),e(uf,VKr),e(uf,rre),e(rre,XKr),e(uf,zKr),e(Zt,QKr),M(n0,Zt,null),e(Mr,WKr),e(Mr,Jr),M(J$,Jr,null),e(Jr,HKr),e(Jr,f0e),e(f0e,UKr),e(Jr,JKr),e(Jr,xn),e(xn,YKr),e(xn,m0e),e(m0e,KKr),e(xn,ZKr),e(xn,g0e),e(g0e,eZr),e(xn,oZr),e(xn,h0e),e(h0e,rZr),e(xn,tZr),e(Jr,aZr),e(Jr,Ve),e(Ve,s0),e(s0,p0e),e(p0e,nZr),e(s0,sZr),e(s0,tre),e(tre,lZr),e(s0,iZr),e(Ve,dZr),e(Ve,l0),e(l0,_0e),e(_0e,cZr),e(l0,fZr),e(l0,are),e(are,mZr),e(l0,gZr),e(Ve,hZr),e(Ve,i0),e(i0,u0e),e(u0e,pZr),e(i0,_Zr),e(i0,nre),e(nre,uZr),e(i0,bZr),e(Ve,vZr),e(Ve,d0),e(d0,b0e),e(b0e,FZr),e(d0,TZr),e(d0,sre),e(sre,MZr),e(d0,EZr),e(Ve,CZr),e(Ve,c0),e(c0,v0e),e(v0e,wZr),e(c0,AZr),e(c0,lre),e(lre,LZr),e(c0,yZr),e(Ve,xZr),e(Ve,f0),e(f0,F0e),e(F0e,$Zr),e(f0,kZr),e(f0,ire),e(ire,SZr),e(f0,RZr),e(Ve,PZr),e(Ve,m0),e(m0,T0e),e(T0e,BZr),e(m0,IZr),e(m0,dre),e(dre,NZr),e(m0,qZr),e(Ve,jZr),e(Ve,g0),e(g0,M0e),e(M0e,DZr),e(g0,GZr),e(g0,cre),e(cre,OZr),e(g0,VZr),e(Jr,XZr),M(h0,Jr,null),b(f,nQe,u),b(f,bf,u),e(bf,p0),e(p0,E0e),M(Y$,E0e,null),e(bf,zZr),e(bf,C0e),e(C0e,QZr),b(f,sQe,u),b(f,Er,u),M(K$,Er,null),e(Er,WZr),e(Er,vf),e(vf,HZr),e(vf,fre),e(fre,UZr),e(vf,JZr),e(vf,mre),e(mre,YZr),e(vf,KZr),e(Er,ZZr),e(Er,Z$),e(Z$,eet),e(Z$,w0e),e(w0e,oet),e(Z$,ret),e(Er,tet),e(Er,ea),M(ek,ea,null),e(ea,aet),e(ea,A0e),e(A0e,net),e(ea,set),e(ea,Ff),e(Ff,iet),e(Ff,L0e),e(L0e,det),e(Ff,cet),e(Ff,gre),e(gre,fet),e(Ff,met),e(ea,get),M(_0,ea,null),e(Er,het),e(Er,Yr),M(ok,Yr,null),e(Yr,pet),e(Yr,y0e),e(y0e,_et),e(Yr,uet),e(Yr,$n),e($n,bet),e($n,x0e),e(x0e,vet),e($n,Fet),e($n,$0e),e($0e,Tet),e($n,Met),e($n,k0e),e(k0e,Eet),e($n,Cet),e(Yr,wet),e(Yr,Xe),e(Xe,u0),e(u0,S0e),e(S0e,Aet),e(u0,Let),e(u0,hre),e(hre,yet),e(u0,xet),e(Xe,$et),e(Xe,b0),e(b0,R0e),e(R0e,ket),e(b0,Set),e(b0,pre),e(pre,Ret),e(b0,Pet),e(Xe,Bet),e(Xe,v0),e(v0,P0e),e(P0e,Iet),e(v0,Net),e(v0,_re),e(_re,qet),e(v0,jet),e(Xe,Det),e(Xe,F0),e(F0,B0e),e(B0e,Get),e(F0,Oet),e(F0,ure),e(ure,Vet),e(F0,Xet),e(Xe,zet),e(Xe,T0),e(T0,I0e),e(I0e,Qet),e(T0,Wet),e(T0,bre),e(bre,Het),e(T0,Uet),e(Xe,Jet),e(Xe,M0),e(M0,N0e),e(N0e,Yet),e(M0,Ket),e(M0,vre),e(vre,Zet),e(M0,eot),e(Xe,oot),e(Xe,E0),e(E0,q0e),e(q0e,rot),e(E0,tot),e(E0,Fre),e(Fre,aot),e(E0,not),e(Xe,sot),e(Xe,C0),e(C0,j0e),e(j0e,lot),e(C0,iot),e(C0,Tre),e(Tre,dot),e(C0,cot),e(Yr,fot),M(w0,Yr,null),b(f,lQe,u),b(f,Tf,u),e(Tf,A0),e(A0,D0e),M(rk,D0e,null),e(Tf,mot),e(Tf,G0e),e(G0e,got),b(f,iQe,u),b(f,Cr,u),M(tk,Cr,null),e(Cr,hot),e(Cr,Mf),e(Mf,pot),e(Mf,Mre),e(Mre,_ot),e(Mf,uot),e(Mf,Ere),e(Ere,bot),e(Mf,vot),e(Cr,Fot),e(Cr,ak),e(ak,Tot),e(ak,O0e),e(O0e,Mot),e(ak,Eot),e(Cr,Cot),e(Cr,oa),M(nk,oa,null),e(oa,wot),e(oa,V0e),e(V0e,Aot),e(oa,Lot),e(oa,Ef),e(Ef,yot),e(Ef,X0e),e(X0e,xot),e(Ef,$ot),e(Ef,Cre),e(Cre,kot),e(Ef,Sot),e(oa,Rot),M(L0,oa,null),e(Cr,Pot),e(Cr,Kr),M(sk,Kr,null),e(Kr,Bot),e(Kr,z0e),e(z0e,Iot),e(Kr,Not),e(Kr,kn),e(kn,qot),e(kn,Q0e),e(Q0e,jot),e(kn,Dot),e(kn,W0e),e(W0e,Got),e(kn,Oot),e(kn,H0e),e(H0e,Vot),e(kn,Xot),e(Kr,zot),e(Kr,U0e),e(U0e,y0),e(y0,J0e),e(J0e,Qot),e(y0,Wot),e(y0,wre),e(wre,Hot),e(y0,Uot),e(Kr,Jot),M(x0,Kr,null),b(f,dQe,u),b(f,Cf,u),e(Cf,$0),e($0,Y0e),M(lk,Y0e,null),e(Cf,Yot),e(Cf,K0e),e(K0e,Kot),b(f,cQe,u),b(f,wr,u),M(ik,wr,null),e(wr,Zot),e(wr,wf),e(wf,ert),e(wf,Are),e(Are,ort),e(wf,rrt),e(wf,Lre),e(Lre,trt),e(wf,art),e(wr,nrt),e(wr,dk),e(dk,srt),e(dk,Z0e),e(Z0e,lrt),e(dk,irt),e(wr,drt),e(wr,ra),M(ck,ra,null),e(ra,crt),e(ra,ewe),e(ewe,frt),e(ra,mrt),e(ra,Af),e(Af,grt),e(Af,owe),e(owe,hrt),e(Af,prt),e(Af,yre),e(yre,_rt),e(Af,urt),e(ra,brt),M(k0,ra,null),e(wr,vrt),e(wr,Zr),M(fk,Zr,null),e(Zr,Frt),e(Zr,rwe),e(rwe,Trt),e(Zr,Mrt),e(Zr,Sn),e(Sn,Ert),e(Sn,twe),e(twe,Crt),e(Sn,wrt),e(Sn,awe),e(awe,Art),e(Sn,Lrt),e(Sn,nwe),e(nwe,yrt),e(Sn,xrt),e(Zr,$rt),e(Zr,mk),e(mk,S0),e(S0,swe),e(swe,krt),e(S0,Srt),e(S0,xre),e(xre,Rrt),e(S0,Prt),e(mk,Brt),e(mk,R0),e(R0,lwe),e(lwe,Irt),e(R0,Nrt),e(R0,$re),e($re,qrt),e(R0,jrt),e(Zr,Drt),M(P0,Zr,null),b(f,fQe,u),b(f,Lf,u),e(Lf,B0),e(B0,iwe),M(gk,iwe,null),e(Lf,Grt),e(Lf,dwe),e(dwe,Ort),b(f,mQe,u),b(f,Ar,u),M(hk,Ar,null),e(Ar,Vrt),e(Ar,yf),e(yf,Xrt),e(yf,kre),e(kre,zrt),e(yf,Qrt),e(yf,Sre),e(Sre,Wrt),e(yf,Hrt),e(Ar,Urt),e(Ar,pk),e(pk,Jrt),e(pk,cwe),e(cwe,Yrt),e(pk,Krt),e(Ar,Zrt),e(Ar,ta),M(_k,ta,null),e(ta,ett),e(ta,fwe),e(fwe,ott),e(ta,rtt),e(ta,xf),e(xf,ttt),e(xf,mwe),e(mwe,att),e(xf,ntt),e(xf,Rre),e(Rre,stt),e(xf,ltt),e(ta,itt),M(I0,ta,null),e(Ar,dtt),e(Ar,et),M(uk,et,null),e(et,ctt),e(et,gwe),e(gwe,ftt),e(et,mtt),e(et,Rn),e(Rn,gtt),e(Rn,hwe),e(hwe,htt),e(Rn,ptt),e(Rn,pwe),e(pwe,_tt),e(Rn,utt),e(Rn,_we),e(_we,btt),e(Rn,vtt),e(et,Ftt),e(et,uwe),e(uwe,N0),e(N0,bwe),e(bwe,Ttt),e(N0,Mtt),e(N0,Pre),e(Pre,Ett),e(N0,Ctt),e(et,wtt),M(q0,et,null),gQe=!0},p(f,[u]){const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),qf.$set(bk);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),Yg.$set(vwe);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),Rh.$set(Fwe);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),up.$set(Twe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),bp.$set(vk);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),jp.$set(Mwe);const Pn={};u&2&&(Pn.$$scope={dirty:u,ctx:f}),Dp.$set(Pn);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),Vp.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),Hu.$set(Cwe);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),Ju.$set(wwe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),V1.$set(Fk);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),z1.$set(Awe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),R2.$set(Tk);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),B2.$set(Lwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),T4.$set(Mk);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),E4.$set(ywe);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),V4.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),z4.$set($we);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Vb.$set($f);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),zb.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),Ev.$set(Swe);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),wv.$set(Rwe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),Rv.$set(Ek);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),Bv.$set(Pwe);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),vF.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),TF.$set(Iwe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),f6.$set(at);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),g6.$set(Ck);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),_6.$set(Nwe);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),b6.$set(wk);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),P6.$set(qwe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),I6.$set(nt);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),j6.$set(jwe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),G6.$set(kf);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),X6.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),Q6.$set(Gwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),tT.$set(L);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),nT.$set(j0);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),mT.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),hT.$set(Vwe);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),AT.$set(D0);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),yT.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),ST.$set(zwe);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),PT.$set(G0);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),GT.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),VT.$set(Wwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),UT.$set(O0);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),YT.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),o7.$set(Uwe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),t7.$set(V0);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),s7.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),i7.$set(Ywe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),p7.$set(X0);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),u7.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),F7.$set(Zwe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),M7.$set(z0);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),u9.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),v9.$set(oAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),V9.$set(Q0);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),z9.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),nM.$set(tAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),lM.$set(W0);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),hM.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),_M.$set(nAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),NM.$set(H0);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),jM.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),JM.$set(lAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),KM.$set(U0);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),wE.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),LE.$set(dAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),zE.$set(J0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),WE.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),JE.$set(fAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),KE.$set(Y0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),eC.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),rC.$set(gAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),EC.$set(K0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),wC.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),QC.$set(pAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),HC.$set(Z0);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),JC.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),KC.$set(uAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),e3.$set(ew);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),r3.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),$3.$set(vAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),S3.$set(ow);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),V3.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),z3.$set(TAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),n5.$set(rw);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),l5.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),b5.$set(EAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),F5.$set(tw);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),k5.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),R5.$set(wAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),X5.$set(aw);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),Q5.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),t0.$set(LAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),n0.$set(nw);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),h0.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),_0.$set(xAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),w0.$set(sw);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),L0.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),x0.$set(kAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),k0.$set(lw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),P0.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),I0.$set(RAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),q0.$set(iw)},i(f){gQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(qf.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(hL.$$.fragment,f),E(Yg.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(FL.$$.fragment,f),E(Rh.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(AL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(SL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(Vp.$$.fragment,f),E(qL.$$.fragment,f),E(Hu.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(Ju.$$.fragment,f),E(VL.$$.fragment,f),E(V1.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(z1.$$.fragment,f),E(HL.$$.fragment,f),E(R2.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(B2.$$.fragment,f),E(ZL.$$.fragment,f),E(T4.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(E4.$$.fragment,f),E(ay.$$.fragment,f),E(V4.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(z4.$$.fragment,f),E(dy.$$.fragment,f),E(Vb.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(zb.$$.fragment,f),E(hy.$$.fragment,f),E(Ev.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(wv.$$.fragment,f),E(vy.$$.fragment,f),E(Rv.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(Bv.$$.fragment,f),E(Cy.$$.fragment,f),E(vF.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(TF.$$.fragment,f),E(xy.$$.fragment,f),E(f6.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(g6.$$.fragment,f),E(Py.$$.fragment,f),E(_6.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(b6.$$.fragment,f),E(jy.$$.fragment,f),E(P6.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(I6.$$.fragment,f),E(Xy.$$.fragment,f),E(j6.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(G6.$$.fragment,f),E(Uy.$$.fragment,f),E(X6.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(Q6.$$.fragment,f),E(e8.$$.fragment,f),E(tT.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(nT.$$.fragment,f),E(n8.$$.fragment,f),E(mT.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(hT.$$.fragment,f),E(c8.$$.fragment,f),E(AT.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(yT.$$.fragment,f),E(p8.$$.fragment,f),E(ST.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(PT.$$.fragment,f),E(T8.$$.fragment,f),E(GT.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(VT.$$.fragment,f),E(A8.$$.fragment,f),E(UT.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(YT.$$.fragment,f),E(k8.$$.fragment,f),E(o7.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(t7.$$.fragment,f),E(N8.$$.fragment,f),E(s7.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(i7.$$.fragment,f),E(O8.$$.fragment,f),E(p7.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(u7.$$.fragment,f),E(W8.$$.fragment,f),E(F7.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(M7.$$.fragment,f),E(K8.$$.fragment,f),E(u9.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(v9.$$.fragment,f),E(tx.$$.fragment,f),E(V9.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(z9.$$.fragment,f),E(ix.$$.fragment,f),E(nM.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(lM.$$.fragment,f),E(gx.$$.fragment,f),E(hM.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(_M.$$.fragment,f),E(bx.$$.fragment,f),E(NM.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(jM.$$.fragment,f),E(Ex.$$.fragment,f),E(JM.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(KM.$$.fragment,f),E(yx.$$.fragment,f),E(wE.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(LE.$$.fragment,f),E(Rx.$$.fragment,f),E(zE.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(WE.$$.fragment,f),E(qx.$$.fragment,f),E(JE.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(KE.$$.fragment,f),E(Xx.$$.fragment,f),E(eC.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(rC.$$.fragment,f),E(Ux.$$.fragment,f),E(EC.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(wC.$$.fragment,f),E(e$.$$.fragment,f),E(QC.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(HC.$$.fragment,f),E(n$.$$.fragment,f),E(JC.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(KC.$$.fragment,f),E(c$.$$.fragment,f),E(e3.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(r3.$$.fragment,f),E(p$.$$.fragment,f),E($3.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(S3.$$.fragment,f),E(F$.$$.fragment,f),E(V3.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(z3.$$.fragment,f),E(w$.$$.fragment,f),E(n5.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(l5.$$.fragment,f),E($$.$$.fragment,f),E(b5.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(F5.$$.fragment,f),E(B$.$$.fragment,f),E(k5.$$.fragment,f),E(I$.$$.fragment,f),E(N$.$$.fragment,f),E(j$.$$.fragment,f),E(R5.$$.fragment,f),E(D$.$$.fragment,f),E(X5.$$.fragment,f),E(G$.$$.fragment,f),E(O$.$$.fragment,f),E(X$.$$.fragment,f),E(Q5.$$.fragment,f),E(z$.$$.fragment,f),E(t0.$$.fragment,f),E(Q$.$$.fragment,f),E(W$.$$.fragment,f),E(U$.$$.fragment,f),E(n0.$$.fragment,f),E(J$.$$.fragment,f),E(h0.$$.fragment,f),E(Y$.$$.fragment,f),E(K$.$$.fragment,f),E(ek.$$.fragment,f),E(_0.$$.fragment,f),E(ok.$$.fragment,f),E(w0.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(L0.$$.fragment,f),E(sk.$$.fragment,f),E(x0.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(k0.$$.fragment,f),E(fk.$$.fragment,f),E(P0.$$.fragment,f),E(gk.$$.fragment,f),E(hk.$$.fragment,f),E(_k.$$.fragment,f),E(I0.$$.fragment,f),E(uk.$$.fragment,f),E(q0.$$.fragment,f),gQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(qf.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(hL.$$.fragment,f),C(Yg.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(FL.$$.fragment,f),C(Rh.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(AL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(SL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(Vp.$$.fragment,f),C(qL.$$.fragment,f),C(Hu.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(Ju.$$.fragment,f),C(VL.$$.fragment,f),C(V1.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(z1.$$.fragment,f),C(HL.$$.fragment,f),C(R2.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(B2.$$.fragment,f),C(ZL.$$.fragment,f),C(T4.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(E4.$$.fragment,f),C(ay.$$.fragment,f),C(V4.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(z4.$$.fragment,f),C(dy.$$.fragment,f),C(Vb.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(zb.$$.fragment,f),C(hy.$$.fragment,f),C(Ev.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(wv.$$.fragment,f),C(vy.$$.fragment,f),C(Rv.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(Bv.$$.fragment,f),C(Cy.$$.fragment,f),C(vF.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(TF.$$.fragment,f),C(xy.$$.fragment,f),C(f6.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(g6.$$.fragment,f),C(Py.$$.fragment,f),C(_6.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(b6.$$.fragment,f),C(jy.$$.fragment,f),C(P6.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(I6.$$.fragment,f),C(Xy.$$.fragment,f),C(j6.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(G6.$$.fragment,f),C(Uy.$$.fragment,f),C(X6.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(Q6.$$.fragment,f),C(e8.$$.fragment,f),C(tT.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(nT.$$.fragment,f),C(n8.$$.fragment,f),C(mT.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(hT.$$.fragment,f),C(c8.$$.fragment,f),C(AT.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(yT.$$.fragment,f),C(p8.$$.fragment,f),C(ST.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(PT.$$.fragment,f),C(T8.$$.fragment,f),C(GT.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(VT.$$.fragment,f),C(A8.$$.fragment,f),C(UT.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(YT.$$.fragment,f),C(k8.$$.fragment,f),C(o7.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(t7.$$.fragment,f),C(N8.$$.fragment,f),C(s7.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(i7.$$.fragment,f),C(O8.$$.fragment,f),C(p7.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(u7.$$.fragment,f),C(W8.$$.fragment,f),C(F7.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(M7.$$.fragment,f),C(K8.$$.fragment,f),C(u9.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(v9.$$.fragment,f),C(tx.$$.fragment,f),C(V9.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(z9.$$.fragment,f),C(ix.$$.fragment,f),C(nM.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(lM.$$.fragment,f),C(gx.$$.fragment,f),C(hM.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(_M.$$.fragment,f),C(bx.$$.fragment,f),C(NM.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(jM.$$.fragment,f),C(Ex.$$.fragment,f),C(JM.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(KM.$$.fragment,f),C(yx.$$.fragment,f),C(wE.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(LE.$$.fragment,f),C(Rx.$$.fragment,f),C(zE.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(WE.$$.fragment,f),C(qx.$$.fragment,f),C(JE.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(KE.$$.fragment,f),C(Xx.$$.fragment,f),C(eC.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(rC.$$.fragment,f),C(Ux.$$.fragment,f),C(EC.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(wC.$$.fragment,f),C(e$.$$.fragment,f),C(QC.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(HC.$$.fragment,f),C(n$.$$.fragment,f),C(JC.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(KC.$$.fragment,f),C(c$.$$.fragment,f),C(e3.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(r3.$$.fragment,f),C(p$.$$.fragment,f),C($3.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(S3.$$.fragment,f),C(F$.$$.fragment,f),C(V3.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(z3.$$.fragment,f),C(w$.$$.fragment,f),C(n5.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(l5.$$.fragment,f),C($$.$$.fragment,f),C(b5.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(F5.$$.fragment,f),C(B$.$$.fragment,f),C(k5.$$.fragment,f),C(I$.$$.fragment,f),C(N$.$$.fragment,f),C(j$.$$.fragment,f),C(R5.$$.fragment,f),C(D$.$$.fragment,f),C(X5.$$.fragment,f),C(G$.$$.fragment,f),C(O$.$$.fragment,f),C(X$.$$.fragment,f),C(Q5.$$.fragment,f),C(z$.$$.fragment,f),C(t0.$$.fragment,f),C(Q$.$$.fragment,f),C(W$.$$.fragment,f),C(U$.$$.fragment,f),C(n0.$$.fragment,f),C(J$.$$.fragment,f),C(h0.$$.fragment,f),C(Y$.$$.fragment,f),C(K$.$$.fragment,f),C(ek.$$.fragment,f),C(_0.$$.fragment,f),C(ok.$$.fragment,f),C(w0.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(L0.$$.fragment,f),C(sk.$$.fragment,f),C(x0.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(k0.$$.fragment,f),C(fk.$$.fragment,f),C(P0.$$.fragment,f),C(gk.$$.fragment,f),C(hk.$$.fragment,f),C(_k.$$.fragment,f),C(I0.$$.fragment,f),C(uk.$$.fragment,f),C(q0.$$.fragment,f),gQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(iXe),f&&t(Pi),w(iL),f&&t(dXe),f&&t(jn),f&&t(cXe),w(dL,f),f&&t(fXe),f&&t(VS),f&&t(mXe),w(qf,f),f&&t(gXe),f&&t(Bi),w(cL),f&&t(hXe),f&&t(wo),w(fL),w(hL),w(Yg),w(pL),f&&t(pXe),f&&t(Ni),w(_L),f&&t(_Xe),f&&t(Ao),w(uL),w(FL),w(Rh),w(TL),f&&t(uXe),f&&t(qi),w(ML),f&&t(bXe),f&&t(Lo),w(EL),w(AL),w(up),w(bp),w(LL),f&&t(vXe),f&&t(ji),w(yL),f&&t(FXe),f&&t(yo),w(xL),w(SL),w(jp),w(Dp),w(RL),f&&t(TXe),f&&t(Gi),w(PL),f&&t(MXe),f&&t(xo),w(BL),w(NL),w(Vp),w(qL),w(Hu),f&&t(EXe),f&&t(Xi),w(jL),f&&t(CXe),f&&t($o),w(DL),w(OL),w(Ju),w(VL),w(V1),f&&t(wXe),f&&t(Wi),w(XL),f&&t(AXe),f&&t(ko),w(zL),w(WL),w(z1),w(HL),w(R2),f&&t(LXe),f&&t(Ji),w(UL),f&&t(yXe),f&&t(So),w(JL),w(KL),w(B2),w(ZL),w(T4),f&&t(xXe),f&&t(Zi),w(ey),f&&t($Xe),f&&t(Ro),w(oy),w(ty),w(E4),w(ay),w(V4),f&&t(kXe),f&&t(rd),w(ny),f&&t(SXe),f&&t(Po),w(sy),w(iy),w(z4),w(dy),w(Vb),f&&t(RXe),f&&t(nd),w(cy),f&&t(PXe),f&&t(Bo),w(fy),w(gy),w(zb),w(hy),w(Ev),f&&t(BXe),f&&t(id),w(py),f&&t(IXe),f&&t(Io),w(_y),w(by),w(wv),w(vy),w(Rv),f&&t(NXe),f&&t(fd),w(Fy),f&&t(qXe),f&&t(qo),w(Ty),w(Ey),w(Bv),w(Cy),w(vF),f&&t(jXe),f&&t(hd),w(wy),f&&t(DXe),f&&t(jo),w(Ay),w(yy),w(TF),w(xy),w(f6),f&&t(GXe),f&&t(ud),w($y),f&&t(OXe),f&&t(Do),w(ky),w(Ry),w(g6),w(Py),w(_6),f&&t(VXe),f&&t(Fd),w(By),f&&t(XXe),f&&t(Go),w(Iy),w(qy),w(b6),w(jy),w(P6),f&&t(zXe),f&&t(Ed),w(Dy),f&&t(QXe),f&&t(Oo),w(Gy),w(Vy),w(I6),w(Xy),w(j6),f&&t(WXe),f&&t(Ad),w(zy),f&&t(HXe),f&&t(Vo),w(Qy),w(Hy),w(G6),w(Uy),w(X6),f&&t(UXe),f&&t(xd),w(Jy),f&&t(JXe),f&&t(Xo),w(Yy),w(Zy),w(Q6),w(e8),w(tT),f&&t(YXe),f&&t(Sd),w(o8),f&&t(KXe),f&&t(zo),w(r8),w(a8),w(nT),w(n8),w(mT),f&&t(ZXe),f&&t(Bd),w(s8),f&&t(eze),f&&t(Qo),w(l8),w(d8),w(hT),w(c8),w(AT),f&&t(oze),f&&t(qd),w(f8),f&&t(rze),f&&t(Wo),w(m8),w(h8),w(yT),w(p8),w(ST),f&&t(tze),f&&t(Gd),w(u8),f&&t(aze),f&&t(Ho),w(b8),w(F8),w(PT),w(T8),w(GT),f&&t(nze),f&&t(Xd),w(M8),f&&t(sze),f&&t(Uo),w(E8),w(w8),w(VT),w(A8),w(UT),f&&t(lze),f&&t(Wd),w(L8),f&&t(ize),f&&t(Jo),w(y8),w($8),w(YT),w(k8),w(o7),f&&t(dze),f&&t(Jd),w(R8),f&&t(cze),f&&t(Yo),w(P8),w(I8),w(t7),w(N8),w(s7),f&&t(fze),f&&t(Zd),w(q8),f&&t(mze),f&&t(Ko),w(j8),w(G8),w(i7),w(O8),w(p7),f&&t(gze),f&&t(rc),w(V8),f&&t(hze),f&&t(Zo),w(X8),w(Q8),w(u7),w(W8),w(F7),f&&t(pze),f&&t(nc),w(H8),f&&t(_ze),f&&t(er),w(U8),w(Y8),w(M7),w(K8),w(u9),f&&t(uze),f&&t(ic),w(Z8),f&&t(bze),f&&t(or),w(ex),w(rx),w(v9),w(tx),w(V9),f&&t(vze),f&&t(fc),w(ax),f&&t(Fze),f&&t(rr),w(nx),w(lx),w(z9),w(ix),w(nM),f&&t(Tze),f&&t(hc),w(dx),f&&t(Mze),f&&t(tr),w(cx),w(mx),w(lM),w(gx),w(hM),f&&t(Eze),f&&t(uc),w(hx),f&&t(Cze),f&&t(nr),w(px),w(ux),w(_M),w(bx),w(NM),f&&t(wze),f&&t(Fc),w(vx),f&&t(Aze),f&&t(sr),w(Fx),w(Mx),w(jM),w(Ex),w(JM),f&&t(Lze),f&&t(Ec),w(Cx),f&&t(yze),f&&t(lr),w(wx),w(Lx),w(KM),w(yx),w(wE),f&&t(xze),f&&t(Ac),w(xx),f&&t($ze),f&&t(ir),w($x),w(Sx),w(LE),w(Rx),w(zE),f&&t(kze),f&&t(xc),w(Px),f&&t(Sze),f&&t(dr),w(Bx),w(Nx),w(WE),w(qx),w(JE),f&&t(Rze),f&&t(Sc),w(Dx),f&&t(Pze),f&&t(cr),w(Gx),w(Vx),w(KE),w(Xx),w(eC),f&&t(Bze),f&&t(Bc),w(zx),f&&t(Ize),f&&t(fr),w(Qx),w(Hx),w(rC),w(Ux),w(EC),f&&t(Nze),f&&t(qc),w(Jx),f&&t(qze),f&&t(mr),w(Yx),w(Zx),w(wC),w(e$),w(QC),f&&t(jze),f&&t(Gc),w(o$),f&&t(Dze),f&&t(gr),w(r$),w(a$),w(HC),w(n$),w(JC),f&&t(Gze),f&&t(Xc),w(s$),f&&t(Oze),f&&t(hr),w(l$),w(d$),w(KC),w(c$),w(e3),f&&t(Vze),f&&t(Wc),w(f$),f&&t(Xze),f&&t(pr),w(m$),w(h$),w(r3),w(p$),w($3),f&&t(zze),f&&t(Jc),w(_$),f&&t(Qze),f&&t(_r),w(u$),w(v$),w(S3),w(F$),w(V3),f&&t(Wze),f&&t(Zc),w(T$),f&&t(Hze),f&&t(ur),w(M$),w(C$),w(z3),w(w$),w(n5),f&&t(Uze),f&&t(rf),w(A$),f&&t(Jze),f&&t(br),w(L$),w(x$),w(l5),w($$),w(b5),f&&t(Yze),f&&t(nf),w(k$),f&&t(Kze),f&&t(vr),w(S$),w(P$),w(F5),w(B$),w(k5),f&&t(Zze),f&&t(df),w(I$),f&&t(eQe),f&&t(Fr),w(N$),w(j$),w(R5),w(D$),w(X5),f&&t(oQe),f&&t(mf),w(G$),f&&t(rQe),f&&t(Tr),w(O$),w(X$),w(Q5),w(z$),w(t0),f&&t(tQe),f&&t(pf),w(Q$),f&&t(aQe),f&&t(Mr),w(W$),w(U$),w(n0),w(J$),w(h0),f&&t(nQe),f&&t(bf),w(Y$),f&&t(sQe),f&&t(Er),w(K$),w(ek),w(_0),w(ok),w(w0),f&&t(lQe),f&&t(Tf),w(rk),f&&t(iQe),f&&t(Cr),w(tk),w(nk),w(L0),w(sk),w(x0),f&&t(dQe),f&&t(Cf),w(lk),f&&t(cQe),f&&t(wr),w(ik),w(ck),w(k0),w(fk),w(P0),f&&t(fQe),f&&t(Lf),w(gk),f&&t(mQe),f&&t(Ar),w(hk),w(_k),w(I0),w(uk),w(q0)}}}const cUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fUt($){return dWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bUt extends nWt{constructor(g){super();sWt(this,g,fUt,dUt,lWt,{})}}export{bUt as default,cUt as metadata};
