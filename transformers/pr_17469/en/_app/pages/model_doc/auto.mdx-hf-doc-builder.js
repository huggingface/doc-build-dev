import{S as wHt,i as AHt,s as LHt,e as a,k as l,w as F,t as o,M as yHt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as xHt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Sat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function $Ht($){let g,v,p,m,_,d,h,Co,xi,Bf,lt,$i,ki,cL,If,Oe,We,Si,Bn,fL,In,Nn,mL,Ri,qn,gL,Pi,Nf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),xi=a("code"),Bf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),$i=a("code"),ki=o('"new-model"'),cL=o(")."),If=l(),Oe=a("p"),We=o("Likewise, if your "),Si=a("code"),Bn=o("NewModel"),fL=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),mL=o(`, make sure its
`),Ri=a("code"),qn=o("config_class"),gL=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),Nf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var QS=s(p);m=r(QS,"NewModelConfig"),QS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Bi=s(d);h=r(Bi,"PretrainedConfig"),Bi.forEach(t),Co=r(Ae,`, make sure its
`),xi=n(Ae,"CODE",{});var WS=s(xi);Bf=r(WS,"model_type"),WS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),$i=n(Ae,"CODE",{});var HS=s($i);ki=r(HS,'"new-model"'),HS.forEach(t),cL=r(Ae,")."),Ae.forEach(t),If=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),Si=n(wo,"CODE",{});var Ra=s(Si);Bn=r(Ra,"NewModel"),Ra.forEach(t),fL=r(wo," is a subclass of "),In=n(wo,"A",{href:!0});var US=s(In);Nn=r(US,"PreTrainedModel"),US.forEach(t),mL=r(wo,`, make sure its
`),Ri=n(wo,"CODE",{});var qf=s(Ri);qn=r(qf,"config_class"),qf.forEach(t),gL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Pi=n(wo,"CODE",{});var JS=s(Pi);Nf=r(JS,"NewModelConfig"),JS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(In,"href","/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,xi),e(xi,Bf),e(g,lt),e(g,$i),e($i,ki),e(g,cL),b(He,If,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,Si),e(Si,Bn),e(Oe,fL),e(Oe,In),e(In,Nn),e(Oe,mL),e(Oe,Ri),e(Ri,qn),e(Oe,gL),e(Oe,Pi),e(Pi,Nf),e(Oe,Sa)},d(He){He&&t(g),He&&t(If),He&&t(Oe)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xJt($){let g,v,p,m,_,d,h,Co,xi,Bf,lt,$i,ki,cL,If,Oe,We,Si,Bn,fL,In,Nn,mL,Ri,qn,gL,Pi,Nf,Sa,He,Ae,QS,Bi,WS,HS,wo,Ra,US,qf,JS,UHe,PXe,Ii,jf,zae,hL,JHe,Qae,YHe,BXe,jn,KHe,Wae,ZHe,eUe,Hae,oUe,rUe,IXe,pL,NXe,YS,tUe,qXe,Df,jXe,Ni,Gf,Uae,_L,aUe,Jae,nUe,DXe,Ao,uL,sUe,bL,lUe,KS,iUe,dUe,cUe,vL,fUe,Yae,mUe,gUe,hUe,Lr,FL,pUe,Kae,_Ue,uUe,qi,bUe,Zae,vUe,FUe,ene,TUe,MUe,EUe,A,Of,one,CUe,wUe,ZS,AUe,LUe,yUe,Vf,rne,xUe,$Ue,eR,kUe,SUe,RUe,Xf,tne,PUe,BUe,oR,IUe,NUe,qUe,zf,ane,jUe,DUe,rR,GUe,OUe,VUe,Qf,nne,XUe,zUe,tR,QUe,WUe,HUe,Wf,sne,UUe,JUe,aR,YUe,KUe,ZUe,Hf,lne,eJe,oJe,nR,rJe,tJe,aJe,Uf,ine,nJe,sJe,sR,lJe,iJe,dJe,Jf,dne,cJe,fJe,lR,mJe,gJe,hJe,Yf,cne,pJe,_Je,iR,uJe,bJe,vJe,Kf,fne,FJe,TJe,dR,MJe,EJe,CJe,Zf,mne,wJe,AJe,cR,LJe,yJe,xJe,em,gne,$Je,kJe,fR,SJe,RJe,PJe,om,hne,BJe,IJe,mR,NJe,qJe,jJe,rm,pne,DJe,GJe,gR,OJe,VJe,XJe,tm,_ne,zJe,QJe,hR,WJe,HJe,UJe,am,une,JJe,YJe,pR,KJe,ZJe,eYe,nm,bne,oYe,rYe,_R,tYe,aYe,nYe,sm,vne,sYe,lYe,uR,iYe,dYe,cYe,lm,Fne,fYe,mYe,bR,gYe,hYe,pYe,im,Tne,_Ye,uYe,vR,bYe,vYe,FYe,dm,Mne,TYe,MYe,FR,EYe,CYe,wYe,cm,Ene,AYe,LYe,TR,yYe,xYe,$Ye,fm,Cne,kYe,SYe,MR,RYe,PYe,BYe,mm,wne,IYe,NYe,ER,qYe,jYe,DYe,gm,Ane,GYe,OYe,CR,VYe,XYe,zYe,hm,Lne,QYe,WYe,wR,HYe,UYe,JYe,pm,yne,YYe,KYe,AR,ZYe,eKe,oKe,_m,xne,rKe,tKe,LR,aKe,nKe,sKe,um,$ne,lKe,iKe,yR,dKe,cKe,fKe,bm,kne,mKe,gKe,xR,hKe,pKe,_Ke,vm,Sne,uKe,bKe,$R,vKe,FKe,TKe,Fm,Rne,MKe,EKe,kR,CKe,wKe,AKe,Tm,Pne,LKe,yKe,SR,xKe,$Ke,kKe,Mm,Bne,SKe,RKe,RR,PKe,BKe,IKe,Em,Ine,NKe,qKe,PR,jKe,DKe,GKe,Cm,Nne,OKe,VKe,BR,XKe,zKe,QKe,wm,qne,WKe,HKe,IR,UKe,JKe,YKe,Am,jne,KKe,ZKe,NR,eZe,oZe,rZe,Lm,Dne,tZe,aZe,qR,nZe,sZe,lZe,ym,Gne,iZe,dZe,jR,cZe,fZe,mZe,xm,One,gZe,hZe,DR,pZe,_Ze,uZe,$m,Vne,bZe,vZe,GR,FZe,TZe,MZe,km,Xne,EZe,CZe,OR,wZe,AZe,LZe,Sm,zne,yZe,xZe,VR,$Ze,kZe,SZe,Rm,Qne,RZe,PZe,XR,BZe,IZe,NZe,Pm,Wne,qZe,jZe,zR,DZe,GZe,OZe,Bm,Hne,VZe,XZe,QR,zZe,QZe,WZe,Im,Une,HZe,UZe,WR,JZe,YZe,KZe,Nm,Jne,ZZe,eeo,HR,oeo,reo,teo,qm,Yne,aeo,neo,UR,seo,leo,ieo,jm,Kne,deo,ceo,JR,feo,meo,geo,Dm,Zne,heo,peo,YR,_eo,ueo,beo,Gm,ese,veo,Feo,KR,Teo,Meo,Eeo,Om,ose,Ceo,weo,ZR,Aeo,Leo,yeo,Vm,rse,xeo,$eo,eP,keo,Seo,Reo,Xm,tse,Peo,Beo,oP,Ieo,Neo,qeo,zm,ase,jeo,Deo,rP,Geo,Oeo,Veo,Qm,nse,Xeo,zeo,tP,Qeo,Weo,Heo,Wm,sse,Ueo,Jeo,aP,Yeo,Keo,Zeo,Hm,lse,eoo,ooo,nP,roo,too,aoo,Um,ise,noo,soo,sP,loo,ioo,doo,Jm,dse,coo,foo,lP,moo,goo,hoo,Ym,cse,poo,_oo,iP,uoo,boo,voo,Km,fse,Foo,Too,dP,Moo,Eoo,Coo,Zm,mse,woo,Aoo,cP,Loo,yoo,xoo,eg,gse,$oo,koo,fP,Soo,Roo,Poo,og,hse,Boo,Ioo,mP,Noo,qoo,joo,rg,pse,Doo,Goo,gP,Ooo,Voo,Xoo,tg,_se,zoo,Qoo,hP,Woo,Hoo,Uoo,ag,use,Joo,Yoo,pP,Koo,Zoo,ero,ng,bse,oro,rro,_P,tro,aro,nro,sg,vse,sro,lro,uP,iro,dro,cro,lg,Fse,fro,mro,bP,gro,hro,pro,ig,Tse,_ro,uro,vP,bro,vro,Fro,dg,Mse,Tro,Mro,FP,Ero,Cro,wro,cg,Ese,Aro,Lro,TP,yro,xro,$ro,fg,Cse,kro,Sro,MP,Rro,Pro,Bro,mg,wse,Iro,Nro,EP,qro,jro,Dro,gg,Ase,Gro,Oro,CP,Vro,Xro,zro,hg,Lse,Qro,Wro,wP,Hro,Uro,Jro,pg,yse,Yro,Kro,AP,Zro,eto,oto,_g,xse,rto,tto,LP,ato,nto,sto,ug,$se,lto,ito,yP,dto,cto,fto,bg,kse,mto,gto,xP,hto,pto,_to,vg,Sse,uto,bto,$P,vto,Fto,Tto,Fg,Rse,Mto,Eto,kP,Cto,wto,Ato,Tg,Pse,Lto,yto,SP,xto,$to,kto,Mg,Bse,Sto,Rto,RP,Pto,Bto,Ito,Eg,Ise,Nto,qto,PP,jto,Dto,Gto,Cg,Nse,Oto,Vto,BP,Xto,zto,Qto,wg,qse,Wto,Hto,IP,Uto,Jto,Yto,Ag,jse,Kto,Zto,NP,eao,oao,rao,Lg,Dse,tao,aao,qP,nao,sao,lao,yg,Gse,iao,dao,jP,cao,fao,mao,xg,Ose,gao,hao,DP,pao,_ao,uao,$g,Vse,bao,vao,GP,Fao,Tao,Mao,kg,Xse,Eao,Cao,OP,wao,Aao,Lao,Sg,zse,yao,xao,VP,$ao,kao,Sao,Rg,Qse,Rao,Pao,XP,Bao,Iao,Nao,Pg,Wse,qao,jao,zP,Dao,Gao,Oao,Bg,Hse,Vao,Xao,QP,zao,Qao,Wao,Ig,Use,Hao,Uao,WP,Jao,Yao,Kao,Ng,Jse,Zao,eno,HP,ono,rno,tno,qg,Yse,ano,nno,UP,sno,lno,ino,jg,Kse,dno,cno,JP,fno,mno,gno,Dg,Zse,hno,pno,YP,_no,uno,bno,Gg,ele,vno,Fno,KP,Tno,Mno,Eno,Og,ole,Cno,wno,ZP,Ano,Lno,yno,Vg,rle,xno,$no,eB,kno,Sno,Rno,Xg,tle,Pno,Bno,oB,Ino,Nno,qno,zg,ale,jno,Dno,rB,Gno,Ono,Vno,Qg,nle,Xno,zno,tB,Qno,Wno,Hno,Wg,sle,Uno,Jno,aB,Yno,Kno,Zno,Hg,lle,eso,oso,nB,rso,tso,aso,Ug,ile,nso,sso,sB,lso,iso,dso,Jg,dle,cso,fso,lB,mso,gso,hso,Yg,cle,pso,_so,iB,uso,bso,vso,Kg,fle,Fso,Tso,dB,Mso,Eso,Cso,Zg,wso,eh,TL,Aso,mle,Lso,GXe,ji,oh,gle,ML,yso,hle,xso,OXe,Lo,EL,$so,CL,kso,cB,Sso,Rso,Pso,wL,Bso,ple,Iso,Nso,qso,yr,AL,jso,_le,Dso,Gso,Pa,Oso,ule,Vso,Xso,ble,zso,Qso,vle,Wso,Hso,Uso,k,Dn,Fle,Jso,Yso,fB,Kso,Zso,mB,elo,olo,rlo,Gn,Tle,tlo,alo,gB,nlo,slo,hB,llo,ilo,dlo,On,Mle,clo,flo,pB,mlo,glo,_B,hlo,plo,_lo,rh,Ele,ulo,blo,uB,vlo,Flo,Tlo,Vn,Cle,Mlo,Elo,bB,Clo,wlo,vB,Alo,Llo,ylo,th,wle,xlo,$lo,FB,klo,Slo,Rlo,ah,Ale,Plo,Blo,TB,Ilo,Nlo,qlo,nh,Lle,jlo,Dlo,MB,Glo,Olo,Vlo,Xn,yle,Xlo,zlo,EB,Qlo,Wlo,CB,Hlo,Ulo,Jlo,zn,xle,Ylo,Klo,wB,Zlo,eio,AB,oio,rio,tio,Qn,$le,aio,nio,LB,sio,lio,yB,iio,dio,cio,sh,kle,fio,mio,xB,gio,hio,pio,lh,Sle,_io,uio,$B,bio,vio,Fio,ih,Rle,Tio,Mio,kB,Eio,Cio,wio,Wn,Ple,Aio,Lio,SB,yio,xio,RB,$io,kio,Sio,dh,Ble,Rio,Pio,PB,Bio,Iio,Nio,Hn,Ile,qio,jio,BB,Dio,Gio,IB,Oio,Vio,Xio,Un,Nle,zio,Qio,NB,Wio,Hio,qB,Uio,Jio,Yio,Jn,qle,Kio,Zio,jB,edo,odo,DB,rdo,tdo,ado,Yn,jle,ndo,sdo,GB,ldo,ido,OB,ddo,cdo,fdo,ch,Dle,mdo,gdo,VB,hdo,pdo,_do,Kn,Gle,udo,bdo,XB,vdo,Fdo,zB,Tdo,Mdo,Edo,Zn,Ole,Cdo,wdo,QB,Ado,Ldo,WB,ydo,xdo,$do,es,Vle,kdo,Sdo,HB,Rdo,Pdo,UB,Bdo,Ido,Ndo,os,Xle,qdo,jdo,JB,Ddo,Gdo,YB,Odo,Vdo,Xdo,rs,zle,zdo,Qdo,KB,Wdo,Hdo,ZB,Udo,Jdo,Ydo,ts,Qle,Kdo,Zdo,eI,eco,oco,oI,rco,tco,aco,fh,Wle,nco,sco,rI,lco,ico,dco,as,Hle,cco,fco,tI,mco,gco,aI,hco,pco,_co,mh,Ule,uco,bco,nI,vco,Fco,Tco,ns,Jle,Mco,Eco,sI,Cco,wco,lI,Aco,Lco,yco,ss,Yle,xco,$co,iI,kco,Sco,dI,Rco,Pco,Bco,ls,Kle,Ico,Nco,cI,qco,jco,fI,Dco,Gco,Oco,gh,Zle,Vco,Xco,mI,zco,Qco,Wco,is,eie,Hco,Uco,gI,Jco,Yco,hI,Kco,Zco,efo,ds,oie,ofo,rfo,pI,tfo,afo,_I,nfo,sfo,lfo,cs,rie,ifo,dfo,uI,cfo,ffo,bI,mfo,gfo,hfo,hh,tie,pfo,_fo,vI,ufo,bfo,vfo,fs,aie,Ffo,Tfo,FI,Mfo,Efo,TI,Cfo,wfo,Afo,ms,nie,Lfo,yfo,MI,xfo,$fo,EI,kfo,Sfo,Rfo,gs,sie,Pfo,Bfo,CI,Ifo,Nfo,wI,qfo,jfo,Dfo,hs,lie,Gfo,Ofo,AI,Vfo,Xfo,LI,zfo,Qfo,Wfo,ps,iie,Hfo,Ufo,yI,Jfo,Yfo,xI,Kfo,Zfo,emo,_s,die,omo,rmo,$I,tmo,amo,kI,nmo,smo,lmo,us,cie,imo,dmo,SI,cmo,fmo,RI,mmo,gmo,hmo,bs,fie,pmo,_mo,PI,umo,bmo,BI,vmo,Fmo,Tmo,ph,mie,Mmo,Emo,II,Cmo,wmo,Amo,vs,gie,Lmo,ymo,NI,xmo,$mo,qI,kmo,Smo,Rmo,_h,hie,Pmo,Bmo,jI,Imo,Nmo,qmo,uh,pie,jmo,Dmo,DI,Gmo,Omo,Vmo,Fs,_ie,Xmo,zmo,GI,Qmo,Wmo,OI,Hmo,Umo,Jmo,Ts,uie,Ymo,Kmo,VI,Zmo,ego,XI,ogo,rgo,tgo,Ms,bie,ago,ngo,zI,sgo,lgo,QI,igo,dgo,cgo,bh,vie,fgo,mgo,WI,ggo,hgo,pgo,Es,Fie,_go,ugo,HI,bgo,vgo,UI,Fgo,Tgo,Mgo,Cs,Tie,Ego,Cgo,JI,wgo,Ago,YI,Lgo,ygo,xgo,ws,Mie,$go,kgo,KI,Sgo,Rgo,ZI,Pgo,Bgo,Igo,As,Eie,Ngo,qgo,eN,jgo,Dgo,oN,Ggo,Ogo,Vgo,Ls,Cie,Xgo,zgo,rN,Qgo,Wgo,tN,Hgo,Ugo,Jgo,ys,wie,Ygo,Kgo,aN,Zgo,eho,nN,oho,rho,tho,xs,Aie,aho,nho,sN,sho,lho,lN,iho,dho,cho,$s,Lie,fho,mho,iN,gho,hho,dN,pho,_ho,uho,vh,yie,bho,vho,cN,Fho,Tho,Mho,ks,xie,Eho,Cho,fN,who,Aho,mN,Lho,yho,xho,Fh,$ie,$ho,kho,gN,Sho,Rho,Pho,Th,kie,Bho,Iho,hN,Nho,qho,jho,Mh,Sie,Dho,Gho,pN,Oho,Vho,Xho,Eh,Rie,zho,Qho,_N,Who,Hho,Uho,Ss,Pie,Jho,Yho,uN,Kho,Zho,bN,epo,opo,rpo,Ch,Bie,tpo,apo,vN,npo,spo,lpo,Rs,Iie,ipo,dpo,FN,cpo,fpo,TN,mpo,gpo,hpo,Ps,Nie,ppo,_po,MN,upo,bpo,EN,vpo,Fpo,Tpo,Bs,qie,Mpo,Epo,CN,Cpo,wpo,wN,Apo,Lpo,ypo,Is,jie,xpo,$po,AN,kpo,Spo,LN,Rpo,Ppo,Bpo,Ns,Die,Ipo,Npo,yN,qpo,jpo,xN,Dpo,Gpo,Opo,qs,Gie,Vpo,Xpo,$N,zpo,Qpo,kN,Wpo,Hpo,Upo,wh,Oie,Jpo,Ypo,SN,Kpo,Zpo,e_o,Ah,Vie,o_o,r_o,RN,t_o,a_o,n_o,js,Xie,s_o,l_o,PN,i_o,d_o,BN,c_o,f_o,m_o,Ds,zie,g_o,h_o,IN,p_o,__o,NN,u_o,b_o,v_o,Gs,Qie,F_o,T_o,qN,M_o,E_o,jN,C_o,w_o,A_o,Lh,Wie,L_o,y_o,DN,x_o,$_o,k_o,yh,Hie,S_o,R_o,GN,P_o,B_o,I_o,xh,Uie,N_o,q_o,ON,j_o,D_o,G_o,Os,Jie,O_o,V_o,VN,X_o,z_o,XN,Q_o,W_o,H_o,Vs,Yie,U_o,J_o,zN,Y_o,K_o,QN,Z_o,euo,ouo,$h,Kie,ruo,tuo,WN,auo,nuo,suo,kh,Zie,luo,iuo,HN,duo,cuo,fuo,Sh,ede,muo,guo,UN,huo,puo,_uo,Xs,ode,uuo,buo,JN,vuo,Fuo,YN,Tuo,Muo,Euo,Rh,rde,Cuo,wuo,KN,Auo,Luo,yuo,Ph,tde,xuo,$uo,ZN,kuo,Suo,Ruo,zs,ade,Puo,Buo,eq,Iuo,Nuo,oq,quo,juo,Duo,Qs,nde,Guo,Ouo,rq,Vuo,Xuo,tq,zuo,Quo,Wuo,Ws,sde,Huo,Uuo,aq,Juo,Yuo,nq,Kuo,Zuo,e1o,Hs,lde,o1o,r1o,sq,t1o,a1o,lq,n1o,s1o,l1o,Bh,i1o,Ih,LL,d1o,ide,c1o,VXe,Di,Nh,dde,yL,f1o,cde,m1o,XXe,yo,xL,g1o,$L,h1o,iq,p1o,_1o,u1o,kL,b1o,fde,v1o,F1o,T1o,Ue,SL,M1o,mde,E1o,C1o,Ba,w1o,gde,A1o,L1o,hde,y1o,x1o,pde,$1o,k1o,S1o,J,qh,_de,R1o,P1o,dq,B1o,I1o,N1o,jh,ude,q1o,j1o,cq,D1o,G1o,O1o,Dh,bde,V1o,X1o,fq,z1o,Q1o,W1o,Gh,vde,H1o,U1o,mq,J1o,Y1o,K1o,Oh,Fde,Z1o,e4o,gq,o4o,r4o,t4o,Vh,Tde,a4o,n4o,hq,s4o,l4o,i4o,Xh,Mde,d4o,c4o,pq,f4o,m4o,g4o,zh,Ede,h4o,p4o,_q,_4o,u4o,b4o,Qh,Cde,v4o,F4o,uq,T4o,M4o,E4o,Wh,wde,C4o,w4o,bq,A4o,L4o,y4o,Hh,Ade,x4o,$4o,vq,k4o,S4o,R4o,Uh,Lde,P4o,B4o,Fq,I4o,N4o,q4o,Jh,yde,j4o,D4o,Tq,G4o,O4o,V4o,Yh,xde,X4o,z4o,Mq,Q4o,W4o,H4o,Kh,$de,U4o,J4o,Eq,Y4o,K4o,Z4o,Zh,kde,e2o,o2o,Cq,r2o,t2o,a2o,ep,Sde,n2o,s2o,wq,l2o,i2o,d2o,op,Rde,c2o,f2o,Aq,m2o,g2o,h2o,rp,Pde,p2o,_2o,Lq,u2o,b2o,v2o,tp,Bde,F2o,T2o,yq,M2o,E2o,C2o,ap,Ide,w2o,A2o,xq,L2o,y2o,x2o,np,Nde,$2o,k2o,$q,S2o,R2o,P2o,sp,qde,B2o,I2o,kq,N2o,q2o,j2o,lp,jde,D2o,G2o,Sq,O2o,V2o,X2o,ip,Dde,z2o,Q2o,Rq,W2o,H2o,U2o,dp,Gde,J2o,Y2o,Pq,K2o,Z2o,ebo,cp,Ode,obo,rbo,Bq,tbo,abo,nbo,fp,Vde,sbo,lbo,Iq,ibo,dbo,cbo,mp,Xde,fbo,mbo,Nq,gbo,hbo,pbo,gp,zde,_bo,ubo,qq,bbo,vbo,Fbo,hp,Qde,Tbo,Mbo,jq,Ebo,Cbo,wbo,pp,Wde,Abo,Lbo,Dq,ybo,xbo,$bo,_p,Hde,kbo,Sbo,Gq,Rbo,Pbo,Bbo,up,Ude,Ibo,Nbo,Oq,qbo,jbo,Dbo,bp,Jde,Gbo,Obo,Vq,Vbo,Xbo,zbo,vp,Qbo,Fp,Wbo,Tp,RL,Hbo,Yde,Ubo,zXe,Gi,Mp,Kde,PL,Jbo,Zde,Ybo,QXe,xo,BL,Kbo,IL,Zbo,Xq,evo,ovo,rvo,NL,tvo,ece,avo,nvo,svo,Je,qL,lvo,oce,ivo,dvo,Oi,cvo,rce,fvo,mvo,tce,gvo,hvo,pvo,pe,Ep,ace,_vo,uvo,zq,bvo,vvo,Fvo,Cp,nce,Tvo,Mvo,Qq,Evo,Cvo,wvo,wp,sce,Avo,Lvo,Wq,yvo,xvo,$vo,Ap,lce,kvo,Svo,Hq,Rvo,Pvo,Bvo,Lp,ice,Ivo,Nvo,Uq,qvo,jvo,Dvo,yp,dce,Gvo,Ovo,Jq,Vvo,Xvo,zvo,xp,cce,Qvo,Wvo,Yq,Hvo,Uvo,Jvo,$p,fce,Yvo,Kvo,Kq,Zvo,eFo,oFo,kp,mce,rFo,tFo,Zq,aFo,nFo,sFo,Sp,gce,lFo,iFo,ej,dFo,cFo,fFo,Rp,hce,mFo,gFo,oj,hFo,pFo,_Fo,Pp,pce,uFo,bFo,rj,vFo,FFo,TFo,Bp,_ce,MFo,EFo,tj,CFo,wFo,AFo,Ip,uce,LFo,yFo,aj,xFo,$Fo,kFo,Np,bce,SFo,RFo,nj,PFo,BFo,IFo,qp,vce,NFo,qFo,sj,jFo,DFo,GFo,jp,Fce,OFo,VFo,lj,XFo,zFo,QFo,Dp,Tce,WFo,HFo,ij,UFo,JFo,YFo,Gp,KFo,Op,ZFo,Vp,jL,e6o,Mce,o6o,WXe,Vi,Xp,Ece,DL,r6o,Cce,t6o,HXe,$o,GL,a6o,Xi,n6o,dj,s6o,l6o,cj,i6o,d6o,c6o,OL,f6o,wce,m6o,g6o,h6o,it,VL,p6o,Ace,_6o,u6o,zi,b6o,Lce,v6o,F6o,fj,T6o,M6o,E6o,zp,C6o,Ye,XL,w6o,yce,A6o,L6o,Ia,y6o,xce,x6o,$6o,$ce,k6o,S6o,kce,R6o,P6o,B6o,y,Qp,Sce,I6o,N6o,mj,q6o,j6o,D6o,Wp,Rce,G6o,O6o,gj,V6o,X6o,z6o,Hp,Pce,Q6o,W6o,hj,H6o,U6o,J6o,Up,Bce,Y6o,K6o,pj,Z6o,eTo,oTo,Jp,Ice,rTo,tTo,_j,aTo,nTo,sTo,Yp,Nce,lTo,iTo,uj,dTo,cTo,fTo,Kp,qce,mTo,gTo,bj,hTo,pTo,_To,Zp,jce,uTo,bTo,vj,vTo,FTo,TTo,e_,Dce,MTo,ETo,Fj,CTo,wTo,ATo,o_,Gce,LTo,yTo,Tj,xTo,$To,kTo,r_,Oce,STo,RTo,Mj,PTo,BTo,ITo,t_,Vce,NTo,qTo,Ej,jTo,DTo,GTo,a_,Xce,OTo,VTo,Cj,XTo,zTo,QTo,n_,zce,WTo,HTo,wj,UTo,JTo,YTo,s_,Qce,KTo,ZTo,Aj,e7o,o7o,r7o,l_,Wce,t7o,a7o,Lj,n7o,s7o,l7o,i_,Hce,i7o,d7o,yj,c7o,f7o,m7o,d_,Uce,g7o,h7o,xj,p7o,_7o,u7o,c_,Jce,b7o,v7o,$j,F7o,T7o,M7o,f_,Yce,E7o,C7o,kj,w7o,A7o,L7o,m_,Kce,y7o,x7o,Sj,$7o,k7o,S7o,g_,Zce,R7o,P7o,Rj,B7o,I7o,N7o,h_,efe,q7o,j7o,Pj,D7o,G7o,O7o,p_,ofe,V7o,X7o,Bj,z7o,Q7o,W7o,__,rfe,H7o,U7o,Ij,J7o,Y7o,K7o,u_,tfe,Z7o,e9o,Nj,o9o,r9o,t9o,b_,afe,a9o,n9o,qj,s9o,l9o,i9o,v_,nfe,d9o,c9o,jj,f9o,m9o,g9o,F_,sfe,h9o,p9o,Dj,_9o,u9o,b9o,T_,lfe,v9o,F9o,Gj,T9o,M9o,E9o,M_,ife,C9o,w9o,Oj,A9o,L9o,y9o,E_,dfe,x9o,$9o,Vj,k9o,S9o,R9o,C_,cfe,P9o,B9o,Xj,I9o,N9o,q9o,w_,ffe,j9o,D9o,zj,G9o,O9o,V9o,Us,mfe,X9o,z9o,Qj,Q9o,W9o,Wj,H9o,U9o,J9o,A_,gfe,Y9o,K9o,Hj,Z9o,eMo,oMo,L_,hfe,rMo,tMo,Uj,aMo,nMo,sMo,y_,pfe,lMo,iMo,Jj,dMo,cMo,fMo,x_,_fe,mMo,gMo,Yj,hMo,pMo,_Mo,$_,ufe,uMo,bMo,Kj,vMo,FMo,TMo,k_,bfe,MMo,EMo,Zj,CMo,wMo,AMo,S_,vfe,LMo,yMo,eD,xMo,$Mo,kMo,R_,Ffe,SMo,RMo,oD,PMo,BMo,IMo,P_,Tfe,NMo,qMo,rD,jMo,DMo,GMo,B_,Mfe,OMo,VMo,tD,XMo,zMo,QMo,I_,Efe,WMo,HMo,aD,UMo,JMo,YMo,N_,Cfe,KMo,ZMo,nD,eEo,oEo,rEo,q_,wfe,tEo,aEo,sD,nEo,sEo,lEo,j_,Afe,iEo,dEo,lD,cEo,fEo,mEo,D_,Lfe,gEo,hEo,iD,pEo,_Eo,uEo,G_,yfe,bEo,vEo,dD,FEo,TEo,MEo,O_,xfe,EEo,CEo,cD,wEo,AEo,LEo,V_,$fe,yEo,xEo,fD,$Eo,kEo,SEo,X_,kfe,REo,PEo,mD,BEo,IEo,NEo,z_,Sfe,qEo,jEo,gD,DEo,GEo,OEo,Q_,Rfe,VEo,XEo,hD,zEo,QEo,WEo,W_,Pfe,HEo,UEo,pD,JEo,YEo,KEo,H_,Bfe,ZEo,eCo,_D,oCo,rCo,tCo,U_,Ife,aCo,nCo,uD,sCo,lCo,iCo,J_,Nfe,dCo,cCo,bD,fCo,mCo,gCo,Y_,qfe,hCo,pCo,vD,_Co,uCo,bCo,K_,jfe,vCo,FCo,FD,TCo,MCo,ECo,Z_,Dfe,CCo,wCo,TD,ACo,LCo,yCo,eu,Gfe,xCo,$Co,MD,kCo,SCo,RCo,ou,Ofe,PCo,BCo,ED,ICo,NCo,qCo,ru,Vfe,jCo,DCo,CD,GCo,OCo,VCo,tu,Xfe,XCo,zCo,wD,QCo,WCo,HCo,au,zfe,UCo,JCo,AD,YCo,KCo,ZCo,nu,Qfe,e5o,o5o,LD,r5o,t5o,a5o,su,Wfe,n5o,s5o,yD,l5o,i5o,d5o,lu,Hfe,c5o,f5o,xD,m5o,g5o,h5o,iu,Ufe,p5o,_5o,$D,u5o,b5o,v5o,du,Jfe,F5o,T5o,kD,M5o,E5o,C5o,cu,Yfe,w5o,A5o,SD,L5o,y5o,x5o,fu,Kfe,$5o,k5o,RD,S5o,R5o,P5o,mu,Zfe,B5o,I5o,PD,N5o,q5o,j5o,gu,eme,D5o,G5o,BD,O5o,V5o,X5o,hu,ome,z5o,Q5o,ID,W5o,H5o,U5o,pu,rme,J5o,Y5o,ND,K5o,Z5o,e3o,_u,tme,o3o,r3o,qD,t3o,a3o,n3o,uu,ame,s3o,l3o,jD,i3o,d3o,c3o,bu,nme,f3o,m3o,DD,g3o,h3o,p3o,vu,sme,_3o,u3o,GD,b3o,v3o,F3o,Fu,lme,T3o,M3o,OD,E3o,C3o,w3o,Tu,ime,A3o,L3o,VD,y3o,x3o,$3o,Mu,dme,k3o,S3o,XD,R3o,P3o,B3o,Eu,cme,I3o,N3o,zD,q3o,j3o,D3o,Cu,fme,G3o,O3o,QD,V3o,X3o,z3o,wu,mme,Q3o,W3o,WD,H3o,U3o,J3o,Au,gme,Y3o,K3o,HD,Z3o,e0o,o0o,Lu,hme,r0o,t0o,UD,a0o,n0o,s0o,yu,pme,l0o,i0o,JD,d0o,c0o,f0o,xu,_me,m0o,g0o,YD,h0o,p0o,_0o,$u,ume,u0o,b0o,KD,v0o,F0o,T0o,ku,bme,M0o,E0o,ZD,C0o,w0o,A0o,Su,vme,L0o,y0o,eG,x0o,$0o,k0o,Ru,Fme,S0o,R0o,oG,P0o,B0o,I0o,Pu,Tme,N0o,q0o,rG,j0o,D0o,G0o,Bu,Mme,O0o,V0o,tG,X0o,z0o,Q0o,Iu,Eme,W0o,H0o,aG,U0o,J0o,Y0o,Nu,Cme,K0o,Z0o,nG,ewo,owo,rwo,qu,wme,two,awo,sG,nwo,swo,lwo,ju,Ame,iwo,dwo,lG,cwo,fwo,mwo,Du,Lme,gwo,hwo,iG,pwo,_wo,uwo,Gu,yme,bwo,vwo,dG,Fwo,Two,Mwo,Ou,xme,Ewo,Cwo,cG,wwo,Awo,Lwo,Vu,$me,ywo,xwo,fG,$wo,kwo,Swo,Xu,kme,Rwo,Pwo,mG,Bwo,Iwo,Nwo,zu,Sme,qwo,jwo,gG,Dwo,Gwo,Owo,Qu,Rme,Vwo,Xwo,hG,zwo,Qwo,Wwo,Wu,Pme,Hwo,Uwo,pG,Jwo,Ywo,Kwo,Hu,Bme,Zwo,eAo,_G,oAo,rAo,tAo,Uu,Ime,aAo,nAo,uG,sAo,lAo,iAo,Ju,dAo,Nme,cAo,fAo,qme,mAo,gAo,Yu,UXe,Qi,Ku,jme,zL,hAo,Dme,pAo,JXe,ko,QL,_Ao,Wi,uAo,bG,bAo,vAo,vG,FAo,TAo,MAo,WL,EAo,Gme,CAo,wAo,AAo,dt,HL,LAo,Ome,yAo,xAo,Hi,$Ao,Vme,kAo,SAo,FG,RAo,PAo,BAo,Zu,IAo,Ke,UL,NAo,Xme,qAo,jAo,Na,DAo,zme,GAo,OAo,Qme,VAo,XAo,Wme,zAo,QAo,WAo,G,e1,Hme,HAo,UAo,TG,JAo,YAo,KAo,o1,Ume,ZAo,eLo,MG,oLo,rLo,tLo,r1,Jme,aLo,nLo,EG,sLo,lLo,iLo,t1,Yme,dLo,cLo,CG,fLo,mLo,gLo,a1,Kme,hLo,pLo,wG,_Lo,uLo,bLo,n1,Zme,vLo,FLo,AG,TLo,MLo,ELo,s1,ege,CLo,wLo,LG,ALo,LLo,yLo,l1,oge,xLo,$Lo,yG,kLo,SLo,RLo,i1,rge,PLo,BLo,xG,ILo,NLo,qLo,d1,tge,jLo,DLo,$G,GLo,OLo,VLo,c1,age,XLo,zLo,kG,QLo,WLo,HLo,f1,nge,ULo,JLo,SG,YLo,KLo,ZLo,m1,sge,eyo,oyo,RG,ryo,tyo,ayo,g1,lge,nyo,syo,PG,lyo,iyo,dyo,h1,ige,cyo,fyo,BG,myo,gyo,hyo,p1,dge,pyo,_yo,IG,uyo,byo,vyo,_1,cge,Fyo,Tyo,NG,Myo,Eyo,Cyo,u1,fge,wyo,Ayo,qG,Lyo,yyo,xyo,b1,mge,$yo,kyo,jG,Syo,Ryo,Pyo,v1,gge,Byo,Iyo,DG,Nyo,qyo,jyo,F1,hge,Dyo,Gyo,GG,Oyo,Vyo,Xyo,T1,pge,zyo,Qyo,OG,Wyo,Hyo,Uyo,M1,_ge,Jyo,Yyo,VG,Kyo,Zyo,e8o,E1,uge,o8o,r8o,XG,t8o,a8o,n8o,C1,bge,s8o,l8o,zG,i8o,d8o,c8o,w1,vge,f8o,m8o,QG,g8o,h8o,p8o,A1,Fge,_8o,u8o,WG,b8o,v8o,F8o,L1,Tge,T8o,M8o,HG,E8o,C8o,w8o,y1,Mge,A8o,L8o,UG,y8o,x8o,$8o,x1,Ege,k8o,S8o,JG,R8o,P8o,B8o,$1,Cge,I8o,N8o,YG,q8o,j8o,D8o,k1,wge,G8o,O8o,KG,V8o,X8o,z8o,S1,Age,Q8o,W8o,ZG,H8o,U8o,J8o,R1,Lge,Y8o,K8o,eO,Z8o,exo,oxo,P1,yge,rxo,txo,oO,axo,nxo,sxo,B1,xge,lxo,ixo,rO,dxo,cxo,fxo,I1,$ge,mxo,gxo,tO,hxo,pxo,_xo,N1,kge,uxo,bxo,aO,vxo,Fxo,Txo,q1,Sge,Mxo,Exo,nO,Cxo,wxo,Axo,j1,Rge,Lxo,yxo,sO,xxo,$xo,kxo,D1,Pge,Sxo,Rxo,lO,Pxo,Bxo,Ixo,G1,Bge,Nxo,qxo,iO,jxo,Dxo,Gxo,O1,Ige,Oxo,Vxo,dO,Xxo,zxo,Qxo,V1,Nge,Wxo,Hxo,cO,Uxo,Jxo,Yxo,X1,qge,Kxo,Zxo,fO,e$o,o$o,r$o,z1,t$o,jge,a$o,n$o,Dge,s$o,l$o,Q1,YXe,Ui,W1,Gge,JL,i$o,Oge,d$o,KXe,So,YL,c$o,Ji,f$o,mO,m$o,g$o,gO,h$o,p$o,_$o,KL,u$o,Vge,b$o,v$o,F$o,ct,ZL,T$o,Xge,M$o,E$o,Yi,C$o,zge,w$o,A$o,hO,L$o,y$o,x$o,H1,$$o,Ze,ey,k$o,Qge,S$o,R$o,qa,P$o,Wge,B$o,I$o,Hge,N$o,q$o,Uge,j$o,D$o,G$o,z,U1,Jge,O$o,V$o,pO,X$o,z$o,Q$o,J1,Yge,W$o,H$o,_O,U$o,J$o,Y$o,Y1,Kge,K$o,Z$o,uO,eko,oko,rko,K1,Zge,tko,ako,bO,nko,sko,lko,Z1,ehe,iko,dko,vO,cko,fko,mko,e4,ohe,gko,hko,FO,pko,_ko,uko,o4,rhe,bko,vko,TO,Fko,Tko,Mko,r4,the,Eko,Cko,MO,wko,Ako,Lko,t4,ahe,yko,xko,EO,$ko,kko,Sko,a4,nhe,Rko,Pko,CO,Bko,Iko,Nko,n4,she,qko,jko,wO,Dko,Gko,Oko,s4,lhe,Vko,Xko,AO,zko,Qko,Wko,l4,ihe,Hko,Uko,LO,Jko,Yko,Kko,i4,dhe,Zko,eSo,yO,oSo,rSo,tSo,d4,che,aSo,nSo,xO,sSo,lSo,iSo,c4,fhe,dSo,cSo,$O,fSo,mSo,gSo,f4,mhe,hSo,pSo,kO,_So,uSo,bSo,m4,ghe,vSo,FSo,SO,TSo,MSo,ESo,g4,hhe,CSo,wSo,RO,ASo,LSo,ySo,h4,phe,xSo,$So,PO,kSo,SSo,RSo,p4,_he,PSo,BSo,BO,ISo,NSo,qSo,_4,uhe,jSo,DSo,IO,GSo,OSo,VSo,u4,bhe,XSo,zSo,NO,QSo,WSo,HSo,b4,vhe,USo,JSo,qO,YSo,KSo,ZSo,v4,Fhe,eRo,oRo,jO,rRo,tRo,aRo,F4,The,nRo,sRo,DO,lRo,iRo,dRo,T4,Mhe,cRo,fRo,GO,mRo,gRo,hRo,M4,Ehe,pRo,_Ro,OO,uRo,bRo,vRo,E4,Che,FRo,TRo,VO,MRo,ERo,CRo,C4,whe,wRo,ARo,XO,LRo,yRo,xRo,w4,Ahe,$Ro,kRo,zO,SRo,RRo,PRo,A4,Lhe,BRo,IRo,QO,NRo,qRo,jRo,L4,yhe,DRo,GRo,WO,ORo,VRo,XRo,y4,xhe,zRo,QRo,HO,WRo,HRo,URo,x4,$he,JRo,YRo,UO,KRo,ZRo,ePo,$4,khe,oPo,rPo,JO,tPo,aPo,nPo,k4,She,sPo,lPo,YO,iPo,dPo,cPo,S4,Rhe,fPo,mPo,KO,gPo,hPo,pPo,R4,Phe,_Po,uPo,ZO,bPo,vPo,FPo,P4,Bhe,TPo,MPo,eV,EPo,CPo,wPo,B4,APo,Ihe,LPo,yPo,Nhe,xPo,$Po,I4,ZXe,Ki,N4,qhe,oy,kPo,jhe,SPo,eze,Ro,ry,RPo,Zi,PPo,oV,BPo,IPo,rV,NPo,qPo,jPo,ty,DPo,Dhe,GPo,OPo,VPo,ft,ay,XPo,Ghe,zPo,QPo,ed,WPo,Ohe,HPo,UPo,tV,JPo,YPo,KPo,q4,ZPo,eo,ny,eBo,Vhe,oBo,rBo,ja,tBo,Xhe,aBo,nBo,zhe,sBo,lBo,Qhe,iBo,dBo,cBo,W,j4,Whe,fBo,mBo,aV,gBo,hBo,pBo,D4,Hhe,_Bo,uBo,nV,bBo,vBo,FBo,G4,Uhe,TBo,MBo,sV,EBo,CBo,wBo,O4,Jhe,ABo,LBo,lV,yBo,xBo,$Bo,V4,Yhe,kBo,SBo,iV,RBo,PBo,BBo,X4,Khe,IBo,NBo,dV,qBo,jBo,DBo,z4,Zhe,GBo,OBo,cV,VBo,XBo,zBo,Q4,epe,QBo,WBo,fV,HBo,UBo,JBo,W4,ope,YBo,KBo,mV,ZBo,eIo,oIo,H4,rpe,rIo,tIo,gV,aIo,nIo,sIo,U4,tpe,lIo,iIo,hV,dIo,cIo,fIo,J4,ape,mIo,gIo,pV,hIo,pIo,_Io,Y4,npe,uIo,bIo,_V,vIo,FIo,TIo,K4,spe,MIo,EIo,uV,CIo,wIo,AIo,Z4,lpe,LIo,yIo,bV,xIo,$Io,kIo,e2,ipe,SIo,RIo,vV,PIo,BIo,IIo,o2,dpe,NIo,qIo,FV,jIo,DIo,GIo,r2,cpe,OIo,VIo,TV,XIo,zIo,QIo,t2,fpe,WIo,HIo,MV,UIo,JIo,YIo,a2,mpe,KIo,ZIo,EV,eNo,oNo,rNo,n2,gpe,tNo,aNo,CV,nNo,sNo,lNo,s2,hpe,iNo,dNo,wV,cNo,fNo,mNo,l2,ppe,gNo,hNo,AV,pNo,_No,uNo,i2,_pe,bNo,vNo,LV,FNo,TNo,MNo,d2,upe,ENo,CNo,yV,wNo,ANo,LNo,c2,bpe,yNo,xNo,xV,$No,kNo,SNo,f2,vpe,RNo,PNo,$V,BNo,INo,NNo,m2,Fpe,qNo,jNo,kV,DNo,GNo,ONo,g2,Tpe,VNo,XNo,SV,zNo,QNo,WNo,h2,Mpe,HNo,UNo,RV,JNo,YNo,KNo,p2,Epe,ZNo,eqo,PV,oqo,rqo,tqo,_2,Cpe,aqo,nqo,BV,sqo,lqo,iqo,u2,wpe,dqo,cqo,IV,fqo,mqo,gqo,b2,Ape,hqo,pqo,Lpe,_qo,uqo,bqo,v2,ype,vqo,Fqo,NV,Tqo,Mqo,Eqo,F2,xpe,Cqo,wqo,qV,Aqo,Lqo,yqo,T2,$pe,xqo,$qo,jV,kqo,Sqo,Rqo,M2,kpe,Pqo,Bqo,DV,Iqo,Nqo,qqo,E2,jqo,Spe,Dqo,Gqo,Rpe,Oqo,Vqo,C2,oze,od,w2,Ppe,sy,Xqo,Bpe,zqo,rze,Po,ly,Qqo,rd,Wqo,GV,Hqo,Uqo,OV,Jqo,Yqo,Kqo,iy,Zqo,Ipe,ejo,ojo,rjo,mt,dy,tjo,Npe,ajo,njo,td,sjo,qpe,ljo,ijo,VV,djo,cjo,fjo,A2,mjo,oo,cy,gjo,jpe,hjo,pjo,Da,_jo,Dpe,ujo,bjo,Gpe,vjo,Fjo,Ope,Tjo,Mjo,Ejo,fe,L2,Vpe,Cjo,wjo,XV,Ajo,Ljo,yjo,y2,Xpe,xjo,$jo,zV,kjo,Sjo,Rjo,x2,zpe,Pjo,Bjo,QV,Ijo,Njo,qjo,$2,Qpe,jjo,Djo,WV,Gjo,Ojo,Vjo,k2,Wpe,Xjo,zjo,HV,Qjo,Wjo,Hjo,S2,Hpe,Ujo,Jjo,UV,Yjo,Kjo,Zjo,R2,Upe,eDo,oDo,JV,rDo,tDo,aDo,P2,Jpe,nDo,sDo,YV,lDo,iDo,dDo,B2,Ype,cDo,fDo,KV,mDo,gDo,hDo,I2,Kpe,pDo,_Do,ZV,uDo,bDo,vDo,N2,Zpe,FDo,TDo,eX,MDo,EDo,CDo,q2,e_e,wDo,ADo,oX,LDo,yDo,xDo,j2,o_e,$Do,kDo,rX,SDo,RDo,PDo,D2,r_e,BDo,IDo,tX,NDo,qDo,jDo,G2,t_e,DDo,GDo,aX,ODo,VDo,XDo,O2,a_e,zDo,QDo,nX,WDo,HDo,UDo,V2,n_e,JDo,YDo,sX,KDo,ZDo,eGo,X2,s_e,oGo,rGo,lX,tGo,aGo,nGo,z2,l_e,sGo,lGo,iX,iGo,dGo,cGo,Q2,fGo,i_e,mGo,gGo,d_e,hGo,pGo,W2,tze,ad,H2,c_e,fy,_Go,f_e,uGo,aze,Bo,my,bGo,nd,vGo,dX,FGo,TGo,cX,MGo,EGo,CGo,gy,wGo,m_e,AGo,LGo,yGo,gt,hy,xGo,g_e,$Go,kGo,sd,SGo,h_e,RGo,PGo,fX,BGo,IGo,NGo,U2,qGo,ro,py,jGo,p_e,DGo,GGo,Ga,OGo,__e,VGo,XGo,u_e,zGo,QGo,b_e,WGo,HGo,UGo,B,J2,v_e,JGo,YGo,mX,KGo,ZGo,eOo,Y2,F_e,oOo,rOo,gX,tOo,aOo,nOo,K2,T_e,sOo,lOo,hX,iOo,dOo,cOo,Z2,M_e,fOo,mOo,pX,gOo,hOo,pOo,eb,E_e,_Oo,uOo,_X,bOo,vOo,FOo,ob,C_e,TOo,MOo,uX,EOo,COo,wOo,rb,w_e,AOo,LOo,bX,yOo,xOo,$Oo,tb,A_e,kOo,SOo,vX,ROo,POo,BOo,ab,L_e,IOo,NOo,FX,qOo,jOo,DOo,nb,y_e,GOo,OOo,TX,VOo,XOo,zOo,sb,x_e,QOo,WOo,MX,HOo,UOo,JOo,lb,$_e,YOo,KOo,EX,ZOo,eVo,oVo,ib,k_e,rVo,tVo,CX,aVo,nVo,sVo,db,S_e,lVo,iVo,wX,dVo,cVo,fVo,cb,R_e,mVo,gVo,AX,hVo,pVo,_Vo,fb,P_e,uVo,bVo,LX,vVo,FVo,TVo,mb,B_e,MVo,EVo,yX,CVo,wVo,AVo,gb,I_e,LVo,yVo,xX,xVo,$Vo,kVo,hb,N_e,SVo,RVo,$X,PVo,BVo,IVo,pb,q_e,NVo,qVo,kX,jVo,DVo,GVo,_b,j_e,OVo,VVo,SX,XVo,zVo,QVo,ub,D_e,WVo,HVo,RX,UVo,JVo,YVo,bb,G_e,KVo,ZVo,PX,eXo,oXo,rXo,vb,O_e,tXo,aXo,BX,nXo,sXo,lXo,Fb,V_e,iXo,dXo,IX,cXo,fXo,mXo,Tb,X_e,gXo,hXo,NX,pXo,_Xo,uXo,Mb,z_e,bXo,vXo,qX,FXo,TXo,MXo,Eb,Q_e,EXo,CXo,jX,wXo,AXo,LXo,Cb,W_e,yXo,xXo,DX,$Xo,kXo,SXo,wb,H_e,RXo,PXo,GX,BXo,IXo,NXo,Ab,U_e,qXo,jXo,OX,DXo,GXo,OXo,Lb,J_e,VXo,XXo,VX,zXo,QXo,WXo,yb,Y_e,HXo,UXo,XX,JXo,YXo,KXo,xb,K_e,ZXo,ezo,zX,ozo,rzo,tzo,$b,Z_e,azo,nzo,QX,szo,lzo,izo,kb,eue,dzo,czo,WX,fzo,mzo,gzo,Sb,oue,hzo,pzo,HX,_zo,uzo,bzo,Rb,rue,vzo,Fzo,UX,Tzo,Mzo,Ezo,Pb,tue,Czo,wzo,JX,Azo,Lzo,yzo,Bb,aue,xzo,$zo,YX,kzo,Szo,Rzo,Ib,nue,Pzo,Bzo,KX,Izo,Nzo,qzo,Nb,sue,jzo,Dzo,ZX,Gzo,Ozo,Vzo,qb,lue,Xzo,zzo,ez,Qzo,Wzo,Hzo,jb,iue,Uzo,Jzo,oz,Yzo,Kzo,Zzo,Db,due,eQo,oQo,rz,rQo,tQo,aQo,Gb,cue,nQo,sQo,tz,lQo,iQo,dQo,Ob,fue,cQo,fQo,az,mQo,gQo,hQo,Vb,mue,pQo,_Qo,nz,uQo,bQo,vQo,Xb,gue,FQo,TQo,sz,MQo,EQo,CQo,zb,hue,wQo,AQo,lz,LQo,yQo,xQo,Qb,pue,$Qo,kQo,iz,SQo,RQo,PQo,Wb,BQo,_ue,IQo,NQo,uue,qQo,jQo,Hb,nze,ld,Ub,bue,_y,DQo,vue,GQo,sze,Io,uy,OQo,id,VQo,dz,XQo,zQo,cz,QQo,WQo,HQo,by,UQo,Fue,JQo,YQo,KQo,ht,vy,ZQo,Tue,eWo,oWo,dd,rWo,Mue,tWo,aWo,fz,nWo,sWo,lWo,Jb,iWo,to,Fy,dWo,Eue,cWo,fWo,Oa,mWo,Cue,gWo,hWo,wue,pWo,_Wo,Aue,uWo,bWo,vWo,Z,Yb,Lue,FWo,TWo,mz,MWo,EWo,CWo,Kb,yue,wWo,AWo,gz,LWo,yWo,xWo,Zb,xue,$Wo,kWo,hz,SWo,RWo,PWo,ev,$ue,BWo,IWo,pz,NWo,qWo,jWo,ov,kue,DWo,GWo,_z,OWo,VWo,XWo,rv,Sue,zWo,QWo,uz,WWo,HWo,UWo,tv,Rue,JWo,YWo,bz,KWo,ZWo,eHo,av,Pue,oHo,rHo,vz,tHo,aHo,nHo,nv,Bue,sHo,lHo,Fz,iHo,dHo,cHo,sv,Iue,fHo,mHo,Tz,gHo,hHo,pHo,lv,Nue,_Ho,uHo,Mz,bHo,vHo,FHo,iv,que,THo,MHo,Ez,EHo,CHo,wHo,dv,jue,AHo,LHo,Cz,yHo,xHo,$Ho,cv,Due,kHo,SHo,wz,RHo,PHo,BHo,fv,Gue,IHo,NHo,Az,qHo,jHo,DHo,mv,Oue,GHo,OHo,Lz,VHo,XHo,zHo,gv,Vue,QHo,WHo,yz,HHo,UHo,JHo,hv,Xue,YHo,KHo,xz,ZHo,eUo,oUo,pv,zue,rUo,tUo,$z,aUo,nUo,sUo,_v,Que,lUo,iUo,kz,dUo,cUo,fUo,uv,Wue,mUo,gUo,Sz,hUo,pUo,_Uo,bv,Hue,uUo,bUo,Rz,vUo,FUo,TUo,vv,Uue,MUo,EUo,Pz,CUo,wUo,AUo,Fv,Jue,LUo,yUo,Bz,xUo,$Uo,kUo,Tv,Yue,SUo,RUo,Iz,PUo,BUo,IUo,Mv,Kue,NUo,qUo,Nz,jUo,DUo,GUo,Ev,Zue,OUo,VUo,qz,XUo,zUo,QUo,Cv,e1e,WUo,HUo,jz,UUo,JUo,YUo,wv,o1e,KUo,ZUo,Dz,eJo,oJo,rJo,Av,r1e,tJo,aJo,Gz,nJo,sJo,lJo,Lv,iJo,t1e,dJo,cJo,a1e,fJo,mJo,yv,lze,cd,xv,n1e,Ty,gJo,s1e,hJo,ize,No,My,pJo,fd,_Jo,Oz,uJo,bJo,Vz,vJo,FJo,TJo,Ey,MJo,l1e,EJo,CJo,wJo,pt,Cy,AJo,i1e,LJo,yJo,md,xJo,d1e,$Jo,kJo,Xz,SJo,RJo,PJo,$v,BJo,ao,wy,IJo,c1e,NJo,qJo,Va,jJo,f1e,DJo,GJo,m1e,OJo,VJo,g1e,XJo,zJo,QJo,qo,kv,h1e,WJo,HJo,zz,UJo,JJo,YJo,Sv,p1e,KJo,ZJo,Qz,eYo,oYo,rYo,Rv,_1e,tYo,aYo,Wz,nYo,sYo,lYo,Pv,u1e,iYo,dYo,Hz,cYo,fYo,mYo,Bv,b1e,gYo,hYo,Uz,pYo,_Yo,uYo,Iv,v1e,bYo,vYo,Jz,FYo,TYo,MYo,Nv,EYo,F1e,CYo,wYo,T1e,AYo,LYo,qv,dze,gd,jv,M1e,Ay,yYo,E1e,xYo,cze,jo,Ly,$Yo,hd,kYo,Yz,SYo,RYo,Kz,PYo,BYo,IYo,yy,NYo,C1e,qYo,jYo,DYo,_t,xy,GYo,w1e,OYo,VYo,pd,XYo,A1e,zYo,QYo,Zz,WYo,HYo,UYo,Dv,JYo,no,$y,YYo,L1e,KYo,ZYo,Xa,eKo,y1e,oKo,rKo,x1e,tKo,aKo,$1e,nKo,sKo,lKo,U,Gv,k1e,iKo,dKo,eQ,cKo,fKo,mKo,Ov,S1e,gKo,hKo,oQ,pKo,_Ko,uKo,Vv,R1e,bKo,vKo,rQ,FKo,TKo,MKo,Xv,P1e,EKo,CKo,tQ,wKo,AKo,LKo,zv,B1e,yKo,xKo,aQ,$Ko,kKo,SKo,Qv,I1e,RKo,PKo,nQ,BKo,IKo,NKo,Wv,N1e,qKo,jKo,sQ,DKo,GKo,OKo,Hv,q1e,VKo,XKo,lQ,zKo,QKo,WKo,Uv,j1e,HKo,UKo,iQ,JKo,YKo,KKo,Jv,D1e,ZKo,eZo,dQ,oZo,rZo,tZo,Yv,G1e,aZo,nZo,cQ,sZo,lZo,iZo,Kv,O1e,dZo,cZo,fQ,fZo,mZo,gZo,Zv,V1e,hZo,pZo,mQ,_Zo,uZo,bZo,eF,X1e,vZo,FZo,gQ,TZo,MZo,EZo,oF,z1e,CZo,wZo,hQ,AZo,LZo,yZo,rF,Q1e,xZo,$Zo,pQ,kZo,SZo,RZo,tF,W1e,PZo,BZo,_Q,IZo,NZo,qZo,aF,H1e,jZo,DZo,uQ,GZo,OZo,VZo,nF,U1e,XZo,zZo,bQ,QZo,WZo,HZo,sF,J1e,UZo,JZo,vQ,YZo,KZo,ZZo,lF,Y1e,eer,oer,FQ,rer,ter,aer,iF,K1e,ner,ser,TQ,ler,ier,der,dF,Z1e,cer,fer,MQ,mer,ger,her,cF,e4e,per,_er,EQ,uer,ber,ver,fF,o4e,Fer,Ter,CQ,Mer,Eer,Cer,mF,r4e,wer,Aer,wQ,Ler,yer,xer,gF,t4e,$er,ker,AQ,Ser,Rer,Per,hF,a4e,Ber,Ier,LQ,Ner,qer,jer,pF,n4e,Der,Ger,yQ,Oer,Ver,Xer,_F,s4e,zer,Qer,xQ,Wer,Her,Uer,uF,l4e,Jer,Yer,$Q,Ker,Zer,eor,bF,i4e,oor,ror,kQ,tor,aor,nor,vF,d4e,sor,lor,SQ,ior,dor,cor,FF,c4e,mor,gor,RQ,hor,por,_or,TF,f4e,uor,bor,PQ,vor,For,Tor,MF,m4e,Mor,Eor,BQ,Cor,wor,Aor,EF,Lor,g4e,yor,xor,h4e,$or,kor,CF,fze,_d,wF,p4e,ky,Sor,_4e,Ror,mze,Do,Sy,Por,ud,Bor,IQ,Ior,Nor,NQ,qor,jor,Dor,Ry,Gor,u4e,Oor,Vor,Xor,ut,Py,zor,b4e,Qor,Wor,bd,Hor,v4e,Uor,Jor,qQ,Yor,Kor,Zor,AF,err,so,By,orr,F4e,rrr,trr,za,arr,T4e,nrr,srr,M4e,lrr,irr,E4e,drr,crr,frr,V,LF,C4e,mrr,grr,jQ,hrr,prr,_rr,yF,w4e,urr,brr,DQ,vrr,Frr,Trr,xF,A4e,Mrr,Err,GQ,Crr,wrr,Arr,$F,L4e,Lrr,yrr,OQ,xrr,$rr,krr,kF,y4e,Srr,Rrr,VQ,Prr,Brr,Irr,SF,x4e,Nrr,qrr,XQ,jrr,Drr,Grr,RF,$4e,Orr,Vrr,zQ,Xrr,zrr,Qrr,PF,k4e,Wrr,Hrr,QQ,Urr,Jrr,Yrr,BF,S4e,Krr,Zrr,WQ,etr,otr,rtr,IF,R4e,ttr,atr,HQ,ntr,str,ltr,NF,P4e,itr,dtr,UQ,ctr,ftr,mtr,qF,B4e,gtr,htr,JQ,ptr,_tr,utr,jF,I4e,btr,vtr,YQ,Ftr,Ttr,Mtr,DF,N4e,Etr,Ctr,KQ,wtr,Atr,Ltr,GF,q4e,ytr,xtr,ZQ,$tr,ktr,Str,OF,j4e,Rtr,Ptr,eW,Btr,Itr,Ntr,VF,D4e,qtr,jtr,oW,Dtr,Gtr,Otr,XF,G4e,Vtr,Xtr,rW,ztr,Qtr,Wtr,zF,O4e,Htr,Utr,tW,Jtr,Ytr,Ktr,QF,V4e,Ztr,ear,aW,oar,rar,tar,WF,X4e,aar,nar,nW,sar,lar,iar,HF,z4e,dar,car,sW,far,mar,gar,UF,Q4e,har,par,lW,_ar,uar,bar,JF,W4e,Far,Tar,iW,Mar,Ear,Car,YF,H4e,war,Aar,dW,Lar,yar,xar,KF,U4e,$ar,kar,cW,Sar,Rar,Par,ZF,J4e,Bar,Iar,fW,Nar,qar,jar,e6,Y4e,Dar,Gar,mW,Oar,Var,Xar,o6,K4e,zar,Qar,gW,War,Har,Uar,r6,Z4e,Jar,Yar,hW,Kar,Zar,enr,t6,e2e,onr,rnr,pW,tnr,anr,nnr,a6,o2e,snr,lnr,_W,inr,dnr,cnr,n6,r2e,fnr,mnr,uW,gnr,hnr,pnr,s6,t2e,_nr,unr,bW,bnr,vnr,Fnr,l6,a2e,Tnr,Mnr,vW,Enr,Cnr,wnr,i6,n2e,Anr,Lnr,FW,ynr,xnr,$nr,d6,s2e,knr,Snr,TW,Rnr,Pnr,Bnr,c6,l2e,Inr,Nnr,MW,qnr,jnr,Dnr,f6,i2e,Gnr,Onr,EW,Vnr,Xnr,znr,m6,d2e,Qnr,Wnr,CW,Hnr,Unr,Jnr,g6,c2e,Ynr,Knr,wW,Znr,esr,osr,h6,f2e,rsr,tsr,AW,asr,nsr,ssr,p6,lsr,m2e,isr,dsr,g2e,csr,fsr,_6,gze,vd,u6,h2e,Iy,msr,p2e,gsr,hze,Go,Ny,hsr,Fd,psr,LW,_sr,usr,yW,bsr,vsr,Fsr,qy,Tsr,_2e,Msr,Esr,Csr,bt,jy,wsr,u2e,Asr,Lsr,Td,ysr,b2e,xsr,$sr,xW,ksr,Ssr,Rsr,b6,Psr,lo,Dy,Bsr,v2e,Isr,Nsr,Qa,qsr,F2e,jsr,Dsr,T2e,Gsr,Osr,M2e,Vsr,Xsr,zsr,E2e,v6,C2e,Qsr,Wsr,$W,Hsr,Usr,Jsr,F6,Ysr,w2e,Ksr,Zsr,A2e,elr,olr,T6,pze,Md,M6,L2e,Gy,rlr,y2e,tlr,_ze,Oo,Oy,alr,Ed,nlr,kW,slr,llr,SW,ilr,dlr,clr,Vy,flr,x2e,mlr,glr,hlr,vt,Xy,plr,$2e,_lr,ulr,Cd,blr,k2e,vlr,Flr,RW,Tlr,Mlr,Elr,E6,Clr,io,zy,wlr,S2e,Alr,Llr,Wa,ylr,R2e,xlr,$lr,P2e,klr,Slr,B2e,Rlr,Plr,Blr,ue,C6,I2e,Ilr,Nlr,PW,qlr,jlr,Dlr,w6,N2e,Glr,Olr,BW,Vlr,Xlr,zlr,A6,q2e,Qlr,Wlr,IW,Hlr,Ulr,Jlr,L6,j2e,Ylr,Klr,NW,Zlr,eir,oir,Js,D2e,rir,tir,qW,air,nir,jW,sir,lir,iir,y6,G2e,dir,cir,DW,fir,mir,gir,Ys,O2e,hir,pir,GW,_ir,uir,OW,bir,vir,Fir,x6,V2e,Tir,Mir,VW,Eir,Cir,wir,Ft,X2e,Air,Lir,XW,yir,xir,zW,$ir,kir,QW,Sir,Rir,Pir,$6,z2e,Bir,Iir,WW,Nir,qir,jir,k6,Q2e,Dir,Gir,HW,Oir,Vir,Xir,S6,W2e,zir,Qir,UW,Wir,Hir,Uir,R6,H2e,Jir,Yir,JW,Kir,Zir,edr,P6,U2e,odr,rdr,YW,tdr,adr,ndr,B6,J2e,sdr,ldr,KW,idr,ddr,cdr,I6,Y2e,fdr,mdr,ZW,gdr,hdr,pdr,N6,K2e,_dr,udr,eH,bdr,vdr,Fdr,q6,Tdr,Z2e,Mdr,Edr,ebe,Cdr,wdr,j6,uze,wd,D6,obe,Qy,Adr,rbe,Ldr,bze,Vo,Wy,ydr,Ad,xdr,oH,$dr,kdr,rH,Sdr,Rdr,Pdr,Hy,Bdr,tbe,Idr,Ndr,qdr,Tt,Uy,jdr,abe,Ddr,Gdr,Ld,Odr,nbe,Vdr,Xdr,tH,zdr,Qdr,Wdr,G6,Hdr,co,Jy,Udr,sbe,Jdr,Ydr,Ha,Kdr,lbe,Zdr,ecr,ibe,ocr,rcr,dbe,tcr,acr,ncr,cbe,O6,fbe,scr,lcr,aH,icr,dcr,ccr,V6,fcr,mbe,mcr,gcr,gbe,hcr,pcr,X6,vze,yd,z6,hbe,Yy,_cr,pbe,ucr,Fze,Xo,Ky,bcr,xd,vcr,nH,Fcr,Tcr,sH,Mcr,Ecr,Ccr,Zy,wcr,_be,Acr,Lcr,ycr,Mt,e8,xcr,ube,$cr,kcr,$d,Scr,bbe,Rcr,Pcr,lH,Bcr,Icr,Ncr,Q6,qcr,fo,o8,jcr,vbe,Dcr,Gcr,Ua,Ocr,Fbe,Vcr,Xcr,Tbe,zcr,Qcr,Mbe,Wcr,Hcr,Ucr,Ebe,W6,Cbe,Jcr,Ycr,iH,Kcr,Zcr,efr,H6,ofr,wbe,rfr,tfr,Abe,afr,nfr,U6,Tze,kd,J6,Lbe,r8,sfr,ybe,lfr,Mze,zo,t8,ifr,Sd,dfr,dH,cfr,ffr,cH,mfr,gfr,hfr,a8,pfr,xbe,_fr,ufr,bfr,Et,n8,vfr,$be,Ffr,Tfr,Rd,Mfr,kbe,Efr,Cfr,fH,wfr,Afr,Lfr,Y6,yfr,mo,s8,xfr,Sbe,$fr,kfr,Ja,Sfr,Rbe,Rfr,Pfr,Pbe,Bfr,Ifr,Bbe,Nfr,qfr,jfr,Pe,K6,Ibe,Dfr,Gfr,mH,Ofr,Vfr,Xfr,Z6,Nbe,zfr,Qfr,gH,Wfr,Hfr,Ufr,eT,qbe,Jfr,Yfr,hH,Kfr,Zfr,emr,oT,jbe,omr,rmr,pH,tmr,amr,nmr,rT,Dbe,smr,lmr,_H,imr,dmr,cmr,tT,Gbe,fmr,mmr,uH,gmr,hmr,pmr,aT,Obe,_mr,umr,bH,bmr,vmr,Fmr,nT,Vbe,Tmr,Mmr,vH,Emr,Cmr,wmr,sT,Xbe,Amr,Lmr,FH,ymr,xmr,$mr,lT,kmr,zbe,Smr,Rmr,Qbe,Pmr,Bmr,iT,Eze,Pd,dT,Wbe,l8,Imr,Hbe,Nmr,Cze,Qo,i8,qmr,Bd,jmr,TH,Dmr,Gmr,MH,Omr,Vmr,Xmr,d8,zmr,Ube,Qmr,Wmr,Hmr,Ct,c8,Umr,Jbe,Jmr,Ymr,Id,Kmr,Ybe,Zmr,egr,EH,ogr,rgr,tgr,cT,agr,go,f8,ngr,Kbe,sgr,lgr,Ya,igr,Zbe,dgr,cgr,eve,fgr,mgr,ove,ggr,hgr,pgr,rt,fT,rve,_gr,ugr,CH,bgr,vgr,Fgr,mT,tve,Tgr,Mgr,wH,Egr,Cgr,wgr,gT,ave,Agr,Lgr,AH,ygr,xgr,$gr,hT,nve,kgr,Sgr,LH,Rgr,Pgr,Bgr,pT,sve,Igr,Ngr,yH,qgr,jgr,Dgr,_T,Ggr,lve,Ogr,Vgr,ive,Xgr,zgr,uT,wze,Nd,bT,dve,m8,Qgr,cve,Wgr,Aze,Wo,g8,Hgr,qd,Ugr,xH,Jgr,Ygr,$H,Kgr,Zgr,ehr,h8,ohr,fve,rhr,thr,ahr,wt,p8,nhr,mve,shr,lhr,jd,ihr,gve,dhr,chr,kH,fhr,mhr,ghr,vT,hhr,ho,_8,phr,hve,_hr,uhr,Ka,bhr,pve,vhr,Fhr,_ve,Thr,Mhr,uve,Ehr,Chr,whr,Le,FT,bve,Ahr,Lhr,SH,yhr,xhr,$hr,TT,vve,khr,Shr,RH,Rhr,Phr,Bhr,MT,Fve,Ihr,Nhr,PH,qhr,jhr,Dhr,ET,Tve,Ghr,Ohr,BH,Vhr,Xhr,zhr,CT,Mve,Qhr,Whr,IH,Hhr,Uhr,Jhr,wT,Eve,Yhr,Khr,NH,Zhr,epr,opr,AT,Cve,rpr,tpr,qH,apr,npr,spr,LT,wve,lpr,ipr,jH,dpr,cpr,fpr,yT,Ave,mpr,gpr,DH,hpr,ppr,_pr,xT,Lve,upr,bpr,GH,vpr,Fpr,Tpr,$T,Mpr,yve,Epr,Cpr,xve,wpr,Apr,kT,Lze,Dd,ST,$ve,u8,Lpr,kve,ypr,yze,Ho,b8,xpr,Gd,$pr,OH,kpr,Spr,VH,Rpr,Ppr,Bpr,v8,Ipr,Sve,Npr,qpr,jpr,At,F8,Dpr,Rve,Gpr,Opr,Od,Vpr,Pve,Xpr,zpr,XH,Qpr,Wpr,Hpr,RT,Upr,po,T8,Jpr,Bve,Ypr,Kpr,Za,Zpr,Ive,e_r,o_r,Nve,r_r,t_r,qve,a_r,n_r,s_r,M8,PT,jve,l_r,i_r,zH,d_r,c_r,f_r,BT,Dve,m_r,g_r,QH,h_r,p_r,__r,IT,u_r,Gve,b_r,v_r,Ove,F_r,T_r,NT,xze,Vd,qT,Vve,E8,M_r,Xve,E_r,$ze,Uo,C8,C_r,Xd,w_r,WH,A_r,L_r,HH,y_r,x_r,$_r,w8,k_r,zve,S_r,R_r,P_r,Lt,A8,B_r,Qve,I_r,N_r,zd,q_r,Wve,j_r,D_r,UH,G_r,O_r,V_r,jT,X_r,_o,L8,z_r,Hve,Q_r,W_r,en,H_r,Uve,U_r,J_r,Jve,Y_r,K_r,Yve,Z_r,eur,our,tt,DT,Kve,rur,tur,JH,aur,nur,sur,GT,Zve,lur,iur,YH,dur,cur,fur,OT,eFe,mur,gur,KH,hur,pur,_ur,VT,oFe,uur,bur,ZH,vur,Fur,Tur,XT,rFe,Mur,Eur,eU,Cur,wur,Aur,zT,Lur,tFe,yur,xur,aFe,$ur,kur,QT,kze,Qd,WT,nFe,y8,Sur,sFe,Rur,Sze,Jo,x8,Pur,Wd,Bur,oU,Iur,Nur,rU,qur,jur,Dur,$8,Gur,lFe,Our,Vur,Xur,yt,k8,zur,iFe,Qur,Wur,Hd,Hur,dFe,Uur,Jur,tU,Yur,Kur,Zur,HT,e1r,uo,S8,o1r,cFe,r1r,t1r,on,a1r,fFe,n1r,s1r,mFe,l1r,i1r,gFe,d1r,c1r,f1r,rn,UT,hFe,m1r,g1r,aU,h1r,p1r,_1r,JT,pFe,u1r,b1r,nU,v1r,F1r,T1r,YT,_Fe,M1r,E1r,sU,C1r,w1r,A1r,KT,uFe,L1r,y1r,lU,x1r,$1r,k1r,ZT,S1r,bFe,R1r,P1r,vFe,B1r,I1r,e7,Rze,Ud,o7,FFe,R8,N1r,TFe,q1r,Pze,Yo,P8,j1r,Jd,D1r,iU,G1r,O1r,dU,V1r,X1r,z1r,B8,Q1r,MFe,W1r,H1r,U1r,xt,I8,J1r,EFe,Y1r,K1r,Yd,Z1r,CFe,e4r,o4r,cU,r4r,t4r,a4r,r7,n4r,bo,N8,s4r,wFe,l4r,i4r,tn,d4r,AFe,c4r,f4r,LFe,m4r,g4r,yFe,h4r,p4r,_4r,q8,t7,xFe,u4r,b4r,fU,v4r,F4r,T4r,a7,$Fe,M4r,E4r,mU,C4r,w4r,A4r,n7,L4r,kFe,y4r,x4r,SFe,$4r,k4r,s7,Bze,Kd,l7,RFe,j8,S4r,PFe,R4r,Ize,Ko,D8,P4r,Zd,B4r,gU,I4r,N4r,hU,q4r,j4r,D4r,G8,G4r,BFe,O4r,V4r,X4r,$t,O8,z4r,IFe,Q4r,W4r,ec,H4r,NFe,U4r,J4r,pU,Y4r,K4r,Z4r,i7,e2r,vo,V8,o2r,qFe,r2r,t2r,an,a2r,jFe,n2r,s2r,DFe,l2r,i2r,GFe,d2r,c2r,f2r,OFe,d7,VFe,m2r,g2r,_U,h2r,p2r,_2r,c7,u2r,XFe,b2r,v2r,zFe,F2r,T2r,f7,Nze,oc,m7,QFe,X8,M2r,WFe,E2r,qze,Zo,z8,C2r,rc,w2r,uU,A2r,L2r,bU,y2r,x2r,$2r,Q8,k2r,HFe,S2r,R2r,P2r,kt,W8,B2r,UFe,I2r,N2r,tc,q2r,JFe,j2r,D2r,vU,G2r,O2r,V2r,g7,X2r,Fo,H8,z2r,YFe,Q2r,W2r,nn,H2r,KFe,U2r,J2r,ZFe,Y2r,K2r,e6e,Z2r,ebr,obr,at,h7,o6e,rbr,tbr,FU,abr,nbr,sbr,p7,r6e,lbr,ibr,TU,dbr,cbr,fbr,_7,t6e,mbr,gbr,MU,hbr,pbr,_br,u7,a6e,ubr,bbr,EU,vbr,Fbr,Tbr,b7,n6e,Mbr,Ebr,CU,Cbr,wbr,Abr,v7,Lbr,s6e,ybr,xbr,l6e,$br,kbr,F7,jze,ac,T7,i6e,U8,Sbr,d6e,Rbr,Dze,er,J8,Pbr,nc,Bbr,wU,Ibr,Nbr,AU,qbr,jbr,Dbr,Y8,Gbr,c6e,Obr,Vbr,Xbr,St,K8,zbr,f6e,Qbr,Wbr,sc,Hbr,m6e,Ubr,Jbr,LU,Ybr,Kbr,Zbr,M7,evr,To,Z8,ovr,g6e,rvr,tvr,sn,avr,h6e,nvr,svr,p6e,lvr,ivr,_6e,dvr,cvr,fvr,u6e,E7,b6e,mvr,gvr,yU,hvr,pvr,_vr,C7,uvr,v6e,bvr,vvr,F6e,Fvr,Tvr,w7,Gze,lc,A7,T6e,ex,Mvr,M6e,Evr,Oze,or,ox,Cvr,ic,wvr,xU,Avr,Lvr,$U,yvr,xvr,$vr,rx,kvr,E6e,Svr,Rvr,Pvr,Rt,tx,Bvr,C6e,Ivr,Nvr,dc,qvr,w6e,jvr,Dvr,kU,Gvr,Ovr,Vvr,L7,Xvr,xr,ax,zvr,A6e,Qvr,Wvr,ln,Hvr,L6e,Uvr,Jvr,y6e,Yvr,Kvr,x6e,Zvr,eFr,oFr,q,y7,$6e,rFr,tFr,SU,aFr,nFr,sFr,x7,k6e,lFr,iFr,RU,dFr,cFr,fFr,$7,S6e,mFr,gFr,PU,hFr,pFr,_Fr,k7,R6e,uFr,bFr,BU,vFr,FFr,TFr,S7,P6e,MFr,EFr,IU,CFr,wFr,AFr,R7,B6e,LFr,yFr,NU,xFr,$Fr,kFr,P7,I6e,SFr,RFr,qU,PFr,BFr,IFr,B7,N6e,NFr,qFr,jU,jFr,DFr,GFr,I7,q6e,OFr,VFr,DU,XFr,zFr,QFr,N7,j6e,WFr,HFr,GU,UFr,JFr,YFr,q7,D6e,KFr,ZFr,OU,e6r,o6r,r6r,j7,G6e,t6r,a6r,VU,n6r,s6r,l6r,D7,O6e,i6r,d6r,XU,c6r,f6r,m6r,G7,V6e,g6r,h6r,zU,p6r,_6r,u6r,O7,X6e,b6r,v6r,QU,F6r,T6r,M6r,V7,z6e,E6r,C6r,WU,w6r,A6r,L6r,X7,Q6e,y6r,x6r,HU,$6r,k6r,S6r,z7,W6e,R6r,P6r,UU,B6r,I6r,N6r,Ks,H6e,q6r,j6r,JU,D6r,G6r,YU,O6r,V6r,X6r,Q7,U6e,z6r,Q6r,KU,W6r,H6r,U6r,W7,J6e,J6r,Y6r,ZU,K6r,Z6r,eTr,H7,Y6e,oTr,rTr,eJ,tTr,aTr,nTr,U7,K6e,sTr,lTr,oJ,iTr,dTr,cTr,J7,Z6e,fTr,mTr,rJ,gTr,hTr,pTr,Y7,eTe,_Tr,uTr,tJ,bTr,vTr,FTr,K7,oTe,TTr,MTr,aJ,ETr,CTr,wTr,Z7,rTe,ATr,LTr,nJ,yTr,xTr,$Tr,e9,tTe,kTr,STr,sJ,RTr,PTr,BTr,o9,aTe,ITr,NTr,lJ,qTr,jTr,DTr,r9,nTe,GTr,OTr,iJ,VTr,XTr,zTr,t9,sTe,QTr,WTr,dJ,HTr,UTr,JTr,a9,lTe,YTr,KTr,cJ,ZTr,e7r,o7r,n9,iTe,r7r,t7r,fJ,a7r,n7r,s7r,s9,dTe,l7r,i7r,mJ,d7r,c7r,f7r,l9,cTe,m7r,g7r,gJ,h7r,p7r,_7r,i9,fTe,u7r,b7r,hJ,v7r,F7r,T7r,d9,mTe,M7r,E7r,pJ,C7r,w7r,A7r,c9,gTe,L7r,y7r,_J,x7r,$7r,k7r,f9,hTe,S7r,R7r,uJ,P7r,B7r,I7r,m9,pTe,N7r,q7r,bJ,j7r,D7r,G7r,g9,_Te,O7r,V7r,vJ,X7r,z7r,Q7r,h9,uTe,W7r,H7r,FJ,U7r,J7r,Y7r,p9,bTe,K7r,Z7r,TJ,e9r,o9r,r9r,_9,vTe,t9r,a9r,MJ,n9r,s9r,l9r,u9,FTe,i9r,d9r,EJ,c9r,f9r,m9r,b9,TTe,g9r,h9r,CJ,p9r,_9r,u9r,v9,MTe,b9r,v9r,wJ,F9r,T9r,M9r,F9,ETe,E9r,C9r,AJ,w9r,A9r,L9r,T9,CTe,y9r,x9r,LJ,$9r,k9r,S9r,M9,wTe,R9r,P9r,yJ,B9r,I9r,N9r,E9,Vze,cc,C9,ATe,nx,q9r,LTe,j9r,Xze,rr,sx,D9r,fc,G9r,xJ,O9r,V9r,$J,X9r,z9r,Q9r,lx,W9r,yTe,H9r,U9r,J9r,Pt,ix,Y9r,xTe,K9r,Z9r,mc,eMr,$Te,oMr,rMr,kJ,tMr,aMr,nMr,w9,sMr,$r,dx,lMr,kTe,iMr,dMr,dn,cMr,STe,fMr,mMr,RTe,gMr,hMr,PTe,pMr,_Mr,uMr,se,A9,BTe,bMr,vMr,SJ,FMr,TMr,MMr,L9,ITe,EMr,CMr,RJ,wMr,AMr,LMr,y9,NTe,yMr,xMr,PJ,$Mr,kMr,SMr,x9,qTe,RMr,PMr,BJ,BMr,IMr,NMr,$9,jTe,qMr,jMr,IJ,DMr,GMr,OMr,k9,DTe,VMr,XMr,NJ,zMr,QMr,WMr,S9,GTe,HMr,UMr,qJ,JMr,YMr,KMr,R9,OTe,ZMr,eEr,jJ,oEr,rEr,tEr,P9,VTe,aEr,nEr,DJ,sEr,lEr,iEr,B9,XTe,dEr,cEr,GJ,fEr,mEr,gEr,I9,zTe,hEr,pEr,OJ,_Er,uEr,bEr,N9,QTe,vEr,FEr,VJ,TEr,MEr,EEr,q9,WTe,CEr,wEr,XJ,AEr,LEr,yEr,j9,HTe,xEr,$Er,zJ,kEr,SEr,REr,D9,UTe,PEr,BEr,QJ,IEr,NEr,qEr,G9,JTe,jEr,DEr,WJ,GEr,OEr,VEr,O9,YTe,XEr,zEr,HJ,QEr,WEr,HEr,V9,KTe,UEr,JEr,UJ,YEr,KEr,ZEr,X9,ZTe,eCr,oCr,JJ,rCr,tCr,aCr,z9,e7e,nCr,sCr,YJ,lCr,iCr,dCr,Q9,o7e,cCr,fCr,KJ,mCr,gCr,hCr,W9,r7e,pCr,_Cr,ZJ,uCr,bCr,vCr,H9,t7e,FCr,TCr,eY,MCr,ECr,CCr,U9,zze,gc,J9,a7e,cx,wCr,n7e,ACr,Qze,tr,fx,LCr,hc,yCr,oY,xCr,$Cr,rY,kCr,SCr,RCr,mx,PCr,s7e,BCr,ICr,NCr,Bt,gx,qCr,l7e,jCr,DCr,pc,GCr,i7e,OCr,VCr,tY,XCr,zCr,QCr,Y9,WCr,kr,hx,HCr,d7e,UCr,JCr,cn,YCr,c7e,KCr,ZCr,f7e,e5r,o5r,m7e,r5r,t5r,a5r,Me,K9,g7e,n5r,s5r,aY,l5r,i5r,d5r,Z9,h7e,c5r,f5r,nY,m5r,g5r,h5r,eM,p7e,p5r,_5r,sY,u5r,b5r,v5r,oM,_7e,F5r,T5r,lY,M5r,E5r,C5r,rM,u7e,w5r,A5r,iY,L5r,y5r,x5r,tM,b7e,$5r,k5r,dY,S5r,R5r,P5r,aM,v7e,B5r,I5r,cY,N5r,q5r,j5r,nM,F7e,D5r,G5r,fY,O5r,V5r,X5r,sM,T7e,z5r,Q5r,mY,W5r,H5r,U5r,lM,M7e,J5r,Y5r,gY,K5r,Z5r,e3r,iM,E7e,o3r,r3r,hY,t3r,a3r,n3r,dM,C7e,s3r,l3r,pY,i3r,d3r,c3r,cM,w7e,f3r,m3r,_Y,g3r,h3r,p3r,fM,Wze,_c,mM,A7e,px,_3r,L7e,u3r,Hze,ar,_x,b3r,uc,v3r,uY,F3r,T3r,bY,M3r,E3r,C3r,ux,w3r,y7e,A3r,L3r,y3r,It,bx,x3r,x7e,$3r,k3r,bc,S3r,$7e,R3r,P3r,vY,B3r,I3r,N3r,gM,q3r,Sr,vx,j3r,k7e,D3r,G3r,fn,O3r,S7e,V3r,X3r,R7e,z3r,Q3r,P7e,W3r,H3r,U3r,Qe,hM,B7e,J3r,Y3r,FY,K3r,Z3r,e0r,pM,I7e,o0r,r0r,TY,t0r,a0r,n0r,Zs,N7e,s0r,l0r,MY,i0r,d0r,EY,c0r,f0r,m0r,_M,q7e,g0r,h0r,CY,p0r,_0r,u0r,uM,j7e,b0r,v0r,wY,F0r,T0r,M0r,bM,D7e,E0r,C0r,AY,w0r,A0r,L0r,vM,G7e,y0r,x0r,LY,$0r,k0r,S0r,FM,Uze,vc,TM,O7e,Fx,R0r,V7e,P0r,Jze,nr,Tx,B0r,Fc,I0r,yY,N0r,q0r,xY,j0r,D0r,G0r,Mx,O0r,X7e,V0r,X0r,z0r,Nt,Ex,Q0r,z7e,W0r,H0r,Tc,U0r,Q7e,J0r,Y0r,$Y,K0r,Z0r,ewr,MM,owr,Rr,Cx,rwr,W7e,twr,awr,mn,nwr,H7e,swr,lwr,U7e,iwr,dwr,J7e,cwr,fwr,mwr,ie,EM,Y7e,gwr,hwr,kY,pwr,_wr,uwr,CM,K7e,bwr,vwr,SY,Fwr,Twr,Mwr,wM,Z7e,Ewr,Cwr,RY,wwr,Awr,Lwr,AM,e9e,ywr,xwr,PY,$wr,kwr,Swr,LM,o9e,Rwr,Pwr,BY,Bwr,Iwr,Nwr,yM,r9e,qwr,jwr,IY,Dwr,Gwr,Owr,xM,t9e,Vwr,Xwr,NY,zwr,Qwr,Wwr,$M,a9e,Hwr,Uwr,qY,Jwr,Ywr,Kwr,kM,n9e,Zwr,eAr,jY,oAr,rAr,tAr,SM,s9e,aAr,nAr,DY,sAr,lAr,iAr,RM,l9e,dAr,cAr,GY,fAr,mAr,gAr,PM,i9e,hAr,pAr,OY,_Ar,uAr,bAr,BM,d9e,vAr,FAr,VY,TAr,MAr,EAr,IM,c9e,CAr,wAr,XY,AAr,LAr,yAr,NM,f9e,xAr,$Ar,zY,kAr,SAr,RAr,qM,m9e,PAr,BAr,QY,IAr,NAr,qAr,jM,g9e,jAr,DAr,WY,GAr,OAr,VAr,DM,h9e,XAr,zAr,HY,QAr,WAr,HAr,GM,p9e,UAr,JAr,UY,YAr,KAr,ZAr,OM,_9e,eLr,oLr,JY,rLr,tLr,aLr,VM,Yze,Mc,XM,u9e,wx,nLr,b9e,sLr,Kze,sr,Ax,lLr,Ec,iLr,YY,dLr,cLr,KY,fLr,mLr,gLr,Lx,hLr,v9e,pLr,_Lr,uLr,qt,yx,bLr,F9e,vLr,FLr,Cc,TLr,T9e,MLr,ELr,ZY,CLr,wLr,ALr,zM,LLr,Pr,xx,yLr,M9e,xLr,$Lr,gn,kLr,E9e,SLr,RLr,C9e,PLr,BLr,w9e,ILr,NLr,qLr,ye,QM,A9e,jLr,DLr,eK,GLr,OLr,VLr,WM,L9e,XLr,zLr,oK,QLr,WLr,HLr,HM,y9e,ULr,JLr,rK,YLr,KLr,ZLr,UM,x9e,eyr,oyr,tK,ryr,tyr,ayr,JM,$9e,nyr,syr,aK,lyr,iyr,dyr,YM,k9e,cyr,fyr,nK,myr,gyr,hyr,KM,S9e,pyr,_yr,sK,uyr,byr,vyr,ZM,R9e,Fyr,Tyr,lK,Myr,Eyr,Cyr,eE,P9e,wyr,Ayr,iK,Lyr,yyr,xyr,oE,B9e,$yr,kyr,dK,Syr,Ryr,Pyr,rE,Zze,wc,tE,I9e,$x,Byr,N9e,Iyr,eQe,lr,kx,Nyr,Ac,qyr,cK,jyr,Dyr,fK,Gyr,Oyr,Vyr,Sx,Xyr,q9e,zyr,Qyr,Wyr,jt,Rx,Hyr,j9e,Uyr,Jyr,Lc,Yyr,D9e,Kyr,Zyr,mK,e8r,o8r,r8r,aE,t8r,Br,Px,a8r,G9e,n8r,s8r,hn,l8r,O9e,i8r,d8r,V9e,c8r,f8r,X9e,m8r,g8r,h8r,te,nE,z9e,p8r,_8r,gK,u8r,b8r,v8r,sE,Q9e,F8r,T8r,hK,M8r,E8r,C8r,lE,W9e,w8r,A8r,pK,L8r,y8r,x8r,iE,H9e,$8r,k8r,_K,S8r,R8r,P8r,dE,U9e,B8r,I8r,uK,N8r,q8r,j8r,cE,J9e,D8r,G8r,bK,O8r,V8r,X8r,fE,Y9e,z8r,Q8r,vK,W8r,H8r,U8r,mE,K9e,J8r,Y8r,FK,K8r,Z8r,exr,gE,Z9e,oxr,rxr,TK,txr,axr,nxr,hE,eMe,sxr,lxr,MK,ixr,dxr,cxr,pE,oMe,fxr,mxr,EK,gxr,hxr,pxr,_E,rMe,_xr,uxr,CK,bxr,vxr,Fxr,uE,tMe,Txr,Mxr,wK,Exr,Cxr,wxr,bE,aMe,Axr,Lxr,AK,yxr,xxr,$xr,vE,nMe,kxr,Sxr,LK,Rxr,Pxr,Bxr,FE,sMe,Ixr,Nxr,yK,qxr,jxr,Dxr,TE,lMe,Gxr,Oxr,xK,Vxr,Xxr,zxr,ME,iMe,Qxr,Wxr,$K,Hxr,Uxr,Jxr,EE,dMe,Yxr,Kxr,kK,Zxr,e$r,o$r,CE,cMe,r$r,t$r,SK,a$r,n$r,s$r,wE,fMe,l$r,i$r,RK,d$r,c$r,f$r,AE,mMe,m$r,g$r,PK,h$r,p$r,_$r,LE,gMe,u$r,b$r,BK,v$r,F$r,T$r,yE,hMe,M$r,E$r,IK,C$r,w$r,A$r,xE,pMe,L$r,y$r,NK,x$r,$$r,k$r,$E,_Me,S$r,R$r,qK,P$r,B$r,I$r,kE,oQe,yc,SE,uMe,Bx,N$r,bMe,q$r,rQe,ir,Ix,j$r,xc,D$r,jK,G$r,O$r,DK,V$r,X$r,z$r,Nx,Q$r,vMe,W$r,H$r,U$r,Dt,qx,J$r,FMe,Y$r,K$r,$c,Z$r,TMe,ekr,okr,GK,rkr,tkr,akr,RE,nkr,Ir,jx,skr,MMe,lkr,ikr,pn,dkr,EMe,ckr,fkr,CMe,mkr,gkr,wMe,hkr,pkr,_kr,be,PE,AMe,ukr,bkr,OK,vkr,Fkr,Tkr,BE,LMe,Mkr,Ekr,VK,Ckr,wkr,Akr,IE,yMe,Lkr,ykr,XK,xkr,$kr,kkr,NE,xMe,Skr,Rkr,zK,Pkr,Bkr,Ikr,qE,$Me,Nkr,qkr,QK,jkr,Dkr,Gkr,jE,kMe,Okr,Vkr,WK,Xkr,zkr,Qkr,DE,SMe,Wkr,Hkr,HK,Ukr,Jkr,Ykr,GE,RMe,Kkr,Zkr,UK,eSr,oSr,rSr,OE,PMe,tSr,aSr,JK,nSr,sSr,lSr,VE,BMe,iSr,dSr,YK,cSr,fSr,mSr,XE,IMe,gSr,hSr,KK,pSr,_Sr,uSr,zE,NMe,bSr,vSr,ZK,FSr,TSr,MSr,QE,qMe,ESr,CSr,eZ,wSr,ASr,LSr,WE,jMe,ySr,xSr,oZ,$Sr,kSr,SSr,HE,DMe,RSr,PSr,rZ,BSr,ISr,NSr,UE,GMe,qSr,jSr,tZ,DSr,GSr,OSr,JE,OMe,VSr,XSr,aZ,zSr,QSr,WSr,YE,tQe,kc,KE,VMe,Dx,HSr,XMe,USr,aQe,dr,Gx,JSr,Sc,YSr,nZ,KSr,ZSr,sZ,eRr,oRr,rRr,Ox,tRr,zMe,aRr,nRr,sRr,Gt,Vx,lRr,QMe,iRr,dRr,Rc,cRr,WMe,fRr,mRr,lZ,gRr,hRr,pRr,ZE,_Rr,Nr,Xx,uRr,HMe,bRr,vRr,_n,FRr,UMe,TRr,MRr,JMe,ERr,CRr,YMe,wRr,ARr,LRr,zx,eC,KMe,yRr,xRr,iZ,$Rr,kRr,SRr,oC,ZMe,RRr,PRr,dZ,BRr,IRr,NRr,rC,nQe,Pc,tC,eEe,Qx,qRr,oEe,jRr,sQe,cr,Wx,DRr,Bc,GRr,cZ,ORr,VRr,fZ,XRr,zRr,QRr,Hx,WRr,rEe,HRr,URr,JRr,Ot,Ux,YRr,tEe,KRr,ZRr,Ic,ePr,aEe,oPr,rPr,mZ,tPr,aPr,nPr,aC,sPr,qr,Jx,lPr,nEe,iPr,dPr,un,cPr,sEe,fPr,mPr,lEe,gPr,hPr,iEe,pPr,_Pr,uPr,dEe,nC,cEe,bPr,vPr,gZ,FPr,TPr,MPr,sC,lQe,Nc,lC,fEe,Yx,EPr,mEe,CPr,iQe,fr,Kx,wPr,qc,APr,hZ,LPr,yPr,pZ,xPr,$Pr,kPr,Zx,SPr,gEe,RPr,PPr,BPr,Vt,e$,IPr,hEe,NPr,qPr,jc,jPr,pEe,DPr,GPr,_Z,OPr,VPr,XPr,iC,zPr,jr,o$,QPr,_Ee,WPr,HPr,bn,UPr,uEe,JPr,YPr,bEe,KPr,ZPr,vEe,eBr,oBr,rBr,de,dC,FEe,tBr,aBr,uZ,nBr,sBr,lBr,cC,TEe,iBr,dBr,bZ,cBr,fBr,mBr,fC,MEe,gBr,hBr,vZ,pBr,_Br,uBr,mC,EEe,bBr,vBr,FZ,FBr,TBr,MBr,gC,CEe,EBr,CBr,TZ,wBr,ABr,LBr,hC,wEe,yBr,xBr,MZ,$Br,kBr,SBr,pC,AEe,RBr,PBr,EZ,BBr,IBr,NBr,_C,LEe,qBr,jBr,CZ,DBr,GBr,OBr,uC,yEe,VBr,XBr,wZ,zBr,QBr,WBr,bC,xEe,HBr,UBr,AZ,JBr,YBr,KBr,vC,$Ee,ZBr,eIr,LZ,oIr,rIr,tIr,FC,kEe,aIr,nIr,yZ,sIr,lIr,iIr,TC,SEe,dIr,cIr,xZ,fIr,mIr,gIr,MC,REe,hIr,pIr,$Z,_Ir,uIr,bIr,EC,PEe,vIr,FIr,kZ,TIr,MIr,EIr,CC,BEe,CIr,wIr,SZ,AIr,LIr,yIr,wC,IEe,xIr,$Ir,RZ,kIr,SIr,RIr,AC,NEe,PIr,BIr,PZ,IIr,NIr,qIr,LC,qEe,jIr,DIr,BZ,GIr,OIr,VIr,yC,jEe,XIr,zIr,IZ,QIr,WIr,HIr,xC,dQe,Dc,$C,DEe,r$,UIr,GEe,JIr,cQe,mr,t$,YIr,Gc,KIr,NZ,ZIr,eNr,qZ,oNr,rNr,tNr,a$,aNr,OEe,nNr,sNr,lNr,Xt,n$,iNr,VEe,dNr,cNr,Oc,fNr,XEe,mNr,gNr,jZ,hNr,pNr,_Nr,kC,uNr,Dr,s$,bNr,zEe,vNr,FNr,vn,TNr,QEe,MNr,ENr,WEe,CNr,wNr,HEe,ANr,LNr,yNr,ce,SC,UEe,xNr,$Nr,DZ,kNr,SNr,RNr,RC,JEe,PNr,BNr,GZ,INr,NNr,qNr,PC,YEe,jNr,DNr,OZ,GNr,ONr,VNr,BC,KEe,XNr,zNr,VZ,QNr,WNr,HNr,IC,ZEe,UNr,JNr,XZ,YNr,KNr,ZNr,NC,eCe,eqr,oqr,zZ,rqr,tqr,aqr,qC,oCe,nqr,sqr,QZ,lqr,iqr,dqr,jC,rCe,cqr,fqr,WZ,mqr,gqr,hqr,DC,tCe,pqr,_qr,HZ,uqr,bqr,vqr,GC,aCe,Fqr,Tqr,UZ,Mqr,Eqr,Cqr,OC,nCe,wqr,Aqr,JZ,Lqr,yqr,xqr,VC,sCe,$qr,kqr,YZ,Sqr,Rqr,Pqr,XC,lCe,Bqr,Iqr,KZ,Nqr,qqr,jqr,zC,iCe,Dqr,Gqr,ZZ,Oqr,Vqr,Xqr,QC,dCe,zqr,Qqr,eee,Wqr,Hqr,Uqr,WC,cCe,Jqr,Yqr,oee,Kqr,Zqr,ejr,HC,fCe,ojr,rjr,ree,tjr,ajr,njr,UC,mCe,sjr,ljr,tee,ijr,djr,cjr,JC,gCe,fjr,mjr,aee,gjr,hjr,pjr,YC,hCe,_jr,ujr,nee,bjr,vjr,Fjr,KC,fQe,Vc,ZC,pCe,l$,Tjr,_Ce,Mjr,mQe,gr,i$,Ejr,Xc,Cjr,see,wjr,Ajr,lee,Ljr,yjr,xjr,d$,$jr,uCe,kjr,Sjr,Rjr,zt,c$,Pjr,bCe,Bjr,Ijr,zc,Njr,vCe,qjr,jjr,iee,Djr,Gjr,Ojr,e5,Vjr,Gr,f$,Xjr,FCe,zjr,Qjr,Fn,Wjr,TCe,Hjr,Ujr,MCe,Jjr,Yjr,ECe,Kjr,Zjr,eDr,CCe,o5,wCe,oDr,rDr,dee,tDr,aDr,nDr,r5,gQe,Qc,t5,ACe,m$,sDr,LCe,lDr,hQe,hr,g$,iDr,Wc,dDr,cee,cDr,fDr,fee,mDr,gDr,hDr,h$,pDr,yCe,_Dr,uDr,bDr,Qt,p$,vDr,xCe,FDr,TDr,Hc,MDr,$Ce,EDr,CDr,mee,wDr,ADr,LDr,a5,yDr,Or,_$,xDr,kCe,$Dr,kDr,Tn,SDr,SCe,RDr,PDr,RCe,BDr,IDr,PCe,NDr,qDr,jDr,BCe,n5,ICe,DDr,GDr,gee,ODr,VDr,XDr,s5,pQe,Uc,l5,NCe,u$,zDr,qCe,QDr,_Qe,pr,b$,WDr,Jc,HDr,hee,UDr,JDr,pee,YDr,KDr,ZDr,v$,eGr,jCe,oGr,rGr,tGr,Wt,F$,aGr,DCe,nGr,sGr,Yc,lGr,GCe,iGr,dGr,_ee,cGr,fGr,mGr,i5,gGr,Vr,T$,hGr,OCe,pGr,_Gr,Mn,uGr,VCe,bGr,vGr,XCe,FGr,TGr,zCe,MGr,EGr,CGr,oe,d5,QCe,wGr,AGr,uee,LGr,yGr,xGr,c5,WCe,$Gr,kGr,bee,SGr,RGr,PGr,f5,HCe,BGr,IGr,vee,NGr,qGr,jGr,m5,UCe,DGr,GGr,Fee,OGr,VGr,XGr,g5,JCe,zGr,QGr,Tee,WGr,HGr,UGr,h5,YCe,JGr,YGr,Mee,KGr,ZGr,eOr,p5,KCe,oOr,rOr,Eee,tOr,aOr,nOr,_5,ZCe,sOr,lOr,Cee,iOr,dOr,cOr,u5,e5e,fOr,mOr,wee,gOr,hOr,pOr,b5,o5e,_Or,uOr,Aee,bOr,vOr,FOr,v5,r5e,TOr,MOr,Lee,EOr,COr,wOr,F5,t5e,AOr,LOr,yee,yOr,xOr,$Or,T5,a5e,kOr,SOr,xee,ROr,POr,BOr,M5,n5e,IOr,NOr,$ee,qOr,jOr,DOr,E5,s5e,GOr,OOr,kee,VOr,XOr,zOr,C5,l5e,QOr,WOr,See,HOr,UOr,JOr,w5,i5e,YOr,KOr,Ree,ZOr,eVr,oVr,A5,d5e,rVr,tVr,Pee,aVr,nVr,sVr,L5,c5e,lVr,iVr,Bee,dVr,cVr,fVr,y5,f5e,mVr,gVr,Iee,hVr,pVr,_Vr,x5,m5e,uVr,bVr,Nee,vVr,FVr,TVr,$5,g5e,MVr,EVr,qee,CVr,wVr,AVr,k5,h5e,LVr,yVr,jee,xVr,$Vr,kVr,S5,p5e,SVr,RVr,Dee,PVr,BVr,IVr,R5,_5e,NVr,qVr,Gee,jVr,DVr,GVr,P5,u5e,OVr,VVr,Oee,XVr,zVr,QVr,B5,b5e,WVr,HVr,Vee,UVr,JVr,YVr,I5,uQe,Kc,N5,v5e,M$,KVr,F5e,ZVr,bQe,_r,E$,eXr,Zc,oXr,Xee,rXr,tXr,zee,aXr,nXr,sXr,C$,lXr,T5e,iXr,dXr,cXr,Ht,w$,fXr,M5e,mXr,gXr,ef,hXr,E5e,pXr,_Xr,Qee,uXr,bXr,vXr,q5,FXr,Xr,A$,TXr,C5e,MXr,EXr,En,CXr,w5e,wXr,AXr,A5e,LXr,yXr,L5e,xXr,$Xr,kXr,xe,j5,y5e,SXr,RXr,Wee,PXr,BXr,IXr,D5,x5e,NXr,qXr,Hee,jXr,DXr,GXr,G5,$5e,OXr,VXr,Uee,XXr,zXr,QXr,O5,k5e,WXr,HXr,Jee,UXr,JXr,YXr,V5,S5e,KXr,ZXr,Yee,ezr,ozr,rzr,X5,R5e,tzr,azr,Kee,nzr,szr,lzr,z5,P5e,izr,dzr,Zee,czr,fzr,mzr,Q5,B5e,gzr,hzr,eoe,pzr,_zr,uzr,W5,I5e,bzr,vzr,ooe,Fzr,Tzr,Mzr,H5,N5e,Ezr,Czr,roe,wzr,Azr,Lzr,U5,vQe,of,J5,q5e,L$,yzr,j5e,xzr,FQe,ur,y$,$zr,rf,kzr,toe,Szr,Rzr,aoe,Pzr,Bzr,Izr,x$,Nzr,D5e,qzr,jzr,Dzr,Ut,$$,Gzr,G5e,Ozr,Vzr,tf,Xzr,O5e,zzr,Qzr,noe,Wzr,Hzr,Uzr,Y5,Jzr,zr,k$,Yzr,V5e,Kzr,Zzr,Cn,eQr,X5e,oQr,rQr,z5e,tQr,aQr,Q5e,nQr,sQr,lQr,Ee,K5,W5e,iQr,dQr,soe,cQr,fQr,mQr,Z5,H5e,gQr,hQr,loe,pQr,_Qr,uQr,e3,U5e,bQr,vQr,ioe,FQr,TQr,MQr,o3,J5e,EQr,CQr,doe,wQr,AQr,LQr,r3,Y5e,yQr,xQr,coe,$Qr,kQr,SQr,t3,K5e,RQr,PQr,foe,BQr,IQr,NQr,a3,Z5e,qQr,jQr,moe,DQr,GQr,OQr,n3,e3e,VQr,XQr,goe,zQr,QQr,WQr,s3,o3e,HQr,UQr,hoe,JQr,YQr,KQr,l3,r3e,ZQr,eWr,poe,oWr,rWr,tWr,i3,t3e,aWr,nWr,_oe,sWr,lWr,iWr,d3,a3e,dWr,cWr,uoe,fWr,mWr,gWr,c3,n3e,hWr,pWr,boe,_Wr,uWr,bWr,f3,TQe,af,m3,s3e,S$,vWr,l3e,FWr,MQe,br,R$,TWr,nf,MWr,voe,EWr,CWr,Foe,wWr,AWr,LWr,P$,yWr,i3e,xWr,$Wr,kWr,Jt,B$,SWr,d3e,RWr,PWr,sf,BWr,c3e,IWr,NWr,Toe,qWr,jWr,DWr,g3,GWr,Qr,I$,OWr,f3e,VWr,XWr,wn,zWr,m3e,QWr,WWr,g3e,HWr,UWr,h3e,JWr,YWr,KWr,$e,h3,p3e,ZWr,eHr,Moe,oHr,rHr,tHr,p3,_3e,aHr,nHr,Eoe,sHr,lHr,iHr,_3,u3e,dHr,cHr,Coe,fHr,mHr,gHr,u3,b3e,hHr,pHr,woe,_Hr,uHr,bHr,b3,v3e,vHr,FHr,Aoe,THr,MHr,EHr,v3,F3e,CHr,wHr,Loe,AHr,LHr,yHr,F3,T3e,xHr,$Hr,yoe,kHr,SHr,RHr,T3,M3e,PHr,BHr,xoe,IHr,NHr,qHr,M3,E3e,jHr,DHr,$oe,GHr,OHr,VHr,E3,C3e,XHr,zHr,koe,QHr,WHr,HHr,C3,EQe,lf,w3,w3e,N$,UHr,A3e,JHr,CQe,vr,q$,YHr,df,KHr,Soe,ZHr,eUr,Roe,oUr,rUr,tUr,j$,aUr,L3e,nUr,sUr,lUr,Yt,D$,iUr,y3e,dUr,cUr,cf,fUr,x3e,mUr,gUr,Poe,hUr,pUr,_Ur,A3,uUr,Wr,G$,bUr,$3e,vUr,FUr,An,TUr,k3e,MUr,EUr,S3e,CUr,wUr,R3e,AUr,LUr,yUr,ke,L3,P3e,xUr,$Ur,Boe,kUr,SUr,RUr,y3,B3e,PUr,BUr,Ioe,IUr,NUr,qUr,x3,I3e,jUr,DUr,Noe,GUr,OUr,VUr,$3,N3e,XUr,zUr,qoe,QUr,WUr,HUr,k3,q3e,UUr,JUr,joe,YUr,KUr,ZUr,S3,j3e,eJr,oJr,Doe,rJr,tJr,aJr,R3,D3e,nJr,sJr,Goe,lJr,iJr,dJr,P3,G3e,cJr,fJr,Ooe,mJr,gJr,hJr,B3,O3e,pJr,_Jr,Voe,uJr,bJr,vJr,I3,V3e,FJr,TJr,Xoe,MJr,EJr,CJr,N3,wQe,ff,q3,X3e,O$,wJr,z3e,AJr,AQe,Fr,V$,LJr,mf,yJr,zoe,xJr,$Jr,Qoe,kJr,SJr,RJr,X$,PJr,Q3e,BJr,IJr,NJr,Kt,z$,qJr,W3e,jJr,DJr,gf,GJr,H3e,OJr,VJr,Woe,XJr,zJr,QJr,j3,WJr,Hr,Q$,HJr,U3e,UJr,JJr,Ln,YJr,J3e,KJr,ZJr,Y3e,eYr,oYr,K3e,rYr,tYr,aYr,Se,D3,Z3e,nYr,sYr,Hoe,lYr,iYr,dYr,G3,e0e,cYr,fYr,Uoe,mYr,gYr,hYr,O3,o0e,pYr,_Yr,Joe,uYr,bYr,vYr,V3,r0e,FYr,TYr,Yoe,MYr,EYr,CYr,X3,t0e,wYr,AYr,Koe,LYr,yYr,xYr,z3,a0e,$Yr,kYr,Zoe,SYr,RYr,PYr,Q3,n0e,BYr,IYr,ere,NYr,qYr,jYr,W3,s0e,DYr,GYr,ore,OYr,VYr,XYr,H3,l0e,zYr,QYr,rre,WYr,HYr,UYr,U3,i0e,JYr,YYr,tre,KYr,ZYr,eKr,J3,LQe,hf,Y3,d0e,W$,oKr,c0e,rKr,yQe,Tr,H$,tKr,pf,aKr,are,nKr,sKr,nre,lKr,iKr,dKr,U$,cKr,f0e,fKr,mKr,gKr,Zt,J$,hKr,m0e,pKr,_Kr,_f,uKr,g0e,bKr,vKr,sre,FKr,TKr,MKr,K3,EKr,Ur,Y$,CKr,h0e,wKr,AKr,yn,LKr,p0e,yKr,xKr,_0e,$Kr,kKr,u0e,SKr,RKr,PKr,Re,Z3,b0e,BKr,IKr,lre,NKr,qKr,jKr,e0,v0e,DKr,GKr,ire,OKr,VKr,XKr,o0,F0e,zKr,QKr,dre,WKr,HKr,UKr,r0,T0e,JKr,YKr,cre,KKr,ZKr,eZr,t0,M0e,oZr,rZr,fre,tZr,aZr,nZr,a0,E0e,sZr,lZr,mre,iZr,dZr,cZr,n0,C0e,fZr,mZr,gre,gZr,hZr,pZr,s0,w0e,_Zr,uZr,hre,bZr,vZr,FZr,l0,A0e,TZr,MZr,pre,EZr,CZr,wZr,i0,L0e,AZr,LZr,_re,yZr,xZr,$Zr,d0,xQe,uf,c0,y0e,K$,kZr,x0e,SZr,$Qe,Mr,Z$,RZr,bf,PZr,ure,BZr,IZr,bre,NZr,qZr,jZr,ek,DZr,$0e,GZr,OZr,VZr,ea,ok,XZr,k0e,zZr,QZr,vf,WZr,S0e,HZr,UZr,vre,JZr,YZr,KZr,f0,ZZr,Jr,rk,eet,R0e,oet,ret,xn,tet,P0e,aet,net,B0e,set,iet,I0e,det,cet,fet,Ve,m0,N0e,met,get,Fre,het,pet,_et,g0,q0e,uet,bet,Tre,vet,Fet,Tet,h0,j0e,Met,Eet,Mre,Cet,wet,Aet,p0,D0e,Let,yet,Ere,xet,$et,ket,_0,G0e,Set,Ret,Cre,Pet,Bet,Iet,u0,O0e,Net,qet,wre,jet,Det,Get,b0,V0e,Oet,Vet,Are,Xet,zet,Qet,v0,X0e,Wet,Het,Lre,Uet,Jet,Yet,F0,kQe,Ff,T0,z0e,tk,Ket,Q0e,Zet,SQe,Er,ak,eot,Tf,oot,yre,rot,tot,xre,aot,not,sot,nk,lot,W0e,iot,dot,cot,oa,sk,fot,H0e,mot,got,Mf,hot,U0e,pot,_ot,$re,uot,bot,vot,M0,Fot,Yr,lk,Tot,J0e,Mot,Eot,$n,Cot,Y0e,wot,Aot,K0e,Lot,yot,Z0e,xot,$ot,kot,Xe,E0,ewe,Sot,Rot,kre,Pot,Bot,Iot,C0,owe,Not,qot,Sre,jot,Dot,Got,w0,rwe,Oot,Vot,Rre,Xot,zot,Qot,A0,twe,Wot,Hot,Pre,Uot,Jot,Yot,L0,awe,Kot,Zot,Bre,ert,ort,rrt,y0,nwe,trt,art,Ire,nrt,srt,lrt,x0,swe,irt,drt,Nre,crt,frt,mrt,$0,lwe,grt,hrt,qre,prt,_rt,urt,k0,RQe,Ef,S0,iwe,ik,brt,dwe,vrt,PQe,Cr,dk,Frt,Cf,Trt,jre,Mrt,Ert,Dre,Crt,wrt,Art,ck,Lrt,cwe,yrt,xrt,$rt,ra,fk,krt,fwe,Srt,Rrt,wf,Prt,mwe,Brt,Irt,Gre,Nrt,qrt,jrt,R0,Drt,Kr,mk,Grt,gwe,Ort,Vrt,kn,Xrt,hwe,zrt,Qrt,pwe,Wrt,Hrt,_we,Urt,Jrt,Yrt,uwe,P0,bwe,Krt,Zrt,Ore,ett,ott,rtt,B0,BQe,Af,I0,vwe,gk,ttt,Fwe,att,IQe,wr,hk,ntt,Lf,stt,Vre,ltt,itt,Xre,dtt,ctt,ftt,pk,mtt,Twe,gtt,htt,ptt,ta,_k,_tt,Mwe,utt,btt,yf,vtt,Ewe,Ftt,Ttt,zre,Mtt,Ett,Ctt,N0,wtt,Zr,uk,Att,Cwe,Ltt,ytt,Sn,xtt,wwe,$tt,ktt,Awe,Stt,Rtt,Lwe,Ptt,Btt,Itt,bk,q0,ywe,Ntt,qtt,Qre,jtt,Dtt,Gtt,j0,xwe,Ott,Vtt,Wre,Xtt,ztt,Qtt,D0,NQe,xf,G0,$we,vk,Wtt,kwe,Htt,qQe,Ar,Fk,Utt,$f,Jtt,Hre,Ytt,Ktt,Ure,Ztt,eat,oat,Tk,rat,Swe,tat,aat,nat,aa,Mk,sat,Rwe,lat,iat,kf,dat,Pwe,cat,fat,Jre,mat,gat,hat,O0,pat,et,Ek,_at,Bwe,uat,bat,Rn,vat,Iwe,Fat,Tat,Nwe,Mat,Eat,qwe,Cat,wat,Aat,jwe,V0,Dwe,Lat,yat,Yre,xat,$at,kat,X0,jQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),hL=new re({}),pL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Df=new Sat({props:{warning:!0,$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L614"}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L637"}}),Zg=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),TL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L760"}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L410"}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17469/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L424"}}),Bh=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),LL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L623"}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),vp=new Sat({props:{$$slots:{default:[RHt]},$$scope:{ctx:$}}}),Fp=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L89"}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L103"}}),Gp=new Sat({props:{$$slots:{default:[BHt]},$$scope:{ctx:$}}}),Op=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),jL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L256"}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L789"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),zp=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Yu=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),zL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L796"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Zu=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L811"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L818"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L825"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),W2=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L834"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),U2=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L879"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Jb=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L886"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L872"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L843"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L850"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L895"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Qy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L934"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L861"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L941"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L964"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L948"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),u8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L955"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),NT=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L973"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L980"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L927"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),j8=new re({}),D8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L902"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L909"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L918"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),w7=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),E9=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),w9=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),U9=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Y9=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),e$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),n$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),c$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),m$=new re({}),g$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),p$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iJt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),N$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),O$=new re({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),W$=new re({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),K$=new re({}),Z$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),tk=new re({}),ak=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),ik=new re({}),dk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),gk=new re({}),hk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),_k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),vk=new re({}),Fk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),Ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),xi=o("Auto Classes"),Bf=l(),lt=a("p"),$i=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),cL=o("from_pretrained()"),If=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Si=o("Instantiating one of "),Bn=a("a"),fL=o("AutoConfig"),In=o(", "),Nn=a("a"),mL=o("AutoModel"),Ri=o(`, and
`),qn=a("a"),gL=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),Nf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),QS=o("will create a model that is an instance of "),Bi=a("a"),WS=o("BertModel"),HS=o("."),wo=l(),Ra=a("p"),US=o("There is one class of "),qf=a("code"),JS=o("AutoModel"),UHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),PXe=l(),Ii=a("h2"),jf=a("a"),zae=a("span"),F(hL.$$.fragment),JHe=l(),Qae=a("span"),YHe=o("Extending the Auto Classes"),BXe=l(),jn=a("p"),KHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wae=a("code"),ZHe=o("NewModel"),eUe=o(", make sure you have a "),Hae=a("code"),oUe=o("NewModelConfig"),rUe=o(` then you can add those to the auto
classes like this:`),IXe=l(),F(pL.$$.fragment),NXe=l(),YS=a("p"),tUe=o("You will then be able to use the auto classes like you would usually do!"),qXe=l(),F(Df.$$.fragment),jXe=l(),Ni=a("h2"),Gf=a("a"),Uae=a("span"),F(_L.$$.fragment),aUe=l(),Jae=a("span"),nUe=o("AutoConfig"),DXe=l(),Ao=a("div"),F(uL.$$.fragment),sUe=l(),bL=a("p"),lUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),KS=a("a"),iUe=o("from_pretrained()"),dUe=o(" class method."),cUe=l(),vL=a("p"),fUe=o("This class cannot be instantiated directly using "),Yae=a("code"),mUe=o("__init__()"),gUe=o(" (throws an error)."),hUe=l(),Lr=a("div"),F(FL.$$.fragment),pUe=l(),Kae=a("p"),_Ue=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),uUe=l(),qi=a("p"),bUe=o("The configuration class to instantiate is selected based on the "),Zae=a("code"),vUe=o("model_type"),FUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ene=a("code"),TUe=o("pretrained_model_name_or_path"),MUe=o(":"),EUe=l(),A=a("ul"),Of=a("li"),one=a("strong"),CUe=o("albert"),wUe=o(" \u2014 "),ZS=a("a"),AUe=o("AlbertConfig"),LUe=o(" (ALBERT model)"),yUe=l(),Vf=a("li"),rne=a("strong"),xUe=o("bart"),$Ue=o(" \u2014 "),eR=a("a"),kUe=o("BartConfig"),SUe=o(" (BART model)"),RUe=l(),Xf=a("li"),tne=a("strong"),PUe=o("beit"),BUe=o(" \u2014 "),oR=a("a"),IUe=o("BeitConfig"),NUe=o(" (BEiT model)"),qUe=l(),zf=a("li"),ane=a("strong"),jUe=o("bert"),DUe=o(" \u2014 "),rR=a("a"),GUe=o("BertConfig"),OUe=o(" (BERT model)"),VUe=l(),Qf=a("li"),nne=a("strong"),XUe=o("bert-generation"),zUe=o(" \u2014 "),tR=a("a"),QUe=o("BertGenerationConfig"),WUe=o(" (Bert Generation model)"),HUe=l(),Wf=a("li"),sne=a("strong"),UUe=o("big_bird"),JUe=o(" \u2014 "),aR=a("a"),YUe=o("BigBirdConfig"),KUe=o(" (BigBird model)"),ZUe=l(),Hf=a("li"),lne=a("strong"),eJe=o("bigbird_pegasus"),oJe=o(" \u2014 "),nR=a("a"),rJe=o("BigBirdPegasusConfig"),tJe=o(" (BigBird-Pegasus model)"),aJe=l(),Uf=a("li"),ine=a("strong"),nJe=o("blenderbot"),sJe=o(" \u2014 "),sR=a("a"),lJe=o("BlenderbotConfig"),iJe=o(" (Blenderbot model)"),dJe=l(),Jf=a("li"),dne=a("strong"),cJe=o("blenderbot-small"),fJe=o(" \u2014 "),lR=a("a"),mJe=o("BlenderbotSmallConfig"),gJe=o(" (BlenderbotSmall model)"),hJe=l(),Yf=a("li"),cne=a("strong"),pJe=o("bloom"),_Je=o(" \u2014 "),iR=a("a"),uJe=o("BloomConfig"),bJe=o(" (BLOOM model)"),vJe=l(),Kf=a("li"),fne=a("strong"),FJe=o("camembert"),TJe=o(" \u2014 "),dR=a("a"),MJe=o("CamembertConfig"),EJe=o(" (CamemBERT model)"),CJe=l(),Zf=a("li"),mne=a("strong"),wJe=o("canine"),AJe=o(" \u2014 "),cR=a("a"),LJe=o("CanineConfig"),yJe=o(" (CANINE model)"),xJe=l(),em=a("li"),gne=a("strong"),$Je=o("clip"),kJe=o(" \u2014 "),fR=a("a"),SJe=o("CLIPConfig"),RJe=o(" (CLIP model)"),PJe=l(),om=a("li"),hne=a("strong"),BJe=o("codegen"),IJe=o(" \u2014 "),mR=a("a"),NJe=o("CodeGenConfig"),qJe=o(" (CodeGen model)"),jJe=l(),rm=a("li"),pne=a("strong"),DJe=o("convbert"),GJe=o(" \u2014 "),gR=a("a"),OJe=o("ConvBertConfig"),VJe=o(" (ConvBERT model)"),XJe=l(),tm=a("li"),_ne=a("strong"),zJe=o("convnext"),QJe=o(" \u2014 "),hR=a("a"),WJe=o("ConvNextConfig"),HJe=o(" (ConvNeXT model)"),UJe=l(),am=a("li"),une=a("strong"),JJe=o("ctrl"),YJe=o(" \u2014 "),pR=a("a"),KJe=o("CTRLConfig"),ZJe=o(" (CTRL model)"),eYe=l(),nm=a("li"),bne=a("strong"),oYe=o("cvt"),rYe=o(" \u2014 "),_R=a("a"),tYe=o("CvtConfig"),aYe=o(" (CvT model)"),nYe=l(),sm=a("li"),vne=a("strong"),sYe=o("data2vec-audio"),lYe=o(" \u2014 "),uR=a("a"),iYe=o("Data2VecAudioConfig"),dYe=o(" (Data2VecAudio model)"),cYe=l(),lm=a("li"),Fne=a("strong"),fYe=o("data2vec-text"),mYe=o(" \u2014 "),bR=a("a"),gYe=o("Data2VecTextConfig"),hYe=o(" (Data2VecText model)"),pYe=l(),im=a("li"),Tne=a("strong"),_Ye=o("data2vec-vision"),uYe=o(" \u2014 "),vR=a("a"),bYe=o("Data2VecVisionConfig"),vYe=o(" (Data2VecVision model)"),FYe=l(),dm=a("li"),Mne=a("strong"),TYe=o("deberta"),MYe=o(" \u2014 "),FR=a("a"),EYe=o("DebertaConfig"),CYe=o(" (DeBERTa model)"),wYe=l(),cm=a("li"),Ene=a("strong"),AYe=o("deberta-v2"),LYe=o(" \u2014 "),TR=a("a"),yYe=o("DebertaV2Config"),xYe=o(" (DeBERTa-v2 model)"),$Ye=l(),fm=a("li"),Cne=a("strong"),kYe=o("decision_transformer"),SYe=o(" \u2014 "),MR=a("a"),RYe=o("DecisionTransformerConfig"),PYe=o(" (Decision Transformer model)"),BYe=l(),mm=a("li"),wne=a("strong"),IYe=o("deit"),NYe=o(" \u2014 "),ER=a("a"),qYe=o("DeiTConfig"),jYe=o(" (DeiT model)"),DYe=l(),gm=a("li"),Ane=a("strong"),GYe=o("detr"),OYe=o(" \u2014 "),CR=a("a"),VYe=o("DetrConfig"),XYe=o(" (DETR model)"),zYe=l(),hm=a("li"),Lne=a("strong"),QYe=o("distilbert"),WYe=o(" \u2014 "),wR=a("a"),HYe=o("DistilBertConfig"),UYe=o(" (DistilBERT model)"),JYe=l(),pm=a("li"),yne=a("strong"),YYe=o("dpr"),KYe=o(" \u2014 "),AR=a("a"),ZYe=o("DPRConfig"),eKe=o(" (DPR model)"),oKe=l(),_m=a("li"),xne=a("strong"),rKe=o("dpt"),tKe=o(" \u2014 "),LR=a("a"),aKe=o("DPTConfig"),nKe=o(" (DPT model)"),sKe=l(),um=a("li"),$ne=a("strong"),lKe=o("electra"),iKe=o(" \u2014 "),yR=a("a"),dKe=o("ElectraConfig"),cKe=o(" (ELECTRA model)"),fKe=l(),bm=a("li"),kne=a("strong"),mKe=o("encoder-decoder"),gKe=o(" \u2014 "),xR=a("a"),hKe=o("EncoderDecoderConfig"),pKe=o(" (Encoder decoder model)"),_Ke=l(),vm=a("li"),Sne=a("strong"),uKe=o("flaubert"),bKe=o(" \u2014 "),$R=a("a"),vKe=o("FlaubertConfig"),FKe=o(" (FlauBERT model)"),TKe=l(),Fm=a("li"),Rne=a("strong"),MKe=o("flava"),EKe=o(" \u2014 "),kR=a("a"),CKe=o("FlavaConfig"),wKe=o(" (FLAVA model)"),AKe=l(),Tm=a("li"),Pne=a("strong"),LKe=o("fnet"),yKe=o(" \u2014 "),SR=a("a"),xKe=o("FNetConfig"),$Ke=o(" (FNet model)"),kKe=l(),Mm=a("li"),Bne=a("strong"),SKe=o("fsmt"),RKe=o(" \u2014 "),RR=a("a"),PKe=o("FSMTConfig"),BKe=o(" (FairSeq Machine-Translation model)"),IKe=l(),Em=a("li"),Ine=a("strong"),NKe=o("funnel"),qKe=o(" \u2014 "),PR=a("a"),jKe=o("FunnelConfig"),DKe=o(" (Funnel Transformer model)"),GKe=l(),Cm=a("li"),Nne=a("strong"),OKe=o("glpn"),VKe=o(" \u2014 "),BR=a("a"),XKe=o("GLPNConfig"),zKe=o(" (GLPN model)"),QKe=l(),wm=a("li"),qne=a("strong"),WKe=o("gpt2"),HKe=o(" \u2014 "),IR=a("a"),UKe=o("GPT2Config"),JKe=o(" (OpenAI GPT-2 model)"),YKe=l(),Am=a("li"),jne=a("strong"),KKe=o("gpt_neo"),ZKe=o(" \u2014 "),NR=a("a"),eZe=o("GPTNeoConfig"),oZe=o(" (GPT Neo model)"),rZe=l(),Lm=a("li"),Dne=a("strong"),tZe=o("gpt_neox"),aZe=o(" \u2014 "),qR=a("a"),nZe=o("GPTNeoXConfig"),sZe=o(" (GPT NeoX model)"),lZe=l(),ym=a("li"),Gne=a("strong"),iZe=o("gptj"),dZe=o(" \u2014 "),jR=a("a"),cZe=o("GPTJConfig"),fZe=o(" (GPT-J model)"),mZe=l(),xm=a("li"),One=a("strong"),gZe=o("groupvit"),hZe=o(" \u2014 "),DR=a("a"),pZe=o("GroupViTConfig"),_Ze=o(" (GroupViT model)"),uZe=l(),$m=a("li"),Vne=a("strong"),bZe=o("hubert"),vZe=o(" \u2014 "),GR=a("a"),FZe=o("HubertConfig"),TZe=o(" (Hubert model)"),MZe=l(),km=a("li"),Xne=a("strong"),EZe=o("ibert"),CZe=o(" \u2014 "),OR=a("a"),wZe=o("IBertConfig"),AZe=o(" (I-BERT model)"),LZe=l(),Sm=a("li"),zne=a("strong"),yZe=o("imagegpt"),xZe=o(" \u2014 "),VR=a("a"),$Ze=o("ImageGPTConfig"),kZe=o(" (ImageGPT model)"),SZe=l(),Rm=a("li"),Qne=a("strong"),RZe=o("layoutlm"),PZe=o(" \u2014 "),XR=a("a"),BZe=o("LayoutLMConfig"),IZe=o(" (LayoutLM model)"),NZe=l(),Pm=a("li"),Wne=a("strong"),qZe=o("layoutlmv2"),jZe=o(" \u2014 "),zR=a("a"),DZe=o("LayoutLMv2Config"),GZe=o(" (LayoutLMv2 model)"),OZe=l(),Bm=a("li"),Hne=a("strong"),VZe=o("layoutlmv3"),XZe=o(" \u2014 "),QR=a("a"),zZe=o("LayoutLMv3Config"),QZe=o(" (LayoutLMv3 model)"),WZe=l(),Im=a("li"),Une=a("strong"),HZe=o("led"),UZe=o(" \u2014 "),WR=a("a"),JZe=o("LEDConfig"),YZe=o(" (LED model)"),KZe=l(),Nm=a("li"),Jne=a("strong"),ZZe=o("levit"),eeo=o(" \u2014 "),HR=a("a"),oeo=o("LevitConfig"),reo=o(" (LeViT model)"),teo=l(),qm=a("li"),Yne=a("strong"),aeo=o("longformer"),neo=o(" \u2014 "),UR=a("a"),seo=o("LongformerConfig"),leo=o(" (Longformer model)"),ieo=l(),jm=a("li"),Kne=a("strong"),deo=o("longt5"),ceo=o(" \u2014 "),JR=a("a"),feo=o("LongT5Config"),meo=o(" (LongT5 model)"),geo=l(),Dm=a("li"),Zne=a("strong"),heo=o("luke"),peo=o(" \u2014 "),YR=a("a"),_eo=o("LukeConfig"),ueo=o(" (LUKE model)"),beo=l(),Gm=a("li"),ese=a("strong"),veo=o("lxmert"),Feo=o(" \u2014 "),KR=a("a"),Teo=o("LxmertConfig"),Meo=o(" (LXMERT model)"),Eeo=l(),Om=a("li"),ose=a("strong"),Ceo=o("m2m_100"),weo=o(" \u2014 "),ZR=a("a"),Aeo=o("M2M100Config"),Leo=o(" (M2M100 model)"),yeo=l(),Vm=a("li"),rse=a("strong"),xeo=o("marian"),$eo=o(" \u2014 "),eP=a("a"),keo=o("MarianConfig"),Seo=o(" (Marian model)"),Reo=l(),Xm=a("li"),tse=a("strong"),Peo=o("maskformer"),Beo=o(" \u2014 "),oP=a("a"),Ieo=o("MaskFormerConfig"),Neo=o(" (MaskFormer model)"),qeo=l(),zm=a("li"),ase=a("strong"),jeo=o("mbart"),Deo=o(" \u2014 "),rP=a("a"),Geo=o("MBartConfig"),Oeo=o(" (mBART model)"),Veo=l(),Qm=a("li"),nse=a("strong"),Xeo=o("mctct"),zeo=o(" \u2014 "),tP=a("a"),Qeo=o("MCTCTConfig"),Weo=o(" (M-CTC-T model)"),Heo=l(),Wm=a("li"),sse=a("strong"),Ueo=o("megatron-bert"),Jeo=o(" \u2014 "),aP=a("a"),Yeo=o("MegatronBertConfig"),Keo=o(" (Megatron-BERT model)"),Zeo=l(),Hm=a("li"),lse=a("strong"),eoo=o("mobilebert"),ooo=o(" \u2014 "),nP=a("a"),roo=o("MobileBertConfig"),too=o(" (MobileBERT model)"),aoo=l(),Um=a("li"),ise=a("strong"),noo=o("mobilevit"),soo=o(" \u2014 "),sP=a("a"),loo=o("MobileViTConfig"),ioo=o(" (MobileViT model)"),doo=l(),Jm=a("li"),dse=a("strong"),coo=o("mpnet"),foo=o(" \u2014 "),lP=a("a"),moo=o("MPNetConfig"),goo=o(" (MPNet model)"),hoo=l(),Ym=a("li"),cse=a("strong"),poo=o("mt5"),_oo=o(" \u2014 "),iP=a("a"),uoo=o("MT5Config"),boo=o(" (MT5 model)"),voo=l(),Km=a("li"),fse=a("strong"),Foo=o("mvp"),Too=o(" \u2014 "),dP=a("a"),Moo=o("MvpConfig"),Eoo=o(" (MVP model)"),Coo=l(),Zm=a("li"),mse=a("strong"),woo=o("nezha"),Aoo=o(" \u2014 "),cP=a("a"),Loo=o("NezhaConfig"),yoo=o(" (Nezha model)"),xoo=l(),eg=a("li"),gse=a("strong"),$oo=o("nystromformer"),koo=o(" \u2014 "),fP=a("a"),Soo=o("NystromformerConfig"),Roo=o(" (Nystr\xF6mformer model)"),Poo=l(),og=a("li"),hse=a("strong"),Boo=o("openai-gpt"),Ioo=o(" \u2014 "),mP=a("a"),Noo=o("OpenAIGPTConfig"),qoo=o(" (OpenAI GPT model)"),joo=l(),rg=a("li"),pse=a("strong"),Doo=o("opt"),Goo=o(" \u2014 "),gP=a("a"),Ooo=o("OPTConfig"),Voo=o(" (OPT model)"),Xoo=l(),tg=a("li"),_se=a("strong"),zoo=o("pegasus"),Qoo=o(" \u2014 "),hP=a("a"),Woo=o("PegasusConfig"),Hoo=o(" (Pegasus model)"),Uoo=l(),ag=a("li"),use=a("strong"),Joo=o("perceiver"),Yoo=o(" \u2014 "),pP=a("a"),Koo=o("PerceiverConfig"),Zoo=o(" (Perceiver model)"),ero=l(),ng=a("li"),bse=a("strong"),oro=o("plbart"),rro=o(" \u2014 "),_P=a("a"),tro=o("PLBartConfig"),aro=o(" (PLBart model)"),nro=l(),sg=a("li"),vse=a("strong"),sro=o("poolformer"),lro=o(" \u2014 "),uP=a("a"),iro=o("PoolFormerConfig"),dro=o(" (PoolFormer model)"),cro=l(),lg=a("li"),Fse=a("strong"),fro=o("prophetnet"),mro=o(" \u2014 "),bP=a("a"),gro=o("ProphetNetConfig"),hro=o(" (ProphetNet model)"),pro=l(),ig=a("li"),Tse=a("strong"),_ro=o("qdqbert"),uro=o(" \u2014 "),vP=a("a"),bro=o("QDQBertConfig"),vro=o(" (QDQBert model)"),Fro=l(),dg=a("li"),Mse=a("strong"),Tro=o("rag"),Mro=o(" \u2014 "),FP=a("a"),Ero=o("RagConfig"),Cro=o(" (RAG model)"),wro=l(),cg=a("li"),Ese=a("strong"),Aro=o("realm"),Lro=o(" \u2014 "),TP=a("a"),yro=o("RealmConfig"),xro=o(" (REALM model)"),$ro=l(),fg=a("li"),Cse=a("strong"),kro=o("reformer"),Sro=o(" \u2014 "),MP=a("a"),Rro=o("ReformerConfig"),Pro=o(" (Reformer model)"),Bro=l(),mg=a("li"),wse=a("strong"),Iro=o("regnet"),Nro=o(" \u2014 "),EP=a("a"),qro=o("RegNetConfig"),jro=o(" (RegNet model)"),Dro=l(),gg=a("li"),Ase=a("strong"),Gro=o("rembert"),Oro=o(" \u2014 "),CP=a("a"),Vro=o("RemBertConfig"),Xro=o(" (RemBERT model)"),zro=l(),hg=a("li"),Lse=a("strong"),Qro=o("resnet"),Wro=o(" \u2014 "),wP=a("a"),Hro=o("ResNetConfig"),Uro=o(" (ResNet model)"),Jro=l(),pg=a("li"),yse=a("strong"),Yro=o("retribert"),Kro=o(" \u2014 "),AP=a("a"),Zro=o("RetriBertConfig"),eto=o(" (RetriBERT model)"),oto=l(),_g=a("li"),xse=a("strong"),rto=o("roberta"),tto=o(" \u2014 "),LP=a("a"),ato=o("RobertaConfig"),nto=o(" (RoBERTa model)"),sto=l(),ug=a("li"),$se=a("strong"),lto=o("roformer"),ito=o(" \u2014 "),yP=a("a"),dto=o("RoFormerConfig"),cto=o(" (RoFormer model)"),fto=l(),bg=a("li"),kse=a("strong"),mto=o("segformer"),gto=o(" \u2014 "),xP=a("a"),hto=o("SegformerConfig"),pto=o(" (SegFormer model)"),_to=l(),vg=a("li"),Sse=a("strong"),uto=o("sew"),bto=o(" \u2014 "),$P=a("a"),vto=o("SEWConfig"),Fto=o(" (SEW model)"),Tto=l(),Fg=a("li"),Rse=a("strong"),Mto=o("sew-d"),Eto=o(" \u2014 "),kP=a("a"),Cto=o("SEWDConfig"),wto=o(" (SEW-D model)"),Ato=l(),Tg=a("li"),Pse=a("strong"),Lto=o("speech-encoder-decoder"),yto=o(" \u2014 "),SP=a("a"),xto=o("SpeechEncoderDecoderConfig"),$to=o(" (Speech Encoder decoder model)"),kto=l(),Mg=a("li"),Bse=a("strong"),Sto=o("speech_to_text"),Rto=o(" \u2014 "),RP=a("a"),Pto=o("Speech2TextConfig"),Bto=o(" (Speech2Text model)"),Ito=l(),Eg=a("li"),Ise=a("strong"),Nto=o("speech_to_text_2"),qto=o(" \u2014 "),PP=a("a"),jto=o("Speech2Text2Config"),Dto=o(" (Speech2Text2 model)"),Gto=l(),Cg=a("li"),Nse=a("strong"),Oto=o("splinter"),Vto=o(" \u2014 "),BP=a("a"),Xto=o("SplinterConfig"),zto=o(" (Splinter model)"),Qto=l(),wg=a("li"),qse=a("strong"),Wto=o("squeezebert"),Hto=o(" \u2014 "),IP=a("a"),Uto=o("SqueezeBertConfig"),Jto=o(" (SqueezeBERT model)"),Yto=l(),Ag=a("li"),jse=a("strong"),Kto=o("swin"),Zto=o(" \u2014 "),NP=a("a"),eao=o("SwinConfig"),oao=o(" (Swin Transformer model)"),rao=l(),Lg=a("li"),Dse=a("strong"),tao=o("swinv2"),aao=o(" \u2014 "),qP=a("a"),nao=o("Swinv2Config"),sao=o(" (Swin Transformer V2 model)"),lao=l(),yg=a("li"),Gse=a("strong"),iao=o("t5"),dao=o(" \u2014 "),jP=a("a"),cao=o("T5Config"),fao=o(" (T5 model)"),mao=l(),xg=a("li"),Ose=a("strong"),gao=o("tapas"),hao=o(" \u2014 "),DP=a("a"),pao=o("TapasConfig"),_ao=o(" (TAPAS model)"),uao=l(),$g=a("li"),Vse=a("strong"),bao=o("trajectory_transformer"),vao=o(" \u2014 "),GP=a("a"),Fao=o("TrajectoryTransformerConfig"),Tao=o(" (Trajectory Transformer model)"),Mao=l(),kg=a("li"),Xse=a("strong"),Eao=o("transfo-xl"),Cao=o(" \u2014 "),OP=a("a"),wao=o("TransfoXLConfig"),Aao=o(" (Transformer-XL model)"),Lao=l(),Sg=a("li"),zse=a("strong"),yao=o("trocr"),xao=o(" \u2014 "),VP=a("a"),$ao=o("TrOCRConfig"),kao=o(" (TrOCR model)"),Sao=l(),Rg=a("li"),Qse=a("strong"),Rao=o("unispeech"),Pao=o(" \u2014 "),XP=a("a"),Bao=o("UniSpeechConfig"),Iao=o(" (UniSpeech model)"),Nao=l(),Pg=a("li"),Wse=a("strong"),qao=o("unispeech-sat"),jao=o(" \u2014 "),zP=a("a"),Dao=o("UniSpeechSatConfig"),Gao=o(" (UniSpeechSat model)"),Oao=l(),Bg=a("li"),Hse=a("strong"),Vao=o("van"),Xao=o(" \u2014 "),QP=a("a"),zao=o("VanConfig"),Qao=o(" (VAN model)"),Wao=l(),Ig=a("li"),Use=a("strong"),Hao=o("vilt"),Uao=o(" \u2014 "),WP=a("a"),Jao=o("ViltConfig"),Yao=o(" (ViLT model)"),Kao=l(),Ng=a("li"),Jse=a("strong"),Zao=o("vision-encoder-decoder"),eno=o(" \u2014 "),HP=a("a"),ono=o("VisionEncoderDecoderConfig"),rno=o(" (Vision Encoder decoder model)"),tno=l(),qg=a("li"),Yse=a("strong"),ano=o("vision-text-dual-encoder"),nno=o(" \u2014 "),UP=a("a"),sno=o("VisionTextDualEncoderConfig"),lno=o(" (VisionTextDualEncoder model)"),ino=l(),jg=a("li"),Kse=a("strong"),dno=o("visual_bert"),cno=o(" \u2014 "),JP=a("a"),fno=o("VisualBertConfig"),mno=o(" (VisualBERT model)"),gno=l(),Dg=a("li"),Zse=a("strong"),hno=o("vit"),pno=o(" \u2014 "),YP=a("a"),_no=o("ViTConfig"),uno=o(" (ViT model)"),bno=l(),Gg=a("li"),ele=a("strong"),vno=o("vit_mae"),Fno=o(" \u2014 "),KP=a("a"),Tno=o("ViTMAEConfig"),Mno=o(" (ViTMAE model)"),Eno=l(),Og=a("li"),ole=a("strong"),Cno=o("wav2vec2"),wno=o(" \u2014 "),ZP=a("a"),Ano=o("Wav2Vec2Config"),Lno=o(" (Wav2Vec2 model)"),yno=l(),Vg=a("li"),rle=a("strong"),xno=o("wav2vec2-conformer"),$no=o(" \u2014 "),eB=a("a"),kno=o("Wav2Vec2ConformerConfig"),Sno=o(" (Wav2Vec2-Conformer model)"),Rno=l(),Xg=a("li"),tle=a("strong"),Pno=o("wavlm"),Bno=o(" \u2014 "),oB=a("a"),Ino=o("WavLMConfig"),Nno=o(" (WavLM model)"),qno=l(),zg=a("li"),ale=a("strong"),jno=o("xglm"),Dno=o(" \u2014 "),rB=a("a"),Gno=o("XGLMConfig"),Ono=o(" (XGLM model)"),Vno=l(),Qg=a("li"),nle=a("strong"),Xno=o("xlm"),zno=o(" \u2014 "),tB=a("a"),Qno=o("XLMConfig"),Wno=o(" (XLM model)"),Hno=l(),Wg=a("li"),sle=a("strong"),Uno=o("xlm-prophetnet"),Jno=o(" \u2014 "),aB=a("a"),Yno=o("XLMProphetNetConfig"),Kno=o(" (XLM-ProphetNet model)"),Zno=l(),Hg=a("li"),lle=a("strong"),eso=o("xlm-roberta"),oso=o(" \u2014 "),nB=a("a"),rso=o("XLMRobertaConfig"),tso=o(" (XLM-RoBERTa model)"),aso=l(),Ug=a("li"),ile=a("strong"),nso=o("xlm-roberta-xl"),sso=o(" \u2014 "),sB=a("a"),lso=o("XLMRobertaXLConfig"),iso=o(" (XLM-RoBERTa-XL model)"),dso=l(),Jg=a("li"),dle=a("strong"),cso=o("xlnet"),fso=o(" \u2014 "),lB=a("a"),mso=o("XLNetConfig"),gso=o(" (XLNet model)"),hso=l(),Yg=a("li"),cle=a("strong"),pso=o("yolos"),_so=o(" \u2014 "),iB=a("a"),uso=o("YolosConfig"),bso=o(" (YOLOS model)"),vso=l(),Kg=a("li"),fle=a("strong"),Fso=o("yoso"),Tso=o(" \u2014 "),dB=a("a"),Mso=o("YosoConfig"),Eso=o(" (YOSO model)"),Cso=l(),F(Zg.$$.fragment),wso=l(),eh=a("div"),F(TL.$$.fragment),Aso=l(),mle=a("p"),Lso=o("Register a new configuration for this class."),GXe=l(),ji=a("h2"),oh=a("a"),gle=a("span"),F(ML.$$.fragment),yso=l(),hle=a("span"),xso=o("AutoTokenizer"),OXe=l(),Lo=a("div"),F(EL.$$.fragment),$so=l(),CL=a("p"),kso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cB=a("a"),Sso=o("AutoTokenizer.from_pretrained()"),Rso=o(" class method."),Pso=l(),wL=a("p"),Bso=o("This class cannot be instantiated directly using "),ple=a("code"),Iso=o("__init__()"),Nso=o(" (throws an error)."),qso=l(),yr=a("div"),F(AL.$$.fragment),jso=l(),_le=a("p"),Dso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Gso=l(),Pa=a("p"),Oso=o("The tokenizer class to instantiate is selected based on the "),ule=a("code"),Vso=o("model_type"),Xso=o(` property of the config object (either
passed as an argument or loaded from `),ble=a("code"),zso=o("pretrained_model_name_or_path"),Qso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=a("code"),Wso=o("pretrained_model_name_or_path"),Hso=o(":"),Uso=l(),k=a("ul"),Dn=a("li"),Fle=a("strong"),Jso=o("albert"),Yso=o(" \u2014 "),fB=a("a"),Kso=o("AlbertTokenizer"),Zso=o(" or "),mB=a("a"),elo=o("AlbertTokenizerFast"),olo=o(" (ALBERT model)"),rlo=l(),Gn=a("li"),Tle=a("strong"),tlo=o("bart"),alo=o(" \u2014 "),gB=a("a"),nlo=o("BartTokenizer"),slo=o(" or "),hB=a("a"),llo=o("BartTokenizerFast"),ilo=o(" (BART model)"),dlo=l(),On=a("li"),Mle=a("strong"),clo=o("barthez"),flo=o(" \u2014 "),pB=a("a"),mlo=o("BarthezTokenizer"),glo=o(" or "),_B=a("a"),hlo=o("BarthezTokenizerFast"),plo=o(" (BARThez model)"),_lo=l(),rh=a("li"),Ele=a("strong"),ulo=o("bartpho"),blo=o(" \u2014 "),uB=a("a"),vlo=o("BartphoTokenizer"),Flo=o(" (BARTpho model)"),Tlo=l(),Vn=a("li"),Cle=a("strong"),Mlo=o("bert"),Elo=o(" \u2014 "),bB=a("a"),Clo=o("BertTokenizer"),wlo=o(" or "),vB=a("a"),Alo=o("BertTokenizerFast"),Llo=o(" (BERT model)"),ylo=l(),th=a("li"),wle=a("strong"),xlo=o("bert-generation"),$lo=o(" \u2014 "),FB=a("a"),klo=o("BertGenerationTokenizer"),Slo=o(" (Bert Generation model)"),Rlo=l(),ah=a("li"),Ale=a("strong"),Plo=o("bert-japanese"),Blo=o(" \u2014 "),TB=a("a"),Ilo=o("BertJapaneseTokenizer"),Nlo=o(" (BertJapanese model)"),qlo=l(),nh=a("li"),Lle=a("strong"),jlo=o("bertweet"),Dlo=o(" \u2014 "),MB=a("a"),Glo=o("BertweetTokenizer"),Olo=o(" (BERTweet model)"),Vlo=l(),Xn=a("li"),yle=a("strong"),Xlo=o("big_bird"),zlo=o(" \u2014 "),EB=a("a"),Qlo=o("BigBirdTokenizer"),Wlo=o(" or "),CB=a("a"),Hlo=o("BigBirdTokenizerFast"),Ulo=o(" (BigBird model)"),Jlo=l(),zn=a("li"),xle=a("strong"),Ylo=o("bigbird_pegasus"),Klo=o(" \u2014 "),wB=a("a"),Zlo=o("PegasusTokenizer"),eio=o(" or "),AB=a("a"),oio=o("PegasusTokenizerFast"),rio=o(" (BigBird-Pegasus model)"),tio=l(),Qn=a("li"),$le=a("strong"),aio=o("blenderbot"),nio=o(" \u2014 "),LB=a("a"),sio=o("BlenderbotTokenizer"),lio=o(" or "),yB=a("a"),iio=o("BlenderbotTokenizerFast"),dio=o(" (Blenderbot model)"),cio=l(),sh=a("li"),kle=a("strong"),fio=o("blenderbot-small"),mio=o(" \u2014 "),xB=a("a"),gio=o("BlenderbotSmallTokenizer"),hio=o(" (BlenderbotSmall model)"),pio=l(),lh=a("li"),Sle=a("strong"),_io=o("bloom"),uio=o(" \u2014 "),$B=a("a"),bio=o("BloomTokenizerFast"),vio=o(" (BLOOM model)"),Fio=l(),ih=a("li"),Rle=a("strong"),Tio=o("byt5"),Mio=o(" \u2014 "),kB=a("a"),Eio=o("ByT5Tokenizer"),Cio=o(" (ByT5 model)"),wio=l(),Wn=a("li"),Ple=a("strong"),Aio=o("camembert"),Lio=o(" \u2014 "),SB=a("a"),yio=o("CamembertTokenizer"),xio=o(" or "),RB=a("a"),$io=o("CamembertTokenizerFast"),kio=o(" (CamemBERT model)"),Sio=l(),dh=a("li"),Ble=a("strong"),Rio=o("canine"),Pio=o(" \u2014 "),PB=a("a"),Bio=o("CanineTokenizer"),Iio=o(" (CANINE model)"),Nio=l(),Hn=a("li"),Ile=a("strong"),qio=o("clip"),jio=o(" \u2014 "),BB=a("a"),Dio=o("CLIPTokenizer"),Gio=o(" or "),IB=a("a"),Oio=o("CLIPTokenizerFast"),Vio=o(" (CLIP model)"),Xio=l(),Un=a("li"),Nle=a("strong"),zio=o("codegen"),Qio=o(" \u2014 "),NB=a("a"),Wio=o("CodeGenTokenizer"),Hio=o(" or "),qB=a("a"),Uio=o("CodeGenTokenizerFast"),Jio=o(" (CodeGen model)"),Yio=l(),Jn=a("li"),qle=a("strong"),Kio=o("convbert"),Zio=o(" \u2014 "),jB=a("a"),edo=o("ConvBertTokenizer"),odo=o(" or "),DB=a("a"),rdo=o("ConvBertTokenizerFast"),tdo=o(" (ConvBERT model)"),ado=l(),Yn=a("li"),jle=a("strong"),ndo=o("cpm"),sdo=o(" \u2014 "),GB=a("a"),ldo=o("CpmTokenizer"),ido=o(" or "),OB=a("a"),ddo=o("CpmTokenizerFast"),cdo=o(" (CPM model)"),fdo=l(),ch=a("li"),Dle=a("strong"),mdo=o("ctrl"),gdo=o(" \u2014 "),VB=a("a"),hdo=o("CTRLTokenizer"),pdo=o(" (CTRL model)"),_do=l(),Kn=a("li"),Gle=a("strong"),udo=o("data2vec-text"),bdo=o(" \u2014 "),XB=a("a"),vdo=o("RobertaTokenizer"),Fdo=o(" or "),zB=a("a"),Tdo=o("RobertaTokenizerFast"),Mdo=o(" (Data2VecText model)"),Edo=l(),Zn=a("li"),Ole=a("strong"),Cdo=o("deberta"),wdo=o(" \u2014 "),QB=a("a"),Ado=o("DebertaTokenizer"),Ldo=o(" or "),WB=a("a"),ydo=o("DebertaTokenizerFast"),xdo=o(" (DeBERTa model)"),$do=l(),es=a("li"),Vle=a("strong"),kdo=o("deberta-v2"),Sdo=o(" \u2014 "),HB=a("a"),Rdo=o("DebertaV2Tokenizer"),Pdo=o(" or "),UB=a("a"),Bdo=o("DebertaV2TokenizerFast"),Ido=o(" (DeBERTa-v2 model)"),Ndo=l(),os=a("li"),Xle=a("strong"),qdo=o("distilbert"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("DistilBertTokenizer"),Gdo=o(" or "),YB=a("a"),Odo=o("DistilBertTokenizerFast"),Vdo=o(" (DistilBERT model)"),Xdo=l(),rs=a("li"),zle=a("strong"),zdo=o("dpr"),Qdo=o(" \u2014 "),KB=a("a"),Wdo=o("DPRQuestionEncoderTokenizer"),Hdo=o(" or "),ZB=a("a"),Udo=o("DPRQuestionEncoderTokenizerFast"),Jdo=o(" (DPR model)"),Ydo=l(),ts=a("li"),Qle=a("strong"),Kdo=o("electra"),Zdo=o(" \u2014 "),eI=a("a"),eco=o("ElectraTokenizer"),oco=o(" or "),oI=a("a"),rco=o("ElectraTokenizerFast"),tco=o(" (ELECTRA model)"),aco=l(),fh=a("li"),Wle=a("strong"),nco=o("flaubert"),sco=o(" \u2014 "),rI=a("a"),lco=o("FlaubertTokenizer"),ico=o(" (FlauBERT model)"),dco=l(),as=a("li"),Hle=a("strong"),cco=o("fnet"),fco=o(" \u2014 "),tI=a("a"),mco=o("FNetTokenizer"),gco=o(" or "),aI=a("a"),hco=o("FNetTokenizerFast"),pco=o(" (FNet model)"),_co=l(),mh=a("li"),Ule=a("strong"),uco=o("fsmt"),bco=o(" \u2014 "),nI=a("a"),vco=o("FSMTTokenizer"),Fco=o(" (FairSeq Machine-Translation model)"),Tco=l(),ns=a("li"),Jle=a("strong"),Mco=o("funnel"),Eco=o(" \u2014 "),sI=a("a"),Cco=o("FunnelTokenizer"),wco=o(" or "),lI=a("a"),Aco=o("FunnelTokenizerFast"),Lco=o(" (Funnel Transformer model)"),yco=l(),ss=a("li"),Yle=a("strong"),xco=o("gpt2"),$co=o(" \u2014 "),iI=a("a"),kco=o("GPT2Tokenizer"),Sco=o(" or "),dI=a("a"),Rco=o("GPT2TokenizerFast"),Pco=o(" (OpenAI GPT-2 model)"),Bco=l(),ls=a("li"),Kle=a("strong"),Ico=o("gpt_neo"),Nco=o(" \u2014 "),cI=a("a"),qco=o("GPT2Tokenizer"),jco=o(" or "),fI=a("a"),Dco=o("GPT2TokenizerFast"),Gco=o(" (GPT Neo model)"),Oco=l(),gh=a("li"),Zle=a("strong"),Vco=o("gpt_neox"),Xco=o(" \u2014 "),mI=a("a"),zco=o("GPTNeoXTokenizerFast"),Qco=o(" (GPT NeoX model)"),Wco=l(),is=a("li"),eie=a("strong"),Hco=o("gptj"),Uco=o(" \u2014 "),gI=a("a"),Jco=o("GPT2Tokenizer"),Yco=o(" or "),hI=a("a"),Kco=o("GPT2TokenizerFast"),Zco=o(" (GPT-J model)"),efo=l(),ds=a("li"),oie=a("strong"),ofo=o("groupvit"),rfo=o(" \u2014 "),pI=a("a"),tfo=o("CLIPTokenizer"),afo=o(" or "),_I=a("a"),nfo=o("CLIPTokenizerFast"),sfo=o(" (GroupViT model)"),lfo=l(),cs=a("li"),rie=a("strong"),ifo=o("herbert"),dfo=o(" \u2014 "),uI=a("a"),cfo=o("HerbertTokenizer"),ffo=o(" or "),bI=a("a"),mfo=o("HerbertTokenizerFast"),gfo=o(" (HerBERT model)"),hfo=l(),hh=a("li"),tie=a("strong"),pfo=o("hubert"),_fo=o(" \u2014 "),vI=a("a"),ufo=o("Wav2Vec2CTCTokenizer"),bfo=o(" (Hubert model)"),vfo=l(),fs=a("li"),aie=a("strong"),Ffo=o("ibert"),Tfo=o(" \u2014 "),FI=a("a"),Mfo=o("RobertaTokenizer"),Efo=o(" or "),TI=a("a"),Cfo=o("RobertaTokenizerFast"),wfo=o(" (I-BERT model)"),Afo=l(),ms=a("li"),nie=a("strong"),Lfo=o("layoutlm"),yfo=o(" \u2014 "),MI=a("a"),xfo=o("LayoutLMTokenizer"),$fo=o(" or "),EI=a("a"),kfo=o("LayoutLMTokenizerFast"),Sfo=o(" (LayoutLM model)"),Rfo=l(),gs=a("li"),sie=a("strong"),Pfo=o("layoutlmv2"),Bfo=o(" \u2014 "),CI=a("a"),Ifo=o("LayoutLMv2Tokenizer"),Nfo=o(" or "),wI=a("a"),qfo=o("LayoutLMv2TokenizerFast"),jfo=o(" (LayoutLMv2 model)"),Dfo=l(),hs=a("li"),lie=a("strong"),Gfo=o("layoutlmv3"),Ofo=o(" \u2014 "),AI=a("a"),Vfo=o("LayoutLMv3Tokenizer"),Xfo=o(" or "),LI=a("a"),zfo=o("LayoutLMv3TokenizerFast"),Qfo=o(" (LayoutLMv3 model)"),Wfo=l(),ps=a("li"),iie=a("strong"),Hfo=o("layoutxlm"),Ufo=o(" \u2014 "),yI=a("a"),Jfo=o("LayoutXLMTokenizer"),Yfo=o(" or "),xI=a("a"),Kfo=o("LayoutXLMTokenizerFast"),Zfo=o(" (LayoutXLM model)"),emo=l(),_s=a("li"),die=a("strong"),omo=o("led"),rmo=o(" \u2014 "),$I=a("a"),tmo=o("LEDTokenizer"),amo=o(" or "),kI=a("a"),nmo=o("LEDTokenizerFast"),smo=o(" (LED model)"),lmo=l(),us=a("li"),cie=a("strong"),imo=o("longformer"),dmo=o(" \u2014 "),SI=a("a"),cmo=o("LongformerTokenizer"),fmo=o(" or "),RI=a("a"),mmo=o("LongformerTokenizerFast"),gmo=o(" (Longformer model)"),hmo=l(),bs=a("li"),fie=a("strong"),pmo=o("longt5"),_mo=o(" \u2014 "),PI=a("a"),umo=o("T5Tokenizer"),bmo=o(" or "),BI=a("a"),vmo=o("T5TokenizerFast"),Fmo=o(" (LongT5 model)"),Tmo=l(),ph=a("li"),mie=a("strong"),Mmo=o("luke"),Emo=o(" \u2014 "),II=a("a"),Cmo=o("LukeTokenizer"),wmo=o(" (LUKE model)"),Amo=l(),vs=a("li"),gie=a("strong"),Lmo=o("lxmert"),ymo=o(" \u2014 "),NI=a("a"),xmo=o("LxmertTokenizer"),$mo=o(" or "),qI=a("a"),kmo=o("LxmertTokenizerFast"),Smo=o(" (LXMERT model)"),Rmo=l(),_h=a("li"),hie=a("strong"),Pmo=o("m2m_100"),Bmo=o(" \u2014 "),jI=a("a"),Imo=o("M2M100Tokenizer"),Nmo=o(" (M2M100 model)"),qmo=l(),uh=a("li"),pie=a("strong"),jmo=o("marian"),Dmo=o(" \u2014 "),DI=a("a"),Gmo=o("MarianTokenizer"),Omo=o(" (Marian model)"),Vmo=l(),Fs=a("li"),_ie=a("strong"),Xmo=o("mbart"),zmo=o(" \u2014 "),GI=a("a"),Qmo=o("MBartTokenizer"),Wmo=o(" or "),OI=a("a"),Hmo=o("MBartTokenizerFast"),Umo=o(" (mBART model)"),Jmo=l(),Ts=a("li"),uie=a("strong"),Ymo=o("mbart50"),Kmo=o(" \u2014 "),VI=a("a"),Zmo=o("MBart50Tokenizer"),ego=o(" or "),XI=a("a"),ogo=o("MBart50TokenizerFast"),rgo=o(" (mBART-50 model)"),tgo=l(),Ms=a("li"),bie=a("strong"),ago=o("megatron-bert"),ngo=o(" \u2014 "),zI=a("a"),sgo=o("BertTokenizer"),lgo=o(" or "),QI=a("a"),igo=o("BertTokenizerFast"),dgo=o(" (Megatron-BERT model)"),cgo=l(),bh=a("li"),vie=a("strong"),fgo=o("mluke"),mgo=o(" \u2014 "),WI=a("a"),ggo=o("MLukeTokenizer"),hgo=o(" (mLUKE model)"),pgo=l(),Es=a("li"),Fie=a("strong"),_go=o("mobilebert"),ugo=o(" \u2014 "),HI=a("a"),bgo=o("MobileBertTokenizer"),vgo=o(" or "),UI=a("a"),Fgo=o("MobileBertTokenizerFast"),Tgo=o(" (MobileBERT model)"),Mgo=l(),Cs=a("li"),Tie=a("strong"),Ego=o("mpnet"),Cgo=o(" \u2014 "),JI=a("a"),wgo=o("MPNetTokenizer"),Ago=o(" or "),YI=a("a"),Lgo=o("MPNetTokenizerFast"),ygo=o(" (MPNet model)"),xgo=l(),ws=a("li"),Mie=a("strong"),$go=o("mt5"),kgo=o(" \u2014 "),KI=a("a"),Sgo=o("MT5Tokenizer"),Rgo=o(" or "),ZI=a("a"),Pgo=o("MT5TokenizerFast"),Bgo=o(" (MT5 model)"),Igo=l(),As=a("li"),Eie=a("strong"),Ngo=o("mvp"),qgo=o(" \u2014 "),eN=a("a"),jgo=o("MvpTokenizer"),Dgo=o(" or "),oN=a("a"),Ggo=o("MvpTokenizerFast"),Ogo=o(" (MVP model)"),Vgo=l(),Ls=a("li"),Cie=a("strong"),Xgo=o("nezha"),zgo=o(" \u2014 "),rN=a("a"),Qgo=o("BertTokenizer"),Wgo=o(" or "),tN=a("a"),Hgo=o("BertTokenizerFast"),Ugo=o(" (Nezha model)"),Jgo=l(),ys=a("li"),wie=a("strong"),Ygo=o("nllb"),Kgo=o(" \u2014 "),aN=a("a"),Zgo=o("NllbTokenizer"),eho=o(" or "),nN=a("a"),oho=o("NllbTokenizerFast"),rho=o(" (NLLB model)"),tho=l(),xs=a("li"),Aie=a("strong"),aho=o("nystromformer"),nho=o(" \u2014 "),sN=a("a"),sho=o("AlbertTokenizer"),lho=o(" or "),lN=a("a"),iho=o("AlbertTokenizerFast"),dho=o(" (Nystr\xF6mformer model)"),cho=l(),$s=a("li"),Lie=a("strong"),fho=o("openai-gpt"),mho=o(" \u2014 "),iN=a("a"),gho=o("OpenAIGPTTokenizer"),hho=o(" or "),dN=a("a"),pho=o("OpenAIGPTTokenizerFast"),_ho=o(" (OpenAI GPT model)"),uho=l(),vh=a("li"),yie=a("strong"),bho=o("opt"),vho=o(" \u2014 "),cN=a("a"),Fho=o("GPT2Tokenizer"),Tho=o(" (OPT model)"),Mho=l(),ks=a("li"),xie=a("strong"),Eho=o("pegasus"),Cho=o(" \u2014 "),fN=a("a"),who=o("PegasusTokenizer"),Aho=o(" or "),mN=a("a"),Lho=o("PegasusTokenizerFast"),yho=o(" (Pegasus model)"),xho=l(),Fh=a("li"),$ie=a("strong"),$ho=o("perceiver"),kho=o(" \u2014 "),gN=a("a"),Sho=o("PerceiverTokenizer"),Rho=o(" (Perceiver model)"),Pho=l(),Th=a("li"),kie=a("strong"),Bho=o("phobert"),Iho=o(" \u2014 "),hN=a("a"),Nho=o("PhobertTokenizer"),qho=o(" (PhoBERT model)"),jho=l(),Mh=a("li"),Sie=a("strong"),Dho=o("plbart"),Gho=o(" \u2014 "),pN=a("a"),Oho=o("PLBartTokenizer"),Vho=o(" (PLBart model)"),Xho=l(),Eh=a("li"),Rie=a("strong"),zho=o("prophetnet"),Qho=o(" \u2014 "),_N=a("a"),Who=o("ProphetNetTokenizer"),Hho=o(" (ProphetNet model)"),Uho=l(),Ss=a("li"),Pie=a("strong"),Jho=o("qdqbert"),Yho=o(" \u2014 "),uN=a("a"),Kho=o("BertTokenizer"),Zho=o(" or "),bN=a("a"),epo=o("BertTokenizerFast"),opo=o(" (QDQBert model)"),rpo=l(),Ch=a("li"),Bie=a("strong"),tpo=o("rag"),apo=o(" \u2014 "),vN=a("a"),npo=o("RagTokenizer"),spo=o(" (RAG model)"),lpo=l(),Rs=a("li"),Iie=a("strong"),ipo=o("realm"),dpo=o(" \u2014 "),FN=a("a"),cpo=o("RealmTokenizer"),fpo=o(" or "),TN=a("a"),mpo=o("RealmTokenizerFast"),gpo=o(" (REALM model)"),hpo=l(),Ps=a("li"),Nie=a("strong"),ppo=o("reformer"),_po=o(" \u2014 "),MN=a("a"),upo=o("ReformerTokenizer"),bpo=o(" or "),EN=a("a"),vpo=o("ReformerTokenizerFast"),Fpo=o(" (Reformer model)"),Tpo=l(),Bs=a("li"),qie=a("strong"),Mpo=o("rembert"),Epo=o(" \u2014 "),CN=a("a"),Cpo=o("RemBertTokenizer"),wpo=o(" or "),wN=a("a"),Apo=o("RemBertTokenizerFast"),Lpo=o(" (RemBERT model)"),ypo=l(),Is=a("li"),jie=a("strong"),xpo=o("retribert"),$po=o(" \u2014 "),AN=a("a"),kpo=o("RetriBertTokenizer"),Spo=o(" or "),LN=a("a"),Rpo=o("RetriBertTokenizerFast"),Ppo=o(" (RetriBERT model)"),Bpo=l(),Ns=a("li"),Die=a("strong"),Ipo=o("roberta"),Npo=o(" \u2014 "),yN=a("a"),qpo=o("RobertaTokenizer"),jpo=o(" or "),xN=a("a"),Dpo=o("RobertaTokenizerFast"),Gpo=o(" (RoBERTa model)"),Opo=l(),qs=a("li"),Gie=a("strong"),Vpo=o("roformer"),Xpo=o(" \u2014 "),$N=a("a"),zpo=o("RoFormerTokenizer"),Qpo=o(" or "),kN=a("a"),Wpo=o("RoFormerTokenizerFast"),Hpo=o(" (RoFormer model)"),Upo=l(),wh=a("li"),Oie=a("strong"),Jpo=o("speech_to_text"),Ypo=o(" \u2014 "),SN=a("a"),Kpo=o("Speech2TextTokenizer"),Zpo=o(" (Speech2Text model)"),e_o=l(),Ah=a("li"),Vie=a("strong"),o_o=o("speech_to_text_2"),r_o=o(" \u2014 "),RN=a("a"),t_o=o("Speech2Text2Tokenizer"),a_o=o(" (Speech2Text2 model)"),n_o=l(),js=a("li"),Xie=a("strong"),s_o=o("splinter"),l_o=o(" \u2014 "),PN=a("a"),i_o=o("SplinterTokenizer"),d_o=o(" or "),BN=a("a"),c_o=o("SplinterTokenizerFast"),f_o=o(" (Splinter model)"),m_o=l(),Ds=a("li"),zie=a("strong"),g_o=o("squeezebert"),h_o=o(" \u2014 "),IN=a("a"),p_o=o("SqueezeBertTokenizer"),__o=o(" or "),NN=a("a"),u_o=o("SqueezeBertTokenizerFast"),b_o=o(" (SqueezeBERT model)"),v_o=l(),Gs=a("li"),Qie=a("strong"),F_o=o("t5"),T_o=o(" \u2014 "),qN=a("a"),M_o=o("T5Tokenizer"),E_o=o(" or "),jN=a("a"),C_o=o("T5TokenizerFast"),w_o=o(" (T5 model)"),A_o=l(),Lh=a("li"),Wie=a("strong"),L_o=o("tapas"),y_o=o(" \u2014 "),DN=a("a"),x_o=o("TapasTokenizer"),$_o=o(" (TAPAS model)"),k_o=l(),yh=a("li"),Hie=a("strong"),S_o=o("tapex"),R_o=o(" \u2014 "),GN=a("a"),P_o=o("TapexTokenizer"),B_o=o(" (TAPEX model)"),I_o=l(),xh=a("li"),Uie=a("strong"),N_o=o("transfo-xl"),q_o=o(" \u2014 "),ON=a("a"),j_o=o("TransfoXLTokenizer"),D_o=o(" (Transformer-XL model)"),G_o=l(),Os=a("li"),Jie=a("strong"),O_o=o("vilt"),V_o=o(" \u2014 "),VN=a("a"),X_o=o("BertTokenizer"),z_o=o(" or "),XN=a("a"),Q_o=o("BertTokenizerFast"),W_o=o(" (ViLT model)"),H_o=l(),Vs=a("li"),Yie=a("strong"),U_o=o("visual_bert"),J_o=o(" \u2014 "),zN=a("a"),Y_o=o("BertTokenizer"),K_o=o(" or "),QN=a("a"),Z_o=o("BertTokenizerFast"),euo=o(" (VisualBERT model)"),ouo=l(),$h=a("li"),Kie=a("strong"),ruo=o("wav2vec2"),tuo=o(" \u2014 "),WN=a("a"),auo=o("Wav2Vec2CTCTokenizer"),nuo=o(" (Wav2Vec2 model)"),suo=l(),kh=a("li"),Zie=a("strong"),luo=o("wav2vec2-conformer"),iuo=o(" \u2014 "),HN=a("a"),duo=o("Wav2Vec2CTCTokenizer"),cuo=o(" (Wav2Vec2-Conformer model)"),fuo=l(),Sh=a("li"),ede=a("strong"),muo=o("wav2vec2_phoneme"),guo=o(" \u2014 "),UN=a("a"),huo=o("Wav2Vec2PhonemeCTCTokenizer"),puo=o(" (Wav2Vec2Phoneme model)"),_uo=l(),Xs=a("li"),ode=a("strong"),uuo=o("xglm"),buo=o(" \u2014 "),JN=a("a"),vuo=o("XGLMTokenizer"),Fuo=o(" or "),YN=a("a"),Tuo=o("XGLMTokenizerFast"),Muo=o(" (XGLM model)"),Euo=l(),Rh=a("li"),rde=a("strong"),Cuo=o("xlm"),wuo=o(" \u2014 "),KN=a("a"),Auo=o("XLMTokenizer"),Luo=o(" (XLM model)"),yuo=l(),Ph=a("li"),tde=a("strong"),xuo=o("xlm-prophetnet"),$uo=o(" \u2014 "),ZN=a("a"),kuo=o("XLMProphetNetTokenizer"),Suo=o(" (XLM-ProphetNet model)"),Ruo=l(),zs=a("li"),ade=a("strong"),Puo=o("xlm-roberta"),Buo=o(" \u2014 "),eq=a("a"),Iuo=o("XLMRobertaTokenizer"),Nuo=o(" or "),oq=a("a"),quo=o("XLMRobertaTokenizerFast"),juo=o(" (XLM-RoBERTa model)"),Duo=l(),Qs=a("li"),nde=a("strong"),Guo=o("xlm-roberta-xl"),Ouo=o(" \u2014 "),rq=a("a"),Vuo=o("RobertaTokenizer"),Xuo=o(" or "),tq=a("a"),zuo=o("RobertaTokenizerFast"),Quo=o(" (XLM-RoBERTa-XL model)"),Wuo=l(),Ws=a("li"),sde=a("strong"),Huo=o("xlnet"),Uuo=o(" \u2014 "),aq=a("a"),Juo=o("XLNetTokenizer"),Yuo=o(" or "),nq=a("a"),Kuo=o("XLNetTokenizerFast"),Zuo=o(" (XLNet model)"),e1o=l(),Hs=a("li"),lde=a("strong"),o1o=o("yoso"),r1o=o(" \u2014 "),sq=a("a"),t1o=o("AlbertTokenizer"),a1o=o(" or "),lq=a("a"),n1o=o("AlbertTokenizerFast"),s1o=o(" (YOSO model)"),l1o=l(),F(Bh.$$.fragment),i1o=l(),Ih=a("div"),F(LL.$$.fragment),d1o=l(),ide=a("p"),c1o=o("Register a new tokenizer in this mapping."),VXe=l(),Di=a("h2"),Nh=a("a"),dde=a("span"),F(yL.$$.fragment),f1o=l(),cde=a("span"),m1o=o("AutoFeatureExtractor"),XXe=l(),yo=a("div"),F(xL.$$.fragment),g1o=l(),$L=a("p"),h1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iq=a("a"),p1o=o("AutoFeatureExtractor.from_pretrained()"),_1o=o(" class method."),u1o=l(),kL=a("p"),b1o=o("This class cannot be instantiated directly using "),fde=a("code"),v1o=o("__init__()"),F1o=o(" (throws an error)."),T1o=l(),Ue=a("div"),F(SL.$$.fragment),M1o=l(),mde=a("p"),E1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),C1o=l(),Ba=a("p"),w1o=o("The feature extractor class to instantiate is selected based on the "),gde=a("code"),A1o=o("model_type"),L1o=o(` property of the config object
(either passed as an argument or loaded from `),hde=a("code"),y1o=o("pretrained_model_name_or_path"),x1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),pde=a("code"),$1o=o("pretrained_model_name_or_path"),k1o=o(":"),S1o=l(),J=a("ul"),qh=a("li"),_de=a("strong"),R1o=o("beit"),P1o=o(" \u2014 "),dq=a("a"),B1o=o("BeitFeatureExtractor"),I1o=o(" (BEiT model)"),N1o=l(),jh=a("li"),ude=a("strong"),q1o=o("clip"),j1o=o(" \u2014 "),cq=a("a"),D1o=o("CLIPFeatureExtractor"),G1o=o(" (CLIP model)"),O1o=l(),Dh=a("li"),bde=a("strong"),V1o=o("convnext"),X1o=o(" \u2014 "),fq=a("a"),z1o=o("ConvNextFeatureExtractor"),Q1o=o(" (ConvNeXT model)"),W1o=l(),Gh=a("li"),vde=a("strong"),H1o=o("cvt"),U1o=o(" \u2014 "),mq=a("a"),J1o=o("ConvNextFeatureExtractor"),Y1o=o(" (CvT model)"),K1o=l(),Oh=a("li"),Fde=a("strong"),Z1o=o("data2vec-audio"),e4o=o(" \u2014 "),gq=a("a"),o4o=o("Wav2Vec2FeatureExtractor"),r4o=o(" (Data2VecAudio model)"),t4o=l(),Vh=a("li"),Tde=a("strong"),a4o=o("data2vec-vision"),n4o=o(" \u2014 "),hq=a("a"),s4o=o("BeitFeatureExtractor"),l4o=o(" (Data2VecVision model)"),i4o=l(),Xh=a("li"),Mde=a("strong"),d4o=o("deit"),c4o=o(" \u2014 "),pq=a("a"),f4o=o("DeiTFeatureExtractor"),m4o=o(" (DeiT model)"),g4o=l(),zh=a("li"),Ede=a("strong"),h4o=o("detr"),p4o=o(" \u2014 "),_q=a("a"),_4o=o("DetrFeatureExtractor"),u4o=o(" (DETR model)"),b4o=l(),Qh=a("li"),Cde=a("strong"),v4o=o("dpt"),F4o=o(" \u2014 "),uq=a("a"),T4o=o("DPTFeatureExtractor"),M4o=o(" (DPT model)"),E4o=l(),Wh=a("li"),wde=a("strong"),C4o=o("flava"),w4o=o(" \u2014 "),bq=a("a"),A4o=o("FlavaFeatureExtractor"),L4o=o(" (FLAVA model)"),y4o=l(),Hh=a("li"),Ade=a("strong"),x4o=o("glpn"),$4o=o(" \u2014 "),vq=a("a"),k4o=o("GLPNFeatureExtractor"),S4o=o(" (GLPN model)"),R4o=l(),Uh=a("li"),Lde=a("strong"),P4o=o("groupvit"),B4o=o(" \u2014 "),Fq=a("a"),I4o=o("CLIPFeatureExtractor"),N4o=o(" (GroupViT model)"),q4o=l(),Jh=a("li"),yde=a("strong"),j4o=o("hubert"),D4o=o(" \u2014 "),Tq=a("a"),G4o=o("Wav2Vec2FeatureExtractor"),O4o=o(" (Hubert model)"),V4o=l(),Yh=a("li"),xde=a("strong"),X4o=o("imagegpt"),z4o=o(" \u2014 "),Mq=a("a"),Q4o=o("ImageGPTFeatureExtractor"),W4o=o(" (ImageGPT model)"),H4o=l(),Kh=a("li"),$de=a("strong"),U4o=o("layoutlmv2"),J4o=o(" \u2014 "),Eq=a("a"),Y4o=o("LayoutLMv2FeatureExtractor"),K4o=o(" (LayoutLMv2 model)"),Z4o=l(),Zh=a("li"),kde=a("strong"),e2o=o("layoutlmv3"),o2o=o(" \u2014 "),Cq=a("a"),r2o=o("LayoutLMv3FeatureExtractor"),t2o=o(" (LayoutLMv3 model)"),a2o=l(),ep=a("li"),Sde=a("strong"),n2o=o("levit"),s2o=o(" \u2014 "),wq=a("a"),l2o=o("LevitFeatureExtractor"),i2o=o(" (LeViT model)"),d2o=l(),op=a("li"),Rde=a("strong"),c2o=o("maskformer"),f2o=o(" \u2014 "),Aq=a("a"),m2o=o("MaskFormerFeatureExtractor"),g2o=o(" (MaskFormer model)"),h2o=l(),rp=a("li"),Pde=a("strong"),p2o=o("mctct"),_2o=o(" \u2014 "),Lq=a("a"),u2o=o("MCTCTFeatureExtractor"),b2o=o(" (M-CTC-T model)"),v2o=l(),tp=a("li"),Bde=a("strong"),F2o=o("mobilevit"),T2o=o(" \u2014 "),yq=a("a"),M2o=o("MobileViTFeatureExtractor"),E2o=o(" (MobileViT model)"),C2o=l(),ap=a("li"),Ide=a("strong"),w2o=o("perceiver"),A2o=o(" \u2014 "),xq=a("a"),L2o=o("PerceiverFeatureExtractor"),y2o=o(" (Perceiver model)"),x2o=l(),np=a("li"),Nde=a("strong"),$2o=o("poolformer"),k2o=o(" \u2014 "),$q=a("a"),S2o=o("PoolFormerFeatureExtractor"),R2o=o(" (PoolFormer model)"),P2o=l(),sp=a("li"),qde=a("strong"),B2o=o("regnet"),I2o=o(" \u2014 "),kq=a("a"),N2o=o("ConvNextFeatureExtractor"),q2o=o(" (RegNet model)"),j2o=l(),lp=a("li"),jde=a("strong"),D2o=o("resnet"),G2o=o(" \u2014 "),Sq=a("a"),O2o=o("ConvNextFeatureExtractor"),V2o=o(" (ResNet model)"),X2o=l(),ip=a("li"),Dde=a("strong"),z2o=o("segformer"),Q2o=o(" \u2014 "),Rq=a("a"),W2o=o("SegformerFeatureExtractor"),H2o=o(" (SegFormer model)"),U2o=l(),dp=a("li"),Gde=a("strong"),J2o=o("speech_to_text"),Y2o=o(" \u2014 "),Pq=a("a"),K2o=o("Speech2TextFeatureExtractor"),Z2o=o(" (Speech2Text model)"),ebo=l(),cp=a("li"),Ode=a("strong"),obo=o("swin"),rbo=o(" \u2014 "),Bq=a("a"),tbo=o("ViTFeatureExtractor"),abo=o(" (Swin Transformer model)"),nbo=l(),fp=a("li"),Vde=a("strong"),sbo=o("swinv2"),lbo=o(" \u2014 "),Iq=a("a"),ibo=o("ViTFeatureExtractor"),dbo=o(" (Swin Transformer V2 model)"),cbo=l(),mp=a("li"),Xde=a("strong"),fbo=o("van"),mbo=o(" \u2014 "),Nq=a("a"),gbo=o("ConvNextFeatureExtractor"),hbo=o(" (VAN model)"),pbo=l(),gp=a("li"),zde=a("strong"),_bo=o("vilt"),ubo=o(" \u2014 "),qq=a("a"),bbo=o("ViltFeatureExtractor"),vbo=o(" (ViLT model)"),Fbo=l(),hp=a("li"),Qde=a("strong"),Tbo=o("vit"),Mbo=o(" \u2014 "),jq=a("a"),Ebo=o("ViTFeatureExtractor"),Cbo=o(" (ViT model)"),wbo=l(),pp=a("li"),Wde=a("strong"),Abo=o("vit_mae"),Lbo=o(" \u2014 "),Dq=a("a"),ybo=o("ViTFeatureExtractor"),xbo=o(" (ViTMAE model)"),$bo=l(),_p=a("li"),Hde=a("strong"),kbo=o("wav2vec2"),Sbo=o(" \u2014 "),Gq=a("a"),Rbo=o("Wav2Vec2FeatureExtractor"),Pbo=o(" (Wav2Vec2 model)"),Bbo=l(),up=a("li"),Ude=a("strong"),Ibo=o("wav2vec2-conformer"),Nbo=o(" \u2014 "),Oq=a("a"),qbo=o("Wav2Vec2FeatureExtractor"),jbo=o(" (Wav2Vec2-Conformer model)"),Dbo=l(),bp=a("li"),Jde=a("strong"),Gbo=o("yolos"),Obo=o(" \u2014 "),Vq=a("a"),Vbo=o("YolosFeatureExtractor"),Xbo=o(" (YOLOS model)"),zbo=l(),F(vp.$$.fragment),Qbo=l(),F(Fp.$$.fragment),Wbo=l(),Tp=a("div"),F(RL.$$.fragment),Hbo=l(),Yde=a("p"),Ubo=o("Register a new feature extractor for this class."),zXe=l(),Gi=a("h2"),Mp=a("a"),Kde=a("span"),F(PL.$$.fragment),Jbo=l(),Zde=a("span"),Ybo=o("AutoProcessor"),QXe=l(),xo=a("div"),F(BL.$$.fragment),Kbo=l(),IL=a("p"),Zbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Xq=a("a"),evo=o("AutoProcessor.from_pretrained()"),ovo=o(" class method."),rvo=l(),NL=a("p"),tvo=o("This class cannot be instantiated directly using "),ece=a("code"),avo=o("__init__()"),nvo=o(" (throws an error)."),svo=l(),Je=a("div"),F(qL.$$.fragment),lvo=l(),oce=a("p"),ivo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dvo=l(),Oi=a("p"),cvo=o("The processor class to instantiate is selected based on the "),rce=a("code"),fvo=o("model_type"),mvo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),gvo=o("pretrained_model_name_or_path"),hvo=o(" if possible):"),pvo=l(),pe=a("ul"),Ep=a("li"),ace=a("strong"),_vo=o("clip"),uvo=o(" \u2014 "),zq=a("a"),bvo=o("CLIPProcessor"),vvo=o(" (CLIP model)"),Fvo=l(),Cp=a("li"),nce=a("strong"),Tvo=o("flava"),Mvo=o(" \u2014 "),Qq=a("a"),Evo=o("FlavaProcessor"),Cvo=o(" (FLAVA model)"),wvo=l(),wp=a("li"),sce=a("strong"),Avo=o("groupvit"),Lvo=o(" \u2014 "),Wq=a("a"),yvo=o("CLIPProcessor"),xvo=o(" (GroupViT model)"),$vo=l(),Ap=a("li"),lce=a("strong"),kvo=o("layoutlmv2"),Svo=o(" \u2014 "),Hq=a("a"),Rvo=o("LayoutLMv2Processor"),Pvo=o(" (LayoutLMv2 model)"),Bvo=l(),Lp=a("li"),ice=a("strong"),Ivo=o("layoutlmv3"),Nvo=o(" \u2014 "),Uq=a("a"),qvo=o("LayoutLMv3Processor"),jvo=o(" (LayoutLMv3 model)"),Dvo=l(),yp=a("li"),dce=a("strong"),Gvo=o("layoutxlm"),Ovo=o(" \u2014 "),Jq=a("a"),Vvo=o("LayoutXLMProcessor"),Xvo=o(" (LayoutXLM model)"),zvo=l(),xp=a("li"),cce=a("strong"),Qvo=o("sew"),Wvo=o(" \u2014 "),Yq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (SEW model)"),Jvo=l(),$p=a("li"),fce=a("strong"),Yvo=o("sew-d"),Kvo=o(" \u2014 "),Kq=a("a"),Zvo=o("Wav2Vec2Processor"),eFo=o(" (SEW-D model)"),oFo=l(),kp=a("li"),mce=a("strong"),rFo=o("speech_to_text"),tFo=o(" \u2014 "),Zq=a("a"),aFo=o("Speech2TextProcessor"),nFo=o(" (Speech2Text model)"),sFo=l(),Sp=a("li"),gce=a("strong"),lFo=o("speech_to_text_2"),iFo=o(" \u2014 "),ej=a("a"),dFo=o("Speech2Text2Processor"),cFo=o(" (Speech2Text2 model)"),fFo=l(),Rp=a("li"),hce=a("strong"),mFo=o("trocr"),gFo=o(" \u2014 "),oj=a("a"),hFo=o("TrOCRProcessor"),pFo=o(" (TrOCR model)"),_Fo=l(),Pp=a("li"),pce=a("strong"),uFo=o("unispeech"),bFo=o(" \u2014 "),rj=a("a"),vFo=o("Wav2Vec2Processor"),FFo=o(" (UniSpeech model)"),TFo=l(),Bp=a("li"),_ce=a("strong"),MFo=o("unispeech-sat"),EFo=o(" \u2014 "),tj=a("a"),CFo=o("Wav2Vec2Processor"),wFo=o(" (UniSpeechSat model)"),AFo=l(),Ip=a("li"),uce=a("strong"),LFo=o("vilt"),yFo=o(" \u2014 "),aj=a("a"),xFo=o("ViltProcessor"),$Fo=o(" (ViLT model)"),kFo=l(),Np=a("li"),bce=a("strong"),SFo=o("vision-text-dual-encoder"),RFo=o(" \u2014 "),nj=a("a"),PFo=o("VisionTextDualEncoderProcessor"),BFo=o(" (VisionTextDualEncoder model)"),IFo=l(),qp=a("li"),vce=a("strong"),NFo=o("wav2vec2"),qFo=o(" \u2014 "),sj=a("a"),jFo=o("Wav2Vec2Processor"),DFo=o(" (Wav2Vec2 model)"),GFo=l(),jp=a("li"),Fce=a("strong"),OFo=o("wav2vec2-conformer"),VFo=o(" \u2014 "),lj=a("a"),XFo=o("Wav2Vec2Processor"),zFo=o(" (Wav2Vec2-Conformer model)"),QFo=l(),Dp=a("li"),Tce=a("strong"),WFo=o("wavlm"),HFo=o(" \u2014 "),ij=a("a"),UFo=o("Wav2Vec2Processor"),JFo=o(" (WavLM model)"),YFo=l(),F(Gp.$$.fragment),KFo=l(),F(Op.$$.fragment),ZFo=l(),Vp=a("div"),F(jL.$$.fragment),e6o=l(),Mce=a("p"),o6o=o("Register a new processor for this class."),WXe=l(),Vi=a("h2"),Xp=a("a"),Ece=a("span"),F(DL.$$.fragment),r6o=l(),Cce=a("span"),t6o=o("AutoModel"),HXe=l(),$o=a("div"),F(GL.$$.fragment),a6o=l(),Xi=a("p"),n6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dj=a("a"),s6o=o("from_pretrained()"),l6o=o(" class method or the "),cj=a("a"),i6o=o("from_config()"),d6o=o(` class
method.`),c6o=l(),OL=a("p"),f6o=o("This class cannot be instantiated directly using "),wce=a("code"),m6o=o("__init__()"),g6o=o(" (throws an error)."),h6o=l(),it=a("div"),F(VL.$$.fragment),p6o=l(),Ace=a("p"),_6o=o("Instantiates one of the base model classes of the library from a configuration."),u6o=l(),zi=a("p"),b6o=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),v6o=o("not"),F6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),T6o=o("from_pretrained()"),M6o=o(" to load the model weights."),E6o=l(),F(zp.$$.fragment),C6o=l(),Ye=a("div"),F(XL.$$.fragment),w6o=l(),yce=a("p"),A6o=o("Instantiate one of the base model classes of the library from a pretrained model."),L6o=l(),Ia=a("p"),y6o=o("The model class to instantiate is selected based on the "),xce=a("code"),x6o=o("model_type"),$6o=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),k6o=o("pretrained_model_name_or_path"),S6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),R6o=o("pretrained_model_name_or_path"),P6o=o(":"),B6o=l(),y=a("ul"),Qp=a("li"),Sce=a("strong"),I6o=o("albert"),N6o=o(" \u2014 "),mj=a("a"),q6o=o("AlbertModel"),j6o=o(" (ALBERT model)"),D6o=l(),Wp=a("li"),Rce=a("strong"),G6o=o("bart"),O6o=o(" \u2014 "),gj=a("a"),V6o=o("BartModel"),X6o=o(" (BART model)"),z6o=l(),Hp=a("li"),Pce=a("strong"),Q6o=o("beit"),W6o=o(" \u2014 "),hj=a("a"),H6o=o("BeitModel"),U6o=o(" (BEiT model)"),J6o=l(),Up=a("li"),Bce=a("strong"),Y6o=o("bert"),K6o=o(" \u2014 "),pj=a("a"),Z6o=o("BertModel"),eTo=o(" (BERT model)"),oTo=l(),Jp=a("li"),Ice=a("strong"),rTo=o("bert-generation"),tTo=o(" \u2014 "),_j=a("a"),aTo=o("BertGenerationEncoder"),nTo=o(" (Bert Generation model)"),sTo=l(),Yp=a("li"),Nce=a("strong"),lTo=o("big_bird"),iTo=o(" \u2014 "),uj=a("a"),dTo=o("BigBirdModel"),cTo=o(" (BigBird model)"),fTo=l(),Kp=a("li"),qce=a("strong"),mTo=o("bigbird_pegasus"),gTo=o(" \u2014 "),bj=a("a"),hTo=o("BigBirdPegasusModel"),pTo=o(" (BigBird-Pegasus model)"),_To=l(),Zp=a("li"),jce=a("strong"),uTo=o("blenderbot"),bTo=o(" \u2014 "),vj=a("a"),vTo=o("BlenderbotModel"),FTo=o(" (Blenderbot model)"),TTo=l(),e_=a("li"),Dce=a("strong"),MTo=o("blenderbot-small"),ETo=o(" \u2014 "),Fj=a("a"),CTo=o("BlenderbotSmallModel"),wTo=o(" (BlenderbotSmall model)"),ATo=l(),o_=a("li"),Gce=a("strong"),LTo=o("bloom"),yTo=o(" \u2014 "),Tj=a("a"),xTo=o("BloomModel"),$To=o(" (BLOOM model)"),kTo=l(),r_=a("li"),Oce=a("strong"),STo=o("camembert"),RTo=o(" \u2014 "),Mj=a("a"),PTo=o("CamembertModel"),BTo=o(" (CamemBERT model)"),ITo=l(),t_=a("li"),Vce=a("strong"),NTo=o("canine"),qTo=o(" \u2014 "),Ej=a("a"),jTo=o("CanineModel"),DTo=o(" (CANINE model)"),GTo=l(),a_=a("li"),Xce=a("strong"),OTo=o("clip"),VTo=o(" \u2014 "),Cj=a("a"),XTo=o("CLIPModel"),zTo=o(" (CLIP model)"),QTo=l(),n_=a("li"),zce=a("strong"),WTo=o("codegen"),HTo=o(" \u2014 "),wj=a("a"),UTo=o("CodeGenModel"),JTo=o(" (CodeGen model)"),YTo=l(),s_=a("li"),Qce=a("strong"),KTo=o("convbert"),ZTo=o(" \u2014 "),Aj=a("a"),e7o=o("ConvBertModel"),o7o=o(" (ConvBERT model)"),r7o=l(),l_=a("li"),Wce=a("strong"),t7o=o("convnext"),a7o=o(" \u2014 "),Lj=a("a"),n7o=o("ConvNextModel"),s7o=o(" (ConvNeXT model)"),l7o=l(),i_=a("li"),Hce=a("strong"),i7o=o("ctrl"),d7o=o(" \u2014 "),yj=a("a"),c7o=o("CTRLModel"),f7o=o(" (CTRL model)"),m7o=l(),d_=a("li"),Uce=a("strong"),g7o=o("cvt"),h7o=o(" \u2014 "),xj=a("a"),p7o=o("CvtModel"),_7o=o(" (CvT model)"),u7o=l(),c_=a("li"),Jce=a("strong"),b7o=o("data2vec-audio"),v7o=o(" \u2014 "),$j=a("a"),F7o=o("Data2VecAudioModel"),T7o=o(" (Data2VecAudio model)"),M7o=l(),f_=a("li"),Yce=a("strong"),E7o=o("data2vec-text"),C7o=o(" \u2014 "),kj=a("a"),w7o=o("Data2VecTextModel"),A7o=o(" (Data2VecText model)"),L7o=l(),m_=a("li"),Kce=a("strong"),y7o=o("data2vec-vision"),x7o=o(" \u2014 "),Sj=a("a"),$7o=o("Data2VecVisionModel"),k7o=o(" (Data2VecVision model)"),S7o=l(),g_=a("li"),Zce=a("strong"),R7o=o("deberta"),P7o=o(" \u2014 "),Rj=a("a"),B7o=o("DebertaModel"),I7o=o(" (DeBERTa model)"),N7o=l(),h_=a("li"),efe=a("strong"),q7o=o("deberta-v2"),j7o=o(" \u2014 "),Pj=a("a"),D7o=o("DebertaV2Model"),G7o=o(" (DeBERTa-v2 model)"),O7o=l(),p_=a("li"),ofe=a("strong"),V7o=o("decision_transformer"),X7o=o(" \u2014 "),Bj=a("a"),z7o=o("DecisionTransformerModel"),Q7o=o(" (Decision Transformer model)"),W7o=l(),__=a("li"),rfe=a("strong"),H7o=o("deit"),U7o=o(" \u2014 "),Ij=a("a"),J7o=o("DeiTModel"),Y7o=o(" (DeiT model)"),K7o=l(),u_=a("li"),tfe=a("strong"),Z7o=o("detr"),e9o=o(" \u2014 "),Nj=a("a"),o9o=o("DetrModel"),r9o=o(" (DETR model)"),t9o=l(),b_=a("li"),afe=a("strong"),a9o=o("distilbert"),n9o=o(" \u2014 "),qj=a("a"),s9o=o("DistilBertModel"),l9o=o(" (DistilBERT model)"),i9o=l(),v_=a("li"),nfe=a("strong"),d9o=o("dpr"),c9o=o(" \u2014 "),jj=a("a"),f9o=o("DPRQuestionEncoder"),m9o=o(" (DPR model)"),g9o=l(),F_=a("li"),sfe=a("strong"),h9o=o("dpt"),p9o=o(" \u2014 "),Dj=a("a"),_9o=o("DPTModel"),u9o=o(" (DPT model)"),b9o=l(),T_=a("li"),lfe=a("strong"),v9o=o("electra"),F9o=o(" \u2014 "),Gj=a("a"),T9o=o("ElectraModel"),M9o=o(" (ELECTRA model)"),E9o=l(),M_=a("li"),ife=a("strong"),C9o=o("flaubert"),w9o=o(" \u2014 "),Oj=a("a"),A9o=o("FlaubertModel"),L9o=o(" (FlauBERT model)"),y9o=l(),E_=a("li"),dfe=a("strong"),x9o=o("flava"),$9o=o(" \u2014 "),Vj=a("a"),k9o=o("FlavaModel"),S9o=o(" (FLAVA model)"),R9o=l(),C_=a("li"),cfe=a("strong"),P9o=o("fnet"),B9o=o(" \u2014 "),Xj=a("a"),I9o=o("FNetModel"),N9o=o(" (FNet model)"),q9o=l(),w_=a("li"),ffe=a("strong"),j9o=o("fsmt"),D9o=o(" \u2014 "),zj=a("a"),G9o=o("FSMTModel"),O9o=o(" (FairSeq Machine-Translation model)"),V9o=l(),Us=a("li"),mfe=a("strong"),X9o=o("funnel"),z9o=o(" \u2014 "),Qj=a("a"),Q9o=o("FunnelModel"),W9o=o(" or "),Wj=a("a"),H9o=o("FunnelBaseModel"),U9o=o(" (Funnel Transformer model)"),J9o=l(),A_=a("li"),gfe=a("strong"),Y9o=o("glpn"),K9o=o(" \u2014 "),Hj=a("a"),Z9o=o("GLPNModel"),eMo=o(" (GLPN model)"),oMo=l(),L_=a("li"),hfe=a("strong"),rMo=o("gpt2"),tMo=o(" \u2014 "),Uj=a("a"),aMo=o("GPT2Model"),nMo=o(" (OpenAI GPT-2 model)"),sMo=l(),y_=a("li"),pfe=a("strong"),lMo=o("gpt_neo"),iMo=o(" \u2014 "),Jj=a("a"),dMo=o("GPTNeoModel"),cMo=o(" (GPT Neo model)"),fMo=l(),x_=a("li"),_fe=a("strong"),mMo=o("gpt_neox"),gMo=o(" \u2014 "),Yj=a("a"),hMo=o("GPTNeoXModel"),pMo=o(" (GPT NeoX model)"),_Mo=l(),$_=a("li"),ufe=a("strong"),uMo=o("gptj"),bMo=o(" \u2014 "),Kj=a("a"),vMo=o("GPTJModel"),FMo=o(" (GPT-J model)"),TMo=l(),k_=a("li"),bfe=a("strong"),MMo=o("groupvit"),EMo=o(" \u2014 "),Zj=a("a"),CMo=o("GroupViTModel"),wMo=o(" (GroupViT model)"),AMo=l(),S_=a("li"),vfe=a("strong"),LMo=o("hubert"),yMo=o(" \u2014 "),eD=a("a"),xMo=o("HubertModel"),$Mo=o(" (Hubert model)"),kMo=l(),R_=a("li"),Ffe=a("strong"),SMo=o("ibert"),RMo=o(" \u2014 "),oD=a("a"),PMo=o("IBertModel"),BMo=o(" (I-BERT model)"),IMo=l(),P_=a("li"),Tfe=a("strong"),NMo=o("imagegpt"),qMo=o(" \u2014 "),rD=a("a"),jMo=o("ImageGPTModel"),DMo=o(" (ImageGPT model)"),GMo=l(),B_=a("li"),Mfe=a("strong"),OMo=o("layoutlm"),VMo=o(" \u2014 "),tD=a("a"),XMo=o("LayoutLMModel"),zMo=o(" (LayoutLM model)"),QMo=l(),I_=a("li"),Efe=a("strong"),WMo=o("layoutlmv2"),HMo=o(" \u2014 "),aD=a("a"),UMo=o("LayoutLMv2Model"),JMo=o(" (LayoutLMv2 model)"),YMo=l(),N_=a("li"),Cfe=a("strong"),KMo=o("layoutlmv3"),ZMo=o(" \u2014 "),nD=a("a"),eEo=o("LayoutLMv3Model"),oEo=o(" (LayoutLMv3 model)"),rEo=l(),q_=a("li"),wfe=a("strong"),tEo=o("led"),aEo=o(" \u2014 "),sD=a("a"),nEo=o("LEDModel"),sEo=o(" (LED model)"),lEo=l(),j_=a("li"),Afe=a("strong"),iEo=o("levit"),dEo=o(" \u2014 "),lD=a("a"),cEo=o("LevitModel"),fEo=o(" (LeViT model)"),mEo=l(),D_=a("li"),Lfe=a("strong"),gEo=o("longformer"),hEo=o(" \u2014 "),iD=a("a"),pEo=o("LongformerModel"),_Eo=o(" (Longformer model)"),uEo=l(),G_=a("li"),yfe=a("strong"),bEo=o("longt5"),vEo=o(" \u2014 "),dD=a("a"),FEo=o("LongT5Model"),TEo=o(" (LongT5 model)"),MEo=l(),O_=a("li"),xfe=a("strong"),EEo=o("luke"),CEo=o(" \u2014 "),cD=a("a"),wEo=o("LukeModel"),AEo=o(" (LUKE model)"),LEo=l(),V_=a("li"),$fe=a("strong"),yEo=o("lxmert"),xEo=o(" \u2014 "),fD=a("a"),$Eo=o("LxmertModel"),kEo=o(" (LXMERT model)"),SEo=l(),X_=a("li"),kfe=a("strong"),REo=o("m2m_100"),PEo=o(" \u2014 "),mD=a("a"),BEo=o("M2M100Model"),IEo=o(" (M2M100 model)"),NEo=l(),z_=a("li"),Sfe=a("strong"),qEo=o("marian"),jEo=o(" \u2014 "),gD=a("a"),DEo=o("MarianModel"),GEo=o(" (Marian model)"),OEo=l(),Q_=a("li"),Rfe=a("strong"),VEo=o("maskformer"),XEo=o(" \u2014 "),hD=a("a"),zEo=o("MaskFormerModel"),QEo=o(" (MaskFormer model)"),WEo=l(),W_=a("li"),Pfe=a("strong"),HEo=o("mbart"),UEo=o(" \u2014 "),pD=a("a"),JEo=o("MBartModel"),YEo=o(" (mBART model)"),KEo=l(),H_=a("li"),Bfe=a("strong"),ZEo=o("mctct"),eCo=o(" \u2014 "),_D=a("a"),oCo=o("MCTCTModel"),rCo=o(" (M-CTC-T model)"),tCo=l(),U_=a("li"),Ife=a("strong"),aCo=o("megatron-bert"),nCo=o(" \u2014 "),uD=a("a"),sCo=o("MegatronBertModel"),lCo=o(" (Megatron-BERT model)"),iCo=l(),J_=a("li"),Nfe=a("strong"),dCo=o("mobilebert"),cCo=o(" \u2014 "),bD=a("a"),fCo=o("MobileBertModel"),mCo=o(" (MobileBERT model)"),gCo=l(),Y_=a("li"),qfe=a("strong"),hCo=o("mobilevit"),pCo=o(" \u2014 "),vD=a("a"),_Co=o("MobileViTModel"),uCo=o(" (MobileViT model)"),bCo=l(),K_=a("li"),jfe=a("strong"),vCo=o("mpnet"),FCo=o(" \u2014 "),FD=a("a"),TCo=o("MPNetModel"),MCo=o(" (MPNet model)"),ECo=l(),Z_=a("li"),Dfe=a("strong"),CCo=o("mt5"),wCo=o(" \u2014 "),TD=a("a"),ACo=o("MT5Model"),LCo=o(" (MT5 model)"),yCo=l(),eu=a("li"),Gfe=a("strong"),xCo=o("mvp"),$Co=o(" \u2014 "),MD=a("a"),kCo=o("MvpModel"),SCo=o(" (MVP model)"),RCo=l(),ou=a("li"),Ofe=a("strong"),PCo=o("nezha"),BCo=o(" \u2014 "),ED=a("a"),ICo=o("NezhaModel"),NCo=o(" (Nezha model)"),qCo=l(),ru=a("li"),Vfe=a("strong"),jCo=o("nllb"),DCo=o(" \u2014 "),CD=a("a"),GCo=o("M2M100Model"),OCo=o(" (NLLB model)"),VCo=l(),tu=a("li"),Xfe=a("strong"),XCo=o("nystromformer"),zCo=o(" \u2014 "),wD=a("a"),QCo=o("NystromformerModel"),WCo=o(" (Nystr\xF6mformer model)"),HCo=l(),au=a("li"),zfe=a("strong"),UCo=o("openai-gpt"),JCo=o(" \u2014 "),AD=a("a"),YCo=o("OpenAIGPTModel"),KCo=o(" (OpenAI GPT model)"),ZCo=l(),nu=a("li"),Qfe=a("strong"),e5o=o("opt"),o5o=o(" \u2014 "),LD=a("a"),r5o=o("OPTModel"),t5o=o(" (OPT model)"),a5o=l(),su=a("li"),Wfe=a("strong"),n5o=o("pegasus"),s5o=o(" \u2014 "),yD=a("a"),l5o=o("PegasusModel"),i5o=o(" (Pegasus model)"),d5o=l(),lu=a("li"),Hfe=a("strong"),c5o=o("perceiver"),f5o=o(" \u2014 "),xD=a("a"),m5o=o("PerceiverModel"),g5o=o(" (Perceiver model)"),h5o=l(),iu=a("li"),Ufe=a("strong"),p5o=o("plbart"),_5o=o(" \u2014 "),$D=a("a"),u5o=o("PLBartModel"),b5o=o(" (PLBart model)"),v5o=l(),du=a("li"),Jfe=a("strong"),F5o=o("poolformer"),T5o=o(" \u2014 "),kD=a("a"),M5o=o("PoolFormerModel"),E5o=o(" (PoolFormer model)"),C5o=l(),cu=a("li"),Yfe=a("strong"),w5o=o("prophetnet"),A5o=o(" \u2014 "),SD=a("a"),L5o=o("ProphetNetModel"),y5o=o(" (ProphetNet model)"),x5o=l(),fu=a("li"),Kfe=a("strong"),$5o=o("qdqbert"),k5o=o(" \u2014 "),RD=a("a"),S5o=o("QDQBertModel"),R5o=o(" (QDQBert model)"),P5o=l(),mu=a("li"),Zfe=a("strong"),B5o=o("reformer"),I5o=o(" \u2014 "),PD=a("a"),N5o=o("ReformerModel"),q5o=o(" (Reformer model)"),j5o=l(),gu=a("li"),eme=a("strong"),D5o=o("regnet"),G5o=o(" \u2014 "),BD=a("a"),O5o=o("RegNetModel"),V5o=o(" (RegNet model)"),X5o=l(),hu=a("li"),ome=a("strong"),z5o=o("rembert"),Q5o=o(" \u2014 "),ID=a("a"),W5o=o("RemBertModel"),H5o=o(" (RemBERT model)"),U5o=l(),pu=a("li"),rme=a("strong"),J5o=o("resnet"),Y5o=o(" \u2014 "),ND=a("a"),K5o=o("ResNetModel"),Z5o=o(" (ResNet model)"),e3o=l(),_u=a("li"),tme=a("strong"),o3o=o("retribert"),r3o=o(" \u2014 "),qD=a("a"),t3o=o("RetriBertModel"),a3o=o(" (RetriBERT model)"),n3o=l(),uu=a("li"),ame=a("strong"),s3o=o("roberta"),l3o=o(" \u2014 "),jD=a("a"),i3o=o("RobertaModel"),d3o=o(" (RoBERTa model)"),c3o=l(),bu=a("li"),nme=a("strong"),f3o=o("roformer"),m3o=o(" \u2014 "),DD=a("a"),g3o=o("RoFormerModel"),h3o=o(" (RoFormer model)"),p3o=l(),vu=a("li"),sme=a("strong"),_3o=o("segformer"),u3o=o(" \u2014 "),GD=a("a"),b3o=o("SegformerModel"),v3o=o(" (SegFormer model)"),F3o=l(),Fu=a("li"),lme=a("strong"),T3o=o("sew"),M3o=o(" \u2014 "),OD=a("a"),E3o=o("SEWModel"),C3o=o(" (SEW model)"),w3o=l(),Tu=a("li"),ime=a("strong"),A3o=o("sew-d"),L3o=o(" \u2014 "),VD=a("a"),y3o=o("SEWDModel"),x3o=o(" (SEW-D model)"),$3o=l(),Mu=a("li"),dme=a("strong"),k3o=o("speech_to_text"),S3o=o(" \u2014 "),XD=a("a"),R3o=o("Speech2TextModel"),P3o=o(" (Speech2Text model)"),B3o=l(),Eu=a("li"),cme=a("strong"),I3o=o("splinter"),N3o=o(" \u2014 "),zD=a("a"),q3o=o("SplinterModel"),j3o=o(" (Splinter model)"),D3o=l(),Cu=a("li"),fme=a("strong"),G3o=o("squeezebert"),O3o=o(" \u2014 "),QD=a("a"),V3o=o("SqueezeBertModel"),X3o=o(" (SqueezeBERT model)"),z3o=l(),wu=a("li"),mme=a("strong"),Q3o=o("swin"),W3o=o(" \u2014 "),WD=a("a"),H3o=o("SwinModel"),U3o=o(" (Swin Transformer model)"),J3o=l(),Au=a("li"),gme=a("strong"),Y3o=o("swinv2"),K3o=o(" \u2014 "),HD=a("a"),Z3o=o("Swinv2Model"),e0o=o(" (Swin Transformer V2 model)"),o0o=l(),Lu=a("li"),hme=a("strong"),r0o=o("t5"),t0o=o(" \u2014 "),UD=a("a"),a0o=o("T5Model"),n0o=o(" (T5 model)"),s0o=l(),yu=a("li"),pme=a("strong"),l0o=o("tapas"),i0o=o(" \u2014 "),JD=a("a"),d0o=o("TapasModel"),c0o=o(" (TAPAS model)"),f0o=l(),xu=a("li"),_me=a("strong"),m0o=o("trajectory_transformer"),g0o=o(" \u2014 "),YD=a("a"),h0o=o("TrajectoryTransformerModel"),p0o=o(" (Trajectory Transformer model)"),_0o=l(),$u=a("li"),ume=a("strong"),u0o=o("transfo-xl"),b0o=o(" \u2014 "),KD=a("a"),v0o=o("TransfoXLModel"),F0o=o(" (Transformer-XL model)"),T0o=l(),ku=a("li"),bme=a("strong"),M0o=o("unispeech"),E0o=o(" \u2014 "),ZD=a("a"),C0o=o("UniSpeechModel"),w0o=o(" (UniSpeech model)"),A0o=l(),Su=a("li"),vme=a("strong"),L0o=o("unispeech-sat"),y0o=o(" \u2014 "),eG=a("a"),x0o=o("UniSpeechSatModel"),$0o=o(" (UniSpeechSat model)"),k0o=l(),Ru=a("li"),Fme=a("strong"),S0o=o("van"),R0o=o(" \u2014 "),oG=a("a"),P0o=o("VanModel"),B0o=o(" (VAN model)"),I0o=l(),Pu=a("li"),Tme=a("strong"),N0o=o("vilt"),q0o=o(" \u2014 "),rG=a("a"),j0o=o("ViltModel"),D0o=o(" (ViLT model)"),G0o=l(),Bu=a("li"),Mme=a("strong"),O0o=o("vision-text-dual-encoder"),V0o=o(" \u2014 "),tG=a("a"),X0o=o("VisionTextDualEncoderModel"),z0o=o(" (VisionTextDualEncoder model)"),Q0o=l(),Iu=a("li"),Eme=a("strong"),W0o=o("visual_bert"),H0o=o(" \u2014 "),aG=a("a"),U0o=o("VisualBertModel"),J0o=o(" (VisualBERT model)"),Y0o=l(),Nu=a("li"),Cme=a("strong"),K0o=o("vit"),Z0o=o(" \u2014 "),nG=a("a"),ewo=o("ViTModel"),owo=o(" (ViT model)"),rwo=l(),qu=a("li"),wme=a("strong"),two=o("vit_mae"),awo=o(" \u2014 "),sG=a("a"),nwo=o("ViTMAEModel"),swo=o(" (ViTMAE model)"),lwo=l(),ju=a("li"),Ame=a("strong"),iwo=o("wav2vec2"),dwo=o(" \u2014 "),lG=a("a"),cwo=o("Wav2Vec2Model"),fwo=o(" (Wav2Vec2 model)"),mwo=l(),Du=a("li"),Lme=a("strong"),gwo=o("wav2vec2-conformer"),hwo=o(" \u2014 "),iG=a("a"),pwo=o("Wav2Vec2ConformerModel"),_wo=o(" (Wav2Vec2-Conformer model)"),uwo=l(),Gu=a("li"),yme=a("strong"),bwo=o("wavlm"),vwo=o(" \u2014 "),dG=a("a"),Fwo=o("WavLMModel"),Two=o(" (WavLM model)"),Mwo=l(),Ou=a("li"),xme=a("strong"),Ewo=o("xglm"),Cwo=o(" \u2014 "),cG=a("a"),wwo=o("XGLMModel"),Awo=o(" (XGLM model)"),Lwo=l(),Vu=a("li"),$me=a("strong"),ywo=o("xlm"),xwo=o(" \u2014 "),fG=a("a"),$wo=o("XLMModel"),kwo=o(" (XLM model)"),Swo=l(),Xu=a("li"),kme=a("strong"),Rwo=o("xlm-prophetnet"),Pwo=o(" \u2014 "),mG=a("a"),Bwo=o("XLMProphetNetModel"),Iwo=o(" (XLM-ProphetNet model)"),Nwo=l(),zu=a("li"),Sme=a("strong"),qwo=o("xlm-roberta"),jwo=o(" \u2014 "),gG=a("a"),Dwo=o("XLMRobertaModel"),Gwo=o(" (XLM-RoBERTa model)"),Owo=l(),Qu=a("li"),Rme=a("strong"),Vwo=o("xlm-roberta-xl"),Xwo=o(" \u2014 "),hG=a("a"),zwo=o("XLMRobertaXLModel"),Qwo=o(" (XLM-RoBERTa-XL model)"),Wwo=l(),Wu=a("li"),Pme=a("strong"),Hwo=o("xlnet"),Uwo=o(" \u2014 "),pG=a("a"),Jwo=o("XLNetModel"),Ywo=o(" (XLNet model)"),Kwo=l(),Hu=a("li"),Bme=a("strong"),Zwo=o("yolos"),eAo=o(" \u2014 "),_G=a("a"),oAo=o("YolosModel"),rAo=o(" (YOLOS model)"),tAo=l(),Uu=a("li"),Ime=a("strong"),aAo=o("yoso"),nAo=o(" \u2014 "),uG=a("a"),sAo=o("YosoModel"),lAo=o(" (YOSO model)"),iAo=l(),Ju=a("p"),dAo=o("The model is set in evaluation mode by default using "),Nme=a("code"),cAo=o("model.eval()"),fAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=a("code"),mAo=o("model.train()"),gAo=l(),F(Yu.$$.fragment),UXe=l(),Qi=a("h2"),Ku=a("a"),jme=a("span"),F(zL.$$.fragment),hAo=l(),Dme=a("span"),pAo=o("AutoModelForPreTraining"),JXe=l(),ko=a("div"),F(QL.$$.fragment),_Ao=l(),Wi=a("p"),uAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bG=a("a"),bAo=o("from_pretrained()"),vAo=o(" class method or the "),vG=a("a"),FAo=o("from_config()"),TAo=o(` class
method.`),MAo=l(),WL=a("p"),EAo=o("This class cannot be instantiated directly using "),Gme=a("code"),CAo=o("__init__()"),wAo=o(" (throws an error)."),AAo=l(),dt=a("div"),F(HL.$$.fragment),LAo=l(),Ome=a("p"),yAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xAo=l(),Hi=a("p"),$Ao=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),kAo=o("not"),SAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),RAo=o("from_pretrained()"),PAo=o(" to load the model weights."),BAo=l(),F(Zu.$$.fragment),IAo=l(),Ke=a("div"),F(UL.$$.fragment),NAo=l(),Xme=a("p"),qAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jAo=l(),Na=a("p"),DAo=o("The model class to instantiate is selected based on the "),zme=a("code"),GAo=o("model_type"),OAo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),VAo=o("pretrained_model_name_or_path"),XAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=a("code"),zAo=o("pretrained_model_name_or_path"),QAo=o(":"),WAo=l(),G=a("ul"),e1=a("li"),Hme=a("strong"),HAo=o("albert"),UAo=o(" \u2014 "),TG=a("a"),JAo=o("AlbertForPreTraining"),YAo=o(" (ALBERT model)"),KAo=l(),o1=a("li"),Ume=a("strong"),ZAo=o("bart"),eLo=o(" \u2014 "),MG=a("a"),oLo=o("BartForConditionalGeneration"),rLo=o(" (BART model)"),tLo=l(),r1=a("li"),Jme=a("strong"),aLo=o("bert"),nLo=o(" \u2014 "),EG=a("a"),sLo=o("BertForPreTraining"),lLo=o(" (BERT model)"),iLo=l(),t1=a("li"),Yme=a("strong"),dLo=o("big_bird"),cLo=o(" \u2014 "),CG=a("a"),fLo=o("BigBirdForPreTraining"),mLo=o(" (BigBird model)"),gLo=l(),a1=a("li"),Kme=a("strong"),hLo=o("bloom"),pLo=o(" \u2014 "),wG=a("a"),_Lo=o("BloomForCausalLM"),uLo=o(" (BLOOM model)"),bLo=l(),n1=a("li"),Zme=a("strong"),vLo=o("camembert"),FLo=o(" \u2014 "),AG=a("a"),TLo=o("CamembertForMaskedLM"),MLo=o(" (CamemBERT model)"),ELo=l(),s1=a("li"),ege=a("strong"),CLo=o("ctrl"),wLo=o(" \u2014 "),LG=a("a"),ALo=o("CTRLLMHeadModel"),LLo=o(" (CTRL model)"),yLo=l(),l1=a("li"),oge=a("strong"),xLo=o("data2vec-text"),$Lo=o(" \u2014 "),yG=a("a"),kLo=o("Data2VecTextForMaskedLM"),SLo=o(" (Data2VecText model)"),RLo=l(),i1=a("li"),rge=a("strong"),PLo=o("deberta"),BLo=o(" \u2014 "),xG=a("a"),ILo=o("DebertaForMaskedLM"),NLo=o(" (DeBERTa model)"),qLo=l(),d1=a("li"),tge=a("strong"),jLo=o("deberta-v2"),DLo=o(" \u2014 "),$G=a("a"),GLo=o("DebertaV2ForMaskedLM"),OLo=o(" (DeBERTa-v2 model)"),VLo=l(),c1=a("li"),age=a("strong"),XLo=o("distilbert"),zLo=o(" \u2014 "),kG=a("a"),QLo=o("DistilBertForMaskedLM"),WLo=o(" (DistilBERT model)"),HLo=l(),f1=a("li"),nge=a("strong"),ULo=o("electra"),JLo=o(" \u2014 "),SG=a("a"),YLo=o("ElectraForPreTraining"),KLo=o(" (ELECTRA model)"),ZLo=l(),m1=a("li"),sge=a("strong"),eyo=o("flaubert"),oyo=o(" \u2014 "),RG=a("a"),ryo=o("FlaubertWithLMHeadModel"),tyo=o(" (FlauBERT model)"),ayo=l(),g1=a("li"),lge=a("strong"),nyo=o("flava"),syo=o(" \u2014 "),PG=a("a"),lyo=o("FlavaForPreTraining"),iyo=o(" (FLAVA model)"),dyo=l(),h1=a("li"),ige=a("strong"),cyo=o("fnet"),fyo=o(" \u2014 "),BG=a("a"),myo=o("FNetForPreTraining"),gyo=o(" (FNet model)"),hyo=l(),p1=a("li"),dge=a("strong"),pyo=o("fsmt"),_yo=o(" \u2014 "),IG=a("a"),uyo=o("FSMTForConditionalGeneration"),byo=o(" (FairSeq Machine-Translation model)"),vyo=l(),_1=a("li"),cge=a("strong"),Fyo=o("funnel"),Tyo=o(" \u2014 "),NG=a("a"),Myo=o("FunnelForPreTraining"),Eyo=o(" (Funnel Transformer model)"),Cyo=l(),u1=a("li"),fge=a("strong"),wyo=o("gpt2"),Ayo=o(" \u2014 "),qG=a("a"),Lyo=o("GPT2LMHeadModel"),yyo=o(" (OpenAI GPT-2 model)"),xyo=l(),b1=a("li"),mge=a("strong"),$yo=o("ibert"),kyo=o(" \u2014 "),jG=a("a"),Syo=o("IBertForMaskedLM"),Ryo=o(" (I-BERT model)"),Pyo=l(),v1=a("li"),gge=a("strong"),Byo=o("layoutlm"),Iyo=o(" \u2014 "),DG=a("a"),Nyo=o("LayoutLMForMaskedLM"),qyo=o(" (LayoutLM model)"),jyo=l(),F1=a("li"),hge=a("strong"),Dyo=o("longformer"),Gyo=o(" \u2014 "),GG=a("a"),Oyo=o("LongformerForMaskedLM"),Vyo=o(" (Longformer model)"),Xyo=l(),T1=a("li"),pge=a("strong"),zyo=o("lxmert"),Qyo=o(" \u2014 "),OG=a("a"),Wyo=o("LxmertForPreTraining"),Hyo=o(" (LXMERT model)"),Uyo=l(),M1=a("li"),_ge=a("strong"),Jyo=o("megatron-bert"),Yyo=o(" \u2014 "),VG=a("a"),Kyo=o("MegatronBertForPreTraining"),Zyo=o(" (Megatron-BERT model)"),e8o=l(),E1=a("li"),uge=a("strong"),o8o=o("mobilebert"),r8o=o(" \u2014 "),XG=a("a"),t8o=o("MobileBertForPreTraining"),a8o=o(" (MobileBERT model)"),n8o=l(),C1=a("li"),bge=a("strong"),s8o=o("mpnet"),l8o=o(" \u2014 "),zG=a("a"),i8o=o("MPNetForMaskedLM"),d8o=o(" (MPNet model)"),c8o=l(),w1=a("li"),vge=a("strong"),f8o=o("mvp"),m8o=o(" \u2014 "),QG=a("a"),g8o=o("MvpForConditionalGeneration"),h8o=o(" (MVP model)"),p8o=l(),A1=a("li"),Fge=a("strong"),_8o=o("nezha"),u8o=o(" \u2014 "),WG=a("a"),b8o=o("NezhaForPreTraining"),v8o=o(" (Nezha model)"),F8o=l(),L1=a("li"),Tge=a("strong"),T8o=o("openai-gpt"),M8o=o(" \u2014 "),HG=a("a"),E8o=o("OpenAIGPTLMHeadModel"),C8o=o(" (OpenAI GPT model)"),w8o=l(),y1=a("li"),Mge=a("strong"),A8o=o("retribert"),L8o=o(" \u2014 "),UG=a("a"),y8o=o("RetriBertModel"),x8o=o(" (RetriBERT model)"),$8o=l(),x1=a("li"),Ege=a("strong"),k8o=o("roberta"),S8o=o(" \u2014 "),JG=a("a"),R8o=o("RobertaForMaskedLM"),P8o=o(" (RoBERTa model)"),B8o=l(),$1=a("li"),Cge=a("strong"),I8o=o("splinter"),N8o=o(" \u2014 "),YG=a("a"),q8o=o("SplinterForPreTraining"),j8o=o(" (Splinter model)"),D8o=l(),k1=a("li"),wge=a("strong"),G8o=o("squeezebert"),O8o=o(" \u2014 "),KG=a("a"),V8o=o("SqueezeBertForMaskedLM"),X8o=o(" (SqueezeBERT model)"),z8o=l(),S1=a("li"),Age=a("strong"),Q8o=o("t5"),W8o=o(" \u2014 "),ZG=a("a"),H8o=o("T5ForConditionalGeneration"),U8o=o(" (T5 model)"),J8o=l(),R1=a("li"),Lge=a("strong"),Y8o=o("tapas"),K8o=o(" \u2014 "),eO=a("a"),Z8o=o("TapasForMaskedLM"),exo=o(" (TAPAS model)"),oxo=l(),P1=a("li"),yge=a("strong"),rxo=o("transfo-xl"),txo=o(" \u2014 "),oO=a("a"),axo=o("TransfoXLLMHeadModel"),nxo=o(" (Transformer-XL model)"),sxo=l(),B1=a("li"),xge=a("strong"),lxo=o("unispeech"),ixo=o(" \u2014 "),rO=a("a"),dxo=o("UniSpeechForPreTraining"),cxo=o(" (UniSpeech model)"),fxo=l(),I1=a("li"),$ge=a("strong"),mxo=o("unispeech-sat"),gxo=o(" \u2014 "),tO=a("a"),hxo=o("UniSpeechSatForPreTraining"),pxo=o(" (UniSpeechSat model)"),_xo=l(),N1=a("li"),kge=a("strong"),uxo=o("visual_bert"),bxo=o(" \u2014 "),aO=a("a"),vxo=o("VisualBertForPreTraining"),Fxo=o(" (VisualBERT model)"),Txo=l(),q1=a("li"),Sge=a("strong"),Mxo=o("vit_mae"),Exo=o(" \u2014 "),nO=a("a"),Cxo=o("ViTMAEForPreTraining"),wxo=o(" (ViTMAE model)"),Axo=l(),j1=a("li"),Rge=a("strong"),Lxo=o("wav2vec2"),yxo=o(" \u2014 "),sO=a("a"),xxo=o("Wav2Vec2ForPreTraining"),$xo=o(" (Wav2Vec2 model)"),kxo=l(),D1=a("li"),Pge=a("strong"),Sxo=o("wav2vec2-conformer"),Rxo=o(" \u2014 "),lO=a("a"),Pxo=o("Wav2Vec2ConformerForPreTraining"),Bxo=o(" (Wav2Vec2-Conformer model)"),Ixo=l(),G1=a("li"),Bge=a("strong"),Nxo=o("xlm"),qxo=o(" \u2014 "),iO=a("a"),jxo=o("XLMWithLMHeadModel"),Dxo=o(" (XLM model)"),Gxo=l(),O1=a("li"),Ige=a("strong"),Oxo=o("xlm-roberta"),Vxo=o(" \u2014 "),dO=a("a"),Xxo=o("XLMRobertaForMaskedLM"),zxo=o(" (XLM-RoBERTa model)"),Qxo=l(),V1=a("li"),Nge=a("strong"),Wxo=o("xlm-roberta-xl"),Hxo=o(" \u2014 "),cO=a("a"),Uxo=o("XLMRobertaXLForMaskedLM"),Jxo=o(" (XLM-RoBERTa-XL model)"),Yxo=l(),X1=a("li"),qge=a("strong"),Kxo=o("xlnet"),Zxo=o(" \u2014 "),fO=a("a"),e$o=o("XLNetLMHeadModel"),o$o=o(" (XLNet model)"),r$o=l(),z1=a("p"),t$o=o("The model is set in evaluation mode by default using "),jge=a("code"),a$o=o("model.eval()"),n$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=a("code"),s$o=o("model.train()"),l$o=l(),F(Q1.$$.fragment),YXe=l(),Ui=a("h2"),W1=a("a"),Gge=a("span"),F(JL.$$.fragment),i$o=l(),Oge=a("span"),d$o=o("AutoModelForCausalLM"),KXe=l(),So=a("div"),F(YL.$$.fragment),c$o=l(),Ji=a("p"),f$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mO=a("a"),m$o=o("from_pretrained()"),g$o=o(" class method or the "),gO=a("a"),h$o=o("from_config()"),p$o=o(` class
method.`),_$o=l(),KL=a("p"),u$o=o("This class cannot be instantiated directly using "),Vge=a("code"),b$o=o("__init__()"),v$o=o(" (throws an error)."),F$o=l(),ct=a("div"),F(ZL.$$.fragment),T$o=l(),Xge=a("p"),M$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E$o=l(),Yi=a("p"),C$o=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),w$o=o("not"),A$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),L$o=o("from_pretrained()"),y$o=o(" to load the model weights."),x$o=l(),F(H1.$$.fragment),$$o=l(),Ze=a("div"),F(ey.$$.fragment),k$o=l(),Qge=a("p"),S$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R$o=l(),qa=a("p"),P$o=o("The model class to instantiate is selected based on the "),Wge=a("code"),B$o=o("model_type"),I$o=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),N$o=o("pretrained_model_name_or_path"),q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),j$o=o("pretrained_model_name_or_path"),D$o=o(":"),G$o=l(),z=a("ul"),U1=a("li"),Jge=a("strong"),O$o=o("bart"),V$o=o(" \u2014 "),pO=a("a"),X$o=o("BartForCausalLM"),z$o=o(" (BART model)"),Q$o=l(),J1=a("li"),Yge=a("strong"),W$o=o("bert"),H$o=o(" \u2014 "),_O=a("a"),U$o=o("BertLMHeadModel"),J$o=o(" (BERT model)"),Y$o=l(),Y1=a("li"),Kge=a("strong"),K$o=o("bert-generation"),Z$o=o(" \u2014 "),uO=a("a"),eko=o("BertGenerationDecoder"),oko=o(" (Bert Generation model)"),rko=l(),K1=a("li"),Zge=a("strong"),tko=o("big_bird"),ako=o(" \u2014 "),bO=a("a"),nko=o("BigBirdForCausalLM"),sko=o(" (BigBird model)"),lko=l(),Z1=a("li"),ehe=a("strong"),iko=o("bigbird_pegasus"),dko=o(" \u2014 "),vO=a("a"),cko=o("BigBirdPegasusForCausalLM"),fko=o(" (BigBird-Pegasus model)"),mko=l(),e4=a("li"),ohe=a("strong"),gko=o("blenderbot"),hko=o(" \u2014 "),FO=a("a"),pko=o("BlenderbotForCausalLM"),_ko=o(" (Blenderbot model)"),uko=l(),o4=a("li"),rhe=a("strong"),bko=o("blenderbot-small"),vko=o(" \u2014 "),TO=a("a"),Fko=o("BlenderbotSmallForCausalLM"),Tko=o(" (BlenderbotSmall model)"),Mko=l(),r4=a("li"),the=a("strong"),Eko=o("bloom"),Cko=o(" \u2014 "),MO=a("a"),wko=o("BloomForCausalLM"),Ako=o(" (BLOOM model)"),Lko=l(),t4=a("li"),ahe=a("strong"),yko=o("camembert"),xko=o(" \u2014 "),EO=a("a"),$ko=o("CamembertForCausalLM"),kko=o(" (CamemBERT model)"),Sko=l(),a4=a("li"),nhe=a("strong"),Rko=o("codegen"),Pko=o(" \u2014 "),CO=a("a"),Bko=o("CodeGenForCausalLM"),Iko=o(" (CodeGen model)"),Nko=l(),n4=a("li"),she=a("strong"),qko=o("ctrl"),jko=o(" \u2014 "),wO=a("a"),Dko=o("CTRLLMHeadModel"),Gko=o(" (CTRL model)"),Oko=l(),s4=a("li"),lhe=a("strong"),Vko=o("data2vec-text"),Xko=o(" \u2014 "),AO=a("a"),zko=o("Data2VecTextForCausalLM"),Qko=o(" (Data2VecText model)"),Wko=l(),l4=a("li"),ihe=a("strong"),Hko=o("electra"),Uko=o(" \u2014 "),LO=a("a"),Jko=o("ElectraForCausalLM"),Yko=o(" (ELECTRA model)"),Kko=l(),i4=a("li"),dhe=a("strong"),Zko=o("gpt2"),eSo=o(" \u2014 "),yO=a("a"),oSo=o("GPT2LMHeadModel"),rSo=o(" (OpenAI GPT-2 model)"),tSo=l(),d4=a("li"),che=a("strong"),aSo=o("gpt_neo"),nSo=o(" \u2014 "),xO=a("a"),sSo=o("GPTNeoForCausalLM"),lSo=o(" (GPT Neo model)"),iSo=l(),c4=a("li"),fhe=a("strong"),dSo=o("gpt_neox"),cSo=o(" \u2014 "),$O=a("a"),fSo=o("GPTNeoXForCausalLM"),mSo=o(" (GPT NeoX model)"),gSo=l(),f4=a("li"),mhe=a("strong"),hSo=o("gptj"),pSo=o(" \u2014 "),kO=a("a"),_So=o("GPTJForCausalLM"),uSo=o(" (GPT-J model)"),bSo=l(),m4=a("li"),ghe=a("strong"),vSo=o("marian"),FSo=o(" \u2014 "),SO=a("a"),TSo=o("MarianForCausalLM"),MSo=o(" (Marian model)"),ESo=l(),g4=a("li"),hhe=a("strong"),CSo=o("mbart"),wSo=o(" \u2014 "),RO=a("a"),ASo=o("MBartForCausalLM"),LSo=o(" (mBART model)"),ySo=l(),h4=a("li"),phe=a("strong"),xSo=o("megatron-bert"),$So=o(" \u2014 "),PO=a("a"),kSo=o("MegatronBertForCausalLM"),SSo=o(" (Megatron-BERT model)"),RSo=l(),p4=a("li"),_he=a("strong"),PSo=o("mvp"),BSo=o(" \u2014 "),BO=a("a"),ISo=o("MvpForCausalLM"),NSo=o(" (MVP model)"),qSo=l(),_4=a("li"),uhe=a("strong"),jSo=o("openai-gpt"),DSo=o(" \u2014 "),IO=a("a"),GSo=o("OpenAIGPTLMHeadModel"),OSo=o(" (OpenAI GPT model)"),VSo=l(),u4=a("li"),bhe=a("strong"),XSo=o("opt"),zSo=o(" \u2014 "),NO=a("a"),QSo=o("OPTForCausalLM"),WSo=o(" (OPT model)"),HSo=l(),b4=a("li"),vhe=a("strong"),USo=o("pegasus"),JSo=o(" \u2014 "),qO=a("a"),YSo=o("PegasusForCausalLM"),KSo=o(" (Pegasus model)"),ZSo=l(),v4=a("li"),Fhe=a("strong"),eRo=o("plbart"),oRo=o(" \u2014 "),jO=a("a"),rRo=o("PLBartForCausalLM"),tRo=o(" (PLBart model)"),aRo=l(),F4=a("li"),The=a("strong"),nRo=o("prophetnet"),sRo=o(" \u2014 "),DO=a("a"),lRo=o("ProphetNetForCausalLM"),iRo=o(" (ProphetNet model)"),dRo=l(),T4=a("li"),Mhe=a("strong"),cRo=o("qdqbert"),fRo=o(" \u2014 "),GO=a("a"),mRo=o("QDQBertLMHeadModel"),gRo=o(" (QDQBert model)"),hRo=l(),M4=a("li"),Ehe=a("strong"),pRo=o("reformer"),_Ro=o(" \u2014 "),OO=a("a"),uRo=o("ReformerModelWithLMHead"),bRo=o(" (Reformer model)"),vRo=l(),E4=a("li"),Che=a("strong"),FRo=o("rembert"),TRo=o(" \u2014 "),VO=a("a"),MRo=o("RemBertForCausalLM"),ERo=o(" (RemBERT model)"),CRo=l(),C4=a("li"),whe=a("strong"),wRo=o("roberta"),ARo=o(" \u2014 "),XO=a("a"),LRo=o("RobertaForCausalLM"),yRo=o(" (RoBERTa model)"),xRo=l(),w4=a("li"),Ahe=a("strong"),$Ro=o("roformer"),kRo=o(" \u2014 "),zO=a("a"),SRo=o("RoFormerForCausalLM"),RRo=o(" (RoFormer model)"),PRo=l(),A4=a("li"),Lhe=a("strong"),BRo=o("speech_to_text_2"),IRo=o(" \u2014 "),QO=a("a"),NRo=o("Speech2Text2ForCausalLM"),qRo=o(" (Speech2Text2 model)"),jRo=l(),L4=a("li"),yhe=a("strong"),DRo=o("transfo-xl"),GRo=o(" \u2014 "),WO=a("a"),ORo=o("TransfoXLLMHeadModel"),VRo=o(" (Transformer-XL model)"),XRo=l(),y4=a("li"),xhe=a("strong"),zRo=o("trocr"),QRo=o(" \u2014 "),HO=a("a"),WRo=o("TrOCRForCausalLM"),HRo=o(" (TrOCR model)"),URo=l(),x4=a("li"),$he=a("strong"),JRo=o("xglm"),YRo=o(" \u2014 "),UO=a("a"),KRo=o("XGLMForCausalLM"),ZRo=o(" (XGLM model)"),ePo=l(),$4=a("li"),khe=a("strong"),oPo=o("xlm"),rPo=o(" \u2014 "),JO=a("a"),tPo=o("XLMWithLMHeadModel"),aPo=o(" (XLM model)"),nPo=l(),k4=a("li"),She=a("strong"),sPo=o("xlm-prophetnet"),lPo=o(" \u2014 "),YO=a("a"),iPo=o("XLMProphetNetForCausalLM"),dPo=o(" (XLM-ProphetNet model)"),cPo=l(),S4=a("li"),Rhe=a("strong"),fPo=o("xlm-roberta"),mPo=o(" \u2014 "),KO=a("a"),gPo=o("XLMRobertaForCausalLM"),hPo=o(" (XLM-RoBERTa model)"),pPo=l(),R4=a("li"),Phe=a("strong"),_Po=o("xlm-roberta-xl"),uPo=o(" \u2014 "),ZO=a("a"),bPo=o("XLMRobertaXLForCausalLM"),vPo=o(" (XLM-RoBERTa-XL model)"),FPo=l(),P4=a("li"),Bhe=a("strong"),TPo=o("xlnet"),MPo=o(" \u2014 "),eV=a("a"),EPo=o("XLNetLMHeadModel"),CPo=o(" (XLNet model)"),wPo=l(),B4=a("p"),APo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),LPo=o("model.eval()"),yPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),xPo=o("model.train()"),$Po=l(),F(I4.$$.fragment),ZXe=l(),Ki=a("h2"),N4=a("a"),qhe=a("span"),F(oy.$$.fragment),kPo=l(),jhe=a("span"),SPo=o("AutoModelForMaskedLM"),eze=l(),Ro=a("div"),F(ry.$$.fragment),RPo=l(),Zi=a("p"),PPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oV=a("a"),BPo=o("from_pretrained()"),IPo=o(" class method or the "),rV=a("a"),NPo=o("from_config()"),qPo=o(` class
method.`),jPo=l(),ty=a("p"),DPo=o("This class cannot be instantiated directly using "),Dhe=a("code"),GPo=o("__init__()"),OPo=o(" (throws an error)."),VPo=l(),ft=a("div"),F(ay.$$.fragment),XPo=l(),Ghe=a("p"),zPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QPo=l(),ed=a("p"),WPo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),HPo=o("not"),UPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),JPo=o("from_pretrained()"),YPo=o(" to load the model weights."),KPo=l(),F(q4.$$.fragment),ZPo=l(),eo=a("div"),F(ny.$$.fragment),eBo=l(),Vhe=a("p"),oBo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rBo=l(),ja=a("p"),tBo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),aBo=o("model_type"),nBo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),sBo=o("pretrained_model_name_or_path"),lBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),iBo=o("pretrained_model_name_or_path"),dBo=o(":"),cBo=l(),W=a("ul"),j4=a("li"),Whe=a("strong"),fBo=o("albert"),mBo=o(" \u2014 "),aV=a("a"),gBo=o("AlbertForMaskedLM"),hBo=o(" (ALBERT model)"),pBo=l(),D4=a("li"),Hhe=a("strong"),_Bo=o("bart"),uBo=o(" \u2014 "),nV=a("a"),bBo=o("BartForConditionalGeneration"),vBo=o(" (BART model)"),FBo=l(),G4=a("li"),Uhe=a("strong"),TBo=o("bert"),MBo=o(" \u2014 "),sV=a("a"),EBo=o("BertForMaskedLM"),CBo=o(" (BERT model)"),wBo=l(),O4=a("li"),Jhe=a("strong"),ABo=o("big_bird"),LBo=o(" \u2014 "),lV=a("a"),yBo=o("BigBirdForMaskedLM"),xBo=o(" (BigBird model)"),$Bo=l(),V4=a("li"),Yhe=a("strong"),kBo=o("camembert"),SBo=o(" \u2014 "),iV=a("a"),RBo=o("CamembertForMaskedLM"),PBo=o(" (CamemBERT model)"),BBo=l(),X4=a("li"),Khe=a("strong"),IBo=o("convbert"),NBo=o(" \u2014 "),dV=a("a"),qBo=o("ConvBertForMaskedLM"),jBo=o(" (ConvBERT model)"),DBo=l(),z4=a("li"),Zhe=a("strong"),GBo=o("data2vec-text"),OBo=o(" \u2014 "),cV=a("a"),VBo=o("Data2VecTextForMaskedLM"),XBo=o(" (Data2VecText model)"),zBo=l(),Q4=a("li"),epe=a("strong"),QBo=o("deberta"),WBo=o(" \u2014 "),fV=a("a"),HBo=o("DebertaForMaskedLM"),UBo=o(" (DeBERTa model)"),JBo=l(),W4=a("li"),ope=a("strong"),YBo=o("deberta-v2"),KBo=o(" \u2014 "),mV=a("a"),ZBo=o("DebertaV2ForMaskedLM"),eIo=o(" (DeBERTa-v2 model)"),oIo=l(),H4=a("li"),rpe=a("strong"),rIo=o("distilbert"),tIo=o(" \u2014 "),gV=a("a"),aIo=o("DistilBertForMaskedLM"),nIo=o(" (DistilBERT model)"),sIo=l(),U4=a("li"),tpe=a("strong"),lIo=o("electra"),iIo=o(" \u2014 "),hV=a("a"),dIo=o("ElectraForMaskedLM"),cIo=o(" (ELECTRA model)"),fIo=l(),J4=a("li"),ape=a("strong"),mIo=o("flaubert"),gIo=o(" \u2014 "),pV=a("a"),hIo=o("FlaubertWithLMHeadModel"),pIo=o(" (FlauBERT model)"),_Io=l(),Y4=a("li"),npe=a("strong"),uIo=o("fnet"),bIo=o(" \u2014 "),_V=a("a"),vIo=o("FNetForMaskedLM"),FIo=o(" (FNet model)"),TIo=l(),K4=a("li"),spe=a("strong"),MIo=o("funnel"),EIo=o(" \u2014 "),uV=a("a"),CIo=o("FunnelForMaskedLM"),wIo=o(" (Funnel Transformer model)"),AIo=l(),Z4=a("li"),lpe=a("strong"),LIo=o("ibert"),yIo=o(" \u2014 "),bV=a("a"),xIo=o("IBertForMaskedLM"),$Io=o(" (I-BERT model)"),kIo=l(),e2=a("li"),ipe=a("strong"),SIo=o("layoutlm"),RIo=o(" \u2014 "),vV=a("a"),PIo=o("LayoutLMForMaskedLM"),BIo=o(" (LayoutLM model)"),IIo=l(),o2=a("li"),dpe=a("strong"),NIo=o("longformer"),qIo=o(" \u2014 "),FV=a("a"),jIo=o("LongformerForMaskedLM"),DIo=o(" (Longformer model)"),GIo=l(),r2=a("li"),cpe=a("strong"),OIo=o("luke"),VIo=o(" \u2014 "),TV=a("a"),XIo=o("LukeForMaskedLM"),zIo=o(" (LUKE model)"),QIo=l(),t2=a("li"),fpe=a("strong"),WIo=o("mbart"),HIo=o(" \u2014 "),MV=a("a"),UIo=o("MBartForConditionalGeneration"),JIo=o(" (mBART model)"),YIo=l(),a2=a("li"),mpe=a("strong"),KIo=o("megatron-bert"),ZIo=o(" \u2014 "),EV=a("a"),eNo=o("MegatronBertForMaskedLM"),oNo=o(" (Megatron-BERT model)"),rNo=l(),n2=a("li"),gpe=a("strong"),tNo=o("mobilebert"),aNo=o(" \u2014 "),CV=a("a"),nNo=o("MobileBertForMaskedLM"),sNo=o(" (MobileBERT model)"),lNo=l(),s2=a("li"),hpe=a("strong"),iNo=o("mpnet"),dNo=o(" \u2014 "),wV=a("a"),cNo=o("MPNetForMaskedLM"),fNo=o(" (MPNet model)"),mNo=l(),l2=a("li"),ppe=a("strong"),gNo=o("mvp"),hNo=o(" \u2014 "),AV=a("a"),pNo=o("MvpForConditionalGeneration"),_No=o(" (MVP model)"),uNo=l(),i2=a("li"),_pe=a("strong"),bNo=o("nezha"),vNo=o(" \u2014 "),LV=a("a"),FNo=o("NezhaForMaskedLM"),TNo=o(" (Nezha model)"),MNo=l(),d2=a("li"),upe=a("strong"),ENo=o("nystromformer"),CNo=o(" \u2014 "),yV=a("a"),wNo=o("NystromformerForMaskedLM"),ANo=o(" (Nystr\xF6mformer model)"),LNo=l(),c2=a("li"),bpe=a("strong"),yNo=o("perceiver"),xNo=o(" \u2014 "),xV=a("a"),$No=o("PerceiverForMaskedLM"),kNo=o(" (Perceiver model)"),SNo=l(),f2=a("li"),vpe=a("strong"),RNo=o("qdqbert"),PNo=o(" \u2014 "),$V=a("a"),BNo=o("QDQBertForMaskedLM"),INo=o(" (QDQBert model)"),NNo=l(),m2=a("li"),Fpe=a("strong"),qNo=o("reformer"),jNo=o(" \u2014 "),kV=a("a"),DNo=o("ReformerForMaskedLM"),GNo=o(" (Reformer model)"),ONo=l(),g2=a("li"),Tpe=a("strong"),VNo=o("rembert"),XNo=o(" \u2014 "),SV=a("a"),zNo=o("RemBertForMaskedLM"),QNo=o(" (RemBERT model)"),WNo=l(),h2=a("li"),Mpe=a("strong"),HNo=o("roberta"),UNo=o(" \u2014 "),RV=a("a"),JNo=o("RobertaForMaskedLM"),YNo=o(" (RoBERTa model)"),KNo=l(),p2=a("li"),Epe=a("strong"),ZNo=o("roformer"),eqo=o(" \u2014 "),PV=a("a"),oqo=o("RoFormerForMaskedLM"),rqo=o(" (RoFormer model)"),tqo=l(),_2=a("li"),Cpe=a("strong"),aqo=o("squeezebert"),nqo=o(" \u2014 "),BV=a("a"),sqo=o("SqueezeBertForMaskedLM"),lqo=o(" (SqueezeBERT model)"),iqo=l(),u2=a("li"),wpe=a("strong"),dqo=o("tapas"),cqo=o(" \u2014 "),IV=a("a"),fqo=o("TapasForMaskedLM"),mqo=o(" (TAPAS model)"),gqo=l(),b2=a("li"),Ape=a("strong"),hqo=o("wav2vec2"),pqo=o(" \u2014 "),Lpe=a("code"),_qo=o("Wav2Vec2ForMaskedLM"),uqo=o(" (Wav2Vec2 model)"),bqo=l(),v2=a("li"),ype=a("strong"),vqo=o("xlm"),Fqo=o(" \u2014 "),NV=a("a"),Tqo=o("XLMWithLMHeadModel"),Mqo=o(" (XLM model)"),Eqo=l(),F2=a("li"),xpe=a("strong"),Cqo=o("xlm-roberta"),wqo=o(" \u2014 "),qV=a("a"),Aqo=o("XLMRobertaForMaskedLM"),Lqo=o(" (XLM-RoBERTa model)"),yqo=l(),T2=a("li"),$pe=a("strong"),xqo=o("xlm-roberta-xl"),$qo=o(" \u2014 "),jV=a("a"),kqo=o("XLMRobertaXLForMaskedLM"),Sqo=o(" (XLM-RoBERTa-XL model)"),Rqo=l(),M2=a("li"),kpe=a("strong"),Pqo=o("yoso"),Bqo=o(" \u2014 "),DV=a("a"),Iqo=o("YosoForMaskedLM"),Nqo=o(" (YOSO model)"),qqo=l(),E2=a("p"),jqo=o("The model is set in evaluation mode by default using "),Spe=a("code"),Dqo=o("model.eval()"),Gqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),Oqo=o("model.train()"),Vqo=l(),F(C2.$$.fragment),oze=l(),od=a("h2"),w2=a("a"),Ppe=a("span"),F(sy.$$.fragment),Xqo=l(),Bpe=a("span"),zqo=o("AutoModelForSeq2SeqLM"),rze=l(),Po=a("div"),F(ly.$$.fragment),Qqo=l(),rd=a("p"),Wqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GV=a("a"),Hqo=o("from_pretrained()"),Uqo=o(" class method or the "),OV=a("a"),Jqo=o("from_config()"),Yqo=o(` class
method.`),Kqo=l(),iy=a("p"),Zqo=o("This class cannot be instantiated directly using "),Ipe=a("code"),ejo=o("__init__()"),ojo=o(" (throws an error)."),rjo=l(),mt=a("div"),F(dy.$$.fragment),tjo=l(),Npe=a("p"),ajo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),njo=l(),td=a("p"),sjo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),ljo=o("not"),ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),djo=o("from_pretrained()"),cjo=o(" to load the model weights."),fjo=l(),F(A2.$$.fragment),mjo=l(),oo=a("div"),F(cy.$$.fragment),gjo=l(),jpe=a("p"),hjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pjo=l(),Da=a("p"),_jo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),ujo=o("model_type"),bjo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),vjo=o("pretrained_model_name_or_path"),Fjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),Tjo=o("pretrained_model_name_or_path"),Mjo=o(":"),Ejo=l(),fe=a("ul"),L2=a("li"),Vpe=a("strong"),Cjo=o("bart"),wjo=o(" \u2014 "),XV=a("a"),Ajo=o("BartForConditionalGeneration"),Ljo=o(" (BART model)"),yjo=l(),y2=a("li"),Xpe=a("strong"),xjo=o("bigbird_pegasus"),$jo=o(" \u2014 "),zV=a("a"),kjo=o("BigBirdPegasusForConditionalGeneration"),Sjo=o(" (BigBird-Pegasus model)"),Rjo=l(),x2=a("li"),zpe=a("strong"),Pjo=o("blenderbot"),Bjo=o(" \u2014 "),QV=a("a"),Ijo=o("BlenderbotForConditionalGeneration"),Njo=o(" (Blenderbot model)"),qjo=l(),$2=a("li"),Qpe=a("strong"),jjo=o("blenderbot-small"),Djo=o(" \u2014 "),WV=a("a"),Gjo=o("BlenderbotSmallForConditionalGeneration"),Ojo=o(" (BlenderbotSmall model)"),Vjo=l(),k2=a("li"),Wpe=a("strong"),Xjo=o("encoder-decoder"),zjo=o(" \u2014 "),HV=a("a"),Qjo=o("EncoderDecoderModel"),Wjo=o(" (Encoder decoder model)"),Hjo=l(),S2=a("li"),Hpe=a("strong"),Ujo=o("fsmt"),Jjo=o(" \u2014 "),UV=a("a"),Yjo=o("FSMTForConditionalGeneration"),Kjo=o(" (FairSeq Machine-Translation model)"),Zjo=l(),R2=a("li"),Upe=a("strong"),eDo=o("led"),oDo=o(" \u2014 "),JV=a("a"),rDo=o("LEDForConditionalGeneration"),tDo=o(" (LED model)"),aDo=l(),P2=a("li"),Jpe=a("strong"),nDo=o("longt5"),sDo=o(" \u2014 "),YV=a("a"),lDo=o("LongT5ForConditionalGeneration"),iDo=o(" (LongT5 model)"),dDo=l(),B2=a("li"),Ype=a("strong"),cDo=o("m2m_100"),fDo=o(" \u2014 "),KV=a("a"),mDo=o("M2M100ForConditionalGeneration"),gDo=o(" (M2M100 model)"),hDo=l(),I2=a("li"),Kpe=a("strong"),pDo=o("marian"),_Do=o(" \u2014 "),ZV=a("a"),uDo=o("MarianMTModel"),bDo=o(" (Marian model)"),vDo=l(),N2=a("li"),Zpe=a("strong"),FDo=o("mbart"),TDo=o(" \u2014 "),eX=a("a"),MDo=o("MBartForConditionalGeneration"),EDo=o(" (mBART model)"),CDo=l(),q2=a("li"),e_e=a("strong"),wDo=o("mt5"),ADo=o(" \u2014 "),oX=a("a"),LDo=o("MT5ForConditionalGeneration"),yDo=o(" (MT5 model)"),xDo=l(),j2=a("li"),o_e=a("strong"),$Do=o("mvp"),kDo=o(" \u2014 "),rX=a("a"),SDo=o("MvpForConditionalGeneration"),RDo=o(" (MVP model)"),PDo=l(),D2=a("li"),r_e=a("strong"),BDo=o("nllb"),IDo=o(" \u2014 "),tX=a("a"),NDo=o("M2M100ForConditionalGeneration"),qDo=o(" (NLLB model)"),jDo=l(),G2=a("li"),t_e=a("strong"),DDo=o("pegasus"),GDo=o(" \u2014 "),aX=a("a"),ODo=o("PegasusForConditionalGeneration"),VDo=o(" (Pegasus model)"),XDo=l(),O2=a("li"),a_e=a("strong"),zDo=o("plbart"),QDo=o(" \u2014 "),nX=a("a"),WDo=o("PLBartForConditionalGeneration"),HDo=o(" (PLBart model)"),UDo=l(),V2=a("li"),n_e=a("strong"),JDo=o("prophetnet"),YDo=o(" \u2014 "),sX=a("a"),KDo=o("ProphetNetForConditionalGeneration"),ZDo=o(" (ProphetNet model)"),eGo=l(),X2=a("li"),s_e=a("strong"),oGo=o("t5"),rGo=o(" \u2014 "),lX=a("a"),tGo=o("T5ForConditionalGeneration"),aGo=o(" (T5 model)"),nGo=l(),z2=a("li"),l_e=a("strong"),sGo=o("xlm-prophetnet"),lGo=o(" \u2014 "),iX=a("a"),iGo=o("XLMProphetNetForConditionalGeneration"),dGo=o(" (XLM-ProphetNet model)"),cGo=l(),Q2=a("p"),fGo=o("The model is set in evaluation mode by default using "),i_e=a("code"),mGo=o("model.eval()"),gGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),hGo=o("model.train()"),pGo=l(),F(W2.$$.fragment),tze=l(),ad=a("h2"),H2=a("a"),c_e=a("span"),F(fy.$$.fragment),_Go=l(),f_e=a("span"),uGo=o("AutoModelForSequenceClassification"),aze=l(),Bo=a("div"),F(my.$$.fragment),bGo=l(),nd=a("p"),vGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dX=a("a"),FGo=o("from_pretrained()"),TGo=o(" class method or the "),cX=a("a"),MGo=o("from_config()"),EGo=o(` class
method.`),CGo=l(),gy=a("p"),wGo=o("This class cannot be instantiated directly using "),m_e=a("code"),AGo=o("__init__()"),LGo=o(" (throws an error)."),yGo=l(),gt=a("div"),F(hy.$$.fragment),xGo=l(),g_e=a("p"),$Go=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kGo=l(),sd=a("p"),SGo=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),RGo=o("not"),PGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),BGo=o("from_pretrained()"),IGo=o(" to load the model weights."),NGo=l(),F(U2.$$.fragment),qGo=l(),ro=a("div"),F(py.$$.fragment),jGo=l(),p_e=a("p"),DGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GGo=l(),Ga=a("p"),OGo=o("The model class to instantiate is selected based on the "),__e=a("code"),VGo=o("model_type"),XGo=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),zGo=o("pretrained_model_name_or_path"),QGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),WGo=o("pretrained_model_name_or_path"),HGo=o(":"),UGo=l(),B=a("ul"),J2=a("li"),v_e=a("strong"),JGo=o("albert"),YGo=o(" \u2014 "),mX=a("a"),KGo=o("AlbertForSequenceClassification"),ZGo=o(" (ALBERT model)"),eOo=l(),Y2=a("li"),F_e=a("strong"),oOo=o("bart"),rOo=o(" \u2014 "),gX=a("a"),tOo=o("BartForSequenceClassification"),aOo=o(" (BART model)"),nOo=l(),K2=a("li"),T_e=a("strong"),sOo=o("bert"),lOo=o(" \u2014 "),hX=a("a"),iOo=o("BertForSequenceClassification"),dOo=o(" (BERT model)"),cOo=l(),Z2=a("li"),M_e=a("strong"),fOo=o("big_bird"),mOo=o(" \u2014 "),pX=a("a"),gOo=o("BigBirdForSequenceClassification"),hOo=o(" (BigBird model)"),pOo=l(),eb=a("li"),E_e=a("strong"),_Oo=o("bigbird_pegasus"),uOo=o(" \u2014 "),_X=a("a"),bOo=o("BigBirdPegasusForSequenceClassification"),vOo=o(" (BigBird-Pegasus model)"),FOo=l(),ob=a("li"),C_e=a("strong"),TOo=o("bloom"),MOo=o(" \u2014 "),uX=a("a"),EOo=o("BloomForSequenceClassification"),COo=o(" (BLOOM model)"),wOo=l(),rb=a("li"),w_e=a("strong"),AOo=o("camembert"),LOo=o(" \u2014 "),bX=a("a"),yOo=o("CamembertForSequenceClassification"),xOo=o(" (CamemBERT model)"),$Oo=l(),tb=a("li"),A_e=a("strong"),kOo=o("canine"),SOo=o(" \u2014 "),vX=a("a"),ROo=o("CanineForSequenceClassification"),POo=o(" (CANINE model)"),BOo=l(),ab=a("li"),L_e=a("strong"),IOo=o("convbert"),NOo=o(" \u2014 "),FX=a("a"),qOo=o("ConvBertForSequenceClassification"),jOo=o(" (ConvBERT model)"),DOo=l(),nb=a("li"),y_e=a("strong"),GOo=o("ctrl"),OOo=o(" \u2014 "),TX=a("a"),VOo=o("CTRLForSequenceClassification"),XOo=o(" (CTRL model)"),zOo=l(),sb=a("li"),x_e=a("strong"),QOo=o("data2vec-text"),WOo=o(" \u2014 "),MX=a("a"),HOo=o("Data2VecTextForSequenceClassification"),UOo=o(" (Data2VecText model)"),JOo=l(),lb=a("li"),$_e=a("strong"),YOo=o("deberta"),KOo=o(" \u2014 "),EX=a("a"),ZOo=o("DebertaForSequenceClassification"),eVo=o(" (DeBERTa model)"),oVo=l(),ib=a("li"),k_e=a("strong"),rVo=o("deberta-v2"),tVo=o(" \u2014 "),CX=a("a"),aVo=o("DebertaV2ForSequenceClassification"),nVo=o(" (DeBERTa-v2 model)"),sVo=l(),db=a("li"),S_e=a("strong"),lVo=o("distilbert"),iVo=o(" \u2014 "),wX=a("a"),dVo=o("DistilBertForSequenceClassification"),cVo=o(" (DistilBERT model)"),fVo=l(),cb=a("li"),R_e=a("strong"),mVo=o("electra"),gVo=o(" \u2014 "),AX=a("a"),hVo=o("ElectraForSequenceClassification"),pVo=o(" (ELECTRA model)"),_Vo=l(),fb=a("li"),P_e=a("strong"),uVo=o("flaubert"),bVo=o(" \u2014 "),LX=a("a"),vVo=o("FlaubertForSequenceClassification"),FVo=o(" (FlauBERT model)"),TVo=l(),mb=a("li"),B_e=a("strong"),MVo=o("fnet"),EVo=o(" \u2014 "),yX=a("a"),CVo=o("FNetForSequenceClassification"),wVo=o(" (FNet model)"),AVo=l(),gb=a("li"),I_e=a("strong"),LVo=o("funnel"),yVo=o(" \u2014 "),xX=a("a"),xVo=o("FunnelForSequenceClassification"),$Vo=o(" (Funnel Transformer model)"),kVo=l(),hb=a("li"),N_e=a("strong"),SVo=o("gpt2"),RVo=o(" \u2014 "),$X=a("a"),PVo=o("GPT2ForSequenceClassification"),BVo=o(" (OpenAI GPT-2 model)"),IVo=l(),pb=a("li"),q_e=a("strong"),NVo=o("gpt_neo"),qVo=o(" \u2014 "),kX=a("a"),jVo=o("GPTNeoForSequenceClassification"),DVo=o(" (GPT Neo model)"),GVo=l(),_b=a("li"),j_e=a("strong"),OVo=o("gptj"),VVo=o(" \u2014 "),SX=a("a"),XVo=o("GPTJForSequenceClassification"),zVo=o(" (GPT-J model)"),QVo=l(),ub=a("li"),D_e=a("strong"),WVo=o("ibert"),HVo=o(" \u2014 "),RX=a("a"),UVo=o("IBertForSequenceClassification"),JVo=o(" (I-BERT model)"),YVo=l(),bb=a("li"),G_e=a("strong"),KVo=o("layoutlm"),ZVo=o(" \u2014 "),PX=a("a"),eXo=o("LayoutLMForSequenceClassification"),oXo=o(" (LayoutLM model)"),rXo=l(),vb=a("li"),O_e=a("strong"),tXo=o("layoutlmv2"),aXo=o(" \u2014 "),BX=a("a"),nXo=o("LayoutLMv2ForSequenceClassification"),sXo=o(" (LayoutLMv2 model)"),lXo=l(),Fb=a("li"),V_e=a("strong"),iXo=o("layoutlmv3"),dXo=o(" \u2014 "),IX=a("a"),cXo=o("LayoutLMv3ForSequenceClassification"),fXo=o(" (LayoutLMv3 model)"),mXo=l(),Tb=a("li"),X_e=a("strong"),gXo=o("led"),hXo=o(" \u2014 "),NX=a("a"),pXo=o("LEDForSequenceClassification"),_Xo=o(" (LED model)"),uXo=l(),Mb=a("li"),z_e=a("strong"),bXo=o("longformer"),vXo=o(" \u2014 "),qX=a("a"),FXo=o("LongformerForSequenceClassification"),TXo=o(" (Longformer model)"),MXo=l(),Eb=a("li"),Q_e=a("strong"),EXo=o("mbart"),CXo=o(" \u2014 "),jX=a("a"),wXo=o("MBartForSequenceClassification"),AXo=o(" (mBART model)"),LXo=l(),Cb=a("li"),W_e=a("strong"),yXo=o("megatron-bert"),xXo=o(" \u2014 "),DX=a("a"),$Xo=o("MegatronBertForSequenceClassification"),kXo=o(" (Megatron-BERT model)"),SXo=l(),wb=a("li"),H_e=a("strong"),RXo=o("mobilebert"),PXo=o(" \u2014 "),GX=a("a"),BXo=o("MobileBertForSequenceClassification"),IXo=o(" (MobileBERT model)"),NXo=l(),Ab=a("li"),U_e=a("strong"),qXo=o("mpnet"),jXo=o(" \u2014 "),OX=a("a"),DXo=o("MPNetForSequenceClassification"),GXo=o(" (MPNet model)"),OXo=l(),Lb=a("li"),J_e=a("strong"),VXo=o("mvp"),XXo=o(" \u2014 "),VX=a("a"),zXo=o("MvpForSequenceClassification"),QXo=o(" (MVP model)"),WXo=l(),yb=a("li"),Y_e=a("strong"),HXo=o("nezha"),UXo=o(" \u2014 "),XX=a("a"),JXo=o("NezhaForSequenceClassification"),YXo=o(" (Nezha model)"),KXo=l(),xb=a("li"),K_e=a("strong"),ZXo=o("nystromformer"),ezo=o(" \u2014 "),zX=a("a"),ozo=o("NystromformerForSequenceClassification"),rzo=o(" (Nystr\xF6mformer model)"),tzo=l(),$b=a("li"),Z_e=a("strong"),azo=o("openai-gpt"),nzo=o(" \u2014 "),QX=a("a"),szo=o("OpenAIGPTForSequenceClassification"),lzo=o(" (OpenAI GPT model)"),izo=l(),kb=a("li"),eue=a("strong"),dzo=o("opt"),czo=o(" \u2014 "),WX=a("a"),fzo=o("OPTForSequenceClassification"),mzo=o(" (OPT model)"),gzo=l(),Sb=a("li"),oue=a("strong"),hzo=o("perceiver"),pzo=o(" \u2014 "),HX=a("a"),_zo=o("PerceiverForSequenceClassification"),uzo=o(" (Perceiver model)"),bzo=l(),Rb=a("li"),rue=a("strong"),vzo=o("plbart"),Fzo=o(" \u2014 "),UX=a("a"),Tzo=o("PLBartForSequenceClassification"),Mzo=o(" (PLBart model)"),Ezo=l(),Pb=a("li"),tue=a("strong"),Czo=o("qdqbert"),wzo=o(" \u2014 "),JX=a("a"),Azo=o("QDQBertForSequenceClassification"),Lzo=o(" (QDQBert model)"),yzo=l(),Bb=a("li"),aue=a("strong"),xzo=o("reformer"),$zo=o(" \u2014 "),YX=a("a"),kzo=o("ReformerForSequenceClassification"),Szo=o(" (Reformer model)"),Rzo=l(),Ib=a("li"),nue=a("strong"),Pzo=o("rembert"),Bzo=o(" \u2014 "),KX=a("a"),Izo=o("RemBertForSequenceClassification"),Nzo=o(" (RemBERT model)"),qzo=l(),Nb=a("li"),sue=a("strong"),jzo=o("roberta"),Dzo=o(" \u2014 "),ZX=a("a"),Gzo=o("RobertaForSequenceClassification"),Ozo=o(" (RoBERTa model)"),Vzo=l(),qb=a("li"),lue=a("strong"),Xzo=o("roformer"),zzo=o(" \u2014 "),ez=a("a"),Qzo=o("RoFormerForSequenceClassification"),Wzo=o(" (RoFormer model)"),Hzo=l(),jb=a("li"),iue=a("strong"),Uzo=o("squeezebert"),Jzo=o(" \u2014 "),oz=a("a"),Yzo=o("SqueezeBertForSequenceClassification"),Kzo=o(" (SqueezeBERT model)"),Zzo=l(),Db=a("li"),due=a("strong"),eQo=o("tapas"),oQo=o(" \u2014 "),rz=a("a"),rQo=o("TapasForSequenceClassification"),tQo=o(" (TAPAS model)"),aQo=l(),Gb=a("li"),cue=a("strong"),nQo=o("transfo-xl"),sQo=o(" \u2014 "),tz=a("a"),lQo=o("TransfoXLForSequenceClassification"),iQo=o(" (Transformer-XL model)"),dQo=l(),Ob=a("li"),fue=a("strong"),cQo=o("xlm"),fQo=o(" \u2014 "),az=a("a"),mQo=o("XLMForSequenceClassification"),gQo=o(" (XLM model)"),hQo=l(),Vb=a("li"),mue=a("strong"),pQo=o("xlm-roberta"),_Qo=o(" \u2014 "),nz=a("a"),uQo=o("XLMRobertaForSequenceClassification"),bQo=o(" (XLM-RoBERTa model)"),vQo=l(),Xb=a("li"),gue=a("strong"),FQo=o("xlm-roberta-xl"),TQo=o(" \u2014 "),sz=a("a"),MQo=o("XLMRobertaXLForSequenceClassification"),EQo=o(" (XLM-RoBERTa-XL model)"),CQo=l(),zb=a("li"),hue=a("strong"),wQo=o("xlnet"),AQo=o(" \u2014 "),lz=a("a"),LQo=o("XLNetForSequenceClassification"),yQo=o(" (XLNet model)"),xQo=l(),Qb=a("li"),pue=a("strong"),$Qo=o("yoso"),kQo=o(" \u2014 "),iz=a("a"),SQo=o("YosoForSequenceClassification"),RQo=o(" (YOSO model)"),PQo=l(),Wb=a("p"),BQo=o("The model is set in evaluation mode by default using "),_ue=a("code"),IQo=o("model.eval()"),NQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),qQo=o("model.train()"),jQo=l(),F(Hb.$$.fragment),nze=l(),ld=a("h2"),Ub=a("a"),bue=a("span"),F(_y.$$.fragment),DQo=l(),vue=a("span"),GQo=o("AutoModelForMultipleChoice"),sze=l(),Io=a("div"),F(uy.$$.fragment),OQo=l(),id=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=a("a"),XQo=o("from_pretrained()"),zQo=o(" class method or the "),cz=a("a"),QQo=o("from_config()"),WQo=o(` class
method.`),HQo=l(),by=a("p"),UQo=o("This class cannot be instantiated directly using "),Fue=a("code"),JQo=o("__init__()"),YQo=o(" (throws an error)."),KQo=l(),ht=a("div"),F(vy.$$.fragment),ZQo=l(),Tue=a("p"),eWo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oWo=l(),dd=a("p"),rWo=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),tWo=o("not"),aWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),nWo=o("from_pretrained()"),sWo=o(" to load the model weights."),lWo=l(),F(Jb.$$.fragment),iWo=l(),to=a("div"),F(Fy.$$.fragment),dWo=l(),Eue=a("p"),cWo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fWo=l(),Oa=a("p"),mWo=o("The model class to instantiate is selected based on the "),Cue=a("code"),gWo=o("model_type"),hWo=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),pWo=o("pretrained_model_name_or_path"),_Wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),uWo=o("pretrained_model_name_or_path"),bWo=o(":"),vWo=l(),Z=a("ul"),Yb=a("li"),Lue=a("strong"),FWo=o("albert"),TWo=o(" \u2014 "),mz=a("a"),MWo=o("AlbertForMultipleChoice"),EWo=o(" (ALBERT model)"),CWo=l(),Kb=a("li"),yue=a("strong"),wWo=o("bert"),AWo=o(" \u2014 "),gz=a("a"),LWo=o("BertForMultipleChoice"),yWo=o(" (BERT model)"),xWo=l(),Zb=a("li"),xue=a("strong"),$Wo=o("big_bird"),kWo=o(" \u2014 "),hz=a("a"),SWo=o("BigBirdForMultipleChoice"),RWo=o(" (BigBird model)"),PWo=l(),ev=a("li"),$ue=a("strong"),BWo=o("camembert"),IWo=o(" \u2014 "),pz=a("a"),NWo=o("CamembertForMultipleChoice"),qWo=o(" (CamemBERT model)"),jWo=l(),ov=a("li"),kue=a("strong"),DWo=o("canine"),GWo=o(" \u2014 "),_z=a("a"),OWo=o("CanineForMultipleChoice"),VWo=o(" (CANINE model)"),XWo=l(),rv=a("li"),Sue=a("strong"),zWo=o("convbert"),QWo=o(" \u2014 "),uz=a("a"),WWo=o("ConvBertForMultipleChoice"),HWo=o(" (ConvBERT model)"),UWo=l(),tv=a("li"),Rue=a("strong"),JWo=o("data2vec-text"),YWo=o(" \u2014 "),bz=a("a"),KWo=o("Data2VecTextForMultipleChoice"),ZWo=o(" (Data2VecText model)"),eHo=l(),av=a("li"),Pue=a("strong"),oHo=o("deberta-v2"),rHo=o(" \u2014 "),vz=a("a"),tHo=o("DebertaV2ForMultipleChoice"),aHo=o(" (DeBERTa-v2 model)"),nHo=l(),nv=a("li"),Bue=a("strong"),sHo=o("distilbert"),lHo=o(" \u2014 "),Fz=a("a"),iHo=o("DistilBertForMultipleChoice"),dHo=o(" (DistilBERT model)"),cHo=l(),sv=a("li"),Iue=a("strong"),fHo=o("electra"),mHo=o(" \u2014 "),Tz=a("a"),gHo=o("ElectraForMultipleChoice"),hHo=o(" (ELECTRA model)"),pHo=l(),lv=a("li"),Nue=a("strong"),_Ho=o("flaubert"),uHo=o(" \u2014 "),Mz=a("a"),bHo=o("FlaubertForMultipleChoice"),vHo=o(" (FlauBERT model)"),FHo=l(),iv=a("li"),que=a("strong"),THo=o("fnet"),MHo=o(" \u2014 "),Ez=a("a"),EHo=o("FNetForMultipleChoice"),CHo=o(" (FNet model)"),wHo=l(),dv=a("li"),jue=a("strong"),AHo=o("funnel"),LHo=o(" \u2014 "),Cz=a("a"),yHo=o("FunnelForMultipleChoice"),xHo=o(" (Funnel Transformer model)"),$Ho=l(),cv=a("li"),Due=a("strong"),kHo=o("ibert"),SHo=o(" \u2014 "),wz=a("a"),RHo=o("IBertForMultipleChoice"),PHo=o(" (I-BERT model)"),BHo=l(),fv=a("li"),Gue=a("strong"),IHo=o("longformer"),NHo=o(" \u2014 "),Az=a("a"),qHo=o("LongformerForMultipleChoice"),jHo=o(" (Longformer model)"),DHo=l(),mv=a("li"),Oue=a("strong"),GHo=o("megatron-bert"),OHo=o(" \u2014 "),Lz=a("a"),VHo=o("MegatronBertForMultipleChoice"),XHo=o(" (Megatron-BERT model)"),zHo=l(),gv=a("li"),Vue=a("strong"),QHo=o("mobilebert"),WHo=o(" \u2014 "),yz=a("a"),HHo=o("MobileBertForMultipleChoice"),UHo=o(" (MobileBERT model)"),JHo=l(),hv=a("li"),Xue=a("strong"),YHo=o("mpnet"),KHo=o(" \u2014 "),xz=a("a"),ZHo=o("MPNetForMultipleChoice"),eUo=o(" (MPNet model)"),oUo=l(),pv=a("li"),zue=a("strong"),rUo=o("nezha"),tUo=o(" \u2014 "),$z=a("a"),aUo=o("NezhaForMultipleChoice"),nUo=o(" (Nezha model)"),sUo=l(),_v=a("li"),Que=a("strong"),lUo=o("nystromformer"),iUo=o(" \u2014 "),kz=a("a"),dUo=o("NystromformerForMultipleChoice"),cUo=o(" (Nystr\xF6mformer model)"),fUo=l(),uv=a("li"),Wue=a("strong"),mUo=o("qdqbert"),gUo=o(" \u2014 "),Sz=a("a"),hUo=o("QDQBertForMultipleChoice"),pUo=o(" (QDQBert model)"),_Uo=l(),bv=a("li"),Hue=a("strong"),uUo=o("rembert"),bUo=o(" \u2014 "),Rz=a("a"),vUo=o("RemBertForMultipleChoice"),FUo=o(" (RemBERT model)"),TUo=l(),vv=a("li"),Uue=a("strong"),MUo=o("roberta"),EUo=o(" \u2014 "),Pz=a("a"),CUo=o("RobertaForMultipleChoice"),wUo=o(" (RoBERTa model)"),AUo=l(),Fv=a("li"),Jue=a("strong"),LUo=o("roformer"),yUo=o(" \u2014 "),Bz=a("a"),xUo=o("RoFormerForMultipleChoice"),$Uo=o(" (RoFormer model)"),kUo=l(),Tv=a("li"),Yue=a("strong"),SUo=o("squeezebert"),RUo=o(" \u2014 "),Iz=a("a"),PUo=o("SqueezeBertForMultipleChoice"),BUo=o(" (SqueezeBERT model)"),IUo=l(),Mv=a("li"),Kue=a("strong"),NUo=o("xlm"),qUo=o(" \u2014 "),Nz=a("a"),jUo=o("XLMForMultipleChoice"),DUo=o(" (XLM model)"),GUo=l(),Ev=a("li"),Zue=a("strong"),OUo=o("xlm-roberta"),VUo=o(" \u2014 "),qz=a("a"),XUo=o("XLMRobertaForMultipleChoice"),zUo=o(" (XLM-RoBERTa model)"),QUo=l(),Cv=a("li"),e1e=a("strong"),WUo=o("xlm-roberta-xl"),HUo=o(" \u2014 "),jz=a("a"),UUo=o("XLMRobertaXLForMultipleChoice"),JUo=o(" (XLM-RoBERTa-XL model)"),YUo=l(),wv=a("li"),o1e=a("strong"),KUo=o("xlnet"),ZUo=o(" \u2014 "),Dz=a("a"),eJo=o("XLNetForMultipleChoice"),oJo=o(" (XLNet model)"),rJo=l(),Av=a("li"),r1e=a("strong"),tJo=o("yoso"),aJo=o(" \u2014 "),Gz=a("a"),nJo=o("YosoForMultipleChoice"),sJo=o(" (YOSO model)"),lJo=l(),Lv=a("p"),iJo=o("The model is set in evaluation mode by default using "),t1e=a("code"),dJo=o("model.eval()"),cJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=a("code"),fJo=o("model.train()"),mJo=l(),F(yv.$$.fragment),lze=l(),cd=a("h2"),xv=a("a"),n1e=a("span"),F(Ty.$$.fragment),gJo=l(),s1e=a("span"),hJo=o("AutoModelForNextSentencePrediction"),ize=l(),No=a("div"),F(My.$$.fragment),pJo=l(),fd=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Oz=a("a"),uJo=o("from_pretrained()"),bJo=o(" class method or the "),Vz=a("a"),vJo=o("from_config()"),FJo=o(` class
method.`),TJo=l(),Ey=a("p"),MJo=o("This class cannot be instantiated directly using "),l1e=a("code"),EJo=o("__init__()"),CJo=o(" (throws an error)."),wJo=l(),pt=a("div"),F(Cy.$$.fragment),AJo=l(),i1e=a("p"),LJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yJo=l(),md=a("p"),xJo=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),$Jo=o("not"),kJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),SJo=o("from_pretrained()"),RJo=o(" to load the model weights."),PJo=l(),F($v.$$.fragment),BJo=l(),ao=a("div"),F(wy.$$.fragment),IJo=l(),c1e=a("p"),NJo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qJo=l(),Va=a("p"),jJo=o("The model class to instantiate is selected based on the "),f1e=a("code"),DJo=o("model_type"),GJo=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),OJo=o("pretrained_model_name_or_path"),VJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(":"),QJo=l(),qo=a("ul"),kv=a("li"),h1e=a("strong"),WJo=o("bert"),HJo=o(" \u2014 "),zz=a("a"),UJo=o("BertForNextSentencePrediction"),JJo=o(" (BERT model)"),YJo=l(),Sv=a("li"),p1e=a("strong"),KJo=o("fnet"),ZJo=o(" \u2014 "),Qz=a("a"),eYo=o("FNetForNextSentencePrediction"),oYo=o(" (FNet model)"),rYo=l(),Rv=a("li"),_1e=a("strong"),tYo=o("megatron-bert"),aYo=o(" \u2014 "),Wz=a("a"),nYo=o("MegatronBertForNextSentencePrediction"),sYo=o(" (Megatron-BERT model)"),lYo=l(),Pv=a("li"),u1e=a("strong"),iYo=o("mobilebert"),dYo=o(" \u2014 "),Hz=a("a"),cYo=o("MobileBertForNextSentencePrediction"),fYo=o(" (MobileBERT model)"),mYo=l(),Bv=a("li"),b1e=a("strong"),gYo=o("nezha"),hYo=o(" \u2014 "),Uz=a("a"),pYo=o("NezhaForNextSentencePrediction"),_Yo=o(" (Nezha model)"),uYo=l(),Iv=a("li"),v1e=a("strong"),bYo=o("qdqbert"),vYo=o(" \u2014 "),Jz=a("a"),FYo=o("QDQBertForNextSentencePrediction"),TYo=o(" (QDQBert model)"),MYo=l(),Nv=a("p"),EYo=o("The model is set in evaluation mode by default using "),F1e=a("code"),CYo=o("model.eval()"),wYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),AYo=o("model.train()"),LYo=l(),F(qv.$$.fragment),dze=l(),gd=a("h2"),jv=a("a"),M1e=a("span"),F(Ay.$$.fragment),yYo=l(),E1e=a("span"),xYo=o("AutoModelForTokenClassification"),cze=l(),jo=a("div"),F(Ly.$$.fragment),$Yo=l(),hd=a("p"),kYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yz=a("a"),SYo=o("from_pretrained()"),RYo=o(" class method or the "),Kz=a("a"),PYo=o("from_config()"),BYo=o(` class
method.`),IYo=l(),yy=a("p"),NYo=o("This class cannot be instantiated directly using "),C1e=a("code"),qYo=o("__init__()"),jYo=o(" (throws an error)."),DYo=l(),_t=a("div"),F(xy.$$.fragment),GYo=l(),w1e=a("p"),OYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VYo=l(),pd=a("p"),XYo=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),zYo=o("not"),QYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),WYo=o("from_pretrained()"),HYo=o(" to load the model weights."),UYo=l(),F(Dv.$$.fragment),JYo=l(),no=a("div"),F($y.$$.fragment),YYo=l(),L1e=a("p"),KYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZYo=l(),Xa=a("p"),eKo=o("The model class to instantiate is selected based on the "),y1e=a("code"),oKo=o("model_type"),rKo=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),tKo=o("pretrained_model_name_or_path"),aKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),nKo=o("pretrained_model_name_or_path"),sKo=o(":"),lKo=l(),U=a("ul"),Gv=a("li"),k1e=a("strong"),iKo=o("albert"),dKo=o(" \u2014 "),eQ=a("a"),cKo=o("AlbertForTokenClassification"),fKo=o(" (ALBERT model)"),mKo=l(),Ov=a("li"),S1e=a("strong"),gKo=o("bert"),hKo=o(" \u2014 "),oQ=a("a"),pKo=o("BertForTokenClassification"),_Ko=o(" (BERT model)"),uKo=l(),Vv=a("li"),R1e=a("strong"),bKo=o("big_bird"),vKo=o(" \u2014 "),rQ=a("a"),FKo=o("BigBirdForTokenClassification"),TKo=o(" (BigBird model)"),MKo=l(),Xv=a("li"),P1e=a("strong"),EKo=o("bloom"),CKo=o(" \u2014 "),tQ=a("a"),wKo=o("BloomForTokenClassification"),AKo=o(" (BLOOM model)"),LKo=l(),zv=a("li"),B1e=a("strong"),yKo=o("camembert"),xKo=o(" \u2014 "),aQ=a("a"),$Ko=o("CamembertForTokenClassification"),kKo=o(" (CamemBERT model)"),SKo=l(),Qv=a("li"),I1e=a("strong"),RKo=o("canine"),PKo=o(" \u2014 "),nQ=a("a"),BKo=o("CanineForTokenClassification"),IKo=o(" (CANINE model)"),NKo=l(),Wv=a("li"),N1e=a("strong"),qKo=o("convbert"),jKo=o(" \u2014 "),sQ=a("a"),DKo=o("ConvBertForTokenClassification"),GKo=o(" (ConvBERT model)"),OKo=l(),Hv=a("li"),q1e=a("strong"),VKo=o("data2vec-text"),XKo=o(" \u2014 "),lQ=a("a"),zKo=o("Data2VecTextForTokenClassification"),QKo=o(" (Data2VecText model)"),WKo=l(),Uv=a("li"),j1e=a("strong"),HKo=o("deberta"),UKo=o(" \u2014 "),iQ=a("a"),JKo=o("DebertaForTokenClassification"),YKo=o(" (DeBERTa model)"),KKo=l(),Jv=a("li"),D1e=a("strong"),ZKo=o("deberta-v2"),eZo=o(" \u2014 "),dQ=a("a"),oZo=o("DebertaV2ForTokenClassification"),rZo=o(" (DeBERTa-v2 model)"),tZo=l(),Yv=a("li"),G1e=a("strong"),aZo=o("distilbert"),nZo=o(" \u2014 "),cQ=a("a"),sZo=o("DistilBertForTokenClassification"),lZo=o(" (DistilBERT model)"),iZo=l(),Kv=a("li"),O1e=a("strong"),dZo=o("electra"),cZo=o(" \u2014 "),fQ=a("a"),fZo=o("ElectraForTokenClassification"),mZo=o(" (ELECTRA model)"),gZo=l(),Zv=a("li"),V1e=a("strong"),hZo=o("flaubert"),pZo=o(" \u2014 "),mQ=a("a"),_Zo=o("FlaubertForTokenClassification"),uZo=o(" (FlauBERT model)"),bZo=l(),eF=a("li"),X1e=a("strong"),vZo=o("fnet"),FZo=o(" \u2014 "),gQ=a("a"),TZo=o("FNetForTokenClassification"),MZo=o(" (FNet model)"),EZo=l(),oF=a("li"),z1e=a("strong"),CZo=o("funnel"),wZo=o(" \u2014 "),hQ=a("a"),AZo=o("FunnelForTokenClassification"),LZo=o(" (Funnel Transformer model)"),yZo=l(),rF=a("li"),Q1e=a("strong"),xZo=o("gpt2"),$Zo=o(" \u2014 "),pQ=a("a"),kZo=o("GPT2ForTokenClassification"),SZo=o(" (OpenAI GPT-2 model)"),RZo=l(),tF=a("li"),W1e=a("strong"),PZo=o("ibert"),BZo=o(" \u2014 "),_Q=a("a"),IZo=o("IBertForTokenClassification"),NZo=o(" (I-BERT model)"),qZo=l(),aF=a("li"),H1e=a("strong"),jZo=o("layoutlm"),DZo=o(" \u2014 "),uQ=a("a"),GZo=o("LayoutLMForTokenClassification"),OZo=o(" (LayoutLM model)"),VZo=l(),nF=a("li"),U1e=a("strong"),XZo=o("layoutlmv2"),zZo=o(" \u2014 "),bQ=a("a"),QZo=o("LayoutLMv2ForTokenClassification"),WZo=o(" (LayoutLMv2 model)"),HZo=l(),sF=a("li"),J1e=a("strong"),UZo=o("layoutlmv3"),JZo=o(" \u2014 "),vQ=a("a"),YZo=o("LayoutLMv3ForTokenClassification"),KZo=o(" (LayoutLMv3 model)"),ZZo=l(),lF=a("li"),Y1e=a("strong"),eer=o("longformer"),oer=o(" \u2014 "),FQ=a("a"),rer=o("LongformerForTokenClassification"),ter=o(" (Longformer model)"),aer=l(),iF=a("li"),K1e=a("strong"),ner=o("megatron-bert"),ser=o(" \u2014 "),TQ=a("a"),ler=o("MegatronBertForTokenClassification"),ier=o(" (Megatron-BERT model)"),der=l(),dF=a("li"),Z1e=a("strong"),cer=o("mobilebert"),fer=o(" \u2014 "),MQ=a("a"),mer=o("MobileBertForTokenClassification"),ger=o(" (MobileBERT model)"),her=l(),cF=a("li"),e4e=a("strong"),per=o("mpnet"),_er=o(" \u2014 "),EQ=a("a"),uer=o("MPNetForTokenClassification"),ber=o(" (MPNet model)"),ver=l(),fF=a("li"),o4e=a("strong"),Fer=o("nezha"),Ter=o(" \u2014 "),CQ=a("a"),Mer=o("NezhaForTokenClassification"),Eer=o(" (Nezha model)"),Cer=l(),mF=a("li"),r4e=a("strong"),wer=o("nystromformer"),Aer=o(" \u2014 "),wQ=a("a"),Ler=o("NystromformerForTokenClassification"),yer=o(" (Nystr\xF6mformer model)"),xer=l(),gF=a("li"),t4e=a("strong"),$er=o("qdqbert"),ker=o(" \u2014 "),AQ=a("a"),Ser=o("QDQBertForTokenClassification"),Rer=o(" (QDQBert model)"),Per=l(),hF=a("li"),a4e=a("strong"),Ber=o("rembert"),Ier=o(" \u2014 "),LQ=a("a"),Ner=o("RemBertForTokenClassification"),qer=o(" (RemBERT model)"),jer=l(),pF=a("li"),n4e=a("strong"),Der=o("roberta"),Ger=o(" \u2014 "),yQ=a("a"),Oer=o("RobertaForTokenClassification"),Ver=o(" (RoBERTa model)"),Xer=l(),_F=a("li"),s4e=a("strong"),zer=o("roformer"),Qer=o(" \u2014 "),xQ=a("a"),Wer=o("RoFormerForTokenClassification"),Her=o(" (RoFormer model)"),Uer=l(),uF=a("li"),l4e=a("strong"),Jer=o("squeezebert"),Yer=o(" \u2014 "),$Q=a("a"),Ker=o("SqueezeBertForTokenClassification"),Zer=o(" (SqueezeBERT model)"),eor=l(),bF=a("li"),i4e=a("strong"),oor=o("xlm"),ror=o(" \u2014 "),kQ=a("a"),tor=o("XLMForTokenClassification"),aor=o(" (XLM model)"),nor=l(),vF=a("li"),d4e=a("strong"),sor=o("xlm-roberta"),lor=o(" \u2014 "),SQ=a("a"),ior=o("XLMRobertaForTokenClassification"),dor=o(" (XLM-RoBERTa model)"),cor=l(),FF=a("li"),c4e=a("strong"),mor=o("xlm-roberta-xl"),gor=o(" \u2014 "),RQ=a("a"),hor=o("XLMRobertaXLForTokenClassification"),por=o(" (XLM-RoBERTa-XL model)"),_or=l(),TF=a("li"),f4e=a("strong"),uor=o("xlnet"),bor=o(" \u2014 "),PQ=a("a"),vor=o("XLNetForTokenClassification"),For=o(" (XLNet model)"),Tor=l(),MF=a("li"),m4e=a("strong"),Mor=o("yoso"),Eor=o(" \u2014 "),BQ=a("a"),Cor=o("YosoForTokenClassification"),wor=o(" (YOSO model)"),Aor=l(),EF=a("p"),Lor=o("The model is set in evaluation mode by default using "),g4e=a("code"),yor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h4e=a("code"),$or=o("model.train()"),kor=l(),F(CF.$$.fragment),fze=l(),_d=a("h2"),wF=a("a"),p4e=a("span"),F(ky.$$.fragment),Sor=l(),_4e=a("span"),Ror=o("AutoModelForQuestionAnswering"),mze=l(),Do=a("div"),F(Sy.$$.fragment),Por=l(),ud=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IQ=a("a"),Ior=o("from_pretrained()"),Nor=o(" class method or the "),NQ=a("a"),qor=o("from_config()"),jor=o(` class
method.`),Dor=l(),Ry=a("p"),Gor=o("This class cannot be instantiated directly using "),u4e=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),ut=a("div"),F(Py.$$.fragment),zor=l(),b4e=a("p"),Qor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wor=l(),bd=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),F(AF.$$.fragment),err=l(),so=a("div"),F(By.$$.fragment),orr=l(),F4e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),trr=l(),za=a("p"),arr=o("The model class to instantiate is selected based on the "),T4e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),frr=l(),V=a("ul"),LF=a("li"),C4e=a("strong"),mrr=o("albert"),grr=o(" \u2014 "),jQ=a("a"),hrr=o("AlbertForQuestionAnswering"),prr=o(" (ALBERT model)"),_rr=l(),yF=a("li"),w4e=a("strong"),urr=o("bart"),brr=o(" \u2014 "),DQ=a("a"),vrr=o("BartForQuestionAnswering"),Frr=o(" (BART model)"),Trr=l(),xF=a("li"),A4e=a("strong"),Mrr=o("bert"),Err=o(" \u2014 "),GQ=a("a"),Crr=o("BertForQuestionAnswering"),wrr=o(" (BERT model)"),Arr=l(),$F=a("li"),L4e=a("strong"),Lrr=o("big_bird"),yrr=o(" \u2014 "),OQ=a("a"),xrr=o("BigBirdForQuestionAnswering"),$rr=o(" (BigBird model)"),krr=l(),kF=a("li"),y4e=a("strong"),Srr=o("bigbird_pegasus"),Rrr=o(" \u2014 "),VQ=a("a"),Prr=o("BigBirdPegasusForQuestionAnswering"),Brr=o(" (BigBird-Pegasus model)"),Irr=l(),SF=a("li"),x4e=a("strong"),Nrr=o("camembert"),qrr=o(" \u2014 "),XQ=a("a"),jrr=o("CamembertForQuestionAnswering"),Drr=o(" (CamemBERT model)"),Grr=l(),RF=a("li"),$4e=a("strong"),Orr=o("canine"),Vrr=o(" \u2014 "),zQ=a("a"),Xrr=o("CanineForQuestionAnswering"),zrr=o(" (CANINE model)"),Qrr=l(),PF=a("li"),k4e=a("strong"),Wrr=o("convbert"),Hrr=o(" \u2014 "),QQ=a("a"),Urr=o("ConvBertForQuestionAnswering"),Jrr=o(" (ConvBERT model)"),Yrr=l(),BF=a("li"),S4e=a("strong"),Krr=o("data2vec-text"),Zrr=o(" \u2014 "),WQ=a("a"),etr=o("Data2VecTextForQuestionAnswering"),otr=o(" (Data2VecText model)"),rtr=l(),IF=a("li"),R4e=a("strong"),ttr=o("deberta"),atr=o(" \u2014 "),HQ=a("a"),ntr=o("DebertaForQuestionAnswering"),str=o(" (DeBERTa model)"),ltr=l(),NF=a("li"),P4e=a("strong"),itr=o("deberta-v2"),dtr=o(" \u2014 "),UQ=a("a"),ctr=o("DebertaV2ForQuestionAnswering"),ftr=o(" (DeBERTa-v2 model)"),mtr=l(),qF=a("li"),B4e=a("strong"),gtr=o("distilbert"),htr=o(" \u2014 "),JQ=a("a"),ptr=o("DistilBertForQuestionAnswering"),_tr=o(" (DistilBERT model)"),utr=l(),jF=a("li"),I4e=a("strong"),btr=o("electra"),vtr=o(" \u2014 "),YQ=a("a"),Ftr=o("ElectraForQuestionAnswering"),Ttr=o(" (ELECTRA model)"),Mtr=l(),DF=a("li"),N4e=a("strong"),Etr=o("flaubert"),Ctr=o(" \u2014 "),KQ=a("a"),wtr=o("FlaubertForQuestionAnsweringSimple"),Atr=o(" (FlauBERT model)"),Ltr=l(),GF=a("li"),q4e=a("strong"),ytr=o("fnet"),xtr=o(" \u2014 "),ZQ=a("a"),$tr=o("FNetForQuestionAnswering"),ktr=o(" (FNet model)"),Str=l(),OF=a("li"),j4e=a("strong"),Rtr=o("funnel"),Ptr=o(" \u2014 "),eW=a("a"),Btr=o("FunnelForQuestionAnswering"),Itr=o(" (Funnel Transformer model)"),Ntr=l(),VF=a("li"),D4e=a("strong"),qtr=o("gptj"),jtr=o(" \u2014 "),oW=a("a"),Dtr=o("GPTJForQuestionAnswering"),Gtr=o(" (GPT-J model)"),Otr=l(),XF=a("li"),G4e=a("strong"),Vtr=o("ibert"),Xtr=o(" \u2014 "),rW=a("a"),ztr=o("IBertForQuestionAnswering"),Qtr=o(" (I-BERT model)"),Wtr=l(),zF=a("li"),O4e=a("strong"),Htr=o("layoutlmv2"),Utr=o(" \u2014 "),tW=a("a"),Jtr=o("LayoutLMv2ForQuestionAnswering"),Ytr=o(" (LayoutLMv2 model)"),Ktr=l(),QF=a("li"),V4e=a("strong"),Ztr=o("layoutlmv3"),ear=o(" \u2014 "),aW=a("a"),oar=o("LayoutLMv3ForQuestionAnswering"),rar=o(" (LayoutLMv3 model)"),tar=l(),WF=a("li"),X4e=a("strong"),aar=o("led"),nar=o(" \u2014 "),nW=a("a"),sar=o("LEDForQuestionAnswering"),lar=o(" (LED model)"),iar=l(),HF=a("li"),z4e=a("strong"),dar=o("longformer"),car=o(" \u2014 "),sW=a("a"),far=o("LongformerForQuestionAnswering"),mar=o(" (Longformer model)"),gar=l(),UF=a("li"),Q4e=a("strong"),har=o("lxmert"),par=o(" \u2014 "),lW=a("a"),_ar=o("LxmertForQuestionAnswering"),uar=o(" (LXMERT model)"),bar=l(),JF=a("li"),W4e=a("strong"),Far=o("mbart"),Tar=o(" \u2014 "),iW=a("a"),Mar=o("MBartForQuestionAnswering"),Ear=o(" (mBART model)"),Car=l(),YF=a("li"),H4e=a("strong"),war=o("megatron-bert"),Aar=o(" \u2014 "),dW=a("a"),Lar=o("MegatronBertForQuestionAnswering"),yar=o(" (Megatron-BERT model)"),xar=l(),KF=a("li"),U4e=a("strong"),$ar=o("mobilebert"),kar=o(" \u2014 "),cW=a("a"),Sar=o("MobileBertForQuestionAnswering"),Rar=o(" (MobileBERT model)"),Par=l(),ZF=a("li"),J4e=a("strong"),Bar=o("mpnet"),Iar=o(" \u2014 "),fW=a("a"),Nar=o("MPNetForQuestionAnswering"),qar=o(" (MPNet model)"),jar=l(),e6=a("li"),Y4e=a("strong"),Dar=o("mvp"),Gar=o(" \u2014 "),mW=a("a"),Oar=o("MvpForQuestionAnswering"),Var=o(" (MVP model)"),Xar=l(),o6=a("li"),K4e=a("strong"),zar=o("nezha"),Qar=o(" \u2014 "),gW=a("a"),War=o("NezhaForQuestionAnswering"),Har=o(" (Nezha model)"),Uar=l(),r6=a("li"),Z4e=a("strong"),Jar=o("nystromformer"),Yar=o(" \u2014 "),hW=a("a"),Kar=o("NystromformerForQuestionAnswering"),Zar=o(" (Nystr\xF6mformer model)"),enr=l(),t6=a("li"),e2e=a("strong"),onr=o("qdqbert"),rnr=o(" \u2014 "),pW=a("a"),tnr=o("QDQBertForQuestionAnswering"),anr=o(" (QDQBert model)"),nnr=l(),a6=a("li"),o2e=a("strong"),snr=o("reformer"),lnr=o(" \u2014 "),_W=a("a"),inr=o("ReformerForQuestionAnswering"),dnr=o(" (Reformer model)"),cnr=l(),n6=a("li"),r2e=a("strong"),fnr=o("rembert"),mnr=o(" \u2014 "),uW=a("a"),gnr=o("RemBertForQuestionAnswering"),hnr=o(" (RemBERT model)"),pnr=l(),s6=a("li"),t2e=a("strong"),_nr=o("roberta"),unr=o(" \u2014 "),bW=a("a"),bnr=o("RobertaForQuestionAnswering"),vnr=o(" (RoBERTa model)"),Fnr=l(),l6=a("li"),a2e=a("strong"),Tnr=o("roformer"),Mnr=o(" \u2014 "),vW=a("a"),Enr=o("RoFormerForQuestionAnswering"),Cnr=o(" (RoFormer model)"),wnr=l(),i6=a("li"),n2e=a("strong"),Anr=o("splinter"),Lnr=o(" \u2014 "),FW=a("a"),ynr=o("SplinterForQuestionAnswering"),xnr=o(" (Splinter model)"),$nr=l(),d6=a("li"),s2e=a("strong"),knr=o("squeezebert"),Snr=o(" \u2014 "),TW=a("a"),Rnr=o("SqueezeBertForQuestionAnswering"),Pnr=o(" (SqueezeBERT model)"),Bnr=l(),c6=a("li"),l2e=a("strong"),Inr=o("xlm"),Nnr=o(" \u2014 "),MW=a("a"),qnr=o("XLMForQuestionAnsweringSimple"),jnr=o(" (XLM model)"),Dnr=l(),f6=a("li"),i2e=a("strong"),Gnr=o("xlm-roberta"),Onr=o(" \u2014 "),EW=a("a"),Vnr=o("XLMRobertaForQuestionAnswering"),Xnr=o(" (XLM-RoBERTa model)"),znr=l(),m6=a("li"),d2e=a("strong"),Qnr=o("xlm-roberta-xl"),Wnr=o(" \u2014 "),CW=a("a"),Hnr=o("XLMRobertaXLForQuestionAnswering"),Unr=o(" (XLM-RoBERTa-XL model)"),Jnr=l(),g6=a("li"),c2e=a("strong"),Ynr=o("xlnet"),Knr=o(" \u2014 "),wW=a("a"),Znr=o("XLNetForQuestionAnsweringSimple"),esr=o(" (XLNet model)"),osr=l(),h6=a("li"),f2e=a("strong"),rsr=o("yoso"),tsr=o(" \u2014 "),AW=a("a"),asr=o("YosoForQuestionAnswering"),nsr=o(" (YOSO model)"),ssr=l(),p6=a("p"),lsr=o("The model is set in evaluation mode by default using "),m2e=a("code"),isr=o("model.eval()"),dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=a("code"),csr=o("model.train()"),fsr=l(),F(_6.$$.fragment),gze=l(),vd=a("h2"),u6=a("a"),h2e=a("span"),F(Iy.$$.fragment),msr=l(),p2e=a("span"),gsr=o("AutoModelForTableQuestionAnswering"),hze=l(),Go=a("div"),F(Ny.$$.fragment),hsr=l(),Fd=a("p"),psr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LW=a("a"),_sr=o("from_pretrained()"),usr=o(" class method or the "),yW=a("a"),bsr=o("from_config()"),vsr=o(` class
method.`),Fsr=l(),qy=a("p"),Tsr=o("This class cannot be instantiated directly using "),_2e=a("code"),Msr=o("__init__()"),Esr=o(" (throws an error)."),Csr=l(),bt=a("div"),F(jy.$$.fragment),wsr=l(),u2e=a("p"),Asr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lsr=l(),Td=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),xsr=o("not"),$sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),ksr=o("from_pretrained()"),Ssr=o(" to load the model weights."),Rsr=l(),F(b6.$$.fragment),Psr=l(),lo=a("div"),F(Dy.$$.fragment),Bsr=l(),v2e=a("p"),Isr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nsr=l(),Qa=a("p"),qsr=o("The model class to instantiate is selected based on the "),F2e=a("code"),jsr=o("model_type"),Dsr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),Vsr=o("pretrained_model_name_or_path"),Xsr=o(":"),zsr=l(),E2e=a("ul"),v6=a("li"),C2e=a("strong"),Qsr=o("tapas"),Wsr=o(" \u2014 "),$W=a("a"),Hsr=o("TapasForQuestionAnswering"),Usr=o(" (TAPAS model)"),Jsr=l(),F6=a("p"),Ysr=o("The model is set in evaluation mode by default using "),w2e=a("code"),Ksr=o("model.eval()"),Zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=a("code"),elr=o("model.train()"),olr=l(),F(T6.$$.fragment),pze=l(),Md=a("h2"),M6=a("a"),L2e=a("span"),F(Gy.$$.fragment),rlr=l(),y2e=a("span"),tlr=o("AutoModelForImageClassification"),_ze=l(),Oo=a("div"),F(Oy.$$.fragment),alr=l(),Ed=a("p"),nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kW=a("a"),slr=o("from_pretrained()"),llr=o(" class method or the "),SW=a("a"),ilr=o("from_config()"),dlr=o(` class
method.`),clr=l(),Vy=a("p"),flr=o("This class cannot be instantiated directly using "),x2e=a("code"),mlr=o("__init__()"),glr=o(" (throws an error)."),hlr=l(),vt=a("div"),F(Xy.$$.fragment),plr=l(),$2e=a("p"),_lr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ulr=l(),Cd=a("p"),blr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),vlr=o("not"),Flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" to load the model weights."),Elr=l(),F(E6.$$.fragment),Clr=l(),io=a("div"),F(zy.$$.fragment),wlr=l(),S2e=a("p"),Alr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Llr=l(),Wa=a("p"),ylr=o("The model class to instantiate is selected based on the "),R2e=a("code"),xlr=o("model_type"),$lr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),Rlr=o("pretrained_model_name_or_path"),Plr=o(":"),Blr=l(),ue=a("ul"),C6=a("li"),I2e=a("strong"),Ilr=o("beit"),Nlr=o(" \u2014 "),PW=a("a"),qlr=o("BeitForImageClassification"),jlr=o(" (BEiT model)"),Dlr=l(),w6=a("li"),N2e=a("strong"),Glr=o("convnext"),Olr=o(" \u2014 "),BW=a("a"),Vlr=o("ConvNextForImageClassification"),Xlr=o(" (ConvNeXT model)"),zlr=l(),A6=a("li"),q2e=a("strong"),Qlr=o("cvt"),Wlr=o(" \u2014 "),IW=a("a"),Hlr=o("CvtForImageClassification"),Ulr=o(" (CvT model)"),Jlr=l(),L6=a("li"),j2e=a("strong"),Ylr=o("data2vec-vision"),Klr=o(" \u2014 "),NW=a("a"),Zlr=o("Data2VecVisionForImageClassification"),eir=o(" (Data2VecVision model)"),oir=l(),Js=a("li"),D2e=a("strong"),rir=o("deit"),tir=o(" \u2014 "),qW=a("a"),air=o("DeiTForImageClassification"),nir=o(" or "),jW=a("a"),sir=o("DeiTForImageClassificationWithTeacher"),lir=o(" (DeiT model)"),iir=l(),y6=a("li"),G2e=a("strong"),dir=o("imagegpt"),cir=o(" \u2014 "),DW=a("a"),fir=o("ImageGPTForImageClassification"),mir=o(" (ImageGPT model)"),gir=l(),Ys=a("li"),O2e=a("strong"),hir=o("levit"),pir=o(" \u2014 "),GW=a("a"),_ir=o("LevitForImageClassification"),uir=o(" or "),OW=a("a"),bir=o("LevitForImageClassificationWithTeacher"),vir=o(" (LeViT model)"),Fir=l(),x6=a("li"),V2e=a("strong"),Tir=o("mobilevit"),Mir=o(" \u2014 "),VW=a("a"),Eir=o("MobileViTForImageClassification"),Cir=o(" (MobileViT model)"),wir=l(),Ft=a("li"),X2e=a("strong"),Air=o("perceiver"),Lir=o(" \u2014 "),XW=a("a"),yir=o("PerceiverForImageClassificationLearned"),xir=o(" or "),zW=a("a"),$ir=o("PerceiverForImageClassificationFourier"),kir=o(" or "),QW=a("a"),Sir=o("PerceiverForImageClassificationConvProcessing"),Rir=o(" (Perceiver model)"),Pir=l(),$6=a("li"),z2e=a("strong"),Bir=o("poolformer"),Iir=o(" \u2014 "),WW=a("a"),Nir=o("PoolFormerForImageClassification"),qir=o(" (PoolFormer model)"),jir=l(),k6=a("li"),Q2e=a("strong"),Dir=o("regnet"),Gir=o(" \u2014 "),HW=a("a"),Oir=o("RegNetForImageClassification"),Vir=o(" (RegNet model)"),Xir=l(),S6=a("li"),W2e=a("strong"),zir=o("resnet"),Qir=o(" \u2014 "),UW=a("a"),Wir=o("ResNetForImageClassification"),Hir=o(" (ResNet model)"),Uir=l(),R6=a("li"),H2e=a("strong"),Jir=o("segformer"),Yir=o(" \u2014 "),JW=a("a"),Kir=o("SegformerForImageClassification"),Zir=o(" (SegFormer model)"),edr=l(),P6=a("li"),U2e=a("strong"),odr=o("swin"),rdr=o(" \u2014 "),YW=a("a"),tdr=o("SwinForImageClassification"),adr=o(" (Swin Transformer model)"),ndr=l(),B6=a("li"),J2e=a("strong"),sdr=o("swinv2"),ldr=o(" \u2014 "),KW=a("a"),idr=o("Swinv2ForImageClassification"),ddr=o(" (Swin Transformer V2 model)"),cdr=l(),I6=a("li"),Y2e=a("strong"),fdr=o("van"),mdr=o(" \u2014 "),ZW=a("a"),gdr=o("VanForImageClassification"),hdr=o(" (VAN model)"),pdr=l(),N6=a("li"),K2e=a("strong"),_dr=o("vit"),udr=o(" \u2014 "),eH=a("a"),bdr=o("ViTForImageClassification"),vdr=o(" (ViT model)"),Fdr=l(),q6=a("p"),Tdr=o("The model is set in evaluation mode by default using "),Z2e=a("code"),Mdr=o("model.eval()"),Edr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=a("code"),Cdr=o("model.train()"),wdr=l(),F(j6.$$.fragment),uze=l(),wd=a("h2"),D6=a("a"),obe=a("span"),F(Qy.$$.fragment),Adr=l(),rbe=a("span"),Ldr=o("AutoModelForVision2Seq"),bze=l(),Vo=a("div"),F(Wy.$$.fragment),ydr=l(),Ad=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oH=a("a"),$dr=o("from_pretrained()"),kdr=o(" class method or the "),rH=a("a"),Sdr=o("from_config()"),Rdr=o(` class
method.`),Pdr=l(),Hy=a("p"),Bdr=o("This class cannot be instantiated directly using "),tbe=a("code"),Idr=o("__init__()"),Ndr=o(" (throws an error)."),qdr=l(),Tt=a("div"),F(Uy.$$.fragment),jdr=l(),abe=a("p"),Ddr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gdr=l(),Ld=a("p"),Odr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),Vdr=o("not"),Xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),zdr=o("from_pretrained()"),Qdr=o(" to load the model weights."),Wdr=l(),F(G6.$$.fragment),Hdr=l(),co=a("div"),F(Jy.$$.fragment),Udr=l(),sbe=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ydr=l(),Ha=a("p"),Kdr=o("The model class to instantiate is selected based on the "),lbe=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),cbe=a("ul"),O6=a("li"),fbe=a("strong"),scr=o("vision-encoder-decoder"),lcr=o(" \u2014 "),aH=a("a"),icr=o("VisionEncoderDecoderModel"),dcr=o(" (Vision Encoder decoder model)"),ccr=l(),V6=a("p"),fcr=o("The model is set in evaluation mode by default using "),mbe=a("code"),mcr=o("model.eval()"),gcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=a("code"),hcr=o("model.train()"),pcr=l(),F(X6.$$.fragment),vze=l(),yd=a("h2"),z6=a("a"),hbe=a("span"),F(Yy.$$.fragment),_cr=l(),pbe=a("span"),ucr=o("AutoModelForVisualQuestionAnswering"),Fze=l(),Xo=a("div"),F(Ky.$$.fragment),bcr=l(),xd=a("p"),vcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),nH=a("a"),Fcr=o("from_pretrained()"),Tcr=o(" class method or the "),sH=a("a"),Mcr=o("from_config()"),Ecr=o(` class
method.`),Ccr=l(),Zy=a("p"),wcr=o("This class cannot be instantiated directly using "),_be=a("code"),Acr=o("__init__()"),Lcr=o(" (throws an error)."),ycr=l(),Mt=a("div"),F(e8.$$.fragment),xcr=l(),ube=a("p"),$cr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),kcr=l(),$d=a("p"),Scr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),Rcr=o("not"),Pcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),Bcr=o("from_pretrained()"),Icr=o(" to load the model weights."),Ncr=l(),F(Q6.$$.fragment),qcr=l(),fo=a("div"),F(o8.$$.fragment),jcr=l(),vbe=a("p"),Dcr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Gcr=l(),Ua=a("p"),Ocr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),Vcr=o("model_type"),Xcr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),zcr=o("pretrained_model_name_or_path"),Qcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),Wcr=o("pretrained_model_name_or_path"),Hcr=o(":"),Ucr=l(),Ebe=a("ul"),W6=a("li"),Cbe=a("strong"),Jcr=o("vilt"),Ycr=o(" \u2014 "),iH=a("a"),Kcr=o("ViltForQuestionAnswering"),Zcr=o(" (ViLT model)"),efr=l(),H6=a("p"),ofr=o("The model is set in evaluation mode by default using "),wbe=a("code"),rfr=o("model.eval()"),tfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=a("code"),afr=o("model.train()"),nfr=l(),F(U6.$$.fragment),Tze=l(),kd=a("h2"),J6=a("a"),Lbe=a("span"),F(r8.$$.fragment),sfr=l(),ybe=a("span"),lfr=o("AutoModelForAudioClassification"),Mze=l(),zo=a("div"),F(t8.$$.fragment),ifr=l(),Sd=a("p"),dfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dH=a("a"),cfr=o("from_pretrained()"),ffr=o(" class method or the "),cH=a("a"),mfr=o("from_config()"),gfr=o(` class
method.`),hfr=l(),a8=a("p"),pfr=o("This class cannot be instantiated directly using "),xbe=a("code"),_fr=o("__init__()"),ufr=o(" (throws an error)."),bfr=l(),Et=a("div"),F(n8.$$.fragment),vfr=l(),$be=a("p"),Ffr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Tfr=l(),Rd=a("p"),Mfr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),Efr=o("not"),Cfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),wfr=o("from_pretrained()"),Afr=o(" to load the model weights."),Lfr=l(),F(Y6.$$.fragment),yfr=l(),mo=a("div"),F(s8.$$.fragment),xfr=l(),Sbe=a("p"),$fr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),kfr=l(),Ja=a("p"),Sfr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Rfr=o("model_type"),Pfr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),Bfr=o("pretrained_model_name_or_path"),Ifr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Nfr=o("pretrained_model_name_or_path"),qfr=o(":"),jfr=l(),Pe=a("ul"),K6=a("li"),Ibe=a("strong"),Dfr=o("data2vec-audio"),Gfr=o(" \u2014 "),mH=a("a"),Ofr=o("Data2VecAudioForSequenceClassification"),Vfr=o(" (Data2VecAudio model)"),Xfr=l(),Z6=a("li"),Nbe=a("strong"),zfr=o("hubert"),Qfr=o(" \u2014 "),gH=a("a"),Wfr=o("HubertForSequenceClassification"),Hfr=o(" (Hubert model)"),Ufr=l(),eT=a("li"),qbe=a("strong"),Jfr=o("sew"),Yfr=o(" \u2014 "),hH=a("a"),Kfr=o("SEWForSequenceClassification"),Zfr=o(" (SEW model)"),emr=l(),oT=a("li"),jbe=a("strong"),omr=o("sew-d"),rmr=o(" \u2014 "),pH=a("a"),tmr=o("SEWDForSequenceClassification"),amr=o(" (SEW-D model)"),nmr=l(),rT=a("li"),Dbe=a("strong"),smr=o("unispeech"),lmr=o(" \u2014 "),_H=a("a"),imr=o("UniSpeechForSequenceClassification"),dmr=o(" (UniSpeech model)"),cmr=l(),tT=a("li"),Gbe=a("strong"),fmr=o("unispeech-sat"),mmr=o(" \u2014 "),uH=a("a"),gmr=o("UniSpeechSatForSequenceClassification"),hmr=o(" (UniSpeechSat model)"),pmr=l(),aT=a("li"),Obe=a("strong"),_mr=o("wav2vec2"),umr=o(" \u2014 "),bH=a("a"),bmr=o("Wav2Vec2ForSequenceClassification"),vmr=o(" (Wav2Vec2 model)"),Fmr=l(),nT=a("li"),Vbe=a("strong"),Tmr=o("wav2vec2-conformer"),Mmr=o(" \u2014 "),vH=a("a"),Emr=o("Wav2Vec2ConformerForSequenceClassification"),Cmr=o(" (Wav2Vec2-Conformer model)"),wmr=l(),sT=a("li"),Xbe=a("strong"),Amr=o("wavlm"),Lmr=o(" \u2014 "),FH=a("a"),ymr=o("WavLMForSequenceClassification"),xmr=o(" (WavLM model)"),$mr=l(),lT=a("p"),kmr=o("The model is set in evaluation mode by default using "),zbe=a("code"),Smr=o("model.eval()"),Rmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),Pmr=o("model.train()"),Bmr=l(),F(iT.$$.fragment),Eze=l(),Pd=a("h2"),dT=a("a"),Wbe=a("span"),F(l8.$$.fragment),Imr=l(),Hbe=a("span"),Nmr=o("AutoModelForAudioFrameClassification"),Cze=l(),Qo=a("div"),F(i8.$$.fragment),qmr=l(),Bd=a("p"),jmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),TH=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" class method or the "),MH=a("a"),Omr=o("from_config()"),Vmr=o(` class
method.`),Xmr=l(),d8=a("p"),zmr=o("This class cannot be instantiated directly using "),Ube=a("code"),Qmr=o("__init__()"),Wmr=o(" (throws an error)."),Hmr=l(),Ct=a("div"),F(c8.$$.fragment),Umr=l(),Jbe=a("p"),Jmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ymr=l(),Id=a("p"),Kmr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Zmr=o("not"),egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),ogr=o("from_pretrained()"),rgr=o(" to load the model weights."),tgr=l(),F(cT.$$.fragment),agr=l(),go=a("div"),F(f8.$$.fragment),ngr=l(),Kbe=a("p"),sgr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lgr=l(),Ya=a("p"),igr=o("The model class to instantiate is selected based on the "),Zbe=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),pgr=l(),rt=a("ul"),fT=a("li"),rve=a("strong"),_gr=o("data2vec-audio"),ugr=o(" \u2014 "),CH=a("a"),bgr=o("Data2VecAudioForAudioFrameClassification"),vgr=o(" (Data2VecAudio model)"),Fgr=l(),mT=a("li"),tve=a("strong"),Tgr=o("unispeech-sat"),Mgr=o(" \u2014 "),wH=a("a"),Egr=o("UniSpeechSatForAudioFrameClassification"),Cgr=o(" (UniSpeechSat model)"),wgr=l(),gT=a("li"),ave=a("strong"),Agr=o("wav2vec2"),Lgr=o(" \u2014 "),AH=a("a"),ygr=o("Wav2Vec2ForAudioFrameClassification"),xgr=o(" (Wav2Vec2 model)"),$gr=l(),hT=a("li"),nve=a("strong"),kgr=o("wav2vec2-conformer"),Sgr=o(" \u2014 "),LH=a("a"),Rgr=o("Wav2Vec2ConformerForAudioFrameClassification"),Pgr=o(" (Wav2Vec2-Conformer model)"),Bgr=l(),pT=a("li"),sve=a("strong"),Igr=o("wavlm"),Ngr=o(" \u2014 "),yH=a("a"),qgr=o("WavLMForAudioFrameClassification"),jgr=o(" (WavLM model)"),Dgr=l(),_T=a("p"),Ggr=o("The model is set in evaluation mode by default using "),lve=a("code"),Ogr=o("model.eval()"),Vgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=a("code"),Xgr=o("model.train()"),zgr=l(),F(uT.$$.fragment),wze=l(),Nd=a("h2"),bT=a("a"),dve=a("span"),F(m8.$$.fragment),Qgr=l(),cve=a("span"),Wgr=o("AutoModelForCTC"),Aze=l(),Wo=a("div"),F(g8.$$.fragment),Hgr=l(),qd=a("p"),Ugr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),xH=a("a"),Jgr=o("from_pretrained()"),Ygr=o(" class method or the "),$H=a("a"),Kgr=o("from_config()"),Zgr=o(` class
method.`),ehr=l(),h8=a("p"),ohr=o("This class cannot be instantiated directly using "),fve=a("code"),rhr=o("__init__()"),thr=o(" (throws an error)."),ahr=l(),wt=a("div"),F(p8.$$.fragment),nhr=l(),mve=a("p"),shr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lhr=l(),jd=a("p"),ihr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),dhr=o("not"),chr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),fhr=o("from_pretrained()"),mhr=o(" to load the model weights."),ghr=l(),F(vT.$$.fragment),hhr=l(),ho=a("div"),F(_8.$$.fragment),phr=l(),hve=a("p"),_hr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),uhr=l(),Ka=a("p"),bhr=o("The model class to instantiate is selected based on the "),pve=a("code"),vhr=o("model_type"),Fhr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),Thr=o("pretrained_model_name_or_path"),Mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(":"),whr=l(),Le=a("ul"),FT=a("li"),bve=a("strong"),Ahr=o("data2vec-audio"),Lhr=o(" \u2014 "),SH=a("a"),yhr=o("Data2VecAudioForCTC"),xhr=o(" (Data2VecAudio model)"),$hr=l(),TT=a("li"),vve=a("strong"),khr=o("hubert"),Shr=o(" \u2014 "),RH=a("a"),Rhr=o("HubertForCTC"),Phr=o(" (Hubert model)"),Bhr=l(),MT=a("li"),Fve=a("strong"),Ihr=o("mctct"),Nhr=o(" \u2014 "),PH=a("a"),qhr=o("MCTCTForCTC"),jhr=o(" (M-CTC-T model)"),Dhr=l(),ET=a("li"),Tve=a("strong"),Ghr=o("sew"),Ohr=o(" \u2014 "),BH=a("a"),Vhr=o("SEWForCTC"),Xhr=o(" (SEW model)"),zhr=l(),CT=a("li"),Mve=a("strong"),Qhr=o("sew-d"),Whr=o(" \u2014 "),IH=a("a"),Hhr=o("SEWDForCTC"),Uhr=o(" (SEW-D model)"),Jhr=l(),wT=a("li"),Eve=a("strong"),Yhr=o("unispeech"),Khr=o(" \u2014 "),NH=a("a"),Zhr=o("UniSpeechForCTC"),epr=o(" (UniSpeech model)"),opr=l(),AT=a("li"),Cve=a("strong"),rpr=o("unispeech-sat"),tpr=o(" \u2014 "),qH=a("a"),apr=o("UniSpeechSatForCTC"),npr=o(" (UniSpeechSat model)"),spr=l(),LT=a("li"),wve=a("strong"),lpr=o("wav2vec2"),ipr=o(" \u2014 "),jH=a("a"),dpr=o("Wav2Vec2ForCTC"),cpr=o(" (Wav2Vec2 model)"),fpr=l(),yT=a("li"),Ave=a("strong"),mpr=o("wav2vec2-conformer"),gpr=o(" \u2014 "),DH=a("a"),hpr=o("Wav2Vec2ConformerForCTC"),ppr=o(" (Wav2Vec2-Conformer model)"),_pr=l(),xT=a("li"),Lve=a("strong"),upr=o("wavlm"),bpr=o(" \u2014 "),GH=a("a"),vpr=o("WavLMForCTC"),Fpr=o(" (WavLM model)"),Tpr=l(),$T=a("p"),Mpr=o("The model is set in evaluation mode by default using "),yve=a("code"),Epr=o("model.eval()"),Cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),wpr=o("model.train()"),Apr=l(),F(kT.$$.fragment),Lze=l(),Dd=a("h2"),ST=a("a"),$ve=a("span"),F(u8.$$.fragment),Lpr=l(),kve=a("span"),ypr=o("AutoModelForSpeechSeq2Seq"),yze=l(),Ho=a("div"),F(b8.$$.fragment),xpr=l(),Gd=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OH=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),VH=a("a"),Rpr=o("from_config()"),Ppr=o(` class
method.`),Bpr=l(),v8=a("p"),Ipr=o("This class cannot be instantiated directly using "),Sve=a("code"),Npr=o("__init__()"),qpr=o(" (throws an error)."),jpr=l(),At=a("div"),F(F8.$$.fragment),Dpr=l(),Rve=a("p"),Gpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Opr=l(),Od=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Qpr=o("from_pretrained()"),Wpr=o(" to load the model weights."),Hpr=l(),F(RT.$$.fragment),Upr=l(),po=a("div"),F(T8.$$.fragment),Jpr=l(),Bve=a("p"),Ypr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kpr=l(),Za=a("p"),Zpr=o("The model class to instantiate is selected based on the "),Ive=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),M8=a("ul"),PT=a("li"),jve=a("strong"),l_r=o("speech-encoder-decoder"),i_r=o(" \u2014 "),zH=a("a"),d_r=o("SpeechEncoderDecoderModel"),c_r=o(" (Speech Encoder decoder model)"),f_r=l(),BT=a("li"),Dve=a("strong"),m_r=o("speech_to_text"),g_r=o(" \u2014 "),QH=a("a"),h_r=o("Speech2TextForConditionalGeneration"),p_r=o(" (Speech2Text model)"),__r=l(),IT=a("p"),u_r=o("The model is set in evaluation mode by default using "),Gve=a("code"),b_r=o("model.eval()"),v_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),F_r=o("model.train()"),T_r=l(),F(NT.$$.fragment),xze=l(),Vd=a("h2"),qT=a("a"),Vve=a("span"),F(E8.$$.fragment),M_r=l(),Xve=a("span"),E_r=o("AutoModelForAudioXVector"),$ze=l(),Uo=a("div"),F(C8.$$.fragment),C_r=l(),Xd=a("p"),w_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),WH=a("a"),A_r=o("from_pretrained()"),L_r=o(" class method or the "),HH=a("a"),y_r=o("from_config()"),x_r=o(` class
method.`),$_r=l(),w8=a("p"),k_r=o("This class cannot be instantiated directly using "),zve=a("code"),S_r=o("__init__()"),R_r=o(" (throws an error)."),P_r=l(),Lt=a("div"),F(A8.$$.fragment),B_r=l(),Qve=a("p"),I_r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),N_r=l(),zd=a("p"),q_r=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),j_r=o("not"),D_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),G_r=o("from_pretrained()"),O_r=o(" to load the model weights."),V_r=l(),F(jT.$$.fragment),X_r=l(),_o=a("div"),F(L8.$$.fragment),z_r=l(),Hve=a("p"),Q_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),W_r=l(),en=a("p"),H_r=o("The model class to instantiate is selected based on the "),Uve=a("code"),U_r=o("model_type"),J_r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Y_r=o("pretrained_model_name_or_path"),K_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Z_r=o("pretrained_model_name_or_path"),eur=o(":"),our=l(),tt=a("ul"),DT=a("li"),Kve=a("strong"),rur=o("data2vec-audio"),tur=o(" \u2014 "),JH=a("a"),aur=o("Data2VecAudioForXVector"),nur=o(" (Data2VecAudio model)"),sur=l(),GT=a("li"),Zve=a("strong"),lur=o("unispeech-sat"),iur=o(" \u2014 "),YH=a("a"),dur=o("UniSpeechSatForXVector"),cur=o(" (UniSpeechSat model)"),fur=l(),OT=a("li"),eFe=a("strong"),mur=o("wav2vec2"),gur=o(" \u2014 "),KH=a("a"),hur=o("Wav2Vec2ForXVector"),pur=o(" (Wav2Vec2 model)"),_ur=l(),VT=a("li"),oFe=a("strong"),uur=o("wav2vec2-conformer"),bur=o(" \u2014 "),ZH=a("a"),vur=o("Wav2Vec2ConformerForXVector"),Fur=o(" (Wav2Vec2-Conformer model)"),Tur=l(),XT=a("li"),rFe=a("strong"),Mur=o("wavlm"),Eur=o(" \u2014 "),eU=a("a"),Cur=o("WavLMForXVector"),wur=o(" (WavLM model)"),Aur=l(),zT=a("p"),Lur=o("The model is set in evaluation mode by default using "),tFe=a("code"),yur=o("model.eval()"),xur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=a("code"),$ur=o("model.train()"),kur=l(),F(QT.$$.fragment),kze=l(),Qd=a("h2"),WT=a("a"),nFe=a("span"),F(y8.$$.fragment),Sur=l(),sFe=a("span"),Rur=o("AutoModelForMaskedImageModeling"),Sze=l(),Jo=a("div"),F(x8.$$.fragment),Pur=l(),Wd=a("p"),Bur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oU=a("a"),Iur=o("from_pretrained()"),Nur=o(" class method or the "),rU=a("a"),qur=o("from_config()"),jur=o(` class
method.`),Dur=l(),$8=a("p"),Gur=o("This class cannot be instantiated directly using "),lFe=a("code"),Our=o("__init__()"),Vur=o(" (throws an error)."),Xur=l(),yt=a("div"),F(k8.$$.fragment),zur=l(),iFe=a("p"),Qur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wur=l(),Hd=a("p"),Hur=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),Uur=o("not"),Jur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),Yur=o("from_pretrained()"),Kur=o(" to load the model weights."),Zur=l(),F(HT.$$.fragment),e1r=l(),uo=a("div"),F(S8.$$.fragment),o1r=l(),cFe=a("p"),r1r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),t1r=l(),on=a("p"),a1r=o("The model class to instantiate is selected based on the "),fFe=a("code"),n1r=o("model_type"),s1r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(":"),f1r=l(),rn=a("ul"),UT=a("li"),hFe=a("strong"),m1r=o("deit"),g1r=o(" \u2014 "),aU=a("a"),h1r=o("DeiTForMaskedImageModeling"),p1r=o(" (DeiT model)"),_1r=l(),JT=a("li"),pFe=a("strong"),u1r=o("swin"),b1r=o(" \u2014 "),nU=a("a"),v1r=o("SwinForMaskedImageModeling"),F1r=o(" (Swin Transformer model)"),T1r=l(),YT=a("li"),_Fe=a("strong"),M1r=o("swinv2"),E1r=o(" \u2014 "),sU=a("a"),C1r=o("Swinv2ForMaskedImageModeling"),w1r=o(" (Swin Transformer V2 model)"),A1r=l(),KT=a("li"),uFe=a("strong"),L1r=o("vit"),y1r=o(" \u2014 "),lU=a("a"),x1r=o("ViTForMaskedImageModeling"),$1r=o(" (ViT model)"),k1r=l(),ZT=a("p"),S1r=o("The model is set in evaluation mode by default using "),bFe=a("code"),R1r=o("model.eval()"),P1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=a("code"),B1r=o("model.train()"),I1r=l(),F(e7.$$.fragment),Rze=l(),Ud=a("h2"),o7=a("a"),FFe=a("span"),F(R8.$$.fragment),N1r=l(),TFe=a("span"),q1r=o("AutoModelForObjectDetection"),Pze=l(),Yo=a("div"),F(P8.$$.fragment),j1r=l(),Jd=a("p"),D1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iU=a("a"),G1r=o("from_pretrained()"),O1r=o(" class method or the "),dU=a("a"),V1r=o("from_config()"),X1r=o(` class
method.`),z1r=l(),B8=a("p"),Q1r=o("This class cannot be instantiated directly using "),MFe=a("code"),W1r=o("__init__()"),H1r=o(" (throws an error)."),U1r=l(),xt=a("div"),F(I8.$$.fragment),J1r=l(),EFe=a("p"),Y1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),K1r=l(),Yd=a("p"),Z1r=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),e4r=o("not"),o4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),r4r=o("from_pretrained()"),t4r=o(" to load the model weights."),a4r=l(),F(r7.$$.fragment),n4r=l(),bo=a("div"),F(N8.$$.fragment),s4r=l(),wFe=a("p"),l4r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),i4r=l(),tn=a("p"),d4r=o("The model class to instantiate is selected based on the "),AFe=a("code"),c4r=o("model_type"),f4r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),h4r=o("pretrained_model_name_or_path"),p4r=o(":"),_4r=l(),q8=a("ul"),t7=a("li"),xFe=a("strong"),u4r=o("detr"),b4r=o(" \u2014 "),fU=a("a"),v4r=o("DetrForObjectDetection"),F4r=o(" (DETR model)"),T4r=l(),a7=a("li"),$Fe=a("strong"),M4r=o("yolos"),E4r=o(" \u2014 "),mU=a("a"),C4r=o("YolosForObjectDetection"),w4r=o(" (YOLOS model)"),A4r=l(),n7=a("p"),L4r=o("The model is set in evaluation mode by default using "),kFe=a("code"),y4r=o("model.eval()"),x4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=a("code"),$4r=o("model.train()"),k4r=l(),F(s7.$$.fragment),Bze=l(),Kd=a("h2"),l7=a("a"),RFe=a("span"),F(j8.$$.fragment),S4r=l(),PFe=a("span"),R4r=o("AutoModelForImageSegmentation"),Ize=l(),Ko=a("div"),F(D8.$$.fragment),P4r=l(),Zd=a("p"),B4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gU=a("a"),I4r=o("from_pretrained()"),N4r=o(" class method or the "),hU=a("a"),q4r=o("from_config()"),j4r=o(` class
method.`),D4r=l(),G8=a("p"),G4r=o("This class cannot be instantiated directly using "),BFe=a("code"),O4r=o("__init__()"),V4r=o(" (throws an error)."),X4r=l(),$t=a("div"),F(O8.$$.fragment),z4r=l(),IFe=a("p"),Q4r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),W4r=l(),ec=a("p"),H4r=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),U4r=o("not"),J4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),Y4r=o("from_pretrained()"),K4r=o(" to load the model weights."),Z4r=l(),F(i7.$$.fragment),e2r=l(),vo=a("div"),F(V8.$$.fragment),o2r=l(),qFe=a("p"),r2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),t2r=l(),an=a("p"),a2r=o("The model class to instantiate is selected based on the "),jFe=a("code"),n2r=o("model_type"),s2r=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),d2r=o("pretrained_model_name_or_path"),c2r=o(":"),f2r=l(),OFe=a("ul"),d7=a("li"),VFe=a("strong"),m2r=o("detr"),g2r=o(" \u2014 "),_U=a("a"),h2r=o("DetrForSegmentation"),p2r=o(" (DETR model)"),_2r=l(),c7=a("p"),u2r=o("The model is set in evaluation mode by default using "),XFe=a("code"),b2r=o("model.eval()"),v2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=a("code"),F2r=o("model.train()"),T2r=l(),F(f7.$$.fragment),Nze=l(),oc=a("h2"),m7=a("a"),QFe=a("span"),F(X8.$$.fragment),M2r=l(),WFe=a("span"),E2r=o("AutoModelForSemanticSegmentation"),qze=l(),Zo=a("div"),F(z8.$$.fragment),C2r=l(),rc=a("p"),w2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uU=a("a"),A2r=o("from_pretrained()"),L2r=o(" class method or the "),bU=a("a"),y2r=o("from_config()"),x2r=o(` class
method.`),$2r=l(),Q8=a("p"),k2r=o("This class cannot be instantiated directly using "),HFe=a("code"),S2r=o("__init__()"),R2r=o(" (throws an error)."),P2r=l(),kt=a("div"),F(W8.$$.fragment),B2r=l(),UFe=a("p"),I2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),N2r=l(),tc=a("p"),q2r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),j2r=o("not"),D2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),G2r=o("from_pretrained()"),O2r=o(" to load the model weights."),V2r=l(),F(g7.$$.fragment),X2r=l(),Fo=a("div"),F(H8.$$.fragment),z2r=l(),YFe=a("p"),Q2r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),W2r=l(),nn=a("p"),H2r=o("The model class to instantiate is selected based on the "),KFe=a("code"),U2r=o("model_type"),J2r=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),Z2r=o("pretrained_model_name_or_path"),ebr=o(":"),obr=l(),at=a("ul"),h7=a("li"),o6e=a("strong"),rbr=o("beit"),tbr=o(" \u2014 "),FU=a("a"),abr=o("BeitForSemanticSegmentation"),nbr=o(" (BEiT model)"),sbr=l(),p7=a("li"),r6e=a("strong"),lbr=o("data2vec-vision"),ibr=o(" \u2014 "),TU=a("a"),dbr=o("Data2VecVisionForSemanticSegmentation"),cbr=o(" (Data2VecVision model)"),fbr=l(),_7=a("li"),t6e=a("strong"),mbr=o("dpt"),gbr=o(" \u2014 "),MU=a("a"),hbr=o("DPTForSemanticSegmentation"),pbr=o(" (DPT model)"),_br=l(),u7=a("li"),a6e=a("strong"),ubr=o("mobilevit"),bbr=o(" \u2014 "),EU=a("a"),vbr=o("MobileViTForSemanticSegmentation"),Fbr=o(" (MobileViT model)"),Tbr=l(),b7=a("li"),n6e=a("strong"),Mbr=o("segformer"),Ebr=o(" \u2014 "),CU=a("a"),Cbr=o("SegformerForSemanticSegmentation"),wbr=o(" (SegFormer model)"),Abr=l(),v7=a("p"),Lbr=o("The model is set in evaluation mode by default using "),s6e=a("code"),ybr=o("model.eval()"),xbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l6e=a("code"),$br=o("model.train()"),kbr=l(),F(F7.$$.fragment),jze=l(),ac=a("h2"),T7=a("a"),i6e=a("span"),F(U8.$$.fragment),Sbr=l(),d6e=a("span"),Rbr=o("AutoModelForInstanceSegmentation"),Dze=l(),er=a("div"),F(J8.$$.fragment),Pbr=l(),nc=a("p"),Bbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wU=a("a"),Ibr=o("from_pretrained()"),Nbr=o(" class method or the "),AU=a("a"),qbr=o("from_config()"),jbr=o(` class
method.`),Dbr=l(),Y8=a("p"),Gbr=o("This class cannot be instantiated directly using "),c6e=a("code"),Obr=o("__init__()"),Vbr=o(" (throws an error)."),Xbr=l(),St=a("div"),F(K8.$$.fragment),zbr=l(),f6e=a("p"),Qbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wbr=l(),sc=a("p"),Hbr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),Ubr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" to load the model weights."),Zbr=l(),F(M7.$$.fragment),evr=l(),To=a("div"),F(Z8.$$.fragment),ovr=l(),g6e=a("p"),rvr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tvr=l(),sn=a("p"),avr=o("The model class to instantiate is selected based on the "),h6e=a("code"),nvr=o("model_type"),svr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(":"),fvr=l(),u6e=a("ul"),E7=a("li"),b6e=a("strong"),mvr=o("maskformer"),gvr=o(" \u2014 "),yU=a("a"),hvr=o("MaskFormerForInstanceSegmentation"),pvr=o(" (MaskFormer model)"),_vr=l(),C7=a("p"),uvr=o("The model is set in evaluation mode by default using "),v6e=a("code"),bvr=o("model.eval()"),vvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F6e=a("code"),Fvr=o("model.train()"),Tvr=l(),F(w7.$$.fragment),Gze=l(),lc=a("h2"),A7=a("a"),T6e=a("span"),F(ex.$$.fragment),Mvr=l(),M6e=a("span"),Evr=o("TFAutoModel"),Oze=l(),or=a("div"),F(ox.$$.fragment),Cvr=l(),ic=a("p"),wvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xU=a("a"),Avr=o("from_pretrained()"),Lvr=o(" class method or the "),$U=a("a"),yvr=o("from_config()"),xvr=o(` class
method.`),$vr=l(),rx=a("p"),kvr=o("This class cannot be instantiated directly using "),E6e=a("code"),Svr=o("__init__()"),Rvr=o(" (throws an error)."),Pvr=l(),Rt=a("div"),F(tx.$$.fragment),Bvr=l(),C6e=a("p"),Ivr=o("Instantiates one of the base model classes of the library from a configuration."),Nvr=l(),dc=a("p"),qvr=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),jvr=o("not"),Dvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),Gvr=o("from_pretrained()"),Ovr=o(" to load the model weights."),Vvr=l(),F(L7.$$.fragment),Xvr=l(),xr=a("div"),F(ax.$$.fragment),zvr=l(),A6e=a("p"),Qvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wvr=l(),ln=a("p"),Hvr=o("The model class to instantiate is selected based on the "),L6e=a("code"),Uvr=o("model_type"),Jvr=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),Yvr=o("pretrained_model_name_or_path"),Kvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),Zvr=o("pretrained_model_name_or_path"),eFr=o(":"),oFr=l(),q=a("ul"),y7=a("li"),$6e=a("strong"),rFr=o("albert"),tFr=o(" \u2014 "),SU=a("a"),aFr=o("TFAlbertModel"),nFr=o(" (ALBERT model)"),sFr=l(),x7=a("li"),k6e=a("strong"),lFr=o("bart"),iFr=o(" \u2014 "),RU=a("a"),dFr=o("TFBartModel"),cFr=o(" (BART model)"),fFr=l(),$7=a("li"),S6e=a("strong"),mFr=o("bert"),gFr=o(" \u2014 "),PU=a("a"),hFr=o("TFBertModel"),pFr=o(" (BERT model)"),_Fr=l(),k7=a("li"),R6e=a("strong"),uFr=o("blenderbot"),bFr=o(" \u2014 "),BU=a("a"),vFr=o("TFBlenderbotModel"),FFr=o(" (Blenderbot model)"),TFr=l(),S7=a("li"),P6e=a("strong"),MFr=o("blenderbot-small"),EFr=o(" \u2014 "),IU=a("a"),CFr=o("TFBlenderbotSmallModel"),wFr=o(" (BlenderbotSmall model)"),AFr=l(),R7=a("li"),B6e=a("strong"),LFr=o("camembert"),yFr=o(" \u2014 "),NU=a("a"),xFr=o("TFCamembertModel"),$Fr=o(" (CamemBERT model)"),kFr=l(),P7=a("li"),I6e=a("strong"),SFr=o("clip"),RFr=o(" \u2014 "),qU=a("a"),PFr=o("TFCLIPModel"),BFr=o(" (CLIP model)"),IFr=l(),B7=a("li"),N6e=a("strong"),NFr=o("convbert"),qFr=o(" \u2014 "),jU=a("a"),jFr=o("TFConvBertModel"),DFr=o(" (ConvBERT model)"),GFr=l(),I7=a("li"),q6e=a("strong"),OFr=o("convnext"),VFr=o(" \u2014 "),DU=a("a"),XFr=o("TFConvNextModel"),zFr=o(" (ConvNeXT model)"),QFr=l(),N7=a("li"),j6e=a("strong"),WFr=o("ctrl"),HFr=o(" \u2014 "),GU=a("a"),UFr=o("TFCTRLModel"),JFr=o(" (CTRL model)"),YFr=l(),q7=a("li"),D6e=a("strong"),KFr=o("data2vec-vision"),ZFr=o(" \u2014 "),OU=a("a"),e6r=o("TFData2VecVisionModel"),o6r=o(" (Data2VecVision model)"),r6r=l(),j7=a("li"),G6e=a("strong"),t6r=o("deberta"),a6r=o(" \u2014 "),VU=a("a"),n6r=o("TFDebertaModel"),s6r=o(" (DeBERTa model)"),l6r=l(),D7=a("li"),O6e=a("strong"),i6r=o("deberta-v2"),d6r=o(" \u2014 "),XU=a("a"),c6r=o("TFDebertaV2Model"),f6r=o(" (DeBERTa-v2 model)"),m6r=l(),G7=a("li"),V6e=a("strong"),g6r=o("deit"),h6r=o(" \u2014 "),zU=a("a"),p6r=o("TFDeiTModel"),_6r=o(" (DeiT model)"),u6r=l(),O7=a("li"),X6e=a("strong"),b6r=o("distilbert"),v6r=o(" \u2014 "),QU=a("a"),F6r=o("TFDistilBertModel"),T6r=o(" (DistilBERT model)"),M6r=l(),V7=a("li"),z6e=a("strong"),E6r=o("dpr"),C6r=o(" \u2014 "),WU=a("a"),w6r=o("TFDPRQuestionEncoder"),A6r=o(" (DPR model)"),L6r=l(),X7=a("li"),Q6e=a("strong"),y6r=o("electra"),x6r=o(" \u2014 "),HU=a("a"),$6r=o("TFElectraModel"),k6r=o(" (ELECTRA model)"),S6r=l(),z7=a("li"),W6e=a("strong"),R6r=o("flaubert"),P6r=o(" \u2014 "),UU=a("a"),B6r=o("TFFlaubertModel"),I6r=o(" (FlauBERT model)"),N6r=l(),Ks=a("li"),H6e=a("strong"),q6r=o("funnel"),j6r=o(" \u2014 "),JU=a("a"),D6r=o("TFFunnelModel"),G6r=o(" or "),YU=a("a"),O6r=o("TFFunnelBaseModel"),V6r=o(" (Funnel Transformer model)"),X6r=l(),Q7=a("li"),U6e=a("strong"),z6r=o("gpt2"),Q6r=o(" \u2014 "),KU=a("a"),W6r=o("TFGPT2Model"),H6r=o(" (OpenAI GPT-2 model)"),U6r=l(),W7=a("li"),J6e=a("strong"),J6r=o("gptj"),Y6r=o(" \u2014 "),ZU=a("a"),K6r=o("TFGPTJModel"),Z6r=o(" (GPT-J model)"),eTr=l(),H7=a("li"),Y6e=a("strong"),oTr=o("hubert"),rTr=o(" \u2014 "),eJ=a("a"),tTr=o("TFHubertModel"),aTr=o(" (Hubert model)"),nTr=l(),U7=a("li"),K6e=a("strong"),sTr=o("layoutlm"),lTr=o(" \u2014 "),oJ=a("a"),iTr=o("TFLayoutLMModel"),dTr=o(" (LayoutLM model)"),cTr=l(),J7=a("li"),Z6e=a("strong"),fTr=o("led"),mTr=o(" \u2014 "),rJ=a("a"),gTr=o("TFLEDModel"),hTr=o(" (LED model)"),pTr=l(),Y7=a("li"),eTe=a("strong"),_Tr=o("longformer"),uTr=o(" \u2014 "),tJ=a("a"),bTr=o("TFLongformerModel"),vTr=o(" (Longformer model)"),FTr=l(),K7=a("li"),oTe=a("strong"),TTr=o("lxmert"),MTr=o(" \u2014 "),aJ=a("a"),ETr=o("TFLxmertModel"),CTr=o(" (LXMERT model)"),wTr=l(),Z7=a("li"),rTe=a("strong"),ATr=o("marian"),LTr=o(" \u2014 "),nJ=a("a"),yTr=o("TFMarianModel"),xTr=o(" (Marian model)"),$Tr=l(),e9=a("li"),tTe=a("strong"),kTr=o("mbart"),STr=o(" \u2014 "),sJ=a("a"),RTr=o("TFMBartModel"),PTr=o(" (mBART model)"),BTr=l(),o9=a("li"),aTe=a("strong"),ITr=o("mobilebert"),NTr=o(" \u2014 "),lJ=a("a"),qTr=o("TFMobileBertModel"),jTr=o(" (MobileBERT model)"),DTr=l(),r9=a("li"),nTe=a("strong"),GTr=o("mpnet"),OTr=o(" \u2014 "),iJ=a("a"),VTr=o("TFMPNetModel"),XTr=o(" (MPNet model)"),zTr=l(),t9=a("li"),sTe=a("strong"),QTr=o("mt5"),WTr=o(" \u2014 "),dJ=a("a"),HTr=o("TFMT5Model"),UTr=o(" (MT5 model)"),JTr=l(),a9=a("li"),lTe=a("strong"),YTr=o("openai-gpt"),KTr=o(" \u2014 "),cJ=a("a"),ZTr=o("TFOpenAIGPTModel"),e7r=o(" (OpenAI GPT model)"),o7r=l(),n9=a("li"),iTe=a("strong"),r7r=o("opt"),t7r=o(" \u2014 "),fJ=a("a"),a7r=o("TFOPTModel"),n7r=o(" (OPT model)"),s7r=l(),s9=a("li"),dTe=a("strong"),l7r=o("pegasus"),i7r=o(" \u2014 "),mJ=a("a"),d7r=o("TFPegasusModel"),c7r=o(" (Pegasus model)"),f7r=l(),l9=a("li"),cTe=a("strong"),m7r=o("regnet"),g7r=o(" \u2014 "),gJ=a("a"),h7r=o("TFRegNetModel"),p7r=o(" (RegNet model)"),_7r=l(),i9=a("li"),fTe=a("strong"),u7r=o("rembert"),b7r=o(" \u2014 "),hJ=a("a"),v7r=o("TFRemBertModel"),F7r=o(" (RemBERT model)"),T7r=l(),d9=a("li"),mTe=a("strong"),M7r=o("resnet"),E7r=o(" \u2014 "),pJ=a("a"),C7r=o("TFResNetModel"),w7r=o(" (ResNet model)"),A7r=l(),c9=a("li"),gTe=a("strong"),L7r=o("roberta"),y7r=o(" \u2014 "),_J=a("a"),x7r=o("TFRobertaModel"),$7r=o(" (RoBERTa model)"),k7r=l(),f9=a("li"),hTe=a("strong"),S7r=o("roformer"),R7r=o(" \u2014 "),uJ=a("a"),P7r=o("TFRoFormerModel"),B7r=o(" (RoFormer model)"),I7r=l(),m9=a("li"),pTe=a("strong"),N7r=o("speech_to_text"),q7r=o(" \u2014 "),bJ=a("a"),j7r=o("TFSpeech2TextModel"),D7r=o(" (Speech2Text model)"),G7r=l(),g9=a("li"),_Te=a("strong"),O7r=o("swin"),V7r=o(" \u2014 "),vJ=a("a"),X7r=o("TFSwinModel"),z7r=o(" (Swin Transformer model)"),Q7r=l(),h9=a("li"),uTe=a("strong"),W7r=o("t5"),H7r=o(" \u2014 "),FJ=a("a"),U7r=o("TFT5Model"),J7r=o(" (T5 model)"),Y7r=l(),p9=a("li"),bTe=a("strong"),K7r=o("tapas"),Z7r=o(" \u2014 "),TJ=a("a"),e9r=o("TFTapasModel"),o9r=o(" (TAPAS model)"),r9r=l(),_9=a("li"),vTe=a("strong"),t9r=o("transfo-xl"),a9r=o(" \u2014 "),MJ=a("a"),n9r=o("TFTransfoXLModel"),s9r=o(" (Transformer-XL model)"),l9r=l(),u9=a("li"),FTe=a("strong"),i9r=o("vit"),d9r=o(" \u2014 "),EJ=a("a"),c9r=o("TFViTModel"),f9r=o(" (ViT model)"),m9r=l(),b9=a("li"),TTe=a("strong"),g9r=o("vit_mae"),h9r=o(" \u2014 "),CJ=a("a"),p9r=o("TFViTMAEModel"),_9r=o(" (ViTMAE model)"),u9r=l(),v9=a("li"),MTe=a("strong"),b9r=o("wav2vec2"),v9r=o(" \u2014 "),wJ=a("a"),F9r=o("TFWav2Vec2Model"),T9r=o(" (Wav2Vec2 model)"),M9r=l(),F9=a("li"),ETe=a("strong"),E9r=o("xlm"),C9r=o(" \u2014 "),AJ=a("a"),w9r=o("TFXLMModel"),A9r=o(" (XLM model)"),L9r=l(),T9=a("li"),CTe=a("strong"),y9r=o("xlm-roberta"),x9r=o(" \u2014 "),LJ=a("a"),$9r=o("TFXLMRobertaModel"),k9r=o(" (XLM-RoBERTa model)"),S9r=l(),M9=a("li"),wTe=a("strong"),R9r=o("xlnet"),P9r=o(" \u2014 "),yJ=a("a"),B9r=o("TFXLNetModel"),I9r=o(" (XLNet model)"),N9r=l(),F(E9.$$.fragment),Vze=l(),cc=a("h2"),C9=a("a"),ATe=a("span"),F(nx.$$.fragment),q9r=l(),LTe=a("span"),j9r=o("TFAutoModelForPreTraining"),Xze=l(),rr=a("div"),F(sx.$$.fragment),D9r=l(),fc=a("p"),G9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xJ=a("a"),O9r=o("from_pretrained()"),V9r=o(" class method or the "),$J=a("a"),X9r=o("from_config()"),z9r=o(` class
method.`),Q9r=l(),lx=a("p"),W9r=o("This class cannot be instantiated directly using "),yTe=a("code"),H9r=o("__init__()"),U9r=o(" (throws an error)."),J9r=l(),Pt=a("div"),F(ix.$$.fragment),Y9r=l(),xTe=a("p"),K9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z9r=l(),mc=a("p"),eMr=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),oMr=o("not"),rMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),tMr=o("from_pretrained()"),aMr=o(" to load the model weights."),nMr=l(),F(w9.$$.fragment),sMr=l(),$r=a("div"),F(dx.$$.fragment),lMr=l(),kTe=a("p"),iMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dMr=l(),dn=a("p"),cMr=o("The model class to instantiate is selected based on the "),STe=a("code"),fMr=o("model_type"),mMr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),gMr=o("pretrained_model_name_or_path"),hMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(":"),uMr=l(),se=a("ul"),A9=a("li"),BTe=a("strong"),bMr=o("albert"),vMr=o(" \u2014 "),SJ=a("a"),FMr=o("TFAlbertForPreTraining"),TMr=o(" (ALBERT model)"),MMr=l(),L9=a("li"),ITe=a("strong"),EMr=o("bart"),CMr=o(" \u2014 "),RJ=a("a"),wMr=o("TFBartForConditionalGeneration"),AMr=o(" (BART model)"),LMr=l(),y9=a("li"),NTe=a("strong"),yMr=o("bert"),xMr=o(" \u2014 "),PJ=a("a"),$Mr=o("TFBertForPreTraining"),kMr=o(" (BERT model)"),SMr=l(),x9=a("li"),qTe=a("strong"),RMr=o("camembert"),PMr=o(" \u2014 "),BJ=a("a"),BMr=o("TFCamembertForMaskedLM"),IMr=o(" (CamemBERT model)"),NMr=l(),$9=a("li"),jTe=a("strong"),qMr=o("ctrl"),jMr=o(" \u2014 "),IJ=a("a"),DMr=o("TFCTRLLMHeadModel"),GMr=o(" (CTRL model)"),OMr=l(),k9=a("li"),DTe=a("strong"),VMr=o("distilbert"),XMr=o(" \u2014 "),NJ=a("a"),zMr=o("TFDistilBertForMaskedLM"),QMr=o(" (DistilBERT model)"),WMr=l(),S9=a("li"),GTe=a("strong"),HMr=o("electra"),UMr=o(" \u2014 "),qJ=a("a"),JMr=o("TFElectraForPreTraining"),YMr=o(" (ELECTRA model)"),KMr=l(),R9=a("li"),OTe=a("strong"),ZMr=o("flaubert"),eEr=o(" \u2014 "),jJ=a("a"),oEr=o("TFFlaubertWithLMHeadModel"),rEr=o(" (FlauBERT model)"),tEr=l(),P9=a("li"),VTe=a("strong"),aEr=o("funnel"),nEr=o(" \u2014 "),DJ=a("a"),sEr=o("TFFunnelForPreTraining"),lEr=o(" (Funnel Transformer model)"),iEr=l(),B9=a("li"),XTe=a("strong"),dEr=o("gpt2"),cEr=o(" \u2014 "),GJ=a("a"),fEr=o("TFGPT2LMHeadModel"),mEr=o(" (OpenAI GPT-2 model)"),gEr=l(),I9=a("li"),zTe=a("strong"),hEr=o("layoutlm"),pEr=o(" \u2014 "),OJ=a("a"),_Er=o("TFLayoutLMForMaskedLM"),uEr=o(" (LayoutLM model)"),bEr=l(),N9=a("li"),QTe=a("strong"),vEr=o("lxmert"),FEr=o(" \u2014 "),VJ=a("a"),TEr=o("TFLxmertForPreTraining"),MEr=o(" (LXMERT model)"),EEr=l(),q9=a("li"),WTe=a("strong"),CEr=o("mobilebert"),wEr=o(" \u2014 "),XJ=a("a"),AEr=o("TFMobileBertForPreTraining"),LEr=o(" (MobileBERT model)"),yEr=l(),j9=a("li"),HTe=a("strong"),xEr=o("mpnet"),$Er=o(" \u2014 "),zJ=a("a"),kEr=o("TFMPNetForMaskedLM"),SEr=o(" (MPNet model)"),REr=l(),D9=a("li"),UTe=a("strong"),PEr=o("openai-gpt"),BEr=o(" \u2014 "),QJ=a("a"),IEr=o("TFOpenAIGPTLMHeadModel"),NEr=o(" (OpenAI GPT model)"),qEr=l(),G9=a("li"),JTe=a("strong"),jEr=o("roberta"),DEr=o(" \u2014 "),WJ=a("a"),GEr=o("TFRobertaForMaskedLM"),OEr=o(" (RoBERTa model)"),VEr=l(),O9=a("li"),YTe=a("strong"),XEr=o("t5"),zEr=o(" \u2014 "),HJ=a("a"),QEr=o("TFT5ForConditionalGeneration"),WEr=o(" (T5 model)"),HEr=l(),V9=a("li"),KTe=a("strong"),UEr=o("tapas"),JEr=o(" \u2014 "),UJ=a("a"),YEr=o("TFTapasForMaskedLM"),KEr=o(" (TAPAS model)"),ZEr=l(),X9=a("li"),ZTe=a("strong"),eCr=o("transfo-xl"),oCr=o(" \u2014 "),JJ=a("a"),rCr=o("TFTransfoXLLMHeadModel"),tCr=o(" (Transformer-XL model)"),aCr=l(),z9=a("li"),e7e=a("strong"),nCr=o("vit_mae"),sCr=o(" \u2014 "),YJ=a("a"),lCr=o("TFViTMAEForPreTraining"),iCr=o(" (ViTMAE model)"),dCr=l(),Q9=a("li"),o7e=a("strong"),cCr=o("xlm"),fCr=o(" \u2014 "),KJ=a("a"),mCr=o("TFXLMWithLMHeadModel"),gCr=o(" (XLM model)"),hCr=l(),W9=a("li"),r7e=a("strong"),pCr=o("xlm-roberta"),_Cr=o(" \u2014 "),ZJ=a("a"),uCr=o("TFXLMRobertaForMaskedLM"),bCr=o(" (XLM-RoBERTa model)"),vCr=l(),H9=a("li"),t7e=a("strong"),FCr=o("xlnet"),TCr=o(" \u2014 "),eY=a("a"),MCr=o("TFXLNetLMHeadModel"),ECr=o(" (XLNet model)"),CCr=l(),F(U9.$$.fragment),zze=l(),gc=a("h2"),J9=a("a"),a7e=a("span"),F(cx.$$.fragment),wCr=l(),n7e=a("span"),ACr=o("TFAutoModelForCausalLM"),Qze=l(),tr=a("div"),F(fx.$$.fragment),LCr=l(),hc=a("p"),yCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oY=a("a"),xCr=o("from_pretrained()"),$Cr=o(" class method or the "),rY=a("a"),kCr=o("from_config()"),SCr=o(` class
method.`),RCr=l(),mx=a("p"),PCr=o("This class cannot be instantiated directly using "),s7e=a("code"),BCr=o("__init__()"),ICr=o(" (throws an error)."),NCr=l(),Bt=a("div"),F(gx.$$.fragment),qCr=l(),l7e=a("p"),jCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DCr=l(),pc=a("p"),GCr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),OCr=o("not"),VCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),XCr=o("from_pretrained()"),zCr=o(" to load the model weights."),QCr=l(),F(Y9.$$.fragment),WCr=l(),kr=a("div"),F(hx.$$.fragment),HCr=l(),d7e=a("p"),UCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JCr=l(),cn=a("p"),YCr=o("The model class to instantiate is selected based on the "),c7e=a("code"),KCr=o("model_type"),ZCr=o(` property of the config object (either
passed as an argument or loaded from `),f7e=a("code"),e5r=o("pretrained_model_name_or_path"),o5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=a("code"),r5r=o("pretrained_model_name_or_path"),t5r=o(":"),a5r=l(),Me=a("ul"),K9=a("li"),g7e=a("strong"),n5r=o("bert"),s5r=o(" \u2014 "),aY=a("a"),l5r=o("TFBertLMHeadModel"),i5r=o(" (BERT model)"),d5r=l(),Z9=a("li"),h7e=a("strong"),c5r=o("camembert"),f5r=o(" \u2014 "),nY=a("a"),m5r=o("TFCamembertForCausalLM"),g5r=o(" (CamemBERT model)"),h5r=l(),eM=a("li"),p7e=a("strong"),p5r=o("ctrl"),_5r=o(" \u2014 "),sY=a("a"),u5r=o("TFCTRLLMHeadModel"),b5r=o(" (CTRL model)"),v5r=l(),oM=a("li"),_7e=a("strong"),F5r=o("gpt2"),T5r=o(" \u2014 "),lY=a("a"),M5r=o("TFGPT2LMHeadModel"),E5r=o(" (OpenAI GPT-2 model)"),C5r=l(),rM=a("li"),u7e=a("strong"),w5r=o("gptj"),A5r=o(" \u2014 "),iY=a("a"),L5r=o("TFGPTJForCausalLM"),y5r=o(" (GPT-J model)"),x5r=l(),tM=a("li"),b7e=a("strong"),$5r=o("openai-gpt"),k5r=o(" \u2014 "),dY=a("a"),S5r=o("TFOpenAIGPTLMHeadModel"),R5r=o(" (OpenAI GPT model)"),P5r=l(),aM=a("li"),v7e=a("strong"),B5r=o("opt"),I5r=o(" \u2014 "),cY=a("a"),N5r=o("TFOPTForCausalLM"),q5r=o(" (OPT model)"),j5r=l(),nM=a("li"),F7e=a("strong"),D5r=o("rembert"),G5r=o(" \u2014 "),fY=a("a"),O5r=o("TFRemBertForCausalLM"),V5r=o(" (RemBERT model)"),X5r=l(),sM=a("li"),T7e=a("strong"),z5r=o("roberta"),Q5r=o(" \u2014 "),mY=a("a"),W5r=o("TFRobertaForCausalLM"),H5r=o(" (RoBERTa model)"),U5r=l(),lM=a("li"),M7e=a("strong"),J5r=o("roformer"),Y5r=o(" \u2014 "),gY=a("a"),K5r=o("TFRoFormerForCausalLM"),Z5r=o(" (RoFormer model)"),e3r=l(),iM=a("li"),E7e=a("strong"),o3r=o("transfo-xl"),r3r=o(" \u2014 "),hY=a("a"),t3r=o("TFTransfoXLLMHeadModel"),a3r=o(" (Transformer-XL model)"),n3r=l(),dM=a("li"),C7e=a("strong"),s3r=o("xlm"),l3r=o(" \u2014 "),pY=a("a"),i3r=o("TFXLMWithLMHeadModel"),d3r=o(" (XLM model)"),c3r=l(),cM=a("li"),w7e=a("strong"),f3r=o("xlnet"),m3r=o(" \u2014 "),_Y=a("a"),g3r=o("TFXLNetLMHeadModel"),h3r=o(" (XLNet model)"),p3r=l(),F(fM.$$.fragment),Wze=l(),_c=a("h2"),mM=a("a"),A7e=a("span"),F(px.$$.fragment),_3r=l(),L7e=a("span"),u3r=o("TFAutoModelForImageClassification"),Hze=l(),ar=a("div"),F(_x.$$.fragment),b3r=l(),uc=a("p"),v3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uY=a("a"),F3r=o("from_pretrained()"),T3r=o(" class method or the "),bY=a("a"),M3r=o("from_config()"),E3r=o(` class
method.`),C3r=l(),ux=a("p"),w3r=o("This class cannot be instantiated directly using "),y7e=a("code"),A3r=o("__init__()"),L3r=o(" (throws an error)."),y3r=l(),It=a("div"),F(bx.$$.fragment),x3r=l(),x7e=a("p"),$3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),k3r=l(),bc=a("p"),S3r=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),R3r=o("not"),P3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),B3r=o("from_pretrained()"),I3r=o(" to load the model weights."),N3r=l(),F(gM.$$.fragment),q3r=l(),Sr=a("div"),F(vx.$$.fragment),j3r=l(),k7e=a("p"),D3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G3r=l(),fn=a("p"),O3r=o("The model class to instantiate is selected based on the "),S7e=a("code"),V3r=o("model_type"),X3r=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),z3r=o("pretrained_model_name_or_path"),Q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),W3r=o("pretrained_model_name_or_path"),H3r=o(":"),U3r=l(),Qe=a("ul"),hM=a("li"),B7e=a("strong"),J3r=o("convnext"),Y3r=o(" \u2014 "),FY=a("a"),K3r=o("TFConvNextForImageClassification"),Z3r=o(" (ConvNeXT model)"),e0r=l(),pM=a("li"),I7e=a("strong"),o0r=o("data2vec-vision"),r0r=o(" \u2014 "),TY=a("a"),t0r=o("TFData2VecVisionForImageClassification"),a0r=o(" (Data2VecVision model)"),n0r=l(),Zs=a("li"),N7e=a("strong"),s0r=o("deit"),l0r=o(" \u2014 "),MY=a("a"),i0r=o("TFDeiTForImageClassification"),d0r=o(" or "),EY=a("a"),c0r=o("TFDeiTForImageClassificationWithTeacher"),f0r=o(" (DeiT model)"),m0r=l(),_M=a("li"),q7e=a("strong"),g0r=o("regnet"),h0r=o(" \u2014 "),CY=a("a"),p0r=o("TFRegNetForImageClassification"),_0r=o(" (RegNet model)"),u0r=l(),uM=a("li"),j7e=a("strong"),b0r=o("resnet"),v0r=o(" \u2014 "),wY=a("a"),F0r=o("TFResNetForImageClassification"),T0r=o(" (ResNet model)"),M0r=l(),bM=a("li"),D7e=a("strong"),E0r=o("swin"),C0r=o(" \u2014 "),AY=a("a"),w0r=o("TFSwinForImageClassification"),A0r=o(" (Swin Transformer model)"),L0r=l(),vM=a("li"),G7e=a("strong"),y0r=o("vit"),x0r=o(" \u2014 "),LY=a("a"),$0r=o("TFViTForImageClassification"),k0r=o(" (ViT model)"),S0r=l(),F(FM.$$.fragment),Uze=l(),vc=a("h2"),TM=a("a"),O7e=a("span"),F(Fx.$$.fragment),R0r=l(),V7e=a("span"),P0r=o("TFAutoModelForMaskedLM"),Jze=l(),nr=a("div"),F(Tx.$$.fragment),B0r=l(),Fc=a("p"),I0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yY=a("a"),N0r=o("from_pretrained()"),q0r=o(" class method or the "),xY=a("a"),j0r=o("from_config()"),D0r=o(` class
method.`),G0r=l(),Mx=a("p"),O0r=o("This class cannot be instantiated directly using "),X7e=a("code"),V0r=o("__init__()"),X0r=o(" (throws an error)."),z0r=l(),Nt=a("div"),F(Ex.$$.fragment),Q0r=l(),z7e=a("p"),W0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),H0r=l(),Tc=a("p"),U0r=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),J0r=o("not"),Y0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),K0r=o("from_pretrained()"),Z0r=o(" to load the model weights."),ewr=l(),F(MM.$$.fragment),owr=l(),Rr=a("div"),F(Cx.$$.fragment),rwr=l(),W7e=a("p"),twr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),awr=l(),mn=a("p"),nwr=o("The model class to instantiate is selected based on the "),H7e=a("code"),swr=o("model_type"),lwr=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),iwr=o("pretrained_model_name_or_path"),dwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),cwr=o("pretrained_model_name_or_path"),fwr=o(":"),mwr=l(),ie=a("ul"),EM=a("li"),Y7e=a("strong"),gwr=o("albert"),hwr=o(" \u2014 "),kY=a("a"),pwr=o("TFAlbertForMaskedLM"),_wr=o(" (ALBERT model)"),uwr=l(),CM=a("li"),K7e=a("strong"),bwr=o("bert"),vwr=o(" \u2014 "),SY=a("a"),Fwr=o("TFBertForMaskedLM"),Twr=o(" (BERT model)"),Mwr=l(),wM=a("li"),Z7e=a("strong"),Ewr=o("camembert"),Cwr=o(" \u2014 "),RY=a("a"),wwr=o("TFCamembertForMaskedLM"),Awr=o(" (CamemBERT model)"),Lwr=l(),AM=a("li"),e9e=a("strong"),ywr=o("convbert"),xwr=o(" \u2014 "),PY=a("a"),$wr=o("TFConvBertForMaskedLM"),kwr=o(" (ConvBERT model)"),Swr=l(),LM=a("li"),o9e=a("strong"),Rwr=o("deberta"),Pwr=o(" \u2014 "),BY=a("a"),Bwr=o("TFDebertaForMaskedLM"),Iwr=o(" (DeBERTa model)"),Nwr=l(),yM=a("li"),r9e=a("strong"),qwr=o("deberta-v2"),jwr=o(" \u2014 "),IY=a("a"),Dwr=o("TFDebertaV2ForMaskedLM"),Gwr=o(" (DeBERTa-v2 model)"),Owr=l(),xM=a("li"),t9e=a("strong"),Vwr=o("distilbert"),Xwr=o(" \u2014 "),NY=a("a"),zwr=o("TFDistilBertForMaskedLM"),Qwr=o(" (DistilBERT model)"),Wwr=l(),$M=a("li"),a9e=a("strong"),Hwr=o("electra"),Uwr=o(" \u2014 "),qY=a("a"),Jwr=o("TFElectraForMaskedLM"),Ywr=o(" (ELECTRA model)"),Kwr=l(),kM=a("li"),n9e=a("strong"),Zwr=o("flaubert"),eAr=o(" \u2014 "),jY=a("a"),oAr=o("TFFlaubertWithLMHeadModel"),rAr=o(" (FlauBERT model)"),tAr=l(),SM=a("li"),s9e=a("strong"),aAr=o("funnel"),nAr=o(" \u2014 "),DY=a("a"),sAr=o("TFFunnelForMaskedLM"),lAr=o(" (Funnel Transformer model)"),iAr=l(),RM=a("li"),l9e=a("strong"),dAr=o("layoutlm"),cAr=o(" \u2014 "),GY=a("a"),fAr=o("TFLayoutLMForMaskedLM"),mAr=o(" (LayoutLM model)"),gAr=l(),PM=a("li"),i9e=a("strong"),hAr=o("longformer"),pAr=o(" \u2014 "),OY=a("a"),_Ar=o("TFLongformerForMaskedLM"),uAr=o(" (Longformer model)"),bAr=l(),BM=a("li"),d9e=a("strong"),vAr=o("mobilebert"),FAr=o(" \u2014 "),VY=a("a"),TAr=o("TFMobileBertForMaskedLM"),MAr=o(" (MobileBERT model)"),EAr=l(),IM=a("li"),c9e=a("strong"),CAr=o("mpnet"),wAr=o(" \u2014 "),XY=a("a"),AAr=o("TFMPNetForMaskedLM"),LAr=o(" (MPNet model)"),yAr=l(),NM=a("li"),f9e=a("strong"),xAr=o("rembert"),$Ar=o(" \u2014 "),zY=a("a"),kAr=o("TFRemBertForMaskedLM"),SAr=o(" (RemBERT model)"),RAr=l(),qM=a("li"),m9e=a("strong"),PAr=o("roberta"),BAr=o(" \u2014 "),QY=a("a"),IAr=o("TFRobertaForMaskedLM"),NAr=o(" (RoBERTa model)"),qAr=l(),jM=a("li"),g9e=a("strong"),jAr=o("roformer"),DAr=o(" \u2014 "),WY=a("a"),GAr=o("TFRoFormerForMaskedLM"),OAr=o(" (RoFormer model)"),VAr=l(),DM=a("li"),h9e=a("strong"),XAr=o("tapas"),zAr=o(" \u2014 "),HY=a("a"),QAr=o("TFTapasForMaskedLM"),WAr=o(" (TAPAS model)"),HAr=l(),GM=a("li"),p9e=a("strong"),UAr=o("xlm"),JAr=o(" \u2014 "),UY=a("a"),YAr=o("TFXLMWithLMHeadModel"),KAr=o(" (XLM model)"),ZAr=l(),OM=a("li"),_9e=a("strong"),eLr=o("xlm-roberta"),oLr=o(" \u2014 "),JY=a("a"),rLr=o("TFXLMRobertaForMaskedLM"),tLr=o(" (XLM-RoBERTa model)"),aLr=l(),F(VM.$$.fragment),Yze=l(),Mc=a("h2"),XM=a("a"),u9e=a("span"),F(wx.$$.fragment),nLr=l(),b9e=a("span"),sLr=o("TFAutoModelForSeq2SeqLM"),Kze=l(),sr=a("div"),F(Ax.$$.fragment),lLr=l(),Ec=a("p"),iLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YY=a("a"),dLr=o("from_pretrained()"),cLr=o(" class method or the "),KY=a("a"),fLr=o("from_config()"),mLr=o(` class
method.`),gLr=l(),Lx=a("p"),hLr=o("This class cannot be instantiated directly using "),v9e=a("code"),pLr=o("__init__()"),_Lr=o(" (throws an error)."),uLr=l(),qt=a("div"),F(yx.$$.fragment),bLr=l(),F9e=a("p"),vLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FLr=l(),Cc=a("p"),TLr=o(`Note:
Loading a model from its configuration file does `),T9e=a("strong"),MLr=o("not"),ELr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),CLr=o("from_pretrained()"),wLr=o(" to load the model weights."),ALr=l(),F(zM.$$.fragment),LLr=l(),Pr=a("div"),F(xx.$$.fragment),yLr=l(),M9e=a("p"),xLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Lr=l(),gn=a("p"),kLr=o("The model class to instantiate is selected based on the "),E9e=a("code"),SLr=o("model_type"),RLr=o(` property of the config object (either
passed as an argument or loaded from `),C9e=a("code"),PLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=a("code"),ILr=o("pretrained_model_name_or_path"),NLr=o(":"),qLr=l(),ye=a("ul"),QM=a("li"),A9e=a("strong"),jLr=o("bart"),DLr=o(" \u2014 "),eK=a("a"),GLr=o("TFBartForConditionalGeneration"),OLr=o(" (BART model)"),VLr=l(),WM=a("li"),L9e=a("strong"),XLr=o("blenderbot"),zLr=o(" \u2014 "),oK=a("a"),QLr=o("TFBlenderbotForConditionalGeneration"),WLr=o(" (Blenderbot model)"),HLr=l(),HM=a("li"),y9e=a("strong"),ULr=o("blenderbot-small"),JLr=o(" \u2014 "),rK=a("a"),YLr=o("TFBlenderbotSmallForConditionalGeneration"),KLr=o(" (BlenderbotSmall model)"),ZLr=l(),UM=a("li"),x9e=a("strong"),eyr=o("encoder-decoder"),oyr=o(" \u2014 "),tK=a("a"),ryr=o("TFEncoderDecoderModel"),tyr=o(" (Encoder decoder model)"),ayr=l(),JM=a("li"),$9e=a("strong"),nyr=o("led"),syr=o(" \u2014 "),aK=a("a"),lyr=o("TFLEDForConditionalGeneration"),iyr=o(" (LED model)"),dyr=l(),YM=a("li"),k9e=a("strong"),cyr=o("marian"),fyr=o(" \u2014 "),nK=a("a"),myr=o("TFMarianMTModel"),gyr=o(" (Marian model)"),hyr=l(),KM=a("li"),S9e=a("strong"),pyr=o("mbart"),_yr=o(" \u2014 "),sK=a("a"),uyr=o("TFMBartForConditionalGeneration"),byr=o(" (mBART model)"),vyr=l(),ZM=a("li"),R9e=a("strong"),Fyr=o("mt5"),Tyr=o(" \u2014 "),lK=a("a"),Myr=o("TFMT5ForConditionalGeneration"),Eyr=o(" (MT5 model)"),Cyr=l(),eE=a("li"),P9e=a("strong"),wyr=o("pegasus"),Ayr=o(" \u2014 "),iK=a("a"),Lyr=o("TFPegasusForConditionalGeneration"),yyr=o(" (Pegasus model)"),xyr=l(),oE=a("li"),B9e=a("strong"),$yr=o("t5"),kyr=o(" \u2014 "),dK=a("a"),Syr=o("TFT5ForConditionalGeneration"),Ryr=o(" (T5 model)"),Pyr=l(),F(rE.$$.fragment),Zze=l(),wc=a("h2"),tE=a("a"),I9e=a("span"),F($x.$$.fragment),Byr=l(),N9e=a("span"),Iyr=o("TFAutoModelForSequenceClassification"),eQe=l(),lr=a("div"),F(kx.$$.fragment),Nyr=l(),Ac=a("p"),qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cK=a("a"),jyr=o("from_pretrained()"),Dyr=o(" class method or the "),fK=a("a"),Gyr=o("from_config()"),Oyr=o(` class
method.`),Vyr=l(),Sx=a("p"),Xyr=o("This class cannot be instantiated directly using "),q9e=a("code"),zyr=o("__init__()"),Qyr=o(" (throws an error)."),Wyr=l(),jt=a("div"),F(Rx.$$.fragment),Hyr=l(),j9e=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jyr=l(),Lc=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),D9e=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),e8r=o("from_pretrained()"),o8r=o(" to load the model weights."),r8r=l(),F(aE.$$.fragment),t8r=l(),Br=a("div"),F(Px.$$.fragment),a8r=l(),G9e=a("p"),n8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s8r=l(),hn=a("p"),l8r=o("The model class to instantiate is selected based on the "),O9e=a("code"),i8r=o("model_type"),d8r=o(` property of the config object (either
passed as an argument or loaded from `),V9e=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(":"),h8r=l(),te=a("ul"),nE=a("li"),z9e=a("strong"),p8r=o("albert"),_8r=o(" \u2014 "),gK=a("a"),u8r=o("TFAlbertForSequenceClassification"),b8r=o(" (ALBERT model)"),v8r=l(),sE=a("li"),Q9e=a("strong"),F8r=o("bert"),T8r=o(" \u2014 "),hK=a("a"),M8r=o("TFBertForSequenceClassification"),E8r=o(" (BERT model)"),C8r=l(),lE=a("li"),W9e=a("strong"),w8r=o("camembert"),A8r=o(" \u2014 "),pK=a("a"),L8r=o("TFCamembertForSequenceClassification"),y8r=o(" (CamemBERT model)"),x8r=l(),iE=a("li"),H9e=a("strong"),$8r=o("convbert"),k8r=o(" \u2014 "),_K=a("a"),S8r=o("TFConvBertForSequenceClassification"),R8r=o(" (ConvBERT model)"),P8r=l(),dE=a("li"),U9e=a("strong"),B8r=o("ctrl"),I8r=o(" \u2014 "),uK=a("a"),N8r=o("TFCTRLForSequenceClassification"),q8r=o(" (CTRL model)"),j8r=l(),cE=a("li"),J9e=a("strong"),D8r=o("deberta"),G8r=o(" \u2014 "),bK=a("a"),O8r=o("TFDebertaForSequenceClassification"),V8r=o(" (DeBERTa model)"),X8r=l(),fE=a("li"),Y9e=a("strong"),z8r=o("deberta-v2"),Q8r=o(" \u2014 "),vK=a("a"),W8r=o("TFDebertaV2ForSequenceClassification"),H8r=o(" (DeBERTa-v2 model)"),U8r=l(),mE=a("li"),K9e=a("strong"),J8r=o("distilbert"),Y8r=o(" \u2014 "),FK=a("a"),K8r=o("TFDistilBertForSequenceClassification"),Z8r=o(" (DistilBERT model)"),exr=l(),gE=a("li"),Z9e=a("strong"),oxr=o("electra"),rxr=o(" \u2014 "),TK=a("a"),txr=o("TFElectraForSequenceClassification"),axr=o(" (ELECTRA model)"),nxr=l(),hE=a("li"),eMe=a("strong"),sxr=o("flaubert"),lxr=o(" \u2014 "),MK=a("a"),ixr=o("TFFlaubertForSequenceClassification"),dxr=o(" (FlauBERT model)"),cxr=l(),pE=a("li"),oMe=a("strong"),fxr=o("funnel"),mxr=o(" \u2014 "),EK=a("a"),gxr=o("TFFunnelForSequenceClassification"),hxr=o(" (Funnel Transformer model)"),pxr=l(),_E=a("li"),rMe=a("strong"),_xr=o("gpt2"),uxr=o(" \u2014 "),CK=a("a"),bxr=o("TFGPT2ForSequenceClassification"),vxr=o(" (OpenAI GPT-2 model)"),Fxr=l(),uE=a("li"),tMe=a("strong"),Txr=o("gptj"),Mxr=o(" \u2014 "),wK=a("a"),Exr=o("TFGPTJForSequenceClassification"),Cxr=o(" (GPT-J model)"),wxr=l(),bE=a("li"),aMe=a("strong"),Axr=o("layoutlm"),Lxr=o(" \u2014 "),AK=a("a"),yxr=o("TFLayoutLMForSequenceClassification"),xxr=o(" (LayoutLM model)"),$xr=l(),vE=a("li"),nMe=a("strong"),kxr=o("longformer"),Sxr=o(" \u2014 "),LK=a("a"),Rxr=o("TFLongformerForSequenceClassification"),Pxr=o(" (Longformer model)"),Bxr=l(),FE=a("li"),sMe=a("strong"),Ixr=o("mobilebert"),Nxr=o(" \u2014 "),yK=a("a"),qxr=o("TFMobileBertForSequenceClassification"),jxr=o(" (MobileBERT model)"),Dxr=l(),TE=a("li"),lMe=a("strong"),Gxr=o("mpnet"),Oxr=o(" \u2014 "),xK=a("a"),Vxr=o("TFMPNetForSequenceClassification"),Xxr=o(" (MPNet model)"),zxr=l(),ME=a("li"),iMe=a("strong"),Qxr=o("openai-gpt"),Wxr=o(" \u2014 "),$K=a("a"),Hxr=o("TFOpenAIGPTForSequenceClassification"),Uxr=o(" (OpenAI GPT model)"),Jxr=l(),EE=a("li"),dMe=a("strong"),Yxr=o("rembert"),Kxr=o(" \u2014 "),kK=a("a"),Zxr=o("TFRemBertForSequenceClassification"),e$r=o(" (RemBERT model)"),o$r=l(),CE=a("li"),cMe=a("strong"),r$r=o("roberta"),t$r=o(" \u2014 "),SK=a("a"),a$r=o("TFRobertaForSequenceClassification"),n$r=o(" (RoBERTa model)"),s$r=l(),wE=a("li"),fMe=a("strong"),l$r=o("roformer"),i$r=o(" \u2014 "),RK=a("a"),d$r=o("TFRoFormerForSequenceClassification"),c$r=o(" (RoFormer model)"),f$r=l(),AE=a("li"),mMe=a("strong"),m$r=o("tapas"),g$r=o(" \u2014 "),PK=a("a"),h$r=o("TFTapasForSequenceClassification"),p$r=o(" (TAPAS model)"),_$r=l(),LE=a("li"),gMe=a("strong"),u$r=o("transfo-xl"),b$r=o(" \u2014 "),BK=a("a"),v$r=o("TFTransfoXLForSequenceClassification"),F$r=o(" (Transformer-XL model)"),T$r=l(),yE=a("li"),hMe=a("strong"),M$r=o("xlm"),E$r=o(" \u2014 "),IK=a("a"),C$r=o("TFXLMForSequenceClassification"),w$r=o(" (XLM model)"),A$r=l(),xE=a("li"),pMe=a("strong"),L$r=o("xlm-roberta"),y$r=o(" \u2014 "),NK=a("a"),x$r=o("TFXLMRobertaForSequenceClassification"),$$r=o(" (XLM-RoBERTa model)"),k$r=l(),$E=a("li"),_Me=a("strong"),S$r=o("xlnet"),R$r=o(" \u2014 "),qK=a("a"),P$r=o("TFXLNetForSequenceClassification"),B$r=o(" (XLNet model)"),I$r=l(),F(kE.$$.fragment),oQe=l(),yc=a("h2"),SE=a("a"),uMe=a("span"),F(Bx.$$.fragment),N$r=l(),bMe=a("span"),q$r=o("TFAutoModelForMultipleChoice"),rQe=l(),ir=a("div"),F(Ix.$$.fragment),j$r=l(),xc=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jK=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),DK=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),Nx=a("p"),Q$r=o("This class cannot be instantiated directly using "),vMe=a("code"),W$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Dt=a("div"),F(qx.$$.fragment),J$r=l(),FMe=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K$r=l(),$c=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(RE.$$.fragment),nkr=l(),Ir=a("div"),F(jx.$$.fragment),skr=l(),MMe=a("p"),lkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ikr=l(),pn=a("p"),dkr=o("The model class to instantiate is selected based on the "),EMe=a("code"),ckr=o("model_type"),fkr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(":"),_kr=l(),be=a("ul"),PE=a("li"),AMe=a("strong"),ukr=o("albert"),bkr=o(" \u2014 "),OK=a("a"),vkr=o("TFAlbertForMultipleChoice"),Fkr=o(" (ALBERT model)"),Tkr=l(),BE=a("li"),LMe=a("strong"),Mkr=o("bert"),Ekr=o(" \u2014 "),VK=a("a"),Ckr=o("TFBertForMultipleChoice"),wkr=o(" (BERT model)"),Akr=l(),IE=a("li"),yMe=a("strong"),Lkr=o("camembert"),ykr=o(" \u2014 "),XK=a("a"),xkr=o("TFCamembertForMultipleChoice"),$kr=o(" (CamemBERT model)"),kkr=l(),NE=a("li"),xMe=a("strong"),Skr=o("convbert"),Rkr=o(" \u2014 "),zK=a("a"),Pkr=o("TFConvBertForMultipleChoice"),Bkr=o(" (ConvBERT model)"),Ikr=l(),qE=a("li"),$Me=a("strong"),Nkr=o("distilbert"),qkr=o(" \u2014 "),QK=a("a"),jkr=o("TFDistilBertForMultipleChoice"),Dkr=o(" (DistilBERT model)"),Gkr=l(),jE=a("li"),kMe=a("strong"),Okr=o("electra"),Vkr=o(" \u2014 "),WK=a("a"),Xkr=o("TFElectraForMultipleChoice"),zkr=o(" (ELECTRA model)"),Qkr=l(),DE=a("li"),SMe=a("strong"),Wkr=o("flaubert"),Hkr=o(" \u2014 "),HK=a("a"),Ukr=o("TFFlaubertForMultipleChoice"),Jkr=o(" (FlauBERT model)"),Ykr=l(),GE=a("li"),RMe=a("strong"),Kkr=o("funnel"),Zkr=o(" \u2014 "),UK=a("a"),eSr=o("TFFunnelForMultipleChoice"),oSr=o(" (Funnel Transformer model)"),rSr=l(),OE=a("li"),PMe=a("strong"),tSr=o("longformer"),aSr=o(" \u2014 "),JK=a("a"),nSr=o("TFLongformerForMultipleChoice"),sSr=o(" (Longformer model)"),lSr=l(),VE=a("li"),BMe=a("strong"),iSr=o("mobilebert"),dSr=o(" \u2014 "),YK=a("a"),cSr=o("TFMobileBertForMultipleChoice"),fSr=o(" (MobileBERT model)"),mSr=l(),XE=a("li"),IMe=a("strong"),gSr=o("mpnet"),hSr=o(" \u2014 "),KK=a("a"),pSr=o("TFMPNetForMultipleChoice"),_Sr=o(" (MPNet model)"),uSr=l(),zE=a("li"),NMe=a("strong"),bSr=o("rembert"),vSr=o(" \u2014 "),ZK=a("a"),FSr=o("TFRemBertForMultipleChoice"),TSr=o(" (RemBERT model)"),MSr=l(),QE=a("li"),qMe=a("strong"),ESr=o("roberta"),CSr=o(" \u2014 "),eZ=a("a"),wSr=o("TFRobertaForMultipleChoice"),ASr=o(" (RoBERTa model)"),LSr=l(),WE=a("li"),jMe=a("strong"),ySr=o("roformer"),xSr=o(" \u2014 "),oZ=a("a"),$Sr=o("TFRoFormerForMultipleChoice"),kSr=o(" (RoFormer model)"),SSr=l(),HE=a("li"),DMe=a("strong"),RSr=o("xlm"),PSr=o(" \u2014 "),rZ=a("a"),BSr=o("TFXLMForMultipleChoice"),ISr=o(" (XLM model)"),NSr=l(),UE=a("li"),GMe=a("strong"),qSr=o("xlm-roberta"),jSr=o(" \u2014 "),tZ=a("a"),DSr=o("TFXLMRobertaForMultipleChoice"),GSr=o(" (XLM-RoBERTa model)"),OSr=l(),JE=a("li"),OMe=a("strong"),VSr=o("xlnet"),XSr=o(" \u2014 "),aZ=a("a"),zSr=o("TFXLNetForMultipleChoice"),QSr=o(" (XLNet model)"),WSr=l(),F(YE.$$.fragment),tQe=l(),kc=a("h2"),KE=a("a"),VMe=a("span"),F(Dx.$$.fragment),HSr=l(),XMe=a("span"),USr=o("TFAutoModelForNextSentencePrediction"),aQe=l(),dr=a("div"),F(Gx.$$.fragment),JSr=l(),Sc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),sZ=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),Ox=a("p"),tRr=o("This class cannot be instantiated directly using "),zMe=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Gt=a("div"),F(Vx.$$.fragment),lRr=l(),QMe=a("p"),iRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dRr=l(),Rc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(ZE.$$.fragment),_Rr=l(),Nr=a("div"),F(Xx.$$.fragment),uRr=l(),HMe=a("p"),bRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vRr=l(),_n=a("p"),FRr=o("The model class to instantiate is selected based on the "),UMe=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),LRr=l(),zx=a("ul"),eC=a("li"),KMe=a("strong"),yRr=o("bert"),xRr=o(" \u2014 "),iZ=a("a"),$Rr=o("TFBertForNextSentencePrediction"),kRr=o(" (BERT model)"),SRr=l(),oC=a("li"),ZMe=a("strong"),RRr=o("mobilebert"),PRr=o(" \u2014 "),dZ=a("a"),BRr=o("TFMobileBertForNextSentencePrediction"),IRr=o(" (MobileBERT model)"),NRr=l(),F(rC.$$.fragment),nQe=l(),Pc=a("h2"),tC=a("a"),eEe=a("span"),F(Qx.$$.fragment),qRr=l(),oEe=a("span"),jRr=o("TFAutoModelForTableQuestionAnswering"),sQe=l(),cr=a("div"),F(Wx.$$.fragment),DRr=l(),Bc=a("p"),GRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cZ=a("a"),ORr=o("from_pretrained()"),VRr=o(" class method or the "),fZ=a("a"),XRr=o("from_config()"),zRr=o(` class
method.`),QRr=l(),Hx=a("p"),WRr=o("This class cannot be instantiated directly using "),rEe=a("code"),HRr=o("__init__()"),URr=o(" (throws an error)."),JRr=l(),Ot=a("div"),F(Ux.$$.fragment),YRr=l(),tEe=a("p"),KRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZRr=l(),Ic=a("p"),ePr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),oPr=o("not"),rPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),tPr=o("from_pretrained()"),aPr=o(" to load the model weights."),nPr=l(),F(aC.$$.fragment),sPr=l(),qr=a("div"),F(Jx.$$.fragment),lPr=l(),nEe=a("p"),iPr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dPr=l(),un=a("p"),cPr=o("The model class to instantiate is selected based on the "),sEe=a("code"),fPr=o("model_type"),mPr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),gPr=o("pretrained_model_name_or_path"),hPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),pPr=o("pretrained_model_name_or_path"),_Pr=o(":"),uPr=l(),dEe=a("ul"),nC=a("li"),cEe=a("strong"),bPr=o("tapas"),vPr=o(" \u2014 "),gZ=a("a"),FPr=o("TFTapasForQuestionAnswering"),TPr=o(" (TAPAS model)"),MPr=l(),F(sC.$$.fragment),lQe=l(),Nc=a("h2"),lC=a("a"),fEe=a("span"),F(Yx.$$.fragment),EPr=l(),mEe=a("span"),CPr=o("TFAutoModelForTokenClassification"),iQe=l(),fr=a("div"),F(Kx.$$.fragment),wPr=l(),qc=a("p"),APr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hZ=a("a"),LPr=o("from_pretrained()"),yPr=o(" class method or the "),pZ=a("a"),xPr=o("from_config()"),$Pr=o(` class
method.`),kPr=l(),Zx=a("p"),SPr=o("This class cannot be instantiated directly using "),gEe=a("code"),RPr=o("__init__()"),PPr=o(" (throws an error)."),BPr=l(),Vt=a("div"),F(e$.$$.fragment),IPr=l(),hEe=a("p"),NPr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qPr=l(),jc=a("p"),jPr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),DPr=o("not"),GPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),OPr=o("from_pretrained()"),VPr=o(" to load the model weights."),XPr=l(),F(iC.$$.fragment),zPr=l(),jr=a("div"),F(o$.$$.fragment),QPr=l(),_Ee=a("p"),WPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HPr=l(),bn=a("p"),UPr=o("The model class to instantiate is selected based on the "),uEe=a("code"),JPr=o("model_type"),YPr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),KPr=o("pretrained_model_name_or_path"),ZPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),eBr=o("pretrained_model_name_or_path"),oBr=o(":"),rBr=l(),de=a("ul"),dC=a("li"),FEe=a("strong"),tBr=o("albert"),aBr=o(" \u2014 "),uZ=a("a"),nBr=o("TFAlbertForTokenClassification"),sBr=o(" (ALBERT model)"),lBr=l(),cC=a("li"),TEe=a("strong"),iBr=o("bert"),dBr=o(" \u2014 "),bZ=a("a"),cBr=o("TFBertForTokenClassification"),fBr=o(" (BERT model)"),mBr=l(),fC=a("li"),MEe=a("strong"),gBr=o("camembert"),hBr=o(" \u2014 "),vZ=a("a"),pBr=o("TFCamembertForTokenClassification"),_Br=o(" (CamemBERT model)"),uBr=l(),mC=a("li"),EEe=a("strong"),bBr=o("convbert"),vBr=o(" \u2014 "),FZ=a("a"),FBr=o("TFConvBertForTokenClassification"),TBr=o(" (ConvBERT model)"),MBr=l(),gC=a("li"),CEe=a("strong"),EBr=o("deberta"),CBr=o(" \u2014 "),TZ=a("a"),wBr=o("TFDebertaForTokenClassification"),ABr=o(" (DeBERTa model)"),LBr=l(),hC=a("li"),wEe=a("strong"),yBr=o("deberta-v2"),xBr=o(" \u2014 "),MZ=a("a"),$Br=o("TFDebertaV2ForTokenClassification"),kBr=o(" (DeBERTa-v2 model)"),SBr=l(),pC=a("li"),AEe=a("strong"),RBr=o("distilbert"),PBr=o(" \u2014 "),EZ=a("a"),BBr=o("TFDistilBertForTokenClassification"),IBr=o(" (DistilBERT model)"),NBr=l(),_C=a("li"),LEe=a("strong"),qBr=o("electra"),jBr=o(" \u2014 "),CZ=a("a"),DBr=o("TFElectraForTokenClassification"),GBr=o(" (ELECTRA model)"),OBr=l(),uC=a("li"),yEe=a("strong"),VBr=o("flaubert"),XBr=o(" \u2014 "),wZ=a("a"),zBr=o("TFFlaubertForTokenClassification"),QBr=o(" (FlauBERT model)"),WBr=l(),bC=a("li"),xEe=a("strong"),HBr=o("funnel"),UBr=o(" \u2014 "),AZ=a("a"),JBr=o("TFFunnelForTokenClassification"),YBr=o(" (Funnel Transformer model)"),KBr=l(),vC=a("li"),$Ee=a("strong"),ZBr=o("layoutlm"),eIr=o(" \u2014 "),LZ=a("a"),oIr=o("TFLayoutLMForTokenClassification"),rIr=o(" (LayoutLM model)"),tIr=l(),FC=a("li"),kEe=a("strong"),aIr=o("longformer"),nIr=o(" \u2014 "),yZ=a("a"),sIr=o("TFLongformerForTokenClassification"),lIr=o(" (Longformer model)"),iIr=l(),TC=a("li"),SEe=a("strong"),dIr=o("mobilebert"),cIr=o(" \u2014 "),xZ=a("a"),fIr=o("TFMobileBertForTokenClassification"),mIr=o(" (MobileBERT model)"),gIr=l(),MC=a("li"),REe=a("strong"),hIr=o("mpnet"),pIr=o(" \u2014 "),$Z=a("a"),_Ir=o("TFMPNetForTokenClassification"),uIr=o(" (MPNet model)"),bIr=l(),EC=a("li"),PEe=a("strong"),vIr=o("rembert"),FIr=o(" \u2014 "),kZ=a("a"),TIr=o("TFRemBertForTokenClassification"),MIr=o(" (RemBERT model)"),EIr=l(),CC=a("li"),BEe=a("strong"),CIr=o("roberta"),wIr=o(" \u2014 "),SZ=a("a"),AIr=o("TFRobertaForTokenClassification"),LIr=o(" (RoBERTa model)"),yIr=l(),wC=a("li"),IEe=a("strong"),xIr=o("roformer"),$Ir=o(" \u2014 "),RZ=a("a"),kIr=o("TFRoFormerForTokenClassification"),SIr=o(" (RoFormer model)"),RIr=l(),AC=a("li"),NEe=a("strong"),PIr=o("xlm"),BIr=o(" \u2014 "),PZ=a("a"),IIr=o("TFXLMForTokenClassification"),NIr=o(" (XLM model)"),qIr=l(),LC=a("li"),qEe=a("strong"),jIr=o("xlm-roberta"),DIr=o(" \u2014 "),BZ=a("a"),GIr=o("TFXLMRobertaForTokenClassification"),OIr=o(" (XLM-RoBERTa model)"),VIr=l(),yC=a("li"),jEe=a("strong"),XIr=o("xlnet"),zIr=o(" \u2014 "),IZ=a("a"),QIr=o("TFXLNetForTokenClassification"),WIr=o(" (XLNet model)"),HIr=l(),F(xC.$$.fragment),dQe=l(),Dc=a("h2"),$C=a("a"),DEe=a("span"),F(r$.$$.fragment),UIr=l(),GEe=a("span"),JIr=o("TFAutoModelForQuestionAnswering"),cQe=l(),mr=a("div"),F(t$.$$.fragment),YIr=l(),Gc=a("p"),KIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NZ=a("a"),ZIr=o("from_pretrained()"),eNr=o(" class method or the "),qZ=a("a"),oNr=o("from_config()"),rNr=o(` class
method.`),tNr=l(),a$=a("p"),aNr=o("This class cannot be instantiated directly using "),OEe=a("code"),nNr=o("__init__()"),sNr=o(" (throws an error)."),lNr=l(),Xt=a("div"),F(n$.$$.fragment),iNr=l(),VEe=a("p"),dNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cNr=l(),Oc=a("p"),fNr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),mNr=o("not"),gNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),hNr=o("from_pretrained()"),pNr=o(" to load the model weights."),_Nr=l(),F(kC.$$.fragment),uNr=l(),Dr=a("div"),F(s$.$$.fragment),bNr=l(),zEe=a("p"),vNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FNr=l(),vn=a("p"),TNr=o("The model class to instantiate is selected based on the "),QEe=a("code"),MNr=o("model_type"),ENr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),CNr=o("pretrained_model_name_or_path"),wNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),ANr=o("pretrained_model_name_or_path"),LNr=o(":"),yNr=l(),ce=a("ul"),SC=a("li"),UEe=a("strong"),xNr=o("albert"),$Nr=o(" \u2014 "),DZ=a("a"),kNr=o("TFAlbertForQuestionAnswering"),SNr=o(" (ALBERT model)"),RNr=l(),RC=a("li"),JEe=a("strong"),PNr=o("bert"),BNr=o(" \u2014 "),GZ=a("a"),INr=o("TFBertForQuestionAnswering"),NNr=o(" (BERT model)"),qNr=l(),PC=a("li"),YEe=a("strong"),jNr=o("camembert"),DNr=o(" \u2014 "),OZ=a("a"),GNr=o("TFCamembertForQuestionAnswering"),ONr=o(" (CamemBERT model)"),VNr=l(),BC=a("li"),KEe=a("strong"),XNr=o("convbert"),zNr=o(" \u2014 "),VZ=a("a"),QNr=o("TFConvBertForQuestionAnswering"),WNr=o(" (ConvBERT model)"),HNr=l(),IC=a("li"),ZEe=a("strong"),UNr=o("deberta"),JNr=o(" \u2014 "),XZ=a("a"),YNr=o("TFDebertaForQuestionAnswering"),KNr=o(" (DeBERTa model)"),ZNr=l(),NC=a("li"),eCe=a("strong"),eqr=o("deberta-v2"),oqr=o(" \u2014 "),zZ=a("a"),rqr=o("TFDebertaV2ForQuestionAnswering"),tqr=o(" (DeBERTa-v2 model)"),aqr=l(),qC=a("li"),oCe=a("strong"),nqr=o("distilbert"),sqr=o(" \u2014 "),QZ=a("a"),lqr=o("TFDistilBertForQuestionAnswering"),iqr=o(" (DistilBERT model)"),dqr=l(),jC=a("li"),rCe=a("strong"),cqr=o("electra"),fqr=o(" \u2014 "),WZ=a("a"),mqr=o("TFElectraForQuestionAnswering"),gqr=o(" (ELECTRA model)"),hqr=l(),DC=a("li"),tCe=a("strong"),pqr=o("flaubert"),_qr=o(" \u2014 "),HZ=a("a"),uqr=o("TFFlaubertForQuestionAnsweringSimple"),bqr=o(" (FlauBERT model)"),vqr=l(),GC=a("li"),aCe=a("strong"),Fqr=o("funnel"),Tqr=o(" \u2014 "),UZ=a("a"),Mqr=o("TFFunnelForQuestionAnswering"),Eqr=o(" (Funnel Transformer model)"),Cqr=l(),OC=a("li"),nCe=a("strong"),wqr=o("gptj"),Aqr=o(" \u2014 "),JZ=a("a"),Lqr=o("TFGPTJForQuestionAnswering"),yqr=o(" (GPT-J model)"),xqr=l(),VC=a("li"),sCe=a("strong"),$qr=o("longformer"),kqr=o(" \u2014 "),YZ=a("a"),Sqr=o("TFLongformerForQuestionAnswering"),Rqr=o(" (Longformer model)"),Pqr=l(),XC=a("li"),lCe=a("strong"),Bqr=o("mobilebert"),Iqr=o(" \u2014 "),KZ=a("a"),Nqr=o("TFMobileBertForQuestionAnswering"),qqr=o(" (MobileBERT model)"),jqr=l(),zC=a("li"),iCe=a("strong"),Dqr=o("mpnet"),Gqr=o(" \u2014 "),ZZ=a("a"),Oqr=o("TFMPNetForQuestionAnswering"),Vqr=o(" (MPNet model)"),Xqr=l(),QC=a("li"),dCe=a("strong"),zqr=o("rembert"),Qqr=o(" \u2014 "),eee=a("a"),Wqr=o("TFRemBertForQuestionAnswering"),Hqr=o(" (RemBERT model)"),Uqr=l(),WC=a("li"),cCe=a("strong"),Jqr=o("roberta"),Yqr=o(" \u2014 "),oee=a("a"),Kqr=o("TFRobertaForQuestionAnswering"),Zqr=o(" (RoBERTa model)"),ejr=l(),HC=a("li"),fCe=a("strong"),ojr=o("roformer"),rjr=o(" \u2014 "),ree=a("a"),tjr=o("TFRoFormerForQuestionAnswering"),ajr=o(" (RoFormer model)"),njr=l(),UC=a("li"),mCe=a("strong"),sjr=o("xlm"),ljr=o(" \u2014 "),tee=a("a"),ijr=o("TFXLMForQuestionAnsweringSimple"),djr=o(" (XLM model)"),cjr=l(),JC=a("li"),gCe=a("strong"),fjr=o("xlm-roberta"),mjr=o(" \u2014 "),aee=a("a"),gjr=o("TFXLMRobertaForQuestionAnswering"),hjr=o(" (XLM-RoBERTa model)"),pjr=l(),YC=a("li"),hCe=a("strong"),_jr=o("xlnet"),ujr=o(" \u2014 "),nee=a("a"),bjr=o("TFXLNetForQuestionAnsweringSimple"),vjr=o(" (XLNet model)"),Fjr=l(),F(KC.$$.fragment),fQe=l(),Vc=a("h2"),ZC=a("a"),pCe=a("span"),F(l$.$$.fragment),Tjr=l(),_Ce=a("span"),Mjr=o("TFAutoModelForVision2Seq"),mQe=l(),gr=a("div"),F(i$.$$.fragment),Ejr=l(),Xc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),see=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),lee=a("a"),Ljr=o("from_config()"),yjr=o(` class
method.`),xjr=l(),d$=a("p"),$jr=o("This class cannot be instantiated directly using "),uCe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),zt=a("div"),F(c$.$$.fragment),Pjr=l(),bCe=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ijr=l(),zc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),vCe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(e5.$$.fragment),Vjr=l(),Gr=a("div"),F(f$.$$.fragment),Xjr=l(),FCe=a("p"),zjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qjr=l(),Fn=a("p"),Wjr=o("The model class to instantiate is selected based on the "),TCe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),MCe=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),CCe=a("ul"),o5=a("li"),wCe=a("strong"),oDr=o("vision-encoder-decoder"),rDr=o(" \u2014 "),dee=a("a"),tDr=o("TFVisionEncoderDecoderModel"),aDr=o(" (Vision Encoder decoder model)"),nDr=l(),F(r5.$$.fragment),gQe=l(),Qc=a("h2"),t5=a("a"),ACe=a("span"),F(m$.$$.fragment),sDr=l(),LCe=a("span"),lDr=o("TFAutoModelForSpeechSeq2Seq"),hQe=l(),hr=a("div"),F(g$.$$.fragment),iDr=l(),Wc=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cee=a("a"),cDr=o("from_pretrained()"),fDr=o(" class method or the "),fee=a("a"),mDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),h$=a("p"),pDr=o("This class cannot be instantiated directly using "),yCe=a("code"),_Dr=o("__init__()"),uDr=o(" (throws an error)."),bDr=l(),Qt=a("div"),F(p$.$$.fragment),vDr=l(),xCe=a("p"),FDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TDr=l(),Hc=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),LDr=l(),F(a5.$$.fragment),yDr=l(),Or=a("div"),F(_$.$$.fragment),xDr=l(),kCe=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kDr=l(),Tn=a("p"),SDr=o("The model class to instantiate is selected based on the "),SCe=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),NDr=o("pretrained_model_name_or_path"),qDr=o(":"),jDr=l(),BCe=a("ul"),n5=a("li"),ICe=a("strong"),DDr=o("speech_to_text"),GDr=o(" \u2014 "),gee=a("a"),ODr=o("TFSpeech2TextForConditionalGeneration"),VDr=o(" (Speech2Text model)"),XDr=l(),F(s5.$$.fragment),pQe=l(),Uc=a("h2"),l5=a("a"),NCe=a("span"),F(u$.$$.fragment),zDr=l(),qCe=a("span"),QDr=o("FlaxAutoModel"),_Qe=l(),pr=a("div"),F(b$.$$.fragment),WDr=l(),Jc=a("p"),HDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hee=a("a"),UDr=o("from_pretrained()"),JDr=o(" class method or the "),pee=a("a"),YDr=o("from_config()"),KDr=o(` class
method.`),ZDr=l(),v$=a("p"),eGr=o("This class cannot be instantiated directly using "),jCe=a("code"),oGr=o("__init__()"),rGr=o(" (throws an error)."),tGr=l(),Wt=a("div"),F(F$.$$.fragment),aGr=l(),DCe=a("p"),nGr=o("Instantiates one of the base model classes of the library from a configuration."),sGr=l(),Yc=a("p"),lGr=o(`Note:
Loading a model from its configuration file does `),GCe=a("strong"),iGr=o("not"),dGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),cGr=o("from_pretrained()"),fGr=o(" to load the model weights."),mGr=l(),F(i5.$$.fragment),gGr=l(),Vr=a("div"),F(T$.$$.fragment),hGr=l(),OCe=a("p"),pGr=o("Instantiate one of the base model classes of the library from a pretrained model."),_Gr=l(),Mn=a("p"),uGr=o("The model class to instantiate is selected based on the "),VCe=a("code"),bGr=o("model_type"),vGr=o(` property of the config object (either
passed as an argument or loaded from `),XCe=a("code"),FGr=o("pretrained_model_name_or_path"),TGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=a("code"),MGr=o("pretrained_model_name_or_path"),EGr=o(":"),CGr=l(),oe=a("ul"),d5=a("li"),QCe=a("strong"),wGr=o("albert"),AGr=o(" \u2014 "),uee=a("a"),LGr=o("FlaxAlbertModel"),yGr=o(" (ALBERT model)"),xGr=l(),c5=a("li"),WCe=a("strong"),$Gr=o("bart"),kGr=o(" \u2014 "),bee=a("a"),SGr=o("FlaxBartModel"),RGr=o(" (BART model)"),PGr=l(),f5=a("li"),HCe=a("strong"),BGr=o("beit"),IGr=o(" \u2014 "),vee=a("a"),NGr=o("FlaxBeitModel"),qGr=o(" (BEiT model)"),jGr=l(),m5=a("li"),UCe=a("strong"),DGr=o("bert"),GGr=o(" \u2014 "),Fee=a("a"),OGr=o("FlaxBertModel"),VGr=o(" (BERT model)"),XGr=l(),g5=a("li"),JCe=a("strong"),zGr=o("big_bird"),QGr=o(" \u2014 "),Tee=a("a"),WGr=o("FlaxBigBirdModel"),HGr=o(" (BigBird model)"),UGr=l(),h5=a("li"),YCe=a("strong"),JGr=o("blenderbot"),YGr=o(" \u2014 "),Mee=a("a"),KGr=o("FlaxBlenderbotModel"),ZGr=o(" (Blenderbot model)"),eOr=l(),p5=a("li"),KCe=a("strong"),oOr=o("blenderbot-small"),rOr=o(" \u2014 "),Eee=a("a"),tOr=o("FlaxBlenderbotSmallModel"),aOr=o(" (BlenderbotSmall model)"),nOr=l(),_5=a("li"),ZCe=a("strong"),sOr=o("clip"),lOr=o(" \u2014 "),Cee=a("a"),iOr=o("FlaxCLIPModel"),dOr=o(" (CLIP model)"),cOr=l(),u5=a("li"),e5e=a("strong"),fOr=o("distilbert"),mOr=o(" \u2014 "),wee=a("a"),gOr=o("FlaxDistilBertModel"),hOr=o(" (DistilBERT model)"),pOr=l(),b5=a("li"),o5e=a("strong"),_Or=o("electra"),uOr=o(" \u2014 "),Aee=a("a"),bOr=o("FlaxElectraModel"),vOr=o(" (ELECTRA model)"),FOr=l(),v5=a("li"),r5e=a("strong"),TOr=o("gpt2"),MOr=o(" \u2014 "),Lee=a("a"),EOr=o("FlaxGPT2Model"),COr=o(" (OpenAI GPT-2 model)"),wOr=l(),F5=a("li"),t5e=a("strong"),AOr=o("gpt_neo"),LOr=o(" \u2014 "),yee=a("a"),yOr=o("FlaxGPTNeoModel"),xOr=o(" (GPT Neo model)"),$Or=l(),T5=a("li"),a5e=a("strong"),kOr=o("gptj"),SOr=o(" \u2014 "),xee=a("a"),ROr=o("FlaxGPTJModel"),POr=o(" (GPT-J model)"),BOr=l(),M5=a("li"),n5e=a("strong"),IOr=o("longt5"),NOr=o(" \u2014 "),$ee=a("a"),qOr=o("FlaxLongT5Model"),jOr=o(" (LongT5 model)"),DOr=l(),E5=a("li"),s5e=a("strong"),GOr=o("marian"),OOr=o(" \u2014 "),kee=a("a"),VOr=o("FlaxMarianModel"),XOr=o(" (Marian model)"),zOr=l(),C5=a("li"),l5e=a("strong"),QOr=o("mbart"),WOr=o(" \u2014 "),See=a("a"),HOr=o("FlaxMBartModel"),UOr=o(" (mBART model)"),JOr=l(),w5=a("li"),i5e=a("strong"),YOr=o("mt5"),KOr=o(" \u2014 "),Ree=a("a"),ZOr=o("FlaxMT5Model"),eVr=o(" (MT5 model)"),oVr=l(),A5=a("li"),d5e=a("strong"),rVr=o("opt"),tVr=o(" \u2014 "),Pee=a("a"),aVr=o("FlaxOPTModel"),nVr=o(" (OPT model)"),sVr=l(),L5=a("li"),c5e=a("strong"),lVr=o("pegasus"),iVr=o(" \u2014 "),Bee=a("a"),dVr=o("FlaxPegasusModel"),cVr=o(" (Pegasus model)"),fVr=l(),y5=a("li"),f5e=a("strong"),mVr=o("roberta"),gVr=o(" \u2014 "),Iee=a("a"),hVr=o("FlaxRobertaModel"),pVr=o(" (RoBERTa model)"),_Vr=l(),x5=a("li"),m5e=a("strong"),uVr=o("roformer"),bVr=o(" \u2014 "),Nee=a("a"),vVr=o("FlaxRoFormerModel"),FVr=o(" (RoFormer model)"),TVr=l(),$5=a("li"),g5e=a("strong"),MVr=o("t5"),EVr=o(" \u2014 "),qee=a("a"),CVr=o("FlaxT5Model"),wVr=o(" (T5 model)"),AVr=l(),k5=a("li"),h5e=a("strong"),LVr=o("vision-text-dual-encoder"),yVr=o(" \u2014 "),jee=a("a"),xVr=o("FlaxVisionTextDualEncoderModel"),$Vr=o(" (VisionTextDualEncoder model)"),kVr=l(),S5=a("li"),p5e=a("strong"),SVr=o("vit"),RVr=o(" \u2014 "),Dee=a("a"),PVr=o("FlaxViTModel"),BVr=o(" (ViT model)"),IVr=l(),R5=a("li"),_5e=a("strong"),NVr=o("wav2vec2"),qVr=o(" \u2014 "),Gee=a("a"),jVr=o("FlaxWav2Vec2Model"),DVr=o(" (Wav2Vec2 model)"),GVr=l(),P5=a("li"),u5e=a("strong"),OVr=o("xglm"),VVr=o(" \u2014 "),Oee=a("a"),XVr=o("FlaxXGLMModel"),zVr=o(" (XGLM model)"),QVr=l(),B5=a("li"),b5e=a("strong"),WVr=o("xlm-roberta"),HVr=o(" \u2014 "),Vee=a("a"),UVr=o("FlaxXLMRobertaModel"),JVr=o(" (XLM-RoBERTa model)"),YVr=l(),F(I5.$$.fragment),uQe=l(),Kc=a("h2"),N5=a("a"),v5e=a("span"),F(M$.$$.fragment),KVr=l(),F5e=a("span"),ZVr=o("FlaxAutoModelForCausalLM"),bQe=l(),_r=a("div"),F(E$.$$.fragment),eXr=l(),Zc=a("p"),oXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Xee=a("a"),rXr=o("from_pretrained()"),tXr=o(" class method or the "),zee=a("a"),aXr=o("from_config()"),nXr=o(` class
method.`),sXr=l(),C$=a("p"),lXr=o("This class cannot be instantiated directly using "),T5e=a("code"),iXr=o("__init__()"),dXr=o(" (throws an error)."),cXr=l(),Ht=a("div"),F(w$.$$.fragment),fXr=l(),M5e=a("p"),mXr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gXr=l(),ef=a("p"),hXr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),pXr=o("not"),_Xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),uXr=o("from_pretrained()"),bXr=o(" to load the model weights."),vXr=l(),F(q5.$$.fragment),FXr=l(),Xr=a("div"),F(A$.$$.fragment),TXr=l(),C5e=a("p"),MXr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EXr=l(),En=a("p"),CXr=o("The model class to instantiate is selected based on the "),w5e=a("code"),wXr=o("model_type"),AXr=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),LXr=o("pretrained_model_name_or_path"),yXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),xXr=o("pretrained_model_name_or_path"),$Xr=o(":"),kXr=l(),xe=a("ul"),j5=a("li"),y5e=a("strong"),SXr=o("bart"),RXr=o(" \u2014 "),Wee=a("a"),PXr=o("FlaxBartForCausalLM"),BXr=o(" (BART model)"),IXr=l(),D5=a("li"),x5e=a("strong"),NXr=o("bert"),qXr=o(" \u2014 "),Hee=a("a"),jXr=o("FlaxBertForCausalLM"),DXr=o(" (BERT model)"),GXr=l(),G5=a("li"),$5e=a("strong"),OXr=o("big_bird"),VXr=o(" \u2014 "),Uee=a("a"),XXr=o("FlaxBigBirdForCausalLM"),zXr=o(" (BigBird model)"),QXr=l(),O5=a("li"),k5e=a("strong"),WXr=o("electra"),HXr=o(" \u2014 "),Jee=a("a"),UXr=o("FlaxElectraForCausalLM"),JXr=o(" (ELECTRA model)"),YXr=l(),V5=a("li"),S5e=a("strong"),KXr=o("gpt2"),ZXr=o(" \u2014 "),Yee=a("a"),ezr=o("FlaxGPT2LMHeadModel"),ozr=o(" (OpenAI GPT-2 model)"),rzr=l(),X5=a("li"),R5e=a("strong"),tzr=o("gpt_neo"),azr=o(" \u2014 "),Kee=a("a"),nzr=o("FlaxGPTNeoForCausalLM"),szr=o(" (GPT Neo model)"),lzr=l(),z5=a("li"),P5e=a("strong"),izr=o("gptj"),dzr=o(" \u2014 "),Zee=a("a"),czr=o("FlaxGPTJForCausalLM"),fzr=o(" (GPT-J model)"),mzr=l(),Q5=a("li"),B5e=a("strong"),gzr=o("opt"),hzr=o(" \u2014 "),eoe=a("a"),pzr=o("FlaxOPTForCausalLM"),_zr=o(" (OPT model)"),uzr=l(),W5=a("li"),I5e=a("strong"),bzr=o("roberta"),vzr=o(" \u2014 "),ooe=a("a"),Fzr=o("FlaxRobertaForCausalLM"),Tzr=o(" (RoBERTa model)"),Mzr=l(),H5=a("li"),N5e=a("strong"),Ezr=o("xglm"),Czr=o(" \u2014 "),roe=a("a"),wzr=o("FlaxXGLMForCausalLM"),Azr=o(" (XGLM model)"),Lzr=l(),F(U5.$$.fragment),vQe=l(),of=a("h2"),J5=a("a"),q5e=a("span"),F(L$.$$.fragment),yzr=l(),j5e=a("span"),xzr=o("FlaxAutoModelForPreTraining"),FQe=l(),ur=a("div"),F(y$.$$.fragment),$zr=l(),rf=a("p"),kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),toe=a("a"),Szr=o("from_pretrained()"),Rzr=o(" class method or the "),aoe=a("a"),Pzr=o("from_config()"),Bzr=o(` class
method.`),Izr=l(),x$=a("p"),Nzr=o("This class cannot be instantiated directly using "),D5e=a("code"),qzr=o("__init__()"),jzr=o(" (throws an error)."),Dzr=l(),Ut=a("div"),F($$.$$.fragment),Gzr=l(),G5e=a("p"),Ozr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vzr=l(),tf=a("p"),Xzr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),zzr=o("not"),Qzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" to load the model weights."),Uzr=l(),F(Y5.$$.fragment),Jzr=l(),zr=a("div"),F(k$.$$.fragment),Yzr=l(),V5e=a("p"),Kzr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zzr=l(),Cn=a("p"),eQr=o("The model class to instantiate is selected based on the "),X5e=a("code"),oQr=o("model_type"),rQr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),tQr=o("pretrained_model_name_or_path"),aQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=a("code"),nQr=o("pretrained_model_name_or_path"),sQr=o(":"),lQr=l(),Ee=a("ul"),K5=a("li"),W5e=a("strong"),iQr=o("albert"),dQr=o(" \u2014 "),soe=a("a"),cQr=o("FlaxAlbertForPreTraining"),fQr=o(" (ALBERT model)"),mQr=l(),Z5=a("li"),H5e=a("strong"),gQr=o("bart"),hQr=o(" \u2014 "),loe=a("a"),pQr=o("FlaxBartForConditionalGeneration"),_Qr=o(" (BART model)"),uQr=l(),e3=a("li"),U5e=a("strong"),bQr=o("bert"),vQr=o(" \u2014 "),ioe=a("a"),FQr=o("FlaxBertForPreTraining"),TQr=o(" (BERT model)"),MQr=l(),o3=a("li"),J5e=a("strong"),EQr=o("big_bird"),CQr=o(" \u2014 "),doe=a("a"),wQr=o("FlaxBigBirdForPreTraining"),AQr=o(" (BigBird model)"),LQr=l(),r3=a("li"),Y5e=a("strong"),yQr=o("electra"),xQr=o(" \u2014 "),coe=a("a"),$Qr=o("FlaxElectraForPreTraining"),kQr=o(" (ELECTRA model)"),SQr=l(),t3=a("li"),K5e=a("strong"),RQr=o("longt5"),PQr=o(" \u2014 "),foe=a("a"),BQr=o("FlaxLongT5ForConditionalGeneration"),IQr=o(" (LongT5 model)"),NQr=l(),a3=a("li"),Z5e=a("strong"),qQr=o("mbart"),jQr=o(" \u2014 "),moe=a("a"),DQr=o("FlaxMBartForConditionalGeneration"),GQr=o(" (mBART model)"),OQr=l(),n3=a("li"),e3e=a("strong"),VQr=o("mt5"),XQr=o(" \u2014 "),goe=a("a"),zQr=o("FlaxMT5ForConditionalGeneration"),QQr=o(" (MT5 model)"),WQr=l(),s3=a("li"),o3e=a("strong"),HQr=o("roberta"),UQr=o(" \u2014 "),hoe=a("a"),JQr=o("FlaxRobertaForMaskedLM"),YQr=o(" (RoBERTa model)"),KQr=l(),l3=a("li"),r3e=a("strong"),ZQr=o("roformer"),eWr=o(" \u2014 "),poe=a("a"),oWr=o("FlaxRoFormerForMaskedLM"),rWr=o(" (RoFormer model)"),tWr=l(),i3=a("li"),t3e=a("strong"),aWr=o("t5"),nWr=o(" \u2014 "),_oe=a("a"),sWr=o("FlaxT5ForConditionalGeneration"),lWr=o(" (T5 model)"),iWr=l(),d3=a("li"),a3e=a("strong"),dWr=o("wav2vec2"),cWr=o(" \u2014 "),uoe=a("a"),fWr=o("FlaxWav2Vec2ForPreTraining"),mWr=o(" (Wav2Vec2 model)"),gWr=l(),c3=a("li"),n3e=a("strong"),hWr=o("xlm-roberta"),pWr=o(" \u2014 "),boe=a("a"),_Wr=o("FlaxXLMRobertaForMaskedLM"),uWr=o(" (XLM-RoBERTa model)"),bWr=l(),F(f3.$$.fragment),TQe=l(),af=a("h2"),m3=a("a"),s3e=a("span"),F(S$.$$.fragment),vWr=l(),l3e=a("span"),FWr=o("FlaxAutoModelForMaskedLM"),MQe=l(),br=a("div"),F(R$.$$.fragment),TWr=l(),nf=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),voe=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),Foe=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),P$=a("p"),yWr=o("This class cannot be instantiated directly using "),i3e=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Jt=a("div"),F(B$.$$.fragment),SWr=l(),d3e=a("p"),RWr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PWr=l(),sf=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),c3e=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(g3.$$.fragment),GWr=l(),Qr=a("div"),F(I$.$$.fragment),OWr=l(),f3e=a("p"),VWr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XWr=l(),wn=a("p"),zWr=o("The model class to instantiate is selected based on the "),m3e=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),g3e=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),$e=a("ul"),h3=a("li"),p3e=a("strong"),ZWr=o("albert"),eHr=o(" \u2014 "),Moe=a("a"),oHr=o("FlaxAlbertForMaskedLM"),rHr=o(" (ALBERT model)"),tHr=l(),p3=a("li"),_3e=a("strong"),aHr=o("bart"),nHr=o(" \u2014 "),Eoe=a("a"),sHr=o("FlaxBartForConditionalGeneration"),lHr=o(" (BART model)"),iHr=l(),_3=a("li"),u3e=a("strong"),dHr=o("bert"),cHr=o(" \u2014 "),Coe=a("a"),fHr=o("FlaxBertForMaskedLM"),mHr=o(" (BERT model)"),gHr=l(),u3=a("li"),b3e=a("strong"),hHr=o("big_bird"),pHr=o(" \u2014 "),woe=a("a"),_Hr=o("FlaxBigBirdForMaskedLM"),uHr=o(" (BigBird model)"),bHr=l(),b3=a("li"),v3e=a("strong"),vHr=o("distilbert"),FHr=o(" \u2014 "),Aoe=a("a"),THr=o("FlaxDistilBertForMaskedLM"),MHr=o(" (DistilBERT model)"),EHr=l(),v3=a("li"),F3e=a("strong"),CHr=o("electra"),wHr=o(" \u2014 "),Loe=a("a"),AHr=o("FlaxElectraForMaskedLM"),LHr=o(" (ELECTRA model)"),yHr=l(),F3=a("li"),T3e=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),yoe=a("a"),kHr=o("FlaxMBartForConditionalGeneration"),SHr=o(" (mBART model)"),RHr=l(),T3=a("li"),M3e=a("strong"),PHr=o("roberta"),BHr=o(" \u2014 "),xoe=a("a"),IHr=o("FlaxRobertaForMaskedLM"),NHr=o(" (RoBERTa model)"),qHr=l(),M3=a("li"),E3e=a("strong"),jHr=o("roformer"),DHr=o(" \u2014 "),$oe=a("a"),GHr=o("FlaxRoFormerForMaskedLM"),OHr=o(" (RoFormer model)"),VHr=l(),E3=a("li"),C3e=a("strong"),XHr=o("xlm-roberta"),zHr=o(" \u2014 "),koe=a("a"),QHr=o("FlaxXLMRobertaForMaskedLM"),WHr=o(" (XLM-RoBERTa model)"),HHr=l(),F(C3.$$.fragment),EQe=l(),lf=a("h2"),w3=a("a"),w3e=a("span"),F(N$.$$.fragment),UHr=l(),A3e=a("span"),JHr=o("FlaxAutoModelForSeq2SeqLM"),CQe=l(),vr=a("div"),F(q$.$$.fragment),YHr=l(),df=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Soe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),Roe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),j$=a("p"),aUr=o("This class cannot be instantiated directly using "),L3e=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Yt=a("div"),F(D$.$$.fragment),iUr=l(),y3e=a("p"),dUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cUr=l(),cf=a("p"),fUr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),mUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=a("a"),hUr=o("from_pretrained()"),pUr=o(" to load the model weights."),_Ur=l(),F(A3.$$.fragment),uUr=l(),Wr=a("div"),F(G$.$$.fragment),bUr=l(),$3e=a("p"),vUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FUr=l(),An=a("p"),TUr=o("The model class to instantiate is selected based on the "),k3e=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),ke=a("ul"),L3=a("li"),P3e=a("strong"),xUr=o("bart"),$Ur=o(" \u2014 "),Boe=a("a"),kUr=o("FlaxBartForConditionalGeneration"),SUr=o(" (BART model)"),RUr=l(),y3=a("li"),B3e=a("strong"),PUr=o("blenderbot"),BUr=o(" \u2014 "),Ioe=a("a"),IUr=o("FlaxBlenderbotForConditionalGeneration"),NUr=o(" (Blenderbot model)"),qUr=l(),x3=a("li"),I3e=a("strong"),jUr=o("blenderbot-small"),DUr=o(" \u2014 "),Noe=a("a"),GUr=o("FlaxBlenderbotSmallForConditionalGeneration"),OUr=o(" (BlenderbotSmall model)"),VUr=l(),$3=a("li"),N3e=a("strong"),XUr=o("encoder-decoder"),zUr=o(" \u2014 "),qoe=a("a"),QUr=o("FlaxEncoderDecoderModel"),WUr=o(" (Encoder decoder model)"),HUr=l(),k3=a("li"),q3e=a("strong"),UUr=o("longt5"),JUr=o(" \u2014 "),joe=a("a"),YUr=o("FlaxLongT5ForConditionalGeneration"),KUr=o(" (LongT5 model)"),ZUr=l(),S3=a("li"),j3e=a("strong"),eJr=o("marian"),oJr=o(" \u2014 "),Doe=a("a"),rJr=o("FlaxMarianMTModel"),tJr=o(" (Marian model)"),aJr=l(),R3=a("li"),D3e=a("strong"),nJr=o("mbart"),sJr=o(" \u2014 "),Goe=a("a"),lJr=o("FlaxMBartForConditionalGeneration"),iJr=o(" (mBART model)"),dJr=l(),P3=a("li"),G3e=a("strong"),cJr=o("mt5"),fJr=o(" \u2014 "),Ooe=a("a"),mJr=o("FlaxMT5ForConditionalGeneration"),gJr=o(" (MT5 model)"),hJr=l(),B3=a("li"),O3e=a("strong"),pJr=o("pegasus"),_Jr=o(" \u2014 "),Voe=a("a"),uJr=o("FlaxPegasusForConditionalGeneration"),bJr=o(" (Pegasus model)"),vJr=l(),I3=a("li"),V3e=a("strong"),FJr=o("t5"),TJr=o(" \u2014 "),Xoe=a("a"),MJr=o("FlaxT5ForConditionalGeneration"),EJr=o(" (T5 model)"),CJr=l(),F(N3.$$.fragment),wQe=l(),ff=a("h2"),q3=a("a"),X3e=a("span"),F(O$.$$.fragment),wJr=l(),z3e=a("span"),AJr=o("FlaxAutoModelForSequenceClassification"),AQe=l(),Fr=a("div"),F(V$.$$.fragment),LJr=l(),mf=a("p"),yJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zoe=a("a"),xJr=o("from_pretrained()"),$Jr=o(" class method or the "),Qoe=a("a"),kJr=o("from_config()"),SJr=o(` class
method.`),RJr=l(),X$=a("p"),PJr=o("This class cannot be instantiated directly using "),Q3e=a("code"),BJr=o("__init__()"),IJr=o(" (throws an error)."),NJr=l(),Kt=a("div"),F(z$.$$.fragment),qJr=l(),W3e=a("p"),jJr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DJr=l(),gf=a("p"),GJr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),OJr=o("not"),VJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=a("a"),XJr=o("from_pretrained()"),zJr=o(" to load the model weights."),QJr=l(),F(j3.$$.fragment),WJr=l(),Hr=a("div"),F(Q$.$$.fragment),HJr=l(),U3e=a("p"),UJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JJr=l(),Ln=a("p"),YJr=o("The model class to instantiate is selected based on the "),J3e=a("code"),KJr=o("model_type"),ZJr=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),eYr=o("pretrained_model_name_or_path"),oYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),rYr=o("pretrained_model_name_or_path"),tYr=o(":"),aYr=l(),Se=a("ul"),D3=a("li"),Z3e=a("strong"),nYr=o("albert"),sYr=o(" \u2014 "),Hoe=a("a"),lYr=o("FlaxAlbertForSequenceClassification"),iYr=o(" (ALBERT model)"),dYr=l(),G3=a("li"),e0e=a("strong"),cYr=o("bart"),fYr=o(" \u2014 "),Uoe=a("a"),mYr=o("FlaxBartForSequenceClassification"),gYr=o(" (BART model)"),hYr=l(),O3=a("li"),o0e=a("strong"),pYr=o("bert"),_Yr=o(" \u2014 "),Joe=a("a"),uYr=o("FlaxBertForSequenceClassification"),bYr=o(" (BERT model)"),vYr=l(),V3=a("li"),r0e=a("strong"),FYr=o("big_bird"),TYr=o(" \u2014 "),Yoe=a("a"),MYr=o("FlaxBigBirdForSequenceClassification"),EYr=o(" (BigBird model)"),CYr=l(),X3=a("li"),t0e=a("strong"),wYr=o("distilbert"),AYr=o(" \u2014 "),Koe=a("a"),LYr=o("FlaxDistilBertForSequenceClassification"),yYr=o(" (DistilBERT model)"),xYr=l(),z3=a("li"),a0e=a("strong"),$Yr=o("electra"),kYr=o(" \u2014 "),Zoe=a("a"),SYr=o("FlaxElectraForSequenceClassification"),RYr=o(" (ELECTRA model)"),PYr=l(),Q3=a("li"),n0e=a("strong"),BYr=o("mbart"),IYr=o(" \u2014 "),ere=a("a"),NYr=o("FlaxMBartForSequenceClassification"),qYr=o(" (mBART model)"),jYr=l(),W3=a("li"),s0e=a("strong"),DYr=o("roberta"),GYr=o(" \u2014 "),ore=a("a"),OYr=o("FlaxRobertaForSequenceClassification"),VYr=o(" (RoBERTa model)"),XYr=l(),H3=a("li"),l0e=a("strong"),zYr=o("roformer"),QYr=o(" \u2014 "),rre=a("a"),WYr=o("FlaxRoFormerForSequenceClassification"),HYr=o(" (RoFormer model)"),UYr=l(),U3=a("li"),i0e=a("strong"),JYr=o("xlm-roberta"),YYr=o(" \u2014 "),tre=a("a"),KYr=o("FlaxXLMRobertaForSequenceClassification"),ZYr=o(" (XLM-RoBERTa model)"),eKr=l(),F(J3.$$.fragment),LQe=l(),hf=a("h2"),Y3=a("a"),d0e=a("span"),F(W$.$$.fragment),oKr=l(),c0e=a("span"),rKr=o("FlaxAutoModelForQuestionAnswering"),yQe=l(),Tr=a("div"),F(H$.$$.fragment),tKr=l(),pf=a("p"),aKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),are=a("a"),nKr=o("from_pretrained()"),sKr=o(" class method or the "),nre=a("a"),lKr=o("from_config()"),iKr=o(` class
method.`),dKr=l(),U$=a("p"),cKr=o("This class cannot be instantiated directly using "),f0e=a("code"),fKr=o("__init__()"),mKr=o(" (throws an error)."),gKr=l(),Zt=a("div"),F(J$.$$.fragment),hKr=l(),m0e=a("p"),pKr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Kr=l(),_f=a("p"),uKr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),bKr=o("not"),vKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),FKr=o("from_pretrained()"),TKr=o(" to load the model weights."),MKr=l(),F(K3.$$.fragment),EKr=l(),Ur=a("div"),F(Y$.$$.fragment),CKr=l(),h0e=a("p"),wKr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AKr=l(),yn=a("p"),LKr=o("The model class to instantiate is selected based on the "),p0e=a("code"),yKr=o("model_type"),xKr=o(` property of the config object (either
passed as an argument or loaded from `),_0e=a("code"),$Kr=o("pretrained_model_name_or_path"),kKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),SKr=o("pretrained_model_name_or_path"),RKr=o(":"),PKr=l(),Re=a("ul"),Z3=a("li"),b0e=a("strong"),BKr=o("albert"),IKr=o(" \u2014 "),lre=a("a"),NKr=o("FlaxAlbertForQuestionAnswering"),qKr=o(" (ALBERT model)"),jKr=l(),e0=a("li"),v0e=a("strong"),DKr=o("bart"),GKr=o(" \u2014 "),ire=a("a"),OKr=o("FlaxBartForQuestionAnswering"),VKr=o(" (BART model)"),XKr=l(),o0=a("li"),F0e=a("strong"),zKr=o("bert"),QKr=o(" \u2014 "),dre=a("a"),WKr=o("FlaxBertForQuestionAnswering"),HKr=o(" (BERT model)"),UKr=l(),r0=a("li"),T0e=a("strong"),JKr=o("big_bird"),YKr=o(" \u2014 "),cre=a("a"),KKr=o("FlaxBigBirdForQuestionAnswering"),ZKr=o(" (BigBird model)"),eZr=l(),t0=a("li"),M0e=a("strong"),oZr=o("distilbert"),rZr=o(" \u2014 "),fre=a("a"),tZr=o("FlaxDistilBertForQuestionAnswering"),aZr=o(" (DistilBERT model)"),nZr=l(),a0=a("li"),E0e=a("strong"),sZr=o("electra"),lZr=o(" \u2014 "),mre=a("a"),iZr=o("FlaxElectraForQuestionAnswering"),dZr=o(" (ELECTRA model)"),cZr=l(),n0=a("li"),C0e=a("strong"),fZr=o("mbart"),mZr=o(" \u2014 "),gre=a("a"),gZr=o("FlaxMBartForQuestionAnswering"),hZr=o(" (mBART model)"),pZr=l(),s0=a("li"),w0e=a("strong"),_Zr=o("roberta"),uZr=o(" \u2014 "),hre=a("a"),bZr=o("FlaxRobertaForQuestionAnswering"),vZr=o(" (RoBERTa model)"),FZr=l(),l0=a("li"),A0e=a("strong"),TZr=o("roformer"),MZr=o(" \u2014 "),pre=a("a"),EZr=o("FlaxRoFormerForQuestionAnswering"),CZr=o(" (RoFormer model)"),wZr=l(),i0=a("li"),L0e=a("strong"),AZr=o("xlm-roberta"),LZr=o(" \u2014 "),_re=a("a"),yZr=o("FlaxXLMRobertaForQuestionAnswering"),xZr=o(" (XLM-RoBERTa model)"),$Zr=l(),F(d0.$$.fragment),xQe=l(),uf=a("h2"),c0=a("a"),y0e=a("span"),F(K$.$$.fragment),kZr=l(),x0e=a("span"),SZr=o("FlaxAutoModelForTokenClassification"),$Qe=l(),Mr=a("div"),F(Z$.$$.fragment),RZr=l(),bf=a("p"),PZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ure=a("a"),BZr=o("from_pretrained()"),IZr=o(" class method or the "),bre=a("a"),NZr=o("from_config()"),qZr=o(` class
method.`),jZr=l(),ek=a("p"),DZr=o("This class cannot be instantiated directly using "),$0e=a("code"),GZr=o("__init__()"),OZr=o(" (throws an error)."),VZr=l(),ea=a("div"),F(ok.$$.fragment),XZr=l(),k0e=a("p"),zZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QZr=l(),vf=a("p"),WZr=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),HZr=o("not"),UZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),JZr=o("from_pretrained()"),YZr=o(" to load the model weights."),KZr=l(),F(f0.$$.fragment),ZZr=l(),Jr=a("div"),F(rk.$$.fragment),eet=l(),R0e=a("p"),oet=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ret=l(),xn=a("p"),tet=o("The model class to instantiate is selected based on the "),P0e=a("code"),aet=o("model_type"),net=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),set=o("pretrained_model_name_or_path"),iet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),det=o("pretrained_model_name_or_path"),cet=o(":"),fet=l(),Ve=a("ul"),m0=a("li"),N0e=a("strong"),met=o("albert"),get=o(" \u2014 "),Fre=a("a"),het=o("FlaxAlbertForTokenClassification"),pet=o(" (ALBERT model)"),_et=l(),g0=a("li"),q0e=a("strong"),uet=o("bert"),bet=o(" \u2014 "),Tre=a("a"),vet=o("FlaxBertForTokenClassification"),Fet=o(" (BERT model)"),Tet=l(),h0=a("li"),j0e=a("strong"),Met=o("big_bird"),Eet=o(" \u2014 "),Mre=a("a"),Cet=o("FlaxBigBirdForTokenClassification"),wet=o(" (BigBird model)"),Aet=l(),p0=a("li"),D0e=a("strong"),Let=o("distilbert"),yet=o(" \u2014 "),Ere=a("a"),xet=o("FlaxDistilBertForTokenClassification"),$et=o(" (DistilBERT model)"),ket=l(),_0=a("li"),G0e=a("strong"),Set=o("electra"),Ret=o(" \u2014 "),Cre=a("a"),Pet=o("FlaxElectraForTokenClassification"),Bet=o(" (ELECTRA model)"),Iet=l(),u0=a("li"),O0e=a("strong"),Net=o("roberta"),qet=o(" \u2014 "),wre=a("a"),jet=o("FlaxRobertaForTokenClassification"),Det=o(" (RoBERTa model)"),Get=l(),b0=a("li"),V0e=a("strong"),Oet=o("roformer"),Vet=o(" \u2014 "),Are=a("a"),Xet=o("FlaxRoFormerForTokenClassification"),zet=o(" (RoFormer model)"),Qet=l(),v0=a("li"),X0e=a("strong"),Wet=o("xlm-roberta"),Het=o(" \u2014 "),Lre=a("a"),Uet=o("FlaxXLMRobertaForTokenClassification"),Jet=o(" (XLM-RoBERTa model)"),Yet=l(),F(F0.$$.fragment),kQe=l(),Ff=a("h2"),T0=a("a"),z0e=a("span"),F(tk.$$.fragment),Ket=l(),Q0e=a("span"),Zet=o("FlaxAutoModelForMultipleChoice"),SQe=l(),Er=a("div"),F(ak.$$.fragment),eot=l(),Tf=a("p"),oot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yre=a("a"),rot=o("from_pretrained()"),tot=o(" class method or the "),xre=a("a"),aot=o("from_config()"),not=o(` class
method.`),sot=l(),nk=a("p"),lot=o("This class cannot be instantiated directly using "),W0e=a("code"),iot=o("__init__()"),dot=o(" (throws an error)."),cot=l(),oa=a("div"),F(sk.$$.fragment),fot=l(),H0e=a("p"),mot=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),got=l(),Mf=a("p"),hot=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),pot=o("not"),_ot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=a("a"),uot=o("from_pretrained()"),bot=o(" to load the model weights."),vot=l(),F(M0.$$.fragment),Fot=l(),Yr=a("div"),F(lk.$$.fragment),Tot=l(),J0e=a("p"),Mot=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Eot=l(),$n=a("p"),Cot=o("The model class to instantiate is selected based on the "),Y0e=a("code"),wot=o("model_type"),Aot=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),Lot=o("pretrained_model_name_or_path"),yot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),xot=o("pretrained_model_name_or_path"),$ot=o(":"),kot=l(),Xe=a("ul"),E0=a("li"),ewe=a("strong"),Sot=o("albert"),Rot=o(" \u2014 "),kre=a("a"),Pot=o("FlaxAlbertForMultipleChoice"),Bot=o(" (ALBERT model)"),Iot=l(),C0=a("li"),owe=a("strong"),Not=o("bert"),qot=o(" \u2014 "),Sre=a("a"),jot=o("FlaxBertForMultipleChoice"),Dot=o(" (BERT model)"),Got=l(),w0=a("li"),rwe=a("strong"),Oot=o("big_bird"),Vot=o(" \u2014 "),Rre=a("a"),Xot=o("FlaxBigBirdForMultipleChoice"),zot=o(" (BigBird model)"),Qot=l(),A0=a("li"),twe=a("strong"),Wot=o("distilbert"),Hot=o(" \u2014 "),Pre=a("a"),Uot=o("FlaxDistilBertForMultipleChoice"),Jot=o(" (DistilBERT model)"),Yot=l(),L0=a("li"),awe=a("strong"),Kot=o("electra"),Zot=o(" \u2014 "),Bre=a("a"),ert=o("FlaxElectraForMultipleChoice"),ort=o(" (ELECTRA model)"),rrt=l(),y0=a("li"),nwe=a("strong"),trt=o("roberta"),art=o(" \u2014 "),Ire=a("a"),nrt=o("FlaxRobertaForMultipleChoice"),srt=o(" (RoBERTa model)"),lrt=l(),x0=a("li"),swe=a("strong"),irt=o("roformer"),drt=o(" \u2014 "),Nre=a("a"),crt=o("FlaxRoFormerForMultipleChoice"),frt=o(" (RoFormer model)"),mrt=l(),$0=a("li"),lwe=a("strong"),grt=o("xlm-roberta"),hrt=o(" \u2014 "),qre=a("a"),prt=o("FlaxXLMRobertaForMultipleChoice"),_rt=o(" (XLM-RoBERTa model)"),urt=l(),F(k0.$$.fragment),RQe=l(),Ef=a("h2"),S0=a("a"),iwe=a("span"),F(ik.$$.fragment),brt=l(),dwe=a("span"),vrt=o("FlaxAutoModelForNextSentencePrediction"),PQe=l(),Cr=a("div"),F(dk.$$.fragment),Frt=l(),Cf=a("p"),Trt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jre=a("a"),Mrt=o("from_pretrained()"),Ert=o(" class method or the "),Dre=a("a"),Crt=o("from_config()"),wrt=o(` class
method.`),Art=l(),ck=a("p"),Lrt=o("This class cannot be instantiated directly using "),cwe=a("code"),yrt=o("__init__()"),xrt=o(" (throws an error)."),$rt=l(),ra=a("div"),F(fk.$$.fragment),krt=l(),fwe=a("p"),Srt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rrt=l(),wf=a("p"),Prt=o(`Note:
Loading a model from its configuration file does `),mwe=a("strong"),Brt=o("not"),Irt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gre=a("a"),Nrt=o("from_pretrained()"),qrt=o(" to load the model weights."),jrt=l(),F(R0.$$.fragment),Drt=l(),Kr=a("div"),F(mk.$$.fragment),Grt=l(),gwe=a("p"),Ort=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vrt=l(),kn=a("p"),Xrt=o("The model class to instantiate is selected based on the "),hwe=a("code"),zrt=o("model_type"),Qrt=o(` property of the config object (either
passed as an argument or loaded from `),pwe=a("code"),Wrt=o("pretrained_model_name_or_path"),Hrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=a("code"),Urt=o("pretrained_model_name_or_path"),Jrt=o(":"),Yrt=l(),uwe=a("ul"),P0=a("li"),bwe=a("strong"),Krt=o("bert"),Zrt=o(" \u2014 "),Ore=a("a"),ett=o("FlaxBertForNextSentencePrediction"),ott=o(" (BERT model)"),rtt=l(),F(B0.$$.fragment),BQe=l(),Af=a("h2"),I0=a("a"),vwe=a("span"),F(gk.$$.fragment),ttt=l(),Fwe=a("span"),att=o("FlaxAutoModelForImageClassification"),IQe=l(),wr=a("div"),F(hk.$$.fragment),ntt=l(),Lf=a("p"),stt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vre=a("a"),ltt=o("from_pretrained()"),itt=o(" class method or the "),Xre=a("a"),dtt=o("from_config()"),ctt=o(` class
method.`),ftt=l(),pk=a("p"),mtt=o("This class cannot be instantiated directly using "),Twe=a("code"),gtt=o("__init__()"),htt=o(" (throws an error)."),ptt=l(),ta=a("div"),F(_k.$$.fragment),_tt=l(),Mwe=a("p"),utt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),btt=l(),yf=a("p"),vtt=o(`Note:
Loading a model from its configuration file does `),Ewe=a("strong"),Ftt=o("not"),Ttt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=a("a"),Mtt=o("from_pretrained()"),Ett=o(" to load the model weights."),Ctt=l(),F(N0.$$.fragment),wtt=l(),Zr=a("div"),F(uk.$$.fragment),Att=l(),Cwe=a("p"),Ltt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ytt=l(),Sn=a("p"),xtt=o("The model class to instantiate is selected based on the "),wwe=a("code"),$tt=o("model_type"),ktt=o(` property of the config object (either
passed as an argument or loaded from `),Awe=a("code"),Stt=o("pretrained_model_name_or_path"),Rtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lwe=a("code"),Ptt=o("pretrained_model_name_or_path"),Btt=o(":"),Itt=l(),bk=a("ul"),q0=a("li"),ywe=a("strong"),Ntt=o("beit"),qtt=o(" \u2014 "),Qre=a("a"),jtt=o("FlaxBeitForImageClassification"),Dtt=o(" (BEiT model)"),Gtt=l(),j0=a("li"),xwe=a("strong"),Ott=o("vit"),Vtt=o(" \u2014 "),Wre=a("a"),Xtt=o("FlaxViTForImageClassification"),ztt=o(" (ViT model)"),Qtt=l(),F(D0.$$.fragment),NQe=l(),xf=a("h2"),G0=a("a"),$we=a("span"),F(vk.$$.fragment),Wtt=l(),kwe=a("span"),Htt=o("FlaxAutoModelForVision2Seq"),qQe=l(),Ar=a("div"),F(Fk.$$.fragment),Utt=l(),$f=a("p"),Jtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hre=a("a"),Ytt=o("from_pretrained()"),Ktt=o(" class method or the "),Ure=a("a"),Ztt=o("from_config()"),eat=o(` class
method.`),oat=l(),Tk=a("p"),rat=o("This class cannot be instantiated directly using "),Swe=a("code"),tat=o("__init__()"),aat=o(" (throws an error)."),nat=l(),aa=a("div"),F(Mk.$$.fragment),sat=l(),Rwe=a("p"),lat=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iat=l(),kf=a("p"),dat=o(`Note:
Loading a model from its configuration file does `),Pwe=a("strong"),cat=o("not"),fat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),mat=o("from_pretrained()"),gat=o(" to load the model weights."),hat=l(),F(O0.$$.fragment),pat=l(),et=a("div"),F(Ek.$$.fragment),_at=l(),Bwe=a("p"),uat=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bat=l(),Rn=a("p"),vat=o("The model class to instantiate is selected based on the "),Iwe=a("code"),Fat=o("model_type"),Tat=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),Mat=o("pretrained_model_name_or_path"),Eat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=a("code"),Cat=o("pretrained_model_name_or_path"),wat=o(":"),Aat=l(),jwe=a("ul"),V0=a("li"),Dwe=a("strong"),Lat=o("vision-encoder-decoder"),yat=o(" \u2014 "),Yre=a("a"),xat=o("FlaxVisionEncoderDecoderModel"),$at=o(" (Vision Encoder decoder model)"),kat=l(),F(X0.$$.fragment),this.h()},l(f){const u=yHt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ck=s(p);m=n(Ck,"A",{id:!0,class:!0,href:!0});var Gwe=s(m);_=n(Gwe,"SPAN",{});var Owe=s(_);T(d.$$.fragment,Owe),Owe.forEach(t),Gwe.forEach(t),h=i(Ck),Co=n(Ck,"SPAN",{});var Vwe=s(Co);xi=r(Vwe,"Auto Classes"),Vwe.forEach(t),Ck.forEach(t),Bf=i(f),lt=n(f,"P",{});var wk=s(lt);$i=r(wk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(wk,"CODE",{});var Xwe=s(ki);cL=r(Xwe,"from_pretrained()"),Xwe.forEach(t),If=r(wk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wk.forEach(t),Oe=i(f),We=n(f,"P",{});var Pn=s(We);Si=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var zwe=s(Bn);fL=r(zwe,"AutoConfig"),zwe.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var Qwe=s(Nn);mL=r(Qwe,"AutoModel"),Qwe.forEach(t),Ri=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var Wwe=s(qn);gL=r(Wwe,"AutoTokenizer"),Wwe.forEach(t),Pi=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),Nf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Ak=s(Ae);QS=r(Ak,"will create a model that is an instance of "),Bi=n(Ak,"A",{href:!0});var Hwe=s(Bi);WS=r(Hwe,"BertModel"),Hwe.forEach(t),HS=r(Ak,"."),Ak.forEach(t),wo=i(f),Ra=n(f,"P",{});var Lk=s(Ra);US=r(Lk,"There is one class of "),qf=n(Lk,"CODE",{});var Uwe=s(qf);JS=r(Uwe,"AutoModel"),Uwe.forEach(t),UHe=r(Lk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Lk.forEach(t),PXe=i(f),Ii=n(f,"H2",{class:!0});var yk=s(Ii);jf=n(yk,"A",{id:!0,class:!0,href:!0});var Jwe=s(jf);zae=n(Jwe,"SPAN",{});var Ywe=s(zae);T(hL.$$.fragment,Ywe),Ywe.forEach(t),Jwe.forEach(t),JHe=i(yk),Qae=n(yk,"SPAN",{});var Kwe=s(Qae);YHe=r(Kwe,"Extending the Auto Classes"),Kwe.forEach(t),yk.forEach(t),BXe=i(f),jn=n(f,"P",{});var Sf=s(jn);KHe=r(Sf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wae=n(Sf,"CODE",{});var Zwe=s(Wae);ZHe=r(Zwe,"NewModel"),Zwe.forEach(t),eUe=r(Sf,", make sure you have a "),Hae=n(Sf,"CODE",{});var eAe=s(Hae);oUe=r(eAe,"NewModelConfig"),eAe.forEach(t),rUe=r(Sf,` then you can add those to the auto
classes like this:`),Sf.forEach(t),IXe=i(f),T(pL.$$.fragment,f),NXe=i(f),YS=n(f,"P",{});var oAe=s(YS);tUe=r(oAe,"You will then be able to use the auto classes like you would usually do!"),oAe.forEach(t),qXe=i(f),T(Df.$$.fragment,f),jXe=i(f),Ni=n(f,"H2",{class:!0});var xk=s(Ni);Gf=n(xk,"A",{id:!0,class:!0,href:!0});var rAe=s(Gf);Uae=n(rAe,"SPAN",{});var tAe=s(Uae);T(_L.$$.fragment,tAe),tAe.forEach(t),rAe.forEach(t),aUe=i(xk),Jae=n(xk,"SPAN",{});var aAe=s(Jae);nUe=r(aAe,"AutoConfig"),aAe.forEach(t),xk.forEach(t),DXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(uL.$$.fragment,nt),sUe=i(nt),bL=n(nt,"P",{});var $k=s(bL);lUe=r($k,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),KS=n($k,"A",{href:!0});var nAe=s(KS);iUe=r(nAe,"from_pretrained()"),nAe.forEach(t),dUe=r($k," class method."),$k.forEach(t),cUe=i(nt),vL=n(nt,"P",{});var kk=s(vL);fUe=r(kk,"This class cannot be instantiated directly using "),Yae=n(kk,"CODE",{});var sAe=s(Yae);mUe=r(sAe,"__init__()"),sAe.forEach(t),gUe=r(kk," (throws an error)."),kk.forEach(t),hUe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(FL.$$.fragment,st),pUe=i(st),Kae=n(st,"P",{});var lAe=s(Kae);_Ue=r(lAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),lAe.forEach(t),uUe=i(st),qi=n(st,"P",{});var Rf=s(qi);bUe=r(Rf,"The configuration class to instantiate is selected based on the "),Zae=n(Rf,"CODE",{});var iAe=s(Zae);vUe=r(iAe,"model_type"),iAe.forEach(t),FUe=r(Rf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ene=n(Rf,"CODE",{});var dAe=s(ene);TUe=r(dAe,"pretrained_model_name_or_path"),dAe.forEach(t),MUe=r(Rf,":"),Rf.forEach(t),EUe=i(st),A=n(st,"UL",{});var L=s(A);Of=n(L,"LI",{});var z0=s(Of);one=n(z0,"STRONG",{});var cAe=s(one);CUe=r(cAe,"albert"),cAe.forEach(t),wUe=r(z0," \u2014 "),ZS=n(z0,"A",{href:!0});var fAe=s(ZS);AUe=r(fAe,"AlbertConfig"),fAe.forEach(t),LUe=r(z0," (ALBERT model)"),z0.forEach(t),yUe=i(L),Vf=n(L,"LI",{});var Q0=s(Vf);rne=n(Q0,"STRONG",{});var mAe=s(rne);xUe=r(mAe,"bart"),mAe.forEach(t),$Ue=r(Q0," \u2014 "),eR=n(Q0,"A",{href:!0});var gAe=s(eR);kUe=r(gAe,"BartConfig"),gAe.forEach(t),SUe=r(Q0," (BART model)"),Q0.forEach(t),RUe=i(L),Xf=n(L,"LI",{});var W0=s(Xf);tne=n(W0,"STRONG",{});var hAe=s(tne);PUe=r(hAe,"beit"),hAe.forEach(t),BUe=r(W0," \u2014 "),oR=n(W0,"A",{href:!0});var pAe=s(oR);IUe=r(pAe,"BeitConfig"),pAe.forEach(t),NUe=r(W0," (BEiT model)"),W0.forEach(t),qUe=i(L),zf=n(L,"LI",{});var H0=s(zf);ane=n(H0,"STRONG",{});var _Ae=s(ane);jUe=r(_Ae,"bert"),_Ae.forEach(t),DUe=r(H0," \u2014 "),rR=n(H0,"A",{href:!0});var uAe=s(rR);GUe=r(uAe,"BertConfig"),uAe.forEach(t),OUe=r(H0," (BERT model)"),H0.forEach(t),VUe=i(L),Qf=n(L,"LI",{});var U0=s(Qf);nne=n(U0,"STRONG",{});var bAe=s(nne);XUe=r(bAe,"bert-generation"),bAe.forEach(t),zUe=r(U0," \u2014 "),tR=n(U0,"A",{href:!0});var vAe=s(tR);QUe=r(vAe,"BertGenerationConfig"),vAe.forEach(t),WUe=r(U0," (Bert Generation model)"),U0.forEach(t),HUe=i(L),Wf=n(L,"LI",{});var J0=s(Wf);sne=n(J0,"STRONG",{});var FAe=s(sne);UUe=r(FAe,"big_bird"),FAe.forEach(t),JUe=r(J0," \u2014 "),aR=n(J0,"A",{href:!0});var TAe=s(aR);YUe=r(TAe,"BigBirdConfig"),TAe.forEach(t),KUe=r(J0," (BigBird model)"),J0.forEach(t),ZUe=i(L),Hf=n(L,"LI",{});var Y0=s(Hf);lne=n(Y0,"STRONG",{});var MAe=s(lne);eJe=r(MAe,"bigbird_pegasus"),MAe.forEach(t),oJe=r(Y0," \u2014 "),nR=n(Y0,"A",{href:!0});var EAe=s(nR);rJe=r(EAe,"BigBirdPegasusConfig"),EAe.forEach(t),tJe=r(Y0," (BigBird-Pegasus model)"),Y0.forEach(t),aJe=i(L),Uf=n(L,"LI",{});var K0=s(Uf);ine=n(K0,"STRONG",{});var CAe=s(ine);nJe=r(CAe,"blenderbot"),CAe.forEach(t),sJe=r(K0," \u2014 "),sR=n(K0,"A",{href:!0});var wAe=s(sR);lJe=r(wAe,"BlenderbotConfig"),wAe.forEach(t),iJe=r(K0," (Blenderbot model)"),K0.forEach(t),dJe=i(L),Jf=n(L,"LI",{});var Z0=s(Jf);dne=n(Z0,"STRONG",{});var AAe=s(dne);cJe=r(AAe,"blenderbot-small"),AAe.forEach(t),fJe=r(Z0," \u2014 "),lR=n(Z0,"A",{href:!0});var LAe=s(lR);mJe=r(LAe,"BlenderbotSmallConfig"),LAe.forEach(t),gJe=r(Z0," (BlenderbotSmall model)"),Z0.forEach(t),hJe=i(L),Yf=n(L,"LI",{});var ew=s(Yf);cne=n(ew,"STRONG",{});var yAe=s(cne);pJe=r(yAe,"bloom"),yAe.forEach(t),_Je=r(ew," \u2014 "),iR=n(ew,"A",{href:!0});var xAe=s(iR);uJe=r(xAe,"BloomConfig"),xAe.forEach(t),bJe=r(ew," (BLOOM model)"),ew.forEach(t),vJe=i(L),Kf=n(L,"LI",{});var ow=s(Kf);fne=n(ow,"STRONG",{});var $Ae=s(fne);FJe=r($Ae,"camembert"),$Ae.forEach(t),TJe=r(ow," \u2014 "),dR=n(ow,"A",{href:!0});var kAe=s(dR);MJe=r(kAe,"CamembertConfig"),kAe.forEach(t),EJe=r(ow," (CamemBERT model)"),ow.forEach(t),CJe=i(L),Zf=n(L,"LI",{});var rw=s(Zf);mne=n(rw,"STRONG",{});var SAe=s(mne);wJe=r(SAe,"canine"),SAe.forEach(t),AJe=r(rw," \u2014 "),cR=n(rw,"A",{href:!0});var RAe=s(cR);LJe=r(RAe,"CanineConfig"),RAe.forEach(t),yJe=r(rw," (CANINE model)"),rw.forEach(t),xJe=i(L),em=n(L,"LI",{});var tw=s(em);gne=n(tw,"STRONG",{});var PAe=s(gne);$Je=r(PAe,"clip"),PAe.forEach(t),kJe=r(tw," \u2014 "),fR=n(tw,"A",{href:!0});var BAe=s(fR);SJe=r(BAe,"CLIPConfig"),BAe.forEach(t),RJe=r(tw," (CLIP model)"),tw.forEach(t),PJe=i(L),om=n(L,"LI",{});var aw=s(om);hne=n(aw,"STRONG",{});var IAe=s(hne);BJe=r(IAe,"codegen"),IAe.forEach(t),IJe=r(aw," \u2014 "),mR=n(aw,"A",{href:!0});var NAe=s(mR);NJe=r(NAe,"CodeGenConfig"),NAe.forEach(t),qJe=r(aw," (CodeGen model)"),aw.forEach(t),jJe=i(L),rm=n(L,"LI",{});var nw=s(rm);pne=n(nw,"STRONG",{});var qAe=s(pne);DJe=r(qAe,"convbert"),qAe.forEach(t),GJe=r(nw," \u2014 "),gR=n(nw,"A",{href:!0});var jAe=s(gR);OJe=r(jAe,"ConvBertConfig"),jAe.forEach(t),VJe=r(nw," (ConvBERT model)"),nw.forEach(t),XJe=i(L),tm=n(L,"LI",{});var sw=s(tm);_ne=n(sw,"STRONG",{});var DAe=s(_ne);zJe=r(DAe,"convnext"),DAe.forEach(t),QJe=r(sw," \u2014 "),hR=n(sw,"A",{href:!0});var GAe=s(hR);WJe=r(GAe,"ConvNextConfig"),GAe.forEach(t),HJe=r(sw," (ConvNeXT model)"),sw.forEach(t),UJe=i(L),am=n(L,"LI",{});var lw=s(am);une=n(lw,"STRONG",{});var OAe=s(une);JJe=r(OAe,"ctrl"),OAe.forEach(t),YJe=r(lw," \u2014 "),pR=n(lw,"A",{href:!0});var VAe=s(pR);KJe=r(VAe,"CTRLConfig"),VAe.forEach(t),ZJe=r(lw," (CTRL model)"),lw.forEach(t),eYe=i(L),nm=n(L,"LI",{});var iw=s(nm);bne=n(iw,"STRONG",{});var XAe=s(bne);oYe=r(XAe,"cvt"),XAe.forEach(t),rYe=r(iw," \u2014 "),_R=n(iw,"A",{href:!0});var zAe=s(_R);tYe=r(zAe,"CvtConfig"),zAe.forEach(t),aYe=r(iw," (CvT model)"),iw.forEach(t),nYe=i(L),sm=n(L,"LI",{});var dw=s(sm);vne=n(dw,"STRONG",{});var QAe=s(vne);sYe=r(QAe,"data2vec-audio"),QAe.forEach(t),lYe=r(dw," \u2014 "),uR=n(dw,"A",{href:!0});var WAe=s(uR);iYe=r(WAe,"Data2VecAudioConfig"),WAe.forEach(t),dYe=r(dw," (Data2VecAudio model)"),dw.forEach(t),cYe=i(L),lm=n(L,"LI",{});var cw=s(lm);Fne=n(cw,"STRONG",{});var HAe=s(Fne);fYe=r(HAe,"data2vec-text"),HAe.forEach(t),mYe=r(cw," \u2014 "),bR=n(cw,"A",{href:!0});var UAe=s(bR);gYe=r(UAe,"Data2VecTextConfig"),UAe.forEach(t),hYe=r(cw," (Data2VecText model)"),cw.forEach(t),pYe=i(L),im=n(L,"LI",{});var fw=s(im);Tne=n(fw,"STRONG",{});var JAe=s(Tne);_Ye=r(JAe,"data2vec-vision"),JAe.forEach(t),uYe=r(fw," \u2014 "),vR=n(fw,"A",{href:!0});var YAe=s(vR);bYe=r(YAe,"Data2VecVisionConfig"),YAe.forEach(t),vYe=r(fw," (Data2VecVision model)"),fw.forEach(t),FYe=i(L),dm=n(L,"LI",{});var mw=s(dm);Mne=n(mw,"STRONG",{});var KAe=s(Mne);TYe=r(KAe,"deberta"),KAe.forEach(t),MYe=r(mw," \u2014 "),FR=n(mw,"A",{href:!0});var ZAe=s(FR);EYe=r(ZAe,"DebertaConfig"),ZAe.forEach(t),CYe=r(mw," (DeBERTa model)"),mw.forEach(t),wYe=i(L),cm=n(L,"LI",{});var gw=s(cm);Ene=n(gw,"STRONG",{});var eLe=s(Ene);AYe=r(eLe,"deberta-v2"),eLe.forEach(t),LYe=r(gw," \u2014 "),TR=n(gw,"A",{href:!0});var oLe=s(TR);yYe=r(oLe,"DebertaV2Config"),oLe.forEach(t),xYe=r(gw," (DeBERTa-v2 model)"),gw.forEach(t),$Ye=i(L),fm=n(L,"LI",{});var hw=s(fm);Cne=n(hw,"STRONG",{});var Rat=s(Cne);kYe=r(Rat,"decision_transformer"),Rat.forEach(t),SYe=r(hw," \u2014 "),MR=n(hw,"A",{href:!0});var Pat=s(MR);RYe=r(Pat,"DecisionTransformerConfig"),Pat.forEach(t),PYe=r(hw," (Decision Transformer model)"),hw.forEach(t),BYe=i(L),mm=n(L,"LI",{});var rLe=s(mm);wne=n(rLe,"STRONG",{});var Bat=s(wne);IYe=r(Bat,"deit"),Bat.forEach(t),NYe=r(rLe," \u2014 "),ER=n(rLe,"A",{href:!0});var Iat=s(ER);qYe=r(Iat,"DeiTConfig"),Iat.forEach(t),jYe=r(rLe," (DeiT model)"),rLe.forEach(t),DYe=i(L),gm=n(L,"LI",{});var tLe=s(gm);Ane=n(tLe,"STRONG",{});var Nat=s(Ane);GYe=r(Nat,"detr"),Nat.forEach(t),OYe=r(tLe," \u2014 "),CR=n(tLe,"A",{href:!0});var qat=s(CR);VYe=r(qat,"DetrConfig"),qat.forEach(t),XYe=r(tLe," (DETR model)"),tLe.forEach(t),zYe=i(L),hm=n(L,"LI",{});var aLe=s(hm);Lne=n(aLe,"STRONG",{});var jat=s(Lne);QYe=r(jat,"distilbert"),jat.forEach(t),WYe=r(aLe," \u2014 "),wR=n(aLe,"A",{href:!0});var Dat=s(wR);HYe=r(Dat,"DistilBertConfig"),Dat.forEach(t),UYe=r(aLe," (DistilBERT model)"),aLe.forEach(t),JYe=i(L),pm=n(L,"LI",{});var nLe=s(pm);yne=n(nLe,"STRONG",{});var Gat=s(yne);YYe=r(Gat,"dpr"),Gat.forEach(t),KYe=r(nLe," \u2014 "),AR=n(nLe,"A",{href:!0});var Oat=s(AR);ZYe=r(Oat,"DPRConfig"),Oat.forEach(t),eKe=r(nLe," (DPR model)"),nLe.forEach(t),oKe=i(L),_m=n(L,"LI",{});var sLe=s(_m);xne=n(sLe,"STRONG",{});var Vat=s(xne);rKe=r(Vat,"dpt"),Vat.forEach(t),tKe=r(sLe," \u2014 "),LR=n(sLe,"A",{href:!0});var Xat=s(LR);aKe=r(Xat,"DPTConfig"),Xat.forEach(t),nKe=r(sLe," (DPT model)"),sLe.forEach(t),sKe=i(L),um=n(L,"LI",{});var lLe=s(um);$ne=n(lLe,"STRONG",{});var zat=s($ne);lKe=r(zat,"electra"),zat.forEach(t),iKe=r(lLe," \u2014 "),yR=n(lLe,"A",{href:!0});var Qat=s(yR);dKe=r(Qat,"ElectraConfig"),Qat.forEach(t),cKe=r(lLe," (ELECTRA model)"),lLe.forEach(t),fKe=i(L),bm=n(L,"LI",{});var iLe=s(bm);kne=n(iLe,"STRONG",{});var Wat=s(kne);mKe=r(Wat,"encoder-decoder"),Wat.forEach(t),gKe=r(iLe," \u2014 "),xR=n(iLe,"A",{href:!0});var Hat=s(xR);hKe=r(Hat,"EncoderDecoderConfig"),Hat.forEach(t),pKe=r(iLe," (Encoder decoder model)"),iLe.forEach(t),_Ke=i(L),vm=n(L,"LI",{});var dLe=s(vm);Sne=n(dLe,"STRONG",{});var Uat=s(Sne);uKe=r(Uat,"flaubert"),Uat.forEach(t),bKe=r(dLe," \u2014 "),$R=n(dLe,"A",{href:!0});var Jat=s($R);vKe=r(Jat,"FlaubertConfig"),Jat.forEach(t),FKe=r(dLe," (FlauBERT model)"),dLe.forEach(t),TKe=i(L),Fm=n(L,"LI",{});var cLe=s(Fm);Rne=n(cLe,"STRONG",{});var Yat=s(Rne);MKe=r(Yat,"flava"),Yat.forEach(t),EKe=r(cLe," \u2014 "),kR=n(cLe,"A",{href:!0});var Kat=s(kR);CKe=r(Kat,"FlavaConfig"),Kat.forEach(t),wKe=r(cLe," (FLAVA model)"),cLe.forEach(t),AKe=i(L),Tm=n(L,"LI",{});var fLe=s(Tm);Pne=n(fLe,"STRONG",{});var Zat=s(Pne);LKe=r(Zat,"fnet"),Zat.forEach(t),yKe=r(fLe," \u2014 "),SR=n(fLe,"A",{href:!0});var ent=s(SR);xKe=r(ent,"FNetConfig"),ent.forEach(t),$Ke=r(fLe," (FNet model)"),fLe.forEach(t),kKe=i(L),Mm=n(L,"LI",{});var mLe=s(Mm);Bne=n(mLe,"STRONG",{});var ont=s(Bne);SKe=r(ont,"fsmt"),ont.forEach(t),RKe=r(mLe," \u2014 "),RR=n(mLe,"A",{href:!0});var rnt=s(RR);PKe=r(rnt,"FSMTConfig"),rnt.forEach(t),BKe=r(mLe," (FairSeq Machine-Translation model)"),mLe.forEach(t),IKe=i(L),Em=n(L,"LI",{});var gLe=s(Em);Ine=n(gLe,"STRONG",{});var tnt=s(Ine);NKe=r(tnt,"funnel"),tnt.forEach(t),qKe=r(gLe," \u2014 "),PR=n(gLe,"A",{href:!0});var ant=s(PR);jKe=r(ant,"FunnelConfig"),ant.forEach(t),DKe=r(gLe," (Funnel Transformer model)"),gLe.forEach(t),GKe=i(L),Cm=n(L,"LI",{});var hLe=s(Cm);Nne=n(hLe,"STRONG",{});var nnt=s(Nne);OKe=r(nnt,"glpn"),nnt.forEach(t),VKe=r(hLe," \u2014 "),BR=n(hLe,"A",{href:!0});var snt=s(BR);XKe=r(snt,"GLPNConfig"),snt.forEach(t),zKe=r(hLe," (GLPN model)"),hLe.forEach(t),QKe=i(L),wm=n(L,"LI",{});var pLe=s(wm);qne=n(pLe,"STRONG",{});var lnt=s(qne);WKe=r(lnt,"gpt2"),lnt.forEach(t),HKe=r(pLe," \u2014 "),IR=n(pLe,"A",{href:!0});var int=s(IR);UKe=r(int,"GPT2Config"),int.forEach(t),JKe=r(pLe," (OpenAI GPT-2 model)"),pLe.forEach(t),YKe=i(L),Am=n(L,"LI",{});var _Le=s(Am);jne=n(_Le,"STRONG",{});var dnt=s(jne);KKe=r(dnt,"gpt_neo"),dnt.forEach(t),ZKe=r(_Le," \u2014 "),NR=n(_Le,"A",{href:!0});var cnt=s(NR);eZe=r(cnt,"GPTNeoConfig"),cnt.forEach(t),oZe=r(_Le," (GPT Neo model)"),_Le.forEach(t),rZe=i(L),Lm=n(L,"LI",{});var uLe=s(Lm);Dne=n(uLe,"STRONG",{});var fnt=s(Dne);tZe=r(fnt,"gpt_neox"),fnt.forEach(t),aZe=r(uLe," \u2014 "),qR=n(uLe,"A",{href:!0});var mnt=s(qR);nZe=r(mnt,"GPTNeoXConfig"),mnt.forEach(t),sZe=r(uLe," (GPT NeoX model)"),uLe.forEach(t),lZe=i(L),ym=n(L,"LI",{});var bLe=s(ym);Gne=n(bLe,"STRONG",{});var gnt=s(Gne);iZe=r(gnt,"gptj"),gnt.forEach(t),dZe=r(bLe," \u2014 "),jR=n(bLe,"A",{href:!0});var hnt=s(jR);cZe=r(hnt,"GPTJConfig"),hnt.forEach(t),fZe=r(bLe," (GPT-J model)"),bLe.forEach(t),mZe=i(L),xm=n(L,"LI",{});var vLe=s(xm);One=n(vLe,"STRONG",{});var pnt=s(One);gZe=r(pnt,"groupvit"),pnt.forEach(t),hZe=r(vLe," \u2014 "),DR=n(vLe,"A",{href:!0});var _nt=s(DR);pZe=r(_nt,"GroupViTConfig"),_nt.forEach(t),_Ze=r(vLe," (GroupViT model)"),vLe.forEach(t),uZe=i(L),$m=n(L,"LI",{});var FLe=s($m);Vne=n(FLe,"STRONG",{});var unt=s(Vne);bZe=r(unt,"hubert"),unt.forEach(t),vZe=r(FLe," \u2014 "),GR=n(FLe,"A",{href:!0});var bnt=s(GR);FZe=r(bnt,"HubertConfig"),bnt.forEach(t),TZe=r(FLe," (Hubert model)"),FLe.forEach(t),MZe=i(L),km=n(L,"LI",{});var TLe=s(km);Xne=n(TLe,"STRONG",{});var vnt=s(Xne);EZe=r(vnt,"ibert"),vnt.forEach(t),CZe=r(TLe," \u2014 "),OR=n(TLe,"A",{href:!0});var Fnt=s(OR);wZe=r(Fnt,"IBertConfig"),Fnt.forEach(t),AZe=r(TLe," (I-BERT model)"),TLe.forEach(t),LZe=i(L),Sm=n(L,"LI",{});var MLe=s(Sm);zne=n(MLe,"STRONG",{});var Tnt=s(zne);yZe=r(Tnt,"imagegpt"),Tnt.forEach(t),xZe=r(MLe," \u2014 "),VR=n(MLe,"A",{href:!0});var Mnt=s(VR);$Ze=r(Mnt,"ImageGPTConfig"),Mnt.forEach(t),kZe=r(MLe," (ImageGPT model)"),MLe.forEach(t),SZe=i(L),Rm=n(L,"LI",{});var ELe=s(Rm);Qne=n(ELe,"STRONG",{});var Ent=s(Qne);RZe=r(Ent,"layoutlm"),Ent.forEach(t),PZe=r(ELe," \u2014 "),XR=n(ELe,"A",{href:!0});var Cnt=s(XR);BZe=r(Cnt,"LayoutLMConfig"),Cnt.forEach(t),IZe=r(ELe," (LayoutLM model)"),ELe.forEach(t),NZe=i(L),Pm=n(L,"LI",{});var CLe=s(Pm);Wne=n(CLe,"STRONG",{});var wnt=s(Wne);qZe=r(wnt,"layoutlmv2"),wnt.forEach(t),jZe=r(CLe," \u2014 "),zR=n(CLe,"A",{href:!0});var Ant=s(zR);DZe=r(Ant,"LayoutLMv2Config"),Ant.forEach(t),GZe=r(CLe," (LayoutLMv2 model)"),CLe.forEach(t),OZe=i(L),Bm=n(L,"LI",{});var wLe=s(Bm);Hne=n(wLe,"STRONG",{});var Lnt=s(Hne);VZe=r(Lnt,"layoutlmv3"),Lnt.forEach(t),XZe=r(wLe," \u2014 "),QR=n(wLe,"A",{href:!0});var ynt=s(QR);zZe=r(ynt,"LayoutLMv3Config"),ynt.forEach(t),QZe=r(wLe," (LayoutLMv3 model)"),wLe.forEach(t),WZe=i(L),Im=n(L,"LI",{});var ALe=s(Im);Une=n(ALe,"STRONG",{});var xnt=s(Une);HZe=r(xnt,"led"),xnt.forEach(t),UZe=r(ALe," \u2014 "),WR=n(ALe,"A",{href:!0});var $nt=s(WR);JZe=r($nt,"LEDConfig"),$nt.forEach(t),YZe=r(ALe," (LED model)"),ALe.forEach(t),KZe=i(L),Nm=n(L,"LI",{});var LLe=s(Nm);Jne=n(LLe,"STRONG",{});var knt=s(Jne);ZZe=r(knt,"levit"),knt.forEach(t),eeo=r(LLe," \u2014 "),HR=n(LLe,"A",{href:!0});var Snt=s(HR);oeo=r(Snt,"LevitConfig"),Snt.forEach(t),reo=r(LLe," (LeViT model)"),LLe.forEach(t),teo=i(L),qm=n(L,"LI",{});var yLe=s(qm);Yne=n(yLe,"STRONG",{});var Rnt=s(Yne);aeo=r(Rnt,"longformer"),Rnt.forEach(t),neo=r(yLe," \u2014 "),UR=n(yLe,"A",{href:!0});var Pnt=s(UR);seo=r(Pnt,"LongformerConfig"),Pnt.forEach(t),leo=r(yLe," (Longformer model)"),yLe.forEach(t),ieo=i(L),jm=n(L,"LI",{});var xLe=s(jm);Kne=n(xLe,"STRONG",{});var Bnt=s(Kne);deo=r(Bnt,"longt5"),Bnt.forEach(t),ceo=r(xLe," \u2014 "),JR=n(xLe,"A",{href:!0});var Int=s(JR);feo=r(Int,"LongT5Config"),Int.forEach(t),meo=r(xLe," (LongT5 model)"),xLe.forEach(t),geo=i(L),Dm=n(L,"LI",{});var $Le=s(Dm);Zne=n($Le,"STRONG",{});var Nnt=s(Zne);heo=r(Nnt,"luke"),Nnt.forEach(t),peo=r($Le," \u2014 "),YR=n($Le,"A",{href:!0});var qnt=s(YR);_eo=r(qnt,"LukeConfig"),qnt.forEach(t),ueo=r($Le," (LUKE model)"),$Le.forEach(t),beo=i(L),Gm=n(L,"LI",{});var kLe=s(Gm);ese=n(kLe,"STRONG",{});var jnt=s(ese);veo=r(jnt,"lxmert"),jnt.forEach(t),Feo=r(kLe," \u2014 "),KR=n(kLe,"A",{href:!0});var Dnt=s(KR);Teo=r(Dnt,"LxmertConfig"),Dnt.forEach(t),Meo=r(kLe," (LXMERT model)"),kLe.forEach(t),Eeo=i(L),Om=n(L,"LI",{});var SLe=s(Om);ose=n(SLe,"STRONG",{});var Gnt=s(ose);Ceo=r(Gnt,"m2m_100"),Gnt.forEach(t),weo=r(SLe," \u2014 "),ZR=n(SLe,"A",{href:!0});var Ont=s(ZR);Aeo=r(Ont,"M2M100Config"),Ont.forEach(t),Leo=r(SLe," (M2M100 model)"),SLe.forEach(t),yeo=i(L),Vm=n(L,"LI",{});var RLe=s(Vm);rse=n(RLe,"STRONG",{});var Vnt=s(rse);xeo=r(Vnt,"marian"),Vnt.forEach(t),$eo=r(RLe," \u2014 "),eP=n(RLe,"A",{href:!0});var Xnt=s(eP);keo=r(Xnt,"MarianConfig"),Xnt.forEach(t),Seo=r(RLe," (Marian model)"),RLe.forEach(t),Reo=i(L),Xm=n(L,"LI",{});var PLe=s(Xm);tse=n(PLe,"STRONG",{});var znt=s(tse);Peo=r(znt,"maskformer"),znt.forEach(t),Beo=r(PLe," \u2014 "),oP=n(PLe,"A",{href:!0});var Qnt=s(oP);Ieo=r(Qnt,"MaskFormerConfig"),Qnt.forEach(t),Neo=r(PLe," (MaskFormer model)"),PLe.forEach(t),qeo=i(L),zm=n(L,"LI",{});var BLe=s(zm);ase=n(BLe,"STRONG",{});var Wnt=s(ase);jeo=r(Wnt,"mbart"),Wnt.forEach(t),Deo=r(BLe," \u2014 "),rP=n(BLe,"A",{href:!0});var Hnt=s(rP);Geo=r(Hnt,"MBartConfig"),Hnt.forEach(t),Oeo=r(BLe," (mBART model)"),BLe.forEach(t),Veo=i(L),Qm=n(L,"LI",{});var ILe=s(Qm);nse=n(ILe,"STRONG",{});var Unt=s(nse);Xeo=r(Unt,"mctct"),Unt.forEach(t),zeo=r(ILe," \u2014 "),tP=n(ILe,"A",{href:!0});var Jnt=s(tP);Qeo=r(Jnt,"MCTCTConfig"),Jnt.forEach(t),Weo=r(ILe," (M-CTC-T model)"),ILe.forEach(t),Heo=i(L),Wm=n(L,"LI",{});var NLe=s(Wm);sse=n(NLe,"STRONG",{});var Ynt=s(sse);Ueo=r(Ynt,"megatron-bert"),Ynt.forEach(t),Jeo=r(NLe," \u2014 "),aP=n(NLe,"A",{href:!0});var Knt=s(aP);Yeo=r(Knt,"MegatronBertConfig"),Knt.forEach(t),Keo=r(NLe," (Megatron-BERT model)"),NLe.forEach(t),Zeo=i(L),Hm=n(L,"LI",{});var qLe=s(Hm);lse=n(qLe,"STRONG",{});var Znt=s(lse);eoo=r(Znt,"mobilebert"),Znt.forEach(t),ooo=r(qLe," \u2014 "),nP=n(qLe,"A",{href:!0});var est=s(nP);roo=r(est,"MobileBertConfig"),est.forEach(t),too=r(qLe," (MobileBERT model)"),qLe.forEach(t),aoo=i(L),Um=n(L,"LI",{});var jLe=s(Um);ise=n(jLe,"STRONG",{});var ost=s(ise);noo=r(ost,"mobilevit"),ost.forEach(t),soo=r(jLe," \u2014 "),sP=n(jLe,"A",{href:!0});var rst=s(sP);loo=r(rst,"MobileViTConfig"),rst.forEach(t),ioo=r(jLe," (MobileViT model)"),jLe.forEach(t),doo=i(L),Jm=n(L,"LI",{});var DLe=s(Jm);dse=n(DLe,"STRONG",{});var tst=s(dse);coo=r(tst,"mpnet"),tst.forEach(t),foo=r(DLe," \u2014 "),lP=n(DLe,"A",{href:!0});var ast=s(lP);moo=r(ast,"MPNetConfig"),ast.forEach(t),goo=r(DLe," (MPNet model)"),DLe.forEach(t),hoo=i(L),Ym=n(L,"LI",{});var GLe=s(Ym);cse=n(GLe,"STRONG",{});var nst=s(cse);poo=r(nst,"mt5"),nst.forEach(t),_oo=r(GLe," \u2014 "),iP=n(GLe,"A",{href:!0});var sst=s(iP);uoo=r(sst,"MT5Config"),sst.forEach(t),boo=r(GLe," (MT5 model)"),GLe.forEach(t),voo=i(L),Km=n(L,"LI",{});var OLe=s(Km);fse=n(OLe,"STRONG",{});var lst=s(fse);Foo=r(lst,"mvp"),lst.forEach(t),Too=r(OLe," \u2014 "),dP=n(OLe,"A",{href:!0});var ist=s(dP);Moo=r(ist,"MvpConfig"),ist.forEach(t),Eoo=r(OLe," (MVP model)"),OLe.forEach(t),Coo=i(L),Zm=n(L,"LI",{});var VLe=s(Zm);mse=n(VLe,"STRONG",{});var dst=s(mse);woo=r(dst,"nezha"),dst.forEach(t),Aoo=r(VLe," \u2014 "),cP=n(VLe,"A",{href:!0});var cst=s(cP);Loo=r(cst,"NezhaConfig"),cst.forEach(t),yoo=r(VLe," (Nezha model)"),VLe.forEach(t),xoo=i(L),eg=n(L,"LI",{});var XLe=s(eg);gse=n(XLe,"STRONG",{});var fst=s(gse);$oo=r(fst,"nystromformer"),fst.forEach(t),koo=r(XLe," \u2014 "),fP=n(XLe,"A",{href:!0});var mst=s(fP);Soo=r(mst,"NystromformerConfig"),mst.forEach(t),Roo=r(XLe," (Nystr\xF6mformer model)"),XLe.forEach(t),Poo=i(L),og=n(L,"LI",{});var zLe=s(og);hse=n(zLe,"STRONG",{});var gst=s(hse);Boo=r(gst,"openai-gpt"),gst.forEach(t),Ioo=r(zLe," \u2014 "),mP=n(zLe,"A",{href:!0});var hst=s(mP);Noo=r(hst,"OpenAIGPTConfig"),hst.forEach(t),qoo=r(zLe," (OpenAI GPT model)"),zLe.forEach(t),joo=i(L),rg=n(L,"LI",{});var QLe=s(rg);pse=n(QLe,"STRONG",{});var pst=s(pse);Doo=r(pst,"opt"),pst.forEach(t),Goo=r(QLe," \u2014 "),gP=n(QLe,"A",{href:!0});var _st=s(gP);Ooo=r(_st,"OPTConfig"),_st.forEach(t),Voo=r(QLe," (OPT model)"),QLe.forEach(t),Xoo=i(L),tg=n(L,"LI",{});var WLe=s(tg);_se=n(WLe,"STRONG",{});var ust=s(_se);zoo=r(ust,"pegasus"),ust.forEach(t),Qoo=r(WLe," \u2014 "),hP=n(WLe,"A",{href:!0});var bst=s(hP);Woo=r(bst,"PegasusConfig"),bst.forEach(t),Hoo=r(WLe," (Pegasus model)"),WLe.forEach(t),Uoo=i(L),ag=n(L,"LI",{});var HLe=s(ag);use=n(HLe,"STRONG",{});var vst=s(use);Joo=r(vst,"perceiver"),vst.forEach(t),Yoo=r(HLe," \u2014 "),pP=n(HLe,"A",{href:!0});var Fst=s(pP);Koo=r(Fst,"PerceiverConfig"),Fst.forEach(t),Zoo=r(HLe," (Perceiver model)"),HLe.forEach(t),ero=i(L),ng=n(L,"LI",{});var ULe=s(ng);bse=n(ULe,"STRONG",{});var Tst=s(bse);oro=r(Tst,"plbart"),Tst.forEach(t),rro=r(ULe," \u2014 "),_P=n(ULe,"A",{href:!0});var Mst=s(_P);tro=r(Mst,"PLBartConfig"),Mst.forEach(t),aro=r(ULe," (PLBart model)"),ULe.forEach(t),nro=i(L),sg=n(L,"LI",{});var JLe=s(sg);vse=n(JLe,"STRONG",{});var Est=s(vse);sro=r(Est,"poolformer"),Est.forEach(t),lro=r(JLe," \u2014 "),uP=n(JLe,"A",{href:!0});var Cst=s(uP);iro=r(Cst,"PoolFormerConfig"),Cst.forEach(t),dro=r(JLe," (PoolFormer model)"),JLe.forEach(t),cro=i(L),lg=n(L,"LI",{});var YLe=s(lg);Fse=n(YLe,"STRONG",{});var wst=s(Fse);fro=r(wst,"prophetnet"),wst.forEach(t),mro=r(YLe," \u2014 "),bP=n(YLe,"A",{href:!0});var Ast=s(bP);gro=r(Ast,"ProphetNetConfig"),Ast.forEach(t),hro=r(YLe," (ProphetNet model)"),YLe.forEach(t),pro=i(L),ig=n(L,"LI",{});var KLe=s(ig);Tse=n(KLe,"STRONG",{});var Lst=s(Tse);_ro=r(Lst,"qdqbert"),Lst.forEach(t),uro=r(KLe," \u2014 "),vP=n(KLe,"A",{href:!0});var yst=s(vP);bro=r(yst,"QDQBertConfig"),yst.forEach(t),vro=r(KLe," (QDQBert model)"),KLe.forEach(t),Fro=i(L),dg=n(L,"LI",{});var ZLe=s(dg);Mse=n(ZLe,"STRONG",{});var xst=s(Mse);Tro=r(xst,"rag"),xst.forEach(t),Mro=r(ZLe," \u2014 "),FP=n(ZLe,"A",{href:!0});var $st=s(FP);Ero=r($st,"RagConfig"),$st.forEach(t),Cro=r(ZLe," (RAG model)"),ZLe.forEach(t),wro=i(L),cg=n(L,"LI",{});var eye=s(cg);Ese=n(eye,"STRONG",{});var kst=s(Ese);Aro=r(kst,"realm"),kst.forEach(t),Lro=r(eye," \u2014 "),TP=n(eye,"A",{href:!0});var Sst=s(TP);yro=r(Sst,"RealmConfig"),Sst.forEach(t),xro=r(eye," (REALM model)"),eye.forEach(t),$ro=i(L),fg=n(L,"LI",{});var oye=s(fg);Cse=n(oye,"STRONG",{});var Rst=s(Cse);kro=r(Rst,"reformer"),Rst.forEach(t),Sro=r(oye," \u2014 "),MP=n(oye,"A",{href:!0});var Pst=s(MP);Rro=r(Pst,"ReformerConfig"),Pst.forEach(t),Pro=r(oye," (Reformer model)"),oye.forEach(t),Bro=i(L),mg=n(L,"LI",{});var rye=s(mg);wse=n(rye,"STRONG",{});var Bst=s(wse);Iro=r(Bst,"regnet"),Bst.forEach(t),Nro=r(rye," \u2014 "),EP=n(rye,"A",{href:!0});var Ist=s(EP);qro=r(Ist,"RegNetConfig"),Ist.forEach(t),jro=r(rye," (RegNet model)"),rye.forEach(t),Dro=i(L),gg=n(L,"LI",{});var tye=s(gg);Ase=n(tye,"STRONG",{});var Nst=s(Ase);Gro=r(Nst,"rembert"),Nst.forEach(t),Oro=r(tye," \u2014 "),CP=n(tye,"A",{href:!0});var qst=s(CP);Vro=r(qst,"RemBertConfig"),qst.forEach(t),Xro=r(tye," (RemBERT model)"),tye.forEach(t),zro=i(L),hg=n(L,"LI",{});var aye=s(hg);Lse=n(aye,"STRONG",{});var jst=s(Lse);Qro=r(jst,"resnet"),jst.forEach(t),Wro=r(aye," \u2014 "),wP=n(aye,"A",{href:!0});var Dst=s(wP);Hro=r(Dst,"ResNetConfig"),Dst.forEach(t),Uro=r(aye," (ResNet model)"),aye.forEach(t),Jro=i(L),pg=n(L,"LI",{});var nye=s(pg);yse=n(nye,"STRONG",{});var Gst=s(yse);Yro=r(Gst,"retribert"),Gst.forEach(t),Kro=r(nye," \u2014 "),AP=n(nye,"A",{href:!0});var Ost=s(AP);Zro=r(Ost,"RetriBertConfig"),Ost.forEach(t),eto=r(nye," (RetriBERT model)"),nye.forEach(t),oto=i(L),_g=n(L,"LI",{});var sye=s(_g);xse=n(sye,"STRONG",{});var Vst=s(xse);rto=r(Vst,"roberta"),Vst.forEach(t),tto=r(sye," \u2014 "),LP=n(sye,"A",{href:!0});var Xst=s(LP);ato=r(Xst,"RobertaConfig"),Xst.forEach(t),nto=r(sye," (RoBERTa model)"),sye.forEach(t),sto=i(L),ug=n(L,"LI",{});var lye=s(ug);$se=n(lye,"STRONG",{});var zst=s($se);lto=r(zst,"roformer"),zst.forEach(t),ito=r(lye," \u2014 "),yP=n(lye,"A",{href:!0});var Qst=s(yP);dto=r(Qst,"RoFormerConfig"),Qst.forEach(t),cto=r(lye," (RoFormer model)"),lye.forEach(t),fto=i(L),bg=n(L,"LI",{});var iye=s(bg);kse=n(iye,"STRONG",{});var Wst=s(kse);mto=r(Wst,"segformer"),Wst.forEach(t),gto=r(iye," \u2014 "),xP=n(iye,"A",{href:!0});var Hst=s(xP);hto=r(Hst,"SegformerConfig"),Hst.forEach(t),pto=r(iye," (SegFormer model)"),iye.forEach(t),_to=i(L),vg=n(L,"LI",{});var dye=s(vg);Sse=n(dye,"STRONG",{});var Ust=s(Sse);uto=r(Ust,"sew"),Ust.forEach(t),bto=r(dye," \u2014 "),$P=n(dye,"A",{href:!0});var Jst=s($P);vto=r(Jst,"SEWConfig"),Jst.forEach(t),Fto=r(dye," (SEW model)"),dye.forEach(t),Tto=i(L),Fg=n(L,"LI",{});var cye=s(Fg);Rse=n(cye,"STRONG",{});var Yst=s(Rse);Mto=r(Yst,"sew-d"),Yst.forEach(t),Eto=r(cye," \u2014 "),kP=n(cye,"A",{href:!0});var Kst=s(kP);Cto=r(Kst,"SEWDConfig"),Kst.forEach(t),wto=r(cye," (SEW-D model)"),cye.forEach(t),Ato=i(L),Tg=n(L,"LI",{});var fye=s(Tg);Pse=n(fye,"STRONG",{});var Zst=s(Pse);Lto=r(Zst,"speech-encoder-decoder"),Zst.forEach(t),yto=r(fye," \u2014 "),SP=n(fye,"A",{href:!0});var elt=s(SP);xto=r(elt,"SpeechEncoderDecoderConfig"),elt.forEach(t),$to=r(fye," (Speech Encoder decoder model)"),fye.forEach(t),kto=i(L),Mg=n(L,"LI",{});var mye=s(Mg);Bse=n(mye,"STRONG",{});var olt=s(Bse);Sto=r(olt,"speech_to_text"),olt.forEach(t),Rto=r(mye," \u2014 "),RP=n(mye,"A",{href:!0});var rlt=s(RP);Pto=r(rlt,"Speech2TextConfig"),rlt.forEach(t),Bto=r(mye," (Speech2Text model)"),mye.forEach(t),Ito=i(L),Eg=n(L,"LI",{});var gye=s(Eg);Ise=n(gye,"STRONG",{});var tlt=s(Ise);Nto=r(tlt,"speech_to_text_2"),tlt.forEach(t),qto=r(gye," \u2014 "),PP=n(gye,"A",{href:!0});var alt=s(PP);jto=r(alt,"Speech2Text2Config"),alt.forEach(t),Dto=r(gye," (Speech2Text2 model)"),gye.forEach(t),Gto=i(L),Cg=n(L,"LI",{});var hye=s(Cg);Nse=n(hye,"STRONG",{});var nlt=s(Nse);Oto=r(nlt,"splinter"),nlt.forEach(t),Vto=r(hye," \u2014 "),BP=n(hye,"A",{href:!0});var slt=s(BP);Xto=r(slt,"SplinterConfig"),slt.forEach(t),zto=r(hye," (Splinter model)"),hye.forEach(t),Qto=i(L),wg=n(L,"LI",{});var pye=s(wg);qse=n(pye,"STRONG",{});var llt=s(qse);Wto=r(llt,"squeezebert"),llt.forEach(t),Hto=r(pye," \u2014 "),IP=n(pye,"A",{href:!0});var ilt=s(IP);Uto=r(ilt,"SqueezeBertConfig"),ilt.forEach(t),Jto=r(pye," (SqueezeBERT model)"),pye.forEach(t),Yto=i(L),Ag=n(L,"LI",{});var _ye=s(Ag);jse=n(_ye,"STRONG",{});var dlt=s(jse);Kto=r(dlt,"swin"),dlt.forEach(t),Zto=r(_ye," \u2014 "),NP=n(_ye,"A",{href:!0});var clt=s(NP);eao=r(clt,"SwinConfig"),clt.forEach(t),oao=r(_ye," (Swin Transformer model)"),_ye.forEach(t),rao=i(L),Lg=n(L,"LI",{});var uye=s(Lg);Dse=n(uye,"STRONG",{});var flt=s(Dse);tao=r(flt,"swinv2"),flt.forEach(t),aao=r(uye," \u2014 "),qP=n(uye,"A",{href:!0});var mlt=s(qP);nao=r(mlt,"Swinv2Config"),mlt.forEach(t),sao=r(uye," (Swin Transformer V2 model)"),uye.forEach(t),lao=i(L),yg=n(L,"LI",{});var bye=s(yg);Gse=n(bye,"STRONG",{});var glt=s(Gse);iao=r(glt,"t5"),glt.forEach(t),dao=r(bye," \u2014 "),jP=n(bye,"A",{href:!0});var hlt=s(jP);cao=r(hlt,"T5Config"),hlt.forEach(t),fao=r(bye," (T5 model)"),bye.forEach(t),mao=i(L),xg=n(L,"LI",{});var vye=s(xg);Ose=n(vye,"STRONG",{});var plt=s(Ose);gao=r(plt,"tapas"),plt.forEach(t),hao=r(vye," \u2014 "),DP=n(vye,"A",{href:!0});var _lt=s(DP);pao=r(_lt,"TapasConfig"),_lt.forEach(t),_ao=r(vye," (TAPAS model)"),vye.forEach(t),uao=i(L),$g=n(L,"LI",{});var Fye=s($g);Vse=n(Fye,"STRONG",{});var ult=s(Vse);bao=r(ult,"trajectory_transformer"),ult.forEach(t),vao=r(Fye," \u2014 "),GP=n(Fye,"A",{href:!0});var blt=s(GP);Fao=r(blt,"TrajectoryTransformerConfig"),blt.forEach(t),Tao=r(Fye," (Trajectory Transformer model)"),Fye.forEach(t),Mao=i(L),kg=n(L,"LI",{});var Tye=s(kg);Xse=n(Tye,"STRONG",{});var vlt=s(Xse);Eao=r(vlt,"transfo-xl"),vlt.forEach(t),Cao=r(Tye," \u2014 "),OP=n(Tye,"A",{href:!0});var Flt=s(OP);wao=r(Flt,"TransfoXLConfig"),Flt.forEach(t),Aao=r(Tye," (Transformer-XL model)"),Tye.forEach(t),Lao=i(L),Sg=n(L,"LI",{});var Mye=s(Sg);zse=n(Mye,"STRONG",{});var Tlt=s(zse);yao=r(Tlt,"trocr"),Tlt.forEach(t),xao=r(Mye," \u2014 "),VP=n(Mye,"A",{href:!0});var Mlt=s(VP);$ao=r(Mlt,"TrOCRConfig"),Mlt.forEach(t),kao=r(Mye," (TrOCR model)"),Mye.forEach(t),Sao=i(L),Rg=n(L,"LI",{});var Eye=s(Rg);Qse=n(Eye,"STRONG",{});var Elt=s(Qse);Rao=r(Elt,"unispeech"),Elt.forEach(t),Pao=r(Eye," \u2014 "),XP=n(Eye,"A",{href:!0});var Clt=s(XP);Bao=r(Clt,"UniSpeechConfig"),Clt.forEach(t),Iao=r(Eye," (UniSpeech model)"),Eye.forEach(t),Nao=i(L),Pg=n(L,"LI",{});var Cye=s(Pg);Wse=n(Cye,"STRONG",{});var wlt=s(Wse);qao=r(wlt,"unispeech-sat"),wlt.forEach(t),jao=r(Cye," \u2014 "),zP=n(Cye,"A",{href:!0});var Alt=s(zP);Dao=r(Alt,"UniSpeechSatConfig"),Alt.forEach(t),Gao=r(Cye," (UniSpeechSat model)"),Cye.forEach(t),Oao=i(L),Bg=n(L,"LI",{});var wye=s(Bg);Hse=n(wye,"STRONG",{});var Llt=s(Hse);Vao=r(Llt,"van"),Llt.forEach(t),Xao=r(wye," \u2014 "),QP=n(wye,"A",{href:!0});var ylt=s(QP);zao=r(ylt,"VanConfig"),ylt.forEach(t),Qao=r(wye," (VAN model)"),wye.forEach(t),Wao=i(L),Ig=n(L,"LI",{});var Aye=s(Ig);Use=n(Aye,"STRONG",{});var xlt=s(Use);Hao=r(xlt,"vilt"),xlt.forEach(t),Uao=r(Aye," \u2014 "),WP=n(Aye,"A",{href:!0});var $lt=s(WP);Jao=r($lt,"ViltConfig"),$lt.forEach(t),Yao=r(Aye," (ViLT model)"),Aye.forEach(t),Kao=i(L),Ng=n(L,"LI",{});var Lye=s(Ng);Jse=n(Lye,"STRONG",{});var klt=s(Jse);Zao=r(klt,"vision-encoder-decoder"),klt.forEach(t),eno=r(Lye," \u2014 "),HP=n(Lye,"A",{href:!0});var Slt=s(HP);ono=r(Slt,"VisionEncoderDecoderConfig"),Slt.forEach(t),rno=r(Lye," (Vision Encoder decoder model)"),Lye.forEach(t),tno=i(L),qg=n(L,"LI",{});var yye=s(qg);Yse=n(yye,"STRONG",{});var Rlt=s(Yse);ano=r(Rlt,"vision-text-dual-encoder"),Rlt.forEach(t),nno=r(yye," \u2014 "),UP=n(yye,"A",{href:!0});var Plt=s(UP);sno=r(Plt,"VisionTextDualEncoderConfig"),Plt.forEach(t),lno=r(yye," (VisionTextDualEncoder model)"),yye.forEach(t),ino=i(L),jg=n(L,"LI",{});var xye=s(jg);Kse=n(xye,"STRONG",{});var Blt=s(Kse);dno=r(Blt,"visual_bert"),Blt.forEach(t),cno=r(xye," \u2014 "),JP=n(xye,"A",{href:!0});var Ilt=s(JP);fno=r(Ilt,"VisualBertConfig"),Ilt.forEach(t),mno=r(xye," (VisualBERT model)"),xye.forEach(t),gno=i(L),Dg=n(L,"LI",{});var $ye=s(Dg);Zse=n($ye,"STRONG",{});var Nlt=s(Zse);hno=r(Nlt,"vit"),Nlt.forEach(t),pno=r($ye," \u2014 "),YP=n($ye,"A",{href:!0});var qlt=s(YP);_no=r(qlt,"ViTConfig"),qlt.forEach(t),uno=r($ye," (ViT model)"),$ye.forEach(t),bno=i(L),Gg=n(L,"LI",{});var kye=s(Gg);ele=n(kye,"STRONG",{});var jlt=s(ele);vno=r(jlt,"vit_mae"),jlt.forEach(t),Fno=r(kye," \u2014 "),KP=n(kye,"A",{href:!0});var Dlt=s(KP);Tno=r(Dlt,"ViTMAEConfig"),Dlt.forEach(t),Mno=r(kye," (ViTMAE model)"),kye.forEach(t),Eno=i(L),Og=n(L,"LI",{});var Sye=s(Og);ole=n(Sye,"STRONG",{});var Glt=s(ole);Cno=r(Glt,"wav2vec2"),Glt.forEach(t),wno=r(Sye," \u2014 "),ZP=n(Sye,"A",{href:!0});var Olt=s(ZP);Ano=r(Olt,"Wav2Vec2Config"),Olt.forEach(t),Lno=r(Sye," (Wav2Vec2 model)"),Sye.forEach(t),yno=i(L),Vg=n(L,"LI",{});var Rye=s(Vg);rle=n(Rye,"STRONG",{});var Vlt=s(rle);xno=r(Vlt,"wav2vec2-conformer"),Vlt.forEach(t),$no=r(Rye," \u2014 "),eB=n(Rye,"A",{href:!0});var Xlt=s(eB);kno=r(Xlt,"Wav2Vec2ConformerConfig"),Xlt.forEach(t),Sno=r(Rye," (Wav2Vec2-Conformer model)"),Rye.forEach(t),Rno=i(L),Xg=n(L,"LI",{});var Pye=s(Xg);tle=n(Pye,"STRONG",{});var zlt=s(tle);Pno=r(zlt,"wavlm"),zlt.forEach(t),Bno=r(Pye," \u2014 "),oB=n(Pye,"A",{href:!0});var Qlt=s(oB);Ino=r(Qlt,"WavLMConfig"),Qlt.forEach(t),Nno=r(Pye," (WavLM model)"),Pye.forEach(t),qno=i(L),zg=n(L,"LI",{});var Bye=s(zg);ale=n(Bye,"STRONG",{});var Wlt=s(ale);jno=r(Wlt,"xglm"),Wlt.forEach(t),Dno=r(Bye," \u2014 "),rB=n(Bye,"A",{href:!0});var Hlt=s(rB);Gno=r(Hlt,"XGLMConfig"),Hlt.forEach(t),Ono=r(Bye," (XGLM model)"),Bye.forEach(t),Vno=i(L),Qg=n(L,"LI",{});var Iye=s(Qg);nle=n(Iye,"STRONG",{});var Ult=s(nle);Xno=r(Ult,"xlm"),Ult.forEach(t),zno=r(Iye," \u2014 "),tB=n(Iye,"A",{href:!0});var Jlt=s(tB);Qno=r(Jlt,"XLMConfig"),Jlt.forEach(t),Wno=r(Iye," (XLM model)"),Iye.forEach(t),Hno=i(L),Wg=n(L,"LI",{});var Nye=s(Wg);sle=n(Nye,"STRONG",{});var Ylt=s(sle);Uno=r(Ylt,"xlm-prophetnet"),Ylt.forEach(t),Jno=r(Nye," \u2014 "),aB=n(Nye,"A",{href:!0});var Klt=s(aB);Yno=r(Klt,"XLMProphetNetConfig"),Klt.forEach(t),Kno=r(Nye," (XLM-ProphetNet model)"),Nye.forEach(t),Zno=i(L),Hg=n(L,"LI",{});var qye=s(Hg);lle=n(qye,"STRONG",{});var Zlt=s(lle);eso=r(Zlt,"xlm-roberta"),Zlt.forEach(t),oso=r(qye," \u2014 "),nB=n(qye,"A",{href:!0});var eit=s(nB);rso=r(eit,"XLMRobertaConfig"),eit.forEach(t),tso=r(qye," (XLM-RoBERTa model)"),qye.forEach(t),aso=i(L),Ug=n(L,"LI",{});var jye=s(Ug);ile=n(jye,"STRONG",{});var oit=s(ile);nso=r(oit,"xlm-roberta-xl"),oit.forEach(t),sso=r(jye," \u2014 "),sB=n(jye,"A",{href:!0});var rit=s(sB);lso=r(rit,"XLMRobertaXLConfig"),rit.forEach(t),iso=r(jye," (XLM-RoBERTa-XL model)"),jye.forEach(t),dso=i(L),Jg=n(L,"LI",{});var Dye=s(Jg);dle=n(Dye,"STRONG",{});var tit=s(dle);cso=r(tit,"xlnet"),tit.forEach(t),fso=r(Dye," \u2014 "),lB=n(Dye,"A",{href:!0});var ait=s(lB);mso=r(ait,"XLNetConfig"),ait.forEach(t),gso=r(Dye," (XLNet model)"),Dye.forEach(t),hso=i(L),Yg=n(L,"LI",{});var Gye=s(Yg);cle=n(Gye,"STRONG",{});var nit=s(cle);pso=r(nit,"yolos"),nit.forEach(t),_so=r(Gye," \u2014 "),iB=n(Gye,"A",{href:!0});var sit=s(iB);uso=r(sit,"YolosConfig"),sit.forEach(t),bso=r(Gye," (YOLOS model)"),Gye.forEach(t),vso=i(L),Kg=n(L,"LI",{});var Oye=s(Kg);fle=n(Oye,"STRONG",{});var lit=s(fle);Fso=r(lit,"yoso"),lit.forEach(t),Tso=r(Oye," \u2014 "),dB=n(Oye,"A",{href:!0});var iit=s(dB);Mso=r(iit,"YosoConfig"),iit.forEach(t),Eso=r(Oye," (YOSO model)"),Oye.forEach(t),L.forEach(t),Cso=i(st),T(Zg.$$.fragment,st),st.forEach(t),wso=i(nt),eh=n(nt,"DIV",{class:!0});var DQe=s(eh);T(TL.$$.fragment,DQe),Aso=i(DQe),mle=n(DQe,"P",{});var dit=s(mle);Lso=r(dit,"Register a new configuration for this class."),dit.forEach(t),DQe.forEach(t),nt.forEach(t),GXe=i(f),ji=n(f,"H2",{class:!0});var GQe=s(ji);oh=n(GQe,"A",{id:!0,class:!0,href:!0});var cit=s(oh);gle=n(cit,"SPAN",{});var fit=s(gle);T(ML.$$.fragment,fit),fit.forEach(t),cit.forEach(t),yso=i(GQe),hle=n(GQe,"SPAN",{});var mit=s(hle);xso=r(mit,"AutoTokenizer"),mit.forEach(t),GQe.forEach(t),OXe=i(f),Lo=n(f,"DIV",{class:!0});var el=s(Lo);T(EL.$$.fragment,el),$so=i(el),CL=n(el,"P",{});var OQe=s(CL);kso=r(OQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cB=n(OQe,"A",{href:!0});var git=s(cB);Sso=r(git,"AutoTokenizer.from_pretrained()"),git.forEach(t),Rso=r(OQe," class method."),OQe.forEach(t),Pso=i(el),wL=n(el,"P",{});var VQe=s(wL);Bso=r(VQe,"This class cannot be instantiated directly using "),ple=n(VQe,"CODE",{});var hit=s(ple);Iso=r(hit,"__init__()"),hit.forEach(t),Nso=r(VQe," (throws an error)."),VQe.forEach(t),qso=i(el),yr=n(el,"DIV",{class:!0});var ol=s(yr);T(AL.$$.fragment,ol),jso=i(ol),_le=n(ol,"P",{});var pit=s(_le);Dso=r(pit,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pit.forEach(t),Gso=i(ol),Pa=n(ol,"P",{});var pw=s(Pa);Oso=r(pw,"The tokenizer class to instantiate is selected based on the "),ule=n(pw,"CODE",{});var _it=s(ule);Vso=r(_it,"model_type"),_it.forEach(t),Xso=r(pw,` property of the config object (either
passed as an argument or loaded from `),ble=n(pw,"CODE",{});var uit=s(ble);zso=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),Qso=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=n(pw,"CODE",{});var bit=s(vle);Wso=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),Hso=r(pw,":"),pw.forEach(t),Uso=i(ol),k=n(ol,"UL",{});var S=s(k);Dn=n(S,"LI",{});var Sk=s(Dn);Fle=n(Sk,"STRONG",{});var vit=s(Fle);Jso=r(vit,"albert"),vit.forEach(t),Yso=r(Sk," \u2014 "),fB=n(Sk,"A",{href:!0});var Fit=s(fB);Kso=r(Fit,"AlbertTokenizer"),Fit.forEach(t),Zso=r(Sk," or "),mB=n(Sk,"A",{href:!0});var Tit=s(mB);elo=r(Tit,"AlbertTokenizerFast"),Tit.forEach(t),olo=r(Sk," (ALBERT model)"),Sk.forEach(t),rlo=i(S),Gn=n(S,"LI",{});var Rk=s(Gn);Tle=n(Rk,"STRONG",{});var Mit=s(Tle);tlo=r(Mit,"bart"),Mit.forEach(t),alo=r(Rk," \u2014 "),gB=n(Rk,"A",{href:!0});var Eit=s(gB);nlo=r(Eit,"BartTokenizer"),Eit.forEach(t),slo=r(Rk," or "),hB=n(Rk,"A",{href:!0});var Cit=s(hB);llo=r(Cit,"BartTokenizerFast"),Cit.forEach(t),ilo=r(Rk," (BART model)"),Rk.forEach(t),dlo=i(S),On=n(S,"LI",{});var Pk=s(On);Mle=n(Pk,"STRONG",{});var wit=s(Mle);clo=r(wit,"barthez"),wit.forEach(t),flo=r(Pk," \u2014 "),pB=n(Pk,"A",{href:!0});var Ait=s(pB);mlo=r(Ait,"BarthezTokenizer"),Ait.forEach(t),glo=r(Pk," or "),_B=n(Pk,"A",{href:!0});var Lit=s(_B);hlo=r(Lit,"BarthezTokenizerFast"),Lit.forEach(t),plo=r(Pk," (BARThez model)"),Pk.forEach(t),_lo=i(S),rh=n(S,"LI",{});var Vye=s(rh);Ele=n(Vye,"STRONG",{});var yit=s(Ele);ulo=r(yit,"bartpho"),yit.forEach(t),blo=r(Vye," \u2014 "),uB=n(Vye,"A",{href:!0});var xit=s(uB);vlo=r(xit,"BartphoTokenizer"),xit.forEach(t),Flo=r(Vye," (BARTpho model)"),Vye.forEach(t),Tlo=i(S),Vn=n(S,"LI",{});var Bk=s(Vn);Cle=n(Bk,"STRONG",{});var $it=s(Cle);Mlo=r($it,"bert"),$it.forEach(t),Elo=r(Bk," \u2014 "),bB=n(Bk,"A",{href:!0});var kit=s(bB);Clo=r(kit,"BertTokenizer"),kit.forEach(t),wlo=r(Bk," or "),vB=n(Bk,"A",{href:!0});var Sit=s(vB);Alo=r(Sit,"BertTokenizerFast"),Sit.forEach(t),Llo=r(Bk," (BERT model)"),Bk.forEach(t),ylo=i(S),th=n(S,"LI",{});var Xye=s(th);wle=n(Xye,"STRONG",{});var Rit=s(wle);xlo=r(Rit,"bert-generation"),Rit.forEach(t),$lo=r(Xye," \u2014 "),FB=n(Xye,"A",{href:!0});var Pit=s(FB);klo=r(Pit,"BertGenerationTokenizer"),Pit.forEach(t),Slo=r(Xye," (Bert Generation model)"),Xye.forEach(t),Rlo=i(S),ah=n(S,"LI",{});var zye=s(ah);Ale=n(zye,"STRONG",{});var Bit=s(Ale);Plo=r(Bit,"bert-japanese"),Bit.forEach(t),Blo=r(zye," \u2014 "),TB=n(zye,"A",{href:!0});var Iit=s(TB);Ilo=r(Iit,"BertJapaneseTokenizer"),Iit.forEach(t),Nlo=r(zye," (BertJapanese model)"),zye.forEach(t),qlo=i(S),nh=n(S,"LI",{});var Qye=s(nh);Lle=n(Qye,"STRONG",{});var Nit=s(Lle);jlo=r(Nit,"bertweet"),Nit.forEach(t),Dlo=r(Qye," \u2014 "),MB=n(Qye,"A",{href:!0});var qit=s(MB);Glo=r(qit,"BertweetTokenizer"),qit.forEach(t),Olo=r(Qye," (BERTweet model)"),Qye.forEach(t),Vlo=i(S),Xn=n(S,"LI",{});var Ik=s(Xn);yle=n(Ik,"STRONG",{});var jit=s(yle);Xlo=r(jit,"big_bird"),jit.forEach(t),zlo=r(Ik," \u2014 "),EB=n(Ik,"A",{href:!0});var Dit=s(EB);Qlo=r(Dit,"BigBirdTokenizer"),Dit.forEach(t),Wlo=r(Ik," or "),CB=n(Ik,"A",{href:!0});var Git=s(CB);Hlo=r(Git,"BigBirdTokenizerFast"),Git.forEach(t),Ulo=r(Ik," (BigBird model)"),Ik.forEach(t),Jlo=i(S),zn=n(S,"LI",{});var Nk=s(zn);xle=n(Nk,"STRONG",{});var Oit=s(xle);Ylo=r(Oit,"bigbird_pegasus"),Oit.forEach(t),Klo=r(Nk," \u2014 "),wB=n(Nk,"A",{href:!0});var Vit=s(wB);Zlo=r(Vit,"PegasusTokenizer"),Vit.forEach(t),eio=r(Nk," or "),AB=n(Nk,"A",{href:!0});var Xit=s(AB);oio=r(Xit,"PegasusTokenizerFast"),Xit.forEach(t),rio=r(Nk," (BigBird-Pegasus model)"),Nk.forEach(t),tio=i(S),Qn=n(S,"LI",{});var qk=s(Qn);$le=n(qk,"STRONG",{});var zit=s($le);aio=r(zit,"blenderbot"),zit.forEach(t),nio=r(qk," \u2014 "),LB=n(qk,"A",{href:!0});var Qit=s(LB);sio=r(Qit,"BlenderbotTokenizer"),Qit.forEach(t),lio=r(qk," or "),yB=n(qk,"A",{href:!0});var Wit=s(yB);iio=r(Wit,"BlenderbotTokenizerFast"),Wit.forEach(t),dio=r(qk," (Blenderbot model)"),qk.forEach(t),cio=i(S),sh=n(S,"LI",{});var Wye=s(sh);kle=n(Wye,"STRONG",{});var Hit=s(kle);fio=r(Hit,"blenderbot-small"),Hit.forEach(t),mio=r(Wye," \u2014 "),xB=n(Wye,"A",{href:!0});var Uit=s(xB);gio=r(Uit,"BlenderbotSmallTokenizer"),Uit.forEach(t),hio=r(Wye," (BlenderbotSmall model)"),Wye.forEach(t),pio=i(S),lh=n(S,"LI",{});var Hye=s(lh);Sle=n(Hye,"STRONG",{});var Jit=s(Sle);_io=r(Jit,"bloom"),Jit.forEach(t),uio=r(Hye," \u2014 "),$B=n(Hye,"A",{href:!0});var Yit=s($B);bio=r(Yit,"BloomTokenizerFast"),Yit.forEach(t),vio=r(Hye," (BLOOM model)"),Hye.forEach(t),Fio=i(S),ih=n(S,"LI",{});var Uye=s(ih);Rle=n(Uye,"STRONG",{});var Kit=s(Rle);Tio=r(Kit,"byt5"),Kit.forEach(t),Mio=r(Uye," \u2014 "),kB=n(Uye,"A",{href:!0});var Zit=s(kB);Eio=r(Zit,"ByT5Tokenizer"),Zit.forEach(t),Cio=r(Uye," (ByT5 model)"),Uye.forEach(t),wio=i(S),Wn=n(S,"LI",{});var jk=s(Wn);Ple=n(jk,"STRONG",{});var edt=s(Ple);Aio=r(edt,"camembert"),edt.forEach(t),Lio=r(jk," \u2014 "),SB=n(jk,"A",{href:!0});var odt=s(SB);yio=r(odt,"CamembertTokenizer"),odt.forEach(t),xio=r(jk," or "),RB=n(jk,"A",{href:!0});var rdt=s(RB);$io=r(rdt,"CamembertTokenizerFast"),rdt.forEach(t),kio=r(jk," (CamemBERT model)"),jk.forEach(t),Sio=i(S),dh=n(S,"LI",{});var Jye=s(dh);Ble=n(Jye,"STRONG",{});var tdt=s(Ble);Rio=r(tdt,"canine"),tdt.forEach(t),Pio=r(Jye," \u2014 "),PB=n(Jye,"A",{href:!0});var adt=s(PB);Bio=r(adt,"CanineTokenizer"),adt.forEach(t),Iio=r(Jye," (CANINE model)"),Jye.forEach(t),Nio=i(S),Hn=n(S,"LI",{});var Dk=s(Hn);Ile=n(Dk,"STRONG",{});var ndt=s(Ile);qio=r(ndt,"clip"),ndt.forEach(t),jio=r(Dk," \u2014 "),BB=n(Dk,"A",{href:!0});var sdt=s(BB);Dio=r(sdt,"CLIPTokenizer"),sdt.forEach(t),Gio=r(Dk," or "),IB=n(Dk,"A",{href:!0});var ldt=s(IB);Oio=r(ldt,"CLIPTokenizerFast"),ldt.forEach(t),Vio=r(Dk," (CLIP model)"),Dk.forEach(t),Xio=i(S),Un=n(S,"LI",{});var Gk=s(Un);Nle=n(Gk,"STRONG",{});var idt=s(Nle);zio=r(idt,"codegen"),idt.forEach(t),Qio=r(Gk," \u2014 "),NB=n(Gk,"A",{href:!0});var ddt=s(NB);Wio=r(ddt,"CodeGenTokenizer"),ddt.forEach(t),Hio=r(Gk," or "),qB=n(Gk,"A",{href:!0});var cdt=s(qB);Uio=r(cdt,"CodeGenTokenizerFast"),cdt.forEach(t),Jio=r(Gk," (CodeGen model)"),Gk.forEach(t),Yio=i(S),Jn=n(S,"LI",{});var Ok=s(Jn);qle=n(Ok,"STRONG",{});var fdt=s(qle);Kio=r(fdt,"convbert"),fdt.forEach(t),Zio=r(Ok," \u2014 "),jB=n(Ok,"A",{href:!0});var mdt=s(jB);edo=r(mdt,"ConvBertTokenizer"),mdt.forEach(t),odo=r(Ok," or "),DB=n(Ok,"A",{href:!0});var gdt=s(DB);rdo=r(gdt,"ConvBertTokenizerFast"),gdt.forEach(t),tdo=r(Ok," (ConvBERT model)"),Ok.forEach(t),ado=i(S),Yn=n(S,"LI",{});var Vk=s(Yn);jle=n(Vk,"STRONG",{});var hdt=s(jle);ndo=r(hdt,"cpm"),hdt.forEach(t),sdo=r(Vk," \u2014 "),GB=n(Vk,"A",{href:!0});var pdt=s(GB);ldo=r(pdt,"CpmTokenizer"),pdt.forEach(t),ido=r(Vk," or "),OB=n(Vk,"A",{href:!0});var _dt=s(OB);ddo=r(_dt,"CpmTokenizerFast"),_dt.forEach(t),cdo=r(Vk," (CPM model)"),Vk.forEach(t),fdo=i(S),ch=n(S,"LI",{});var Yye=s(ch);Dle=n(Yye,"STRONG",{});var udt=s(Dle);mdo=r(udt,"ctrl"),udt.forEach(t),gdo=r(Yye," \u2014 "),VB=n(Yye,"A",{href:!0});var bdt=s(VB);hdo=r(bdt,"CTRLTokenizer"),bdt.forEach(t),pdo=r(Yye," (CTRL model)"),Yye.forEach(t),_do=i(S),Kn=n(S,"LI",{});var Xk=s(Kn);Gle=n(Xk,"STRONG",{});var vdt=s(Gle);udo=r(vdt,"data2vec-text"),vdt.forEach(t),bdo=r(Xk," \u2014 "),XB=n(Xk,"A",{href:!0});var Fdt=s(XB);vdo=r(Fdt,"RobertaTokenizer"),Fdt.forEach(t),Fdo=r(Xk," or "),zB=n(Xk,"A",{href:!0});var Tdt=s(zB);Tdo=r(Tdt,"RobertaTokenizerFast"),Tdt.forEach(t),Mdo=r(Xk," (Data2VecText model)"),Xk.forEach(t),Edo=i(S),Zn=n(S,"LI",{});var zk=s(Zn);Ole=n(zk,"STRONG",{});var Mdt=s(Ole);Cdo=r(Mdt,"deberta"),Mdt.forEach(t),wdo=r(zk," \u2014 "),QB=n(zk,"A",{href:!0});var Edt=s(QB);Ado=r(Edt,"DebertaTokenizer"),Edt.forEach(t),Ldo=r(zk," or "),WB=n(zk,"A",{href:!0});var Cdt=s(WB);ydo=r(Cdt,"DebertaTokenizerFast"),Cdt.forEach(t),xdo=r(zk," (DeBERTa model)"),zk.forEach(t),$do=i(S),es=n(S,"LI",{});var Qk=s(es);Vle=n(Qk,"STRONG",{});var wdt=s(Vle);kdo=r(wdt,"deberta-v2"),wdt.forEach(t),Sdo=r(Qk," \u2014 "),HB=n(Qk,"A",{href:!0});var Adt=s(HB);Rdo=r(Adt,"DebertaV2Tokenizer"),Adt.forEach(t),Pdo=r(Qk," or "),UB=n(Qk,"A",{href:!0});var Ldt=s(UB);Bdo=r(Ldt,"DebertaV2TokenizerFast"),Ldt.forEach(t),Ido=r(Qk," (DeBERTa-v2 model)"),Qk.forEach(t),Ndo=i(S),os=n(S,"LI",{});var Wk=s(os);Xle=n(Wk,"STRONG",{});var ydt=s(Xle);qdo=r(ydt,"distilbert"),ydt.forEach(t),jdo=r(Wk," \u2014 "),JB=n(Wk,"A",{href:!0});var xdt=s(JB);Ddo=r(xdt,"DistilBertTokenizer"),xdt.forEach(t),Gdo=r(Wk," or "),YB=n(Wk,"A",{href:!0});var $dt=s(YB);Odo=r($dt,"DistilBertTokenizerFast"),$dt.forEach(t),Vdo=r(Wk," (DistilBERT model)"),Wk.forEach(t),Xdo=i(S),rs=n(S,"LI",{});var Hk=s(rs);zle=n(Hk,"STRONG",{});var kdt=s(zle);zdo=r(kdt,"dpr"),kdt.forEach(t),Qdo=r(Hk," \u2014 "),KB=n(Hk,"A",{href:!0});var Sdt=s(KB);Wdo=r(Sdt,"DPRQuestionEncoderTokenizer"),Sdt.forEach(t),Hdo=r(Hk," or "),ZB=n(Hk,"A",{href:!0});var Rdt=s(ZB);Udo=r(Rdt,"DPRQuestionEncoderTokenizerFast"),Rdt.forEach(t),Jdo=r(Hk," (DPR model)"),Hk.forEach(t),Ydo=i(S),ts=n(S,"LI",{});var Uk=s(ts);Qle=n(Uk,"STRONG",{});var Pdt=s(Qle);Kdo=r(Pdt,"electra"),Pdt.forEach(t),Zdo=r(Uk," \u2014 "),eI=n(Uk,"A",{href:!0});var Bdt=s(eI);eco=r(Bdt,"ElectraTokenizer"),Bdt.forEach(t),oco=r(Uk," or "),oI=n(Uk,"A",{href:!0});var Idt=s(oI);rco=r(Idt,"ElectraTokenizerFast"),Idt.forEach(t),tco=r(Uk," (ELECTRA model)"),Uk.forEach(t),aco=i(S),fh=n(S,"LI",{});var Kye=s(fh);Wle=n(Kye,"STRONG",{});var Ndt=s(Wle);nco=r(Ndt,"flaubert"),Ndt.forEach(t),sco=r(Kye," \u2014 "),rI=n(Kye,"A",{href:!0});var qdt=s(rI);lco=r(qdt,"FlaubertTokenizer"),qdt.forEach(t),ico=r(Kye," (FlauBERT model)"),Kye.forEach(t),dco=i(S),as=n(S,"LI",{});var Jk=s(as);Hle=n(Jk,"STRONG",{});var jdt=s(Hle);cco=r(jdt,"fnet"),jdt.forEach(t),fco=r(Jk," \u2014 "),tI=n(Jk,"A",{href:!0});var Ddt=s(tI);mco=r(Ddt,"FNetTokenizer"),Ddt.forEach(t),gco=r(Jk," or "),aI=n(Jk,"A",{href:!0});var Gdt=s(aI);hco=r(Gdt,"FNetTokenizerFast"),Gdt.forEach(t),pco=r(Jk," (FNet model)"),Jk.forEach(t),_co=i(S),mh=n(S,"LI",{});var Zye=s(mh);Ule=n(Zye,"STRONG",{});var Odt=s(Ule);uco=r(Odt,"fsmt"),Odt.forEach(t),bco=r(Zye," \u2014 "),nI=n(Zye,"A",{href:!0});var Vdt=s(nI);vco=r(Vdt,"FSMTTokenizer"),Vdt.forEach(t),Fco=r(Zye," (FairSeq Machine-Translation model)"),Zye.forEach(t),Tco=i(S),ns=n(S,"LI",{});var Yk=s(ns);Jle=n(Yk,"STRONG",{});var Xdt=s(Jle);Mco=r(Xdt,"funnel"),Xdt.forEach(t),Eco=r(Yk," \u2014 "),sI=n(Yk,"A",{href:!0});var zdt=s(sI);Cco=r(zdt,"FunnelTokenizer"),zdt.forEach(t),wco=r(Yk," or "),lI=n(Yk,"A",{href:!0});var Qdt=s(lI);Aco=r(Qdt,"FunnelTokenizerFast"),Qdt.forEach(t),Lco=r(Yk," (Funnel Transformer model)"),Yk.forEach(t),yco=i(S),ss=n(S,"LI",{});var Kk=s(ss);Yle=n(Kk,"STRONG",{});var Wdt=s(Yle);xco=r(Wdt,"gpt2"),Wdt.forEach(t),$co=r(Kk," \u2014 "),iI=n(Kk,"A",{href:!0});var Hdt=s(iI);kco=r(Hdt,"GPT2Tokenizer"),Hdt.forEach(t),Sco=r(Kk," or "),dI=n(Kk,"A",{href:!0});var Udt=s(dI);Rco=r(Udt,"GPT2TokenizerFast"),Udt.forEach(t),Pco=r(Kk," (OpenAI GPT-2 model)"),Kk.forEach(t),Bco=i(S),ls=n(S,"LI",{});var Zk=s(ls);Kle=n(Zk,"STRONG",{});var Jdt=s(Kle);Ico=r(Jdt,"gpt_neo"),Jdt.forEach(t),Nco=r(Zk," \u2014 "),cI=n(Zk,"A",{href:!0});var Ydt=s(cI);qco=r(Ydt,"GPT2Tokenizer"),Ydt.forEach(t),jco=r(Zk," or "),fI=n(Zk,"A",{href:!0});var Kdt=s(fI);Dco=r(Kdt,"GPT2TokenizerFast"),Kdt.forEach(t),Gco=r(Zk," (GPT Neo model)"),Zk.forEach(t),Oco=i(S),gh=n(S,"LI",{});var e8e=s(gh);Zle=n(e8e,"STRONG",{});var Zdt=s(Zle);Vco=r(Zdt,"gpt_neox"),Zdt.forEach(t),Xco=r(e8e," \u2014 "),mI=n(e8e,"A",{href:!0});var ect=s(mI);zco=r(ect,"GPTNeoXTokenizerFast"),ect.forEach(t),Qco=r(e8e," (GPT NeoX model)"),e8e.forEach(t),Wco=i(S),is=n(S,"LI",{});var eS=s(is);eie=n(eS,"STRONG",{});var oct=s(eie);Hco=r(oct,"gptj"),oct.forEach(t),Uco=r(eS," \u2014 "),gI=n(eS,"A",{href:!0});var rct=s(gI);Jco=r(rct,"GPT2Tokenizer"),rct.forEach(t),Yco=r(eS," or "),hI=n(eS,"A",{href:!0});var tct=s(hI);Kco=r(tct,"GPT2TokenizerFast"),tct.forEach(t),Zco=r(eS," (GPT-J model)"),eS.forEach(t),efo=i(S),ds=n(S,"LI",{});var oS=s(ds);oie=n(oS,"STRONG",{});var act=s(oie);ofo=r(act,"groupvit"),act.forEach(t),rfo=r(oS," \u2014 "),pI=n(oS,"A",{href:!0});var nct=s(pI);tfo=r(nct,"CLIPTokenizer"),nct.forEach(t),afo=r(oS," or "),_I=n(oS,"A",{href:!0});var sct=s(_I);nfo=r(sct,"CLIPTokenizerFast"),sct.forEach(t),sfo=r(oS," (GroupViT model)"),oS.forEach(t),lfo=i(S),cs=n(S,"LI",{});var rS=s(cs);rie=n(rS,"STRONG",{});var lct=s(rie);ifo=r(lct,"herbert"),lct.forEach(t),dfo=r(rS," \u2014 "),uI=n(rS,"A",{href:!0});var ict=s(uI);cfo=r(ict,"HerbertTokenizer"),ict.forEach(t),ffo=r(rS," or "),bI=n(rS,"A",{href:!0});var dct=s(bI);mfo=r(dct,"HerbertTokenizerFast"),dct.forEach(t),gfo=r(rS," (HerBERT model)"),rS.forEach(t),hfo=i(S),hh=n(S,"LI",{});var o8e=s(hh);tie=n(o8e,"STRONG",{});var cct=s(tie);pfo=r(cct,"hubert"),cct.forEach(t),_fo=r(o8e," \u2014 "),vI=n(o8e,"A",{href:!0});var fct=s(vI);ufo=r(fct,"Wav2Vec2CTCTokenizer"),fct.forEach(t),bfo=r(o8e," (Hubert model)"),o8e.forEach(t),vfo=i(S),fs=n(S,"LI",{});var tS=s(fs);aie=n(tS,"STRONG",{});var mct=s(aie);Ffo=r(mct,"ibert"),mct.forEach(t),Tfo=r(tS," \u2014 "),FI=n(tS,"A",{href:!0});var gct=s(FI);Mfo=r(gct,"RobertaTokenizer"),gct.forEach(t),Efo=r(tS," or "),TI=n(tS,"A",{href:!0});var hct=s(TI);Cfo=r(hct,"RobertaTokenizerFast"),hct.forEach(t),wfo=r(tS," (I-BERT model)"),tS.forEach(t),Afo=i(S),ms=n(S,"LI",{});var aS=s(ms);nie=n(aS,"STRONG",{});var pct=s(nie);Lfo=r(pct,"layoutlm"),pct.forEach(t),yfo=r(aS," \u2014 "),MI=n(aS,"A",{href:!0});var _ct=s(MI);xfo=r(_ct,"LayoutLMTokenizer"),_ct.forEach(t),$fo=r(aS," or "),EI=n(aS,"A",{href:!0});var uct=s(EI);kfo=r(uct,"LayoutLMTokenizerFast"),uct.forEach(t),Sfo=r(aS," (LayoutLM model)"),aS.forEach(t),Rfo=i(S),gs=n(S,"LI",{});var nS=s(gs);sie=n(nS,"STRONG",{});var bct=s(sie);Pfo=r(bct,"layoutlmv2"),bct.forEach(t),Bfo=r(nS," \u2014 "),CI=n(nS,"A",{href:!0});var vct=s(CI);Ifo=r(vct,"LayoutLMv2Tokenizer"),vct.forEach(t),Nfo=r(nS," or "),wI=n(nS,"A",{href:!0});var Fct=s(wI);qfo=r(Fct,"LayoutLMv2TokenizerFast"),Fct.forEach(t),jfo=r(nS," (LayoutLMv2 model)"),nS.forEach(t),Dfo=i(S),hs=n(S,"LI",{});var sS=s(hs);lie=n(sS,"STRONG",{});var Tct=s(lie);Gfo=r(Tct,"layoutlmv3"),Tct.forEach(t),Ofo=r(sS," \u2014 "),AI=n(sS,"A",{href:!0});var Mct=s(AI);Vfo=r(Mct,"LayoutLMv3Tokenizer"),Mct.forEach(t),Xfo=r(sS," or "),LI=n(sS,"A",{href:!0});var Ect=s(LI);zfo=r(Ect,"LayoutLMv3TokenizerFast"),Ect.forEach(t),Qfo=r(sS," (LayoutLMv3 model)"),sS.forEach(t),Wfo=i(S),ps=n(S,"LI",{});var lS=s(ps);iie=n(lS,"STRONG",{});var Cct=s(iie);Hfo=r(Cct,"layoutxlm"),Cct.forEach(t),Ufo=r(lS," \u2014 "),yI=n(lS,"A",{href:!0});var wct=s(yI);Jfo=r(wct,"LayoutXLMTokenizer"),wct.forEach(t),Yfo=r(lS," or "),xI=n(lS,"A",{href:!0});var Act=s(xI);Kfo=r(Act,"LayoutXLMTokenizerFast"),Act.forEach(t),Zfo=r(lS," (LayoutXLM model)"),lS.forEach(t),emo=i(S),_s=n(S,"LI",{});var iS=s(_s);die=n(iS,"STRONG",{});var Lct=s(die);omo=r(Lct,"led"),Lct.forEach(t),rmo=r(iS," \u2014 "),$I=n(iS,"A",{href:!0});var yct=s($I);tmo=r(yct,"LEDTokenizer"),yct.forEach(t),amo=r(iS," or "),kI=n(iS,"A",{href:!0});var xct=s(kI);nmo=r(xct,"LEDTokenizerFast"),xct.forEach(t),smo=r(iS," (LED model)"),iS.forEach(t),lmo=i(S),us=n(S,"LI",{});var dS=s(us);cie=n(dS,"STRONG",{});var $ct=s(cie);imo=r($ct,"longformer"),$ct.forEach(t),dmo=r(dS," \u2014 "),SI=n(dS,"A",{href:!0});var kct=s(SI);cmo=r(kct,"LongformerTokenizer"),kct.forEach(t),fmo=r(dS," or "),RI=n(dS,"A",{href:!0});var Sct=s(RI);mmo=r(Sct,"LongformerTokenizerFast"),Sct.forEach(t),gmo=r(dS," (Longformer model)"),dS.forEach(t),hmo=i(S),bs=n(S,"LI",{});var cS=s(bs);fie=n(cS,"STRONG",{});var Rct=s(fie);pmo=r(Rct,"longt5"),Rct.forEach(t),_mo=r(cS," \u2014 "),PI=n(cS,"A",{href:!0});var Pct=s(PI);umo=r(Pct,"T5Tokenizer"),Pct.forEach(t),bmo=r(cS," or "),BI=n(cS,"A",{href:!0});var Bct=s(BI);vmo=r(Bct,"T5TokenizerFast"),Bct.forEach(t),Fmo=r(cS," (LongT5 model)"),cS.forEach(t),Tmo=i(S),ph=n(S,"LI",{});var r8e=s(ph);mie=n(r8e,"STRONG",{});var Ict=s(mie);Mmo=r(Ict,"luke"),Ict.forEach(t),Emo=r(r8e," \u2014 "),II=n(r8e,"A",{href:!0});var Nct=s(II);Cmo=r(Nct,"LukeTokenizer"),Nct.forEach(t),wmo=r(r8e," (LUKE model)"),r8e.forEach(t),Amo=i(S),vs=n(S,"LI",{});var fS=s(vs);gie=n(fS,"STRONG",{});var qct=s(gie);Lmo=r(qct,"lxmert"),qct.forEach(t),ymo=r(fS," \u2014 "),NI=n(fS,"A",{href:!0});var jct=s(NI);xmo=r(jct,"LxmertTokenizer"),jct.forEach(t),$mo=r(fS," or "),qI=n(fS,"A",{href:!0});var Dct=s(qI);kmo=r(Dct,"LxmertTokenizerFast"),Dct.forEach(t),Smo=r(fS," (LXMERT model)"),fS.forEach(t),Rmo=i(S),_h=n(S,"LI",{});var t8e=s(_h);hie=n(t8e,"STRONG",{});var Gct=s(hie);Pmo=r(Gct,"m2m_100"),Gct.forEach(t),Bmo=r(t8e," \u2014 "),jI=n(t8e,"A",{href:!0});var Oct=s(jI);Imo=r(Oct,"M2M100Tokenizer"),Oct.forEach(t),Nmo=r(t8e," (M2M100 model)"),t8e.forEach(t),qmo=i(S),uh=n(S,"LI",{});var a8e=s(uh);pie=n(a8e,"STRONG",{});var Vct=s(pie);jmo=r(Vct,"marian"),Vct.forEach(t),Dmo=r(a8e," \u2014 "),DI=n(a8e,"A",{href:!0});var Xct=s(DI);Gmo=r(Xct,"MarianTokenizer"),Xct.forEach(t),Omo=r(a8e," (Marian model)"),a8e.forEach(t),Vmo=i(S),Fs=n(S,"LI",{});var mS=s(Fs);_ie=n(mS,"STRONG",{});var zct=s(_ie);Xmo=r(zct,"mbart"),zct.forEach(t),zmo=r(mS," \u2014 "),GI=n(mS,"A",{href:!0});var Qct=s(GI);Qmo=r(Qct,"MBartTokenizer"),Qct.forEach(t),Wmo=r(mS," or "),OI=n(mS,"A",{href:!0});var Wct=s(OI);Hmo=r(Wct,"MBartTokenizerFast"),Wct.forEach(t),Umo=r(mS," (mBART model)"),mS.forEach(t),Jmo=i(S),Ts=n(S,"LI",{});var gS=s(Ts);uie=n(gS,"STRONG",{});var Hct=s(uie);Ymo=r(Hct,"mbart50"),Hct.forEach(t),Kmo=r(gS," \u2014 "),VI=n(gS,"A",{href:!0});var Uct=s(VI);Zmo=r(Uct,"MBart50Tokenizer"),Uct.forEach(t),ego=r(gS," or "),XI=n(gS,"A",{href:!0});var Jct=s(XI);ogo=r(Jct,"MBart50TokenizerFast"),Jct.forEach(t),rgo=r(gS," (mBART-50 model)"),gS.forEach(t),tgo=i(S),Ms=n(S,"LI",{});var hS=s(Ms);bie=n(hS,"STRONG",{});var Yct=s(bie);ago=r(Yct,"megatron-bert"),Yct.forEach(t),ngo=r(hS," \u2014 "),zI=n(hS,"A",{href:!0});var Kct=s(zI);sgo=r(Kct,"BertTokenizer"),Kct.forEach(t),lgo=r(hS," or "),QI=n(hS,"A",{href:!0});var Zct=s(QI);igo=r(Zct,"BertTokenizerFast"),Zct.forEach(t),dgo=r(hS," (Megatron-BERT model)"),hS.forEach(t),cgo=i(S),bh=n(S,"LI",{});var n8e=s(bh);vie=n(n8e,"STRONG",{});var eft=s(vie);fgo=r(eft,"mluke"),eft.forEach(t),mgo=r(n8e," \u2014 "),WI=n(n8e,"A",{href:!0});var oft=s(WI);ggo=r(oft,"MLukeTokenizer"),oft.forEach(t),hgo=r(n8e," (mLUKE model)"),n8e.forEach(t),pgo=i(S),Es=n(S,"LI",{});var pS=s(Es);Fie=n(pS,"STRONG",{});var rft=s(Fie);_go=r(rft,"mobilebert"),rft.forEach(t),ugo=r(pS," \u2014 "),HI=n(pS,"A",{href:!0});var tft=s(HI);bgo=r(tft,"MobileBertTokenizer"),tft.forEach(t),vgo=r(pS," or "),UI=n(pS,"A",{href:!0});var aft=s(UI);Fgo=r(aft,"MobileBertTokenizerFast"),aft.forEach(t),Tgo=r(pS," (MobileBERT model)"),pS.forEach(t),Mgo=i(S),Cs=n(S,"LI",{});var _S=s(Cs);Tie=n(_S,"STRONG",{});var nft=s(Tie);Ego=r(nft,"mpnet"),nft.forEach(t),Cgo=r(_S," \u2014 "),JI=n(_S,"A",{href:!0});var sft=s(JI);wgo=r(sft,"MPNetTokenizer"),sft.forEach(t),Ago=r(_S," or "),YI=n(_S,"A",{href:!0});var lft=s(YI);Lgo=r(lft,"MPNetTokenizerFast"),lft.forEach(t),ygo=r(_S," (MPNet model)"),_S.forEach(t),xgo=i(S),ws=n(S,"LI",{});var uS=s(ws);Mie=n(uS,"STRONG",{});var ift=s(Mie);$go=r(ift,"mt5"),ift.forEach(t),kgo=r(uS," \u2014 "),KI=n(uS,"A",{href:!0});var dft=s(KI);Sgo=r(dft,"MT5Tokenizer"),dft.forEach(t),Rgo=r(uS," or "),ZI=n(uS,"A",{href:!0});var cft=s(ZI);Pgo=r(cft,"MT5TokenizerFast"),cft.forEach(t),Bgo=r(uS," (MT5 model)"),uS.forEach(t),Igo=i(S),As=n(S,"LI",{});var bS=s(As);Eie=n(bS,"STRONG",{});var fft=s(Eie);Ngo=r(fft,"mvp"),fft.forEach(t),qgo=r(bS," \u2014 "),eN=n(bS,"A",{href:!0});var mft=s(eN);jgo=r(mft,"MvpTokenizer"),mft.forEach(t),Dgo=r(bS," or "),oN=n(bS,"A",{href:!0});var gft=s(oN);Ggo=r(gft,"MvpTokenizerFast"),gft.forEach(t),Ogo=r(bS," (MVP model)"),bS.forEach(t),Vgo=i(S),Ls=n(S,"LI",{});var vS=s(Ls);Cie=n(vS,"STRONG",{});var hft=s(Cie);Xgo=r(hft,"nezha"),hft.forEach(t),zgo=r(vS," \u2014 "),rN=n(vS,"A",{href:!0});var pft=s(rN);Qgo=r(pft,"BertTokenizer"),pft.forEach(t),Wgo=r(vS," or "),tN=n(vS,"A",{href:!0});var _ft=s(tN);Hgo=r(_ft,"BertTokenizerFast"),_ft.forEach(t),Ugo=r(vS," (Nezha model)"),vS.forEach(t),Jgo=i(S),ys=n(S,"LI",{});var FS=s(ys);wie=n(FS,"STRONG",{});var uft=s(wie);Ygo=r(uft,"nllb"),uft.forEach(t),Kgo=r(FS," \u2014 "),aN=n(FS,"A",{href:!0});var bft=s(aN);Zgo=r(bft,"NllbTokenizer"),bft.forEach(t),eho=r(FS," or "),nN=n(FS,"A",{href:!0});var vft=s(nN);oho=r(vft,"NllbTokenizerFast"),vft.forEach(t),rho=r(FS," (NLLB model)"),FS.forEach(t),tho=i(S),xs=n(S,"LI",{});var TS=s(xs);Aie=n(TS,"STRONG",{});var Fft=s(Aie);aho=r(Fft,"nystromformer"),Fft.forEach(t),nho=r(TS," \u2014 "),sN=n(TS,"A",{href:!0});var Tft=s(sN);sho=r(Tft,"AlbertTokenizer"),Tft.forEach(t),lho=r(TS," or "),lN=n(TS,"A",{href:!0});var Mft=s(lN);iho=r(Mft,"AlbertTokenizerFast"),Mft.forEach(t),dho=r(TS," (Nystr\xF6mformer model)"),TS.forEach(t),cho=i(S),$s=n(S,"LI",{});var MS=s($s);Lie=n(MS,"STRONG",{});var Eft=s(Lie);fho=r(Eft,"openai-gpt"),Eft.forEach(t),mho=r(MS," \u2014 "),iN=n(MS,"A",{href:!0});var Cft=s(iN);gho=r(Cft,"OpenAIGPTTokenizer"),Cft.forEach(t),hho=r(MS," or "),dN=n(MS,"A",{href:!0});var wft=s(dN);pho=r(wft,"OpenAIGPTTokenizerFast"),wft.forEach(t),_ho=r(MS," (OpenAI GPT model)"),MS.forEach(t),uho=i(S),vh=n(S,"LI",{});var s8e=s(vh);yie=n(s8e,"STRONG",{});var Aft=s(yie);bho=r(Aft,"opt"),Aft.forEach(t),vho=r(s8e," \u2014 "),cN=n(s8e,"A",{href:!0});var Lft=s(cN);Fho=r(Lft,"GPT2Tokenizer"),Lft.forEach(t),Tho=r(s8e," (OPT model)"),s8e.forEach(t),Mho=i(S),ks=n(S,"LI",{});var ES=s(ks);xie=n(ES,"STRONG",{});var yft=s(xie);Eho=r(yft,"pegasus"),yft.forEach(t),Cho=r(ES," \u2014 "),fN=n(ES,"A",{href:!0});var xft=s(fN);who=r(xft,"PegasusTokenizer"),xft.forEach(t),Aho=r(ES," or "),mN=n(ES,"A",{href:!0});var $ft=s(mN);Lho=r($ft,"PegasusTokenizerFast"),$ft.forEach(t),yho=r(ES," (Pegasus model)"),ES.forEach(t),xho=i(S),Fh=n(S,"LI",{});var l8e=s(Fh);$ie=n(l8e,"STRONG",{});var kft=s($ie);$ho=r(kft,"perceiver"),kft.forEach(t),kho=r(l8e," \u2014 "),gN=n(l8e,"A",{href:!0});var Sft=s(gN);Sho=r(Sft,"PerceiverTokenizer"),Sft.forEach(t),Rho=r(l8e," (Perceiver model)"),l8e.forEach(t),Pho=i(S),Th=n(S,"LI",{});var i8e=s(Th);kie=n(i8e,"STRONG",{});var Rft=s(kie);Bho=r(Rft,"phobert"),Rft.forEach(t),Iho=r(i8e," \u2014 "),hN=n(i8e,"A",{href:!0});var Pft=s(hN);Nho=r(Pft,"PhobertTokenizer"),Pft.forEach(t),qho=r(i8e," (PhoBERT model)"),i8e.forEach(t),jho=i(S),Mh=n(S,"LI",{});var d8e=s(Mh);Sie=n(d8e,"STRONG",{});var Bft=s(Sie);Dho=r(Bft,"plbart"),Bft.forEach(t),Gho=r(d8e," \u2014 "),pN=n(d8e,"A",{href:!0});var Ift=s(pN);Oho=r(Ift,"PLBartTokenizer"),Ift.forEach(t),Vho=r(d8e," (PLBart model)"),d8e.forEach(t),Xho=i(S),Eh=n(S,"LI",{});var c8e=s(Eh);Rie=n(c8e,"STRONG",{});var Nft=s(Rie);zho=r(Nft,"prophetnet"),Nft.forEach(t),Qho=r(c8e," \u2014 "),_N=n(c8e,"A",{href:!0});var qft=s(_N);Who=r(qft,"ProphetNetTokenizer"),qft.forEach(t),Hho=r(c8e," (ProphetNet model)"),c8e.forEach(t),Uho=i(S),Ss=n(S,"LI",{});var CS=s(Ss);Pie=n(CS,"STRONG",{});var jft=s(Pie);Jho=r(jft,"qdqbert"),jft.forEach(t),Yho=r(CS," \u2014 "),uN=n(CS,"A",{href:!0});var Dft=s(uN);Kho=r(Dft,"BertTokenizer"),Dft.forEach(t),Zho=r(CS," or "),bN=n(CS,"A",{href:!0});var Gft=s(bN);epo=r(Gft,"BertTokenizerFast"),Gft.forEach(t),opo=r(CS," (QDQBert model)"),CS.forEach(t),rpo=i(S),Ch=n(S,"LI",{});var f8e=s(Ch);Bie=n(f8e,"STRONG",{});var Oft=s(Bie);tpo=r(Oft,"rag"),Oft.forEach(t),apo=r(f8e," \u2014 "),vN=n(f8e,"A",{href:!0});var Vft=s(vN);npo=r(Vft,"RagTokenizer"),Vft.forEach(t),spo=r(f8e," (RAG model)"),f8e.forEach(t),lpo=i(S),Rs=n(S,"LI",{});var wS=s(Rs);Iie=n(wS,"STRONG",{});var Xft=s(Iie);ipo=r(Xft,"realm"),Xft.forEach(t),dpo=r(wS," \u2014 "),FN=n(wS,"A",{href:!0});var zft=s(FN);cpo=r(zft,"RealmTokenizer"),zft.forEach(t),fpo=r(wS," or "),TN=n(wS,"A",{href:!0});var Qft=s(TN);mpo=r(Qft,"RealmTokenizerFast"),Qft.forEach(t),gpo=r(wS," (REALM model)"),wS.forEach(t),hpo=i(S),Ps=n(S,"LI",{});var AS=s(Ps);Nie=n(AS,"STRONG",{});var Wft=s(Nie);ppo=r(Wft,"reformer"),Wft.forEach(t),_po=r(AS," \u2014 "),MN=n(AS,"A",{href:!0});var Hft=s(MN);upo=r(Hft,"ReformerTokenizer"),Hft.forEach(t),bpo=r(AS," or "),EN=n(AS,"A",{href:!0});var Uft=s(EN);vpo=r(Uft,"ReformerTokenizerFast"),Uft.forEach(t),Fpo=r(AS," (Reformer model)"),AS.forEach(t),Tpo=i(S),Bs=n(S,"LI",{});var LS=s(Bs);qie=n(LS,"STRONG",{});var Jft=s(qie);Mpo=r(Jft,"rembert"),Jft.forEach(t),Epo=r(LS," \u2014 "),CN=n(LS,"A",{href:!0});var Yft=s(CN);Cpo=r(Yft,"RemBertTokenizer"),Yft.forEach(t),wpo=r(LS," or "),wN=n(LS,"A",{href:!0});var Kft=s(wN);Apo=r(Kft,"RemBertTokenizerFast"),Kft.forEach(t),Lpo=r(LS," (RemBERT model)"),LS.forEach(t),ypo=i(S),Is=n(S,"LI",{});var yS=s(Is);jie=n(yS,"STRONG",{});var Zft=s(jie);xpo=r(Zft,"retribert"),Zft.forEach(t),$po=r(yS," \u2014 "),AN=n(yS,"A",{href:!0});var emt=s(AN);kpo=r(emt,"RetriBertTokenizer"),emt.forEach(t),Spo=r(yS," or "),LN=n(yS,"A",{href:!0});var omt=s(LN);Rpo=r(omt,"RetriBertTokenizerFast"),omt.forEach(t),Ppo=r(yS," (RetriBERT model)"),yS.forEach(t),Bpo=i(S),Ns=n(S,"LI",{});var xS=s(Ns);Die=n(xS,"STRONG",{});var rmt=s(Die);Ipo=r(rmt,"roberta"),rmt.forEach(t),Npo=r(xS," \u2014 "),yN=n(xS,"A",{href:!0});var tmt=s(yN);qpo=r(tmt,"RobertaTokenizer"),tmt.forEach(t),jpo=r(xS," or "),xN=n(xS,"A",{href:!0});var amt=s(xN);Dpo=r(amt,"RobertaTokenizerFast"),amt.forEach(t),Gpo=r(xS," (RoBERTa model)"),xS.forEach(t),Opo=i(S),qs=n(S,"LI",{});var $S=s(qs);Gie=n($S,"STRONG",{});var nmt=s(Gie);Vpo=r(nmt,"roformer"),nmt.forEach(t),Xpo=r($S," \u2014 "),$N=n($S,"A",{href:!0});var smt=s($N);zpo=r(smt,"RoFormerTokenizer"),smt.forEach(t),Qpo=r($S," or "),kN=n($S,"A",{href:!0});var lmt=s(kN);Wpo=r(lmt,"RoFormerTokenizerFast"),lmt.forEach(t),Hpo=r($S," (RoFormer model)"),$S.forEach(t),Upo=i(S),wh=n(S,"LI",{});var m8e=s(wh);Oie=n(m8e,"STRONG",{});var imt=s(Oie);Jpo=r(imt,"speech_to_text"),imt.forEach(t),Ypo=r(m8e," \u2014 "),SN=n(m8e,"A",{href:!0});var dmt=s(SN);Kpo=r(dmt,"Speech2TextTokenizer"),dmt.forEach(t),Zpo=r(m8e," (Speech2Text model)"),m8e.forEach(t),e_o=i(S),Ah=n(S,"LI",{});var g8e=s(Ah);Vie=n(g8e,"STRONG",{});var cmt=s(Vie);o_o=r(cmt,"speech_to_text_2"),cmt.forEach(t),r_o=r(g8e," \u2014 "),RN=n(g8e,"A",{href:!0});var fmt=s(RN);t_o=r(fmt,"Speech2Text2Tokenizer"),fmt.forEach(t),a_o=r(g8e," (Speech2Text2 model)"),g8e.forEach(t),n_o=i(S),js=n(S,"LI",{});var kS=s(js);Xie=n(kS,"STRONG",{});var mmt=s(Xie);s_o=r(mmt,"splinter"),mmt.forEach(t),l_o=r(kS," \u2014 "),PN=n(kS,"A",{href:!0});var gmt=s(PN);i_o=r(gmt,"SplinterTokenizer"),gmt.forEach(t),d_o=r(kS," or "),BN=n(kS,"A",{href:!0});var hmt=s(BN);c_o=r(hmt,"SplinterTokenizerFast"),hmt.forEach(t),f_o=r(kS," (Splinter model)"),kS.forEach(t),m_o=i(S),Ds=n(S,"LI",{});var SS=s(Ds);zie=n(SS,"STRONG",{});var pmt=s(zie);g_o=r(pmt,"squeezebert"),pmt.forEach(t),h_o=r(SS," \u2014 "),IN=n(SS,"A",{href:!0});var _mt=s(IN);p_o=r(_mt,"SqueezeBertTokenizer"),_mt.forEach(t),__o=r(SS," or "),NN=n(SS,"A",{href:!0});var umt=s(NN);u_o=r(umt,"SqueezeBertTokenizerFast"),umt.forEach(t),b_o=r(SS," (SqueezeBERT model)"),SS.forEach(t),v_o=i(S),Gs=n(S,"LI",{});var RS=s(Gs);Qie=n(RS,"STRONG",{});var bmt=s(Qie);F_o=r(bmt,"t5"),bmt.forEach(t),T_o=r(RS," \u2014 "),qN=n(RS,"A",{href:!0});var vmt=s(qN);M_o=r(vmt,"T5Tokenizer"),vmt.forEach(t),E_o=r(RS," or "),jN=n(RS,"A",{href:!0});var Fmt=s(jN);C_o=r(Fmt,"T5TokenizerFast"),Fmt.forEach(t),w_o=r(RS," (T5 model)"),RS.forEach(t),A_o=i(S),Lh=n(S,"LI",{});var h8e=s(Lh);Wie=n(h8e,"STRONG",{});var Tmt=s(Wie);L_o=r(Tmt,"tapas"),Tmt.forEach(t),y_o=r(h8e," \u2014 "),DN=n(h8e,"A",{href:!0});var Mmt=s(DN);x_o=r(Mmt,"TapasTokenizer"),Mmt.forEach(t),$_o=r(h8e," (TAPAS model)"),h8e.forEach(t),k_o=i(S),yh=n(S,"LI",{});var p8e=s(yh);Hie=n(p8e,"STRONG",{});var Emt=s(Hie);S_o=r(Emt,"tapex"),Emt.forEach(t),R_o=r(p8e," \u2014 "),GN=n(p8e,"A",{href:!0});var Cmt=s(GN);P_o=r(Cmt,"TapexTokenizer"),Cmt.forEach(t),B_o=r(p8e," (TAPEX model)"),p8e.forEach(t),I_o=i(S),xh=n(S,"LI",{});var _8e=s(xh);Uie=n(_8e,"STRONG",{});var wmt=s(Uie);N_o=r(wmt,"transfo-xl"),wmt.forEach(t),q_o=r(_8e," \u2014 "),ON=n(_8e,"A",{href:!0});var Amt=s(ON);j_o=r(Amt,"TransfoXLTokenizer"),Amt.forEach(t),D_o=r(_8e," (Transformer-XL model)"),_8e.forEach(t),G_o=i(S),Os=n(S,"LI",{});var PS=s(Os);Jie=n(PS,"STRONG",{});var Lmt=s(Jie);O_o=r(Lmt,"vilt"),Lmt.forEach(t),V_o=r(PS," \u2014 "),VN=n(PS,"A",{href:!0});var ymt=s(VN);X_o=r(ymt,"BertTokenizer"),ymt.forEach(t),z_o=r(PS," or "),XN=n(PS,"A",{href:!0});var xmt=s(XN);Q_o=r(xmt,"BertTokenizerFast"),xmt.forEach(t),W_o=r(PS," (ViLT model)"),PS.forEach(t),H_o=i(S),Vs=n(S,"LI",{});var BS=s(Vs);Yie=n(BS,"STRONG",{});var $mt=s(Yie);U_o=r($mt,"visual_bert"),$mt.forEach(t),J_o=r(BS," \u2014 "),zN=n(BS,"A",{href:!0});var kmt=s(zN);Y_o=r(kmt,"BertTokenizer"),kmt.forEach(t),K_o=r(BS," or "),QN=n(BS,"A",{href:!0});var Smt=s(QN);Z_o=r(Smt,"BertTokenizerFast"),Smt.forEach(t),euo=r(BS," (VisualBERT model)"),BS.forEach(t),ouo=i(S),$h=n(S,"LI",{});var u8e=s($h);Kie=n(u8e,"STRONG",{});var Rmt=s(Kie);ruo=r(Rmt,"wav2vec2"),Rmt.forEach(t),tuo=r(u8e," \u2014 "),WN=n(u8e,"A",{href:!0});var Pmt=s(WN);auo=r(Pmt,"Wav2Vec2CTCTokenizer"),Pmt.forEach(t),nuo=r(u8e," (Wav2Vec2 model)"),u8e.forEach(t),suo=i(S),kh=n(S,"LI",{});var b8e=s(kh);Zie=n(b8e,"STRONG",{});var Bmt=s(Zie);luo=r(Bmt,"wav2vec2-conformer"),Bmt.forEach(t),iuo=r(b8e," \u2014 "),HN=n(b8e,"A",{href:!0});var Imt=s(HN);duo=r(Imt,"Wav2Vec2CTCTokenizer"),Imt.forEach(t),cuo=r(b8e," (Wav2Vec2-Conformer model)"),b8e.forEach(t),fuo=i(S),Sh=n(S,"LI",{});var v8e=s(Sh);ede=n(v8e,"STRONG",{});var Nmt=s(ede);muo=r(Nmt,"wav2vec2_phoneme"),Nmt.forEach(t),guo=r(v8e," \u2014 "),UN=n(v8e,"A",{href:!0});var qmt=s(UN);huo=r(qmt,"Wav2Vec2PhonemeCTCTokenizer"),qmt.forEach(t),puo=r(v8e," (Wav2Vec2Phoneme model)"),v8e.forEach(t),_uo=i(S),Xs=n(S,"LI",{});var IS=s(Xs);ode=n(IS,"STRONG",{});var jmt=s(ode);uuo=r(jmt,"xglm"),jmt.forEach(t),buo=r(IS," \u2014 "),JN=n(IS,"A",{href:!0});var Dmt=s(JN);vuo=r(Dmt,"XGLMTokenizer"),Dmt.forEach(t),Fuo=r(IS," or "),YN=n(IS,"A",{href:!0});var Gmt=s(YN);Tuo=r(Gmt,"XGLMTokenizerFast"),Gmt.forEach(t),Muo=r(IS," (XGLM model)"),IS.forEach(t),Euo=i(S),Rh=n(S,"LI",{});var F8e=s(Rh);rde=n(F8e,"STRONG",{});var Omt=s(rde);Cuo=r(Omt,"xlm"),Omt.forEach(t),wuo=r(F8e," \u2014 "),KN=n(F8e,"A",{href:!0});var Vmt=s(KN);Auo=r(Vmt,"XLMTokenizer"),Vmt.forEach(t),Luo=r(F8e," (XLM model)"),F8e.forEach(t),yuo=i(S),Ph=n(S,"LI",{});var T8e=s(Ph);tde=n(T8e,"STRONG",{});var Xmt=s(tde);xuo=r(Xmt,"xlm-prophetnet"),Xmt.forEach(t),$uo=r(T8e," \u2014 "),ZN=n(T8e,"A",{href:!0});var zmt=s(ZN);kuo=r(zmt,"XLMProphetNetTokenizer"),zmt.forEach(t),Suo=r(T8e," (XLM-ProphetNet model)"),T8e.forEach(t),Ruo=i(S),zs=n(S,"LI",{});var NS=s(zs);ade=n(NS,"STRONG",{});var Qmt=s(ade);Puo=r(Qmt,"xlm-roberta"),Qmt.forEach(t),Buo=r(NS," \u2014 "),eq=n(NS,"A",{href:!0});var Wmt=s(eq);Iuo=r(Wmt,"XLMRobertaTokenizer"),Wmt.forEach(t),Nuo=r(NS," or "),oq=n(NS,"A",{href:!0});var Hmt=s(oq);quo=r(Hmt,"XLMRobertaTokenizerFast"),Hmt.forEach(t),juo=r(NS," (XLM-RoBERTa model)"),NS.forEach(t),Duo=i(S),Qs=n(S,"LI",{});var qS=s(Qs);nde=n(qS,"STRONG",{});var Umt=s(nde);Guo=r(Umt,"xlm-roberta-xl"),Umt.forEach(t),Ouo=r(qS," \u2014 "),rq=n(qS,"A",{href:!0});var Jmt=s(rq);Vuo=r(Jmt,"RobertaTokenizer"),Jmt.forEach(t),Xuo=r(qS," or "),tq=n(qS,"A",{href:!0});var Ymt=s(tq);zuo=r(Ymt,"RobertaTokenizerFast"),Ymt.forEach(t),Quo=r(qS," (XLM-RoBERTa-XL model)"),qS.forEach(t),Wuo=i(S),Ws=n(S,"LI",{});var jS=s(Ws);sde=n(jS,"STRONG",{});var Kmt=s(sde);Huo=r(Kmt,"xlnet"),Kmt.forEach(t),Uuo=r(jS," \u2014 "),aq=n(jS,"A",{href:!0});var Zmt=s(aq);Juo=r(Zmt,"XLNetTokenizer"),Zmt.forEach(t),Yuo=r(jS," or "),nq=n(jS,"A",{href:!0});var egt=s(nq);Kuo=r(egt,"XLNetTokenizerFast"),egt.forEach(t),Zuo=r(jS," (XLNet model)"),jS.forEach(t),e1o=i(S),Hs=n(S,"LI",{});var DS=s(Hs);lde=n(DS,"STRONG",{});var ogt=s(lde);o1o=r(ogt,"yoso"),ogt.forEach(t),r1o=r(DS," \u2014 "),sq=n(DS,"A",{href:!0});var rgt=s(sq);t1o=r(rgt,"AlbertTokenizer"),rgt.forEach(t),a1o=r(DS," or "),lq=n(DS,"A",{href:!0});var tgt=s(lq);n1o=r(tgt,"AlbertTokenizerFast"),tgt.forEach(t),s1o=r(DS," (YOSO model)"),DS.forEach(t),S.forEach(t),l1o=i(ol),T(Bh.$$.fragment,ol),ol.forEach(t),i1o=i(el),Ih=n(el,"DIV",{class:!0});var XQe=s(Ih);T(LL.$$.fragment,XQe),d1o=i(XQe),ide=n(XQe,"P",{});var agt=s(ide);c1o=r(agt,"Register a new tokenizer in this mapping."),agt.forEach(t),XQe.forEach(t),el.forEach(t),VXe=i(f),Di=n(f,"H2",{class:!0});var zQe=s(Di);Nh=n(zQe,"A",{id:!0,class:!0,href:!0});var ngt=s(Nh);dde=n(ngt,"SPAN",{});var sgt=s(dde);T(yL.$$.fragment,sgt),sgt.forEach(t),ngt.forEach(t),f1o=i(zQe),cde=n(zQe,"SPAN",{});var lgt=s(cde);m1o=r(lgt,"AutoFeatureExtractor"),lgt.forEach(t),zQe.forEach(t),XXe=i(f),yo=n(f,"DIV",{class:!0});var rl=s(yo);T(xL.$$.fragment,rl),g1o=i(rl),$L=n(rl,"P",{});var QQe=s($L);h1o=r(QQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iq=n(QQe,"A",{href:!0});var igt=s(iq);p1o=r(igt,"AutoFeatureExtractor.from_pretrained()"),igt.forEach(t),_1o=r(QQe," class method."),QQe.forEach(t),u1o=i(rl),kL=n(rl,"P",{});var WQe=s(kL);b1o=r(WQe,"This class cannot be instantiated directly using "),fde=n(WQe,"CODE",{});var dgt=s(fde);v1o=r(dgt,"__init__()"),dgt.forEach(t),F1o=r(WQe," (throws an error)."),WQe.forEach(t),T1o=i(rl),Ue=n(rl,"DIV",{class:!0});var na=s(Ue);T(SL.$$.fragment,na),M1o=i(na),mde=n(na,"P",{});var cgt=s(mde);E1o=r(cgt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cgt.forEach(t),C1o=i(na),Ba=n(na,"P",{});var _w=s(Ba);w1o=r(_w,"The feature extractor class to instantiate is selected based on the "),gde=n(_w,"CODE",{});var fgt=s(gde);A1o=r(fgt,"model_type"),fgt.forEach(t),L1o=r(_w,` property of the config object
(either passed as an argument or loaded from `),hde=n(_w,"CODE",{});var mgt=s(hde);y1o=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),x1o=r(_w,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),pde=n(_w,"CODE",{});var ggt=s(pde);$1o=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),k1o=r(_w,":"),_w.forEach(t),S1o=i(na),J=n(na,"UL",{});var K=s(J);qh=n(K,"LI",{});var M8e=s(qh);_de=n(M8e,"STRONG",{});var hgt=s(_de);R1o=r(hgt,"beit"),hgt.forEach(t),P1o=r(M8e," \u2014 "),dq=n(M8e,"A",{href:!0});var pgt=s(dq);B1o=r(pgt,"BeitFeatureExtractor"),pgt.forEach(t),I1o=r(M8e," (BEiT model)"),M8e.forEach(t),N1o=i(K),jh=n(K,"LI",{});var E8e=s(jh);ude=n(E8e,"STRONG",{});var _gt=s(ude);q1o=r(_gt,"clip"),_gt.forEach(t),j1o=r(E8e," \u2014 "),cq=n(E8e,"A",{href:!0});var ugt=s(cq);D1o=r(ugt,"CLIPFeatureExtractor"),ugt.forEach(t),G1o=r(E8e," (CLIP model)"),E8e.forEach(t),O1o=i(K),Dh=n(K,"LI",{});var C8e=s(Dh);bde=n(C8e,"STRONG",{});var bgt=s(bde);V1o=r(bgt,"convnext"),bgt.forEach(t),X1o=r(C8e," \u2014 "),fq=n(C8e,"A",{href:!0});var vgt=s(fq);z1o=r(vgt,"ConvNextFeatureExtractor"),vgt.forEach(t),Q1o=r(C8e," (ConvNeXT model)"),C8e.forEach(t),W1o=i(K),Gh=n(K,"LI",{});var w8e=s(Gh);vde=n(w8e,"STRONG",{});var Fgt=s(vde);H1o=r(Fgt,"cvt"),Fgt.forEach(t),U1o=r(w8e," \u2014 "),mq=n(w8e,"A",{href:!0});var Tgt=s(mq);J1o=r(Tgt,"ConvNextFeatureExtractor"),Tgt.forEach(t),Y1o=r(w8e," (CvT model)"),w8e.forEach(t),K1o=i(K),Oh=n(K,"LI",{});var A8e=s(Oh);Fde=n(A8e,"STRONG",{});var Mgt=s(Fde);Z1o=r(Mgt,"data2vec-audio"),Mgt.forEach(t),e4o=r(A8e," \u2014 "),gq=n(A8e,"A",{href:!0});var Egt=s(gq);o4o=r(Egt,"Wav2Vec2FeatureExtractor"),Egt.forEach(t),r4o=r(A8e," (Data2VecAudio model)"),A8e.forEach(t),t4o=i(K),Vh=n(K,"LI",{});var L8e=s(Vh);Tde=n(L8e,"STRONG",{});var Cgt=s(Tde);a4o=r(Cgt,"data2vec-vision"),Cgt.forEach(t),n4o=r(L8e," \u2014 "),hq=n(L8e,"A",{href:!0});var wgt=s(hq);s4o=r(wgt,"BeitFeatureExtractor"),wgt.forEach(t),l4o=r(L8e," (Data2VecVision model)"),L8e.forEach(t),i4o=i(K),Xh=n(K,"LI",{});var y8e=s(Xh);Mde=n(y8e,"STRONG",{});var Agt=s(Mde);d4o=r(Agt,"deit"),Agt.forEach(t),c4o=r(y8e," \u2014 "),pq=n(y8e,"A",{href:!0});var Lgt=s(pq);f4o=r(Lgt,"DeiTFeatureExtractor"),Lgt.forEach(t),m4o=r(y8e," (DeiT model)"),y8e.forEach(t),g4o=i(K),zh=n(K,"LI",{});var x8e=s(zh);Ede=n(x8e,"STRONG",{});var ygt=s(Ede);h4o=r(ygt,"detr"),ygt.forEach(t),p4o=r(x8e," \u2014 "),_q=n(x8e,"A",{href:!0});var xgt=s(_q);_4o=r(xgt,"DetrFeatureExtractor"),xgt.forEach(t),u4o=r(x8e," (DETR model)"),x8e.forEach(t),b4o=i(K),Qh=n(K,"LI",{});var $8e=s(Qh);Cde=n($8e,"STRONG",{});var $gt=s(Cde);v4o=r($gt,"dpt"),$gt.forEach(t),F4o=r($8e," \u2014 "),uq=n($8e,"A",{href:!0});var kgt=s(uq);T4o=r(kgt,"DPTFeatureExtractor"),kgt.forEach(t),M4o=r($8e," (DPT model)"),$8e.forEach(t),E4o=i(K),Wh=n(K,"LI",{});var k8e=s(Wh);wde=n(k8e,"STRONG",{});var Sgt=s(wde);C4o=r(Sgt,"flava"),Sgt.forEach(t),w4o=r(k8e," \u2014 "),bq=n(k8e,"A",{href:!0});var Rgt=s(bq);A4o=r(Rgt,"FlavaFeatureExtractor"),Rgt.forEach(t),L4o=r(k8e," (FLAVA model)"),k8e.forEach(t),y4o=i(K),Hh=n(K,"LI",{});var S8e=s(Hh);Ade=n(S8e,"STRONG",{});var Pgt=s(Ade);x4o=r(Pgt,"glpn"),Pgt.forEach(t),$4o=r(S8e," \u2014 "),vq=n(S8e,"A",{href:!0});var Bgt=s(vq);k4o=r(Bgt,"GLPNFeatureExtractor"),Bgt.forEach(t),S4o=r(S8e," (GLPN model)"),S8e.forEach(t),R4o=i(K),Uh=n(K,"LI",{});var R8e=s(Uh);Lde=n(R8e,"STRONG",{});var Igt=s(Lde);P4o=r(Igt,"groupvit"),Igt.forEach(t),B4o=r(R8e," \u2014 "),Fq=n(R8e,"A",{href:!0});var Ngt=s(Fq);I4o=r(Ngt,"CLIPFeatureExtractor"),Ngt.forEach(t),N4o=r(R8e," (GroupViT model)"),R8e.forEach(t),q4o=i(K),Jh=n(K,"LI",{});var P8e=s(Jh);yde=n(P8e,"STRONG",{});var qgt=s(yde);j4o=r(qgt,"hubert"),qgt.forEach(t),D4o=r(P8e," \u2014 "),Tq=n(P8e,"A",{href:!0});var jgt=s(Tq);G4o=r(jgt,"Wav2Vec2FeatureExtractor"),jgt.forEach(t),O4o=r(P8e," (Hubert model)"),P8e.forEach(t),V4o=i(K),Yh=n(K,"LI",{});var B8e=s(Yh);xde=n(B8e,"STRONG",{});var Dgt=s(xde);X4o=r(Dgt,"imagegpt"),Dgt.forEach(t),z4o=r(B8e," \u2014 "),Mq=n(B8e,"A",{href:!0});var Ggt=s(Mq);Q4o=r(Ggt,"ImageGPTFeatureExtractor"),Ggt.forEach(t),W4o=r(B8e," (ImageGPT model)"),B8e.forEach(t),H4o=i(K),Kh=n(K,"LI",{});var I8e=s(Kh);$de=n(I8e,"STRONG",{});var Ogt=s($de);U4o=r(Ogt,"layoutlmv2"),Ogt.forEach(t),J4o=r(I8e," \u2014 "),Eq=n(I8e,"A",{href:!0});var Vgt=s(Eq);Y4o=r(Vgt,"LayoutLMv2FeatureExtractor"),Vgt.forEach(t),K4o=r(I8e," (LayoutLMv2 model)"),I8e.forEach(t),Z4o=i(K),Zh=n(K,"LI",{});var N8e=s(Zh);kde=n(N8e,"STRONG",{});var Xgt=s(kde);e2o=r(Xgt,"layoutlmv3"),Xgt.forEach(t),o2o=r(N8e," \u2014 "),Cq=n(N8e,"A",{href:!0});var zgt=s(Cq);r2o=r(zgt,"LayoutLMv3FeatureExtractor"),zgt.forEach(t),t2o=r(N8e," (LayoutLMv3 model)"),N8e.forEach(t),a2o=i(K),ep=n(K,"LI",{});var q8e=s(ep);Sde=n(q8e,"STRONG",{});var Qgt=s(Sde);n2o=r(Qgt,"levit"),Qgt.forEach(t),s2o=r(q8e," \u2014 "),wq=n(q8e,"A",{href:!0});var Wgt=s(wq);l2o=r(Wgt,"LevitFeatureExtractor"),Wgt.forEach(t),i2o=r(q8e," (LeViT model)"),q8e.forEach(t),d2o=i(K),op=n(K,"LI",{});var j8e=s(op);Rde=n(j8e,"STRONG",{});var Hgt=s(Rde);c2o=r(Hgt,"maskformer"),Hgt.forEach(t),f2o=r(j8e," \u2014 "),Aq=n(j8e,"A",{href:!0});var Ugt=s(Aq);m2o=r(Ugt,"MaskFormerFeatureExtractor"),Ugt.forEach(t),g2o=r(j8e," (MaskFormer model)"),j8e.forEach(t),h2o=i(K),rp=n(K,"LI",{});var D8e=s(rp);Pde=n(D8e,"STRONG",{});var Jgt=s(Pde);p2o=r(Jgt,"mctct"),Jgt.forEach(t),_2o=r(D8e," \u2014 "),Lq=n(D8e,"A",{href:!0});var Ygt=s(Lq);u2o=r(Ygt,"MCTCTFeatureExtractor"),Ygt.forEach(t),b2o=r(D8e," (M-CTC-T model)"),D8e.forEach(t),v2o=i(K),tp=n(K,"LI",{});var G8e=s(tp);Bde=n(G8e,"STRONG",{});var Kgt=s(Bde);F2o=r(Kgt,"mobilevit"),Kgt.forEach(t),T2o=r(G8e," \u2014 "),yq=n(G8e,"A",{href:!0});var Zgt=s(yq);M2o=r(Zgt,"MobileViTFeatureExtractor"),Zgt.forEach(t),E2o=r(G8e," (MobileViT model)"),G8e.forEach(t),C2o=i(K),ap=n(K,"LI",{});var O8e=s(ap);Ide=n(O8e,"STRONG",{});var eht=s(Ide);w2o=r(eht,"perceiver"),eht.forEach(t),A2o=r(O8e," \u2014 "),xq=n(O8e,"A",{href:!0});var oht=s(xq);L2o=r(oht,"PerceiverFeatureExtractor"),oht.forEach(t),y2o=r(O8e," (Perceiver model)"),O8e.forEach(t),x2o=i(K),np=n(K,"LI",{});var V8e=s(np);Nde=n(V8e,"STRONG",{});var rht=s(Nde);$2o=r(rht,"poolformer"),rht.forEach(t),k2o=r(V8e," \u2014 "),$q=n(V8e,"A",{href:!0});var tht=s($q);S2o=r(tht,"PoolFormerFeatureExtractor"),tht.forEach(t),R2o=r(V8e," (PoolFormer model)"),V8e.forEach(t),P2o=i(K),sp=n(K,"LI",{});var X8e=s(sp);qde=n(X8e,"STRONG",{});var aht=s(qde);B2o=r(aht,"regnet"),aht.forEach(t),I2o=r(X8e," \u2014 "),kq=n(X8e,"A",{href:!0});var nht=s(kq);N2o=r(nht,"ConvNextFeatureExtractor"),nht.forEach(t),q2o=r(X8e," (RegNet model)"),X8e.forEach(t),j2o=i(K),lp=n(K,"LI",{});var z8e=s(lp);jde=n(z8e,"STRONG",{});var sht=s(jde);D2o=r(sht,"resnet"),sht.forEach(t),G2o=r(z8e," \u2014 "),Sq=n(z8e,"A",{href:!0});var lht=s(Sq);O2o=r(lht,"ConvNextFeatureExtractor"),lht.forEach(t),V2o=r(z8e," (ResNet model)"),z8e.forEach(t),X2o=i(K),ip=n(K,"LI",{});var Q8e=s(ip);Dde=n(Q8e,"STRONG",{});var iht=s(Dde);z2o=r(iht,"segformer"),iht.forEach(t),Q2o=r(Q8e," \u2014 "),Rq=n(Q8e,"A",{href:!0});var dht=s(Rq);W2o=r(dht,"SegformerFeatureExtractor"),dht.forEach(t),H2o=r(Q8e," (SegFormer model)"),Q8e.forEach(t),U2o=i(K),dp=n(K,"LI",{});var W8e=s(dp);Gde=n(W8e,"STRONG",{});var cht=s(Gde);J2o=r(cht,"speech_to_text"),cht.forEach(t),Y2o=r(W8e," \u2014 "),Pq=n(W8e,"A",{href:!0});var fht=s(Pq);K2o=r(fht,"Speech2TextFeatureExtractor"),fht.forEach(t),Z2o=r(W8e," (Speech2Text model)"),W8e.forEach(t),ebo=i(K),cp=n(K,"LI",{});var H8e=s(cp);Ode=n(H8e,"STRONG",{});var mht=s(Ode);obo=r(mht,"swin"),mht.forEach(t),rbo=r(H8e," \u2014 "),Bq=n(H8e,"A",{href:!0});var ght=s(Bq);tbo=r(ght,"ViTFeatureExtractor"),ght.forEach(t),abo=r(H8e," (Swin Transformer model)"),H8e.forEach(t),nbo=i(K),fp=n(K,"LI",{});var U8e=s(fp);Vde=n(U8e,"STRONG",{});var hht=s(Vde);sbo=r(hht,"swinv2"),hht.forEach(t),lbo=r(U8e," \u2014 "),Iq=n(U8e,"A",{href:!0});var pht=s(Iq);ibo=r(pht,"ViTFeatureExtractor"),pht.forEach(t),dbo=r(U8e," (Swin Transformer V2 model)"),U8e.forEach(t),cbo=i(K),mp=n(K,"LI",{});var J8e=s(mp);Xde=n(J8e,"STRONG",{});var _ht=s(Xde);fbo=r(_ht,"van"),_ht.forEach(t),mbo=r(J8e," \u2014 "),Nq=n(J8e,"A",{href:!0});var uht=s(Nq);gbo=r(uht,"ConvNextFeatureExtractor"),uht.forEach(t),hbo=r(J8e," (VAN model)"),J8e.forEach(t),pbo=i(K),gp=n(K,"LI",{});var Y8e=s(gp);zde=n(Y8e,"STRONG",{});var bht=s(zde);_bo=r(bht,"vilt"),bht.forEach(t),ubo=r(Y8e," \u2014 "),qq=n(Y8e,"A",{href:!0});var vht=s(qq);bbo=r(vht,"ViltFeatureExtractor"),vht.forEach(t),vbo=r(Y8e," (ViLT model)"),Y8e.forEach(t),Fbo=i(K),hp=n(K,"LI",{});var K8e=s(hp);Qde=n(K8e,"STRONG",{});var Fht=s(Qde);Tbo=r(Fht,"vit"),Fht.forEach(t),Mbo=r(K8e," \u2014 "),jq=n(K8e,"A",{href:!0});var Tht=s(jq);Ebo=r(Tht,"ViTFeatureExtractor"),Tht.forEach(t),Cbo=r(K8e," (ViT model)"),K8e.forEach(t),wbo=i(K),pp=n(K,"LI",{});var Z8e=s(pp);Wde=n(Z8e,"STRONG",{});var Mht=s(Wde);Abo=r(Mht,"vit_mae"),Mht.forEach(t),Lbo=r(Z8e," \u2014 "),Dq=n(Z8e,"A",{href:!0});var Eht=s(Dq);ybo=r(Eht,"ViTFeatureExtractor"),Eht.forEach(t),xbo=r(Z8e," (ViTMAE model)"),Z8e.forEach(t),$bo=i(K),_p=n(K,"LI",{});var exe=s(_p);Hde=n(exe,"STRONG",{});var Cht=s(Hde);kbo=r(Cht,"wav2vec2"),Cht.forEach(t),Sbo=r(exe," \u2014 "),Gq=n(exe,"A",{href:!0});var wht=s(Gq);Rbo=r(wht,"Wav2Vec2FeatureExtractor"),wht.forEach(t),Pbo=r(exe," (Wav2Vec2 model)"),exe.forEach(t),Bbo=i(K),up=n(K,"LI",{});var oxe=s(up);Ude=n(oxe,"STRONG",{});var Aht=s(Ude);Ibo=r(Aht,"wav2vec2-conformer"),Aht.forEach(t),Nbo=r(oxe," \u2014 "),Oq=n(oxe,"A",{href:!0});var Lht=s(Oq);qbo=r(Lht,"Wav2Vec2FeatureExtractor"),Lht.forEach(t),jbo=r(oxe," (Wav2Vec2-Conformer model)"),oxe.forEach(t),Dbo=i(K),bp=n(K,"LI",{});var rxe=s(bp);Jde=n(rxe,"STRONG",{});var yht=s(Jde);Gbo=r(yht,"yolos"),yht.forEach(t),Obo=r(rxe," \u2014 "),Vq=n(rxe,"A",{href:!0});var xht=s(Vq);Vbo=r(xht,"YolosFeatureExtractor"),xht.forEach(t),Xbo=r(rxe," (YOLOS model)"),rxe.forEach(t),K.forEach(t),zbo=i(na),T(vp.$$.fragment,na),Qbo=i(na),T(Fp.$$.fragment,na),na.forEach(t),Wbo=i(rl),Tp=n(rl,"DIV",{class:!0});var HQe=s(Tp);T(RL.$$.fragment,HQe),Hbo=i(HQe),Yde=n(HQe,"P",{});var $ht=s(Yde);Ubo=r($ht,"Register a new feature extractor for this class."),$ht.forEach(t),HQe.forEach(t),rl.forEach(t),zXe=i(f),Gi=n(f,"H2",{class:!0});var UQe=s(Gi);Mp=n(UQe,"A",{id:!0,class:!0,href:!0});var kht=s(Mp);Kde=n(kht,"SPAN",{});var Sht=s(Kde);T(PL.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),Jbo=i(UQe),Zde=n(UQe,"SPAN",{});var Rht=s(Zde);Ybo=r(Rht,"AutoProcessor"),Rht.forEach(t),UQe.forEach(t),QXe=i(f),xo=n(f,"DIV",{class:!0});var tl=s(xo);T(BL.$$.fragment,tl),Kbo=i(tl),IL=n(tl,"P",{});var JQe=s(IL);Zbo=r(JQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Xq=n(JQe,"A",{href:!0});var Pht=s(Xq);evo=r(Pht,"AutoProcessor.from_pretrained()"),Pht.forEach(t),ovo=r(JQe," class method."),JQe.forEach(t),rvo=i(tl),NL=n(tl,"P",{});var YQe=s(NL);tvo=r(YQe,"This class cannot be instantiated directly using "),ece=n(YQe,"CODE",{});var Bht=s(ece);avo=r(Bht,"__init__()"),Bht.forEach(t),nvo=r(YQe," (throws an error)."),YQe.forEach(t),svo=i(tl),Je=n(tl,"DIV",{class:!0});var sa=s(Je);T(qL.$$.fragment,sa),lvo=i(sa),oce=n(sa,"P",{});var Iht=s(oce);ivo=r(Iht,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Iht.forEach(t),dvo=i(sa),Oi=n(sa,"P",{});var Kre=s(Oi);cvo=r(Kre,"The processor class to instantiate is selected based on the "),rce=n(Kre,"CODE",{});var Nht=s(rce);fvo=r(Nht,"model_type"),Nht.forEach(t),mvo=r(Kre,` property of the config object (either
passed as an argument or loaded from `),tce=n(Kre,"CODE",{});var qht=s(tce);gvo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),hvo=r(Kre," if possible):"),Kre.forEach(t),pvo=i(sa),pe=n(sa,"UL",{});var ve=s(pe);Ep=n(ve,"LI",{});var txe=s(Ep);ace=n(txe,"STRONG",{});var jht=s(ace);_vo=r(jht,"clip"),jht.forEach(t),uvo=r(txe," \u2014 "),zq=n(txe,"A",{href:!0});var Dht=s(zq);bvo=r(Dht,"CLIPProcessor"),Dht.forEach(t),vvo=r(txe," (CLIP model)"),txe.forEach(t),Fvo=i(ve),Cp=n(ve,"LI",{});var axe=s(Cp);nce=n(axe,"STRONG",{});var Ght=s(nce);Tvo=r(Ght,"flava"),Ght.forEach(t),Mvo=r(axe," \u2014 "),Qq=n(axe,"A",{href:!0});var Oht=s(Qq);Evo=r(Oht,"FlavaProcessor"),Oht.forEach(t),Cvo=r(axe," (FLAVA model)"),axe.forEach(t),wvo=i(ve),wp=n(ve,"LI",{});var nxe=s(wp);sce=n(nxe,"STRONG",{});var Vht=s(sce);Avo=r(Vht,"groupvit"),Vht.forEach(t),Lvo=r(nxe," \u2014 "),Wq=n(nxe,"A",{href:!0});var Xht=s(Wq);yvo=r(Xht,"CLIPProcessor"),Xht.forEach(t),xvo=r(nxe," (GroupViT model)"),nxe.forEach(t),$vo=i(ve),Ap=n(ve,"LI",{});var sxe=s(Ap);lce=n(sxe,"STRONG",{});var zht=s(lce);kvo=r(zht,"layoutlmv2"),zht.forEach(t),Svo=r(sxe," \u2014 "),Hq=n(sxe,"A",{href:!0});var Qht=s(Hq);Rvo=r(Qht,"LayoutLMv2Processor"),Qht.forEach(t),Pvo=r(sxe," (LayoutLMv2 model)"),sxe.forEach(t),Bvo=i(ve),Lp=n(ve,"LI",{});var lxe=s(Lp);ice=n(lxe,"STRONG",{});var Wht=s(ice);Ivo=r(Wht,"layoutlmv3"),Wht.forEach(t),Nvo=r(lxe," \u2014 "),Uq=n(lxe,"A",{href:!0});var Hht=s(Uq);qvo=r(Hht,"LayoutLMv3Processor"),Hht.forEach(t),jvo=r(lxe," (LayoutLMv3 model)"),lxe.forEach(t),Dvo=i(ve),yp=n(ve,"LI",{});var ixe=s(yp);dce=n(ixe,"STRONG",{});var Uht=s(dce);Gvo=r(Uht,"layoutxlm"),Uht.forEach(t),Ovo=r(ixe," \u2014 "),Jq=n(ixe,"A",{href:!0});var Jht=s(Jq);Vvo=r(Jht,"LayoutXLMProcessor"),Jht.forEach(t),Xvo=r(ixe," (LayoutXLM model)"),ixe.forEach(t),zvo=i(ve),xp=n(ve,"LI",{});var dxe=s(xp);cce=n(dxe,"STRONG",{});var Yht=s(cce);Qvo=r(Yht,"sew"),Yht.forEach(t),Wvo=r(dxe," \u2014 "),Yq=n(dxe,"A",{href:!0});var Kht=s(Yq);Hvo=r(Kht,"Wav2Vec2Processor"),Kht.forEach(t),Uvo=r(dxe," (SEW model)"),dxe.forEach(t),Jvo=i(ve),$p=n(ve,"LI",{});var cxe=s($p);fce=n(cxe,"STRONG",{});var Zht=s(fce);Yvo=r(Zht,"sew-d"),Zht.forEach(t),Kvo=r(cxe," \u2014 "),Kq=n(cxe,"A",{href:!0});var ept=s(Kq);Zvo=r(ept,"Wav2Vec2Processor"),ept.forEach(t),eFo=r(cxe," (SEW-D model)"),cxe.forEach(t),oFo=i(ve),kp=n(ve,"LI",{});var fxe=s(kp);mce=n(fxe,"STRONG",{});var opt=s(mce);rFo=r(opt,"speech_to_text"),opt.forEach(t),tFo=r(fxe," \u2014 "),Zq=n(fxe,"A",{href:!0});var rpt=s(Zq);aFo=r(rpt,"Speech2TextProcessor"),rpt.forEach(t),nFo=r(fxe," (Speech2Text model)"),fxe.forEach(t),sFo=i(ve),Sp=n(ve,"LI",{});var mxe=s(Sp);gce=n(mxe,"STRONG",{});var tpt=s(gce);lFo=r(tpt,"speech_to_text_2"),tpt.forEach(t),iFo=r(mxe," \u2014 "),ej=n(mxe,"A",{href:!0});var apt=s(ej);dFo=r(apt,"Speech2Text2Processor"),apt.forEach(t),cFo=r(mxe," (Speech2Text2 model)"),mxe.forEach(t),fFo=i(ve),Rp=n(ve,"LI",{});var gxe=s(Rp);hce=n(gxe,"STRONG",{});var npt=s(hce);mFo=r(npt,"trocr"),npt.forEach(t),gFo=r(gxe," \u2014 "),oj=n(gxe,"A",{href:!0});var spt=s(oj);hFo=r(spt,"TrOCRProcessor"),spt.forEach(t),pFo=r(gxe," (TrOCR model)"),gxe.forEach(t),_Fo=i(ve),Pp=n(ve,"LI",{});var hxe=s(Pp);pce=n(hxe,"STRONG",{});var lpt=s(pce);uFo=r(lpt,"unispeech"),lpt.forEach(t),bFo=r(hxe," \u2014 "),rj=n(hxe,"A",{href:!0});var ipt=s(rj);vFo=r(ipt,"Wav2Vec2Processor"),ipt.forEach(t),FFo=r(hxe," (UniSpeech model)"),hxe.forEach(t),TFo=i(ve),Bp=n(ve,"LI",{});var pxe=s(Bp);_ce=n(pxe,"STRONG",{});var dpt=s(_ce);MFo=r(dpt,"unispeech-sat"),dpt.forEach(t),EFo=r(pxe," \u2014 "),tj=n(pxe,"A",{href:!0});var cpt=s(tj);CFo=r(cpt,"Wav2Vec2Processor"),cpt.forEach(t),wFo=r(pxe," (UniSpeechSat model)"),pxe.forEach(t),AFo=i(ve),Ip=n(ve,"LI",{});var _xe=s(Ip);uce=n(_xe,"STRONG",{});var fpt=s(uce);LFo=r(fpt,"vilt"),fpt.forEach(t),yFo=r(_xe," \u2014 "),aj=n(_xe,"A",{href:!0});var mpt=s(aj);xFo=r(mpt,"ViltProcessor"),mpt.forEach(t),$Fo=r(_xe," (ViLT model)"),_xe.forEach(t),kFo=i(ve),Np=n(ve,"LI",{});var uxe=s(Np);bce=n(uxe,"STRONG",{});var gpt=s(bce);SFo=r(gpt,"vision-text-dual-encoder"),gpt.forEach(t),RFo=r(uxe," \u2014 "),nj=n(uxe,"A",{href:!0});var hpt=s(nj);PFo=r(hpt,"VisionTextDualEncoderProcessor"),hpt.forEach(t),BFo=r(uxe," (VisionTextDualEncoder model)"),uxe.forEach(t),IFo=i(ve),qp=n(ve,"LI",{});var bxe=s(qp);vce=n(bxe,"STRONG",{});var ppt=s(vce);NFo=r(ppt,"wav2vec2"),ppt.forEach(t),qFo=r(bxe," \u2014 "),sj=n(bxe,"A",{href:!0});var _pt=s(sj);jFo=r(_pt,"Wav2Vec2Processor"),_pt.forEach(t),DFo=r(bxe," (Wav2Vec2 model)"),bxe.forEach(t),GFo=i(ve),jp=n(ve,"LI",{});var vxe=s(jp);Fce=n(vxe,"STRONG",{});var upt=s(Fce);OFo=r(upt,"wav2vec2-conformer"),upt.forEach(t),VFo=r(vxe," \u2014 "),lj=n(vxe,"A",{href:!0});var bpt=s(lj);XFo=r(bpt,"Wav2Vec2Processor"),bpt.forEach(t),zFo=r(vxe," (Wav2Vec2-Conformer model)"),vxe.forEach(t),QFo=i(ve),Dp=n(ve,"LI",{});var Fxe=s(Dp);Tce=n(Fxe,"STRONG",{});var vpt=s(Tce);WFo=r(vpt,"wavlm"),vpt.forEach(t),HFo=r(Fxe," \u2014 "),ij=n(Fxe,"A",{href:!0});var Fpt=s(ij);UFo=r(Fpt,"Wav2Vec2Processor"),Fpt.forEach(t),JFo=r(Fxe," (WavLM model)"),Fxe.forEach(t),ve.forEach(t),YFo=i(sa),T(Gp.$$.fragment,sa),KFo=i(sa),T(Op.$$.fragment,sa),sa.forEach(t),ZFo=i(tl),Vp=n(tl,"DIV",{class:!0});var KQe=s(Vp);T(jL.$$.fragment,KQe),e6o=i(KQe),Mce=n(KQe,"P",{});var Tpt=s(Mce);o6o=r(Tpt,"Register a new processor for this class."),Tpt.forEach(t),KQe.forEach(t),tl.forEach(t),WXe=i(f),Vi=n(f,"H2",{class:!0});var ZQe=s(Vi);Xp=n(ZQe,"A",{id:!0,class:!0,href:!0});var Mpt=s(Xp);Ece=n(Mpt,"SPAN",{});var Ept=s(Ece);T(DL.$$.fragment,Ept),Ept.forEach(t),Mpt.forEach(t),r6o=i(ZQe),Cce=n(ZQe,"SPAN",{});var Cpt=s(Cce);t6o=r(Cpt,"AutoModel"),Cpt.forEach(t),ZQe.forEach(t),HXe=i(f),$o=n(f,"DIV",{class:!0});var al=s($o);T(GL.$$.fragment,al),a6o=i(al),Xi=n(al,"P",{});var Zre=s(Xi);n6o=r(Zre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dj=n(Zre,"A",{href:!0});var wpt=s(dj);s6o=r(wpt,"from_pretrained()"),wpt.forEach(t),l6o=r(Zre," class method or the "),cj=n(Zre,"A",{href:!0});var Apt=s(cj);i6o=r(Apt,"from_config()"),Apt.forEach(t),d6o=r(Zre,` class
method.`),Zre.forEach(t),c6o=i(al),OL=n(al,"P",{});var eWe=s(OL);f6o=r(eWe,"This class cannot be instantiated directly using "),wce=n(eWe,"CODE",{});var Lpt=s(wce);m6o=r(Lpt,"__init__()"),Lpt.forEach(t),g6o=r(eWe," (throws an error)."),eWe.forEach(t),h6o=i(al),it=n(al,"DIV",{class:!0});var uw=s(it);T(VL.$$.fragment,uw),p6o=i(uw),Ace=n(uw,"P",{});var ypt=s(Ace);_6o=r(ypt,"Instantiates one of the base model classes of the library from a configuration."),ypt.forEach(t),u6o=i(uw),zi=n(uw,"P",{});var ete=s(zi);b6o=r(ete,`Note:
Loading a model from its configuration file does `),Lce=n(ete,"STRONG",{});var xpt=s(Lce);v6o=r(xpt,"not"),xpt.forEach(t),F6o=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(ete,"A",{href:!0});var $pt=s(fj);T6o=r($pt,"from_pretrained()"),$pt.forEach(t),M6o=r(ete," to load the model weights."),ete.forEach(t),E6o=i(uw),T(zp.$$.fragment,uw),uw.forEach(t),C6o=i(al),Ye=n(al,"DIV",{class:!0});var la=s(Ye);T(XL.$$.fragment,la),w6o=i(la),yce=n(la,"P",{});var kpt=s(yce);A6o=r(kpt,"Instantiate one of the base model classes of the library from a pretrained model."),kpt.forEach(t),L6o=i(la),Ia=n(la,"P",{});var bw=s(Ia);y6o=r(bw,"The model class to instantiate is selected based on the "),xce=n(bw,"CODE",{});var Spt=s(xce);x6o=r(Spt,"model_type"),Spt.forEach(t),$6o=r(bw,` property of the config object (either
passed as an argument or loaded from `),$ce=n(bw,"CODE",{});var Rpt=s($ce);k6o=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),S6o=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(bw,"CODE",{});var Ppt=s(kce);R6o=r(Ppt,"pretrained_model_name_or_path"),Ppt.forEach(t),P6o=r(bw,":"),bw.forEach(t),B6o=i(la),y=n(la,"UL",{});var x=s(y);Qp=n(x,"LI",{});var Txe=s(Qp);Sce=n(Txe,"STRONG",{});var Bpt=s(Sce);I6o=r(Bpt,"albert"),Bpt.forEach(t),N6o=r(Txe," \u2014 "),mj=n(Txe,"A",{href:!0});var Ipt=s(mj);q6o=r(Ipt,"AlbertModel"),Ipt.forEach(t),j6o=r(Txe," (ALBERT model)"),Txe.forEach(t),D6o=i(x),Wp=n(x,"LI",{});var Mxe=s(Wp);Rce=n(Mxe,"STRONG",{});var Npt=s(Rce);G6o=r(Npt,"bart"),Npt.forEach(t),O6o=r(Mxe," \u2014 "),gj=n(Mxe,"A",{href:!0});var qpt=s(gj);V6o=r(qpt,"BartModel"),qpt.forEach(t),X6o=r(Mxe," (BART model)"),Mxe.forEach(t),z6o=i(x),Hp=n(x,"LI",{});var Exe=s(Hp);Pce=n(Exe,"STRONG",{});var jpt=s(Pce);Q6o=r(jpt,"beit"),jpt.forEach(t),W6o=r(Exe," \u2014 "),hj=n(Exe,"A",{href:!0});var Dpt=s(hj);H6o=r(Dpt,"BeitModel"),Dpt.forEach(t),U6o=r(Exe," (BEiT model)"),Exe.forEach(t),J6o=i(x),Up=n(x,"LI",{});var Cxe=s(Up);Bce=n(Cxe,"STRONG",{});var Gpt=s(Bce);Y6o=r(Gpt,"bert"),Gpt.forEach(t),K6o=r(Cxe," \u2014 "),pj=n(Cxe,"A",{href:!0});var Opt=s(pj);Z6o=r(Opt,"BertModel"),Opt.forEach(t),eTo=r(Cxe," (BERT model)"),Cxe.forEach(t),oTo=i(x),Jp=n(x,"LI",{});var wxe=s(Jp);Ice=n(wxe,"STRONG",{});var Vpt=s(Ice);rTo=r(Vpt,"bert-generation"),Vpt.forEach(t),tTo=r(wxe," \u2014 "),_j=n(wxe,"A",{href:!0});var Xpt=s(_j);aTo=r(Xpt,"BertGenerationEncoder"),Xpt.forEach(t),nTo=r(wxe," (Bert Generation model)"),wxe.forEach(t),sTo=i(x),Yp=n(x,"LI",{});var Axe=s(Yp);Nce=n(Axe,"STRONG",{});var zpt=s(Nce);lTo=r(zpt,"big_bird"),zpt.forEach(t),iTo=r(Axe," \u2014 "),uj=n(Axe,"A",{href:!0});var Qpt=s(uj);dTo=r(Qpt,"BigBirdModel"),Qpt.forEach(t),cTo=r(Axe," (BigBird model)"),Axe.forEach(t),fTo=i(x),Kp=n(x,"LI",{});var Lxe=s(Kp);qce=n(Lxe,"STRONG",{});var Wpt=s(qce);mTo=r(Wpt,"bigbird_pegasus"),Wpt.forEach(t),gTo=r(Lxe," \u2014 "),bj=n(Lxe,"A",{href:!0});var Hpt=s(bj);hTo=r(Hpt,"BigBirdPegasusModel"),Hpt.forEach(t),pTo=r(Lxe," (BigBird-Pegasus model)"),Lxe.forEach(t),_To=i(x),Zp=n(x,"LI",{});var yxe=s(Zp);jce=n(yxe,"STRONG",{});var Upt=s(jce);uTo=r(Upt,"blenderbot"),Upt.forEach(t),bTo=r(yxe," \u2014 "),vj=n(yxe,"A",{href:!0});var Jpt=s(vj);vTo=r(Jpt,"BlenderbotModel"),Jpt.forEach(t),FTo=r(yxe," (Blenderbot model)"),yxe.forEach(t),TTo=i(x),e_=n(x,"LI",{});var xxe=s(e_);Dce=n(xxe,"STRONG",{});var Ypt=s(Dce);MTo=r(Ypt,"blenderbot-small"),Ypt.forEach(t),ETo=r(xxe," \u2014 "),Fj=n(xxe,"A",{href:!0});var Kpt=s(Fj);CTo=r(Kpt,"BlenderbotSmallModel"),Kpt.forEach(t),wTo=r(xxe," (BlenderbotSmall model)"),xxe.forEach(t),ATo=i(x),o_=n(x,"LI",{});var $xe=s(o_);Gce=n($xe,"STRONG",{});var Zpt=s(Gce);LTo=r(Zpt,"bloom"),Zpt.forEach(t),yTo=r($xe," \u2014 "),Tj=n($xe,"A",{href:!0});var e_t=s(Tj);xTo=r(e_t,"BloomModel"),e_t.forEach(t),$To=r($xe," (BLOOM model)"),$xe.forEach(t),kTo=i(x),r_=n(x,"LI",{});var kxe=s(r_);Oce=n(kxe,"STRONG",{});var o_t=s(Oce);STo=r(o_t,"camembert"),o_t.forEach(t),RTo=r(kxe," \u2014 "),Mj=n(kxe,"A",{href:!0});var r_t=s(Mj);PTo=r(r_t,"CamembertModel"),r_t.forEach(t),BTo=r(kxe," (CamemBERT model)"),kxe.forEach(t),ITo=i(x),t_=n(x,"LI",{});var Sxe=s(t_);Vce=n(Sxe,"STRONG",{});var t_t=s(Vce);NTo=r(t_t,"canine"),t_t.forEach(t),qTo=r(Sxe," \u2014 "),Ej=n(Sxe,"A",{href:!0});var a_t=s(Ej);jTo=r(a_t,"CanineModel"),a_t.forEach(t),DTo=r(Sxe," (CANINE model)"),Sxe.forEach(t),GTo=i(x),a_=n(x,"LI",{});var Rxe=s(a_);Xce=n(Rxe,"STRONG",{});var n_t=s(Xce);OTo=r(n_t,"clip"),n_t.forEach(t),VTo=r(Rxe," \u2014 "),Cj=n(Rxe,"A",{href:!0});var s_t=s(Cj);XTo=r(s_t,"CLIPModel"),s_t.forEach(t),zTo=r(Rxe," (CLIP model)"),Rxe.forEach(t),QTo=i(x),n_=n(x,"LI",{});var Pxe=s(n_);zce=n(Pxe,"STRONG",{});var l_t=s(zce);WTo=r(l_t,"codegen"),l_t.forEach(t),HTo=r(Pxe," \u2014 "),wj=n(Pxe,"A",{href:!0});var i_t=s(wj);UTo=r(i_t,"CodeGenModel"),i_t.forEach(t),JTo=r(Pxe," (CodeGen model)"),Pxe.forEach(t),YTo=i(x),s_=n(x,"LI",{});var Bxe=s(s_);Qce=n(Bxe,"STRONG",{});var d_t=s(Qce);KTo=r(d_t,"convbert"),d_t.forEach(t),ZTo=r(Bxe," \u2014 "),Aj=n(Bxe,"A",{href:!0});var c_t=s(Aj);e7o=r(c_t,"ConvBertModel"),c_t.forEach(t),o7o=r(Bxe," (ConvBERT model)"),Bxe.forEach(t),r7o=i(x),l_=n(x,"LI",{});var Ixe=s(l_);Wce=n(Ixe,"STRONG",{});var f_t=s(Wce);t7o=r(f_t,"convnext"),f_t.forEach(t),a7o=r(Ixe," \u2014 "),Lj=n(Ixe,"A",{href:!0});var m_t=s(Lj);n7o=r(m_t,"ConvNextModel"),m_t.forEach(t),s7o=r(Ixe," (ConvNeXT model)"),Ixe.forEach(t),l7o=i(x),i_=n(x,"LI",{});var Nxe=s(i_);Hce=n(Nxe,"STRONG",{});var g_t=s(Hce);i7o=r(g_t,"ctrl"),g_t.forEach(t),d7o=r(Nxe," \u2014 "),yj=n(Nxe,"A",{href:!0});var h_t=s(yj);c7o=r(h_t,"CTRLModel"),h_t.forEach(t),f7o=r(Nxe," (CTRL model)"),Nxe.forEach(t),m7o=i(x),d_=n(x,"LI",{});var qxe=s(d_);Uce=n(qxe,"STRONG",{});var p_t=s(Uce);g7o=r(p_t,"cvt"),p_t.forEach(t),h7o=r(qxe," \u2014 "),xj=n(qxe,"A",{href:!0});var __t=s(xj);p7o=r(__t,"CvtModel"),__t.forEach(t),_7o=r(qxe," (CvT model)"),qxe.forEach(t),u7o=i(x),c_=n(x,"LI",{});var jxe=s(c_);Jce=n(jxe,"STRONG",{});var u_t=s(Jce);b7o=r(u_t,"data2vec-audio"),u_t.forEach(t),v7o=r(jxe," \u2014 "),$j=n(jxe,"A",{href:!0});var b_t=s($j);F7o=r(b_t,"Data2VecAudioModel"),b_t.forEach(t),T7o=r(jxe," (Data2VecAudio model)"),jxe.forEach(t),M7o=i(x),f_=n(x,"LI",{});var Dxe=s(f_);Yce=n(Dxe,"STRONG",{});var v_t=s(Yce);E7o=r(v_t,"data2vec-text"),v_t.forEach(t),C7o=r(Dxe," \u2014 "),kj=n(Dxe,"A",{href:!0});var F_t=s(kj);w7o=r(F_t,"Data2VecTextModel"),F_t.forEach(t),A7o=r(Dxe," (Data2VecText model)"),Dxe.forEach(t),L7o=i(x),m_=n(x,"LI",{});var Gxe=s(m_);Kce=n(Gxe,"STRONG",{});var T_t=s(Kce);y7o=r(T_t,"data2vec-vision"),T_t.forEach(t),x7o=r(Gxe," \u2014 "),Sj=n(Gxe,"A",{href:!0});var M_t=s(Sj);$7o=r(M_t,"Data2VecVisionModel"),M_t.forEach(t),k7o=r(Gxe," (Data2VecVision model)"),Gxe.forEach(t),S7o=i(x),g_=n(x,"LI",{});var Oxe=s(g_);Zce=n(Oxe,"STRONG",{});var E_t=s(Zce);R7o=r(E_t,"deberta"),E_t.forEach(t),P7o=r(Oxe," \u2014 "),Rj=n(Oxe,"A",{href:!0});var C_t=s(Rj);B7o=r(C_t,"DebertaModel"),C_t.forEach(t),I7o=r(Oxe," (DeBERTa model)"),Oxe.forEach(t),N7o=i(x),h_=n(x,"LI",{});var Vxe=s(h_);efe=n(Vxe,"STRONG",{});var w_t=s(efe);q7o=r(w_t,"deberta-v2"),w_t.forEach(t),j7o=r(Vxe," \u2014 "),Pj=n(Vxe,"A",{href:!0});var A_t=s(Pj);D7o=r(A_t,"DebertaV2Model"),A_t.forEach(t),G7o=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),O7o=i(x),p_=n(x,"LI",{});var Xxe=s(p_);ofe=n(Xxe,"STRONG",{});var L_t=s(ofe);V7o=r(L_t,"decision_transformer"),L_t.forEach(t),X7o=r(Xxe," \u2014 "),Bj=n(Xxe,"A",{href:!0});var y_t=s(Bj);z7o=r(y_t,"DecisionTransformerModel"),y_t.forEach(t),Q7o=r(Xxe," (Decision Transformer model)"),Xxe.forEach(t),W7o=i(x),__=n(x,"LI",{});var zxe=s(__);rfe=n(zxe,"STRONG",{});var x_t=s(rfe);H7o=r(x_t,"deit"),x_t.forEach(t),U7o=r(zxe," \u2014 "),Ij=n(zxe,"A",{href:!0});var $_t=s(Ij);J7o=r($_t,"DeiTModel"),$_t.forEach(t),Y7o=r(zxe," (DeiT model)"),zxe.forEach(t),K7o=i(x),u_=n(x,"LI",{});var Qxe=s(u_);tfe=n(Qxe,"STRONG",{});var k_t=s(tfe);Z7o=r(k_t,"detr"),k_t.forEach(t),e9o=r(Qxe," \u2014 "),Nj=n(Qxe,"A",{href:!0});var S_t=s(Nj);o9o=r(S_t,"DetrModel"),S_t.forEach(t),r9o=r(Qxe," (DETR model)"),Qxe.forEach(t),t9o=i(x),b_=n(x,"LI",{});var Wxe=s(b_);afe=n(Wxe,"STRONG",{});var R_t=s(afe);a9o=r(R_t,"distilbert"),R_t.forEach(t),n9o=r(Wxe," \u2014 "),qj=n(Wxe,"A",{href:!0});var P_t=s(qj);s9o=r(P_t,"DistilBertModel"),P_t.forEach(t),l9o=r(Wxe," (DistilBERT model)"),Wxe.forEach(t),i9o=i(x),v_=n(x,"LI",{});var Hxe=s(v_);nfe=n(Hxe,"STRONG",{});var B_t=s(nfe);d9o=r(B_t,"dpr"),B_t.forEach(t),c9o=r(Hxe," \u2014 "),jj=n(Hxe,"A",{href:!0});var I_t=s(jj);f9o=r(I_t,"DPRQuestionEncoder"),I_t.forEach(t),m9o=r(Hxe," (DPR model)"),Hxe.forEach(t),g9o=i(x),F_=n(x,"LI",{});var Uxe=s(F_);sfe=n(Uxe,"STRONG",{});var N_t=s(sfe);h9o=r(N_t,"dpt"),N_t.forEach(t),p9o=r(Uxe," \u2014 "),Dj=n(Uxe,"A",{href:!0});var q_t=s(Dj);_9o=r(q_t,"DPTModel"),q_t.forEach(t),u9o=r(Uxe," (DPT model)"),Uxe.forEach(t),b9o=i(x),T_=n(x,"LI",{});var Jxe=s(T_);lfe=n(Jxe,"STRONG",{});var j_t=s(lfe);v9o=r(j_t,"electra"),j_t.forEach(t),F9o=r(Jxe," \u2014 "),Gj=n(Jxe,"A",{href:!0});var D_t=s(Gj);T9o=r(D_t,"ElectraModel"),D_t.forEach(t),M9o=r(Jxe," (ELECTRA model)"),Jxe.forEach(t),E9o=i(x),M_=n(x,"LI",{});var Yxe=s(M_);ife=n(Yxe,"STRONG",{});var G_t=s(ife);C9o=r(G_t,"flaubert"),G_t.forEach(t),w9o=r(Yxe," \u2014 "),Oj=n(Yxe,"A",{href:!0});var O_t=s(Oj);A9o=r(O_t,"FlaubertModel"),O_t.forEach(t),L9o=r(Yxe," (FlauBERT model)"),Yxe.forEach(t),y9o=i(x),E_=n(x,"LI",{});var Kxe=s(E_);dfe=n(Kxe,"STRONG",{});var V_t=s(dfe);x9o=r(V_t,"flava"),V_t.forEach(t),$9o=r(Kxe," \u2014 "),Vj=n(Kxe,"A",{href:!0});var X_t=s(Vj);k9o=r(X_t,"FlavaModel"),X_t.forEach(t),S9o=r(Kxe," (FLAVA model)"),Kxe.forEach(t),R9o=i(x),C_=n(x,"LI",{});var Zxe=s(C_);cfe=n(Zxe,"STRONG",{});var z_t=s(cfe);P9o=r(z_t,"fnet"),z_t.forEach(t),B9o=r(Zxe," \u2014 "),Xj=n(Zxe,"A",{href:!0});var Q_t=s(Xj);I9o=r(Q_t,"FNetModel"),Q_t.forEach(t),N9o=r(Zxe," (FNet model)"),Zxe.forEach(t),q9o=i(x),w_=n(x,"LI",{});var e$e=s(w_);ffe=n(e$e,"STRONG",{});var W_t=s(ffe);j9o=r(W_t,"fsmt"),W_t.forEach(t),D9o=r(e$e," \u2014 "),zj=n(e$e,"A",{href:!0});var H_t=s(zj);G9o=r(H_t,"FSMTModel"),H_t.forEach(t),O9o=r(e$e," (FairSeq Machine-Translation model)"),e$e.forEach(t),V9o=i(x),Us=n(x,"LI",{});var GS=s(Us);mfe=n(GS,"STRONG",{});var U_t=s(mfe);X9o=r(U_t,"funnel"),U_t.forEach(t),z9o=r(GS," \u2014 "),Qj=n(GS,"A",{href:!0});var J_t=s(Qj);Q9o=r(J_t,"FunnelModel"),J_t.forEach(t),W9o=r(GS," or "),Wj=n(GS,"A",{href:!0});var Y_t=s(Wj);H9o=r(Y_t,"FunnelBaseModel"),Y_t.forEach(t),U9o=r(GS," (Funnel Transformer model)"),GS.forEach(t),J9o=i(x),A_=n(x,"LI",{});var o$e=s(A_);gfe=n(o$e,"STRONG",{});var K_t=s(gfe);Y9o=r(K_t,"glpn"),K_t.forEach(t),K9o=r(o$e," \u2014 "),Hj=n(o$e,"A",{href:!0});var Z_t=s(Hj);Z9o=r(Z_t,"GLPNModel"),Z_t.forEach(t),eMo=r(o$e," (GLPN model)"),o$e.forEach(t),oMo=i(x),L_=n(x,"LI",{});var r$e=s(L_);hfe=n(r$e,"STRONG",{});var eut=s(hfe);rMo=r(eut,"gpt2"),eut.forEach(t),tMo=r(r$e," \u2014 "),Uj=n(r$e,"A",{href:!0});var out=s(Uj);aMo=r(out,"GPT2Model"),out.forEach(t),nMo=r(r$e," (OpenAI GPT-2 model)"),r$e.forEach(t),sMo=i(x),y_=n(x,"LI",{});var t$e=s(y_);pfe=n(t$e,"STRONG",{});var rut=s(pfe);lMo=r(rut,"gpt_neo"),rut.forEach(t),iMo=r(t$e," \u2014 "),Jj=n(t$e,"A",{href:!0});var tut=s(Jj);dMo=r(tut,"GPTNeoModel"),tut.forEach(t),cMo=r(t$e," (GPT Neo model)"),t$e.forEach(t),fMo=i(x),x_=n(x,"LI",{});var a$e=s(x_);_fe=n(a$e,"STRONG",{});var aut=s(_fe);mMo=r(aut,"gpt_neox"),aut.forEach(t),gMo=r(a$e," \u2014 "),Yj=n(a$e,"A",{href:!0});var nut=s(Yj);hMo=r(nut,"GPTNeoXModel"),nut.forEach(t),pMo=r(a$e," (GPT NeoX model)"),a$e.forEach(t),_Mo=i(x),$_=n(x,"LI",{});var n$e=s($_);ufe=n(n$e,"STRONG",{});var sut=s(ufe);uMo=r(sut,"gptj"),sut.forEach(t),bMo=r(n$e," \u2014 "),Kj=n(n$e,"A",{href:!0});var lut=s(Kj);vMo=r(lut,"GPTJModel"),lut.forEach(t),FMo=r(n$e," (GPT-J model)"),n$e.forEach(t),TMo=i(x),k_=n(x,"LI",{});var s$e=s(k_);bfe=n(s$e,"STRONG",{});var iut=s(bfe);MMo=r(iut,"groupvit"),iut.forEach(t),EMo=r(s$e," \u2014 "),Zj=n(s$e,"A",{href:!0});var dut=s(Zj);CMo=r(dut,"GroupViTModel"),dut.forEach(t),wMo=r(s$e," (GroupViT model)"),s$e.forEach(t),AMo=i(x),S_=n(x,"LI",{});var l$e=s(S_);vfe=n(l$e,"STRONG",{});var cut=s(vfe);LMo=r(cut,"hubert"),cut.forEach(t),yMo=r(l$e," \u2014 "),eD=n(l$e,"A",{href:!0});var fut=s(eD);xMo=r(fut,"HubertModel"),fut.forEach(t),$Mo=r(l$e," (Hubert model)"),l$e.forEach(t),kMo=i(x),R_=n(x,"LI",{});var i$e=s(R_);Ffe=n(i$e,"STRONG",{});var mut=s(Ffe);SMo=r(mut,"ibert"),mut.forEach(t),RMo=r(i$e," \u2014 "),oD=n(i$e,"A",{href:!0});var gut=s(oD);PMo=r(gut,"IBertModel"),gut.forEach(t),BMo=r(i$e," (I-BERT model)"),i$e.forEach(t),IMo=i(x),P_=n(x,"LI",{});var d$e=s(P_);Tfe=n(d$e,"STRONG",{});var hut=s(Tfe);NMo=r(hut,"imagegpt"),hut.forEach(t),qMo=r(d$e," \u2014 "),rD=n(d$e,"A",{href:!0});var put=s(rD);jMo=r(put,"ImageGPTModel"),put.forEach(t),DMo=r(d$e," (ImageGPT model)"),d$e.forEach(t),GMo=i(x),B_=n(x,"LI",{});var c$e=s(B_);Mfe=n(c$e,"STRONG",{});var _ut=s(Mfe);OMo=r(_ut,"layoutlm"),_ut.forEach(t),VMo=r(c$e," \u2014 "),tD=n(c$e,"A",{href:!0});var uut=s(tD);XMo=r(uut,"LayoutLMModel"),uut.forEach(t),zMo=r(c$e," (LayoutLM model)"),c$e.forEach(t),QMo=i(x),I_=n(x,"LI",{});var f$e=s(I_);Efe=n(f$e,"STRONG",{});var but=s(Efe);WMo=r(but,"layoutlmv2"),but.forEach(t),HMo=r(f$e," \u2014 "),aD=n(f$e,"A",{href:!0});var vut=s(aD);UMo=r(vut,"LayoutLMv2Model"),vut.forEach(t),JMo=r(f$e," (LayoutLMv2 model)"),f$e.forEach(t),YMo=i(x),N_=n(x,"LI",{});var m$e=s(N_);Cfe=n(m$e,"STRONG",{});var Fut=s(Cfe);KMo=r(Fut,"layoutlmv3"),Fut.forEach(t),ZMo=r(m$e," \u2014 "),nD=n(m$e,"A",{href:!0});var Tut=s(nD);eEo=r(Tut,"LayoutLMv3Model"),Tut.forEach(t),oEo=r(m$e," (LayoutLMv3 model)"),m$e.forEach(t),rEo=i(x),q_=n(x,"LI",{});var g$e=s(q_);wfe=n(g$e,"STRONG",{});var Mut=s(wfe);tEo=r(Mut,"led"),Mut.forEach(t),aEo=r(g$e," \u2014 "),sD=n(g$e,"A",{href:!0});var Eut=s(sD);nEo=r(Eut,"LEDModel"),Eut.forEach(t),sEo=r(g$e," (LED model)"),g$e.forEach(t),lEo=i(x),j_=n(x,"LI",{});var h$e=s(j_);Afe=n(h$e,"STRONG",{});var Cut=s(Afe);iEo=r(Cut,"levit"),Cut.forEach(t),dEo=r(h$e," \u2014 "),lD=n(h$e,"A",{href:!0});var wut=s(lD);cEo=r(wut,"LevitModel"),wut.forEach(t),fEo=r(h$e," (LeViT model)"),h$e.forEach(t),mEo=i(x),D_=n(x,"LI",{});var p$e=s(D_);Lfe=n(p$e,"STRONG",{});var Aut=s(Lfe);gEo=r(Aut,"longformer"),Aut.forEach(t),hEo=r(p$e," \u2014 "),iD=n(p$e,"A",{href:!0});var Lut=s(iD);pEo=r(Lut,"LongformerModel"),Lut.forEach(t),_Eo=r(p$e," (Longformer model)"),p$e.forEach(t),uEo=i(x),G_=n(x,"LI",{});var _$e=s(G_);yfe=n(_$e,"STRONG",{});var yut=s(yfe);bEo=r(yut,"longt5"),yut.forEach(t),vEo=r(_$e," \u2014 "),dD=n(_$e,"A",{href:!0});var xut=s(dD);FEo=r(xut,"LongT5Model"),xut.forEach(t),TEo=r(_$e," (LongT5 model)"),_$e.forEach(t),MEo=i(x),O_=n(x,"LI",{});var u$e=s(O_);xfe=n(u$e,"STRONG",{});var $ut=s(xfe);EEo=r($ut,"luke"),$ut.forEach(t),CEo=r(u$e," \u2014 "),cD=n(u$e,"A",{href:!0});var kut=s(cD);wEo=r(kut,"LukeModel"),kut.forEach(t),AEo=r(u$e," (LUKE model)"),u$e.forEach(t),LEo=i(x),V_=n(x,"LI",{});var b$e=s(V_);$fe=n(b$e,"STRONG",{});var Sut=s($fe);yEo=r(Sut,"lxmert"),Sut.forEach(t),xEo=r(b$e," \u2014 "),fD=n(b$e,"A",{href:!0});var Rut=s(fD);$Eo=r(Rut,"LxmertModel"),Rut.forEach(t),kEo=r(b$e," (LXMERT model)"),b$e.forEach(t),SEo=i(x),X_=n(x,"LI",{});var v$e=s(X_);kfe=n(v$e,"STRONG",{});var Put=s(kfe);REo=r(Put,"m2m_100"),Put.forEach(t),PEo=r(v$e," \u2014 "),mD=n(v$e,"A",{href:!0});var But=s(mD);BEo=r(But,"M2M100Model"),But.forEach(t),IEo=r(v$e," (M2M100 model)"),v$e.forEach(t),NEo=i(x),z_=n(x,"LI",{});var F$e=s(z_);Sfe=n(F$e,"STRONG",{});var Iut=s(Sfe);qEo=r(Iut,"marian"),Iut.forEach(t),jEo=r(F$e," \u2014 "),gD=n(F$e,"A",{href:!0});var Nut=s(gD);DEo=r(Nut,"MarianModel"),Nut.forEach(t),GEo=r(F$e," (Marian model)"),F$e.forEach(t),OEo=i(x),Q_=n(x,"LI",{});var T$e=s(Q_);Rfe=n(T$e,"STRONG",{});var qut=s(Rfe);VEo=r(qut,"maskformer"),qut.forEach(t),XEo=r(T$e," \u2014 "),hD=n(T$e,"A",{href:!0});var jut=s(hD);zEo=r(jut,"MaskFormerModel"),jut.forEach(t),QEo=r(T$e," (MaskFormer model)"),T$e.forEach(t),WEo=i(x),W_=n(x,"LI",{});var M$e=s(W_);Pfe=n(M$e,"STRONG",{});var Dut=s(Pfe);HEo=r(Dut,"mbart"),Dut.forEach(t),UEo=r(M$e," \u2014 "),pD=n(M$e,"A",{href:!0});var Gut=s(pD);JEo=r(Gut,"MBartModel"),Gut.forEach(t),YEo=r(M$e," (mBART model)"),M$e.forEach(t),KEo=i(x),H_=n(x,"LI",{});var E$e=s(H_);Bfe=n(E$e,"STRONG",{});var Out=s(Bfe);ZEo=r(Out,"mctct"),Out.forEach(t),eCo=r(E$e," \u2014 "),_D=n(E$e,"A",{href:!0});var Vut=s(_D);oCo=r(Vut,"MCTCTModel"),Vut.forEach(t),rCo=r(E$e," (M-CTC-T model)"),E$e.forEach(t),tCo=i(x),U_=n(x,"LI",{});var C$e=s(U_);Ife=n(C$e,"STRONG",{});var Xut=s(Ife);aCo=r(Xut,"megatron-bert"),Xut.forEach(t),nCo=r(C$e," \u2014 "),uD=n(C$e,"A",{href:!0});var zut=s(uD);sCo=r(zut,"MegatronBertModel"),zut.forEach(t),lCo=r(C$e," (Megatron-BERT model)"),C$e.forEach(t),iCo=i(x),J_=n(x,"LI",{});var w$e=s(J_);Nfe=n(w$e,"STRONG",{});var Qut=s(Nfe);dCo=r(Qut,"mobilebert"),Qut.forEach(t),cCo=r(w$e," \u2014 "),bD=n(w$e,"A",{href:!0});var Wut=s(bD);fCo=r(Wut,"MobileBertModel"),Wut.forEach(t),mCo=r(w$e," (MobileBERT model)"),w$e.forEach(t),gCo=i(x),Y_=n(x,"LI",{});var A$e=s(Y_);qfe=n(A$e,"STRONG",{});var Hut=s(qfe);hCo=r(Hut,"mobilevit"),Hut.forEach(t),pCo=r(A$e," \u2014 "),vD=n(A$e,"A",{href:!0});var Uut=s(vD);_Co=r(Uut,"MobileViTModel"),Uut.forEach(t),uCo=r(A$e," (MobileViT model)"),A$e.forEach(t),bCo=i(x),K_=n(x,"LI",{});var L$e=s(K_);jfe=n(L$e,"STRONG",{});var Jut=s(jfe);vCo=r(Jut,"mpnet"),Jut.forEach(t),FCo=r(L$e," \u2014 "),FD=n(L$e,"A",{href:!0});var Yut=s(FD);TCo=r(Yut,"MPNetModel"),Yut.forEach(t),MCo=r(L$e," (MPNet model)"),L$e.forEach(t),ECo=i(x),Z_=n(x,"LI",{});var y$e=s(Z_);Dfe=n(y$e,"STRONG",{});var Kut=s(Dfe);CCo=r(Kut,"mt5"),Kut.forEach(t),wCo=r(y$e," \u2014 "),TD=n(y$e,"A",{href:!0});var Zut=s(TD);ACo=r(Zut,"MT5Model"),Zut.forEach(t),LCo=r(y$e," (MT5 model)"),y$e.forEach(t),yCo=i(x),eu=n(x,"LI",{});var x$e=s(eu);Gfe=n(x$e,"STRONG",{});var e1t=s(Gfe);xCo=r(e1t,"mvp"),e1t.forEach(t),$Co=r(x$e," \u2014 "),MD=n(x$e,"A",{href:!0});var o1t=s(MD);kCo=r(o1t,"MvpModel"),o1t.forEach(t),SCo=r(x$e," (MVP model)"),x$e.forEach(t),RCo=i(x),ou=n(x,"LI",{});var $$e=s(ou);Ofe=n($$e,"STRONG",{});var r1t=s(Ofe);PCo=r(r1t,"nezha"),r1t.forEach(t),BCo=r($$e," \u2014 "),ED=n($$e,"A",{href:!0});var t1t=s(ED);ICo=r(t1t,"NezhaModel"),t1t.forEach(t),NCo=r($$e," (Nezha model)"),$$e.forEach(t),qCo=i(x),ru=n(x,"LI",{});var k$e=s(ru);Vfe=n(k$e,"STRONG",{});var a1t=s(Vfe);jCo=r(a1t,"nllb"),a1t.forEach(t),DCo=r(k$e," \u2014 "),CD=n(k$e,"A",{href:!0});var n1t=s(CD);GCo=r(n1t,"M2M100Model"),n1t.forEach(t),OCo=r(k$e," (NLLB model)"),k$e.forEach(t),VCo=i(x),tu=n(x,"LI",{});var S$e=s(tu);Xfe=n(S$e,"STRONG",{});var s1t=s(Xfe);XCo=r(s1t,"nystromformer"),s1t.forEach(t),zCo=r(S$e," \u2014 "),wD=n(S$e,"A",{href:!0});var l1t=s(wD);QCo=r(l1t,"NystromformerModel"),l1t.forEach(t),WCo=r(S$e," (Nystr\xF6mformer model)"),S$e.forEach(t),HCo=i(x),au=n(x,"LI",{});var R$e=s(au);zfe=n(R$e,"STRONG",{});var i1t=s(zfe);UCo=r(i1t,"openai-gpt"),i1t.forEach(t),JCo=r(R$e," \u2014 "),AD=n(R$e,"A",{href:!0});var d1t=s(AD);YCo=r(d1t,"OpenAIGPTModel"),d1t.forEach(t),KCo=r(R$e," (OpenAI GPT model)"),R$e.forEach(t),ZCo=i(x),nu=n(x,"LI",{});var P$e=s(nu);Qfe=n(P$e,"STRONG",{});var c1t=s(Qfe);e5o=r(c1t,"opt"),c1t.forEach(t),o5o=r(P$e," \u2014 "),LD=n(P$e,"A",{href:!0});var f1t=s(LD);r5o=r(f1t,"OPTModel"),f1t.forEach(t),t5o=r(P$e," (OPT model)"),P$e.forEach(t),a5o=i(x),su=n(x,"LI",{});var B$e=s(su);Wfe=n(B$e,"STRONG",{});var m1t=s(Wfe);n5o=r(m1t,"pegasus"),m1t.forEach(t),s5o=r(B$e," \u2014 "),yD=n(B$e,"A",{href:!0});var g1t=s(yD);l5o=r(g1t,"PegasusModel"),g1t.forEach(t),i5o=r(B$e," (Pegasus model)"),B$e.forEach(t),d5o=i(x),lu=n(x,"LI",{});var I$e=s(lu);Hfe=n(I$e,"STRONG",{});var h1t=s(Hfe);c5o=r(h1t,"perceiver"),h1t.forEach(t),f5o=r(I$e," \u2014 "),xD=n(I$e,"A",{href:!0});var p1t=s(xD);m5o=r(p1t,"PerceiverModel"),p1t.forEach(t),g5o=r(I$e," (Perceiver model)"),I$e.forEach(t),h5o=i(x),iu=n(x,"LI",{});var N$e=s(iu);Ufe=n(N$e,"STRONG",{});var _1t=s(Ufe);p5o=r(_1t,"plbart"),_1t.forEach(t),_5o=r(N$e," \u2014 "),$D=n(N$e,"A",{href:!0});var u1t=s($D);u5o=r(u1t,"PLBartModel"),u1t.forEach(t),b5o=r(N$e," (PLBart model)"),N$e.forEach(t),v5o=i(x),du=n(x,"LI",{});var q$e=s(du);Jfe=n(q$e,"STRONG",{});var b1t=s(Jfe);F5o=r(b1t,"poolformer"),b1t.forEach(t),T5o=r(q$e," \u2014 "),kD=n(q$e,"A",{href:!0});var v1t=s(kD);M5o=r(v1t,"PoolFormerModel"),v1t.forEach(t),E5o=r(q$e," (PoolFormer model)"),q$e.forEach(t),C5o=i(x),cu=n(x,"LI",{});var j$e=s(cu);Yfe=n(j$e,"STRONG",{});var F1t=s(Yfe);w5o=r(F1t,"prophetnet"),F1t.forEach(t),A5o=r(j$e," \u2014 "),SD=n(j$e,"A",{href:!0});var T1t=s(SD);L5o=r(T1t,"ProphetNetModel"),T1t.forEach(t),y5o=r(j$e," (ProphetNet model)"),j$e.forEach(t),x5o=i(x),fu=n(x,"LI",{});var D$e=s(fu);Kfe=n(D$e,"STRONG",{});var M1t=s(Kfe);$5o=r(M1t,"qdqbert"),M1t.forEach(t),k5o=r(D$e," \u2014 "),RD=n(D$e,"A",{href:!0});var E1t=s(RD);S5o=r(E1t,"QDQBertModel"),E1t.forEach(t),R5o=r(D$e," (QDQBert model)"),D$e.forEach(t),P5o=i(x),mu=n(x,"LI",{});var G$e=s(mu);Zfe=n(G$e,"STRONG",{});var C1t=s(Zfe);B5o=r(C1t,"reformer"),C1t.forEach(t),I5o=r(G$e," \u2014 "),PD=n(G$e,"A",{href:!0});var w1t=s(PD);N5o=r(w1t,"ReformerModel"),w1t.forEach(t),q5o=r(G$e," (Reformer model)"),G$e.forEach(t),j5o=i(x),gu=n(x,"LI",{});var O$e=s(gu);eme=n(O$e,"STRONG",{});var A1t=s(eme);D5o=r(A1t,"regnet"),A1t.forEach(t),G5o=r(O$e," \u2014 "),BD=n(O$e,"A",{href:!0});var L1t=s(BD);O5o=r(L1t,"RegNetModel"),L1t.forEach(t),V5o=r(O$e," (RegNet model)"),O$e.forEach(t),X5o=i(x),hu=n(x,"LI",{});var V$e=s(hu);ome=n(V$e,"STRONG",{});var y1t=s(ome);z5o=r(y1t,"rembert"),y1t.forEach(t),Q5o=r(V$e," \u2014 "),ID=n(V$e,"A",{href:!0});var x1t=s(ID);W5o=r(x1t,"RemBertModel"),x1t.forEach(t),H5o=r(V$e," (RemBERT model)"),V$e.forEach(t),U5o=i(x),pu=n(x,"LI",{});var X$e=s(pu);rme=n(X$e,"STRONG",{});var $1t=s(rme);J5o=r($1t,"resnet"),$1t.forEach(t),Y5o=r(X$e," \u2014 "),ND=n(X$e,"A",{href:!0});var k1t=s(ND);K5o=r(k1t,"ResNetModel"),k1t.forEach(t),Z5o=r(X$e," (ResNet model)"),X$e.forEach(t),e3o=i(x),_u=n(x,"LI",{});var z$e=s(_u);tme=n(z$e,"STRONG",{});var S1t=s(tme);o3o=r(S1t,"retribert"),S1t.forEach(t),r3o=r(z$e," \u2014 "),qD=n(z$e,"A",{href:!0});var R1t=s(qD);t3o=r(R1t,"RetriBertModel"),R1t.forEach(t),a3o=r(z$e," (RetriBERT model)"),z$e.forEach(t),n3o=i(x),uu=n(x,"LI",{});var Q$e=s(uu);ame=n(Q$e,"STRONG",{});var P1t=s(ame);s3o=r(P1t,"roberta"),P1t.forEach(t),l3o=r(Q$e," \u2014 "),jD=n(Q$e,"A",{href:!0});var B1t=s(jD);i3o=r(B1t,"RobertaModel"),B1t.forEach(t),d3o=r(Q$e," (RoBERTa model)"),Q$e.forEach(t),c3o=i(x),bu=n(x,"LI",{});var W$e=s(bu);nme=n(W$e,"STRONG",{});var I1t=s(nme);f3o=r(I1t,"roformer"),I1t.forEach(t),m3o=r(W$e," \u2014 "),DD=n(W$e,"A",{href:!0});var N1t=s(DD);g3o=r(N1t,"RoFormerModel"),N1t.forEach(t),h3o=r(W$e," (RoFormer model)"),W$e.forEach(t),p3o=i(x),vu=n(x,"LI",{});var H$e=s(vu);sme=n(H$e,"STRONG",{});var q1t=s(sme);_3o=r(q1t,"segformer"),q1t.forEach(t),u3o=r(H$e," \u2014 "),GD=n(H$e,"A",{href:!0});var j1t=s(GD);b3o=r(j1t,"SegformerModel"),j1t.forEach(t),v3o=r(H$e," (SegFormer model)"),H$e.forEach(t),F3o=i(x),Fu=n(x,"LI",{});var U$e=s(Fu);lme=n(U$e,"STRONG",{});var D1t=s(lme);T3o=r(D1t,"sew"),D1t.forEach(t),M3o=r(U$e," \u2014 "),OD=n(U$e,"A",{href:!0});var G1t=s(OD);E3o=r(G1t,"SEWModel"),G1t.forEach(t),C3o=r(U$e," (SEW model)"),U$e.forEach(t),w3o=i(x),Tu=n(x,"LI",{});var J$e=s(Tu);ime=n(J$e,"STRONG",{});var O1t=s(ime);A3o=r(O1t,"sew-d"),O1t.forEach(t),L3o=r(J$e," \u2014 "),VD=n(J$e,"A",{href:!0});var V1t=s(VD);y3o=r(V1t,"SEWDModel"),V1t.forEach(t),x3o=r(J$e," (SEW-D model)"),J$e.forEach(t),$3o=i(x),Mu=n(x,"LI",{});var Y$e=s(Mu);dme=n(Y$e,"STRONG",{});var X1t=s(dme);k3o=r(X1t,"speech_to_text"),X1t.forEach(t),S3o=r(Y$e," \u2014 "),XD=n(Y$e,"A",{href:!0});var z1t=s(XD);R3o=r(z1t,"Speech2TextModel"),z1t.forEach(t),P3o=r(Y$e," (Speech2Text model)"),Y$e.forEach(t),B3o=i(x),Eu=n(x,"LI",{});var K$e=s(Eu);cme=n(K$e,"STRONG",{});var Q1t=s(cme);I3o=r(Q1t,"splinter"),Q1t.forEach(t),N3o=r(K$e," \u2014 "),zD=n(K$e,"A",{href:!0});var W1t=s(zD);q3o=r(W1t,"SplinterModel"),W1t.forEach(t),j3o=r(K$e," (Splinter model)"),K$e.forEach(t),D3o=i(x),Cu=n(x,"LI",{});var Z$e=s(Cu);fme=n(Z$e,"STRONG",{});var H1t=s(fme);G3o=r(H1t,"squeezebert"),H1t.forEach(t),O3o=r(Z$e," \u2014 "),QD=n(Z$e,"A",{href:!0});var U1t=s(QD);V3o=r(U1t,"SqueezeBertModel"),U1t.forEach(t),X3o=r(Z$e," (SqueezeBERT model)"),Z$e.forEach(t),z3o=i(x),wu=n(x,"LI",{});var eke=s(wu);mme=n(eke,"STRONG",{});var J1t=s(mme);Q3o=r(J1t,"swin"),J1t.forEach(t),W3o=r(eke," \u2014 "),WD=n(eke,"A",{href:!0});var Y1t=s(WD);H3o=r(Y1t,"SwinModel"),Y1t.forEach(t),U3o=r(eke," (Swin Transformer model)"),eke.forEach(t),J3o=i(x),Au=n(x,"LI",{});var oke=s(Au);gme=n(oke,"STRONG",{});var K1t=s(gme);Y3o=r(K1t,"swinv2"),K1t.forEach(t),K3o=r(oke," \u2014 "),HD=n(oke,"A",{href:!0});var Z1t=s(HD);Z3o=r(Z1t,"Swinv2Model"),Z1t.forEach(t),e0o=r(oke," (Swin Transformer V2 model)"),oke.forEach(t),o0o=i(x),Lu=n(x,"LI",{});var rke=s(Lu);hme=n(rke,"STRONG",{});var e4t=s(hme);r0o=r(e4t,"t5"),e4t.forEach(t),t0o=r(rke," \u2014 "),UD=n(rke,"A",{href:!0});var o4t=s(UD);a0o=r(o4t,"T5Model"),o4t.forEach(t),n0o=r(rke," (T5 model)"),rke.forEach(t),s0o=i(x),yu=n(x,"LI",{});var tke=s(yu);pme=n(tke,"STRONG",{});var r4t=s(pme);l0o=r(r4t,"tapas"),r4t.forEach(t),i0o=r(tke," \u2014 "),JD=n(tke,"A",{href:!0});var t4t=s(JD);d0o=r(t4t,"TapasModel"),t4t.forEach(t),c0o=r(tke," (TAPAS model)"),tke.forEach(t),f0o=i(x),xu=n(x,"LI",{});var ake=s(xu);_me=n(ake,"STRONG",{});var a4t=s(_me);m0o=r(a4t,"trajectory_transformer"),a4t.forEach(t),g0o=r(ake," \u2014 "),YD=n(ake,"A",{href:!0});var n4t=s(YD);h0o=r(n4t,"TrajectoryTransformerModel"),n4t.forEach(t),p0o=r(ake," (Trajectory Transformer model)"),ake.forEach(t),_0o=i(x),$u=n(x,"LI",{});var nke=s($u);ume=n(nke,"STRONG",{});var s4t=s(ume);u0o=r(s4t,"transfo-xl"),s4t.forEach(t),b0o=r(nke," \u2014 "),KD=n(nke,"A",{href:!0});var l4t=s(KD);v0o=r(l4t,"TransfoXLModel"),l4t.forEach(t),F0o=r(nke," (Transformer-XL model)"),nke.forEach(t),T0o=i(x),ku=n(x,"LI",{});var ske=s(ku);bme=n(ske,"STRONG",{});var i4t=s(bme);M0o=r(i4t,"unispeech"),i4t.forEach(t),E0o=r(ske," \u2014 "),ZD=n(ske,"A",{href:!0});var d4t=s(ZD);C0o=r(d4t,"UniSpeechModel"),d4t.forEach(t),w0o=r(ske," (UniSpeech model)"),ske.forEach(t),A0o=i(x),Su=n(x,"LI",{});var lke=s(Su);vme=n(lke,"STRONG",{});var c4t=s(vme);L0o=r(c4t,"unispeech-sat"),c4t.forEach(t),y0o=r(lke," \u2014 "),eG=n(lke,"A",{href:!0});var f4t=s(eG);x0o=r(f4t,"UniSpeechSatModel"),f4t.forEach(t),$0o=r(lke," (UniSpeechSat model)"),lke.forEach(t),k0o=i(x),Ru=n(x,"LI",{});var ike=s(Ru);Fme=n(ike,"STRONG",{});var m4t=s(Fme);S0o=r(m4t,"van"),m4t.forEach(t),R0o=r(ike," \u2014 "),oG=n(ike,"A",{href:!0});var g4t=s(oG);P0o=r(g4t,"VanModel"),g4t.forEach(t),B0o=r(ike," (VAN model)"),ike.forEach(t),I0o=i(x),Pu=n(x,"LI",{});var dke=s(Pu);Tme=n(dke,"STRONG",{});var h4t=s(Tme);N0o=r(h4t,"vilt"),h4t.forEach(t),q0o=r(dke," \u2014 "),rG=n(dke,"A",{href:!0});var p4t=s(rG);j0o=r(p4t,"ViltModel"),p4t.forEach(t),D0o=r(dke," (ViLT model)"),dke.forEach(t),G0o=i(x),Bu=n(x,"LI",{});var cke=s(Bu);Mme=n(cke,"STRONG",{});var _4t=s(Mme);O0o=r(_4t,"vision-text-dual-encoder"),_4t.forEach(t),V0o=r(cke," \u2014 "),tG=n(cke,"A",{href:!0});var u4t=s(tG);X0o=r(u4t,"VisionTextDualEncoderModel"),u4t.forEach(t),z0o=r(cke," (VisionTextDualEncoder model)"),cke.forEach(t),Q0o=i(x),Iu=n(x,"LI",{});var fke=s(Iu);Eme=n(fke,"STRONG",{});var b4t=s(Eme);W0o=r(b4t,"visual_bert"),b4t.forEach(t),H0o=r(fke," \u2014 "),aG=n(fke,"A",{href:!0});var v4t=s(aG);U0o=r(v4t,"VisualBertModel"),v4t.forEach(t),J0o=r(fke," (VisualBERT model)"),fke.forEach(t),Y0o=i(x),Nu=n(x,"LI",{});var mke=s(Nu);Cme=n(mke,"STRONG",{});var F4t=s(Cme);K0o=r(F4t,"vit"),F4t.forEach(t),Z0o=r(mke," \u2014 "),nG=n(mke,"A",{href:!0});var T4t=s(nG);ewo=r(T4t,"ViTModel"),T4t.forEach(t),owo=r(mke," (ViT model)"),mke.forEach(t),rwo=i(x),qu=n(x,"LI",{});var gke=s(qu);wme=n(gke,"STRONG",{});var M4t=s(wme);two=r(M4t,"vit_mae"),M4t.forEach(t),awo=r(gke," \u2014 "),sG=n(gke,"A",{href:!0});var E4t=s(sG);nwo=r(E4t,"ViTMAEModel"),E4t.forEach(t),swo=r(gke," (ViTMAE model)"),gke.forEach(t),lwo=i(x),ju=n(x,"LI",{});var hke=s(ju);Ame=n(hke,"STRONG",{});var C4t=s(Ame);iwo=r(C4t,"wav2vec2"),C4t.forEach(t),dwo=r(hke," \u2014 "),lG=n(hke,"A",{href:!0});var w4t=s(lG);cwo=r(w4t,"Wav2Vec2Model"),w4t.forEach(t),fwo=r(hke," (Wav2Vec2 model)"),hke.forEach(t),mwo=i(x),Du=n(x,"LI",{});var pke=s(Du);Lme=n(pke,"STRONG",{});var A4t=s(Lme);gwo=r(A4t,"wav2vec2-conformer"),A4t.forEach(t),hwo=r(pke," \u2014 "),iG=n(pke,"A",{href:!0});var L4t=s(iG);pwo=r(L4t,"Wav2Vec2ConformerModel"),L4t.forEach(t),_wo=r(pke," (Wav2Vec2-Conformer model)"),pke.forEach(t),uwo=i(x),Gu=n(x,"LI",{});var _ke=s(Gu);yme=n(_ke,"STRONG",{});var y4t=s(yme);bwo=r(y4t,"wavlm"),y4t.forEach(t),vwo=r(_ke," \u2014 "),dG=n(_ke,"A",{href:!0});var x4t=s(dG);Fwo=r(x4t,"WavLMModel"),x4t.forEach(t),Two=r(_ke," (WavLM model)"),_ke.forEach(t),Mwo=i(x),Ou=n(x,"LI",{});var uke=s(Ou);xme=n(uke,"STRONG",{});var $4t=s(xme);Ewo=r($4t,"xglm"),$4t.forEach(t),Cwo=r(uke," \u2014 "),cG=n(uke,"A",{href:!0});var k4t=s(cG);wwo=r(k4t,"XGLMModel"),k4t.forEach(t),Awo=r(uke," (XGLM model)"),uke.forEach(t),Lwo=i(x),Vu=n(x,"LI",{});var bke=s(Vu);$me=n(bke,"STRONG",{});var S4t=s($me);ywo=r(S4t,"xlm"),S4t.forEach(t),xwo=r(bke," \u2014 "),fG=n(bke,"A",{href:!0});var R4t=s(fG);$wo=r(R4t,"XLMModel"),R4t.forEach(t),kwo=r(bke," (XLM model)"),bke.forEach(t),Swo=i(x),Xu=n(x,"LI",{});var vke=s(Xu);kme=n(vke,"STRONG",{});var P4t=s(kme);Rwo=r(P4t,"xlm-prophetnet"),P4t.forEach(t),Pwo=r(vke," \u2014 "),mG=n(vke,"A",{href:!0});var B4t=s(mG);Bwo=r(B4t,"XLMProphetNetModel"),B4t.forEach(t),Iwo=r(vke," (XLM-ProphetNet model)"),vke.forEach(t),Nwo=i(x),zu=n(x,"LI",{});var Fke=s(zu);Sme=n(Fke,"STRONG",{});var I4t=s(Sme);qwo=r(I4t,"xlm-roberta"),I4t.forEach(t),jwo=r(Fke," \u2014 "),gG=n(Fke,"A",{href:!0});var N4t=s(gG);Dwo=r(N4t,"XLMRobertaModel"),N4t.forEach(t),Gwo=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),Owo=i(x),Qu=n(x,"LI",{});var Tke=s(Qu);Rme=n(Tke,"STRONG",{});var q4t=s(Rme);Vwo=r(q4t,"xlm-roberta-xl"),q4t.forEach(t),Xwo=r(Tke," \u2014 "),hG=n(Tke,"A",{href:!0});var j4t=s(hG);zwo=r(j4t,"XLMRobertaXLModel"),j4t.forEach(t),Qwo=r(Tke," (XLM-RoBERTa-XL model)"),Tke.forEach(t),Wwo=i(x),Wu=n(x,"LI",{});var Mke=s(Wu);Pme=n(Mke,"STRONG",{});var D4t=s(Pme);Hwo=r(D4t,"xlnet"),D4t.forEach(t),Uwo=r(Mke," \u2014 "),pG=n(Mke,"A",{href:!0});var G4t=s(pG);Jwo=r(G4t,"XLNetModel"),G4t.forEach(t),Ywo=r(Mke," (XLNet model)"),Mke.forEach(t),Kwo=i(x),Hu=n(x,"LI",{});var Eke=s(Hu);Bme=n(Eke,"STRONG",{});var O4t=s(Bme);Zwo=r(O4t,"yolos"),O4t.forEach(t),eAo=r(Eke," \u2014 "),_G=n(Eke,"A",{href:!0});var V4t=s(_G);oAo=r(V4t,"YolosModel"),V4t.forEach(t),rAo=r(Eke," (YOLOS model)"),Eke.forEach(t),tAo=i(x),Uu=n(x,"LI",{});var Cke=s(Uu);Ime=n(Cke,"STRONG",{});var X4t=s(Ime);aAo=r(X4t,"yoso"),X4t.forEach(t),nAo=r(Cke," \u2014 "),uG=n(Cke,"A",{href:!0});var z4t=s(uG);sAo=r(z4t,"YosoModel"),z4t.forEach(t),lAo=r(Cke," (YOSO model)"),Cke.forEach(t),x.forEach(t),iAo=i(la),Ju=n(la,"P",{});var wke=s(Ju);dAo=r(wke,"The model is set in evaluation mode by default using "),Nme=n(wke,"CODE",{});var Q4t=s(Nme);cAo=r(Q4t,"model.eval()"),Q4t.forEach(t),fAo=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=n(wke,"CODE",{});var W4t=s(qme);mAo=r(W4t,"model.train()"),W4t.forEach(t),wke.forEach(t),gAo=i(la),T(Yu.$$.fragment,la),la.forEach(t),al.forEach(t),UXe=i(f),Qi=n(f,"H2",{class:!0});var oWe=s(Qi);Ku=n(oWe,"A",{id:!0,class:!0,href:!0});var H4t=s(Ku);jme=n(H4t,"SPAN",{});var U4t=s(jme);T(zL.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),hAo=i(oWe),Dme=n(oWe,"SPAN",{});var J4t=s(Dme);pAo=r(J4t,"AutoModelForPreTraining"),J4t.forEach(t),oWe.forEach(t),JXe=i(f),ko=n(f,"DIV",{class:!0});var nl=s(ko);T(QL.$$.fragment,nl),_Ao=i(nl),Wi=n(nl,"P",{});var ote=s(Wi);uAo=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bG=n(ote,"A",{href:!0});var Y4t=s(bG);bAo=r(Y4t,"from_pretrained()"),Y4t.forEach(t),vAo=r(ote," class method or the "),vG=n(ote,"A",{href:!0});var K4t=s(vG);FAo=r(K4t,"from_config()"),K4t.forEach(t),TAo=r(ote,` class
method.`),ote.forEach(t),MAo=i(nl),WL=n(nl,"P",{});var rWe=s(WL);EAo=r(rWe,"This class cannot be instantiated directly using "),Gme=n(rWe,"CODE",{});var Z4t=s(Gme);CAo=r(Z4t,"__init__()"),Z4t.forEach(t),wAo=r(rWe," (throws an error)."),rWe.forEach(t),AAo=i(nl),dt=n(nl,"DIV",{class:!0});var vw=s(dt);T(HL.$$.fragment,vw),LAo=i(vw),Ome=n(vw,"P",{});var e2t=s(Ome);yAo=r(e2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e2t.forEach(t),xAo=i(vw),Hi=n(vw,"P",{});var rte=s(Hi);$Ao=r(rte,`Note:
Loading a model from its configuration file does `),Vme=n(rte,"STRONG",{});var o2t=s(Vme);kAo=r(o2t,"not"),o2t.forEach(t),SAo=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(rte,"A",{href:!0});var r2t=s(FG);RAo=r(r2t,"from_pretrained()"),r2t.forEach(t),PAo=r(rte," to load the model weights."),rte.forEach(t),BAo=i(vw),T(Zu.$$.fragment,vw),vw.forEach(t),IAo=i(nl),Ke=n(nl,"DIV",{class:!0});var ia=s(Ke);T(UL.$$.fragment,ia),NAo=i(ia),Xme=n(ia,"P",{});var t2t=s(Xme);qAo=r(t2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t2t.forEach(t),jAo=i(ia),Na=n(ia,"P",{});var Fw=s(Na);DAo=r(Fw,"The model class to instantiate is selected based on the "),zme=n(Fw,"CODE",{});var a2t=s(zme);GAo=r(a2t,"model_type"),a2t.forEach(t),OAo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Qme=n(Fw,"CODE",{});var n2t=s(Qme);VAo=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),XAo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=n(Fw,"CODE",{});var s2t=s(Wme);zAo=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),QAo=r(Fw,":"),Fw.forEach(t),WAo=i(ia),G=n(ia,"UL",{});var O=s(G);e1=n(O,"LI",{});var Ake=s(e1);Hme=n(Ake,"STRONG",{});var l2t=s(Hme);HAo=r(l2t,"albert"),l2t.forEach(t),UAo=r(Ake," \u2014 "),TG=n(Ake,"A",{href:!0});var i2t=s(TG);JAo=r(i2t,"AlbertForPreTraining"),i2t.forEach(t),YAo=r(Ake," (ALBERT model)"),Ake.forEach(t),KAo=i(O),o1=n(O,"LI",{});var Lke=s(o1);Ume=n(Lke,"STRONG",{});var d2t=s(Ume);ZAo=r(d2t,"bart"),d2t.forEach(t),eLo=r(Lke," \u2014 "),MG=n(Lke,"A",{href:!0});var c2t=s(MG);oLo=r(c2t,"BartForConditionalGeneration"),c2t.forEach(t),rLo=r(Lke," (BART model)"),Lke.forEach(t),tLo=i(O),r1=n(O,"LI",{});var yke=s(r1);Jme=n(yke,"STRONG",{});var f2t=s(Jme);aLo=r(f2t,"bert"),f2t.forEach(t),nLo=r(yke," \u2014 "),EG=n(yke,"A",{href:!0});var m2t=s(EG);sLo=r(m2t,"BertForPreTraining"),m2t.forEach(t),lLo=r(yke," (BERT model)"),yke.forEach(t),iLo=i(O),t1=n(O,"LI",{});var xke=s(t1);Yme=n(xke,"STRONG",{});var g2t=s(Yme);dLo=r(g2t,"big_bird"),g2t.forEach(t),cLo=r(xke," \u2014 "),CG=n(xke,"A",{href:!0});var h2t=s(CG);fLo=r(h2t,"BigBirdForPreTraining"),h2t.forEach(t),mLo=r(xke," (BigBird model)"),xke.forEach(t),gLo=i(O),a1=n(O,"LI",{});var $ke=s(a1);Kme=n($ke,"STRONG",{});var p2t=s(Kme);hLo=r(p2t,"bloom"),p2t.forEach(t),pLo=r($ke," \u2014 "),wG=n($ke,"A",{href:!0});var _2t=s(wG);_Lo=r(_2t,"BloomForCausalLM"),_2t.forEach(t),uLo=r($ke," (BLOOM model)"),$ke.forEach(t),bLo=i(O),n1=n(O,"LI",{});var kke=s(n1);Zme=n(kke,"STRONG",{});var u2t=s(Zme);vLo=r(u2t,"camembert"),u2t.forEach(t),FLo=r(kke," \u2014 "),AG=n(kke,"A",{href:!0});var b2t=s(AG);TLo=r(b2t,"CamembertForMaskedLM"),b2t.forEach(t),MLo=r(kke," (CamemBERT model)"),kke.forEach(t),ELo=i(O),s1=n(O,"LI",{});var Ske=s(s1);ege=n(Ske,"STRONG",{});var v2t=s(ege);CLo=r(v2t,"ctrl"),v2t.forEach(t),wLo=r(Ske," \u2014 "),LG=n(Ske,"A",{href:!0});var F2t=s(LG);ALo=r(F2t,"CTRLLMHeadModel"),F2t.forEach(t),LLo=r(Ske," (CTRL model)"),Ske.forEach(t),yLo=i(O),l1=n(O,"LI",{});var Rke=s(l1);oge=n(Rke,"STRONG",{});var T2t=s(oge);xLo=r(T2t,"data2vec-text"),T2t.forEach(t),$Lo=r(Rke," \u2014 "),yG=n(Rke,"A",{href:!0});var M2t=s(yG);kLo=r(M2t,"Data2VecTextForMaskedLM"),M2t.forEach(t),SLo=r(Rke," (Data2VecText model)"),Rke.forEach(t),RLo=i(O),i1=n(O,"LI",{});var Pke=s(i1);rge=n(Pke,"STRONG",{});var E2t=s(rge);PLo=r(E2t,"deberta"),E2t.forEach(t),BLo=r(Pke," \u2014 "),xG=n(Pke,"A",{href:!0});var C2t=s(xG);ILo=r(C2t,"DebertaForMaskedLM"),C2t.forEach(t),NLo=r(Pke," (DeBERTa model)"),Pke.forEach(t),qLo=i(O),d1=n(O,"LI",{});var Bke=s(d1);tge=n(Bke,"STRONG",{});var w2t=s(tge);jLo=r(w2t,"deberta-v2"),w2t.forEach(t),DLo=r(Bke," \u2014 "),$G=n(Bke,"A",{href:!0});var A2t=s($G);GLo=r(A2t,"DebertaV2ForMaskedLM"),A2t.forEach(t),OLo=r(Bke," (DeBERTa-v2 model)"),Bke.forEach(t),VLo=i(O),c1=n(O,"LI",{});var Ike=s(c1);age=n(Ike,"STRONG",{});var L2t=s(age);XLo=r(L2t,"distilbert"),L2t.forEach(t),zLo=r(Ike," \u2014 "),kG=n(Ike,"A",{href:!0});var y2t=s(kG);QLo=r(y2t,"DistilBertForMaskedLM"),y2t.forEach(t),WLo=r(Ike," (DistilBERT model)"),Ike.forEach(t),HLo=i(O),f1=n(O,"LI",{});var Nke=s(f1);nge=n(Nke,"STRONG",{});var x2t=s(nge);ULo=r(x2t,"electra"),x2t.forEach(t),JLo=r(Nke," \u2014 "),SG=n(Nke,"A",{href:!0});var $2t=s(SG);YLo=r($2t,"ElectraForPreTraining"),$2t.forEach(t),KLo=r(Nke," (ELECTRA model)"),Nke.forEach(t),ZLo=i(O),m1=n(O,"LI",{});var qke=s(m1);sge=n(qke,"STRONG",{});var k2t=s(sge);eyo=r(k2t,"flaubert"),k2t.forEach(t),oyo=r(qke," \u2014 "),RG=n(qke,"A",{href:!0});var S2t=s(RG);ryo=r(S2t,"FlaubertWithLMHeadModel"),S2t.forEach(t),tyo=r(qke," (FlauBERT model)"),qke.forEach(t),ayo=i(O),g1=n(O,"LI",{});var jke=s(g1);lge=n(jke,"STRONG",{});var R2t=s(lge);nyo=r(R2t,"flava"),R2t.forEach(t),syo=r(jke," \u2014 "),PG=n(jke,"A",{href:!0});var P2t=s(PG);lyo=r(P2t,"FlavaForPreTraining"),P2t.forEach(t),iyo=r(jke," (FLAVA model)"),jke.forEach(t),dyo=i(O),h1=n(O,"LI",{});var Dke=s(h1);ige=n(Dke,"STRONG",{});var B2t=s(ige);cyo=r(B2t,"fnet"),B2t.forEach(t),fyo=r(Dke," \u2014 "),BG=n(Dke,"A",{href:!0});var I2t=s(BG);myo=r(I2t,"FNetForPreTraining"),I2t.forEach(t),gyo=r(Dke," (FNet model)"),Dke.forEach(t),hyo=i(O),p1=n(O,"LI",{});var Gke=s(p1);dge=n(Gke,"STRONG",{});var N2t=s(dge);pyo=r(N2t,"fsmt"),N2t.forEach(t),_yo=r(Gke," \u2014 "),IG=n(Gke,"A",{href:!0});var q2t=s(IG);uyo=r(q2t,"FSMTForConditionalGeneration"),q2t.forEach(t),byo=r(Gke," (FairSeq Machine-Translation model)"),Gke.forEach(t),vyo=i(O),_1=n(O,"LI",{});var Oke=s(_1);cge=n(Oke,"STRONG",{});var j2t=s(cge);Fyo=r(j2t,"funnel"),j2t.forEach(t),Tyo=r(Oke," \u2014 "),NG=n(Oke,"A",{href:!0});var D2t=s(NG);Myo=r(D2t,"FunnelForPreTraining"),D2t.forEach(t),Eyo=r(Oke," (Funnel Transformer model)"),Oke.forEach(t),Cyo=i(O),u1=n(O,"LI",{});var Vke=s(u1);fge=n(Vke,"STRONG",{});var G2t=s(fge);wyo=r(G2t,"gpt2"),G2t.forEach(t),Ayo=r(Vke," \u2014 "),qG=n(Vke,"A",{href:!0});var O2t=s(qG);Lyo=r(O2t,"GPT2LMHeadModel"),O2t.forEach(t),yyo=r(Vke," (OpenAI GPT-2 model)"),Vke.forEach(t),xyo=i(O),b1=n(O,"LI",{});var Xke=s(b1);mge=n(Xke,"STRONG",{});var V2t=s(mge);$yo=r(V2t,"ibert"),V2t.forEach(t),kyo=r(Xke," \u2014 "),jG=n(Xke,"A",{href:!0});var X2t=s(jG);Syo=r(X2t,"IBertForMaskedLM"),X2t.forEach(t),Ryo=r(Xke," (I-BERT model)"),Xke.forEach(t),Pyo=i(O),v1=n(O,"LI",{});var zke=s(v1);gge=n(zke,"STRONG",{});var z2t=s(gge);Byo=r(z2t,"layoutlm"),z2t.forEach(t),Iyo=r(zke," \u2014 "),DG=n(zke,"A",{href:!0});var Q2t=s(DG);Nyo=r(Q2t,"LayoutLMForMaskedLM"),Q2t.forEach(t),qyo=r(zke," (LayoutLM model)"),zke.forEach(t),jyo=i(O),F1=n(O,"LI",{});var Qke=s(F1);hge=n(Qke,"STRONG",{});var W2t=s(hge);Dyo=r(W2t,"longformer"),W2t.forEach(t),Gyo=r(Qke," \u2014 "),GG=n(Qke,"A",{href:!0});var H2t=s(GG);Oyo=r(H2t,"LongformerForMaskedLM"),H2t.forEach(t),Vyo=r(Qke," (Longformer model)"),Qke.forEach(t),Xyo=i(O),T1=n(O,"LI",{});var Wke=s(T1);pge=n(Wke,"STRONG",{});var U2t=s(pge);zyo=r(U2t,"lxmert"),U2t.forEach(t),Qyo=r(Wke," \u2014 "),OG=n(Wke,"A",{href:!0});var J2t=s(OG);Wyo=r(J2t,"LxmertForPreTraining"),J2t.forEach(t),Hyo=r(Wke," (LXMERT model)"),Wke.forEach(t),Uyo=i(O),M1=n(O,"LI",{});var Hke=s(M1);_ge=n(Hke,"STRONG",{});var Y2t=s(_ge);Jyo=r(Y2t,"megatron-bert"),Y2t.forEach(t),Yyo=r(Hke," \u2014 "),VG=n(Hke,"A",{href:!0});var K2t=s(VG);Kyo=r(K2t,"MegatronBertForPreTraining"),K2t.forEach(t),Zyo=r(Hke," (Megatron-BERT model)"),Hke.forEach(t),e8o=i(O),E1=n(O,"LI",{});var Uke=s(E1);uge=n(Uke,"STRONG",{});var Z2t=s(uge);o8o=r(Z2t,"mobilebert"),Z2t.forEach(t),r8o=r(Uke," \u2014 "),XG=n(Uke,"A",{href:!0});var ebt=s(XG);t8o=r(ebt,"MobileBertForPreTraining"),ebt.forEach(t),a8o=r(Uke," (MobileBERT model)"),Uke.forEach(t),n8o=i(O),C1=n(O,"LI",{});var Jke=s(C1);bge=n(Jke,"STRONG",{});var obt=s(bge);s8o=r(obt,"mpnet"),obt.forEach(t),l8o=r(Jke," \u2014 "),zG=n(Jke,"A",{href:!0});var rbt=s(zG);i8o=r(rbt,"MPNetForMaskedLM"),rbt.forEach(t),d8o=r(Jke," (MPNet model)"),Jke.forEach(t),c8o=i(O),w1=n(O,"LI",{});var Yke=s(w1);vge=n(Yke,"STRONG",{});var tbt=s(vge);f8o=r(tbt,"mvp"),tbt.forEach(t),m8o=r(Yke," \u2014 "),QG=n(Yke,"A",{href:!0});var abt=s(QG);g8o=r(abt,"MvpForConditionalGeneration"),abt.forEach(t),h8o=r(Yke," (MVP model)"),Yke.forEach(t),p8o=i(O),A1=n(O,"LI",{});var Kke=s(A1);Fge=n(Kke,"STRONG",{});var nbt=s(Fge);_8o=r(nbt,"nezha"),nbt.forEach(t),u8o=r(Kke," \u2014 "),WG=n(Kke,"A",{href:!0});var sbt=s(WG);b8o=r(sbt,"NezhaForPreTraining"),sbt.forEach(t),v8o=r(Kke," (Nezha model)"),Kke.forEach(t),F8o=i(O),L1=n(O,"LI",{});var Zke=s(L1);Tge=n(Zke,"STRONG",{});var lbt=s(Tge);T8o=r(lbt,"openai-gpt"),lbt.forEach(t),M8o=r(Zke," \u2014 "),HG=n(Zke,"A",{href:!0});var ibt=s(HG);E8o=r(ibt,"OpenAIGPTLMHeadModel"),ibt.forEach(t),C8o=r(Zke," (OpenAI GPT model)"),Zke.forEach(t),w8o=i(O),y1=n(O,"LI",{});var eSe=s(y1);Mge=n(eSe,"STRONG",{});var dbt=s(Mge);A8o=r(dbt,"retribert"),dbt.forEach(t),L8o=r(eSe," \u2014 "),UG=n(eSe,"A",{href:!0});var cbt=s(UG);y8o=r(cbt,"RetriBertModel"),cbt.forEach(t),x8o=r(eSe," (RetriBERT model)"),eSe.forEach(t),$8o=i(O),x1=n(O,"LI",{});var oSe=s(x1);Ege=n(oSe,"STRONG",{});var fbt=s(Ege);k8o=r(fbt,"roberta"),fbt.forEach(t),S8o=r(oSe," \u2014 "),JG=n(oSe,"A",{href:!0});var mbt=s(JG);R8o=r(mbt,"RobertaForMaskedLM"),mbt.forEach(t),P8o=r(oSe," (RoBERTa model)"),oSe.forEach(t),B8o=i(O),$1=n(O,"LI",{});var rSe=s($1);Cge=n(rSe,"STRONG",{});var gbt=s(Cge);I8o=r(gbt,"splinter"),gbt.forEach(t),N8o=r(rSe," \u2014 "),YG=n(rSe,"A",{href:!0});var hbt=s(YG);q8o=r(hbt,"SplinterForPreTraining"),hbt.forEach(t),j8o=r(rSe," (Splinter model)"),rSe.forEach(t),D8o=i(O),k1=n(O,"LI",{});var tSe=s(k1);wge=n(tSe,"STRONG",{});var pbt=s(wge);G8o=r(pbt,"squeezebert"),pbt.forEach(t),O8o=r(tSe," \u2014 "),KG=n(tSe,"A",{href:!0});var _bt=s(KG);V8o=r(_bt,"SqueezeBertForMaskedLM"),_bt.forEach(t),X8o=r(tSe," (SqueezeBERT model)"),tSe.forEach(t),z8o=i(O),S1=n(O,"LI",{});var aSe=s(S1);Age=n(aSe,"STRONG",{});var ubt=s(Age);Q8o=r(ubt,"t5"),ubt.forEach(t),W8o=r(aSe," \u2014 "),ZG=n(aSe,"A",{href:!0});var bbt=s(ZG);H8o=r(bbt,"T5ForConditionalGeneration"),bbt.forEach(t),U8o=r(aSe," (T5 model)"),aSe.forEach(t),J8o=i(O),R1=n(O,"LI",{});var nSe=s(R1);Lge=n(nSe,"STRONG",{});var vbt=s(Lge);Y8o=r(vbt,"tapas"),vbt.forEach(t),K8o=r(nSe," \u2014 "),eO=n(nSe,"A",{href:!0});var Fbt=s(eO);Z8o=r(Fbt,"TapasForMaskedLM"),Fbt.forEach(t),exo=r(nSe," (TAPAS model)"),nSe.forEach(t),oxo=i(O),P1=n(O,"LI",{});var sSe=s(P1);yge=n(sSe,"STRONG",{});var Tbt=s(yge);rxo=r(Tbt,"transfo-xl"),Tbt.forEach(t),txo=r(sSe," \u2014 "),oO=n(sSe,"A",{href:!0});var Mbt=s(oO);axo=r(Mbt,"TransfoXLLMHeadModel"),Mbt.forEach(t),nxo=r(sSe," (Transformer-XL model)"),sSe.forEach(t),sxo=i(O),B1=n(O,"LI",{});var lSe=s(B1);xge=n(lSe,"STRONG",{});var Ebt=s(xge);lxo=r(Ebt,"unispeech"),Ebt.forEach(t),ixo=r(lSe," \u2014 "),rO=n(lSe,"A",{href:!0});var Cbt=s(rO);dxo=r(Cbt,"UniSpeechForPreTraining"),Cbt.forEach(t),cxo=r(lSe," (UniSpeech model)"),lSe.forEach(t),fxo=i(O),I1=n(O,"LI",{});var iSe=s(I1);$ge=n(iSe,"STRONG",{});var wbt=s($ge);mxo=r(wbt,"unispeech-sat"),wbt.forEach(t),gxo=r(iSe," \u2014 "),tO=n(iSe,"A",{href:!0});var Abt=s(tO);hxo=r(Abt,"UniSpeechSatForPreTraining"),Abt.forEach(t),pxo=r(iSe," (UniSpeechSat model)"),iSe.forEach(t),_xo=i(O),N1=n(O,"LI",{});var dSe=s(N1);kge=n(dSe,"STRONG",{});var Lbt=s(kge);uxo=r(Lbt,"visual_bert"),Lbt.forEach(t),bxo=r(dSe," \u2014 "),aO=n(dSe,"A",{href:!0});var ybt=s(aO);vxo=r(ybt,"VisualBertForPreTraining"),ybt.forEach(t),Fxo=r(dSe," (VisualBERT model)"),dSe.forEach(t),Txo=i(O),q1=n(O,"LI",{});var cSe=s(q1);Sge=n(cSe,"STRONG",{});var xbt=s(Sge);Mxo=r(xbt,"vit_mae"),xbt.forEach(t),Exo=r(cSe," \u2014 "),nO=n(cSe,"A",{href:!0});var $bt=s(nO);Cxo=r($bt,"ViTMAEForPreTraining"),$bt.forEach(t),wxo=r(cSe," (ViTMAE model)"),cSe.forEach(t),Axo=i(O),j1=n(O,"LI",{});var fSe=s(j1);Rge=n(fSe,"STRONG",{});var kbt=s(Rge);Lxo=r(kbt,"wav2vec2"),kbt.forEach(t),yxo=r(fSe," \u2014 "),sO=n(fSe,"A",{href:!0});var Sbt=s(sO);xxo=r(Sbt,"Wav2Vec2ForPreTraining"),Sbt.forEach(t),$xo=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),kxo=i(O),D1=n(O,"LI",{});var mSe=s(D1);Pge=n(mSe,"STRONG",{});var Rbt=s(Pge);Sxo=r(Rbt,"wav2vec2-conformer"),Rbt.forEach(t),Rxo=r(mSe," \u2014 "),lO=n(mSe,"A",{href:!0});var Pbt=s(lO);Pxo=r(Pbt,"Wav2Vec2ConformerForPreTraining"),Pbt.forEach(t),Bxo=r(mSe," (Wav2Vec2-Conformer model)"),mSe.forEach(t),Ixo=i(O),G1=n(O,"LI",{});var gSe=s(G1);Bge=n(gSe,"STRONG",{});var Bbt=s(Bge);Nxo=r(Bbt,"xlm"),Bbt.forEach(t),qxo=r(gSe," \u2014 "),iO=n(gSe,"A",{href:!0});var Ibt=s(iO);jxo=r(Ibt,"XLMWithLMHeadModel"),Ibt.forEach(t),Dxo=r(gSe," (XLM model)"),gSe.forEach(t),Gxo=i(O),O1=n(O,"LI",{});var hSe=s(O1);Ige=n(hSe,"STRONG",{});var Nbt=s(Ige);Oxo=r(Nbt,"xlm-roberta"),Nbt.forEach(t),Vxo=r(hSe," \u2014 "),dO=n(hSe,"A",{href:!0});var qbt=s(dO);Xxo=r(qbt,"XLMRobertaForMaskedLM"),qbt.forEach(t),zxo=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),Qxo=i(O),V1=n(O,"LI",{});var pSe=s(V1);Nge=n(pSe,"STRONG",{});var jbt=s(Nge);Wxo=r(jbt,"xlm-roberta-xl"),jbt.forEach(t),Hxo=r(pSe," \u2014 "),cO=n(pSe,"A",{href:!0});var Dbt=s(cO);Uxo=r(Dbt,"XLMRobertaXLForMaskedLM"),Dbt.forEach(t),Jxo=r(pSe," (XLM-RoBERTa-XL model)"),pSe.forEach(t),Yxo=i(O),X1=n(O,"LI",{});var _Se=s(X1);qge=n(_Se,"STRONG",{});var Gbt=s(qge);Kxo=r(Gbt,"xlnet"),Gbt.forEach(t),Zxo=r(_Se," \u2014 "),fO=n(_Se,"A",{href:!0});var Obt=s(fO);e$o=r(Obt,"XLNetLMHeadModel"),Obt.forEach(t),o$o=r(_Se," (XLNet model)"),_Se.forEach(t),O.forEach(t),r$o=i(ia),z1=n(ia,"P",{});var uSe=s(z1);t$o=r(uSe,"The model is set in evaluation mode by default using "),jge=n(uSe,"CODE",{});var Vbt=s(jge);a$o=r(Vbt,"model.eval()"),Vbt.forEach(t),n$o=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=n(uSe,"CODE",{});var Xbt=s(Dge);s$o=r(Xbt,"model.train()"),Xbt.forEach(t),uSe.forEach(t),l$o=i(ia),T(Q1.$$.fragment,ia),ia.forEach(t),nl.forEach(t),YXe=i(f),Ui=n(f,"H2",{class:!0});var tWe=s(Ui);W1=n(tWe,"A",{id:!0,class:!0,href:!0});var zbt=s(W1);Gge=n(zbt,"SPAN",{});var Qbt=s(Gge);T(JL.$$.fragment,Qbt),Qbt.forEach(t),zbt.forEach(t),i$o=i(tWe),Oge=n(tWe,"SPAN",{});var Wbt=s(Oge);d$o=r(Wbt,"AutoModelForCausalLM"),Wbt.forEach(t),tWe.forEach(t),KXe=i(f),So=n(f,"DIV",{class:!0});var sl=s(So);T(YL.$$.fragment,sl),c$o=i(sl),Ji=n(sl,"P",{});var tte=s(Ji);f$o=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mO=n(tte,"A",{href:!0});var Hbt=s(mO);m$o=r(Hbt,"from_pretrained()"),Hbt.forEach(t),g$o=r(tte," class method or the "),gO=n(tte,"A",{href:!0});var Ubt=s(gO);h$o=r(Ubt,"from_config()"),Ubt.forEach(t),p$o=r(tte,` class
method.`),tte.forEach(t),_$o=i(sl),KL=n(sl,"P",{});var aWe=s(KL);u$o=r(aWe,"This class cannot be instantiated directly using "),Vge=n(aWe,"CODE",{});var Jbt=s(Vge);b$o=r(Jbt,"__init__()"),Jbt.forEach(t),v$o=r(aWe," (throws an error)."),aWe.forEach(t),F$o=i(sl),ct=n(sl,"DIV",{class:!0});var Tw=s(ct);T(ZL.$$.fragment,Tw),T$o=i(Tw),Xge=n(Tw,"P",{});var Ybt=s(Xge);M$o=r(Ybt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ybt.forEach(t),E$o=i(Tw),Yi=n(Tw,"P",{});var ate=s(Yi);C$o=r(ate,`Note:
Loading a model from its configuration file does `),zge=n(ate,"STRONG",{});var Kbt=s(zge);w$o=r(Kbt,"not"),Kbt.forEach(t),A$o=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(ate,"A",{href:!0});var Zbt=s(hO);L$o=r(Zbt,"from_pretrained()"),Zbt.forEach(t),y$o=r(ate," to load the model weights."),ate.forEach(t),x$o=i(Tw),T(H1.$$.fragment,Tw),Tw.forEach(t),$$o=i(sl),Ze=n(sl,"DIV",{class:!0});var da=s(Ze);T(ey.$$.fragment,da),k$o=i(da),Qge=n(da,"P",{});var evt=s(Qge);S$o=r(evt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),evt.forEach(t),R$o=i(da),qa=n(da,"P",{});var Mw=s(qa);P$o=r(Mw,"The model class to instantiate is selected based on the "),Wge=n(Mw,"CODE",{});var ovt=s(Wge);B$o=r(ovt,"model_type"),ovt.forEach(t),I$o=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Hge=n(Mw,"CODE",{});var rvt=s(Hge);N$o=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),q$o=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(Mw,"CODE",{});var tvt=s(Uge);j$o=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),D$o=r(Mw,":"),Mw.forEach(t),G$o=i(da),z=n(da,"UL",{});var Q=s(z);U1=n(Q,"LI",{});var bSe=s(U1);Jge=n(bSe,"STRONG",{});var avt=s(Jge);O$o=r(avt,"bart"),avt.forEach(t),V$o=r(bSe," \u2014 "),pO=n(bSe,"A",{href:!0});var nvt=s(pO);X$o=r(nvt,"BartForCausalLM"),nvt.forEach(t),z$o=r(bSe," (BART model)"),bSe.forEach(t),Q$o=i(Q),J1=n(Q,"LI",{});var vSe=s(J1);Yge=n(vSe,"STRONG",{});var svt=s(Yge);W$o=r(svt,"bert"),svt.forEach(t),H$o=r(vSe," \u2014 "),_O=n(vSe,"A",{href:!0});var lvt=s(_O);U$o=r(lvt,"BertLMHeadModel"),lvt.forEach(t),J$o=r(vSe," (BERT model)"),vSe.forEach(t),Y$o=i(Q),Y1=n(Q,"LI",{});var FSe=s(Y1);Kge=n(FSe,"STRONG",{});var ivt=s(Kge);K$o=r(ivt,"bert-generation"),ivt.forEach(t),Z$o=r(FSe," \u2014 "),uO=n(FSe,"A",{href:!0});var dvt=s(uO);eko=r(dvt,"BertGenerationDecoder"),dvt.forEach(t),oko=r(FSe," (Bert Generation model)"),FSe.forEach(t),rko=i(Q),K1=n(Q,"LI",{});var TSe=s(K1);Zge=n(TSe,"STRONG",{});var cvt=s(Zge);tko=r(cvt,"big_bird"),cvt.forEach(t),ako=r(TSe," \u2014 "),bO=n(TSe,"A",{href:!0});var fvt=s(bO);nko=r(fvt,"BigBirdForCausalLM"),fvt.forEach(t),sko=r(TSe," (BigBird model)"),TSe.forEach(t),lko=i(Q),Z1=n(Q,"LI",{});var MSe=s(Z1);ehe=n(MSe,"STRONG",{});var mvt=s(ehe);iko=r(mvt,"bigbird_pegasus"),mvt.forEach(t),dko=r(MSe," \u2014 "),vO=n(MSe,"A",{href:!0});var gvt=s(vO);cko=r(gvt,"BigBirdPegasusForCausalLM"),gvt.forEach(t),fko=r(MSe," (BigBird-Pegasus model)"),MSe.forEach(t),mko=i(Q),e4=n(Q,"LI",{});var ESe=s(e4);ohe=n(ESe,"STRONG",{});var hvt=s(ohe);gko=r(hvt,"blenderbot"),hvt.forEach(t),hko=r(ESe," \u2014 "),FO=n(ESe,"A",{href:!0});var pvt=s(FO);pko=r(pvt,"BlenderbotForCausalLM"),pvt.forEach(t),_ko=r(ESe," (Blenderbot model)"),ESe.forEach(t),uko=i(Q),o4=n(Q,"LI",{});var CSe=s(o4);rhe=n(CSe,"STRONG",{});var _vt=s(rhe);bko=r(_vt,"blenderbot-small"),_vt.forEach(t),vko=r(CSe," \u2014 "),TO=n(CSe,"A",{href:!0});var uvt=s(TO);Fko=r(uvt,"BlenderbotSmallForCausalLM"),uvt.forEach(t),Tko=r(CSe," (BlenderbotSmall model)"),CSe.forEach(t),Mko=i(Q),r4=n(Q,"LI",{});var wSe=s(r4);the=n(wSe,"STRONG",{});var bvt=s(the);Eko=r(bvt,"bloom"),bvt.forEach(t),Cko=r(wSe," \u2014 "),MO=n(wSe,"A",{href:!0});var vvt=s(MO);wko=r(vvt,"BloomForCausalLM"),vvt.forEach(t),Ako=r(wSe," (BLOOM model)"),wSe.forEach(t),Lko=i(Q),t4=n(Q,"LI",{});var ASe=s(t4);ahe=n(ASe,"STRONG",{});var Fvt=s(ahe);yko=r(Fvt,"camembert"),Fvt.forEach(t),xko=r(ASe," \u2014 "),EO=n(ASe,"A",{href:!0});var Tvt=s(EO);$ko=r(Tvt,"CamembertForCausalLM"),Tvt.forEach(t),kko=r(ASe," (CamemBERT model)"),ASe.forEach(t),Sko=i(Q),a4=n(Q,"LI",{});var LSe=s(a4);nhe=n(LSe,"STRONG",{});var Mvt=s(nhe);Rko=r(Mvt,"codegen"),Mvt.forEach(t),Pko=r(LSe," \u2014 "),CO=n(LSe,"A",{href:!0});var Evt=s(CO);Bko=r(Evt,"CodeGenForCausalLM"),Evt.forEach(t),Iko=r(LSe," (CodeGen model)"),LSe.forEach(t),Nko=i(Q),n4=n(Q,"LI",{});var ySe=s(n4);she=n(ySe,"STRONG",{});var Cvt=s(she);qko=r(Cvt,"ctrl"),Cvt.forEach(t),jko=r(ySe," \u2014 "),wO=n(ySe,"A",{href:!0});var wvt=s(wO);Dko=r(wvt,"CTRLLMHeadModel"),wvt.forEach(t),Gko=r(ySe," (CTRL model)"),ySe.forEach(t),Oko=i(Q),s4=n(Q,"LI",{});var xSe=s(s4);lhe=n(xSe,"STRONG",{});var Avt=s(lhe);Vko=r(Avt,"data2vec-text"),Avt.forEach(t),Xko=r(xSe," \u2014 "),AO=n(xSe,"A",{href:!0});var Lvt=s(AO);zko=r(Lvt,"Data2VecTextForCausalLM"),Lvt.forEach(t),Qko=r(xSe," (Data2VecText model)"),xSe.forEach(t),Wko=i(Q),l4=n(Q,"LI",{});var $Se=s(l4);ihe=n($Se,"STRONG",{});var yvt=s(ihe);Hko=r(yvt,"electra"),yvt.forEach(t),Uko=r($Se," \u2014 "),LO=n($Se,"A",{href:!0});var xvt=s(LO);Jko=r(xvt,"ElectraForCausalLM"),xvt.forEach(t),Yko=r($Se," (ELECTRA model)"),$Se.forEach(t),Kko=i(Q),i4=n(Q,"LI",{});var kSe=s(i4);dhe=n(kSe,"STRONG",{});var $vt=s(dhe);Zko=r($vt,"gpt2"),$vt.forEach(t),eSo=r(kSe," \u2014 "),yO=n(kSe,"A",{href:!0});var kvt=s(yO);oSo=r(kvt,"GPT2LMHeadModel"),kvt.forEach(t),rSo=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),tSo=i(Q),d4=n(Q,"LI",{});var SSe=s(d4);che=n(SSe,"STRONG",{});var Svt=s(che);aSo=r(Svt,"gpt_neo"),Svt.forEach(t),nSo=r(SSe," \u2014 "),xO=n(SSe,"A",{href:!0});var Rvt=s(xO);sSo=r(Rvt,"GPTNeoForCausalLM"),Rvt.forEach(t),lSo=r(SSe," (GPT Neo model)"),SSe.forEach(t),iSo=i(Q),c4=n(Q,"LI",{});var RSe=s(c4);fhe=n(RSe,"STRONG",{});var Pvt=s(fhe);dSo=r(Pvt,"gpt_neox"),Pvt.forEach(t),cSo=r(RSe," \u2014 "),$O=n(RSe,"A",{href:!0});var Bvt=s($O);fSo=r(Bvt,"GPTNeoXForCausalLM"),Bvt.forEach(t),mSo=r(RSe," (GPT NeoX model)"),RSe.forEach(t),gSo=i(Q),f4=n(Q,"LI",{});var PSe=s(f4);mhe=n(PSe,"STRONG",{});var Ivt=s(mhe);hSo=r(Ivt,"gptj"),Ivt.forEach(t),pSo=r(PSe," \u2014 "),kO=n(PSe,"A",{href:!0});var Nvt=s(kO);_So=r(Nvt,"GPTJForCausalLM"),Nvt.forEach(t),uSo=r(PSe," (GPT-J model)"),PSe.forEach(t),bSo=i(Q),m4=n(Q,"LI",{});var BSe=s(m4);ghe=n(BSe,"STRONG",{});var qvt=s(ghe);vSo=r(qvt,"marian"),qvt.forEach(t),FSo=r(BSe," \u2014 "),SO=n(BSe,"A",{href:!0});var jvt=s(SO);TSo=r(jvt,"MarianForCausalLM"),jvt.forEach(t),MSo=r(BSe," (Marian model)"),BSe.forEach(t),ESo=i(Q),g4=n(Q,"LI",{});var ISe=s(g4);hhe=n(ISe,"STRONG",{});var Dvt=s(hhe);CSo=r(Dvt,"mbart"),Dvt.forEach(t),wSo=r(ISe," \u2014 "),RO=n(ISe,"A",{href:!0});var Gvt=s(RO);ASo=r(Gvt,"MBartForCausalLM"),Gvt.forEach(t),LSo=r(ISe," (mBART model)"),ISe.forEach(t),ySo=i(Q),h4=n(Q,"LI",{});var NSe=s(h4);phe=n(NSe,"STRONG",{});var Ovt=s(phe);xSo=r(Ovt,"megatron-bert"),Ovt.forEach(t),$So=r(NSe," \u2014 "),PO=n(NSe,"A",{href:!0});var Vvt=s(PO);kSo=r(Vvt,"MegatronBertForCausalLM"),Vvt.forEach(t),SSo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),RSo=i(Q),p4=n(Q,"LI",{});var qSe=s(p4);_he=n(qSe,"STRONG",{});var Xvt=s(_he);PSo=r(Xvt,"mvp"),Xvt.forEach(t),BSo=r(qSe," \u2014 "),BO=n(qSe,"A",{href:!0});var zvt=s(BO);ISo=r(zvt,"MvpForCausalLM"),zvt.forEach(t),NSo=r(qSe," (MVP model)"),qSe.forEach(t),qSo=i(Q),_4=n(Q,"LI",{});var jSe=s(_4);uhe=n(jSe,"STRONG",{});var Qvt=s(uhe);jSo=r(Qvt,"openai-gpt"),Qvt.forEach(t),DSo=r(jSe," \u2014 "),IO=n(jSe,"A",{href:!0});var Wvt=s(IO);GSo=r(Wvt,"OpenAIGPTLMHeadModel"),Wvt.forEach(t),OSo=r(jSe," (OpenAI GPT model)"),jSe.forEach(t),VSo=i(Q),u4=n(Q,"LI",{});var DSe=s(u4);bhe=n(DSe,"STRONG",{});var Hvt=s(bhe);XSo=r(Hvt,"opt"),Hvt.forEach(t),zSo=r(DSe," \u2014 "),NO=n(DSe,"A",{href:!0});var Uvt=s(NO);QSo=r(Uvt,"OPTForCausalLM"),Uvt.forEach(t),WSo=r(DSe," (OPT model)"),DSe.forEach(t),HSo=i(Q),b4=n(Q,"LI",{});var GSe=s(b4);vhe=n(GSe,"STRONG",{});var Jvt=s(vhe);USo=r(Jvt,"pegasus"),Jvt.forEach(t),JSo=r(GSe," \u2014 "),qO=n(GSe,"A",{href:!0});var Yvt=s(qO);YSo=r(Yvt,"PegasusForCausalLM"),Yvt.forEach(t),KSo=r(GSe," (Pegasus model)"),GSe.forEach(t),ZSo=i(Q),v4=n(Q,"LI",{});var OSe=s(v4);Fhe=n(OSe,"STRONG",{});var Kvt=s(Fhe);eRo=r(Kvt,"plbart"),Kvt.forEach(t),oRo=r(OSe," \u2014 "),jO=n(OSe,"A",{href:!0});var Zvt=s(jO);rRo=r(Zvt,"PLBartForCausalLM"),Zvt.forEach(t),tRo=r(OSe," (PLBart model)"),OSe.forEach(t),aRo=i(Q),F4=n(Q,"LI",{});var VSe=s(F4);The=n(VSe,"STRONG",{});var eFt=s(The);nRo=r(eFt,"prophetnet"),eFt.forEach(t),sRo=r(VSe," \u2014 "),DO=n(VSe,"A",{href:!0});var oFt=s(DO);lRo=r(oFt,"ProphetNetForCausalLM"),oFt.forEach(t),iRo=r(VSe," (ProphetNet model)"),VSe.forEach(t),dRo=i(Q),T4=n(Q,"LI",{});var XSe=s(T4);Mhe=n(XSe,"STRONG",{});var rFt=s(Mhe);cRo=r(rFt,"qdqbert"),rFt.forEach(t),fRo=r(XSe," \u2014 "),GO=n(XSe,"A",{href:!0});var tFt=s(GO);mRo=r(tFt,"QDQBertLMHeadModel"),tFt.forEach(t),gRo=r(XSe," (QDQBert model)"),XSe.forEach(t),hRo=i(Q),M4=n(Q,"LI",{});var zSe=s(M4);Ehe=n(zSe,"STRONG",{});var aFt=s(Ehe);pRo=r(aFt,"reformer"),aFt.forEach(t),_Ro=r(zSe," \u2014 "),OO=n(zSe,"A",{href:!0});var nFt=s(OO);uRo=r(nFt,"ReformerModelWithLMHead"),nFt.forEach(t),bRo=r(zSe," (Reformer model)"),zSe.forEach(t),vRo=i(Q),E4=n(Q,"LI",{});var QSe=s(E4);Che=n(QSe,"STRONG",{});var sFt=s(Che);FRo=r(sFt,"rembert"),sFt.forEach(t),TRo=r(QSe," \u2014 "),VO=n(QSe,"A",{href:!0});var lFt=s(VO);MRo=r(lFt,"RemBertForCausalLM"),lFt.forEach(t),ERo=r(QSe," (RemBERT model)"),QSe.forEach(t),CRo=i(Q),C4=n(Q,"LI",{});var WSe=s(C4);whe=n(WSe,"STRONG",{});var iFt=s(whe);wRo=r(iFt,"roberta"),iFt.forEach(t),ARo=r(WSe," \u2014 "),XO=n(WSe,"A",{href:!0});var dFt=s(XO);LRo=r(dFt,"RobertaForCausalLM"),dFt.forEach(t),yRo=r(WSe," (RoBERTa model)"),WSe.forEach(t),xRo=i(Q),w4=n(Q,"LI",{});var HSe=s(w4);Ahe=n(HSe,"STRONG",{});var cFt=s(Ahe);$Ro=r(cFt,"roformer"),cFt.forEach(t),kRo=r(HSe," \u2014 "),zO=n(HSe,"A",{href:!0});var fFt=s(zO);SRo=r(fFt,"RoFormerForCausalLM"),fFt.forEach(t),RRo=r(HSe," (RoFormer model)"),HSe.forEach(t),PRo=i(Q),A4=n(Q,"LI",{});var USe=s(A4);Lhe=n(USe,"STRONG",{});var mFt=s(Lhe);BRo=r(mFt,"speech_to_text_2"),mFt.forEach(t),IRo=r(USe," \u2014 "),QO=n(USe,"A",{href:!0});var gFt=s(QO);NRo=r(gFt,"Speech2Text2ForCausalLM"),gFt.forEach(t),qRo=r(USe," (Speech2Text2 model)"),USe.forEach(t),jRo=i(Q),L4=n(Q,"LI",{});var JSe=s(L4);yhe=n(JSe,"STRONG",{});var hFt=s(yhe);DRo=r(hFt,"transfo-xl"),hFt.forEach(t),GRo=r(JSe," \u2014 "),WO=n(JSe,"A",{href:!0});var pFt=s(WO);ORo=r(pFt,"TransfoXLLMHeadModel"),pFt.forEach(t),VRo=r(JSe," (Transformer-XL model)"),JSe.forEach(t),XRo=i(Q),y4=n(Q,"LI",{});var YSe=s(y4);xhe=n(YSe,"STRONG",{});var _Ft=s(xhe);zRo=r(_Ft,"trocr"),_Ft.forEach(t),QRo=r(YSe," \u2014 "),HO=n(YSe,"A",{href:!0});var uFt=s(HO);WRo=r(uFt,"TrOCRForCausalLM"),uFt.forEach(t),HRo=r(YSe," (TrOCR model)"),YSe.forEach(t),URo=i(Q),x4=n(Q,"LI",{});var KSe=s(x4);$he=n(KSe,"STRONG",{});var bFt=s($he);JRo=r(bFt,"xglm"),bFt.forEach(t),YRo=r(KSe," \u2014 "),UO=n(KSe,"A",{href:!0});var vFt=s(UO);KRo=r(vFt,"XGLMForCausalLM"),vFt.forEach(t),ZRo=r(KSe," (XGLM model)"),KSe.forEach(t),ePo=i(Q),$4=n(Q,"LI",{});var ZSe=s($4);khe=n(ZSe,"STRONG",{});var FFt=s(khe);oPo=r(FFt,"xlm"),FFt.forEach(t),rPo=r(ZSe," \u2014 "),JO=n(ZSe,"A",{href:!0});var TFt=s(JO);tPo=r(TFt,"XLMWithLMHeadModel"),TFt.forEach(t),aPo=r(ZSe," (XLM model)"),ZSe.forEach(t),nPo=i(Q),k4=n(Q,"LI",{});var eRe=s(k4);She=n(eRe,"STRONG",{});var MFt=s(She);sPo=r(MFt,"xlm-prophetnet"),MFt.forEach(t),lPo=r(eRe," \u2014 "),YO=n(eRe,"A",{href:!0});var EFt=s(YO);iPo=r(EFt,"XLMProphetNetForCausalLM"),EFt.forEach(t),dPo=r(eRe," (XLM-ProphetNet model)"),eRe.forEach(t),cPo=i(Q),S4=n(Q,"LI",{});var oRe=s(S4);Rhe=n(oRe,"STRONG",{});var CFt=s(Rhe);fPo=r(CFt,"xlm-roberta"),CFt.forEach(t),mPo=r(oRe," \u2014 "),KO=n(oRe,"A",{href:!0});var wFt=s(KO);gPo=r(wFt,"XLMRobertaForCausalLM"),wFt.forEach(t),hPo=r(oRe," (XLM-RoBERTa model)"),oRe.forEach(t),pPo=i(Q),R4=n(Q,"LI",{});var rRe=s(R4);Phe=n(rRe,"STRONG",{});var AFt=s(Phe);_Po=r(AFt,"xlm-roberta-xl"),AFt.forEach(t),uPo=r(rRe," \u2014 "),ZO=n(rRe,"A",{href:!0});var LFt=s(ZO);bPo=r(LFt,"XLMRobertaXLForCausalLM"),LFt.forEach(t),vPo=r(rRe," (XLM-RoBERTa-XL model)"),rRe.forEach(t),FPo=i(Q),P4=n(Q,"LI",{});var tRe=s(P4);Bhe=n(tRe,"STRONG",{});var yFt=s(Bhe);TPo=r(yFt,"xlnet"),yFt.forEach(t),MPo=r(tRe," \u2014 "),eV=n(tRe,"A",{href:!0});var xFt=s(eV);EPo=r(xFt,"XLNetLMHeadModel"),xFt.forEach(t),CPo=r(tRe," (XLNet model)"),tRe.forEach(t),Q.forEach(t),wPo=i(da),B4=n(da,"P",{});var aRe=s(B4);APo=r(aRe,"The model is set in evaluation mode by default using "),Ihe=n(aRe,"CODE",{});var $Ft=s(Ihe);LPo=r($Ft,"model.eval()"),$Ft.forEach(t),yPo=r(aRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(aRe,"CODE",{});var kFt=s(Nhe);xPo=r(kFt,"model.train()"),kFt.forEach(t),aRe.forEach(t),$Po=i(da),T(I4.$$.fragment,da),da.forEach(t),sl.forEach(t),ZXe=i(f),Ki=n(f,"H2",{class:!0});var nWe=s(Ki);N4=n(nWe,"A",{id:!0,class:!0,href:!0});var SFt=s(N4);qhe=n(SFt,"SPAN",{});var RFt=s(qhe);T(oy.$$.fragment,RFt),RFt.forEach(t),SFt.forEach(t),kPo=i(nWe),jhe=n(nWe,"SPAN",{});var PFt=s(jhe);SPo=r(PFt,"AutoModelForMaskedLM"),PFt.forEach(t),nWe.forEach(t),eze=i(f),Ro=n(f,"DIV",{class:!0});var ll=s(Ro);T(ry.$$.fragment,ll),RPo=i(ll),Zi=n(ll,"P",{});var nte=s(Zi);PPo=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oV=n(nte,"A",{href:!0});var BFt=s(oV);BPo=r(BFt,"from_pretrained()"),BFt.forEach(t),IPo=r(nte," class method or the "),rV=n(nte,"A",{href:!0});var IFt=s(rV);NPo=r(IFt,"from_config()"),IFt.forEach(t),qPo=r(nte,` class
method.`),nte.forEach(t),jPo=i(ll),ty=n(ll,"P",{});var sWe=s(ty);DPo=r(sWe,"This class cannot be instantiated directly using "),Dhe=n(sWe,"CODE",{});var NFt=s(Dhe);GPo=r(NFt,"__init__()"),NFt.forEach(t),OPo=r(sWe," (throws an error)."),sWe.forEach(t),VPo=i(ll),ft=n(ll,"DIV",{class:!0});var Ew=s(ft);T(ay.$$.fragment,Ew),XPo=i(Ew),Ghe=n(Ew,"P",{});var qFt=s(Ghe);zPo=r(qFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qFt.forEach(t),QPo=i(Ew),ed=n(Ew,"P",{});var ste=s(ed);WPo=r(ste,`Note:
Loading a model from its configuration file does `),Ohe=n(ste,"STRONG",{});var jFt=s(Ohe);HPo=r(jFt,"not"),jFt.forEach(t),UPo=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(ste,"A",{href:!0});var DFt=s(tV);JPo=r(DFt,"from_pretrained()"),DFt.forEach(t),YPo=r(ste," to load the model weights."),ste.forEach(t),KPo=i(Ew),T(q4.$$.fragment,Ew),Ew.forEach(t),ZPo=i(ll),eo=n(ll,"DIV",{class:!0});var ca=s(eo);T(ny.$$.fragment,ca),eBo=i(ca),Vhe=n(ca,"P",{});var GFt=s(Vhe);oBo=r(GFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GFt.forEach(t),rBo=i(ca),ja=n(ca,"P",{});var Cw=s(ja);tBo=r(Cw,"The model class to instantiate is selected based on the "),Xhe=n(Cw,"CODE",{});var OFt=s(Xhe);aBo=r(OFt,"model_type"),OFt.forEach(t),nBo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),zhe=n(Cw,"CODE",{});var VFt=s(zhe);sBo=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),lBo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(Cw,"CODE",{});var XFt=s(Qhe);iBo=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),dBo=r(Cw,":"),Cw.forEach(t),cBo=i(ca),W=n(ca,"UL",{});var H=s(W);j4=n(H,"LI",{});var nRe=s(j4);Whe=n(nRe,"STRONG",{});var zFt=s(Whe);fBo=r(zFt,"albert"),zFt.forEach(t),mBo=r(nRe," \u2014 "),aV=n(nRe,"A",{href:!0});var QFt=s(aV);gBo=r(QFt,"AlbertForMaskedLM"),QFt.forEach(t),hBo=r(nRe," (ALBERT model)"),nRe.forEach(t),pBo=i(H),D4=n(H,"LI",{});var sRe=s(D4);Hhe=n(sRe,"STRONG",{});var WFt=s(Hhe);_Bo=r(WFt,"bart"),WFt.forEach(t),uBo=r(sRe," \u2014 "),nV=n(sRe,"A",{href:!0});var HFt=s(nV);bBo=r(HFt,"BartForConditionalGeneration"),HFt.forEach(t),vBo=r(sRe," (BART model)"),sRe.forEach(t),FBo=i(H),G4=n(H,"LI",{});var lRe=s(G4);Uhe=n(lRe,"STRONG",{});var UFt=s(Uhe);TBo=r(UFt,"bert"),UFt.forEach(t),MBo=r(lRe," \u2014 "),sV=n(lRe,"A",{href:!0});var JFt=s(sV);EBo=r(JFt,"BertForMaskedLM"),JFt.forEach(t),CBo=r(lRe," (BERT model)"),lRe.forEach(t),wBo=i(H),O4=n(H,"LI",{});var iRe=s(O4);Jhe=n(iRe,"STRONG",{});var YFt=s(Jhe);ABo=r(YFt,"big_bird"),YFt.forEach(t),LBo=r(iRe," \u2014 "),lV=n(iRe,"A",{href:!0});var KFt=s(lV);yBo=r(KFt,"BigBirdForMaskedLM"),KFt.forEach(t),xBo=r(iRe," (BigBird model)"),iRe.forEach(t),$Bo=i(H),V4=n(H,"LI",{});var dRe=s(V4);Yhe=n(dRe,"STRONG",{});var ZFt=s(Yhe);kBo=r(ZFt,"camembert"),ZFt.forEach(t),SBo=r(dRe," \u2014 "),iV=n(dRe,"A",{href:!0});var e6t=s(iV);RBo=r(e6t,"CamembertForMaskedLM"),e6t.forEach(t),PBo=r(dRe," (CamemBERT model)"),dRe.forEach(t),BBo=i(H),X4=n(H,"LI",{});var cRe=s(X4);Khe=n(cRe,"STRONG",{});var o6t=s(Khe);IBo=r(o6t,"convbert"),o6t.forEach(t),NBo=r(cRe," \u2014 "),dV=n(cRe,"A",{href:!0});var r6t=s(dV);qBo=r(r6t,"ConvBertForMaskedLM"),r6t.forEach(t),jBo=r(cRe," (ConvBERT model)"),cRe.forEach(t),DBo=i(H),z4=n(H,"LI",{});var fRe=s(z4);Zhe=n(fRe,"STRONG",{});var t6t=s(Zhe);GBo=r(t6t,"data2vec-text"),t6t.forEach(t),OBo=r(fRe," \u2014 "),cV=n(fRe,"A",{href:!0});var a6t=s(cV);VBo=r(a6t,"Data2VecTextForMaskedLM"),a6t.forEach(t),XBo=r(fRe," (Data2VecText model)"),fRe.forEach(t),zBo=i(H),Q4=n(H,"LI",{});var mRe=s(Q4);epe=n(mRe,"STRONG",{});var n6t=s(epe);QBo=r(n6t,"deberta"),n6t.forEach(t),WBo=r(mRe," \u2014 "),fV=n(mRe,"A",{href:!0});var s6t=s(fV);HBo=r(s6t,"DebertaForMaskedLM"),s6t.forEach(t),UBo=r(mRe," (DeBERTa model)"),mRe.forEach(t),JBo=i(H),W4=n(H,"LI",{});var gRe=s(W4);ope=n(gRe,"STRONG",{});var l6t=s(ope);YBo=r(l6t,"deberta-v2"),l6t.forEach(t),KBo=r(gRe," \u2014 "),mV=n(gRe,"A",{href:!0});var i6t=s(mV);ZBo=r(i6t,"DebertaV2ForMaskedLM"),i6t.forEach(t),eIo=r(gRe," (DeBERTa-v2 model)"),gRe.forEach(t),oIo=i(H),H4=n(H,"LI",{});var hRe=s(H4);rpe=n(hRe,"STRONG",{});var d6t=s(rpe);rIo=r(d6t,"distilbert"),d6t.forEach(t),tIo=r(hRe," \u2014 "),gV=n(hRe,"A",{href:!0});var c6t=s(gV);aIo=r(c6t,"DistilBertForMaskedLM"),c6t.forEach(t),nIo=r(hRe," (DistilBERT model)"),hRe.forEach(t),sIo=i(H),U4=n(H,"LI",{});var pRe=s(U4);tpe=n(pRe,"STRONG",{});var f6t=s(tpe);lIo=r(f6t,"electra"),f6t.forEach(t),iIo=r(pRe," \u2014 "),hV=n(pRe,"A",{href:!0});var m6t=s(hV);dIo=r(m6t,"ElectraForMaskedLM"),m6t.forEach(t),cIo=r(pRe," (ELECTRA model)"),pRe.forEach(t),fIo=i(H),J4=n(H,"LI",{});var _Re=s(J4);ape=n(_Re,"STRONG",{});var g6t=s(ape);mIo=r(g6t,"flaubert"),g6t.forEach(t),gIo=r(_Re," \u2014 "),pV=n(_Re,"A",{href:!0});var h6t=s(pV);hIo=r(h6t,"FlaubertWithLMHeadModel"),h6t.forEach(t),pIo=r(_Re," (FlauBERT model)"),_Re.forEach(t),_Io=i(H),Y4=n(H,"LI",{});var uRe=s(Y4);npe=n(uRe,"STRONG",{});var p6t=s(npe);uIo=r(p6t,"fnet"),p6t.forEach(t),bIo=r(uRe," \u2014 "),_V=n(uRe,"A",{href:!0});var _6t=s(_V);vIo=r(_6t,"FNetForMaskedLM"),_6t.forEach(t),FIo=r(uRe," (FNet model)"),uRe.forEach(t),TIo=i(H),K4=n(H,"LI",{});var bRe=s(K4);spe=n(bRe,"STRONG",{});var u6t=s(spe);MIo=r(u6t,"funnel"),u6t.forEach(t),EIo=r(bRe," \u2014 "),uV=n(bRe,"A",{href:!0});var b6t=s(uV);CIo=r(b6t,"FunnelForMaskedLM"),b6t.forEach(t),wIo=r(bRe," (Funnel Transformer model)"),bRe.forEach(t),AIo=i(H),Z4=n(H,"LI",{});var vRe=s(Z4);lpe=n(vRe,"STRONG",{});var v6t=s(lpe);LIo=r(v6t,"ibert"),v6t.forEach(t),yIo=r(vRe," \u2014 "),bV=n(vRe,"A",{href:!0});var F6t=s(bV);xIo=r(F6t,"IBertForMaskedLM"),F6t.forEach(t),$Io=r(vRe," (I-BERT model)"),vRe.forEach(t),kIo=i(H),e2=n(H,"LI",{});var FRe=s(e2);ipe=n(FRe,"STRONG",{});var T6t=s(ipe);SIo=r(T6t,"layoutlm"),T6t.forEach(t),RIo=r(FRe," \u2014 "),vV=n(FRe,"A",{href:!0});var M6t=s(vV);PIo=r(M6t,"LayoutLMForMaskedLM"),M6t.forEach(t),BIo=r(FRe," (LayoutLM model)"),FRe.forEach(t),IIo=i(H),o2=n(H,"LI",{});var TRe=s(o2);dpe=n(TRe,"STRONG",{});var E6t=s(dpe);NIo=r(E6t,"longformer"),E6t.forEach(t),qIo=r(TRe," \u2014 "),FV=n(TRe,"A",{href:!0});var C6t=s(FV);jIo=r(C6t,"LongformerForMaskedLM"),C6t.forEach(t),DIo=r(TRe," (Longformer model)"),TRe.forEach(t),GIo=i(H),r2=n(H,"LI",{});var MRe=s(r2);cpe=n(MRe,"STRONG",{});var w6t=s(cpe);OIo=r(w6t,"luke"),w6t.forEach(t),VIo=r(MRe," \u2014 "),TV=n(MRe,"A",{href:!0});var A6t=s(TV);XIo=r(A6t,"LukeForMaskedLM"),A6t.forEach(t),zIo=r(MRe," (LUKE model)"),MRe.forEach(t),QIo=i(H),t2=n(H,"LI",{});var ERe=s(t2);fpe=n(ERe,"STRONG",{});var L6t=s(fpe);WIo=r(L6t,"mbart"),L6t.forEach(t),HIo=r(ERe," \u2014 "),MV=n(ERe,"A",{href:!0});var y6t=s(MV);UIo=r(y6t,"MBartForConditionalGeneration"),y6t.forEach(t),JIo=r(ERe," (mBART model)"),ERe.forEach(t),YIo=i(H),a2=n(H,"LI",{});var CRe=s(a2);mpe=n(CRe,"STRONG",{});var x6t=s(mpe);KIo=r(x6t,"megatron-bert"),x6t.forEach(t),ZIo=r(CRe," \u2014 "),EV=n(CRe,"A",{href:!0});var $6t=s(EV);eNo=r($6t,"MegatronBertForMaskedLM"),$6t.forEach(t),oNo=r(CRe," (Megatron-BERT model)"),CRe.forEach(t),rNo=i(H),n2=n(H,"LI",{});var wRe=s(n2);gpe=n(wRe,"STRONG",{});var k6t=s(gpe);tNo=r(k6t,"mobilebert"),k6t.forEach(t),aNo=r(wRe," \u2014 "),CV=n(wRe,"A",{href:!0});var S6t=s(CV);nNo=r(S6t,"MobileBertForMaskedLM"),S6t.forEach(t),sNo=r(wRe," (MobileBERT model)"),wRe.forEach(t),lNo=i(H),s2=n(H,"LI",{});var ARe=s(s2);hpe=n(ARe,"STRONG",{});var R6t=s(hpe);iNo=r(R6t,"mpnet"),R6t.forEach(t),dNo=r(ARe," \u2014 "),wV=n(ARe,"A",{href:!0});var P6t=s(wV);cNo=r(P6t,"MPNetForMaskedLM"),P6t.forEach(t),fNo=r(ARe," (MPNet model)"),ARe.forEach(t),mNo=i(H),l2=n(H,"LI",{});var LRe=s(l2);ppe=n(LRe,"STRONG",{});var B6t=s(ppe);gNo=r(B6t,"mvp"),B6t.forEach(t),hNo=r(LRe," \u2014 "),AV=n(LRe,"A",{href:!0});var I6t=s(AV);pNo=r(I6t,"MvpForConditionalGeneration"),I6t.forEach(t),_No=r(LRe," (MVP model)"),LRe.forEach(t),uNo=i(H),i2=n(H,"LI",{});var yRe=s(i2);_pe=n(yRe,"STRONG",{});var N6t=s(_pe);bNo=r(N6t,"nezha"),N6t.forEach(t),vNo=r(yRe," \u2014 "),LV=n(yRe,"A",{href:!0});var q6t=s(LV);FNo=r(q6t,"NezhaForMaskedLM"),q6t.forEach(t),TNo=r(yRe," (Nezha model)"),yRe.forEach(t),MNo=i(H),d2=n(H,"LI",{});var xRe=s(d2);upe=n(xRe,"STRONG",{});var j6t=s(upe);ENo=r(j6t,"nystromformer"),j6t.forEach(t),CNo=r(xRe," \u2014 "),yV=n(xRe,"A",{href:!0});var D6t=s(yV);wNo=r(D6t,"NystromformerForMaskedLM"),D6t.forEach(t),ANo=r(xRe," (Nystr\xF6mformer model)"),xRe.forEach(t),LNo=i(H),c2=n(H,"LI",{});var $Re=s(c2);bpe=n($Re,"STRONG",{});var G6t=s(bpe);yNo=r(G6t,"perceiver"),G6t.forEach(t),xNo=r($Re," \u2014 "),xV=n($Re,"A",{href:!0});var O6t=s(xV);$No=r(O6t,"PerceiverForMaskedLM"),O6t.forEach(t),kNo=r($Re," (Perceiver model)"),$Re.forEach(t),SNo=i(H),f2=n(H,"LI",{});var kRe=s(f2);vpe=n(kRe,"STRONG",{});var V6t=s(vpe);RNo=r(V6t,"qdqbert"),V6t.forEach(t),PNo=r(kRe," \u2014 "),$V=n(kRe,"A",{href:!0});var X6t=s($V);BNo=r(X6t,"QDQBertForMaskedLM"),X6t.forEach(t),INo=r(kRe," (QDQBert model)"),kRe.forEach(t),NNo=i(H),m2=n(H,"LI",{});var SRe=s(m2);Fpe=n(SRe,"STRONG",{});var z6t=s(Fpe);qNo=r(z6t,"reformer"),z6t.forEach(t),jNo=r(SRe," \u2014 "),kV=n(SRe,"A",{href:!0});var Q6t=s(kV);DNo=r(Q6t,"ReformerForMaskedLM"),Q6t.forEach(t),GNo=r(SRe," (Reformer model)"),SRe.forEach(t),ONo=i(H),g2=n(H,"LI",{});var RRe=s(g2);Tpe=n(RRe,"STRONG",{});var W6t=s(Tpe);VNo=r(W6t,"rembert"),W6t.forEach(t),XNo=r(RRe," \u2014 "),SV=n(RRe,"A",{href:!0});var H6t=s(SV);zNo=r(H6t,"RemBertForMaskedLM"),H6t.forEach(t),QNo=r(RRe," (RemBERT model)"),RRe.forEach(t),WNo=i(H),h2=n(H,"LI",{});var PRe=s(h2);Mpe=n(PRe,"STRONG",{});var U6t=s(Mpe);HNo=r(U6t,"roberta"),U6t.forEach(t),UNo=r(PRe," \u2014 "),RV=n(PRe,"A",{href:!0});var J6t=s(RV);JNo=r(J6t,"RobertaForMaskedLM"),J6t.forEach(t),YNo=r(PRe," (RoBERTa model)"),PRe.forEach(t),KNo=i(H),p2=n(H,"LI",{});var BRe=s(p2);Epe=n(BRe,"STRONG",{});var Y6t=s(Epe);ZNo=r(Y6t,"roformer"),Y6t.forEach(t),eqo=r(BRe," \u2014 "),PV=n(BRe,"A",{href:!0});var K6t=s(PV);oqo=r(K6t,"RoFormerForMaskedLM"),K6t.forEach(t),rqo=r(BRe," (RoFormer model)"),BRe.forEach(t),tqo=i(H),_2=n(H,"LI",{});var IRe=s(_2);Cpe=n(IRe,"STRONG",{});var Z6t=s(Cpe);aqo=r(Z6t,"squeezebert"),Z6t.forEach(t),nqo=r(IRe," \u2014 "),BV=n(IRe,"A",{href:!0});var eTt=s(BV);sqo=r(eTt,"SqueezeBertForMaskedLM"),eTt.forEach(t),lqo=r(IRe," (SqueezeBERT model)"),IRe.forEach(t),iqo=i(H),u2=n(H,"LI",{});var NRe=s(u2);wpe=n(NRe,"STRONG",{});var oTt=s(wpe);dqo=r(oTt,"tapas"),oTt.forEach(t),cqo=r(NRe," \u2014 "),IV=n(NRe,"A",{href:!0});var rTt=s(IV);fqo=r(rTt,"TapasForMaskedLM"),rTt.forEach(t),mqo=r(NRe," (TAPAS model)"),NRe.forEach(t),gqo=i(H),b2=n(H,"LI",{});var qRe=s(b2);Ape=n(qRe,"STRONG",{});var tTt=s(Ape);hqo=r(tTt,"wav2vec2"),tTt.forEach(t),pqo=r(qRe," \u2014 "),Lpe=n(qRe,"CODE",{});var aTt=s(Lpe);_qo=r(aTt,"Wav2Vec2ForMaskedLM"),aTt.forEach(t),uqo=r(qRe," (Wav2Vec2 model)"),qRe.forEach(t),bqo=i(H),v2=n(H,"LI",{});var jRe=s(v2);ype=n(jRe,"STRONG",{});var nTt=s(ype);vqo=r(nTt,"xlm"),nTt.forEach(t),Fqo=r(jRe," \u2014 "),NV=n(jRe,"A",{href:!0});var sTt=s(NV);Tqo=r(sTt,"XLMWithLMHeadModel"),sTt.forEach(t),Mqo=r(jRe," (XLM model)"),jRe.forEach(t),Eqo=i(H),F2=n(H,"LI",{});var DRe=s(F2);xpe=n(DRe,"STRONG",{});var lTt=s(xpe);Cqo=r(lTt,"xlm-roberta"),lTt.forEach(t),wqo=r(DRe," \u2014 "),qV=n(DRe,"A",{href:!0});var iTt=s(qV);Aqo=r(iTt,"XLMRobertaForMaskedLM"),iTt.forEach(t),Lqo=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),yqo=i(H),T2=n(H,"LI",{});var GRe=s(T2);$pe=n(GRe,"STRONG",{});var dTt=s($pe);xqo=r(dTt,"xlm-roberta-xl"),dTt.forEach(t),$qo=r(GRe," \u2014 "),jV=n(GRe,"A",{href:!0});var cTt=s(jV);kqo=r(cTt,"XLMRobertaXLForMaskedLM"),cTt.forEach(t),Sqo=r(GRe," (XLM-RoBERTa-XL model)"),GRe.forEach(t),Rqo=i(H),M2=n(H,"LI",{});var ORe=s(M2);kpe=n(ORe,"STRONG",{});var fTt=s(kpe);Pqo=r(fTt,"yoso"),fTt.forEach(t),Bqo=r(ORe," \u2014 "),DV=n(ORe,"A",{href:!0});var mTt=s(DV);Iqo=r(mTt,"YosoForMaskedLM"),mTt.forEach(t),Nqo=r(ORe," (YOSO model)"),ORe.forEach(t),H.forEach(t),qqo=i(ca),E2=n(ca,"P",{});var VRe=s(E2);jqo=r(VRe,"The model is set in evaluation mode by default using "),Spe=n(VRe,"CODE",{});var gTt=s(Spe);Dqo=r(gTt,"model.eval()"),gTt.forEach(t),Gqo=r(VRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(VRe,"CODE",{});var hTt=s(Rpe);Oqo=r(hTt,"model.train()"),hTt.forEach(t),VRe.forEach(t),Vqo=i(ca),T(C2.$$.fragment,ca),ca.forEach(t),ll.forEach(t),oze=i(f),od=n(f,"H2",{class:!0});var lWe=s(od);w2=n(lWe,"A",{id:!0,class:!0,href:!0});var pTt=s(w2);Ppe=n(pTt,"SPAN",{});var _Tt=s(Ppe);T(sy.$$.fragment,_Tt),_Tt.forEach(t),pTt.forEach(t),Xqo=i(lWe),Bpe=n(lWe,"SPAN",{});var uTt=s(Bpe);zqo=r(uTt,"AutoModelForSeq2SeqLM"),uTt.forEach(t),lWe.forEach(t),rze=i(f),Po=n(f,"DIV",{class:!0});var il=s(Po);T(ly.$$.fragment,il),Qqo=i(il),rd=n(il,"P",{});var lte=s(rd);Wqo=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GV=n(lte,"A",{href:!0});var bTt=s(GV);Hqo=r(bTt,"from_pretrained()"),bTt.forEach(t),Uqo=r(lte," class method or the "),OV=n(lte,"A",{href:!0});var vTt=s(OV);Jqo=r(vTt,"from_config()"),vTt.forEach(t),Yqo=r(lte,` class
method.`),lte.forEach(t),Kqo=i(il),iy=n(il,"P",{});var iWe=s(iy);Zqo=r(iWe,"This class cannot be instantiated directly using "),Ipe=n(iWe,"CODE",{});var FTt=s(Ipe);ejo=r(FTt,"__init__()"),FTt.forEach(t),ojo=r(iWe," (throws an error)."),iWe.forEach(t),rjo=i(il),mt=n(il,"DIV",{class:!0});var ww=s(mt);T(dy.$$.fragment,ww),tjo=i(ww),Npe=n(ww,"P",{});var TTt=s(Npe);ajo=r(TTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TTt.forEach(t),njo=i(ww),td=n(ww,"P",{});var ite=s(td);sjo=r(ite,`Note:
Loading a model from its configuration file does `),qpe=n(ite,"STRONG",{});var MTt=s(qpe);ljo=r(MTt,"not"),MTt.forEach(t),ijo=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(ite,"A",{href:!0});var ETt=s(VV);djo=r(ETt,"from_pretrained()"),ETt.forEach(t),cjo=r(ite," to load the model weights."),ite.forEach(t),fjo=i(ww),T(A2.$$.fragment,ww),ww.forEach(t),mjo=i(il),oo=n(il,"DIV",{class:!0});var fa=s(oo);T(cy.$$.fragment,fa),gjo=i(fa),jpe=n(fa,"P",{});var CTt=s(jpe);hjo=r(CTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CTt.forEach(t),pjo=i(fa),Da=n(fa,"P",{});var Aw=s(Da);_jo=r(Aw,"The model class to instantiate is selected based on the "),Dpe=n(Aw,"CODE",{});var wTt=s(Dpe);ujo=r(wTt,"model_type"),wTt.forEach(t),bjo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(Aw,"CODE",{});var ATt=s(Gpe);vjo=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),Fjo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(Aw,"CODE",{});var LTt=s(Ope);Tjo=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),Mjo=r(Aw,":"),Aw.forEach(t),Ejo=i(fa),fe=n(fa,"UL",{});var _e=s(fe);L2=n(_e,"LI",{});var XRe=s(L2);Vpe=n(XRe,"STRONG",{});var yTt=s(Vpe);Cjo=r(yTt,"bart"),yTt.forEach(t),wjo=r(XRe," \u2014 "),XV=n(XRe,"A",{href:!0});var xTt=s(XV);Ajo=r(xTt,"BartForConditionalGeneration"),xTt.forEach(t),Ljo=r(XRe," (BART model)"),XRe.forEach(t),yjo=i(_e),y2=n(_e,"LI",{});var zRe=s(y2);Xpe=n(zRe,"STRONG",{});var $Tt=s(Xpe);xjo=r($Tt,"bigbird_pegasus"),$Tt.forEach(t),$jo=r(zRe," \u2014 "),zV=n(zRe,"A",{href:!0});var kTt=s(zV);kjo=r(kTt,"BigBirdPegasusForConditionalGeneration"),kTt.forEach(t),Sjo=r(zRe," (BigBird-Pegasus model)"),zRe.forEach(t),Rjo=i(_e),x2=n(_e,"LI",{});var QRe=s(x2);zpe=n(QRe,"STRONG",{});var STt=s(zpe);Pjo=r(STt,"blenderbot"),STt.forEach(t),Bjo=r(QRe," \u2014 "),QV=n(QRe,"A",{href:!0});var RTt=s(QV);Ijo=r(RTt,"BlenderbotForConditionalGeneration"),RTt.forEach(t),Njo=r(QRe," (Blenderbot model)"),QRe.forEach(t),qjo=i(_e),$2=n(_e,"LI",{});var WRe=s($2);Qpe=n(WRe,"STRONG",{});var PTt=s(Qpe);jjo=r(PTt,"blenderbot-small"),PTt.forEach(t),Djo=r(WRe," \u2014 "),WV=n(WRe,"A",{href:!0});var BTt=s(WV);Gjo=r(BTt,"BlenderbotSmallForConditionalGeneration"),BTt.forEach(t),Ojo=r(WRe," (BlenderbotSmall model)"),WRe.forEach(t),Vjo=i(_e),k2=n(_e,"LI",{});var HRe=s(k2);Wpe=n(HRe,"STRONG",{});var ITt=s(Wpe);Xjo=r(ITt,"encoder-decoder"),ITt.forEach(t),zjo=r(HRe," \u2014 "),HV=n(HRe,"A",{href:!0});var NTt=s(HV);Qjo=r(NTt,"EncoderDecoderModel"),NTt.forEach(t),Wjo=r(HRe," (Encoder decoder model)"),HRe.forEach(t),Hjo=i(_e),S2=n(_e,"LI",{});var URe=s(S2);Hpe=n(URe,"STRONG",{});var qTt=s(Hpe);Ujo=r(qTt,"fsmt"),qTt.forEach(t),Jjo=r(URe," \u2014 "),UV=n(URe,"A",{href:!0});var jTt=s(UV);Yjo=r(jTt,"FSMTForConditionalGeneration"),jTt.forEach(t),Kjo=r(URe," (FairSeq Machine-Translation model)"),URe.forEach(t),Zjo=i(_e),R2=n(_e,"LI",{});var JRe=s(R2);Upe=n(JRe,"STRONG",{});var DTt=s(Upe);eDo=r(DTt,"led"),DTt.forEach(t),oDo=r(JRe," \u2014 "),JV=n(JRe,"A",{href:!0});var GTt=s(JV);rDo=r(GTt,"LEDForConditionalGeneration"),GTt.forEach(t),tDo=r(JRe," (LED model)"),JRe.forEach(t),aDo=i(_e),P2=n(_e,"LI",{});var YRe=s(P2);Jpe=n(YRe,"STRONG",{});var OTt=s(Jpe);nDo=r(OTt,"longt5"),OTt.forEach(t),sDo=r(YRe," \u2014 "),YV=n(YRe,"A",{href:!0});var VTt=s(YV);lDo=r(VTt,"LongT5ForConditionalGeneration"),VTt.forEach(t),iDo=r(YRe," (LongT5 model)"),YRe.forEach(t),dDo=i(_e),B2=n(_e,"LI",{});var KRe=s(B2);Ype=n(KRe,"STRONG",{});var XTt=s(Ype);cDo=r(XTt,"m2m_100"),XTt.forEach(t),fDo=r(KRe," \u2014 "),KV=n(KRe,"A",{href:!0});var zTt=s(KV);mDo=r(zTt,"M2M100ForConditionalGeneration"),zTt.forEach(t),gDo=r(KRe," (M2M100 model)"),KRe.forEach(t),hDo=i(_e),I2=n(_e,"LI",{});var ZRe=s(I2);Kpe=n(ZRe,"STRONG",{});var QTt=s(Kpe);pDo=r(QTt,"marian"),QTt.forEach(t),_Do=r(ZRe," \u2014 "),ZV=n(ZRe,"A",{href:!0});var WTt=s(ZV);uDo=r(WTt,"MarianMTModel"),WTt.forEach(t),bDo=r(ZRe," (Marian model)"),ZRe.forEach(t),vDo=i(_e),N2=n(_e,"LI",{});var ePe=s(N2);Zpe=n(ePe,"STRONG",{});var HTt=s(Zpe);FDo=r(HTt,"mbart"),HTt.forEach(t),TDo=r(ePe," \u2014 "),eX=n(ePe,"A",{href:!0});var UTt=s(eX);MDo=r(UTt,"MBartForConditionalGeneration"),UTt.forEach(t),EDo=r(ePe," (mBART model)"),ePe.forEach(t),CDo=i(_e),q2=n(_e,"LI",{});var oPe=s(q2);e_e=n(oPe,"STRONG",{});var JTt=s(e_e);wDo=r(JTt,"mt5"),JTt.forEach(t),ADo=r(oPe," \u2014 "),oX=n(oPe,"A",{href:!0});var YTt=s(oX);LDo=r(YTt,"MT5ForConditionalGeneration"),YTt.forEach(t),yDo=r(oPe," (MT5 model)"),oPe.forEach(t),xDo=i(_e),j2=n(_e,"LI",{});var rPe=s(j2);o_e=n(rPe,"STRONG",{});var KTt=s(o_e);$Do=r(KTt,"mvp"),KTt.forEach(t),kDo=r(rPe," \u2014 "),rX=n(rPe,"A",{href:!0});var ZTt=s(rX);SDo=r(ZTt,"MvpForConditionalGeneration"),ZTt.forEach(t),RDo=r(rPe," (MVP model)"),rPe.forEach(t),PDo=i(_e),D2=n(_e,"LI",{});var tPe=s(D2);r_e=n(tPe,"STRONG",{});var e7t=s(r_e);BDo=r(e7t,"nllb"),e7t.forEach(t),IDo=r(tPe," \u2014 "),tX=n(tPe,"A",{href:!0});var o7t=s(tX);NDo=r(o7t,"M2M100ForConditionalGeneration"),o7t.forEach(t),qDo=r(tPe," (NLLB model)"),tPe.forEach(t),jDo=i(_e),G2=n(_e,"LI",{});var aPe=s(G2);t_e=n(aPe,"STRONG",{});var r7t=s(t_e);DDo=r(r7t,"pegasus"),r7t.forEach(t),GDo=r(aPe," \u2014 "),aX=n(aPe,"A",{href:!0});var t7t=s(aX);ODo=r(t7t,"PegasusForConditionalGeneration"),t7t.forEach(t),VDo=r(aPe," (Pegasus model)"),aPe.forEach(t),XDo=i(_e),O2=n(_e,"LI",{});var nPe=s(O2);a_e=n(nPe,"STRONG",{});var a7t=s(a_e);zDo=r(a7t,"plbart"),a7t.forEach(t),QDo=r(nPe," \u2014 "),nX=n(nPe,"A",{href:!0});var n7t=s(nX);WDo=r(n7t,"PLBartForConditionalGeneration"),n7t.forEach(t),HDo=r(nPe," (PLBart model)"),nPe.forEach(t),UDo=i(_e),V2=n(_e,"LI",{});var sPe=s(V2);n_e=n(sPe,"STRONG",{});var s7t=s(n_e);JDo=r(s7t,"prophetnet"),s7t.forEach(t),YDo=r(sPe," \u2014 "),sX=n(sPe,"A",{href:!0});var l7t=s(sX);KDo=r(l7t,"ProphetNetForConditionalGeneration"),l7t.forEach(t),ZDo=r(sPe," (ProphetNet model)"),sPe.forEach(t),eGo=i(_e),X2=n(_e,"LI",{});var lPe=s(X2);s_e=n(lPe,"STRONG",{});var i7t=s(s_e);oGo=r(i7t,"t5"),i7t.forEach(t),rGo=r(lPe," \u2014 "),lX=n(lPe,"A",{href:!0});var d7t=s(lX);tGo=r(d7t,"T5ForConditionalGeneration"),d7t.forEach(t),aGo=r(lPe," (T5 model)"),lPe.forEach(t),nGo=i(_e),z2=n(_e,"LI",{});var iPe=s(z2);l_e=n(iPe,"STRONG",{});var c7t=s(l_e);sGo=r(c7t,"xlm-prophetnet"),c7t.forEach(t),lGo=r(iPe," \u2014 "),iX=n(iPe,"A",{href:!0});var f7t=s(iX);iGo=r(f7t,"XLMProphetNetForConditionalGeneration"),f7t.forEach(t),dGo=r(iPe," (XLM-ProphetNet model)"),iPe.forEach(t),_e.forEach(t),cGo=i(fa),Q2=n(fa,"P",{});var dPe=s(Q2);fGo=r(dPe,"The model is set in evaluation mode by default using "),i_e=n(dPe,"CODE",{});var m7t=s(i_e);mGo=r(m7t,"model.eval()"),m7t.forEach(t),gGo=r(dPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(dPe,"CODE",{});var g7t=s(d_e);hGo=r(g7t,"model.train()"),g7t.forEach(t),dPe.forEach(t),pGo=i(fa),T(W2.$$.fragment,fa),fa.forEach(t),il.forEach(t),tze=i(f),ad=n(f,"H2",{class:!0});var dWe=s(ad);H2=n(dWe,"A",{id:!0,class:!0,href:!0});var h7t=s(H2);c_e=n(h7t,"SPAN",{});var p7t=s(c_e);T(fy.$$.fragment,p7t),p7t.forEach(t),h7t.forEach(t),_Go=i(dWe),f_e=n(dWe,"SPAN",{});var _7t=s(f_e);uGo=r(_7t,"AutoModelForSequenceClassification"),_7t.forEach(t),dWe.forEach(t),aze=i(f),Bo=n(f,"DIV",{class:!0});var dl=s(Bo);T(my.$$.fragment,dl),bGo=i(dl),nd=n(dl,"P",{});var dte=s(nd);vGo=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dX=n(dte,"A",{href:!0});var u7t=s(dX);FGo=r(u7t,"from_pretrained()"),u7t.forEach(t),TGo=r(dte," class method or the "),cX=n(dte,"A",{href:!0});var b7t=s(cX);MGo=r(b7t,"from_config()"),b7t.forEach(t),EGo=r(dte,` class
method.`),dte.forEach(t),CGo=i(dl),gy=n(dl,"P",{});var cWe=s(gy);wGo=r(cWe,"This class cannot be instantiated directly using "),m_e=n(cWe,"CODE",{});var v7t=s(m_e);AGo=r(v7t,"__init__()"),v7t.forEach(t),LGo=r(cWe," (throws an error)."),cWe.forEach(t),yGo=i(dl),gt=n(dl,"DIV",{class:!0});var Lw=s(gt);T(hy.$$.fragment,Lw),xGo=i(Lw),g_e=n(Lw,"P",{});var F7t=s(g_e);$Go=r(F7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F7t.forEach(t),kGo=i(Lw),sd=n(Lw,"P",{});var cte=s(sd);SGo=r(cte,`Note:
Loading a model from its configuration file does `),h_e=n(cte,"STRONG",{});var T7t=s(h_e);RGo=r(T7t,"not"),T7t.forEach(t),PGo=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(cte,"A",{href:!0});var M7t=s(fX);BGo=r(M7t,"from_pretrained()"),M7t.forEach(t),IGo=r(cte," to load the model weights."),cte.forEach(t),NGo=i(Lw),T(U2.$$.fragment,Lw),Lw.forEach(t),qGo=i(dl),ro=n(dl,"DIV",{class:!0});var ma=s(ro);T(py.$$.fragment,ma),jGo=i(ma),p_e=n(ma,"P",{});var E7t=s(p_e);DGo=r(E7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),E7t.forEach(t),GGo=i(ma),Ga=n(ma,"P",{});var yw=s(Ga);OGo=r(yw,"The model class to instantiate is selected based on the "),__e=n(yw,"CODE",{});var C7t=s(__e);VGo=r(C7t,"model_type"),C7t.forEach(t),XGo=r(yw,` property of the config object (either
passed as an argument or loaded from `),u_e=n(yw,"CODE",{});var w7t=s(u_e);zGo=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),QGo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(yw,"CODE",{});var A7t=s(b_e);WGo=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),HGo=r(yw,":"),yw.forEach(t),UGo=i(ma),B=n(ma,"UL",{});var j=s(B);J2=n(j,"LI",{});var cPe=s(J2);v_e=n(cPe,"STRONG",{});var L7t=s(v_e);JGo=r(L7t,"albert"),L7t.forEach(t),YGo=r(cPe," \u2014 "),mX=n(cPe,"A",{href:!0});var y7t=s(mX);KGo=r(y7t,"AlbertForSequenceClassification"),y7t.forEach(t),ZGo=r(cPe," (ALBERT model)"),cPe.forEach(t),eOo=i(j),Y2=n(j,"LI",{});var fPe=s(Y2);F_e=n(fPe,"STRONG",{});var x7t=s(F_e);oOo=r(x7t,"bart"),x7t.forEach(t),rOo=r(fPe," \u2014 "),gX=n(fPe,"A",{href:!0});var $7t=s(gX);tOo=r($7t,"BartForSequenceClassification"),$7t.forEach(t),aOo=r(fPe," (BART model)"),fPe.forEach(t),nOo=i(j),K2=n(j,"LI",{});var mPe=s(K2);T_e=n(mPe,"STRONG",{});var k7t=s(T_e);sOo=r(k7t,"bert"),k7t.forEach(t),lOo=r(mPe," \u2014 "),hX=n(mPe,"A",{href:!0});var S7t=s(hX);iOo=r(S7t,"BertForSequenceClassification"),S7t.forEach(t),dOo=r(mPe," (BERT model)"),mPe.forEach(t),cOo=i(j),Z2=n(j,"LI",{});var gPe=s(Z2);M_e=n(gPe,"STRONG",{});var R7t=s(M_e);fOo=r(R7t,"big_bird"),R7t.forEach(t),mOo=r(gPe," \u2014 "),pX=n(gPe,"A",{href:!0});var P7t=s(pX);gOo=r(P7t,"BigBirdForSequenceClassification"),P7t.forEach(t),hOo=r(gPe," (BigBird model)"),gPe.forEach(t),pOo=i(j),eb=n(j,"LI",{});var hPe=s(eb);E_e=n(hPe,"STRONG",{});var B7t=s(E_e);_Oo=r(B7t,"bigbird_pegasus"),B7t.forEach(t),uOo=r(hPe," \u2014 "),_X=n(hPe,"A",{href:!0});var I7t=s(_X);bOo=r(I7t,"BigBirdPegasusForSequenceClassification"),I7t.forEach(t),vOo=r(hPe," (BigBird-Pegasus model)"),hPe.forEach(t),FOo=i(j),ob=n(j,"LI",{});var pPe=s(ob);C_e=n(pPe,"STRONG",{});var N7t=s(C_e);TOo=r(N7t,"bloom"),N7t.forEach(t),MOo=r(pPe," \u2014 "),uX=n(pPe,"A",{href:!0});var q7t=s(uX);EOo=r(q7t,"BloomForSequenceClassification"),q7t.forEach(t),COo=r(pPe," (BLOOM model)"),pPe.forEach(t),wOo=i(j),rb=n(j,"LI",{});var _Pe=s(rb);w_e=n(_Pe,"STRONG",{});var j7t=s(w_e);AOo=r(j7t,"camembert"),j7t.forEach(t),LOo=r(_Pe," \u2014 "),bX=n(_Pe,"A",{href:!0});var D7t=s(bX);yOo=r(D7t,"CamembertForSequenceClassification"),D7t.forEach(t),xOo=r(_Pe," (CamemBERT model)"),_Pe.forEach(t),$Oo=i(j),tb=n(j,"LI",{});var uPe=s(tb);A_e=n(uPe,"STRONG",{});var G7t=s(A_e);kOo=r(G7t,"canine"),G7t.forEach(t),SOo=r(uPe," \u2014 "),vX=n(uPe,"A",{href:!0});var O7t=s(vX);ROo=r(O7t,"CanineForSequenceClassification"),O7t.forEach(t),POo=r(uPe," (CANINE model)"),uPe.forEach(t),BOo=i(j),ab=n(j,"LI",{});var bPe=s(ab);L_e=n(bPe,"STRONG",{});var V7t=s(L_e);IOo=r(V7t,"convbert"),V7t.forEach(t),NOo=r(bPe," \u2014 "),FX=n(bPe,"A",{href:!0});var X7t=s(FX);qOo=r(X7t,"ConvBertForSequenceClassification"),X7t.forEach(t),jOo=r(bPe," (ConvBERT model)"),bPe.forEach(t),DOo=i(j),nb=n(j,"LI",{});var vPe=s(nb);y_e=n(vPe,"STRONG",{});var z7t=s(y_e);GOo=r(z7t,"ctrl"),z7t.forEach(t),OOo=r(vPe," \u2014 "),TX=n(vPe,"A",{href:!0});var Q7t=s(TX);VOo=r(Q7t,"CTRLForSequenceClassification"),Q7t.forEach(t),XOo=r(vPe," (CTRL model)"),vPe.forEach(t),zOo=i(j),sb=n(j,"LI",{});var FPe=s(sb);x_e=n(FPe,"STRONG",{});var W7t=s(x_e);QOo=r(W7t,"data2vec-text"),W7t.forEach(t),WOo=r(FPe," \u2014 "),MX=n(FPe,"A",{href:!0});var H7t=s(MX);HOo=r(H7t,"Data2VecTextForSequenceClassification"),H7t.forEach(t),UOo=r(FPe," (Data2VecText model)"),FPe.forEach(t),JOo=i(j),lb=n(j,"LI",{});var TPe=s(lb);$_e=n(TPe,"STRONG",{});var U7t=s($_e);YOo=r(U7t,"deberta"),U7t.forEach(t),KOo=r(TPe," \u2014 "),EX=n(TPe,"A",{href:!0});var J7t=s(EX);ZOo=r(J7t,"DebertaForSequenceClassification"),J7t.forEach(t),eVo=r(TPe," (DeBERTa model)"),TPe.forEach(t),oVo=i(j),ib=n(j,"LI",{});var MPe=s(ib);k_e=n(MPe,"STRONG",{});var Y7t=s(k_e);rVo=r(Y7t,"deberta-v2"),Y7t.forEach(t),tVo=r(MPe," \u2014 "),CX=n(MPe,"A",{href:!0});var K7t=s(CX);aVo=r(K7t,"DebertaV2ForSequenceClassification"),K7t.forEach(t),nVo=r(MPe," (DeBERTa-v2 model)"),MPe.forEach(t),sVo=i(j),db=n(j,"LI",{});var EPe=s(db);S_e=n(EPe,"STRONG",{});var Z7t=s(S_e);lVo=r(Z7t,"distilbert"),Z7t.forEach(t),iVo=r(EPe," \u2014 "),wX=n(EPe,"A",{href:!0});var e9t=s(wX);dVo=r(e9t,"DistilBertForSequenceClassification"),e9t.forEach(t),cVo=r(EPe," (DistilBERT model)"),EPe.forEach(t),fVo=i(j),cb=n(j,"LI",{});var CPe=s(cb);R_e=n(CPe,"STRONG",{});var o9t=s(R_e);mVo=r(o9t,"electra"),o9t.forEach(t),gVo=r(CPe," \u2014 "),AX=n(CPe,"A",{href:!0});var r9t=s(AX);hVo=r(r9t,"ElectraForSequenceClassification"),r9t.forEach(t),pVo=r(CPe," (ELECTRA model)"),CPe.forEach(t),_Vo=i(j),fb=n(j,"LI",{});var wPe=s(fb);P_e=n(wPe,"STRONG",{});var t9t=s(P_e);uVo=r(t9t,"flaubert"),t9t.forEach(t),bVo=r(wPe," \u2014 "),LX=n(wPe,"A",{href:!0});var a9t=s(LX);vVo=r(a9t,"FlaubertForSequenceClassification"),a9t.forEach(t),FVo=r(wPe," (FlauBERT model)"),wPe.forEach(t),TVo=i(j),mb=n(j,"LI",{});var APe=s(mb);B_e=n(APe,"STRONG",{});var n9t=s(B_e);MVo=r(n9t,"fnet"),n9t.forEach(t),EVo=r(APe," \u2014 "),yX=n(APe,"A",{href:!0});var s9t=s(yX);CVo=r(s9t,"FNetForSequenceClassification"),s9t.forEach(t),wVo=r(APe," (FNet model)"),APe.forEach(t),AVo=i(j),gb=n(j,"LI",{});var LPe=s(gb);I_e=n(LPe,"STRONG",{});var l9t=s(I_e);LVo=r(l9t,"funnel"),l9t.forEach(t),yVo=r(LPe," \u2014 "),xX=n(LPe,"A",{href:!0});var i9t=s(xX);xVo=r(i9t,"FunnelForSequenceClassification"),i9t.forEach(t),$Vo=r(LPe," (Funnel Transformer model)"),LPe.forEach(t),kVo=i(j),hb=n(j,"LI",{});var yPe=s(hb);N_e=n(yPe,"STRONG",{});var d9t=s(N_e);SVo=r(d9t,"gpt2"),d9t.forEach(t),RVo=r(yPe," \u2014 "),$X=n(yPe,"A",{href:!0});var c9t=s($X);PVo=r(c9t,"GPT2ForSequenceClassification"),c9t.forEach(t),BVo=r(yPe," (OpenAI GPT-2 model)"),yPe.forEach(t),IVo=i(j),pb=n(j,"LI",{});var xPe=s(pb);q_e=n(xPe,"STRONG",{});var f9t=s(q_e);NVo=r(f9t,"gpt_neo"),f9t.forEach(t),qVo=r(xPe," \u2014 "),kX=n(xPe,"A",{href:!0});var m9t=s(kX);jVo=r(m9t,"GPTNeoForSequenceClassification"),m9t.forEach(t),DVo=r(xPe," (GPT Neo model)"),xPe.forEach(t),GVo=i(j),_b=n(j,"LI",{});var $Pe=s(_b);j_e=n($Pe,"STRONG",{});var g9t=s(j_e);OVo=r(g9t,"gptj"),g9t.forEach(t),VVo=r($Pe," \u2014 "),SX=n($Pe,"A",{href:!0});var h9t=s(SX);XVo=r(h9t,"GPTJForSequenceClassification"),h9t.forEach(t),zVo=r($Pe," (GPT-J model)"),$Pe.forEach(t),QVo=i(j),ub=n(j,"LI",{});var kPe=s(ub);D_e=n(kPe,"STRONG",{});var p9t=s(D_e);WVo=r(p9t,"ibert"),p9t.forEach(t),HVo=r(kPe," \u2014 "),RX=n(kPe,"A",{href:!0});var _9t=s(RX);UVo=r(_9t,"IBertForSequenceClassification"),_9t.forEach(t),JVo=r(kPe," (I-BERT model)"),kPe.forEach(t),YVo=i(j),bb=n(j,"LI",{});var SPe=s(bb);G_e=n(SPe,"STRONG",{});var u9t=s(G_e);KVo=r(u9t,"layoutlm"),u9t.forEach(t),ZVo=r(SPe," \u2014 "),PX=n(SPe,"A",{href:!0});var b9t=s(PX);eXo=r(b9t,"LayoutLMForSequenceClassification"),b9t.forEach(t),oXo=r(SPe," (LayoutLM model)"),SPe.forEach(t),rXo=i(j),vb=n(j,"LI",{});var RPe=s(vb);O_e=n(RPe,"STRONG",{});var v9t=s(O_e);tXo=r(v9t,"layoutlmv2"),v9t.forEach(t),aXo=r(RPe," \u2014 "),BX=n(RPe,"A",{href:!0});var F9t=s(BX);nXo=r(F9t,"LayoutLMv2ForSequenceClassification"),F9t.forEach(t),sXo=r(RPe," (LayoutLMv2 model)"),RPe.forEach(t),lXo=i(j),Fb=n(j,"LI",{});var PPe=s(Fb);V_e=n(PPe,"STRONG",{});var T9t=s(V_e);iXo=r(T9t,"layoutlmv3"),T9t.forEach(t),dXo=r(PPe," \u2014 "),IX=n(PPe,"A",{href:!0});var M9t=s(IX);cXo=r(M9t,"LayoutLMv3ForSequenceClassification"),M9t.forEach(t),fXo=r(PPe," (LayoutLMv3 model)"),PPe.forEach(t),mXo=i(j),Tb=n(j,"LI",{});var BPe=s(Tb);X_e=n(BPe,"STRONG",{});var E9t=s(X_e);gXo=r(E9t,"led"),E9t.forEach(t),hXo=r(BPe," \u2014 "),NX=n(BPe,"A",{href:!0});var C9t=s(NX);pXo=r(C9t,"LEDForSequenceClassification"),C9t.forEach(t),_Xo=r(BPe," (LED model)"),BPe.forEach(t),uXo=i(j),Mb=n(j,"LI",{});var IPe=s(Mb);z_e=n(IPe,"STRONG",{});var w9t=s(z_e);bXo=r(w9t,"longformer"),w9t.forEach(t),vXo=r(IPe," \u2014 "),qX=n(IPe,"A",{href:!0});var A9t=s(qX);FXo=r(A9t,"LongformerForSequenceClassification"),A9t.forEach(t),TXo=r(IPe," (Longformer model)"),IPe.forEach(t),MXo=i(j),Eb=n(j,"LI",{});var NPe=s(Eb);Q_e=n(NPe,"STRONG",{});var L9t=s(Q_e);EXo=r(L9t,"mbart"),L9t.forEach(t),CXo=r(NPe," \u2014 "),jX=n(NPe,"A",{href:!0});var y9t=s(jX);wXo=r(y9t,"MBartForSequenceClassification"),y9t.forEach(t),AXo=r(NPe," (mBART model)"),NPe.forEach(t),LXo=i(j),Cb=n(j,"LI",{});var qPe=s(Cb);W_e=n(qPe,"STRONG",{});var x9t=s(W_e);yXo=r(x9t,"megatron-bert"),x9t.forEach(t),xXo=r(qPe," \u2014 "),DX=n(qPe,"A",{href:!0});var $9t=s(DX);$Xo=r($9t,"MegatronBertForSequenceClassification"),$9t.forEach(t),kXo=r(qPe," (Megatron-BERT model)"),qPe.forEach(t),SXo=i(j),wb=n(j,"LI",{});var jPe=s(wb);H_e=n(jPe,"STRONG",{});var k9t=s(H_e);RXo=r(k9t,"mobilebert"),k9t.forEach(t),PXo=r(jPe," \u2014 "),GX=n(jPe,"A",{href:!0});var S9t=s(GX);BXo=r(S9t,"MobileBertForSequenceClassification"),S9t.forEach(t),IXo=r(jPe," (MobileBERT model)"),jPe.forEach(t),NXo=i(j),Ab=n(j,"LI",{});var DPe=s(Ab);U_e=n(DPe,"STRONG",{});var R9t=s(U_e);qXo=r(R9t,"mpnet"),R9t.forEach(t),jXo=r(DPe," \u2014 "),OX=n(DPe,"A",{href:!0});var P9t=s(OX);DXo=r(P9t,"MPNetForSequenceClassification"),P9t.forEach(t),GXo=r(DPe," (MPNet model)"),DPe.forEach(t),OXo=i(j),Lb=n(j,"LI",{});var GPe=s(Lb);J_e=n(GPe,"STRONG",{});var B9t=s(J_e);VXo=r(B9t,"mvp"),B9t.forEach(t),XXo=r(GPe," \u2014 "),VX=n(GPe,"A",{href:!0});var I9t=s(VX);zXo=r(I9t,"MvpForSequenceClassification"),I9t.forEach(t),QXo=r(GPe," (MVP model)"),GPe.forEach(t),WXo=i(j),yb=n(j,"LI",{});var OPe=s(yb);Y_e=n(OPe,"STRONG",{});var N9t=s(Y_e);HXo=r(N9t,"nezha"),N9t.forEach(t),UXo=r(OPe," \u2014 "),XX=n(OPe,"A",{href:!0});var q9t=s(XX);JXo=r(q9t,"NezhaForSequenceClassification"),q9t.forEach(t),YXo=r(OPe," (Nezha model)"),OPe.forEach(t),KXo=i(j),xb=n(j,"LI",{});var VPe=s(xb);K_e=n(VPe,"STRONG",{});var j9t=s(K_e);ZXo=r(j9t,"nystromformer"),j9t.forEach(t),ezo=r(VPe," \u2014 "),zX=n(VPe,"A",{href:!0});var D9t=s(zX);ozo=r(D9t,"NystromformerForSequenceClassification"),D9t.forEach(t),rzo=r(VPe," (Nystr\xF6mformer model)"),VPe.forEach(t),tzo=i(j),$b=n(j,"LI",{});var XPe=s($b);Z_e=n(XPe,"STRONG",{});var G9t=s(Z_e);azo=r(G9t,"openai-gpt"),G9t.forEach(t),nzo=r(XPe," \u2014 "),QX=n(XPe,"A",{href:!0});var O9t=s(QX);szo=r(O9t,"OpenAIGPTForSequenceClassification"),O9t.forEach(t),lzo=r(XPe," (OpenAI GPT model)"),XPe.forEach(t),izo=i(j),kb=n(j,"LI",{});var zPe=s(kb);eue=n(zPe,"STRONG",{});var V9t=s(eue);dzo=r(V9t,"opt"),V9t.forEach(t),czo=r(zPe," \u2014 "),WX=n(zPe,"A",{href:!0});var X9t=s(WX);fzo=r(X9t,"OPTForSequenceClassification"),X9t.forEach(t),mzo=r(zPe," (OPT model)"),zPe.forEach(t),gzo=i(j),Sb=n(j,"LI",{});var QPe=s(Sb);oue=n(QPe,"STRONG",{});var z9t=s(oue);hzo=r(z9t,"perceiver"),z9t.forEach(t),pzo=r(QPe," \u2014 "),HX=n(QPe,"A",{href:!0});var Q9t=s(HX);_zo=r(Q9t,"PerceiverForSequenceClassification"),Q9t.forEach(t),uzo=r(QPe," (Perceiver model)"),QPe.forEach(t),bzo=i(j),Rb=n(j,"LI",{});var WPe=s(Rb);rue=n(WPe,"STRONG",{});var W9t=s(rue);vzo=r(W9t,"plbart"),W9t.forEach(t),Fzo=r(WPe," \u2014 "),UX=n(WPe,"A",{href:!0});var H9t=s(UX);Tzo=r(H9t,"PLBartForSequenceClassification"),H9t.forEach(t),Mzo=r(WPe," (PLBart model)"),WPe.forEach(t),Ezo=i(j),Pb=n(j,"LI",{});var HPe=s(Pb);tue=n(HPe,"STRONG",{});var U9t=s(tue);Czo=r(U9t,"qdqbert"),U9t.forEach(t),wzo=r(HPe," \u2014 "),JX=n(HPe,"A",{href:!0});var J9t=s(JX);Azo=r(J9t,"QDQBertForSequenceClassification"),J9t.forEach(t),Lzo=r(HPe," (QDQBert model)"),HPe.forEach(t),yzo=i(j),Bb=n(j,"LI",{});var UPe=s(Bb);aue=n(UPe,"STRONG",{});var Y9t=s(aue);xzo=r(Y9t,"reformer"),Y9t.forEach(t),$zo=r(UPe," \u2014 "),YX=n(UPe,"A",{href:!0});var K9t=s(YX);kzo=r(K9t,"ReformerForSequenceClassification"),K9t.forEach(t),Szo=r(UPe," (Reformer model)"),UPe.forEach(t),Rzo=i(j),Ib=n(j,"LI",{});var JPe=s(Ib);nue=n(JPe,"STRONG",{});var Z9t=s(nue);Pzo=r(Z9t,"rembert"),Z9t.forEach(t),Bzo=r(JPe," \u2014 "),KX=n(JPe,"A",{href:!0});var eMt=s(KX);Izo=r(eMt,"RemBertForSequenceClassification"),eMt.forEach(t),Nzo=r(JPe," (RemBERT model)"),JPe.forEach(t),qzo=i(j),Nb=n(j,"LI",{});var YPe=s(Nb);sue=n(YPe,"STRONG",{});var oMt=s(sue);jzo=r(oMt,"roberta"),oMt.forEach(t),Dzo=r(YPe," \u2014 "),ZX=n(YPe,"A",{href:!0});var rMt=s(ZX);Gzo=r(rMt,"RobertaForSequenceClassification"),rMt.forEach(t),Ozo=r(YPe," (RoBERTa model)"),YPe.forEach(t),Vzo=i(j),qb=n(j,"LI",{});var KPe=s(qb);lue=n(KPe,"STRONG",{});var tMt=s(lue);Xzo=r(tMt,"roformer"),tMt.forEach(t),zzo=r(KPe," \u2014 "),ez=n(KPe,"A",{href:!0});var aMt=s(ez);Qzo=r(aMt,"RoFormerForSequenceClassification"),aMt.forEach(t),Wzo=r(KPe," (RoFormer model)"),KPe.forEach(t),Hzo=i(j),jb=n(j,"LI",{});var ZPe=s(jb);iue=n(ZPe,"STRONG",{});var nMt=s(iue);Uzo=r(nMt,"squeezebert"),nMt.forEach(t),Jzo=r(ZPe," \u2014 "),oz=n(ZPe,"A",{href:!0});var sMt=s(oz);Yzo=r(sMt,"SqueezeBertForSequenceClassification"),sMt.forEach(t),Kzo=r(ZPe," (SqueezeBERT model)"),ZPe.forEach(t),Zzo=i(j),Db=n(j,"LI",{});var eBe=s(Db);due=n(eBe,"STRONG",{});var lMt=s(due);eQo=r(lMt,"tapas"),lMt.forEach(t),oQo=r(eBe," \u2014 "),rz=n(eBe,"A",{href:!0});var iMt=s(rz);rQo=r(iMt,"TapasForSequenceClassification"),iMt.forEach(t),tQo=r(eBe," (TAPAS model)"),eBe.forEach(t),aQo=i(j),Gb=n(j,"LI",{});var oBe=s(Gb);cue=n(oBe,"STRONG",{});var dMt=s(cue);nQo=r(dMt,"transfo-xl"),dMt.forEach(t),sQo=r(oBe," \u2014 "),tz=n(oBe,"A",{href:!0});var cMt=s(tz);lQo=r(cMt,"TransfoXLForSequenceClassification"),cMt.forEach(t),iQo=r(oBe," (Transformer-XL model)"),oBe.forEach(t),dQo=i(j),Ob=n(j,"LI",{});var rBe=s(Ob);fue=n(rBe,"STRONG",{});var fMt=s(fue);cQo=r(fMt,"xlm"),fMt.forEach(t),fQo=r(rBe," \u2014 "),az=n(rBe,"A",{href:!0});var mMt=s(az);mQo=r(mMt,"XLMForSequenceClassification"),mMt.forEach(t),gQo=r(rBe," (XLM model)"),rBe.forEach(t),hQo=i(j),Vb=n(j,"LI",{});var tBe=s(Vb);mue=n(tBe,"STRONG",{});var gMt=s(mue);pQo=r(gMt,"xlm-roberta"),gMt.forEach(t),_Qo=r(tBe," \u2014 "),nz=n(tBe,"A",{href:!0});var hMt=s(nz);uQo=r(hMt,"XLMRobertaForSequenceClassification"),hMt.forEach(t),bQo=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),vQo=i(j),Xb=n(j,"LI",{});var aBe=s(Xb);gue=n(aBe,"STRONG",{});var pMt=s(gue);FQo=r(pMt,"xlm-roberta-xl"),pMt.forEach(t),TQo=r(aBe," \u2014 "),sz=n(aBe,"A",{href:!0});var _Mt=s(sz);MQo=r(_Mt,"XLMRobertaXLForSequenceClassification"),_Mt.forEach(t),EQo=r(aBe," (XLM-RoBERTa-XL model)"),aBe.forEach(t),CQo=i(j),zb=n(j,"LI",{});var nBe=s(zb);hue=n(nBe,"STRONG",{});var uMt=s(hue);wQo=r(uMt,"xlnet"),uMt.forEach(t),AQo=r(nBe," \u2014 "),lz=n(nBe,"A",{href:!0});var bMt=s(lz);LQo=r(bMt,"XLNetForSequenceClassification"),bMt.forEach(t),yQo=r(nBe," (XLNet model)"),nBe.forEach(t),xQo=i(j),Qb=n(j,"LI",{});var sBe=s(Qb);pue=n(sBe,"STRONG",{});var vMt=s(pue);$Qo=r(vMt,"yoso"),vMt.forEach(t),kQo=r(sBe," \u2014 "),iz=n(sBe,"A",{href:!0});var FMt=s(iz);SQo=r(FMt,"YosoForSequenceClassification"),FMt.forEach(t),RQo=r(sBe," (YOSO model)"),sBe.forEach(t),j.forEach(t),PQo=i(ma),Wb=n(ma,"P",{});var lBe=s(Wb);BQo=r(lBe,"The model is set in evaluation mode by default using "),_ue=n(lBe,"CODE",{});var TMt=s(_ue);IQo=r(TMt,"model.eval()"),TMt.forEach(t),NQo=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(lBe,"CODE",{});var MMt=s(uue);qQo=r(MMt,"model.train()"),MMt.forEach(t),lBe.forEach(t),jQo=i(ma),T(Hb.$$.fragment,ma),ma.forEach(t),dl.forEach(t),nze=i(f),ld=n(f,"H2",{class:!0});var fWe=s(ld);Ub=n(fWe,"A",{id:!0,class:!0,href:!0});var EMt=s(Ub);bue=n(EMt,"SPAN",{});var CMt=s(bue);T(_y.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),DQo=i(fWe),vue=n(fWe,"SPAN",{});var wMt=s(vue);GQo=r(wMt,"AutoModelForMultipleChoice"),wMt.forEach(t),fWe.forEach(t),sze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(uy.$$.fragment,cl),OQo=i(cl),id=n(cl,"P",{});var fte=s(id);VQo=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dz=n(fte,"A",{href:!0});var AMt=s(dz);XQo=r(AMt,"from_pretrained()"),AMt.forEach(t),zQo=r(fte," class method or the "),cz=n(fte,"A",{href:!0});var LMt=s(cz);QQo=r(LMt,"from_config()"),LMt.forEach(t),WQo=r(fte,` class
method.`),fte.forEach(t),HQo=i(cl),by=n(cl,"P",{});var mWe=s(by);UQo=r(mWe,"This class cannot be instantiated directly using "),Fue=n(mWe,"CODE",{});var yMt=s(Fue);JQo=r(yMt,"__init__()"),yMt.forEach(t),YQo=r(mWe," (throws an error)."),mWe.forEach(t),KQo=i(cl),ht=n(cl,"DIV",{class:!0});var xw=s(ht);T(vy.$$.fragment,xw),ZQo=i(xw),Tue=n(xw,"P",{});var xMt=s(Tue);eWo=r(xMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xMt.forEach(t),oWo=i(xw),dd=n(xw,"P",{});var mte=s(dd);rWo=r(mte,`Note:
Loading a model from its configuration file does `),Mue=n(mte,"STRONG",{});var $Mt=s(Mue);tWo=r($Mt,"not"),$Mt.forEach(t),aWo=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(mte,"A",{href:!0});var kMt=s(fz);nWo=r(kMt,"from_pretrained()"),kMt.forEach(t),sWo=r(mte," to load the model weights."),mte.forEach(t),lWo=i(xw),T(Jb.$$.fragment,xw),xw.forEach(t),iWo=i(cl),to=n(cl,"DIV",{class:!0});var ga=s(to);T(Fy.$$.fragment,ga),dWo=i(ga),Eue=n(ga,"P",{});var SMt=s(Eue);cWo=r(SMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SMt.forEach(t),fWo=i(ga),Oa=n(ga,"P",{});var $w=s(Oa);mWo=r($w,"The model class to instantiate is selected based on the "),Cue=n($w,"CODE",{});var RMt=s(Cue);gWo=r(RMt,"model_type"),RMt.forEach(t),hWo=r($w,` property of the config object (either
passed as an argument or loaded from `),wue=n($w,"CODE",{});var PMt=s(wue);pWo=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),_Wo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n($w,"CODE",{});var BMt=s(Aue);uWo=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),bWo=r($w,":"),$w.forEach(t),vWo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Yb=n(ee,"LI",{});var iBe=s(Yb);Lue=n(iBe,"STRONG",{});var IMt=s(Lue);FWo=r(IMt,"albert"),IMt.forEach(t),TWo=r(iBe," \u2014 "),mz=n(iBe,"A",{href:!0});var NMt=s(mz);MWo=r(NMt,"AlbertForMultipleChoice"),NMt.forEach(t),EWo=r(iBe," (ALBERT model)"),iBe.forEach(t),CWo=i(ee),Kb=n(ee,"LI",{});var dBe=s(Kb);yue=n(dBe,"STRONG",{});var qMt=s(yue);wWo=r(qMt,"bert"),qMt.forEach(t),AWo=r(dBe," \u2014 "),gz=n(dBe,"A",{href:!0});var jMt=s(gz);LWo=r(jMt,"BertForMultipleChoice"),jMt.forEach(t),yWo=r(dBe," (BERT model)"),dBe.forEach(t),xWo=i(ee),Zb=n(ee,"LI",{});var cBe=s(Zb);xue=n(cBe,"STRONG",{});var DMt=s(xue);$Wo=r(DMt,"big_bird"),DMt.forEach(t),kWo=r(cBe," \u2014 "),hz=n(cBe,"A",{href:!0});var GMt=s(hz);SWo=r(GMt,"BigBirdForMultipleChoice"),GMt.forEach(t),RWo=r(cBe," (BigBird model)"),cBe.forEach(t),PWo=i(ee),ev=n(ee,"LI",{});var fBe=s(ev);$ue=n(fBe,"STRONG",{});var OMt=s($ue);BWo=r(OMt,"camembert"),OMt.forEach(t),IWo=r(fBe," \u2014 "),pz=n(fBe,"A",{href:!0});var VMt=s(pz);NWo=r(VMt,"CamembertForMultipleChoice"),VMt.forEach(t),qWo=r(fBe," (CamemBERT model)"),fBe.forEach(t),jWo=i(ee),ov=n(ee,"LI",{});var mBe=s(ov);kue=n(mBe,"STRONG",{});var XMt=s(kue);DWo=r(XMt,"canine"),XMt.forEach(t),GWo=r(mBe," \u2014 "),_z=n(mBe,"A",{href:!0});var zMt=s(_z);OWo=r(zMt,"CanineForMultipleChoice"),zMt.forEach(t),VWo=r(mBe," (CANINE model)"),mBe.forEach(t),XWo=i(ee),rv=n(ee,"LI",{});var gBe=s(rv);Sue=n(gBe,"STRONG",{});var QMt=s(Sue);zWo=r(QMt,"convbert"),QMt.forEach(t),QWo=r(gBe," \u2014 "),uz=n(gBe,"A",{href:!0});var WMt=s(uz);WWo=r(WMt,"ConvBertForMultipleChoice"),WMt.forEach(t),HWo=r(gBe," (ConvBERT model)"),gBe.forEach(t),UWo=i(ee),tv=n(ee,"LI",{});var hBe=s(tv);Rue=n(hBe,"STRONG",{});var HMt=s(Rue);JWo=r(HMt,"data2vec-text"),HMt.forEach(t),YWo=r(hBe," \u2014 "),bz=n(hBe,"A",{href:!0});var UMt=s(bz);KWo=r(UMt,"Data2VecTextForMultipleChoice"),UMt.forEach(t),ZWo=r(hBe," (Data2VecText model)"),hBe.forEach(t),eHo=i(ee),av=n(ee,"LI",{});var pBe=s(av);Pue=n(pBe,"STRONG",{});var JMt=s(Pue);oHo=r(JMt,"deberta-v2"),JMt.forEach(t),rHo=r(pBe," \u2014 "),vz=n(pBe,"A",{href:!0});var YMt=s(vz);tHo=r(YMt,"DebertaV2ForMultipleChoice"),YMt.forEach(t),aHo=r(pBe," (DeBERTa-v2 model)"),pBe.forEach(t),nHo=i(ee),nv=n(ee,"LI",{});var _Be=s(nv);Bue=n(_Be,"STRONG",{});var KMt=s(Bue);sHo=r(KMt,"distilbert"),KMt.forEach(t),lHo=r(_Be," \u2014 "),Fz=n(_Be,"A",{href:!0});var ZMt=s(Fz);iHo=r(ZMt,"DistilBertForMultipleChoice"),ZMt.forEach(t),dHo=r(_Be," (DistilBERT model)"),_Be.forEach(t),cHo=i(ee),sv=n(ee,"LI",{});var uBe=s(sv);Iue=n(uBe,"STRONG",{});var eEt=s(Iue);fHo=r(eEt,"electra"),eEt.forEach(t),mHo=r(uBe," \u2014 "),Tz=n(uBe,"A",{href:!0});var oEt=s(Tz);gHo=r(oEt,"ElectraForMultipleChoice"),oEt.forEach(t),hHo=r(uBe," (ELECTRA model)"),uBe.forEach(t),pHo=i(ee),lv=n(ee,"LI",{});var bBe=s(lv);Nue=n(bBe,"STRONG",{});var rEt=s(Nue);_Ho=r(rEt,"flaubert"),rEt.forEach(t),uHo=r(bBe," \u2014 "),Mz=n(bBe,"A",{href:!0});var tEt=s(Mz);bHo=r(tEt,"FlaubertForMultipleChoice"),tEt.forEach(t),vHo=r(bBe," (FlauBERT model)"),bBe.forEach(t),FHo=i(ee),iv=n(ee,"LI",{});var vBe=s(iv);que=n(vBe,"STRONG",{});var aEt=s(que);THo=r(aEt,"fnet"),aEt.forEach(t),MHo=r(vBe," \u2014 "),Ez=n(vBe,"A",{href:!0});var nEt=s(Ez);EHo=r(nEt,"FNetForMultipleChoice"),nEt.forEach(t),CHo=r(vBe," (FNet model)"),vBe.forEach(t),wHo=i(ee),dv=n(ee,"LI",{});var FBe=s(dv);jue=n(FBe,"STRONG",{});var sEt=s(jue);AHo=r(sEt,"funnel"),sEt.forEach(t),LHo=r(FBe," \u2014 "),Cz=n(FBe,"A",{href:!0});var lEt=s(Cz);yHo=r(lEt,"FunnelForMultipleChoice"),lEt.forEach(t),xHo=r(FBe," (Funnel Transformer model)"),FBe.forEach(t),$Ho=i(ee),cv=n(ee,"LI",{});var TBe=s(cv);Due=n(TBe,"STRONG",{});var iEt=s(Due);kHo=r(iEt,"ibert"),iEt.forEach(t),SHo=r(TBe," \u2014 "),wz=n(TBe,"A",{href:!0});var dEt=s(wz);RHo=r(dEt,"IBertForMultipleChoice"),dEt.forEach(t),PHo=r(TBe," (I-BERT model)"),TBe.forEach(t),BHo=i(ee),fv=n(ee,"LI",{});var MBe=s(fv);Gue=n(MBe,"STRONG",{});var cEt=s(Gue);IHo=r(cEt,"longformer"),cEt.forEach(t),NHo=r(MBe," \u2014 "),Az=n(MBe,"A",{href:!0});var fEt=s(Az);qHo=r(fEt,"LongformerForMultipleChoice"),fEt.forEach(t),jHo=r(MBe," (Longformer model)"),MBe.forEach(t),DHo=i(ee),mv=n(ee,"LI",{});var EBe=s(mv);Oue=n(EBe,"STRONG",{});var mEt=s(Oue);GHo=r(mEt,"megatron-bert"),mEt.forEach(t),OHo=r(EBe," \u2014 "),Lz=n(EBe,"A",{href:!0});var gEt=s(Lz);VHo=r(gEt,"MegatronBertForMultipleChoice"),gEt.forEach(t),XHo=r(EBe," (Megatron-BERT model)"),EBe.forEach(t),zHo=i(ee),gv=n(ee,"LI",{});var CBe=s(gv);Vue=n(CBe,"STRONG",{});var hEt=s(Vue);QHo=r(hEt,"mobilebert"),hEt.forEach(t),WHo=r(CBe," \u2014 "),yz=n(CBe,"A",{href:!0});var pEt=s(yz);HHo=r(pEt,"MobileBertForMultipleChoice"),pEt.forEach(t),UHo=r(CBe," (MobileBERT model)"),CBe.forEach(t),JHo=i(ee),hv=n(ee,"LI",{});var wBe=s(hv);Xue=n(wBe,"STRONG",{});var _Et=s(Xue);YHo=r(_Et,"mpnet"),_Et.forEach(t),KHo=r(wBe," \u2014 "),xz=n(wBe,"A",{href:!0});var uEt=s(xz);ZHo=r(uEt,"MPNetForMultipleChoice"),uEt.forEach(t),eUo=r(wBe," (MPNet model)"),wBe.forEach(t),oUo=i(ee),pv=n(ee,"LI",{});var ABe=s(pv);zue=n(ABe,"STRONG",{});var bEt=s(zue);rUo=r(bEt,"nezha"),bEt.forEach(t),tUo=r(ABe," \u2014 "),$z=n(ABe,"A",{href:!0});var vEt=s($z);aUo=r(vEt,"NezhaForMultipleChoice"),vEt.forEach(t),nUo=r(ABe," (Nezha model)"),ABe.forEach(t),sUo=i(ee),_v=n(ee,"LI",{});var LBe=s(_v);Que=n(LBe,"STRONG",{});var FEt=s(Que);lUo=r(FEt,"nystromformer"),FEt.forEach(t),iUo=r(LBe," \u2014 "),kz=n(LBe,"A",{href:!0});var TEt=s(kz);dUo=r(TEt,"NystromformerForMultipleChoice"),TEt.forEach(t),cUo=r(LBe," (Nystr\xF6mformer model)"),LBe.forEach(t),fUo=i(ee),uv=n(ee,"LI",{});var yBe=s(uv);Wue=n(yBe,"STRONG",{});var MEt=s(Wue);mUo=r(MEt,"qdqbert"),MEt.forEach(t),gUo=r(yBe," \u2014 "),Sz=n(yBe,"A",{href:!0});var EEt=s(Sz);hUo=r(EEt,"QDQBertForMultipleChoice"),EEt.forEach(t),pUo=r(yBe," (QDQBert model)"),yBe.forEach(t),_Uo=i(ee),bv=n(ee,"LI",{});var xBe=s(bv);Hue=n(xBe,"STRONG",{});var CEt=s(Hue);uUo=r(CEt,"rembert"),CEt.forEach(t),bUo=r(xBe," \u2014 "),Rz=n(xBe,"A",{href:!0});var wEt=s(Rz);vUo=r(wEt,"RemBertForMultipleChoice"),wEt.forEach(t),FUo=r(xBe," (RemBERT model)"),xBe.forEach(t),TUo=i(ee),vv=n(ee,"LI",{});var $Be=s(vv);Uue=n($Be,"STRONG",{});var AEt=s(Uue);MUo=r(AEt,"roberta"),AEt.forEach(t),EUo=r($Be," \u2014 "),Pz=n($Be,"A",{href:!0});var LEt=s(Pz);CUo=r(LEt,"RobertaForMultipleChoice"),LEt.forEach(t),wUo=r($Be," (RoBERTa model)"),$Be.forEach(t),AUo=i(ee),Fv=n(ee,"LI",{});var kBe=s(Fv);Jue=n(kBe,"STRONG",{});var yEt=s(Jue);LUo=r(yEt,"roformer"),yEt.forEach(t),yUo=r(kBe," \u2014 "),Bz=n(kBe,"A",{href:!0});var xEt=s(Bz);xUo=r(xEt,"RoFormerForMultipleChoice"),xEt.forEach(t),$Uo=r(kBe," (RoFormer model)"),kBe.forEach(t),kUo=i(ee),Tv=n(ee,"LI",{});var SBe=s(Tv);Yue=n(SBe,"STRONG",{});var $Et=s(Yue);SUo=r($Et,"squeezebert"),$Et.forEach(t),RUo=r(SBe," \u2014 "),Iz=n(SBe,"A",{href:!0});var kEt=s(Iz);PUo=r(kEt,"SqueezeBertForMultipleChoice"),kEt.forEach(t),BUo=r(SBe," (SqueezeBERT model)"),SBe.forEach(t),IUo=i(ee),Mv=n(ee,"LI",{});var RBe=s(Mv);Kue=n(RBe,"STRONG",{});var SEt=s(Kue);NUo=r(SEt,"xlm"),SEt.forEach(t),qUo=r(RBe," \u2014 "),Nz=n(RBe,"A",{href:!0});var REt=s(Nz);jUo=r(REt,"XLMForMultipleChoice"),REt.forEach(t),DUo=r(RBe," (XLM model)"),RBe.forEach(t),GUo=i(ee),Ev=n(ee,"LI",{});var PBe=s(Ev);Zue=n(PBe,"STRONG",{});var PEt=s(Zue);OUo=r(PEt,"xlm-roberta"),PEt.forEach(t),VUo=r(PBe," \u2014 "),qz=n(PBe,"A",{href:!0});var BEt=s(qz);XUo=r(BEt,"XLMRobertaForMultipleChoice"),BEt.forEach(t),zUo=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),QUo=i(ee),Cv=n(ee,"LI",{});var BBe=s(Cv);e1e=n(BBe,"STRONG",{});var IEt=s(e1e);WUo=r(IEt,"xlm-roberta-xl"),IEt.forEach(t),HUo=r(BBe," \u2014 "),jz=n(BBe,"A",{href:!0});var NEt=s(jz);UUo=r(NEt,"XLMRobertaXLForMultipleChoice"),NEt.forEach(t),JUo=r(BBe," (XLM-RoBERTa-XL model)"),BBe.forEach(t),YUo=i(ee),wv=n(ee,"LI",{});var IBe=s(wv);o1e=n(IBe,"STRONG",{});var qEt=s(o1e);KUo=r(qEt,"xlnet"),qEt.forEach(t),ZUo=r(IBe," \u2014 "),Dz=n(IBe,"A",{href:!0});var jEt=s(Dz);eJo=r(jEt,"XLNetForMultipleChoice"),jEt.forEach(t),oJo=r(IBe," (XLNet model)"),IBe.forEach(t),rJo=i(ee),Av=n(ee,"LI",{});var NBe=s(Av);r1e=n(NBe,"STRONG",{});var DEt=s(r1e);tJo=r(DEt,"yoso"),DEt.forEach(t),aJo=r(NBe," \u2014 "),Gz=n(NBe,"A",{href:!0});var GEt=s(Gz);nJo=r(GEt,"YosoForMultipleChoice"),GEt.forEach(t),sJo=r(NBe," (YOSO model)"),NBe.forEach(t),ee.forEach(t),lJo=i(ga),Lv=n(ga,"P",{});var qBe=s(Lv);iJo=r(qBe,"The model is set in evaluation mode by default using "),t1e=n(qBe,"CODE",{});var OEt=s(t1e);dJo=r(OEt,"model.eval()"),OEt.forEach(t),cJo=r(qBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=n(qBe,"CODE",{});var VEt=s(a1e);fJo=r(VEt,"model.train()"),VEt.forEach(t),qBe.forEach(t),mJo=i(ga),T(yv.$$.fragment,ga),ga.forEach(t),cl.forEach(t),lze=i(f),cd=n(f,"H2",{class:!0});var gWe=s(cd);xv=n(gWe,"A",{id:!0,class:!0,href:!0});var XEt=s(xv);n1e=n(XEt,"SPAN",{});var zEt=s(n1e);T(Ty.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),gJo=i(gWe),s1e=n(gWe,"SPAN",{});var QEt=s(s1e);hJo=r(QEt,"AutoModelForNextSentencePrediction"),QEt.forEach(t),gWe.forEach(t),ize=i(f),No=n(f,"DIV",{class:!0});var fl=s(No);T(My.$$.fragment,fl),pJo=i(fl),fd=n(fl,"P",{});var gte=s(fd);_Jo=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Oz=n(gte,"A",{href:!0});var WEt=s(Oz);uJo=r(WEt,"from_pretrained()"),WEt.forEach(t),bJo=r(gte," class method or the "),Vz=n(gte,"A",{href:!0});var HEt=s(Vz);vJo=r(HEt,"from_config()"),HEt.forEach(t),FJo=r(gte,` class
method.`),gte.forEach(t),TJo=i(fl),Ey=n(fl,"P",{});var hWe=s(Ey);MJo=r(hWe,"This class cannot be instantiated directly using "),l1e=n(hWe,"CODE",{});var UEt=s(l1e);EJo=r(UEt,"__init__()"),UEt.forEach(t),CJo=r(hWe," (throws an error)."),hWe.forEach(t),wJo=i(fl),pt=n(fl,"DIV",{class:!0});var kw=s(pt);T(Cy.$$.fragment,kw),AJo=i(kw),i1e=n(kw,"P",{});var JEt=s(i1e);LJo=r(JEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JEt.forEach(t),yJo=i(kw),md=n(kw,"P",{});var hte=s(md);xJo=r(hte,`Note:
Loading a model from its configuration file does `),d1e=n(hte,"STRONG",{});var YEt=s(d1e);$Jo=r(YEt,"not"),YEt.forEach(t),kJo=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(hte,"A",{href:!0});var KEt=s(Xz);SJo=r(KEt,"from_pretrained()"),KEt.forEach(t),RJo=r(hte," to load the model weights."),hte.forEach(t),PJo=i(kw),T($v.$$.fragment,kw),kw.forEach(t),BJo=i(fl),ao=n(fl,"DIV",{class:!0});var ha=s(ao);T(wy.$$.fragment,ha),IJo=i(ha),c1e=n(ha,"P",{});var ZEt=s(c1e);NJo=r(ZEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZEt.forEach(t),qJo=i(ha),Va=n(ha,"P",{});var Sw=s(Va);jJo=r(Sw,"The model class to instantiate is selected based on the "),f1e=n(Sw,"CODE",{});var eCt=s(f1e);DJo=r(eCt,"model_type"),eCt.forEach(t),GJo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),m1e=n(Sw,"CODE",{});var oCt=s(m1e);OJo=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),VJo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(Sw,"CODE",{});var rCt=s(g1e);XJo=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),zJo=r(Sw,":"),Sw.forEach(t),QJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);kv=n(pa,"LI",{});var jBe=s(kv);h1e=n(jBe,"STRONG",{});var tCt=s(h1e);WJo=r(tCt,"bert"),tCt.forEach(t),HJo=r(jBe," \u2014 "),zz=n(jBe,"A",{href:!0});var aCt=s(zz);UJo=r(aCt,"BertForNextSentencePrediction"),aCt.forEach(t),JJo=r(jBe," (BERT model)"),jBe.forEach(t),YJo=i(pa),Sv=n(pa,"LI",{});var DBe=s(Sv);p1e=n(DBe,"STRONG",{});var nCt=s(p1e);KJo=r(nCt,"fnet"),nCt.forEach(t),ZJo=r(DBe," \u2014 "),Qz=n(DBe,"A",{href:!0});var sCt=s(Qz);eYo=r(sCt,"FNetForNextSentencePrediction"),sCt.forEach(t),oYo=r(DBe," (FNet model)"),DBe.forEach(t),rYo=i(pa),Rv=n(pa,"LI",{});var GBe=s(Rv);_1e=n(GBe,"STRONG",{});var lCt=s(_1e);tYo=r(lCt,"megatron-bert"),lCt.forEach(t),aYo=r(GBe," \u2014 "),Wz=n(GBe,"A",{href:!0});var iCt=s(Wz);nYo=r(iCt,"MegatronBertForNextSentencePrediction"),iCt.forEach(t),sYo=r(GBe," (Megatron-BERT model)"),GBe.forEach(t),lYo=i(pa),Pv=n(pa,"LI",{});var OBe=s(Pv);u1e=n(OBe,"STRONG",{});var dCt=s(u1e);iYo=r(dCt,"mobilebert"),dCt.forEach(t),dYo=r(OBe," \u2014 "),Hz=n(OBe,"A",{href:!0});var cCt=s(Hz);cYo=r(cCt,"MobileBertForNextSentencePrediction"),cCt.forEach(t),fYo=r(OBe," (MobileBERT model)"),OBe.forEach(t),mYo=i(pa),Bv=n(pa,"LI",{});var VBe=s(Bv);b1e=n(VBe,"STRONG",{});var fCt=s(b1e);gYo=r(fCt,"nezha"),fCt.forEach(t),hYo=r(VBe," \u2014 "),Uz=n(VBe,"A",{href:!0});var mCt=s(Uz);pYo=r(mCt,"NezhaForNextSentencePrediction"),mCt.forEach(t),_Yo=r(VBe," (Nezha model)"),VBe.forEach(t),uYo=i(pa),Iv=n(pa,"LI",{});var XBe=s(Iv);v1e=n(XBe,"STRONG",{});var gCt=s(v1e);bYo=r(gCt,"qdqbert"),gCt.forEach(t),vYo=r(XBe," \u2014 "),Jz=n(XBe,"A",{href:!0});var hCt=s(Jz);FYo=r(hCt,"QDQBertForNextSentencePrediction"),hCt.forEach(t),TYo=r(XBe," (QDQBert model)"),XBe.forEach(t),pa.forEach(t),MYo=i(ha),Nv=n(ha,"P",{});var zBe=s(Nv);EYo=r(zBe,"The model is set in evaluation mode by default using "),F1e=n(zBe,"CODE",{});var pCt=s(F1e);CYo=r(pCt,"model.eval()"),pCt.forEach(t),wYo=r(zBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(zBe,"CODE",{});var _Ct=s(T1e);AYo=r(_Ct,"model.train()"),_Ct.forEach(t),zBe.forEach(t),LYo=i(ha),T(qv.$$.fragment,ha),ha.forEach(t),fl.forEach(t),dze=i(f),gd=n(f,"H2",{class:!0});var pWe=s(gd);jv=n(pWe,"A",{id:!0,class:!0,href:!0});var uCt=s(jv);M1e=n(uCt,"SPAN",{});var bCt=s(M1e);T(Ay.$$.fragment,bCt),bCt.forEach(t),uCt.forEach(t),yYo=i(pWe),E1e=n(pWe,"SPAN",{});var vCt=s(E1e);xYo=r(vCt,"AutoModelForTokenClassification"),vCt.forEach(t),pWe.forEach(t),cze=i(f),jo=n(f,"DIV",{class:!0});var ml=s(jo);T(Ly.$$.fragment,ml),$Yo=i(ml),hd=n(ml,"P",{});var pte=s(hd);kYo=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yz=n(pte,"A",{href:!0});var FCt=s(Yz);SYo=r(FCt,"from_pretrained()"),FCt.forEach(t),RYo=r(pte," class method or the "),Kz=n(pte,"A",{href:!0});var TCt=s(Kz);PYo=r(TCt,"from_config()"),TCt.forEach(t),BYo=r(pte,` class
method.`),pte.forEach(t),IYo=i(ml),yy=n(ml,"P",{});var _We=s(yy);NYo=r(_We,"This class cannot be instantiated directly using "),C1e=n(_We,"CODE",{});var MCt=s(C1e);qYo=r(MCt,"__init__()"),MCt.forEach(t),jYo=r(_We," (throws an error)."),_We.forEach(t),DYo=i(ml),_t=n(ml,"DIV",{class:!0});var Rw=s(_t);T(xy.$$.fragment,Rw),GYo=i(Rw),w1e=n(Rw,"P",{});var ECt=s(w1e);OYo=r(ECt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ECt.forEach(t),VYo=i(Rw),pd=n(Rw,"P",{});var _te=s(pd);XYo=r(_te,`Note:
Loading a model from its configuration file does `),A1e=n(_te,"STRONG",{});var CCt=s(A1e);zYo=r(CCt,"not"),CCt.forEach(t),QYo=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(_te,"A",{href:!0});var wCt=s(Zz);WYo=r(wCt,"from_pretrained()"),wCt.forEach(t),HYo=r(_te," to load the model weights."),_te.forEach(t),UYo=i(Rw),T(Dv.$$.fragment,Rw),Rw.forEach(t),JYo=i(ml),no=n(ml,"DIV",{class:!0});var _a=s(no);T($y.$$.fragment,_a),YYo=i(_a),L1e=n(_a,"P",{});var ACt=s(L1e);KYo=r(ACt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ACt.forEach(t),ZYo=i(_a),Xa=n(_a,"P",{});var Pw=s(Xa);eKo=r(Pw,"The model class to instantiate is selected based on the "),y1e=n(Pw,"CODE",{});var LCt=s(y1e);oKo=r(LCt,"model_type"),LCt.forEach(t),rKo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),x1e=n(Pw,"CODE",{});var yCt=s(x1e);tKo=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),aKo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(Pw,"CODE",{});var xCt=s($1e);nKo=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),sKo=r(Pw,":"),Pw.forEach(t),lKo=i(_a),U=n(_a,"UL",{});var Y=s(U);Gv=n(Y,"LI",{});var QBe=s(Gv);k1e=n(QBe,"STRONG",{});var $Ct=s(k1e);iKo=r($Ct,"albert"),$Ct.forEach(t),dKo=r(QBe," \u2014 "),eQ=n(QBe,"A",{href:!0});var kCt=s(eQ);cKo=r(kCt,"AlbertForTokenClassification"),kCt.forEach(t),fKo=r(QBe," (ALBERT model)"),QBe.forEach(t),mKo=i(Y),Ov=n(Y,"LI",{});var WBe=s(Ov);S1e=n(WBe,"STRONG",{});var SCt=s(S1e);gKo=r(SCt,"bert"),SCt.forEach(t),hKo=r(WBe," \u2014 "),oQ=n(WBe,"A",{href:!0});var RCt=s(oQ);pKo=r(RCt,"BertForTokenClassification"),RCt.forEach(t),_Ko=r(WBe," (BERT model)"),WBe.forEach(t),uKo=i(Y),Vv=n(Y,"LI",{});var HBe=s(Vv);R1e=n(HBe,"STRONG",{});var PCt=s(R1e);bKo=r(PCt,"big_bird"),PCt.forEach(t),vKo=r(HBe," \u2014 "),rQ=n(HBe,"A",{href:!0});var BCt=s(rQ);FKo=r(BCt,"BigBirdForTokenClassification"),BCt.forEach(t),TKo=r(HBe," (BigBird model)"),HBe.forEach(t),MKo=i(Y),Xv=n(Y,"LI",{});var UBe=s(Xv);P1e=n(UBe,"STRONG",{});var ICt=s(P1e);EKo=r(ICt,"bloom"),ICt.forEach(t),CKo=r(UBe," \u2014 "),tQ=n(UBe,"A",{href:!0});var NCt=s(tQ);wKo=r(NCt,"BloomForTokenClassification"),NCt.forEach(t),AKo=r(UBe," (BLOOM model)"),UBe.forEach(t),LKo=i(Y),zv=n(Y,"LI",{});var JBe=s(zv);B1e=n(JBe,"STRONG",{});var qCt=s(B1e);yKo=r(qCt,"camembert"),qCt.forEach(t),xKo=r(JBe," \u2014 "),aQ=n(JBe,"A",{href:!0});var jCt=s(aQ);$Ko=r(jCt,"CamembertForTokenClassification"),jCt.forEach(t),kKo=r(JBe," (CamemBERT model)"),JBe.forEach(t),SKo=i(Y),Qv=n(Y,"LI",{});var YBe=s(Qv);I1e=n(YBe,"STRONG",{});var DCt=s(I1e);RKo=r(DCt,"canine"),DCt.forEach(t),PKo=r(YBe," \u2014 "),nQ=n(YBe,"A",{href:!0});var GCt=s(nQ);BKo=r(GCt,"CanineForTokenClassification"),GCt.forEach(t),IKo=r(YBe," (CANINE model)"),YBe.forEach(t),NKo=i(Y),Wv=n(Y,"LI",{});var KBe=s(Wv);N1e=n(KBe,"STRONG",{});var OCt=s(N1e);qKo=r(OCt,"convbert"),OCt.forEach(t),jKo=r(KBe," \u2014 "),sQ=n(KBe,"A",{href:!0});var VCt=s(sQ);DKo=r(VCt,"ConvBertForTokenClassification"),VCt.forEach(t),GKo=r(KBe," (ConvBERT model)"),KBe.forEach(t),OKo=i(Y),Hv=n(Y,"LI",{});var ZBe=s(Hv);q1e=n(ZBe,"STRONG",{});var XCt=s(q1e);VKo=r(XCt,"data2vec-text"),XCt.forEach(t),XKo=r(ZBe," \u2014 "),lQ=n(ZBe,"A",{href:!0});var zCt=s(lQ);zKo=r(zCt,"Data2VecTextForTokenClassification"),zCt.forEach(t),QKo=r(ZBe," (Data2VecText model)"),ZBe.forEach(t),WKo=i(Y),Uv=n(Y,"LI",{});var eIe=s(Uv);j1e=n(eIe,"STRONG",{});var QCt=s(j1e);HKo=r(QCt,"deberta"),QCt.forEach(t),UKo=r(eIe," \u2014 "),iQ=n(eIe,"A",{href:!0});var WCt=s(iQ);JKo=r(WCt,"DebertaForTokenClassification"),WCt.forEach(t),YKo=r(eIe," (DeBERTa model)"),eIe.forEach(t),KKo=i(Y),Jv=n(Y,"LI",{});var oIe=s(Jv);D1e=n(oIe,"STRONG",{});var HCt=s(D1e);ZKo=r(HCt,"deberta-v2"),HCt.forEach(t),eZo=r(oIe," \u2014 "),dQ=n(oIe,"A",{href:!0});var UCt=s(dQ);oZo=r(UCt,"DebertaV2ForTokenClassification"),UCt.forEach(t),rZo=r(oIe," (DeBERTa-v2 model)"),oIe.forEach(t),tZo=i(Y),Yv=n(Y,"LI",{});var rIe=s(Yv);G1e=n(rIe,"STRONG",{});var JCt=s(G1e);aZo=r(JCt,"distilbert"),JCt.forEach(t),nZo=r(rIe," \u2014 "),cQ=n(rIe,"A",{href:!0});var YCt=s(cQ);sZo=r(YCt,"DistilBertForTokenClassification"),YCt.forEach(t),lZo=r(rIe," (DistilBERT model)"),rIe.forEach(t),iZo=i(Y),Kv=n(Y,"LI",{});var tIe=s(Kv);O1e=n(tIe,"STRONG",{});var KCt=s(O1e);dZo=r(KCt,"electra"),KCt.forEach(t),cZo=r(tIe," \u2014 "),fQ=n(tIe,"A",{href:!0});var ZCt=s(fQ);fZo=r(ZCt,"ElectraForTokenClassification"),ZCt.forEach(t),mZo=r(tIe," (ELECTRA model)"),tIe.forEach(t),gZo=i(Y),Zv=n(Y,"LI",{});var aIe=s(Zv);V1e=n(aIe,"STRONG",{});var e5t=s(V1e);hZo=r(e5t,"flaubert"),e5t.forEach(t),pZo=r(aIe," \u2014 "),mQ=n(aIe,"A",{href:!0});var o5t=s(mQ);_Zo=r(o5t,"FlaubertForTokenClassification"),o5t.forEach(t),uZo=r(aIe," (FlauBERT model)"),aIe.forEach(t),bZo=i(Y),eF=n(Y,"LI",{});var nIe=s(eF);X1e=n(nIe,"STRONG",{});var r5t=s(X1e);vZo=r(r5t,"fnet"),r5t.forEach(t),FZo=r(nIe," \u2014 "),gQ=n(nIe,"A",{href:!0});var t5t=s(gQ);TZo=r(t5t,"FNetForTokenClassification"),t5t.forEach(t),MZo=r(nIe," (FNet model)"),nIe.forEach(t),EZo=i(Y),oF=n(Y,"LI",{});var sIe=s(oF);z1e=n(sIe,"STRONG",{});var a5t=s(z1e);CZo=r(a5t,"funnel"),a5t.forEach(t),wZo=r(sIe," \u2014 "),hQ=n(sIe,"A",{href:!0});var n5t=s(hQ);AZo=r(n5t,"FunnelForTokenClassification"),n5t.forEach(t),LZo=r(sIe," (Funnel Transformer model)"),sIe.forEach(t),yZo=i(Y),rF=n(Y,"LI",{});var lIe=s(rF);Q1e=n(lIe,"STRONG",{});var s5t=s(Q1e);xZo=r(s5t,"gpt2"),s5t.forEach(t),$Zo=r(lIe," \u2014 "),pQ=n(lIe,"A",{href:!0});var l5t=s(pQ);kZo=r(l5t,"GPT2ForTokenClassification"),l5t.forEach(t),SZo=r(lIe," (OpenAI GPT-2 model)"),lIe.forEach(t),RZo=i(Y),tF=n(Y,"LI",{});var iIe=s(tF);W1e=n(iIe,"STRONG",{});var i5t=s(W1e);PZo=r(i5t,"ibert"),i5t.forEach(t),BZo=r(iIe," \u2014 "),_Q=n(iIe,"A",{href:!0});var d5t=s(_Q);IZo=r(d5t,"IBertForTokenClassification"),d5t.forEach(t),NZo=r(iIe," (I-BERT model)"),iIe.forEach(t),qZo=i(Y),aF=n(Y,"LI",{});var dIe=s(aF);H1e=n(dIe,"STRONG",{});var c5t=s(H1e);jZo=r(c5t,"layoutlm"),c5t.forEach(t),DZo=r(dIe," \u2014 "),uQ=n(dIe,"A",{href:!0});var f5t=s(uQ);GZo=r(f5t,"LayoutLMForTokenClassification"),f5t.forEach(t),OZo=r(dIe," (LayoutLM model)"),dIe.forEach(t),VZo=i(Y),nF=n(Y,"LI",{});var cIe=s(nF);U1e=n(cIe,"STRONG",{});var m5t=s(U1e);XZo=r(m5t,"layoutlmv2"),m5t.forEach(t),zZo=r(cIe," \u2014 "),bQ=n(cIe,"A",{href:!0});var g5t=s(bQ);QZo=r(g5t,"LayoutLMv2ForTokenClassification"),g5t.forEach(t),WZo=r(cIe," (LayoutLMv2 model)"),cIe.forEach(t),HZo=i(Y),sF=n(Y,"LI",{});var fIe=s(sF);J1e=n(fIe,"STRONG",{});var h5t=s(J1e);UZo=r(h5t,"layoutlmv3"),h5t.forEach(t),JZo=r(fIe," \u2014 "),vQ=n(fIe,"A",{href:!0});var p5t=s(vQ);YZo=r(p5t,"LayoutLMv3ForTokenClassification"),p5t.forEach(t),KZo=r(fIe," (LayoutLMv3 model)"),fIe.forEach(t),ZZo=i(Y),lF=n(Y,"LI",{});var mIe=s(lF);Y1e=n(mIe,"STRONG",{});var _5t=s(Y1e);eer=r(_5t,"longformer"),_5t.forEach(t),oer=r(mIe," \u2014 "),FQ=n(mIe,"A",{href:!0});var u5t=s(FQ);rer=r(u5t,"LongformerForTokenClassification"),u5t.forEach(t),ter=r(mIe," (Longformer model)"),mIe.forEach(t),aer=i(Y),iF=n(Y,"LI",{});var gIe=s(iF);K1e=n(gIe,"STRONG",{});var b5t=s(K1e);ner=r(b5t,"megatron-bert"),b5t.forEach(t),ser=r(gIe," \u2014 "),TQ=n(gIe,"A",{href:!0});var v5t=s(TQ);ler=r(v5t,"MegatronBertForTokenClassification"),v5t.forEach(t),ier=r(gIe," (Megatron-BERT model)"),gIe.forEach(t),der=i(Y),dF=n(Y,"LI",{});var hIe=s(dF);Z1e=n(hIe,"STRONG",{});var F5t=s(Z1e);cer=r(F5t,"mobilebert"),F5t.forEach(t),fer=r(hIe," \u2014 "),MQ=n(hIe,"A",{href:!0});var T5t=s(MQ);mer=r(T5t,"MobileBertForTokenClassification"),T5t.forEach(t),ger=r(hIe," (MobileBERT model)"),hIe.forEach(t),her=i(Y),cF=n(Y,"LI",{});var pIe=s(cF);e4e=n(pIe,"STRONG",{});var M5t=s(e4e);per=r(M5t,"mpnet"),M5t.forEach(t),_er=r(pIe," \u2014 "),EQ=n(pIe,"A",{href:!0});var E5t=s(EQ);uer=r(E5t,"MPNetForTokenClassification"),E5t.forEach(t),ber=r(pIe," (MPNet model)"),pIe.forEach(t),ver=i(Y),fF=n(Y,"LI",{});var _Ie=s(fF);o4e=n(_Ie,"STRONG",{});var C5t=s(o4e);Fer=r(C5t,"nezha"),C5t.forEach(t),Ter=r(_Ie," \u2014 "),CQ=n(_Ie,"A",{href:!0});var w5t=s(CQ);Mer=r(w5t,"NezhaForTokenClassification"),w5t.forEach(t),Eer=r(_Ie," (Nezha model)"),_Ie.forEach(t),Cer=i(Y),mF=n(Y,"LI",{});var uIe=s(mF);r4e=n(uIe,"STRONG",{});var A5t=s(r4e);wer=r(A5t,"nystromformer"),A5t.forEach(t),Aer=r(uIe," \u2014 "),wQ=n(uIe,"A",{href:!0});var L5t=s(wQ);Ler=r(L5t,"NystromformerForTokenClassification"),L5t.forEach(t),yer=r(uIe," (Nystr\xF6mformer model)"),uIe.forEach(t),xer=i(Y),gF=n(Y,"LI",{});var bIe=s(gF);t4e=n(bIe,"STRONG",{});var y5t=s(t4e);$er=r(y5t,"qdqbert"),y5t.forEach(t),ker=r(bIe," \u2014 "),AQ=n(bIe,"A",{href:!0});var x5t=s(AQ);Ser=r(x5t,"QDQBertForTokenClassification"),x5t.forEach(t),Rer=r(bIe," (QDQBert model)"),bIe.forEach(t),Per=i(Y),hF=n(Y,"LI",{});var vIe=s(hF);a4e=n(vIe,"STRONG",{});var $5t=s(a4e);Ber=r($5t,"rembert"),$5t.forEach(t),Ier=r(vIe," \u2014 "),LQ=n(vIe,"A",{href:!0});var k5t=s(LQ);Ner=r(k5t,"RemBertForTokenClassification"),k5t.forEach(t),qer=r(vIe," (RemBERT model)"),vIe.forEach(t),jer=i(Y),pF=n(Y,"LI",{});var FIe=s(pF);n4e=n(FIe,"STRONG",{});var S5t=s(n4e);Der=r(S5t,"roberta"),S5t.forEach(t),Ger=r(FIe," \u2014 "),yQ=n(FIe,"A",{href:!0});var R5t=s(yQ);Oer=r(R5t,"RobertaForTokenClassification"),R5t.forEach(t),Ver=r(FIe," (RoBERTa model)"),FIe.forEach(t),Xer=i(Y),_F=n(Y,"LI",{});var TIe=s(_F);s4e=n(TIe,"STRONG",{});var P5t=s(s4e);zer=r(P5t,"roformer"),P5t.forEach(t),Qer=r(TIe," \u2014 "),xQ=n(TIe,"A",{href:!0});var B5t=s(xQ);Wer=r(B5t,"RoFormerForTokenClassification"),B5t.forEach(t),Her=r(TIe," (RoFormer model)"),TIe.forEach(t),Uer=i(Y),uF=n(Y,"LI",{});var MIe=s(uF);l4e=n(MIe,"STRONG",{});var I5t=s(l4e);Jer=r(I5t,"squeezebert"),I5t.forEach(t),Yer=r(MIe," \u2014 "),$Q=n(MIe,"A",{href:!0});var N5t=s($Q);Ker=r(N5t,"SqueezeBertForTokenClassification"),N5t.forEach(t),Zer=r(MIe," (SqueezeBERT model)"),MIe.forEach(t),eor=i(Y),bF=n(Y,"LI",{});var EIe=s(bF);i4e=n(EIe,"STRONG",{});var q5t=s(i4e);oor=r(q5t,"xlm"),q5t.forEach(t),ror=r(EIe," \u2014 "),kQ=n(EIe,"A",{href:!0});var j5t=s(kQ);tor=r(j5t,"XLMForTokenClassification"),j5t.forEach(t),aor=r(EIe," (XLM model)"),EIe.forEach(t),nor=i(Y),vF=n(Y,"LI",{});var CIe=s(vF);d4e=n(CIe,"STRONG",{});var D5t=s(d4e);sor=r(D5t,"xlm-roberta"),D5t.forEach(t),lor=r(CIe," \u2014 "),SQ=n(CIe,"A",{href:!0});var G5t=s(SQ);ior=r(G5t,"XLMRobertaForTokenClassification"),G5t.forEach(t),dor=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),cor=i(Y),FF=n(Y,"LI",{});var wIe=s(FF);c4e=n(wIe,"STRONG",{});var O5t=s(c4e);mor=r(O5t,"xlm-roberta-xl"),O5t.forEach(t),gor=r(wIe," \u2014 "),RQ=n(wIe,"A",{href:!0});var V5t=s(RQ);hor=r(V5t,"XLMRobertaXLForTokenClassification"),V5t.forEach(t),por=r(wIe," (XLM-RoBERTa-XL model)"),wIe.forEach(t),_or=i(Y),TF=n(Y,"LI",{});var AIe=s(TF);f4e=n(AIe,"STRONG",{});var X5t=s(f4e);uor=r(X5t,"xlnet"),X5t.forEach(t),bor=r(AIe," \u2014 "),PQ=n(AIe,"A",{href:!0});var z5t=s(PQ);vor=r(z5t,"XLNetForTokenClassification"),z5t.forEach(t),For=r(AIe," (XLNet model)"),AIe.forEach(t),Tor=i(Y),MF=n(Y,"LI",{});var LIe=s(MF);m4e=n(LIe,"STRONG",{});var Q5t=s(m4e);Mor=r(Q5t,"yoso"),Q5t.forEach(t),Eor=r(LIe," \u2014 "),BQ=n(LIe,"A",{href:!0});var W5t=s(BQ);Cor=r(W5t,"YosoForTokenClassification"),W5t.forEach(t),wor=r(LIe," (YOSO model)"),LIe.forEach(t),Y.forEach(t),Aor=i(_a),EF=n(_a,"P",{});var yIe=s(EF);Lor=r(yIe,"The model is set in evaluation mode by default using "),g4e=n(yIe,"CODE",{});var H5t=s(g4e);yor=r(H5t,"model.eval()"),H5t.forEach(t),xor=r(yIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h4e=n(yIe,"CODE",{});var U5t=s(h4e);$or=r(U5t,"model.train()"),U5t.forEach(t),yIe.forEach(t),kor=i(_a),T(CF.$$.fragment,_a),_a.forEach(t),ml.forEach(t),fze=i(f),_d=n(f,"H2",{class:!0});var uWe=s(_d);wF=n(uWe,"A",{id:!0,class:!0,href:!0});var J5t=s(wF);p4e=n(J5t,"SPAN",{});var Y5t=s(p4e);T(ky.$$.fragment,Y5t),Y5t.forEach(t),J5t.forEach(t),Sor=i(uWe),_4e=n(uWe,"SPAN",{});var K5t=s(_4e);Ror=r(K5t,"AutoModelForQuestionAnswering"),K5t.forEach(t),uWe.forEach(t),mze=i(f),Do=n(f,"DIV",{class:!0});var gl=s(Do);T(Sy.$$.fragment,gl),Por=i(gl),ud=n(gl,"P",{});var ute=s(ud);Bor=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IQ=n(ute,"A",{href:!0});var Z5t=s(IQ);Ior=r(Z5t,"from_pretrained()"),Z5t.forEach(t),Nor=r(ute," class method or the "),NQ=n(ute,"A",{href:!0});var e3t=s(NQ);qor=r(e3t,"from_config()"),e3t.forEach(t),jor=r(ute,` class
method.`),ute.forEach(t),Dor=i(gl),Ry=n(gl,"P",{});var bWe=s(Ry);Gor=r(bWe,"This class cannot be instantiated directly using "),u4e=n(bWe,"CODE",{});var o3t=s(u4e);Oor=r(o3t,"__init__()"),o3t.forEach(t),Vor=r(bWe," (throws an error)."),bWe.forEach(t),Xor=i(gl),ut=n(gl,"DIV",{class:!0});var Bw=s(ut);T(Py.$$.fragment,Bw),zor=i(Bw),b4e=n(Bw,"P",{});var r3t=s(b4e);Qor=r(r3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r3t.forEach(t),Wor=i(Bw),bd=n(Bw,"P",{});var bte=s(bd);Hor=r(bte,`Note:
Loading a model from its configuration file does `),v4e=n(bte,"STRONG",{});var t3t=s(v4e);Uor=r(t3t,"not"),t3t.forEach(t),Jor=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(bte,"A",{href:!0});var a3t=s(qQ);Yor=r(a3t,"from_pretrained()"),a3t.forEach(t),Kor=r(bte," to load the model weights."),bte.forEach(t),Zor=i(Bw),T(AF.$$.fragment,Bw),Bw.forEach(t),err=i(gl),so=n(gl,"DIV",{class:!0});var ua=s(so);T(By.$$.fragment,ua),orr=i(ua),F4e=n(ua,"P",{});var n3t=s(F4e);rrr=r(n3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n3t.forEach(t),trr=i(ua),za=n(ua,"P",{});var Iw=s(za);arr=r(Iw,"The model class to instantiate is selected based on the "),T4e=n(Iw,"CODE",{});var s3t=s(T4e);nrr=r(s3t,"model_type"),s3t.forEach(t),srr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),M4e=n(Iw,"CODE",{});var l3t=s(M4e);lrr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),irr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(Iw,"CODE",{});var i3t=s(E4e);drr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),crr=r(Iw,":"),Iw.forEach(t),frr=i(ua),V=n(ua,"UL",{});var X=s(V);LF=n(X,"LI",{});var xIe=s(LF);C4e=n(xIe,"STRONG",{});var d3t=s(C4e);mrr=r(d3t,"albert"),d3t.forEach(t),grr=r(xIe," \u2014 "),jQ=n(xIe,"A",{href:!0});var c3t=s(jQ);hrr=r(c3t,"AlbertForQuestionAnswering"),c3t.forEach(t),prr=r(xIe," (ALBERT model)"),xIe.forEach(t),_rr=i(X),yF=n(X,"LI",{});var $Ie=s(yF);w4e=n($Ie,"STRONG",{});var f3t=s(w4e);urr=r(f3t,"bart"),f3t.forEach(t),brr=r($Ie," \u2014 "),DQ=n($Ie,"A",{href:!0});var m3t=s(DQ);vrr=r(m3t,"BartForQuestionAnswering"),m3t.forEach(t),Frr=r($Ie," (BART model)"),$Ie.forEach(t),Trr=i(X),xF=n(X,"LI",{});var kIe=s(xF);A4e=n(kIe,"STRONG",{});var g3t=s(A4e);Mrr=r(g3t,"bert"),g3t.forEach(t),Err=r(kIe," \u2014 "),GQ=n(kIe,"A",{href:!0});var h3t=s(GQ);Crr=r(h3t,"BertForQuestionAnswering"),h3t.forEach(t),wrr=r(kIe," (BERT model)"),kIe.forEach(t),Arr=i(X),$F=n(X,"LI",{});var SIe=s($F);L4e=n(SIe,"STRONG",{});var p3t=s(L4e);Lrr=r(p3t,"big_bird"),p3t.forEach(t),yrr=r(SIe," \u2014 "),OQ=n(SIe,"A",{href:!0});var _3t=s(OQ);xrr=r(_3t,"BigBirdForQuestionAnswering"),_3t.forEach(t),$rr=r(SIe," (BigBird model)"),SIe.forEach(t),krr=i(X),kF=n(X,"LI",{});var RIe=s(kF);y4e=n(RIe,"STRONG",{});var u3t=s(y4e);Srr=r(u3t,"bigbird_pegasus"),u3t.forEach(t),Rrr=r(RIe," \u2014 "),VQ=n(RIe,"A",{href:!0});var b3t=s(VQ);Prr=r(b3t,"BigBirdPegasusForQuestionAnswering"),b3t.forEach(t),Brr=r(RIe," (BigBird-Pegasus model)"),RIe.forEach(t),Irr=i(X),SF=n(X,"LI",{});var PIe=s(SF);x4e=n(PIe,"STRONG",{});var v3t=s(x4e);Nrr=r(v3t,"camembert"),v3t.forEach(t),qrr=r(PIe," \u2014 "),XQ=n(PIe,"A",{href:!0});var F3t=s(XQ);jrr=r(F3t,"CamembertForQuestionAnswering"),F3t.forEach(t),Drr=r(PIe," (CamemBERT model)"),PIe.forEach(t),Grr=i(X),RF=n(X,"LI",{});var BIe=s(RF);$4e=n(BIe,"STRONG",{});var T3t=s($4e);Orr=r(T3t,"canine"),T3t.forEach(t),Vrr=r(BIe," \u2014 "),zQ=n(BIe,"A",{href:!0});var M3t=s(zQ);Xrr=r(M3t,"CanineForQuestionAnswering"),M3t.forEach(t),zrr=r(BIe," (CANINE model)"),BIe.forEach(t),Qrr=i(X),PF=n(X,"LI",{});var IIe=s(PF);k4e=n(IIe,"STRONG",{});var E3t=s(k4e);Wrr=r(E3t,"convbert"),E3t.forEach(t),Hrr=r(IIe," \u2014 "),QQ=n(IIe,"A",{href:!0});var C3t=s(QQ);Urr=r(C3t,"ConvBertForQuestionAnswering"),C3t.forEach(t),Jrr=r(IIe," (ConvBERT model)"),IIe.forEach(t),Yrr=i(X),BF=n(X,"LI",{});var NIe=s(BF);S4e=n(NIe,"STRONG",{});var w3t=s(S4e);Krr=r(w3t,"data2vec-text"),w3t.forEach(t),Zrr=r(NIe," \u2014 "),WQ=n(NIe,"A",{href:!0});var A3t=s(WQ);etr=r(A3t,"Data2VecTextForQuestionAnswering"),A3t.forEach(t),otr=r(NIe," (Data2VecText model)"),NIe.forEach(t),rtr=i(X),IF=n(X,"LI",{});var qIe=s(IF);R4e=n(qIe,"STRONG",{});var L3t=s(R4e);ttr=r(L3t,"deberta"),L3t.forEach(t),atr=r(qIe," \u2014 "),HQ=n(qIe,"A",{href:!0});var y3t=s(HQ);ntr=r(y3t,"DebertaForQuestionAnswering"),y3t.forEach(t),str=r(qIe," (DeBERTa model)"),qIe.forEach(t),ltr=i(X),NF=n(X,"LI",{});var jIe=s(NF);P4e=n(jIe,"STRONG",{});var x3t=s(P4e);itr=r(x3t,"deberta-v2"),x3t.forEach(t),dtr=r(jIe," \u2014 "),UQ=n(jIe,"A",{href:!0});var $3t=s(UQ);ctr=r($3t,"DebertaV2ForQuestionAnswering"),$3t.forEach(t),ftr=r(jIe," (DeBERTa-v2 model)"),jIe.forEach(t),mtr=i(X),qF=n(X,"LI",{});var DIe=s(qF);B4e=n(DIe,"STRONG",{});var k3t=s(B4e);gtr=r(k3t,"distilbert"),k3t.forEach(t),htr=r(DIe," \u2014 "),JQ=n(DIe,"A",{href:!0});var S3t=s(JQ);ptr=r(S3t,"DistilBertForQuestionAnswering"),S3t.forEach(t),_tr=r(DIe," (DistilBERT model)"),DIe.forEach(t),utr=i(X),jF=n(X,"LI",{});var GIe=s(jF);I4e=n(GIe,"STRONG",{});var R3t=s(I4e);btr=r(R3t,"electra"),R3t.forEach(t),vtr=r(GIe," \u2014 "),YQ=n(GIe,"A",{href:!0});var P3t=s(YQ);Ftr=r(P3t,"ElectraForQuestionAnswering"),P3t.forEach(t),Ttr=r(GIe," (ELECTRA model)"),GIe.forEach(t),Mtr=i(X),DF=n(X,"LI",{});var OIe=s(DF);N4e=n(OIe,"STRONG",{});var B3t=s(N4e);Etr=r(B3t,"flaubert"),B3t.forEach(t),Ctr=r(OIe," \u2014 "),KQ=n(OIe,"A",{href:!0});var I3t=s(KQ);wtr=r(I3t,"FlaubertForQuestionAnsweringSimple"),I3t.forEach(t),Atr=r(OIe," (FlauBERT model)"),OIe.forEach(t),Ltr=i(X),GF=n(X,"LI",{});var VIe=s(GF);q4e=n(VIe,"STRONG",{});var N3t=s(q4e);ytr=r(N3t,"fnet"),N3t.forEach(t),xtr=r(VIe," \u2014 "),ZQ=n(VIe,"A",{href:!0});var q3t=s(ZQ);$tr=r(q3t,"FNetForQuestionAnswering"),q3t.forEach(t),ktr=r(VIe," (FNet model)"),VIe.forEach(t),Str=i(X),OF=n(X,"LI",{});var XIe=s(OF);j4e=n(XIe,"STRONG",{});var j3t=s(j4e);Rtr=r(j3t,"funnel"),j3t.forEach(t),Ptr=r(XIe," \u2014 "),eW=n(XIe,"A",{href:!0});var D3t=s(eW);Btr=r(D3t,"FunnelForQuestionAnswering"),D3t.forEach(t),Itr=r(XIe," (Funnel Transformer model)"),XIe.forEach(t),Ntr=i(X),VF=n(X,"LI",{});var zIe=s(VF);D4e=n(zIe,"STRONG",{});var G3t=s(D4e);qtr=r(G3t,"gptj"),G3t.forEach(t),jtr=r(zIe," \u2014 "),oW=n(zIe,"A",{href:!0});var O3t=s(oW);Dtr=r(O3t,"GPTJForQuestionAnswering"),O3t.forEach(t),Gtr=r(zIe," (GPT-J model)"),zIe.forEach(t),Otr=i(X),XF=n(X,"LI",{});var QIe=s(XF);G4e=n(QIe,"STRONG",{});var V3t=s(G4e);Vtr=r(V3t,"ibert"),V3t.forEach(t),Xtr=r(QIe," \u2014 "),rW=n(QIe,"A",{href:!0});var X3t=s(rW);ztr=r(X3t,"IBertForQuestionAnswering"),X3t.forEach(t),Qtr=r(QIe," (I-BERT model)"),QIe.forEach(t),Wtr=i(X),zF=n(X,"LI",{});var WIe=s(zF);O4e=n(WIe,"STRONG",{});var z3t=s(O4e);Htr=r(z3t,"layoutlmv2"),z3t.forEach(t),Utr=r(WIe," \u2014 "),tW=n(WIe,"A",{href:!0});var Q3t=s(tW);Jtr=r(Q3t,"LayoutLMv2ForQuestionAnswering"),Q3t.forEach(t),Ytr=r(WIe," (LayoutLMv2 model)"),WIe.forEach(t),Ktr=i(X),QF=n(X,"LI",{});var HIe=s(QF);V4e=n(HIe,"STRONG",{});var W3t=s(V4e);Ztr=r(W3t,"layoutlmv3"),W3t.forEach(t),ear=r(HIe," \u2014 "),aW=n(HIe,"A",{href:!0});var H3t=s(aW);oar=r(H3t,"LayoutLMv3ForQuestionAnswering"),H3t.forEach(t),rar=r(HIe," (LayoutLMv3 model)"),HIe.forEach(t),tar=i(X),WF=n(X,"LI",{});var UIe=s(WF);X4e=n(UIe,"STRONG",{});var U3t=s(X4e);aar=r(U3t,"led"),U3t.forEach(t),nar=r(UIe," \u2014 "),nW=n(UIe,"A",{href:!0});var J3t=s(nW);sar=r(J3t,"LEDForQuestionAnswering"),J3t.forEach(t),lar=r(UIe," (LED model)"),UIe.forEach(t),iar=i(X),HF=n(X,"LI",{});var JIe=s(HF);z4e=n(JIe,"STRONG",{});var Y3t=s(z4e);dar=r(Y3t,"longformer"),Y3t.forEach(t),car=r(JIe," \u2014 "),sW=n(JIe,"A",{href:!0});var K3t=s(sW);far=r(K3t,"LongformerForQuestionAnswering"),K3t.forEach(t),mar=r(JIe," (Longformer model)"),JIe.forEach(t),gar=i(X),UF=n(X,"LI",{});var YIe=s(UF);Q4e=n(YIe,"STRONG",{});var Z3t=s(Q4e);har=r(Z3t,"lxmert"),Z3t.forEach(t),par=r(YIe," \u2014 "),lW=n(YIe,"A",{href:!0});var e0t=s(lW);_ar=r(e0t,"LxmertForQuestionAnswering"),e0t.forEach(t),uar=r(YIe," (LXMERT model)"),YIe.forEach(t),bar=i(X),JF=n(X,"LI",{});var KIe=s(JF);W4e=n(KIe,"STRONG",{});var o0t=s(W4e);Far=r(o0t,"mbart"),o0t.forEach(t),Tar=r(KIe," \u2014 "),iW=n(KIe,"A",{href:!0});var r0t=s(iW);Mar=r(r0t,"MBartForQuestionAnswering"),r0t.forEach(t),Ear=r(KIe," (mBART model)"),KIe.forEach(t),Car=i(X),YF=n(X,"LI",{});var ZIe=s(YF);H4e=n(ZIe,"STRONG",{});var t0t=s(H4e);war=r(t0t,"megatron-bert"),t0t.forEach(t),Aar=r(ZIe," \u2014 "),dW=n(ZIe,"A",{href:!0});var a0t=s(dW);Lar=r(a0t,"MegatronBertForQuestionAnswering"),a0t.forEach(t),yar=r(ZIe," (Megatron-BERT model)"),ZIe.forEach(t),xar=i(X),KF=n(X,"LI",{});var eNe=s(KF);U4e=n(eNe,"STRONG",{});var n0t=s(U4e);$ar=r(n0t,"mobilebert"),n0t.forEach(t),kar=r(eNe," \u2014 "),cW=n(eNe,"A",{href:!0});var s0t=s(cW);Sar=r(s0t,"MobileBertForQuestionAnswering"),s0t.forEach(t),Rar=r(eNe," (MobileBERT model)"),eNe.forEach(t),Par=i(X),ZF=n(X,"LI",{});var oNe=s(ZF);J4e=n(oNe,"STRONG",{});var l0t=s(J4e);Bar=r(l0t,"mpnet"),l0t.forEach(t),Iar=r(oNe," \u2014 "),fW=n(oNe,"A",{href:!0});var i0t=s(fW);Nar=r(i0t,"MPNetForQuestionAnswering"),i0t.forEach(t),qar=r(oNe," (MPNet model)"),oNe.forEach(t),jar=i(X),e6=n(X,"LI",{});var rNe=s(e6);Y4e=n(rNe,"STRONG",{});var d0t=s(Y4e);Dar=r(d0t,"mvp"),d0t.forEach(t),Gar=r(rNe," \u2014 "),mW=n(rNe,"A",{href:!0});var c0t=s(mW);Oar=r(c0t,"MvpForQuestionAnswering"),c0t.forEach(t),Var=r(rNe," (MVP model)"),rNe.forEach(t),Xar=i(X),o6=n(X,"LI",{});var tNe=s(o6);K4e=n(tNe,"STRONG",{});var f0t=s(K4e);zar=r(f0t,"nezha"),f0t.forEach(t),Qar=r(tNe," \u2014 "),gW=n(tNe,"A",{href:!0});var m0t=s(gW);War=r(m0t,"NezhaForQuestionAnswering"),m0t.forEach(t),Har=r(tNe," (Nezha model)"),tNe.forEach(t),Uar=i(X),r6=n(X,"LI",{});var aNe=s(r6);Z4e=n(aNe,"STRONG",{});var g0t=s(Z4e);Jar=r(g0t,"nystromformer"),g0t.forEach(t),Yar=r(aNe," \u2014 "),hW=n(aNe,"A",{href:!0});var h0t=s(hW);Kar=r(h0t,"NystromformerForQuestionAnswering"),h0t.forEach(t),Zar=r(aNe," (Nystr\xF6mformer model)"),aNe.forEach(t),enr=i(X),t6=n(X,"LI",{});var nNe=s(t6);e2e=n(nNe,"STRONG",{});var p0t=s(e2e);onr=r(p0t,"qdqbert"),p0t.forEach(t),rnr=r(nNe," \u2014 "),pW=n(nNe,"A",{href:!0});var _0t=s(pW);tnr=r(_0t,"QDQBertForQuestionAnswering"),_0t.forEach(t),anr=r(nNe," (QDQBert model)"),nNe.forEach(t),nnr=i(X),a6=n(X,"LI",{});var sNe=s(a6);o2e=n(sNe,"STRONG",{});var u0t=s(o2e);snr=r(u0t,"reformer"),u0t.forEach(t),lnr=r(sNe," \u2014 "),_W=n(sNe,"A",{href:!0});var b0t=s(_W);inr=r(b0t,"ReformerForQuestionAnswering"),b0t.forEach(t),dnr=r(sNe," (Reformer model)"),sNe.forEach(t),cnr=i(X),n6=n(X,"LI",{});var lNe=s(n6);r2e=n(lNe,"STRONG",{});var v0t=s(r2e);fnr=r(v0t,"rembert"),v0t.forEach(t),mnr=r(lNe," \u2014 "),uW=n(lNe,"A",{href:!0});var F0t=s(uW);gnr=r(F0t,"RemBertForQuestionAnswering"),F0t.forEach(t),hnr=r(lNe," (RemBERT model)"),lNe.forEach(t),pnr=i(X),s6=n(X,"LI",{});var iNe=s(s6);t2e=n(iNe,"STRONG",{});var T0t=s(t2e);_nr=r(T0t,"roberta"),T0t.forEach(t),unr=r(iNe," \u2014 "),bW=n(iNe,"A",{href:!0});var M0t=s(bW);bnr=r(M0t,"RobertaForQuestionAnswering"),M0t.forEach(t),vnr=r(iNe," (RoBERTa model)"),iNe.forEach(t),Fnr=i(X),l6=n(X,"LI",{});var dNe=s(l6);a2e=n(dNe,"STRONG",{});var E0t=s(a2e);Tnr=r(E0t,"roformer"),E0t.forEach(t),Mnr=r(dNe," \u2014 "),vW=n(dNe,"A",{href:!0});var C0t=s(vW);Enr=r(C0t,"RoFormerForQuestionAnswering"),C0t.forEach(t),Cnr=r(dNe," (RoFormer model)"),dNe.forEach(t),wnr=i(X),i6=n(X,"LI",{});var cNe=s(i6);n2e=n(cNe,"STRONG",{});var w0t=s(n2e);Anr=r(w0t,"splinter"),w0t.forEach(t),Lnr=r(cNe," \u2014 "),FW=n(cNe,"A",{href:!0});var A0t=s(FW);ynr=r(A0t,"SplinterForQuestionAnswering"),A0t.forEach(t),xnr=r(cNe," (Splinter model)"),cNe.forEach(t),$nr=i(X),d6=n(X,"LI",{});var fNe=s(d6);s2e=n(fNe,"STRONG",{});var L0t=s(s2e);knr=r(L0t,"squeezebert"),L0t.forEach(t),Snr=r(fNe," \u2014 "),TW=n(fNe,"A",{href:!0});var y0t=s(TW);Rnr=r(y0t,"SqueezeBertForQuestionAnswering"),y0t.forEach(t),Pnr=r(fNe," (SqueezeBERT model)"),fNe.forEach(t),Bnr=i(X),c6=n(X,"LI",{});var mNe=s(c6);l2e=n(mNe,"STRONG",{});var x0t=s(l2e);Inr=r(x0t,"xlm"),x0t.forEach(t),Nnr=r(mNe," \u2014 "),MW=n(mNe,"A",{href:!0});var $0t=s(MW);qnr=r($0t,"XLMForQuestionAnsweringSimple"),$0t.forEach(t),jnr=r(mNe," (XLM model)"),mNe.forEach(t),Dnr=i(X),f6=n(X,"LI",{});var gNe=s(f6);i2e=n(gNe,"STRONG",{});var k0t=s(i2e);Gnr=r(k0t,"xlm-roberta"),k0t.forEach(t),Onr=r(gNe," \u2014 "),EW=n(gNe,"A",{href:!0});var S0t=s(EW);Vnr=r(S0t,"XLMRobertaForQuestionAnswering"),S0t.forEach(t),Xnr=r(gNe," (XLM-RoBERTa model)"),gNe.forEach(t),znr=i(X),m6=n(X,"LI",{});var hNe=s(m6);d2e=n(hNe,"STRONG",{});var R0t=s(d2e);Qnr=r(R0t,"xlm-roberta-xl"),R0t.forEach(t),Wnr=r(hNe," \u2014 "),CW=n(hNe,"A",{href:!0});var P0t=s(CW);Hnr=r(P0t,"XLMRobertaXLForQuestionAnswering"),P0t.forEach(t),Unr=r(hNe," (XLM-RoBERTa-XL model)"),hNe.forEach(t),Jnr=i(X),g6=n(X,"LI",{});var pNe=s(g6);c2e=n(pNe,"STRONG",{});var B0t=s(c2e);Ynr=r(B0t,"xlnet"),B0t.forEach(t),Knr=r(pNe," \u2014 "),wW=n(pNe,"A",{href:!0});var I0t=s(wW);Znr=r(I0t,"XLNetForQuestionAnsweringSimple"),I0t.forEach(t),esr=r(pNe," (XLNet model)"),pNe.forEach(t),osr=i(X),h6=n(X,"LI",{});var _Ne=s(h6);f2e=n(_Ne,"STRONG",{});var N0t=s(f2e);rsr=r(N0t,"yoso"),N0t.forEach(t),tsr=r(_Ne," \u2014 "),AW=n(_Ne,"A",{href:!0});var q0t=s(AW);asr=r(q0t,"YosoForQuestionAnswering"),q0t.forEach(t),nsr=r(_Ne," (YOSO model)"),_Ne.forEach(t),X.forEach(t),ssr=i(ua),p6=n(ua,"P",{});var uNe=s(p6);lsr=r(uNe,"The model is set in evaluation mode by default using "),m2e=n(uNe,"CODE",{});var j0t=s(m2e);isr=r(j0t,"model.eval()"),j0t.forEach(t),dsr=r(uNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=n(uNe,"CODE",{});var D0t=s(g2e);csr=r(D0t,"model.train()"),D0t.forEach(t),uNe.forEach(t),fsr=i(ua),T(_6.$$.fragment,ua),ua.forEach(t),gl.forEach(t),gze=i(f),vd=n(f,"H2",{class:!0});var vWe=s(vd);u6=n(vWe,"A",{id:!0,class:!0,href:!0});var G0t=s(u6);h2e=n(G0t,"SPAN",{});var O0t=s(h2e);T(Iy.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),msr=i(vWe),p2e=n(vWe,"SPAN",{});var V0t=s(p2e);gsr=r(V0t,"AutoModelForTableQuestionAnswering"),V0t.forEach(t),vWe.forEach(t),hze=i(f),Go=n(f,"DIV",{class:!0});var hl=s(Go);T(Ny.$$.fragment,hl),hsr=i(hl),Fd=n(hl,"P",{});var vte=s(Fd);psr=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LW=n(vte,"A",{href:!0});var X0t=s(LW);_sr=r(X0t,"from_pretrained()"),X0t.forEach(t),usr=r(vte," class method or the "),yW=n(vte,"A",{href:!0});var z0t=s(yW);bsr=r(z0t,"from_config()"),z0t.forEach(t),vsr=r(vte,` class
method.`),vte.forEach(t),Fsr=i(hl),qy=n(hl,"P",{});var FWe=s(qy);Tsr=r(FWe,"This class cannot be instantiated directly using "),_2e=n(FWe,"CODE",{});var Q0t=s(_2e);Msr=r(Q0t,"__init__()"),Q0t.forEach(t),Esr=r(FWe," (throws an error)."),FWe.forEach(t),Csr=i(hl),bt=n(hl,"DIV",{class:!0});var Nw=s(bt);T(jy.$$.fragment,Nw),wsr=i(Nw),u2e=n(Nw,"P",{});var W0t=s(u2e);Asr=r(W0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W0t.forEach(t),Lsr=i(Nw),Td=n(Nw,"P",{});var Fte=s(Td);ysr=r(Fte,`Note:
Loading a model from its configuration file does `),b2e=n(Fte,"STRONG",{});var H0t=s(b2e);xsr=r(H0t,"not"),H0t.forEach(t),$sr=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(Fte,"A",{href:!0});var U0t=s(xW);ksr=r(U0t,"from_pretrained()"),U0t.forEach(t),Ssr=r(Fte," to load the model weights."),Fte.forEach(t),Rsr=i(Nw),T(b6.$$.fragment,Nw),Nw.forEach(t),Psr=i(hl),lo=n(hl,"DIV",{class:!0});var ba=s(lo);T(Dy.$$.fragment,ba),Bsr=i(ba),v2e=n(ba,"P",{});var J0t=s(v2e);Isr=r(J0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),J0t.forEach(t),Nsr=i(ba),Qa=n(ba,"P",{});var qw=s(Qa);qsr=r(qw,"The model class to instantiate is selected based on the "),F2e=n(qw,"CODE",{});var Y0t=s(F2e);jsr=r(Y0t,"model_type"),Y0t.forEach(t),Dsr=r(qw,` property of the config object (either
passed as an argument or loaded from `),T2e=n(qw,"CODE",{});var K0t=s(T2e);Gsr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),Osr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(qw,"CODE",{});var Z0t=s(M2e);Vsr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),Xsr=r(qw,":"),qw.forEach(t),zsr=i(ba),E2e=n(ba,"UL",{});var ewt=s(E2e);v6=n(ewt,"LI",{});var bNe=s(v6);C2e=n(bNe,"STRONG",{});var owt=s(C2e);Qsr=r(owt,"tapas"),owt.forEach(t),Wsr=r(bNe," \u2014 "),$W=n(bNe,"A",{href:!0});var rwt=s($W);Hsr=r(rwt,"TapasForQuestionAnswering"),rwt.forEach(t),Usr=r(bNe," (TAPAS model)"),bNe.forEach(t),ewt.forEach(t),Jsr=i(ba),F6=n(ba,"P",{});var vNe=s(F6);Ysr=r(vNe,"The model is set in evaluation mode by default using "),w2e=n(vNe,"CODE",{});var twt=s(w2e);Ksr=r(twt,"model.eval()"),twt.forEach(t),Zsr=r(vNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=n(vNe,"CODE",{});var awt=s(A2e);elr=r(awt,"model.train()"),awt.forEach(t),vNe.forEach(t),olr=i(ba),T(T6.$$.fragment,ba),ba.forEach(t),hl.forEach(t),pze=i(f),Md=n(f,"H2",{class:!0});var TWe=s(Md);M6=n(TWe,"A",{id:!0,class:!0,href:!0});var nwt=s(M6);L2e=n(nwt,"SPAN",{});var swt=s(L2e);T(Gy.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),rlr=i(TWe),y2e=n(TWe,"SPAN",{});var lwt=s(y2e);tlr=r(lwt,"AutoModelForImageClassification"),lwt.forEach(t),TWe.forEach(t),_ze=i(f),Oo=n(f,"DIV",{class:!0});var pl=s(Oo);T(Oy.$$.fragment,pl),alr=i(pl),Ed=n(pl,"P",{});var Tte=s(Ed);nlr=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kW=n(Tte,"A",{href:!0});var iwt=s(kW);slr=r(iwt,"from_pretrained()"),iwt.forEach(t),llr=r(Tte," class method or the "),SW=n(Tte,"A",{href:!0});var dwt=s(SW);ilr=r(dwt,"from_config()"),dwt.forEach(t),dlr=r(Tte,` class
method.`),Tte.forEach(t),clr=i(pl),Vy=n(pl,"P",{});var MWe=s(Vy);flr=r(MWe,"This class cannot be instantiated directly using "),x2e=n(MWe,"CODE",{});var cwt=s(x2e);mlr=r(cwt,"__init__()"),cwt.forEach(t),glr=r(MWe," (throws an error)."),MWe.forEach(t),hlr=i(pl),vt=n(pl,"DIV",{class:!0});var jw=s(vt);T(Xy.$$.fragment,jw),plr=i(jw),$2e=n(jw,"P",{});var fwt=s($2e);_lr=r(fwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fwt.forEach(t),ulr=i(jw),Cd=n(jw,"P",{});var Mte=s(Cd);blr=r(Mte,`Note:
Loading a model from its configuration file does `),k2e=n(Mte,"STRONG",{});var mwt=s(k2e);vlr=r(mwt,"not"),mwt.forEach(t),Flr=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(Mte,"A",{href:!0});var gwt=s(RW);Tlr=r(gwt,"from_pretrained()"),gwt.forEach(t),Mlr=r(Mte," to load the model weights."),Mte.forEach(t),Elr=i(jw),T(E6.$$.fragment,jw),jw.forEach(t),Clr=i(pl),io=n(pl,"DIV",{class:!0});var va=s(io);T(zy.$$.fragment,va),wlr=i(va),S2e=n(va,"P",{});var hwt=s(S2e);Alr=r(hwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hwt.forEach(t),Llr=i(va),Wa=n(va,"P",{});var Dw=s(Wa);ylr=r(Dw,"The model class to instantiate is selected based on the "),R2e=n(Dw,"CODE",{});var pwt=s(R2e);xlr=r(pwt,"model_type"),pwt.forEach(t),$lr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),P2e=n(Dw,"CODE",{});var _wt=s(P2e);klr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),Slr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(Dw,"CODE",{});var uwt=s(B2e);Rlr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),Plr=r(Dw,":"),Dw.forEach(t),Blr=i(va),ue=n(va,"UL",{});var Fe=s(ue);C6=n(Fe,"LI",{});var FNe=s(C6);I2e=n(FNe,"STRONG",{});var bwt=s(I2e);Ilr=r(bwt,"beit"),bwt.forEach(t),Nlr=r(FNe," \u2014 "),PW=n(FNe,"A",{href:!0});var vwt=s(PW);qlr=r(vwt,"BeitForImageClassification"),vwt.forEach(t),jlr=r(FNe," (BEiT model)"),FNe.forEach(t),Dlr=i(Fe),w6=n(Fe,"LI",{});var TNe=s(w6);N2e=n(TNe,"STRONG",{});var Fwt=s(N2e);Glr=r(Fwt,"convnext"),Fwt.forEach(t),Olr=r(TNe," \u2014 "),BW=n(TNe,"A",{href:!0});var Twt=s(BW);Vlr=r(Twt,"ConvNextForImageClassification"),Twt.forEach(t),Xlr=r(TNe," (ConvNeXT model)"),TNe.forEach(t),zlr=i(Fe),A6=n(Fe,"LI",{});var MNe=s(A6);q2e=n(MNe,"STRONG",{});var Mwt=s(q2e);Qlr=r(Mwt,"cvt"),Mwt.forEach(t),Wlr=r(MNe," \u2014 "),IW=n(MNe,"A",{href:!0});var Ewt=s(IW);Hlr=r(Ewt,"CvtForImageClassification"),Ewt.forEach(t),Ulr=r(MNe," (CvT model)"),MNe.forEach(t),Jlr=i(Fe),L6=n(Fe,"LI",{});var ENe=s(L6);j2e=n(ENe,"STRONG",{});var Cwt=s(j2e);Ylr=r(Cwt,"data2vec-vision"),Cwt.forEach(t),Klr=r(ENe," \u2014 "),NW=n(ENe,"A",{href:!0});var wwt=s(NW);Zlr=r(wwt,"Data2VecVisionForImageClassification"),wwt.forEach(t),eir=r(ENe," (Data2VecVision model)"),ENe.forEach(t),oir=i(Fe),Js=n(Fe,"LI",{});var OS=s(Js);D2e=n(OS,"STRONG",{});var Awt=s(D2e);rir=r(Awt,"deit"),Awt.forEach(t),tir=r(OS," \u2014 "),qW=n(OS,"A",{href:!0});var Lwt=s(qW);air=r(Lwt,"DeiTForImageClassification"),Lwt.forEach(t),nir=r(OS," or "),jW=n(OS,"A",{href:!0});var ywt=s(jW);sir=r(ywt,"DeiTForImageClassificationWithTeacher"),ywt.forEach(t),lir=r(OS," (DeiT model)"),OS.forEach(t),iir=i(Fe),y6=n(Fe,"LI",{});var CNe=s(y6);G2e=n(CNe,"STRONG",{});var xwt=s(G2e);dir=r(xwt,"imagegpt"),xwt.forEach(t),cir=r(CNe," \u2014 "),DW=n(CNe,"A",{href:!0});var $wt=s(DW);fir=r($wt,"ImageGPTForImageClassification"),$wt.forEach(t),mir=r(CNe," (ImageGPT model)"),CNe.forEach(t),gir=i(Fe),Ys=n(Fe,"LI",{});var VS=s(Ys);O2e=n(VS,"STRONG",{});var kwt=s(O2e);hir=r(kwt,"levit"),kwt.forEach(t),pir=r(VS," \u2014 "),GW=n(VS,"A",{href:!0});var Swt=s(GW);_ir=r(Swt,"LevitForImageClassification"),Swt.forEach(t),uir=r(VS," or "),OW=n(VS,"A",{href:!0});var Rwt=s(OW);bir=r(Rwt,"LevitForImageClassificationWithTeacher"),Rwt.forEach(t),vir=r(VS," (LeViT model)"),VS.forEach(t),Fir=i(Fe),x6=n(Fe,"LI",{});var wNe=s(x6);V2e=n(wNe,"STRONG",{});var Pwt=s(V2e);Tir=r(Pwt,"mobilevit"),Pwt.forEach(t),Mir=r(wNe," \u2014 "),VW=n(wNe,"A",{href:!0});var Bwt=s(VW);Eir=r(Bwt,"MobileViTForImageClassification"),Bwt.forEach(t),Cir=r(wNe," (MobileViT model)"),wNe.forEach(t),wir=i(Fe),Ft=n(Fe,"LI",{});var Pf=s(Ft);X2e=n(Pf,"STRONG",{});var Iwt=s(X2e);Air=r(Iwt,"perceiver"),Iwt.forEach(t),Lir=r(Pf," \u2014 "),XW=n(Pf,"A",{href:!0});var Nwt=s(XW);yir=r(Nwt,"PerceiverForImageClassificationLearned"),Nwt.forEach(t),xir=r(Pf," or "),zW=n(Pf,"A",{href:!0});var qwt=s(zW);$ir=r(qwt,"PerceiverForImageClassificationFourier"),qwt.forEach(t),kir=r(Pf," or "),QW=n(Pf,"A",{href:!0});var jwt=s(QW);Sir=r(jwt,"PerceiverForImageClassificationConvProcessing"),jwt.forEach(t),Rir=r(Pf," (Perceiver model)"),Pf.forEach(t),Pir=i(Fe),$6=n(Fe,"LI",{});var ANe=s($6);z2e=n(ANe,"STRONG",{});var Dwt=s(z2e);Bir=r(Dwt,"poolformer"),Dwt.forEach(t),Iir=r(ANe," \u2014 "),WW=n(ANe,"A",{href:!0});var Gwt=s(WW);Nir=r(Gwt,"PoolFormerForImageClassification"),Gwt.forEach(t),qir=r(ANe," (PoolFormer model)"),ANe.forEach(t),jir=i(Fe),k6=n(Fe,"LI",{});var LNe=s(k6);Q2e=n(LNe,"STRONG",{});var Owt=s(Q2e);Dir=r(Owt,"regnet"),Owt.forEach(t),Gir=r(LNe," \u2014 "),HW=n(LNe,"A",{href:!0});var Vwt=s(HW);Oir=r(Vwt,"RegNetForImageClassification"),Vwt.forEach(t),Vir=r(LNe," (RegNet model)"),LNe.forEach(t),Xir=i(Fe),S6=n(Fe,"LI",{});var yNe=s(S6);W2e=n(yNe,"STRONG",{});var Xwt=s(W2e);zir=r(Xwt,"resnet"),Xwt.forEach(t),Qir=r(yNe," \u2014 "),UW=n(yNe,"A",{href:!0});var zwt=s(UW);Wir=r(zwt,"ResNetForImageClassification"),zwt.forEach(t),Hir=r(yNe," (ResNet model)"),yNe.forEach(t),Uir=i(Fe),R6=n(Fe,"LI",{});var xNe=s(R6);H2e=n(xNe,"STRONG",{});var Qwt=s(H2e);Jir=r(Qwt,"segformer"),Qwt.forEach(t),Yir=r(xNe," \u2014 "),JW=n(xNe,"A",{href:!0});var Wwt=s(JW);Kir=r(Wwt,"SegformerForImageClassification"),Wwt.forEach(t),Zir=r(xNe," (SegFormer model)"),xNe.forEach(t),edr=i(Fe),P6=n(Fe,"LI",{});var $Ne=s(P6);U2e=n($Ne,"STRONG",{});var Hwt=s(U2e);odr=r(Hwt,"swin"),Hwt.forEach(t),rdr=r($Ne," \u2014 "),YW=n($Ne,"A",{href:!0});var Uwt=s(YW);tdr=r(Uwt,"SwinForImageClassification"),Uwt.forEach(t),adr=r($Ne," (Swin Transformer model)"),$Ne.forEach(t),ndr=i(Fe),B6=n(Fe,"LI",{});var kNe=s(B6);J2e=n(kNe,"STRONG",{});var Jwt=s(J2e);sdr=r(Jwt,"swinv2"),Jwt.forEach(t),ldr=r(kNe," \u2014 "),KW=n(kNe,"A",{href:!0});var Ywt=s(KW);idr=r(Ywt,"Swinv2ForImageClassification"),Ywt.forEach(t),ddr=r(kNe," (Swin Transformer V2 model)"),kNe.forEach(t),cdr=i(Fe),I6=n(Fe,"LI",{});var SNe=s(I6);Y2e=n(SNe,"STRONG",{});var Kwt=s(Y2e);fdr=r(Kwt,"van"),Kwt.forEach(t),mdr=r(SNe," \u2014 "),ZW=n(SNe,"A",{href:!0});var Zwt=s(ZW);gdr=r(Zwt,"VanForImageClassification"),Zwt.forEach(t),hdr=r(SNe," (VAN model)"),SNe.forEach(t),pdr=i(Fe),N6=n(Fe,"LI",{});var RNe=s(N6);K2e=n(RNe,"STRONG",{});var eAt=s(K2e);_dr=r(eAt,"vit"),eAt.forEach(t),udr=r(RNe," \u2014 "),eH=n(RNe,"A",{href:!0});var oAt=s(eH);bdr=r(oAt,"ViTForImageClassification"),oAt.forEach(t),vdr=r(RNe," (ViT model)"),RNe.forEach(t),Fe.forEach(t),Fdr=i(va),q6=n(va,"P",{});var PNe=s(q6);Tdr=r(PNe,"The model is set in evaluation mode by default using "),Z2e=n(PNe,"CODE",{});var rAt=s(Z2e);Mdr=r(rAt,"model.eval()"),rAt.forEach(t),Edr=r(PNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=n(PNe,"CODE",{});var tAt=s(ebe);Cdr=r(tAt,"model.train()"),tAt.forEach(t),PNe.forEach(t),wdr=i(va),T(j6.$$.fragment,va),va.forEach(t),pl.forEach(t),uze=i(f),wd=n(f,"H2",{class:!0});var EWe=s(wd);D6=n(EWe,"A",{id:!0,class:!0,href:!0});var aAt=s(D6);obe=n(aAt,"SPAN",{});var nAt=s(obe);T(Qy.$$.fragment,nAt),nAt.forEach(t),aAt.forEach(t),Adr=i(EWe),rbe=n(EWe,"SPAN",{});var sAt=s(rbe);Ldr=r(sAt,"AutoModelForVision2Seq"),sAt.forEach(t),EWe.forEach(t),bze=i(f),Vo=n(f,"DIV",{class:!0});var _l=s(Vo);T(Wy.$$.fragment,_l),ydr=i(_l),Ad=n(_l,"P",{});var Ete=s(Ad);xdr=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oH=n(Ete,"A",{href:!0});var lAt=s(oH);$dr=r(lAt,"from_pretrained()"),lAt.forEach(t),kdr=r(Ete," class method or the "),rH=n(Ete,"A",{href:!0});var iAt=s(rH);Sdr=r(iAt,"from_config()"),iAt.forEach(t),Rdr=r(Ete,` class
method.`),Ete.forEach(t),Pdr=i(_l),Hy=n(_l,"P",{});var CWe=s(Hy);Bdr=r(CWe,"This class cannot be instantiated directly using "),tbe=n(CWe,"CODE",{});var dAt=s(tbe);Idr=r(dAt,"__init__()"),dAt.forEach(t),Ndr=r(CWe," (throws an error)."),CWe.forEach(t),qdr=i(_l),Tt=n(_l,"DIV",{class:!0});var Gw=s(Tt);T(Uy.$$.fragment,Gw),jdr=i(Gw),abe=n(Gw,"P",{});var cAt=s(abe);Ddr=r(cAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cAt.forEach(t),Gdr=i(Gw),Ld=n(Gw,"P",{});var Cte=s(Ld);Odr=r(Cte,`Note:
Loading a model from its configuration file does `),nbe=n(Cte,"STRONG",{});var fAt=s(nbe);Vdr=r(fAt,"not"),fAt.forEach(t),Xdr=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Cte,"A",{href:!0});var mAt=s(tH);zdr=r(mAt,"from_pretrained()"),mAt.forEach(t),Qdr=r(Cte," to load the model weights."),Cte.forEach(t),Wdr=i(Gw),T(G6.$$.fragment,Gw),Gw.forEach(t),Hdr=i(_l),co=n(_l,"DIV",{class:!0});var Fa=s(co);T(Jy.$$.fragment,Fa),Udr=i(Fa),sbe=n(Fa,"P",{});var gAt=s(sbe);Jdr=r(gAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gAt.forEach(t),Ydr=i(Fa),Ha=n(Fa,"P",{});var Ow=s(Ha);Kdr=r(Ow,"The model class to instantiate is selected based on the "),lbe=n(Ow,"CODE",{});var hAt=s(lbe);Zdr=r(hAt,"model_type"),hAt.forEach(t),ecr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),ibe=n(Ow,"CODE",{});var pAt=s(ibe);ocr=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),rcr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(Ow,"CODE",{});var _At=s(dbe);tcr=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),acr=r(Ow,":"),Ow.forEach(t),ncr=i(Fa),cbe=n(Fa,"UL",{});var uAt=s(cbe);O6=n(uAt,"LI",{});var BNe=s(O6);fbe=n(BNe,"STRONG",{});var bAt=s(fbe);scr=r(bAt,"vision-encoder-decoder"),bAt.forEach(t),lcr=r(BNe," \u2014 "),aH=n(BNe,"A",{href:!0});var vAt=s(aH);icr=r(vAt,"VisionEncoderDecoderModel"),vAt.forEach(t),dcr=r(BNe," (Vision Encoder decoder model)"),BNe.forEach(t),uAt.forEach(t),ccr=i(Fa),V6=n(Fa,"P",{});var INe=s(V6);fcr=r(INe,"The model is set in evaluation mode by default using "),mbe=n(INe,"CODE",{});var FAt=s(mbe);mcr=r(FAt,"model.eval()"),FAt.forEach(t),gcr=r(INe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gbe=n(INe,"CODE",{});var TAt=s(gbe);hcr=r(TAt,"model.train()"),TAt.forEach(t),INe.forEach(t),pcr=i(Fa),T(X6.$$.fragment,Fa),Fa.forEach(t),_l.forEach(t),vze=i(f),yd=n(f,"H2",{class:!0});var wWe=s(yd);z6=n(wWe,"A",{id:!0,class:!0,href:!0});var MAt=s(z6);hbe=n(MAt,"SPAN",{});var EAt=s(hbe);T(Yy.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),_cr=i(wWe),pbe=n(wWe,"SPAN",{});var CAt=s(pbe);ucr=r(CAt,"AutoModelForVisualQuestionAnswering"),CAt.forEach(t),wWe.forEach(t),Fze=i(f),Xo=n(f,"DIV",{class:!0});var ul=s(Xo);T(Ky.$$.fragment,ul),bcr=i(ul),xd=n(ul,"P",{});var wte=s(xd);vcr=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),nH=n(wte,"A",{href:!0});var wAt=s(nH);Fcr=r(wAt,"from_pretrained()"),wAt.forEach(t),Tcr=r(wte," class method or the "),sH=n(wte,"A",{href:!0});var AAt=s(sH);Mcr=r(AAt,"from_config()"),AAt.forEach(t),Ecr=r(wte,` class
method.`),wte.forEach(t),Ccr=i(ul),Zy=n(ul,"P",{});var AWe=s(Zy);wcr=r(AWe,"This class cannot be instantiated directly using "),_be=n(AWe,"CODE",{});var LAt=s(_be);Acr=r(LAt,"__init__()"),LAt.forEach(t),Lcr=r(AWe," (throws an error)."),AWe.forEach(t),ycr=i(ul),Mt=n(ul,"DIV",{class:!0});var Vw=s(Mt);T(e8.$$.fragment,Vw),xcr=i(Vw),ube=n(Vw,"P",{});var yAt=s(ube);$cr=r(yAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),yAt.forEach(t),kcr=i(Vw),$d=n(Vw,"P",{});var Ate=s($d);Scr=r(Ate,`Note:
Loading a model from its configuration file does `),bbe=n(Ate,"STRONG",{});var xAt=s(bbe);Rcr=r(xAt,"not"),xAt.forEach(t),Pcr=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(Ate,"A",{href:!0});var $At=s(lH);Bcr=r($At,"from_pretrained()"),$At.forEach(t),Icr=r(Ate," to load the model weights."),Ate.forEach(t),Ncr=i(Vw),T(Q6.$$.fragment,Vw),Vw.forEach(t),qcr=i(ul),fo=n(ul,"DIV",{class:!0});var Ta=s(fo);T(o8.$$.fragment,Ta),jcr=i(Ta),vbe=n(Ta,"P",{});var kAt=s(vbe);Dcr=r(kAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),kAt.forEach(t),Gcr=i(Ta),Ua=n(Ta,"P",{});var Xw=s(Ua);Ocr=r(Xw,"The model class to instantiate is selected based on the "),Fbe=n(Xw,"CODE",{});var SAt=s(Fbe);Vcr=r(SAt,"model_type"),SAt.forEach(t),Xcr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(Xw,"CODE",{});var RAt=s(Tbe);zcr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),Qcr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(Xw,"CODE",{});var PAt=s(Mbe);Wcr=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),Hcr=r(Xw,":"),Xw.forEach(t),Ucr=i(Ta),Ebe=n(Ta,"UL",{});var BAt=s(Ebe);W6=n(BAt,"LI",{});var NNe=s(W6);Cbe=n(NNe,"STRONG",{});var IAt=s(Cbe);Jcr=r(IAt,"vilt"),IAt.forEach(t),Ycr=r(NNe," \u2014 "),iH=n(NNe,"A",{href:!0});var NAt=s(iH);Kcr=r(NAt,"ViltForQuestionAnswering"),NAt.forEach(t),Zcr=r(NNe," (ViLT model)"),NNe.forEach(t),BAt.forEach(t),efr=i(Ta),H6=n(Ta,"P",{});var qNe=s(H6);ofr=r(qNe,"The model is set in evaluation mode by default using "),wbe=n(qNe,"CODE",{});var qAt=s(wbe);rfr=r(qAt,"model.eval()"),qAt.forEach(t),tfr=r(qNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Abe=n(qNe,"CODE",{});var jAt=s(Abe);afr=r(jAt,"model.train()"),jAt.forEach(t),qNe.forEach(t),nfr=i(Ta),T(U6.$$.fragment,Ta),Ta.forEach(t),ul.forEach(t),Tze=i(f),kd=n(f,"H2",{class:!0});var LWe=s(kd);J6=n(LWe,"A",{id:!0,class:!0,href:!0});var DAt=s(J6);Lbe=n(DAt,"SPAN",{});var GAt=s(Lbe);T(r8.$$.fragment,GAt),GAt.forEach(t),DAt.forEach(t),sfr=i(LWe),ybe=n(LWe,"SPAN",{});var OAt=s(ybe);lfr=r(OAt,"AutoModelForAudioClassification"),OAt.forEach(t),LWe.forEach(t),Mze=i(f),zo=n(f,"DIV",{class:!0});var bl=s(zo);T(t8.$$.fragment,bl),ifr=i(bl),Sd=n(bl,"P",{});var Lte=s(Sd);dfr=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dH=n(Lte,"A",{href:!0});var VAt=s(dH);cfr=r(VAt,"from_pretrained()"),VAt.forEach(t),ffr=r(Lte," class method or the "),cH=n(Lte,"A",{href:!0});var XAt=s(cH);mfr=r(XAt,"from_config()"),XAt.forEach(t),gfr=r(Lte,` class
method.`),Lte.forEach(t),hfr=i(bl),a8=n(bl,"P",{});var yWe=s(a8);pfr=r(yWe,"This class cannot be instantiated directly using "),xbe=n(yWe,"CODE",{});var zAt=s(xbe);_fr=r(zAt,"__init__()"),zAt.forEach(t),ufr=r(yWe," (throws an error)."),yWe.forEach(t),bfr=i(bl),Et=n(bl,"DIV",{class:!0});var zw=s(Et);T(n8.$$.fragment,zw),vfr=i(zw),$be=n(zw,"P",{});var QAt=s($be);Ffr=r(QAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QAt.forEach(t),Tfr=i(zw),Rd=n(zw,"P",{});var yte=s(Rd);Mfr=r(yte,`Note:
Loading a model from its configuration file does `),kbe=n(yte,"STRONG",{});var WAt=s(kbe);Efr=r(WAt,"not"),WAt.forEach(t),Cfr=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(yte,"A",{href:!0});var HAt=s(fH);wfr=r(HAt,"from_pretrained()"),HAt.forEach(t),Afr=r(yte," to load the model weights."),yte.forEach(t),Lfr=i(zw),T(Y6.$$.fragment,zw),zw.forEach(t),yfr=i(bl),mo=n(bl,"DIV",{class:!0});var Ma=s(mo);T(s8.$$.fragment,Ma),xfr=i(Ma),Sbe=n(Ma,"P",{});var UAt=s(Sbe);$fr=r(UAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),UAt.forEach(t),kfr=i(Ma),Ja=n(Ma,"P",{});var Qw=s(Ja);Sfr=r(Qw,"The model class to instantiate is selected based on the "),Rbe=n(Qw,"CODE",{});var JAt=s(Rbe);Rfr=r(JAt,"model_type"),JAt.forEach(t),Pfr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(Qw,"CODE",{});var YAt=s(Pbe);Bfr=r(YAt,"pretrained_model_name_or_path"),YAt.forEach(t),Ifr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(Qw,"CODE",{});var KAt=s(Bbe);Nfr=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),qfr=r(Qw,":"),Qw.forEach(t),jfr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);K6=n(ze,"LI",{});var jNe=s(K6);Ibe=n(jNe,"STRONG",{});var ZAt=s(Ibe);Dfr=r(ZAt,"data2vec-audio"),ZAt.forEach(t),Gfr=r(jNe," \u2014 "),mH=n(jNe,"A",{href:!0});var eLt=s(mH);Ofr=r(eLt,"Data2VecAudioForSequenceClassification"),eLt.forEach(t),Vfr=r(jNe," (Data2VecAudio model)"),jNe.forEach(t),Xfr=i(ze),Z6=n(ze,"LI",{});var DNe=s(Z6);Nbe=n(DNe,"STRONG",{});var oLt=s(Nbe);zfr=r(oLt,"hubert"),oLt.forEach(t),Qfr=r(DNe," \u2014 "),gH=n(DNe,"A",{href:!0});var rLt=s(gH);Wfr=r(rLt,"HubertForSequenceClassification"),rLt.forEach(t),Hfr=r(DNe," (Hubert model)"),DNe.forEach(t),Ufr=i(ze),eT=n(ze,"LI",{});var GNe=s(eT);qbe=n(GNe,"STRONG",{});var tLt=s(qbe);Jfr=r(tLt,"sew"),tLt.forEach(t),Yfr=r(GNe," \u2014 "),hH=n(GNe,"A",{href:!0});var aLt=s(hH);Kfr=r(aLt,"SEWForSequenceClassification"),aLt.forEach(t),Zfr=r(GNe," (SEW model)"),GNe.forEach(t),emr=i(ze),oT=n(ze,"LI",{});var ONe=s(oT);jbe=n(ONe,"STRONG",{});var nLt=s(jbe);omr=r(nLt,"sew-d"),nLt.forEach(t),rmr=r(ONe," \u2014 "),pH=n(ONe,"A",{href:!0});var sLt=s(pH);tmr=r(sLt,"SEWDForSequenceClassification"),sLt.forEach(t),amr=r(ONe," (SEW-D model)"),ONe.forEach(t),nmr=i(ze),rT=n(ze,"LI",{});var VNe=s(rT);Dbe=n(VNe,"STRONG",{});var lLt=s(Dbe);smr=r(lLt,"unispeech"),lLt.forEach(t),lmr=r(VNe," \u2014 "),_H=n(VNe,"A",{href:!0});var iLt=s(_H);imr=r(iLt,"UniSpeechForSequenceClassification"),iLt.forEach(t),dmr=r(VNe," (UniSpeech model)"),VNe.forEach(t),cmr=i(ze),tT=n(ze,"LI",{});var XNe=s(tT);Gbe=n(XNe,"STRONG",{});var dLt=s(Gbe);fmr=r(dLt,"unispeech-sat"),dLt.forEach(t),mmr=r(XNe," \u2014 "),uH=n(XNe,"A",{href:!0});var cLt=s(uH);gmr=r(cLt,"UniSpeechSatForSequenceClassification"),cLt.forEach(t),hmr=r(XNe," (UniSpeechSat model)"),XNe.forEach(t),pmr=i(ze),aT=n(ze,"LI",{});var zNe=s(aT);Obe=n(zNe,"STRONG",{});var fLt=s(Obe);_mr=r(fLt,"wav2vec2"),fLt.forEach(t),umr=r(zNe," \u2014 "),bH=n(zNe,"A",{href:!0});var mLt=s(bH);bmr=r(mLt,"Wav2Vec2ForSequenceClassification"),mLt.forEach(t),vmr=r(zNe," (Wav2Vec2 model)"),zNe.forEach(t),Fmr=i(ze),nT=n(ze,"LI",{});var QNe=s(nT);Vbe=n(QNe,"STRONG",{});var gLt=s(Vbe);Tmr=r(gLt,"wav2vec2-conformer"),gLt.forEach(t),Mmr=r(QNe," \u2014 "),vH=n(QNe,"A",{href:!0});var hLt=s(vH);Emr=r(hLt,"Wav2Vec2ConformerForSequenceClassification"),hLt.forEach(t),Cmr=r(QNe," (Wav2Vec2-Conformer model)"),QNe.forEach(t),wmr=i(ze),sT=n(ze,"LI",{});var WNe=s(sT);Xbe=n(WNe,"STRONG",{});var pLt=s(Xbe);Amr=r(pLt,"wavlm"),pLt.forEach(t),Lmr=r(WNe," \u2014 "),FH=n(WNe,"A",{href:!0});var _Lt=s(FH);ymr=r(_Lt,"WavLMForSequenceClassification"),_Lt.forEach(t),xmr=r(WNe," (WavLM model)"),WNe.forEach(t),ze.forEach(t),$mr=i(Ma),lT=n(Ma,"P",{});var HNe=s(lT);kmr=r(HNe,"The model is set in evaluation mode by default using "),zbe=n(HNe,"CODE",{});var uLt=s(zbe);Smr=r(uLt,"model.eval()"),uLt.forEach(t),Rmr=r(HNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(HNe,"CODE",{});var bLt=s(Qbe);Pmr=r(bLt,"model.train()"),bLt.forEach(t),HNe.forEach(t),Bmr=i(Ma),T(iT.$$.fragment,Ma),Ma.forEach(t),bl.forEach(t),Eze=i(f),Pd=n(f,"H2",{class:!0});var xWe=s(Pd);dT=n(xWe,"A",{id:!0,class:!0,href:!0});var vLt=s(dT);Wbe=n(vLt,"SPAN",{});var FLt=s(Wbe);T(l8.$$.fragment,FLt),FLt.forEach(t),vLt.forEach(t),Imr=i(xWe),Hbe=n(xWe,"SPAN",{});var TLt=s(Hbe);Nmr=r(TLt,"AutoModelForAudioFrameClassification"),TLt.forEach(t),xWe.forEach(t),Cze=i(f),Qo=n(f,"DIV",{class:!0});var vl=s(Qo);T(i8.$$.fragment,vl),qmr=i(vl),Bd=n(vl,"P",{});var xte=s(Bd);jmr=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),TH=n(xte,"A",{href:!0});var MLt=s(TH);Dmr=r(MLt,"from_pretrained()"),MLt.forEach(t),Gmr=r(xte," class method or the "),MH=n(xte,"A",{href:!0});var ELt=s(MH);Omr=r(ELt,"from_config()"),ELt.forEach(t),Vmr=r(xte,` class
method.`),xte.forEach(t),Xmr=i(vl),d8=n(vl,"P",{});var $We=s(d8);zmr=r($We,"This class cannot be instantiated directly using "),Ube=n($We,"CODE",{});var CLt=s(Ube);Qmr=r(CLt,"__init__()"),CLt.forEach(t),Wmr=r($We," (throws an error)."),$We.forEach(t),Hmr=i(vl),Ct=n(vl,"DIV",{class:!0});var Ww=s(Ct);T(c8.$$.fragment,Ww),Umr=i(Ww),Jbe=n(Ww,"P",{});var wLt=s(Jbe);Jmr=r(wLt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wLt.forEach(t),Ymr=i(Ww),Id=n(Ww,"P",{});var $te=s(Id);Kmr=r($te,`Note:
Loading a model from its configuration file does `),Ybe=n($te,"STRONG",{});var ALt=s(Ybe);Zmr=r(ALt,"not"),ALt.forEach(t),egr=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n($te,"A",{href:!0});var LLt=s(EH);ogr=r(LLt,"from_pretrained()"),LLt.forEach(t),rgr=r($te," to load the model weights."),$te.forEach(t),tgr=i(Ww),T(cT.$$.fragment,Ww),Ww.forEach(t),agr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(f8.$$.fragment,Ea),ngr=i(Ea),Kbe=n(Ea,"P",{});var yLt=s(Kbe);sgr=r(yLt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),yLt.forEach(t),lgr=i(Ea),Ya=n(Ea,"P",{});var Hw=s(Ya);igr=r(Hw,"The model class to instantiate is selected based on the "),Zbe=n(Hw,"CODE",{});var xLt=s(Zbe);dgr=r(xLt,"model_type"),xLt.forEach(t),cgr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),eve=n(Hw,"CODE",{});var $Lt=s(eve);fgr=r($Lt,"pretrained_model_name_or_path"),$Lt.forEach(t),mgr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(Hw,"CODE",{});var kLt=s(ove);ggr=r(kLt,"pretrained_model_name_or_path"),kLt.forEach(t),hgr=r(Hw,":"),Hw.forEach(t),pgr=i(Ea),rt=n(Ea,"UL",{});var Fl=s(rt);fT=n(Fl,"LI",{});var UNe=s(fT);rve=n(UNe,"STRONG",{});var SLt=s(rve);_gr=r(SLt,"data2vec-audio"),SLt.forEach(t),ugr=r(UNe," \u2014 "),CH=n(UNe,"A",{href:!0});var RLt=s(CH);bgr=r(RLt,"Data2VecAudioForAudioFrameClassification"),RLt.forEach(t),vgr=r(UNe," (Data2VecAudio model)"),UNe.forEach(t),Fgr=i(Fl),mT=n(Fl,"LI",{});var JNe=s(mT);tve=n(JNe,"STRONG",{});var PLt=s(tve);Tgr=r(PLt,"unispeech-sat"),PLt.forEach(t),Mgr=r(JNe," \u2014 "),wH=n(JNe,"A",{href:!0});var BLt=s(wH);Egr=r(BLt,"UniSpeechSatForAudioFrameClassification"),BLt.forEach(t),Cgr=r(JNe," (UniSpeechSat model)"),JNe.forEach(t),wgr=i(Fl),gT=n(Fl,"LI",{});var YNe=s(gT);ave=n(YNe,"STRONG",{});var ILt=s(ave);Agr=r(ILt,"wav2vec2"),ILt.forEach(t),Lgr=r(YNe," \u2014 "),AH=n(YNe,"A",{href:!0});var NLt=s(AH);ygr=r(NLt,"Wav2Vec2ForAudioFrameClassification"),NLt.forEach(t),xgr=r(YNe," (Wav2Vec2 model)"),YNe.forEach(t),$gr=i(Fl),hT=n(Fl,"LI",{});var KNe=s(hT);nve=n(KNe,"STRONG",{});var qLt=s(nve);kgr=r(qLt,"wav2vec2-conformer"),qLt.forEach(t),Sgr=r(KNe," \u2014 "),LH=n(KNe,"A",{href:!0});var jLt=s(LH);Rgr=r(jLt,"Wav2Vec2ConformerForAudioFrameClassification"),jLt.forEach(t),Pgr=r(KNe," (Wav2Vec2-Conformer model)"),KNe.forEach(t),Bgr=i(Fl),pT=n(Fl,"LI",{});var ZNe=s(pT);sve=n(ZNe,"STRONG",{});var DLt=s(sve);Igr=r(DLt,"wavlm"),DLt.forEach(t),Ngr=r(ZNe," \u2014 "),yH=n(ZNe,"A",{href:!0});var GLt=s(yH);qgr=r(GLt,"WavLMForAudioFrameClassification"),GLt.forEach(t),jgr=r(ZNe," (WavLM model)"),ZNe.forEach(t),Fl.forEach(t),Dgr=i(Ea),_T=n(Ea,"P",{});var eqe=s(_T);Ggr=r(eqe,"The model is set in evaluation mode by default using "),lve=n(eqe,"CODE",{});var OLt=s(lve);Ogr=r(OLt,"model.eval()"),OLt.forEach(t),Vgr=r(eqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=n(eqe,"CODE",{});var VLt=s(ive);Xgr=r(VLt,"model.train()"),VLt.forEach(t),eqe.forEach(t),zgr=i(Ea),T(uT.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),wze=i(f),Nd=n(f,"H2",{class:!0});var kWe=s(Nd);bT=n(kWe,"A",{id:!0,class:!0,href:!0});var XLt=s(bT);dve=n(XLt,"SPAN",{});var zLt=s(dve);T(m8.$$.fragment,zLt),zLt.forEach(t),XLt.forEach(t),Qgr=i(kWe),cve=n(kWe,"SPAN",{});var QLt=s(cve);Wgr=r(QLt,"AutoModelForCTC"),QLt.forEach(t),kWe.forEach(t),Aze=i(f),Wo=n(f,"DIV",{class:!0});var Tl=s(Wo);T(g8.$$.fragment,Tl),Hgr=i(Tl),qd=n(Tl,"P",{});var kte=s(qd);Ugr=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),xH=n(kte,"A",{href:!0});var WLt=s(xH);Jgr=r(WLt,"from_pretrained()"),WLt.forEach(t),Ygr=r(kte," class method or the "),$H=n(kte,"A",{href:!0});var HLt=s($H);Kgr=r(HLt,"from_config()"),HLt.forEach(t),Zgr=r(kte,` class
method.`),kte.forEach(t),ehr=i(Tl),h8=n(Tl,"P",{});var SWe=s(h8);ohr=r(SWe,"This class cannot be instantiated directly using "),fve=n(SWe,"CODE",{});var ULt=s(fve);rhr=r(ULt,"__init__()"),ULt.forEach(t),thr=r(SWe," (throws an error)."),SWe.forEach(t),ahr=i(Tl),wt=n(Tl,"DIV",{class:!0});var Uw=s(wt);T(p8.$$.fragment,Uw),nhr=i(Uw),mve=n(Uw,"P",{});var JLt=s(mve);shr=r(JLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),JLt.forEach(t),lhr=i(Uw),jd=n(Uw,"P",{});var Ste=s(jd);ihr=r(Ste,`Note:
Loading a model from its configuration file does `),gve=n(Ste,"STRONG",{});var YLt=s(gve);dhr=r(YLt,"not"),YLt.forEach(t),chr=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(Ste,"A",{href:!0});var KLt=s(kH);fhr=r(KLt,"from_pretrained()"),KLt.forEach(t),mhr=r(Ste," to load the model weights."),Ste.forEach(t),ghr=i(Uw),T(vT.$$.fragment,Uw),Uw.forEach(t),hhr=i(Tl),ho=n(Tl,"DIV",{class:!0});var Ca=s(ho);T(_8.$$.fragment,Ca),phr=i(Ca),hve=n(Ca,"P",{});var ZLt=s(hve);_hr=r(ZLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ZLt.forEach(t),uhr=i(Ca),Ka=n(Ca,"P",{});var Jw=s(Ka);bhr=r(Jw,"The model class to instantiate is selected based on the "),pve=n(Jw,"CODE",{});var eyt=s(pve);vhr=r(eyt,"model_type"),eyt.forEach(t),Fhr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),_ve=n(Jw,"CODE",{});var oyt=s(_ve);Thr=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),Mhr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(Jw,"CODE",{});var ryt=s(uve);Ehr=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),Chr=r(Jw,":"),Jw.forEach(t),whr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);FT=n(Be,"LI",{});var oqe=s(FT);bve=n(oqe,"STRONG",{});var tyt=s(bve);Ahr=r(tyt,"data2vec-audio"),tyt.forEach(t),Lhr=r(oqe," \u2014 "),SH=n(oqe,"A",{href:!0});var ayt=s(SH);yhr=r(ayt,"Data2VecAudioForCTC"),ayt.forEach(t),xhr=r(oqe," (Data2VecAudio model)"),oqe.forEach(t),$hr=i(Be),TT=n(Be,"LI",{});var rqe=s(TT);vve=n(rqe,"STRONG",{});var nyt=s(vve);khr=r(nyt,"hubert"),nyt.forEach(t),Shr=r(rqe," \u2014 "),RH=n(rqe,"A",{href:!0});var syt=s(RH);Rhr=r(syt,"HubertForCTC"),syt.forEach(t),Phr=r(rqe," (Hubert model)"),rqe.forEach(t),Bhr=i(Be),MT=n(Be,"LI",{});var tqe=s(MT);Fve=n(tqe,"STRONG",{});var lyt=s(Fve);Ihr=r(lyt,"mctct"),lyt.forEach(t),Nhr=r(tqe," \u2014 "),PH=n(tqe,"A",{href:!0});var iyt=s(PH);qhr=r(iyt,"MCTCTForCTC"),iyt.forEach(t),jhr=r(tqe," (M-CTC-T model)"),tqe.forEach(t),Dhr=i(Be),ET=n(Be,"LI",{});var aqe=s(ET);Tve=n(aqe,"STRONG",{});var dyt=s(Tve);Ghr=r(dyt,"sew"),dyt.forEach(t),Ohr=r(aqe," \u2014 "),BH=n(aqe,"A",{href:!0});var cyt=s(BH);Vhr=r(cyt,"SEWForCTC"),cyt.forEach(t),Xhr=r(aqe," (SEW model)"),aqe.forEach(t),zhr=i(Be),CT=n(Be,"LI",{});var nqe=s(CT);Mve=n(nqe,"STRONG",{});var fyt=s(Mve);Qhr=r(fyt,"sew-d"),fyt.forEach(t),Whr=r(nqe," \u2014 "),IH=n(nqe,"A",{href:!0});var myt=s(IH);Hhr=r(myt,"SEWDForCTC"),myt.forEach(t),Uhr=r(nqe," (SEW-D model)"),nqe.forEach(t),Jhr=i(Be),wT=n(Be,"LI",{});var sqe=s(wT);Eve=n(sqe,"STRONG",{});var gyt=s(Eve);Yhr=r(gyt,"unispeech"),gyt.forEach(t),Khr=r(sqe," \u2014 "),NH=n(sqe,"A",{href:!0});var hyt=s(NH);Zhr=r(hyt,"UniSpeechForCTC"),hyt.forEach(t),epr=r(sqe," (UniSpeech model)"),sqe.forEach(t),opr=i(Be),AT=n(Be,"LI",{});var lqe=s(AT);Cve=n(lqe,"STRONG",{});var pyt=s(Cve);rpr=r(pyt,"unispeech-sat"),pyt.forEach(t),tpr=r(lqe," \u2014 "),qH=n(lqe,"A",{href:!0});var _yt=s(qH);apr=r(_yt,"UniSpeechSatForCTC"),_yt.forEach(t),npr=r(lqe," (UniSpeechSat model)"),lqe.forEach(t),spr=i(Be),LT=n(Be,"LI",{});var iqe=s(LT);wve=n(iqe,"STRONG",{});var uyt=s(wve);lpr=r(uyt,"wav2vec2"),uyt.forEach(t),ipr=r(iqe," \u2014 "),jH=n(iqe,"A",{href:!0});var byt=s(jH);dpr=r(byt,"Wav2Vec2ForCTC"),byt.forEach(t),cpr=r(iqe," (Wav2Vec2 model)"),iqe.forEach(t),fpr=i(Be),yT=n(Be,"LI",{});var dqe=s(yT);Ave=n(dqe,"STRONG",{});var vyt=s(Ave);mpr=r(vyt,"wav2vec2-conformer"),vyt.forEach(t),gpr=r(dqe," \u2014 "),DH=n(dqe,"A",{href:!0});var Fyt=s(DH);hpr=r(Fyt,"Wav2Vec2ConformerForCTC"),Fyt.forEach(t),ppr=r(dqe," (Wav2Vec2-Conformer model)"),dqe.forEach(t),_pr=i(Be),xT=n(Be,"LI",{});var cqe=s(xT);Lve=n(cqe,"STRONG",{});var Tyt=s(Lve);upr=r(Tyt,"wavlm"),Tyt.forEach(t),bpr=r(cqe," \u2014 "),GH=n(cqe,"A",{href:!0});var Myt=s(GH);vpr=r(Myt,"WavLMForCTC"),Myt.forEach(t),Fpr=r(cqe," (WavLM model)"),cqe.forEach(t),Be.forEach(t),Tpr=i(Ca),$T=n(Ca,"P",{});var fqe=s($T);Mpr=r(fqe,"The model is set in evaluation mode by default using "),yve=n(fqe,"CODE",{});var Eyt=s(yve);Epr=r(Eyt,"model.eval()"),Eyt.forEach(t),Cpr=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(fqe,"CODE",{});var Cyt=s(xve);wpr=r(Cyt,"model.train()"),Cyt.forEach(t),fqe.forEach(t),Apr=i(Ca),T(kT.$$.fragment,Ca),Ca.forEach(t),Tl.forEach(t),Lze=i(f),Dd=n(f,"H2",{class:!0});var RWe=s(Dd);ST=n(RWe,"A",{id:!0,class:!0,href:!0});var wyt=s(ST);$ve=n(wyt,"SPAN",{});var Ayt=s($ve);T(u8.$$.fragment,Ayt),Ayt.forEach(t),wyt.forEach(t),Lpr=i(RWe),kve=n(RWe,"SPAN",{});var Lyt=s(kve);ypr=r(Lyt,"AutoModelForSpeechSeq2Seq"),Lyt.forEach(t),RWe.forEach(t),yze=i(f),Ho=n(f,"DIV",{class:!0});var Ml=s(Ho);T(b8.$$.fragment,Ml),xpr=i(Ml),Gd=n(Ml,"P",{});var Rte=s(Gd);$pr=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OH=n(Rte,"A",{href:!0});var yyt=s(OH);kpr=r(yyt,"from_pretrained()"),yyt.forEach(t),Spr=r(Rte," class method or the "),VH=n(Rte,"A",{href:!0});var xyt=s(VH);Rpr=r(xyt,"from_config()"),xyt.forEach(t),Ppr=r(Rte,` class
method.`),Rte.forEach(t),Bpr=i(Ml),v8=n(Ml,"P",{});var PWe=s(v8);Ipr=r(PWe,"This class cannot be instantiated directly using "),Sve=n(PWe,"CODE",{});var $yt=s(Sve);Npr=r($yt,"__init__()"),$yt.forEach(t),qpr=r(PWe," (throws an error)."),PWe.forEach(t),jpr=i(Ml),At=n(Ml,"DIV",{class:!0});var Yw=s(At);T(F8.$$.fragment,Yw),Dpr=i(Yw),Rve=n(Yw,"P",{});var kyt=s(Rve);Gpr=r(kyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kyt.forEach(t),Opr=i(Yw),Od=n(Yw,"P",{});var Pte=s(Od);Vpr=r(Pte,`Note:
Loading a model from its configuration file does `),Pve=n(Pte,"STRONG",{});var Syt=s(Pve);Xpr=r(Syt,"not"),Syt.forEach(t),zpr=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Pte,"A",{href:!0});var Ryt=s(XH);Qpr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),Wpr=r(Pte," to load the model weights."),Pte.forEach(t),Hpr=i(Yw),T(RT.$$.fragment,Yw),Yw.forEach(t),Upr=i(Ml),po=n(Ml,"DIV",{class:!0});var wa=s(po);T(T8.$$.fragment,wa),Jpr=i(wa),Bve=n(wa,"P",{});var Pyt=s(Bve);Ypr=r(Pyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pyt.forEach(t),Kpr=i(wa),Za=n(wa,"P",{});var Kw=s(Za);Zpr=r(Kw,"The model class to instantiate is selected based on the "),Ive=n(Kw,"CODE",{});var Byt=s(Ive);e_r=r(Byt,"model_type"),Byt.forEach(t),o_r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Nve=n(Kw,"CODE",{});var Iyt=s(Nve);r_r=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),t_r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(Kw,"CODE",{});var Nyt=s(qve);a_r=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),n_r=r(Kw,":"),Kw.forEach(t),s_r=i(wa),M8=n(wa,"UL",{});var BWe=s(M8);PT=n(BWe,"LI",{});var mqe=s(PT);jve=n(mqe,"STRONG",{});var qyt=s(jve);l_r=r(qyt,"speech-encoder-decoder"),qyt.forEach(t),i_r=r(mqe," \u2014 "),zH=n(mqe,"A",{href:!0});var jyt=s(zH);d_r=r(jyt,"SpeechEncoderDecoderModel"),jyt.forEach(t),c_r=r(mqe," (Speech Encoder decoder model)"),mqe.forEach(t),f_r=i(BWe),BT=n(BWe,"LI",{});var gqe=s(BT);Dve=n(gqe,"STRONG",{});var Dyt=s(Dve);m_r=r(Dyt,"speech_to_text"),Dyt.forEach(t),g_r=r(gqe," \u2014 "),QH=n(gqe,"A",{href:!0});var Gyt=s(QH);h_r=r(Gyt,"Speech2TextForConditionalGeneration"),Gyt.forEach(t),p_r=r(gqe," (Speech2Text model)"),gqe.forEach(t),BWe.forEach(t),__r=i(wa),IT=n(wa,"P",{});var hqe=s(IT);u_r=r(hqe,"The model is set in evaluation mode by default using "),Gve=n(hqe,"CODE",{});var Oyt=s(Gve);b_r=r(Oyt,"model.eval()"),Oyt.forEach(t),v_r=r(hqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(hqe,"CODE",{});var Vyt=s(Ove);F_r=r(Vyt,"model.train()"),Vyt.forEach(t),hqe.forEach(t),T_r=i(wa),T(NT.$$.fragment,wa),wa.forEach(t),Ml.forEach(t),xze=i(f),Vd=n(f,"H2",{class:!0});var IWe=s(Vd);qT=n(IWe,"A",{id:!0,class:!0,href:!0});var Xyt=s(qT);Vve=n(Xyt,"SPAN",{});var zyt=s(Vve);T(E8.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),M_r=i(IWe),Xve=n(IWe,"SPAN",{});var Qyt=s(Xve);E_r=r(Qyt,"AutoModelForAudioXVector"),Qyt.forEach(t),IWe.forEach(t),$ze=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T(C8.$$.fragment,El),C_r=i(El),Xd=n(El,"P",{});var Bte=s(Xd);w_r=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),WH=n(Bte,"A",{href:!0});var Wyt=s(WH);A_r=r(Wyt,"from_pretrained()"),Wyt.forEach(t),L_r=r(Bte," class method or the "),HH=n(Bte,"A",{href:!0});var Hyt=s(HH);y_r=r(Hyt,"from_config()"),Hyt.forEach(t),x_r=r(Bte,` class
method.`),Bte.forEach(t),$_r=i(El),w8=n(El,"P",{});var NWe=s(w8);k_r=r(NWe,"This class cannot be instantiated directly using "),zve=n(NWe,"CODE",{});var Uyt=s(zve);S_r=r(Uyt,"__init__()"),Uyt.forEach(t),R_r=r(NWe," (throws an error)."),NWe.forEach(t),P_r=i(El),Lt=n(El,"DIV",{class:!0});var Zw=s(Lt);T(A8.$$.fragment,Zw),B_r=i(Zw),Qve=n(Zw,"P",{});var Jyt=s(Qve);I_r=r(Jyt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jyt.forEach(t),N_r=i(Zw),zd=n(Zw,"P",{});var Ite=s(zd);q_r=r(Ite,`Note:
Loading a model from its configuration file does `),Wve=n(Ite,"STRONG",{});var Yyt=s(Wve);j_r=r(Yyt,"not"),Yyt.forEach(t),D_r=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(Ite,"A",{href:!0});var Kyt=s(UH);G_r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),O_r=r(Ite," to load the model weights."),Ite.forEach(t),V_r=i(Zw),T(jT.$$.fragment,Zw),Zw.forEach(t),X_r=i(El),_o=n(El,"DIV",{class:!0});var Aa=s(_o);T(L8.$$.fragment,Aa),z_r=i(Aa),Hve=n(Aa,"P",{});var Zyt=s(Hve);Q_r=r(Zyt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zyt.forEach(t),W_r=i(Aa),en=n(Aa,"P",{});var eA=s(en);H_r=r(eA,"The model class to instantiate is selected based on the "),Uve=n(eA,"CODE",{});var e8t=s(Uve);U_r=r(e8t,"model_type"),e8t.forEach(t),J_r=r(eA,` property of the config object (either
passed as an argument or loaded from `),Jve=n(eA,"CODE",{});var o8t=s(Jve);Y_r=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),K_r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(eA,"CODE",{});var r8t=s(Yve);Z_r=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),eur=r(eA,":"),eA.forEach(t),our=i(Aa),tt=n(Aa,"UL",{});var Cl=s(tt);DT=n(Cl,"LI",{});var pqe=s(DT);Kve=n(pqe,"STRONG",{});var t8t=s(Kve);rur=r(t8t,"data2vec-audio"),t8t.forEach(t),tur=r(pqe," \u2014 "),JH=n(pqe,"A",{href:!0});var a8t=s(JH);aur=r(a8t,"Data2VecAudioForXVector"),a8t.forEach(t),nur=r(pqe," (Data2VecAudio model)"),pqe.forEach(t),sur=i(Cl),GT=n(Cl,"LI",{});var _qe=s(GT);Zve=n(_qe,"STRONG",{});var n8t=s(Zve);lur=r(n8t,"unispeech-sat"),n8t.forEach(t),iur=r(_qe," \u2014 "),YH=n(_qe,"A",{href:!0});var s8t=s(YH);dur=r(s8t,"UniSpeechSatForXVector"),s8t.forEach(t),cur=r(_qe," (UniSpeechSat model)"),_qe.forEach(t),fur=i(Cl),OT=n(Cl,"LI",{});var uqe=s(OT);eFe=n(uqe,"STRONG",{});var l8t=s(eFe);mur=r(l8t,"wav2vec2"),l8t.forEach(t),gur=r(uqe," \u2014 "),KH=n(uqe,"A",{href:!0});var i8t=s(KH);hur=r(i8t,"Wav2Vec2ForXVector"),i8t.forEach(t),pur=r(uqe," (Wav2Vec2 model)"),uqe.forEach(t),_ur=i(Cl),VT=n(Cl,"LI",{});var bqe=s(VT);oFe=n(bqe,"STRONG",{});var d8t=s(oFe);uur=r(d8t,"wav2vec2-conformer"),d8t.forEach(t),bur=r(bqe," \u2014 "),ZH=n(bqe,"A",{href:!0});var c8t=s(ZH);vur=r(c8t,"Wav2Vec2ConformerForXVector"),c8t.forEach(t),Fur=r(bqe," (Wav2Vec2-Conformer model)"),bqe.forEach(t),Tur=i(Cl),XT=n(Cl,"LI",{});var vqe=s(XT);rFe=n(vqe,"STRONG",{});var f8t=s(rFe);Mur=r(f8t,"wavlm"),f8t.forEach(t),Eur=r(vqe," \u2014 "),eU=n(vqe,"A",{href:!0});var m8t=s(eU);Cur=r(m8t,"WavLMForXVector"),m8t.forEach(t),wur=r(vqe," (WavLM model)"),vqe.forEach(t),Cl.forEach(t),Aur=i(Aa),zT=n(Aa,"P",{});var Fqe=s(zT);Lur=r(Fqe,"The model is set in evaluation mode by default using "),tFe=n(Fqe,"CODE",{});var g8t=s(tFe);yur=r(g8t,"model.eval()"),g8t.forEach(t),xur=r(Fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=n(Fqe,"CODE",{});var h8t=s(aFe);$ur=r(h8t,"model.train()"),h8t.forEach(t),Fqe.forEach(t),kur=i(Aa),T(QT.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),kze=i(f),Qd=n(f,"H2",{class:!0});var qWe=s(Qd);WT=n(qWe,"A",{id:!0,class:!0,href:!0});var p8t=s(WT);nFe=n(p8t,"SPAN",{});var _8t=s(nFe);T(y8.$$.fragment,_8t),_8t.forEach(t),p8t.forEach(t),Sur=i(qWe),sFe=n(qWe,"SPAN",{});var u8t=s(sFe);Rur=r(u8t,"AutoModelForMaskedImageModeling"),u8t.forEach(t),qWe.forEach(t),Sze=i(f),Jo=n(f,"DIV",{class:!0});var wl=s(Jo);T(x8.$$.fragment,wl),Pur=i(wl),Wd=n(wl,"P",{});var Nte=s(Wd);Bur=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oU=n(Nte,"A",{href:!0});var b8t=s(oU);Iur=r(b8t,"from_pretrained()"),b8t.forEach(t),Nur=r(Nte," class method or the "),rU=n(Nte,"A",{href:!0});var v8t=s(rU);qur=r(v8t,"from_config()"),v8t.forEach(t),jur=r(Nte,` class
method.`),Nte.forEach(t),Dur=i(wl),$8=n(wl,"P",{});var jWe=s($8);Gur=r(jWe,"This class cannot be instantiated directly using "),lFe=n(jWe,"CODE",{});var F8t=s(lFe);Our=r(F8t,"__init__()"),F8t.forEach(t),Vur=r(jWe," (throws an error)."),jWe.forEach(t),Xur=i(wl),yt=n(wl,"DIV",{class:!0});var oA=s(yt);T(k8.$$.fragment,oA),zur=i(oA),iFe=n(oA,"P",{});var T8t=s(iFe);Qur=r(T8t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),T8t.forEach(t),Wur=i(oA),Hd=n(oA,"P",{});var qte=s(Hd);Hur=r(qte,`Note:
Loading a model from its configuration file does `),dFe=n(qte,"STRONG",{});var M8t=s(dFe);Uur=r(M8t,"not"),M8t.forEach(t),Jur=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(qte,"A",{href:!0});var E8t=s(tU);Yur=r(E8t,"from_pretrained()"),E8t.forEach(t),Kur=r(qte," to load the model weights."),qte.forEach(t),Zur=i(oA),T(HT.$$.fragment,oA),oA.forEach(t),e1r=i(wl),uo=n(wl,"DIV",{class:!0});var La=s(uo);T(S8.$$.fragment,La),o1r=i(La),cFe=n(La,"P",{});var C8t=s(cFe);r1r=r(C8t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),C8t.forEach(t),t1r=i(La),on=n(La,"P",{});var rA=s(on);a1r=r(rA,"The model class to instantiate is selected based on the "),fFe=n(rA,"CODE",{});var w8t=s(fFe);n1r=r(w8t,"model_type"),w8t.forEach(t),s1r=r(rA,` property of the config object (either
passed as an argument or loaded from `),mFe=n(rA,"CODE",{});var A8t=s(mFe);l1r=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),i1r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(rA,"CODE",{});var L8t=s(gFe);d1r=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),c1r=r(rA,":"),rA.forEach(t),f1r=i(La),rn=n(La,"UL",{});var tA=s(rn);UT=n(tA,"LI",{});var Tqe=s(UT);hFe=n(Tqe,"STRONG",{});var y8t=s(hFe);m1r=r(y8t,"deit"),y8t.forEach(t),g1r=r(Tqe," \u2014 "),aU=n(Tqe,"A",{href:!0});var x8t=s(aU);h1r=r(x8t,"DeiTForMaskedImageModeling"),x8t.forEach(t),p1r=r(Tqe," (DeiT model)"),Tqe.forEach(t),_1r=i(tA),JT=n(tA,"LI",{});var Mqe=s(JT);pFe=n(Mqe,"STRONG",{});var $8t=s(pFe);u1r=r($8t,"swin"),$8t.forEach(t),b1r=r(Mqe," \u2014 "),nU=n(Mqe,"A",{href:!0});var k8t=s(nU);v1r=r(k8t,"SwinForMaskedImageModeling"),k8t.forEach(t),F1r=r(Mqe," (Swin Transformer model)"),Mqe.forEach(t),T1r=i(tA),YT=n(tA,"LI",{});var Eqe=s(YT);_Fe=n(Eqe,"STRONG",{});var S8t=s(_Fe);M1r=r(S8t,"swinv2"),S8t.forEach(t),E1r=r(Eqe," \u2014 "),sU=n(Eqe,"A",{href:!0});var R8t=s(sU);C1r=r(R8t,"Swinv2ForMaskedImageModeling"),R8t.forEach(t),w1r=r(Eqe," (Swin Transformer V2 model)"),Eqe.forEach(t),A1r=i(tA),KT=n(tA,"LI",{});var Cqe=s(KT);uFe=n(Cqe,"STRONG",{});var P8t=s(uFe);L1r=r(P8t,"vit"),P8t.forEach(t),y1r=r(Cqe," \u2014 "),lU=n(Cqe,"A",{href:!0});var B8t=s(lU);x1r=r(B8t,"ViTForMaskedImageModeling"),B8t.forEach(t),$1r=r(Cqe," (ViT model)"),Cqe.forEach(t),tA.forEach(t),k1r=i(La),ZT=n(La,"P",{});var wqe=s(ZT);S1r=r(wqe,"The model is set in evaluation mode by default using "),bFe=n(wqe,"CODE",{});var I8t=s(bFe);R1r=r(I8t,"model.eval()"),I8t.forEach(t),P1r=r(wqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vFe=n(wqe,"CODE",{});var N8t=s(vFe);B1r=r(N8t,"model.train()"),N8t.forEach(t),wqe.forEach(t),I1r=i(La),T(e7.$$.fragment,La),La.forEach(t),wl.forEach(t),Rze=i(f),Ud=n(f,"H2",{class:!0});var DWe=s(Ud);o7=n(DWe,"A",{id:!0,class:!0,href:!0});var q8t=s(o7);FFe=n(q8t,"SPAN",{});var j8t=s(FFe);T(R8.$$.fragment,j8t),j8t.forEach(t),q8t.forEach(t),N1r=i(DWe),TFe=n(DWe,"SPAN",{});var D8t=s(TFe);q1r=r(D8t,"AutoModelForObjectDetection"),D8t.forEach(t),DWe.forEach(t),Pze=i(f),Yo=n(f,"DIV",{class:!0});var Al=s(Yo);T(P8.$$.fragment,Al),j1r=i(Al),Jd=n(Al,"P",{});var jte=s(Jd);D1r=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iU=n(jte,"A",{href:!0});var G8t=s(iU);G1r=r(G8t,"from_pretrained()"),G8t.forEach(t),O1r=r(jte," class method or the "),dU=n(jte,"A",{href:!0});var O8t=s(dU);V1r=r(O8t,"from_config()"),O8t.forEach(t),X1r=r(jte,` class
method.`),jte.forEach(t),z1r=i(Al),B8=n(Al,"P",{});var GWe=s(B8);Q1r=r(GWe,"This class cannot be instantiated directly using "),MFe=n(GWe,"CODE",{});var V8t=s(MFe);W1r=r(V8t,"__init__()"),V8t.forEach(t),H1r=r(GWe," (throws an error)."),GWe.forEach(t),U1r=i(Al),xt=n(Al,"DIV",{class:!0});var aA=s(xt);T(I8.$$.fragment,aA),J1r=i(aA),EFe=n(aA,"P",{});var X8t=s(EFe);Y1r=r(X8t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),X8t.forEach(t),K1r=i(aA),Yd=n(aA,"P",{});var Dte=s(Yd);Z1r=r(Dte,`Note:
Loading a model from its configuration file does `),CFe=n(Dte,"STRONG",{});var z8t=s(CFe);e4r=r(z8t,"not"),z8t.forEach(t),o4r=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(Dte,"A",{href:!0});var Q8t=s(cU);r4r=r(Q8t,"from_pretrained()"),Q8t.forEach(t),t4r=r(Dte," to load the model weights."),Dte.forEach(t),a4r=i(aA),T(r7.$$.fragment,aA),aA.forEach(t),n4r=i(Al),bo=n(Al,"DIV",{class:!0});var ya=s(bo);T(N8.$$.fragment,ya),s4r=i(ya),wFe=n(ya,"P",{});var W8t=s(wFe);l4r=r(W8t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),W8t.forEach(t),i4r=i(ya),tn=n(ya,"P",{});var nA=s(tn);d4r=r(nA,"The model class to instantiate is selected based on the "),AFe=n(nA,"CODE",{});var H8t=s(AFe);c4r=r(H8t,"model_type"),H8t.forEach(t),f4r=r(nA,` property of the config object (either
passed as an argument or loaded from `),LFe=n(nA,"CODE",{});var U8t=s(LFe);m4r=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),g4r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(nA,"CODE",{});var J8t=s(yFe);h4r=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),p4r=r(nA,":"),nA.forEach(t),_4r=i(ya),q8=n(ya,"UL",{});var OWe=s(q8);t7=n(OWe,"LI",{});var Aqe=s(t7);xFe=n(Aqe,"STRONG",{});var Y8t=s(xFe);u4r=r(Y8t,"detr"),Y8t.forEach(t),b4r=r(Aqe," \u2014 "),fU=n(Aqe,"A",{href:!0});var K8t=s(fU);v4r=r(K8t,"DetrForObjectDetection"),K8t.forEach(t),F4r=r(Aqe," (DETR model)"),Aqe.forEach(t),T4r=i(OWe),a7=n(OWe,"LI",{});var Lqe=s(a7);$Fe=n(Lqe,"STRONG",{});var Z8t=s($Fe);M4r=r(Z8t,"yolos"),Z8t.forEach(t),E4r=r(Lqe," \u2014 "),mU=n(Lqe,"A",{href:!0});var ext=s(mU);C4r=r(ext,"YolosForObjectDetection"),ext.forEach(t),w4r=r(Lqe," (YOLOS model)"),Lqe.forEach(t),OWe.forEach(t),A4r=i(ya),n7=n(ya,"P",{});var yqe=s(n7);L4r=r(yqe,"The model is set in evaluation mode by default using "),kFe=n(yqe,"CODE",{});var oxt=s(kFe);y4r=r(oxt,"model.eval()"),oxt.forEach(t),x4r=r(yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=n(yqe,"CODE",{});var rxt=s(SFe);$4r=r(rxt,"model.train()"),rxt.forEach(t),yqe.forEach(t),k4r=i(ya),T(s7.$$.fragment,ya),ya.forEach(t),Al.forEach(t),Bze=i(f),Kd=n(f,"H2",{class:!0});var VWe=s(Kd);l7=n(VWe,"A",{id:!0,class:!0,href:!0});var txt=s(l7);RFe=n(txt,"SPAN",{});var axt=s(RFe);T(j8.$$.fragment,axt),axt.forEach(t),txt.forEach(t),S4r=i(VWe),PFe=n(VWe,"SPAN",{});var nxt=s(PFe);R4r=r(nxt,"AutoModelForImageSegmentation"),nxt.forEach(t),VWe.forEach(t),Ize=i(f),Ko=n(f,"DIV",{class:!0});var Ll=s(Ko);T(D8.$$.fragment,Ll),P4r=i(Ll),Zd=n(Ll,"P",{});var Gte=s(Zd);B4r=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),gU=n(Gte,"A",{href:!0});var sxt=s(gU);I4r=r(sxt,"from_pretrained()"),sxt.forEach(t),N4r=r(Gte," class method or the "),hU=n(Gte,"A",{href:!0});var lxt=s(hU);q4r=r(lxt,"from_config()"),lxt.forEach(t),j4r=r(Gte,` class
method.`),Gte.forEach(t),D4r=i(Ll),G8=n(Ll,"P",{});var XWe=s(G8);G4r=r(XWe,"This class cannot be instantiated directly using "),BFe=n(XWe,"CODE",{});var ixt=s(BFe);O4r=r(ixt,"__init__()"),ixt.forEach(t),V4r=r(XWe," (throws an error)."),XWe.forEach(t),X4r=i(Ll),$t=n(Ll,"DIV",{class:!0});var sA=s($t);T(O8.$$.fragment,sA),z4r=i(sA),IFe=n(sA,"P",{});var dxt=s(IFe);Q4r=r(dxt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dxt.forEach(t),W4r=i(sA),ec=n(sA,"P",{});var Ote=s(ec);H4r=r(Ote,`Note:
Loading a model from its configuration file does `),NFe=n(Ote,"STRONG",{});var cxt=s(NFe);U4r=r(cxt,"not"),cxt.forEach(t),J4r=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(Ote,"A",{href:!0});var fxt=s(pU);Y4r=r(fxt,"from_pretrained()"),fxt.forEach(t),K4r=r(Ote," to load the model weights."),Ote.forEach(t),Z4r=i(sA),T(i7.$$.fragment,sA),sA.forEach(t),e2r=i(Ll),vo=n(Ll,"DIV",{class:!0});var xa=s(vo);T(V8.$$.fragment,xa),o2r=i(xa),qFe=n(xa,"P",{});var mxt=s(qFe);r2r=r(mxt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mxt.forEach(t),t2r=i(xa),an=n(xa,"P",{});var lA=s(an);a2r=r(lA,"The model class to instantiate is selected based on the "),jFe=n(lA,"CODE",{});var gxt=s(jFe);n2r=r(gxt,"model_type"),gxt.forEach(t),s2r=r(lA,` property of the config object (either
passed as an argument or loaded from `),DFe=n(lA,"CODE",{});var hxt=s(DFe);l2r=r(hxt,"pretrained_model_name_or_path"),hxt.forEach(t),i2r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(lA,"CODE",{});var pxt=s(GFe);d2r=r(pxt,"pretrained_model_name_or_path"),pxt.forEach(t),c2r=r(lA,":"),lA.forEach(t),f2r=i(xa),OFe=n(xa,"UL",{});var _xt=s(OFe);d7=n(_xt,"LI",{});var xqe=s(d7);VFe=n(xqe,"STRONG",{});var uxt=s(VFe);m2r=r(uxt,"detr"),uxt.forEach(t),g2r=r(xqe," \u2014 "),_U=n(xqe,"A",{href:!0});var bxt=s(_U);h2r=r(bxt,"DetrForSegmentation"),bxt.forEach(t),p2r=r(xqe," (DETR model)"),xqe.forEach(t),_xt.forEach(t),_2r=i(xa),c7=n(xa,"P",{});var $qe=s(c7);u2r=r($qe,"The model is set in evaluation mode by default using "),XFe=n($qe,"CODE",{});var vxt=s(XFe);b2r=r(vxt,"model.eval()"),vxt.forEach(t),v2r=r($qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=n($qe,"CODE",{});var Fxt=s(zFe);F2r=r(Fxt,"model.train()"),Fxt.forEach(t),$qe.forEach(t),T2r=i(xa),T(f7.$$.fragment,xa),xa.forEach(t),Ll.forEach(t),Nze=i(f),oc=n(f,"H2",{class:!0});var zWe=s(oc);m7=n(zWe,"A",{id:!0,class:!0,href:!0});var Txt=s(m7);QFe=n(Txt,"SPAN",{});var Mxt=s(QFe);T(X8.$$.fragment,Mxt),Mxt.forEach(t),Txt.forEach(t),M2r=i(zWe),WFe=n(zWe,"SPAN",{});var Ext=s(WFe);E2r=r(Ext,"AutoModelForSemanticSegmentation"),Ext.forEach(t),zWe.forEach(t),qze=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(z8.$$.fragment,yl),C2r=i(yl),rc=n(yl,"P",{});var Vte=s(rc);w2r=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uU=n(Vte,"A",{href:!0});var Cxt=s(uU);A2r=r(Cxt,"from_pretrained()"),Cxt.forEach(t),L2r=r(Vte," class method or the "),bU=n(Vte,"A",{href:!0});var wxt=s(bU);y2r=r(wxt,"from_config()"),wxt.forEach(t),x2r=r(Vte,` class
method.`),Vte.forEach(t),$2r=i(yl),Q8=n(yl,"P",{});var QWe=s(Q8);k2r=r(QWe,"This class cannot be instantiated directly using "),HFe=n(QWe,"CODE",{});var Axt=s(HFe);S2r=r(Axt,"__init__()"),Axt.forEach(t),R2r=r(QWe," (throws an error)."),QWe.forEach(t),P2r=i(yl),kt=n(yl,"DIV",{class:!0});var iA=s(kt);T(W8.$$.fragment,iA),B2r=i(iA),UFe=n(iA,"P",{});var Lxt=s(UFe);I2r=r(Lxt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Lxt.forEach(t),N2r=i(iA),tc=n(iA,"P",{});var Xte=s(tc);q2r=r(Xte,`Note:
Loading a model from its configuration file does `),JFe=n(Xte,"STRONG",{});var yxt=s(JFe);j2r=r(yxt,"not"),yxt.forEach(t),D2r=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(Xte,"A",{href:!0});var xxt=s(vU);G2r=r(xxt,"from_pretrained()"),xxt.forEach(t),O2r=r(Xte," to load the model weights."),Xte.forEach(t),V2r=i(iA),T(g7.$$.fragment,iA),iA.forEach(t),X2r=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(H8.$$.fragment,$a),z2r=i($a),YFe=n($a,"P",{});var $xt=s(YFe);Q2r=r($xt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$xt.forEach(t),W2r=i($a),nn=n($a,"P",{});var dA=s(nn);H2r=r(dA,"The model class to instantiate is selected based on the "),KFe=n(dA,"CODE",{});var kxt=s(KFe);U2r=r(kxt,"model_type"),kxt.forEach(t),J2r=r(dA,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(dA,"CODE",{});var Sxt=s(ZFe);Y2r=r(Sxt,"pretrained_model_name_or_path"),Sxt.forEach(t),K2r=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(dA,"CODE",{});var Rxt=s(e6e);Z2r=r(Rxt,"pretrained_model_name_or_path"),Rxt.forEach(t),ebr=r(dA,":"),dA.forEach(t),obr=i($a),at=n($a,"UL",{});var xl=s(at);h7=n(xl,"LI",{});var kqe=s(h7);o6e=n(kqe,"STRONG",{});var Pxt=s(o6e);rbr=r(Pxt,"beit"),Pxt.forEach(t),tbr=r(kqe," \u2014 "),FU=n(kqe,"A",{href:!0});var Bxt=s(FU);abr=r(Bxt,"BeitForSemanticSegmentation"),Bxt.forEach(t),nbr=r(kqe," (BEiT model)"),kqe.forEach(t),sbr=i(xl),p7=n(xl,"LI",{});var Sqe=s(p7);r6e=n(Sqe,"STRONG",{});var Ixt=s(r6e);lbr=r(Ixt,"data2vec-vision"),Ixt.forEach(t),ibr=r(Sqe," \u2014 "),TU=n(Sqe,"A",{href:!0});var Nxt=s(TU);dbr=r(Nxt,"Data2VecVisionForSemanticSegmentation"),Nxt.forEach(t),cbr=r(Sqe," (Data2VecVision model)"),Sqe.forEach(t),fbr=i(xl),_7=n(xl,"LI",{});var Rqe=s(_7);t6e=n(Rqe,"STRONG",{});var qxt=s(t6e);mbr=r(qxt,"dpt"),qxt.forEach(t),gbr=r(Rqe," \u2014 "),MU=n(Rqe,"A",{href:!0});var jxt=s(MU);hbr=r(jxt,"DPTForSemanticSegmentation"),jxt.forEach(t),pbr=r(Rqe," (DPT model)"),Rqe.forEach(t),_br=i(xl),u7=n(xl,"LI",{});var Pqe=s(u7);a6e=n(Pqe,"STRONG",{});var Dxt=s(a6e);ubr=r(Dxt,"mobilevit"),Dxt.forEach(t),bbr=r(Pqe," \u2014 "),EU=n(Pqe,"A",{href:!0});var Gxt=s(EU);vbr=r(Gxt,"MobileViTForSemanticSegmentation"),Gxt.forEach(t),Fbr=r(Pqe," (MobileViT model)"),Pqe.forEach(t),Tbr=i(xl),b7=n(xl,"LI",{});var Bqe=s(b7);n6e=n(Bqe,"STRONG",{});var Oxt=s(n6e);Mbr=r(Oxt,"segformer"),Oxt.forEach(t),Ebr=r(Bqe," \u2014 "),CU=n(Bqe,"A",{href:!0});var Vxt=s(CU);Cbr=r(Vxt,"SegformerForSemanticSegmentation"),Vxt.forEach(t),wbr=r(Bqe," (SegFormer model)"),Bqe.forEach(t),xl.forEach(t),Abr=i($a),v7=n($a,"P",{});var Iqe=s(v7);Lbr=r(Iqe,"The model is set in evaluation mode by default using "),s6e=n(Iqe,"CODE",{});var Xxt=s(s6e);ybr=r(Xxt,"model.eval()"),Xxt.forEach(t),xbr=r(Iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l6e=n(Iqe,"CODE",{});var zxt=s(l6e);$br=r(zxt,"model.train()"),zxt.forEach(t),Iqe.forEach(t),kbr=i($a),T(F7.$$.fragment,$a),$a.forEach(t),yl.forEach(t),jze=i(f),ac=n(f,"H2",{class:!0});var WWe=s(ac);T7=n(WWe,"A",{id:!0,class:!0,href:!0});var Qxt=s(T7);i6e=n(Qxt,"SPAN",{});var Wxt=s(i6e);T(U8.$$.fragment,Wxt),Wxt.forEach(t),Qxt.forEach(t),Sbr=i(WWe),d6e=n(WWe,"SPAN",{});var Hxt=s(d6e);Rbr=r(Hxt,"AutoModelForInstanceSegmentation"),Hxt.forEach(t),WWe.forEach(t),Dze=i(f),er=n(f,"DIV",{class:!0});var $l=s(er);T(J8.$$.fragment,$l),Pbr=i($l),nc=n($l,"P",{});var zte=s(nc);Bbr=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wU=n(zte,"A",{href:!0});var Uxt=s(wU);Ibr=r(Uxt,"from_pretrained()"),Uxt.forEach(t),Nbr=r(zte," class method or the "),AU=n(zte,"A",{href:!0});var Jxt=s(AU);qbr=r(Jxt,"from_config()"),Jxt.forEach(t),jbr=r(zte,` class
method.`),zte.forEach(t),Dbr=i($l),Y8=n($l,"P",{});var HWe=s(Y8);Gbr=r(HWe,"This class cannot be instantiated directly using "),c6e=n(HWe,"CODE",{});var Yxt=s(c6e);Obr=r(Yxt,"__init__()"),Yxt.forEach(t),Vbr=r(HWe," (throws an error)."),HWe.forEach(t),Xbr=i($l),St=n($l,"DIV",{class:!0});var cA=s(St);T(K8.$$.fragment,cA),zbr=i(cA),f6e=n(cA,"P",{});var Kxt=s(f6e);Qbr=r(Kxt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Kxt.forEach(t),Wbr=i(cA),sc=n(cA,"P",{});var Qte=s(sc);Hbr=r(Qte,`Note:
Loading a model from its configuration file does `),m6e=n(Qte,"STRONG",{});var Zxt=s(m6e);Ubr=r(Zxt,"not"),Zxt.forEach(t),Jbr=r(Qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(Qte,"A",{href:!0});var e$t=s(LU);Ybr=r(e$t,"from_pretrained()"),e$t.forEach(t),Kbr=r(Qte," to load the model weights."),Qte.forEach(t),Zbr=i(cA),T(M7.$$.fragment,cA),cA.forEach(t),evr=i($l),To=n($l,"DIV",{class:!0});var ka=s(To);T(Z8.$$.fragment,ka),ovr=i(ka),g6e=n(ka,"P",{});var o$t=s(g6e);rvr=r(o$t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),o$t.forEach(t),tvr=i(ka),sn=n(ka,"P",{});var fA=s(sn);avr=r(fA,"The model class to instantiate is selected based on the "),h6e=n(fA,"CODE",{});var r$t=s(h6e);nvr=r(r$t,"model_type"),r$t.forEach(t),svr=r(fA,` property of the config object (either
passed as an argument or loaded from `),p6e=n(fA,"CODE",{});var t$t=s(p6e);lvr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),ivr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(fA,"CODE",{});var a$t=s(_6e);dvr=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),cvr=r(fA,":"),fA.forEach(t),fvr=i(ka),u6e=n(ka,"UL",{});var n$t=s(u6e);E7=n(n$t,"LI",{});var Nqe=s(E7);b6e=n(Nqe,"STRONG",{});var s$t=s(b6e);mvr=r(s$t,"maskformer"),s$t.forEach(t),gvr=r(Nqe," \u2014 "),yU=n(Nqe,"A",{href:!0});var l$t=s(yU);hvr=r(l$t,"MaskFormerForInstanceSegmentation"),l$t.forEach(t),pvr=r(Nqe," (MaskFormer model)"),Nqe.forEach(t),n$t.forEach(t),_vr=i(ka),C7=n(ka,"P",{});var qqe=s(C7);uvr=r(qqe,"The model is set in evaluation mode by default using "),v6e=n(qqe,"CODE",{});var i$t=s(v6e);bvr=r(i$t,"model.eval()"),i$t.forEach(t),vvr=r(qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F6e=n(qqe,"CODE",{});var d$t=s(F6e);Fvr=r(d$t,"model.train()"),d$t.forEach(t),qqe.forEach(t),Tvr=i(ka),T(w7.$$.fragment,ka),ka.forEach(t),$l.forEach(t),Gze=i(f),lc=n(f,"H2",{class:!0});var UWe=s(lc);A7=n(UWe,"A",{id:!0,class:!0,href:!0});var c$t=s(A7);T6e=n(c$t,"SPAN",{});var f$t=s(T6e);T(ex.$$.fragment,f$t),f$t.forEach(t),c$t.forEach(t),Mvr=i(UWe),M6e=n(UWe,"SPAN",{});var m$t=s(M6e);Evr=r(m$t,"TFAutoModel"),m$t.forEach(t),UWe.forEach(t),Oze=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(ox.$$.fragment,kl),Cvr=i(kl),ic=n(kl,"P",{});var Wte=s(ic);wvr=r(Wte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xU=n(Wte,"A",{href:!0});var g$t=s(xU);Avr=r(g$t,"from_pretrained()"),g$t.forEach(t),Lvr=r(Wte," class method or the "),$U=n(Wte,"A",{href:!0});var h$t=s($U);yvr=r(h$t,"from_config()"),h$t.forEach(t),xvr=r(Wte,` class
method.`),Wte.forEach(t),$vr=i(kl),rx=n(kl,"P",{});var JWe=s(rx);kvr=r(JWe,"This class cannot be instantiated directly using "),E6e=n(JWe,"CODE",{});var p$t=s(E6e);Svr=r(p$t,"__init__()"),p$t.forEach(t),Rvr=r(JWe," (throws an error)."),JWe.forEach(t),Pvr=i(kl),Rt=n(kl,"DIV",{class:!0});var mA=s(Rt);T(tx.$$.fragment,mA),Bvr=i(mA),C6e=n(mA,"P",{});var _$t=s(C6e);Ivr=r(_$t,"Instantiates one of the base model classes of the library from a configuration."),_$t.forEach(t),Nvr=i(mA),dc=n(mA,"P",{});var Hte=s(dc);qvr=r(Hte,`Note:
Loading a model from its configuration file does `),w6e=n(Hte,"STRONG",{});var u$t=s(w6e);jvr=r(u$t,"not"),u$t.forEach(t),Dvr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(Hte,"A",{href:!0});var b$t=s(kU);Gvr=r(b$t,"from_pretrained()"),b$t.forEach(t),Ovr=r(Hte," to load the model weights."),Hte.forEach(t),Vvr=i(mA),T(L7.$$.fragment,mA),mA.forEach(t),Xvr=i(kl),xr=n(kl,"DIV",{class:!0});var Sl=s(xr);T(ax.$$.fragment,Sl),zvr=i(Sl),A6e=n(Sl,"P",{});var v$t=s(A6e);Qvr=r(v$t,"Instantiate one of the base model classes of the library from a pretrained model."),v$t.forEach(t),Wvr=i(Sl),ln=n(Sl,"P",{});var gA=s(ln);Hvr=r(gA,"The model class to instantiate is selected based on the "),L6e=n(gA,"CODE",{});var F$t=s(L6e);Uvr=r(F$t,"model_type"),F$t.forEach(t),Jvr=r(gA,` property of the config object (either
passed as an argument or loaded from `),y6e=n(gA,"CODE",{});var T$t=s(y6e);Yvr=r(T$t,"pretrained_model_name_or_path"),T$t.forEach(t),Kvr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(gA,"CODE",{});var M$t=s(x6e);Zvr=r(M$t,"pretrained_model_name_or_path"),M$t.forEach(t),eFr=r(gA,":"),gA.forEach(t),oFr=i(Sl),q=n(Sl,"UL",{});var D=s(q);y7=n(D,"LI",{});var jqe=s(y7);$6e=n(jqe,"STRONG",{});var E$t=s($6e);rFr=r(E$t,"albert"),E$t.forEach(t),tFr=r(jqe," \u2014 "),SU=n(jqe,"A",{href:!0});var C$t=s(SU);aFr=r(C$t,"TFAlbertModel"),C$t.forEach(t),nFr=r(jqe," (ALBERT model)"),jqe.forEach(t),sFr=i(D),x7=n(D,"LI",{});var Dqe=s(x7);k6e=n(Dqe,"STRONG",{});var w$t=s(k6e);lFr=r(w$t,"bart"),w$t.forEach(t),iFr=r(Dqe," \u2014 "),RU=n(Dqe,"A",{href:!0});var A$t=s(RU);dFr=r(A$t,"TFBartModel"),A$t.forEach(t),cFr=r(Dqe," (BART model)"),Dqe.forEach(t),fFr=i(D),$7=n(D,"LI",{});var Gqe=s($7);S6e=n(Gqe,"STRONG",{});var L$t=s(S6e);mFr=r(L$t,"bert"),L$t.forEach(t),gFr=r(Gqe," \u2014 "),PU=n(Gqe,"A",{href:!0});var y$t=s(PU);hFr=r(y$t,"TFBertModel"),y$t.forEach(t),pFr=r(Gqe," (BERT model)"),Gqe.forEach(t),_Fr=i(D),k7=n(D,"LI",{});var Oqe=s(k7);R6e=n(Oqe,"STRONG",{});var x$t=s(R6e);uFr=r(x$t,"blenderbot"),x$t.forEach(t),bFr=r(Oqe," \u2014 "),BU=n(Oqe,"A",{href:!0});var $$t=s(BU);vFr=r($$t,"TFBlenderbotModel"),$$t.forEach(t),FFr=r(Oqe," (Blenderbot model)"),Oqe.forEach(t),TFr=i(D),S7=n(D,"LI",{});var Vqe=s(S7);P6e=n(Vqe,"STRONG",{});var k$t=s(P6e);MFr=r(k$t,"blenderbot-small"),k$t.forEach(t),EFr=r(Vqe," \u2014 "),IU=n(Vqe,"A",{href:!0});var S$t=s(IU);CFr=r(S$t,"TFBlenderbotSmallModel"),S$t.forEach(t),wFr=r(Vqe," (BlenderbotSmall model)"),Vqe.forEach(t),AFr=i(D),R7=n(D,"LI",{});var Xqe=s(R7);B6e=n(Xqe,"STRONG",{});var R$t=s(B6e);LFr=r(R$t,"camembert"),R$t.forEach(t),yFr=r(Xqe," \u2014 "),NU=n(Xqe,"A",{href:!0});var P$t=s(NU);xFr=r(P$t,"TFCamembertModel"),P$t.forEach(t),$Fr=r(Xqe," (CamemBERT model)"),Xqe.forEach(t),kFr=i(D),P7=n(D,"LI",{});var zqe=s(P7);I6e=n(zqe,"STRONG",{});var B$t=s(I6e);SFr=r(B$t,"clip"),B$t.forEach(t),RFr=r(zqe," \u2014 "),qU=n(zqe,"A",{href:!0});var I$t=s(qU);PFr=r(I$t,"TFCLIPModel"),I$t.forEach(t),BFr=r(zqe," (CLIP model)"),zqe.forEach(t),IFr=i(D),B7=n(D,"LI",{});var Qqe=s(B7);N6e=n(Qqe,"STRONG",{});var N$t=s(N6e);NFr=r(N$t,"convbert"),N$t.forEach(t),qFr=r(Qqe," \u2014 "),jU=n(Qqe,"A",{href:!0});var q$t=s(jU);jFr=r(q$t,"TFConvBertModel"),q$t.forEach(t),DFr=r(Qqe," (ConvBERT model)"),Qqe.forEach(t),GFr=i(D),I7=n(D,"LI",{});var Wqe=s(I7);q6e=n(Wqe,"STRONG",{});var j$t=s(q6e);OFr=r(j$t,"convnext"),j$t.forEach(t),VFr=r(Wqe," \u2014 "),DU=n(Wqe,"A",{href:!0});var D$t=s(DU);XFr=r(D$t,"TFConvNextModel"),D$t.forEach(t),zFr=r(Wqe," (ConvNeXT model)"),Wqe.forEach(t),QFr=i(D),N7=n(D,"LI",{});var Hqe=s(N7);j6e=n(Hqe,"STRONG",{});var G$t=s(j6e);WFr=r(G$t,"ctrl"),G$t.forEach(t),HFr=r(Hqe," \u2014 "),GU=n(Hqe,"A",{href:!0});var O$t=s(GU);UFr=r(O$t,"TFCTRLModel"),O$t.forEach(t),JFr=r(Hqe," (CTRL model)"),Hqe.forEach(t),YFr=i(D),q7=n(D,"LI",{});var Uqe=s(q7);D6e=n(Uqe,"STRONG",{});var V$t=s(D6e);KFr=r(V$t,"data2vec-vision"),V$t.forEach(t),ZFr=r(Uqe," \u2014 "),OU=n(Uqe,"A",{href:!0});var X$t=s(OU);e6r=r(X$t,"TFData2VecVisionModel"),X$t.forEach(t),o6r=r(Uqe," (Data2VecVision model)"),Uqe.forEach(t),r6r=i(D),j7=n(D,"LI",{});var Jqe=s(j7);G6e=n(Jqe,"STRONG",{});var z$t=s(G6e);t6r=r(z$t,"deberta"),z$t.forEach(t),a6r=r(Jqe," \u2014 "),VU=n(Jqe,"A",{href:!0});var Q$t=s(VU);n6r=r(Q$t,"TFDebertaModel"),Q$t.forEach(t),s6r=r(Jqe," (DeBERTa model)"),Jqe.forEach(t),l6r=i(D),D7=n(D,"LI",{});var Yqe=s(D7);O6e=n(Yqe,"STRONG",{});var W$t=s(O6e);i6r=r(W$t,"deberta-v2"),W$t.forEach(t),d6r=r(Yqe," \u2014 "),XU=n(Yqe,"A",{href:!0});var H$t=s(XU);c6r=r(H$t,"TFDebertaV2Model"),H$t.forEach(t),f6r=r(Yqe," (DeBERTa-v2 model)"),Yqe.forEach(t),m6r=i(D),G7=n(D,"LI",{});var Kqe=s(G7);V6e=n(Kqe,"STRONG",{});var U$t=s(V6e);g6r=r(U$t,"deit"),U$t.forEach(t),h6r=r(Kqe," \u2014 "),zU=n(Kqe,"A",{href:!0});var J$t=s(zU);p6r=r(J$t,"TFDeiTModel"),J$t.forEach(t),_6r=r(Kqe," (DeiT model)"),Kqe.forEach(t),u6r=i(D),O7=n(D,"LI",{});var Zqe=s(O7);X6e=n(Zqe,"STRONG",{});var Y$t=s(X6e);b6r=r(Y$t,"distilbert"),Y$t.forEach(t),v6r=r(Zqe," \u2014 "),QU=n(Zqe,"A",{href:!0});var K$t=s(QU);F6r=r(K$t,"TFDistilBertModel"),K$t.forEach(t),T6r=r(Zqe," (DistilBERT model)"),Zqe.forEach(t),M6r=i(D),V7=n(D,"LI",{});var eje=s(V7);z6e=n(eje,"STRONG",{});var Z$t=s(z6e);E6r=r(Z$t,"dpr"),Z$t.forEach(t),C6r=r(eje," \u2014 "),WU=n(eje,"A",{href:!0});var ekt=s(WU);w6r=r(ekt,"TFDPRQuestionEncoder"),ekt.forEach(t),A6r=r(eje," (DPR model)"),eje.forEach(t),L6r=i(D),X7=n(D,"LI",{});var oje=s(X7);Q6e=n(oje,"STRONG",{});var okt=s(Q6e);y6r=r(okt,"electra"),okt.forEach(t),x6r=r(oje," \u2014 "),HU=n(oje,"A",{href:!0});var rkt=s(HU);$6r=r(rkt,"TFElectraModel"),rkt.forEach(t),k6r=r(oje," (ELECTRA model)"),oje.forEach(t),S6r=i(D),z7=n(D,"LI",{});var rje=s(z7);W6e=n(rje,"STRONG",{});var tkt=s(W6e);R6r=r(tkt,"flaubert"),tkt.forEach(t),P6r=r(rje," \u2014 "),UU=n(rje,"A",{href:!0});var akt=s(UU);B6r=r(akt,"TFFlaubertModel"),akt.forEach(t),I6r=r(rje," (FlauBERT model)"),rje.forEach(t),N6r=i(D),Ks=n(D,"LI",{});var XS=s(Ks);H6e=n(XS,"STRONG",{});var nkt=s(H6e);q6r=r(nkt,"funnel"),nkt.forEach(t),j6r=r(XS," \u2014 "),JU=n(XS,"A",{href:!0});var skt=s(JU);D6r=r(skt,"TFFunnelModel"),skt.forEach(t),G6r=r(XS," or "),YU=n(XS,"A",{href:!0});var lkt=s(YU);O6r=r(lkt,"TFFunnelBaseModel"),lkt.forEach(t),V6r=r(XS," (Funnel Transformer model)"),XS.forEach(t),X6r=i(D),Q7=n(D,"LI",{});var tje=s(Q7);U6e=n(tje,"STRONG",{});var ikt=s(U6e);z6r=r(ikt,"gpt2"),ikt.forEach(t),Q6r=r(tje," \u2014 "),KU=n(tje,"A",{href:!0});var dkt=s(KU);W6r=r(dkt,"TFGPT2Model"),dkt.forEach(t),H6r=r(tje," (OpenAI GPT-2 model)"),tje.forEach(t),U6r=i(D),W7=n(D,"LI",{});var aje=s(W7);J6e=n(aje,"STRONG",{});var ckt=s(J6e);J6r=r(ckt,"gptj"),ckt.forEach(t),Y6r=r(aje," \u2014 "),ZU=n(aje,"A",{href:!0});var fkt=s(ZU);K6r=r(fkt,"TFGPTJModel"),fkt.forEach(t),Z6r=r(aje," (GPT-J model)"),aje.forEach(t),eTr=i(D),H7=n(D,"LI",{});var nje=s(H7);Y6e=n(nje,"STRONG",{});var mkt=s(Y6e);oTr=r(mkt,"hubert"),mkt.forEach(t),rTr=r(nje," \u2014 "),eJ=n(nje,"A",{href:!0});var gkt=s(eJ);tTr=r(gkt,"TFHubertModel"),gkt.forEach(t),aTr=r(nje," (Hubert model)"),nje.forEach(t),nTr=i(D),U7=n(D,"LI",{});var sje=s(U7);K6e=n(sje,"STRONG",{});var hkt=s(K6e);sTr=r(hkt,"layoutlm"),hkt.forEach(t),lTr=r(sje," \u2014 "),oJ=n(sje,"A",{href:!0});var pkt=s(oJ);iTr=r(pkt,"TFLayoutLMModel"),pkt.forEach(t),dTr=r(sje," (LayoutLM model)"),sje.forEach(t),cTr=i(D),J7=n(D,"LI",{});var lje=s(J7);Z6e=n(lje,"STRONG",{});var _kt=s(Z6e);fTr=r(_kt,"led"),_kt.forEach(t),mTr=r(lje," \u2014 "),rJ=n(lje,"A",{href:!0});var ukt=s(rJ);gTr=r(ukt,"TFLEDModel"),ukt.forEach(t),hTr=r(lje," (LED model)"),lje.forEach(t),pTr=i(D),Y7=n(D,"LI",{});var ije=s(Y7);eTe=n(ije,"STRONG",{});var bkt=s(eTe);_Tr=r(bkt,"longformer"),bkt.forEach(t),uTr=r(ije," \u2014 "),tJ=n(ije,"A",{href:!0});var vkt=s(tJ);bTr=r(vkt,"TFLongformerModel"),vkt.forEach(t),vTr=r(ije," (Longformer model)"),ije.forEach(t),FTr=i(D),K7=n(D,"LI",{});var dje=s(K7);oTe=n(dje,"STRONG",{});var Fkt=s(oTe);TTr=r(Fkt,"lxmert"),Fkt.forEach(t),MTr=r(dje," \u2014 "),aJ=n(dje,"A",{href:!0});var Tkt=s(aJ);ETr=r(Tkt,"TFLxmertModel"),Tkt.forEach(t),CTr=r(dje," (LXMERT model)"),dje.forEach(t),wTr=i(D),Z7=n(D,"LI",{});var cje=s(Z7);rTe=n(cje,"STRONG",{});var Mkt=s(rTe);ATr=r(Mkt,"marian"),Mkt.forEach(t),LTr=r(cje," \u2014 "),nJ=n(cje,"A",{href:!0});var Ekt=s(nJ);yTr=r(Ekt,"TFMarianModel"),Ekt.forEach(t),xTr=r(cje," (Marian model)"),cje.forEach(t),$Tr=i(D),e9=n(D,"LI",{});var fje=s(e9);tTe=n(fje,"STRONG",{});var Ckt=s(tTe);kTr=r(Ckt,"mbart"),Ckt.forEach(t),STr=r(fje," \u2014 "),sJ=n(fje,"A",{href:!0});var wkt=s(sJ);RTr=r(wkt,"TFMBartModel"),wkt.forEach(t),PTr=r(fje," (mBART model)"),fje.forEach(t),BTr=i(D),o9=n(D,"LI",{});var mje=s(o9);aTe=n(mje,"STRONG",{});var Akt=s(aTe);ITr=r(Akt,"mobilebert"),Akt.forEach(t),NTr=r(mje," \u2014 "),lJ=n(mje,"A",{href:!0});var Lkt=s(lJ);qTr=r(Lkt,"TFMobileBertModel"),Lkt.forEach(t),jTr=r(mje," (MobileBERT model)"),mje.forEach(t),DTr=i(D),r9=n(D,"LI",{});var gje=s(r9);nTe=n(gje,"STRONG",{});var ykt=s(nTe);GTr=r(ykt,"mpnet"),ykt.forEach(t),OTr=r(gje," \u2014 "),iJ=n(gje,"A",{href:!0});var xkt=s(iJ);VTr=r(xkt,"TFMPNetModel"),xkt.forEach(t),XTr=r(gje," (MPNet model)"),gje.forEach(t),zTr=i(D),t9=n(D,"LI",{});var hje=s(t9);sTe=n(hje,"STRONG",{});var $kt=s(sTe);QTr=r($kt,"mt5"),$kt.forEach(t),WTr=r(hje," \u2014 "),dJ=n(hje,"A",{href:!0});var kkt=s(dJ);HTr=r(kkt,"TFMT5Model"),kkt.forEach(t),UTr=r(hje," (MT5 model)"),hje.forEach(t),JTr=i(D),a9=n(D,"LI",{});var pje=s(a9);lTe=n(pje,"STRONG",{});var Skt=s(lTe);YTr=r(Skt,"openai-gpt"),Skt.forEach(t),KTr=r(pje," \u2014 "),cJ=n(pje,"A",{href:!0});var Rkt=s(cJ);ZTr=r(Rkt,"TFOpenAIGPTModel"),Rkt.forEach(t),e7r=r(pje," (OpenAI GPT model)"),pje.forEach(t),o7r=i(D),n9=n(D,"LI",{});var _je=s(n9);iTe=n(_je,"STRONG",{});var Pkt=s(iTe);r7r=r(Pkt,"opt"),Pkt.forEach(t),t7r=r(_je," \u2014 "),fJ=n(_je,"A",{href:!0});var Bkt=s(fJ);a7r=r(Bkt,"TFOPTModel"),Bkt.forEach(t),n7r=r(_je," (OPT model)"),_je.forEach(t),s7r=i(D),s9=n(D,"LI",{});var uje=s(s9);dTe=n(uje,"STRONG",{});var Ikt=s(dTe);l7r=r(Ikt,"pegasus"),Ikt.forEach(t),i7r=r(uje," \u2014 "),mJ=n(uje,"A",{href:!0});var Nkt=s(mJ);d7r=r(Nkt,"TFPegasusModel"),Nkt.forEach(t),c7r=r(uje," (Pegasus model)"),uje.forEach(t),f7r=i(D),l9=n(D,"LI",{});var bje=s(l9);cTe=n(bje,"STRONG",{});var qkt=s(cTe);m7r=r(qkt,"regnet"),qkt.forEach(t),g7r=r(bje," \u2014 "),gJ=n(bje,"A",{href:!0});var jkt=s(gJ);h7r=r(jkt,"TFRegNetModel"),jkt.forEach(t),p7r=r(bje," (RegNet model)"),bje.forEach(t),_7r=i(D),i9=n(D,"LI",{});var vje=s(i9);fTe=n(vje,"STRONG",{});var Dkt=s(fTe);u7r=r(Dkt,"rembert"),Dkt.forEach(t),b7r=r(vje," \u2014 "),hJ=n(vje,"A",{href:!0});var Gkt=s(hJ);v7r=r(Gkt,"TFRemBertModel"),Gkt.forEach(t),F7r=r(vje," (RemBERT model)"),vje.forEach(t),T7r=i(D),d9=n(D,"LI",{});var Fje=s(d9);mTe=n(Fje,"STRONG",{});var Okt=s(mTe);M7r=r(Okt,"resnet"),Okt.forEach(t),E7r=r(Fje," \u2014 "),pJ=n(Fje,"A",{href:!0});var Vkt=s(pJ);C7r=r(Vkt,"TFResNetModel"),Vkt.forEach(t),w7r=r(Fje," (ResNet model)"),Fje.forEach(t),A7r=i(D),c9=n(D,"LI",{});var Tje=s(c9);gTe=n(Tje,"STRONG",{});var Xkt=s(gTe);L7r=r(Xkt,"roberta"),Xkt.forEach(t),y7r=r(Tje," \u2014 "),_J=n(Tje,"A",{href:!0});var zkt=s(_J);x7r=r(zkt,"TFRobertaModel"),zkt.forEach(t),$7r=r(Tje," (RoBERTa model)"),Tje.forEach(t),k7r=i(D),f9=n(D,"LI",{});var Mje=s(f9);hTe=n(Mje,"STRONG",{});var Qkt=s(hTe);S7r=r(Qkt,"roformer"),Qkt.forEach(t),R7r=r(Mje," \u2014 "),uJ=n(Mje,"A",{href:!0});var Wkt=s(uJ);P7r=r(Wkt,"TFRoFormerModel"),Wkt.forEach(t),B7r=r(Mje," (RoFormer model)"),Mje.forEach(t),I7r=i(D),m9=n(D,"LI",{});var Eje=s(m9);pTe=n(Eje,"STRONG",{});var Hkt=s(pTe);N7r=r(Hkt,"speech_to_text"),Hkt.forEach(t),q7r=r(Eje," \u2014 "),bJ=n(Eje,"A",{href:!0});var Ukt=s(bJ);j7r=r(Ukt,"TFSpeech2TextModel"),Ukt.forEach(t),D7r=r(Eje," (Speech2Text model)"),Eje.forEach(t),G7r=i(D),g9=n(D,"LI",{});var Cje=s(g9);_Te=n(Cje,"STRONG",{});var Jkt=s(_Te);O7r=r(Jkt,"swin"),Jkt.forEach(t),V7r=r(Cje," \u2014 "),vJ=n(Cje,"A",{href:!0});var Ykt=s(vJ);X7r=r(Ykt,"TFSwinModel"),Ykt.forEach(t),z7r=r(Cje," (Swin Transformer model)"),Cje.forEach(t),Q7r=i(D),h9=n(D,"LI",{});var wje=s(h9);uTe=n(wje,"STRONG",{});var Kkt=s(uTe);W7r=r(Kkt,"t5"),Kkt.forEach(t),H7r=r(wje," \u2014 "),FJ=n(wje,"A",{href:!0});var Zkt=s(FJ);U7r=r(Zkt,"TFT5Model"),Zkt.forEach(t),J7r=r(wje," (T5 model)"),wje.forEach(t),Y7r=i(D),p9=n(D,"LI",{});var Aje=s(p9);bTe=n(Aje,"STRONG",{});var eSt=s(bTe);K7r=r(eSt,"tapas"),eSt.forEach(t),Z7r=r(Aje," \u2014 "),TJ=n(Aje,"A",{href:!0});var oSt=s(TJ);e9r=r(oSt,"TFTapasModel"),oSt.forEach(t),o9r=r(Aje," (TAPAS model)"),Aje.forEach(t),r9r=i(D),_9=n(D,"LI",{});var Lje=s(_9);vTe=n(Lje,"STRONG",{});var rSt=s(vTe);t9r=r(rSt,"transfo-xl"),rSt.forEach(t),a9r=r(Lje," \u2014 "),MJ=n(Lje,"A",{href:!0});var tSt=s(MJ);n9r=r(tSt,"TFTransfoXLModel"),tSt.forEach(t),s9r=r(Lje," (Transformer-XL model)"),Lje.forEach(t),l9r=i(D),u9=n(D,"LI",{});var yje=s(u9);FTe=n(yje,"STRONG",{});var aSt=s(FTe);i9r=r(aSt,"vit"),aSt.forEach(t),d9r=r(yje," \u2014 "),EJ=n(yje,"A",{href:!0});var nSt=s(EJ);c9r=r(nSt,"TFViTModel"),nSt.forEach(t),f9r=r(yje," (ViT model)"),yje.forEach(t),m9r=i(D),b9=n(D,"LI",{});var xje=s(b9);TTe=n(xje,"STRONG",{});var sSt=s(TTe);g9r=r(sSt,"vit_mae"),sSt.forEach(t),h9r=r(xje," \u2014 "),CJ=n(xje,"A",{href:!0});var lSt=s(CJ);p9r=r(lSt,"TFViTMAEModel"),lSt.forEach(t),_9r=r(xje," (ViTMAE model)"),xje.forEach(t),u9r=i(D),v9=n(D,"LI",{});var $je=s(v9);MTe=n($je,"STRONG",{});var iSt=s(MTe);b9r=r(iSt,"wav2vec2"),iSt.forEach(t),v9r=r($je," \u2014 "),wJ=n($je,"A",{href:!0});var dSt=s(wJ);F9r=r(dSt,"TFWav2Vec2Model"),dSt.forEach(t),T9r=r($je," (Wav2Vec2 model)"),$je.forEach(t),M9r=i(D),F9=n(D,"LI",{});var kje=s(F9);ETe=n(kje,"STRONG",{});var cSt=s(ETe);E9r=r(cSt,"xlm"),cSt.forEach(t),C9r=r(kje," \u2014 "),AJ=n(kje,"A",{href:!0});var fSt=s(AJ);w9r=r(fSt,"TFXLMModel"),fSt.forEach(t),A9r=r(kje," (XLM model)"),kje.forEach(t),L9r=i(D),T9=n(D,"LI",{});var Sje=s(T9);CTe=n(Sje,"STRONG",{});var mSt=s(CTe);y9r=r(mSt,"xlm-roberta"),mSt.forEach(t),x9r=r(Sje," \u2014 "),LJ=n(Sje,"A",{href:!0});var gSt=s(LJ);$9r=r(gSt,"TFXLMRobertaModel"),gSt.forEach(t),k9r=r(Sje," (XLM-RoBERTa model)"),Sje.forEach(t),S9r=i(D),M9=n(D,"LI",{});var Rje=s(M9);wTe=n(Rje,"STRONG",{});var hSt=s(wTe);R9r=r(hSt,"xlnet"),hSt.forEach(t),P9r=r(Rje," \u2014 "),yJ=n(Rje,"A",{href:!0});var pSt=s(yJ);B9r=r(pSt,"TFXLNetModel"),pSt.forEach(t),I9r=r(Rje," (XLNet model)"),Rje.forEach(t),D.forEach(t),N9r=i(Sl),T(E9.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Vze=i(f),cc=n(f,"H2",{class:!0});var YWe=s(cc);C9=n(YWe,"A",{id:!0,class:!0,href:!0});var _St=s(C9);ATe=n(_St,"SPAN",{});var uSt=s(ATe);T(nx.$$.fragment,uSt),uSt.forEach(t),_St.forEach(t),q9r=i(YWe),LTe=n(YWe,"SPAN",{});var bSt=s(LTe);j9r=r(bSt,"TFAutoModelForPreTraining"),bSt.forEach(t),YWe.forEach(t),Xze=i(f),rr=n(f,"DIV",{class:!0});var Rl=s(rr);T(sx.$$.fragment,Rl),D9r=i(Rl),fc=n(Rl,"P",{});var Ute=s(fc);G9r=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xJ=n(Ute,"A",{href:!0});var vSt=s(xJ);O9r=r(vSt,"from_pretrained()"),vSt.forEach(t),V9r=r(Ute," class method or the "),$J=n(Ute,"A",{href:!0});var FSt=s($J);X9r=r(FSt,"from_config()"),FSt.forEach(t),z9r=r(Ute,` class
method.`),Ute.forEach(t),Q9r=i(Rl),lx=n(Rl,"P",{});var KWe=s(lx);W9r=r(KWe,"This class cannot be instantiated directly using "),yTe=n(KWe,"CODE",{});var TSt=s(yTe);H9r=r(TSt,"__init__()"),TSt.forEach(t),U9r=r(KWe," (throws an error)."),KWe.forEach(t),J9r=i(Rl),Pt=n(Rl,"DIV",{class:!0});var hA=s(Pt);T(ix.$$.fragment,hA),Y9r=i(hA),xTe=n(hA,"P",{});var MSt=s(xTe);K9r=r(MSt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MSt.forEach(t),Z9r=i(hA),mc=n(hA,"P",{});var Jte=s(mc);eMr=r(Jte,`Note:
Loading a model from its configuration file does `),$Te=n(Jte,"STRONG",{});var ESt=s($Te);oMr=r(ESt,"not"),ESt.forEach(t),rMr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(Jte,"A",{href:!0});var CSt=s(kJ);tMr=r(CSt,"from_pretrained()"),CSt.forEach(t),aMr=r(Jte," to load the model weights."),Jte.forEach(t),nMr=i(hA),T(w9.$$.fragment,hA),hA.forEach(t),sMr=i(Rl),$r=n(Rl,"DIV",{class:!0});var Pl=s($r);T(dx.$$.fragment,Pl),lMr=i(Pl),kTe=n(Pl,"P",{});var wSt=s(kTe);iMr=r(wSt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wSt.forEach(t),dMr=i(Pl),dn=n(Pl,"P",{});var pA=s(dn);cMr=r(pA,"The model class to instantiate is selected based on the "),STe=n(pA,"CODE",{});var ASt=s(STe);fMr=r(ASt,"model_type"),ASt.forEach(t),mMr=r(pA,` property of the config object (either
passed as an argument or loaded from `),RTe=n(pA,"CODE",{});var LSt=s(RTe);gMr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),hMr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(pA,"CODE",{});var ySt=s(PTe);pMr=r(ySt,"pretrained_model_name_or_path"),ySt.forEach(t),_Mr=r(pA,":"),pA.forEach(t),uMr=i(Pl),se=n(Pl,"UL",{});var le=s(se);A9=n(le,"LI",{});var Pje=s(A9);BTe=n(Pje,"STRONG",{});var xSt=s(BTe);bMr=r(xSt,"albert"),xSt.forEach(t),vMr=r(Pje," \u2014 "),SJ=n(Pje,"A",{href:!0});var $St=s(SJ);FMr=r($St,"TFAlbertForPreTraining"),$St.forEach(t),TMr=r(Pje," (ALBERT model)"),Pje.forEach(t),MMr=i(le),L9=n(le,"LI",{});var Bje=s(L9);ITe=n(Bje,"STRONG",{});var kSt=s(ITe);EMr=r(kSt,"bart"),kSt.forEach(t),CMr=r(Bje," \u2014 "),RJ=n(Bje,"A",{href:!0});var SSt=s(RJ);wMr=r(SSt,"TFBartForConditionalGeneration"),SSt.forEach(t),AMr=r(Bje," (BART model)"),Bje.forEach(t),LMr=i(le),y9=n(le,"LI",{});var Ije=s(y9);NTe=n(Ije,"STRONG",{});var RSt=s(NTe);yMr=r(RSt,"bert"),RSt.forEach(t),xMr=r(Ije," \u2014 "),PJ=n(Ije,"A",{href:!0});var PSt=s(PJ);$Mr=r(PSt,"TFBertForPreTraining"),PSt.forEach(t),kMr=r(Ije," (BERT model)"),Ije.forEach(t),SMr=i(le),x9=n(le,"LI",{});var Nje=s(x9);qTe=n(Nje,"STRONG",{});var BSt=s(qTe);RMr=r(BSt,"camembert"),BSt.forEach(t),PMr=r(Nje," \u2014 "),BJ=n(Nje,"A",{href:!0});var ISt=s(BJ);BMr=r(ISt,"TFCamembertForMaskedLM"),ISt.forEach(t),IMr=r(Nje," (CamemBERT model)"),Nje.forEach(t),NMr=i(le),$9=n(le,"LI",{});var qje=s($9);jTe=n(qje,"STRONG",{});var NSt=s(jTe);qMr=r(NSt,"ctrl"),NSt.forEach(t),jMr=r(qje," \u2014 "),IJ=n(qje,"A",{href:!0});var qSt=s(IJ);DMr=r(qSt,"TFCTRLLMHeadModel"),qSt.forEach(t),GMr=r(qje," (CTRL model)"),qje.forEach(t),OMr=i(le),k9=n(le,"LI",{});var jje=s(k9);DTe=n(jje,"STRONG",{});var jSt=s(DTe);VMr=r(jSt,"distilbert"),jSt.forEach(t),XMr=r(jje," \u2014 "),NJ=n(jje,"A",{href:!0});var DSt=s(NJ);zMr=r(DSt,"TFDistilBertForMaskedLM"),DSt.forEach(t),QMr=r(jje," (DistilBERT model)"),jje.forEach(t),WMr=i(le),S9=n(le,"LI",{});var Dje=s(S9);GTe=n(Dje,"STRONG",{});var GSt=s(GTe);HMr=r(GSt,"electra"),GSt.forEach(t),UMr=r(Dje," \u2014 "),qJ=n(Dje,"A",{href:!0});var OSt=s(qJ);JMr=r(OSt,"TFElectraForPreTraining"),OSt.forEach(t),YMr=r(Dje," (ELECTRA model)"),Dje.forEach(t),KMr=i(le),R9=n(le,"LI",{});var Gje=s(R9);OTe=n(Gje,"STRONG",{});var VSt=s(OTe);ZMr=r(VSt,"flaubert"),VSt.forEach(t),eEr=r(Gje," \u2014 "),jJ=n(Gje,"A",{href:!0});var XSt=s(jJ);oEr=r(XSt,"TFFlaubertWithLMHeadModel"),XSt.forEach(t),rEr=r(Gje," (FlauBERT model)"),Gje.forEach(t),tEr=i(le),P9=n(le,"LI",{});var Oje=s(P9);VTe=n(Oje,"STRONG",{});var zSt=s(VTe);aEr=r(zSt,"funnel"),zSt.forEach(t),nEr=r(Oje," \u2014 "),DJ=n(Oje,"A",{href:!0});var QSt=s(DJ);sEr=r(QSt,"TFFunnelForPreTraining"),QSt.forEach(t),lEr=r(Oje," (Funnel Transformer model)"),Oje.forEach(t),iEr=i(le),B9=n(le,"LI",{});var Vje=s(B9);XTe=n(Vje,"STRONG",{});var WSt=s(XTe);dEr=r(WSt,"gpt2"),WSt.forEach(t),cEr=r(Vje," \u2014 "),GJ=n(Vje,"A",{href:!0});var HSt=s(GJ);fEr=r(HSt,"TFGPT2LMHeadModel"),HSt.forEach(t),mEr=r(Vje," (OpenAI GPT-2 model)"),Vje.forEach(t),gEr=i(le),I9=n(le,"LI",{});var Xje=s(I9);zTe=n(Xje,"STRONG",{});var USt=s(zTe);hEr=r(USt,"layoutlm"),USt.forEach(t),pEr=r(Xje," \u2014 "),OJ=n(Xje,"A",{href:!0});var JSt=s(OJ);_Er=r(JSt,"TFLayoutLMForMaskedLM"),JSt.forEach(t),uEr=r(Xje," (LayoutLM model)"),Xje.forEach(t),bEr=i(le),N9=n(le,"LI",{});var zje=s(N9);QTe=n(zje,"STRONG",{});var YSt=s(QTe);vEr=r(YSt,"lxmert"),YSt.forEach(t),FEr=r(zje," \u2014 "),VJ=n(zje,"A",{href:!0});var KSt=s(VJ);TEr=r(KSt,"TFLxmertForPreTraining"),KSt.forEach(t),MEr=r(zje," (LXMERT model)"),zje.forEach(t),EEr=i(le),q9=n(le,"LI",{});var Qje=s(q9);WTe=n(Qje,"STRONG",{});var ZSt=s(WTe);CEr=r(ZSt,"mobilebert"),ZSt.forEach(t),wEr=r(Qje," \u2014 "),XJ=n(Qje,"A",{href:!0});var eRt=s(XJ);AEr=r(eRt,"TFMobileBertForPreTraining"),eRt.forEach(t),LEr=r(Qje," (MobileBERT model)"),Qje.forEach(t),yEr=i(le),j9=n(le,"LI",{});var Wje=s(j9);HTe=n(Wje,"STRONG",{});var oRt=s(HTe);xEr=r(oRt,"mpnet"),oRt.forEach(t),$Er=r(Wje," \u2014 "),zJ=n(Wje,"A",{href:!0});var rRt=s(zJ);kEr=r(rRt,"TFMPNetForMaskedLM"),rRt.forEach(t),SEr=r(Wje," (MPNet model)"),Wje.forEach(t),REr=i(le),D9=n(le,"LI",{});var Hje=s(D9);UTe=n(Hje,"STRONG",{});var tRt=s(UTe);PEr=r(tRt,"openai-gpt"),tRt.forEach(t),BEr=r(Hje," \u2014 "),QJ=n(Hje,"A",{href:!0});var aRt=s(QJ);IEr=r(aRt,"TFOpenAIGPTLMHeadModel"),aRt.forEach(t),NEr=r(Hje," (OpenAI GPT model)"),Hje.forEach(t),qEr=i(le),G9=n(le,"LI",{});var Uje=s(G9);JTe=n(Uje,"STRONG",{});var nRt=s(JTe);jEr=r(nRt,"roberta"),nRt.forEach(t),DEr=r(Uje," \u2014 "),WJ=n(Uje,"A",{href:!0});var sRt=s(WJ);GEr=r(sRt,"TFRobertaForMaskedLM"),sRt.forEach(t),OEr=r(Uje," (RoBERTa model)"),Uje.forEach(t),VEr=i(le),O9=n(le,"LI",{});var Jje=s(O9);YTe=n(Jje,"STRONG",{});var lRt=s(YTe);XEr=r(lRt,"t5"),lRt.forEach(t),zEr=r(Jje," \u2014 "),HJ=n(Jje,"A",{href:!0});var iRt=s(HJ);QEr=r(iRt,"TFT5ForConditionalGeneration"),iRt.forEach(t),WEr=r(Jje," (T5 model)"),Jje.forEach(t),HEr=i(le),V9=n(le,"LI",{});var Yje=s(V9);KTe=n(Yje,"STRONG",{});var dRt=s(KTe);UEr=r(dRt,"tapas"),dRt.forEach(t),JEr=r(Yje," \u2014 "),UJ=n(Yje,"A",{href:!0});var cRt=s(UJ);YEr=r(cRt,"TFTapasForMaskedLM"),cRt.forEach(t),KEr=r(Yje," (TAPAS model)"),Yje.forEach(t),ZEr=i(le),X9=n(le,"LI",{});var Kje=s(X9);ZTe=n(Kje,"STRONG",{});var fRt=s(ZTe);eCr=r(fRt,"transfo-xl"),fRt.forEach(t),oCr=r(Kje," \u2014 "),JJ=n(Kje,"A",{href:!0});var mRt=s(JJ);rCr=r(mRt,"TFTransfoXLLMHeadModel"),mRt.forEach(t),tCr=r(Kje," (Transformer-XL model)"),Kje.forEach(t),aCr=i(le),z9=n(le,"LI",{});var Zje=s(z9);e7e=n(Zje,"STRONG",{});var gRt=s(e7e);nCr=r(gRt,"vit_mae"),gRt.forEach(t),sCr=r(Zje," \u2014 "),YJ=n(Zje,"A",{href:!0});var hRt=s(YJ);lCr=r(hRt,"TFViTMAEForPreTraining"),hRt.forEach(t),iCr=r(Zje," (ViTMAE model)"),Zje.forEach(t),dCr=i(le),Q9=n(le,"LI",{});var eDe=s(Q9);o7e=n(eDe,"STRONG",{});var pRt=s(o7e);cCr=r(pRt,"xlm"),pRt.forEach(t),fCr=r(eDe," \u2014 "),KJ=n(eDe,"A",{href:!0});var _Rt=s(KJ);mCr=r(_Rt,"TFXLMWithLMHeadModel"),_Rt.forEach(t),gCr=r(eDe," (XLM model)"),eDe.forEach(t),hCr=i(le),W9=n(le,"LI",{});var oDe=s(W9);r7e=n(oDe,"STRONG",{});var uRt=s(r7e);pCr=r(uRt,"xlm-roberta"),uRt.forEach(t),_Cr=r(oDe," \u2014 "),ZJ=n(oDe,"A",{href:!0});var bRt=s(ZJ);uCr=r(bRt,"TFXLMRobertaForMaskedLM"),bRt.forEach(t),bCr=r(oDe," (XLM-RoBERTa model)"),oDe.forEach(t),vCr=i(le),H9=n(le,"LI",{});var rDe=s(H9);t7e=n(rDe,"STRONG",{});var vRt=s(t7e);FCr=r(vRt,"xlnet"),vRt.forEach(t),TCr=r(rDe," \u2014 "),eY=n(rDe,"A",{href:!0});var FRt=s(eY);MCr=r(FRt,"TFXLNetLMHeadModel"),FRt.forEach(t),ECr=r(rDe," (XLNet model)"),rDe.forEach(t),le.forEach(t),CCr=i(Pl),T(U9.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),zze=i(f),gc=n(f,"H2",{class:!0});var ZWe=s(gc);J9=n(ZWe,"A",{id:!0,class:!0,href:!0});var TRt=s(J9);a7e=n(TRt,"SPAN",{});var MRt=s(a7e);T(cx.$$.fragment,MRt),MRt.forEach(t),TRt.forEach(t),wCr=i(ZWe),n7e=n(ZWe,"SPAN",{});var ERt=s(n7e);ACr=r(ERt,"TFAutoModelForCausalLM"),ERt.forEach(t),ZWe.forEach(t),Qze=i(f),tr=n(f,"DIV",{class:!0});var Bl=s(tr);T(fx.$$.fragment,Bl),LCr=i(Bl),hc=n(Bl,"P",{});var Yte=s(hc);yCr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oY=n(Yte,"A",{href:!0});var CRt=s(oY);xCr=r(CRt,"from_pretrained()"),CRt.forEach(t),$Cr=r(Yte," class method or the "),rY=n(Yte,"A",{href:!0});var wRt=s(rY);kCr=r(wRt,"from_config()"),wRt.forEach(t),SCr=r(Yte,` class
method.`),Yte.forEach(t),RCr=i(Bl),mx=n(Bl,"P",{});var eHe=s(mx);PCr=r(eHe,"This class cannot be instantiated directly using "),s7e=n(eHe,"CODE",{});var ARt=s(s7e);BCr=r(ARt,"__init__()"),ARt.forEach(t),ICr=r(eHe," (throws an error)."),eHe.forEach(t),NCr=i(Bl),Bt=n(Bl,"DIV",{class:!0});var _A=s(Bt);T(gx.$$.fragment,_A),qCr=i(_A),l7e=n(_A,"P",{});var LRt=s(l7e);jCr=r(LRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LRt.forEach(t),DCr=i(_A),pc=n(_A,"P",{});var Kte=s(pc);GCr=r(Kte,`Note:
Loading a model from its configuration file does `),i7e=n(Kte,"STRONG",{});var yRt=s(i7e);OCr=r(yRt,"not"),yRt.forEach(t),VCr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(Kte,"A",{href:!0});var xRt=s(tY);XCr=r(xRt,"from_pretrained()"),xRt.forEach(t),zCr=r(Kte," to load the model weights."),Kte.forEach(t),QCr=i(_A),T(Y9.$$.fragment,_A),_A.forEach(t),WCr=i(Bl),kr=n(Bl,"DIV",{class:!0});var Il=s(kr);T(hx.$$.fragment,Il),HCr=i(Il),d7e=n(Il,"P",{});var $Rt=s(d7e);UCr=r($Rt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Rt.forEach(t),JCr=i(Il),cn=n(Il,"P",{});var uA=s(cn);YCr=r(uA,"The model class to instantiate is selected based on the "),c7e=n(uA,"CODE",{});var kRt=s(c7e);KCr=r(kRt,"model_type"),kRt.forEach(t),ZCr=r(uA,` property of the config object (either
passed as an argument or loaded from `),f7e=n(uA,"CODE",{});var SRt=s(f7e);e5r=r(SRt,"pretrained_model_name_or_path"),SRt.forEach(t),o5r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=n(uA,"CODE",{});var RRt=s(m7e);r5r=r(RRt,"pretrained_model_name_or_path"),RRt.forEach(t),t5r=r(uA,":"),uA.forEach(t),a5r=i(Il),Me=n(Il,"UL",{});var Ce=s(Me);K9=n(Ce,"LI",{});var tDe=s(K9);g7e=n(tDe,"STRONG",{});var PRt=s(g7e);n5r=r(PRt,"bert"),PRt.forEach(t),s5r=r(tDe," \u2014 "),aY=n(tDe,"A",{href:!0});var BRt=s(aY);l5r=r(BRt,"TFBertLMHeadModel"),BRt.forEach(t),i5r=r(tDe," (BERT model)"),tDe.forEach(t),d5r=i(Ce),Z9=n(Ce,"LI",{});var aDe=s(Z9);h7e=n(aDe,"STRONG",{});var IRt=s(h7e);c5r=r(IRt,"camembert"),IRt.forEach(t),f5r=r(aDe," \u2014 "),nY=n(aDe,"A",{href:!0});var NRt=s(nY);m5r=r(NRt,"TFCamembertForCausalLM"),NRt.forEach(t),g5r=r(aDe," (CamemBERT model)"),aDe.forEach(t),h5r=i(Ce),eM=n(Ce,"LI",{});var nDe=s(eM);p7e=n(nDe,"STRONG",{});var qRt=s(p7e);p5r=r(qRt,"ctrl"),qRt.forEach(t),_5r=r(nDe," \u2014 "),sY=n(nDe,"A",{href:!0});var jRt=s(sY);u5r=r(jRt,"TFCTRLLMHeadModel"),jRt.forEach(t),b5r=r(nDe," (CTRL model)"),nDe.forEach(t),v5r=i(Ce),oM=n(Ce,"LI",{});var sDe=s(oM);_7e=n(sDe,"STRONG",{});var DRt=s(_7e);F5r=r(DRt,"gpt2"),DRt.forEach(t),T5r=r(sDe," \u2014 "),lY=n(sDe,"A",{href:!0});var GRt=s(lY);M5r=r(GRt,"TFGPT2LMHeadModel"),GRt.forEach(t),E5r=r(sDe," (OpenAI GPT-2 model)"),sDe.forEach(t),C5r=i(Ce),rM=n(Ce,"LI",{});var lDe=s(rM);u7e=n(lDe,"STRONG",{});var ORt=s(u7e);w5r=r(ORt,"gptj"),ORt.forEach(t),A5r=r(lDe," \u2014 "),iY=n(lDe,"A",{href:!0});var VRt=s(iY);L5r=r(VRt,"TFGPTJForCausalLM"),VRt.forEach(t),y5r=r(lDe," (GPT-J model)"),lDe.forEach(t),x5r=i(Ce),tM=n(Ce,"LI",{});var iDe=s(tM);b7e=n(iDe,"STRONG",{});var XRt=s(b7e);$5r=r(XRt,"openai-gpt"),XRt.forEach(t),k5r=r(iDe," \u2014 "),dY=n(iDe,"A",{href:!0});var zRt=s(dY);S5r=r(zRt,"TFOpenAIGPTLMHeadModel"),zRt.forEach(t),R5r=r(iDe," (OpenAI GPT model)"),iDe.forEach(t),P5r=i(Ce),aM=n(Ce,"LI",{});var dDe=s(aM);v7e=n(dDe,"STRONG",{});var QRt=s(v7e);B5r=r(QRt,"opt"),QRt.forEach(t),I5r=r(dDe," \u2014 "),cY=n(dDe,"A",{href:!0});var WRt=s(cY);N5r=r(WRt,"TFOPTForCausalLM"),WRt.forEach(t),q5r=r(dDe," (OPT model)"),dDe.forEach(t),j5r=i(Ce),nM=n(Ce,"LI",{});var cDe=s(nM);F7e=n(cDe,"STRONG",{});var HRt=s(F7e);D5r=r(HRt,"rembert"),HRt.forEach(t),G5r=r(cDe," \u2014 "),fY=n(cDe,"A",{href:!0});var URt=s(fY);O5r=r(URt,"TFRemBertForCausalLM"),URt.forEach(t),V5r=r(cDe," (RemBERT model)"),cDe.forEach(t),X5r=i(Ce),sM=n(Ce,"LI",{});var fDe=s(sM);T7e=n(fDe,"STRONG",{});var JRt=s(T7e);z5r=r(JRt,"roberta"),JRt.forEach(t),Q5r=r(fDe," \u2014 "),mY=n(fDe,"A",{href:!0});var YRt=s(mY);W5r=r(YRt,"TFRobertaForCausalLM"),YRt.forEach(t),H5r=r(fDe," (RoBERTa model)"),fDe.forEach(t),U5r=i(Ce),lM=n(Ce,"LI",{});var mDe=s(lM);M7e=n(mDe,"STRONG",{});var KRt=s(M7e);J5r=r(KRt,"roformer"),KRt.forEach(t),Y5r=r(mDe," \u2014 "),gY=n(mDe,"A",{href:!0});var ZRt=s(gY);K5r=r(ZRt,"TFRoFormerForCausalLM"),ZRt.forEach(t),Z5r=r(mDe," (RoFormer model)"),mDe.forEach(t),e3r=i(Ce),iM=n(Ce,"LI",{});var gDe=s(iM);E7e=n(gDe,"STRONG",{});var ePt=s(E7e);o3r=r(ePt,"transfo-xl"),ePt.forEach(t),r3r=r(gDe," \u2014 "),hY=n(gDe,"A",{href:!0});var oPt=s(hY);t3r=r(oPt,"TFTransfoXLLMHeadModel"),oPt.forEach(t),a3r=r(gDe," (Transformer-XL model)"),gDe.forEach(t),n3r=i(Ce),dM=n(Ce,"LI",{});var hDe=s(dM);C7e=n(hDe,"STRONG",{});var rPt=s(C7e);s3r=r(rPt,"xlm"),rPt.forEach(t),l3r=r(hDe," \u2014 "),pY=n(hDe,"A",{href:!0});var tPt=s(pY);i3r=r(tPt,"TFXLMWithLMHeadModel"),tPt.forEach(t),d3r=r(hDe," (XLM model)"),hDe.forEach(t),c3r=i(Ce),cM=n(Ce,"LI",{});var pDe=s(cM);w7e=n(pDe,"STRONG",{});var aPt=s(w7e);f3r=r(aPt,"xlnet"),aPt.forEach(t),m3r=r(pDe," \u2014 "),_Y=n(pDe,"A",{href:!0});var nPt=s(_Y);g3r=r(nPt,"TFXLNetLMHeadModel"),nPt.forEach(t),h3r=r(pDe," (XLNet model)"),pDe.forEach(t),Ce.forEach(t),p3r=i(Il),T(fM.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Wze=i(f),_c=n(f,"H2",{class:!0});var oHe=s(_c);mM=n(oHe,"A",{id:!0,class:!0,href:!0});var sPt=s(mM);A7e=n(sPt,"SPAN",{});var lPt=s(A7e);T(px.$$.fragment,lPt),lPt.forEach(t),sPt.forEach(t),_3r=i(oHe),L7e=n(oHe,"SPAN",{});var iPt=s(L7e);u3r=r(iPt,"TFAutoModelForImageClassification"),iPt.forEach(t),oHe.forEach(t),Hze=i(f),ar=n(f,"DIV",{class:!0});var Nl=s(ar);T(_x.$$.fragment,Nl),b3r=i(Nl),uc=n(Nl,"P",{});var Zte=s(uc);v3r=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uY=n(Zte,"A",{href:!0});var dPt=s(uY);F3r=r(dPt,"from_pretrained()"),dPt.forEach(t),T3r=r(Zte," class method or the "),bY=n(Zte,"A",{href:!0});var cPt=s(bY);M3r=r(cPt,"from_config()"),cPt.forEach(t),E3r=r(Zte,` class
method.`),Zte.forEach(t),C3r=i(Nl),ux=n(Nl,"P",{});var rHe=s(ux);w3r=r(rHe,"This class cannot be instantiated directly using "),y7e=n(rHe,"CODE",{});var fPt=s(y7e);A3r=r(fPt,"__init__()"),fPt.forEach(t),L3r=r(rHe," (throws an error)."),rHe.forEach(t),y3r=i(Nl),It=n(Nl,"DIV",{class:!0});var bA=s(It);T(bx.$$.fragment,bA),x3r=i(bA),x7e=n(bA,"P",{});var mPt=s(x7e);$3r=r(mPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mPt.forEach(t),k3r=i(bA),bc=n(bA,"P",{});var eae=s(bc);S3r=r(eae,`Note:
Loading a model from its configuration file does `),$7e=n(eae,"STRONG",{});var gPt=s($7e);R3r=r(gPt,"not"),gPt.forEach(t),P3r=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(eae,"A",{href:!0});var hPt=s(vY);B3r=r(hPt,"from_pretrained()"),hPt.forEach(t),I3r=r(eae," to load the model weights."),eae.forEach(t),N3r=i(bA),T(gM.$$.fragment,bA),bA.forEach(t),q3r=i(Nl),Sr=n(Nl,"DIV",{class:!0});var ql=s(Sr);T(vx.$$.fragment,ql),j3r=i(ql),k7e=n(ql,"P",{});var pPt=s(k7e);D3r=r(pPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pPt.forEach(t),G3r=i(ql),fn=n(ql,"P",{});var vA=s(fn);O3r=r(vA,"The model class to instantiate is selected based on the "),S7e=n(vA,"CODE",{});var _Pt=s(S7e);V3r=r(_Pt,"model_type"),_Pt.forEach(t),X3r=r(vA,` property of the config object (either
passed as an argument or loaded from `),R7e=n(vA,"CODE",{});var uPt=s(R7e);z3r=r(uPt,"pretrained_model_name_or_path"),uPt.forEach(t),Q3r=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(vA,"CODE",{});var bPt=s(P7e);W3r=r(bPt,"pretrained_model_name_or_path"),bPt.forEach(t),H3r=r(vA,":"),vA.forEach(t),U3r=i(ql),Qe=n(ql,"UL",{});var ot=s(Qe);hM=n(ot,"LI",{});var _De=s(hM);B7e=n(_De,"STRONG",{});var vPt=s(B7e);J3r=r(vPt,"convnext"),vPt.forEach(t),Y3r=r(_De," \u2014 "),FY=n(_De,"A",{href:!0});var FPt=s(FY);K3r=r(FPt,"TFConvNextForImageClassification"),FPt.forEach(t),Z3r=r(_De," (ConvNeXT model)"),_De.forEach(t),e0r=i(ot),pM=n(ot,"LI",{});var uDe=s(pM);I7e=n(uDe,"STRONG",{});var TPt=s(I7e);o0r=r(TPt,"data2vec-vision"),TPt.forEach(t),r0r=r(uDe," \u2014 "),TY=n(uDe,"A",{href:!0});var MPt=s(TY);t0r=r(MPt,"TFData2VecVisionForImageClassification"),MPt.forEach(t),a0r=r(uDe," (Data2VecVision model)"),uDe.forEach(t),n0r=i(ot),Zs=n(ot,"LI",{});var zS=s(Zs);N7e=n(zS,"STRONG",{});var EPt=s(N7e);s0r=r(EPt,"deit"),EPt.forEach(t),l0r=r(zS," \u2014 "),MY=n(zS,"A",{href:!0});var CPt=s(MY);i0r=r(CPt,"TFDeiTForImageClassification"),CPt.forEach(t),d0r=r(zS," or "),EY=n(zS,"A",{href:!0});var wPt=s(EY);c0r=r(wPt,"TFDeiTForImageClassificationWithTeacher"),wPt.forEach(t),f0r=r(zS," (DeiT model)"),zS.forEach(t),m0r=i(ot),_M=n(ot,"LI",{});var bDe=s(_M);q7e=n(bDe,"STRONG",{});var APt=s(q7e);g0r=r(APt,"regnet"),APt.forEach(t),h0r=r(bDe," \u2014 "),CY=n(bDe,"A",{href:!0});var LPt=s(CY);p0r=r(LPt,"TFRegNetForImageClassification"),LPt.forEach(t),_0r=r(bDe," (RegNet model)"),bDe.forEach(t),u0r=i(ot),uM=n(ot,"LI",{});var vDe=s(uM);j7e=n(vDe,"STRONG",{});var yPt=s(j7e);b0r=r(yPt,"resnet"),yPt.forEach(t),v0r=r(vDe," \u2014 "),wY=n(vDe,"A",{href:!0});var xPt=s(wY);F0r=r(xPt,"TFResNetForImageClassification"),xPt.forEach(t),T0r=r(vDe," (ResNet model)"),vDe.forEach(t),M0r=i(ot),bM=n(ot,"LI",{});var FDe=s(bM);D7e=n(FDe,"STRONG",{});var $Pt=s(D7e);E0r=r($Pt,"swin"),$Pt.forEach(t),C0r=r(FDe," \u2014 "),AY=n(FDe,"A",{href:!0});var kPt=s(AY);w0r=r(kPt,"TFSwinForImageClassification"),kPt.forEach(t),A0r=r(FDe," (Swin Transformer model)"),FDe.forEach(t),L0r=i(ot),vM=n(ot,"LI",{});var TDe=s(vM);G7e=n(TDe,"STRONG",{});var SPt=s(G7e);y0r=r(SPt,"vit"),SPt.forEach(t),x0r=r(TDe," \u2014 "),LY=n(TDe,"A",{href:!0});var RPt=s(LY);$0r=r(RPt,"TFViTForImageClassification"),RPt.forEach(t),k0r=r(TDe," (ViT model)"),TDe.forEach(t),ot.forEach(t),S0r=i(ql),T(FM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Uze=i(f),vc=n(f,"H2",{class:!0});var tHe=s(vc);TM=n(tHe,"A",{id:!0,class:!0,href:!0});var PPt=s(TM);O7e=n(PPt,"SPAN",{});var BPt=s(O7e);T(Fx.$$.fragment,BPt),BPt.forEach(t),PPt.forEach(t),R0r=i(tHe),V7e=n(tHe,"SPAN",{});var IPt=s(V7e);P0r=r(IPt,"TFAutoModelForMaskedLM"),IPt.forEach(t),tHe.forEach(t),Jze=i(f),nr=n(f,"DIV",{class:!0});var jl=s(nr);T(Tx.$$.fragment,jl),B0r=i(jl),Fc=n(jl,"P",{});var oae=s(Fc);I0r=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yY=n(oae,"A",{href:!0});var NPt=s(yY);N0r=r(NPt,"from_pretrained()"),NPt.forEach(t),q0r=r(oae," class method or the "),xY=n(oae,"A",{href:!0});var qPt=s(xY);j0r=r(qPt,"from_config()"),qPt.forEach(t),D0r=r(oae,` class
method.`),oae.forEach(t),G0r=i(jl),Mx=n(jl,"P",{});var aHe=s(Mx);O0r=r(aHe,"This class cannot be instantiated directly using "),X7e=n(aHe,"CODE",{});var jPt=s(X7e);V0r=r(jPt,"__init__()"),jPt.forEach(t),X0r=r(aHe," (throws an error)."),aHe.forEach(t),z0r=i(jl),Nt=n(jl,"DIV",{class:!0});var FA=s(Nt);T(Ex.$$.fragment,FA),Q0r=i(FA),z7e=n(FA,"P",{});var DPt=s(z7e);W0r=r(DPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DPt.forEach(t),H0r=i(FA),Tc=n(FA,"P",{});var rae=s(Tc);U0r=r(rae,`Note:
Loading a model from its configuration file does `),Q7e=n(rae,"STRONG",{});var GPt=s(Q7e);J0r=r(GPt,"not"),GPt.forEach(t),Y0r=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(rae,"A",{href:!0});var OPt=s($Y);K0r=r(OPt,"from_pretrained()"),OPt.forEach(t),Z0r=r(rae," to load the model weights."),rae.forEach(t),ewr=i(FA),T(MM.$$.fragment,FA),FA.forEach(t),owr=i(jl),Rr=n(jl,"DIV",{class:!0});var Dl=s(Rr);T(Cx.$$.fragment,Dl),rwr=i(Dl),W7e=n(Dl,"P",{});var VPt=s(W7e);twr=r(VPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VPt.forEach(t),awr=i(Dl),mn=n(Dl,"P",{});var TA=s(mn);nwr=r(TA,"The model class to instantiate is selected based on the "),H7e=n(TA,"CODE",{});var XPt=s(H7e);swr=r(XPt,"model_type"),XPt.forEach(t),lwr=r(TA,` property of the config object (either
passed as an argument or loaded from `),U7e=n(TA,"CODE",{});var zPt=s(U7e);iwr=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),dwr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(TA,"CODE",{});var QPt=s(J7e);cwr=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),fwr=r(TA,":"),TA.forEach(t),mwr=i(Dl),ie=n(Dl,"UL",{});var me=s(ie);EM=n(me,"LI",{});var MDe=s(EM);Y7e=n(MDe,"STRONG",{});var WPt=s(Y7e);gwr=r(WPt,"albert"),WPt.forEach(t),hwr=r(MDe," \u2014 "),kY=n(MDe,"A",{href:!0});var HPt=s(kY);pwr=r(HPt,"TFAlbertForMaskedLM"),HPt.forEach(t),_wr=r(MDe," (ALBERT model)"),MDe.forEach(t),uwr=i(me),CM=n(me,"LI",{});var EDe=s(CM);K7e=n(EDe,"STRONG",{});var UPt=s(K7e);bwr=r(UPt,"bert"),UPt.forEach(t),vwr=r(EDe," \u2014 "),SY=n(EDe,"A",{href:!0});var JPt=s(SY);Fwr=r(JPt,"TFBertForMaskedLM"),JPt.forEach(t),Twr=r(EDe," (BERT model)"),EDe.forEach(t),Mwr=i(me),wM=n(me,"LI",{});var CDe=s(wM);Z7e=n(CDe,"STRONG",{});var YPt=s(Z7e);Ewr=r(YPt,"camembert"),YPt.forEach(t),Cwr=r(CDe," \u2014 "),RY=n(CDe,"A",{href:!0});var KPt=s(RY);wwr=r(KPt,"TFCamembertForMaskedLM"),KPt.forEach(t),Awr=r(CDe," (CamemBERT model)"),CDe.forEach(t),Lwr=i(me),AM=n(me,"LI",{});var wDe=s(AM);e9e=n(wDe,"STRONG",{});var ZPt=s(e9e);ywr=r(ZPt,"convbert"),ZPt.forEach(t),xwr=r(wDe," \u2014 "),PY=n(wDe,"A",{href:!0});var eBt=s(PY);$wr=r(eBt,"TFConvBertForMaskedLM"),eBt.forEach(t),kwr=r(wDe," (ConvBERT model)"),wDe.forEach(t),Swr=i(me),LM=n(me,"LI",{});var ADe=s(LM);o9e=n(ADe,"STRONG",{});var oBt=s(o9e);Rwr=r(oBt,"deberta"),oBt.forEach(t),Pwr=r(ADe," \u2014 "),BY=n(ADe,"A",{href:!0});var rBt=s(BY);Bwr=r(rBt,"TFDebertaForMaskedLM"),rBt.forEach(t),Iwr=r(ADe," (DeBERTa model)"),ADe.forEach(t),Nwr=i(me),yM=n(me,"LI",{});var LDe=s(yM);r9e=n(LDe,"STRONG",{});var tBt=s(r9e);qwr=r(tBt,"deberta-v2"),tBt.forEach(t),jwr=r(LDe," \u2014 "),IY=n(LDe,"A",{href:!0});var aBt=s(IY);Dwr=r(aBt,"TFDebertaV2ForMaskedLM"),aBt.forEach(t),Gwr=r(LDe," (DeBERTa-v2 model)"),LDe.forEach(t),Owr=i(me),xM=n(me,"LI",{});var yDe=s(xM);t9e=n(yDe,"STRONG",{});var nBt=s(t9e);Vwr=r(nBt,"distilbert"),nBt.forEach(t),Xwr=r(yDe," \u2014 "),NY=n(yDe,"A",{href:!0});var sBt=s(NY);zwr=r(sBt,"TFDistilBertForMaskedLM"),sBt.forEach(t),Qwr=r(yDe," (DistilBERT model)"),yDe.forEach(t),Wwr=i(me),$M=n(me,"LI",{});var xDe=s($M);a9e=n(xDe,"STRONG",{});var lBt=s(a9e);Hwr=r(lBt,"electra"),lBt.forEach(t),Uwr=r(xDe," \u2014 "),qY=n(xDe,"A",{href:!0});var iBt=s(qY);Jwr=r(iBt,"TFElectraForMaskedLM"),iBt.forEach(t),Ywr=r(xDe," (ELECTRA model)"),xDe.forEach(t),Kwr=i(me),kM=n(me,"LI",{});var $De=s(kM);n9e=n($De,"STRONG",{});var dBt=s(n9e);Zwr=r(dBt,"flaubert"),dBt.forEach(t),eAr=r($De," \u2014 "),jY=n($De,"A",{href:!0});var cBt=s(jY);oAr=r(cBt,"TFFlaubertWithLMHeadModel"),cBt.forEach(t),rAr=r($De," (FlauBERT model)"),$De.forEach(t),tAr=i(me),SM=n(me,"LI",{});var kDe=s(SM);s9e=n(kDe,"STRONG",{});var fBt=s(s9e);aAr=r(fBt,"funnel"),fBt.forEach(t),nAr=r(kDe," \u2014 "),DY=n(kDe,"A",{href:!0});var mBt=s(DY);sAr=r(mBt,"TFFunnelForMaskedLM"),mBt.forEach(t),lAr=r(kDe," (Funnel Transformer model)"),kDe.forEach(t),iAr=i(me),RM=n(me,"LI",{});var SDe=s(RM);l9e=n(SDe,"STRONG",{});var gBt=s(l9e);dAr=r(gBt,"layoutlm"),gBt.forEach(t),cAr=r(SDe," \u2014 "),GY=n(SDe,"A",{href:!0});var hBt=s(GY);fAr=r(hBt,"TFLayoutLMForMaskedLM"),hBt.forEach(t),mAr=r(SDe," (LayoutLM model)"),SDe.forEach(t),gAr=i(me),PM=n(me,"LI",{});var RDe=s(PM);i9e=n(RDe,"STRONG",{});var pBt=s(i9e);hAr=r(pBt,"longformer"),pBt.forEach(t),pAr=r(RDe," \u2014 "),OY=n(RDe,"A",{href:!0});var _Bt=s(OY);_Ar=r(_Bt,"TFLongformerForMaskedLM"),_Bt.forEach(t),uAr=r(RDe," (Longformer model)"),RDe.forEach(t),bAr=i(me),BM=n(me,"LI",{});var PDe=s(BM);d9e=n(PDe,"STRONG",{});var uBt=s(d9e);vAr=r(uBt,"mobilebert"),uBt.forEach(t),FAr=r(PDe," \u2014 "),VY=n(PDe,"A",{href:!0});var bBt=s(VY);TAr=r(bBt,"TFMobileBertForMaskedLM"),bBt.forEach(t),MAr=r(PDe," (MobileBERT model)"),PDe.forEach(t),EAr=i(me),IM=n(me,"LI",{});var BDe=s(IM);c9e=n(BDe,"STRONG",{});var vBt=s(c9e);CAr=r(vBt,"mpnet"),vBt.forEach(t),wAr=r(BDe," \u2014 "),XY=n(BDe,"A",{href:!0});var FBt=s(XY);AAr=r(FBt,"TFMPNetForMaskedLM"),FBt.forEach(t),LAr=r(BDe," (MPNet model)"),BDe.forEach(t),yAr=i(me),NM=n(me,"LI",{});var IDe=s(NM);f9e=n(IDe,"STRONG",{});var TBt=s(f9e);xAr=r(TBt,"rembert"),TBt.forEach(t),$Ar=r(IDe," \u2014 "),zY=n(IDe,"A",{href:!0});var MBt=s(zY);kAr=r(MBt,"TFRemBertForMaskedLM"),MBt.forEach(t),SAr=r(IDe," (RemBERT model)"),IDe.forEach(t),RAr=i(me),qM=n(me,"LI",{});var NDe=s(qM);m9e=n(NDe,"STRONG",{});var EBt=s(m9e);PAr=r(EBt,"roberta"),EBt.forEach(t),BAr=r(NDe," \u2014 "),QY=n(NDe,"A",{href:!0});var CBt=s(QY);IAr=r(CBt,"TFRobertaForMaskedLM"),CBt.forEach(t),NAr=r(NDe," (RoBERTa model)"),NDe.forEach(t),qAr=i(me),jM=n(me,"LI",{});var qDe=s(jM);g9e=n(qDe,"STRONG",{});var wBt=s(g9e);jAr=r(wBt,"roformer"),wBt.forEach(t),DAr=r(qDe," \u2014 "),WY=n(qDe,"A",{href:!0});var ABt=s(WY);GAr=r(ABt,"TFRoFormerForMaskedLM"),ABt.forEach(t),OAr=r(qDe," (RoFormer model)"),qDe.forEach(t),VAr=i(me),DM=n(me,"LI",{});var jDe=s(DM);h9e=n(jDe,"STRONG",{});var LBt=s(h9e);XAr=r(LBt,"tapas"),LBt.forEach(t),zAr=r(jDe," \u2014 "),HY=n(jDe,"A",{href:!0});var yBt=s(HY);QAr=r(yBt,"TFTapasForMaskedLM"),yBt.forEach(t),WAr=r(jDe," (TAPAS model)"),jDe.forEach(t),HAr=i(me),GM=n(me,"LI",{});var DDe=s(GM);p9e=n(DDe,"STRONG",{});var xBt=s(p9e);UAr=r(xBt,"xlm"),xBt.forEach(t),JAr=r(DDe," \u2014 "),UY=n(DDe,"A",{href:!0});var $Bt=s(UY);YAr=r($Bt,"TFXLMWithLMHeadModel"),$Bt.forEach(t),KAr=r(DDe," (XLM model)"),DDe.forEach(t),ZAr=i(me),OM=n(me,"LI",{});var GDe=s(OM);_9e=n(GDe,"STRONG",{});var kBt=s(_9e);eLr=r(kBt,"xlm-roberta"),kBt.forEach(t),oLr=r(GDe," \u2014 "),JY=n(GDe,"A",{href:!0});var SBt=s(JY);rLr=r(SBt,"TFXLMRobertaForMaskedLM"),SBt.forEach(t),tLr=r(GDe," (XLM-RoBERTa model)"),GDe.forEach(t),me.forEach(t),aLr=i(Dl),T(VM.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Yze=i(f),Mc=n(f,"H2",{class:!0});var nHe=s(Mc);XM=n(nHe,"A",{id:!0,class:!0,href:!0});var RBt=s(XM);u9e=n(RBt,"SPAN",{});var PBt=s(u9e);T(wx.$$.fragment,PBt),PBt.forEach(t),RBt.forEach(t),nLr=i(nHe),b9e=n(nHe,"SPAN",{});var BBt=s(b9e);sLr=r(BBt,"TFAutoModelForSeq2SeqLM"),BBt.forEach(t),nHe.forEach(t),Kze=i(f),sr=n(f,"DIV",{class:!0});var Gl=s(sr);T(Ax.$$.fragment,Gl),lLr=i(Gl),Ec=n(Gl,"P",{});var tae=s(Ec);iLr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YY=n(tae,"A",{href:!0});var IBt=s(YY);dLr=r(IBt,"from_pretrained()"),IBt.forEach(t),cLr=r(tae," class method or the "),KY=n(tae,"A",{href:!0});var NBt=s(KY);fLr=r(NBt,"from_config()"),NBt.forEach(t),mLr=r(tae,` class
method.`),tae.forEach(t),gLr=i(Gl),Lx=n(Gl,"P",{});var sHe=s(Lx);hLr=r(sHe,"This class cannot be instantiated directly using "),v9e=n(sHe,"CODE",{});var qBt=s(v9e);pLr=r(qBt,"__init__()"),qBt.forEach(t),_Lr=r(sHe," (throws an error)."),sHe.forEach(t),uLr=i(Gl),qt=n(Gl,"DIV",{class:!0});var MA=s(qt);T(yx.$$.fragment,MA),bLr=i(MA),F9e=n(MA,"P",{});var jBt=s(F9e);vLr=r(jBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jBt.forEach(t),FLr=i(MA),Cc=n(MA,"P",{});var aae=s(Cc);TLr=r(aae,`Note:
Loading a model from its configuration file does `),T9e=n(aae,"STRONG",{});var DBt=s(T9e);MLr=r(DBt,"not"),DBt.forEach(t),ELr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(aae,"A",{href:!0});var GBt=s(ZY);CLr=r(GBt,"from_pretrained()"),GBt.forEach(t),wLr=r(aae," to load the model weights."),aae.forEach(t),ALr=i(MA),T(zM.$$.fragment,MA),MA.forEach(t),LLr=i(Gl),Pr=n(Gl,"DIV",{class:!0});var Ol=s(Pr);T(xx.$$.fragment,Ol),yLr=i(Ol),M9e=n(Ol,"P",{});var OBt=s(M9e);xLr=r(OBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OBt.forEach(t),$Lr=i(Ol),gn=n(Ol,"P",{});var EA=s(gn);kLr=r(EA,"The model class to instantiate is selected based on the "),E9e=n(EA,"CODE",{});var VBt=s(E9e);SLr=r(VBt,"model_type"),VBt.forEach(t),RLr=r(EA,` property of the config object (either
passed as an argument or loaded from `),C9e=n(EA,"CODE",{});var XBt=s(C9e);PLr=r(XBt,"pretrained_model_name_or_path"),XBt.forEach(t),BLr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w9e=n(EA,"CODE",{});var zBt=s(w9e);ILr=r(zBt,"pretrained_model_name_or_path"),zBt.forEach(t),NLr=r(EA,":"),EA.forEach(t),qLr=i(Ol),ye=n(Ol,"UL",{});var Ie=s(ye);QM=n(Ie,"LI",{});var ODe=s(QM);A9e=n(ODe,"STRONG",{});var QBt=s(A9e);jLr=r(QBt,"bart"),QBt.forEach(t),DLr=r(ODe," \u2014 "),eK=n(ODe,"A",{href:!0});var WBt=s(eK);GLr=r(WBt,"TFBartForConditionalGeneration"),WBt.forEach(t),OLr=r(ODe," (BART model)"),ODe.forEach(t),VLr=i(Ie),WM=n(Ie,"LI",{});var VDe=s(WM);L9e=n(VDe,"STRONG",{});var HBt=s(L9e);XLr=r(HBt,"blenderbot"),HBt.forEach(t),zLr=r(VDe," \u2014 "),oK=n(VDe,"A",{href:!0});var UBt=s(oK);QLr=r(UBt,"TFBlenderbotForConditionalGeneration"),UBt.forEach(t),WLr=r(VDe," (Blenderbot model)"),VDe.forEach(t),HLr=i(Ie),HM=n(Ie,"LI",{});var XDe=s(HM);y9e=n(XDe,"STRONG",{});var JBt=s(y9e);ULr=r(JBt,"blenderbot-small"),JBt.forEach(t),JLr=r(XDe," \u2014 "),rK=n(XDe,"A",{href:!0});var YBt=s(rK);YLr=r(YBt,"TFBlenderbotSmallForConditionalGeneration"),YBt.forEach(t),KLr=r(XDe," (BlenderbotSmall model)"),XDe.forEach(t),ZLr=i(Ie),UM=n(Ie,"LI",{});var zDe=s(UM);x9e=n(zDe,"STRONG",{});var KBt=s(x9e);eyr=r(KBt,"encoder-decoder"),KBt.forEach(t),oyr=r(zDe," \u2014 "),tK=n(zDe,"A",{href:!0});var ZBt=s(tK);ryr=r(ZBt,"TFEncoderDecoderModel"),ZBt.forEach(t),tyr=r(zDe," (Encoder decoder model)"),zDe.forEach(t),ayr=i(Ie),JM=n(Ie,"LI",{});var QDe=s(JM);$9e=n(QDe,"STRONG",{});var eIt=s($9e);nyr=r(eIt,"led"),eIt.forEach(t),syr=r(QDe," \u2014 "),aK=n(QDe,"A",{href:!0});var oIt=s(aK);lyr=r(oIt,"TFLEDForConditionalGeneration"),oIt.forEach(t),iyr=r(QDe," (LED model)"),QDe.forEach(t),dyr=i(Ie),YM=n(Ie,"LI",{});var WDe=s(YM);k9e=n(WDe,"STRONG",{});var rIt=s(k9e);cyr=r(rIt,"marian"),rIt.forEach(t),fyr=r(WDe," \u2014 "),nK=n(WDe,"A",{href:!0});var tIt=s(nK);myr=r(tIt,"TFMarianMTModel"),tIt.forEach(t),gyr=r(WDe," (Marian model)"),WDe.forEach(t),hyr=i(Ie),KM=n(Ie,"LI",{});var HDe=s(KM);S9e=n(HDe,"STRONG",{});var aIt=s(S9e);pyr=r(aIt,"mbart"),aIt.forEach(t),_yr=r(HDe," \u2014 "),sK=n(HDe,"A",{href:!0});var nIt=s(sK);uyr=r(nIt,"TFMBartForConditionalGeneration"),nIt.forEach(t),byr=r(HDe," (mBART model)"),HDe.forEach(t),vyr=i(Ie),ZM=n(Ie,"LI",{});var UDe=s(ZM);R9e=n(UDe,"STRONG",{});var sIt=s(R9e);Fyr=r(sIt,"mt5"),sIt.forEach(t),Tyr=r(UDe," \u2014 "),lK=n(UDe,"A",{href:!0});var lIt=s(lK);Myr=r(lIt,"TFMT5ForConditionalGeneration"),lIt.forEach(t),Eyr=r(UDe," (MT5 model)"),UDe.forEach(t),Cyr=i(Ie),eE=n(Ie,"LI",{});var JDe=s(eE);P9e=n(JDe,"STRONG",{});var iIt=s(P9e);wyr=r(iIt,"pegasus"),iIt.forEach(t),Ayr=r(JDe," \u2014 "),iK=n(JDe,"A",{href:!0});var dIt=s(iK);Lyr=r(dIt,"TFPegasusForConditionalGeneration"),dIt.forEach(t),yyr=r(JDe," (Pegasus model)"),JDe.forEach(t),xyr=i(Ie),oE=n(Ie,"LI",{});var YDe=s(oE);B9e=n(YDe,"STRONG",{});var cIt=s(B9e);$yr=r(cIt,"t5"),cIt.forEach(t),kyr=r(YDe," \u2014 "),dK=n(YDe,"A",{href:!0});var fIt=s(dK);Syr=r(fIt,"TFT5ForConditionalGeneration"),fIt.forEach(t),Ryr=r(YDe," (T5 model)"),YDe.forEach(t),Ie.forEach(t),Pyr=i(Ol),T(rE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Zze=i(f),wc=n(f,"H2",{class:!0});var lHe=s(wc);tE=n(lHe,"A",{id:!0,class:!0,href:!0});var mIt=s(tE);I9e=n(mIt,"SPAN",{});var gIt=s(I9e);T($x.$$.fragment,gIt),gIt.forEach(t),mIt.forEach(t),Byr=i(lHe),N9e=n(lHe,"SPAN",{});var hIt=s(N9e);Iyr=r(hIt,"TFAutoModelForSequenceClassification"),hIt.forEach(t),lHe.forEach(t),eQe=i(f),lr=n(f,"DIV",{class:!0});var Vl=s(lr);T(kx.$$.fragment,Vl),Nyr=i(Vl),Ac=n(Vl,"P",{});var nae=s(Ac);qyr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cK=n(nae,"A",{href:!0});var pIt=s(cK);jyr=r(pIt,"from_pretrained()"),pIt.forEach(t),Dyr=r(nae," class method or the "),fK=n(nae,"A",{href:!0});var _It=s(fK);Gyr=r(_It,"from_config()"),_It.forEach(t),Oyr=r(nae,` class
method.`),nae.forEach(t),Vyr=i(Vl),Sx=n(Vl,"P",{});var iHe=s(Sx);Xyr=r(iHe,"This class cannot be instantiated directly using "),q9e=n(iHe,"CODE",{});var uIt=s(q9e);zyr=r(uIt,"__init__()"),uIt.forEach(t),Qyr=r(iHe," (throws an error)."),iHe.forEach(t),Wyr=i(Vl),jt=n(Vl,"DIV",{class:!0});var CA=s(jt);T(Rx.$$.fragment,CA),Hyr=i(CA),j9e=n(CA,"P",{});var bIt=s(j9e);Uyr=r(bIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bIt.forEach(t),Jyr=i(CA),Lc=n(CA,"P",{});var sae=s(Lc);Yyr=r(sae,`Note:
Loading a model from its configuration file does `),D9e=n(sae,"STRONG",{});var vIt=s(D9e);Kyr=r(vIt,"not"),vIt.forEach(t),Zyr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(sae,"A",{href:!0});var FIt=s(mK);e8r=r(FIt,"from_pretrained()"),FIt.forEach(t),o8r=r(sae," to load the model weights."),sae.forEach(t),r8r=i(CA),T(aE.$$.fragment,CA),CA.forEach(t),t8r=i(Vl),Br=n(Vl,"DIV",{class:!0});var Xl=s(Br);T(Px.$$.fragment,Xl),a8r=i(Xl),G9e=n(Xl,"P",{});var TIt=s(G9e);n8r=r(TIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TIt.forEach(t),s8r=i(Xl),hn=n(Xl,"P",{});var wA=s(hn);l8r=r(wA,"The model class to instantiate is selected based on the "),O9e=n(wA,"CODE",{});var MIt=s(O9e);i8r=r(MIt,"model_type"),MIt.forEach(t),d8r=r(wA,` property of the config object (either
passed as an argument or loaded from `),V9e=n(wA,"CODE",{});var EIt=s(V9e);c8r=r(EIt,"pretrained_model_name_or_path"),EIt.forEach(t),f8r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=n(wA,"CODE",{});var CIt=s(X9e);m8r=r(CIt,"pretrained_model_name_or_path"),CIt.forEach(t),g8r=r(wA,":"),wA.forEach(t),h8r=i(Xl),te=n(Xl,"UL",{});var ne=s(te);nE=n(ne,"LI",{});var KDe=s(nE);z9e=n(KDe,"STRONG",{});var wIt=s(z9e);p8r=r(wIt,"albert"),wIt.forEach(t),_8r=r(KDe," \u2014 "),gK=n(KDe,"A",{href:!0});var AIt=s(gK);u8r=r(AIt,"TFAlbertForSequenceClassification"),AIt.forEach(t),b8r=r(KDe," (ALBERT model)"),KDe.forEach(t),v8r=i(ne),sE=n(ne,"LI",{});var ZDe=s(sE);Q9e=n(ZDe,"STRONG",{});var LIt=s(Q9e);F8r=r(LIt,"bert"),LIt.forEach(t),T8r=r(ZDe," \u2014 "),hK=n(ZDe,"A",{href:!0});var yIt=s(hK);M8r=r(yIt,"TFBertForSequenceClassification"),yIt.forEach(t),E8r=r(ZDe," (BERT model)"),ZDe.forEach(t),C8r=i(ne),lE=n(ne,"LI",{});var eGe=s(lE);W9e=n(eGe,"STRONG",{});var xIt=s(W9e);w8r=r(xIt,"camembert"),xIt.forEach(t),A8r=r(eGe," \u2014 "),pK=n(eGe,"A",{href:!0});var $It=s(pK);L8r=r($It,"TFCamembertForSequenceClassification"),$It.forEach(t),y8r=r(eGe," (CamemBERT model)"),eGe.forEach(t),x8r=i(ne),iE=n(ne,"LI",{});var oGe=s(iE);H9e=n(oGe,"STRONG",{});var kIt=s(H9e);$8r=r(kIt,"convbert"),kIt.forEach(t),k8r=r(oGe," \u2014 "),_K=n(oGe,"A",{href:!0});var SIt=s(_K);S8r=r(SIt,"TFConvBertForSequenceClassification"),SIt.forEach(t),R8r=r(oGe," (ConvBERT model)"),oGe.forEach(t),P8r=i(ne),dE=n(ne,"LI",{});var rGe=s(dE);U9e=n(rGe,"STRONG",{});var RIt=s(U9e);B8r=r(RIt,"ctrl"),RIt.forEach(t),I8r=r(rGe," \u2014 "),uK=n(rGe,"A",{href:!0});var PIt=s(uK);N8r=r(PIt,"TFCTRLForSequenceClassification"),PIt.forEach(t),q8r=r(rGe," (CTRL model)"),rGe.forEach(t),j8r=i(ne),cE=n(ne,"LI",{});var tGe=s(cE);J9e=n(tGe,"STRONG",{});var BIt=s(J9e);D8r=r(BIt,"deberta"),BIt.forEach(t),G8r=r(tGe," \u2014 "),bK=n(tGe,"A",{href:!0});var IIt=s(bK);O8r=r(IIt,"TFDebertaForSequenceClassification"),IIt.forEach(t),V8r=r(tGe," (DeBERTa model)"),tGe.forEach(t),X8r=i(ne),fE=n(ne,"LI",{});var aGe=s(fE);Y9e=n(aGe,"STRONG",{});var NIt=s(Y9e);z8r=r(NIt,"deberta-v2"),NIt.forEach(t),Q8r=r(aGe," \u2014 "),vK=n(aGe,"A",{href:!0});var qIt=s(vK);W8r=r(qIt,"TFDebertaV2ForSequenceClassification"),qIt.forEach(t),H8r=r(aGe," (DeBERTa-v2 model)"),aGe.forEach(t),U8r=i(ne),mE=n(ne,"LI",{});var nGe=s(mE);K9e=n(nGe,"STRONG",{});var jIt=s(K9e);J8r=r(jIt,"distilbert"),jIt.forEach(t),Y8r=r(nGe," \u2014 "),FK=n(nGe,"A",{href:!0});var DIt=s(FK);K8r=r(DIt,"TFDistilBertForSequenceClassification"),DIt.forEach(t),Z8r=r(nGe," (DistilBERT model)"),nGe.forEach(t),exr=i(ne),gE=n(ne,"LI",{});var sGe=s(gE);Z9e=n(sGe,"STRONG",{});var GIt=s(Z9e);oxr=r(GIt,"electra"),GIt.forEach(t),rxr=r(sGe," \u2014 "),TK=n(sGe,"A",{href:!0});var OIt=s(TK);txr=r(OIt,"TFElectraForSequenceClassification"),OIt.forEach(t),axr=r(sGe," (ELECTRA model)"),sGe.forEach(t),nxr=i(ne),hE=n(ne,"LI",{});var lGe=s(hE);eMe=n(lGe,"STRONG",{});var VIt=s(eMe);sxr=r(VIt,"flaubert"),VIt.forEach(t),lxr=r(lGe," \u2014 "),MK=n(lGe,"A",{href:!0});var XIt=s(MK);ixr=r(XIt,"TFFlaubertForSequenceClassification"),XIt.forEach(t),dxr=r(lGe," (FlauBERT model)"),lGe.forEach(t),cxr=i(ne),pE=n(ne,"LI",{});var iGe=s(pE);oMe=n(iGe,"STRONG",{});var zIt=s(oMe);fxr=r(zIt,"funnel"),zIt.forEach(t),mxr=r(iGe," \u2014 "),EK=n(iGe,"A",{href:!0});var QIt=s(EK);gxr=r(QIt,"TFFunnelForSequenceClassification"),QIt.forEach(t),hxr=r(iGe," (Funnel Transformer model)"),iGe.forEach(t),pxr=i(ne),_E=n(ne,"LI",{});var dGe=s(_E);rMe=n(dGe,"STRONG",{});var WIt=s(rMe);_xr=r(WIt,"gpt2"),WIt.forEach(t),uxr=r(dGe," \u2014 "),CK=n(dGe,"A",{href:!0});var HIt=s(CK);bxr=r(HIt,"TFGPT2ForSequenceClassification"),HIt.forEach(t),vxr=r(dGe," (OpenAI GPT-2 model)"),dGe.forEach(t),Fxr=i(ne),uE=n(ne,"LI",{});var cGe=s(uE);tMe=n(cGe,"STRONG",{});var UIt=s(tMe);Txr=r(UIt,"gptj"),UIt.forEach(t),Mxr=r(cGe," \u2014 "),wK=n(cGe,"A",{href:!0});var JIt=s(wK);Exr=r(JIt,"TFGPTJForSequenceClassification"),JIt.forEach(t),Cxr=r(cGe," (GPT-J model)"),cGe.forEach(t),wxr=i(ne),bE=n(ne,"LI",{});var fGe=s(bE);aMe=n(fGe,"STRONG",{});var YIt=s(aMe);Axr=r(YIt,"layoutlm"),YIt.forEach(t),Lxr=r(fGe," \u2014 "),AK=n(fGe,"A",{href:!0});var KIt=s(AK);yxr=r(KIt,"TFLayoutLMForSequenceClassification"),KIt.forEach(t),xxr=r(fGe," (LayoutLM model)"),fGe.forEach(t),$xr=i(ne),vE=n(ne,"LI",{});var mGe=s(vE);nMe=n(mGe,"STRONG",{});var ZIt=s(nMe);kxr=r(ZIt,"longformer"),ZIt.forEach(t),Sxr=r(mGe," \u2014 "),LK=n(mGe,"A",{href:!0});var eNt=s(LK);Rxr=r(eNt,"TFLongformerForSequenceClassification"),eNt.forEach(t),Pxr=r(mGe," (Longformer model)"),mGe.forEach(t),Bxr=i(ne),FE=n(ne,"LI",{});var gGe=s(FE);sMe=n(gGe,"STRONG",{});var oNt=s(sMe);Ixr=r(oNt,"mobilebert"),oNt.forEach(t),Nxr=r(gGe," \u2014 "),yK=n(gGe,"A",{href:!0});var rNt=s(yK);qxr=r(rNt,"TFMobileBertForSequenceClassification"),rNt.forEach(t),jxr=r(gGe," (MobileBERT model)"),gGe.forEach(t),Dxr=i(ne),TE=n(ne,"LI",{});var hGe=s(TE);lMe=n(hGe,"STRONG",{});var tNt=s(lMe);Gxr=r(tNt,"mpnet"),tNt.forEach(t),Oxr=r(hGe," \u2014 "),xK=n(hGe,"A",{href:!0});var aNt=s(xK);Vxr=r(aNt,"TFMPNetForSequenceClassification"),aNt.forEach(t),Xxr=r(hGe," (MPNet model)"),hGe.forEach(t),zxr=i(ne),ME=n(ne,"LI",{});var pGe=s(ME);iMe=n(pGe,"STRONG",{});var nNt=s(iMe);Qxr=r(nNt,"openai-gpt"),nNt.forEach(t),Wxr=r(pGe," \u2014 "),$K=n(pGe,"A",{href:!0});var sNt=s($K);Hxr=r(sNt,"TFOpenAIGPTForSequenceClassification"),sNt.forEach(t),Uxr=r(pGe," (OpenAI GPT model)"),pGe.forEach(t),Jxr=i(ne),EE=n(ne,"LI",{});var _Ge=s(EE);dMe=n(_Ge,"STRONG",{});var lNt=s(dMe);Yxr=r(lNt,"rembert"),lNt.forEach(t),Kxr=r(_Ge," \u2014 "),kK=n(_Ge,"A",{href:!0});var iNt=s(kK);Zxr=r(iNt,"TFRemBertForSequenceClassification"),iNt.forEach(t),e$r=r(_Ge," (RemBERT model)"),_Ge.forEach(t),o$r=i(ne),CE=n(ne,"LI",{});var uGe=s(CE);cMe=n(uGe,"STRONG",{});var dNt=s(cMe);r$r=r(dNt,"roberta"),dNt.forEach(t),t$r=r(uGe," \u2014 "),SK=n(uGe,"A",{href:!0});var cNt=s(SK);a$r=r(cNt,"TFRobertaForSequenceClassification"),cNt.forEach(t),n$r=r(uGe," (RoBERTa model)"),uGe.forEach(t),s$r=i(ne),wE=n(ne,"LI",{});var bGe=s(wE);fMe=n(bGe,"STRONG",{});var fNt=s(fMe);l$r=r(fNt,"roformer"),fNt.forEach(t),i$r=r(bGe," \u2014 "),RK=n(bGe,"A",{href:!0});var mNt=s(RK);d$r=r(mNt,"TFRoFormerForSequenceClassification"),mNt.forEach(t),c$r=r(bGe," (RoFormer model)"),bGe.forEach(t),f$r=i(ne),AE=n(ne,"LI",{});var vGe=s(AE);mMe=n(vGe,"STRONG",{});var gNt=s(mMe);m$r=r(gNt,"tapas"),gNt.forEach(t),g$r=r(vGe," \u2014 "),PK=n(vGe,"A",{href:!0});var hNt=s(PK);h$r=r(hNt,"TFTapasForSequenceClassification"),hNt.forEach(t),p$r=r(vGe," (TAPAS model)"),vGe.forEach(t),_$r=i(ne),LE=n(ne,"LI",{});var FGe=s(LE);gMe=n(FGe,"STRONG",{});var pNt=s(gMe);u$r=r(pNt,"transfo-xl"),pNt.forEach(t),b$r=r(FGe," \u2014 "),BK=n(FGe,"A",{href:!0});var _Nt=s(BK);v$r=r(_Nt,"TFTransfoXLForSequenceClassification"),_Nt.forEach(t),F$r=r(FGe," (Transformer-XL model)"),FGe.forEach(t),T$r=i(ne),yE=n(ne,"LI",{});var TGe=s(yE);hMe=n(TGe,"STRONG",{});var uNt=s(hMe);M$r=r(uNt,"xlm"),uNt.forEach(t),E$r=r(TGe," \u2014 "),IK=n(TGe,"A",{href:!0});var bNt=s(IK);C$r=r(bNt,"TFXLMForSequenceClassification"),bNt.forEach(t),w$r=r(TGe," (XLM model)"),TGe.forEach(t),A$r=i(ne),xE=n(ne,"LI",{});var MGe=s(xE);pMe=n(MGe,"STRONG",{});var vNt=s(pMe);L$r=r(vNt,"xlm-roberta"),vNt.forEach(t),y$r=r(MGe," \u2014 "),NK=n(MGe,"A",{href:!0});var FNt=s(NK);x$r=r(FNt,"TFXLMRobertaForSequenceClassification"),FNt.forEach(t),$$r=r(MGe," (XLM-RoBERTa model)"),MGe.forEach(t),k$r=i(ne),$E=n(ne,"LI",{});var EGe=s($E);_Me=n(EGe,"STRONG",{});var TNt=s(_Me);S$r=r(TNt,"xlnet"),TNt.forEach(t),R$r=r(EGe," \u2014 "),qK=n(EGe,"A",{href:!0});var MNt=s(qK);P$r=r(MNt,"TFXLNetForSequenceClassification"),MNt.forEach(t),B$r=r(EGe," (XLNet model)"),EGe.forEach(t),ne.forEach(t),I$r=i(Xl),T(kE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),oQe=i(f),yc=n(f,"H2",{class:!0});var dHe=s(yc);SE=n(dHe,"A",{id:!0,class:!0,href:!0});var ENt=s(SE);uMe=n(ENt,"SPAN",{});var CNt=s(uMe);T(Bx.$$.fragment,CNt),CNt.forEach(t),ENt.forEach(t),N$r=i(dHe),bMe=n(dHe,"SPAN",{});var wNt=s(bMe);q$r=r(wNt,"TFAutoModelForMultipleChoice"),wNt.forEach(t),dHe.forEach(t),rQe=i(f),ir=n(f,"DIV",{class:!0});var zl=s(ir);T(Ix.$$.fragment,zl),j$r=i(zl),xc=n(zl,"P",{});var lae=s(xc);D$r=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jK=n(lae,"A",{href:!0});var ANt=s(jK);G$r=r(ANt,"from_pretrained()"),ANt.forEach(t),O$r=r(lae," class method or the "),DK=n(lae,"A",{href:!0});var LNt=s(DK);V$r=r(LNt,"from_config()"),LNt.forEach(t),X$r=r(lae,` class
method.`),lae.forEach(t),z$r=i(zl),Nx=n(zl,"P",{});var cHe=s(Nx);Q$r=r(cHe,"This class cannot be instantiated directly using "),vMe=n(cHe,"CODE",{});var yNt=s(vMe);W$r=r(yNt,"__init__()"),yNt.forEach(t),H$r=r(cHe," (throws an error)."),cHe.forEach(t),U$r=i(zl),Dt=n(zl,"DIV",{class:!0});var AA=s(Dt);T(qx.$$.fragment,AA),J$r=i(AA),FMe=n(AA,"P",{});var xNt=s(FMe);Y$r=r(xNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xNt.forEach(t),K$r=i(AA),$c=n(AA,"P",{});var iae=s($c);Z$r=r(iae,`Note:
Loading a model from its configuration file does `),TMe=n(iae,"STRONG",{});var $Nt=s(TMe);ekr=r($Nt,"not"),$Nt.forEach(t),okr=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(iae,"A",{href:!0});var kNt=s(GK);rkr=r(kNt,"from_pretrained()"),kNt.forEach(t),tkr=r(iae," to load the model weights."),iae.forEach(t),akr=i(AA),T(RE.$$.fragment,AA),AA.forEach(t),nkr=i(zl),Ir=n(zl,"DIV",{class:!0});var Ql=s(Ir);T(jx.$$.fragment,Ql),skr=i(Ql),MMe=n(Ql,"P",{});var SNt=s(MMe);lkr=r(SNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SNt.forEach(t),ikr=i(Ql),pn=n(Ql,"P",{});var LA=s(pn);dkr=r(LA,"The model class to instantiate is selected based on the "),EMe=n(LA,"CODE",{});var RNt=s(EMe);ckr=r(RNt,"model_type"),RNt.forEach(t),fkr=r(LA,` property of the config object (either
passed as an argument or loaded from `),CMe=n(LA,"CODE",{});var PNt=s(CMe);mkr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),gkr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(LA,"CODE",{});var BNt=s(wMe);hkr=r(BNt,"pretrained_model_name_or_path"),BNt.forEach(t),pkr=r(LA,":"),LA.forEach(t),_kr=i(Ql),be=n(Ql,"UL",{});var Te=s(be);PE=n(Te,"LI",{});var CGe=s(PE);AMe=n(CGe,"STRONG",{});var INt=s(AMe);ukr=r(INt,"albert"),INt.forEach(t),bkr=r(CGe," \u2014 "),OK=n(CGe,"A",{href:!0});var NNt=s(OK);vkr=r(NNt,"TFAlbertForMultipleChoice"),NNt.forEach(t),Fkr=r(CGe," (ALBERT model)"),CGe.forEach(t),Tkr=i(Te),BE=n(Te,"LI",{});var wGe=s(BE);LMe=n(wGe,"STRONG",{});var qNt=s(LMe);Mkr=r(qNt,"bert"),qNt.forEach(t),Ekr=r(wGe," \u2014 "),VK=n(wGe,"A",{href:!0});var jNt=s(VK);Ckr=r(jNt,"TFBertForMultipleChoice"),jNt.forEach(t),wkr=r(wGe," (BERT model)"),wGe.forEach(t),Akr=i(Te),IE=n(Te,"LI",{});var AGe=s(IE);yMe=n(AGe,"STRONG",{});var DNt=s(yMe);Lkr=r(DNt,"camembert"),DNt.forEach(t),ykr=r(AGe," \u2014 "),XK=n(AGe,"A",{href:!0});var GNt=s(XK);xkr=r(GNt,"TFCamembertForMultipleChoice"),GNt.forEach(t),$kr=r(AGe," (CamemBERT model)"),AGe.forEach(t),kkr=i(Te),NE=n(Te,"LI",{});var LGe=s(NE);xMe=n(LGe,"STRONG",{});var ONt=s(xMe);Skr=r(ONt,"convbert"),ONt.forEach(t),Rkr=r(LGe," \u2014 "),zK=n(LGe,"A",{href:!0});var VNt=s(zK);Pkr=r(VNt,"TFConvBertForMultipleChoice"),VNt.forEach(t),Bkr=r(LGe," (ConvBERT model)"),LGe.forEach(t),Ikr=i(Te),qE=n(Te,"LI",{});var yGe=s(qE);$Me=n(yGe,"STRONG",{});var XNt=s($Me);Nkr=r(XNt,"distilbert"),XNt.forEach(t),qkr=r(yGe," \u2014 "),QK=n(yGe,"A",{href:!0});var zNt=s(QK);jkr=r(zNt,"TFDistilBertForMultipleChoice"),zNt.forEach(t),Dkr=r(yGe," (DistilBERT model)"),yGe.forEach(t),Gkr=i(Te),jE=n(Te,"LI",{});var xGe=s(jE);kMe=n(xGe,"STRONG",{});var QNt=s(kMe);Okr=r(QNt,"electra"),QNt.forEach(t),Vkr=r(xGe," \u2014 "),WK=n(xGe,"A",{href:!0});var WNt=s(WK);Xkr=r(WNt,"TFElectraForMultipleChoice"),WNt.forEach(t),zkr=r(xGe," (ELECTRA model)"),xGe.forEach(t),Qkr=i(Te),DE=n(Te,"LI",{});var $Ge=s(DE);SMe=n($Ge,"STRONG",{});var HNt=s(SMe);Wkr=r(HNt,"flaubert"),HNt.forEach(t),Hkr=r($Ge," \u2014 "),HK=n($Ge,"A",{href:!0});var UNt=s(HK);Ukr=r(UNt,"TFFlaubertForMultipleChoice"),UNt.forEach(t),Jkr=r($Ge," (FlauBERT model)"),$Ge.forEach(t),Ykr=i(Te),GE=n(Te,"LI",{});var kGe=s(GE);RMe=n(kGe,"STRONG",{});var JNt=s(RMe);Kkr=r(JNt,"funnel"),JNt.forEach(t),Zkr=r(kGe," \u2014 "),UK=n(kGe,"A",{href:!0});var YNt=s(UK);eSr=r(YNt,"TFFunnelForMultipleChoice"),YNt.forEach(t),oSr=r(kGe," (Funnel Transformer model)"),kGe.forEach(t),rSr=i(Te),OE=n(Te,"LI",{});var SGe=s(OE);PMe=n(SGe,"STRONG",{});var KNt=s(PMe);tSr=r(KNt,"longformer"),KNt.forEach(t),aSr=r(SGe," \u2014 "),JK=n(SGe,"A",{href:!0});var ZNt=s(JK);nSr=r(ZNt,"TFLongformerForMultipleChoice"),ZNt.forEach(t),sSr=r(SGe," (Longformer model)"),SGe.forEach(t),lSr=i(Te),VE=n(Te,"LI",{});var RGe=s(VE);BMe=n(RGe,"STRONG",{});var eqt=s(BMe);iSr=r(eqt,"mobilebert"),eqt.forEach(t),dSr=r(RGe," \u2014 "),YK=n(RGe,"A",{href:!0});var oqt=s(YK);cSr=r(oqt,"TFMobileBertForMultipleChoice"),oqt.forEach(t),fSr=r(RGe," (MobileBERT model)"),RGe.forEach(t),mSr=i(Te),XE=n(Te,"LI",{});var PGe=s(XE);IMe=n(PGe,"STRONG",{});var rqt=s(IMe);gSr=r(rqt,"mpnet"),rqt.forEach(t),hSr=r(PGe," \u2014 "),KK=n(PGe,"A",{href:!0});var tqt=s(KK);pSr=r(tqt,"TFMPNetForMultipleChoice"),tqt.forEach(t),_Sr=r(PGe," (MPNet model)"),PGe.forEach(t),uSr=i(Te),zE=n(Te,"LI",{});var BGe=s(zE);NMe=n(BGe,"STRONG",{});var aqt=s(NMe);bSr=r(aqt,"rembert"),aqt.forEach(t),vSr=r(BGe," \u2014 "),ZK=n(BGe,"A",{href:!0});var nqt=s(ZK);FSr=r(nqt,"TFRemBertForMultipleChoice"),nqt.forEach(t),TSr=r(BGe," (RemBERT model)"),BGe.forEach(t),MSr=i(Te),QE=n(Te,"LI",{});var IGe=s(QE);qMe=n(IGe,"STRONG",{});var sqt=s(qMe);ESr=r(sqt,"roberta"),sqt.forEach(t),CSr=r(IGe," \u2014 "),eZ=n(IGe,"A",{href:!0});var lqt=s(eZ);wSr=r(lqt,"TFRobertaForMultipleChoice"),lqt.forEach(t),ASr=r(IGe," (RoBERTa model)"),IGe.forEach(t),LSr=i(Te),WE=n(Te,"LI",{});var NGe=s(WE);jMe=n(NGe,"STRONG",{});var iqt=s(jMe);ySr=r(iqt,"roformer"),iqt.forEach(t),xSr=r(NGe," \u2014 "),oZ=n(NGe,"A",{href:!0});var dqt=s(oZ);$Sr=r(dqt,"TFRoFormerForMultipleChoice"),dqt.forEach(t),kSr=r(NGe," (RoFormer model)"),NGe.forEach(t),SSr=i(Te),HE=n(Te,"LI",{});var qGe=s(HE);DMe=n(qGe,"STRONG",{});var cqt=s(DMe);RSr=r(cqt,"xlm"),cqt.forEach(t),PSr=r(qGe," \u2014 "),rZ=n(qGe,"A",{href:!0});var fqt=s(rZ);BSr=r(fqt,"TFXLMForMultipleChoice"),fqt.forEach(t),ISr=r(qGe," (XLM model)"),qGe.forEach(t),NSr=i(Te),UE=n(Te,"LI",{});var jGe=s(UE);GMe=n(jGe,"STRONG",{});var mqt=s(GMe);qSr=r(mqt,"xlm-roberta"),mqt.forEach(t),jSr=r(jGe," \u2014 "),tZ=n(jGe,"A",{href:!0});var gqt=s(tZ);DSr=r(gqt,"TFXLMRobertaForMultipleChoice"),gqt.forEach(t),GSr=r(jGe," (XLM-RoBERTa model)"),jGe.forEach(t),OSr=i(Te),JE=n(Te,"LI",{});var DGe=s(JE);OMe=n(DGe,"STRONG",{});var hqt=s(OMe);VSr=r(hqt,"xlnet"),hqt.forEach(t),XSr=r(DGe," \u2014 "),aZ=n(DGe,"A",{href:!0});var pqt=s(aZ);zSr=r(pqt,"TFXLNetForMultipleChoice"),pqt.forEach(t),QSr=r(DGe," (XLNet model)"),DGe.forEach(t),Te.forEach(t),WSr=i(Ql),T(YE.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),tQe=i(f),kc=n(f,"H2",{class:!0});var fHe=s(kc);KE=n(fHe,"A",{id:!0,class:!0,href:!0});var _qt=s(KE);VMe=n(_qt,"SPAN",{});var uqt=s(VMe);T(Dx.$$.fragment,uqt),uqt.forEach(t),_qt.forEach(t),HSr=i(fHe),XMe=n(fHe,"SPAN",{});var bqt=s(XMe);USr=r(bqt,"TFAutoModelForNextSentencePrediction"),bqt.forEach(t),fHe.forEach(t),aQe=i(f),dr=n(f,"DIV",{class:!0});var Wl=s(dr);T(Gx.$$.fragment,Wl),JSr=i(Wl),Sc=n(Wl,"P",{});var dae=s(Sc);YSr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=n(dae,"A",{href:!0});var vqt=s(nZ);KSr=r(vqt,"from_pretrained()"),vqt.forEach(t),ZSr=r(dae," class method or the "),sZ=n(dae,"A",{href:!0});var Fqt=s(sZ);eRr=r(Fqt,"from_config()"),Fqt.forEach(t),oRr=r(dae,` class
method.`),dae.forEach(t),rRr=i(Wl),Ox=n(Wl,"P",{});var mHe=s(Ox);tRr=r(mHe,"This class cannot be instantiated directly using "),zMe=n(mHe,"CODE",{});var Tqt=s(zMe);aRr=r(Tqt,"__init__()"),Tqt.forEach(t),nRr=r(mHe," (throws an error)."),mHe.forEach(t),sRr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var yA=s(Gt);T(Vx.$$.fragment,yA),lRr=i(yA),QMe=n(yA,"P",{});var Mqt=s(QMe);iRr=r(Mqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mqt.forEach(t),dRr=i(yA),Rc=n(yA,"P",{});var cae=s(Rc);cRr=r(cae,`Note:
Loading a model from its configuration file does `),WMe=n(cae,"STRONG",{});var Eqt=s(WMe);fRr=r(Eqt,"not"),Eqt.forEach(t),mRr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(cae,"A",{href:!0});var Cqt=s(lZ);gRr=r(Cqt,"from_pretrained()"),Cqt.forEach(t),hRr=r(cae," to load the model weights."),cae.forEach(t),pRr=i(yA),T(ZE.$$.fragment,yA),yA.forEach(t),_Rr=i(Wl),Nr=n(Wl,"DIV",{class:!0});var Hl=s(Nr);T(Xx.$$.fragment,Hl),uRr=i(Hl),HMe=n(Hl,"P",{});var wqt=s(HMe);bRr=r(wqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wqt.forEach(t),vRr=i(Hl),_n=n(Hl,"P",{});var xA=s(_n);FRr=r(xA,"The model class to instantiate is selected based on the "),UMe=n(xA,"CODE",{});var Aqt=s(UMe);TRr=r(Aqt,"model_type"),Aqt.forEach(t),MRr=r(xA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(xA,"CODE",{});var Lqt=s(JMe);ERr=r(Lqt,"pretrained_model_name_or_path"),Lqt.forEach(t),CRr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(xA,"CODE",{});var yqt=s(YMe);wRr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),ARr=r(xA,":"),xA.forEach(t),LRr=i(Hl),zx=n(Hl,"UL",{});var gHe=s(zx);eC=n(gHe,"LI",{});var GGe=s(eC);KMe=n(GGe,"STRONG",{});var xqt=s(KMe);yRr=r(xqt,"bert"),xqt.forEach(t),xRr=r(GGe," \u2014 "),iZ=n(GGe,"A",{href:!0});var $qt=s(iZ);$Rr=r($qt,"TFBertForNextSentencePrediction"),$qt.forEach(t),kRr=r(GGe," (BERT model)"),GGe.forEach(t),SRr=i(gHe),oC=n(gHe,"LI",{});var OGe=s(oC);ZMe=n(OGe,"STRONG",{});var kqt=s(ZMe);RRr=r(kqt,"mobilebert"),kqt.forEach(t),PRr=r(OGe," \u2014 "),dZ=n(OGe,"A",{href:!0});var Sqt=s(dZ);BRr=r(Sqt,"TFMobileBertForNextSentencePrediction"),Sqt.forEach(t),IRr=r(OGe," (MobileBERT model)"),OGe.forEach(t),gHe.forEach(t),NRr=i(Hl),T(rC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),nQe=i(f),Pc=n(f,"H2",{class:!0});var hHe=s(Pc);tC=n(hHe,"A",{id:!0,class:!0,href:!0});var Rqt=s(tC);eEe=n(Rqt,"SPAN",{});var Pqt=s(eEe);T(Qx.$$.fragment,Pqt),Pqt.forEach(t),Rqt.forEach(t),qRr=i(hHe),oEe=n(hHe,"SPAN",{});var Bqt=s(oEe);jRr=r(Bqt,"TFAutoModelForTableQuestionAnswering"),Bqt.forEach(t),hHe.forEach(t),sQe=i(f),cr=n(f,"DIV",{class:!0});var Ul=s(cr);T(Wx.$$.fragment,Ul),DRr=i(Ul),Bc=n(Ul,"P",{});var fae=s(Bc);GRr=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cZ=n(fae,"A",{href:!0});var Iqt=s(cZ);ORr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),VRr=r(fae," class method or the "),fZ=n(fae,"A",{href:!0});var Nqt=s(fZ);XRr=r(Nqt,"from_config()"),Nqt.forEach(t),zRr=r(fae,` class
method.`),fae.forEach(t),QRr=i(Ul),Hx=n(Ul,"P",{});var pHe=s(Hx);WRr=r(pHe,"This class cannot be instantiated directly using "),rEe=n(pHe,"CODE",{});var qqt=s(rEe);HRr=r(qqt,"__init__()"),qqt.forEach(t),URr=r(pHe," (throws an error)."),pHe.forEach(t),JRr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var $A=s(Ot);T(Ux.$$.fragment,$A),YRr=i($A),tEe=n($A,"P",{});var jqt=s(tEe);KRr=r(jqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jqt.forEach(t),ZRr=i($A),Ic=n($A,"P",{});var mae=s(Ic);ePr=r(mae,`Note:
Loading a model from its configuration file does `),aEe=n(mae,"STRONG",{});var Dqt=s(aEe);oPr=r(Dqt,"not"),Dqt.forEach(t),rPr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(mae,"A",{href:!0});var Gqt=s(mZ);tPr=r(Gqt,"from_pretrained()"),Gqt.forEach(t),aPr=r(mae," to load the model weights."),mae.forEach(t),nPr=i($A),T(aC.$$.fragment,$A),$A.forEach(t),sPr=i(Ul),qr=n(Ul,"DIV",{class:!0});var Jl=s(qr);T(Jx.$$.fragment,Jl),lPr=i(Jl),nEe=n(Jl,"P",{});var Oqt=s(nEe);iPr=r(Oqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Oqt.forEach(t),dPr=i(Jl),un=n(Jl,"P",{});var kA=s(un);cPr=r(kA,"The model class to instantiate is selected based on the "),sEe=n(kA,"CODE",{});var Vqt=s(sEe);fPr=r(Vqt,"model_type"),Vqt.forEach(t),mPr=r(kA,` property of the config object (either
passed as an argument or loaded from `),lEe=n(kA,"CODE",{});var Xqt=s(lEe);gPr=r(Xqt,"pretrained_model_name_or_path"),Xqt.forEach(t),hPr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(kA,"CODE",{});var zqt=s(iEe);pPr=r(zqt,"pretrained_model_name_or_path"),zqt.forEach(t),_Pr=r(kA,":"),kA.forEach(t),uPr=i(Jl),dEe=n(Jl,"UL",{});var Qqt=s(dEe);nC=n(Qqt,"LI",{});var VGe=s(nC);cEe=n(VGe,"STRONG",{});var Wqt=s(cEe);bPr=r(Wqt,"tapas"),Wqt.forEach(t),vPr=r(VGe," \u2014 "),gZ=n(VGe,"A",{href:!0});var Hqt=s(gZ);FPr=r(Hqt,"TFTapasForQuestionAnswering"),Hqt.forEach(t),TPr=r(VGe," (TAPAS model)"),VGe.forEach(t),Qqt.forEach(t),MPr=i(Jl),T(sC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),lQe=i(f),Nc=n(f,"H2",{class:!0});var _He=s(Nc);lC=n(_He,"A",{id:!0,class:!0,href:!0});var Uqt=s(lC);fEe=n(Uqt,"SPAN",{});var Jqt=s(fEe);T(Yx.$$.fragment,Jqt),Jqt.forEach(t),Uqt.forEach(t),EPr=i(_He),mEe=n(_He,"SPAN",{});var Yqt=s(mEe);CPr=r(Yqt,"TFAutoModelForTokenClassification"),Yqt.forEach(t),_He.forEach(t),iQe=i(f),fr=n(f,"DIV",{class:!0});var Yl=s(fr);T(Kx.$$.fragment,Yl),wPr=i(Yl),qc=n(Yl,"P",{});var gae=s(qc);APr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hZ=n(gae,"A",{href:!0});var Kqt=s(hZ);LPr=r(Kqt,"from_pretrained()"),Kqt.forEach(t),yPr=r(gae," class method or the "),pZ=n(gae,"A",{href:!0});var Zqt=s(pZ);xPr=r(Zqt,"from_config()"),Zqt.forEach(t),$Pr=r(gae,` class
method.`),gae.forEach(t),kPr=i(Yl),Zx=n(Yl,"P",{});var uHe=s(Zx);SPr=r(uHe,"This class cannot be instantiated directly using "),gEe=n(uHe,"CODE",{});var ejt=s(gEe);RPr=r(ejt,"__init__()"),ejt.forEach(t),PPr=r(uHe," (throws an error)."),uHe.forEach(t),BPr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var SA=s(Vt);T(e$.$$.fragment,SA),IPr=i(SA),hEe=n(SA,"P",{});var ojt=s(hEe);NPr=r(ojt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ojt.forEach(t),qPr=i(SA),jc=n(SA,"P",{});var hae=s(jc);jPr=r(hae,`Note:
Loading a model from its configuration file does `),pEe=n(hae,"STRONG",{});var rjt=s(pEe);DPr=r(rjt,"not"),rjt.forEach(t),GPr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(hae,"A",{href:!0});var tjt=s(_Z);OPr=r(tjt,"from_pretrained()"),tjt.forEach(t),VPr=r(hae," to load the model weights."),hae.forEach(t),XPr=i(SA),T(iC.$$.fragment,SA),SA.forEach(t),zPr=i(Yl),jr=n(Yl,"DIV",{class:!0});var Kl=s(jr);T(o$.$$.fragment,Kl),QPr=i(Kl),_Ee=n(Kl,"P",{});var ajt=s(_Ee);WPr=r(ajt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ajt.forEach(t),HPr=i(Kl),bn=n(Kl,"P",{});var RA=s(bn);UPr=r(RA,"The model class to instantiate is selected based on the "),uEe=n(RA,"CODE",{});var njt=s(uEe);JPr=r(njt,"model_type"),njt.forEach(t),YPr=r(RA,` property of the config object (either
passed as an argument or loaded from `),bEe=n(RA,"CODE",{});var sjt=s(bEe);KPr=r(sjt,"pretrained_model_name_or_path"),sjt.forEach(t),ZPr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(RA,"CODE",{});var ljt=s(vEe);eBr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),oBr=r(RA,":"),RA.forEach(t),rBr=i(Kl),de=n(Kl,"UL",{});var ge=s(de);dC=n(ge,"LI",{});var XGe=s(dC);FEe=n(XGe,"STRONG",{});var ijt=s(FEe);tBr=r(ijt,"albert"),ijt.forEach(t),aBr=r(XGe," \u2014 "),uZ=n(XGe,"A",{href:!0});var djt=s(uZ);nBr=r(djt,"TFAlbertForTokenClassification"),djt.forEach(t),sBr=r(XGe," (ALBERT model)"),XGe.forEach(t),lBr=i(ge),cC=n(ge,"LI",{});var zGe=s(cC);TEe=n(zGe,"STRONG",{});var cjt=s(TEe);iBr=r(cjt,"bert"),cjt.forEach(t),dBr=r(zGe," \u2014 "),bZ=n(zGe,"A",{href:!0});var fjt=s(bZ);cBr=r(fjt,"TFBertForTokenClassification"),fjt.forEach(t),fBr=r(zGe," (BERT model)"),zGe.forEach(t),mBr=i(ge),fC=n(ge,"LI",{});var QGe=s(fC);MEe=n(QGe,"STRONG",{});var mjt=s(MEe);gBr=r(mjt,"camembert"),mjt.forEach(t),hBr=r(QGe," \u2014 "),vZ=n(QGe,"A",{href:!0});var gjt=s(vZ);pBr=r(gjt,"TFCamembertForTokenClassification"),gjt.forEach(t),_Br=r(QGe," (CamemBERT model)"),QGe.forEach(t),uBr=i(ge),mC=n(ge,"LI",{});var WGe=s(mC);EEe=n(WGe,"STRONG",{});var hjt=s(EEe);bBr=r(hjt,"convbert"),hjt.forEach(t),vBr=r(WGe," \u2014 "),FZ=n(WGe,"A",{href:!0});var pjt=s(FZ);FBr=r(pjt,"TFConvBertForTokenClassification"),pjt.forEach(t),TBr=r(WGe," (ConvBERT model)"),WGe.forEach(t),MBr=i(ge),gC=n(ge,"LI",{});var HGe=s(gC);CEe=n(HGe,"STRONG",{});var _jt=s(CEe);EBr=r(_jt,"deberta"),_jt.forEach(t),CBr=r(HGe," \u2014 "),TZ=n(HGe,"A",{href:!0});var ujt=s(TZ);wBr=r(ujt,"TFDebertaForTokenClassification"),ujt.forEach(t),ABr=r(HGe," (DeBERTa model)"),HGe.forEach(t),LBr=i(ge),hC=n(ge,"LI",{});var UGe=s(hC);wEe=n(UGe,"STRONG",{});var bjt=s(wEe);yBr=r(bjt,"deberta-v2"),bjt.forEach(t),xBr=r(UGe," \u2014 "),MZ=n(UGe,"A",{href:!0});var vjt=s(MZ);$Br=r(vjt,"TFDebertaV2ForTokenClassification"),vjt.forEach(t),kBr=r(UGe," (DeBERTa-v2 model)"),UGe.forEach(t),SBr=i(ge),pC=n(ge,"LI",{});var JGe=s(pC);AEe=n(JGe,"STRONG",{});var Fjt=s(AEe);RBr=r(Fjt,"distilbert"),Fjt.forEach(t),PBr=r(JGe," \u2014 "),EZ=n(JGe,"A",{href:!0});var Tjt=s(EZ);BBr=r(Tjt,"TFDistilBertForTokenClassification"),Tjt.forEach(t),IBr=r(JGe," (DistilBERT model)"),JGe.forEach(t),NBr=i(ge),_C=n(ge,"LI",{});var YGe=s(_C);LEe=n(YGe,"STRONG",{});var Mjt=s(LEe);qBr=r(Mjt,"electra"),Mjt.forEach(t),jBr=r(YGe," \u2014 "),CZ=n(YGe,"A",{href:!0});var Ejt=s(CZ);DBr=r(Ejt,"TFElectraForTokenClassification"),Ejt.forEach(t),GBr=r(YGe," (ELECTRA model)"),YGe.forEach(t),OBr=i(ge),uC=n(ge,"LI",{});var KGe=s(uC);yEe=n(KGe,"STRONG",{});var Cjt=s(yEe);VBr=r(Cjt,"flaubert"),Cjt.forEach(t),XBr=r(KGe," \u2014 "),wZ=n(KGe,"A",{href:!0});var wjt=s(wZ);zBr=r(wjt,"TFFlaubertForTokenClassification"),wjt.forEach(t),QBr=r(KGe," (FlauBERT model)"),KGe.forEach(t),WBr=i(ge),bC=n(ge,"LI",{});var ZGe=s(bC);xEe=n(ZGe,"STRONG",{});var Ajt=s(xEe);HBr=r(Ajt,"funnel"),Ajt.forEach(t),UBr=r(ZGe," \u2014 "),AZ=n(ZGe,"A",{href:!0});var Ljt=s(AZ);JBr=r(Ljt,"TFFunnelForTokenClassification"),Ljt.forEach(t),YBr=r(ZGe," (Funnel Transformer model)"),ZGe.forEach(t),KBr=i(ge),vC=n(ge,"LI",{});var eOe=s(vC);$Ee=n(eOe,"STRONG",{});var yjt=s($Ee);ZBr=r(yjt,"layoutlm"),yjt.forEach(t),eIr=r(eOe," \u2014 "),LZ=n(eOe,"A",{href:!0});var xjt=s(LZ);oIr=r(xjt,"TFLayoutLMForTokenClassification"),xjt.forEach(t),rIr=r(eOe," (LayoutLM model)"),eOe.forEach(t),tIr=i(ge),FC=n(ge,"LI",{});var oOe=s(FC);kEe=n(oOe,"STRONG",{});var $jt=s(kEe);aIr=r($jt,"longformer"),$jt.forEach(t),nIr=r(oOe," \u2014 "),yZ=n(oOe,"A",{href:!0});var kjt=s(yZ);sIr=r(kjt,"TFLongformerForTokenClassification"),kjt.forEach(t),lIr=r(oOe," (Longformer model)"),oOe.forEach(t),iIr=i(ge),TC=n(ge,"LI",{});var rOe=s(TC);SEe=n(rOe,"STRONG",{});var Sjt=s(SEe);dIr=r(Sjt,"mobilebert"),Sjt.forEach(t),cIr=r(rOe," \u2014 "),xZ=n(rOe,"A",{href:!0});var Rjt=s(xZ);fIr=r(Rjt,"TFMobileBertForTokenClassification"),Rjt.forEach(t),mIr=r(rOe," (MobileBERT model)"),rOe.forEach(t),gIr=i(ge),MC=n(ge,"LI",{});var tOe=s(MC);REe=n(tOe,"STRONG",{});var Pjt=s(REe);hIr=r(Pjt,"mpnet"),Pjt.forEach(t),pIr=r(tOe," \u2014 "),$Z=n(tOe,"A",{href:!0});var Bjt=s($Z);_Ir=r(Bjt,"TFMPNetForTokenClassification"),Bjt.forEach(t),uIr=r(tOe," (MPNet model)"),tOe.forEach(t),bIr=i(ge),EC=n(ge,"LI",{});var aOe=s(EC);PEe=n(aOe,"STRONG",{});var Ijt=s(PEe);vIr=r(Ijt,"rembert"),Ijt.forEach(t),FIr=r(aOe," \u2014 "),kZ=n(aOe,"A",{href:!0});var Njt=s(kZ);TIr=r(Njt,"TFRemBertForTokenClassification"),Njt.forEach(t),MIr=r(aOe," (RemBERT model)"),aOe.forEach(t),EIr=i(ge),CC=n(ge,"LI",{});var nOe=s(CC);BEe=n(nOe,"STRONG",{});var qjt=s(BEe);CIr=r(qjt,"roberta"),qjt.forEach(t),wIr=r(nOe," \u2014 "),SZ=n(nOe,"A",{href:!0});var jjt=s(SZ);AIr=r(jjt,"TFRobertaForTokenClassification"),jjt.forEach(t),LIr=r(nOe," (RoBERTa model)"),nOe.forEach(t),yIr=i(ge),wC=n(ge,"LI",{});var sOe=s(wC);IEe=n(sOe,"STRONG",{});var Djt=s(IEe);xIr=r(Djt,"roformer"),Djt.forEach(t),$Ir=r(sOe," \u2014 "),RZ=n(sOe,"A",{href:!0});var Gjt=s(RZ);kIr=r(Gjt,"TFRoFormerForTokenClassification"),Gjt.forEach(t),SIr=r(sOe," (RoFormer model)"),sOe.forEach(t),RIr=i(ge),AC=n(ge,"LI",{});var lOe=s(AC);NEe=n(lOe,"STRONG",{});var Ojt=s(NEe);PIr=r(Ojt,"xlm"),Ojt.forEach(t),BIr=r(lOe," \u2014 "),PZ=n(lOe,"A",{href:!0});var Vjt=s(PZ);IIr=r(Vjt,"TFXLMForTokenClassification"),Vjt.forEach(t),NIr=r(lOe," (XLM model)"),lOe.forEach(t),qIr=i(ge),LC=n(ge,"LI",{});var iOe=s(LC);qEe=n(iOe,"STRONG",{});var Xjt=s(qEe);jIr=r(Xjt,"xlm-roberta"),Xjt.forEach(t),DIr=r(iOe," \u2014 "),BZ=n(iOe,"A",{href:!0});var zjt=s(BZ);GIr=r(zjt,"TFXLMRobertaForTokenClassification"),zjt.forEach(t),OIr=r(iOe," (XLM-RoBERTa model)"),iOe.forEach(t),VIr=i(ge),yC=n(ge,"LI",{});var dOe=s(yC);jEe=n(dOe,"STRONG",{});var Qjt=s(jEe);XIr=r(Qjt,"xlnet"),Qjt.forEach(t),zIr=r(dOe," \u2014 "),IZ=n(dOe,"A",{href:!0});var Wjt=s(IZ);QIr=r(Wjt,"TFXLNetForTokenClassification"),Wjt.forEach(t),WIr=r(dOe," (XLNet model)"),dOe.forEach(t),ge.forEach(t),HIr=i(Kl),T(xC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),dQe=i(f),Dc=n(f,"H2",{class:!0});var bHe=s(Dc);$C=n(bHe,"A",{id:!0,class:!0,href:!0});var Hjt=s($C);DEe=n(Hjt,"SPAN",{});var Ujt=s(DEe);T(r$.$$.fragment,Ujt),Ujt.forEach(t),Hjt.forEach(t),UIr=i(bHe),GEe=n(bHe,"SPAN",{});var Jjt=s(GEe);JIr=r(Jjt,"TFAutoModelForQuestionAnswering"),Jjt.forEach(t),bHe.forEach(t),cQe=i(f),mr=n(f,"DIV",{class:!0});var Zl=s(mr);T(t$.$$.fragment,Zl),YIr=i(Zl),Gc=n(Zl,"P",{});var pae=s(Gc);KIr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NZ=n(pae,"A",{href:!0});var Yjt=s(NZ);ZIr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),eNr=r(pae," class method or the "),qZ=n(pae,"A",{href:!0});var Kjt=s(qZ);oNr=r(Kjt,"from_config()"),Kjt.forEach(t),rNr=r(pae,` class
method.`),pae.forEach(t),tNr=i(Zl),a$=n(Zl,"P",{});var vHe=s(a$);aNr=r(vHe,"This class cannot be instantiated directly using "),OEe=n(vHe,"CODE",{});var Zjt=s(OEe);nNr=r(Zjt,"__init__()"),Zjt.forEach(t),sNr=r(vHe," (throws an error)."),vHe.forEach(t),lNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var PA=s(Xt);T(n$.$$.fragment,PA),iNr=i(PA),VEe=n(PA,"P",{});var eDt=s(VEe);dNr=r(eDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eDt.forEach(t),cNr=i(PA),Oc=n(PA,"P",{});var _ae=s(Oc);fNr=r(_ae,`Note:
Loading a model from its configuration file does `),XEe=n(_ae,"STRONG",{});var oDt=s(XEe);mNr=r(oDt,"not"),oDt.forEach(t),gNr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(_ae,"A",{href:!0});var rDt=s(jZ);hNr=r(rDt,"from_pretrained()"),rDt.forEach(t),pNr=r(_ae," to load the model weights."),_ae.forEach(t),_Nr=i(PA),T(kC.$$.fragment,PA),PA.forEach(t),uNr=i(Zl),Dr=n(Zl,"DIV",{class:!0});var ei=s(Dr);T(s$.$$.fragment,ei),bNr=i(ei),zEe=n(ei,"P",{});var tDt=s(zEe);vNr=r(tDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tDt.forEach(t),FNr=i(ei),vn=n(ei,"P",{});var BA=s(vn);TNr=r(BA,"The model class to instantiate is selected based on the "),QEe=n(BA,"CODE",{});var aDt=s(QEe);MNr=r(aDt,"model_type"),aDt.forEach(t),ENr=r(BA,` property of the config object (either
passed as an argument or loaded from `),WEe=n(BA,"CODE",{});var nDt=s(WEe);CNr=r(nDt,"pretrained_model_name_or_path"),nDt.forEach(t),wNr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(BA,"CODE",{});var sDt=s(HEe);ANr=r(sDt,"pretrained_model_name_or_path"),sDt.forEach(t),LNr=r(BA,":"),BA.forEach(t),yNr=i(ei),ce=n(ei,"UL",{});var he=s(ce);SC=n(he,"LI",{});var cOe=s(SC);UEe=n(cOe,"STRONG",{});var lDt=s(UEe);xNr=r(lDt,"albert"),lDt.forEach(t),$Nr=r(cOe," \u2014 "),DZ=n(cOe,"A",{href:!0});var iDt=s(DZ);kNr=r(iDt,"TFAlbertForQuestionAnswering"),iDt.forEach(t),SNr=r(cOe," (ALBERT model)"),cOe.forEach(t),RNr=i(he),RC=n(he,"LI",{});var fOe=s(RC);JEe=n(fOe,"STRONG",{});var dDt=s(JEe);PNr=r(dDt,"bert"),dDt.forEach(t),BNr=r(fOe," \u2014 "),GZ=n(fOe,"A",{href:!0});var cDt=s(GZ);INr=r(cDt,"TFBertForQuestionAnswering"),cDt.forEach(t),NNr=r(fOe," (BERT model)"),fOe.forEach(t),qNr=i(he),PC=n(he,"LI",{});var mOe=s(PC);YEe=n(mOe,"STRONG",{});var fDt=s(YEe);jNr=r(fDt,"camembert"),fDt.forEach(t),DNr=r(mOe," \u2014 "),OZ=n(mOe,"A",{href:!0});var mDt=s(OZ);GNr=r(mDt,"TFCamembertForQuestionAnswering"),mDt.forEach(t),ONr=r(mOe," (CamemBERT model)"),mOe.forEach(t),VNr=i(he),BC=n(he,"LI",{});var gOe=s(BC);KEe=n(gOe,"STRONG",{});var gDt=s(KEe);XNr=r(gDt,"convbert"),gDt.forEach(t),zNr=r(gOe," \u2014 "),VZ=n(gOe,"A",{href:!0});var hDt=s(VZ);QNr=r(hDt,"TFConvBertForQuestionAnswering"),hDt.forEach(t),WNr=r(gOe," (ConvBERT model)"),gOe.forEach(t),HNr=i(he),IC=n(he,"LI",{});var hOe=s(IC);ZEe=n(hOe,"STRONG",{});var pDt=s(ZEe);UNr=r(pDt,"deberta"),pDt.forEach(t),JNr=r(hOe," \u2014 "),XZ=n(hOe,"A",{href:!0});var _Dt=s(XZ);YNr=r(_Dt,"TFDebertaForQuestionAnswering"),_Dt.forEach(t),KNr=r(hOe," (DeBERTa model)"),hOe.forEach(t),ZNr=i(he),NC=n(he,"LI",{});var pOe=s(NC);eCe=n(pOe,"STRONG",{});var uDt=s(eCe);eqr=r(uDt,"deberta-v2"),uDt.forEach(t),oqr=r(pOe," \u2014 "),zZ=n(pOe,"A",{href:!0});var bDt=s(zZ);rqr=r(bDt,"TFDebertaV2ForQuestionAnswering"),bDt.forEach(t),tqr=r(pOe," (DeBERTa-v2 model)"),pOe.forEach(t),aqr=i(he),qC=n(he,"LI",{});var _Oe=s(qC);oCe=n(_Oe,"STRONG",{});var vDt=s(oCe);nqr=r(vDt,"distilbert"),vDt.forEach(t),sqr=r(_Oe," \u2014 "),QZ=n(_Oe,"A",{href:!0});var FDt=s(QZ);lqr=r(FDt,"TFDistilBertForQuestionAnswering"),FDt.forEach(t),iqr=r(_Oe," (DistilBERT model)"),_Oe.forEach(t),dqr=i(he),jC=n(he,"LI",{});var uOe=s(jC);rCe=n(uOe,"STRONG",{});var TDt=s(rCe);cqr=r(TDt,"electra"),TDt.forEach(t),fqr=r(uOe," \u2014 "),WZ=n(uOe,"A",{href:!0});var MDt=s(WZ);mqr=r(MDt,"TFElectraForQuestionAnswering"),MDt.forEach(t),gqr=r(uOe," (ELECTRA model)"),uOe.forEach(t),hqr=i(he),DC=n(he,"LI",{});var bOe=s(DC);tCe=n(bOe,"STRONG",{});var EDt=s(tCe);pqr=r(EDt,"flaubert"),EDt.forEach(t),_qr=r(bOe," \u2014 "),HZ=n(bOe,"A",{href:!0});var CDt=s(HZ);uqr=r(CDt,"TFFlaubertForQuestionAnsweringSimple"),CDt.forEach(t),bqr=r(bOe," (FlauBERT model)"),bOe.forEach(t),vqr=i(he),GC=n(he,"LI",{});var vOe=s(GC);aCe=n(vOe,"STRONG",{});var wDt=s(aCe);Fqr=r(wDt,"funnel"),wDt.forEach(t),Tqr=r(vOe," \u2014 "),UZ=n(vOe,"A",{href:!0});var ADt=s(UZ);Mqr=r(ADt,"TFFunnelForQuestionAnswering"),ADt.forEach(t),Eqr=r(vOe," (Funnel Transformer model)"),vOe.forEach(t),Cqr=i(he),OC=n(he,"LI",{});var FOe=s(OC);nCe=n(FOe,"STRONG",{});var LDt=s(nCe);wqr=r(LDt,"gptj"),LDt.forEach(t),Aqr=r(FOe," \u2014 "),JZ=n(FOe,"A",{href:!0});var yDt=s(JZ);Lqr=r(yDt,"TFGPTJForQuestionAnswering"),yDt.forEach(t),yqr=r(FOe," (GPT-J model)"),FOe.forEach(t),xqr=i(he),VC=n(he,"LI",{});var TOe=s(VC);sCe=n(TOe,"STRONG",{});var xDt=s(sCe);$qr=r(xDt,"longformer"),xDt.forEach(t),kqr=r(TOe," \u2014 "),YZ=n(TOe,"A",{href:!0});var $Dt=s(YZ);Sqr=r($Dt,"TFLongformerForQuestionAnswering"),$Dt.forEach(t),Rqr=r(TOe," (Longformer model)"),TOe.forEach(t),Pqr=i(he),XC=n(he,"LI",{});var MOe=s(XC);lCe=n(MOe,"STRONG",{});var kDt=s(lCe);Bqr=r(kDt,"mobilebert"),kDt.forEach(t),Iqr=r(MOe," \u2014 "),KZ=n(MOe,"A",{href:!0});var SDt=s(KZ);Nqr=r(SDt,"TFMobileBertForQuestionAnswering"),SDt.forEach(t),qqr=r(MOe," (MobileBERT model)"),MOe.forEach(t),jqr=i(he),zC=n(he,"LI",{});var EOe=s(zC);iCe=n(EOe,"STRONG",{});var RDt=s(iCe);Dqr=r(RDt,"mpnet"),RDt.forEach(t),Gqr=r(EOe," \u2014 "),ZZ=n(EOe,"A",{href:!0});var PDt=s(ZZ);Oqr=r(PDt,"TFMPNetForQuestionAnswering"),PDt.forEach(t),Vqr=r(EOe," (MPNet model)"),EOe.forEach(t),Xqr=i(he),QC=n(he,"LI",{});var COe=s(QC);dCe=n(COe,"STRONG",{});var BDt=s(dCe);zqr=r(BDt,"rembert"),BDt.forEach(t),Qqr=r(COe," \u2014 "),eee=n(COe,"A",{href:!0});var IDt=s(eee);Wqr=r(IDt,"TFRemBertForQuestionAnswering"),IDt.forEach(t),Hqr=r(COe," (RemBERT model)"),COe.forEach(t),Uqr=i(he),WC=n(he,"LI",{});var wOe=s(WC);cCe=n(wOe,"STRONG",{});var NDt=s(cCe);Jqr=r(NDt,"roberta"),NDt.forEach(t),Yqr=r(wOe," \u2014 "),oee=n(wOe,"A",{href:!0});var qDt=s(oee);Kqr=r(qDt,"TFRobertaForQuestionAnswering"),qDt.forEach(t),Zqr=r(wOe," (RoBERTa model)"),wOe.forEach(t),ejr=i(he),HC=n(he,"LI",{});var AOe=s(HC);fCe=n(AOe,"STRONG",{});var jDt=s(fCe);ojr=r(jDt,"roformer"),jDt.forEach(t),rjr=r(AOe," \u2014 "),ree=n(AOe,"A",{href:!0});var DDt=s(ree);tjr=r(DDt,"TFRoFormerForQuestionAnswering"),DDt.forEach(t),ajr=r(AOe," (RoFormer model)"),AOe.forEach(t),njr=i(he),UC=n(he,"LI",{});var LOe=s(UC);mCe=n(LOe,"STRONG",{});var GDt=s(mCe);sjr=r(GDt,"xlm"),GDt.forEach(t),ljr=r(LOe," \u2014 "),tee=n(LOe,"A",{href:!0});var ODt=s(tee);ijr=r(ODt,"TFXLMForQuestionAnsweringSimple"),ODt.forEach(t),djr=r(LOe," (XLM model)"),LOe.forEach(t),cjr=i(he),JC=n(he,"LI",{});var yOe=s(JC);gCe=n(yOe,"STRONG",{});var VDt=s(gCe);fjr=r(VDt,"xlm-roberta"),VDt.forEach(t),mjr=r(yOe," \u2014 "),aee=n(yOe,"A",{href:!0});var XDt=s(aee);gjr=r(XDt,"TFXLMRobertaForQuestionAnswering"),XDt.forEach(t),hjr=r(yOe," (XLM-RoBERTa model)"),yOe.forEach(t),pjr=i(he),YC=n(he,"LI",{});var xOe=s(YC);hCe=n(xOe,"STRONG",{});var zDt=s(hCe);_jr=r(zDt,"xlnet"),zDt.forEach(t),ujr=r(xOe," \u2014 "),nee=n(xOe,"A",{href:!0});var QDt=s(nee);bjr=r(QDt,"TFXLNetForQuestionAnsweringSimple"),QDt.forEach(t),vjr=r(xOe," (XLNet model)"),xOe.forEach(t),he.forEach(t),Fjr=i(ei),T(KC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),fQe=i(f),Vc=n(f,"H2",{class:!0});var FHe=s(Vc);ZC=n(FHe,"A",{id:!0,class:!0,href:!0});var WDt=s(ZC);pCe=n(WDt,"SPAN",{});var HDt=s(pCe);T(l$.$$.fragment,HDt),HDt.forEach(t),WDt.forEach(t),Tjr=i(FHe),_Ce=n(FHe,"SPAN",{});var UDt=s(_Ce);Mjr=r(UDt,"TFAutoModelForVision2Seq"),UDt.forEach(t),FHe.forEach(t),mQe=i(f),gr=n(f,"DIV",{class:!0});var oi=s(gr);T(i$.$$.fragment,oi),Ejr=i(oi),Xc=n(oi,"P",{});var uae=s(Xc);Cjr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),see=n(uae,"A",{href:!0});var JDt=s(see);wjr=r(JDt,"from_pretrained()"),JDt.forEach(t),Ajr=r(uae," class method or the "),lee=n(uae,"A",{href:!0});var YDt=s(lee);Ljr=r(YDt,"from_config()"),YDt.forEach(t),yjr=r(uae,` class
method.`),uae.forEach(t),xjr=i(oi),d$=n(oi,"P",{});var THe=s(d$);$jr=r(THe,"This class cannot be instantiated directly using "),uCe=n(THe,"CODE",{});var KDt=s(uCe);kjr=r(KDt,"__init__()"),KDt.forEach(t),Sjr=r(THe," (throws an error)."),THe.forEach(t),Rjr=i(oi),zt=n(oi,"DIV",{class:!0});var IA=s(zt);T(c$.$$.fragment,IA),Pjr=i(IA),bCe=n(IA,"P",{});var ZDt=s(bCe);Bjr=r(ZDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZDt.forEach(t),Ijr=i(IA),zc=n(IA,"P",{});var bae=s(zc);Njr=r(bae,`Note:
Loading a model from its configuration file does `),vCe=n(bae,"STRONG",{});var eGt=s(vCe);qjr=r(eGt,"not"),eGt.forEach(t),jjr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(bae,"A",{href:!0});var oGt=s(iee);Djr=r(oGt,"from_pretrained()"),oGt.forEach(t),Gjr=r(bae," to load the model weights."),bae.forEach(t),Ojr=i(IA),T(e5.$$.fragment,IA),IA.forEach(t),Vjr=i(oi),Gr=n(oi,"DIV",{class:!0});var ri=s(Gr);T(f$.$$.fragment,ri),Xjr=i(ri),FCe=n(ri,"P",{});var rGt=s(FCe);zjr=r(rGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rGt.forEach(t),Qjr=i(ri),Fn=n(ri,"P",{});var NA=s(Fn);Wjr=r(NA,"The model class to instantiate is selected based on the "),TCe=n(NA,"CODE",{});var tGt=s(TCe);Hjr=r(tGt,"model_type"),tGt.forEach(t),Ujr=r(NA,` property of the config object (either
passed as an argument or loaded from `),MCe=n(NA,"CODE",{});var aGt=s(MCe);Jjr=r(aGt,"pretrained_model_name_or_path"),aGt.forEach(t),Yjr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=n(NA,"CODE",{});var nGt=s(ECe);Kjr=r(nGt,"pretrained_model_name_or_path"),nGt.forEach(t),Zjr=r(NA,":"),NA.forEach(t),eDr=i(ri),CCe=n(ri,"UL",{});var sGt=s(CCe);o5=n(sGt,"LI",{});var $Oe=s(o5);wCe=n($Oe,"STRONG",{});var lGt=s(wCe);oDr=r(lGt,"vision-encoder-decoder"),lGt.forEach(t),rDr=r($Oe," \u2014 "),dee=n($Oe,"A",{href:!0});var iGt=s(dee);tDr=r(iGt,"TFVisionEncoderDecoderModel"),iGt.forEach(t),aDr=r($Oe," (Vision Encoder decoder model)"),$Oe.forEach(t),sGt.forEach(t),nDr=i(ri),T(r5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),gQe=i(f),Qc=n(f,"H2",{class:!0});var MHe=s(Qc);t5=n(MHe,"A",{id:!0,class:!0,href:!0});var dGt=s(t5);ACe=n(dGt,"SPAN",{});var cGt=s(ACe);T(m$.$$.fragment,cGt),cGt.forEach(t),dGt.forEach(t),sDr=i(MHe),LCe=n(MHe,"SPAN",{});var fGt=s(LCe);lDr=r(fGt,"TFAutoModelForSpeechSeq2Seq"),fGt.forEach(t),MHe.forEach(t),hQe=i(f),hr=n(f,"DIV",{class:!0});var ti=s(hr);T(g$.$$.fragment,ti),iDr=i(ti),Wc=n(ti,"P",{});var vae=s(Wc);dDr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cee=n(vae,"A",{href:!0});var mGt=s(cee);cDr=r(mGt,"from_pretrained()"),mGt.forEach(t),fDr=r(vae," class method or the "),fee=n(vae,"A",{href:!0});var gGt=s(fee);mDr=r(gGt,"from_config()"),gGt.forEach(t),gDr=r(vae,` class
method.`),vae.forEach(t),hDr=i(ti),h$=n(ti,"P",{});var EHe=s(h$);pDr=r(EHe,"This class cannot be instantiated directly using "),yCe=n(EHe,"CODE",{});var hGt=s(yCe);_Dr=r(hGt,"__init__()"),hGt.forEach(t),uDr=r(EHe," (throws an error)."),EHe.forEach(t),bDr=i(ti),Qt=n(ti,"DIV",{class:!0});var qA=s(Qt);T(p$.$$.fragment,qA),vDr=i(qA),xCe=n(qA,"P",{});var pGt=s(xCe);FDr=r(pGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pGt.forEach(t),TDr=i(qA),Hc=n(qA,"P",{});var Fae=s(Hc);MDr=r(Fae,`Note:
Loading a model from its configuration file does `),$Ce=n(Fae,"STRONG",{});var _Gt=s($Ce);EDr=r(_Gt,"not"),_Gt.forEach(t),CDr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(Fae,"A",{href:!0});var uGt=s(mee);wDr=r(uGt,"from_pretrained()"),uGt.forEach(t),ADr=r(Fae," to load the model weights."),Fae.forEach(t),LDr=i(qA),T(a5.$$.fragment,qA),qA.forEach(t),yDr=i(ti),Or=n(ti,"DIV",{class:!0});var ai=s(Or);T(_$.$$.fragment,ai),xDr=i(ai),kCe=n(ai,"P",{});var bGt=s(kCe);$Dr=r(bGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bGt.forEach(t),kDr=i(ai),Tn=n(ai,"P",{});var jA=s(Tn);SDr=r(jA,"The model class to instantiate is selected based on the "),SCe=n(jA,"CODE",{});var vGt=s(SCe);RDr=r(vGt,"model_type"),vGt.forEach(t),PDr=r(jA,` property of the config object (either
passed as an argument or loaded from `),RCe=n(jA,"CODE",{});var FGt=s(RCe);BDr=r(FGt,"pretrained_model_name_or_path"),FGt.forEach(t),IDr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(jA,"CODE",{});var TGt=s(PCe);NDr=r(TGt,"pretrained_model_name_or_path"),TGt.forEach(t),qDr=r(jA,":"),jA.forEach(t),jDr=i(ai),BCe=n(ai,"UL",{});var MGt=s(BCe);n5=n(MGt,"LI",{});var kOe=s(n5);ICe=n(kOe,"STRONG",{});var EGt=s(ICe);DDr=r(EGt,"speech_to_text"),EGt.forEach(t),GDr=r(kOe," \u2014 "),gee=n(kOe,"A",{href:!0});var CGt=s(gee);ODr=r(CGt,"TFSpeech2TextForConditionalGeneration"),CGt.forEach(t),VDr=r(kOe," (Speech2Text model)"),kOe.forEach(t),MGt.forEach(t),XDr=i(ai),T(s5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),pQe=i(f),Uc=n(f,"H2",{class:!0});var CHe=s(Uc);l5=n(CHe,"A",{id:!0,class:!0,href:!0});var wGt=s(l5);NCe=n(wGt,"SPAN",{});var AGt=s(NCe);T(u$.$$.fragment,AGt),AGt.forEach(t),wGt.forEach(t),zDr=i(CHe),qCe=n(CHe,"SPAN",{});var LGt=s(qCe);QDr=r(LGt,"FlaxAutoModel"),LGt.forEach(t),CHe.forEach(t),_Qe=i(f),pr=n(f,"DIV",{class:!0});var ni=s(pr);T(b$.$$.fragment,ni),WDr=i(ni),Jc=n(ni,"P",{});var Tae=s(Jc);HDr=r(Tae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hee=n(Tae,"A",{href:!0});var yGt=s(hee);UDr=r(yGt,"from_pretrained()"),yGt.forEach(t),JDr=r(Tae," class method or the "),pee=n(Tae,"A",{href:!0});var xGt=s(pee);YDr=r(xGt,"from_config()"),xGt.forEach(t),KDr=r(Tae,` class
method.`),Tae.forEach(t),ZDr=i(ni),v$=n(ni,"P",{});var wHe=s(v$);eGr=r(wHe,"This class cannot be instantiated directly using "),jCe=n(wHe,"CODE",{});var $Gt=s(jCe);oGr=r($Gt,"__init__()"),$Gt.forEach(t),rGr=r(wHe," (throws an error)."),wHe.forEach(t),tGr=i(ni),Wt=n(ni,"DIV",{class:!0});var DA=s(Wt);T(F$.$$.fragment,DA),aGr=i(DA),DCe=n(DA,"P",{});var kGt=s(DCe);nGr=r(kGt,"Instantiates one of the base model classes of the library from a configuration."),kGt.forEach(t),sGr=i(DA),Yc=n(DA,"P",{});var Mae=s(Yc);lGr=r(Mae,`Note:
Loading a model from its configuration file does `),GCe=n(Mae,"STRONG",{});var SGt=s(GCe);iGr=r(SGt,"not"),SGt.forEach(t),dGr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(Mae,"A",{href:!0});var RGt=s(_ee);cGr=r(RGt,"from_pretrained()"),RGt.forEach(t),fGr=r(Mae," to load the model weights."),Mae.forEach(t),mGr=i(DA),T(i5.$$.fragment,DA),DA.forEach(t),gGr=i(ni),Vr=n(ni,"DIV",{class:!0});var si=s(Vr);T(T$.$$.fragment,si),hGr=i(si),OCe=n(si,"P",{});var PGt=s(OCe);pGr=r(PGt,"Instantiate one of the base model classes of the library from a pretrained model."),PGt.forEach(t),_Gr=i(si),Mn=n(si,"P",{});var GA=s(Mn);uGr=r(GA,"The model class to instantiate is selected based on the "),VCe=n(GA,"CODE",{});var BGt=s(VCe);bGr=r(BGt,"model_type"),BGt.forEach(t),vGr=r(GA,` property of the config object (either
passed as an argument or loaded from `),XCe=n(GA,"CODE",{});var IGt=s(XCe);FGr=r(IGt,"pretrained_model_name_or_path"),IGt.forEach(t),TGr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=n(GA,"CODE",{});var NGt=s(zCe);MGr=r(NGt,"pretrained_model_name_or_path"),NGt.forEach(t),EGr=r(GA,":"),GA.forEach(t),CGr=i(si),oe=n(si,"UL",{});var ae=s(oe);d5=n(ae,"LI",{});var SOe=s(d5);QCe=n(SOe,"STRONG",{});var qGt=s(QCe);wGr=r(qGt,"albert"),qGt.forEach(t),AGr=r(SOe," \u2014 "),uee=n(SOe,"A",{href:!0});var jGt=s(uee);LGr=r(jGt,"FlaxAlbertModel"),jGt.forEach(t),yGr=r(SOe," (ALBERT model)"),SOe.forEach(t),xGr=i(ae),c5=n(ae,"LI",{});var ROe=s(c5);WCe=n(ROe,"STRONG",{});var DGt=s(WCe);$Gr=r(DGt,"bart"),DGt.forEach(t),kGr=r(ROe," \u2014 "),bee=n(ROe,"A",{href:!0});var GGt=s(bee);SGr=r(GGt,"FlaxBartModel"),GGt.forEach(t),RGr=r(ROe," (BART model)"),ROe.forEach(t),PGr=i(ae),f5=n(ae,"LI",{});var POe=s(f5);HCe=n(POe,"STRONG",{});var OGt=s(HCe);BGr=r(OGt,"beit"),OGt.forEach(t),IGr=r(POe," \u2014 "),vee=n(POe,"A",{href:!0});var VGt=s(vee);NGr=r(VGt,"FlaxBeitModel"),VGt.forEach(t),qGr=r(POe," (BEiT model)"),POe.forEach(t),jGr=i(ae),m5=n(ae,"LI",{});var BOe=s(m5);UCe=n(BOe,"STRONG",{});var XGt=s(UCe);DGr=r(XGt,"bert"),XGt.forEach(t),GGr=r(BOe," \u2014 "),Fee=n(BOe,"A",{href:!0});var zGt=s(Fee);OGr=r(zGt,"FlaxBertModel"),zGt.forEach(t),VGr=r(BOe," (BERT model)"),BOe.forEach(t),XGr=i(ae),g5=n(ae,"LI",{});var IOe=s(g5);JCe=n(IOe,"STRONG",{});var QGt=s(JCe);zGr=r(QGt,"big_bird"),QGt.forEach(t),QGr=r(IOe," \u2014 "),Tee=n(IOe,"A",{href:!0});var WGt=s(Tee);WGr=r(WGt,"FlaxBigBirdModel"),WGt.forEach(t),HGr=r(IOe," (BigBird model)"),IOe.forEach(t),UGr=i(ae),h5=n(ae,"LI",{});var NOe=s(h5);YCe=n(NOe,"STRONG",{});var HGt=s(YCe);JGr=r(HGt,"blenderbot"),HGt.forEach(t),YGr=r(NOe," \u2014 "),Mee=n(NOe,"A",{href:!0});var UGt=s(Mee);KGr=r(UGt,"FlaxBlenderbotModel"),UGt.forEach(t),ZGr=r(NOe," (Blenderbot model)"),NOe.forEach(t),eOr=i(ae),p5=n(ae,"LI",{});var qOe=s(p5);KCe=n(qOe,"STRONG",{});var JGt=s(KCe);oOr=r(JGt,"blenderbot-small"),JGt.forEach(t),rOr=r(qOe," \u2014 "),Eee=n(qOe,"A",{href:!0});var YGt=s(Eee);tOr=r(YGt,"FlaxBlenderbotSmallModel"),YGt.forEach(t),aOr=r(qOe," (BlenderbotSmall model)"),qOe.forEach(t),nOr=i(ae),_5=n(ae,"LI",{});var jOe=s(_5);ZCe=n(jOe,"STRONG",{});var KGt=s(ZCe);sOr=r(KGt,"clip"),KGt.forEach(t),lOr=r(jOe," \u2014 "),Cee=n(jOe,"A",{href:!0});var ZGt=s(Cee);iOr=r(ZGt,"FlaxCLIPModel"),ZGt.forEach(t),dOr=r(jOe," (CLIP model)"),jOe.forEach(t),cOr=i(ae),u5=n(ae,"LI",{});var DOe=s(u5);e5e=n(DOe,"STRONG",{});var eOt=s(e5e);fOr=r(eOt,"distilbert"),eOt.forEach(t),mOr=r(DOe," \u2014 "),wee=n(DOe,"A",{href:!0});var oOt=s(wee);gOr=r(oOt,"FlaxDistilBertModel"),oOt.forEach(t),hOr=r(DOe," (DistilBERT model)"),DOe.forEach(t),pOr=i(ae),b5=n(ae,"LI",{});var GOe=s(b5);o5e=n(GOe,"STRONG",{});var rOt=s(o5e);_Or=r(rOt,"electra"),rOt.forEach(t),uOr=r(GOe," \u2014 "),Aee=n(GOe,"A",{href:!0});var tOt=s(Aee);bOr=r(tOt,"FlaxElectraModel"),tOt.forEach(t),vOr=r(GOe," (ELECTRA model)"),GOe.forEach(t),FOr=i(ae),v5=n(ae,"LI",{});var OOe=s(v5);r5e=n(OOe,"STRONG",{});var aOt=s(r5e);TOr=r(aOt,"gpt2"),aOt.forEach(t),MOr=r(OOe," \u2014 "),Lee=n(OOe,"A",{href:!0});var nOt=s(Lee);EOr=r(nOt,"FlaxGPT2Model"),nOt.forEach(t),COr=r(OOe," (OpenAI GPT-2 model)"),OOe.forEach(t),wOr=i(ae),F5=n(ae,"LI",{});var VOe=s(F5);t5e=n(VOe,"STRONG",{});var sOt=s(t5e);AOr=r(sOt,"gpt_neo"),sOt.forEach(t),LOr=r(VOe," \u2014 "),yee=n(VOe,"A",{href:!0});var lOt=s(yee);yOr=r(lOt,"FlaxGPTNeoModel"),lOt.forEach(t),xOr=r(VOe," (GPT Neo model)"),VOe.forEach(t),$Or=i(ae),T5=n(ae,"LI",{});var XOe=s(T5);a5e=n(XOe,"STRONG",{});var iOt=s(a5e);kOr=r(iOt,"gptj"),iOt.forEach(t),SOr=r(XOe," \u2014 "),xee=n(XOe,"A",{href:!0});var dOt=s(xee);ROr=r(dOt,"FlaxGPTJModel"),dOt.forEach(t),POr=r(XOe," (GPT-J model)"),XOe.forEach(t),BOr=i(ae),M5=n(ae,"LI",{});var zOe=s(M5);n5e=n(zOe,"STRONG",{});var cOt=s(n5e);IOr=r(cOt,"longt5"),cOt.forEach(t),NOr=r(zOe," \u2014 "),$ee=n(zOe,"A",{href:!0});var fOt=s($ee);qOr=r(fOt,"FlaxLongT5Model"),fOt.forEach(t),jOr=r(zOe," (LongT5 model)"),zOe.forEach(t),DOr=i(ae),E5=n(ae,"LI",{});var QOe=s(E5);s5e=n(QOe,"STRONG",{});var mOt=s(s5e);GOr=r(mOt,"marian"),mOt.forEach(t),OOr=r(QOe," \u2014 "),kee=n(QOe,"A",{href:!0});var gOt=s(kee);VOr=r(gOt,"FlaxMarianModel"),gOt.forEach(t),XOr=r(QOe," (Marian model)"),QOe.forEach(t),zOr=i(ae),C5=n(ae,"LI",{});var WOe=s(C5);l5e=n(WOe,"STRONG",{});var hOt=s(l5e);QOr=r(hOt,"mbart"),hOt.forEach(t),WOr=r(WOe," \u2014 "),See=n(WOe,"A",{href:!0});var pOt=s(See);HOr=r(pOt,"FlaxMBartModel"),pOt.forEach(t),UOr=r(WOe," (mBART model)"),WOe.forEach(t),JOr=i(ae),w5=n(ae,"LI",{});var HOe=s(w5);i5e=n(HOe,"STRONG",{});var _Ot=s(i5e);YOr=r(_Ot,"mt5"),_Ot.forEach(t),KOr=r(HOe," \u2014 "),Ree=n(HOe,"A",{href:!0});var uOt=s(Ree);ZOr=r(uOt,"FlaxMT5Model"),uOt.forEach(t),eVr=r(HOe," (MT5 model)"),HOe.forEach(t),oVr=i(ae),A5=n(ae,"LI",{});var UOe=s(A5);d5e=n(UOe,"STRONG",{});var bOt=s(d5e);rVr=r(bOt,"opt"),bOt.forEach(t),tVr=r(UOe," \u2014 "),Pee=n(UOe,"A",{href:!0});var vOt=s(Pee);aVr=r(vOt,"FlaxOPTModel"),vOt.forEach(t),nVr=r(UOe," (OPT model)"),UOe.forEach(t),sVr=i(ae),L5=n(ae,"LI",{});var JOe=s(L5);c5e=n(JOe,"STRONG",{});var FOt=s(c5e);lVr=r(FOt,"pegasus"),FOt.forEach(t),iVr=r(JOe," \u2014 "),Bee=n(JOe,"A",{href:!0});var TOt=s(Bee);dVr=r(TOt,"FlaxPegasusModel"),TOt.forEach(t),cVr=r(JOe," (Pegasus model)"),JOe.forEach(t),fVr=i(ae),y5=n(ae,"LI",{});var YOe=s(y5);f5e=n(YOe,"STRONG",{});var MOt=s(f5e);mVr=r(MOt,"roberta"),MOt.forEach(t),gVr=r(YOe," \u2014 "),Iee=n(YOe,"A",{href:!0});var EOt=s(Iee);hVr=r(EOt,"FlaxRobertaModel"),EOt.forEach(t),pVr=r(YOe," (RoBERTa model)"),YOe.forEach(t),_Vr=i(ae),x5=n(ae,"LI",{});var KOe=s(x5);m5e=n(KOe,"STRONG",{});var COt=s(m5e);uVr=r(COt,"roformer"),COt.forEach(t),bVr=r(KOe," \u2014 "),Nee=n(KOe,"A",{href:!0});var wOt=s(Nee);vVr=r(wOt,"FlaxRoFormerModel"),wOt.forEach(t),FVr=r(KOe," (RoFormer model)"),KOe.forEach(t),TVr=i(ae),$5=n(ae,"LI",{});var ZOe=s($5);g5e=n(ZOe,"STRONG",{});var AOt=s(g5e);MVr=r(AOt,"t5"),AOt.forEach(t),EVr=r(ZOe," \u2014 "),qee=n(ZOe,"A",{href:!0});var LOt=s(qee);CVr=r(LOt,"FlaxT5Model"),LOt.forEach(t),wVr=r(ZOe," (T5 model)"),ZOe.forEach(t),AVr=i(ae),k5=n(ae,"LI",{});var eVe=s(k5);h5e=n(eVe,"STRONG",{});var yOt=s(h5e);LVr=r(yOt,"vision-text-dual-encoder"),yOt.forEach(t),yVr=r(eVe," \u2014 "),jee=n(eVe,"A",{href:!0});var xOt=s(jee);xVr=r(xOt,"FlaxVisionTextDualEncoderModel"),xOt.forEach(t),$Vr=r(eVe," (VisionTextDualEncoder model)"),eVe.forEach(t),kVr=i(ae),S5=n(ae,"LI",{});var oVe=s(S5);p5e=n(oVe,"STRONG",{});var $Ot=s(p5e);SVr=r($Ot,"vit"),$Ot.forEach(t),RVr=r(oVe," \u2014 "),Dee=n(oVe,"A",{href:!0});var kOt=s(Dee);PVr=r(kOt,"FlaxViTModel"),kOt.forEach(t),BVr=r(oVe," (ViT model)"),oVe.forEach(t),IVr=i(ae),R5=n(ae,"LI",{});var rVe=s(R5);_5e=n(rVe,"STRONG",{});var SOt=s(_5e);NVr=r(SOt,"wav2vec2"),SOt.forEach(t),qVr=r(rVe," \u2014 "),Gee=n(rVe,"A",{href:!0});var ROt=s(Gee);jVr=r(ROt,"FlaxWav2Vec2Model"),ROt.forEach(t),DVr=r(rVe," (Wav2Vec2 model)"),rVe.forEach(t),GVr=i(ae),P5=n(ae,"LI",{});var tVe=s(P5);u5e=n(tVe,"STRONG",{});var POt=s(u5e);OVr=r(POt,"xglm"),POt.forEach(t),VVr=r(tVe," \u2014 "),Oee=n(tVe,"A",{href:!0});var BOt=s(Oee);XVr=r(BOt,"FlaxXGLMModel"),BOt.forEach(t),zVr=r(tVe," (XGLM model)"),tVe.forEach(t),QVr=i(ae),B5=n(ae,"LI",{});var aVe=s(B5);b5e=n(aVe,"STRONG",{});var IOt=s(b5e);WVr=r(IOt,"xlm-roberta"),IOt.forEach(t),HVr=r(aVe," \u2014 "),Vee=n(aVe,"A",{href:!0});var NOt=s(Vee);UVr=r(NOt,"FlaxXLMRobertaModel"),NOt.forEach(t),JVr=r(aVe," (XLM-RoBERTa model)"),aVe.forEach(t),ae.forEach(t),YVr=i(si),T(I5.$$.fragment,si),si.forEach(t),ni.forEach(t),uQe=i(f),Kc=n(f,"H2",{class:!0});var AHe=s(Kc);N5=n(AHe,"A",{id:!0,class:!0,href:!0});var qOt=s(N5);v5e=n(qOt,"SPAN",{});var jOt=s(v5e);T(M$.$$.fragment,jOt),jOt.forEach(t),qOt.forEach(t),KVr=i(AHe),F5e=n(AHe,"SPAN",{});var DOt=s(F5e);ZVr=r(DOt,"FlaxAutoModelForCausalLM"),DOt.forEach(t),AHe.forEach(t),bQe=i(f),_r=n(f,"DIV",{class:!0});var li=s(_r);T(E$.$$.fragment,li),eXr=i(li),Zc=n(li,"P",{});var Eae=s(Zc);oXr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Xee=n(Eae,"A",{href:!0});var GOt=s(Xee);rXr=r(GOt,"from_pretrained()"),GOt.forEach(t),tXr=r(Eae," class method or the "),zee=n(Eae,"A",{href:!0});var OOt=s(zee);aXr=r(OOt,"from_config()"),OOt.forEach(t),nXr=r(Eae,` class
method.`),Eae.forEach(t),sXr=i(li),C$=n(li,"P",{});var LHe=s(C$);lXr=r(LHe,"This class cannot be instantiated directly using "),T5e=n(LHe,"CODE",{});var VOt=s(T5e);iXr=r(VOt,"__init__()"),VOt.forEach(t),dXr=r(LHe," (throws an error)."),LHe.forEach(t),cXr=i(li),Ht=n(li,"DIV",{class:!0});var OA=s(Ht);T(w$.$$.fragment,OA),fXr=i(OA),M5e=n(OA,"P",{});var XOt=s(M5e);mXr=r(XOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XOt.forEach(t),gXr=i(OA),ef=n(OA,"P",{});var Cae=s(ef);hXr=r(Cae,`Note:
Loading a model from its configuration file does `),E5e=n(Cae,"STRONG",{});var zOt=s(E5e);pXr=r(zOt,"not"),zOt.forEach(t),_Xr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Cae,"A",{href:!0});var QOt=s(Qee);uXr=r(QOt,"from_pretrained()"),QOt.forEach(t),bXr=r(Cae," to load the model weights."),Cae.forEach(t),vXr=i(OA),T(q5.$$.fragment,OA),OA.forEach(t),FXr=i(li),Xr=n(li,"DIV",{class:!0});var ii=s(Xr);T(A$.$$.fragment,ii),TXr=i(ii),C5e=n(ii,"P",{});var WOt=s(C5e);MXr=r(WOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WOt.forEach(t),EXr=i(ii),En=n(ii,"P",{});var VA=s(En);CXr=r(VA,"The model class to instantiate is selected based on the "),w5e=n(VA,"CODE",{});var HOt=s(w5e);wXr=r(HOt,"model_type"),HOt.forEach(t),AXr=r(VA,` property of the config object (either
passed as an argument or loaded from `),A5e=n(VA,"CODE",{});var UOt=s(A5e);LXr=r(UOt,"pretrained_model_name_or_path"),UOt.forEach(t),yXr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(VA,"CODE",{});var JOt=s(L5e);xXr=r(JOt,"pretrained_model_name_or_path"),JOt.forEach(t),$Xr=r(VA,":"),VA.forEach(t),kXr=i(ii),xe=n(ii,"UL",{});var Ne=s(xe);j5=n(Ne,"LI",{});var nVe=s(j5);y5e=n(nVe,"STRONG",{});var YOt=s(y5e);SXr=r(YOt,"bart"),YOt.forEach(t),RXr=r(nVe," \u2014 "),Wee=n(nVe,"A",{href:!0});var KOt=s(Wee);PXr=r(KOt,"FlaxBartForCausalLM"),KOt.forEach(t),BXr=r(nVe," (BART model)"),nVe.forEach(t),IXr=i(Ne),D5=n(Ne,"LI",{});var sVe=s(D5);x5e=n(sVe,"STRONG",{});var ZOt=s(x5e);NXr=r(ZOt,"bert"),ZOt.forEach(t),qXr=r(sVe," \u2014 "),Hee=n(sVe,"A",{href:!0});var eVt=s(Hee);jXr=r(eVt,"FlaxBertForCausalLM"),eVt.forEach(t),DXr=r(sVe," (BERT model)"),sVe.forEach(t),GXr=i(Ne),G5=n(Ne,"LI",{});var lVe=s(G5);$5e=n(lVe,"STRONG",{});var oVt=s($5e);OXr=r(oVt,"big_bird"),oVt.forEach(t),VXr=r(lVe," \u2014 "),Uee=n(lVe,"A",{href:!0});var rVt=s(Uee);XXr=r(rVt,"FlaxBigBirdForCausalLM"),rVt.forEach(t),zXr=r(lVe," (BigBird model)"),lVe.forEach(t),QXr=i(Ne),O5=n(Ne,"LI",{});var iVe=s(O5);k5e=n(iVe,"STRONG",{});var tVt=s(k5e);WXr=r(tVt,"electra"),tVt.forEach(t),HXr=r(iVe," \u2014 "),Jee=n(iVe,"A",{href:!0});var aVt=s(Jee);UXr=r(aVt,"FlaxElectraForCausalLM"),aVt.forEach(t),JXr=r(iVe," (ELECTRA model)"),iVe.forEach(t),YXr=i(Ne),V5=n(Ne,"LI",{});var dVe=s(V5);S5e=n(dVe,"STRONG",{});var nVt=s(S5e);KXr=r(nVt,"gpt2"),nVt.forEach(t),ZXr=r(dVe," \u2014 "),Yee=n(dVe,"A",{href:!0});var sVt=s(Yee);ezr=r(sVt,"FlaxGPT2LMHeadModel"),sVt.forEach(t),ozr=r(dVe," (OpenAI GPT-2 model)"),dVe.forEach(t),rzr=i(Ne),X5=n(Ne,"LI",{});var cVe=s(X5);R5e=n(cVe,"STRONG",{});var lVt=s(R5e);tzr=r(lVt,"gpt_neo"),lVt.forEach(t),azr=r(cVe," \u2014 "),Kee=n(cVe,"A",{href:!0});var iVt=s(Kee);nzr=r(iVt,"FlaxGPTNeoForCausalLM"),iVt.forEach(t),szr=r(cVe," (GPT Neo model)"),cVe.forEach(t),lzr=i(Ne),z5=n(Ne,"LI",{});var fVe=s(z5);P5e=n(fVe,"STRONG",{});var dVt=s(P5e);izr=r(dVt,"gptj"),dVt.forEach(t),dzr=r(fVe," \u2014 "),Zee=n(fVe,"A",{href:!0});var cVt=s(Zee);czr=r(cVt,"FlaxGPTJForCausalLM"),cVt.forEach(t),fzr=r(fVe," (GPT-J model)"),fVe.forEach(t),mzr=i(Ne),Q5=n(Ne,"LI",{});var mVe=s(Q5);B5e=n(mVe,"STRONG",{});var fVt=s(B5e);gzr=r(fVt,"opt"),fVt.forEach(t),hzr=r(mVe," \u2014 "),eoe=n(mVe,"A",{href:!0});var mVt=s(eoe);pzr=r(mVt,"FlaxOPTForCausalLM"),mVt.forEach(t),_zr=r(mVe," (OPT model)"),mVe.forEach(t),uzr=i(Ne),W5=n(Ne,"LI",{});var gVe=s(W5);I5e=n(gVe,"STRONG",{});var gVt=s(I5e);bzr=r(gVt,"roberta"),gVt.forEach(t),vzr=r(gVe," \u2014 "),ooe=n(gVe,"A",{href:!0});var hVt=s(ooe);Fzr=r(hVt,"FlaxRobertaForCausalLM"),hVt.forEach(t),Tzr=r(gVe," (RoBERTa model)"),gVe.forEach(t),Mzr=i(Ne),H5=n(Ne,"LI",{});var hVe=s(H5);N5e=n(hVe,"STRONG",{});var pVt=s(N5e);Ezr=r(pVt,"xglm"),pVt.forEach(t),Czr=r(hVe," \u2014 "),roe=n(hVe,"A",{href:!0});var _Vt=s(roe);wzr=r(_Vt,"FlaxXGLMForCausalLM"),_Vt.forEach(t),Azr=r(hVe," (XGLM model)"),hVe.forEach(t),Ne.forEach(t),Lzr=i(ii),T(U5.$$.fragment,ii),ii.forEach(t),li.forEach(t),vQe=i(f),of=n(f,"H2",{class:!0});var yHe=s(of);J5=n(yHe,"A",{id:!0,class:!0,href:!0});var uVt=s(J5);q5e=n(uVt,"SPAN",{});var bVt=s(q5e);T(L$.$$.fragment,bVt),bVt.forEach(t),uVt.forEach(t),yzr=i(yHe),j5e=n(yHe,"SPAN",{});var vVt=s(j5e);xzr=r(vVt,"FlaxAutoModelForPreTraining"),vVt.forEach(t),yHe.forEach(t),FQe=i(f),ur=n(f,"DIV",{class:!0});var di=s(ur);T(y$.$$.fragment,di),$zr=i(di),rf=n(di,"P",{});var wae=s(rf);kzr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),toe=n(wae,"A",{href:!0});var FVt=s(toe);Szr=r(FVt,"from_pretrained()"),FVt.forEach(t),Rzr=r(wae," class method or the "),aoe=n(wae,"A",{href:!0});var TVt=s(aoe);Pzr=r(TVt,"from_config()"),TVt.forEach(t),Bzr=r(wae,` class
method.`),wae.forEach(t),Izr=i(di),x$=n(di,"P",{});var xHe=s(x$);Nzr=r(xHe,"This class cannot be instantiated directly using "),D5e=n(xHe,"CODE",{});var MVt=s(D5e);qzr=r(MVt,"__init__()"),MVt.forEach(t),jzr=r(xHe," (throws an error)."),xHe.forEach(t),Dzr=i(di),Ut=n(di,"DIV",{class:!0});var XA=s(Ut);T($$.$$.fragment,XA),Gzr=i(XA),G5e=n(XA,"P",{});var EVt=s(G5e);Ozr=r(EVt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EVt.forEach(t),Vzr=i(XA),tf=n(XA,"P",{});var Aae=s(tf);Xzr=r(Aae,`Note:
Loading a model from its configuration file does `),O5e=n(Aae,"STRONG",{});var CVt=s(O5e);zzr=r(CVt,"not"),CVt.forEach(t),Qzr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(Aae,"A",{href:!0});var wVt=s(noe);Wzr=r(wVt,"from_pretrained()"),wVt.forEach(t),Hzr=r(Aae," to load the model weights."),Aae.forEach(t),Uzr=i(XA),T(Y5.$$.fragment,XA),XA.forEach(t),Jzr=i(di),zr=n(di,"DIV",{class:!0});var ci=s(zr);T(k$.$$.fragment,ci),Yzr=i(ci),V5e=n(ci,"P",{});var AVt=s(V5e);Kzr=r(AVt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AVt.forEach(t),Zzr=i(ci),Cn=n(ci,"P",{});var zA=s(Cn);eQr=r(zA,"The model class to instantiate is selected based on the "),X5e=n(zA,"CODE",{});var LVt=s(X5e);oQr=r(LVt,"model_type"),LVt.forEach(t),rQr=r(zA,` property of the config object (either
passed as an argument or loaded from `),z5e=n(zA,"CODE",{});var yVt=s(z5e);tQr=r(yVt,"pretrained_model_name_or_path"),yVt.forEach(t),aQr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=n(zA,"CODE",{});var xVt=s(Q5e);nQr=r(xVt,"pretrained_model_name_or_path"),xVt.forEach(t),sQr=r(zA,":"),zA.forEach(t),lQr=i(ci),Ee=n(ci,"UL",{});var we=s(Ee);K5=n(we,"LI",{});var pVe=s(K5);W5e=n(pVe,"STRONG",{});var $Vt=s(W5e);iQr=r($Vt,"albert"),$Vt.forEach(t),dQr=r(pVe," \u2014 "),soe=n(pVe,"A",{href:!0});var kVt=s(soe);cQr=r(kVt,"FlaxAlbertForPreTraining"),kVt.forEach(t),fQr=r(pVe," (ALBERT model)"),pVe.forEach(t),mQr=i(we),Z5=n(we,"LI",{});var _Ve=s(Z5);H5e=n(_Ve,"STRONG",{});var SVt=s(H5e);gQr=r(SVt,"bart"),SVt.forEach(t),hQr=r(_Ve," \u2014 "),loe=n(_Ve,"A",{href:!0});var RVt=s(loe);pQr=r(RVt,"FlaxBartForConditionalGeneration"),RVt.forEach(t),_Qr=r(_Ve," (BART model)"),_Ve.forEach(t),uQr=i(we),e3=n(we,"LI",{});var uVe=s(e3);U5e=n(uVe,"STRONG",{});var PVt=s(U5e);bQr=r(PVt,"bert"),PVt.forEach(t),vQr=r(uVe," \u2014 "),ioe=n(uVe,"A",{href:!0});var BVt=s(ioe);FQr=r(BVt,"FlaxBertForPreTraining"),BVt.forEach(t),TQr=r(uVe," (BERT model)"),uVe.forEach(t),MQr=i(we),o3=n(we,"LI",{});var bVe=s(o3);J5e=n(bVe,"STRONG",{});var IVt=s(J5e);EQr=r(IVt,"big_bird"),IVt.forEach(t),CQr=r(bVe," \u2014 "),doe=n(bVe,"A",{href:!0});var NVt=s(doe);wQr=r(NVt,"FlaxBigBirdForPreTraining"),NVt.forEach(t),AQr=r(bVe," (BigBird model)"),bVe.forEach(t),LQr=i(we),r3=n(we,"LI",{});var vVe=s(r3);Y5e=n(vVe,"STRONG",{});var qVt=s(Y5e);yQr=r(qVt,"electra"),qVt.forEach(t),xQr=r(vVe," \u2014 "),coe=n(vVe,"A",{href:!0});var jVt=s(coe);$Qr=r(jVt,"FlaxElectraForPreTraining"),jVt.forEach(t),kQr=r(vVe," (ELECTRA model)"),vVe.forEach(t),SQr=i(we),t3=n(we,"LI",{});var FVe=s(t3);K5e=n(FVe,"STRONG",{});var DVt=s(K5e);RQr=r(DVt,"longt5"),DVt.forEach(t),PQr=r(FVe," \u2014 "),foe=n(FVe,"A",{href:!0});var GVt=s(foe);BQr=r(GVt,"FlaxLongT5ForConditionalGeneration"),GVt.forEach(t),IQr=r(FVe," (LongT5 model)"),FVe.forEach(t),NQr=i(we),a3=n(we,"LI",{});var TVe=s(a3);Z5e=n(TVe,"STRONG",{});var OVt=s(Z5e);qQr=r(OVt,"mbart"),OVt.forEach(t),jQr=r(TVe," \u2014 "),moe=n(TVe,"A",{href:!0});var VVt=s(moe);DQr=r(VVt,"FlaxMBartForConditionalGeneration"),VVt.forEach(t),GQr=r(TVe," (mBART model)"),TVe.forEach(t),OQr=i(we),n3=n(we,"LI",{});var MVe=s(n3);e3e=n(MVe,"STRONG",{});var XVt=s(e3e);VQr=r(XVt,"mt5"),XVt.forEach(t),XQr=r(MVe," \u2014 "),goe=n(MVe,"A",{href:!0});var zVt=s(goe);zQr=r(zVt,"FlaxMT5ForConditionalGeneration"),zVt.forEach(t),QQr=r(MVe," (MT5 model)"),MVe.forEach(t),WQr=i(we),s3=n(we,"LI",{});var EVe=s(s3);o3e=n(EVe,"STRONG",{});var QVt=s(o3e);HQr=r(QVt,"roberta"),QVt.forEach(t),UQr=r(EVe," \u2014 "),hoe=n(EVe,"A",{href:!0});var WVt=s(hoe);JQr=r(WVt,"FlaxRobertaForMaskedLM"),WVt.forEach(t),YQr=r(EVe," (RoBERTa model)"),EVe.forEach(t),KQr=i(we),l3=n(we,"LI",{});var CVe=s(l3);r3e=n(CVe,"STRONG",{});var HVt=s(r3e);ZQr=r(HVt,"roformer"),HVt.forEach(t),eWr=r(CVe," \u2014 "),poe=n(CVe,"A",{href:!0});var UVt=s(poe);oWr=r(UVt,"FlaxRoFormerForMaskedLM"),UVt.forEach(t),rWr=r(CVe," (RoFormer model)"),CVe.forEach(t),tWr=i(we),i3=n(we,"LI",{});var wVe=s(i3);t3e=n(wVe,"STRONG",{});var JVt=s(t3e);aWr=r(JVt,"t5"),JVt.forEach(t),nWr=r(wVe," \u2014 "),_oe=n(wVe,"A",{href:!0});var YVt=s(_oe);sWr=r(YVt,"FlaxT5ForConditionalGeneration"),YVt.forEach(t),lWr=r(wVe," (T5 model)"),wVe.forEach(t),iWr=i(we),d3=n(we,"LI",{});var AVe=s(d3);a3e=n(AVe,"STRONG",{});var KVt=s(a3e);dWr=r(KVt,"wav2vec2"),KVt.forEach(t),cWr=r(AVe," \u2014 "),uoe=n(AVe,"A",{href:!0});var ZVt=s(uoe);fWr=r(ZVt,"FlaxWav2Vec2ForPreTraining"),ZVt.forEach(t),mWr=r(AVe," (Wav2Vec2 model)"),AVe.forEach(t),gWr=i(we),c3=n(we,"LI",{});var LVe=s(c3);n3e=n(LVe,"STRONG",{});var eXt=s(n3e);hWr=r(eXt,"xlm-roberta"),eXt.forEach(t),pWr=r(LVe," \u2014 "),boe=n(LVe,"A",{href:!0});var oXt=s(boe);_Wr=r(oXt,"FlaxXLMRobertaForMaskedLM"),oXt.forEach(t),uWr=r(LVe," (XLM-RoBERTa model)"),LVe.forEach(t),we.forEach(t),bWr=i(ci),T(f3.$$.fragment,ci),ci.forEach(t),di.forEach(t),TQe=i(f),af=n(f,"H2",{class:!0});var $He=s(af);m3=n($He,"A",{id:!0,class:!0,href:!0});var rXt=s(m3);s3e=n(rXt,"SPAN",{});var tXt=s(s3e);T(S$.$$.fragment,tXt),tXt.forEach(t),rXt.forEach(t),vWr=i($He),l3e=n($He,"SPAN",{});var aXt=s(l3e);FWr=r(aXt,"FlaxAutoModelForMaskedLM"),aXt.forEach(t),$He.forEach(t),MQe=i(f),br=n(f,"DIV",{class:!0});var fi=s(br);T(R$.$$.fragment,fi),TWr=i(fi),nf=n(fi,"P",{});var Lae=s(nf);MWr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),voe=n(Lae,"A",{href:!0});var nXt=s(voe);EWr=r(nXt,"from_pretrained()"),nXt.forEach(t),CWr=r(Lae," class method or the "),Foe=n(Lae,"A",{href:!0});var sXt=s(Foe);wWr=r(sXt,"from_config()"),sXt.forEach(t),AWr=r(Lae,` class
method.`),Lae.forEach(t),LWr=i(fi),P$=n(fi,"P",{});var kHe=s(P$);yWr=r(kHe,"This class cannot be instantiated directly using "),i3e=n(kHe,"CODE",{});var lXt=s(i3e);xWr=r(lXt,"__init__()"),lXt.forEach(t),$Wr=r(kHe," (throws an error)."),kHe.forEach(t),kWr=i(fi),Jt=n(fi,"DIV",{class:!0});var QA=s(Jt);T(B$.$$.fragment,QA),SWr=i(QA),d3e=n(QA,"P",{});var iXt=s(d3e);RWr=r(iXt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iXt.forEach(t),PWr=i(QA),sf=n(QA,"P",{});var yae=s(sf);BWr=r(yae,`Note:
Loading a model from its configuration file does `),c3e=n(yae,"STRONG",{});var dXt=s(c3e);IWr=r(dXt,"not"),dXt.forEach(t),NWr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(yae,"A",{href:!0});var cXt=s(Toe);qWr=r(cXt,"from_pretrained()"),cXt.forEach(t),jWr=r(yae," to load the model weights."),yae.forEach(t),DWr=i(QA),T(g3.$$.fragment,QA),QA.forEach(t),GWr=i(fi),Qr=n(fi,"DIV",{class:!0});var mi=s(Qr);T(I$.$$.fragment,mi),OWr=i(mi),f3e=n(mi,"P",{});var fXt=s(f3e);VWr=r(fXt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fXt.forEach(t),XWr=i(mi),wn=n(mi,"P",{});var WA=s(wn);zWr=r(WA,"The model class to instantiate is selected based on the "),m3e=n(WA,"CODE",{});var mXt=s(m3e);QWr=r(mXt,"model_type"),mXt.forEach(t),WWr=r(WA,` property of the config object (either
passed as an argument or loaded from `),g3e=n(WA,"CODE",{});var gXt=s(g3e);HWr=r(gXt,"pretrained_model_name_or_path"),gXt.forEach(t),UWr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=n(WA,"CODE",{});var hXt=s(h3e);JWr=r(hXt,"pretrained_model_name_or_path"),hXt.forEach(t),YWr=r(WA,":"),WA.forEach(t),KWr=i(mi),$e=n(mi,"UL",{});var qe=s($e);h3=n(qe,"LI",{});var yVe=s(h3);p3e=n(yVe,"STRONG",{});var pXt=s(p3e);ZWr=r(pXt,"albert"),pXt.forEach(t),eHr=r(yVe," \u2014 "),Moe=n(yVe,"A",{href:!0});var _Xt=s(Moe);oHr=r(_Xt,"FlaxAlbertForMaskedLM"),_Xt.forEach(t),rHr=r(yVe," (ALBERT model)"),yVe.forEach(t),tHr=i(qe),p3=n(qe,"LI",{});var xVe=s(p3);_3e=n(xVe,"STRONG",{});var uXt=s(_3e);aHr=r(uXt,"bart"),uXt.forEach(t),nHr=r(xVe," \u2014 "),Eoe=n(xVe,"A",{href:!0});var bXt=s(Eoe);sHr=r(bXt,"FlaxBartForConditionalGeneration"),bXt.forEach(t),lHr=r(xVe," (BART model)"),xVe.forEach(t),iHr=i(qe),_3=n(qe,"LI",{});var $Ve=s(_3);u3e=n($Ve,"STRONG",{});var vXt=s(u3e);dHr=r(vXt,"bert"),vXt.forEach(t),cHr=r($Ve," \u2014 "),Coe=n($Ve,"A",{href:!0});var FXt=s(Coe);fHr=r(FXt,"FlaxBertForMaskedLM"),FXt.forEach(t),mHr=r($Ve," (BERT model)"),$Ve.forEach(t),gHr=i(qe),u3=n(qe,"LI",{});var kVe=s(u3);b3e=n(kVe,"STRONG",{});var TXt=s(b3e);hHr=r(TXt,"big_bird"),TXt.forEach(t),pHr=r(kVe," \u2014 "),woe=n(kVe,"A",{href:!0});var MXt=s(woe);_Hr=r(MXt,"FlaxBigBirdForMaskedLM"),MXt.forEach(t),uHr=r(kVe," (BigBird model)"),kVe.forEach(t),bHr=i(qe),b3=n(qe,"LI",{});var SVe=s(b3);v3e=n(SVe,"STRONG",{});var EXt=s(v3e);vHr=r(EXt,"distilbert"),EXt.forEach(t),FHr=r(SVe," \u2014 "),Aoe=n(SVe,"A",{href:!0});var CXt=s(Aoe);THr=r(CXt,"FlaxDistilBertForMaskedLM"),CXt.forEach(t),MHr=r(SVe," (DistilBERT model)"),SVe.forEach(t),EHr=i(qe),v3=n(qe,"LI",{});var RVe=s(v3);F3e=n(RVe,"STRONG",{});var wXt=s(F3e);CHr=r(wXt,"electra"),wXt.forEach(t),wHr=r(RVe," \u2014 "),Loe=n(RVe,"A",{href:!0});var AXt=s(Loe);AHr=r(AXt,"FlaxElectraForMaskedLM"),AXt.forEach(t),LHr=r(RVe," (ELECTRA model)"),RVe.forEach(t),yHr=i(qe),F3=n(qe,"LI",{});var PVe=s(F3);T3e=n(PVe,"STRONG",{});var LXt=s(T3e);xHr=r(LXt,"mbart"),LXt.forEach(t),$Hr=r(PVe," \u2014 "),yoe=n(PVe,"A",{href:!0});var yXt=s(yoe);kHr=r(yXt,"FlaxMBartForConditionalGeneration"),yXt.forEach(t),SHr=r(PVe," (mBART model)"),PVe.forEach(t),RHr=i(qe),T3=n(qe,"LI",{});var BVe=s(T3);M3e=n(BVe,"STRONG",{});var xXt=s(M3e);PHr=r(xXt,"roberta"),xXt.forEach(t),BHr=r(BVe," \u2014 "),xoe=n(BVe,"A",{href:!0});var $Xt=s(xoe);IHr=r($Xt,"FlaxRobertaForMaskedLM"),$Xt.forEach(t),NHr=r(BVe," (RoBERTa model)"),BVe.forEach(t),qHr=i(qe),M3=n(qe,"LI",{});var IVe=s(M3);E3e=n(IVe,"STRONG",{});var kXt=s(E3e);jHr=r(kXt,"roformer"),kXt.forEach(t),DHr=r(IVe," \u2014 "),$oe=n(IVe,"A",{href:!0});var SXt=s($oe);GHr=r(SXt,"FlaxRoFormerForMaskedLM"),SXt.forEach(t),OHr=r(IVe," (RoFormer model)"),IVe.forEach(t),VHr=i(qe),E3=n(qe,"LI",{});var NVe=s(E3);C3e=n(NVe,"STRONG",{});var RXt=s(C3e);XHr=r(RXt,"xlm-roberta"),RXt.forEach(t),zHr=r(NVe," \u2014 "),koe=n(NVe,"A",{href:!0});var PXt=s(koe);QHr=r(PXt,"FlaxXLMRobertaForMaskedLM"),PXt.forEach(t),WHr=r(NVe," (XLM-RoBERTa model)"),NVe.forEach(t),qe.forEach(t),HHr=i(mi),T(C3.$$.fragment,mi),mi.forEach(t),fi.forEach(t),EQe=i(f),lf=n(f,"H2",{class:!0});var SHe=s(lf);w3=n(SHe,"A",{id:!0,class:!0,href:!0});var BXt=s(w3);w3e=n(BXt,"SPAN",{});var IXt=s(w3e);T(N$.$$.fragment,IXt),IXt.forEach(t),BXt.forEach(t),UHr=i(SHe),A3e=n(SHe,"SPAN",{});var NXt=s(A3e);JHr=r(NXt,"FlaxAutoModelForSeq2SeqLM"),NXt.forEach(t),SHe.forEach(t),CQe=i(f),vr=n(f,"DIV",{class:!0});var gi=s(vr);T(q$.$$.fragment,gi),YHr=i(gi),df=n(gi,"P",{});var xae=s(df);KHr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Soe=n(xae,"A",{href:!0});var qXt=s(Soe);ZHr=r(qXt,"from_pretrained()"),qXt.forEach(t),eUr=r(xae," class method or the "),Roe=n(xae,"A",{href:!0});var jXt=s(Roe);oUr=r(jXt,"from_config()"),jXt.forEach(t),rUr=r(xae,` class
method.`),xae.forEach(t),tUr=i(gi),j$=n(gi,"P",{});var RHe=s(j$);aUr=r(RHe,"This class cannot be instantiated directly using "),L3e=n(RHe,"CODE",{});var DXt=s(L3e);nUr=r(DXt,"__init__()"),DXt.forEach(t),sUr=r(RHe," (throws an error)."),RHe.forEach(t),lUr=i(gi),Yt=n(gi,"DIV",{class:!0});var HA=s(Yt);T(D$.$$.fragment,HA),iUr=i(HA),y3e=n(HA,"P",{});var GXt=s(y3e);dUr=r(GXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GXt.forEach(t),cUr=i(HA),cf=n(HA,"P",{});var $ae=s(cf);fUr=r($ae,`Note:
Loading a model from its configuration file does `),x3e=n($ae,"STRONG",{});var OXt=s(x3e);mUr=r(OXt,"not"),OXt.forEach(t),gUr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=n($ae,"A",{href:!0});var VXt=s(Poe);hUr=r(VXt,"from_pretrained()"),VXt.forEach(t),pUr=r($ae," to load the model weights."),$ae.forEach(t),_Ur=i(HA),T(A3.$$.fragment,HA),HA.forEach(t),uUr=i(gi),Wr=n(gi,"DIV",{class:!0});var hi=s(Wr);T(G$.$$.fragment,hi),bUr=i(hi),$3e=n(hi,"P",{});var XXt=s($3e);vUr=r(XXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XXt.forEach(t),FUr=i(hi),An=n(hi,"P",{});var UA=s(An);TUr=r(UA,"The model class to instantiate is selected based on the "),k3e=n(UA,"CODE",{});var zXt=s(k3e);MUr=r(zXt,"model_type"),zXt.forEach(t),EUr=r(UA,` property of the config object (either
passed as an argument or loaded from `),S3e=n(UA,"CODE",{});var QXt=s(S3e);CUr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),wUr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(UA,"CODE",{});var WXt=s(R3e);AUr=r(WXt,"pretrained_model_name_or_path"),WXt.forEach(t),LUr=r(UA,":"),UA.forEach(t),yUr=i(hi),ke=n(hi,"UL",{});var je=s(ke);L3=n(je,"LI",{});var qVe=s(L3);P3e=n(qVe,"STRONG",{});var HXt=s(P3e);xUr=r(HXt,"bart"),HXt.forEach(t),$Ur=r(qVe," \u2014 "),Boe=n(qVe,"A",{href:!0});var UXt=s(Boe);kUr=r(UXt,"FlaxBartForConditionalGeneration"),UXt.forEach(t),SUr=r(qVe," (BART model)"),qVe.forEach(t),RUr=i(je),y3=n(je,"LI",{});var jVe=s(y3);B3e=n(jVe,"STRONG",{});var JXt=s(B3e);PUr=r(JXt,"blenderbot"),JXt.forEach(t),BUr=r(jVe," \u2014 "),Ioe=n(jVe,"A",{href:!0});var YXt=s(Ioe);IUr=r(YXt,"FlaxBlenderbotForConditionalGeneration"),YXt.forEach(t),NUr=r(jVe," (Blenderbot model)"),jVe.forEach(t),qUr=i(je),x3=n(je,"LI",{});var DVe=s(x3);I3e=n(DVe,"STRONG",{});var KXt=s(I3e);jUr=r(KXt,"blenderbot-small"),KXt.forEach(t),DUr=r(DVe," \u2014 "),Noe=n(DVe,"A",{href:!0});var ZXt=s(Noe);GUr=r(ZXt,"FlaxBlenderbotSmallForConditionalGeneration"),ZXt.forEach(t),OUr=r(DVe," (BlenderbotSmall model)"),DVe.forEach(t),VUr=i(je),$3=n(je,"LI",{});var GVe=s($3);N3e=n(GVe,"STRONG",{});var ezt=s(N3e);XUr=r(ezt,"encoder-decoder"),ezt.forEach(t),zUr=r(GVe," \u2014 "),qoe=n(GVe,"A",{href:!0});var ozt=s(qoe);QUr=r(ozt,"FlaxEncoderDecoderModel"),ozt.forEach(t),WUr=r(GVe," (Encoder decoder model)"),GVe.forEach(t),HUr=i(je),k3=n(je,"LI",{});var OVe=s(k3);q3e=n(OVe,"STRONG",{});var rzt=s(q3e);UUr=r(rzt,"longt5"),rzt.forEach(t),JUr=r(OVe," \u2014 "),joe=n(OVe,"A",{href:!0});var tzt=s(joe);YUr=r(tzt,"FlaxLongT5ForConditionalGeneration"),tzt.forEach(t),KUr=r(OVe," (LongT5 model)"),OVe.forEach(t),ZUr=i(je),S3=n(je,"LI",{});var VVe=s(S3);j3e=n(VVe,"STRONG",{});var azt=s(j3e);eJr=r(azt,"marian"),azt.forEach(t),oJr=r(VVe," \u2014 "),Doe=n(VVe,"A",{href:!0});var nzt=s(Doe);rJr=r(nzt,"FlaxMarianMTModel"),nzt.forEach(t),tJr=r(VVe," (Marian model)"),VVe.forEach(t),aJr=i(je),R3=n(je,"LI",{});var XVe=s(R3);D3e=n(XVe,"STRONG",{});var szt=s(D3e);nJr=r(szt,"mbart"),szt.forEach(t),sJr=r(XVe," \u2014 "),Goe=n(XVe,"A",{href:!0});var lzt=s(Goe);lJr=r(lzt,"FlaxMBartForConditionalGeneration"),lzt.forEach(t),iJr=r(XVe," (mBART model)"),XVe.forEach(t),dJr=i(je),P3=n(je,"LI",{});var zVe=s(P3);G3e=n(zVe,"STRONG",{});var izt=s(G3e);cJr=r(izt,"mt5"),izt.forEach(t),fJr=r(zVe," \u2014 "),Ooe=n(zVe,"A",{href:!0});var dzt=s(Ooe);mJr=r(dzt,"FlaxMT5ForConditionalGeneration"),dzt.forEach(t),gJr=r(zVe," (MT5 model)"),zVe.forEach(t),hJr=i(je),B3=n(je,"LI",{});var QVe=s(B3);O3e=n(QVe,"STRONG",{});var czt=s(O3e);pJr=r(czt,"pegasus"),czt.forEach(t),_Jr=r(QVe," \u2014 "),Voe=n(QVe,"A",{href:!0});var fzt=s(Voe);uJr=r(fzt,"FlaxPegasusForConditionalGeneration"),fzt.forEach(t),bJr=r(QVe," (Pegasus model)"),QVe.forEach(t),vJr=i(je),I3=n(je,"LI",{});var WVe=s(I3);V3e=n(WVe,"STRONG",{});var mzt=s(V3e);FJr=r(mzt,"t5"),mzt.forEach(t),TJr=r(WVe," \u2014 "),Xoe=n(WVe,"A",{href:!0});var gzt=s(Xoe);MJr=r(gzt,"FlaxT5ForConditionalGeneration"),gzt.forEach(t),EJr=r(WVe," (T5 model)"),WVe.forEach(t),je.forEach(t),CJr=i(hi),T(N3.$$.fragment,hi),hi.forEach(t),gi.forEach(t),wQe=i(f),ff=n(f,"H2",{class:!0});var PHe=s(ff);q3=n(PHe,"A",{id:!0,class:!0,href:!0});var hzt=s(q3);X3e=n(hzt,"SPAN",{});var pzt=s(X3e);T(O$.$$.fragment,pzt),pzt.forEach(t),hzt.forEach(t),wJr=i(PHe),z3e=n(PHe,"SPAN",{});var _zt=s(z3e);AJr=r(_zt,"FlaxAutoModelForSequenceClassification"),_zt.forEach(t),PHe.forEach(t),AQe=i(f),Fr=n(f,"DIV",{class:!0});var pi=s(Fr);T(V$.$$.fragment,pi),LJr=i(pi),mf=n(pi,"P",{});var kae=s(mf);yJr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zoe=n(kae,"A",{href:!0});var uzt=s(zoe);xJr=r(uzt,"from_pretrained()"),uzt.forEach(t),$Jr=r(kae," class method or the "),Qoe=n(kae,"A",{href:!0});var bzt=s(Qoe);kJr=r(bzt,"from_config()"),bzt.forEach(t),SJr=r(kae,` class
method.`),kae.forEach(t),RJr=i(pi),X$=n(pi,"P",{});var BHe=s(X$);PJr=r(BHe,"This class cannot be instantiated directly using "),Q3e=n(BHe,"CODE",{});var vzt=s(Q3e);BJr=r(vzt,"__init__()"),vzt.forEach(t),IJr=r(BHe," (throws an error)."),BHe.forEach(t),NJr=i(pi),Kt=n(pi,"DIV",{class:!0});var JA=s(Kt);T(z$.$$.fragment,JA),qJr=i(JA),W3e=n(JA,"P",{});var Fzt=s(W3e);jJr=r(Fzt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fzt.forEach(t),DJr=i(JA),gf=n(JA,"P",{});var Sae=s(gf);GJr=r(Sae,`Note:
Loading a model from its configuration file does `),H3e=n(Sae,"STRONG",{});var Tzt=s(H3e);OJr=r(Tzt,"not"),Tzt.forEach(t),VJr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=n(Sae,"A",{href:!0});var Mzt=s(Woe);XJr=r(Mzt,"from_pretrained()"),Mzt.forEach(t),zJr=r(Sae," to load the model weights."),Sae.forEach(t),QJr=i(JA),T(j3.$$.fragment,JA),JA.forEach(t),WJr=i(pi),Hr=n(pi,"DIV",{class:!0});var _i=s(Hr);T(Q$.$$.fragment,_i),HJr=i(_i),U3e=n(_i,"P",{});var Ezt=s(U3e);UJr=r(Ezt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ezt.forEach(t),JJr=i(_i),Ln=n(_i,"P",{});var YA=s(Ln);YJr=r(YA,"The model class to instantiate is selected based on the "),J3e=n(YA,"CODE",{});var Czt=s(J3e);KJr=r(Czt,"model_type"),Czt.forEach(t),ZJr=r(YA,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(YA,"CODE",{});var wzt=s(Y3e);eYr=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),oYr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(YA,"CODE",{});var Azt=s(K3e);rYr=r(Azt,"pretrained_model_name_or_path"),Azt.forEach(t),tYr=r(YA,":"),YA.forEach(t),aYr=i(_i),Se=n(_i,"UL",{});var De=s(Se);D3=n(De,"LI",{});var HVe=s(D3);Z3e=n(HVe,"STRONG",{});var Lzt=s(Z3e);nYr=r(Lzt,"albert"),Lzt.forEach(t),sYr=r(HVe," \u2014 "),Hoe=n(HVe,"A",{href:!0});var yzt=s(Hoe);lYr=r(yzt,"FlaxAlbertForSequenceClassification"),yzt.forEach(t),iYr=r(HVe," (ALBERT model)"),HVe.forEach(t),dYr=i(De),G3=n(De,"LI",{});var UVe=s(G3);e0e=n(UVe,"STRONG",{});var xzt=s(e0e);cYr=r(xzt,"bart"),xzt.forEach(t),fYr=r(UVe," \u2014 "),Uoe=n(UVe,"A",{href:!0});var $zt=s(Uoe);mYr=r($zt,"FlaxBartForSequenceClassification"),$zt.forEach(t),gYr=r(UVe," (BART model)"),UVe.forEach(t),hYr=i(De),O3=n(De,"LI",{});var JVe=s(O3);o0e=n(JVe,"STRONG",{});var kzt=s(o0e);pYr=r(kzt,"bert"),kzt.forEach(t),_Yr=r(JVe," \u2014 "),Joe=n(JVe,"A",{href:!0});var Szt=s(Joe);uYr=r(Szt,"FlaxBertForSequenceClassification"),Szt.forEach(t),bYr=r(JVe," (BERT model)"),JVe.forEach(t),vYr=i(De),V3=n(De,"LI",{});var YVe=s(V3);r0e=n(YVe,"STRONG",{});var Rzt=s(r0e);FYr=r(Rzt,"big_bird"),Rzt.forEach(t),TYr=r(YVe," \u2014 "),Yoe=n(YVe,"A",{href:!0});var Pzt=s(Yoe);MYr=r(Pzt,"FlaxBigBirdForSequenceClassification"),Pzt.forEach(t),EYr=r(YVe," (BigBird model)"),YVe.forEach(t),CYr=i(De),X3=n(De,"LI",{});var KVe=s(X3);t0e=n(KVe,"STRONG",{});var Bzt=s(t0e);wYr=r(Bzt,"distilbert"),Bzt.forEach(t),AYr=r(KVe," \u2014 "),Koe=n(KVe,"A",{href:!0});var Izt=s(Koe);LYr=r(Izt,"FlaxDistilBertForSequenceClassification"),Izt.forEach(t),yYr=r(KVe," (DistilBERT model)"),KVe.forEach(t),xYr=i(De),z3=n(De,"LI",{});var ZVe=s(z3);a0e=n(ZVe,"STRONG",{});var Nzt=s(a0e);$Yr=r(Nzt,"electra"),Nzt.forEach(t),kYr=r(ZVe," \u2014 "),Zoe=n(ZVe,"A",{href:!0});var qzt=s(Zoe);SYr=r(qzt,"FlaxElectraForSequenceClassification"),qzt.forEach(t),RYr=r(ZVe," (ELECTRA model)"),ZVe.forEach(t),PYr=i(De),Q3=n(De,"LI",{});var eXe=s(Q3);n0e=n(eXe,"STRONG",{});var jzt=s(n0e);BYr=r(jzt,"mbart"),jzt.forEach(t),IYr=r(eXe," \u2014 "),ere=n(eXe,"A",{href:!0});var Dzt=s(ere);NYr=r(Dzt,"FlaxMBartForSequenceClassification"),Dzt.forEach(t),qYr=r(eXe," (mBART model)"),eXe.forEach(t),jYr=i(De),W3=n(De,"LI",{});var oXe=s(W3);s0e=n(oXe,"STRONG",{});var Gzt=s(s0e);DYr=r(Gzt,"roberta"),Gzt.forEach(t),GYr=r(oXe," \u2014 "),ore=n(oXe,"A",{href:!0});var Ozt=s(ore);OYr=r(Ozt,"FlaxRobertaForSequenceClassification"),Ozt.forEach(t),VYr=r(oXe," (RoBERTa model)"),oXe.forEach(t),XYr=i(De),H3=n(De,"LI",{});var rXe=s(H3);l0e=n(rXe,"STRONG",{});var Vzt=s(l0e);zYr=r(Vzt,"roformer"),Vzt.forEach(t),QYr=r(rXe," \u2014 "),rre=n(rXe,"A",{href:!0});var Xzt=s(rre);WYr=r(Xzt,"FlaxRoFormerForSequenceClassification"),Xzt.forEach(t),HYr=r(rXe," (RoFormer model)"),rXe.forEach(t),UYr=i(De),U3=n(De,"LI",{});var tXe=s(U3);i0e=n(tXe,"STRONG",{});var zzt=s(i0e);JYr=r(zzt,"xlm-roberta"),zzt.forEach(t),YYr=r(tXe," \u2014 "),tre=n(tXe,"A",{href:!0});var Qzt=s(tre);KYr=r(Qzt,"FlaxXLMRobertaForSequenceClassification"),Qzt.forEach(t),ZYr=r(tXe," (XLM-RoBERTa model)"),tXe.forEach(t),De.forEach(t),eKr=i(_i),T(J3.$$.fragment,_i),_i.forEach(t),pi.forEach(t),LQe=i(f),hf=n(f,"H2",{class:!0});var IHe=s(hf);Y3=n(IHe,"A",{id:!0,class:!0,href:!0});var Wzt=s(Y3);d0e=n(Wzt,"SPAN",{});var Hzt=s(d0e);T(W$.$$.fragment,Hzt),Hzt.forEach(t),Wzt.forEach(t),oKr=i(IHe),c0e=n(IHe,"SPAN",{});var Uzt=s(c0e);rKr=r(Uzt,"FlaxAutoModelForQuestionAnswering"),Uzt.forEach(t),IHe.forEach(t),yQe=i(f),Tr=n(f,"DIV",{class:!0});var ui=s(Tr);T(H$.$$.fragment,ui),tKr=i(ui),pf=n(ui,"P",{});var Rae=s(pf);aKr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),are=n(Rae,"A",{href:!0});var Jzt=s(are);nKr=r(Jzt,"from_pretrained()"),Jzt.forEach(t),sKr=r(Rae," class method or the "),nre=n(Rae,"A",{href:!0});var Yzt=s(nre);lKr=r(Yzt,"from_config()"),Yzt.forEach(t),iKr=r(Rae,` class
method.`),Rae.forEach(t),dKr=i(ui),U$=n(ui,"P",{});var NHe=s(U$);cKr=r(NHe,"This class cannot be instantiated directly using "),f0e=n(NHe,"CODE",{});var Kzt=s(f0e);fKr=r(Kzt,"__init__()"),Kzt.forEach(t),mKr=r(NHe," (throws an error)."),NHe.forEach(t),gKr=i(ui),Zt=n(ui,"DIV",{class:!0});var KA=s(Zt);T(J$.$$.fragment,KA),hKr=i(KA),m0e=n(KA,"P",{});var Zzt=s(m0e);pKr=r(Zzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zzt.forEach(t),_Kr=i(KA),_f=n(KA,"P",{});var Pae=s(_f);uKr=r(Pae,`Note:
Loading a model from its configuration file does `),g0e=n(Pae,"STRONG",{});var eQt=s(g0e);bKr=r(eQt,"not"),eQt.forEach(t),vKr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(Pae,"A",{href:!0});var oQt=s(sre);FKr=r(oQt,"from_pretrained()"),oQt.forEach(t),TKr=r(Pae," to load the model weights."),Pae.forEach(t),MKr=i(KA),T(K3.$$.fragment,KA),KA.forEach(t),EKr=i(ui),Ur=n(ui,"DIV",{class:!0});var bi=s(Ur);T(Y$.$$.fragment,bi),CKr=i(bi),h0e=n(bi,"P",{});var rQt=s(h0e);wKr=r(rQt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rQt.forEach(t),AKr=i(bi),yn=n(bi,"P",{});var ZA=s(yn);LKr=r(ZA,"The model class to instantiate is selected based on the "),p0e=n(ZA,"CODE",{});var tQt=s(p0e);yKr=r(tQt,"model_type"),tQt.forEach(t),xKr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),_0e=n(ZA,"CODE",{});var aQt=s(_0e);$Kr=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),kKr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(ZA,"CODE",{});var nQt=s(u0e);SKr=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),RKr=r(ZA,":"),ZA.forEach(t),PKr=i(bi),Re=n(bi,"UL",{});var Ge=s(Re);Z3=n(Ge,"LI",{});var aXe=s(Z3);b0e=n(aXe,"STRONG",{});var sQt=s(b0e);BKr=r(sQt,"albert"),sQt.forEach(t),IKr=r(aXe," \u2014 "),lre=n(aXe,"A",{href:!0});var lQt=s(lre);NKr=r(lQt,"FlaxAlbertForQuestionAnswering"),lQt.forEach(t),qKr=r(aXe," (ALBERT model)"),aXe.forEach(t),jKr=i(Ge),e0=n(Ge,"LI",{});var nXe=s(e0);v0e=n(nXe,"STRONG",{});var iQt=s(v0e);DKr=r(iQt,"bart"),iQt.forEach(t),GKr=r(nXe," \u2014 "),ire=n(nXe,"A",{href:!0});var dQt=s(ire);OKr=r(dQt,"FlaxBartForQuestionAnswering"),dQt.forEach(t),VKr=r(nXe," (BART model)"),nXe.forEach(t),XKr=i(Ge),o0=n(Ge,"LI",{});var sXe=s(o0);F0e=n(sXe,"STRONG",{});var cQt=s(F0e);zKr=r(cQt,"bert"),cQt.forEach(t),QKr=r(sXe," \u2014 "),dre=n(sXe,"A",{href:!0});var fQt=s(dre);WKr=r(fQt,"FlaxBertForQuestionAnswering"),fQt.forEach(t),HKr=r(sXe," (BERT model)"),sXe.forEach(t),UKr=i(Ge),r0=n(Ge,"LI",{});var lXe=s(r0);T0e=n(lXe,"STRONG",{});var mQt=s(T0e);JKr=r(mQt,"big_bird"),mQt.forEach(t),YKr=r(lXe," \u2014 "),cre=n(lXe,"A",{href:!0});var gQt=s(cre);KKr=r(gQt,"FlaxBigBirdForQuestionAnswering"),gQt.forEach(t),ZKr=r(lXe," (BigBird model)"),lXe.forEach(t),eZr=i(Ge),t0=n(Ge,"LI",{});var iXe=s(t0);M0e=n(iXe,"STRONG",{});var hQt=s(M0e);oZr=r(hQt,"distilbert"),hQt.forEach(t),rZr=r(iXe," \u2014 "),fre=n(iXe,"A",{href:!0});var pQt=s(fre);tZr=r(pQt,"FlaxDistilBertForQuestionAnswering"),pQt.forEach(t),aZr=r(iXe," (DistilBERT model)"),iXe.forEach(t),nZr=i(Ge),a0=n(Ge,"LI",{});var dXe=s(a0);E0e=n(dXe,"STRONG",{});var _Qt=s(E0e);sZr=r(_Qt,"electra"),_Qt.forEach(t),lZr=r(dXe," \u2014 "),mre=n(dXe,"A",{href:!0});var uQt=s(mre);iZr=r(uQt,"FlaxElectraForQuestionAnswering"),uQt.forEach(t),dZr=r(dXe," (ELECTRA model)"),dXe.forEach(t),cZr=i(Ge),n0=n(Ge,"LI",{});var cXe=s(n0);C0e=n(cXe,"STRONG",{});var bQt=s(C0e);fZr=r(bQt,"mbart"),bQt.forEach(t),mZr=r(cXe," \u2014 "),gre=n(cXe,"A",{href:!0});var vQt=s(gre);gZr=r(vQt,"FlaxMBartForQuestionAnswering"),vQt.forEach(t),hZr=r(cXe," (mBART model)"),cXe.forEach(t),pZr=i(Ge),s0=n(Ge,"LI",{});var fXe=s(s0);w0e=n(fXe,"STRONG",{});var FQt=s(w0e);_Zr=r(FQt,"roberta"),FQt.forEach(t),uZr=r(fXe," \u2014 "),hre=n(fXe,"A",{href:!0});var TQt=s(hre);bZr=r(TQt,"FlaxRobertaForQuestionAnswering"),TQt.forEach(t),vZr=r(fXe," (RoBERTa model)"),fXe.forEach(t),FZr=i(Ge),l0=n(Ge,"LI",{});var mXe=s(l0);A0e=n(mXe,"STRONG",{});var MQt=s(A0e);TZr=r(MQt,"roformer"),MQt.forEach(t),MZr=r(mXe," \u2014 "),pre=n(mXe,"A",{href:!0});var EQt=s(pre);EZr=r(EQt,"FlaxRoFormerForQuestionAnswering"),EQt.forEach(t),CZr=r(mXe," (RoFormer model)"),mXe.forEach(t),wZr=i(Ge),i0=n(Ge,"LI",{});var gXe=s(i0);L0e=n(gXe,"STRONG",{});var CQt=s(L0e);AZr=r(CQt,"xlm-roberta"),CQt.forEach(t),LZr=r(gXe," \u2014 "),_re=n(gXe,"A",{href:!0});var wQt=s(_re);yZr=r(wQt,"FlaxXLMRobertaForQuestionAnswering"),wQt.forEach(t),xZr=r(gXe," (XLM-RoBERTa model)"),gXe.forEach(t),Ge.forEach(t),$Zr=i(bi),T(d0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),xQe=i(f),uf=n(f,"H2",{class:!0});var qHe=s(uf);c0=n(qHe,"A",{id:!0,class:!0,href:!0});var AQt=s(c0);y0e=n(AQt,"SPAN",{});var LQt=s(y0e);T(K$.$$.fragment,LQt),LQt.forEach(t),AQt.forEach(t),kZr=i(qHe),x0e=n(qHe,"SPAN",{});var yQt=s(x0e);SZr=r(yQt,"FlaxAutoModelForTokenClassification"),yQt.forEach(t),qHe.forEach(t),$Qe=i(f),Mr=n(f,"DIV",{class:!0});var vi=s(Mr);T(Z$.$$.fragment,vi),RZr=i(vi),bf=n(vi,"P",{});var Bae=s(bf);PZr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ure=n(Bae,"A",{href:!0});var xQt=s(ure);BZr=r(xQt,"from_pretrained()"),xQt.forEach(t),IZr=r(Bae," class method or the "),bre=n(Bae,"A",{href:!0});var $Qt=s(bre);NZr=r($Qt,"from_config()"),$Qt.forEach(t),qZr=r(Bae,` class
method.`),Bae.forEach(t),jZr=i(vi),ek=n(vi,"P",{});var jHe=s(ek);DZr=r(jHe,"This class cannot be instantiated directly using "),$0e=n(jHe,"CODE",{});var kQt=s($0e);GZr=r(kQt,"__init__()"),kQt.forEach(t),OZr=r(jHe," (throws an error)."),jHe.forEach(t),VZr=i(vi),ea=n(vi,"DIV",{class:!0});var eL=s(ea);T(ok.$$.fragment,eL),XZr=i(eL),k0e=n(eL,"P",{});var SQt=s(k0e);zZr=r(SQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SQt.forEach(t),QZr=i(eL),vf=n(eL,"P",{});var Iae=s(vf);WZr=r(Iae,`Note:
Loading a model from its configuration file does `),S0e=n(Iae,"STRONG",{});var RQt=s(S0e);HZr=r(RQt,"not"),RQt.forEach(t),UZr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(Iae,"A",{href:!0});var PQt=s(vre);JZr=r(PQt,"from_pretrained()"),PQt.forEach(t),YZr=r(Iae," to load the model weights."),Iae.forEach(t),KZr=i(eL),T(f0.$$.fragment,eL),eL.forEach(t),ZZr=i(vi),Jr=n(vi,"DIV",{class:!0});var Fi=s(Jr);T(rk.$$.fragment,Fi),eet=i(Fi),R0e=n(Fi,"P",{});var BQt=s(R0e);oet=r(BQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BQt.forEach(t),ret=i(Fi),xn=n(Fi,"P",{});var oL=s(xn);tet=r(oL,"The model class to instantiate is selected based on the "),P0e=n(oL,"CODE",{});var IQt=s(P0e);aet=r(IQt,"model_type"),IQt.forEach(t),net=r(oL,` property of the config object (either
passed as an argument or loaded from `),B0e=n(oL,"CODE",{});var NQt=s(B0e);set=r(NQt,"pretrained_model_name_or_path"),NQt.forEach(t),iet=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(oL,"CODE",{});var qQt=s(I0e);det=r(qQt,"pretrained_model_name_or_path"),qQt.forEach(t),cet=r(oL,":"),oL.forEach(t),fet=i(Fi),Ve=n(Fi,"UL",{});var Mo=s(Ve);m0=n(Mo,"LI",{});var hXe=s(m0);N0e=n(hXe,"STRONG",{});var jQt=s(N0e);met=r(jQt,"albert"),jQt.forEach(t),get=r(hXe," \u2014 "),Fre=n(hXe,"A",{href:!0});var DQt=s(Fre);het=r(DQt,"FlaxAlbertForTokenClassification"),DQt.forEach(t),pet=r(hXe," (ALBERT model)"),hXe.forEach(t),_et=i(Mo),g0=n(Mo,"LI",{});var pXe=s(g0);q0e=n(pXe,"STRONG",{});var GQt=s(q0e);uet=r(GQt,"bert"),GQt.forEach(t),bet=r(pXe," \u2014 "),Tre=n(pXe,"A",{href:!0});var OQt=s(Tre);vet=r(OQt,"FlaxBertForTokenClassification"),OQt.forEach(t),Fet=r(pXe," (BERT model)"),pXe.forEach(t),Tet=i(Mo),h0=n(Mo,"LI",{});var _Xe=s(h0);j0e=n(_Xe,"STRONG",{});var VQt=s(j0e);Met=r(VQt,"big_bird"),VQt.forEach(t),Eet=r(_Xe," \u2014 "),Mre=n(_Xe,"A",{href:!0});var XQt=s(Mre);Cet=r(XQt,"FlaxBigBirdForTokenClassification"),XQt.forEach(t),wet=r(_Xe," (BigBird model)"),_Xe.forEach(t),Aet=i(Mo),p0=n(Mo,"LI",{});var uXe=s(p0);D0e=n(uXe,"STRONG",{});var zQt=s(D0e);Let=r(zQt,"distilbert"),zQt.forEach(t),yet=r(uXe," \u2014 "),Ere=n(uXe,"A",{href:!0});var QQt=s(Ere);xet=r(QQt,"FlaxDistilBertForTokenClassification"),QQt.forEach(t),$et=r(uXe," (DistilBERT model)"),uXe.forEach(t),ket=i(Mo),_0=n(Mo,"LI",{});var bXe=s(_0);G0e=n(bXe,"STRONG",{});var WQt=s(G0e);Set=r(WQt,"electra"),WQt.forEach(t),Ret=r(bXe," \u2014 "),Cre=n(bXe,"A",{href:!0});var HQt=s(Cre);Pet=r(HQt,"FlaxElectraForTokenClassification"),HQt.forEach(t),Bet=r(bXe," (ELECTRA model)"),bXe.forEach(t),Iet=i(Mo),u0=n(Mo,"LI",{});var vXe=s(u0);O0e=n(vXe,"STRONG",{});var UQt=s(O0e);Net=r(UQt,"roberta"),UQt.forEach(t),qet=r(vXe," \u2014 "),wre=n(vXe,"A",{href:!0});var JQt=s(wre);jet=r(JQt,"FlaxRobertaForTokenClassification"),JQt.forEach(t),Det=r(vXe," (RoBERTa model)"),vXe.forEach(t),Get=i(Mo),b0=n(Mo,"LI",{});var FXe=s(b0);V0e=n(FXe,"STRONG",{});var YQt=s(V0e);Oet=r(YQt,"roformer"),YQt.forEach(t),Vet=r(FXe," \u2014 "),Are=n(FXe,"A",{href:!0});var KQt=s(Are);Xet=r(KQt,"FlaxRoFormerForTokenClassification"),KQt.forEach(t),zet=r(FXe," (RoFormer model)"),FXe.forEach(t),Qet=i(Mo),v0=n(Mo,"LI",{});var TXe=s(v0);X0e=n(TXe,"STRONG",{});var ZQt=s(X0e);Wet=r(ZQt,"xlm-roberta"),ZQt.forEach(t),Het=r(TXe," \u2014 "),Lre=n(TXe,"A",{href:!0});var eWt=s(Lre);Uet=r(eWt,"FlaxXLMRobertaForTokenClassification"),eWt.forEach(t),Jet=r(TXe," (XLM-RoBERTa model)"),TXe.forEach(t),Mo.forEach(t),Yet=i(Fi),T(F0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),kQe=i(f),Ff=n(f,"H2",{class:!0});var DHe=s(Ff);T0=n(DHe,"A",{id:!0,class:!0,href:!0});var oWt=s(T0);z0e=n(oWt,"SPAN",{});var rWt=s(z0e);T(tk.$$.fragment,rWt),rWt.forEach(t),oWt.forEach(t),Ket=i(DHe),Q0e=n(DHe,"SPAN",{});var tWt=s(Q0e);Zet=r(tWt,"FlaxAutoModelForMultipleChoice"),tWt.forEach(t),DHe.forEach(t),SQe=i(f),Er=n(f,"DIV",{class:!0});var Ti=s(Er);T(ak.$$.fragment,Ti),eot=i(Ti),Tf=n(Ti,"P",{});var Nae=s(Tf);oot=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yre=n(Nae,"A",{href:!0});var aWt=s(yre);rot=r(aWt,"from_pretrained()"),aWt.forEach(t),tot=r(Nae," class method or the "),xre=n(Nae,"A",{href:!0});var nWt=s(xre);aot=r(nWt,"from_config()"),nWt.forEach(t),not=r(Nae,` class
method.`),Nae.forEach(t),sot=i(Ti),nk=n(Ti,"P",{});var GHe=s(nk);lot=r(GHe,"This class cannot be instantiated directly using "),W0e=n(GHe,"CODE",{});var sWt=s(W0e);iot=r(sWt,"__init__()"),sWt.forEach(t),dot=r(GHe," (throws an error)."),GHe.forEach(t),cot=i(Ti),oa=n(Ti,"DIV",{class:!0});var rL=s(oa);T(sk.$$.fragment,rL),fot=i(rL),H0e=n(rL,"P",{});var lWt=s(H0e);mot=r(lWt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lWt.forEach(t),got=i(rL),Mf=n(rL,"P",{});var qae=s(Mf);hot=r(qae,`Note:
Loading a model from its configuration file does `),U0e=n(qae,"STRONG",{});var iWt=s(U0e);pot=r(iWt,"not"),iWt.forEach(t),_ot=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=n(qae,"A",{href:!0});var dWt=s($re);uot=r(dWt,"from_pretrained()"),dWt.forEach(t),bot=r(qae," to load the model weights."),qae.forEach(t),vot=i(rL),T(M0.$$.fragment,rL),rL.forEach(t),Fot=i(Ti),Yr=n(Ti,"DIV",{class:!0});var Mi=s(Yr);T(lk.$$.fragment,Mi),Tot=i(Mi),J0e=n(Mi,"P",{});var cWt=s(J0e);Mot=r(cWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cWt.forEach(t),Eot=i(Mi),$n=n(Mi,"P",{});var tL=s($n);Cot=r(tL,"The model class to instantiate is selected based on the "),Y0e=n(tL,"CODE",{});var fWt=s(Y0e);wot=r(fWt,"model_type"),fWt.forEach(t),Aot=r(tL,` property of the config object (either
passed as an argument or loaded from `),K0e=n(tL,"CODE",{});var mWt=s(K0e);Lot=r(mWt,"pretrained_model_name_or_path"),mWt.forEach(t),yot=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(tL,"CODE",{});var gWt=s(Z0e);xot=r(gWt,"pretrained_model_name_or_path"),gWt.forEach(t),$ot=r(tL,":"),tL.forEach(t),kot=i(Mi),Xe=n(Mi,"UL",{});var Eo=s(Xe);E0=n(Eo,"LI",{});var MXe=s(E0);ewe=n(MXe,"STRONG",{});var hWt=s(ewe);Sot=r(hWt,"albert"),hWt.forEach(t),Rot=r(MXe," \u2014 "),kre=n(MXe,"A",{href:!0});var pWt=s(kre);Pot=r(pWt,"FlaxAlbertForMultipleChoice"),pWt.forEach(t),Bot=r(MXe," (ALBERT model)"),MXe.forEach(t),Iot=i(Eo),C0=n(Eo,"LI",{});var EXe=s(C0);owe=n(EXe,"STRONG",{});var _Wt=s(owe);Not=r(_Wt,"bert"),_Wt.forEach(t),qot=r(EXe," \u2014 "),Sre=n(EXe,"A",{href:!0});var uWt=s(Sre);jot=r(uWt,"FlaxBertForMultipleChoice"),uWt.forEach(t),Dot=r(EXe," (BERT model)"),EXe.forEach(t),Got=i(Eo),w0=n(Eo,"LI",{});var CXe=s(w0);rwe=n(CXe,"STRONG",{});var bWt=s(rwe);Oot=r(bWt,"big_bird"),bWt.forEach(t),Vot=r(CXe," \u2014 "),Rre=n(CXe,"A",{href:!0});var vWt=s(Rre);Xot=r(vWt,"FlaxBigBirdForMultipleChoice"),vWt.forEach(t),zot=r(CXe," (BigBird model)"),CXe.forEach(t),Qot=i(Eo),A0=n(Eo,"LI",{});var wXe=s(A0);twe=n(wXe,"STRONG",{});var FWt=s(twe);Wot=r(FWt,"distilbert"),FWt.forEach(t),Hot=r(wXe," \u2014 "),Pre=n(wXe,"A",{href:!0});var TWt=s(Pre);Uot=r(TWt,"FlaxDistilBertForMultipleChoice"),TWt.forEach(t),Jot=r(wXe," (DistilBERT model)"),wXe.forEach(t),Yot=i(Eo),L0=n(Eo,"LI",{});var AXe=s(L0);awe=n(AXe,"STRONG",{});var MWt=s(awe);Kot=r(MWt,"electra"),MWt.forEach(t),Zot=r(AXe," \u2014 "),Bre=n(AXe,"A",{href:!0});var EWt=s(Bre);ert=r(EWt,"FlaxElectraForMultipleChoice"),EWt.forEach(t),ort=r(AXe," (ELECTRA model)"),AXe.forEach(t),rrt=i(Eo),y0=n(Eo,"LI",{});var LXe=s(y0);nwe=n(LXe,"STRONG",{});var CWt=s(nwe);trt=r(CWt,"roberta"),CWt.forEach(t),art=r(LXe," \u2014 "),Ire=n(LXe,"A",{href:!0});var wWt=s(Ire);nrt=r(wWt,"FlaxRobertaForMultipleChoice"),wWt.forEach(t),srt=r(LXe," (RoBERTa model)"),LXe.forEach(t),lrt=i(Eo),x0=n(Eo,"LI",{});var yXe=s(x0);swe=n(yXe,"STRONG",{});var AWt=s(swe);irt=r(AWt,"roformer"),AWt.forEach(t),drt=r(yXe," \u2014 "),Nre=n(yXe,"A",{href:!0});var LWt=s(Nre);crt=r(LWt,"FlaxRoFormerForMultipleChoice"),LWt.forEach(t),frt=r(yXe," (RoFormer model)"),yXe.forEach(t),mrt=i(Eo),$0=n(Eo,"LI",{});var xXe=s($0);lwe=n(xXe,"STRONG",{});var yWt=s(lwe);grt=r(yWt,"xlm-roberta"),yWt.forEach(t),hrt=r(xXe," \u2014 "),qre=n(xXe,"A",{href:!0});var xWt=s(qre);prt=r(xWt,"FlaxXLMRobertaForMultipleChoice"),xWt.forEach(t),_rt=r(xXe," (XLM-RoBERTa model)"),xXe.forEach(t),Eo.forEach(t),urt=i(Mi),T(k0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),RQe=i(f),Ef=n(f,"H2",{class:!0});var OHe=s(Ef);S0=n(OHe,"A",{id:!0,class:!0,href:!0});var $Wt=s(S0);iwe=n($Wt,"SPAN",{});var kWt=s(iwe);T(ik.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),brt=i(OHe),dwe=n(OHe,"SPAN",{});var SWt=s(dwe);vrt=r(SWt,"FlaxAutoModelForNextSentencePrediction"),SWt.forEach(t),OHe.forEach(t),PQe=i(f),Cr=n(f,"DIV",{class:!0});var Ei=s(Cr);T(dk.$$.fragment,Ei),Frt=i(Ei),Cf=n(Ei,"P",{});var jae=s(Cf);Trt=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jre=n(jae,"A",{href:!0});var RWt=s(jre);Mrt=r(RWt,"from_pretrained()"),RWt.forEach(t),Ert=r(jae," class method or the "),Dre=n(jae,"A",{href:!0});var PWt=s(Dre);Crt=r(PWt,"from_config()"),PWt.forEach(t),wrt=r(jae,` class
method.`),jae.forEach(t),Art=i(Ei),ck=n(Ei,"P",{});var VHe=s(ck);Lrt=r(VHe,"This class cannot be instantiated directly using "),cwe=n(VHe,"CODE",{});var BWt=s(cwe);yrt=r(BWt,"__init__()"),BWt.forEach(t),xrt=r(VHe," (throws an error)."),VHe.forEach(t),$rt=i(Ei),ra=n(Ei,"DIV",{class:!0});var aL=s(ra);T(fk.$$.fragment,aL),krt=i(aL),fwe=n(aL,"P",{});var IWt=s(fwe);Srt=r(IWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IWt.forEach(t),Rrt=i(aL),wf=n(aL,"P",{});var Dae=s(wf);Prt=r(Dae,`Note:
Loading a model from its configuration file does `),mwe=n(Dae,"STRONG",{});var NWt=s(mwe);Brt=r(NWt,"not"),NWt.forEach(t),Irt=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gre=n(Dae,"A",{href:!0});var qWt=s(Gre);Nrt=r(qWt,"from_pretrained()"),qWt.forEach(t),qrt=r(Dae," to load the model weights."),Dae.forEach(t),jrt=i(aL),T(R0.$$.fragment,aL),aL.forEach(t),Drt=i(Ei),Kr=n(Ei,"DIV",{class:!0});var Ci=s(Kr);T(mk.$$.fragment,Ci),Grt=i(Ci),gwe=n(Ci,"P",{});var jWt=s(gwe);Ort=r(jWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jWt.forEach(t),Vrt=i(Ci),kn=n(Ci,"P",{});var nL=s(kn);Xrt=r(nL,"The model class to instantiate is selected based on the "),hwe=n(nL,"CODE",{});var DWt=s(hwe);zrt=r(DWt,"model_type"),DWt.forEach(t),Qrt=r(nL,` property of the config object (either
passed as an argument or loaded from `),pwe=n(nL,"CODE",{});var GWt=s(pwe);Wrt=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),Hrt=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=n(nL,"CODE",{});var OWt=s(_we);Urt=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),Jrt=r(nL,":"),nL.forEach(t),Yrt=i(Ci),uwe=n(Ci,"UL",{});var VWt=s(uwe);P0=n(VWt,"LI",{});var $Xe=s(P0);bwe=n($Xe,"STRONG",{});var XWt=s(bwe);Krt=r(XWt,"bert"),XWt.forEach(t),Zrt=r($Xe," \u2014 "),Ore=n($Xe,"A",{href:!0});var zWt=s(Ore);ett=r(zWt,"FlaxBertForNextSentencePrediction"),zWt.forEach(t),ott=r($Xe," (BERT model)"),$Xe.forEach(t),VWt.forEach(t),rtt=i(Ci),T(B0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),BQe=i(f),Af=n(f,"H2",{class:!0});var XHe=s(Af);I0=n(XHe,"A",{id:!0,class:!0,href:!0});var QWt=s(I0);vwe=n(QWt,"SPAN",{});var WWt=s(vwe);T(gk.$$.fragment,WWt),WWt.forEach(t),QWt.forEach(t),ttt=i(XHe),Fwe=n(XHe,"SPAN",{});var HWt=s(Fwe);att=r(HWt,"FlaxAutoModelForImageClassification"),HWt.forEach(t),XHe.forEach(t),IQe=i(f),wr=n(f,"DIV",{class:!0});var wi=s(wr);T(hk.$$.fragment,wi),ntt=i(wi),Lf=n(wi,"P",{});var Gae=s(Lf);stt=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vre=n(Gae,"A",{href:!0});var UWt=s(Vre);ltt=r(UWt,"from_pretrained()"),UWt.forEach(t),itt=r(Gae," class method or the "),Xre=n(Gae,"A",{href:!0});var JWt=s(Xre);dtt=r(JWt,"from_config()"),JWt.forEach(t),ctt=r(Gae,` class
method.`),Gae.forEach(t),ftt=i(wi),pk=n(wi,"P",{});var zHe=s(pk);mtt=r(zHe,"This class cannot be instantiated directly using "),Twe=n(zHe,"CODE",{});var YWt=s(Twe);gtt=r(YWt,"__init__()"),YWt.forEach(t),htt=r(zHe," (throws an error)."),zHe.forEach(t),ptt=i(wi),ta=n(wi,"DIV",{class:!0});var sL=s(ta);T(_k.$$.fragment,sL),_tt=i(sL),Mwe=n(sL,"P",{});var KWt=s(Mwe);utt=r(KWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KWt.forEach(t),btt=i(sL),yf=n(sL,"P",{});var Oae=s(yf);vtt=r(Oae,`Note:
Loading a model from its configuration file does `),Ewe=n(Oae,"STRONG",{});var ZWt=s(Ewe);Ftt=r(ZWt,"not"),ZWt.forEach(t),Ttt=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=n(Oae,"A",{href:!0});var eHt=s(zre);Mtt=r(eHt,"from_pretrained()"),eHt.forEach(t),Ett=r(Oae," to load the model weights."),Oae.forEach(t),Ctt=i(sL),T(N0.$$.fragment,sL),sL.forEach(t),wtt=i(wi),Zr=n(wi,"DIV",{class:!0});var Ai=s(Zr);T(uk.$$.fragment,Ai),Att=i(Ai),Cwe=n(Ai,"P",{});var oHt=s(Cwe);Ltt=r(oHt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oHt.forEach(t),ytt=i(Ai),Sn=n(Ai,"P",{});var lL=s(Sn);xtt=r(lL,"The model class to instantiate is selected based on the "),wwe=n(lL,"CODE",{});var rHt=s(wwe);$tt=r(rHt,"model_type"),rHt.forEach(t),ktt=r(lL,` property of the config object (either
passed as an argument or loaded from `),Awe=n(lL,"CODE",{});var tHt=s(Awe);Stt=r(tHt,"pretrained_model_name_or_path"),tHt.forEach(t),Rtt=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lwe=n(lL,"CODE",{});var aHt=s(Lwe);Ptt=r(aHt,"pretrained_model_name_or_path"),aHt.forEach(t),Btt=r(lL,":"),lL.forEach(t),Itt=i(Ai),bk=n(Ai,"UL",{});var QHe=s(bk);q0=n(QHe,"LI",{});var kXe=s(q0);ywe=n(kXe,"STRONG",{});var nHt=s(ywe);Ntt=r(nHt,"beit"),nHt.forEach(t),qtt=r(kXe," \u2014 "),Qre=n(kXe,"A",{href:!0});var sHt=s(Qre);jtt=r(sHt,"FlaxBeitForImageClassification"),sHt.forEach(t),Dtt=r(kXe," (BEiT model)"),kXe.forEach(t),Gtt=i(QHe),j0=n(QHe,"LI",{});var SXe=s(j0);xwe=n(SXe,"STRONG",{});var lHt=s(xwe);Ott=r(lHt,"vit"),lHt.forEach(t),Vtt=r(SXe," \u2014 "),Wre=n(SXe,"A",{href:!0});var iHt=s(Wre);Xtt=r(iHt,"FlaxViTForImageClassification"),iHt.forEach(t),ztt=r(SXe," (ViT model)"),SXe.forEach(t),QHe.forEach(t),Qtt=i(Ai),T(D0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),NQe=i(f),xf=n(f,"H2",{class:!0});var WHe=s(xf);G0=n(WHe,"A",{id:!0,class:!0,href:!0});var dHt=s(G0);$we=n(dHt,"SPAN",{});var cHt=s($we);T(vk.$$.fragment,cHt),cHt.forEach(t),dHt.forEach(t),Wtt=i(WHe),kwe=n(WHe,"SPAN",{});var fHt=s(kwe);Htt=r(fHt,"FlaxAutoModelForVision2Seq"),fHt.forEach(t),WHe.forEach(t),qQe=i(f),Ar=n(f,"DIV",{class:!0});var Li=s(Ar);T(Fk.$$.fragment,Li),Utt=i(Li),$f=n(Li,"P",{});var Vae=s($f);Jtt=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hre=n(Vae,"A",{href:!0});var mHt=s(Hre);Ytt=r(mHt,"from_pretrained()"),mHt.forEach(t),Ktt=r(Vae," class method or the "),Ure=n(Vae,"A",{href:!0});var gHt=s(Ure);Ztt=r(gHt,"from_config()"),gHt.forEach(t),eat=r(Vae,` class
method.`),Vae.forEach(t),oat=i(Li),Tk=n(Li,"P",{});var HHe=s(Tk);rat=r(HHe,"This class cannot be instantiated directly using "),Swe=n(HHe,"CODE",{});var hHt=s(Swe);tat=r(hHt,"__init__()"),hHt.forEach(t),aat=r(HHe," (throws an error)."),HHe.forEach(t),nat=i(Li),aa=n(Li,"DIV",{class:!0});var iL=s(aa);T(Mk.$$.fragment,iL),sat=i(iL),Rwe=n(iL,"P",{});var pHt=s(Rwe);lat=r(pHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pHt.forEach(t),iat=i(iL),kf=n(iL,"P",{});var Xae=s(kf);dat=r(Xae,`Note:
Loading a model from its configuration file does `),Pwe=n(Xae,"STRONG",{});var _Ht=s(Pwe);cat=r(_Ht,"not"),_Ht.forEach(t),fat=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Xae,"A",{href:!0});var uHt=s(Jre);mat=r(uHt,"from_pretrained()"),uHt.forEach(t),gat=r(Xae," to load the model weights."),Xae.forEach(t),hat=i(iL),T(O0.$$.fragment,iL),iL.forEach(t),pat=i(Li),et=n(Li,"DIV",{class:!0});var yi=s(et);T(Ek.$$.fragment,yi),_at=i(yi),Bwe=n(yi,"P",{});var bHt=s(Bwe);uat=r(bHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bHt.forEach(t),bat=i(yi),Rn=n(yi,"P",{});var dL=s(Rn);vat=r(dL,"The model class to instantiate is selected based on the "),Iwe=n(dL,"CODE",{});var vHt=s(Iwe);Fat=r(vHt,"model_type"),vHt.forEach(t),Tat=r(dL,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(dL,"CODE",{});var FHt=s(Nwe);Mat=r(FHt,"pretrained_model_name_or_path"),FHt.forEach(t),Eat=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=n(dL,"CODE",{});var THt=s(qwe);Cat=r(THt,"pretrained_model_name_or_path"),THt.forEach(t),wat=r(dL,":"),dL.forEach(t),Aat=i(yi),jwe=n(yi,"UL",{});var MHt=s(jwe);V0=n(MHt,"LI",{});var RXe=s(V0);Dwe=n(RXe,"STRONG",{});var EHt=s(Dwe);Lat=r(EHt,"vision-encoder-decoder"),EHt.forEach(t),yat=r(RXe," \u2014 "),Yre=n(RXe,"A",{href:!0});var CHt=s(Yre);xat=r(CHt,"FlaxVisionEncoderDecoderModel"),CHt.forEach(t),$at=r(RXe," (Vision Encoder decoder model)"),RXe.forEach(t),MHt.forEach(t),kat=i(yi),T(X0.$$.fragment,yi),yi.forEach(t),Li.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify($Jt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Bn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoModel"),c(qn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer"),c(Bi,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(jf,"id","extending-the-auto-classes"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#extending-the-auto-classes"),c(Ii,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(Ni,"class","relative group"),c(KS,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ZS,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig"),c(eR,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig"),c(oR,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig"),c(rR,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig"),c(tR,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(aR,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig"),c(nR,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(sR,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(lR,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(iR,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig"),c(dR,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig"),c(cR,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig"),c(fR,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig"),c(mR,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig"),c(gR,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig"),c(hR,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig"),c(pR,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig"),c(_R,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig"),c(uR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(bR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(vR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(FR,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig"),c(TR,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(MR,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ER,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig"),c(CR,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig"),c(wR,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig"),c(AR,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig"),c(LR,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig"),c(yR,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig"),c(xR,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c($R,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig"),c(kR,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig"),c(SR,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig"),c(RR,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig"),c(PR,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig"),c(BR,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig"),c(IR,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config"),c(NR,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(qR,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(jR,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig"),c(DR,"href","/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTConfig"),c(GR,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig"),c(OR,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig"),c(VR,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(XR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(zR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(QR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(WR,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig"),c(HR,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig"),c(UR,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig"),c(JR,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config"),c(YR,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig"),c(KR,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig"),c(ZR,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config"),c(eP,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig"),c(oP,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(rP,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig"),c(tP,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig"),c(aP,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(nP,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(sP,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(lP,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig"),c(iP,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config"),c(dP,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig"),c(cP,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig"),c(fP,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mP,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gP,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig"),c(hP,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig"),c(pP,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_P,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig"),c(uP,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(bP,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(vP,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(FP,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagConfig"),c(TP,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmConfig"),c(MP,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig"),c(EP,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig"),c(CP,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig"),c(wP,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig"),c(AP,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig"),c(LP,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig"),c(yP,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig"),c(xP,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig"),c($P,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig"),c(kP,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig"),c(SP,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(RP,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(PP,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(BP,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig"),c(IP,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(NP,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig"),c(qP,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config"),c(jP,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config"),c(DP,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig"),c(GP,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(OP,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(VP,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig"),c(XP,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(zP,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(QP,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig"),c(WP,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig"),c(HP,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(UP,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(JP,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(YP,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig"),c(KP,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(ZP,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(eB,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(oB,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig"),c(rB,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig"),c(tB,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig"),c(aB,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(nB,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(sB,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(lB,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig"),c(iB,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig"),c(dB,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoTokenizer"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoTokenizer"),c(ji,"class","relative group"),c(cB,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(fB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(mB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizer"),c(hB,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizerFast"),c(pB,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizer"),c(_B,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(uB,"href","/docs/transformers/pr_17469/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(bB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(vB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(TB,"href","/docs/transformers/pr_17469/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(MB,"href","/docs/transformers/pr_17469/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(EB,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(CB,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(wB,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AB,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(LB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(yB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(xB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c($B,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(kB,"href","/docs/transformers/pr_17469/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(SB,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizer"),c(RB,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineTokenizer"),c(BB,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizer"),c(IB,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(NB,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(qB,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(jB,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(DB,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizer"),c(OB,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(VB,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(XB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QB,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizer"),c(WB,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(UB,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(JB,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(YB,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(KB,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ZB,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(eI,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizer"),c(oI,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(rI,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(tI,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizer"),c(aI,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(nI,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(sI,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizer"),c(lI,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(iI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mI,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(gI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pI,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizer"),c(_I,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(uI,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizer"),c(bI,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(vI,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(EI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(CI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(wI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(AI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(LI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(yI,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(xI,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c($I,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizer"),c(kI,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizerFast"),c(SI,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizer"),c(RI,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(PI,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5Tokenizer"),c(BI,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5TokenizerFast"),c(II,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeTokenizer"),c(NI,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(qI,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(jI,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(DI,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianTokenizer"),c(GI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizer"),c(OI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(VI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(XI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(zI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(QI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(WI,"href","/docs/transformers/pr_17469/en/model_doc/mluke#transformers.MLukeTokenizer"),c(HI,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(UI,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(JI,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(YI,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(KI,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5Tokenizer"),c(ZI,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5TokenizerFast"),c(eN,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpTokenizer"),c(oN,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(rN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(tN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(aN,"href","/docs/transformers/pr_17469/en/model_doc/nllb#transformers.NllbTokenizer"),c(nN,"href","/docs/transformers/pr_17469/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(sN,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(lN,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iN,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(dN,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(cN,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fN,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mN,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gN,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(hN,"href","/docs/transformers/pr_17469/en/model_doc/phobert#transformers.PhobertTokenizer"),c(pN,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartTokenizer"),c(_N,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(uN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(bN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(vN,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagTokenizer"),c(FN,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizer"),c(TN,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizerFast"),c(MN,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizer"),c(EN,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(CN,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizer"),c(wN,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(AN,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(LN,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(yN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($N,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(kN,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(SN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(RN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(PN,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizer"),c(BN,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(IN,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(NN,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(qN,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5Tokenizer"),c(jN,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DN,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasTokenizer"),c(GN,"href","/docs/transformers/pr_17469/en/model_doc/tapex#transformers.TapexTokenizer"),c(ON,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(VN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(XN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(zN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(QN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(WN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(JN,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizer"),c(YN,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(KN,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMTokenizer"),c(ZN,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(eq,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(oq,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(rq,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tq,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aq,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(nq,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(sq,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(lq,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"id","transformers.AutoFeatureExtractor"),c(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nh,"href","#transformers.AutoFeatureExtractor"),c(Di,"class","relative group"),c(iq,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(dq,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hq,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(wq,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c($q,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Pq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Bq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Iq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Nq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qq,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(jq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Dq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Gq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Oq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Vq,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mp,"id","transformers.AutoProcessor"),c(Mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mp,"href","#transformers.AutoProcessor"),c(Gi,"class","relative group"),c(Xq,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(zq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPProcessor"),c(Qq,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaProcessor"),c(Wq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPProcessor"),c(Hq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Uq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Jq,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Yq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ej,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oj,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rj,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tj,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aj,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltProcessor"),c(nj,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(sj,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lj,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ij,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoModel"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoModel"),c(Vi,"class","relative group"),c(dj,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel"),c(gj,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel"),c(hj,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel"),c(pj,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(_j,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(uj,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel"),c(bj,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(vj,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Fj,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Tj,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel"),c(Mj,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel"),c(Ej,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel"),c(Cj,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel"),c(wj,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenModel"),c(Aj,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel"),c(Lj,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel"),c(yj,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel"),c(xj,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel"),c($j,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(kj,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Sj,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Rj,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel"),c(Pj,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Bj,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Ij,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel"),c(Nj,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel"),c(qj,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel"),c(jj,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Dj,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel"),c(Gj,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel"),c(Oj,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel"),c(Vj,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel"),c(Xj,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel"),c(zj,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel"),c(Qj,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel"),c(Wj,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Hj,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel"),c(Uj,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model"),c(Jj,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Yj,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Kj,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel"),c(Zj,"href","/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTModel"),c(eD,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel"),c(oD,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel"),c(rD,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(tD,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(aD,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(nD,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(sD,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel"),c(lD,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel"),c(iD,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel"),c(dD,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model"),c(cD,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel"),c(fD,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel"),c(mD,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model"),c(gD,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel"),c(hD,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel"),c(pD,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel"),c(_D,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel"),c(uD,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(bD,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel"),c(vD,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTModel"),c(FD,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel"),c(TD,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model"),c(MD,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpModel"),c(ED,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaModel"),c(CD,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model"),c(wD,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel"),c(AD,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(LD,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel"),c(yD,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel"),c(xD,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel"),c($D,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel"),c(kD,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel"),c(SD,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(RD,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel"),c(PD,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel"),c(BD,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel"),c(ID,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel"),c(ND,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel"),c(qD,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c(jD,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel"),c(DD,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel"),c(GD,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel"),c(OD,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel"),c(VD,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel"),c(XD,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(zD,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel"),c(QD,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(WD,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel"),c(HD,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model"),c(UD,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model"),c(JD,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel"),c(YD,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(KD,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(ZD,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel"),c(eG,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(oG,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel"),c(rG,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel"),c(tG,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(aG,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel"),c(nG,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel"),c(sG,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(lG,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(iG,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(dG,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel"),c(cG,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel"),c(fG,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel"),c(mG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(gG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(hG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(pG,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel"),c(_G,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel"),c(uG,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ku,"id","transformers.AutoModelForPreTraining"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForPreTraining"),c(Qi,"class","relative group"),c(bG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining"),c(MG,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(EG,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining"),c(CG,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(wG,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(AG,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(LG,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(yG,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(xG,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c($G,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(kG,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(SG,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining"),c(RG,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(PG,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining"),c(BG,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining"),c(IG,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(qG,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(jG,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(DG,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(GG,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(OG,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(VG,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(XG,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(zG,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(QG,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(WG,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(HG,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(UG,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c(JG,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(YG,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(KG,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(eO,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oO,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rO,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(tO,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(aO,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(nO,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(sO,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(lO,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(iO,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(dO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(cO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(fO,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForCausalLM"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForCausalLM"),c(Ui,"class","relative group"),c(mO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pO,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM"),c(_O,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel"),c(uO,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(bO,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(vO,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(FO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(TO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(MO,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(EO,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(CO,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(wO,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(AO,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(LO,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM"),c(yO,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(xO,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c($O,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(kO,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(SO,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM"),c(RO,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM"),c(PO,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(BO,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForCausalLM"),c(IO,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(NO,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM"),c(qO,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(jO,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(DO,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(GO,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(OO,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(VO,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(XO,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(zO,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(QO,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(WO,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(HO,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(UO,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(JO,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(KO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ZO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(eV,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.AutoModelForMaskedLM"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.AutoModelForMaskedLM"),c(Ki,"class","relative group"),c(oV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(nV,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM"),c(lV,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(iV,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dV,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fV,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mV,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gV,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(pV,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_V,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(uV,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(bV,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FV,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TV,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM"),c(MV,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(EV,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(wV,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AV,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(yV,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xV,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($V,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kV,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SV,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RV,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PV,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BV,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(IV,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NV,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DV,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForSeq2SeqLM"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForSeq2SeqLM"),c(od,"class","relative group"),c(GV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UV,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(KV,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ZV,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel"),c(eX,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rX,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(tX,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(aX,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(nX,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(sX,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(lX,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iX,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H2,"id","transformers.AutoModelForSequenceClassification"),c(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H2,"href","#transformers.AutoModelForSequenceClassification"),c(ad,"class","relative group"),c(dX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c($X,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(az,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ub,"id","transformers.AutoModelForMultipleChoice"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForMultipleChoice"),c(ld,"class","relative group"),c(dz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yz,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xz,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($z,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(kz,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Sz,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Rz,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Pz,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Bz,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Iz,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Nz,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(qz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(jz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Dz,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Gz,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForNextSentencePrediction"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForNextSentencePrediction"),c(cd,"class","relative group"),c(Oz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Qz,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Wz,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Hz,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Uz,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Jz,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForTokenClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForTokenClassification"),c(gd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(bQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(FQ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(TQ,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MQ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EQ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CQ,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(wQ,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AQ,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(LQ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yQ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xQ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($Q,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(PQ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(BQ,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForQuestionAnswering"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForQuestionAnswering"),c(_d,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZQ,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(fW,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(gW,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(hW,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pW,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(_W,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(uW,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bW,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(vW,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(FW,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TW,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MW,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(EW,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CW,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wW,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AW,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.AutoModelForTableQuestionAnswering"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(vd,"class","relative group"),c(LW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.AutoModelForImageClassification"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.AutoModelForImageClassification"),c(Md,"class","relative group"),c(kW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification"),c(BW,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IW,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification"),c(NW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification"),c(jW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(DW,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(GW,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification"),c(OW,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(VW,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(XW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(QW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WW,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(HW,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(UW,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JW,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YW,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification"),c(KW,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(ZW,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification"),c(eH,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.AutoModelForVision2Seq"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.AutoModelForVision2Seq"),c(wd,"class","relative group"),c(oH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(yd,"class","relative group"),c(nH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.AutoModelForAudioClassification"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.AutoModelForAudioClassification"),c(kd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForAudioFrameClassification"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Pd,"class","relative group"),c(TH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(wH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(AH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(LH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(yH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForCTC"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForCTC"),c(Nd,"class","relative group"),c(xH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(RH,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC"),c(PH,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC"),c(BH,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC"),c(IH,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC"),c(NH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(qH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(jH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(DH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(GH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForSpeechSeq2Seq"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Dd,"class","relative group"),c(OH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(QH,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.AutoModelForAudioXVector"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.AutoModelForAudioXVector"),c(Vd,"class","relative group"),c(WH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(YH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(KH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(ZH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(eU,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForMaskedImageModeling"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Qd,"class","relative group"),c(oU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(nU,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(sU,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(lU,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.AutoModelForObjectDetection"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.AutoModelForObjectDetection"),c(Ud,"class","relative group"),c(iU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mU,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.AutoModelForImageSegmentation"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.AutoModelForImageSegmentation"),c(Kd,"class","relative group"),c(gU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.AutoModelForSemanticSegmentation"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.AutoModelForSemanticSegmentation"),c(oc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(TU,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(MU,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(EU,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(CU,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.AutoModelForInstanceSegmentation"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.AutoModelForInstanceSegmentation"),c(ac,"class","relative group"),c(wU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A7,"id","transformers.TFAutoModel"),c(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A7,"href","#transformers.TFAutoModel"),c(lc,"class","relative group"),c(xU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel"),c(RU,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel"),c(PU,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel"),c(BU,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(IU,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(NU,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel"),c(qU,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel"),c(jU,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel"),c(DU,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel"),c(GU,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel"),c(OU,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(VU,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel"),c(XU,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(zU,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.TFDeiTModel"),c(QU,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(WU,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(HU,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel"),c(UU,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(JU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel"),c(YU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(KU,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model"),c(ZU,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel"),c(eJ,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel"),c(oJ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(rJ,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel"),c(tJ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel"),c(aJ,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel"),c(nJ,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel"),c(sJ,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel"),c(lJ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(iJ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel"),c(dJ,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model"),c(cJ,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fJ,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel"),c(mJ,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel"),c(gJ,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetModel"),c(hJ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel"),c(pJ,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetModel"),c(_J,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel"),c(uJ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel"),c(bJ,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(vJ,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel"),c(FJ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model"),c(TJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel"),c(MJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(EJ,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel"),c(CJ,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(wJ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(AJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel"),c(LJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(yJ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C9,"id","transformers.TFAutoModelForPreTraining"),c(C9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C9,"href","#transformers.TFAutoModelForPreTraining"),c(cc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(RJ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining"),c(BJ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(NJ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(jJ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DJ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(GJ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OJ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(VJ,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(XJ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(zJ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(JJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(KJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(eY,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J9,"id","transformers.TFAutoModelForCausalLM"),c(J9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J9,"href","#transformers.TFAutoModelForCausalLM"),c(gc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(nY,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(sY,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(lY,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iY,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(dY,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(cY,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(fY,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(mY,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(gY,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(hY,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Y,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.TFAutoModelForImageClassification"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.TFAutoModelForImageClassification"),c(_c,"class","relative group"),c(uY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(TY,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(MY,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(EY,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(CY,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(wY,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(AY,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(LY,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForMaskedLM"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForMaskedLM"),c(vc,"class","relative group"),c(yY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(SY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(RY,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(PY,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(BY,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(IY,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(NY,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(qY,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(jY,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DY,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(GY,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OY,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(VY,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zY,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(QY,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WY,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(HY,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(UY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JY,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Mc,"class","relative group"),c(YY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(aK,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel"),c(sK,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(lK,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForSequenceClassification"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForSequenceClassification"),c(wc,"class","relative group"),c(cK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c($K,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(kK,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(SK,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(RK,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(PK,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(NK,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(qK,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForMultipleChoice"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForMultipleChoice"),c(yc,"class","relative group"),c(jK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(QK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(WK,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(HK,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(UK,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(JK,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(YK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(tZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(kc,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(dZ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Pc,"class","relative group"),c(cZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForTokenClassification"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(hZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(MZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(CZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(wZ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(AZ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(LZ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(yZ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(xZ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($Z,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(kZ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(SZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(RZ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(PZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(BZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(IZ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForQuestionAnswering"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Dc,"class","relative group"),c(NZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(HZ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(UZ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(JZ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(YZ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(KZ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(ZZ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(eee,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(oee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ree,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(tee,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(aee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(nee,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForVision2Seq"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForVision2Seq"),c(Vc,"class","relative group"),c(see,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Qc,"class","relative group"),c(cee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.FlaxAutoModel"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.FlaxAutoModel"),c(Uc,"class","relative group"),c(hee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel"),c(bee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel"),c(vee,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel"),c(Fee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel"),c(Tee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Mee,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Eee,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Cee,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel"),c(wee,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Aee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel"),c(Lee,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(yee,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(xee,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel"),c($ee,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(kee,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel"),c(See,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Ree,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Pee,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel"),c(Bee,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Iee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Nee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(qee,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model"),c(jee,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Dee,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel"),c(Gee,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Oee,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Vee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForCausalLM"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Kc,"class","relative group"),c(Xee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Hee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Uee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Jee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Yee,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Kee,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Zee,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(eoe,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ooe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(roe,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForPreTraining"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForPreTraining"),c(of,"class","relative group"),c(toe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(loe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ioe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(doe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(coe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(foe,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(goe,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(poe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_oe,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(uoe,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(boe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModelForMaskedLM"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(af,"class","relative group"),c(voe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Eoe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(woe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Aoe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Loe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(yoe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xoe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c($oe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(koe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(lf,"class","relative group"),c(Soe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Roe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Poe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Boe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Ioe,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Noe,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(qoe,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(joe,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Doe,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Goe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Ooe,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Voe,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Xoe,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(ff,"class","relative group"),c(zoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Woe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hoe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Uoe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Joe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Yoe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Koe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Zoe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(ere,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ore,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(rre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(tre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(hf,"class","relative group"),c(are,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lre,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(ire,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(dre,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(cre,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(fre,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(mre,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(gre,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(hre,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(pre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(_re,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.FlaxAutoModelForTokenClassification"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(uf,"class","relative group"),c(ure,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fre,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Tre,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Mre,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Ere,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Cre,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wre,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Are,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Lre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Ff,"class","relative group"),c(yre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($re,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kre,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Sre,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Rre,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Pre,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Bre,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Ire,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Nre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(qre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Ef,"class","relative group"),c(jre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ore,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.FlaxAutoModelForImageClassification"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Af,"class","relative group"),c(Vre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qre,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Wre,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.FlaxAutoModelForVision2Seq"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(xf,"class","relative group"),c(Hre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ure,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yre,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,xi),b(f,Bf,u),b(f,lt,u),e(lt,$i),e(lt,ki),e(ki,cL),e(lt,If),b(f,Oe,u),b(f,We,u),e(We,Si),e(We,Bn),e(Bn,fL),e(We,In),e(We,Nn),e(Nn,mL),e(We,Ri),e(We,qn),e(qn,gL),e(We,Pi),b(f,Nf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,QS),e(Ae,Bi),e(Bi,WS),e(Ae,HS),b(f,wo,u),b(f,Ra,u),e(Ra,US),e(Ra,qf),e(qf,JS),e(Ra,UHe),b(f,PXe,u),b(f,Ii,u),e(Ii,jf),e(jf,zae),M(hL,zae,null),e(Ii,JHe),e(Ii,Qae),e(Qae,YHe),b(f,BXe,u),b(f,jn,u),e(jn,KHe),e(jn,Wae),e(Wae,ZHe),e(jn,eUe),e(jn,Hae),e(Hae,oUe),e(jn,rUe),b(f,IXe,u),M(pL,f,u),b(f,NXe,u),b(f,YS,u),e(YS,tUe),b(f,qXe,u),M(Df,f,u),b(f,jXe,u),b(f,Ni,u),e(Ni,Gf),e(Gf,Uae),M(_L,Uae,null),e(Ni,aUe),e(Ni,Jae),e(Jae,nUe),b(f,DXe,u),b(f,Ao,u),M(uL,Ao,null),e(Ao,sUe),e(Ao,bL),e(bL,lUe),e(bL,KS),e(KS,iUe),e(bL,dUe),e(Ao,cUe),e(Ao,vL),e(vL,fUe),e(vL,Yae),e(Yae,mUe),e(vL,gUe),e(Ao,hUe),e(Ao,Lr),M(FL,Lr,null),e(Lr,pUe),e(Lr,Kae),e(Kae,_Ue),e(Lr,uUe),e(Lr,qi),e(qi,bUe),e(qi,Zae),e(Zae,vUe),e(qi,FUe),e(qi,ene),e(ene,TUe),e(qi,MUe),e(Lr,EUe),e(Lr,A),e(A,Of),e(Of,one),e(one,CUe),e(Of,wUe),e(Of,ZS),e(ZS,AUe),e(Of,LUe),e(A,yUe),e(A,Vf),e(Vf,rne),e(rne,xUe),e(Vf,$Ue),e(Vf,eR),e(eR,kUe),e(Vf,SUe),e(A,RUe),e(A,Xf),e(Xf,tne),e(tne,PUe),e(Xf,BUe),e(Xf,oR),e(oR,IUe),e(Xf,NUe),e(A,qUe),e(A,zf),e(zf,ane),e(ane,jUe),e(zf,DUe),e(zf,rR),e(rR,GUe),e(zf,OUe),e(A,VUe),e(A,Qf),e(Qf,nne),e(nne,XUe),e(Qf,zUe),e(Qf,tR),e(tR,QUe),e(Qf,WUe),e(A,HUe),e(A,Wf),e(Wf,sne),e(sne,UUe),e(Wf,JUe),e(Wf,aR),e(aR,YUe),e(Wf,KUe),e(A,ZUe),e(A,Hf),e(Hf,lne),e(lne,eJe),e(Hf,oJe),e(Hf,nR),e(nR,rJe),e(Hf,tJe),e(A,aJe),e(A,Uf),e(Uf,ine),e(ine,nJe),e(Uf,sJe),e(Uf,sR),e(sR,lJe),e(Uf,iJe),e(A,dJe),e(A,Jf),e(Jf,dne),e(dne,cJe),e(Jf,fJe),e(Jf,lR),e(lR,mJe),e(Jf,gJe),e(A,hJe),e(A,Yf),e(Yf,cne),e(cne,pJe),e(Yf,_Je),e(Yf,iR),e(iR,uJe),e(Yf,bJe),e(A,vJe),e(A,Kf),e(Kf,fne),e(fne,FJe),e(Kf,TJe),e(Kf,dR),e(dR,MJe),e(Kf,EJe),e(A,CJe),e(A,Zf),e(Zf,mne),e(mne,wJe),e(Zf,AJe),e(Zf,cR),e(cR,LJe),e(Zf,yJe),e(A,xJe),e(A,em),e(em,gne),e(gne,$Je),e(em,kJe),e(em,fR),e(fR,SJe),e(em,RJe),e(A,PJe),e(A,om),e(om,hne),e(hne,BJe),e(om,IJe),e(om,mR),e(mR,NJe),e(om,qJe),e(A,jJe),e(A,rm),e(rm,pne),e(pne,DJe),e(rm,GJe),e(rm,gR),e(gR,OJe),e(rm,VJe),e(A,XJe),e(A,tm),e(tm,_ne),e(_ne,zJe),e(tm,QJe),e(tm,hR),e(hR,WJe),e(tm,HJe),e(A,UJe),e(A,am),e(am,une),e(une,JJe),e(am,YJe),e(am,pR),e(pR,KJe),e(am,ZJe),e(A,eYe),e(A,nm),e(nm,bne),e(bne,oYe),e(nm,rYe),e(nm,_R),e(_R,tYe),e(nm,aYe),e(A,nYe),e(A,sm),e(sm,vne),e(vne,sYe),e(sm,lYe),e(sm,uR),e(uR,iYe),e(sm,dYe),e(A,cYe),e(A,lm),e(lm,Fne),e(Fne,fYe),e(lm,mYe),e(lm,bR),e(bR,gYe),e(lm,hYe),e(A,pYe),e(A,im),e(im,Tne),e(Tne,_Ye),e(im,uYe),e(im,vR),e(vR,bYe),e(im,vYe),e(A,FYe),e(A,dm),e(dm,Mne),e(Mne,TYe),e(dm,MYe),e(dm,FR),e(FR,EYe),e(dm,CYe),e(A,wYe),e(A,cm),e(cm,Ene),e(Ene,AYe),e(cm,LYe),e(cm,TR),e(TR,yYe),e(cm,xYe),e(A,$Ye),e(A,fm),e(fm,Cne),e(Cne,kYe),e(fm,SYe),e(fm,MR),e(MR,RYe),e(fm,PYe),e(A,BYe),e(A,mm),e(mm,wne),e(wne,IYe),e(mm,NYe),e(mm,ER),e(ER,qYe),e(mm,jYe),e(A,DYe),e(A,gm),e(gm,Ane),e(Ane,GYe),e(gm,OYe),e(gm,CR),e(CR,VYe),e(gm,XYe),e(A,zYe),e(A,hm),e(hm,Lne),e(Lne,QYe),e(hm,WYe),e(hm,wR),e(wR,HYe),e(hm,UYe),e(A,JYe),e(A,pm),e(pm,yne),e(yne,YYe),e(pm,KYe),e(pm,AR),e(AR,ZYe),e(pm,eKe),e(A,oKe),e(A,_m),e(_m,xne),e(xne,rKe),e(_m,tKe),e(_m,LR),e(LR,aKe),e(_m,nKe),e(A,sKe),e(A,um),e(um,$ne),e($ne,lKe),e(um,iKe),e(um,yR),e(yR,dKe),e(um,cKe),e(A,fKe),e(A,bm),e(bm,kne),e(kne,mKe),e(bm,gKe),e(bm,xR),e(xR,hKe),e(bm,pKe),e(A,_Ke),e(A,vm),e(vm,Sne),e(Sne,uKe),e(vm,bKe),e(vm,$R),e($R,vKe),e(vm,FKe),e(A,TKe),e(A,Fm),e(Fm,Rne),e(Rne,MKe),e(Fm,EKe),e(Fm,kR),e(kR,CKe),e(Fm,wKe),e(A,AKe),e(A,Tm),e(Tm,Pne),e(Pne,LKe),e(Tm,yKe),e(Tm,SR),e(SR,xKe),e(Tm,$Ke),e(A,kKe),e(A,Mm),e(Mm,Bne),e(Bne,SKe),e(Mm,RKe),e(Mm,RR),e(RR,PKe),e(Mm,BKe),e(A,IKe),e(A,Em),e(Em,Ine),e(Ine,NKe),e(Em,qKe),e(Em,PR),e(PR,jKe),e(Em,DKe),e(A,GKe),e(A,Cm),e(Cm,Nne),e(Nne,OKe),e(Cm,VKe),e(Cm,BR),e(BR,XKe),e(Cm,zKe),e(A,QKe),e(A,wm),e(wm,qne),e(qne,WKe),e(wm,HKe),e(wm,IR),e(IR,UKe),e(wm,JKe),e(A,YKe),e(A,Am),e(Am,jne),e(jne,KKe),e(Am,ZKe),e(Am,NR),e(NR,eZe),e(Am,oZe),e(A,rZe),e(A,Lm),e(Lm,Dne),e(Dne,tZe),e(Lm,aZe),e(Lm,qR),e(qR,nZe),e(Lm,sZe),e(A,lZe),e(A,ym),e(ym,Gne),e(Gne,iZe),e(ym,dZe),e(ym,jR),e(jR,cZe),e(ym,fZe),e(A,mZe),e(A,xm),e(xm,One),e(One,gZe),e(xm,hZe),e(xm,DR),e(DR,pZe),e(xm,_Ze),e(A,uZe),e(A,$m),e($m,Vne),e(Vne,bZe),e($m,vZe),e($m,GR),e(GR,FZe),e($m,TZe),e(A,MZe),e(A,km),e(km,Xne),e(Xne,EZe),e(km,CZe),e(km,OR),e(OR,wZe),e(km,AZe),e(A,LZe),e(A,Sm),e(Sm,zne),e(zne,yZe),e(Sm,xZe),e(Sm,VR),e(VR,$Ze),e(Sm,kZe),e(A,SZe),e(A,Rm),e(Rm,Qne),e(Qne,RZe),e(Rm,PZe),e(Rm,XR),e(XR,BZe),e(Rm,IZe),e(A,NZe),e(A,Pm),e(Pm,Wne),e(Wne,qZe),e(Pm,jZe),e(Pm,zR),e(zR,DZe),e(Pm,GZe),e(A,OZe),e(A,Bm),e(Bm,Hne),e(Hne,VZe),e(Bm,XZe),e(Bm,QR),e(QR,zZe),e(Bm,QZe),e(A,WZe),e(A,Im),e(Im,Une),e(Une,HZe),e(Im,UZe),e(Im,WR),e(WR,JZe),e(Im,YZe),e(A,KZe),e(A,Nm),e(Nm,Jne),e(Jne,ZZe),e(Nm,eeo),e(Nm,HR),e(HR,oeo),e(Nm,reo),e(A,teo),e(A,qm),e(qm,Yne),e(Yne,aeo),e(qm,neo),e(qm,UR),e(UR,seo),e(qm,leo),e(A,ieo),e(A,jm),e(jm,Kne),e(Kne,deo),e(jm,ceo),e(jm,JR),e(JR,feo),e(jm,meo),e(A,geo),e(A,Dm),e(Dm,Zne),e(Zne,heo),e(Dm,peo),e(Dm,YR),e(YR,_eo),e(Dm,ueo),e(A,beo),e(A,Gm),e(Gm,ese),e(ese,veo),e(Gm,Feo),e(Gm,KR),e(KR,Teo),e(Gm,Meo),e(A,Eeo),e(A,Om),e(Om,ose),e(ose,Ceo),e(Om,weo),e(Om,ZR),e(ZR,Aeo),e(Om,Leo),e(A,yeo),e(A,Vm),e(Vm,rse),e(rse,xeo),e(Vm,$eo),e(Vm,eP),e(eP,keo),e(Vm,Seo),e(A,Reo),e(A,Xm),e(Xm,tse),e(tse,Peo),e(Xm,Beo),e(Xm,oP),e(oP,Ieo),e(Xm,Neo),e(A,qeo),e(A,zm),e(zm,ase),e(ase,jeo),e(zm,Deo),e(zm,rP),e(rP,Geo),e(zm,Oeo),e(A,Veo),e(A,Qm),e(Qm,nse),e(nse,Xeo),e(Qm,zeo),e(Qm,tP),e(tP,Qeo),e(Qm,Weo),e(A,Heo),e(A,Wm),e(Wm,sse),e(sse,Ueo),e(Wm,Jeo),e(Wm,aP),e(aP,Yeo),e(Wm,Keo),e(A,Zeo),e(A,Hm),e(Hm,lse),e(lse,eoo),e(Hm,ooo),e(Hm,nP),e(nP,roo),e(Hm,too),e(A,aoo),e(A,Um),e(Um,ise),e(ise,noo),e(Um,soo),e(Um,sP),e(sP,loo),e(Um,ioo),e(A,doo),e(A,Jm),e(Jm,dse),e(dse,coo),e(Jm,foo),e(Jm,lP),e(lP,moo),e(Jm,goo),e(A,hoo),e(A,Ym),e(Ym,cse),e(cse,poo),e(Ym,_oo),e(Ym,iP),e(iP,uoo),e(Ym,boo),e(A,voo),e(A,Km),e(Km,fse),e(fse,Foo),e(Km,Too),e(Km,dP),e(dP,Moo),e(Km,Eoo),e(A,Coo),e(A,Zm),e(Zm,mse),e(mse,woo),e(Zm,Aoo),e(Zm,cP),e(cP,Loo),e(Zm,yoo),e(A,xoo),e(A,eg),e(eg,gse),e(gse,$oo),e(eg,koo),e(eg,fP),e(fP,Soo),e(eg,Roo),e(A,Poo),e(A,og),e(og,hse),e(hse,Boo),e(og,Ioo),e(og,mP),e(mP,Noo),e(og,qoo),e(A,joo),e(A,rg),e(rg,pse),e(pse,Doo),e(rg,Goo),e(rg,gP),e(gP,Ooo),e(rg,Voo),e(A,Xoo),e(A,tg),e(tg,_se),e(_se,zoo),e(tg,Qoo),e(tg,hP),e(hP,Woo),e(tg,Hoo),e(A,Uoo),e(A,ag),e(ag,use),e(use,Joo),e(ag,Yoo),e(ag,pP),e(pP,Koo),e(ag,Zoo),e(A,ero),e(A,ng),e(ng,bse),e(bse,oro),e(ng,rro),e(ng,_P),e(_P,tro),e(ng,aro),e(A,nro),e(A,sg),e(sg,vse),e(vse,sro),e(sg,lro),e(sg,uP),e(uP,iro),e(sg,dro),e(A,cro),e(A,lg),e(lg,Fse),e(Fse,fro),e(lg,mro),e(lg,bP),e(bP,gro),e(lg,hro),e(A,pro),e(A,ig),e(ig,Tse),e(Tse,_ro),e(ig,uro),e(ig,vP),e(vP,bro),e(ig,vro),e(A,Fro),e(A,dg),e(dg,Mse),e(Mse,Tro),e(dg,Mro),e(dg,FP),e(FP,Ero),e(dg,Cro),e(A,wro),e(A,cg),e(cg,Ese),e(Ese,Aro),e(cg,Lro),e(cg,TP),e(TP,yro),e(cg,xro),e(A,$ro),e(A,fg),e(fg,Cse),e(Cse,kro),e(fg,Sro),e(fg,MP),e(MP,Rro),e(fg,Pro),e(A,Bro),e(A,mg),e(mg,wse),e(wse,Iro),e(mg,Nro),e(mg,EP),e(EP,qro),e(mg,jro),e(A,Dro),e(A,gg),e(gg,Ase),e(Ase,Gro),e(gg,Oro),e(gg,CP),e(CP,Vro),e(gg,Xro),e(A,zro),e(A,hg),e(hg,Lse),e(Lse,Qro),e(hg,Wro),e(hg,wP),e(wP,Hro),e(hg,Uro),e(A,Jro),e(A,pg),e(pg,yse),e(yse,Yro),e(pg,Kro),e(pg,AP),e(AP,Zro),e(pg,eto),e(A,oto),e(A,_g),e(_g,xse),e(xse,rto),e(_g,tto),e(_g,LP),e(LP,ato),e(_g,nto),e(A,sto),e(A,ug),e(ug,$se),e($se,lto),e(ug,ito),e(ug,yP),e(yP,dto),e(ug,cto),e(A,fto),e(A,bg),e(bg,kse),e(kse,mto),e(bg,gto),e(bg,xP),e(xP,hto),e(bg,pto),e(A,_to),e(A,vg),e(vg,Sse),e(Sse,uto),e(vg,bto),e(vg,$P),e($P,vto),e(vg,Fto),e(A,Tto),e(A,Fg),e(Fg,Rse),e(Rse,Mto),e(Fg,Eto),e(Fg,kP),e(kP,Cto),e(Fg,wto),e(A,Ato),e(A,Tg),e(Tg,Pse),e(Pse,Lto),e(Tg,yto),e(Tg,SP),e(SP,xto),e(Tg,$to),e(A,kto),e(A,Mg),e(Mg,Bse),e(Bse,Sto),e(Mg,Rto),e(Mg,RP),e(RP,Pto),e(Mg,Bto),e(A,Ito),e(A,Eg),e(Eg,Ise),e(Ise,Nto),e(Eg,qto),e(Eg,PP),e(PP,jto),e(Eg,Dto),e(A,Gto),e(A,Cg),e(Cg,Nse),e(Nse,Oto),e(Cg,Vto),e(Cg,BP),e(BP,Xto),e(Cg,zto),e(A,Qto),e(A,wg),e(wg,qse),e(qse,Wto),e(wg,Hto),e(wg,IP),e(IP,Uto),e(wg,Jto),e(A,Yto),e(A,Ag),e(Ag,jse),e(jse,Kto),e(Ag,Zto),e(Ag,NP),e(NP,eao),e(Ag,oao),e(A,rao),e(A,Lg),e(Lg,Dse),e(Dse,tao),e(Lg,aao),e(Lg,qP),e(qP,nao),e(Lg,sao),e(A,lao),e(A,yg),e(yg,Gse),e(Gse,iao),e(yg,dao),e(yg,jP),e(jP,cao),e(yg,fao),e(A,mao),e(A,xg),e(xg,Ose),e(Ose,gao),e(xg,hao),e(xg,DP),e(DP,pao),e(xg,_ao),e(A,uao),e(A,$g),e($g,Vse),e(Vse,bao),e($g,vao),e($g,GP),e(GP,Fao),e($g,Tao),e(A,Mao),e(A,kg),e(kg,Xse),e(Xse,Eao),e(kg,Cao),e(kg,OP),e(OP,wao),e(kg,Aao),e(A,Lao),e(A,Sg),e(Sg,zse),e(zse,yao),e(Sg,xao),e(Sg,VP),e(VP,$ao),e(Sg,kao),e(A,Sao),e(A,Rg),e(Rg,Qse),e(Qse,Rao),e(Rg,Pao),e(Rg,XP),e(XP,Bao),e(Rg,Iao),e(A,Nao),e(A,Pg),e(Pg,Wse),e(Wse,qao),e(Pg,jao),e(Pg,zP),e(zP,Dao),e(Pg,Gao),e(A,Oao),e(A,Bg),e(Bg,Hse),e(Hse,Vao),e(Bg,Xao),e(Bg,QP),e(QP,zao),e(Bg,Qao),e(A,Wao),e(A,Ig),e(Ig,Use),e(Use,Hao),e(Ig,Uao),e(Ig,WP),e(WP,Jao),e(Ig,Yao),e(A,Kao),e(A,Ng),e(Ng,Jse),e(Jse,Zao),e(Ng,eno),e(Ng,HP),e(HP,ono),e(Ng,rno),e(A,tno),e(A,qg),e(qg,Yse),e(Yse,ano),e(qg,nno),e(qg,UP),e(UP,sno),e(qg,lno),e(A,ino),e(A,jg),e(jg,Kse),e(Kse,dno),e(jg,cno),e(jg,JP),e(JP,fno),e(jg,mno),e(A,gno),e(A,Dg),e(Dg,Zse),e(Zse,hno),e(Dg,pno),e(Dg,YP),e(YP,_no),e(Dg,uno),e(A,bno),e(A,Gg),e(Gg,ele),e(ele,vno),e(Gg,Fno),e(Gg,KP),e(KP,Tno),e(Gg,Mno),e(A,Eno),e(A,Og),e(Og,ole),e(ole,Cno),e(Og,wno),e(Og,ZP),e(ZP,Ano),e(Og,Lno),e(A,yno),e(A,Vg),e(Vg,rle),e(rle,xno),e(Vg,$no),e(Vg,eB),e(eB,kno),e(Vg,Sno),e(A,Rno),e(A,Xg),e(Xg,tle),e(tle,Pno),e(Xg,Bno),e(Xg,oB),e(oB,Ino),e(Xg,Nno),e(A,qno),e(A,zg),e(zg,ale),e(ale,jno),e(zg,Dno),e(zg,rB),e(rB,Gno),e(zg,Ono),e(A,Vno),e(A,Qg),e(Qg,nle),e(nle,Xno),e(Qg,zno),e(Qg,tB),e(tB,Qno),e(Qg,Wno),e(A,Hno),e(A,Wg),e(Wg,sle),e(sle,Uno),e(Wg,Jno),e(Wg,aB),e(aB,Yno),e(Wg,Kno),e(A,Zno),e(A,Hg),e(Hg,lle),e(lle,eso),e(Hg,oso),e(Hg,nB),e(nB,rso),e(Hg,tso),e(A,aso),e(A,Ug),e(Ug,ile),e(ile,nso),e(Ug,sso),e(Ug,sB),e(sB,lso),e(Ug,iso),e(A,dso),e(A,Jg),e(Jg,dle),e(dle,cso),e(Jg,fso),e(Jg,lB),e(lB,mso),e(Jg,gso),e(A,hso),e(A,Yg),e(Yg,cle),e(cle,pso),e(Yg,_so),e(Yg,iB),e(iB,uso),e(Yg,bso),e(A,vso),e(A,Kg),e(Kg,fle),e(fle,Fso),e(Kg,Tso),e(Kg,dB),e(dB,Mso),e(Kg,Eso),e(Lr,Cso),M(Zg,Lr,null),e(Ao,wso),e(Ao,eh),M(TL,eh,null),e(eh,Aso),e(eh,mle),e(mle,Lso),b(f,GXe,u),b(f,ji,u),e(ji,oh),e(oh,gle),M(ML,gle,null),e(ji,yso),e(ji,hle),e(hle,xso),b(f,OXe,u),b(f,Lo,u),M(EL,Lo,null),e(Lo,$so),e(Lo,CL),e(CL,kso),e(CL,cB),e(cB,Sso),e(CL,Rso),e(Lo,Pso),e(Lo,wL),e(wL,Bso),e(wL,ple),e(ple,Iso),e(wL,Nso),e(Lo,qso),e(Lo,yr),M(AL,yr,null),e(yr,jso),e(yr,_le),e(_le,Dso),e(yr,Gso),e(yr,Pa),e(Pa,Oso),e(Pa,ule),e(ule,Vso),e(Pa,Xso),e(Pa,ble),e(ble,zso),e(Pa,Qso),e(Pa,vle),e(vle,Wso),e(Pa,Hso),e(yr,Uso),e(yr,k),e(k,Dn),e(Dn,Fle),e(Fle,Jso),e(Dn,Yso),e(Dn,fB),e(fB,Kso),e(Dn,Zso),e(Dn,mB),e(mB,elo),e(Dn,olo),e(k,rlo),e(k,Gn),e(Gn,Tle),e(Tle,tlo),e(Gn,alo),e(Gn,gB),e(gB,nlo),e(Gn,slo),e(Gn,hB),e(hB,llo),e(Gn,ilo),e(k,dlo),e(k,On),e(On,Mle),e(Mle,clo),e(On,flo),e(On,pB),e(pB,mlo),e(On,glo),e(On,_B),e(_B,hlo),e(On,plo),e(k,_lo),e(k,rh),e(rh,Ele),e(Ele,ulo),e(rh,blo),e(rh,uB),e(uB,vlo),e(rh,Flo),e(k,Tlo),e(k,Vn),e(Vn,Cle),e(Cle,Mlo),e(Vn,Elo),e(Vn,bB),e(bB,Clo),e(Vn,wlo),e(Vn,vB),e(vB,Alo),e(Vn,Llo),e(k,ylo),e(k,th),e(th,wle),e(wle,xlo),e(th,$lo),e(th,FB),e(FB,klo),e(th,Slo),e(k,Rlo),e(k,ah),e(ah,Ale),e(Ale,Plo),e(ah,Blo),e(ah,TB),e(TB,Ilo),e(ah,Nlo),e(k,qlo),e(k,nh),e(nh,Lle),e(Lle,jlo),e(nh,Dlo),e(nh,MB),e(MB,Glo),e(nh,Olo),e(k,Vlo),e(k,Xn),e(Xn,yle),e(yle,Xlo),e(Xn,zlo),e(Xn,EB),e(EB,Qlo),e(Xn,Wlo),e(Xn,CB),e(CB,Hlo),e(Xn,Ulo),e(k,Jlo),e(k,zn),e(zn,xle),e(xle,Ylo),e(zn,Klo),e(zn,wB),e(wB,Zlo),e(zn,eio),e(zn,AB),e(AB,oio),e(zn,rio),e(k,tio),e(k,Qn),e(Qn,$le),e($le,aio),e(Qn,nio),e(Qn,LB),e(LB,sio),e(Qn,lio),e(Qn,yB),e(yB,iio),e(Qn,dio),e(k,cio),e(k,sh),e(sh,kle),e(kle,fio),e(sh,mio),e(sh,xB),e(xB,gio),e(sh,hio),e(k,pio),e(k,lh),e(lh,Sle),e(Sle,_io),e(lh,uio),e(lh,$B),e($B,bio),e(lh,vio),e(k,Fio),e(k,ih),e(ih,Rle),e(Rle,Tio),e(ih,Mio),e(ih,kB),e(kB,Eio),e(ih,Cio),e(k,wio),e(k,Wn),e(Wn,Ple),e(Ple,Aio),e(Wn,Lio),e(Wn,SB),e(SB,yio),e(Wn,xio),e(Wn,RB),e(RB,$io),e(Wn,kio),e(k,Sio),e(k,dh),e(dh,Ble),e(Ble,Rio),e(dh,Pio),e(dh,PB),e(PB,Bio),e(dh,Iio),e(k,Nio),e(k,Hn),e(Hn,Ile),e(Ile,qio),e(Hn,jio),e(Hn,BB),e(BB,Dio),e(Hn,Gio),e(Hn,IB),e(IB,Oio),e(Hn,Vio),e(k,Xio),e(k,Un),e(Un,Nle),e(Nle,zio),e(Un,Qio),e(Un,NB),e(NB,Wio),e(Un,Hio),e(Un,qB),e(qB,Uio),e(Un,Jio),e(k,Yio),e(k,Jn),e(Jn,qle),e(qle,Kio),e(Jn,Zio),e(Jn,jB),e(jB,edo),e(Jn,odo),e(Jn,DB),e(DB,rdo),e(Jn,tdo),e(k,ado),e(k,Yn),e(Yn,jle),e(jle,ndo),e(Yn,sdo),e(Yn,GB),e(GB,ldo),e(Yn,ido),e(Yn,OB),e(OB,ddo),e(Yn,cdo),e(k,fdo),e(k,ch),e(ch,Dle),e(Dle,mdo),e(ch,gdo),e(ch,VB),e(VB,hdo),e(ch,pdo),e(k,_do),e(k,Kn),e(Kn,Gle),e(Gle,udo),e(Kn,bdo),e(Kn,XB),e(XB,vdo),e(Kn,Fdo),e(Kn,zB),e(zB,Tdo),e(Kn,Mdo),e(k,Edo),e(k,Zn),e(Zn,Ole),e(Ole,Cdo),e(Zn,wdo),e(Zn,QB),e(QB,Ado),e(Zn,Ldo),e(Zn,WB),e(WB,ydo),e(Zn,xdo),e(k,$do),e(k,es),e(es,Vle),e(Vle,kdo),e(es,Sdo),e(es,HB),e(HB,Rdo),e(es,Pdo),e(es,UB),e(UB,Bdo),e(es,Ido),e(k,Ndo),e(k,os),e(os,Xle),e(Xle,qdo),e(os,jdo),e(os,JB),e(JB,Ddo),e(os,Gdo),e(os,YB),e(YB,Odo),e(os,Vdo),e(k,Xdo),e(k,rs),e(rs,zle),e(zle,zdo),e(rs,Qdo),e(rs,KB),e(KB,Wdo),e(rs,Hdo),e(rs,ZB),e(ZB,Udo),e(rs,Jdo),e(k,Ydo),e(k,ts),e(ts,Qle),e(Qle,Kdo),e(ts,Zdo),e(ts,eI),e(eI,eco),e(ts,oco),e(ts,oI),e(oI,rco),e(ts,tco),e(k,aco),e(k,fh),e(fh,Wle),e(Wle,nco),e(fh,sco),e(fh,rI),e(rI,lco),e(fh,ico),e(k,dco),e(k,as),e(as,Hle),e(Hle,cco),e(as,fco),e(as,tI),e(tI,mco),e(as,gco),e(as,aI),e(aI,hco),e(as,pco),e(k,_co),e(k,mh),e(mh,Ule),e(Ule,uco),e(mh,bco),e(mh,nI),e(nI,vco),e(mh,Fco),e(k,Tco),e(k,ns),e(ns,Jle),e(Jle,Mco),e(ns,Eco),e(ns,sI),e(sI,Cco),e(ns,wco),e(ns,lI),e(lI,Aco),e(ns,Lco),e(k,yco),e(k,ss),e(ss,Yle),e(Yle,xco),e(ss,$co),e(ss,iI),e(iI,kco),e(ss,Sco),e(ss,dI),e(dI,Rco),e(ss,Pco),e(k,Bco),e(k,ls),e(ls,Kle),e(Kle,Ico),e(ls,Nco),e(ls,cI),e(cI,qco),e(ls,jco),e(ls,fI),e(fI,Dco),e(ls,Gco),e(k,Oco),e(k,gh),e(gh,Zle),e(Zle,Vco),e(gh,Xco),e(gh,mI),e(mI,zco),e(gh,Qco),e(k,Wco),e(k,is),e(is,eie),e(eie,Hco),e(is,Uco),e(is,gI),e(gI,Jco),e(is,Yco),e(is,hI),e(hI,Kco),e(is,Zco),e(k,efo),e(k,ds),e(ds,oie),e(oie,ofo),e(ds,rfo),e(ds,pI),e(pI,tfo),e(ds,afo),e(ds,_I),e(_I,nfo),e(ds,sfo),e(k,lfo),e(k,cs),e(cs,rie),e(rie,ifo),e(cs,dfo),e(cs,uI),e(uI,cfo),e(cs,ffo),e(cs,bI),e(bI,mfo),e(cs,gfo),e(k,hfo),e(k,hh),e(hh,tie),e(tie,pfo),e(hh,_fo),e(hh,vI),e(vI,ufo),e(hh,bfo),e(k,vfo),e(k,fs),e(fs,aie),e(aie,Ffo),e(fs,Tfo),e(fs,FI),e(FI,Mfo),e(fs,Efo),e(fs,TI),e(TI,Cfo),e(fs,wfo),e(k,Afo),e(k,ms),e(ms,nie),e(nie,Lfo),e(ms,yfo),e(ms,MI),e(MI,xfo),e(ms,$fo),e(ms,EI),e(EI,kfo),e(ms,Sfo),e(k,Rfo),e(k,gs),e(gs,sie),e(sie,Pfo),e(gs,Bfo),e(gs,CI),e(CI,Ifo),e(gs,Nfo),e(gs,wI),e(wI,qfo),e(gs,jfo),e(k,Dfo),e(k,hs),e(hs,lie),e(lie,Gfo),e(hs,Ofo),e(hs,AI),e(AI,Vfo),e(hs,Xfo),e(hs,LI),e(LI,zfo),e(hs,Qfo),e(k,Wfo),e(k,ps),e(ps,iie),e(iie,Hfo),e(ps,Ufo),e(ps,yI),e(yI,Jfo),e(ps,Yfo),e(ps,xI),e(xI,Kfo),e(ps,Zfo),e(k,emo),e(k,_s),e(_s,die),e(die,omo),e(_s,rmo),e(_s,$I),e($I,tmo),e(_s,amo),e(_s,kI),e(kI,nmo),e(_s,smo),e(k,lmo),e(k,us),e(us,cie),e(cie,imo),e(us,dmo),e(us,SI),e(SI,cmo),e(us,fmo),e(us,RI),e(RI,mmo),e(us,gmo),e(k,hmo),e(k,bs),e(bs,fie),e(fie,pmo),e(bs,_mo),e(bs,PI),e(PI,umo),e(bs,bmo),e(bs,BI),e(BI,vmo),e(bs,Fmo),e(k,Tmo),e(k,ph),e(ph,mie),e(mie,Mmo),e(ph,Emo),e(ph,II),e(II,Cmo),e(ph,wmo),e(k,Amo),e(k,vs),e(vs,gie),e(gie,Lmo),e(vs,ymo),e(vs,NI),e(NI,xmo),e(vs,$mo),e(vs,qI),e(qI,kmo),e(vs,Smo),e(k,Rmo),e(k,_h),e(_h,hie),e(hie,Pmo),e(_h,Bmo),e(_h,jI),e(jI,Imo),e(_h,Nmo),e(k,qmo),e(k,uh),e(uh,pie),e(pie,jmo),e(uh,Dmo),e(uh,DI),e(DI,Gmo),e(uh,Omo),e(k,Vmo),e(k,Fs),e(Fs,_ie),e(_ie,Xmo),e(Fs,zmo),e(Fs,GI),e(GI,Qmo),e(Fs,Wmo),e(Fs,OI),e(OI,Hmo),e(Fs,Umo),e(k,Jmo),e(k,Ts),e(Ts,uie),e(uie,Ymo),e(Ts,Kmo),e(Ts,VI),e(VI,Zmo),e(Ts,ego),e(Ts,XI),e(XI,ogo),e(Ts,rgo),e(k,tgo),e(k,Ms),e(Ms,bie),e(bie,ago),e(Ms,ngo),e(Ms,zI),e(zI,sgo),e(Ms,lgo),e(Ms,QI),e(QI,igo),e(Ms,dgo),e(k,cgo),e(k,bh),e(bh,vie),e(vie,fgo),e(bh,mgo),e(bh,WI),e(WI,ggo),e(bh,hgo),e(k,pgo),e(k,Es),e(Es,Fie),e(Fie,_go),e(Es,ugo),e(Es,HI),e(HI,bgo),e(Es,vgo),e(Es,UI),e(UI,Fgo),e(Es,Tgo),e(k,Mgo),e(k,Cs),e(Cs,Tie),e(Tie,Ego),e(Cs,Cgo),e(Cs,JI),e(JI,wgo),e(Cs,Ago),e(Cs,YI),e(YI,Lgo),e(Cs,ygo),e(k,xgo),e(k,ws),e(ws,Mie),e(Mie,$go),e(ws,kgo),e(ws,KI),e(KI,Sgo),e(ws,Rgo),e(ws,ZI),e(ZI,Pgo),e(ws,Bgo),e(k,Igo),e(k,As),e(As,Eie),e(Eie,Ngo),e(As,qgo),e(As,eN),e(eN,jgo),e(As,Dgo),e(As,oN),e(oN,Ggo),e(As,Ogo),e(k,Vgo),e(k,Ls),e(Ls,Cie),e(Cie,Xgo),e(Ls,zgo),e(Ls,rN),e(rN,Qgo),e(Ls,Wgo),e(Ls,tN),e(tN,Hgo),e(Ls,Ugo),e(k,Jgo),e(k,ys),e(ys,wie),e(wie,Ygo),e(ys,Kgo),e(ys,aN),e(aN,Zgo),e(ys,eho),e(ys,nN),e(nN,oho),e(ys,rho),e(k,tho),e(k,xs),e(xs,Aie),e(Aie,aho),e(xs,nho),e(xs,sN),e(sN,sho),e(xs,lho),e(xs,lN),e(lN,iho),e(xs,dho),e(k,cho),e(k,$s),e($s,Lie),e(Lie,fho),e($s,mho),e($s,iN),e(iN,gho),e($s,hho),e($s,dN),e(dN,pho),e($s,_ho),e(k,uho),e(k,vh),e(vh,yie),e(yie,bho),e(vh,vho),e(vh,cN),e(cN,Fho),e(vh,Tho),e(k,Mho),e(k,ks),e(ks,xie),e(xie,Eho),e(ks,Cho),e(ks,fN),e(fN,who),e(ks,Aho),e(ks,mN),e(mN,Lho),e(ks,yho),e(k,xho),e(k,Fh),e(Fh,$ie),e($ie,$ho),e(Fh,kho),e(Fh,gN),e(gN,Sho),e(Fh,Rho),e(k,Pho),e(k,Th),e(Th,kie),e(kie,Bho),e(Th,Iho),e(Th,hN),e(hN,Nho),e(Th,qho),e(k,jho),e(k,Mh),e(Mh,Sie),e(Sie,Dho),e(Mh,Gho),e(Mh,pN),e(pN,Oho),e(Mh,Vho),e(k,Xho),e(k,Eh),e(Eh,Rie),e(Rie,zho),e(Eh,Qho),e(Eh,_N),e(_N,Who),e(Eh,Hho),e(k,Uho),e(k,Ss),e(Ss,Pie),e(Pie,Jho),e(Ss,Yho),e(Ss,uN),e(uN,Kho),e(Ss,Zho),e(Ss,bN),e(bN,epo),e(Ss,opo),e(k,rpo),e(k,Ch),e(Ch,Bie),e(Bie,tpo),e(Ch,apo),e(Ch,vN),e(vN,npo),e(Ch,spo),e(k,lpo),e(k,Rs),e(Rs,Iie),e(Iie,ipo),e(Rs,dpo),e(Rs,FN),e(FN,cpo),e(Rs,fpo),e(Rs,TN),e(TN,mpo),e(Rs,gpo),e(k,hpo),e(k,Ps),e(Ps,Nie),e(Nie,ppo),e(Ps,_po),e(Ps,MN),e(MN,upo),e(Ps,bpo),e(Ps,EN),e(EN,vpo),e(Ps,Fpo),e(k,Tpo),e(k,Bs),e(Bs,qie),e(qie,Mpo),e(Bs,Epo),e(Bs,CN),e(CN,Cpo),e(Bs,wpo),e(Bs,wN),e(wN,Apo),e(Bs,Lpo),e(k,ypo),e(k,Is),e(Is,jie),e(jie,xpo),e(Is,$po),e(Is,AN),e(AN,kpo),e(Is,Spo),e(Is,LN),e(LN,Rpo),e(Is,Ppo),e(k,Bpo),e(k,Ns),e(Ns,Die),e(Die,Ipo),e(Ns,Npo),e(Ns,yN),e(yN,qpo),e(Ns,jpo),e(Ns,xN),e(xN,Dpo),e(Ns,Gpo),e(k,Opo),e(k,qs),e(qs,Gie),e(Gie,Vpo),e(qs,Xpo),e(qs,$N),e($N,zpo),e(qs,Qpo),e(qs,kN),e(kN,Wpo),e(qs,Hpo),e(k,Upo),e(k,wh),e(wh,Oie),e(Oie,Jpo),e(wh,Ypo),e(wh,SN),e(SN,Kpo),e(wh,Zpo),e(k,e_o),e(k,Ah),e(Ah,Vie),e(Vie,o_o),e(Ah,r_o),e(Ah,RN),e(RN,t_o),e(Ah,a_o),e(k,n_o),e(k,js),e(js,Xie),e(Xie,s_o),e(js,l_o),e(js,PN),e(PN,i_o),e(js,d_o),e(js,BN),e(BN,c_o),e(js,f_o),e(k,m_o),e(k,Ds),e(Ds,zie),e(zie,g_o),e(Ds,h_o),e(Ds,IN),e(IN,p_o),e(Ds,__o),e(Ds,NN),e(NN,u_o),e(Ds,b_o),e(k,v_o),e(k,Gs),e(Gs,Qie),e(Qie,F_o),e(Gs,T_o),e(Gs,qN),e(qN,M_o),e(Gs,E_o),e(Gs,jN),e(jN,C_o),e(Gs,w_o),e(k,A_o),e(k,Lh),e(Lh,Wie),e(Wie,L_o),e(Lh,y_o),e(Lh,DN),e(DN,x_o),e(Lh,$_o),e(k,k_o),e(k,yh),e(yh,Hie),e(Hie,S_o),e(yh,R_o),e(yh,GN),e(GN,P_o),e(yh,B_o),e(k,I_o),e(k,xh),e(xh,Uie),e(Uie,N_o),e(xh,q_o),e(xh,ON),e(ON,j_o),e(xh,D_o),e(k,G_o),e(k,Os),e(Os,Jie),e(Jie,O_o),e(Os,V_o),e(Os,VN),e(VN,X_o),e(Os,z_o),e(Os,XN),e(XN,Q_o),e(Os,W_o),e(k,H_o),e(k,Vs),e(Vs,Yie),e(Yie,U_o),e(Vs,J_o),e(Vs,zN),e(zN,Y_o),e(Vs,K_o),e(Vs,QN),e(QN,Z_o),e(Vs,euo),e(k,ouo),e(k,$h),e($h,Kie),e(Kie,ruo),e($h,tuo),e($h,WN),e(WN,auo),e($h,nuo),e(k,suo),e(k,kh),e(kh,Zie),e(Zie,luo),e(kh,iuo),e(kh,HN),e(HN,duo),e(kh,cuo),e(k,fuo),e(k,Sh),e(Sh,ede),e(ede,muo),e(Sh,guo),e(Sh,UN),e(UN,huo),e(Sh,puo),e(k,_uo),e(k,Xs),e(Xs,ode),e(ode,uuo),e(Xs,buo),e(Xs,JN),e(JN,vuo),e(Xs,Fuo),e(Xs,YN),e(YN,Tuo),e(Xs,Muo),e(k,Euo),e(k,Rh),e(Rh,rde),e(rde,Cuo),e(Rh,wuo),e(Rh,KN),e(KN,Auo),e(Rh,Luo),e(k,yuo),e(k,Ph),e(Ph,tde),e(tde,xuo),e(Ph,$uo),e(Ph,ZN),e(ZN,kuo),e(Ph,Suo),e(k,Ruo),e(k,zs),e(zs,ade),e(ade,Puo),e(zs,Buo),e(zs,eq),e(eq,Iuo),e(zs,Nuo),e(zs,oq),e(oq,quo),e(zs,juo),e(k,Duo),e(k,Qs),e(Qs,nde),e(nde,Guo),e(Qs,Ouo),e(Qs,rq),e(rq,Vuo),e(Qs,Xuo),e(Qs,tq),e(tq,zuo),e(Qs,Quo),e(k,Wuo),e(k,Ws),e(Ws,sde),e(sde,Huo),e(Ws,Uuo),e(Ws,aq),e(aq,Juo),e(Ws,Yuo),e(Ws,nq),e(nq,Kuo),e(Ws,Zuo),e(k,e1o),e(k,Hs),e(Hs,lde),e(lde,o1o),e(Hs,r1o),e(Hs,sq),e(sq,t1o),e(Hs,a1o),e(Hs,lq),e(lq,n1o),e(Hs,s1o),e(yr,l1o),M(Bh,yr,null),e(Lo,i1o),e(Lo,Ih),M(LL,Ih,null),e(Ih,d1o),e(Ih,ide),e(ide,c1o),b(f,VXe,u),b(f,Di,u),e(Di,Nh),e(Nh,dde),M(yL,dde,null),e(Di,f1o),e(Di,cde),e(cde,m1o),b(f,XXe,u),b(f,yo,u),M(xL,yo,null),e(yo,g1o),e(yo,$L),e($L,h1o),e($L,iq),e(iq,p1o),e($L,_1o),e(yo,u1o),e(yo,kL),e(kL,b1o),e(kL,fde),e(fde,v1o),e(kL,F1o),e(yo,T1o),e(yo,Ue),M(SL,Ue,null),e(Ue,M1o),e(Ue,mde),e(mde,E1o),e(Ue,C1o),e(Ue,Ba),e(Ba,w1o),e(Ba,gde),e(gde,A1o),e(Ba,L1o),e(Ba,hde),e(hde,y1o),e(Ba,x1o),e(Ba,pde),e(pde,$1o),e(Ba,k1o),e(Ue,S1o),e(Ue,J),e(J,qh),e(qh,_de),e(_de,R1o),e(qh,P1o),e(qh,dq),e(dq,B1o),e(qh,I1o),e(J,N1o),e(J,jh),e(jh,ude),e(ude,q1o),e(jh,j1o),e(jh,cq),e(cq,D1o),e(jh,G1o),e(J,O1o),e(J,Dh),e(Dh,bde),e(bde,V1o),e(Dh,X1o),e(Dh,fq),e(fq,z1o),e(Dh,Q1o),e(J,W1o),e(J,Gh),e(Gh,vde),e(vde,H1o),e(Gh,U1o),e(Gh,mq),e(mq,J1o),e(Gh,Y1o),e(J,K1o),e(J,Oh),e(Oh,Fde),e(Fde,Z1o),e(Oh,e4o),e(Oh,gq),e(gq,o4o),e(Oh,r4o),e(J,t4o),e(J,Vh),e(Vh,Tde),e(Tde,a4o),e(Vh,n4o),e(Vh,hq),e(hq,s4o),e(Vh,l4o),e(J,i4o),e(J,Xh),e(Xh,Mde),e(Mde,d4o),e(Xh,c4o),e(Xh,pq),e(pq,f4o),e(Xh,m4o),e(J,g4o),e(J,zh),e(zh,Ede),e(Ede,h4o),e(zh,p4o),e(zh,_q),e(_q,_4o),e(zh,u4o),e(J,b4o),e(J,Qh),e(Qh,Cde),e(Cde,v4o),e(Qh,F4o),e(Qh,uq),e(uq,T4o),e(Qh,M4o),e(J,E4o),e(J,Wh),e(Wh,wde),e(wde,C4o),e(Wh,w4o),e(Wh,bq),e(bq,A4o),e(Wh,L4o),e(J,y4o),e(J,Hh),e(Hh,Ade),e(Ade,x4o),e(Hh,$4o),e(Hh,vq),e(vq,k4o),e(Hh,S4o),e(J,R4o),e(J,Uh),e(Uh,Lde),e(Lde,P4o),e(Uh,B4o),e(Uh,Fq),e(Fq,I4o),e(Uh,N4o),e(J,q4o),e(J,Jh),e(Jh,yde),e(yde,j4o),e(Jh,D4o),e(Jh,Tq),e(Tq,G4o),e(Jh,O4o),e(J,V4o),e(J,Yh),e(Yh,xde),e(xde,X4o),e(Yh,z4o),e(Yh,Mq),e(Mq,Q4o),e(Yh,W4o),e(J,H4o),e(J,Kh),e(Kh,$de),e($de,U4o),e(Kh,J4o),e(Kh,Eq),e(Eq,Y4o),e(Kh,K4o),e(J,Z4o),e(J,Zh),e(Zh,kde),e(kde,e2o),e(Zh,o2o),e(Zh,Cq),e(Cq,r2o),e(Zh,t2o),e(J,a2o),e(J,ep),e(ep,Sde),e(Sde,n2o),e(ep,s2o),e(ep,wq),e(wq,l2o),e(ep,i2o),e(J,d2o),e(J,op),e(op,Rde),e(Rde,c2o),e(op,f2o),e(op,Aq),e(Aq,m2o),e(op,g2o),e(J,h2o),e(J,rp),e(rp,Pde),e(Pde,p2o),e(rp,_2o),e(rp,Lq),e(Lq,u2o),e(rp,b2o),e(J,v2o),e(J,tp),e(tp,Bde),e(Bde,F2o),e(tp,T2o),e(tp,yq),e(yq,M2o),e(tp,E2o),e(J,C2o),e(J,ap),e(ap,Ide),e(Ide,w2o),e(ap,A2o),e(ap,xq),e(xq,L2o),e(ap,y2o),e(J,x2o),e(J,np),e(np,Nde),e(Nde,$2o),e(np,k2o),e(np,$q),e($q,S2o),e(np,R2o),e(J,P2o),e(J,sp),e(sp,qde),e(qde,B2o),e(sp,I2o),e(sp,kq),e(kq,N2o),e(sp,q2o),e(J,j2o),e(J,lp),e(lp,jde),e(jde,D2o),e(lp,G2o),e(lp,Sq),e(Sq,O2o),e(lp,V2o),e(J,X2o),e(J,ip),e(ip,Dde),e(Dde,z2o),e(ip,Q2o),e(ip,Rq),e(Rq,W2o),e(ip,H2o),e(J,U2o),e(J,dp),e(dp,Gde),e(Gde,J2o),e(dp,Y2o),e(dp,Pq),e(Pq,K2o),e(dp,Z2o),e(J,ebo),e(J,cp),e(cp,Ode),e(Ode,obo),e(cp,rbo),e(cp,Bq),e(Bq,tbo),e(cp,abo),e(J,nbo),e(J,fp),e(fp,Vde),e(Vde,sbo),e(fp,lbo),e(fp,Iq),e(Iq,ibo),e(fp,dbo),e(J,cbo),e(J,mp),e(mp,Xde),e(Xde,fbo),e(mp,mbo),e(mp,Nq),e(Nq,gbo),e(mp,hbo),e(J,pbo),e(J,gp),e(gp,zde),e(zde,_bo),e(gp,ubo),e(gp,qq),e(qq,bbo),e(gp,vbo),e(J,Fbo),e(J,hp),e(hp,Qde),e(Qde,Tbo),e(hp,Mbo),e(hp,jq),e(jq,Ebo),e(hp,Cbo),e(J,wbo),e(J,pp),e(pp,Wde),e(Wde,Abo),e(pp,Lbo),e(pp,Dq),e(Dq,ybo),e(pp,xbo),e(J,$bo),e(J,_p),e(_p,Hde),e(Hde,kbo),e(_p,Sbo),e(_p,Gq),e(Gq,Rbo),e(_p,Pbo),e(J,Bbo),e(J,up),e(up,Ude),e(Ude,Ibo),e(up,Nbo),e(up,Oq),e(Oq,qbo),e(up,jbo),e(J,Dbo),e(J,bp),e(bp,Jde),e(Jde,Gbo),e(bp,Obo),e(bp,Vq),e(Vq,Vbo),e(bp,Xbo),e(Ue,zbo),M(vp,Ue,null),e(Ue,Qbo),M(Fp,Ue,null),e(yo,Wbo),e(yo,Tp),M(RL,Tp,null),e(Tp,Hbo),e(Tp,Yde),e(Yde,Ubo),b(f,zXe,u),b(f,Gi,u),e(Gi,Mp),e(Mp,Kde),M(PL,Kde,null),e(Gi,Jbo),e(Gi,Zde),e(Zde,Ybo),b(f,QXe,u),b(f,xo,u),M(BL,xo,null),e(xo,Kbo),e(xo,IL),e(IL,Zbo),e(IL,Xq),e(Xq,evo),e(IL,ovo),e(xo,rvo),e(xo,NL),e(NL,tvo),e(NL,ece),e(ece,avo),e(NL,nvo),e(xo,svo),e(xo,Je),M(qL,Je,null),e(Je,lvo),e(Je,oce),e(oce,ivo),e(Je,dvo),e(Je,Oi),e(Oi,cvo),e(Oi,rce),e(rce,fvo),e(Oi,mvo),e(Oi,tce),e(tce,gvo),e(Oi,hvo),e(Je,pvo),e(Je,pe),e(pe,Ep),e(Ep,ace),e(ace,_vo),e(Ep,uvo),e(Ep,zq),e(zq,bvo),e(Ep,vvo),e(pe,Fvo),e(pe,Cp),e(Cp,nce),e(nce,Tvo),e(Cp,Mvo),e(Cp,Qq),e(Qq,Evo),e(Cp,Cvo),e(pe,wvo),e(pe,wp),e(wp,sce),e(sce,Avo),e(wp,Lvo),e(wp,Wq),e(Wq,yvo),e(wp,xvo),e(pe,$vo),e(pe,Ap),e(Ap,lce),e(lce,kvo),e(Ap,Svo),e(Ap,Hq),e(Hq,Rvo),e(Ap,Pvo),e(pe,Bvo),e(pe,Lp),e(Lp,ice),e(ice,Ivo),e(Lp,Nvo),e(Lp,Uq),e(Uq,qvo),e(Lp,jvo),e(pe,Dvo),e(pe,yp),e(yp,dce),e(dce,Gvo),e(yp,Ovo),e(yp,Jq),e(Jq,Vvo),e(yp,Xvo),e(pe,zvo),e(pe,xp),e(xp,cce),e(cce,Qvo),e(xp,Wvo),e(xp,Yq),e(Yq,Hvo),e(xp,Uvo),e(pe,Jvo),e(pe,$p),e($p,fce),e(fce,Yvo),e($p,Kvo),e($p,Kq),e(Kq,Zvo),e($p,eFo),e(pe,oFo),e(pe,kp),e(kp,mce),e(mce,rFo),e(kp,tFo),e(kp,Zq),e(Zq,aFo),e(kp,nFo),e(pe,sFo),e(pe,Sp),e(Sp,gce),e(gce,lFo),e(Sp,iFo),e(Sp,ej),e(ej,dFo),e(Sp,cFo),e(pe,fFo),e(pe,Rp),e(Rp,hce),e(hce,mFo),e(Rp,gFo),e(Rp,oj),e(oj,hFo),e(Rp,pFo),e(pe,_Fo),e(pe,Pp),e(Pp,pce),e(pce,uFo),e(Pp,bFo),e(Pp,rj),e(rj,vFo),e(Pp,FFo),e(pe,TFo),e(pe,Bp),e(Bp,_ce),e(_ce,MFo),e(Bp,EFo),e(Bp,tj),e(tj,CFo),e(Bp,wFo),e(pe,AFo),e(pe,Ip),e(Ip,uce),e(uce,LFo),e(Ip,yFo),e(Ip,aj),e(aj,xFo),e(Ip,$Fo),e(pe,kFo),e(pe,Np),e(Np,bce),e(bce,SFo),e(Np,RFo),e(Np,nj),e(nj,PFo),e(Np,BFo),e(pe,IFo),e(pe,qp),e(qp,vce),e(vce,NFo),e(qp,qFo),e(qp,sj),e(sj,jFo),e(qp,DFo),e(pe,GFo),e(pe,jp),e(jp,Fce),e(Fce,OFo),e(jp,VFo),e(jp,lj),e(lj,XFo),e(jp,zFo),e(pe,QFo),e(pe,Dp),e(Dp,Tce),e(Tce,WFo),e(Dp,HFo),e(Dp,ij),e(ij,UFo),e(Dp,JFo),e(Je,YFo),M(Gp,Je,null),e(Je,KFo),M(Op,Je,null),e(xo,ZFo),e(xo,Vp),M(jL,Vp,null),e(Vp,e6o),e(Vp,Mce),e(Mce,o6o),b(f,WXe,u),b(f,Vi,u),e(Vi,Xp),e(Xp,Ece),M(DL,Ece,null),e(Vi,r6o),e(Vi,Cce),e(Cce,t6o),b(f,HXe,u),b(f,$o,u),M(GL,$o,null),e($o,a6o),e($o,Xi),e(Xi,n6o),e(Xi,dj),e(dj,s6o),e(Xi,l6o),e(Xi,cj),e(cj,i6o),e(Xi,d6o),e($o,c6o),e($o,OL),e(OL,f6o),e(OL,wce),e(wce,m6o),e(OL,g6o),e($o,h6o),e($o,it),M(VL,it,null),e(it,p6o),e(it,Ace),e(Ace,_6o),e(it,u6o),e(it,zi),e(zi,b6o),e(zi,Lce),e(Lce,v6o),e(zi,F6o),e(zi,fj),e(fj,T6o),e(zi,M6o),e(it,E6o),M(zp,it,null),e($o,C6o),e($o,Ye),M(XL,Ye,null),e(Ye,w6o),e(Ye,yce),e(yce,A6o),e(Ye,L6o),e(Ye,Ia),e(Ia,y6o),e(Ia,xce),e(xce,x6o),e(Ia,$6o),e(Ia,$ce),e($ce,k6o),e(Ia,S6o),e(Ia,kce),e(kce,R6o),e(Ia,P6o),e(Ye,B6o),e(Ye,y),e(y,Qp),e(Qp,Sce),e(Sce,I6o),e(Qp,N6o),e(Qp,mj),e(mj,q6o),e(Qp,j6o),e(y,D6o),e(y,Wp),e(Wp,Rce),e(Rce,G6o),e(Wp,O6o),e(Wp,gj),e(gj,V6o),e(Wp,X6o),e(y,z6o),e(y,Hp),e(Hp,Pce),e(Pce,Q6o),e(Hp,W6o),e(Hp,hj),e(hj,H6o),e(Hp,U6o),e(y,J6o),e(y,Up),e(Up,Bce),e(Bce,Y6o),e(Up,K6o),e(Up,pj),e(pj,Z6o),e(Up,eTo),e(y,oTo),e(y,Jp),e(Jp,Ice),e(Ice,rTo),e(Jp,tTo),e(Jp,_j),e(_j,aTo),e(Jp,nTo),e(y,sTo),e(y,Yp),e(Yp,Nce),e(Nce,lTo),e(Yp,iTo),e(Yp,uj),e(uj,dTo),e(Yp,cTo),e(y,fTo),e(y,Kp),e(Kp,qce),e(qce,mTo),e(Kp,gTo),e(Kp,bj),e(bj,hTo),e(Kp,pTo),e(y,_To),e(y,Zp),e(Zp,jce),e(jce,uTo),e(Zp,bTo),e(Zp,vj),e(vj,vTo),e(Zp,FTo),e(y,TTo),e(y,e_),e(e_,Dce),e(Dce,MTo),e(e_,ETo),e(e_,Fj),e(Fj,CTo),e(e_,wTo),e(y,ATo),e(y,o_),e(o_,Gce),e(Gce,LTo),e(o_,yTo),e(o_,Tj),e(Tj,xTo),e(o_,$To),e(y,kTo),e(y,r_),e(r_,Oce),e(Oce,STo),e(r_,RTo),e(r_,Mj),e(Mj,PTo),e(r_,BTo),e(y,ITo),e(y,t_),e(t_,Vce),e(Vce,NTo),e(t_,qTo),e(t_,Ej),e(Ej,jTo),e(t_,DTo),e(y,GTo),e(y,a_),e(a_,Xce),e(Xce,OTo),e(a_,VTo),e(a_,Cj),e(Cj,XTo),e(a_,zTo),e(y,QTo),e(y,n_),e(n_,zce),e(zce,WTo),e(n_,HTo),e(n_,wj),e(wj,UTo),e(n_,JTo),e(y,YTo),e(y,s_),e(s_,Qce),e(Qce,KTo),e(s_,ZTo),e(s_,Aj),e(Aj,e7o),e(s_,o7o),e(y,r7o),e(y,l_),e(l_,Wce),e(Wce,t7o),e(l_,a7o),e(l_,Lj),e(Lj,n7o),e(l_,s7o),e(y,l7o),e(y,i_),e(i_,Hce),e(Hce,i7o),e(i_,d7o),e(i_,yj),e(yj,c7o),e(i_,f7o),e(y,m7o),e(y,d_),e(d_,Uce),e(Uce,g7o),e(d_,h7o),e(d_,xj),e(xj,p7o),e(d_,_7o),e(y,u7o),e(y,c_),e(c_,Jce),e(Jce,b7o),e(c_,v7o),e(c_,$j),e($j,F7o),e(c_,T7o),e(y,M7o),e(y,f_),e(f_,Yce),e(Yce,E7o),e(f_,C7o),e(f_,kj),e(kj,w7o),e(f_,A7o),e(y,L7o),e(y,m_),e(m_,Kce),e(Kce,y7o),e(m_,x7o),e(m_,Sj),e(Sj,$7o),e(m_,k7o),e(y,S7o),e(y,g_),e(g_,Zce),e(Zce,R7o),e(g_,P7o),e(g_,Rj),e(Rj,B7o),e(g_,I7o),e(y,N7o),e(y,h_),e(h_,efe),e(efe,q7o),e(h_,j7o),e(h_,Pj),e(Pj,D7o),e(h_,G7o),e(y,O7o),e(y,p_),e(p_,ofe),e(ofe,V7o),e(p_,X7o),e(p_,Bj),e(Bj,z7o),e(p_,Q7o),e(y,W7o),e(y,__),e(__,rfe),e(rfe,H7o),e(__,U7o),e(__,Ij),e(Ij,J7o),e(__,Y7o),e(y,K7o),e(y,u_),e(u_,tfe),e(tfe,Z7o),e(u_,e9o),e(u_,Nj),e(Nj,o9o),e(u_,r9o),e(y,t9o),e(y,b_),e(b_,afe),e(afe,a9o),e(b_,n9o),e(b_,qj),e(qj,s9o),e(b_,l9o),e(y,i9o),e(y,v_),e(v_,nfe),e(nfe,d9o),e(v_,c9o),e(v_,jj),e(jj,f9o),e(v_,m9o),e(y,g9o),e(y,F_),e(F_,sfe),e(sfe,h9o),e(F_,p9o),e(F_,Dj),e(Dj,_9o),e(F_,u9o),e(y,b9o),e(y,T_),e(T_,lfe),e(lfe,v9o),e(T_,F9o),e(T_,Gj),e(Gj,T9o),e(T_,M9o),e(y,E9o),e(y,M_),e(M_,ife),e(ife,C9o),e(M_,w9o),e(M_,Oj),e(Oj,A9o),e(M_,L9o),e(y,y9o),e(y,E_),e(E_,dfe),e(dfe,x9o),e(E_,$9o),e(E_,Vj),e(Vj,k9o),e(E_,S9o),e(y,R9o),e(y,C_),e(C_,cfe),e(cfe,P9o),e(C_,B9o),e(C_,Xj),e(Xj,I9o),e(C_,N9o),e(y,q9o),e(y,w_),e(w_,ffe),e(ffe,j9o),e(w_,D9o),e(w_,zj),e(zj,G9o),e(w_,O9o),e(y,V9o),e(y,Us),e(Us,mfe),e(mfe,X9o),e(Us,z9o),e(Us,Qj),e(Qj,Q9o),e(Us,W9o),e(Us,Wj),e(Wj,H9o),e(Us,U9o),e(y,J9o),e(y,A_),e(A_,gfe),e(gfe,Y9o),e(A_,K9o),e(A_,Hj),e(Hj,Z9o),e(A_,eMo),e(y,oMo),e(y,L_),e(L_,hfe),e(hfe,rMo),e(L_,tMo),e(L_,Uj),e(Uj,aMo),e(L_,nMo),e(y,sMo),e(y,y_),e(y_,pfe),e(pfe,lMo),e(y_,iMo),e(y_,Jj),e(Jj,dMo),e(y_,cMo),e(y,fMo),e(y,x_),e(x_,_fe),e(_fe,mMo),e(x_,gMo),e(x_,Yj),e(Yj,hMo),e(x_,pMo),e(y,_Mo),e(y,$_),e($_,ufe),e(ufe,uMo),e($_,bMo),e($_,Kj),e(Kj,vMo),e($_,FMo),e(y,TMo),e(y,k_),e(k_,bfe),e(bfe,MMo),e(k_,EMo),e(k_,Zj),e(Zj,CMo),e(k_,wMo),e(y,AMo),e(y,S_),e(S_,vfe),e(vfe,LMo),e(S_,yMo),e(S_,eD),e(eD,xMo),e(S_,$Mo),e(y,kMo),e(y,R_),e(R_,Ffe),e(Ffe,SMo),e(R_,RMo),e(R_,oD),e(oD,PMo),e(R_,BMo),e(y,IMo),e(y,P_),e(P_,Tfe),e(Tfe,NMo),e(P_,qMo),e(P_,rD),e(rD,jMo),e(P_,DMo),e(y,GMo),e(y,B_),e(B_,Mfe),e(Mfe,OMo),e(B_,VMo),e(B_,tD),e(tD,XMo),e(B_,zMo),e(y,QMo),e(y,I_),e(I_,Efe),e(Efe,WMo),e(I_,HMo),e(I_,aD),e(aD,UMo),e(I_,JMo),e(y,YMo),e(y,N_),e(N_,Cfe),e(Cfe,KMo),e(N_,ZMo),e(N_,nD),e(nD,eEo),e(N_,oEo),e(y,rEo),e(y,q_),e(q_,wfe),e(wfe,tEo),e(q_,aEo),e(q_,sD),e(sD,nEo),e(q_,sEo),e(y,lEo),e(y,j_),e(j_,Afe),e(Afe,iEo),e(j_,dEo),e(j_,lD),e(lD,cEo),e(j_,fEo),e(y,mEo),e(y,D_),e(D_,Lfe),e(Lfe,gEo),e(D_,hEo),e(D_,iD),e(iD,pEo),e(D_,_Eo),e(y,uEo),e(y,G_),e(G_,yfe),e(yfe,bEo),e(G_,vEo),e(G_,dD),e(dD,FEo),e(G_,TEo),e(y,MEo),e(y,O_),e(O_,xfe),e(xfe,EEo),e(O_,CEo),e(O_,cD),e(cD,wEo),e(O_,AEo),e(y,LEo),e(y,V_),e(V_,$fe),e($fe,yEo),e(V_,xEo),e(V_,fD),e(fD,$Eo),e(V_,kEo),e(y,SEo),e(y,X_),e(X_,kfe),e(kfe,REo),e(X_,PEo),e(X_,mD),e(mD,BEo),e(X_,IEo),e(y,NEo),e(y,z_),e(z_,Sfe),e(Sfe,qEo),e(z_,jEo),e(z_,gD),e(gD,DEo),e(z_,GEo),e(y,OEo),e(y,Q_),e(Q_,Rfe),e(Rfe,VEo),e(Q_,XEo),e(Q_,hD),e(hD,zEo),e(Q_,QEo),e(y,WEo),e(y,W_),e(W_,Pfe),e(Pfe,HEo),e(W_,UEo),e(W_,pD),e(pD,JEo),e(W_,YEo),e(y,KEo),e(y,H_),e(H_,Bfe),e(Bfe,ZEo),e(H_,eCo),e(H_,_D),e(_D,oCo),e(H_,rCo),e(y,tCo),e(y,U_),e(U_,Ife),e(Ife,aCo),e(U_,nCo),e(U_,uD),e(uD,sCo),e(U_,lCo),e(y,iCo),e(y,J_),e(J_,Nfe),e(Nfe,dCo),e(J_,cCo),e(J_,bD),e(bD,fCo),e(J_,mCo),e(y,gCo),e(y,Y_),e(Y_,qfe),e(qfe,hCo),e(Y_,pCo),e(Y_,vD),e(vD,_Co),e(Y_,uCo),e(y,bCo),e(y,K_),e(K_,jfe),e(jfe,vCo),e(K_,FCo),e(K_,FD),e(FD,TCo),e(K_,MCo),e(y,ECo),e(y,Z_),e(Z_,Dfe),e(Dfe,CCo),e(Z_,wCo),e(Z_,TD),e(TD,ACo),e(Z_,LCo),e(y,yCo),e(y,eu),e(eu,Gfe),e(Gfe,xCo),e(eu,$Co),e(eu,MD),e(MD,kCo),e(eu,SCo),e(y,RCo),e(y,ou),e(ou,Ofe),e(Ofe,PCo),e(ou,BCo),e(ou,ED),e(ED,ICo),e(ou,NCo),e(y,qCo),e(y,ru),e(ru,Vfe),e(Vfe,jCo),e(ru,DCo),e(ru,CD),e(CD,GCo),e(ru,OCo),e(y,VCo),e(y,tu),e(tu,Xfe),e(Xfe,XCo),e(tu,zCo),e(tu,wD),e(wD,QCo),e(tu,WCo),e(y,HCo),e(y,au),e(au,zfe),e(zfe,UCo),e(au,JCo),e(au,AD),e(AD,YCo),e(au,KCo),e(y,ZCo),e(y,nu),e(nu,Qfe),e(Qfe,e5o),e(nu,o5o),e(nu,LD),e(LD,r5o),e(nu,t5o),e(y,a5o),e(y,su),e(su,Wfe),e(Wfe,n5o),e(su,s5o),e(su,yD),e(yD,l5o),e(su,i5o),e(y,d5o),e(y,lu),e(lu,Hfe),e(Hfe,c5o),e(lu,f5o),e(lu,xD),e(xD,m5o),e(lu,g5o),e(y,h5o),e(y,iu),e(iu,Ufe),e(Ufe,p5o),e(iu,_5o),e(iu,$D),e($D,u5o),e(iu,b5o),e(y,v5o),e(y,du),e(du,Jfe),e(Jfe,F5o),e(du,T5o),e(du,kD),e(kD,M5o),e(du,E5o),e(y,C5o),e(y,cu),e(cu,Yfe),e(Yfe,w5o),e(cu,A5o),e(cu,SD),e(SD,L5o),e(cu,y5o),e(y,x5o),e(y,fu),e(fu,Kfe),e(Kfe,$5o),e(fu,k5o),e(fu,RD),e(RD,S5o),e(fu,R5o),e(y,P5o),e(y,mu),e(mu,Zfe),e(Zfe,B5o),e(mu,I5o),e(mu,PD),e(PD,N5o),e(mu,q5o),e(y,j5o),e(y,gu),e(gu,eme),e(eme,D5o),e(gu,G5o),e(gu,BD),e(BD,O5o),e(gu,V5o),e(y,X5o),e(y,hu),e(hu,ome),e(ome,z5o),e(hu,Q5o),e(hu,ID),e(ID,W5o),e(hu,H5o),e(y,U5o),e(y,pu),e(pu,rme),e(rme,J5o),e(pu,Y5o),e(pu,ND),e(ND,K5o),e(pu,Z5o),e(y,e3o),e(y,_u),e(_u,tme),e(tme,o3o),e(_u,r3o),e(_u,qD),e(qD,t3o),e(_u,a3o),e(y,n3o),e(y,uu),e(uu,ame),e(ame,s3o),e(uu,l3o),e(uu,jD),e(jD,i3o),e(uu,d3o),e(y,c3o),e(y,bu),e(bu,nme),e(nme,f3o),e(bu,m3o),e(bu,DD),e(DD,g3o),e(bu,h3o),e(y,p3o),e(y,vu),e(vu,sme),e(sme,_3o),e(vu,u3o),e(vu,GD),e(GD,b3o),e(vu,v3o),e(y,F3o),e(y,Fu),e(Fu,lme),e(lme,T3o),e(Fu,M3o),e(Fu,OD),e(OD,E3o),e(Fu,C3o),e(y,w3o),e(y,Tu),e(Tu,ime),e(ime,A3o),e(Tu,L3o),e(Tu,VD),e(VD,y3o),e(Tu,x3o),e(y,$3o),e(y,Mu),e(Mu,dme),e(dme,k3o),e(Mu,S3o),e(Mu,XD),e(XD,R3o),e(Mu,P3o),e(y,B3o),e(y,Eu),e(Eu,cme),e(cme,I3o),e(Eu,N3o),e(Eu,zD),e(zD,q3o),e(Eu,j3o),e(y,D3o),e(y,Cu),e(Cu,fme),e(fme,G3o),e(Cu,O3o),e(Cu,QD),e(QD,V3o),e(Cu,X3o),e(y,z3o),e(y,wu),e(wu,mme),e(mme,Q3o),e(wu,W3o),e(wu,WD),e(WD,H3o),e(wu,U3o),e(y,J3o),e(y,Au),e(Au,gme),e(gme,Y3o),e(Au,K3o),e(Au,HD),e(HD,Z3o),e(Au,e0o),e(y,o0o),e(y,Lu),e(Lu,hme),e(hme,r0o),e(Lu,t0o),e(Lu,UD),e(UD,a0o),e(Lu,n0o),e(y,s0o),e(y,yu),e(yu,pme),e(pme,l0o),e(yu,i0o),e(yu,JD),e(JD,d0o),e(yu,c0o),e(y,f0o),e(y,xu),e(xu,_me),e(_me,m0o),e(xu,g0o),e(xu,YD),e(YD,h0o),e(xu,p0o),e(y,_0o),e(y,$u),e($u,ume),e(ume,u0o),e($u,b0o),e($u,KD),e(KD,v0o),e($u,F0o),e(y,T0o),e(y,ku),e(ku,bme),e(bme,M0o),e(ku,E0o),e(ku,ZD),e(ZD,C0o),e(ku,w0o),e(y,A0o),e(y,Su),e(Su,vme),e(vme,L0o),e(Su,y0o),e(Su,eG),e(eG,x0o),e(Su,$0o),e(y,k0o),e(y,Ru),e(Ru,Fme),e(Fme,S0o),e(Ru,R0o),e(Ru,oG),e(oG,P0o),e(Ru,B0o),e(y,I0o),e(y,Pu),e(Pu,Tme),e(Tme,N0o),e(Pu,q0o),e(Pu,rG),e(rG,j0o),e(Pu,D0o),e(y,G0o),e(y,Bu),e(Bu,Mme),e(Mme,O0o),e(Bu,V0o),e(Bu,tG),e(tG,X0o),e(Bu,z0o),e(y,Q0o),e(y,Iu),e(Iu,Eme),e(Eme,W0o),e(Iu,H0o),e(Iu,aG),e(aG,U0o),e(Iu,J0o),e(y,Y0o),e(y,Nu),e(Nu,Cme),e(Cme,K0o),e(Nu,Z0o),e(Nu,nG),e(nG,ewo),e(Nu,owo),e(y,rwo),e(y,qu),e(qu,wme),e(wme,two),e(qu,awo),e(qu,sG),e(sG,nwo),e(qu,swo),e(y,lwo),e(y,ju),e(ju,Ame),e(Ame,iwo),e(ju,dwo),e(ju,lG),e(lG,cwo),e(ju,fwo),e(y,mwo),e(y,Du),e(Du,Lme),e(Lme,gwo),e(Du,hwo),e(Du,iG),e(iG,pwo),e(Du,_wo),e(y,uwo),e(y,Gu),e(Gu,yme),e(yme,bwo),e(Gu,vwo),e(Gu,dG),e(dG,Fwo),e(Gu,Two),e(y,Mwo),e(y,Ou),e(Ou,xme),e(xme,Ewo),e(Ou,Cwo),e(Ou,cG),e(cG,wwo),e(Ou,Awo),e(y,Lwo),e(y,Vu),e(Vu,$me),e($me,ywo),e(Vu,xwo),e(Vu,fG),e(fG,$wo),e(Vu,kwo),e(y,Swo),e(y,Xu),e(Xu,kme),e(kme,Rwo),e(Xu,Pwo),e(Xu,mG),e(mG,Bwo),e(Xu,Iwo),e(y,Nwo),e(y,zu),e(zu,Sme),e(Sme,qwo),e(zu,jwo),e(zu,gG),e(gG,Dwo),e(zu,Gwo),e(y,Owo),e(y,Qu),e(Qu,Rme),e(Rme,Vwo),e(Qu,Xwo),e(Qu,hG),e(hG,zwo),e(Qu,Qwo),e(y,Wwo),e(y,Wu),e(Wu,Pme),e(Pme,Hwo),e(Wu,Uwo),e(Wu,pG),e(pG,Jwo),e(Wu,Ywo),e(y,Kwo),e(y,Hu),e(Hu,Bme),e(Bme,Zwo),e(Hu,eAo),e(Hu,_G),e(_G,oAo),e(Hu,rAo),e(y,tAo),e(y,Uu),e(Uu,Ime),e(Ime,aAo),e(Uu,nAo),e(Uu,uG),e(uG,sAo),e(Uu,lAo),e(Ye,iAo),e(Ye,Ju),e(Ju,dAo),e(Ju,Nme),e(Nme,cAo),e(Ju,fAo),e(Ju,qme),e(qme,mAo),e(Ye,gAo),M(Yu,Ye,null),b(f,UXe,u),b(f,Qi,u),e(Qi,Ku),e(Ku,jme),M(zL,jme,null),e(Qi,hAo),e(Qi,Dme),e(Dme,pAo),b(f,JXe,u),b(f,ko,u),M(QL,ko,null),e(ko,_Ao),e(ko,Wi),e(Wi,uAo),e(Wi,bG),e(bG,bAo),e(Wi,vAo),e(Wi,vG),e(vG,FAo),e(Wi,TAo),e(ko,MAo),e(ko,WL),e(WL,EAo),e(WL,Gme),e(Gme,CAo),e(WL,wAo),e(ko,AAo),e(ko,dt),M(HL,dt,null),e(dt,LAo),e(dt,Ome),e(Ome,yAo),e(dt,xAo),e(dt,Hi),e(Hi,$Ao),e(Hi,Vme),e(Vme,kAo),e(Hi,SAo),e(Hi,FG),e(FG,RAo),e(Hi,PAo),e(dt,BAo),M(Zu,dt,null),e(ko,IAo),e(ko,Ke),M(UL,Ke,null),e(Ke,NAo),e(Ke,Xme),e(Xme,qAo),e(Ke,jAo),e(Ke,Na),e(Na,DAo),e(Na,zme),e(zme,GAo),e(Na,OAo),e(Na,Qme),e(Qme,VAo),e(Na,XAo),e(Na,Wme),e(Wme,zAo),e(Na,QAo),e(Ke,WAo),e(Ke,G),e(G,e1),e(e1,Hme),e(Hme,HAo),e(e1,UAo),e(e1,TG),e(TG,JAo),e(e1,YAo),e(G,KAo),e(G,o1),e(o1,Ume),e(Ume,ZAo),e(o1,eLo),e(o1,MG),e(MG,oLo),e(o1,rLo),e(G,tLo),e(G,r1),e(r1,Jme),e(Jme,aLo),e(r1,nLo),e(r1,EG),e(EG,sLo),e(r1,lLo),e(G,iLo),e(G,t1),e(t1,Yme),e(Yme,dLo),e(t1,cLo),e(t1,CG),e(CG,fLo),e(t1,mLo),e(G,gLo),e(G,a1),e(a1,Kme),e(Kme,hLo),e(a1,pLo),e(a1,wG),e(wG,_Lo),e(a1,uLo),e(G,bLo),e(G,n1),e(n1,Zme),e(Zme,vLo),e(n1,FLo),e(n1,AG),e(AG,TLo),e(n1,MLo),e(G,ELo),e(G,s1),e(s1,ege),e(ege,CLo),e(s1,wLo),e(s1,LG),e(LG,ALo),e(s1,LLo),e(G,yLo),e(G,l1),e(l1,oge),e(oge,xLo),e(l1,$Lo),e(l1,yG),e(yG,kLo),e(l1,SLo),e(G,RLo),e(G,i1),e(i1,rge),e(rge,PLo),e(i1,BLo),e(i1,xG),e(xG,ILo),e(i1,NLo),e(G,qLo),e(G,d1),e(d1,tge),e(tge,jLo),e(d1,DLo),e(d1,$G),e($G,GLo),e(d1,OLo),e(G,VLo),e(G,c1),e(c1,age),e(age,XLo),e(c1,zLo),e(c1,kG),e(kG,QLo),e(c1,WLo),e(G,HLo),e(G,f1),e(f1,nge),e(nge,ULo),e(f1,JLo),e(f1,SG),e(SG,YLo),e(f1,KLo),e(G,ZLo),e(G,m1),e(m1,sge),e(sge,eyo),e(m1,oyo),e(m1,RG),e(RG,ryo),e(m1,tyo),e(G,ayo),e(G,g1),e(g1,lge),e(lge,nyo),e(g1,syo),e(g1,PG),e(PG,lyo),e(g1,iyo),e(G,dyo),e(G,h1),e(h1,ige),e(ige,cyo),e(h1,fyo),e(h1,BG),e(BG,myo),e(h1,gyo),e(G,hyo),e(G,p1),e(p1,dge),e(dge,pyo),e(p1,_yo),e(p1,IG),e(IG,uyo),e(p1,byo),e(G,vyo),e(G,_1),e(_1,cge),e(cge,Fyo),e(_1,Tyo),e(_1,NG),e(NG,Myo),e(_1,Eyo),e(G,Cyo),e(G,u1),e(u1,fge),e(fge,wyo),e(u1,Ayo),e(u1,qG),e(qG,Lyo),e(u1,yyo),e(G,xyo),e(G,b1),e(b1,mge),e(mge,$yo),e(b1,kyo),e(b1,jG),e(jG,Syo),e(b1,Ryo),e(G,Pyo),e(G,v1),e(v1,gge),e(gge,Byo),e(v1,Iyo),e(v1,DG),e(DG,Nyo),e(v1,qyo),e(G,jyo),e(G,F1),e(F1,hge),e(hge,Dyo),e(F1,Gyo),e(F1,GG),e(GG,Oyo),e(F1,Vyo),e(G,Xyo),e(G,T1),e(T1,pge),e(pge,zyo),e(T1,Qyo),e(T1,OG),e(OG,Wyo),e(T1,Hyo),e(G,Uyo),e(G,M1),e(M1,_ge),e(_ge,Jyo),e(M1,Yyo),e(M1,VG),e(VG,Kyo),e(M1,Zyo),e(G,e8o),e(G,E1),e(E1,uge),e(uge,o8o),e(E1,r8o),e(E1,XG),e(XG,t8o),e(E1,a8o),e(G,n8o),e(G,C1),e(C1,bge),e(bge,s8o),e(C1,l8o),e(C1,zG),e(zG,i8o),e(C1,d8o),e(G,c8o),e(G,w1),e(w1,vge),e(vge,f8o),e(w1,m8o),e(w1,QG),e(QG,g8o),e(w1,h8o),e(G,p8o),e(G,A1),e(A1,Fge),e(Fge,_8o),e(A1,u8o),e(A1,WG),e(WG,b8o),e(A1,v8o),e(G,F8o),e(G,L1),e(L1,Tge),e(Tge,T8o),e(L1,M8o),e(L1,HG),e(HG,E8o),e(L1,C8o),e(G,w8o),e(G,y1),e(y1,Mge),e(Mge,A8o),e(y1,L8o),e(y1,UG),e(UG,y8o),e(y1,x8o),e(G,$8o),e(G,x1),e(x1,Ege),e(Ege,k8o),e(x1,S8o),e(x1,JG),e(JG,R8o),e(x1,P8o),e(G,B8o),e(G,$1),e($1,Cge),e(Cge,I8o),e($1,N8o),e($1,YG),e(YG,q8o),e($1,j8o),e(G,D8o),e(G,k1),e(k1,wge),e(wge,G8o),e(k1,O8o),e(k1,KG),e(KG,V8o),e(k1,X8o),e(G,z8o),e(G,S1),e(S1,Age),e(Age,Q8o),e(S1,W8o),e(S1,ZG),e(ZG,H8o),e(S1,U8o),e(G,J8o),e(G,R1),e(R1,Lge),e(Lge,Y8o),e(R1,K8o),e(R1,eO),e(eO,Z8o),e(R1,exo),e(G,oxo),e(G,P1),e(P1,yge),e(yge,rxo),e(P1,txo),e(P1,oO),e(oO,axo),e(P1,nxo),e(G,sxo),e(G,B1),e(B1,xge),e(xge,lxo),e(B1,ixo),e(B1,rO),e(rO,dxo),e(B1,cxo),e(G,fxo),e(G,I1),e(I1,$ge),e($ge,mxo),e(I1,gxo),e(I1,tO),e(tO,hxo),e(I1,pxo),e(G,_xo),e(G,N1),e(N1,kge),e(kge,uxo),e(N1,bxo),e(N1,aO),e(aO,vxo),e(N1,Fxo),e(G,Txo),e(G,q1),e(q1,Sge),e(Sge,Mxo),e(q1,Exo),e(q1,nO),e(nO,Cxo),e(q1,wxo),e(G,Axo),e(G,j1),e(j1,Rge),e(Rge,Lxo),e(j1,yxo),e(j1,sO),e(sO,xxo),e(j1,$xo),e(G,kxo),e(G,D1),e(D1,Pge),e(Pge,Sxo),e(D1,Rxo),e(D1,lO),e(lO,Pxo),e(D1,Bxo),e(G,Ixo),e(G,G1),e(G1,Bge),e(Bge,Nxo),e(G1,qxo),e(G1,iO),e(iO,jxo),e(G1,Dxo),e(G,Gxo),e(G,O1),e(O1,Ige),e(Ige,Oxo),e(O1,Vxo),e(O1,dO),e(dO,Xxo),e(O1,zxo),e(G,Qxo),e(G,V1),e(V1,Nge),e(Nge,Wxo),e(V1,Hxo),e(V1,cO),e(cO,Uxo),e(V1,Jxo),e(G,Yxo),e(G,X1),e(X1,qge),e(qge,Kxo),e(X1,Zxo),e(X1,fO),e(fO,e$o),e(X1,o$o),e(Ke,r$o),e(Ke,z1),e(z1,t$o),e(z1,jge),e(jge,a$o),e(z1,n$o),e(z1,Dge),e(Dge,s$o),e(Ke,l$o),M(Q1,Ke,null),b(f,YXe,u),b(f,Ui,u),e(Ui,W1),e(W1,Gge),M(JL,Gge,null),e(Ui,i$o),e(Ui,Oge),e(Oge,d$o),b(f,KXe,u),b(f,So,u),M(YL,So,null),e(So,c$o),e(So,Ji),e(Ji,f$o),e(Ji,mO),e(mO,m$o),e(Ji,g$o),e(Ji,gO),e(gO,h$o),e(Ji,p$o),e(So,_$o),e(So,KL),e(KL,u$o),e(KL,Vge),e(Vge,b$o),e(KL,v$o),e(So,F$o),e(So,ct),M(ZL,ct,null),e(ct,T$o),e(ct,Xge),e(Xge,M$o),e(ct,E$o),e(ct,Yi),e(Yi,C$o),e(Yi,zge),e(zge,w$o),e(Yi,A$o),e(Yi,hO),e(hO,L$o),e(Yi,y$o),e(ct,x$o),M(H1,ct,null),e(So,$$o),e(So,Ze),M(ey,Ze,null),e(Ze,k$o),e(Ze,Qge),e(Qge,S$o),e(Ze,R$o),e(Ze,qa),e(qa,P$o),e(qa,Wge),e(Wge,B$o),e(qa,I$o),e(qa,Hge),e(Hge,N$o),e(qa,q$o),e(qa,Uge),e(Uge,j$o),e(qa,D$o),e(Ze,G$o),e(Ze,z),e(z,U1),e(U1,Jge),e(Jge,O$o),e(U1,V$o),e(U1,pO),e(pO,X$o),e(U1,z$o),e(z,Q$o),e(z,J1),e(J1,Yge),e(Yge,W$o),e(J1,H$o),e(J1,_O),e(_O,U$o),e(J1,J$o),e(z,Y$o),e(z,Y1),e(Y1,Kge),e(Kge,K$o),e(Y1,Z$o),e(Y1,uO),e(uO,eko),e(Y1,oko),e(z,rko),e(z,K1),e(K1,Zge),e(Zge,tko),e(K1,ako),e(K1,bO),e(bO,nko),e(K1,sko),e(z,lko),e(z,Z1),e(Z1,ehe),e(ehe,iko),e(Z1,dko),e(Z1,vO),e(vO,cko),e(Z1,fko),e(z,mko),e(z,e4),e(e4,ohe),e(ohe,gko),e(e4,hko),e(e4,FO),e(FO,pko),e(e4,_ko),e(z,uko),e(z,o4),e(o4,rhe),e(rhe,bko),e(o4,vko),e(o4,TO),e(TO,Fko),e(o4,Tko),e(z,Mko),e(z,r4),e(r4,the),e(the,Eko),e(r4,Cko),e(r4,MO),e(MO,wko),e(r4,Ako),e(z,Lko),e(z,t4),e(t4,ahe),e(ahe,yko),e(t4,xko),e(t4,EO),e(EO,$ko),e(t4,kko),e(z,Sko),e(z,a4),e(a4,nhe),e(nhe,Rko),e(a4,Pko),e(a4,CO),e(CO,Bko),e(a4,Iko),e(z,Nko),e(z,n4),e(n4,she),e(she,qko),e(n4,jko),e(n4,wO),e(wO,Dko),e(n4,Gko),e(z,Oko),e(z,s4),e(s4,lhe),e(lhe,Vko),e(s4,Xko),e(s4,AO),e(AO,zko),e(s4,Qko),e(z,Wko),e(z,l4),e(l4,ihe),e(ihe,Hko),e(l4,Uko),e(l4,LO),e(LO,Jko),e(l4,Yko),e(z,Kko),e(z,i4),e(i4,dhe),e(dhe,Zko),e(i4,eSo),e(i4,yO),e(yO,oSo),e(i4,rSo),e(z,tSo),e(z,d4),e(d4,che),e(che,aSo),e(d4,nSo),e(d4,xO),e(xO,sSo),e(d4,lSo),e(z,iSo),e(z,c4),e(c4,fhe),e(fhe,dSo),e(c4,cSo),e(c4,$O),e($O,fSo),e(c4,mSo),e(z,gSo),e(z,f4),e(f4,mhe),e(mhe,hSo),e(f4,pSo),e(f4,kO),e(kO,_So),e(f4,uSo),e(z,bSo),e(z,m4),e(m4,ghe),e(ghe,vSo),e(m4,FSo),e(m4,SO),e(SO,TSo),e(m4,MSo),e(z,ESo),e(z,g4),e(g4,hhe),e(hhe,CSo),e(g4,wSo),e(g4,RO),e(RO,ASo),e(g4,LSo),e(z,ySo),e(z,h4),e(h4,phe),e(phe,xSo),e(h4,$So),e(h4,PO),e(PO,kSo),e(h4,SSo),e(z,RSo),e(z,p4),e(p4,_he),e(_he,PSo),e(p4,BSo),e(p4,BO),e(BO,ISo),e(p4,NSo),e(z,qSo),e(z,_4),e(_4,uhe),e(uhe,jSo),e(_4,DSo),e(_4,IO),e(IO,GSo),e(_4,OSo),e(z,VSo),e(z,u4),e(u4,bhe),e(bhe,XSo),e(u4,zSo),e(u4,NO),e(NO,QSo),e(u4,WSo),e(z,HSo),e(z,b4),e(b4,vhe),e(vhe,USo),e(b4,JSo),e(b4,qO),e(qO,YSo),e(b4,KSo),e(z,ZSo),e(z,v4),e(v4,Fhe),e(Fhe,eRo),e(v4,oRo),e(v4,jO),e(jO,rRo),e(v4,tRo),e(z,aRo),e(z,F4),e(F4,The),e(The,nRo),e(F4,sRo),e(F4,DO),e(DO,lRo),e(F4,iRo),e(z,dRo),e(z,T4),e(T4,Mhe),e(Mhe,cRo),e(T4,fRo),e(T4,GO),e(GO,mRo),e(T4,gRo),e(z,hRo),e(z,M4),e(M4,Ehe),e(Ehe,pRo),e(M4,_Ro),e(M4,OO),e(OO,uRo),e(M4,bRo),e(z,vRo),e(z,E4),e(E4,Che),e(Che,FRo),e(E4,TRo),e(E4,VO),e(VO,MRo),e(E4,ERo),e(z,CRo),e(z,C4),e(C4,whe),e(whe,wRo),e(C4,ARo),e(C4,XO),e(XO,LRo),e(C4,yRo),e(z,xRo),e(z,w4),e(w4,Ahe),e(Ahe,$Ro),e(w4,kRo),e(w4,zO),e(zO,SRo),e(w4,RRo),e(z,PRo),e(z,A4),e(A4,Lhe),e(Lhe,BRo),e(A4,IRo),e(A4,QO),e(QO,NRo),e(A4,qRo),e(z,jRo),e(z,L4),e(L4,yhe),e(yhe,DRo),e(L4,GRo),e(L4,WO),e(WO,ORo),e(L4,VRo),e(z,XRo),e(z,y4),e(y4,xhe),e(xhe,zRo),e(y4,QRo),e(y4,HO),e(HO,WRo),e(y4,HRo),e(z,URo),e(z,x4),e(x4,$he),e($he,JRo),e(x4,YRo),e(x4,UO),e(UO,KRo),e(x4,ZRo),e(z,ePo),e(z,$4),e($4,khe),e(khe,oPo),e($4,rPo),e($4,JO),e(JO,tPo),e($4,aPo),e(z,nPo),e(z,k4),e(k4,She),e(She,sPo),e(k4,lPo),e(k4,YO),e(YO,iPo),e(k4,dPo),e(z,cPo),e(z,S4),e(S4,Rhe),e(Rhe,fPo),e(S4,mPo),e(S4,KO),e(KO,gPo),e(S4,hPo),e(z,pPo),e(z,R4),e(R4,Phe),e(Phe,_Po),e(R4,uPo),e(R4,ZO),e(ZO,bPo),e(R4,vPo),e(z,FPo),e(z,P4),e(P4,Bhe),e(Bhe,TPo),e(P4,MPo),e(P4,eV),e(eV,EPo),e(P4,CPo),e(Ze,wPo),e(Ze,B4),e(B4,APo),e(B4,Ihe),e(Ihe,LPo),e(B4,yPo),e(B4,Nhe),e(Nhe,xPo),e(Ze,$Po),M(I4,Ze,null),b(f,ZXe,u),b(f,Ki,u),e(Ki,N4),e(N4,qhe),M(oy,qhe,null),e(Ki,kPo),e(Ki,jhe),e(jhe,SPo),b(f,eze,u),b(f,Ro,u),M(ry,Ro,null),e(Ro,RPo),e(Ro,Zi),e(Zi,PPo),e(Zi,oV),e(oV,BPo),e(Zi,IPo),e(Zi,rV),e(rV,NPo),e(Zi,qPo),e(Ro,jPo),e(Ro,ty),e(ty,DPo),e(ty,Dhe),e(Dhe,GPo),e(ty,OPo),e(Ro,VPo),e(Ro,ft),M(ay,ft,null),e(ft,XPo),e(ft,Ghe),e(Ghe,zPo),e(ft,QPo),e(ft,ed),e(ed,WPo),e(ed,Ohe),e(Ohe,HPo),e(ed,UPo),e(ed,tV),e(tV,JPo),e(ed,YPo),e(ft,KPo),M(q4,ft,null),e(Ro,ZPo),e(Ro,eo),M(ny,eo,null),e(eo,eBo),e(eo,Vhe),e(Vhe,oBo),e(eo,rBo),e(eo,ja),e(ja,tBo),e(ja,Xhe),e(Xhe,aBo),e(ja,nBo),e(ja,zhe),e(zhe,sBo),e(ja,lBo),e(ja,Qhe),e(Qhe,iBo),e(ja,dBo),e(eo,cBo),e(eo,W),e(W,j4),e(j4,Whe),e(Whe,fBo),e(j4,mBo),e(j4,aV),e(aV,gBo),e(j4,hBo),e(W,pBo),e(W,D4),e(D4,Hhe),e(Hhe,_Bo),e(D4,uBo),e(D4,nV),e(nV,bBo),e(D4,vBo),e(W,FBo),e(W,G4),e(G4,Uhe),e(Uhe,TBo),e(G4,MBo),e(G4,sV),e(sV,EBo),e(G4,CBo),e(W,wBo),e(W,O4),e(O4,Jhe),e(Jhe,ABo),e(O4,LBo),e(O4,lV),e(lV,yBo),e(O4,xBo),e(W,$Bo),e(W,V4),e(V4,Yhe),e(Yhe,kBo),e(V4,SBo),e(V4,iV),e(iV,RBo),e(V4,PBo),e(W,BBo),e(W,X4),e(X4,Khe),e(Khe,IBo),e(X4,NBo),e(X4,dV),e(dV,qBo),e(X4,jBo),e(W,DBo),e(W,z4),e(z4,Zhe),e(Zhe,GBo),e(z4,OBo),e(z4,cV),e(cV,VBo),e(z4,XBo),e(W,zBo),e(W,Q4),e(Q4,epe),e(epe,QBo),e(Q4,WBo),e(Q4,fV),e(fV,HBo),e(Q4,UBo),e(W,JBo),e(W,W4),e(W4,ope),e(ope,YBo),e(W4,KBo),e(W4,mV),e(mV,ZBo),e(W4,eIo),e(W,oIo),e(W,H4),e(H4,rpe),e(rpe,rIo),e(H4,tIo),e(H4,gV),e(gV,aIo),e(H4,nIo),e(W,sIo),e(W,U4),e(U4,tpe),e(tpe,lIo),e(U4,iIo),e(U4,hV),e(hV,dIo),e(U4,cIo),e(W,fIo),e(W,J4),e(J4,ape),e(ape,mIo),e(J4,gIo),e(J4,pV),e(pV,hIo),e(J4,pIo),e(W,_Io),e(W,Y4),e(Y4,npe),e(npe,uIo),e(Y4,bIo),e(Y4,_V),e(_V,vIo),e(Y4,FIo),e(W,TIo),e(W,K4),e(K4,spe),e(spe,MIo),e(K4,EIo),e(K4,uV),e(uV,CIo),e(K4,wIo),e(W,AIo),e(W,Z4),e(Z4,lpe),e(lpe,LIo),e(Z4,yIo),e(Z4,bV),e(bV,xIo),e(Z4,$Io),e(W,kIo),e(W,e2),e(e2,ipe),e(ipe,SIo),e(e2,RIo),e(e2,vV),e(vV,PIo),e(e2,BIo),e(W,IIo),e(W,o2),e(o2,dpe),e(dpe,NIo),e(o2,qIo),e(o2,FV),e(FV,jIo),e(o2,DIo),e(W,GIo),e(W,r2),e(r2,cpe),e(cpe,OIo),e(r2,VIo),e(r2,TV),e(TV,XIo),e(r2,zIo),e(W,QIo),e(W,t2),e(t2,fpe),e(fpe,WIo),e(t2,HIo),e(t2,MV),e(MV,UIo),e(t2,JIo),e(W,YIo),e(W,a2),e(a2,mpe),e(mpe,KIo),e(a2,ZIo),e(a2,EV),e(EV,eNo),e(a2,oNo),e(W,rNo),e(W,n2),e(n2,gpe),e(gpe,tNo),e(n2,aNo),e(n2,CV),e(CV,nNo),e(n2,sNo),e(W,lNo),e(W,s2),e(s2,hpe),e(hpe,iNo),e(s2,dNo),e(s2,wV),e(wV,cNo),e(s2,fNo),e(W,mNo),e(W,l2),e(l2,ppe),e(ppe,gNo),e(l2,hNo),e(l2,AV),e(AV,pNo),e(l2,_No),e(W,uNo),e(W,i2),e(i2,_pe),e(_pe,bNo),e(i2,vNo),e(i2,LV),e(LV,FNo),e(i2,TNo),e(W,MNo),e(W,d2),e(d2,upe),e(upe,ENo),e(d2,CNo),e(d2,yV),e(yV,wNo),e(d2,ANo),e(W,LNo),e(W,c2),e(c2,bpe),e(bpe,yNo),e(c2,xNo),e(c2,xV),e(xV,$No),e(c2,kNo),e(W,SNo),e(W,f2),e(f2,vpe),e(vpe,RNo),e(f2,PNo),e(f2,$V),e($V,BNo),e(f2,INo),e(W,NNo),e(W,m2),e(m2,Fpe),e(Fpe,qNo),e(m2,jNo),e(m2,kV),e(kV,DNo),e(m2,GNo),e(W,ONo),e(W,g2),e(g2,Tpe),e(Tpe,VNo),e(g2,XNo),e(g2,SV),e(SV,zNo),e(g2,QNo),e(W,WNo),e(W,h2),e(h2,Mpe),e(Mpe,HNo),e(h2,UNo),e(h2,RV),e(RV,JNo),e(h2,YNo),e(W,KNo),e(W,p2),e(p2,Epe),e(Epe,ZNo),e(p2,eqo),e(p2,PV),e(PV,oqo),e(p2,rqo),e(W,tqo),e(W,_2),e(_2,Cpe),e(Cpe,aqo),e(_2,nqo),e(_2,BV),e(BV,sqo),e(_2,lqo),e(W,iqo),e(W,u2),e(u2,wpe),e(wpe,dqo),e(u2,cqo),e(u2,IV),e(IV,fqo),e(u2,mqo),e(W,gqo),e(W,b2),e(b2,Ape),e(Ape,hqo),e(b2,pqo),e(b2,Lpe),e(Lpe,_qo),e(b2,uqo),e(W,bqo),e(W,v2),e(v2,ype),e(ype,vqo),e(v2,Fqo),e(v2,NV),e(NV,Tqo),e(v2,Mqo),e(W,Eqo),e(W,F2),e(F2,xpe),e(xpe,Cqo),e(F2,wqo),e(F2,qV),e(qV,Aqo),e(F2,Lqo),e(W,yqo),e(W,T2),e(T2,$pe),e($pe,xqo),e(T2,$qo),e(T2,jV),e(jV,kqo),e(T2,Sqo),e(W,Rqo),e(W,M2),e(M2,kpe),e(kpe,Pqo),e(M2,Bqo),e(M2,DV),e(DV,Iqo),e(M2,Nqo),e(eo,qqo),e(eo,E2),e(E2,jqo),e(E2,Spe),e(Spe,Dqo),e(E2,Gqo),e(E2,Rpe),e(Rpe,Oqo),e(eo,Vqo),M(C2,eo,null),b(f,oze,u),b(f,od,u),e(od,w2),e(w2,Ppe),M(sy,Ppe,null),e(od,Xqo),e(od,Bpe),e(Bpe,zqo),b(f,rze,u),b(f,Po,u),M(ly,Po,null),e(Po,Qqo),e(Po,rd),e(rd,Wqo),e(rd,GV),e(GV,Hqo),e(rd,Uqo),e(rd,OV),e(OV,Jqo),e(rd,Yqo),e(Po,Kqo),e(Po,iy),e(iy,Zqo),e(iy,Ipe),e(Ipe,ejo),e(iy,ojo),e(Po,rjo),e(Po,mt),M(dy,mt,null),e(mt,tjo),e(mt,Npe),e(Npe,ajo),e(mt,njo),e(mt,td),e(td,sjo),e(td,qpe),e(qpe,ljo),e(td,ijo),e(td,VV),e(VV,djo),e(td,cjo),e(mt,fjo),M(A2,mt,null),e(Po,mjo),e(Po,oo),M(cy,oo,null),e(oo,gjo),e(oo,jpe),e(jpe,hjo),e(oo,pjo),e(oo,Da),e(Da,_jo),e(Da,Dpe),e(Dpe,ujo),e(Da,bjo),e(Da,Gpe),e(Gpe,vjo),e(Da,Fjo),e(Da,Ope),e(Ope,Tjo),e(Da,Mjo),e(oo,Ejo),e(oo,fe),e(fe,L2),e(L2,Vpe),e(Vpe,Cjo),e(L2,wjo),e(L2,XV),e(XV,Ajo),e(L2,Ljo),e(fe,yjo),e(fe,y2),e(y2,Xpe),e(Xpe,xjo),e(y2,$jo),e(y2,zV),e(zV,kjo),e(y2,Sjo),e(fe,Rjo),e(fe,x2),e(x2,zpe),e(zpe,Pjo),e(x2,Bjo),e(x2,QV),e(QV,Ijo),e(x2,Njo),e(fe,qjo),e(fe,$2),e($2,Qpe),e(Qpe,jjo),e($2,Djo),e($2,WV),e(WV,Gjo),e($2,Ojo),e(fe,Vjo),e(fe,k2),e(k2,Wpe),e(Wpe,Xjo),e(k2,zjo),e(k2,HV),e(HV,Qjo),e(k2,Wjo),e(fe,Hjo),e(fe,S2),e(S2,Hpe),e(Hpe,Ujo),e(S2,Jjo),e(S2,UV),e(UV,Yjo),e(S2,Kjo),e(fe,Zjo),e(fe,R2),e(R2,Upe),e(Upe,eDo),e(R2,oDo),e(R2,JV),e(JV,rDo),e(R2,tDo),e(fe,aDo),e(fe,P2),e(P2,Jpe),e(Jpe,nDo),e(P2,sDo),e(P2,YV),e(YV,lDo),e(P2,iDo),e(fe,dDo),e(fe,B2),e(B2,Ype),e(Ype,cDo),e(B2,fDo),e(B2,KV),e(KV,mDo),e(B2,gDo),e(fe,hDo),e(fe,I2),e(I2,Kpe),e(Kpe,pDo),e(I2,_Do),e(I2,ZV),e(ZV,uDo),e(I2,bDo),e(fe,vDo),e(fe,N2),e(N2,Zpe),e(Zpe,FDo),e(N2,TDo),e(N2,eX),e(eX,MDo),e(N2,EDo),e(fe,CDo),e(fe,q2),e(q2,e_e),e(e_e,wDo),e(q2,ADo),e(q2,oX),e(oX,LDo),e(q2,yDo),e(fe,xDo),e(fe,j2),e(j2,o_e),e(o_e,$Do),e(j2,kDo),e(j2,rX),e(rX,SDo),e(j2,RDo),e(fe,PDo),e(fe,D2),e(D2,r_e),e(r_e,BDo),e(D2,IDo),e(D2,tX),e(tX,NDo),e(D2,qDo),e(fe,jDo),e(fe,G2),e(G2,t_e),e(t_e,DDo),e(G2,GDo),e(G2,aX),e(aX,ODo),e(G2,VDo),e(fe,XDo),e(fe,O2),e(O2,a_e),e(a_e,zDo),e(O2,QDo),e(O2,nX),e(nX,WDo),e(O2,HDo),e(fe,UDo),e(fe,V2),e(V2,n_e),e(n_e,JDo),e(V2,YDo),e(V2,sX),e(sX,KDo),e(V2,ZDo),e(fe,eGo),e(fe,X2),e(X2,s_e),e(s_e,oGo),e(X2,rGo),e(X2,lX),e(lX,tGo),e(X2,aGo),e(fe,nGo),e(fe,z2),e(z2,l_e),e(l_e,sGo),e(z2,lGo),e(z2,iX),e(iX,iGo),e(z2,dGo),e(oo,cGo),e(oo,Q2),e(Q2,fGo),e(Q2,i_e),e(i_e,mGo),e(Q2,gGo),e(Q2,d_e),e(d_e,hGo),e(oo,pGo),M(W2,oo,null),b(f,tze,u),b(f,ad,u),e(ad,H2),e(H2,c_e),M(fy,c_e,null),e(ad,_Go),e(ad,f_e),e(f_e,uGo),b(f,aze,u),b(f,Bo,u),M(my,Bo,null),e(Bo,bGo),e(Bo,nd),e(nd,vGo),e(nd,dX),e(dX,FGo),e(nd,TGo),e(nd,cX),e(cX,MGo),e(nd,EGo),e(Bo,CGo),e(Bo,gy),e(gy,wGo),e(gy,m_e),e(m_e,AGo),e(gy,LGo),e(Bo,yGo),e(Bo,gt),M(hy,gt,null),e(gt,xGo),e(gt,g_e),e(g_e,$Go),e(gt,kGo),e(gt,sd),e(sd,SGo),e(sd,h_e),e(h_e,RGo),e(sd,PGo),e(sd,fX),e(fX,BGo),e(sd,IGo),e(gt,NGo),M(U2,gt,null),e(Bo,qGo),e(Bo,ro),M(py,ro,null),e(ro,jGo),e(ro,p_e),e(p_e,DGo),e(ro,GGo),e(ro,Ga),e(Ga,OGo),e(Ga,__e),e(__e,VGo),e(Ga,XGo),e(Ga,u_e),e(u_e,zGo),e(Ga,QGo),e(Ga,b_e),e(b_e,WGo),e(Ga,HGo),e(ro,UGo),e(ro,B),e(B,J2),e(J2,v_e),e(v_e,JGo),e(J2,YGo),e(J2,mX),e(mX,KGo),e(J2,ZGo),e(B,eOo),e(B,Y2),e(Y2,F_e),e(F_e,oOo),e(Y2,rOo),e(Y2,gX),e(gX,tOo),e(Y2,aOo),e(B,nOo),e(B,K2),e(K2,T_e),e(T_e,sOo),e(K2,lOo),e(K2,hX),e(hX,iOo),e(K2,dOo),e(B,cOo),e(B,Z2),e(Z2,M_e),e(M_e,fOo),e(Z2,mOo),e(Z2,pX),e(pX,gOo),e(Z2,hOo),e(B,pOo),e(B,eb),e(eb,E_e),e(E_e,_Oo),e(eb,uOo),e(eb,_X),e(_X,bOo),e(eb,vOo),e(B,FOo),e(B,ob),e(ob,C_e),e(C_e,TOo),e(ob,MOo),e(ob,uX),e(uX,EOo),e(ob,COo),e(B,wOo),e(B,rb),e(rb,w_e),e(w_e,AOo),e(rb,LOo),e(rb,bX),e(bX,yOo),e(rb,xOo),e(B,$Oo),e(B,tb),e(tb,A_e),e(A_e,kOo),e(tb,SOo),e(tb,vX),e(vX,ROo),e(tb,POo),e(B,BOo),e(B,ab),e(ab,L_e),e(L_e,IOo),e(ab,NOo),e(ab,FX),e(FX,qOo),e(ab,jOo),e(B,DOo),e(B,nb),e(nb,y_e),e(y_e,GOo),e(nb,OOo),e(nb,TX),e(TX,VOo),e(nb,XOo),e(B,zOo),e(B,sb),e(sb,x_e),e(x_e,QOo),e(sb,WOo),e(sb,MX),e(MX,HOo),e(sb,UOo),e(B,JOo),e(B,lb),e(lb,$_e),e($_e,YOo),e(lb,KOo),e(lb,EX),e(EX,ZOo),e(lb,eVo),e(B,oVo),e(B,ib),e(ib,k_e),e(k_e,rVo),e(ib,tVo),e(ib,CX),e(CX,aVo),e(ib,nVo),e(B,sVo),e(B,db),e(db,S_e),e(S_e,lVo),e(db,iVo),e(db,wX),e(wX,dVo),e(db,cVo),e(B,fVo),e(B,cb),e(cb,R_e),e(R_e,mVo),e(cb,gVo),e(cb,AX),e(AX,hVo),e(cb,pVo),e(B,_Vo),e(B,fb),e(fb,P_e),e(P_e,uVo),e(fb,bVo),e(fb,LX),e(LX,vVo),e(fb,FVo),e(B,TVo),e(B,mb),e(mb,B_e),e(B_e,MVo),e(mb,EVo),e(mb,yX),e(yX,CVo),e(mb,wVo),e(B,AVo),e(B,gb),e(gb,I_e),e(I_e,LVo),e(gb,yVo),e(gb,xX),e(xX,xVo),e(gb,$Vo),e(B,kVo),e(B,hb),e(hb,N_e),e(N_e,SVo),e(hb,RVo),e(hb,$X),e($X,PVo),e(hb,BVo),e(B,IVo),e(B,pb),e(pb,q_e),e(q_e,NVo),e(pb,qVo),e(pb,kX),e(kX,jVo),e(pb,DVo),e(B,GVo),e(B,_b),e(_b,j_e),e(j_e,OVo),e(_b,VVo),e(_b,SX),e(SX,XVo),e(_b,zVo),e(B,QVo),e(B,ub),e(ub,D_e),e(D_e,WVo),e(ub,HVo),e(ub,RX),e(RX,UVo),e(ub,JVo),e(B,YVo),e(B,bb),e(bb,G_e),e(G_e,KVo),e(bb,ZVo),e(bb,PX),e(PX,eXo),e(bb,oXo),e(B,rXo),e(B,vb),e(vb,O_e),e(O_e,tXo),e(vb,aXo),e(vb,BX),e(BX,nXo),e(vb,sXo),e(B,lXo),e(B,Fb),e(Fb,V_e),e(V_e,iXo),e(Fb,dXo),e(Fb,IX),e(IX,cXo),e(Fb,fXo),e(B,mXo),e(B,Tb),e(Tb,X_e),e(X_e,gXo),e(Tb,hXo),e(Tb,NX),e(NX,pXo),e(Tb,_Xo),e(B,uXo),e(B,Mb),e(Mb,z_e),e(z_e,bXo),e(Mb,vXo),e(Mb,qX),e(qX,FXo),e(Mb,TXo),e(B,MXo),e(B,Eb),e(Eb,Q_e),e(Q_e,EXo),e(Eb,CXo),e(Eb,jX),e(jX,wXo),e(Eb,AXo),e(B,LXo),e(B,Cb),e(Cb,W_e),e(W_e,yXo),e(Cb,xXo),e(Cb,DX),e(DX,$Xo),e(Cb,kXo),e(B,SXo),e(B,wb),e(wb,H_e),e(H_e,RXo),e(wb,PXo),e(wb,GX),e(GX,BXo),e(wb,IXo),e(B,NXo),e(B,Ab),e(Ab,U_e),e(U_e,qXo),e(Ab,jXo),e(Ab,OX),e(OX,DXo),e(Ab,GXo),e(B,OXo),e(B,Lb),e(Lb,J_e),e(J_e,VXo),e(Lb,XXo),e(Lb,VX),e(VX,zXo),e(Lb,QXo),e(B,WXo),e(B,yb),e(yb,Y_e),e(Y_e,HXo),e(yb,UXo),e(yb,XX),e(XX,JXo),e(yb,YXo),e(B,KXo),e(B,xb),e(xb,K_e),e(K_e,ZXo),e(xb,ezo),e(xb,zX),e(zX,ozo),e(xb,rzo),e(B,tzo),e(B,$b),e($b,Z_e),e(Z_e,azo),e($b,nzo),e($b,QX),e(QX,szo),e($b,lzo),e(B,izo),e(B,kb),e(kb,eue),e(eue,dzo),e(kb,czo),e(kb,WX),e(WX,fzo),e(kb,mzo),e(B,gzo),e(B,Sb),e(Sb,oue),e(oue,hzo),e(Sb,pzo),e(Sb,HX),e(HX,_zo),e(Sb,uzo),e(B,bzo),e(B,Rb),e(Rb,rue),e(rue,vzo),e(Rb,Fzo),e(Rb,UX),e(UX,Tzo),e(Rb,Mzo),e(B,Ezo),e(B,Pb),e(Pb,tue),e(tue,Czo),e(Pb,wzo),e(Pb,JX),e(JX,Azo),e(Pb,Lzo),e(B,yzo),e(B,Bb),e(Bb,aue),e(aue,xzo),e(Bb,$zo),e(Bb,YX),e(YX,kzo),e(Bb,Szo),e(B,Rzo),e(B,Ib),e(Ib,nue),e(nue,Pzo),e(Ib,Bzo),e(Ib,KX),e(KX,Izo),e(Ib,Nzo),e(B,qzo),e(B,Nb),e(Nb,sue),e(sue,jzo),e(Nb,Dzo),e(Nb,ZX),e(ZX,Gzo),e(Nb,Ozo),e(B,Vzo),e(B,qb),e(qb,lue),e(lue,Xzo),e(qb,zzo),e(qb,ez),e(ez,Qzo),e(qb,Wzo),e(B,Hzo),e(B,jb),e(jb,iue),e(iue,Uzo),e(jb,Jzo),e(jb,oz),e(oz,Yzo),e(jb,Kzo),e(B,Zzo),e(B,Db),e(Db,due),e(due,eQo),e(Db,oQo),e(Db,rz),e(rz,rQo),e(Db,tQo),e(B,aQo),e(B,Gb),e(Gb,cue),e(cue,nQo),e(Gb,sQo),e(Gb,tz),e(tz,lQo),e(Gb,iQo),e(B,dQo),e(B,Ob),e(Ob,fue),e(fue,cQo),e(Ob,fQo),e(Ob,az),e(az,mQo),e(Ob,gQo),e(B,hQo),e(B,Vb),e(Vb,mue),e(mue,pQo),e(Vb,_Qo),e(Vb,nz),e(nz,uQo),e(Vb,bQo),e(B,vQo),e(B,Xb),e(Xb,gue),e(gue,FQo),e(Xb,TQo),e(Xb,sz),e(sz,MQo),e(Xb,EQo),e(B,CQo),e(B,zb),e(zb,hue),e(hue,wQo),e(zb,AQo),e(zb,lz),e(lz,LQo),e(zb,yQo),e(B,xQo),e(B,Qb),e(Qb,pue),e(pue,$Qo),e(Qb,kQo),e(Qb,iz),e(iz,SQo),e(Qb,RQo),e(ro,PQo),e(ro,Wb),e(Wb,BQo),e(Wb,_ue),e(_ue,IQo),e(Wb,NQo),e(Wb,uue),e(uue,qQo),e(ro,jQo),M(Hb,ro,null),b(f,nze,u),b(f,ld,u),e(ld,Ub),e(Ub,bue),M(_y,bue,null),e(ld,DQo),e(ld,vue),e(vue,GQo),b(f,sze,u),b(f,Io,u),M(uy,Io,null),e(Io,OQo),e(Io,id),e(id,VQo),e(id,dz),e(dz,XQo),e(id,zQo),e(id,cz),e(cz,QQo),e(id,WQo),e(Io,HQo),e(Io,by),e(by,UQo),e(by,Fue),e(Fue,JQo),e(by,YQo),e(Io,KQo),e(Io,ht),M(vy,ht,null),e(ht,ZQo),e(ht,Tue),e(Tue,eWo),e(ht,oWo),e(ht,dd),e(dd,rWo),e(dd,Mue),e(Mue,tWo),e(dd,aWo),e(dd,fz),e(fz,nWo),e(dd,sWo),e(ht,lWo),M(Jb,ht,null),e(Io,iWo),e(Io,to),M(Fy,to,null),e(to,dWo),e(to,Eue),e(Eue,cWo),e(to,fWo),e(to,Oa),e(Oa,mWo),e(Oa,Cue),e(Cue,gWo),e(Oa,hWo),e(Oa,wue),e(wue,pWo),e(Oa,_Wo),e(Oa,Aue),e(Aue,uWo),e(Oa,bWo),e(to,vWo),e(to,Z),e(Z,Yb),e(Yb,Lue),e(Lue,FWo),e(Yb,TWo),e(Yb,mz),e(mz,MWo),e(Yb,EWo),e(Z,CWo),e(Z,Kb),e(Kb,yue),e(yue,wWo),e(Kb,AWo),e(Kb,gz),e(gz,LWo),e(Kb,yWo),e(Z,xWo),e(Z,Zb),e(Zb,xue),e(xue,$Wo),e(Zb,kWo),e(Zb,hz),e(hz,SWo),e(Zb,RWo),e(Z,PWo),e(Z,ev),e(ev,$ue),e($ue,BWo),e(ev,IWo),e(ev,pz),e(pz,NWo),e(ev,qWo),e(Z,jWo),e(Z,ov),e(ov,kue),e(kue,DWo),e(ov,GWo),e(ov,_z),e(_z,OWo),e(ov,VWo),e(Z,XWo),e(Z,rv),e(rv,Sue),e(Sue,zWo),e(rv,QWo),e(rv,uz),e(uz,WWo),e(rv,HWo),e(Z,UWo),e(Z,tv),e(tv,Rue),e(Rue,JWo),e(tv,YWo),e(tv,bz),e(bz,KWo),e(tv,ZWo),e(Z,eHo),e(Z,av),e(av,Pue),e(Pue,oHo),e(av,rHo),e(av,vz),e(vz,tHo),e(av,aHo),e(Z,nHo),e(Z,nv),e(nv,Bue),e(Bue,sHo),e(nv,lHo),e(nv,Fz),e(Fz,iHo),e(nv,dHo),e(Z,cHo),e(Z,sv),e(sv,Iue),e(Iue,fHo),e(sv,mHo),e(sv,Tz),e(Tz,gHo),e(sv,hHo),e(Z,pHo),e(Z,lv),e(lv,Nue),e(Nue,_Ho),e(lv,uHo),e(lv,Mz),e(Mz,bHo),e(lv,vHo),e(Z,FHo),e(Z,iv),e(iv,que),e(que,THo),e(iv,MHo),e(iv,Ez),e(Ez,EHo),e(iv,CHo),e(Z,wHo),e(Z,dv),e(dv,jue),e(jue,AHo),e(dv,LHo),e(dv,Cz),e(Cz,yHo),e(dv,xHo),e(Z,$Ho),e(Z,cv),e(cv,Due),e(Due,kHo),e(cv,SHo),e(cv,wz),e(wz,RHo),e(cv,PHo),e(Z,BHo),e(Z,fv),e(fv,Gue),e(Gue,IHo),e(fv,NHo),e(fv,Az),e(Az,qHo),e(fv,jHo),e(Z,DHo),e(Z,mv),e(mv,Oue),e(Oue,GHo),e(mv,OHo),e(mv,Lz),e(Lz,VHo),e(mv,XHo),e(Z,zHo),e(Z,gv),e(gv,Vue),e(Vue,QHo),e(gv,WHo),e(gv,yz),e(yz,HHo),e(gv,UHo),e(Z,JHo),e(Z,hv),e(hv,Xue),e(Xue,YHo),e(hv,KHo),e(hv,xz),e(xz,ZHo),e(hv,eUo),e(Z,oUo),e(Z,pv),e(pv,zue),e(zue,rUo),e(pv,tUo),e(pv,$z),e($z,aUo),e(pv,nUo),e(Z,sUo),e(Z,_v),e(_v,Que),e(Que,lUo),e(_v,iUo),e(_v,kz),e(kz,dUo),e(_v,cUo),e(Z,fUo),e(Z,uv),e(uv,Wue),e(Wue,mUo),e(uv,gUo),e(uv,Sz),e(Sz,hUo),e(uv,pUo),e(Z,_Uo),e(Z,bv),e(bv,Hue),e(Hue,uUo),e(bv,bUo),e(bv,Rz),e(Rz,vUo),e(bv,FUo),e(Z,TUo),e(Z,vv),e(vv,Uue),e(Uue,MUo),e(vv,EUo),e(vv,Pz),e(Pz,CUo),e(vv,wUo),e(Z,AUo),e(Z,Fv),e(Fv,Jue),e(Jue,LUo),e(Fv,yUo),e(Fv,Bz),e(Bz,xUo),e(Fv,$Uo),e(Z,kUo),e(Z,Tv),e(Tv,Yue),e(Yue,SUo),e(Tv,RUo),e(Tv,Iz),e(Iz,PUo),e(Tv,BUo),e(Z,IUo),e(Z,Mv),e(Mv,Kue),e(Kue,NUo),e(Mv,qUo),e(Mv,Nz),e(Nz,jUo),e(Mv,DUo),e(Z,GUo),e(Z,Ev),e(Ev,Zue),e(Zue,OUo),e(Ev,VUo),e(Ev,qz),e(qz,XUo),e(Ev,zUo),e(Z,QUo),e(Z,Cv),e(Cv,e1e),e(e1e,WUo),e(Cv,HUo),e(Cv,jz),e(jz,UUo),e(Cv,JUo),e(Z,YUo),e(Z,wv),e(wv,o1e),e(o1e,KUo),e(wv,ZUo),e(wv,Dz),e(Dz,eJo),e(wv,oJo),e(Z,rJo),e(Z,Av),e(Av,r1e),e(r1e,tJo),e(Av,aJo),e(Av,Gz),e(Gz,nJo),e(Av,sJo),e(to,lJo),e(to,Lv),e(Lv,iJo),e(Lv,t1e),e(t1e,dJo),e(Lv,cJo),e(Lv,a1e),e(a1e,fJo),e(to,mJo),M(yv,to,null),b(f,lze,u),b(f,cd,u),e(cd,xv),e(xv,n1e),M(Ty,n1e,null),e(cd,gJo),e(cd,s1e),e(s1e,hJo),b(f,ize,u),b(f,No,u),M(My,No,null),e(No,pJo),e(No,fd),e(fd,_Jo),e(fd,Oz),e(Oz,uJo),e(fd,bJo),e(fd,Vz),e(Vz,vJo),e(fd,FJo),e(No,TJo),e(No,Ey),e(Ey,MJo),e(Ey,l1e),e(l1e,EJo),e(Ey,CJo),e(No,wJo),e(No,pt),M(Cy,pt,null),e(pt,AJo),e(pt,i1e),e(i1e,LJo),e(pt,yJo),e(pt,md),e(md,xJo),e(md,d1e),e(d1e,$Jo),e(md,kJo),e(md,Xz),e(Xz,SJo),e(md,RJo),e(pt,PJo),M($v,pt,null),e(No,BJo),e(No,ao),M(wy,ao,null),e(ao,IJo),e(ao,c1e),e(c1e,NJo),e(ao,qJo),e(ao,Va),e(Va,jJo),e(Va,f1e),e(f1e,DJo),e(Va,GJo),e(Va,m1e),e(m1e,OJo),e(Va,VJo),e(Va,g1e),e(g1e,XJo),e(Va,zJo),e(ao,QJo),e(ao,qo),e(qo,kv),e(kv,h1e),e(h1e,WJo),e(kv,HJo),e(kv,zz),e(zz,UJo),e(kv,JJo),e(qo,YJo),e(qo,Sv),e(Sv,p1e),e(p1e,KJo),e(Sv,ZJo),e(Sv,Qz),e(Qz,eYo),e(Sv,oYo),e(qo,rYo),e(qo,Rv),e(Rv,_1e),e(_1e,tYo),e(Rv,aYo),e(Rv,Wz),e(Wz,nYo),e(Rv,sYo),e(qo,lYo),e(qo,Pv),e(Pv,u1e),e(u1e,iYo),e(Pv,dYo),e(Pv,Hz),e(Hz,cYo),e(Pv,fYo),e(qo,mYo),e(qo,Bv),e(Bv,b1e),e(b1e,gYo),e(Bv,hYo),e(Bv,Uz),e(Uz,pYo),e(Bv,_Yo),e(qo,uYo),e(qo,Iv),e(Iv,v1e),e(v1e,bYo),e(Iv,vYo),e(Iv,Jz),e(Jz,FYo),e(Iv,TYo),e(ao,MYo),e(ao,Nv),e(Nv,EYo),e(Nv,F1e),e(F1e,CYo),e(Nv,wYo),e(Nv,T1e),e(T1e,AYo),e(ao,LYo),M(qv,ao,null),b(f,dze,u),b(f,gd,u),e(gd,jv),e(jv,M1e),M(Ay,M1e,null),e(gd,yYo),e(gd,E1e),e(E1e,xYo),b(f,cze,u),b(f,jo,u),M(Ly,jo,null),e(jo,$Yo),e(jo,hd),e(hd,kYo),e(hd,Yz),e(Yz,SYo),e(hd,RYo),e(hd,Kz),e(Kz,PYo),e(hd,BYo),e(jo,IYo),e(jo,yy),e(yy,NYo),e(yy,C1e),e(C1e,qYo),e(yy,jYo),e(jo,DYo),e(jo,_t),M(xy,_t,null),e(_t,GYo),e(_t,w1e),e(w1e,OYo),e(_t,VYo),e(_t,pd),e(pd,XYo),e(pd,A1e),e(A1e,zYo),e(pd,QYo),e(pd,Zz),e(Zz,WYo),e(pd,HYo),e(_t,UYo),M(Dv,_t,null),e(jo,JYo),e(jo,no),M($y,no,null),e(no,YYo),e(no,L1e),e(L1e,KYo),e(no,ZYo),e(no,Xa),e(Xa,eKo),e(Xa,y1e),e(y1e,oKo),e(Xa,rKo),e(Xa,x1e),e(x1e,tKo),e(Xa,aKo),e(Xa,$1e),e($1e,nKo),e(Xa,sKo),e(no,lKo),e(no,U),e(U,Gv),e(Gv,k1e),e(k1e,iKo),e(Gv,dKo),e(Gv,eQ),e(eQ,cKo),e(Gv,fKo),e(U,mKo),e(U,Ov),e(Ov,S1e),e(S1e,gKo),e(Ov,hKo),e(Ov,oQ),e(oQ,pKo),e(Ov,_Ko),e(U,uKo),e(U,Vv),e(Vv,R1e),e(R1e,bKo),e(Vv,vKo),e(Vv,rQ),e(rQ,FKo),e(Vv,TKo),e(U,MKo),e(U,Xv),e(Xv,P1e),e(P1e,EKo),e(Xv,CKo),e(Xv,tQ),e(tQ,wKo),e(Xv,AKo),e(U,LKo),e(U,zv),e(zv,B1e),e(B1e,yKo),e(zv,xKo),e(zv,aQ),e(aQ,$Ko),e(zv,kKo),e(U,SKo),e(U,Qv),e(Qv,I1e),e(I1e,RKo),e(Qv,PKo),e(Qv,nQ),e(nQ,BKo),e(Qv,IKo),e(U,NKo),e(U,Wv),e(Wv,N1e),e(N1e,qKo),e(Wv,jKo),e(Wv,sQ),e(sQ,DKo),e(Wv,GKo),e(U,OKo),e(U,Hv),e(Hv,q1e),e(q1e,VKo),e(Hv,XKo),e(Hv,lQ),e(lQ,zKo),e(Hv,QKo),e(U,WKo),e(U,Uv),e(Uv,j1e),e(j1e,HKo),e(Uv,UKo),e(Uv,iQ),e(iQ,JKo),e(Uv,YKo),e(U,KKo),e(U,Jv),e(Jv,D1e),e(D1e,ZKo),e(Jv,eZo),e(Jv,dQ),e(dQ,oZo),e(Jv,rZo),e(U,tZo),e(U,Yv),e(Yv,G1e),e(G1e,aZo),e(Yv,nZo),e(Yv,cQ),e(cQ,sZo),e(Yv,lZo),e(U,iZo),e(U,Kv),e(Kv,O1e),e(O1e,dZo),e(Kv,cZo),e(Kv,fQ),e(fQ,fZo),e(Kv,mZo),e(U,gZo),e(U,Zv),e(Zv,V1e),e(V1e,hZo),e(Zv,pZo),e(Zv,mQ),e(mQ,_Zo),e(Zv,uZo),e(U,bZo),e(U,eF),e(eF,X1e),e(X1e,vZo),e(eF,FZo),e(eF,gQ),e(gQ,TZo),e(eF,MZo),e(U,EZo),e(U,oF),e(oF,z1e),e(z1e,CZo),e(oF,wZo),e(oF,hQ),e(hQ,AZo),e(oF,LZo),e(U,yZo),e(U,rF),e(rF,Q1e),e(Q1e,xZo),e(rF,$Zo),e(rF,pQ),e(pQ,kZo),e(rF,SZo),e(U,RZo),e(U,tF),e(tF,W1e),e(W1e,PZo),e(tF,BZo),e(tF,_Q),e(_Q,IZo),e(tF,NZo),e(U,qZo),e(U,aF),e(aF,H1e),e(H1e,jZo),e(aF,DZo),e(aF,uQ),e(uQ,GZo),e(aF,OZo),e(U,VZo),e(U,nF),e(nF,U1e),e(U1e,XZo),e(nF,zZo),e(nF,bQ),e(bQ,QZo),e(nF,WZo),e(U,HZo),e(U,sF),e(sF,J1e),e(J1e,UZo),e(sF,JZo),e(sF,vQ),e(vQ,YZo),e(sF,KZo),e(U,ZZo),e(U,lF),e(lF,Y1e),e(Y1e,eer),e(lF,oer),e(lF,FQ),e(FQ,rer),e(lF,ter),e(U,aer),e(U,iF),e(iF,K1e),e(K1e,ner),e(iF,ser),e(iF,TQ),e(TQ,ler),e(iF,ier),e(U,der),e(U,dF),e(dF,Z1e),e(Z1e,cer),e(dF,fer),e(dF,MQ),e(MQ,mer),e(dF,ger),e(U,her),e(U,cF),e(cF,e4e),e(e4e,per),e(cF,_er),e(cF,EQ),e(EQ,uer),e(cF,ber),e(U,ver),e(U,fF),e(fF,o4e),e(o4e,Fer),e(fF,Ter),e(fF,CQ),e(CQ,Mer),e(fF,Eer),e(U,Cer),e(U,mF),e(mF,r4e),e(r4e,wer),e(mF,Aer),e(mF,wQ),e(wQ,Ler),e(mF,yer),e(U,xer),e(U,gF),e(gF,t4e),e(t4e,$er),e(gF,ker),e(gF,AQ),e(AQ,Ser),e(gF,Rer),e(U,Per),e(U,hF),e(hF,a4e),e(a4e,Ber),e(hF,Ier),e(hF,LQ),e(LQ,Ner),e(hF,qer),e(U,jer),e(U,pF),e(pF,n4e),e(n4e,Der),e(pF,Ger),e(pF,yQ),e(yQ,Oer),e(pF,Ver),e(U,Xer),e(U,_F),e(_F,s4e),e(s4e,zer),e(_F,Qer),e(_F,xQ),e(xQ,Wer),e(_F,Her),e(U,Uer),e(U,uF),e(uF,l4e),e(l4e,Jer),e(uF,Yer),e(uF,$Q),e($Q,Ker),e(uF,Zer),e(U,eor),e(U,bF),e(bF,i4e),e(i4e,oor),e(bF,ror),e(bF,kQ),e(kQ,tor),e(bF,aor),e(U,nor),e(U,vF),e(vF,d4e),e(d4e,sor),e(vF,lor),e(vF,SQ),e(SQ,ior),e(vF,dor),e(U,cor),e(U,FF),e(FF,c4e),e(c4e,mor),e(FF,gor),e(FF,RQ),e(RQ,hor),e(FF,por),e(U,_or),e(U,TF),e(TF,f4e),e(f4e,uor),e(TF,bor),e(TF,PQ),e(PQ,vor),e(TF,For),e(U,Tor),e(U,MF),e(MF,m4e),e(m4e,Mor),e(MF,Eor),e(MF,BQ),e(BQ,Cor),e(MF,wor),e(no,Aor),e(no,EF),e(EF,Lor),e(EF,g4e),e(g4e,yor),e(EF,xor),e(EF,h4e),e(h4e,$or),e(no,kor),M(CF,no,null),b(f,fze,u),b(f,_d,u),e(_d,wF),e(wF,p4e),M(ky,p4e,null),e(_d,Sor),e(_d,_4e),e(_4e,Ror),b(f,mze,u),b(f,Do,u),M(Sy,Do,null),e(Do,Por),e(Do,ud),e(ud,Bor),e(ud,IQ),e(IQ,Ior),e(ud,Nor),e(ud,NQ),e(NQ,qor),e(ud,jor),e(Do,Dor),e(Do,Ry),e(Ry,Gor),e(Ry,u4e),e(u4e,Oor),e(Ry,Vor),e(Do,Xor),e(Do,ut),M(Py,ut,null),e(ut,zor),e(ut,b4e),e(b4e,Qor),e(ut,Wor),e(ut,bd),e(bd,Hor),e(bd,v4e),e(v4e,Uor),e(bd,Jor),e(bd,qQ),e(qQ,Yor),e(bd,Kor),e(ut,Zor),M(AF,ut,null),e(Do,err),e(Do,so),M(By,so,null),e(so,orr),e(so,F4e),e(F4e,rrr),e(so,trr),e(so,za),e(za,arr),e(za,T4e),e(T4e,nrr),e(za,srr),e(za,M4e),e(M4e,lrr),e(za,irr),e(za,E4e),e(E4e,drr),e(za,crr),e(so,frr),e(so,V),e(V,LF),e(LF,C4e),e(C4e,mrr),e(LF,grr),e(LF,jQ),e(jQ,hrr),e(LF,prr),e(V,_rr),e(V,yF),e(yF,w4e),e(w4e,urr),e(yF,brr),e(yF,DQ),e(DQ,vrr),e(yF,Frr),e(V,Trr),e(V,xF),e(xF,A4e),e(A4e,Mrr),e(xF,Err),e(xF,GQ),e(GQ,Crr),e(xF,wrr),e(V,Arr),e(V,$F),e($F,L4e),e(L4e,Lrr),e($F,yrr),e($F,OQ),e(OQ,xrr),e($F,$rr),e(V,krr),e(V,kF),e(kF,y4e),e(y4e,Srr),e(kF,Rrr),e(kF,VQ),e(VQ,Prr),e(kF,Brr),e(V,Irr),e(V,SF),e(SF,x4e),e(x4e,Nrr),e(SF,qrr),e(SF,XQ),e(XQ,jrr),e(SF,Drr),e(V,Grr),e(V,RF),e(RF,$4e),e($4e,Orr),e(RF,Vrr),e(RF,zQ),e(zQ,Xrr),e(RF,zrr),e(V,Qrr),e(V,PF),e(PF,k4e),e(k4e,Wrr),e(PF,Hrr),e(PF,QQ),e(QQ,Urr),e(PF,Jrr),e(V,Yrr),e(V,BF),e(BF,S4e),e(S4e,Krr),e(BF,Zrr),e(BF,WQ),e(WQ,etr),e(BF,otr),e(V,rtr),e(V,IF),e(IF,R4e),e(R4e,ttr),e(IF,atr),e(IF,HQ),e(HQ,ntr),e(IF,str),e(V,ltr),e(V,NF),e(NF,P4e),e(P4e,itr),e(NF,dtr),e(NF,UQ),e(UQ,ctr),e(NF,ftr),e(V,mtr),e(V,qF),e(qF,B4e),e(B4e,gtr),e(qF,htr),e(qF,JQ),e(JQ,ptr),e(qF,_tr),e(V,utr),e(V,jF),e(jF,I4e),e(I4e,btr),e(jF,vtr),e(jF,YQ),e(YQ,Ftr),e(jF,Ttr),e(V,Mtr),e(V,DF),e(DF,N4e),e(N4e,Etr),e(DF,Ctr),e(DF,KQ),e(KQ,wtr),e(DF,Atr),e(V,Ltr),e(V,GF),e(GF,q4e),e(q4e,ytr),e(GF,xtr),e(GF,ZQ),e(ZQ,$tr),e(GF,ktr),e(V,Str),e(V,OF),e(OF,j4e),e(j4e,Rtr),e(OF,Ptr),e(OF,eW),e(eW,Btr),e(OF,Itr),e(V,Ntr),e(V,VF),e(VF,D4e),e(D4e,qtr),e(VF,jtr),e(VF,oW),e(oW,Dtr),e(VF,Gtr),e(V,Otr),e(V,XF),e(XF,G4e),e(G4e,Vtr),e(XF,Xtr),e(XF,rW),e(rW,ztr),e(XF,Qtr),e(V,Wtr),e(V,zF),e(zF,O4e),e(O4e,Htr),e(zF,Utr),e(zF,tW),e(tW,Jtr),e(zF,Ytr),e(V,Ktr),e(V,QF),e(QF,V4e),e(V4e,Ztr),e(QF,ear),e(QF,aW),e(aW,oar),e(QF,rar),e(V,tar),e(V,WF),e(WF,X4e),e(X4e,aar),e(WF,nar),e(WF,nW),e(nW,sar),e(WF,lar),e(V,iar),e(V,HF),e(HF,z4e),e(z4e,dar),e(HF,car),e(HF,sW),e(sW,far),e(HF,mar),e(V,gar),e(V,UF),e(UF,Q4e),e(Q4e,har),e(UF,par),e(UF,lW),e(lW,_ar),e(UF,uar),e(V,bar),e(V,JF),e(JF,W4e),e(W4e,Far),e(JF,Tar),e(JF,iW),e(iW,Mar),e(JF,Ear),e(V,Car),e(V,YF),e(YF,H4e),e(H4e,war),e(YF,Aar),e(YF,dW),e(dW,Lar),e(YF,yar),e(V,xar),e(V,KF),e(KF,U4e),e(U4e,$ar),e(KF,kar),e(KF,cW),e(cW,Sar),e(KF,Rar),e(V,Par),e(V,ZF),e(ZF,J4e),e(J4e,Bar),e(ZF,Iar),e(ZF,fW),e(fW,Nar),e(ZF,qar),e(V,jar),e(V,e6),e(e6,Y4e),e(Y4e,Dar),e(e6,Gar),e(e6,mW),e(mW,Oar),e(e6,Var),e(V,Xar),e(V,o6),e(o6,K4e),e(K4e,zar),e(o6,Qar),e(o6,gW),e(gW,War),e(o6,Har),e(V,Uar),e(V,r6),e(r6,Z4e),e(Z4e,Jar),e(r6,Yar),e(r6,hW),e(hW,Kar),e(r6,Zar),e(V,enr),e(V,t6),e(t6,e2e),e(e2e,onr),e(t6,rnr),e(t6,pW),e(pW,tnr),e(t6,anr),e(V,nnr),e(V,a6),e(a6,o2e),e(o2e,snr),e(a6,lnr),e(a6,_W),e(_W,inr),e(a6,dnr),e(V,cnr),e(V,n6),e(n6,r2e),e(r2e,fnr),e(n6,mnr),e(n6,uW),e(uW,gnr),e(n6,hnr),e(V,pnr),e(V,s6),e(s6,t2e),e(t2e,_nr),e(s6,unr),e(s6,bW),e(bW,bnr),e(s6,vnr),e(V,Fnr),e(V,l6),e(l6,a2e),e(a2e,Tnr),e(l6,Mnr),e(l6,vW),e(vW,Enr),e(l6,Cnr),e(V,wnr),e(V,i6),e(i6,n2e),e(n2e,Anr),e(i6,Lnr),e(i6,FW),e(FW,ynr),e(i6,xnr),e(V,$nr),e(V,d6),e(d6,s2e),e(s2e,knr),e(d6,Snr),e(d6,TW),e(TW,Rnr),e(d6,Pnr),e(V,Bnr),e(V,c6),e(c6,l2e),e(l2e,Inr),e(c6,Nnr),e(c6,MW),e(MW,qnr),e(c6,jnr),e(V,Dnr),e(V,f6),e(f6,i2e),e(i2e,Gnr),e(f6,Onr),e(f6,EW),e(EW,Vnr),e(f6,Xnr),e(V,znr),e(V,m6),e(m6,d2e),e(d2e,Qnr),e(m6,Wnr),e(m6,CW),e(CW,Hnr),e(m6,Unr),e(V,Jnr),e(V,g6),e(g6,c2e),e(c2e,Ynr),e(g6,Knr),e(g6,wW),e(wW,Znr),e(g6,esr),e(V,osr),e(V,h6),e(h6,f2e),e(f2e,rsr),e(h6,tsr),e(h6,AW),e(AW,asr),e(h6,nsr),e(so,ssr),e(so,p6),e(p6,lsr),e(p6,m2e),e(m2e,isr),e(p6,dsr),e(p6,g2e),e(g2e,csr),e(so,fsr),M(_6,so,null),b(f,gze,u),b(f,vd,u),e(vd,u6),e(u6,h2e),M(Iy,h2e,null),e(vd,msr),e(vd,p2e),e(p2e,gsr),b(f,hze,u),b(f,Go,u),M(Ny,Go,null),e(Go,hsr),e(Go,Fd),e(Fd,psr),e(Fd,LW),e(LW,_sr),e(Fd,usr),e(Fd,yW),e(yW,bsr),e(Fd,vsr),e(Go,Fsr),e(Go,qy),e(qy,Tsr),e(qy,_2e),e(_2e,Msr),e(qy,Esr),e(Go,Csr),e(Go,bt),M(jy,bt,null),e(bt,wsr),e(bt,u2e),e(u2e,Asr),e(bt,Lsr),e(bt,Td),e(Td,ysr),e(Td,b2e),e(b2e,xsr),e(Td,$sr),e(Td,xW),e(xW,ksr),e(Td,Ssr),e(bt,Rsr),M(b6,bt,null),e(Go,Psr),e(Go,lo),M(Dy,lo,null),e(lo,Bsr),e(lo,v2e),e(v2e,Isr),e(lo,Nsr),e(lo,Qa),e(Qa,qsr),e(Qa,F2e),e(F2e,jsr),e(Qa,Dsr),e(Qa,T2e),e(T2e,Gsr),e(Qa,Osr),e(Qa,M2e),e(M2e,Vsr),e(Qa,Xsr),e(lo,zsr),e(lo,E2e),e(E2e,v6),e(v6,C2e),e(C2e,Qsr),e(v6,Wsr),e(v6,$W),e($W,Hsr),e(v6,Usr),e(lo,Jsr),e(lo,F6),e(F6,Ysr),e(F6,w2e),e(w2e,Ksr),e(F6,Zsr),e(F6,A2e),e(A2e,elr),e(lo,olr),M(T6,lo,null),b(f,pze,u),b(f,Md,u),e(Md,M6),e(M6,L2e),M(Gy,L2e,null),e(Md,rlr),e(Md,y2e),e(y2e,tlr),b(f,_ze,u),b(f,Oo,u),M(Oy,Oo,null),e(Oo,alr),e(Oo,Ed),e(Ed,nlr),e(Ed,kW),e(kW,slr),e(Ed,llr),e(Ed,SW),e(SW,ilr),e(Ed,dlr),e(Oo,clr),e(Oo,Vy),e(Vy,flr),e(Vy,x2e),e(x2e,mlr),e(Vy,glr),e(Oo,hlr),e(Oo,vt),M(Xy,vt,null),e(vt,plr),e(vt,$2e),e($2e,_lr),e(vt,ulr),e(vt,Cd),e(Cd,blr),e(Cd,k2e),e(k2e,vlr),e(Cd,Flr),e(Cd,RW),e(RW,Tlr),e(Cd,Mlr),e(vt,Elr),M(E6,vt,null),e(Oo,Clr),e(Oo,io),M(zy,io,null),e(io,wlr),e(io,S2e),e(S2e,Alr),e(io,Llr),e(io,Wa),e(Wa,ylr),e(Wa,R2e),e(R2e,xlr),e(Wa,$lr),e(Wa,P2e),e(P2e,klr),e(Wa,Slr),e(Wa,B2e),e(B2e,Rlr),e(Wa,Plr),e(io,Blr),e(io,ue),e(ue,C6),e(C6,I2e),e(I2e,Ilr),e(C6,Nlr),e(C6,PW),e(PW,qlr),e(C6,jlr),e(ue,Dlr),e(ue,w6),e(w6,N2e),e(N2e,Glr),e(w6,Olr),e(w6,BW),e(BW,Vlr),e(w6,Xlr),e(ue,zlr),e(ue,A6),e(A6,q2e),e(q2e,Qlr),e(A6,Wlr),e(A6,IW),e(IW,Hlr),e(A6,Ulr),e(ue,Jlr),e(ue,L6),e(L6,j2e),e(j2e,Ylr),e(L6,Klr),e(L6,NW),e(NW,Zlr),e(L6,eir),e(ue,oir),e(ue,Js),e(Js,D2e),e(D2e,rir),e(Js,tir),e(Js,qW),e(qW,air),e(Js,nir),e(Js,jW),e(jW,sir),e(Js,lir),e(ue,iir),e(ue,y6),e(y6,G2e),e(G2e,dir),e(y6,cir),e(y6,DW),e(DW,fir),e(y6,mir),e(ue,gir),e(ue,Ys),e(Ys,O2e),e(O2e,hir),e(Ys,pir),e(Ys,GW),e(GW,_ir),e(Ys,uir),e(Ys,OW),e(OW,bir),e(Ys,vir),e(ue,Fir),e(ue,x6),e(x6,V2e),e(V2e,Tir),e(x6,Mir),e(x6,VW),e(VW,Eir),e(x6,Cir),e(ue,wir),e(ue,Ft),e(Ft,X2e),e(X2e,Air),e(Ft,Lir),e(Ft,XW),e(XW,yir),e(Ft,xir),e(Ft,zW),e(zW,$ir),e(Ft,kir),e(Ft,QW),e(QW,Sir),e(Ft,Rir),e(ue,Pir),e(ue,$6),e($6,z2e),e(z2e,Bir),e($6,Iir),e($6,WW),e(WW,Nir),e($6,qir),e(ue,jir),e(ue,k6),e(k6,Q2e),e(Q2e,Dir),e(k6,Gir),e(k6,HW),e(HW,Oir),e(k6,Vir),e(ue,Xir),e(ue,S6),e(S6,W2e),e(W2e,zir),e(S6,Qir),e(S6,UW),e(UW,Wir),e(S6,Hir),e(ue,Uir),e(ue,R6),e(R6,H2e),e(H2e,Jir),e(R6,Yir),e(R6,JW),e(JW,Kir),e(R6,Zir),e(ue,edr),e(ue,P6),e(P6,U2e),e(U2e,odr),e(P6,rdr),e(P6,YW),e(YW,tdr),e(P6,adr),e(ue,ndr),e(ue,B6),e(B6,J2e),e(J2e,sdr),e(B6,ldr),e(B6,KW),e(KW,idr),e(B6,ddr),e(ue,cdr),e(ue,I6),e(I6,Y2e),e(Y2e,fdr),e(I6,mdr),e(I6,ZW),e(ZW,gdr),e(I6,hdr),e(ue,pdr),e(ue,N6),e(N6,K2e),e(K2e,_dr),e(N6,udr),e(N6,eH),e(eH,bdr),e(N6,vdr),e(io,Fdr),e(io,q6),e(q6,Tdr),e(q6,Z2e),e(Z2e,Mdr),e(q6,Edr),e(q6,ebe),e(ebe,Cdr),e(io,wdr),M(j6,io,null),b(f,uze,u),b(f,wd,u),e(wd,D6),e(D6,obe),M(Qy,obe,null),e(wd,Adr),e(wd,rbe),e(rbe,Ldr),b(f,bze,u),b(f,Vo,u),M(Wy,Vo,null),e(Vo,ydr),e(Vo,Ad),e(Ad,xdr),e(Ad,oH),e(oH,$dr),e(Ad,kdr),e(Ad,rH),e(rH,Sdr),e(Ad,Rdr),e(Vo,Pdr),e(Vo,Hy),e(Hy,Bdr),e(Hy,tbe),e(tbe,Idr),e(Hy,Ndr),e(Vo,qdr),e(Vo,Tt),M(Uy,Tt,null),e(Tt,jdr),e(Tt,abe),e(abe,Ddr),e(Tt,Gdr),e(Tt,Ld),e(Ld,Odr),e(Ld,nbe),e(nbe,Vdr),e(Ld,Xdr),e(Ld,tH),e(tH,zdr),e(Ld,Qdr),e(Tt,Wdr),M(G6,Tt,null),e(Vo,Hdr),e(Vo,co),M(Jy,co,null),e(co,Udr),e(co,sbe),e(sbe,Jdr),e(co,Ydr),e(co,Ha),e(Ha,Kdr),e(Ha,lbe),e(lbe,Zdr),e(Ha,ecr),e(Ha,ibe),e(ibe,ocr),e(Ha,rcr),e(Ha,dbe),e(dbe,tcr),e(Ha,acr),e(co,ncr),e(co,cbe),e(cbe,O6),e(O6,fbe),e(fbe,scr),e(O6,lcr),e(O6,aH),e(aH,icr),e(O6,dcr),e(co,ccr),e(co,V6),e(V6,fcr),e(V6,mbe),e(mbe,mcr),e(V6,gcr),e(V6,gbe),e(gbe,hcr),e(co,pcr),M(X6,co,null),b(f,vze,u),b(f,yd,u),e(yd,z6),e(z6,hbe),M(Yy,hbe,null),e(yd,_cr),e(yd,pbe),e(pbe,ucr),b(f,Fze,u),b(f,Xo,u),M(Ky,Xo,null),e(Xo,bcr),e(Xo,xd),e(xd,vcr),e(xd,nH),e(nH,Fcr),e(xd,Tcr),e(xd,sH),e(sH,Mcr),e(xd,Ecr),e(Xo,Ccr),e(Xo,Zy),e(Zy,wcr),e(Zy,_be),e(_be,Acr),e(Zy,Lcr),e(Xo,ycr),e(Xo,Mt),M(e8,Mt,null),e(Mt,xcr),e(Mt,ube),e(ube,$cr),e(Mt,kcr),e(Mt,$d),e($d,Scr),e($d,bbe),e(bbe,Rcr),e($d,Pcr),e($d,lH),e(lH,Bcr),e($d,Icr),e(Mt,Ncr),M(Q6,Mt,null),e(Xo,qcr),e(Xo,fo),M(o8,fo,null),e(fo,jcr),e(fo,vbe),e(vbe,Dcr),e(fo,Gcr),e(fo,Ua),e(Ua,Ocr),e(Ua,Fbe),e(Fbe,Vcr),e(Ua,Xcr),e(Ua,Tbe),e(Tbe,zcr),e(Ua,Qcr),e(Ua,Mbe),e(Mbe,Wcr),e(Ua,Hcr),e(fo,Ucr),e(fo,Ebe),e(Ebe,W6),e(W6,Cbe),e(Cbe,Jcr),e(W6,Ycr),e(W6,iH),e(iH,Kcr),e(W6,Zcr),e(fo,efr),e(fo,H6),e(H6,ofr),e(H6,wbe),e(wbe,rfr),e(H6,tfr),e(H6,Abe),e(Abe,afr),e(fo,nfr),M(U6,fo,null),b(f,Tze,u),b(f,kd,u),e(kd,J6),e(J6,Lbe),M(r8,Lbe,null),e(kd,sfr),e(kd,ybe),e(ybe,lfr),b(f,Mze,u),b(f,zo,u),M(t8,zo,null),e(zo,ifr),e(zo,Sd),e(Sd,dfr),e(Sd,dH),e(dH,cfr),e(Sd,ffr),e(Sd,cH),e(cH,mfr),e(Sd,gfr),e(zo,hfr),e(zo,a8),e(a8,pfr),e(a8,xbe),e(xbe,_fr),e(a8,ufr),e(zo,bfr),e(zo,Et),M(n8,Et,null),e(Et,vfr),e(Et,$be),e($be,Ffr),e(Et,Tfr),e(Et,Rd),e(Rd,Mfr),e(Rd,kbe),e(kbe,Efr),e(Rd,Cfr),e(Rd,fH),e(fH,wfr),e(Rd,Afr),e(Et,Lfr),M(Y6,Et,null),e(zo,yfr),e(zo,mo),M(s8,mo,null),e(mo,xfr),e(mo,Sbe),e(Sbe,$fr),e(mo,kfr),e(mo,Ja),e(Ja,Sfr),e(Ja,Rbe),e(Rbe,Rfr),e(Ja,Pfr),e(Ja,Pbe),e(Pbe,Bfr),e(Ja,Ifr),e(Ja,Bbe),e(Bbe,Nfr),e(Ja,qfr),e(mo,jfr),e(mo,Pe),e(Pe,K6),e(K6,Ibe),e(Ibe,Dfr),e(K6,Gfr),e(K6,mH),e(mH,Ofr),e(K6,Vfr),e(Pe,Xfr),e(Pe,Z6),e(Z6,Nbe),e(Nbe,zfr),e(Z6,Qfr),e(Z6,gH),e(gH,Wfr),e(Z6,Hfr),e(Pe,Ufr),e(Pe,eT),e(eT,qbe),e(qbe,Jfr),e(eT,Yfr),e(eT,hH),e(hH,Kfr),e(eT,Zfr),e(Pe,emr),e(Pe,oT),e(oT,jbe),e(jbe,omr),e(oT,rmr),e(oT,pH),e(pH,tmr),e(oT,amr),e(Pe,nmr),e(Pe,rT),e(rT,Dbe),e(Dbe,smr),e(rT,lmr),e(rT,_H),e(_H,imr),e(rT,dmr),e(Pe,cmr),e(Pe,tT),e(tT,Gbe),e(Gbe,fmr),e(tT,mmr),e(tT,uH),e(uH,gmr),e(tT,hmr),e(Pe,pmr),e(Pe,aT),e(aT,Obe),e(Obe,_mr),e(aT,umr),e(aT,bH),e(bH,bmr),e(aT,vmr),e(Pe,Fmr),e(Pe,nT),e(nT,Vbe),e(Vbe,Tmr),e(nT,Mmr),e(nT,vH),e(vH,Emr),e(nT,Cmr),e(Pe,wmr),e(Pe,sT),e(sT,Xbe),e(Xbe,Amr),e(sT,Lmr),e(sT,FH),e(FH,ymr),e(sT,xmr),e(mo,$mr),e(mo,lT),e(lT,kmr),e(lT,zbe),e(zbe,Smr),e(lT,Rmr),e(lT,Qbe),e(Qbe,Pmr),e(mo,Bmr),M(iT,mo,null),b(f,Eze,u),b(f,Pd,u),e(Pd,dT),e(dT,Wbe),M(l8,Wbe,null),e(Pd,Imr),e(Pd,Hbe),e(Hbe,Nmr),b(f,Cze,u),b(f,Qo,u),M(i8,Qo,null),e(Qo,qmr),e(Qo,Bd),e(Bd,jmr),e(Bd,TH),e(TH,Dmr),e(Bd,Gmr),e(Bd,MH),e(MH,Omr),e(Bd,Vmr),e(Qo,Xmr),e(Qo,d8),e(d8,zmr),e(d8,Ube),e(Ube,Qmr),e(d8,Wmr),e(Qo,Hmr),e(Qo,Ct),M(c8,Ct,null),e(Ct,Umr),e(Ct,Jbe),e(Jbe,Jmr),e(Ct,Ymr),e(Ct,Id),e(Id,Kmr),e(Id,Ybe),e(Ybe,Zmr),e(Id,egr),e(Id,EH),e(EH,ogr),e(Id,rgr),e(Ct,tgr),M(cT,Ct,null),e(Qo,agr),e(Qo,go),M(f8,go,null),e(go,ngr),e(go,Kbe),e(Kbe,sgr),e(go,lgr),e(go,Ya),e(Ya,igr),e(Ya,Zbe),e(Zbe,dgr),e(Ya,cgr),e(Ya,eve),e(eve,fgr),e(Ya,mgr),e(Ya,ove),e(ove,ggr),e(Ya,hgr),e(go,pgr),e(go,rt),e(rt,fT),e(fT,rve),e(rve,_gr),e(fT,ugr),e(fT,CH),e(CH,bgr),e(fT,vgr),e(rt,Fgr),e(rt,mT),e(mT,tve),e(tve,Tgr),e(mT,Mgr),e(mT,wH),e(wH,Egr),e(mT,Cgr),e(rt,wgr),e(rt,gT),e(gT,ave),e(ave,Agr),e(gT,Lgr),e(gT,AH),e(AH,ygr),e(gT,xgr),e(rt,$gr),e(rt,hT),e(hT,nve),e(nve,kgr),e(hT,Sgr),e(hT,LH),e(LH,Rgr),e(hT,Pgr),e(rt,Bgr),e(rt,pT),e(pT,sve),e(sve,Igr),e(pT,Ngr),e(pT,yH),e(yH,qgr),e(pT,jgr),e(go,Dgr),e(go,_T),e(_T,Ggr),e(_T,lve),e(lve,Ogr),e(_T,Vgr),e(_T,ive),e(ive,Xgr),e(go,zgr),M(uT,go,null),b(f,wze,u),b(f,Nd,u),e(Nd,bT),e(bT,dve),M(m8,dve,null),e(Nd,Qgr),e(Nd,cve),e(cve,Wgr),b(f,Aze,u),b(f,Wo,u),M(g8,Wo,null),e(Wo,Hgr),e(Wo,qd),e(qd,Ugr),e(qd,xH),e(xH,Jgr),e(qd,Ygr),e(qd,$H),e($H,Kgr),e(qd,Zgr),e(Wo,ehr),e(Wo,h8),e(h8,ohr),e(h8,fve),e(fve,rhr),e(h8,thr),e(Wo,ahr),e(Wo,wt),M(p8,wt,null),e(wt,nhr),e(wt,mve),e(mve,shr),e(wt,lhr),e(wt,jd),e(jd,ihr),e(jd,gve),e(gve,dhr),e(jd,chr),e(jd,kH),e(kH,fhr),e(jd,mhr),e(wt,ghr),M(vT,wt,null),e(Wo,hhr),e(Wo,ho),M(_8,ho,null),e(ho,phr),e(ho,hve),e(hve,_hr),e(ho,uhr),e(ho,Ka),e(Ka,bhr),e(Ka,pve),e(pve,vhr),e(Ka,Fhr),e(Ka,_ve),e(_ve,Thr),e(Ka,Mhr),e(Ka,uve),e(uve,Ehr),e(Ka,Chr),e(ho,whr),e(ho,Le),e(Le,FT),e(FT,bve),e(bve,Ahr),e(FT,Lhr),e(FT,SH),e(SH,yhr),e(FT,xhr),e(Le,$hr),e(Le,TT),e(TT,vve),e(vve,khr),e(TT,Shr),e(TT,RH),e(RH,Rhr),e(TT,Phr),e(Le,Bhr),e(Le,MT),e(MT,Fve),e(Fve,Ihr),e(MT,Nhr),e(MT,PH),e(PH,qhr),e(MT,jhr),e(Le,Dhr),e(Le,ET),e(ET,Tve),e(Tve,Ghr),e(ET,Ohr),e(ET,BH),e(BH,Vhr),e(ET,Xhr),e(Le,zhr),e(Le,CT),e(CT,Mve),e(Mve,Qhr),e(CT,Whr),e(CT,IH),e(IH,Hhr),e(CT,Uhr),e(Le,Jhr),e(Le,wT),e(wT,Eve),e(Eve,Yhr),e(wT,Khr),e(wT,NH),e(NH,Zhr),e(wT,epr),e(Le,opr),e(Le,AT),e(AT,Cve),e(Cve,rpr),e(AT,tpr),e(AT,qH),e(qH,apr),e(AT,npr),e(Le,spr),e(Le,LT),e(LT,wve),e(wve,lpr),e(LT,ipr),e(LT,jH),e(jH,dpr),e(LT,cpr),e(Le,fpr),e(Le,yT),e(yT,Ave),e(Ave,mpr),e(yT,gpr),e(yT,DH),e(DH,hpr),e(yT,ppr),e(Le,_pr),e(Le,xT),e(xT,Lve),e(Lve,upr),e(xT,bpr),e(xT,GH),e(GH,vpr),e(xT,Fpr),e(ho,Tpr),e(ho,$T),e($T,Mpr),e($T,yve),e(yve,Epr),e($T,Cpr),e($T,xve),e(xve,wpr),e(ho,Apr),M(kT,ho,null),b(f,Lze,u),b(f,Dd,u),e(Dd,ST),e(ST,$ve),M(u8,$ve,null),e(Dd,Lpr),e(Dd,kve),e(kve,ypr),b(f,yze,u),b(f,Ho,u),M(b8,Ho,null),e(Ho,xpr),e(Ho,Gd),e(Gd,$pr),e(Gd,OH),e(OH,kpr),e(Gd,Spr),e(Gd,VH),e(VH,Rpr),e(Gd,Ppr),e(Ho,Bpr),e(Ho,v8),e(v8,Ipr),e(v8,Sve),e(Sve,Npr),e(v8,qpr),e(Ho,jpr),e(Ho,At),M(F8,At,null),e(At,Dpr),e(At,Rve),e(Rve,Gpr),e(At,Opr),e(At,Od),e(Od,Vpr),e(Od,Pve),e(Pve,Xpr),e(Od,zpr),e(Od,XH),e(XH,Qpr),e(Od,Wpr),e(At,Hpr),M(RT,At,null),e(Ho,Upr),e(Ho,po),M(T8,po,null),e(po,Jpr),e(po,Bve),e(Bve,Ypr),e(po,Kpr),e(po,Za),e(Za,Zpr),e(Za,Ive),e(Ive,e_r),e(Za,o_r),e(Za,Nve),e(Nve,r_r),e(Za,t_r),e(Za,qve),e(qve,a_r),e(Za,n_r),e(po,s_r),e(po,M8),e(M8,PT),e(PT,jve),e(jve,l_r),e(PT,i_r),e(PT,zH),e(zH,d_r),e(PT,c_r),e(M8,f_r),e(M8,BT),e(BT,Dve),e(Dve,m_r),e(BT,g_r),e(BT,QH),e(QH,h_r),e(BT,p_r),e(po,__r),e(po,IT),e(IT,u_r),e(IT,Gve),e(Gve,b_r),e(IT,v_r),e(IT,Ove),e(Ove,F_r),e(po,T_r),M(NT,po,null),b(f,xze,u),b(f,Vd,u),e(Vd,qT),e(qT,Vve),M(E8,Vve,null),e(Vd,M_r),e(Vd,Xve),e(Xve,E_r),b(f,$ze,u),b(f,Uo,u),M(C8,Uo,null),e(Uo,C_r),e(Uo,Xd),e(Xd,w_r),e(Xd,WH),e(WH,A_r),e(Xd,L_r),e(Xd,HH),e(HH,y_r),e(Xd,x_r),e(Uo,$_r),e(Uo,w8),e(w8,k_r),e(w8,zve),e(zve,S_r),e(w8,R_r),e(Uo,P_r),e(Uo,Lt),M(A8,Lt,null),e(Lt,B_r),e(Lt,Qve),e(Qve,I_r),e(Lt,N_r),e(Lt,zd),e(zd,q_r),e(zd,Wve),e(Wve,j_r),e(zd,D_r),e(zd,UH),e(UH,G_r),e(zd,O_r),e(Lt,V_r),M(jT,Lt,null),e(Uo,X_r),e(Uo,_o),M(L8,_o,null),e(_o,z_r),e(_o,Hve),e(Hve,Q_r),e(_o,W_r),e(_o,en),e(en,H_r),e(en,Uve),e(Uve,U_r),e(en,J_r),e(en,Jve),e(Jve,Y_r),e(en,K_r),e(en,Yve),e(Yve,Z_r),e(en,eur),e(_o,our),e(_o,tt),e(tt,DT),e(DT,Kve),e(Kve,rur),e(DT,tur),e(DT,JH),e(JH,aur),e(DT,nur),e(tt,sur),e(tt,GT),e(GT,Zve),e(Zve,lur),e(GT,iur),e(GT,YH),e(YH,dur),e(GT,cur),e(tt,fur),e(tt,OT),e(OT,eFe),e(eFe,mur),e(OT,gur),e(OT,KH),e(KH,hur),e(OT,pur),e(tt,_ur),e(tt,VT),e(VT,oFe),e(oFe,uur),e(VT,bur),e(VT,ZH),e(ZH,vur),e(VT,Fur),e(tt,Tur),e(tt,XT),e(XT,rFe),e(rFe,Mur),e(XT,Eur),e(XT,eU),e(eU,Cur),e(XT,wur),e(_o,Aur),e(_o,zT),e(zT,Lur),e(zT,tFe),e(tFe,yur),e(zT,xur),e(zT,aFe),e(aFe,$ur),e(_o,kur),M(QT,_o,null),b(f,kze,u),b(f,Qd,u),e(Qd,WT),e(WT,nFe),M(y8,nFe,null),e(Qd,Sur),e(Qd,sFe),e(sFe,Rur),b(f,Sze,u),b(f,Jo,u),M(x8,Jo,null),e(Jo,Pur),e(Jo,Wd),e(Wd,Bur),e(Wd,oU),e(oU,Iur),e(Wd,Nur),e(Wd,rU),e(rU,qur),e(Wd,jur),e(Jo,Dur),e(Jo,$8),e($8,Gur),e($8,lFe),e(lFe,Our),e($8,Vur),e(Jo,Xur),e(Jo,yt),M(k8,yt,null),e(yt,zur),e(yt,iFe),e(iFe,Qur),e(yt,Wur),e(yt,Hd),e(Hd,Hur),e(Hd,dFe),e(dFe,Uur),e(Hd,Jur),e(Hd,tU),e(tU,Yur),e(Hd,Kur),e(yt,Zur),M(HT,yt,null),e(Jo,e1r),e(Jo,uo),M(S8,uo,null),e(uo,o1r),e(uo,cFe),e(cFe,r1r),e(uo,t1r),e(uo,on),e(on,a1r),e(on,fFe),e(fFe,n1r),e(on,s1r),e(on,mFe),e(mFe,l1r),e(on,i1r),e(on,gFe),e(gFe,d1r),e(on,c1r),e(uo,f1r),e(uo,rn),e(rn,UT),e(UT,hFe),e(hFe,m1r),e(UT,g1r),e(UT,aU),e(aU,h1r),e(UT,p1r),e(rn,_1r),e(rn,JT),e(JT,pFe),e(pFe,u1r),e(JT,b1r),e(JT,nU),e(nU,v1r),e(JT,F1r),e(rn,T1r),e(rn,YT),e(YT,_Fe),e(_Fe,M1r),e(YT,E1r),e(YT,sU),e(sU,C1r),e(YT,w1r),e(rn,A1r),e(rn,KT),e(KT,uFe),e(uFe,L1r),e(KT,y1r),e(KT,lU),e(lU,x1r),e(KT,$1r),e(uo,k1r),e(uo,ZT),e(ZT,S1r),e(ZT,bFe),e(bFe,R1r),e(ZT,P1r),e(ZT,vFe),e(vFe,B1r),e(uo,I1r),M(e7,uo,null),b(f,Rze,u),b(f,Ud,u),e(Ud,o7),e(o7,FFe),M(R8,FFe,null),e(Ud,N1r),e(Ud,TFe),e(TFe,q1r),b(f,Pze,u),b(f,Yo,u),M(P8,Yo,null),e(Yo,j1r),e(Yo,Jd),e(Jd,D1r),e(Jd,iU),e(iU,G1r),e(Jd,O1r),e(Jd,dU),e(dU,V1r),e(Jd,X1r),e(Yo,z1r),e(Yo,B8),e(B8,Q1r),e(B8,MFe),e(MFe,W1r),e(B8,H1r),e(Yo,U1r),e(Yo,xt),M(I8,xt,null),e(xt,J1r),e(xt,EFe),e(EFe,Y1r),e(xt,K1r),e(xt,Yd),e(Yd,Z1r),e(Yd,CFe),e(CFe,e4r),e(Yd,o4r),e(Yd,cU),e(cU,r4r),e(Yd,t4r),e(xt,a4r),M(r7,xt,null),e(Yo,n4r),e(Yo,bo),M(N8,bo,null),e(bo,s4r),e(bo,wFe),e(wFe,l4r),e(bo,i4r),e(bo,tn),e(tn,d4r),e(tn,AFe),e(AFe,c4r),e(tn,f4r),e(tn,LFe),e(LFe,m4r),e(tn,g4r),e(tn,yFe),e(yFe,h4r),e(tn,p4r),e(bo,_4r),e(bo,q8),e(q8,t7),e(t7,xFe),e(xFe,u4r),e(t7,b4r),e(t7,fU),e(fU,v4r),e(t7,F4r),e(q8,T4r),e(q8,a7),e(a7,$Fe),e($Fe,M4r),e(a7,E4r),e(a7,mU),e(mU,C4r),e(a7,w4r),e(bo,A4r),e(bo,n7),e(n7,L4r),e(n7,kFe),e(kFe,y4r),e(n7,x4r),e(n7,SFe),e(SFe,$4r),e(bo,k4r),M(s7,bo,null),b(f,Bze,u),b(f,Kd,u),e(Kd,l7),e(l7,RFe),M(j8,RFe,null),e(Kd,S4r),e(Kd,PFe),e(PFe,R4r),b(f,Ize,u),b(f,Ko,u),M(D8,Ko,null),e(Ko,P4r),e(Ko,Zd),e(Zd,B4r),e(Zd,gU),e(gU,I4r),e(Zd,N4r),e(Zd,hU),e(hU,q4r),e(Zd,j4r),e(Ko,D4r),e(Ko,G8),e(G8,G4r),e(G8,BFe),e(BFe,O4r),e(G8,V4r),e(Ko,X4r),e(Ko,$t),M(O8,$t,null),e($t,z4r),e($t,IFe),e(IFe,Q4r),e($t,W4r),e($t,ec),e(ec,H4r),e(ec,NFe),e(NFe,U4r),e(ec,J4r),e(ec,pU),e(pU,Y4r),e(ec,K4r),e($t,Z4r),M(i7,$t,null),e(Ko,e2r),e(Ko,vo),M(V8,vo,null),e(vo,o2r),e(vo,qFe),e(qFe,r2r),e(vo,t2r),e(vo,an),e(an,a2r),e(an,jFe),e(jFe,n2r),e(an,s2r),e(an,DFe),e(DFe,l2r),e(an,i2r),e(an,GFe),e(GFe,d2r),e(an,c2r),e(vo,f2r),e(vo,OFe),e(OFe,d7),e(d7,VFe),e(VFe,m2r),e(d7,g2r),e(d7,_U),e(_U,h2r),e(d7,p2r),e(vo,_2r),e(vo,c7),e(c7,u2r),e(c7,XFe),e(XFe,b2r),e(c7,v2r),e(c7,zFe),e(zFe,F2r),e(vo,T2r),M(f7,vo,null),b(f,Nze,u),b(f,oc,u),e(oc,m7),e(m7,QFe),M(X8,QFe,null),e(oc,M2r),e(oc,WFe),e(WFe,E2r),b(f,qze,u),b(f,Zo,u),M(z8,Zo,null),e(Zo,C2r),e(Zo,rc),e(rc,w2r),e(rc,uU),e(uU,A2r),e(rc,L2r),e(rc,bU),e(bU,y2r),e(rc,x2r),e(Zo,$2r),e(Zo,Q8),e(Q8,k2r),e(Q8,HFe),e(HFe,S2r),e(Q8,R2r),e(Zo,P2r),e(Zo,kt),M(W8,kt,null),e(kt,B2r),e(kt,UFe),e(UFe,I2r),e(kt,N2r),e(kt,tc),e(tc,q2r),e(tc,JFe),e(JFe,j2r),e(tc,D2r),e(tc,vU),e(vU,G2r),e(tc,O2r),e(kt,V2r),M(g7,kt,null),e(Zo,X2r),e(Zo,Fo),M(H8,Fo,null),e(Fo,z2r),e(Fo,YFe),e(YFe,Q2r),e(Fo,W2r),e(Fo,nn),e(nn,H2r),e(nn,KFe),e(KFe,U2r),e(nn,J2r),e(nn,ZFe),e(ZFe,Y2r),e(nn,K2r),e(nn,e6e),e(e6e,Z2r),e(nn,ebr),e(Fo,obr),e(Fo,at),e(at,h7),e(h7,o6e),e(o6e,rbr),e(h7,tbr),e(h7,FU),e(FU,abr),e(h7,nbr),e(at,sbr),e(at,p7),e(p7,r6e),e(r6e,lbr),e(p7,ibr),e(p7,TU),e(TU,dbr),e(p7,cbr),e(at,fbr),e(at,_7),e(_7,t6e),e(t6e,mbr),e(_7,gbr),e(_7,MU),e(MU,hbr),e(_7,pbr),e(at,_br),e(at,u7),e(u7,a6e),e(a6e,ubr),e(u7,bbr),e(u7,EU),e(EU,vbr),e(u7,Fbr),e(at,Tbr),e(at,b7),e(b7,n6e),e(n6e,Mbr),e(b7,Ebr),e(b7,CU),e(CU,Cbr),e(b7,wbr),e(Fo,Abr),e(Fo,v7),e(v7,Lbr),e(v7,s6e),e(s6e,ybr),e(v7,xbr),e(v7,l6e),e(l6e,$br),e(Fo,kbr),M(F7,Fo,null),b(f,jze,u),b(f,ac,u),e(ac,T7),e(T7,i6e),M(U8,i6e,null),e(ac,Sbr),e(ac,d6e),e(d6e,Rbr),b(f,Dze,u),b(f,er,u),M(J8,er,null),e(er,Pbr),e(er,nc),e(nc,Bbr),e(nc,wU),e(wU,Ibr),e(nc,Nbr),e(nc,AU),e(AU,qbr),e(nc,jbr),e(er,Dbr),e(er,Y8),e(Y8,Gbr),e(Y8,c6e),e(c6e,Obr),e(Y8,Vbr),e(er,Xbr),e(er,St),M(K8,St,null),e(St,zbr),e(St,f6e),e(f6e,Qbr),e(St,Wbr),e(St,sc),e(sc,Hbr),e(sc,m6e),e(m6e,Ubr),e(sc,Jbr),e(sc,LU),e(LU,Ybr),e(sc,Kbr),e(St,Zbr),M(M7,St,null),e(er,evr),e(er,To),M(Z8,To,null),e(To,ovr),e(To,g6e),e(g6e,rvr),e(To,tvr),e(To,sn),e(sn,avr),e(sn,h6e),e(h6e,nvr),e(sn,svr),e(sn,p6e),e(p6e,lvr),e(sn,ivr),e(sn,_6e),e(_6e,dvr),e(sn,cvr),e(To,fvr),e(To,u6e),e(u6e,E7),e(E7,b6e),e(b6e,mvr),e(E7,gvr),e(E7,yU),e(yU,hvr),e(E7,pvr),e(To,_vr),e(To,C7),e(C7,uvr),e(C7,v6e),e(v6e,bvr),e(C7,vvr),e(C7,F6e),e(F6e,Fvr),e(To,Tvr),M(w7,To,null),b(f,Gze,u),b(f,lc,u),e(lc,A7),e(A7,T6e),M(ex,T6e,null),e(lc,Mvr),e(lc,M6e),e(M6e,Evr),b(f,Oze,u),b(f,or,u),M(ox,or,null),e(or,Cvr),e(or,ic),e(ic,wvr),e(ic,xU),e(xU,Avr),e(ic,Lvr),e(ic,$U),e($U,yvr),e(ic,xvr),e(or,$vr),e(or,rx),e(rx,kvr),e(rx,E6e),e(E6e,Svr),e(rx,Rvr),e(or,Pvr),e(or,Rt),M(tx,Rt,null),e(Rt,Bvr),e(Rt,C6e),e(C6e,Ivr),e(Rt,Nvr),e(Rt,dc),e(dc,qvr),e(dc,w6e),e(w6e,jvr),e(dc,Dvr),e(dc,kU),e(kU,Gvr),e(dc,Ovr),e(Rt,Vvr),M(L7,Rt,null),e(or,Xvr),e(or,xr),M(ax,xr,null),e(xr,zvr),e(xr,A6e),e(A6e,Qvr),e(xr,Wvr),e(xr,ln),e(ln,Hvr),e(ln,L6e),e(L6e,Uvr),e(ln,Jvr),e(ln,y6e),e(y6e,Yvr),e(ln,Kvr),e(ln,x6e),e(x6e,Zvr),e(ln,eFr),e(xr,oFr),e(xr,q),e(q,y7),e(y7,$6e),e($6e,rFr),e(y7,tFr),e(y7,SU),e(SU,aFr),e(y7,nFr),e(q,sFr),e(q,x7),e(x7,k6e),e(k6e,lFr),e(x7,iFr),e(x7,RU),e(RU,dFr),e(x7,cFr),e(q,fFr),e(q,$7),e($7,S6e),e(S6e,mFr),e($7,gFr),e($7,PU),e(PU,hFr),e($7,pFr),e(q,_Fr),e(q,k7),e(k7,R6e),e(R6e,uFr),e(k7,bFr),e(k7,BU),e(BU,vFr),e(k7,FFr),e(q,TFr),e(q,S7),e(S7,P6e),e(P6e,MFr),e(S7,EFr),e(S7,IU),e(IU,CFr),e(S7,wFr),e(q,AFr),e(q,R7),e(R7,B6e),e(B6e,LFr),e(R7,yFr),e(R7,NU),e(NU,xFr),e(R7,$Fr),e(q,kFr),e(q,P7),e(P7,I6e),e(I6e,SFr),e(P7,RFr),e(P7,qU),e(qU,PFr),e(P7,BFr),e(q,IFr),e(q,B7),e(B7,N6e),e(N6e,NFr),e(B7,qFr),e(B7,jU),e(jU,jFr),e(B7,DFr),e(q,GFr),e(q,I7),e(I7,q6e),e(q6e,OFr),e(I7,VFr),e(I7,DU),e(DU,XFr),e(I7,zFr),e(q,QFr),e(q,N7),e(N7,j6e),e(j6e,WFr),e(N7,HFr),e(N7,GU),e(GU,UFr),e(N7,JFr),e(q,YFr),e(q,q7),e(q7,D6e),e(D6e,KFr),e(q7,ZFr),e(q7,OU),e(OU,e6r),e(q7,o6r),e(q,r6r),e(q,j7),e(j7,G6e),e(G6e,t6r),e(j7,a6r),e(j7,VU),e(VU,n6r),e(j7,s6r),e(q,l6r),e(q,D7),e(D7,O6e),e(O6e,i6r),e(D7,d6r),e(D7,XU),e(XU,c6r),e(D7,f6r),e(q,m6r),e(q,G7),e(G7,V6e),e(V6e,g6r),e(G7,h6r),e(G7,zU),e(zU,p6r),e(G7,_6r),e(q,u6r),e(q,O7),e(O7,X6e),e(X6e,b6r),e(O7,v6r),e(O7,QU),e(QU,F6r),e(O7,T6r),e(q,M6r),e(q,V7),e(V7,z6e),e(z6e,E6r),e(V7,C6r),e(V7,WU),e(WU,w6r),e(V7,A6r),e(q,L6r),e(q,X7),e(X7,Q6e),e(Q6e,y6r),e(X7,x6r),e(X7,HU),e(HU,$6r),e(X7,k6r),e(q,S6r),e(q,z7),e(z7,W6e),e(W6e,R6r),e(z7,P6r),e(z7,UU),e(UU,B6r),e(z7,I6r),e(q,N6r),e(q,Ks),e(Ks,H6e),e(H6e,q6r),e(Ks,j6r),e(Ks,JU),e(JU,D6r),e(Ks,G6r),e(Ks,YU),e(YU,O6r),e(Ks,V6r),e(q,X6r),e(q,Q7),e(Q7,U6e),e(U6e,z6r),e(Q7,Q6r),e(Q7,KU),e(KU,W6r),e(Q7,H6r),e(q,U6r),e(q,W7),e(W7,J6e),e(J6e,J6r),e(W7,Y6r),e(W7,ZU),e(ZU,K6r),e(W7,Z6r),e(q,eTr),e(q,H7),e(H7,Y6e),e(Y6e,oTr),e(H7,rTr),e(H7,eJ),e(eJ,tTr),e(H7,aTr),e(q,nTr),e(q,U7),e(U7,K6e),e(K6e,sTr),e(U7,lTr),e(U7,oJ),e(oJ,iTr),e(U7,dTr),e(q,cTr),e(q,J7),e(J7,Z6e),e(Z6e,fTr),e(J7,mTr),e(J7,rJ),e(rJ,gTr),e(J7,hTr),e(q,pTr),e(q,Y7),e(Y7,eTe),e(eTe,_Tr),e(Y7,uTr),e(Y7,tJ),e(tJ,bTr),e(Y7,vTr),e(q,FTr),e(q,K7),e(K7,oTe),e(oTe,TTr),e(K7,MTr),e(K7,aJ),e(aJ,ETr),e(K7,CTr),e(q,wTr),e(q,Z7),e(Z7,rTe),e(rTe,ATr),e(Z7,LTr),e(Z7,nJ),e(nJ,yTr),e(Z7,xTr),e(q,$Tr),e(q,e9),e(e9,tTe),e(tTe,kTr),e(e9,STr),e(e9,sJ),e(sJ,RTr),e(e9,PTr),e(q,BTr),e(q,o9),e(o9,aTe),e(aTe,ITr),e(o9,NTr),e(o9,lJ),e(lJ,qTr),e(o9,jTr),e(q,DTr),e(q,r9),e(r9,nTe),e(nTe,GTr),e(r9,OTr),e(r9,iJ),e(iJ,VTr),e(r9,XTr),e(q,zTr),e(q,t9),e(t9,sTe),e(sTe,QTr),e(t9,WTr),e(t9,dJ),e(dJ,HTr),e(t9,UTr),e(q,JTr),e(q,a9),e(a9,lTe),e(lTe,YTr),e(a9,KTr),e(a9,cJ),e(cJ,ZTr),e(a9,e7r),e(q,o7r),e(q,n9),e(n9,iTe),e(iTe,r7r),e(n9,t7r),e(n9,fJ),e(fJ,a7r),e(n9,n7r),e(q,s7r),e(q,s9),e(s9,dTe),e(dTe,l7r),e(s9,i7r),e(s9,mJ),e(mJ,d7r),e(s9,c7r),e(q,f7r),e(q,l9),e(l9,cTe),e(cTe,m7r),e(l9,g7r),e(l9,gJ),e(gJ,h7r),e(l9,p7r),e(q,_7r),e(q,i9),e(i9,fTe),e(fTe,u7r),e(i9,b7r),e(i9,hJ),e(hJ,v7r),e(i9,F7r),e(q,T7r),e(q,d9),e(d9,mTe),e(mTe,M7r),e(d9,E7r),e(d9,pJ),e(pJ,C7r),e(d9,w7r),e(q,A7r),e(q,c9),e(c9,gTe),e(gTe,L7r),e(c9,y7r),e(c9,_J),e(_J,x7r),e(c9,$7r),e(q,k7r),e(q,f9),e(f9,hTe),e(hTe,S7r),e(f9,R7r),e(f9,uJ),e(uJ,P7r),e(f9,B7r),e(q,I7r),e(q,m9),e(m9,pTe),e(pTe,N7r),e(m9,q7r),e(m9,bJ),e(bJ,j7r),e(m9,D7r),e(q,G7r),e(q,g9),e(g9,_Te),e(_Te,O7r),e(g9,V7r),e(g9,vJ),e(vJ,X7r),e(g9,z7r),e(q,Q7r),e(q,h9),e(h9,uTe),e(uTe,W7r),e(h9,H7r),e(h9,FJ),e(FJ,U7r),e(h9,J7r),e(q,Y7r),e(q,p9),e(p9,bTe),e(bTe,K7r),e(p9,Z7r),e(p9,TJ),e(TJ,e9r),e(p9,o9r),e(q,r9r),e(q,_9),e(_9,vTe),e(vTe,t9r),e(_9,a9r),e(_9,MJ),e(MJ,n9r),e(_9,s9r),e(q,l9r),e(q,u9),e(u9,FTe),e(FTe,i9r),e(u9,d9r),e(u9,EJ),e(EJ,c9r),e(u9,f9r),e(q,m9r),e(q,b9),e(b9,TTe),e(TTe,g9r),e(b9,h9r),e(b9,CJ),e(CJ,p9r),e(b9,_9r),e(q,u9r),e(q,v9),e(v9,MTe),e(MTe,b9r),e(v9,v9r),e(v9,wJ),e(wJ,F9r),e(v9,T9r),e(q,M9r),e(q,F9),e(F9,ETe),e(ETe,E9r),e(F9,C9r),e(F9,AJ),e(AJ,w9r),e(F9,A9r),e(q,L9r),e(q,T9),e(T9,CTe),e(CTe,y9r),e(T9,x9r),e(T9,LJ),e(LJ,$9r),e(T9,k9r),e(q,S9r),e(q,M9),e(M9,wTe),e(wTe,R9r),e(M9,P9r),e(M9,yJ),e(yJ,B9r),e(M9,I9r),e(xr,N9r),M(E9,xr,null),b(f,Vze,u),b(f,cc,u),e(cc,C9),e(C9,ATe),M(nx,ATe,null),e(cc,q9r),e(cc,LTe),e(LTe,j9r),b(f,Xze,u),b(f,rr,u),M(sx,rr,null),e(rr,D9r),e(rr,fc),e(fc,G9r),e(fc,xJ),e(xJ,O9r),e(fc,V9r),e(fc,$J),e($J,X9r),e(fc,z9r),e(rr,Q9r),e(rr,lx),e(lx,W9r),e(lx,yTe),e(yTe,H9r),e(lx,U9r),e(rr,J9r),e(rr,Pt),M(ix,Pt,null),e(Pt,Y9r),e(Pt,xTe),e(xTe,K9r),e(Pt,Z9r),e(Pt,mc),e(mc,eMr),e(mc,$Te),e($Te,oMr),e(mc,rMr),e(mc,kJ),e(kJ,tMr),e(mc,aMr),e(Pt,nMr),M(w9,Pt,null),e(rr,sMr),e(rr,$r),M(dx,$r,null),e($r,lMr),e($r,kTe),e(kTe,iMr),e($r,dMr),e($r,dn),e(dn,cMr),e(dn,STe),e(STe,fMr),e(dn,mMr),e(dn,RTe),e(RTe,gMr),e(dn,hMr),e(dn,PTe),e(PTe,pMr),e(dn,_Mr),e($r,uMr),e($r,se),e(se,A9),e(A9,BTe),e(BTe,bMr),e(A9,vMr),e(A9,SJ),e(SJ,FMr),e(A9,TMr),e(se,MMr),e(se,L9),e(L9,ITe),e(ITe,EMr),e(L9,CMr),e(L9,RJ),e(RJ,wMr),e(L9,AMr),e(se,LMr),e(se,y9),e(y9,NTe),e(NTe,yMr),e(y9,xMr),e(y9,PJ),e(PJ,$Mr),e(y9,kMr),e(se,SMr),e(se,x9),e(x9,qTe),e(qTe,RMr),e(x9,PMr),e(x9,BJ),e(BJ,BMr),e(x9,IMr),e(se,NMr),e(se,$9),e($9,jTe),e(jTe,qMr),e($9,jMr),e($9,IJ),e(IJ,DMr),e($9,GMr),e(se,OMr),e(se,k9),e(k9,DTe),e(DTe,VMr),e(k9,XMr),e(k9,NJ),e(NJ,zMr),e(k9,QMr),e(se,WMr),e(se,S9),e(S9,GTe),e(GTe,HMr),e(S9,UMr),e(S9,qJ),e(qJ,JMr),e(S9,YMr),e(se,KMr),e(se,R9),e(R9,OTe),e(OTe,ZMr),e(R9,eEr),e(R9,jJ),e(jJ,oEr),e(R9,rEr),e(se,tEr),e(se,P9),e(P9,VTe),e(VTe,aEr),e(P9,nEr),e(P9,DJ),e(DJ,sEr),e(P9,lEr),e(se,iEr),e(se,B9),e(B9,XTe),e(XTe,dEr),e(B9,cEr),e(B9,GJ),e(GJ,fEr),e(B9,mEr),e(se,gEr),e(se,I9),e(I9,zTe),e(zTe,hEr),e(I9,pEr),e(I9,OJ),e(OJ,_Er),e(I9,uEr),e(se,bEr),e(se,N9),e(N9,QTe),e(QTe,vEr),e(N9,FEr),e(N9,VJ),e(VJ,TEr),e(N9,MEr),e(se,EEr),e(se,q9),e(q9,WTe),e(WTe,CEr),e(q9,wEr),e(q9,XJ),e(XJ,AEr),e(q9,LEr),e(se,yEr),e(se,j9),e(j9,HTe),e(HTe,xEr),e(j9,$Er),e(j9,zJ),e(zJ,kEr),e(j9,SEr),e(se,REr),e(se,D9),e(D9,UTe),e(UTe,PEr),e(D9,BEr),e(D9,QJ),e(QJ,IEr),e(D9,NEr),e(se,qEr),e(se,G9),e(G9,JTe),e(JTe,jEr),e(G9,DEr),e(G9,WJ),e(WJ,GEr),e(G9,OEr),e(se,VEr),e(se,O9),e(O9,YTe),e(YTe,XEr),e(O9,zEr),e(O9,HJ),e(HJ,QEr),e(O9,WEr),e(se,HEr),e(se,V9),e(V9,KTe),e(KTe,UEr),e(V9,JEr),e(V9,UJ),e(UJ,YEr),e(V9,KEr),e(se,ZEr),e(se,X9),e(X9,ZTe),e(ZTe,eCr),e(X9,oCr),e(X9,JJ),e(JJ,rCr),e(X9,tCr),e(se,aCr),e(se,z9),e(z9,e7e),e(e7e,nCr),e(z9,sCr),e(z9,YJ),e(YJ,lCr),e(z9,iCr),e(se,dCr),e(se,Q9),e(Q9,o7e),e(o7e,cCr),e(Q9,fCr),e(Q9,KJ),e(KJ,mCr),e(Q9,gCr),e(se,hCr),e(se,W9),e(W9,r7e),e(r7e,pCr),e(W9,_Cr),e(W9,ZJ),e(ZJ,uCr),e(W9,bCr),e(se,vCr),e(se,H9),e(H9,t7e),e(t7e,FCr),e(H9,TCr),e(H9,eY),e(eY,MCr),e(H9,ECr),e($r,CCr),M(U9,$r,null),b(f,zze,u),b(f,gc,u),e(gc,J9),e(J9,a7e),M(cx,a7e,null),e(gc,wCr),e(gc,n7e),e(n7e,ACr),b(f,Qze,u),b(f,tr,u),M(fx,tr,null),e(tr,LCr),e(tr,hc),e(hc,yCr),e(hc,oY),e(oY,xCr),e(hc,$Cr),e(hc,rY),e(rY,kCr),e(hc,SCr),e(tr,RCr),e(tr,mx),e(mx,PCr),e(mx,s7e),e(s7e,BCr),e(mx,ICr),e(tr,NCr),e(tr,Bt),M(gx,Bt,null),e(Bt,qCr),e(Bt,l7e),e(l7e,jCr),e(Bt,DCr),e(Bt,pc),e(pc,GCr),e(pc,i7e),e(i7e,OCr),e(pc,VCr),e(pc,tY),e(tY,XCr),e(pc,zCr),e(Bt,QCr),M(Y9,Bt,null),e(tr,WCr),e(tr,kr),M(hx,kr,null),e(kr,HCr),e(kr,d7e),e(d7e,UCr),e(kr,JCr),e(kr,cn),e(cn,YCr),e(cn,c7e),e(c7e,KCr),e(cn,ZCr),e(cn,f7e),e(f7e,e5r),e(cn,o5r),e(cn,m7e),e(m7e,r5r),e(cn,t5r),e(kr,a5r),e(kr,Me),e(Me,K9),e(K9,g7e),e(g7e,n5r),e(K9,s5r),e(K9,aY),e(aY,l5r),e(K9,i5r),e(Me,d5r),e(Me,Z9),e(Z9,h7e),e(h7e,c5r),e(Z9,f5r),e(Z9,nY),e(nY,m5r),e(Z9,g5r),e(Me,h5r),e(Me,eM),e(eM,p7e),e(p7e,p5r),e(eM,_5r),e(eM,sY),e(sY,u5r),e(eM,b5r),e(Me,v5r),e(Me,oM),e(oM,_7e),e(_7e,F5r),e(oM,T5r),e(oM,lY),e(lY,M5r),e(oM,E5r),e(Me,C5r),e(Me,rM),e(rM,u7e),e(u7e,w5r),e(rM,A5r),e(rM,iY),e(iY,L5r),e(rM,y5r),e(Me,x5r),e(Me,tM),e(tM,b7e),e(b7e,$5r),e(tM,k5r),e(tM,dY),e(dY,S5r),e(tM,R5r),e(Me,P5r),e(Me,aM),e(aM,v7e),e(v7e,B5r),e(aM,I5r),e(aM,cY),e(cY,N5r),e(aM,q5r),e(Me,j5r),e(Me,nM),e(nM,F7e),e(F7e,D5r),e(nM,G5r),e(nM,fY),e(fY,O5r),e(nM,V5r),e(Me,X5r),e(Me,sM),e(sM,T7e),e(T7e,z5r),e(sM,Q5r),e(sM,mY),e(mY,W5r),e(sM,H5r),e(Me,U5r),e(Me,lM),e(lM,M7e),e(M7e,J5r),e(lM,Y5r),e(lM,gY),e(gY,K5r),e(lM,Z5r),e(Me,e3r),e(Me,iM),e(iM,E7e),e(E7e,o3r),e(iM,r3r),e(iM,hY),e(hY,t3r),e(iM,a3r),e(Me,n3r),e(Me,dM),e(dM,C7e),e(C7e,s3r),e(dM,l3r),e(dM,pY),e(pY,i3r),e(dM,d3r),e(Me,c3r),e(Me,cM),e(cM,w7e),e(w7e,f3r),e(cM,m3r),e(cM,_Y),e(_Y,g3r),e(cM,h3r),e(kr,p3r),M(fM,kr,null),b(f,Wze,u),b(f,_c,u),e(_c,mM),e(mM,A7e),M(px,A7e,null),e(_c,_3r),e(_c,L7e),e(L7e,u3r),b(f,Hze,u),b(f,ar,u),M(_x,ar,null),e(ar,b3r),e(ar,uc),e(uc,v3r),e(uc,uY),e(uY,F3r),e(uc,T3r),e(uc,bY),e(bY,M3r),e(uc,E3r),e(ar,C3r),e(ar,ux),e(ux,w3r),e(ux,y7e),e(y7e,A3r),e(ux,L3r),e(ar,y3r),e(ar,It),M(bx,It,null),e(It,x3r),e(It,x7e),e(x7e,$3r),e(It,k3r),e(It,bc),e(bc,S3r),e(bc,$7e),e($7e,R3r),e(bc,P3r),e(bc,vY),e(vY,B3r),e(bc,I3r),e(It,N3r),M(gM,It,null),e(ar,q3r),e(ar,Sr),M(vx,Sr,null),e(Sr,j3r),e(Sr,k7e),e(k7e,D3r),e(Sr,G3r),e(Sr,fn),e(fn,O3r),e(fn,S7e),e(S7e,V3r),e(fn,X3r),e(fn,R7e),e(R7e,z3r),e(fn,Q3r),e(fn,P7e),e(P7e,W3r),e(fn,H3r),e(Sr,U3r),e(Sr,Qe),e(Qe,hM),e(hM,B7e),e(B7e,J3r),e(hM,Y3r),e(hM,FY),e(FY,K3r),e(hM,Z3r),e(Qe,e0r),e(Qe,pM),e(pM,I7e),e(I7e,o0r),e(pM,r0r),e(pM,TY),e(TY,t0r),e(pM,a0r),e(Qe,n0r),e(Qe,Zs),e(Zs,N7e),e(N7e,s0r),e(Zs,l0r),e(Zs,MY),e(MY,i0r),e(Zs,d0r),e(Zs,EY),e(EY,c0r),e(Zs,f0r),e(Qe,m0r),e(Qe,_M),e(_M,q7e),e(q7e,g0r),e(_M,h0r),e(_M,CY),e(CY,p0r),e(_M,_0r),e(Qe,u0r),e(Qe,uM),e(uM,j7e),e(j7e,b0r),e(uM,v0r),e(uM,wY),e(wY,F0r),e(uM,T0r),e(Qe,M0r),e(Qe,bM),e(bM,D7e),e(D7e,E0r),e(bM,C0r),e(bM,AY),e(AY,w0r),e(bM,A0r),e(Qe,L0r),e(Qe,vM),e(vM,G7e),e(G7e,y0r),e(vM,x0r),e(vM,LY),e(LY,$0r),e(vM,k0r),e(Sr,S0r),M(FM,Sr,null),b(f,Uze,u),b(f,vc,u),e(vc,TM),e(TM,O7e),M(Fx,O7e,null),e(vc,R0r),e(vc,V7e),e(V7e,P0r),b(f,Jze,u),b(f,nr,u),M(Tx,nr,null),e(nr,B0r),e(nr,Fc),e(Fc,I0r),e(Fc,yY),e(yY,N0r),e(Fc,q0r),e(Fc,xY),e(xY,j0r),e(Fc,D0r),e(nr,G0r),e(nr,Mx),e(Mx,O0r),e(Mx,X7e),e(X7e,V0r),e(Mx,X0r),e(nr,z0r),e(nr,Nt),M(Ex,Nt,null),e(Nt,Q0r),e(Nt,z7e),e(z7e,W0r),e(Nt,H0r),e(Nt,Tc),e(Tc,U0r),e(Tc,Q7e),e(Q7e,J0r),e(Tc,Y0r),e(Tc,$Y),e($Y,K0r),e(Tc,Z0r),e(Nt,ewr),M(MM,Nt,null),e(nr,owr),e(nr,Rr),M(Cx,Rr,null),e(Rr,rwr),e(Rr,W7e),e(W7e,twr),e(Rr,awr),e(Rr,mn),e(mn,nwr),e(mn,H7e),e(H7e,swr),e(mn,lwr),e(mn,U7e),e(U7e,iwr),e(mn,dwr),e(mn,J7e),e(J7e,cwr),e(mn,fwr),e(Rr,mwr),e(Rr,ie),e(ie,EM),e(EM,Y7e),e(Y7e,gwr),e(EM,hwr),e(EM,kY),e(kY,pwr),e(EM,_wr),e(ie,uwr),e(ie,CM),e(CM,K7e),e(K7e,bwr),e(CM,vwr),e(CM,SY),e(SY,Fwr),e(CM,Twr),e(ie,Mwr),e(ie,wM),e(wM,Z7e),e(Z7e,Ewr),e(wM,Cwr),e(wM,RY),e(RY,wwr),e(wM,Awr),e(ie,Lwr),e(ie,AM),e(AM,e9e),e(e9e,ywr),e(AM,xwr),e(AM,PY),e(PY,$wr),e(AM,kwr),e(ie,Swr),e(ie,LM),e(LM,o9e),e(o9e,Rwr),e(LM,Pwr),e(LM,BY),e(BY,Bwr),e(LM,Iwr),e(ie,Nwr),e(ie,yM),e(yM,r9e),e(r9e,qwr),e(yM,jwr),e(yM,IY),e(IY,Dwr),e(yM,Gwr),e(ie,Owr),e(ie,xM),e(xM,t9e),e(t9e,Vwr),e(xM,Xwr),e(xM,NY),e(NY,zwr),e(xM,Qwr),e(ie,Wwr),e(ie,$M),e($M,a9e),e(a9e,Hwr),e($M,Uwr),e($M,qY),e(qY,Jwr),e($M,Ywr),e(ie,Kwr),e(ie,kM),e(kM,n9e),e(n9e,Zwr),e(kM,eAr),e(kM,jY),e(jY,oAr),e(kM,rAr),e(ie,tAr),e(ie,SM),e(SM,s9e),e(s9e,aAr),e(SM,nAr),e(SM,DY),e(DY,sAr),e(SM,lAr),e(ie,iAr),e(ie,RM),e(RM,l9e),e(l9e,dAr),e(RM,cAr),e(RM,GY),e(GY,fAr),e(RM,mAr),e(ie,gAr),e(ie,PM),e(PM,i9e),e(i9e,hAr),e(PM,pAr),e(PM,OY),e(OY,_Ar),e(PM,uAr),e(ie,bAr),e(ie,BM),e(BM,d9e),e(d9e,vAr),e(BM,FAr),e(BM,VY),e(VY,TAr),e(BM,MAr),e(ie,EAr),e(ie,IM),e(IM,c9e),e(c9e,CAr),e(IM,wAr),e(IM,XY),e(XY,AAr),e(IM,LAr),e(ie,yAr),e(ie,NM),e(NM,f9e),e(f9e,xAr),e(NM,$Ar),e(NM,zY),e(zY,kAr),e(NM,SAr),e(ie,RAr),e(ie,qM),e(qM,m9e),e(m9e,PAr),e(qM,BAr),e(qM,QY),e(QY,IAr),e(qM,NAr),e(ie,qAr),e(ie,jM),e(jM,g9e),e(g9e,jAr),e(jM,DAr),e(jM,WY),e(WY,GAr),e(jM,OAr),e(ie,VAr),e(ie,DM),e(DM,h9e),e(h9e,XAr),e(DM,zAr),e(DM,HY),e(HY,QAr),e(DM,WAr),e(ie,HAr),e(ie,GM),e(GM,p9e),e(p9e,UAr),e(GM,JAr),e(GM,UY),e(UY,YAr),e(GM,KAr),e(ie,ZAr),e(ie,OM),e(OM,_9e),e(_9e,eLr),e(OM,oLr),e(OM,JY),e(JY,rLr),e(OM,tLr),e(Rr,aLr),M(VM,Rr,null),b(f,Yze,u),b(f,Mc,u),e(Mc,XM),e(XM,u9e),M(wx,u9e,null),e(Mc,nLr),e(Mc,b9e),e(b9e,sLr),b(f,Kze,u),b(f,sr,u),M(Ax,sr,null),e(sr,lLr),e(sr,Ec),e(Ec,iLr),e(Ec,YY),e(YY,dLr),e(Ec,cLr),e(Ec,KY),e(KY,fLr),e(Ec,mLr),e(sr,gLr),e(sr,Lx),e(Lx,hLr),e(Lx,v9e),e(v9e,pLr),e(Lx,_Lr),e(sr,uLr),e(sr,qt),M(yx,qt,null),e(qt,bLr),e(qt,F9e),e(F9e,vLr),e(qt,FLr),e(qt,Cc),e(Cc,TLr),e(Cc,T9e),e(T9e,MLr),e(Cc,ELr),e(Cc,ZY),e(ZY,CLr),e(Cc,wLr),e(qt,ALr),M(zM,qt,null),e(sr,LLr),e(sr,Pr),M(xx,Pr,null),e(Pr,yLr),e(Pr,M9e),e(M9e,xLr),e(Pr,$Lr),e(Pr,gn),e(gn,kLr),e(gn,E9e),e(E9e,SLr),e(gn,RLr),e(gn,C9e),e(C9e,PLr),e(gn,BLr),e(gn,w9e),e(w9e,ILr),e(gn,NLr),e(Pr,qLr),e(Pr,ye),e(ye,QM),e(QM,A9e),e(A9e,jLr),e(QM,DLr),e(QM,eK),e(eK,GLr),e(QM,OLr),e(ye,VLr),e(ye,WM),e(WM,L9e),e(L9e,XLr),e(WM,zLr),e(WM,oK),e(oK,QLr),e(WM,WLr),e(ye,HLr),e(ye,HM),e(HM,y9e),e(y9e,ULr),e(HM,JLr),e(HM,rK),e(rK,YLr),e(HM,KLr),e(ye,ZLr),e(ye,UM),e(UM,x9e),e(x9e,eyr),e(UM,oyr),e(UM,tK),e(tK,ryr),e(UM,tyr),e(ye,ayr),e(ye,JM),e(JM,$9e),e($9e,nyr),e(JM,syr),e(JM,aK),e(aK,lyr),e(JM,iyr),e(ye,dyr),e(ye,YM),e(YM,k9e),e(k9e,cyr),e(YM,fyr),e(YM,nK),e(nK,myr),e(YM,gyr),e(ye,hyr),e(ye,KM),e(KM,S9e),e(S9e,pyr),e(KM,_yr),e(KM,sK),e(sK,uyr),e(KM,byr),e(ye,vyr),e(ye,ZM),e(ZM,R9e),e(R9e,Fyr),e(ZM,Tyr),e(ZM,lK),e(lK,Myr),e(ZM,Eyr),e(ye,Cyr),e(ye,eE),e(eE,P9e),e(P9e,wyr),e(eE,Ayr),e(eE,iK),e(iK,Lyr),e(eE,yyr),e(ye,xyr),e(ye,oE),e(oE,B9e),e(B9e,$yr),e(oE,kyr),e(oE,dK),e(dK,Syr),e(oE,Ryr),e(Pr,Pyr),M(rE,Pr,null),b(f,Zze,u),b(f,wc,u),e(wc,tE),e(tE,I9e),M($x,I9e,null),e(wc,Byr),e(wc,N9e),e(N9e,Iyr),b(f,eQe,u),b(f,lr,u),M(kx,lr,null),e(lr,Nyr),e(lr,Ac),e(Ac,qyr),e(Ac,cK),e(cK,jyr),e(Ac,Dyr),e(Ac,fK),e(fK,Gyr),e(Ac,Oyr),e(lr,Vyr),e(lr,Sx),e(Sx,Xyr),e(Sx,q9e),e(q9e,zyr),e(Sx,Qyr),e(lr,Wyr),e(lr,jt),M(Rx,jt,null),e(jt,Hyr),e(jt,j9e),e(j9e,Uyr),e(jt,Jyr),e(jt,Lc),e(Lc,Yyr),e(Lc,D9e),e(D9e,Kyr),e(Lc,Zyr),e(Lc,mK),e(mK,e8r),e(Lc,o8r),e(jt,r8r),M(aE,jt,null),e(lr,t8r),e(lr,Br),M(Px,Br,null),e(Br,a8r),e(Br,G9e),e(G9e,n8r),e(Br,s8r),e(Br,hn),e(hn,l8r),e(hn,O9e),e(O9e,i8r),e(hn,d8r),e(hn,V9e),e(V9e,c8r),e(hn,f8r),e(hn,X9e),e(X9e,m8r),e(hn,g8r),e(Br,h8r),e(Br,te),e(te,nE),e(nE,z9e),e(z9e,p8r),e(nE,_8r),e(nE,gK),e(gK,u8r),e(nE,b8r),e(te,v8r),e(te,sE),e(sE,Q9e),e(Q9e,F8r),e(sE,T8r),e(sE,hK),e(hK,M8r),e(sE,E8r),e(te,C8r),e(te,lE),e(lE,W9e),e(W9e,w8r),e(lE,A8r),e(lE,pK),e(pK,L8r),e(lE,y8r),e(te,x8r),e(te,iE),e(iE,H9e),e(H9e,$8r),e(iE,k8r),e(iE,_K),e(_K,S8r),e(iE,R8r),e(te,P8r),e(te,dE),e(dE,U9e),e(U9e,B8r),e(dE,I8r),e(dE,uK),e(uK,N8r),e(dE,q8r),e(te,j8r),e(te,cE),e(cE,J9e),e(J9e,D8r),e(cE,G8r),e(cE,bK),e(bK,O8r),e(cE,V8r),e(te,X8r),e(te,fE),e(fE,Y9e),e(Y9e,z8r),e(fE,Q8r),e(fE,vK),e(vK,W8r),e(fE,H8r),e(te,U8r),e(te,mE),e(mE,K9e),e(K9e,J8r),e(mE,Y8r),e(mE,FK),e(FK,K8r),e(mE,Z8r),e(te,exr),e(te,gE),e(gE,Z9e),e(Z9e,oxr),e(gE,rxr),e(gE,TK),e(TK,txr),e(gE,axr),e(te,nxr),e(te,hE),e(hE,eMe),e(eMe,sxr),e(hE,lxr),e(hE,MK),e(MK,ixr),e(hE,dxr),e(te,cxr),e(te,pE),e(pE,oMe),e(oMe,fxr),e(pE,mxr),e(pE,EK),e(EK,gxr),e(pE,hxr),e(te,pxr),e(te,_E),e(_E,rMe),e(rMe,_xr),e(_E,uxr),e(_E,CK),e(CK,bxr),e(_E,vxr),e(te,Fxr),e(te,uE),e(uE,tMe),e(tMe,Txr),e(uE,Mxr),e(uE,wK),e(wK,Exr),e(uE,Cxr),e(te,wxr),e(te,bE),e(bE,aMe),e(aMe,Axr),e(bE,Lxr),e(bE,AK),e(AK,yxr),e(bE,xxr),e(te,$xr),e(te,vE),e(vE,nMe),e(nMe,kxr),e(vE,Sxr),e(vE,LK),e(LK,Rxr),e(vE,Pxr),e(te,Bxr),e(te,FE),e(FE,sMe),e(sMe,Ixr),e(FE,Nxr),e(FE,yK),e(yK,qxr),e(FE,jxr),e(te,Dxr),e(te,TE),e(TE,lMe),e(lMe,Gxr),e(TE,Oxr),e(TE,xK),e(xK,Vxr),e(TE,Xxr),e(te,zxr),e(te,ME),e(ME,iMe),e(iMe,Qxr),e(ME,Wxr),e(ME,$K),e($K,Hxr),e(ME,Uxr),e(te,Jxr),e(te,EE),e(EE,dMe),e(dMe,Yxr),e(EE,Kxr),e(EE,kK),e(kK,Zxr),e(EE,e$r),e(te,o$r),e(te,CE),e(CE,cMe),e(cMe,r$r),e(CE,t$r),e(CE,SK),e(SK,a$r),e(CE,n$r),e(te,s$r),e(te,wE),e(wE,fMe),e(fMe,l$r),e(wE,i$r),e(wE,RK),e(RK,d$r),e(wE,c$r),e(te,f$r),e(te,AE),e(AE,mMe),e(mMe,m$r),e(AE,g$r),e(AE,PK),e(PK,h$r),e(AE,p$r),e(te,_$r),e(te,LE),e(LE,gMe),e(gMe,u$r),e(LE,b$r),e(LE,BK),e(BK,v$r),e(LE,F$r),e(te,T$r),e(te,yE),e(yE,hMe),e(hMe,M$r),e(yE,E$r),e(yE,IK),e(IK,C$r),e(yE,w$r),e(te,A$r),e(te,xE),e(xE,pMe),e(pMe,L$r),e(xE,y$r),e(xE,NK),e(NK,x$r),e(xE,$$r),e(te,k$r),e(te,$E),e($E,_Me),e(_Me,S$r),e($E,R$r),e($E,qK),e(qK,P$r),e($E,B$r),e(Br,I$r),M(kE,Br,null),b(f,oQe,u),b(f,yc,u),e(yc,SE),e(SE,uMe),M(Bx,uMe,null),e(yc,N$r),e(yc,bMe),e(bMe,q$r),b(f,rQe,u),b(f,ir,u),M(Ix,ir,null),e(ir,j$r),e(ir,xc),e(xc,D$r),e(xc,jK),e(jK,G$r),e(xc,O$r),e(xc,DK),e(DK,V$r),e(xc,X$r),e(ir,z$r),e(ir,Nx),e(Nx,Q$r),e(Nx,vMe),e(vMe,W$r),e(Nx,H$r),e(ir,U$r),e(ir,Dt),M(qx,Dt,null),e(Dt,J$r),e(Dt,FMe),e(FMe,Y$r),e(Dt,K$r),e(Dt,$c),e($c,Z$r),e($c,TMe),e(TMe,ekr),e($c,okr),e($c,GK),e(GK,rkr),e($c,tkr),e(Dt,akr),M(RE,Dt,null),e(ir,nkr),e(ir,Ir),M(jx,Ir,null),e(Ir,skr),e(Ir,MMe),e(MMe,lkr),e(Ir,ikr),e(Ir,pn),e(pn,dkr),e(pn,EMe),e(EMe,ckr),e(pn,fkr),e(pn,CMe),e(CMe,mkr),e(pn,gkr),e(pn,wMe),e(wMe,hkr),e(pn,pkr),e(Ir,_kr),e(Ir,be),e(be,PE),e(PE,AMe),e(AMe,ukr),e(PE,bkr),e(PE,OK),e(OK,vkr),e(PE,Fkr),e(be,Tkr),e(be,BE),e(BE,LMe),e(LMe,Mkr),e(BE,Ekr),e(BE,VK),e(VK,Ckr),e(BE,wkr),e(be,Akr),e(be,IE),e(IE,yMe),e(yMe,Lkr),e(IE,ykr),e(IE,XK),e(XK,xkr),e(IE,$kr),e(be,kkr),e(be,NE),e(NE,xMe),e(xMe,Skr),e(NE,Rkr),e(NE,zK),e(zK,Pkr),e(NE,Bkr),e(be,Ikr),e(be,qE),e(qE,$Me),e($Me,Nkr),e(qE,qkr),e(qE,QK),e(QK,jkr),e(qE,Dkr),e(be,Gkr),e(be,jE),e(jE,kMe),e(kMe,Okr),e(jE,Vkr),e(jE,WK),e(WK,Xkr),e(jE,zkr),e(be,Qkr),e(be,DE),e(DE,SMe),e(SMe,Wkr),e(DE,Hkr),e(DE,HK),e(HK,Ukr),e(DE,Jkr),e(be,Ykr),e(be,GE),e(GE,RMe),e(RMe,Kkr),e(GE,Zkr),e(GE,UK),e(UK,eSr),e(GE,oSr),e(be,rSr),e(be,OE),e(OE,PMe),e(PMe,tSr),e(OE,aSr),e(OE,JK),e(JK,nSr),e(OE,sSr),e(be,lSr),e(be,VE),e(VE,BMe),e(BMe,iSr),e(VE,dSr),e(VE,YK),e(YK,cSr),e(VE,fSr),e(be,mSr),e(be,XE),e(XE,IMe),e(IMe,gSr),e(XE,hSr),e(XE,KK),e(KK,pSr),e(XE,_Sr),e(be,uSr),e(be,zE),e(zE,NMe),e(NMe,bSr),e(zE,vSr),e(zE,ZK),e(ZK,FSr),e(zE,TSr),e(be,MSr),e(be,QE),e(QE,qMe),e(qMe,ESr),e(QE,CSr),e(QE,eZ),e(eZ,wSr),e(QE,ASr),e(be,LSr),e(be,WE),e(WE,jMe),e(jMe,ySr),e(WE,xSr),e(WE,oZ),e(oZ,$Sr),e(WE,kSr),e(be,SSr),e(be,HE),e(HE,DMe),e(DMe,RSr),e(HE,PSr),e(HE,rZ),e(rZ,BSr),e(HE,ISr),e(be,NSr),e(be,UE),e(UE,GMe),e(GMe,qSr),e(UE,jSr),e(UE,tZ),e(tZ,DSr),e(UE,GSr),e(be,OSr),e(be,JE),e(JE,OMe),e(OMe,VSr),e(JE,XSr),e(JE,aZ),e(aZ,zSr),e(JE,QSr),e(Ir,WSr),M(YE,Ir,null),b(f,tQe,u),b(f,kc,u),e(kc,KE),e(KE,VMe),M(Dx,VMe,null),e(kc,HSr),e(kc,XMe),e(XMe,USr),b(f,aQe,u),b(f,dr,u),M(Gx,dr,null),e(dr,JSr),e(dr,Sc),e(Sc,YSr),e(Sc,nZ),e(nZ,KSr),e(Sc,ZSr),e(Sc,sZ),e(sZ,eRr),e(Sc,oRr),e(dr,rRr),e(dr,Ox),e(Ox,tRr),e(Ox,zMe),e(zMe,aRr),e(Ox,nRr),e(dr,sRr),e(dr,Gt),M(Vx,Gt,null),e(Gt,lRr),e(Gt,QMe),e(QMe,iRr),e(Gt,dRr),e(Gt,Rc),e(Rc,cRr),e(Rc,WMe),e(WMe,fRr),e(Rc,mRr),e(Rc,lZ),e(lZ,gRr),e(Rc,hRr),e(Gt,pRr),M(ZE,Gt,null),e(dr,_Rr),e(dr,Nr),M(Xx,Nr,null),e(Nr,uRr),e(Nr,HMe),e(HMe,bRr),e(Nr,vRr),e(Nr,_n),e(_n,FRr),e(_n,UMe),e(UMe,TRr),e(_n,MRr),e(_n,JMe),e(JMe,ERr),e(_n,CRr),e(_n,YMe),e(YMe,wRr),e(_n,ARr),e(Nr,LRr),e(Nr,zx),e(zx,eC),e(eC,KMe),e(KMe,yRr),e(eC,xRr),e(eC,iZ),e(iZ,$Rr),e(eC,kRr),e(zx,SRr),e(zx,oC),e(oC,ZMe),e(ZMe,RRr),e(oC,PRr),e(oC,dZ),e(dZ,BRr),e(oC,IRr),e(Nr,NRr),M(rC,Nr,null),b(f,nQe,u),b(f,Pc,u),e(Pc,tC),e(tC,eEe),M(Qx,eEe,null),e(Pc,qRr),e(Pc,oEe),e(oEe,jRr),b(f,sQe,u),b(f,cr,u),M(Wx,cr,null),e(cr,DRr),e(cr,Bc),e(Bc,GRr),e(Bc,cZ),e(cZ,ORr),e(Bc,VRr),e(Bc,fZ),e(fZ,XRr),e(Bc,zRr),e(cr,QRr),e(cr,Hx),e(Hx,WRr),e(Hx,rEe),e(rEe,HRr),e(Hx,URr),e(cr,JRr),e(cr,Ot),M(Ux,Ot,null),e(Ot,YRr),e(Ot,tEe),e(tEe,KRr),e(Ot,ZRr),e(Ot,Ic),e(Ic,ePr),e(Ic,aEe),e(aEe,oPr),e(Ic,rPr),e(Ic,mZ),e(mZ,tPr),e(Ic,aPr),e(Ot,nPr),M(aC,Ot,null),e(cr,sPr),e(cr,qr),M(Jx,qr,null),e(qr,lPr),e(qr,nEe),e(nEe,iPr),e(qr,dPr),e(qr,un),e(un,cPr),e(un,sEe),e(sEe,fPr),e(un,mPr),e(un,lEe),e(lEe,gPr),e(un,hPr),e(un,iEe),e(iEe,pPr),e(un,_Pr),e(qr,uPr),e(qr,dEe),e(dEe,nC),e(nC,cEe),e(cEe,bPr),e(nC,vPr),e(nC,gZ),e(gZ,FPr),e(nC,TPr),e(qr,MPr),M(sC,qr,null),b(f,lQe,u),b(f,Nc,u),e(Nc,lC),e(lC,fEe),M(Yx,fEe,null),e(Nc,EPr),e(Nc,mEe),e(mEe,CPr),b(f,iQe,u),b(f,fr,u),M(Kx,fr,null),e(fr,wPr),e(fr,qc),e(qc,APr),e(qc,hZ),e(hZ,LPr),e(qc,yPr),e(qc,pZ),e(pZ,xPr),e(qc,$Pr),e(fr,kPr),e(fr,Zx),e(Zx,SPr),e(Zx,gEe),e(gEe,RPr),e(Zx,PPr),e(fr,BPr),e(fr,Vt),M(e$,Vt,null),e(Vt,IPr),e(Vt,hEe),e(hEe,NPr),e(Vt,qPr),e(Vt,jc),e(jc,jPr),e(jc,pEe),e(pEe,DPr),e(jc,GPr),e(jc,_Z),e(_Z,OPr),e(jc,VPr),e(Vt,XPr),M(iC,Vt,null),e(fr,zPr),e(fr,jr),M(o$,jr,null),e(jr,QPr),e(jr,_Ee),e(_Ee,WPr),e(jr,HPr),e(jr,bn),e(bn,UPr),e(bn,uEe),e(uEe,JPr),e(bn,YPr),e(bn,bEe),e(bEe,KPr),e(bn,ZPr),e(bn,vEe),e(vEe,eBr),e(bn,oBr),e(jr,rBr),e(jr,de),e(de,dC),e(dC,FEe),e(FEe,tBr),e(dC,aBr),e(dC,uZ),e(uZ,nBr),e(dC,sBr),e(de,lBr),e(de,cC),e(cC,TEe),e(TEe,iBr),e(cC,dBr),e(cC,bZ),e(bZ,cBr),e(cC,fBr),e(de,mBr),e(de,fC),e(fC,MEe),e(MEe,gBr),e(fC,hBr),e(fC,vZ),e(vZ,pBr),e(fC,_Br),e(de,uBr),e(de,mC),e(mC,EEe),e(EEe,bBr),e(mC,vBr),e(mC,FZ),e(FZ,FBr),e(mC,TBr),e(de,MBr),e(de,gC),e(gC,CEe),e(CEe,EBr),e(gC,CBr),e(gC,TZ),e(TZ,wBr),e(gC,ABr),e(de,LBr),e(de,hC),e(hC,wEe),e(wEe,yBr),e(hC,xBr),e(hC,MZ),e(MZ,$Br),e(hC,kBr),e(de,SBr),e(de,pC),e(pC,AEe),e(AEe,RBr),e(pC,PBr),e(pC,EZ),e(EZ,BBr),e(pC,IBr),e(de,NBr),e(de,_C),e(_C,LEe),e(LEe,qBr),e(_C,jBr),e(_C,CZ),e(CZ,DBr),e(_C,GBr),e(de,OBr),e(de,uC),e(uC,yEe),e(yEe,VBr),e(uC,XBr),e(uC,wZ),e(wZ,zBr),e(uC,QBr),e(de,WBr),e(de,bC),e(bC,xEe),e(xEe,HBr),e(bC,UBr),e(bC,AZ),e(AZ,JBr),e(bC,YBr),e(de,KBr),e(de,vC),e(vC,$Ee),e($Ee,ZBr),e(vC,eIr),e(vC,LZ),e(LZ,oIr),e(vC,rIr),e(de,tIr),e(de,FC),e(FC,kEe),e(kEe,aIr),e(FC,nIr),e(FC,yZ),e(yZ,sIr),e(FC,lIr),e(de,iIr),e(de,TC),e(TC,SEe),e(SEe,dIr),e(TC,cIr),e(TC,xZ),e(xZ,fIr),e(TC,mIr),e(de,gIr),e(de,MC),e(MC,REe),e(REe,hIr),e(MC,pIr),e(MC,$Z),e($Z,_Ir),e(MC,uIr),e(de,bIr),e(de,EC),e(EC,PEe),e(PEe,vIr),e(EC,FIr),e(EC,kZ),e(kZ,TIr),e(EC,MIr),e(de,EIr),e(de,CC),e(CC,BEe),e(BEe,CIr),e(CC,wIr),e(CC,SZ),e(SZ,AIr),e(CC,LIr),e(de,yIr),e(de,wC),e(wC,IEe),e(IEe,xIr),e(wC,$Ir),e(wC,RZ),e(RZ,kIr),e(wC,SIr),e(de,RIr),e(de,AC),e(AC,NEe),e(NEe,PIr),e(AC,BIr),e(AC,PZ),e(PZ,IIr),e(AC,NIr),e(de,qIr),e(de,LC),e(LC,qEe),e(qEe,jIr),e(LC,DIr),e(LC,BZ),e(BZ,GIr),e(LC,OIr),e(de,VIr),e(de,yC),e(yC,jEe),e(jEe,XIr),e(yC,zIr),e(yC,IZ),e(IZ,QIr),e(yC,WIr),e(jr,HIr),M(xC,jr,null),b(f,dQe,u),b(f,Dc,u),e(Dc,$C),e($C,DEe),M(r$,DEe,null),e(Dc,UIr),e(Dc,GEe),e(GEe,JIr),b(f,cQe,u),b(f,mr,u),M(t$,mr,null),e(mr,YIr),e(mr,Gc),e(Gc,KIr),e(Gc,NZ),e(NZ,ZIr),e(Gc,eNr),e(Gc,qZ),e(qZ,oNr),e(Gc,rNr),e(mr,tNr),e(mr,a$),e(a$,aNr),e(a$,OEe),e(OEe,nNr),e(a$,sNr),e(mr,lNr),e(mr,Xt),M(n$,Xt,null),e(Xt,iNr),e(Xt,VEe),e(VEe,dNr),e(Xt,cNr),e(Xt,Oc),e(Oc,fNr),e(Oc,XEe),e(XEe,mNr),e(Oc,gNr),e(Oc,jZ),e(jZ,hNr),e(Oc,pNr),e(Xt,_Nr),M(kC,Xt,null),e(mr,uNr),e(mr,Dr),M(s$,Dr,null),e(Dr,bNr),e(Dr,zEe),e(zEe,vNr),e(Dr,FNr),e(Dr,vn),e(vn,TNr),e(vn,QEe),e(QEe,MNr),e(vn,ENr),e(vn,WEe),e(WEe,CNr),e(vn,wNr),e(vn,HEe),e(HEe,ANr),e(vn,LNr),e(Dr,yNr),e(Dr,ce),e(ce,SC),e(SC,UEe),e(UEe,xNr),e(SC,$Nr),e(SC,DZ),e(DZ,kNr),e(SC,SNr),e(ce,RNr),e(ce,RC),e(RC,JEe),e(JEe,PNr),e(RC,BNr),e(RC,GZ),e(GZ,INr),e(RC,NNr),e(ce,qNr),e(ce,PC),e(PC,YEe),e(YEe,jNr),e(PC,DNr),e(PC,OZ),e(OZ,GNr),e(PC,ONr),e(ce,VNr),e(ce,BC),e(BC,KEe),e(KEe,XNr),e(BC,zNr),e(BC,VZ),e(VZ,QNr),e(BC,WNr),e(ce,HNr),e(ce,IC),e(IC,ZEe),e(ZEe,UNr),e(IC,JNr),e(IC,XZ),e(XZ,YNr),e(IC,KNr),e(ce,ZNr),e(ce,NC),e(NC,eCe),e(eCe,eqr),e(NC,oqr),e(NC,zZ),e(zZ,rqr),e(NC,tqr),e(ce,aqr),e(ce,qC),e(qC,oCe),e(oCe,nqr),e(qC,sqr),e(qC,QZ),e(QZ,lqr),e(qC,iqr),e(ce,dqr),e(ce,jC),e(jC,rCe),e(rCe,cqr),e(jC,fqr),e(jC,WZ),e(WZ,mqr),e(jC,gqr),e(ce,hqr),e(ce,DC),e(DC,tCe),e(tCe,pqr),e(DC,_qr),e(DC,HZ),e(HZ,uqr),e(DC,bqr),e(ce,vqr),e(ce,GC),e(GC,aCe),e(aCe,Fqr),e(GC,Tqr),e(GC,UZ),e(UZ,Mqr),e(GC,Eqr),e(ce,Cqr),e(ce,OC),e(OC,nCe),e(nCe,wqr),e(OC,Aqr),e(OC,JZ),e(JZ,Lqr),e(OC,yqr),e(ce,xqr),e(ce,VC),e(VC,sCe),e(sCe,$qr),e(VC,kqr),e(VC,YZ),e(YZ,Sqr),e(VC,Rqr),e(ce,Pqr),e(ce,XC),e(XC,lCe),e(lCe,Bqr),e(XC,Iqr),e(XC,KZ),e(KZ,Nqr),e(XC,qqr),e(ce,jqr),e(ce,zC),e(zC,iCe),e(iCe,Dqr),e(zC,Gqr),e(zC,ZZ),e(ZZ,Oqr),e(zC,Vqr),e(ce,Xqr),e(ce,QC),e(QC,dCe),e(dCe,zqr),e(QC,Qqr),e(QC,eee),e(eee,Wqr),e(QC,Hqr),e(ce,Uqr),e(ce,WC),e(WC,cCe),e(cCe,Jqr),e(WC,Yqr),e(WC,oee),e(oee,Kqr),e(WC,Zqr),e(ce,ejr),e(ce,HC),e(HC,fCe),e(fCe,ojr),e(HC,rjr),e(HC,ree),e(ree,tjr),e(HC,ajr),e(ce,njr),e(ce,UC),e(UC,mCe),e(mCe,sjr),e(UC,ljr),e(UC,tee),e(tee,ijr),e(UC,djr),e(ce,cjr),e(ce,JC),e(JC,gCe),e(gCe,fjr),e(JC,mjr),e(JC,aee),e(aee,gjr),e(JC,hjr),e(ce,pjr),e(ce,YC),e(YC,hCe),e(hCe,_jr),e(YC,ujr),e(YC,nee),e(nee,bjr),e(YC,vjr),e(Dr,Fjr),M(KC,Dr,null),b(f,fQe,u),b(f,Vc,u),e(Vc,ZC),e(ZC,pCe),M(l$,pCe,null),e(Vc,Tjr),e(Vc,_Ce),e(_Ce,Mjr),b(f,mQe,u),b(f,gr,u),M(i$,gr,null),e(gr,Ejr),e(gr,Xc),e(Xc,Cjr),e(Xc,see),e(see,wjr),e(Xc,Ajr),e(Xc,lee),e(lee,Ljr),e(Xc,yjr),e(gr,xjr),e(gr,d$),e(d$,$jr),e(d$,uCe),e(uCe,kjr),e(d$,Sjr),e(gr,Rjr),e(gr,zt),M(c$,zt,null),e(zt,Pjr),e(zt,bCe),e(bCe,Bjr),e(zt,Ijr),e(zt,zc),e(zc,Njr),e(zc,vCe),e(vCe,qjr),e(zc,jjr),e(zc,iee),e(iee,Djr),e(zc,Gjr),e(zt,Ojr),M(e5,zt,null),e(gr,Vjr),e(gr,Gr),M(f$,Gr,null),e(Gr,Xjr),e(Gr,FCe),e(FCe,zjr),e(Gr,Qjr),e(Gr,Fn),e(Fn,Wjr),e(Fn,TCe),e(TCe,Hjr),e(Fn,Ujr),e(Fn,MCe),e(MCe,Jjr),e(Fn,Yjr),e(Fn,ECe),e(ECe,Kjr),e(Fn,Zjr),e(Gr,eDr),e(Gr,CCe),e(CCe,o5),e(o5,wCe),e(wCe,oDr),e(o5,rDr),e(o5,dee),e(dee,tDr),e(o5,aDr),e(Gr,nDr),M(r5,Gr,null),b(f,gQe,u),b(f,Qc,u),e(Qc,t5),e(t5,ACe),M(m$,ACe,null),e(Qc,sDr),e(Qc,LCe),e(LCe,lDr),b(f,hQe,u),b(f,hr,u),M(g$,hr,null),e(hr,iDr),e(hr,Wc),e(Wc,dDr),e(Wc,cee),e(cee,cDr),e(Wc,fDr),e(Wc,fee),e(fee,mDr),e(Wc,gDr),e(hr,hDr),e(hr,h$),e(h$,pDr),e(h$,yCe),e(yCe,_Dr),e(h$,uDr),e(hr,bDr),e(hr,Qt),M(p$,Qt,null),e(Qt,vDr),e(Qt,xCe),e(xCe,FDr),e(Qt,TDr),e(Qt,Hc),e(Hc,MDr),e(Hc,$Ce),e($Ce,EDr),e(Hc,CDr),e(Hc,mee),e(mee,wDr),e(Hc,ADr),e(Qt,LDr),M(a5,Qt,null),e(hr,yDr),e(hr,Or),M(_$,Or,null),e(Or,xDr),e(Or,kCe),e(kCe,$Dr),e(Or,kDr),e(Or,Tn),e(Tn,SDr),e(Tn,SCe),e(SCe,RDr),e(Tn,PDr),e(Tn,RCe),e(RCe,BDr),e(Tn,IDr),e(Tn,PCe),e(PCe,NDr),e(Tn,qDr),e(Or,jDr),e(Or,BCe),e(BCe,n5),e(n5,ICe),e(ICe,DDr),e(n5,GDr),e(n5,gee),e(gee,ODr),e(n5,VDr),e(Or,XDr),M(s5,Or,null),b(f,pQe,u),b(f,Uc,u),e(Uc,l5),e(l5,NCe),M(u$,NCe,null),e(Uc,zDr),e(Uc,qCe),e(qCe,QDr),b(f,_Qe,u),b(f,pr,u),M(b$,pr,null),e(pr,WDr),e(pr,Jc),e(Jc,HDr),e(Jc,hee),e(hee,UDr),e(Jc,JDr),e(Jc,pee),e(pee,YDr),e(Jc,KDr),e(pr,ZDr),e(pr,v$),e(v$,eGr),e(v$,jCe),e(jCe,oGr),e(v$,rGr),e(pr,tGr),e(pr,Wt),M(F$,Wt,null),e(Wt,aGr),e(Wt,DCe),e(DCe,nGr),e(Wt,sGr),e(Wt,Yc),e(Yc,lGr),e(Yc,GCe),e(GCe,iGr),e(Yc,dGr),e(Yc,_ee),e(_ee,cGr),e(Yc,fGr),e(Wt,mGr),M(i5,Wt,null),e(pr,gGr),e(pr,Vr),M(T$,Vr,null),e(Vr,hGr),e(Vr,OCe),e(OCe,pGr),e(Vr,_Gr),e(Vr,Mn),e(Mn,uGr),e(Mn,VCe),e(VCe,bGr),e(Mn,vGr),e(Mn,XCe),e(XCe,FGr),e(Mn,TGr),e(Mn,zCe),e(zCe,MGr),e(Mn,EGr),e(Vr,CGr),e(Vr,oe),e(oe,d5),e(d5,QCe),e(QCe,wGr),e(d5,AGr),e(d5,uee),e(uee,LGr),e(d5,yGr),e(oe,xGr),e(oe,c5),e(c5,WCe),e(WCe,$Gr),e(c5,kGr),e(c5,bee),e(bee,SGr),e(c5,RGr),e(oe,PGr),e(oe,f5),e(f5,HCe),e(HCe,BGr),e(f5,IGr),e(f5,vee),e(vee,NGr),e(f5,qGr),e(oe,jGr),e(oe,m5),e(m5,UCe),e(UCe,DGr),e(m5,GGr),e(m5,Fee),e(Fee,OGr),e(m5,VGr),e(oe,XGr),e(oe,g5),e(g5,JCe),e(JCe,zGr),e(g5,QGr),e(g5,Tee),e(Tee,WGr),e(g5,HGr),e(oe,UGr),e(oe,h5),e(h5,YCe),e(YCe,JGr),e(h5,YGr),e(h5,Mee),e(Mee,KGr),e(h5,ZGr),e(oe,eOr),e(oe,p5),e(p5,KCe),e(KCe,oOr),e(p5,rOr),e(p5,Eee),e(Eee,tOr),e(p5,aOr),e(oe,nOr),e(oe,_5),e(_5,ZCe),e(ZCe,sOr),e(_5,lOr),e(_5,Cee),e(Cee,iOr),e(_5,dOr),e(oe,cOr),e(oe,u5),e(u5,e5e),e(e5e,fOr),e(u5,mOr),e(u5,wee),e(wee,gOr),e(u5,hOr),e(oe,pOr),e(oe,b5),e(b5,o5e),e(o5e,_Or),e(b5,uOr),e(b5,Aee),e(Aee,bOr),e(b5,vOr),e(oe,FOr),e(oe,v5),e(v5,r5e),e(r5e,TOr),e(v5,MOr),e(v5,Lee),e(Lee,EOr),e(v5,COr),e(oe,wOr),e(oe,F5),e(F5,t5e),e(t5e,AOr),e(F5,LOr),e(F5,yee),e(yee,yOr),e(F5,xOr),e(oe,$Or),e(oe,T5),e(T5,a5e),e(a5e,kOr),e(T5,SOr),e(T5,xee),e(xee,ROr),e(T5,POr),e(oe,BOr),e(oe,M5),e(M5,n5e),e(n5e,IOr),e(M5,NOr),e(M5,$ee),e($ee,qOr),e(M5,jOr),e(oe,DOr),e(oe,E5),e(E5,s5e),e(s5e,GOr),e(E5,OOr),e(E5,kee),e(kee,VOr),e(E5,XOr),e(oe,zOr),e(oe,C5),e(C5,l5e),e(l5e,QOr),e(C5,WOr),e(C5,See),e(See,HOr),e(C5,UOr),e(oe,JOr),e(oe,w5),e(w5,i5e),e(i5e,YOr),e(w5,KOr),e(w5,Ree),e(Ree,ZOr),e(w5,eVr),e(oe,oVr),e(oe,A5),e(A5,d5e),e(d5e,rVr),e(A5,tVr),e(A5,Pee),e(Pee,aVr),e(A5,nVr),e(oe,sVr),e(oe,L5),e(L5,c5e),e(c5e,lVr),e(L5,iVr),e(L5,Bee),e(Bee,dVr),e(L5,cVr),e(oe,fVr),e(oe,y5),e(y5,f5e),e(f5e,mVr),e(y5,gVr),e(y5,Iee),e(Iee,hVr),e(y5,pVr),e(oe,_Vr),e(oe,x5),e(x5,m5e),e(m5e,uVr),e(x5,bVr),e(x5,Nee),e(Nee,vVr),e(x5,FVr),e(oe,TVr),e(oe,$5),e($5,g5e),e(g5e,MVr),e($5,EVr),e($5,qee),e(qee,CVr),e($5,wVr),e(oe,AVr),e(oe,k5),e(k5,h5e),e(h5e,LVr),e(k5,yVr),e(k5,jee),e(jee,xVr),e(k5,$Vr),e(oe,kVr),e(oe,S5),e(S5,p5e),e(p5e,SVr),e(S5,RVr),e(S5,Dee),e(Dee,PVr),e(S5,BVr),e(oe,IVr),e(oe,R5),e(R5,_5e),e(_5e,NVr),e(R5,qVr),e(R5,Gee),e(Gee,jVr),e(R5,DVr),e(oe,GVr),e(oe,P5),e(P5,u5e),e(u5e,OVr),e(P5,VVr),e(P5,Oee),e(Oee,XVr),e(P5,zVr),e(oe,QVr),e(oe,B5),e(B5,b5e),e(b5e,WVr),e(B5,HVr),e(B5,Vee),e(Vee,UVr),e(B5,JVr),e(Vr,YVr),M(I5,Vr,null),b(f,uQe,u),b(f,Kc,u),e(Kc,N5),e(N5,v5e),M(M$,v5e,null),e(Kc,KVr),e(Kc,F5e),e(F5e,ZVr),b(f,bQe,u),b(f,_r,u),M(E$,_r,null),e(_r,eXr),e(_r,Zc),e(Zc,oXr),e(Zc,Xee),e(Xee,rXr),e(Zc,tXr),e(Zc,zee),e(zee,aXr),e(Zc,nXr),e(_r,sXr),e(_r,C$),e(C$,lXr),e(C$,T5e),e(T5e,iXr),e(C$,dXr),e(_r,cXr),e(_r,Ht),M(w$,Ht,null),e(Ht,fXr),e(Ht,M5e),e(M5e,mXr),e(Ht,gXr),e(Ht,ef),e(ef,hXr),e(ef,E5e),e(E5e,pXr),e(ef,_Xr),e(ef,Qee),e(Qee,uXr),e(ef,bXr),e(Ht,vXr),M(q5,Ht,null),e(_r,FXr),e(_r,Xr),M(A$,Xr,null),e(Xr,TXr),e(Xr,C5e),e(C5e,MXr),e(Xr,EXr),e(Xr,En),e(En,CXr),e(En,w5e),e(w5e,wXr),e(En,AXr),e(En,A5e),e(A5e,LXr),e(En,yXr),e(En,L5e),e(L5e,xXr),e(En,$Xr),e(Xr,kXr),e(Xr,xe),e(xe,j5),e(j5,y5e),e(y5e,SXr),e(j5,RXr),e(j5,Wee),e(Wee,PXr),e(j5,BXr),e(xe,IXr),e(xe,D5),e(D5,x5e),e(x5e,NXr),e(D5,qXr),e(D5,Hee),e(Hee,jXr),e(D5,DXr),e(xe,GXr),e(xe,G5),e(G5,$5e),e($5e,OXr),e(G5,VXr),e(G5,Uee),e(Uee,XXr),e(G5,zXr),e(xe,QXr),e(xe,O5),e(O5,k5e),e(k5e,WXr),e(O5,HXr),e(O5,Jee),e(Jee,UXr),e(O5,JXr),e(xe,YXr),e(xe,V5),e(V5,S5e),e(S5e,KXr),e(V5,ZXr),e(V5,Yee),e(Yee,ezr),e(V5,ozr),e(xe,rzr),e(xe,X5),e(X5,R5e),e(R5e,tzr),e(X5,azr),e(X5,Kee),e(Kee,nzr),e(X5,szr),e(xe,lzr),e(xe,z5),e(z5,P5e),e(P5e,izr),e(z5,dzr),e(z5,Zee),e(Zee,czr),e(z5,fzr),e(xe,mzr),e(xe,Q5),e(Q5,B5e),e(B5e,gzr),e(Q5,hzr),e(Q5,eoe),e(eoe,pzr),e(Q5,_zr),e(xe,uzr),e(xe,W5),e(W5,I5e),e(I5e,bzr),e(W5,vzr),e(W5,ooe),e(ooe,Fzr),e(W5,Tzr),e(xe,Mzr),e(xe,H5),e(H5,N5e),e(N5e,Ezr),e(H5,Czr),e(H5,roe),e(roe,wzr),e(H5,Azr),e(Xr,Lzr),M(U5,Xr,null),b(f,vQe,u),b(f,of,u),e(of,J5),e(J5,q5e),M(L$,q5e,null),e(of,yzr),e(of,j5e),e(j5e,xzr),b(f,FQe,u),b(f,ur,u),M(y$,ur,null),e(ur,$zr),e(ur,rf),e(rf,kzr),e(rf,toe),e(toe,Szr),e(rf,Rzr),e(rf,aoe),e(aoe,Pzr),e(rf,Bzr),e(ur,Izr),e(ur,x$),e(x$,Nzr),e(x$,D5e),e(D5e,qzr),e(x$,jzr),e(ur,Dzr),e(ur,Ut),M($$,Ut,null),e(Ut,Gzr),e(Ut,G5e),e(G5e,Ozr),e(Ut,Vzr),e(Ut,tf),e(tf,Xzr),e(tf,O5e),e(O5e,zzr),e(tf,Qzr),e(tf,noe),e(noe,Wzr),e(tf,Hzr),e(Ut,Uzr),M(Y5,Ut,null),e(ur,Jzr),e(ur,zr),M(k$,zr,null),e(zr,Yzr),e(zr,V5e),e(V5e,Kzr),e(zr,Zzr),e(zr,Cn),e(Cn,eQr),e(Cn,X5e),e(X5e,oQr),e(Cn,rQr),e(Cn,z5e),e(z5e,tQr),e(Cn,aQr),e(Cn,Q5e),e(Q5e,nQr),e(Cn,sQr),e(zr,lQr),e(zr,Ee),e(Ee,K5),e(K5,W5e),e(W5e,iQr),e(K5,dQr),e(K5,soe),e(soe,cQr),e(K5,fQr),e(Ee,mQr),e(Ee,Z5),e(Z5,H5e),e(H5e,gQr),e(Z5,hQr),e(Z5,loe),e(loe,pQr),e(Z5,_Qr),e(Ee,uQr),e(Ee,e3),e(e3,U5e),e(U5e,bQr),e(e3,vQr),e(e3,ioe),e(ioe,FQr),e(e3,TQr),e(Ee,MQr),e(Ee,o3),e(o3,J5e),e(J5e,EQr),e(o3,CQr),e(o3,doe),e(doe,wQr),e(o3,AQr),e(Ee,LQr),e(Ee,r3),e(r3,Y5e),e(Y5e,yQr),e(r3,xQr),e(r3,coe),e(coe,$Qr),e(r3,kQr),e(Ee,SQr),e(Ee,t3),e(t3,K5e),e(K5e,RQr),e(t3,PQr),e(t3,foe),e(foe,BQr),e(t3,IQr),e(Ee,NQr),e(Ee,a3),e(a3,Z5e),e(Z5e,qQr),e(a3,jQr),e(a3,moe),e(moe,DQr),e(a3,GQr),e(Ee,OQr),e(Ee,n3),e(n3,e3e),e(e3e,VQr),e(n3,XQr),e(n3,goe),e(goe,zQr),e(n3,QQr),e(Ee,WQr),e(Ee,s3),e(s3,o3e),e(o3e,HQr),e(s3,UQr),e(s3,hoe),e(hoe,JQr),e(s3,YQr),e(Ee,KQr),e(Ee,l3),e(l3,r3e),e(r3e,ZQr),e(l3,eWr),e(l3,poe),e(poe,oWr),e(l3,rWr),e(Ee,tWr),e(Ee,i3),e(i3,t3e),e(t3e,aWr),e(i3,nWr),e(i3,_oe),e(_oe,sWr),e(i3,lWr),e(Ee,iWr),e(Ee,d3),e(d3,a3e),e(a3e,dWr),e(d3,cWr),e(d3,uoe),e(uoe,fWr),e(d3,mWr),e(Ee,gWr),e(Ee,c3),e(c3,n3e),e(n3e,hWr),e(c3,pWr),e(c3,boe),e(boe,_Wr),e(c3,uWr),e(zr,bWr),M(f3,zr,null),b(f,TQe,u),b(f,af,u),e(af,m3),e(m3,s3e),M(S$,s3e,null),e(af,vWr),e(af,l3e),e(l3e,FWr),b(f,MQe,u),b(f,br,u),M(R$,br,null),e(br,TWr),e(br,nf),e(nf,MWr),e(nf,voe),e(voe,EWr),e(nf,CWr),e(nf,Foe),e(Foe,wWr),e(nf,AWr),e(br,LWr),e(br,P$),e(P$,yWr),e(P$,i3e),e(i3e,xWr),e(P$,$Wr),e(br,kWr),e(br,Jt),M(B$,Jt,null),e(Jt,SWr),e(Jt,d3e),e(d3e,RWr),e(Jt,PWr),e(Jt,sf),e(sf,BWr),e(sf,c3e),e(c3e,IWr),e(sf,NWr),e(sf,Toe),e(Toe,qWr),e(sf,jWr),e(Jt,DWr),M(g3,Jt,null),e(br,GWr),e(br,Qr),M(I$,Qr,null),e(Qr,OWr),e(Qr,f3e),e(f3e,VWr),e(Qr,XWr),e(Qr,wn),e(wn,zWr),e(wn,m3e),e(m3e,QWr),e(wn,WWr),e(wn,g3e),e(g3e,HWr),e(wn,UWr),e(wn,h3e),e(h3e,JWr),e(wn,YWr),e(Qr,KWr),e(Qr,$e),e($e,h3),e(h3,p3e),e(p3e,ZWr),e(h3,eHr),e(h3,Moe),e(Moe,oHr),e(h3,rHr),e($e,tHr),e($e,p3),e(p3,_3e),e(_3e,aHr),e(p3,nHr),e(p3,Eoe),e(Eoe,sHr),e(p3,lHr),e($e,iHr),e($e,_3),e(_3,u3e),e(u3e,dHr),e(_3,cHr),e(_3,Coe),e(Coe,fHr),e(_3,mHr),e($e,gHr),e($e,u3),e(u3,b3e),e(b3e,hHr),e(u3,pHr),e(u3,woe),e(woe,_Hr),e(u3,uHr),e($e,bHr),e($e,b3),e(b3,v3e),e(v3e,vHr),e(b3,FHr),e(b3,Aoe),e(Aoe,THr),e(b3,MHr),e($e,EHr),e($e,v3),e(v3,F3e),e(F3e,CHr),e(v3,wHr),e(v3,Loe),e(Loe,AHr),e(v3,LHr),e($e,yHr),e($e,F3),e(F3,T3e),e(T3e,xHr),e(F3,$Hr),e(F3,yoe),e(yoe,kHr),e(F3,SHr),e($e,RHr),e($e,T3),e(T3,M3e),e(M3e,PHr),e(T3,BHr),e(T3,xoe),e(xoe,IHr),e(T3,NHr),e($e,qHr),e($e,M3),e(M3,E3e),e(E3e,jHr),e(M3,DHr),e(M3,$oe),e($oe,GHr),e(M3,OHr),e($e,VHr),e($e,E3),e(E3,C3e),e(C3e,XHr),e(E3,zHr),e(E3,koe),e(koe,QHr),e(E3,WHr),e(Qr,HHr),M(C3,Qr,null),b(f,EQe,u),b(f,lf,u),e(lf,w3),e(w3,w3e),M(N$,w3e,null),e(lf,UHr),e(lf,A3e),e(A3e,JHr),b(f,CQe,u),b(f,vr,u),M(q$,vr,null),e(vr,YHr),e(vr,df),e(df,KHr),e(df,Soe),e(Soe,ZHr),e(df,eUr),e(df,Roe),e(Roe,oUr),e(df,rUr),e(vr,tUr),e(vr,j$),e(j$,aUr),e(j$,L3e),e(L3e,nUr),e(j$,sUr),e(vr,lUr),e(vr,Yt),M(D$,Yt,null),e(Yt,iUr),e(Yt,y3e),e(y3e,dUr),e(Yt,cUr),e(Yt,cf),e(cf,fUr),e(cf,x3e),e(x3e,mUr),e(cf,gUr),e(cf,Poe),e(Poe,hUr),e(cf,pUr),e(Yt,_Ur),M(A3,Yt,null),e(vr,uUr),e(vr,Wr),M(G$,Wr,null),e(Wr,bUr),e(Wr,$3e),e($3e,vUr),e(Wr,FUr),e(Wr,An),e(An,TUr),e(An,k3e),e(k3e,MUr),e(An,EUr),e(An,S3e),e(S3e,CUr),e(An,wUr),e(An,R3e),e(R3e,AUr),e(An,LUr),e(Wr,yUr),e(Wr,ke),e(ke,L3),e(L3,P3e),e(P3e,xUr),e(L3,$Ur),e(L3,Boe),e(Boe,kUr),e(L3,SUr),e(ke,RUr),e(ke,y3),e(y3,B3e),e(B3e,PUr),e(y3,BUr),e(y3,Ioe),e(Ioe,IUr),e(y3,NUr),e(ke,qUr),e(ke,x3),e(x3,I3e),e(I3e,jUr),e(x3,DUr),e(x3,Noe),e(Noe,GUr),e(x3,OUr),e(ke,VUr),e(ke,$3),e($3,N3e),e(N3e,XUr),e($3,zUr),e($3,qoe),e(qoe,QUr),e($3,WUr),e(ke,HUr),e(ke,k3),e(k3,q3e),e(q3e,UUr),e(k3,JUr),e(k3,joe),e(joe,YUr),e(k3,KUr),e(ke,ZUr),e(ke,S3),e(S3,j3e),e(j3e,eJr),e(S3,oJr),e(S3,Doe),e(Doe,rJr),e(S3,tJr),e(ke,aJr),e(ke,R3),e(R3,D3e),e(D3e,nJr),e(R3,sJr),e(R3,Goe),e(Goe,lJr),e(R3,iJr),e(ke,dJr),e(ke,P3),e(P3,G3e),e(G3e,cJr),e(P3,fJr),e(P3,Ooe),e(Ooe,mJr),e(P3,gJr),e(ke,hJr),e(ke,B3),e(B3,O3e),e(O3e,pJr),e(B3,_Jr),e(B3,Voe),e(Voe,uJr),e(B3,bJr),e(ke,vJr),e(ke,I3),e(I3,V3e),e(V3e,FJr),e(I3,TJr),e(I3,Xoe),e(Xoe,MJr),e(I3,EJr),e(Wr,CJr),M(N3,Wr,null),b(f,wQe,u),b(f,ff,u),e(ff,q3),e(q3,X3e),M(O$,X3e,null),e(ff,wJr),e(ff,z3e),e(z3e,AJr),b(f,AQe,u),b(f,Fr,u),M(V$,Fr,null),e(Fr,LJr),e(Fr,mf),e(mf,yJr),e(mf,zoe),e(zoe,xJr),e(mf,$Jr),e(mf,Qoe),e(Qoe,kJr),e(mf,SJr),e(Fr,RJr),e(Fr,X$),e(X$,PJr),e(X$,Q3e),e(Q3e,BJr),e(X$,IJr),e(Fr,NJr),e(Fr,Kt),M(z$,Kt,null),e(Kt,qJr),e(Kt,W3e),e(W3e,jJr),e(Kt,DJr),e(Kt,gf),e(gf,GJr),e(gf,H3e),e(H3e,OJr),e(gf,VJr),e(gf,Woe),e(Woe,XJr),e(gf,zJr),e(Kt,QJr),M(j3,Kt,null),e(Fr,WJr),e(Fr,Hr),M(Q$,Hr,null),e(Hr,HJr),e(Hr,U3e),e(U3e,UJr),e(Hr,JJr),e(Hr,Ln),e(Ln,YJr),e(Ln,J3e),e(J3e,KJr),e(Ln,ZJr),e(Ln,Y3e),e(Y3e,eYr),e(Ln,oYr),e(Ln,K3e),e(K3e,rYr),e(Ln,tYr),e(Hr,aYr),e(Hr,Se),e(Se,D3),e(D3,Z3e),e(Z3e,nYr),e(D3,sYr),e(D3,Hoe),e(Hoe,lYr),e(D3,iYr),e(Se,dYr),e(Se,G3),e(G3,e0e),e(e0e,cYr),e(G3,fYr),e(G3,Uoe),e(Uoe,mYr),e(G3,gYr),e(Se,hYr),e(Se,O3),e(O3,o0e),e(o0e,pYr),e(O3,_Yr),e(O3,Joe),e(Joe,uYr),e(O3,bYr),e(Se,vYr),e(Se,V3),e(V3,r0e),e(r0e,FYr),e(V3,TYr),e(V3,Yoe),e(Yoe,MYr),e(V3,EYr),e(Se,CYr),e(Se,X3),e(X3,t0e),e(t0e,wYr),e(X3,AYr),e(X3,Koe),e(Koe,LYr),e(X3,yYr),e(Se,xYr),e(Se,z3),e(z3,a0e),e(a0e,$Yr),e(z3,kYr),e(z3,Zoe),e(Zoe,SYr),e(z3,RYr),e(Se,PYr),e(Se,Q3),e(Q3,n0e),e(n0e,BYr),e(Q3,IYr),e(Q3,ere),e(ere,NYr),e(Q3,qYr),e(Se,jYr),e(Se,W3),e(W3,s0e),e(s0e,DYr),e(W3,GYr),e(W3,ore),e(ore,OYr),e(W3,VYr),e(Se,XYr),e(Se,H3),e(H3,l0e),e(l0e,zYr),e(H3,QYr),e(H3,rre),e(rre,WYr),e(H3,HYr),e(Se,UYr),e(Se,U3),e(U3,i0e),e(i0e,JYr),e(U3,YYr),e(U3,tre),e(tre,KYr),e(U3,ZYr),e(Hr,eKr),M(J3,Hr,null),b(f,LQe,u),b(f,hf,u),e(hf,Y3),e(Y3,d0e),M(W$,d0e,null),e(hf,oKr),e(hf,c0e),e(c0e,rKr),b(f,yQe,u),b(f,Tr,u),M(H$,Tr,null),e(Tr,tKr),e(Tr,pf),e(pf,aKr),e(pf,are),e(are,nKr),e(pf,sKr),e(pf,nre),e(nre,lKr),e(pf,iKr),e(Tr,dKr),e(Tr,U$),e(U$,cKr),e(U$,f0e),e(f0e,fKr),e(U$,mKr),e(Tr,gKr),e(Tr,Zt),M(J$,Zt,null),e(Zt,hKr),e(Zt,m0e),e(m0e,pKr),e(Zt,_Kr),e(Zt,_f),e(_f,uKr),e(_f,g0e),e(g0e,bKr),e(_f,vKr),e(_f,sre),e(sre,FKr),e(_f,TKr),e(Zt,MKr),M(K3,Zt,null),e(Tr,EKr),e(Tr,Ur),M(Y$,Ur,null),e(Ur,CKr),e(Ur,h0e),e(h0e,wKr),e(Ur,AKr),e(Ur,yn),e(yn,LKr),e(yn,p0e),e(p0e,yKr),e(yn,xKr),e(yn,_0e),e(_0e,$Kr),e(yn,kKr),e(yn,u0e),e(u0e,SKr),e(yn,RKr),e(Ur,PKr),e(Ur,Re),e(Re,Z3),e(Z3,b0e),e(b0e,BKr),e(Z3,IKr),e(Z3,lre),e(lre,NKr),e(Z3,qKr),e(Re,jKr),e(Re,e0),e(e0,v0e),e(v0e,DKr),e(e0,GKr),e(e0,ire),e(ire,OKr),e(e0,VKr),e(Re,XKr),e(Re,o0),e(o0,F0e),e(F0e,zKr),e(o0,QKr),e(o0,dre),e(dre,WKr),e(o0,HKr),e(Re,UKr),e(Re,r0),e(r0,T0e),e(T0e,JKr),e(r0,YKr),e(r0,cre),e(cre,KKr),e(r0,ZKr),e(Re,eZr),e(Re,t0),e(t0,M0e),e(M0e,oZr),e(t0,rZr),e(t0,fre),e(fre,tZr),e(t0,aZr),e(Re,nZr),e(Re,a0),e(a0,E0e),e(E0e,sZr),e(a0,lZr),e(a0,mre),e(mre,iZr),e(a0,dZr),e(Re,cZr),e(Re,n0),e(n0,C0e),e(C0e,fZr),e(n0,mZr),e(n0,gre),e(gre,gZr),e(n0,hZr),e(Re,pZr),e(Re,s0),e(s0,w0e),e(w0e,_Zr),e(s0,uZr),e(s0,hre),e(hre,bZr),e(s0,vZr),e(Re,FZr),e(Re,l0),e(l0,A0e),e(A0e,TZr),e(l0,MZr),e(l0,pre),e(pre,EZr),e(l0,CZr),e(Re,wZr),e(Re,i0),e(i0,L0e),e(L0e,AZr),e(i0,LZr),e(i0,_re),e(_re,yZr),e(i0,xZr),e(Ur,$Zr),M(d0,Ur,null),b(f,xQe,u),b(f,uf,u),e(uf,c0),e(c0,y0e),M(K$,y0e,null),e(uf,kZr),e(uf,x0e),e(x0e,SZr),b(f,$Qe,u),b(f,Mr,u),M(Z$,Mr,null),e(Mr,RZr),e(Mr,bf),e(bf,PZr),e(bf,ure),e(ure,BZr),e(bf,IZr),e(bf,bre),e(bre,NZr),e(bf,qZr),e(Mr,jZr),e(Mr,ek),e(ek,DZr),e(ek,$0e),e($0e,GZr),e(ek,OZr),e(Mr,VZr),e(Mr,ea),M(ok,ea,null),e(ea,XZr),e(ea,k0e),e(k0e,zZr),e(ea,QZr),e(ea,vf),e(vf,WZr),e(vf,S0e),e(S0e,HZr),e(vf,UZr),e(vf,vre),e(vre,JZr),e(vf,YZr),e(ea,KZr),M(f0,ea,null),e(Mr,ZZr),e(Mr,Jr),M(rk,Jr,null),e(Jr,eet),e(Jr,R0e),e(R0e,oet),e(Jr,ret),e(Jr,xn),e(xn,tet),e(xn,P0e),e(P0e,aet),e(xn,net),e(xn,B0e),e(B0e,set),e(xn,iet),e(xn,I0e),e(I0e,det),e(xn,cet),e(Jr,fet),e(Jr,Ve),e(Ve,m0),e(m0,N0e),e(N0e,met),e(m0,get),e(m0,Fre),e(Fre,het),e(m0,pet),e(Ve,_et),e(Ve,g0),e(g0,q0e),e(q0e,uet),e(g0,bet),e(g0,Tre),e(Tre,vet),e(g0,Fet),e(Ve,Tet),e(Ve,h0),e(h0,j0e),e(j0e,Met),e(h0,Eet),e(h0,Mre),e(Mre,Cet),e(h0,wet),e(Ve,Aet),e(Ve,p0),e(p0,D0e),e(D0e,Let),e(p0,yet),e(p0,Ere),e(Ere,xet),e(p0,$et),e(Ve,ket),e(Ve,_0),e(_0,G0e),e(G0e,Set),e(_0,Ret),e(_0,Cre),e(Cre,Pet),e(_0,Bet),e(Ve,Iet),e(Ve,u0),e(u0,O0e),e(O0e,Net),e(u0,qet),e(u0,wre),e(wre,jet),e(u0,Det),e(Ve,Get),e(Ve,b0),e(b0,V0e),e(V0e,Oet),e(b0,Vet),e(b0,Are),e(Are,Xet),e(b0,zet),e(Ve,Qet),e(Ve,v0),e(v0,X0e),e(X0e,Wet),e(v0,Het),e(v0,Lre),e(Lre,Uet),e(v0,Jet),e(Jr,Yet),M(F0,Jr,null),b(f,kQe,u),b(f,Ff,u),e(Ff,T0),e(T0,z0e),M(tk,z0e,null),e(Ff,Ket),e(Ff,Q0e),e(Q0e,Zet),b(f,SQe,u),b(f,Er,u),M(ak,Er,null),e(Er,eot),e(Er,Tf),e(Tf,oot),e(Tf,yre),e(yre,rot),e(Tf,tot),e(Tf,xre),e(xre,aot),e(Tf,not),e(Er,sot),e(Er,nk),e(nk,lot),e(nk,W0e),e(W0e,iot),e(nk,dot),e(Er,cot),e(Er,oa),M(sk,oa,null),e(oa,fot),e(oa,H0e),e(H0e,mot),e(oa,got),e(oa,Mf),e(Mf,hot),e(Mf,U0e),e(U0e,pot),e(Mf,_ot),e(Mf,$re),e($re,uot),e(Mf,bot),e(oa,vot),M(M0,oa,null),e(Er,Fot),e(Er,Yr),M(lk,Yr,null),e(Yr,Tot),e(Yr,J0e),e(J0e,Mot),e(Yr,Eot),e(Yr,$n),e($n,Cot),e($n,Y0e),e(Y0e,wot),e($n,Aot),e($n,K0e),e(K0e,Lot),e($n,yot),e($n,Z0e),e(Z0e,xot),e($n,$ot),e(Yr,kot),e(Yr,Xe),e(Xe,E0),e(E0,ewe),e(ewe,Sot),e(E0,Rot),e(E0,kre),e(kre,Pot),e(E0,Bot),e(Xe,Iot),e(Xe,C0),e(C0,owe),e(owe,Not),e(C0,qot),e(C0,Sre),e(Sre,jot),e(C0,Dot),e(Xe,Got),e(Xe,w0),e(w0,rwe),e(rwe,Oot),e(w0,Vot),e(w0,Rre),e(Rre,Xot),e(w0,zot),e(Xe,Qot),e(Xe,A0),e(A0,twe),e(twe,Wot),e(A0,Hot),e(A0,Pre),e(Pre,Uot),e(A0,Jot),e(Xe,Yot),e(Xe,L0),e(L0,awe),e(awe,Kot),e(L0,Zot),e(L0,Bre),e(Bre,ert),e(L0,ort),e(Xe,rrt),e(Xe,y0),e(y0,nwe),e(nwe,trt),e(y0,art),e(y0,Ire),e(Ire,nrt),e(y0,srt),e(Xe,lrt),e(Xe,x0),e(x0,swe),e(swe,irt),e(x0,drt),e(x0,Nre),e(Nre,crt),e(x0,frt),e(Xe,mrt),e(Xe,$0),e($0,lwe),e(lwe,grt),e($0,hrt),e($0,qre),e(qre,prt),e($0,_rt),e(Yr,urt),M(k0,Yr,null),b(f,RQe,u),b(f,Ef,u),e(Ef,S0),e(S0,iwe),M(ik,iwe,null),e(Ef,brt),e(Ef,dwe),e(dwe,vrt),b(f,PQe,u),b(f,Cr,u),M(dk,Cr,null),e(Cr,Frt),e(Cr,Cf),e(Cf,Trt),e(Cf,jre),e(jre,Mrt),e(Cf,Ert),e(Cf,Dre),e(Dre,Crt),e(Cf,wrt),e(Cr,Art),e(Cr,ck),e(ck,Lrt),e(ck,cwe),e(cwe,yrt),e(ck,xrt),e(Cr,$rt),e(Cr,ra),M(fk,ra,null),e(ra,krt),e(ra,fwe),e(fwe,Srt),e(ra,Rrt),e(ra,wf),e(wf,Prt),e(wf,mwe),e(mwe,Brt),e(wf,Irt),e(wf,Gre),e(Gre,Nrt),e(wf,qrt),e(ra,jrt),M(R0,ra,null),e(Cr,Drt),e(Cr,Kr),M(mk,Kr,null),e(Kr,Grt),e(Kr,gwe),e(gwe,Ort),e(Kr,Vrt),e(Kr,kn),e(kn,Xrt),e(kn,hwe),e(hwe,zrt),e(kn,Qrt),e(kn,pwe),e(pwe,Wrt),e(kn,Hrt),e(kn,_we),e(_we,Urt),e(kn,Jrt),e(Kr,Yrt),e(Kr,uwe),e(uwe,P0),e(P0,bwe),e(bwe,Krt),e(P0,Zrt),e(P0,Ore),e(Ore,ett),e(P0,ott),e(Kr,rtt),M(B0,Kr,null),b(f,BQe,u),b(f,Af,u),e(Af,I0),e(I0,vwe),M(gk,vwe,null),e(Af,ttt),e(Af,Fwe),e(Fwe,att),b(f,IQe,u),b(f,wr,u),M(hk,wr,null),e(wr,ntt),e(wr,Lf),e(Lf,stt),e(Lf,Vre),e(Vre,ltt),e(Lf,itt),e(Lf,Xre),e(Xre,dtt),e(Lf,ctt),e(wr,ftt),e(wr,pk),e(pk,mtt),e(pk,Twe),e(Twe,gtt),e(pk,htt),e(wr,ptt),e(wr,ta),M(_k,ta,null),e(ta,_tt),e(ta,Mwe),e(Mwe,utt),e(ta,btt),e(ta,yf),e(yf,vtt),e(yf,Ewe),e(Ewe,Ftt),e(yf,Ttt),e(yf,zre),e(zre,Mtt),e(yf,Ett),e(ta,Ctt),M(N0,ta,null),e(wr,wtt),e(wr,Zr),M(uk,Zr,null),e(Zr,Att),e(Zr,Cwe),e(Cwe,Ltt),e(Zr,ytt),e(Zr,Sn),e(Sn,xtt),e(Sn,wwe),e(wwe,$tt),e(Sn,ktt),e(Sn,Awe),e(Awe,Stt),e(Sn,Rtt),e(Sn,Lwe),e(Lwe,Ptt),e(Sn,Btt),e(Zr,Itt),e(Zr,bk),e(bk,q0),e(q0,ywe),e(ywe,Ntt),e(q0,qtt),e(q0,Qre),e(Qre,jtt),e(q0,Dtt),e(bk,Gtt),e(bk,j0),e(j0,xwe),e(xwe,Ott),e(j0,Vtt),e(j0,Wre),e(Wre,Xtt),e(j0,ztt),e(Zr,Qtt),M(D0,Zr,null),b(f,NQe,u),b(f,xf,u),e(xf,G0),e(G0,$we),M(vk,$we,null),e(xf,Wtt),e(xf,kwe),e(kwe,Htt),b(f,qQe,u),b(f,Ar,u),M(Fk,Ar,null),e(Ar,Utt),e(Ar,$f),e($f,Jtt),e($f,Hre),e(Hre,Ytt),e($f,Ktt),e($f,Ure),e(Ure,Ztt),e($f,eat),e(Ar,oat),e(Ar,Tk),e(Tk,rat),e(Tk,Swe),e(Swe,tat),e(Tk,aat),e(Ar,nat),e(Ar,aa),M(Mk,aa,null),e(aa,sat),e(aa,Rwe),e(Rwe,lat),e(aa,iat),e(aa,kf),e(kf,dat),e(kf,Pwe),e(Pwe,cat),e(kf,fat),e(kf,Jre),e(Jre,mat),e(kf,gat),e(aa,hat),M(O0,aa,null),e(Ar,pat),e(Ar,et),M(Ek,et,null),e(et,_at),e(et,Bwe),e(Bwe,uat),e(et,bat),e(et,Rn),e(Rn,vat),e(Rn,Iwe),e(Iwe,Fat),e(Rn,Tat),e(Rn,Nwe),e(Nwe,Mat),e(Rn,Eat),e(Rn,qwe),e(qwe,Cat),e(Rn,wat),e(et,Aat),e(et,jwe),e(jwe,V0),e(V0,Dwe),e(Dwe,Lat),e(V0,yat),e(V0,Yre),e(Yre,xat),e(V0,$at),e(et,kat),M(X0,et,null),jQe=!0},p(f,[u]){const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),Df.$set(Ck);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),Zg.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),Bh.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),vp.$set(Vwe);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),Fp.$set(wk);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),Gp.$set(Xwe);const Pn={};u&2&&(Pn.$$scope={dirty:u,ctx:f}),Op.$set(Pn);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),zp.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),Yu.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),Zu.$set(Wwe);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),Q1.$set(Ak);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),H1.$set(Hwe);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),I4.$set(Lk);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),q4.$set(Uwe);const yk={};u&2&&(yk.$$scope={dirty:u,ctx:f}),C2.$set(yk);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),A2.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),W2.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),U2.$set(Kwe);const Sf={};u&2&&(Sf.$$scope={dirty:u,ctx:f}),Hb.$set(Sf);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),Jb.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),yv.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),$v.$set(oAe);const xk={};u&2&&(xk.$$scope={dirty:u,ctx:f}),qv.$set(xk);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),Dv.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),CF.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),AF.$set(aAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),_6.$set(nt);const $k={};u&2&&($k.$$scope={dirty:u,ctx:f}),b6.$set($k);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),T6.$set(nAe);const kk={};u&2&&(kk.$$scope={dirty:u,ctx:f}),E6.$set(kk);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),j6.$set(sAe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),G6.$set(st);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),X6.$set(lAe);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),Q6.$set(Rf);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),U6.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),Y6.$set(dAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),iT.$set(L);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),cT.$set(z0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),uT.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),vT.$set(fAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),kT.$set(Q0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),RT.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),NT.$set(gAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),jT.$set(W0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),QT.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),HT.$set(pAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),e7.$set(H0);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),r7.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),s7.$set(uAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),i7.$set(U0);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),f7.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),g7.$set(vAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),F7.$set(J0);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),M7.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),w7.$set(TAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),L7.$set(Y0);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),E9.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),w9.$set(EAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),U9.$set(K0);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),Y9.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),fM.$set(wAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),gM.$set(Z0);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),FM.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),MM.$set(LAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),VM.$set(ew);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),zM.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),rE.$set(xAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),aE.$set(ow);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),kE.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),RE.$set(kAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),YE.$set(rw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),ZE.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),rC.$set(RAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),aC.$set(tw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),sC.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),iC.$set(BAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),xC.$set(aw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),kC.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),KC.$set(NAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),e5.$set(nw);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),r5.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),a5.$set(jAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),s5.$set(sw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),i5.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),I5.$set(GAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),q5.$set(lw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),U5.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),Y5.$set(VAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),f3.$set(iw);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),g3.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),C3.$set(zAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),A3.$set(dw);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),N3.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),j3.$set(WAe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),J3.$set(cw);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),K3.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),d0.$set(UAe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),f0.$set(fw);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),F0.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),M0.$set(YAe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),k0.$set(mw);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),R0.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),B0.$set(ZAe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),N0.$set(gw);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),D0.$set(eLe);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),O0.$set(oLe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),X0.$set(hw)},i(f){jQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(Df.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(FL.$$.fragment,f),E(Zg.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(AL.$$.fragment,f),E(Bh.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(SL.$$.fragment,f),E(vp.$$.fragment,f),E(Fp.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(Gp.$$.fragment,f),E(Op.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(zp.$$.fragment,f),E(XL.$$.fragment,f),E(Yu.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(Zu.$$.fragment,f),E(UL.$$.fragment,f),E(Q1.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(H1.$$.fragment,f),E(ey.$$.fragment,f),E(I4.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(q4.$$.fragment,f),E(ny.$$.fragment,f),E(C2.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(A2.$$.fragment,f),E(cy.$$.fragment,f),E(W2.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(U2.$$.fragment,f),E(py.$$.fragment,f),E(Hb.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(Jb.$$.fragment,f),E(Fy.$$.fragment,f),E(yv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E($v.$$.fragment,f),E(wy.$$.fragment,f),E(qv.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(Dv.$$.fragment,f),E($y.$$.fragment,f),E(CF.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(AF.$$.fragment,f),E(By.$$.fragment,f),E(_6.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(b6.$$.fragment,f),E(Dy.$$.fragment,f),E(T6.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(E6.$$.fragment,f),E(zy.$$.fragment,f),E(j6.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(G6.$$.fragment,f),E(Jy.$$.fragment,f),E(X6.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(Q6.$$.fragment,f),E(o8.$$.fragment,f),E(U6.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(Y6.$$.fragment,f),E(s8.$$.fragment,f),E(iT.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(cT.$$.fragment,f),E(f8.$$.fragment,f),E(uT.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(vT.$$.fragment,f),E(_8.$$.fragment,f),E(kT.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(RT.$$.fragment,f),E(T8.$$.fragment,f),E(NT.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(jT.$$.fragment,f),E(L8.$$.fragment,f),E(QT.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(HT.$$.fragment,f),E(S8.$$.fragment,f),E(e7.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(r7.$$.fragment,f),E(N8.$$.fragment,f),E(s7.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(i7.$$.fragment,f),E(V8.$$.fragment,f),E(f7.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(g7.$$.fragment,f),E(H8.$$.fragment,f),E(F7.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(M7.$$.fragment,f),E(Z8.$$.fragment,f),E(w7.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(L7.$$.fragment,f),E(ax.$$.fragment,f),E(E9.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(w9.$$.fragment,f),E(dx.$$.fragment,f),E(U9.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(Y9.$$.fragment,f),E(hx.$$.fragment,f),E(fM.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(gM.$$.fragment,f),E(vx.$$.fragment,f),E(FM.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(MM.$$.fragment,f),E(Cx.$$.fragment,f),E(VM.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(zM.$$.fragment,f),E(xx.$$.fragment,f),E(rE.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(aE.$$.fragment,f),E(Px.$$.fragment,f),E(kE.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(RE.$$.fragment,f),E(jx.$$.fragment,f),E(YE.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(ZE.$$.fragment,f),E(Xx.$$.fragment,f),E(rC.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(aC.$$.fragment,f),E(Jx.$$.fragment,f),E(sC.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(iC.$$.fragment,f),E(o$.$$.fragment,f),E(xC.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(kC.$$.fragment,f),E(s$.$$.fragment,f),E(KC.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(e5.$$.fragment,f),E(f$.$$.fragment,f),E(r5.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(a5.$$.fragment,f),E(_$.$$.fragment,f),E(s5.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(i5.$$.fragment,f),E(T$.$$.fragment,f),E(I5.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(q5.$$.fragment,f),E(A$.$$.fragment,f),E(U5.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(Y5.$$.fragment,f),E(k$.$$.fragment,f),E(f3.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(g3.$$.fragment,f),E(I$.$$.fragment,f),E(C3.$$.fragment,f),E(N$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(A3.$$.fragment,f),E(G$.$$.fragment,f),E(N3.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(j3.$$.fragment,f),E(Q$.$$.fragment,f),E(J3.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(K3.$$.fragment,f),E(Y$.$$.fragment,f),E(d0.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(f0.$$.fragment,f),E(rk.$$.fragment,f),E(F0.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(M0.$$.fragment,f),E(lk.$$.fragment,f),E(k0.$$.fragment,f),E(ik.$$.fragment,f),E(dk.$$.fragment,f),E(fk.$$.fragment,f),E(R0.$$.fragment,f),E(mk.$$.fragment,f),E(B0.$$.fragment,f),E(gk.$$.fragment,f),E(hk.$$.fragment,f),E(_k.$$.fragment,f),E(N0.$$.fragment,f),E(uk.$$.fragment,f),E(D0.$$.fragment,f),E(vk.$$.fragment,f),E(Fk.$$.fragment,f),E(Mk.$$.fragment,f),E(O0.$$.fragment,f),E(Ek.$$.fragment,f),E(X0.$$.fragment,f),jQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(Df.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(FL.$$.fragment,f),C(Zg.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(AL.$$.fragment,f),C(Bh.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(SL.$$.fragment,f),C(vp.$$.fragment,f),C(Fp.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(Gp.$$.fragment,f),C(Op.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(zp.$$.fragment,f),C(XL.$$.fragment,f),C(Yu.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(Zu.$$.fragment,f),C(UL.$$.fragment,f),C(Q1.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(H1.$$.fragment,f),C(ey.$$.fragment,f),C(I4.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(q4.$$.fragment,f),C(ny.$$.fragment,f),C(C2.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(A2.$$.fragment,f),C(cy.$$.fragment,f),C(W2.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(U2.$$.fragment,f),C(py.$$.fragment,f),C(Hb.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(Jb.$$.fragment,f),C(Fy.$$.fragment,f),C(yv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C($v.$$.fragment,f),C(wy.$$.fragment,f),C(qv.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(Dv.$$.fragment,f),C($y.$$.fragment,f),C(CF.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(AF.$$.fragment,f),C(By.$$.fragment,f),C(_6.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(b6.$$.fragment,f),C(Dy.$$.fragment,f),C(T6.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(E6.$$.fragment,f),C(zy.$$.fragment,f),C(j6.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(G6.$$.fragment,f),C(Jy.$$.fragment,f),C(X6.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(Q6.$$.fragment,f),C(o8.$$.fragment,f),C(U6.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(Y6.$$.fragment,f),C(s8.$$.fragment,f),C(iT.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(cT.$$.fragment,f),C(f8.$$.fragment,f),C(uT.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(vT.$$.fragment,f),C(_8.$$.fragment,f),C(kT.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(RT.$$.fragment,f),C(T8.$$.fragment,f),C(NT.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(jT.$$.fragment,f),C(L8.$$.fragment,f),C(QT.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(HT.$$.fragment,f),C(S8.$$.fragment,f),C(e7.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(r7.$$.fragment,f),C(N8.$$.fragment,f),C(s7.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(i7.$$.fragment,f),C(V8.$$.fragment,f),C(f7.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(g7.$$.fragment,f),C(H8.$$.fragment,f),C(F7.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(M7.$$.fragment,f),C(Z8.$$.fragment,f),C(w7.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(L7.$$.fragment,f),C(ax.$$.fragment,f),C(E9.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(w9.$$.fragment,f),C(dx.$$.fragment,f),C(U9.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(Y9.$$.fragment,f),C(hx.$$.fragment,f),C(fM.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(gM.$$.fragment,f),C(vx.$$.fragment,f),C(FM.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(MM.$$.fragment,f),C(Cx.$$.fragment,f),C(VM.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(zM.$$.fragment,f),C(xx.$$.fragment,f),C(rE.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(aE.$$.fragment,f),C(Px.$$.fragment,f),C(kE.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(RE.$$.fragment,f),C(jx.$$.fragment,f),C(YE.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(ZE.$$.fragment,f),C(Xx.$$.fragment,f),C(rC.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(aC.$$.fragment,f),C(Jx.$$.fragment,f),C(sC.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(iC.$$.fragment,f),C(o$.$$.fragment,f),C(xC.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(kC.$$.fragment,f),C(s$.$$.fragment,f),C(KC.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(e5.$$.fragment,f),C(f$.$$.fragment,f),C(r5.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(a5.$$.fragment,f),C(_$.$$.fragment,f),C(s5.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(i5.$$.fragment,f),C(T$.$$.fragment,f),C(I5.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(q5.$$.fragment,f),C(A$.$$.fragment,f),C(U5.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(Y5.$$.fragment,f),C(k$.$$.fragment,f),C(f3.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(g3.$$.fragment,f),C(I$.$$.fragment,f),C(C3.$$.fragment,f),C(N$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(A3.$$.fragment,f),C(G$.$$.fragment,f),C(N3.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(j3.$$.fragment,f),C(Q$.$$.fragment,f),C(J3.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(K3.$$.fragment,f),C(Y$.$$.fragment,f),C(d0.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(f0.$$.fragment,f),C(rk.$$.fragment,f),C(F0.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(M0.$$.fragment,f),C(lk.$$.fragment,f),C(k0.$$.fragment,f),C(ik.$$.fragment,f),C(dk.$$.fragment,f),C(fk.$$.fragment,f),C(R0.$$.fragment,f),C(mk.$$.fragment,f),C(B0.$$.fragment,f),C(gk.$$.fragment,f),C(hk.$$.fragment,f),C(_k.$$.fragment,f),C(N0.$$.fragment,f),C(uk.$$.fragment,f),C(D0.$$.fragment,f),C(vk.$$.fragment,f),C(Fk.$$.fragment,f),C(Mk.$$.fragment,f),C(O0.$$.fragment,f),C(Ek.$$.fragment,f),C(X0.$$.fragment,f),jQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Bf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(Nf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(PXe),f&&t(Ii),w(hL),f&&t(BXe),f&&t(jn),f&&t(IXe),w(pL,f),f&&t(NXe),f&&t(YS),f&&t(qXe),w(Df,f),f&&t(jXe),f&&t(Ni),w(_L),f&&t(DXe),f&&t(Ao),w(uL),w(FL),w(Zg),w(TL),f&&t(GXe),f&&t(ji),w(ML),f&&t(OXe),f&&t(Lo),w(EL),w(AL),w(Bh),w(LL),f&&t(VXe),f&&t(Di),w(yL),f&&t(XXe),f&&t(yo),w(xL),w(SL),w(vp),w(Fp),w(RL),f&&t(zXe),f&&t(Gi),w(PL),f&&t(QXe),f&&t(xo),w(BL),w(qL),w(Gp),w(Op),w(jL),f&&t(WXe),f&&t(Vi),w(DL),f&&t(HXe),f&&t($o),w(GL),w(VL),w(zp),w(XL),w(Yu),f&&t(UXe),f&&t(Qi),w(zL),f&&t(JXe),f&&t(ko),w(QL),w(HL),w(Zu),w(UL),w(Q1),f&&t(YXe),f&&t(Ui),w(JL),f&&t(KXe),f&&t(So),w(YL),w(ZL),w(H1),w(ey),w(I4),f&&t(ZXe),f&&t(Ki),w(oy),f&&t(eze),f&&t(Ro),w(ry),w(ay),w(q4),w(ny),w(C2),f&&t(oze),f&&t(od),w(sy),f&&t(rze),f&&t(Po),w(ly),w(dy),w(A2),w(cy),w(W2),f&&t(tze),f&&t(ad),w(fy),f&&t(aze),f&&t(Bo),w(my),w(hy),w(U2),w(py),w(Hb),f&&t(nze),f&&t(ld),w(_y),f&&t(sze),f&&t(Io),w(uy),w(vy),w(Jb),w(Fy),w(yv),f&&t(lze),f&&t(cd),w(Ty),f&&t(ize),f&&t(No),w(My),w(Cy),w($v),w(wy),w(qv),f&&t(dze),f&&t(gd),w(Ay),f&&t(cze),f&&t(jo),w(Ly),w(xy),w(Dv),w($y),w(CF),f&&t(fze),f&&t(_d),w(ky),f&&t(mze),f&&t(Do),w(Sy),w(Py),w(AF),w(By),w(_6),f&&t(gze),f&&t(vd),w(Iy),f&&t(hze),f&&t(Go),w(Ny),w(jy),w(b6),w(Dy),w(T6),f&&t(pze),f&&t(Md),w(Gy),f&&t(_ze),f&&t(Oo),w(Oy),w(Xy),w(E6),w(zy),w(j6),f&&t(uze),f&&t(wd),w(Qy),f&&t(bze),f&&t(Vo),w(Wy),w(Uy),w(G6),w(Jy),w(X6),f&&t(vze),f&&t(yd),w(Yy),f&&t(Fze),f&&t(Xo),w(Ky),w(e8),w(Q6),w(o8),w(U6),f&&t(Tze),f&&t(kd),w(r8),f&&t(Mze),f&&t(zo),w(t8),w(n8),w(Y6),w(s8),w(iT),f&&t(Eze),f&&t(Pd),w(l8),f&&t(Cze),f&&t(Qo),w(i8),w(c8),w(cT),w(f8),w(uT),f&&t(wze),f&&t(Nd),w(m8),f&&t(Aze),f&&t(Wo),w(g8),w(p8),w(vT),w(_8),w(kT),f&&t(Lze),f&&t(Dd),w(u8),f&&t(yze),f&&t(Ho),w(b8),w(F8),w(RT),w(T8),w(NT),f&&t(xze),f&&t(Vd),w(E8),f&&t($ze),f&&t(Uo),w(C8),w(A8),w(jT),w(L8),w(QT),f&&t(kze),f&&t(Qd),w(y8),f&&t(Sze),f&&t(Jo),w(x8),w(k8),w(HT),w(S8),w(e7),f&&t(Rze),f&&t(Ud),w(R8),f&&t(Pze),f&&t(Yo),w(P8),w(I8),w(r7),w(N8),w(s7),f&&t(Bze),f&&t(Kd),w(j8),f&&t(Ize),f&&t(Ko),w(D8),w(O8),w(i7),w(V8),w(f7),f&&t(Nze),f&&t(oc),w(X8),f&&t(qze),f&&t(Zo),w(z8),w(W8),w(g7),w(H8),w(F7),f&&t(jze),f&&t(ac),w(U8),f&&t(Dze),f&&t(er),w(J8),w(K8),w(M7),w(Z8),w(w7),f&&t(Gze),f&&t(lc),w(ex),f&&t(Oze),f&&t(or),w(ox),w(tx),w(L7),w(ax),w(E9),f&&t(Vze),f&&t(cc),w(nx),f&&t(Xze),f&&t(rr),w(sx),w(ix),w(w9),w(dx),w(U9),f&&t(zze),f&&t(gc),w(cx),f&&t(Qze),f&&t(tr),w(fx),w(gx),w(Y9),w(hx),w(fM),f&&t(Wze),f&&t(_c),w(px),f&&t(Hze),f&&t(ar),w(_x),w(bx),w(gM),w(vx),w(FM),f&&t(Uze),f&&t(vc),w(Fx),f&&t(Jze),f&&t(nr),w(Tx),w(Ex),w(MM),w(Cx),w(VM),f&&t(Yze),f&&t(Mc),w(wx),f&&t(Kze),f&&t(sr),w(Ax),w(yx),w(zM),w(xx),w(rE),f&&t(Zze),f&&t(wc),w($x),f&&t(eQe),f&&t(lr),w(kx),w(Rx),w(aE),w(Px),w(kE),f&&t(oQe),f&&t(yc),w(Bx),f&&t(rQe),f&&t(ir),w(Ix),w(qx),w(RE),w(jx),w(YE),f&&t(tQe),f&&t(kc),w(Dx),f&&t(aQe),f&&t(dr),w(Gx),w(Vx),w(ZE),w(Xx),w(rC),f&&t(nQe),f&&t(Pc),w(Qx),f&&t(sQe),f&&t(cr),w(Wx),w(Ux),w(aC),w(Jx),w(sC),f&&t(lQe),f&&t(Nc),w(Yx),f&&t(iQe),f&&t(fr),w(Kx),w(e$),w(iC),w(o$),w(xC),f&&t(dQe),f&&t(Dc),w(r$),f&&t(cQe),f&&t(mr),w(t$),w(n$),w(kC),w(s$),w(KC),f&&t(fQe),f&&t(Vc),w(l$),f&&t(mQe),f&&t(gr),w(i$),w(c$),w(e5),w(f$),w(r5),f&&t(gQe),f&&t(Qc),w(m$),f&&t(hQe),f&&t(hr),w(g$),w(p$),w(a5),w(_$),w(s5),f&&t(pQe),f&&t(Uc),w(u$),f&&t(_Qe),f&&t(pr),w(b$),w(F$),w(i5),w(T$),w(I5),f&&t(uQe),f&&t(Kc),w(M$),f&&t(bQe),f&&t(_r),w(E$),w(w$),w(q5),w(A$),w(U5),f&&t(vQe),f&&t(of),w(L$),f&&t(FQe),f&&t(ur),w(y$),w($$),w(Y5),w(k$),w(f3),f&&t(TQe),f&&t(af),w(S$),f&&t(MQe),f&&t(br),w(R$),w(B$),w(g3),w(I$),w(C3),f&&t(EQe),f&&t(lf),w(N$),f&&t(CQe),f&&t(vr),w(q$),w(D$),w(A3),w(G$),w(N3),f&&t(wQe),f&&t(ff),w(O$),f&&t(AQe),f&&t(Fr),w(V$),w(z$),w(j3),w(Q$),w(J3),f&&t(LQe),f&&t(hf),w(W$),f&&t(yQe),f&&t(Tr),w(H$),w(J$),w(K3),w(Y$),w(d0),f&&t(xQe),f&&t(uf),w(K$),f&&t($Qe),f&&t(Mr),w(Z$),w(ok),w(f0),w(rk),w(F0),f&&t(kQe),f&&t(Ff),w(tk),f&&t(SQe),f&&t(Er),w(ak),w(sk),w(M0),w(lk),w(k0),f&&t(RQe),f&&t(Ef),w(ik),f&&t(PQe),f&&t(Cr),w(dk),w(fk),w(R0),w(mk),w(B0),f&&t(BQe),f&&t(Af),w(gk),f&&t(IQe),f&&t(wr),w(hk),w(_k),w(N0),w(uk),w(D0),f&&t(NQe),f&&t(xf),w(vk),f&&t(qQe),f&&t(Ar),w(Fk),w(Mk),w(O0),w(Ek),w(X0)}}}const $Jt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function kJt($){return xHt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class qJt extends wHt{constructor(g){super();AHt(this,g,kJt,xJt,LHt,{})}}export{qJt as default,$Jt as metadata};
