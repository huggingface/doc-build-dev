import{S as Oyt,i as Vyt,s as Xyt,e as a,k as l,w as F,t as o,M as zyt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Wyt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as zDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function Qyt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,lA,pf,je,We,gi,yn,iA,Ln,xn,dA,hi,$n,cA,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),lA=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),iA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),dA=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),cA=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var L$=s(p);m=r(L$,"NewModelConfig"),L$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var x$=s(ci);hf=r(x$,"model_type"),x$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var $$=s(fi);mi=r($$,'"new-model"'),$$.forEach(t),lA=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),iA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var k$=s(Ln);xn=r(k$,"PreTrainedModel"),k$.forEach(t),dA=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),cA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var S$=s(pi);_f=r(S$,"NewModelConfig"),S$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,lA),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,iA),e(je,Ln),e(Ln,xn),e(je,dA),e(je,hi),e(hi,$n),e(je,cA),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function Hyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Yyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Zyt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,lA,pf,je,We,gi,yn,iA,Ln,xn,dA,hi,$n,cA,pi,_f,Ca,Qe,Ae,L$,_i,x$,$$,Eo,wa,k$,uf,S$,KDe,GIe,ui,bf,Aee,fA,ZDe,yee,eGe,OIe,kn,oGe,Lee,rGe,tGe,xee,aGe,nGe,VIe,mA,XIe,R$,sGe,zIe,vf,WIe,bi,Ff,$ee,gA,lGe,kee,iGe,QIe,Co,hA,dGe,pA,cGe,P$,fGe,mGe,gGe,_A,hGe,See,pGe,_Ge,uGe,Er,uA,bGe,Ree,vGe,FGe,vi,TGe,Pee,MGe,EGe,Bee,CGe,wGe,AGe,A,Tf,Iee,yGe,LGe,B$,xGe,$Ge,kGe,Mf,qee,SGe,RGe,I$,PGe,BGe,IGe,Ef,Nee,qGe,NGe,q$,jGe,DGe,GGe,Cf,jee,OGe,VGe,N$,XGe,zGe,WGe,wf,Dee,QGe,HGe,j$,UGe,JGe,YGe,Af,Gee,KGe,ZGe,D$,eOe,oOe,rOe,yf,Oee,tOe,aOe,G$,nOe,sOe,lOe,Lf,Vee,iOe,dOe,O$,cOe,fOe,mOe,xf,Xee,gOe,hOe,V$,pOe,_Oe,uOe,$f,zee,bOe,vOe,X$,FOe,TOe,MOe,kf,Wee,EOe,COe,z$,wOe,AOe,yOe,Sf,Qee,LOe,xOe,W$,$Oe,kOe,SOe,Rf,Hee,ROe,POe,Q$,BOe,IOe,qOe,Pf,Uee,NOe,jOe,H$,DOe,GOe,OOe,Bf,Jee,VOe,XOe,U$,zOe,WOe,QOe,If,Yee,HOe,UOe,J$,JOe,YOe,KOe,qf,Kee,ZOe,eVe,Y$,oVe,rVe,tVe,Nf,Zee,aVe,nVe,K$,sVe,lVe,iVe,jf,eoe,dVe,cVe,Z$,fVe,mVe,gVe,Df,ooe,hVe,pVe,ek,_Ve,uVe,bVe,Gf,roe,vVe,FVe,ok,TVe,MVe,EVe,Of,toe,CVe,wVe,rk,AVe,yVe,LVe,Vf,aoe,xVe,$Ve,tk,kVe,SVe,RVe,Xf,noe,PVe,BVe,ak,IVe,qVe,NVe,zf,soe,jVe,DVe,nk,GVe,OVe,VVe,Wf,loe,XVe,zVe,sk,WVe,QVe,HVe,Qf,ioe,UVe,JVe,lk,YVe,KVe,ZVe,Hf,doe,eXe,oXe,ik,rXe,tXe,aXe,Uf,coe,nXe,sXe,dk,lXe,iXe,dXe,Jf,foe,cXe,fXe,ck,mXe,gXe,hXe,Yf,moe,pXe,_Xe,fk,uXe,bXe,vXe,Kf,goe,FXe,TXe,mk,MXe,EXe,CXe,Zf,hoe,wXe,AXe,gk,yXe,LXe,xXe,em,poe,$Xe,kXe,hk,SXe,RXe,PXe,om,_oe,BXe,IXe,pk,qXe,NXe,jXe,rm,uoe,DXe,GXe,_k,OXe,VXe,XXe,tm,boe,zXe,WXe,uk,QXe,HXe,UXe,am,voe,JXe,YXe,bk,KXe,ZXe,eze,nm,Foe,oze,rze,vk,tze,aze,nze,sm,Toe,sze,lze,Fk,ize,dze,cze,lm,Moe,fze,mze,Tk,gze,hze,pze,im,Eoe,_ze,uze,Mk,bze,vze,Fze,dm,Coe,Tze,Mze,Ek,Eze,Cze,wze,cm,woe,Aze,yze,Ck,Lze,xze,$ze,fm,Aoe,kze,Sze,wk,Rze,Pze,Bze,mm,yoe,Ize,qze,Ak,Nze,jze,Dze,gm,Loe,Gze,Oze,yk,Vze,Xze,zze,hm,xoe,Wze,Qze,Lk,Hze,Uze,Jze,pm,$oe,Yze,Kze,xk,Zze,eWe,oWe,_m,koe,rWe,tWe,$k,aWe,nWe,sWe,um,Soe,lWe,iWe,kk,dWe,cWe,fWe,bm,Roe,mWe,gWe,Sk,hWe,pWe,_We,vm,Poe,uWe,bWe,Rk,vWe,FWe,TWe,Fm,Boe,MWe,EWe,Pk,CWe,wWe,AWe,Tm,Ioe,yWe,LWe,Bk,xWe,$We,kWe,Mm,qoe,SWe,RWe,Ik,PWe,BWe,IWe,Em,Noe,qWe,NWe,qk,jWe,DWe,GWe,Cm,joe,OWe,VWe,Nk,XWe,zWe,WWe,wm,Doe,QWe,HWe,jk,UWe,JWe,YWe,Am,Goe,KWe,ZWe,Dk,eQe,oQe,rQe,ym,Ooe,tQe,aQe,Gk,nQe,sQe,lQe,Lm,Voe,iQe,dQe,Ok,cQe,fQe,mQe,xm,Xoe,gQe,hQe,Vk,pQe,_Qe,uQe,$m,zoe,bQe,vQe,Xk,FQe,TQe,MQe,km,Woe,EQe,CQe,zk,wQe,AQe,yQe,Sm,Qoe,LQe,xQe,Wk,$Qe,kQe,SQe,Rm,Hoe,RQe,PQe,Qk,BQe,IQe,qQe,Pm,Uoe,NQe,jQe,Hk,DQe,GQe,OQe,Bm,Joe,VQe,XQe,Uk,zQe,WQe,QQe,Im,Yoe,HQe,UQe,Jk,JQe,YQe,KQe,qm,Koe,ZQe,eHe,Yk,oHe,rHe,tHe,Nm,Zoe,aHe,nHe,Kk,sHe,lHe,iHe,jm,ere,dHe,cHe,Zk,fHe,mHe,gHe,Dm,ore,hHe,pHe,eS,_He,uHe,bHe,Gm,rre,vHe,FHe,oS,THe,MHe,EHe,Om,tre,CHe,wHe,rS,AHe,yHe,LHe,Vm,are,xHe,$He,tS,kHe,SHe,RHe,Xm,nre,PHe,BHe,aS,IHe,qHe,NHe,zm,sre,jHe,DHe,nS,GHe,OHe,VHe,Wm,lre,XHe,zHe,sS,WHe,QHe,HHe,Qm,ire,UHe,JHe,lS,YHe,KHe,ZHe,Hm,dre,eUe,oUe,iS,rUe,tUe,aUe,Um,cre,nUe,sUe,dS,lUe,iUe,dUe,Jm,fre,cUe,fUe,cS,mUe,gUe,hUe,Ym,mre,pUe,_Ue,fS,uUe,bUe,vUe,Km,gre,FUe,TUe,mS,MUe,EUe,CUe,Zm,hre,wUe,AUe,gS,yUe,LUe,xUe,eg,pre,$Ue,kUe,hS,SUe,RUe,PUe,og,_re,BUe,IUe,pS,qUe,NUe,jUe,rg,ure,DUe,GUe,_S,OUe,VUe,XUe,tg,bre,zUe,WUe,uS,QUe,HUe,UUe,ag,vre,JUe,YUe,bS,KUe,ZUe,eJe,ng,Fre,oJe,rJe,vS,tJe,aJe,nJe,sg,Tre,sJe,lJe,FS,iJe,dJe,cJe,lg,Mre,fJe,mJe,TS,gJe,hJe,pJe,ig,Ere,_Je,uJe,MS,bJe,vJe,FJe,dg,Cre,TJe,MJe,ES,EJe,CJe,wJe,cg,wre,AJe,yJe,CS,LJe,xJe,$Je,fg,Are,kJe,SJe,wS,RJe,PJe,BJe,mg,yre,IJe,qJe,AS,NJe,jJe,DJe,gg,Lre,GJe,OJe,yS,VJe,XJe,zJe,hg,xre,WJe,QJe,LS,HJe,UJe,JJe,pg,$re,YJe,KJe,xS,ZJe,eYe,oYe,_g,kre,rYe,tYe,$S,aYe,nYe,sYe,ug,Sre,lYe,iYe,kS,dYe,cYe,fYe,bg,Rre,mYe,gYe,SS,hYe,pYe,_Ye,vg,uYe,Fg,bA,bYe,Pre,vYe,HIe,Fi,Tg,Bre,vA,FYe,Ire,TYe,UIe,wo,FA,MYe,TA,EYe,RS,CYe,wYe,AYe,MA,yYe,qre,LYe,xYe,$Ye,Cr,EA,kYe,Nre,SYe,RYe,Aa,PYe,jre,BYe,IYe,Dre,qYe,NYe,Gre,jYe,DYe,GYe,k,Sn,Ore,OYe,VYe,PS,XYe,zYe,BS,WYe,QYe,HYe,Rn,Vre,UYe,JYe,IS,YYe,KYe,qS,ZYe,eKe,oKe,Pn,Xre,rKe,tKe,NS,aKe,nKe,jS,sKe,lKe,iKe,Mg,zre,dKe,cKe,DS,fKe,mKe,gKe,Bn,Wre,hKe,pKe,GS,_Ke,uKe,OS,bKe,vKe,FKe,Eg,Qre,TKe,MKe,VS,EKe,CKe,wKe,Cg,Hre,AKe,yKe,XS,LKe,xKe,$Ke,wg,Ure,kKe,SKe,zS,RKe,PKe,BKe,In,Jre,IKe,qKe,WS,NKe,jKe,QS,DKe,GKe,OKe,qn,Yre,VKe,XKe,HS,zKe,WKe,US,QKe,HKe,UKe,Nn,Kre,JKe,YKe,JS,KKe,ZKe,YS,eZe,oZe,rZe,Ag,Zre,tZe,aZe,KS,nZe,sZe,lZe,yg,ete,iZe,dZe,ZS,cZe,fZe,mZe,jn,ote,gZe,hZe,eR,pZe,_Ze,oR,uZe,bZe,vZe,Lg,rte,FZe,TZe,rR,MZe,EZe,CZe,Dn,tte,wZe,AZe,tR,yZe,LZe,aR,xZe,$Ze,kZe,Gn,ate,SZe,RZe,nR,PZe,BZe,sR,IZe,qZe,NZe,On,nte,jZe,DZe,lR,GZe,OZe,iR,VZe,XZe,zZe,xg,ste,WZe,QZe,dR,HZe,UZe,JZe,Vn,lte,YZe,KZe,cR,ZZe,eeo,fR,oeo,reo,teo,Xn,ite,aeo,neo,mR,seo,leo,gR,ieo,deo,ceo,zn,dte,feo,meo,hR,geo,heo,pR,peo,_eo,ueo,Wn,cte,beo,veo,_R,Feo,Teo,uR,Meo,Eeo,Ceo,Qn,fte,weo,Aeo,bR,yeo,Leo,vR,xeo,$eo,keo,Hn,mte,Seo,Reo,FR,Peo,Beo,TR,Ieo,qeo,Neo,$g,gte,jeo,Deo,MR,Geo,Oeo,Veo,Un,hte,Xeo,zeo,ER,Weo,Qeo,CR,Heo,Ueo,Jeo,kg,pte,Yeo,Keo,wR,Zeo,eoo,ooo,Jn,_te,roo,too,AR,aoo,noo,yR,soo,loo,ioo,Yn,ute,doo,coo,LR,foo,moo,xR,goo,hoo,poo,Kn,bte,_oo,uoo,$R,boo,voo,kR,Foo,Too,Moo,Zn,vte,Eoo,Coo,SR,woo,Aoo,RR,yoo,Loo,xoo,es,Fte,$oo,koo,PR,Soo,Roo,BR,Poo,Boo,Ioo,Sg,Tte,qoo,Noo,IR,joo,Doo,Goo,os,Mte,Ooo,Voo,qR,Xoo,zoo,NR,Woo,Qoo,Hoo,rs,Ete,Uoo,Joo,jR,Yoo,Koo,DR,Zoo,ero,oro,ts,Cte,rro,tro,GR,aro,nro,OR,sro,lro,iro,as,wte,dro,cro,VR,fro,mro,XR,gro,hro,pro,ns,Ate,_ro,uro,zR,bro,vro,WR,Fro,Tro,Mro,ss,yte,Ero,Cro,QR,wro,Aro,HR,yro,Lro,xro,Rg,Lte,$ro,kro,UR,Sro,Rro,Pro,ls,xte,Bro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,Pg,$te,Oro,Vro,KR,Xro,zro,Wro,Bg,kte,Qro,Hro,ZR,Uro,Jro,Yro,is,Ste,Kro,Zro,eP,eto,oto,oP,rto,tto,ato,ds,Rte,nto,sto,rP,lto,ito,tP,dto,cto,fto,cs,Pte,mto,gto,aP,hto,pto,nP,_to,uto,bto,Ig,Bte,vto,Fto,sP,Tto,Mto,Eto,fs,Ite,Cto,wto,lP,Ato,yto,iP,Lto,xto,$to,ms,qte,kto,Sto,dP,Rto,Pto,cP,Bto,Ito,qto,gs,Nte,Nto,jto,fP,Dto,Gto,mP,Oto,Vto,Xto,hs,jte,zto,Wto,gP,Qto,Hto,hP,Uto,Jto,Yto,ps,Dte,Kto,Zto,pP,eao,oao,_P,rao,tao,aao,qg,Gte,nao,sao,uP,lao,iao,dao,_s,Ote,cao,fao,bP,mao,gao,vP,hao,pao,_ao,Ng,Vte,uao,bao,FP,vao,Fao,Tao,jg,Xte,Mao,Eao,TP,Cao,wao,Aao,Dg,zte,yao,Lao,MP,xao,$ao,kao,Gg,Wte,Sao,Rao,EP,Pao,Bao,Iao,us,Qte,qao,Nao,CP,jao,Dao,wP,Gao,Oao,Vao,Og,Hte,Xao,zao,AP,Wao,Qao,Hao,bs,Ute,Uao,Jao,yP,Yao,Kao,LP,Zao,eno,ono,vs,Jte,rno,tno,xP,ano,nno,$P,sno,lno,ino,Fs,Yte,dno,cno,kP,fno,mno,SP,gno,hno,pno,Ts,Kte,_no,uno,RP,bno,vno,PP,Fno,Tno,Mno,Ms,Zte,Eno,Cno,BP,wno,Ano,IP,yno,Lno,xno,Es,eae,$no,kno,qP,Sno,Rno,NP,Pno,Bno,Ino,Vg,oae,qno,Nno,jP,jno,Dno,Gno,Xg,rae,Ono,Vno,DP,Xno,zno,Wno,Cs,tae,Qno,Hno,GP,Uno,Jno,OP,Yno,Kno,Zno,ws,aae,eso,oso,VP,rso,tso,XP,aso,nso,sso,As,nae,lso,iso,zP,dso,cso,WP,fso,mso,gso,zg,sae,hso,pso,QP,_so,uso,bso,Wg,lae,vso,Fso,HP,Tso,Mso,Eso,Qg,iae,Cso,wso,UP,Aso,yso,Lso,ys,dae,xso,$so,JP,kso,Sso,YP,Rso,Pso,Bso,Hg,cae,Iso,qso,KP,Nso,jso,Dso,Ug,fae,Gso,Oso,ZP,Vso,Xso,zso,Jg,mae,Wso,Qso,eB,Hso,Uso,Jso,Ls,gae,Yso,Kso,oB,Zso,elo,rB,olo,rlo,tlo,Yg,hae,alo,nlo,tB,slo,llo,ilo,Kg,pae,dlo,clo,aB,flo,mlo,glo,xs,_ae,hlo,plo,nB,_lo,ulo,sB,blo,vlo,Flo,$s,uae,Tlo,Mlo,lB,Elo,Clo,iB,wlo,Alo,ylo,ks,bae,Llo,xlo,dB,$lo,klo,cB,Slo,Rlo,Plo,Ss,vae,Blo,Ilo,fB,qlo,Nlo,mB,jlo,Dlo,Glo,Zg,Olo,eh,CA,Vlo,Fae,Xlo,JIe,Ti,oh,Tae,wA,zlo,Mae,Wlo,YIe,Ao,AA,Qlo,yA,Hlo,gB,Ulo,Jlo,Ylo,LA,Klo,Eae,Zlo,eio,oio,He,xA,rio,Cae,tio,aio,ya,nio,wae,sio,lio,Aae,iio,dio,yae,cio,fio,mio,Z,rh,Lae,gio,hio,hB,pio,_io,uio,th,xae,bio,vio,pB,Fio,Tio,Mio,ah,$ae,Eio,Cio,_B,wio,Aio,yio,nh,kae,Lio,xio,uB,$io,kio,Sio,sh,Sae,Rio,Pio,bB,Bio,Iio,qio,lh,Rae,Nio,jio,vB,Dio,Gio,Oio,ih,Pae,Vio,Xio,FB,zio,Wio,Qio,dh,Bae,Hio,Uio,TB,Jio,Yio,Kio,ch,Iae,Zio,edo,MB,odo,rdo,tdo,fh,qae,ado,ndo,EB,sdo,ldo,ido,mh,Nae,ddo,cdo,CB,fdo,mdo,gdo,gh,jae,hdo,pdo,wB,_do,udo,bdo,hh,Dae,vdo,Fdo,AB,Tdo,Mdo,Edo,ph,Gae,Cdo,wdo,yB,Ado,ydo,Ldo,_h,Oae,xdo,$do,LB,kdo,Sdo,Rdo,uh,Vae,Pdo,Bdo,xB,Ido,qdo,Ndo,bh,Xae,jdo,Ddo,$B,Gdo,Odo,Vdo,vh,zae,Xdo,zdo,kB,Wdo,Qdo,Hdo,Fh,Wae,Udo,Jdo,SB,Ydo,Kdo,Zdo,Th,Qae,eco,oco,RB,rco,tco,aco,Mh,Hae,nco,sco,PB,lco,ico,dco,Eh,Uae,cco,fco,BB,mco,gco,hco,Ch,Jae,pco,_co,IB,uco,bco,vco,wh,Yae,Fco,Tco,qB,Mco,Eco,Cco,Ah,Kae,wco,Aco,NB,yco,Lco,xco,yh,Zae,$co,kco,jB,Sco,Rco,Pco,Lh,ene,Bco,Ico,DB,qco,Nco,jco,xh,Dco,$h,Gco,kh,$A,Oco,one,Vco,KIe,Mi,Sh,rne,kA,Xco,tne,zco,ZIe,yo,SA,Wco,RA,Qco,GB,Hco,Uco,Jco,PA,Yco,ane,Kco,Zco,efo,Ue,BA,ofo,nne,rfo,tfo,Ei,afo,sne,nfo,sfo,lne,lfo,ifo,dfo,pe,Rh,ine,cfo,ffo,OB,mfo,gfo,hfo,Ph,dne,pfo,_fo,cne,ufo,bfo,vfo,Bh,fne,Ffo,Tfo,VB,Mfo,Efo,Cfo,Ih,mne,wfo,Afo,XB,yfo,Lfo,xfo,qh,gne,$fo,kfo,zB,Sfo,Rfo,Pfo,Nh,hne,Bfo,Ifo,WB,qfo,Nfo,jfo,jh,pne,Dfo,Gfo,QB,Ofo,Vfo,Xfo,Dh,_ne,zfo,Wfo,HB,Qfo,Hfo,Ufo,Gh,une,Jfo,Yfo,UB,Kfo,Zfo,emo,Oh,bne,omo,rmo,JB,tmo,amo,nmo,Vh,vne,smo,lmo,YB,imo,dmo,cmo,Xh,Fne,fmo,mmo,KB,gmo,hmo,pmo,zh,Tne,_mo,umo,ZB,bmo,vmo,Fmo,Wh,Mne,Tmo,Mmo,eI,Emo,Cmo,wmo,Qh,Ene,Amo,ymo,oI,Lmo,xmo,$mo,Hh,Cne,kmo,Smo,rI,Rmo,Pmo,Bmo,Uh,Imo,Jh,qmo,Yh,IA,Nmo,wne,jmo,eqe,Ci,Kh,Ane,qA,Dmo,yne,Gmo,oqe,Lo,NA,Omo,wi,Vmo,tI,Xmo,zmo,aI,Wmo,Qmo,Hmo,jA,Umo,Lne,Jmo,Ymo,Kmo,tt,DA,Zmo,xne,ego,ogo,Ai,rgo,$ne,tgo,ago,nI,ngo,sgo,lgo,Zh,igo,Je,GA,dgo,kne,cgo,fgo,La,mgo,Sne,ggo,hgo,Rne,pgo,_go,Pne,ugo,bgo,vgo,x,ep,Bne,Fgo,Tgo,sI,Mgo,Ego,Cgo,op,Ine,wgo,Ago,lI,ygo,Lgo,xgo,rp,qne,$go,kgo,iI,Sgo,Rgo,Pgo,tp,Nne,Bgo,Igo,dI,qgo,Ngo,jgo,ap,jne,Dgo,Ggo,cI,Ogo,Vgo,Xgo,np,Dne,zgo,Wgo,fI,Qgo,Hgo,Ugo,sp,Gne,Jgo,Ygo,mI,Kgo,Zgo,eho,lp,One,oho,rho,gI,tho,aho,nho,ip,Vne,sho,lho,hI,iho,dho,cho,dp,Xne,fho,mho,pI,gho,hho,pho,cp,zne,_ho,uho,_I,bho,vho,Fho,fp,Wne,Tho,Mho,uI,Eho,Cho,who,mp,Qne,Aho,yho,bI,Lho,xho,$ho,gp,Hne,kho,Sho,vI,Rho,Pho,Bho,hp,Une,Iho,qho,FI,Nho,jho,Dho,pp,Jne,Gho,Oho,TI,Vho,Xho,zho,_p,Yne,Who,Qho,MI,Hho,Uho,Jho,up,Kne,Yho,Kho,EI,Zho,epo,opo,bp,Zne,rpo,tpo,CI,apo,npo,spo,vp,ese,lpo,ipo,wI,dpo,cpo,fpo,Fp,ose,mpo,gpo,AI,hpo,ppo,_po,Tp,rse,upo,bpo,yI,vpo,Fpo,Tpo,Mp,tse,Mpo,Epo,LI,Cpo,wpo,Apo,Ep,ase,ypo,Lpo,xI,xpo,$po,kpo,Cp,nse,Spo,Rpo,$I,Ppo,Bpo,Ipo,wp,sse,qpo,Npo,kI,jpo,Dpo,Gpo,Ap,lse,Opo,Vpo,SI,Xpo,zpo,Wpo,yp,ise,Qpo,Hpo,RI,Upo,Jpo,Ypo,Lp,dse,Kpo,Zpo,PI,e_o,o_o,r_o,xp,cse,t_o,a_o,BI,n_o,s_o,l_o,$p,fse,i_o,d_o,II,c_o,f_o,m_o,kp,mse,g_o,h_o,qI,p_o,__o,u_o,Rs,gse,b_o,v_o,NI,F_o,T_o,jI,M_o,E_o,C_o,Sp,hse,w_o,A_o,DI,y_o,L_o,x_o,Rp,pse,$_o,k_o,GI,S_o,R_o,P_o,Pp,_se,B_o,I_o,OI,q_o,N_o,j_o,Bp,use,D_o,G_o,VI,O_o,V_o,X_o,Ip,bse,z_o,W_o,XI,Q_o,H_o,U_o,qp,vse,J_o,Y_o,zI,K_o,Z_o,euo,Np,Fse,ouo,ruo,WI,tuo,auo,nuo,jp,Tse,suo,luo,QI,iuo,duo,cuo,Dp,Mse,fuo,muo,HI,guo,huo,puo,Gp,Ese,_uo,uuo,UI,buo,vuo,Fuo,Op,Cse,Tuo,Muo,JI,Euo,Cuo,wuo,Vp,wse,Auo,yuo,YI,Luo,xuo,$uo,Xp,Ase,kuo,Suo,KI,Ruo,Puo,Buo,zp,yse,Iuo,quo,ZI,Nuo,juo,Duo,Wp,Lse,Guo,Ouo,eq,Vuo,Xuo,zuo,Qp,xse,Wuo,Quo,oq,Huo,Uuo,Juo,Hp,$se,Yuo,Kuo,rq,Zuo,e2o,o2o,Up,kse,r2o,t2o,tq,a2o,n2o,s2o,Jp,Sse,l2o,i2o,aq,d2o,c2o,f2o,Yp,Rse,m2o,g2o,nq,h2o,p2o,_2o,Kp,Pse,u2o,b2o,sq,v2o,F2o,T2o,Zp,Bse,M2o,E2o,lq,C2o,w2o,A2o,e_,Ise,y2o,L2o,iq,x2o,$2o,k2o,o_,qse,S2o,R2o,dq,P2o,B2o,I2o,r_,Nse,q2o,N2o,cq,j2o,D2o,G2o,t_,jse,O2o,V2o,fq,X2o,z2o,W2o,a_,Dse,Q2o,H2o,mq,U2o,J2o,Y2o,n_,Gse,K2o,Z2o,gq,e1o,o1o,r1o,s_,Ose,t1o,a1o,hq,n1o,s1o,l1o,l_,Vse,i1o,d1o,pq,c1o,f1o,m1o,i_,Xse,g1o,h1o,_q,p1o,_1o,u1o,d_,zse,b1o,v1o,uq,F1o,T1o,M1o,c_,Wse,E1o,C1o,bq,w1o,A1o,y1o,f_,Qse,L1o,x1o,vq,$1o,k1o,S1o,m_,Hse,R1o,P1o,Fq,B1o,I1o,q1o,g_,Use,N1o,j1o,Tq,D1o,G1o,O1o,h_,Jse,V1o,X1o,Mq,z1o,W1o,Q1o,p_,Yse,H1o,U1o,Eq,J1o,Y1o,K1o,__,Kse,Z1o,e9o,Cq,o9o,r9o,t9o,u_,Zse,a9o,n9o,wq,s9o,l9o,i9o,b_,ele,d9o,c9o,Aq,f9o,m9o,g9o,v_,ole,h9o,p9o,yq,_9o,u9o,b9o,F_,rle,v9o,F9o,Lq,T9o,M9o,E9o,T_,tle,C9o,w9o,xq,A9o,y9o,L9o,M_,ale,x9o,$9o,$q,k9o,S9o,R9o,E_,nle,P9o,B9o,kq,I9o,q9o,N9o,C_,sle,j9o,D9o,Sq,G9o,O9o,V9o,w_,lle,X9o,z9o,Rq,W9o,Q9o,H9o,A_,ile,U9o,J9o,Pq,Y9o,K9o,Z9o,y_,dle,ebo,obo,Bq,rbo,tbo,abo,L_,cle,nbo,sbo,Iq,lbo,ibo,dbo,x_,fle,cbo,fbo,qq,mbo,gbo,hbo,$_,mle,pbo,_bo,Nq,ubo,bbo,vbo,k_,gle,Fbo,Tbo,jq,Mbo,Ebo,Cbo,S_,hle,wbo,Abo,Dq,ybo,Lbo,xbo,R_,ple,$bo,kbo,Gq,Sbo,Rbo,Pbo,P_,_le,Bbo,Ibo,Oq,qbo,Nbo,jbo,B_,ule,Dbo,Gbo,Vq,Obo,Vbo,Xbo,I_,ble,zbo,Wbo,Xq,Qbo,Hbo,Ubo,q_,vle,Jbo,Ybo,zq,Kbo,Zbo,evo,N_,Fle,ovo,rvo,Wq,tvo,avo,nvo,j_,Tle,svo,lvo,Qq,ivo,dvo,cvo,D_,Mle,fvo,mvo,Hq,gvo,hvo,pvo,G_,Ele,_vo,uvo,Uq,bvo,vvo,Fvo,O_,Cle,Tvo,Mvo,Jq,Evo,Cvo,wvo,V_,wle,Avo,yvo,Yq,Lvo,xvo,$vo,X_,kvo,Ale,Svo,Rvo,yle,Pvo,Bvo,z_,rqe,yi,W_,Lle,OA,Ivo,xle,qvo,tqe,xo,VA,Nvo,Li,jvo,Kq,Dvo,Gvo,Zq,Ovo,Vvo,Xvo,XA,zvo,$le,Wvo,Qvo,Hvo,at,zA,Uvo,kle,Jvo,Yvo,xi,Kvo,Sle,Zvo,eFo,eN,oFo,rFo,tFo,Q_,aFo,Ye,WA,nFo,Rle,sFo,lFo,xa,iFo,Ple,dFo,cFo,Ble,fFo,mFo,Ile,gFo,hFo,pFo,G,H_,qle,_Fo,uFo,oN,bFo,vFo,FFo,U_,Nle,TFo,MFo,rN,EFo,CFo,wFo,J_,jle,AFo,yFo,tN,LFo,xFo,$Fo,Y_,Dle,kFo,SFo,aN,RFo,PFo,BFo,K_,Gle,IFo,qFo,nN,NFo,jFo,DFo,Z_,Ole,GFo,OFo,sN,VFo,XFo,zFo,eu,Vle,WFo,QFo,lN,HFo,UFo,JFo,ou,Xle,YFo,KFo,iN,ZFo,eTo,oTo,ru,zle,rTo,tTo,dN,aTo,nTo,sTo,tu,Wle,lTo,iTo,cN,dTo,cTo,fTo,au,Qle,mTo,gTo,fN,hTo,pTo,_To,nu,Hle,uTo,bTo,mN,vTo,FTo,TTo,su,Ule,MTo,ETo,gN,CTo,wTo,ATo,lu,Jle,yTo,LTo,hN,xTo,$To,kTo,iu,Yle,STo,RTo,pN,PTo,BTo,ITo,du,Kle,qTo,NTo,_N,jTo,DTo,GTo,cu,Zle,OTo,VTo,uN,XTo,zTo,WTo,fu,eie,QTo,HTo,bN,UTo,JTo,YTo,mu,oie,KTo,ZTo,vN,e7o,o7o,r7o,gu,rie,t7o,a7o,FN,n7o,s7o,l7o,hu,tie,i7o,d7o,TN,c7o,f7o,m7o,pu,aie,g7o,h7o,MN,p7o,_7o,u7o,_u,nie,b7o,v7o,EN,F7o,T7o,M7o,uu,sie,E7o,C7o,CN,w7o,A7o,y7o,bu,lie,L7o,x7o,wN,$7o,k7o,S7o,vu,iie,R7o,P7o,AN,B7o,I7o,q7o,Fu,die,N7o,j7o,yN,D7o,G7o,O7o,Tu,cie,V7o,X7o,LN,z7o,W7o,Q7o,Mu,fie,H7o,U7o,xN,J7o,Y7o,K7o,Eu,mie,Z7o,eMo,$N,oMo,rMo,tMo,Cu,gie,aMo,nMo,kN,sMo,lMo,iMo,wu,hie,dMo,cMo,SN,fMo,mMo,gMo,Au,pie,hMo,pMo,RN,_Mo,uMo,bMo,yu,_ie,vMo,FMo,PN,TMo,MMo,EMo,Lu,uie,CMo,wMo,BN,AMo,yMo,LMo,xu,bie,xMo,$Mo,IN,kMo,SMo,RMo,$u,vie,PMo,BMo,qN,IMo,qMo,NMo,ku,Fie,jMo,DMo,NN,GMo,OMo,VMo,Su,Tie,XMo,zMo,jN,WMo,QMo,HMo,Ru,Mie,UMo,JMo,DN,YMo,KMo,ZMo,Pu,Eie,e4o,o4o,GN,r4o,t4o,a4o,Bu,n4o,Cie,s4o,l4o,wie,i4o,d4o,Iu,aqe,$i,qu,Aie,QA,c4o,yie,f4o,nqe,$o,HA,m4o,ki,g4o,ON,h4o,p4o,VN,_4o,u4o,b4o,UA,v4o,Lie,F4o,T4o,M4o,nt,JA,E4o,xie,C4o,w4o,Si,A4o,$ie,y4o,L4o,XN,x4o,$4o,k4o,Nu,S4o,Ke,YA,R4o,kie,P4o,B4o,$a,I4o,Sie,q4o,N4o,Rie,j4o,D4o,Pie,G4o,O4o,V4o,z,ju,Bie,X4o,z4o,zN,W4o,Q4o,H4o,Du,Iie,U4o,J4o,WN,Y4o,K4o,Z4o,Gu,qie,eEo,oEo,QN,rEo,tEo,aEo,Ou,Nie,nEo,sEo,HN,lEo,iEo,dEo,Vu,jie,cEo,fEo,UN,mEo,gEo,hEo,Xu,Die,pEo,_Eo,JN,uEo,bEo,vEo,zu,Gie,FEo,TEo,YN,MEo,EEo,CEo,Wu,Oie,wEo,AEo,KN,yEo,LEo,xEo,Qu,Vie,$Eo,kEo,ZN,SEo,REo,PEo,Hu,Xie,BEo,IEo,ej,qEo,NEo,jEo,Uu,zie,DEo,GEo,oj,OEo,VEo,XEo,Ju,Wie,zEo,WEo,rj,QEo,HEo,UEo,Yu,Qie,JEo,YEo,tj,KEo,ZEo,eCo,Ku,Hie,oCo,rCo,aj,tCo,aCo,nCo,Zu,Uie,sCo,lCo,nj,iCo,dCo,cCo,e2,Jie,fCo,mCo,sj,gCo,hCo,pCo,o2,Yie,_Co,uCo,lj,bCo,vCo,FCo,r2,Kie,TCo,MCo,ij,ECo,CCo,wCo,t2,Zie,ACo,yCo,dj,LCo,xCo,$Co,a2,ede,kCo,SCo,cj,RCo,PCo,BCo,n2,ode,ICo,qCo,fj,NCo,jCo,DCo,s2,rde,GCo,OCo,mj,VCo,XCo,zCo,l2,tde,WCo,QCo,gj,HCo,UCo,JCo,i2,ade,YCo,KCo,hj,ZCo,e5o,o5o,d2,nde,r5o,t5o,pj,a5o,n5o,s5o,c2,sde,l5o,i5o,_j,d5o,c5o,f5o,f2,lde,m5o,g5o,uj,h5o,p5o,_5o,m2,ide,u5o,b5o,bj,v5o,F5o,T5o,g2,dde,M5o,E5o,vj,C5o,w5o,A5o,h2,cde,y5o,L5o,Fj,x5o,$5o,k5o,p2,fde,S5o,R5o,Tj,P5o,B5o,I5o,_2,mde,q5o,N5o,Mj,j5o,D5o,G5o,u2,gde,O5o,V5o,Ej,X5o,z5o,W5o,b2,hde,Q5o,H5o,Cj,U5o,J5o,Y5o,v2,pde,K5o,Z5o,wj,e3o,o3o,r3o,F2,_de,t3o,a3o,Aj,n3o,s3o,l3o,T2,i3o,ude,d3o,c3o,bde,f3o,m3o,M2,sqe,Ri,E2,vde,KA,g3o,Fde,h3o,lqe,ko,ZA,p3o,Pi,_3o,yj,u3o,b3o,Lj,v3o,F3o,T3o,e6,M3o,Tde,E3o,C3o,w3o,st,o6,A3o,Mde,y3o,L3o,Bi,x3o,Ede,$3o,k3o,xj,S3o,R3o,P3o,C2,B3o,Ze,r6,I3o,Cde,q3o,N3o,ka,j3o,wde,D3o,G3o,Ade,O3o,V3o,yde,X3o,z3o,W3o,W,w2,Lde,Q3o,H3o,$j,U3o,J3o,Y3o,A2,xde,K3o,Z3o,kj,ewo,owo,rwo,y2,$de,two,awo,Sj,nwo,swo,lwo,L2,kde,iwo,dwo,Rj,cwo,fwo,mwo,x2,Sde,gwo,hwo,Pj,pwo,_wo,uwo,$2,Rde,bwo,vwo,Bj,Fwo,Two,Mwo,k2,Pde,Ewo,Cwo,Ij,wwo,Awo,ywo,S2,Bde,Lwo,xwo,qj,$wo,kwo,Swo,R2,Ide,Rwo,Pwo,Nj,Bwo,Iwo,qwo,P2,qde,Nwo,jwo,jj,Dwo,Gwo,Owo,B2,Nde,Vwo,Xwo,Dj,zwo,Wwo,Qwo,I2,jde,Hwo,Uwo,Gj,Jwo,Ywo,Kwo,q2,Dde,Zwo,e0o,Oj,o0o,r0o,t0o,N2,Gde,a0o,n0o,Vj,s0o,l0o,i0o,j2,Ode,d0o,c0o,Xj,f0o,m0o,g0o,D2,Vde,h0o,p0o,zj,_0o,u0o,b0o,G2,Xde,v0o,F0o,Wj,T0o,M0o,E0o,O2,zde,C0o,w0o,Qj,A0o,y0o,L0o,V2,Wde,x0o,$0o,Hj,k0o,S0o,R0o,X2,Qde,P0o,B0o,Uj,I0o,q0o,N0o,z2,Hde,j0o,D0o,Jj,G0o,O0o,V0o,W2,Ude,X0o,z0o,Yj,W0o,Q0o,H0o,Q2,Jde,U0o,J0o,Kj,Y0o,K0o,Z0o,H2,Yde,eAo,oAo,Zj,rAo,tAo,aAo,U2,Kde,nAo,sAo,eD,lAo,iAo,dAo,J2,Zde,cAo,fAo,oD,mAo,gAo,hAo,Y2,ece,pAo,_Ao,rD,uAo,bAo,vAo,K2,oce,FAo,TAo,tD,MAo,EAo,CAo,Z2,rce,wAo,AAo,aD,yAo,LAo,xAo,e1,tce,$Ao,kAo,nD,SAo,RAo,PAo,o1,ace,BAo,IAo,nce,qAo,NAo,jAo,r1,sce,DAo,GAo,sD,OAo,VAo,XAo,t1,lce,zAo,WAo,lD,QAo,HAo,UAo,a1,ice,JAo,YAo,iD,KAo,ZAo,e6o,n1,dce,o6o,r6o,dD,t6o,a6o,n6o,s1,s6o,cce,l6o,i6o,fce,d6o,c6o,l1,iqe,Ii,i1,mce,t6,f6o,gce,m6o,dqe,So,a6,g6o,qi,h6o,cD,p6o,_6o,fD,u6o,b6o,v6o,n6,F6o,hce,T6o,M6o,E6o,lt,s6,C6o,pce,w6o,A6o,Ni,y6o,_ce,L6o,x6o,mD,$6o,k6o,S6o,d1,R6o,eo,l6,P6o,uce,B6o,I6o,Sa,q6o,bce,N6o,j6o,vce,D6o,G6o,Fce,O6o,V6o,X6o,_e,c1,Tce,z6o,W6o,gD,Q6o,H6o,U6o,f1,Mce,J6o,Y6o,hD,K6o,Z6o,eyo,m1,Ece,oyo,ryo,pD,tyo,ayo,nyo,g1,Cce,syo,lyo,_D,iyo,dyo,cyo,h1,wce,fyo,myo,uD,gyo,hyo,pyo,p1,Ace,_yo,uyo,bD,byo,vyo,Fyo,_1,yce,Tyo,Myo,vD,Eyo,Cyo,wyo,u1,Lce,Ayo,yyo,FD,Lyo,xyo,$yo,b1,xce,kyo,Syo,TD,Ryo,Pyo,Byo,v1,$ce,Iyo,qyo,MD,Nyo,jyo,Dyo,F1,kce,Gyo,Oyo,ED,Vyo,Xyo,zyo,T1,Sce,Wyo,Qyo,CD,Hyo,Uyo,Jyo,M1,Rce,Yyo,Kyo,wD,Zyo,eLo,oLo,E1,Pce,rLo,tLo,AD,aLo,nLo,sLo,C1,Bce,lLo,iLo,yD,dLo,cLo,fLo,w1,Ice,mLo,gLo,LD,hLo,pLo,_Lo,A1,uLo,qce,bLo,vLo,Nce,FLo,TLo,y1,cqe,ji,L1,jce,i6,MLo,Dce,ELo,fqe,Ro,d6,CLo,Di,wLo,xD,ALo,yLo,$D,LLo,xLo,$Lo,c6,kLo,Gce,SLo,RLo,PLo,it,f6,BLo,Oce,ILo,qLo,Gi,NLo,Vce,jLo,DLo,kD,GLo,OLo,VLo,x1,XLo,oo,m6,zLo,Xce,WLo,QLo,Ra,HLo,zce,ULo,JLo,Wce,YLo,KLo,Qce,ZLo,e8o,o8o,q,$1,Hce,r8o,t8o,SD,a8o,n8o,s8o,k1,Uce,l8o,i8o,RD,d8o,c8o,f8o,S1,Jce,m8o,g8o,PD,h8o,p8o,_8o,R1,Yce,u8o,b8o,BD,v8o,F8o,T8o,P1,Kce,M8o,E8o,ID,C8o,w8o,A8o,B1,Zce,y8o,L8o,qD,x8o,$8o,k8o,I1,efe,S8o,R8o,ND,P8o,B8o,I8o,q1,ofe,q8o,N8o,jD,j8o,D8o,G8o,N1,rfe,O8o,V8o,DD,X8o,z8o,W8o,j1,tfe,Q8o,H8o,GD,U8o,J8o,Y8o,D1,afe,K8o,Z8o,OD,exo,oxo,rxo,G1,nfe,txo,axo,VD,nxo,sxo,lxo,O1,sfe,ixo,dxo,XD,cxo,fxo,mxo,V1,lfe,gxo,hxo,zD,pxo,_xo,uxo,X1,ife,bxo,vxo,WD,Fxo,Txo,Mxo,z1,dfe,Exo,Cxo,QD,wxo,Axo,yxo,W1,cfe,Lxo,xxo,HD,$xo,kxo,Sxo,Q1,ffe,Rxo,Pxo,UD,Bxo,Ixo,qxo,H1,mfe,Nxo,jxo,JD,Dxo,Gxo,Oxo,U1,gfe,Vxo,Xxo,YD,zxo,Wxo,Qxo,J1,hfe,Hxo,Uxo,KD,Jxo,Yxo,Kxo,Y1,pfe,Zxo,e$o,ZD,o$o,r$o,t$o,K1,_fe,a$o,n$o,eG,s$o,l$o,i$o,Z1,ufe,d$o,c$o,oG,f$o,m$o,g$o,e9,bfe,h$o,p$o,rG,_$o,u$o,b$o,o9,vfe,v$o,F$o,tG,T$o,M$o,E$o,r9,Ffe,C$o,w$o,aG,A$o,y$o,L$o,t9,Tfe,x$o,$$o,nG,k$o,S$o,R$o,a9,Mfe,P$o,B$o,sG,I$o,q$o,N$o,n9,Efe,j$o,D$o,lG,G$o,O$o,V$o,s9,Cfe,X$o,z$o,iG,W$o,Q$o,H$o,l9,wfe,U$o,J$o,dG,Y$o,K$o,Z$o,i9,Afe,eko,oko,cG,rko,tko,ako,d9,yfe,nko,sko,fG,lko,iko,dko,c9,Lfe,cko,fko,mG,mko,gko,hko,f9,xfe,pko,_ko,gG,uko,bko,vko,m9,$fe,Fko,Tko,hG,Mko,Eko,Cko,g9,kfe,wko,Ako,pG,yko,Lko,xko,h9,Sfe,$ko,kko,_G,Sko,Rko,Pko,p9,Rfe,Bko,Iko,uG,qko,Nko,jko,_9,Pfe,Dko,Gko,bG,Oko,Vko,Xko,u9,Bfe,zko,Wko,vG,Qko,Hko,Uko,b9,Ife,Jko,Yko,FG,Kko,Zko,eSo,v9,qfe,oSo,rSo,TG,tSo,aSo,nSo,F9,Nfe,sSo,lSo,MG,iSo,dSo,cSo,T9,jfe,fSo,mSo,EG,gSo,hSo,pSo,M9,_So,Dfe,uSo,bSo,Gfe,vSo,FSo,E9,mqe,Oi,C9,Ofe,g6,TSo,Vfe,MSo,gqe,Po,h6,ESo,Vi,CSo,CG,wSo,ASo,wG,ySo,LSo,xSo,p6,$So,Xfe,kSo,SSo,RSo,dt,_6,PSo,zfe,BSo,ISo,Xi,qSo,Wfe,NSo,jSo,AG,DSo,GSo,OSo,w9,VSo,ro,u6,XSo,Qfe,zSo,WSo,Pa,QSo,Hfe,HSo,USo,Ufe,JSo,YSo,Jfe,KSo,ZSo,eRo,Y,A9,Yfe,oRo,rRo,yG,tRo,aRo,nRo,y9,Kfe,sRo,lRo,LG,iRo,dRo,cRo,L9,Zfe,fRo,mRo,xG,gRo,hRo,pRo,x9,eme,_Ro,uRo,$G,bRo,vRo,FRo,$9,ome,TRo,MRo,kG,ERo,CRo,wRo,k9,rme,ARo,yRo,SG,LRo,xRo,$Ro,S9,tme,kRo,SRo,RG,RRo,PRo,BRo,R9,ame,IRo,qRo,PG,NRo,jRo,DRo,P9,nme,GRo,ORo,BG,VRo,XRo,zRo,B9,sme,WRo,QRo,IG,HRo,URo,JRo,I9,lme,YRo,KRo,qG,ZRo,ePo,oPo,q9,ime,rPo,tPo,NG,aPo,nPo,sPo,N9,dme,lPo,iPo,jG,dPo,cPo,fPo,j9,cme,mPo,gPo,DG,hPo,pPo,_Po,D9,fme,uPo,bPo,GG,vPo,FPo,TPo,G9,mme,MPo,EPo,OG,CPo,wPo,APo,O9,gme,yPo,LPo,VG,xPo,$Po,kPo,V9,hme,SPo,RPo,XG,PPo,BPo,IPo,X9,pme,qPo,NPo,zG,jPo,DPo,GPo,z9,_me,OPo,VPo,WG,XPo,zPo,WPo,W9,ume,QPo,HPo,QG,UPo,JPo,YPo,Q9,bme,KPo,ZPo,HG,eBo,oBo,rBo,H9,vme,tBo,aBo,UG,nBo,sBo,lBo,U9,Fme,iBo,dBo,JG,cBo,fBo,mBo,J9,Tme,gBo,hBo,YG,pBo,_Bo,uBo,Y9,Mme,bBo,vBo,KG,FBo,TBo,MBo,K9,Eme,EBo,CBo,ZG,wBo,ABo,yBo,Z9,Cme,LBo,xBo,eO,$Bo,kBo,SBo,eb,wme,RBo,PBo,oO,BBo,IBo,qBo,ob,NBo,Ame,jBo,DBo,yme,GBo,OBo,rb,hqe,zi,tb,Lme,b6,VBo,xme,XBo,pqe,Bo,v6,zBo,Wi,WBo,rO,QBo,HBo,tO,UBo,JBo,YBo,F6,KBo,$me,ZBo,eIo,oIo,ct,T6,rIo,kme,tIo,aIo,Qi,nIo,Sme,sIo,lIo,aO,iIo,dIo,cIo,ab,fIo,to,M6,mIo,Rme,gIo,hIo,Ba,pIo,Pme,_Io,uIo,Bme,bIo,vIo,Ime,FIo,TIo,MIo,Yr,nb,qme,EIo,CIo,nO,wIo,AIo,yIo,sb,Nme,LIo,xIo,sO,$Io,kIo,SIo,lb,jme,RIo,PIo,lO,BIo,IIo,qIo,ib,Dme,NIo,jIo,iO,DIo,GIo,OIo,db,Gme,VIo,XIo,dO,zIo,WIo,QIo,cb,HIo,Ome,UIo,JIo,Vme,YIo,KIo,fb,_qe,Hi,mb,Xme,E6,ZIo,zme,eqo,uqe,Io,C6,oqo,Ui,rqo,cO,tqo,aqo,fO,nqo,sqo,lqo,w6,iqo,Wme,dqo,cqo,fqo,ft,A6,mqo,Qme,gqo,hqo,Ji,pqo,Hme,_qo,uqo,mO,bqo,vqo,Fqo,gb,Tqo,ao,y6,Mqo,Ume,Eqo,Cqo,Ia,wqo,Jme,Aqo,yqo,Yme,Lqo,xqo,Kme,$qo,kqo,Sqo,U,hb,Zme,Rqo,Pqo,gO,Bqo,Iqo,qqo,pb,ege,Nqo,jqo,hO,Dqo,Gqo,Oqo,_b,oge,Vqo,Xqo,pO,zqo,Wqo,Qqo,ub,rge,Hqo,Uqo,_O,Jqo,Yqo,Kqo,bb,tge,Zqo,eNo,uO,oNo,rNo,tNo,vb,age,aNo,nNo,bO,sNo,lNo,iNo,Fb,nge,dNo,cNo,vO,fNo,mNo,gNo,Tb,sge,hNo,pNo,FO,_No,uNo,bNo,Mb,lge,vNo,FNo,TO,TNo,MNo,ENo,Eb,ige,CNo,wNo,MO,ANo,yNo,LNo,Cb,dge,xNo,$No,EO,kNo,SNo,RNo,wb,cge,PNo,BNo,CO,INo,qNo,NNo,Ab,fge,jNo,DNo,wO,GNo,ONo,VNo,yb,mge,XNo,zNo,AO,WNo,QNo,HNo,Lb,gge,UNo,JNo,yO,YNo,KNo,ZNo,xb,hge,ejo,ojo,LO,rjo,tjo,ajo,$b,pge,njo,sjo,xO,ljo,ijo,djo,kb,_ge,cjo,fjo,$O,mjo,gjo,hjo,Sb,uge,pjo,_jo,kO,ujo,bjo,vjo,Rb,bge,Fjo,Tjo,SO,Mjo,Ejo,Cjo,Pb,vge,wjo,Ajo,RO,yjo,Ljo,xjo,Bb,Fge,$jo,kjo,PO,Sjo,Rjo,Pjo,Ib,Tge,Bjo,Ijo,BO,qjo,Njo,jjo,qb,Mge,Djo,Gjo,IO,Ojo,Vjo,Xjo,Nb,Ege,zjo,Wjo,qO,Qjo,Hjo,Ujo,jb,Cge,Jjo,Yjo,NO,Kjo,Zjo,eDo,Db,wge,oDo,rDo,jO,tDo,aDo,nDo,Gb,Age,sDo,lDo,DO,iDo,dDo,cDo,Ob,yge,fDo,mDo,GO,gDo,hDo,pDo,Vb,Lge,_Do,uDo,OO,bDo,vDo,FDo,Xb,xge,TDo,MDo,VO,EDo,CDo,wDo,zb,$ge,ADo,yDo,XO,LDo,xDo,$Do,Wb,kge,kDo,SDo,zO,RDo,PDo,BDo,Qb,IDo,Sge,qDo,NDo,Rge,jDo,DDo,Hb,bqe,Yi,Ub,Pge,L6,GDo,Bge,ODo,vqe,qo,x6,VDo,Ki,XDo,WO,zDo,WDo,QO,QDo,HDo,UDo,$6,JDo,Ige,YDo,KDo,ZDo,mt,k6,eGo,qge,oGo,rGo,Zi,tGo,Nge,aGo,nGo,HO,sGo,lGo,iGo,Jb,dGo,no,S6,cGo,jge,fGo,mGo,qa,gGo,Dge,hGo,pGo,Gge,_Go,uGo,Oge,bGo,vGo,FGo,V,Yb,Vge,TGo,MGo,UO,EGo,CGo,wGo,Kb,Xge,AGo,yGo,JO,LGo,xGo,$Go,Zb,zge,kGo,SGo,YO,RGo,PGo,BGo,ev,Wge,IGo,qGo,KO,NGo,jGo,DGo,ov,Qge,GGo,OGo,ZO,VGo,XGo,zGo,rv,Hge,WGo,QGo,eV,HGo,UGo,JGo,tv,Uge,YGo,KGo,oV,ZGo,eOo,oOo,av,Jge,rOo,tOo,rV,aOo,nOo,sOo,nv,Yge,lOo,iOo,tV,dOo,cOo,fOo,sv,Kge,mOo,gOo,aV,hOo,pOo,_Oo,lv,Zge,uOo,bOo,nV,vOo,FOo,TOo,iv,ehe,MOo,EOo,sV,COo,wOo,AOo,dv,ohe,yOo,LOo,lV,xOo,$Oo,kOo,cv,rhe,SOo,ROo,iV,POo,BOo,IOo,fv,the,qOo,NOo,dV,jOo,DOo,GOo,mv,ahe,OOo,VOo,cV,XOo,zOo,WOo,gv,nhe,QOo,HOo,fV,UOo,JOo,YOo,hv,she,KOo,ZOo,mV,eVo,oVo,rVo,pv,lhe,tVo,aVo,gV,nVo,sVo,lVo,_v,ihe,iVo,dVo,hV,cVo,fVo,mVo,uv,dhe,gVo,hVo,pV,pVo,_Vo,uVo,bv,che,bVo,vVo,_V,FVo,TVo,MVo,vv,fhe,EVo,CVo,uV,wVo,AVo,yVo,Fv,mhe,LVo,xVo,bV,$Vo,kVo,SVo,Tv,ghe,RVo,PVo,vV,BVo,IVo,qVo,Mv,hhe,NVo,jVo,FV,DVo,GVo,OVo,Ev,phe,VVo,XVo,TV,zVo,WVo,QVo,Cv,_he,HVo,UVo,MV,JVo,YVo,KVo,wv,uhe,ZVo,eXo,EV,oXo,rXo,tXo,Av,bhe,aXo,nXo,CV,sXo,lXo,iXo,yv,vhe,dXo,cXo,wV,fXo,mXo,gXo,Lv,Fhe,hXo,pXo,AV,_Xo,uXo,bXo,xv,The,vXo,FXo,yV,TXo,MXo,EXo,$v,Mhe,CXo,wXo,LV,AXo,yXo,LXo,kv,Ehe,xXo,$Xo,xV,kXo,SXo,RXo,Sv,Che,PXo,BXo,$V,IXo,qXo,NXo,Rv,whe,jXo,DXo,kV,GXo,OXo,VXo,Pv,Ahe,XXo,zXo,SV,WXo,QXo,HXo,Bv,yhe,UXo,JXo,RV,YXo,KXo,ZXo,Iv,ezo,Lhe,ozo,rzo,xhe,tzo,azo,qv,Fqe,ed,Nv,$he,R6,nzo,khe,szo,Tqe,No,P6,lzo,od,izo,PV,dzo,czo,BV,fzo,mzo,gzo,B6,hzo,She,pzo,_zo,uzo,gt,I6,bzo,Rhe,vzo,Fzo,rd,Tzo,Phe,Mzo,Ezo,IV,Czo,wzo,Azo,jv,yzo,so,q6,Lzo,Bhe,xzo,$zo,Na,kzo,Ihe,Szo,Rzo,qhe,Pzo,Bzo,Nhe,Izo,qzo,Nzo,jhe,Dv,Dhe,jzo,Dzo,qV,Gzo,Ozo,Vzo,Gv,Xzo,Ghe,zzo,Wzo,Ohe,Qzo,Hzo,Ov,Mqe,td,Vv,Vhe,N6,Uzo,Xhe,Jzo,Eqe,jo,j6,Yzo,ad,Kzo,NV,Zzo,eWo,jV,oWo,rWo,tWo,D6,aWo,zhe,nWo,sWo,lWo,ht,G6,iWo,Whe,dWo,cWo,nd,fWo,Qhe,mWo,gWo,DV,hWo,pWo,_Wo,Xv,uWo,lo,O6,bWo,Hhe,vWo,FWo,ja,TWo,Uhe,MWo,EWo,Jhe,CWo,wWo,Yhe,AWo,yWo,LWo,Fe,zv,Khe,xWo,$Wo,GV,kWo,SWo,RWo,Wv,Zhe,PWo,BWo,OV,IWo,qWo,NWo,Qv,epe,jWo,DWo,VV,GWo,OWo,VWo,Hv,ope,XWo,zWo,XV,WWo,QWo,HWo,Ps,rpe,UWo,JWo,zV,YWo,KWo,WV,ZWo,eQo,oQo,Uv,tpe,rQo,tQo,QV,aQo,nQo,sQo,pt,ape,lQo,iQo,HV,dQo,cQo,UV,fQo,mQo,JV,gQo,hQo,pQo,Jv,npe,_Qo,uQo,YV,bQo,vQo,FQo,Yv,spe,TQo,MQo,KV,EQo,CQo,wQo,Kv,lpe,AQo,yQo,ZV,LQo,xQo,$Qo,Zv,ipe,kQo,SQo,eX,RQo,PQo,BQo,eF,dpe,IQo,qQo,oX,NQo,jQo,DQo,oF,cpe,GQo,OQo,rX,VQo,XQo,zQo,rF,fpe,WQo,QQo,tX,HQo,UQo,JQo,tF,YQo,mpe,KQo,ZQo,gpe,eHo,oHo,aF,Cqe,sd,nF,hpe,V6,rHo,ppe,tHo,wqe,Do,X6,aHo,ld,nHo,aX,sHo,lHo,nX,iHo,dHo,cHo,z6,fHo,_pe,mHo,gHo,hHo,_t,W6,pHo,upe,_Ho,uHo,id,bHo,bpe,vHo,FHo,sX,THo,MHo,EHo,sF,CHo,io,Q6,wHo,vpe,AHo,yHo,Da,LHo,Fpe,xHo,$Ho,Tpe,kHo,SHo,Mpe,RHo,PHo,BHo,Epe,lF,Cpe,IHo,qHo,lX,NHo,jHo,DHo,iF,GHo,wpe,OHo,VHo,Ape,XHo,zHo,dF,Aqe,dd,cF,ype,H6,WHo,Lpe,QHo,yqe,Go,U6,HHo,cd,UHo,iX,JHo,YHo,dX,KHo,ZHo,eUo,J6,oUo,xpe,rUo,tUo,aUo,ut,Y6,nUo,$pe,sUo,lUo,fd,iUo,kpe,dUo,cUo,cX,fUo,mUo,gUo,fF,hUo,co,K6,pUo,Spe,_Uo,uUo,Ga,bUo,Rpe,vUo,FUo,Ppe,TUo,MUo,Bpe,EUo,CUo,wUo,ke,mF,Ipe,AUo,yUo,fX,LUo,xUo,$Uo,gF,qpe,kUo,SUo,mX,RUo,PUo,BUo,hF,Npe,IUo,qUo,gX,NUo,jUo,DUo,pF,jpe,GUo,OUo,hX,VUo,XUo,zUo,_F,Dpe,WUo,QUo,pX,HUo,UUo,JUo,uF,Gpe,YUo,KUo,_X,ZUo,eJo,oJo,bF,Ope,rJo,tJo,uX,aJo,nJo,sJo,vF,Vpe,lJo,iJo,bX,dJo,cJo,fJo,FF,Xpe,mJo,gJo,vX,hJo,pJo,_Jo,TF,uJo,zpe,bJo,vJo,Wpe,FJo,TJo,MF,Lqe,md,EF,Qpe,Z6,MJo,Hpe,EJo,xqe,Oo,ey,CJo,gd,wJo,FX,AJo,yJo,TX,LJo,xJo,$Jo,oy,kJo,Upe,SJo,RJo,PJo,bt,ry,BJo,Jpe,IJo,qJo,hd,NJo,Ype,jJo,DJo,MX,GJo,OJo,VJo,CF,XJo,fo,ty,zJo,Kpe,WJo,QJo,Oa,HJo,Zpe,UJo,JJo,e_e,YJo,KJo,o_e,ZJo,eYo,oYo,Kr,wF,r_e,rYo,tYo,EX,aYo,nYo,sYo,AF,t_e,lYo,iYo,CX,dYo,cYo,fYo,yF,a_e,mYo,gYo,wX,hYo,pYo,_Yo,LF,n_e,uYo,bYo,AX,vYo,FYo,TYo,xF,s_e,MYo,EYo,yX,CYo,wYo,AYo,$F,yYo,l_e,LYo,xYo,i_e,$Yo,kYo,kF,$qe,pd,SF,d_e,ay,SYo,c_e,RYo,kqe,Vo,ny,PYo,_d,BYo,LX,IYo,qYo,xX,NYo,jYo,DYo,sy,GYo,f_e,OYo,VYo,XYo,vt,ly,zYo,m_e,WYo,QYo,ud,HYo,g_e,UYo,JYo,$X,YYo,KYo,ZYo,RF,eKo,mo,iy,oKo,h_e,rKo,tKo,Va,aKo,p_e,nKo,sKo,__e,lKo,iKo,u_e,dKo,cKo,fKo,Se,PF,b_e,mKo,gKo,kX,hKo,pKo,_Ko,BF,v_e,uKo,bKo,SX,vKo,FKo,TKo,IF,F_e,MKo,EKo,RX,CKo,wKo,AKo,qF,T_e,yKo,LKo,PX,xKo,$Ko,kKo,NF,M_e,SKo,RKo,BX,PKo,BKo,IKo,jF,E_e,qKo,NKo,IX,jKo,DKo,GKo,DF,C_e,OKo,VKo,qX,XKo,zKo,WKo,GF,w_e,QKo,HKo,NX,UKo,JKo,YKo,OF,A_e,KKo,ZKo,jX,eZo,oZo,rZo,VF,tZo,y_e,aZo,nZo,L_e,sZo,lZo,XF,Sqe,bd,zF,x_e,dy,iZo,$_e,dZo,Rqe,Xo,cy,cZo,vd,fZo,DX,mZo,gZo,GX,hZo,pZo,_Zo,fy,uZo,k_e,bZo,vZo,FZo,Ft,my,TZo,S_e,MZo,EZo,Fd,CZo,R_e,wZo,AZo,OX,yZo,LZo,xZo,WF,$Zo,go,gy,kZo,P_e,SZo,RZo,Xa,PZo,B_e,BZo,IZo,I_e,qZo,NZo,q_e,jZo,DZo,GZo,hy,QF,N_e,OZo,VZo,VX,XZo,zZo,WZo,HF,j_e,QZo,HZo,XX,UZo,JZo,YZo,UF,KZo,D_e,ZZo,eer,G_e,oer,rer,JF,Pqe,Td,YF,O_e,py,ter,V_e,aer,Bqe,zo,_y,ner,Md,ser,zX,ler,ier,WX,der,cer,fer,uy,mer,X_e,ger,her,per,Tt,by,_er,z_e,uer,ber,Ed,ver,W_e,Fer,Ter,QX,Mer,Eer,Cer,KF,wer,ho,vy,Aer,Q_e,yer,Ler,za,xer,H_e,$er,ker,U_e,Ser,Rer,J_e,Per,Ber,Ier,Zr,ZF,Y_e,qer,Ner,HX,jer,Der,Ger,eT,K_e,Oer,Ver,UX,Xer,zer,Wer,oT,Z_e,Qer,Her,JX,Uer,Jer,Yer,rT,eue,Ker,Zer,YX,eor,oor,ror,tT,oue,tor,aor,KX,nor,sor,lor,aT,ior,rue,dor,cor,tue,mor,gor,nT,Iqe,Cd,sT,aue,Fy,hor,nue,por,qqe,Wo,Ty,_or,wd,uor,ZX,bor,vor,ez,For,Tor,Mor,My,Eor,sue,Cor,wor,Aor,Mt,Ey,yor,lue,Lor,xor,Ad,$or,iue,kor,Sor,oz,Ror,Por,Bor,lT,Ior,po,Cy,qor,due,Nor,jor,Wa,Dor,cue,Gor,Oor,fue,Vor,Xor,mue,zor,Wor,Qor,yd,iT,gue,Hor,Uor,rz,Jor,Yor,Kor,dT,hue,Zor,err,tz,orr,rrr,trr,cT,pue,arr,nrr,az,srr,lrr,irr,fT,drr,_ue,crr,frr,uue,mrr,grr,mT,Nqe,Ld,gT,bue,wy,hrr,vue,prr,jqe,Qo,Ay,_rr,xd,urr,nz,brr,vrr,sz,Frr,Trr,Mrr,yy,Err,Fue,Crr,wrr,Arr,Et,Ly,yrr,Tue,Lrr,xrr,$d,$rr,Mue,krr,Srr,lz,Rrr,Prr,Brr,hT,Irr,_o,xy,qrr,Eue,Nrr,jrr,Qa,Drr,Cue,Grr,Orr,wue,Vrr,Xrr,Aue,zrr,Wrr,Qrr,$y,pT,yue,Hrr,Urr,iz,Jrr,Yrr,Krr,_T,Lue,Zrr,etr,dz,otr,rtr,ttr,uT,atr,xue,ntr,str,$ue,ltr,itr,bT,Dqe,kd,vT,kue,ky,dtr,Sue,ctr,Gqe,Ho,Sy,ftr,Sd,mtr,cz,gtr,htr,fz,ptr,_tr,utr,Ry,btr,Rue,vtr,Ftr,Ttr,Ct,Py,Mtr,Pue,Etr,Ctr,Rd,wtr,Bue,Atr,ytr,mz,Ltr,xtr,$tr,FT,ktr,uo,By,Str,Iue,Rtr,Ptr,Ha,Btr,que,Itr,qtr,Nue,Ntr,jtr,jue,Dtr,Gtr,Otr,Due,TT,Gue,Vtr,Xtr,gz,ztr,Wtr,Qtr,MT,Htr,Oue,Utr,Jtr,Vue,Ytr,Ktr,ET,Oqe,Pd,CT,Xue,Iy,Ztr,zue,ear,Vqe,Uo,qy,oar,Bd,rar,hz,tar,aar,pz,nar,sar,lar,Ny,iar,Wue,dar,car,far,wt,jy,mar,Que,gar,har,Id,par,Hue,_ar,uar,_z,bar,Far,Tar,wT,Mar,bo,Dy,Ear,Uue,Car,war,Ua,Aar,Jue,yar,Lar,Yue,xar,$ar,Kue,kar,Sar,Rar,Ja,AT,Zue,Par,Bar,uz,Iar,qar,Nar,yT,e2e,jar,Dar,bz,Gar,Oar,Var,LT,o2e,Xar,zar,vz,War,Qar,Har,xT,r2e,Uar,Jar,Fz,Yar,Kar,Zar,$T,enr,t2e,onr,rnr,a2e,tnr,anr,kT,Xqe,qd,ST,n2e,Gy,nnr,s2e,snr,zqe,Jo,Oy,lnr,Nd,inr,Tz,dnr,cnr,Mz,fnr,mnr,gnr,Vy,hnr,l2e,pnr,_nr,unr,At,Xy,bnr,i2e,vnr,Fnr,jd,Tnr,d2e,Mnr,Enr,Ez,Cnr,wnr,Anr,RT,ynr,vo,zy,Lnr,c2e,xnr,$nr,Ya,knr,f2e,Snr,Rnr,m2e,Pnr,Bnr,g2e,Inr,qnr,Nnr,h2e,PT,p2e,jnr,Dnr,Cz,Gnr,Onr,Vnr,BT,Xnr,_2e,znr,Wnr,u2e,Qnr,Hnr,IT,Wqe,Dd,qT,b2e,Wy,Unr,v2e,Jnr,Qqe,Yo,Qy,Ynr,Gd,Knr,wz,Znr,esr,Az,osr,rsr,tsr,Hy,asr,F2e,nsr,ssr,lsr,yt,Uy,isr,T2e,dsr,csr,Od,fsr,M2e,msr,gsr,yz,hsr,psr,_sr,NT,usr,wr,Jy,bsr,E2e,vsr,Fsr,Ka,Tsr,C2e,Msr,Esr,w2e,Csr,wsr,A2e,Asr,ysr,Lsr,N,jT,y2e,xsr,$sr,Lz,ksr,Ssr,Rsr,DT,L2e,Psr,Bsr,xz,Isr,qsr,Nsr,GT,x2e,jsr,Dsr,$z,Gsr,Osr,Vsr,OT,$2e,Xsr,zsr,kz,Wsr,Qsr,Hsr,VT,k2e,Usr,Jsr,Sz,Ysr,Ksr,Zsr,XT,S2e,elr,olr,Rz,rlr,tlr,alr,zT,R2e,nlr,slr,Pz,llr,ilr,dlr,WT,P2e,clr,flr,Bz,mlr,glr,hlr,QT,B2e,plr,_lr,Iz,ulr,blr,vlr,HT,I2e,Flr,Tlr,qz,Mlr,Elr,Clr,UT,q2e,wlr,Alr,Nz,ylr,Llr,xlr,JT,N2e,$lr,klr,jz,Slr,Rlr,Plr,YT,j2e,Blr,Ilr,Dz,qlr,Nlr,jlr,KT,D2e,Dlr,Glr,Gz,Olr,Vlr,Xlr,ZT,G2e,zlr,Wlr,Oz,Qlr,Hlr,Ulr,e7,O2e,Jlr,Ylr,Vz,Klr,Zlr,eir,o7,V2e,oir,rir,Xz,tir,air,nir,Bs,X2e,sir,lir,zz,iir,dir,Wz,cir,fir,mir,r7,z2e,gir,hir,Qz,pir,_ir,uir,t7,W2e,bir,vir,Hz,Fir,Tir,Mir,a7,Q2e,Eir,Cir,Uz,wir,Air,yir,n7,H2e,Lir,xir,Jz,$ir,kir,Sir,s7,U2e,Rir,Pir,Yz,Bir,Iir,qir,l7,J2e,Nir,jir,Kz,Dir,Gir,Oir,i7,Y2e,Vir,Xir,Zz,zir,Wir,Qir,d7,K2e,Hir,Uir,eW,Jir,Yir,Kir,c7,Z2e,Zir,edr,oW,odr,rdr,tdr,f7,e1e,adr,ndr,rW,sdr,ldr,idr,m7,o1e,ddr,cdr,tW,fdr,mdr,gdr,g7,r1e,hdr,pdr,aW,_dr,udr,bdr,h7,t1e,vdr,Fdr,nW,Tdr,Mdr,Edr,p7,a1e,Cdr,wdr,sW,Adr,ydr,Ldr,_7,n1e,xdr,$dr,lW,kdr,Sdr,Rdr,u7,s1e,Pdr,Bdr,iW,Idr,qdr,Ndr,b7,l1e,jdr,Ddr,dW,Gdr,Odr,Vdr,v7,i1e,Xdr,zdr,cW,Wdr,Qdr,Hdr,F7,d1e,Udr,Jdr,fW,Ydr,Kdr,Zdr,T7,c1e,ecr,ocr,mW,rcr,tcr,acr,M7,f1e,ncr,scr,gW,lcr,icr,dcr,E7,m1e,ccr,fcr,hW,mcr,gcr,hcr,C7,g1e,pcr,_cr,pW,ucr,bcr,vcr,w7,h1e,Fcr,Tcr,_W,Mcr,Ecr,Ccr,A7,p1e,wcr,Acr,uW,ycr,Lcr,xcr,y7,_1e,$cr,kcr,bW,Scr,Rcr,Pcr,L7,u1e,Bcr,Icr,vW,qcr,Ncr,jcr,x7,b1e,Dcr,Gcr,FW,Ocr,Vcr,Xcr,$7,Hqe,Vd,k7,v1e,Yy,zcr,F1e,Wcr,Uqe,Ko,Ky,Qcr,Xd,Hcr,TW,Ucr,Jcr,MW,Ycr,Kcr,Zcr,Zy,efr,T1e,ofr,rfr,tfr,Lt,eL,afr,M1e,nfr,sfr,zd,lfr,E1e,ifr,dfr,EW,cfr,ffr,mfr,S7,gfr,Ar,oL,hfr,C1e,pfr,_fr,Za,ufr,w1e,bfr,vfr,A1e,Ffr,Tfr,y1e,Mfr,Efr,Cfr,se,R7,L1e,wfr,Afr,CW,yfr,Lfr,xfr,P7,x1e,$fr,kfr,wW,Sfr,Rfr,Pfr,B7,$1e,Bfr,Ifr,AW,qfr,Nfr,jfr,I7,k1e,Dfr,Gfr,yW,Ofr,Vfr,Xfr,q7,S1e,zfr,Wfr,LW,Qfr,Hfr,Ufr,N7,R1e,Jfr,Yfr,xW,Kfr,Zfr,emr,j7,P1e,omr,rmr,$W,tmr,amr,nmr,D7,B1e,smr,lmr,kW,imr,dmr,cmr,G7,I1e,fmr,mmr,SW,gmr,hmr,pmr,O7,q1e,_mr,umr,RW,bmr,vmr,Fmr,V7,N1e,Tmr,Mmr,PW,Emr,Cmr,wmr,X7,j1e,Amr,ymr,BW,Lmr,xmr,$mr,z7,D1e,kmr,Smr,IW,Rmr,Pmr,Bmr,W7,G1e,Imr,qmr,qW,Nmr,jmr,Dmr,Q7,O1e,Gmr,Omr,NW,Vmr,Xmr,zmr,H7,V1e,Wmr,Qmr,jW,Hmr,Umr,Jmr,U7,X1e,Ymr,Kmr,DW,Zmr,egr,ogr,J7,z1e,rgr,tgr,GW,agr,ngr,sgr,Y7,W1e,lgr,igr,OW,dgr,cgr,fgr,K7,Q1e,mgr,ggr,VW,hgr,pgr,_gr,Z7,H1e,ugr,bgr,XW,vgr,Fgr,Tgr,eM,U1e,Mgr,Egr,zW,Cgr,wgr,Agr,oM,J1e,ygr,Lgr,WW,xgr,$gr,kgr,rM,Jqe,Wd,tM,Y1e,rL,Sgr,K1e,Rgr,Yqe,Zo,tL,Pgr,Qd,Bgr,QW,Igr,qgr,HW,Ngr,jgr,Dgr,aL,Ggr,Z1e,Ogr,Vgr,Xgr,xt,nL,zgr,e9e,Wgr,Qgr,Hd,Hgr,o9e,Ugr,Jgr,UW,Ygr,Kgr,Zgr,aM,ehr,yr,sL,ohr,r9e,rhr,thr,en,ahr,t9e,nhr,shr,a9e,lhr,ihr,n9e,dhr,chr,fhr,Me,nM,s9e,mhr,ghr,JW,hhr,phr,_hr,sM,l9e,uhr,bhr,YW,vhr,Fhr,Thr,lM,i9e,Mhr,Ehr,KW,Chr,whr,Ahr,iM,d9e,yhr,Lhr,ZW,xhr,$hr,khr,dM,c9e,Shr,Rhr,eQ,Phr,Bhr,Ihr,cM,f9e,qhr,Nhr,oQ,jhr,Dhr,Ghr,fM,m9e,Ohr,Vhr,rQ,Xhr,zhr,Whr,mM,g9e,Qhr,Hhr,tQ,Uhr,Jhr,Yhr,gM,h9e,Khr,Zhr,aQ,epr,opr,rpr,hM,p9e,tpr,apr,nQ,npr,spr,lpr,pM,_9e,ipr,dpr,sQ,cpr,fpr,mpr,_M,u9e,gpr,hpr,lQ,ppr,_pr,upr,uM,Kqe,Ud,bM,b9e,lL,bpr,v9e,vpr,Zqe,er,iL,Fpr,Jd,Tpr,iQ,Mpr,Epr,dQ,Cpr,wpr,Apr,dL,ypr,F9e,Lpr,xpr,$pr,$t,cL,kpr,T9e,Spr,Rpr,Yd,Ppr,M9e,Bpr,Ipr,cQ,qpr,Npr,jpr,vM,Dpr,Lr,fL,Gpr,E9e,Opr,Vpr,on,Xpr,C9e,zpr,Wpr,w9e,Qpr,Hpr,A9e,Upr,Jpr,Ypr,rn,FM,y9e,Kpr,Zpr,fQ,e_r,o_r,r_r,TM,L9e,t_r,a_r,mQ,n_r,s_r,l_r,MM,x9e,i_r,d_r,gQ,c_r,f_r,m_r,EM,$9e,g_r,h_r,hQ,p_r,__r,u_r,CM,eNe,Kd,wM,k9e,mL,b_r,S9e,v_r,oNe,or,gL,F_r,Zd,T_r,pQ,M_r,E_r,_Q,C_r,w_r,A_r,hL,y_r,R9e,L_r,x_r,$_r,kt,pL,k_r,P9e,S_r,R_r,ec,P_r,B9e,B_r,I_r,uQ,q_r,N_r,j_r,AM,D_r,xr,_L,G_r,I9e,O_r,V_r,tn,X_r,q9e,z_r,W_r,N9e,Q_r,H_r,j9e,U_r,J_r,Y_r,ie,yM,D9e,K_r,Z_r,bQ,eur,our,rur,LM,G9e,tur,aur,vQ,nur,sur,lur,xM,O9e,iur,dur,FQ,cur,fur,mur,$M,V9e,gur,hur,TQ,pur,_ur,uur,kM,X9e,bur,vur,MQ,Fur,Tur,Mur,SM,z9e,Eur,Cur,EQ,wur,Aur,yur,RM,W9e,Lur,xur,CQ,$ur,kur,Sur,PM,Q9e,Rur,Pur,wQ,Bur,Iur,qur,BM,H9e,Nur,jur,AQ,Dur,Gur,Our,IM,U9e,Vur,Xur,yQ,zur,Wur,Qur,qM,J9e,Hur,Uur,LQ,Jur,Yur,Kur,NM,Y9e,Zur,e2r,xQ,o2r,r2r,t2r,jM,K9e,a2r,n2r,$Q,s2r,l2r,i2r,DM,Z9e,d2r,c2r,kQ,f2r,m2r,g2r,GM,ebe,h2r,p2r,SQ,_2r,u2r,b2r,OM,obe,v2r,F2r,RQ,T2r,M2r,E2r,VM,rbe,C2r,w2r,PQ,A2r,y2r,L2r,XM,tbe,x2r,$2r,BQ,k2r,S2r,R2r,zM,abe,P2r,B2r,IQ,I2r,q2r,N2r,WM,nbe,j2r,D2r,qQ,G2r,O2r,V2r,QM,rNe,oc,HM,sbe,uL,X2r,lbe,z2r,tNe,rr,bL,W2r,rc,Q2r,NQ,H2r,U2r,jQ,J2r,Y2r,K2r,vL,Z2r,ibe,e1r,o1r,r1r,St,FL,t1r,dbe,a1r,n1r,tc,s1r,cbe,l1r,i1r,DQ,d1r,c1r,f1r,UM,m1r,$r,TL,g1r,fbe,h1r,p1r,an,_1r,mbe,u1r,b1r,gbe,v1r,F1r,hbe,T1r,M1r,E1r,ye,JM,pbe,C1r,w1r,GQ,A1r,y1r,L1r,YM,_be,x1r,$1r,OQ,k1r,S1r,R1r,KM,ube,P1r,B1r,VQ,I1r,q1r,N1r,ZM,bbe,j1r,D1r,XQ,G1r,O1r,V1r,e4,vbe,X1r,z1r,zQ,W1r,Q1r,H1r,o4,Fbe,U1r,J1r,WQ,Y1r,K1r,Z1r,r4,Tbe,e9r,o9r,QQ,r9r,t9r,a9r,t4,Mbe,n9r,s9r,HQ,l9r,i9r,d9r,a4,Ebe,c9r,f9r,UQ,m9r,g9r,h9r,n4,Cbe,p9r,_9r,JQ,u9r,b9r,v9r,s4,aNe,ac,l4,wbe,ML,F9r,Abe,T9r,nNe,tr,EL,M9r,nc,E9r,YQ,C9r,w9r,KQ,A9r,y9r,L9r,CL,x9r,ybe,$9r,k9r,S9r,Rt,wL,R9r,Lbe,P9r,B9r,sc,I9r,xbe,q9r,N9r,ZQ,j9r,D9r,G9r,i4,O9r,kr,AL,V9r,$be,X9r,z9r,nn,W9r,kbe,Q9r,H9r,Sbe,U9r,J9r,Rbe,Y9r,K9r,Z9r,ee,d4,Pbe,ebr,obr,eH,rbr,tbr,abr,c4,Bbe,nbr,sbr,oH,lbr,ibr,dbr,f4,Ibe,cbr,fbr,rH,mbr,gbr,hbr,m4,qbe,pbr,_br,tH,ubr,bbr,vbr,g4,Nbe,Fbr,Tbr,aH,Mbr,Ebr,Cbr,h4,jbe,wbr,Abr,nH,ybr,Lbr,xbr,p4,Dbe,$br,kbr,sH,Sbr,Rbr,Pbr,_4,Gbe,Bbr,Ibr,lH,qbr,Nbr,jbr,u4,Obe,Dbr,Gbr,iH,Obr,Vbr,Xbr,b4,Vbe,zbr,Wbr,dH,Qbr,Hbr,Ubr,v4,Xbe,Jbr,Ybr,cH,Kbr,Zbr,evr,F4,zbe,ovr,rvr,fH,tvr,avr,nvr,T4,Wbe,svr,lvr,mH,ivr,dvr,cvr,M4,Qbe,fvr,mvr,gH,gvr,hvr,pvr,E4,Hbe,_vr,uvr,hH,bvr,vvr,Fvr,C4,Ube,Tvr,Mvr,pH,Evr,Cvr,wvr,w4,Jbe,Avr,yvr,_H,Lvr,xvr,$vr,A4,Ybe,kvr,Svr,uH,Rvr,Pvr,Bvr,y4,Kbe,Ivr,qvr,bH,Nvr,jvr,Dvr,L4,Zbe,Gvr,Ovr,vH,Vvr,Xvr,zvr,x4,eve,Wvr,Qvr,FH,Hvr,Uvr,Jvr,$4,ove,Yvr,Kvr,TH,Zvr,eFr,oFr,k4,rve,rFr,tFr,MH,aFr,nFr,sFr,S4,tve,lFr,iFr,EH,dFr,cFr,fFr,R4,ave,mFr,gFr,CH,hFr,pFr,_Fr,P4,nve,uFr,bFr,wH,vFr,FFr,TFr,B4,sNe,lc,I4,sve,yL,MFr,lve,EFr,lNe,ar,LL,CFr,ic,wFr,AH,AFr,yFr,yH,LFr,xFr,$Fr,xL,kFr,ive,SFr,RFr,PFr,Pt,$L,BFr,dve,IFr,qFr,dc,NFr,cve,jFr,DFr,LH,GFr,OFr,VFr,q4,XFr,Sr,kL,zFr,fve,WFr,QFr,sn,HFr,mve,UFr,JFr,gve,YFr,KFr,hve,ZFr,eTr,oTr,he,N4,pve,rTr,tTr,xH,aTr,nTr,sTr,j4,_ve,lTr,iTr,$H,dTr,cTr,fTr,D4,uve,mTr,gTr,kH,hTr,pTr,_Tr,G4,bve,uTr,bTr,SH,vTr,FTr,TTr,O4,vve,MTr,ETr,RH,CTr,wTr,ATr,V4,Fve,yTr,LTr,PH,xTr,$Tr,kTr,X4,Tve,STr,RTr,BH,PTr,BTr,ITr,z4,Mve,qTr,NTr,IH,jTr,DTr,GTr,W4,Eve,OTr,VTr,qH,XTr,zTr,WTr,Q4,Cve,QTr,HTr,NH,UTr,JTr,YTr,H4,wve,KTr,ZTr,jH,e7r,o7r,r7r,U4,Ave,t7r,a7r,DH,n7r,s7r,l7r,J4,yve,i7r,d7r,GH,c7r,f7r,m7r,Y4,Lve,g7r,h7r,OH,p7r,_7r,u7r,K4,xve,b7r,v7r,VH,F7r,T7r,M7r,Z4,$ve,E7r,C7r,XH,w7r,A7r,y7r,eE,kve,L7r,x7r,zH,$7r,k7r,S7r,oE,iNe,cc,rE,Sve,SL,R7r,Rve,P7r,dNe,nr,RL,B7r,fc,I7r,WH,q7r,N7r,QH,j7r,D7r,G7r,PL,O7r,Pve,V7r,X7r,z7r,Bt,BL,W7r,Bve,Q7r,H7r,mc,U7r,Ive,J7r,Y7r,HH,K7r,Z7r,eMr,tE,oMr,Rr,IL,rMr,qve,tMr,aMr,ln,nMr,Nve,sMr,lMr,jve,iMr,dMr,Dve,cMr,fMr,mMr,qL,aE,Gve,gMr,hMr,UH,pMr,_Mr,uMr,nE,Ove,bMr,vMr,JH,FMr,TMr,MMr,sE,cNe,gc,lE,Vve,NL,EMr,Xve,CMr,fNe,sr,jL,wMr,hc,AMr,YH,yMr,LMr,KH,xMr,$Mr,kMr,DL,SMr,zve,RMr,PMr,BMr,It,GL,IMr,Wve,qMr,NMr,pc,jMr,Qve,DMr,GMr,ZH,OMr,VMr,XMr,iE,zMr,Pr,OL,WMr,Hve,QMr,HMr,dn,UMr,Uve,JMr,YMr,Jve,KMr,ZMr,Yve,e4r,o4r,r4r,Kve,dE,Zve,t4r,a4r,eU,n4r,s4r,l4r,cE,mNe,_c,fE,eFe,VL,i4r,oFe,d4r,gNe,lr,XL,c4r,uc,f4r,oU,m4r,g4r,rU,h4r,p4r,_4r,zL,u4r,rFe,b4r,v4r,F4r,qt,WL,T4r,tFe,M4r,E4r,bc,C4r,aFe,w4r,A4r,tU,y4r,L4r,x4r,mE,$4r,Br,QL,k4r,nFe,S4r,R4r,cn,P4r,sFe,B4r,I4r,lFe,q4r,N4r,iFe,j4r,D4r,G4r,de,gE,dFe,O4r,V4r,aU,X4r,z4r,W4r,hE,cFe,Q4r,H4r,nU,U4r,J4r,Y4r,pE,fFe,K4r,Z4r,sU,eEr,oEr,rEr,_E,mFe,tEr,aEr,lU,nEr,sEr,lEr,uE,gFe,iEr,dEr,iU,cEr,fEr,mEr,bE,hFe,gEr,hEr,dU,pEr,_Er,uEr,vE,pFe,bEr,vEr,cU,FEr,TEr,MEr,FE,_Fe,EEr,CEr,fU,wEr,AEr,yEr,TE,uFe,LEr,xEr,mU,$Er,kEr,SEr,ME,bFe,REr,PEr,gU,BEr,IEr,qEr,EE,vFe,NEr,jEr,hU,DEr,GEr,OEr,CE,FFe,VEr,XEr,pU,zEr,WEr,QEr,wE,TFe,HEr,UEr,_U,JEr,YEr,KEr,AE,MFe,ZEr,eCr,uU,oCr,rCr,tCr,yE,EFe,aCr,nCr,bU,sCr,lCr,iCr,LE,CFe,dCr,cCr,vU,fCr,mCr,gCr,xE,wFe,hCr,pCr,FU,_Cr,uCr,bCr,$E,AFe,vCr,FCr,TU,TCr,MCr,ECr,kE,yFe,CCr,wCr,MU,ACr,yCr,LCr,SE,LFe,xCr,$Cr,EU,kCr,SCr,RCr,RE,hNe,vc,PE,xFe,HL,PCr,$Fe,BCr,pNe,ir,UL,ICr,Fc,qCr,CU,NCr,jCr,wU,DCr,GCr,OCr,JL,VCr,kFe,XCr,zCr,WCr,Nt,YL,QCr,SFe,HCr,UCr,Tc,JCr,RFe,YCr,KCr,AU,ZCr,e5r,o5r,BE,r5r,Ir,KL,t5r,PFe,a5r,n5r,fn,s5r,BFe,l5r,i5r,IFe,d5r,c5r,qFe,f5r,m5r,g5r,ce,IE,NFe,h5r,p5r,yU,_5r,u5r,b5r,qE,jFe,v5r,F5r,LU,T5r,M5r,E5r,NE,DFe,C5r,w5r,xU,A5r,y5r,L5r,jE,GFe,x5r,$5r,$U,k5r,S5r,R5r,DE,OFe,P5r,B5r,kU,I5r,q5r,N5r,GE,VFe,j5r,D5r,SU,G5r,O5r,V5r,OE,XFe,X5r,z5r,RU,W5r,Q5r,H5r,VE,zFe,U5r,J5r,PU,Y5r,K5r,Z5r,XE,WFe,e3r,o3r,BU,r3r,t3r,a3r,zE,QFe,n3r,s3r,IU,l3r,i3r,d3r,WE,HFe,c3r,f3r,qU,m3r,g3r,h3r,QE,UFe,p3r,_3r,NU,u3r,b3r,v3r,HE,JFe,F3r,T3r,jU,M3r,E3r,C3r,UE,YFe,w3r,A3r,DU,y3r,L3r,x3r,JE,KFe,$3r,k3r,GU,S3r,R3r,P3r,YE,ZFe,B3r,I3r,OU,q3r,N3r,j3r,KE,eTe,D3r,G3r,VU,O3r,V3r,X3r,ZE,oTe,z3r,W3r,XU,Q3r,H3r,U3r,eC,rTe,J3r,Y3r,zU,K3r,Z3r,ewr,oC,tTe,owr,rwr,WU,twr,awr,nwr,rC,_Ne,Mc,tC,aTe,ZL,swr,nTe,lwr,uNe,dr,e8,iwr,Ec,dwr,QU,cwr,fwr,HU,mwr,gwr,hwr,o8,pwr,sTe,_wr,uwr,bwr,jt,r8,vwr,lTe,Fwr,Twr,Cc,Mwr,iTe,Ewr,Cwr,UU,wwr,Awr,ywr,aC,Lwr,qr,t8,xwr,dTe,$wr,kwr,mn,Swr,cTe,Rwr,Pwr,fTe,Bwr,Iwr,mTe,qwr,Nwr,jwr,gTe,nC,hTe,Dwr,Gwr,JU,Owr,Vwr,Xwr,sC,bNe,wc,lC,pTe,a8,zwr,_Te,Wwr,vNe,cr,n8,Qwr,Ac,Hwr,YU,Uwr,Jwr,KU,Ywr,Kwr,Zwr,s8,e0r,uTe,o0r,r0r,t0r,Dt,l8,a0r,bTe,n0r,s0r,yc,l0r,vTe,i0r,d0r,ZU,c0r,f0r,m0r,iC,g0r,Nr,i8,h0r,FTe,p0r,_0r,gn,u0r,TTe,b0r,v0r,MTe,F0r,T0r,ETe,M0r,E0r,C0r,CTe,dC,wTe,w0r,A0r,eJ,y0r,L0r,x0r,cC,FNe,Lc,fC,ATe,d8,$0r,yTe,k0r,TNe,fr,c8,S0r,xc,R0r,oJ,P0r,B0r,rJ,I0r,q0r,N0r,f8,j0r,LTe,D0r,G0r,O0r,Gt,m8,V0r,xTe,X0r,z0r,$c,W0r,$Te,Q0r,H0r,tJ,U0r,J0r,Y0r,mC,K0r,jr,g8,Z0r,kTe,eAr,oAr,hn,rAr,STe,tAr,aAr,RTe,nAr,sAr,PTe,lAr,iAr,dAr,te,gC,BTe,cAr,fAr,aJ,mAr,gAr,hAr,hC,ITe,pAr,_Ar,nJ,uAr,bAr,vAr,pC,qTe,FAr,TAr,sJ,MAr,EAr,CAr,_C,NTe,wAr,AAr,lJ,yAr,LAr,xAr,uC,jTe,$Ar,kAr,iJ,SAr,RAr,PAr,bC,DTe,BAr,IAr,dJ,qAr,NAr,jAr,vC,GTe,DAr,GAr,cJ,OAr,VAr,XAr,FC,OTe,zAr,WAr,fJ,QAr,HAr,UAr,TC,VTe,JAr,YAr,mJ,KAr,ZAr,e6r,MC,XTe,o6r,r6r,gJ,t6r,a6r,n6r,EC,zTe,s6r,l6r,hJ,i6r,d6r,c6r,CC,WTe,f6r,m6r,pJ,g6r,h6r,p6r,wC,QTe,_6r,u6r,_J,b6r,v6r,F6r,AC,HTe,T6r,M6r,uJ,E6r,C6r,w6r,yC,UTe,A6r,y6r,bJ,L6r,x6r,$6r,LC,JTe,k6r,S6r,vJ,R6r,P6r,B6r,xC,YTe,I6r,q6r,FJ,N6r,j6r,D6r,$C,KTe,G6r,O6r,TJ,V6r,X6r,z6r,kC,ZTe,W6r,Q6r,MJ,H6r,U6r,J6r,SC,e7e,Y6r,K6r,EJ,Z6r,eyr,oyr,RC,o7e,ryr,tyr,CJ,ayr,nyr,syr,PC,r7e,lyr,iyr,wJ,dyr,cyr,fyr,BC,t7e,myr,gyr,AJ,hyr,pyr,_yr,IC,a7e,uyr,byr,yJ,vyr,Fyr,Tyr,qC,n7e,Myr,Eyr,LJ,Cyr,wyr,Ayr,NC,MNe,kc,jC,s7e,h8,yyr,l7e,Lyr,ENe,mr,p8,xyr,Sc,$yr,xJ,kyr,Syr,$J,Ryr,Pyr,Byr,_8,Iyr,i7e,qyr,Nyr,jyr,Ot,u8,Dyr,d7e,Gyr,Oyr,Rc,Vyr,c7e,Xyr,zyr,kJ,Wyr,Qyr,Hyr,DC,Uyr,Dr,b8,Jyr,f7e,Yyr,Kyr,pn,Zyr,m7e,eLr,oLr,g7e,rLr,tLr,h7e,aLr,nLr,sLr,Re,GC,p7e,lLr,iLr,SJ,dLr,cLr,fLr,OC,_7e,mLr,gLr,RJ,hLr,pLr,_Lr,VC,u7e,uLr,bLr,PJ,vLr,FLr,TLr,XC,b7e,MLr,ELr,BJ,CLr,wLr,ALr,zC,v7e,yLr,LLr,IJ,xLr,$Lr,kLr,WC,F7e,SLr,RLr,qJ,PLr,BLr,ILr,QC,T7e,qLr,NLr,NJ,jLr,DLr,GLr,HC,M7e,OLr,VLr,jJ,XLr,zLr,WLr,UC,E7e,QLr,HLr,DJ,ULr,JLr,YLr,JC,CNe,Pc,YC,C7e,v8,KLr,w7e,ZLr,wNe,gr,F8,e8r,Bc,o8r,GJ,r8r,t8r,OJ,a8r,n8r,s8r,T8,l8r,A7e,i8r,d8r,c8r,Vt,M8,f8r,y7e,m8r,g8r,Ic,h8r,L7e,p8r,_8r,VJ,u8r,b8r,v8r,KC,F8r,Gr,E8,T8r,x7e,M8r,E8r,_n,C8r,$7e,w8r,A8r,k7e,y8r,L8r,S7e,x8r,$8r,k8r,Ee,ZC,R7e,S8r,R8r,XJ,P8r,B8r,I8r,e5,P7e,q8r,N8r,zJ,j8r,D8r,G8r,o5,B7e,O8r,V8r,WJ,X8r,z8r,W8r,r5,I7e,Q8r,H8r,QJ,U8r,J8r,Y8r,t5,q7e,K8r,Z8r,HJ,exr,oxr,rxr,a5,N7e,txr,axr,UJ,nxr,sxr,lxr,n5,j7e,ixr,dxr,JJ,cxr,fxr,mxr,s5,D7e,gxr,hxr,YJ,pxr,_xr,uxr,l5,G7e,bxr,vxr,KJ,Fxr,Txr,Mxr,i5,O7e,Exr,Cxr,ZJ,wxr,Axr,yxr,d5,V7e,Lxr,xxr,eY,$xr,kxr,Sxr,c5,X7e,Rxr,Pxr,oY,Bxr,Ixr,qxr,f5,ANe,qc,m5,z7e,C8,Nxr,W7e,jxr,yNe,hr,w8,Dxr,Nc,Gxr,rY,Oxr,Vxr,tY,Xxr,zxr,Wxr,A8,Qxr,Q7e,Hxr,Uxr,Jxr,Xt,y8,Yxr,H7e,Kxr,Zxr,jc,e$r,U7e,o$r,r$r,aY,t$r,a$r,n$r,g5,s$r,Or,L8,l$r,J7e,i$r,d$r,un,c$r,Y7e,f$r,m$r,K7e,g$r,h$r,Z7e,p$r,_$r,u$r,Le,h5,eMe,b$r,v$r,nY,F$r,T$r,M$r,p5,oMe,E$r,C$r,sY,w$r,A$r,y$r,_5,rMe,L$r,x$r,lY,$$r,k$r,S$r,u5,tMe,R$r,P$r,iY,B$r,I$r,q$r,b5,aMe,N$r,j$r,dY,D$r,G$r,O$r,v5,nMe,V$r,X$r,cY,z$r,W$r,Q$r,F5,sMe,H$r,U$r,fY,J$r,Y$r,K$r,T5,lMe,Z$r,ekr,mY,okr,rkr,tkr,M5,iMe,akr,nkr,gY,skr,lkr,ikr,E5,dMe,dkr,ckr,hY,fkr,mkr,gkr,C5,LNe,Dc,w5,cMe,x8,hkr,fMe,pkr,xNe,pr,$8,_kr,Gc,ukr,pY,bkr,vkr,_Y,Fkr,Tkr,Mkr,k8,Ekr,mMe,Ckr,wkr,Akr,zt,S8,ykr,gMe,Lkr,xkr,Oc,$kr,hMe,kkr,Skr,uY,Rkr,Pkr,Bkr,A5,Ikr,Vr,R8,qkr,pMe,Nkr,jkr,bn,Dkr,_Me,Gkr,Okr,uMe,Vkr,Xkr,bMe,zkr,Wkr,Qkr,Pe,y5,vMe,Hkr,Ukr,bY,Jkr,Ykr,Kkr,L5,FMe,Zkr,eSr,vY,oSr,rSr,tSr,x5,TMe,aSr,nSr,FY,sSr,lSr,iSr,$5,MMe,dSr,cSr,TY,fSr,mSr,gSr,k5,EMe,hSr,pSr,MY,_Sr,uSr,bSr,S5,CMe,vSr,FSr,EY,TSr,MSr,ESr,R5,wMe,CSr,wSr,CY,ASr,ySr,LSr,P5,AMe,xSr,$Sr,wY,kSr,SSr,RSr,B5,yMe,PSr,BSr,AY,ISr,qSr,NSr,I5,$Ne,Vc,q5,LMe,P8,jSr,xMe,DSr,kNe,_r,B8,GSr,Xc,OSr,yY,VSr,XSr,LY,zSr,WSr,QSr,I8,HSr,$Me,USr,JSr,YSr,Wt,q8,KSr,kMe,ZSr,eRr,zc,oRr,SMe,rRr,tRr,xY,aRr,nRr,sRr,N5,lRr,Xr,N8,iRr,RMe,dRr,cRr,vn,fRr,PMe,mRr,gRr,BMe,hRr,pRr,IMe,_Rr,uRr,bRr,xe,j5,qMe,vRr,FRr,$Y,TRr,MRr,ERr,D5,NMe,CRr,wRr,kY,ARr,yRr,LRr,G5,jMe,xRr,$Rr,SY,kRr,SRr,RRr,O5,DMe,PRr,BRr,RY,IRr,qRr,NRr,V5,GMe,jRr,DRr,PY,GRr,ORr,VRr,X5,OMe,XRr,zRr,BY,WRr,QRr,HRr,z5,VMe,URr,JRr,IY,YRr,KRr,ZRr,W5,XMe,ePr,oPr,qY,rPr,tPr,aPr,Q5,zMe,nPr,sPr,NY,lPr,iPr,dPr,H5,WMe,cPr,fPr,jY,mPr,gPr,hPr,U5,SNe,Wc,J5,QMe,j8,pPr,HMe,_Pr,RNe,ur,D8,uPr,Qc,bPr,DY,vPr,FPr,GY,TPr,MPr,EPr,G8,CPr,UMe,wPr,APr,yPr,Qt,O8,LPr,JMe,xPr,$Pr,Hc,kPr,YMe,SPr,RPr,OY,PPr,BPr,IPr,Y5,qPr,zr,V8,NPr,KMe,jPr,DPr,Fn,GPr,ZMe,OPr,VPr,e4e,XPr,zPr,o4e,WPr,QPr,HPr,$e,K5,r4e,UPr,JPr,VY,YPr,KPr,ZPr,Z5,t4e,eBr,oBr,XY,rBr,tBr,aBr,e3,a4e,nBr,sBr,zY,lBr,iBr,dBr,o3,n4e,cBr,fBr,WY,mBr,gBr,hBr,r3,s4e,pBr,_Br,QY,uBr,bBr,vBr,t3,l4e,FBr,TBr,HY,MBr,EBr,CBr,a3,i4e,wBr,ABr,UY,yBr,LBr,xBr,n3,d4e,$Br,kBr,JY,SBr,RBr,PBr,s3,c4e,BBr,IBr,YY,qBr,NBr,jBr,l3,f4e,DBr,GBr,KY,OBr,VBr,XBr,i3,PNe,Uc,d3,m4e,X8,zBr,g4e,WBr,BNe,br,z8,QBr,Jc,HBr,ZY,UBr,JBr,eK,YBr,KBr,ZBr,W8,eIr,h4e,oIr,rIr,tIr,Ht,Q8,aIr,p4e,nIr,sIr,Yc,lIr,_4e,iIr,dIr,oK,cIr,fIr,mIr,c3,gIr,Wr,H8,hIr,u4e,pIr,_Ir,Tn,uIr,b4e,bIr,vIr,v4e,FIr,TIr,F4e,MIr,EIr,CIr,De,f3,T4e,wIr,AIr,rK,yIr,LIr,xIr,m3,M4e,$Ir,kIr,tK,SIr,RIr,PIr,g3,E4e,BIr,IIr,aK,qIr,NIr,jIr,h3,C4e,DIr,GIr,nK,OIr,VIr,XIr,p3,w4e,zIr,WIr,sK,QIr,HIr,UIr,_3,A4e,JIr,YIr,lK,KIr,ZIr,eqr,u3,y4e,oqr,rqr,iK,tqr,aqr,nqr,b3,L4e,sqr,lqr,dK,iqr,dqr,cqr,v3,INe,Kc,F3,x4e,U8,fqr,$4e,mqr,qNe,vr,J8,gqr,Zc,hqr,cK,pqr,_qr,fK,uqr,bqr,vqr,Y8,Fqr,k4e,Tqr,Mqr,Eqr,Ut,K8,Cqr,S4e,wqr,Aqr,ef,yqr,R4e,Lqr,xqr,mK,$qr,kqr,Sqr,T3,Rqr,Qr,Z8,Pqr,P4e,Bqr,Iqr,Mn,qqr,B4e,Nqr,jqr,I4e,Dqr,Gqr,q4e,Oqr,Vqr,Xqr,Ge,M3,N4e,zqr,Wqr,gK,Qqr,Hqr,Uqr,E3,j4e,Jqr,Yqr,hK,Kqr,Zqr,eNr,C3,D4e,oNr,rNr,pK,tNr,aNr,nNr,w3,G4e,sNr,lNr,_K,iNr,dNr,cNr,A3,O4e,fNr,mNr,uK,gNr,hNr,pNr,y3,V4e,_Nr,uNr,bK,bNr,vNr,FNr,L3,X4e,TNr,MNr,vK,ENr,CNr,wNr,x3,z4e,ANr,yNr,FK,LNr,xNr,$Nr,$3,NNe,of,k3,W4e,ex,kNr,Q4e,SNr,jNe,Fr,ox,RNr,rf,PNr,TK,BNr,INr,MK,qNr,NNr,jNr,rx,DNr,H4e,GNr,ONr,VNr,Jt,tx,XNr,U4e,zNr,WNr,tf,QNr,J4e,HNr,UNr,EK,JNr,YNr,KNr,S3,ZNr,Hr,ax,ejr,Y4e,ojr,rjr,En,tjr,K4e,ajr,njr,Z4e,sjr,ljr,eEe,ijr,djr,cjr,oEe,R3,rEe,fjr,mjr,CK,gjr,hjr,pjr,P3,DNe,af,B3,tEe,nx,_jr,aEe,ujr,GNe,Tr,sx,bjr,nf,vjr,wK,Fjr,Tjr,AK,Mjr,Ejr,Cjr,lx,wjr,nEe,Ajr,yjr,Ljr,Yt,ix,xjr,sEe,$jr,kjr,sf,Sjr,lEe,Rjr,Pjr,yK,Bjr,Ijr,qjr,I3,Njr,Ur,dx,jjr,iEe,Djr,Gjr,Cn,Ojr,dEe,Vjr,Xjr,cEe,zjr,Wjr,fEe,Qjr,Hjr,Ujr,cx,q3,mEe,Jjr,Yjr,LK,Kjr,Zjr,eDr,N3,gEe,oDr,rDr,xK,tDr,aDr,nDr,j3,ONe,lf,D3,hEe,fx,sDr,pEe,lDr,VNe,Mr,mx,iDr,df,dDr,$K,cDr,fDr,kK,mDr,gDr,hDr,gx,pDr,_Ee,_Dr,uDr,bDr,Kt,hx,vDr,uEe,FDr,TDr,cf,MDr,bEe,EDr,CDr,SK,wDr,ADr,yDr,G3,LDr,Jr,px,xDr,vEe,$Dr,kDr,wn,SDr,FEe,RDr,PDr,TEe,BDr,IDr,MEe,qDr,NDr,jDr,EEe,O3,CEe,DDr,GDr,RK,ODr,VDr,XDr,V3,XNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),fA=new oe({}),mA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new zDr({props:{warning:!0,$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),gA=new oe({}),hA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/configuration_auto.py#L576"}}),uA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/configuration_auto.py#L599"}}),vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),bA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/configuration_auto.py#L722"}}),vA=new oe({}),FA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/tokenization_auto.py#L388"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17299/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/tokenization_auto.py#L402"}}),Zg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/tokenization_auto.py#L598"}}),wA=new oe({}),AA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17299/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),xh=new zDr({props:{$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),$h=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),kA=new oe({}),SA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/processing_auto.py#L87"}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/processing_auto.py#L101"}}),Uh=new zDr({props:{$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),Jh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/processing_auto.py#L254"}}),qA=new oe({}),NA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L727"}}),DA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),Zh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),z_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),OA=new oe({}),VA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L734"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),QA=new oe({}),HA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L749"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),M2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),KA=new oe({}),ZA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L756"}}),o6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),C2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),r6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),l1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),t6=new oe({}),a6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L763"}}),s6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),d1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),l6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),i6=new oe({}),d6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L772"}}),f6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),m6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),E9=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),g6=new oe({}),h6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L806"}}),_6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),w9=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),u6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),b6=new oe({}),v6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L813"}}),T6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),M6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),E6=new oe({}),C6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L799"}}),A6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),L6=new oe({}),x6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L781"}}),k6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),Jb=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),R6=new oe({}),P6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L788"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),Ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),N6=new oe({}),j6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L822"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),Xv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),V6=new oe({}),X6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L861"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),H6=new oe({}),U6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L868"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Z6=new oe({}),ey=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L891"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),ay=new oe({}),ny=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L875"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L882"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),py=new oe({}),_y=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L900"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L907"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L854"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L829"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),Iy=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L836"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),Gy=new oe({}),Oy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_auto.py#L845"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),Wy=new oe({}),Qy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),Yy=new oe({}),Ky=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),eL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),rL=new oe({}),tL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),nL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),lL=new oe({}),iL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),cL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),mL=new oe({}),gL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),uL=new oe({}),bL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),ML=new oe({}),EL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),yL=new oe({}),LL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),BL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),NL=new oe({}),jL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),VL=new oe({}),XL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),HL=new oe({}),UL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),ZL=new oe({}),e8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),a8=new oe({}),n8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),d8=new oe({}),c8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),m8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),h8=new oe({}),p8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),u8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),v8=new oe({}),F8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),M8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),C8=new oe({}),w8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),x8=new oe({}),$8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),S8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),P8=new oe({}),B8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),U8=new oe({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),fx=new oe({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17299/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17299/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17299/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),lA=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),iA=o("AutoConfig"),Ln=o(", "),xn=a("a"),dA=o("AutoModel"),hi=o(`, and
`),$n=a("a"),cA=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),L$=o("will create a model that is an instance of "),_i=a("a"),x$=o("BertModel"),$$=o("."),Eo=l(),wa=a("p"),k$=o("There is one class of "),uf=a("code"),S$=o("AutoModel"),KDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GIe=l(),ui=a("h2"),bf=a("a"),Aee=a("span"),F(fA.$$.fragment),ZDe=l(),yee=a("span"),eGe=o("Extending the Auto Classes"),OIe=l(),kn=a("p"),oGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Lee=a("code"),rGe=o("NewModel"),tGe=o(", make sure you have a "),xee=a("code"),aGe=o("NewModelConfig"),nGe=o(` then you can add those to the auto
classes like this:`),VIe=l(),F(mA.$$.fragment),XIe=l(),R$=a("p"),sGe=o("You will then be able to use the auto classes like you would usually do!"),zIe=l(),F(vf.$$.fragment),WIe=l(),bi=a("h2"),Ff=a("a"),$ee=a("span"),F(gA.$$.fragment),lGe=l(),kee=a("span"),iGe=o("AutoConfig"),QIe=l(),Co=a("div"),F(hA.$$.fragment),dGe=l(),pA=a("p"),cGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P$=a("a"),fGe=o("from_pretrained()"),mGe=o(" class method."),gGe=l(),_A=a("p"),hGe=o("This class cannot be instantiated directly using "),See=a("code"),pGe=o("__init__()"),_Ge=o(" (throws an error)."),uGe=l(),Er=a("div"),F(uA.$$.fragment),bGe=l(),Ree=a("p"),vGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),FGe=l(),vi=a("p"),TGe=o("The configuration class to instantiate is selected based on the "),Pee=a("code"),MGe=o("model_type"),EGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bee=a("code"),CGe=o("pretrained_model_name_or_path"),wGe=o(":"),AGe=l(),A=a("ul"),Tf=a("li"),Iee=a("strong"),yGe=o("albert"),LGe=o(" \u2014 "),B$=a("a"),xGe=o("AlbertConfig"),$Ge=o(" (ALBERT model)"),kGe=l(),Mf=a("li"),qee=a("strong"),SGe=o("bart"),RGe=o(" \u2014 "),I$=a("a"),PGe=o("BartConfig"),BGe=o(" (BART model)"),IGe=l(),Ef=a("li"),Nee=a("strong"),qGe=o("beit"),NGe=o(" \u2014 "),q$=a("a"),jGe=o("BeitConfig"),DGe=o(" (BEiT model)"),GGe=l(),Cf=a("li"),jee=a("strong"),OGe=o("bert"),VGe=o(" \u2014 "),N$=a("a"),XGe=o("BertConfig"),zGe=o(" (BERT model)"),WGe=l(),wf=a("li"),Dee=a("strong"),QGe=o("bert-generation"),HGe=o(" \u2014 "),j$=a("a"),UGe=o("BertGenerationConfig"),JGe=o(" (Bert Generation model)"),YGe=l(),Af=a("li"),Gee=a("strong"),KGe=o("big_bird"),ZGe=o(" \u2014 "),D$=a("a"),eOe=o("BigBirdConfig"),oOe=o(" (BigBird model)"),rOe=l(),yf=a("li"),Oee=a("strong"),tOe=o("bigbird_pegasus"),aOe=o(" \u2014 "),G$=a("a"),nOe=o("BigBirdPegasusConfig"),sOe=o(" (BigBirdPegasus model)"),lOe=l(),Lf=a("li"),Vee=a("strong"),iOe=o("blenderbot"),dOe=o(" \u2014 "),O$=a("a"),cOe=o("BlenderbotConfig"),fOe=o(" (Blenderbot model)"),mOe=l(),xf=a("li"),Xee=a("strong"),gOe=o("blenderbot-small"),hOe=o(" \u2014 "),V$=a("a"),pOe=o("BlenderbotSmallConfig"),_Oe=o(" (BlenderbotSmall model)"),uOe=l(),$f=a("li"),zee=a("strong"),bOe=o("camembert"),vOe=o(" \u2014 "),X$=a("a"),FOe=o("CamembertConfig"),TOe=o(" (CamemBERT model)"),MOe=l(),kf=a("li"),Wee=a("strong"),EOe=o("canine"),COe=o(" \u2014 "),z$=a("a"),wOe=o("CanineConfig"),AOe=o(" (Canine model)"),yOe=l(),Sf=a("li"),Qee=a("strong"),LOe=o("clip"),xOe=o(" \u2014 "),W$=a("a"),$Oe=o("CLIPConfig"),kOe=o(" (CLIP model)"),SOe=l(),Rf=a("li"),Hee=a("strong"),ROe=o("convbert"),POe=o(" \u2014 "),Q$=a("a"),BOe=o("ConvBertConfig"),IOe=o(" (ConvBERT model)"),qOe=l(),Pf=a("li"),Uee=a("strong"),NOe=o("convnext"),jOe=o(" \u2014 "),H$=a("a"),DOe=o("ConvNextConfig"),GOe=o(" (ConvNext model)"),OOe=l(),Bf=a("li"),Jee=a("strong"),VOe=o("ctrl"),XOe=o(" \u2014 "),U$=a("a"),zOe=o("CTRLConfig"),WOe=o(" (CTRL model)"),QOe=l(),If=a("li"),Yee=a("strong"),HOe=o("cvt"),UOe=o(" \u2014 "),J$=a("a"),JOe=o("CvtConfig"),YOe=o(" (CvT model)"),KOe=l(),qf=a("li"),Kee=a("strong"),ZOe=o("data2vec-audio"),eVe=o(" \u2014 "),Y$=a("a"),oVe=o("Data2VecAudioConfig"),rVe=o(" (Data2VecAudio model)"),tVe=l(),Nf=a("li"),Zee=a("strong"),aVe=o("data2vec-text"),nVe=o(" \u2014 "),K$=a("a"),sVe=o("Data2VecTextConfig"),lVe=o(" (Data2VecText model)"),iVe=l(),jf=a("li"),eoe=a("strong"),dVe=o("data2vec-vision"),cVe=o(" \u2014 "),Z$=a("a"),fVe=o("Data2VecVisionConfig"),mVe=o(" (Data2VecVision model)"),gVe=l(),Df=a("li"),ooe=a("strong"),hVe=o("deberta"),pVe=o(" \u2014 "),ek=a("a"),_Ve=o("DebertaConfig"),uVe=o(" (DeBERTa model)"),bVe=l(),Gf=a("li"),roe=a("strong"),vVe=o("deberta-v2"),FVe=o(" \u2014 "),ok=a("a"),TVe=o("DebertaV2Config"),MVe=o(" (DeBERTa-v2 model)"),EVe=l(),Of=a("li"),toe=a("strong"),CVe=o("decision_transformer"),wVe=o(" \u2014 "),rk=a("a"),AVe=o("DecisionTransformerConfig"),yVe=o(" (Decision Transformer model)"),LVe=l(),Vf=a("li"),aoe=a("strong"),xVe=o("deit"),$Ve=o(" \u2014 "),tk=a("a"),kVe=o("DeiTConfig"),SVe=o(" (DeiT model)"),RVe=l(),Xf=a("li"),noe=a("strong"),PVe=o("detr"),BVe=o(" \u2014 "),ak=a("a"),IVe=o("DetrConfig"),qVe=o(" (DETR model)"),NVe=l(),zf=a("li"),soe=a("strong"),jVe=o("distilbert"),DVe=o(" \u2014 "),nk=a("a"),GVe=o("DistilBertConfig"),OVe=o(" (DistilBERT model)"),VVe=l(),Wf=a("li"),loe=a("strong"),XVe=o("dpr"),zVe=o(" \u2014 "),sk=a("a"),WVe=o("DPRConfig"),QVe=o(" (DPR model)"),HVe=l(),Qf=a("li"),ioe=a("strong"),UVe=o("dpt"),JVe=o(" \u2014 "),lk=a("a"),YVe=o("DPTConfig"),KVe=o(" (DPT model)"),ZVe=l(),Hf=a("li"),doe=a("strong"),eXe=o("electra"),oXe=o(" \u2014 "),ik=a("a"),rXe=o("ElectraConfig"),tXe=o(" (ELECTRA model)"),aXe=l(),Uf=a("li"),coe=a("strong"),nXe=o("encoder-decoder"),sXe=o(" \u2014 "),dk=a("a"),lXe=o("EncoderDecoderConfig"),iXe=o(" (Encoder decoder model)"),dXe=l(),Jf=a("li"),foe=a("strong"),cXe=o("flaubert"),fXe=o(" \u2014 "),ck=a("a"),mXe=o("FlaubertConfig"),gXe=o(" (FlauBERT model)"),hXe=l(),Yf=a("li"),moe=a("strong"),pXe=o("flava"),_Xe=o(" \u2014 "),fk=a("a"),uXe=o("FlavaConfig"),bXe=o(" (Flava model)"),vXe=l(),Kf=a("li"),goe=a("strong"),FXe=o("fnet"),TXe=o(" \u2014 "),mk=a("a"),MXe=o("FNetConfig"),EXe=o(" (FNet model)"),CXe=l(),Zf=a("li"),hoe=a("strong"),wXe=o("fsmt"),AXe=o(" \u2014 "),gk=a("a"),yXe=o("FSMTConfig"),LXe=o(" (FairSeq Machine-Translation model)"),xXe=l(),em=a("li"),poe=a("strong"),$Xe=o("funnel"),kXe=o(" \u2014 "),hk=a("a"),SXe=o("FunnelConfig"),RXe=o(" (Funnel Transformer model)"),PXe=l(),om=a("li"),_oe=a("strong"),BXe=o("glpn"),IXe=o(" \u2014 "),pk=a("a"),qXe=o("GLPNConfig"),NXe=o(" (GLPN model)"),jXe=l(),rm=a("li"),uoe=a("strong"),DXe=o("gpt2"),GXe=o(" \u2014 "),_k=a("a"),OXe=o("GPT2Config"),VXe=o(" (OpenAI GPT-2 model)"),XXe=l(),tm=a("li"),boe=a("strong"),zXe=o("gpt_neo"),WXe=o(" \u2014 "),uk=a("a"),QXe=o("GPTNeoConfig"),HXe=o(" (GPT Neo model)"),UXe=l(),am=a("li"),voe=a("strong"),JXe=o("gptj"),YXe=o(" \u2014 "),bk=a("a"),KXe=o("GPTJConfig"),ZXe=o(" (GPT-J model)"),eze=l(),nm=a("li"),Foe=a("strong"),oze=o("hubert"),rze=o(" \u2014 "),vk=a("a"),tze=o("HubertConfig"),aze=o(" (Hubert model)"),nze=l(),sm=a("li"),Toe=a("strong"),sze=o("ibert"),lze=o(" \u2014 "),Fk=a("a"),ize=o("IBertConfig"),dze=o(" (I-BERT model)"),cze=l(),lm=a("li"),Moe=a("strong"),fze=o("imagegpt"),mze=o(" \u2014 "),Tk=a("a"),gze=o("ImageGPTConfig"),hze=o(" (ImageGPT model)"),pze=l(),im=a("li"),Eoe=a("strong"),_ze=o("layoutlm"),uze=o(" \u2014 "),Mk=a("a"),bze=o("LayoutLMConfig"),vze=o(" (LayoutLM model)"),Fze=l(),dm=a("li"),Coe=a("strong"),Tze=o("layoutlmv2"),Mze=o(" \u2014 "),Ek=a("a"),Eze=o("LayoutLMv2Config"),Cze=o(" (LayoutLMv2 model)"),wze=l(),cm=a("li"),woe=a("strong"),Aze=o("led"),yze=o(" \u2014 "),Ck=a("a"),Lze=o("LEDConfig"),xze=o(" (LED model)"),$ze=l(),fm=a("li"),Aoe=a("strong"),kze=o("longformer"),Sze=o(" \u2014 "),wk=a("a"),Rze=o("LongformerConfig"),Pze=o(" (Longformer model)"),Bze=l(),mm=a("li"),yoe=a("strong"),Ize=o("luke"),qze=o(" \u2014 "),Ak=a("a"),Nze=o("LukeConfig"),jze=o(" (LUKE model)"),Dze=l(),gm=a("li"),Loe=a("strong"),Gze=o("lxmert"),Oze=o(" \u2014 "),yk=a("a"),Vze=o("LxmertConfig"),Xze=o(" (LXMERT model)"),zze=l(),hm=a("li"),xoe=a("strong"),Wze=o("m2m_100"),Qze=o(" \u2014 "),Lk=a("a"),Hze=o("M2M100Config"),Uze=o(" (M2M100 model)"),Jze=l(),pm=a("li"),$oe=a("strong"),Yze=o("marian"),Kze=o(" \u2014 "),xk=a("a"),Zze=o("MarianConfig"),eWe=o(" (Marian model)"),oWe=l(),_m=a("li"),koe=a("strong"),rWe=o("maskformer"),tWe=o(" \u2014 "),$k=a("a"),aWe=o("MaskFormerConfig"),nWe=o(" (MaskFormer model)"),sWe=l(),um=a("li"),Soe=a("strong"),lWe=o("mbart"),iWe=o(" \u2014 "),kk=a("a"),dWe=o("MBartConfig"),cWe=o(" (mBART model)"),fWe=l(),bm=a("li"),Roe=a("strong"),mWe=o("megatron-bert"),gWe=o(" \u2014 "),Sk=a("a"),hWe=o("MegatronBertConfig"),pWe=o(" (MegatronBert model)"),_We=l(),vm=a("li"),Poe=a("strong"),uWe=o("mobilebert"),bWe=o(" \u2014 "),Rk=a("a"),vWe=o("MobileBertConfig"),FWe=o(" (MobileBERT model)"),TWe=l(),Fm=a("li"),Boe=a("strong"),MWe=o("mpnet"),EWe=o(" \u2014 "),Pk=a("a"),CWe=o("MPNetConfig"),wWe=o(" (MPNet model)"),AWe=l(),Tm=a("li"),Ioe=a("strong"),yWe=o("mt5"),LWe=o(" \u2014 "),Bk=a("a"),xWe=o("MT5Config"),$We=o(" (mT5 model)"),kWe=l(),Mm=a("li"),qoe=a("strong"),SWe=o("nystromformer"),RWe=o(" \u2014 "),Ik=a("a"),PWe=o("NystromformerConfig"),BWe=o(" (Nystromformer model)"),IWe=l(),Em=a("li"),Noe=a("strong"),qWe=o("openai-gpt"),NWe=o(" \u2014 "),qk=a("a"),jWe=o("OpenAIGPTConfig"),DWe=o(" (OpenAI GPT model)"),GWe=l(),Cm=a("li"),joe=a("strong"),OWe=o("opt"),VWe=o(" \u2014 "),Nk=a("a"),XWe=o("OPTConfig"),zWe=o(" (OPT model)"),WWe=l(),wm=a("li"),Doe=a("strong"),QWe=o("pegasus"),HWe=o(" \u2014 "),jk=a("a"),UWe=o("PegasusConfig"),JWe=o(" (Pegasus model)"),YWe=l(),Am=a("li"),Goe=a("strong"),KWe=o("perceiver"),ZWe=o(" \u2014 "),Dk=a("a"),eQe=o("PerceiverConfig"),oQe=o(" (Perceiver model)"),rQe=l(),ym=a("li"),Ooe=a("strong"),tQe=o("plbart"),aQe=o(" \u2014 "),Gk=a("a"),nQe=o("PLBartConfig"),sQe=o(" (PLBart model)"),lQe=l(),Lm=a("li"),Voe=a("strong"),iQe=o("poolformer"),dQe=o(" \u2014 "),Ok=a("a"),cQe=o("PoolFormerConfig"),fQe=o(" (PoolFormer model)"),mQe=l(),xm=a("li"),Xoe=a("strong"),gQe=o("prophetnet"),hQe=o(" \u2014 "),Vk=a("a"),pQe=o("ProphetNetConfig"),_Qe=o(" (ProphetNet model)"),uQe=l(),$m=a("li"),zoe=a("strong"),bQe=o("qdqbert"),vQe=o(" \u2014 "),Xk=a("a"),FQe=o("QDQBertConfig"),TQe=o(" (QDQBert model)"),MQe=l(),km=a("li"),Woe=a("strong"),EQe=o("rag"),CQe=o(" \u2014 "),zk=a("a"),wQe=o("RagConfig"),AQe=o(" (RAG model)"),yQe=l(),Sm=a("li"),Qoe=a("strong"),LQe=o("realm"),xQe=o(" \u2014 "),Wk=a("a"),$Qe=o("RealmConfig"),kQe=o(" (Realm model)"),SQe=l(),Rm=a("li"),Hoe=a("strong"),RQe=o("reformer"),PQe=o(" \u2014 "),Qk=a("a"),BQe=o("ReformerConfig"),IQe=o(" (Reformer model)"),qQe=l(),Pm=a("li"),Uoe=a("strong"),NQe=o("regnet"),jQe=o(" \u2014 "),Hk=a("a"),DQe=o("RegNetConfig"),GQe=o(" (RegNet model)"),OQe=l(),Bm=a("li"),Joe=a("strong"),VQe=o("rembert"),XQe=o(" \u2014 "),Uk=a("a"),zQe=o("RemBertConfig"),WQe=o(" (RemBERT model)"),QQe=l(),Im=a("li"),Yoe=a("strong"),HQe=o("resnet"),UQe=o(" \u2014 "),Jk=a("a"),JQe=o("ResNetConfig"),YQe=o(" (ResNet model)"),KQe=l(),qm=a("li"),Koe=a("strong"),ZQe=o("retribert"),eHe=o(" \u2014 "),Yk=a("a"),oHe=o("RetriBertConfig"),rHe=o(" (RetriBERT model)"),tHe=l(),Nm=a("li"),Zoe=a("strong"),aHe=o("roberta"),nHe=o(" \u2014 "),Kk=a("a"),sHe=o("RobertaConfig"),lHe=o(" (RoBERTa model)"),iHe=l(),jm=a("li"),ere=a("strong"),dHe=o("roformer"),cHe=o(" \u2014 "),Zk=a("a"),fHe=o("RoFormerConfig"),mHe=o(" (RoFormer model)"),gHe=l(),Dm=a("li"),ore=a("strong"),hHe=o("segformer"),pHe=o(" \u2014 "),eS=a("a"),_He=o("SegformerConfig"),uHe=o(" (SegFormer model)"),bHe=l(),Gm=a("li"),rre=a("strong"),vHe=o("sew"),FHe=o(" \u2014 "),oS=a("a"),THe=o("SEWConfig"),MHe=o(" (SEW model)"),EHe=l(),Om=a("li"),tre=a("strong"),CHe=o("sew-d"),wHe=o(" \u2014 "),rS=a("a"),AHe=o("SEWDConfig"),yHe=o(" (SEW-D model)"),LHe=l(),Vm=a("li"),are=a("strong"),xHe=o("speech-encoder-decoder"),$He=o(" \u2014 "),tS=a("a"),kHe=o("SpeechEncoderDecoderConfig"),SHe=o(" (Speech Encoder decoder model)"),RHe=l(),Xm=a("li"),nre=a("strong"),PHe=o("speech_to_text"),BHe=o(" \u2014 "),aS=a("a"),IHe=o("Speech2TextConfig"),qHe=o(" (Speech2Text model)"),NHe=l(),zm=a("li"),sre=a("strong"),jHe=o("speech_to_text_2"),DHe=o(" \u2014 "),nS=a("a"),GHe=o("Speech2Text2Config"),OHe=o(" (Speech2Text2 model)"),VHe=l(),Wm=a("li"),lre=a("strong"),XHe=o("splinter"),zHe=o(" \u2014 "),sS=a("a"),WHe=o("SplinterConfig"),QHe=o(" (Splinter model)"),HHe=l(),Qm=a("li"),ire=a("strong"),UHe=o("squeezebert"),JHe=o(" \u2014 "),lS=a("a"),YHe=o("SqueezeBertConfig"),KHe=o(" (SqueezeBERT model)"),ZHe=l(),Hm=a("li"),dre=a("strong"),eUe=o("swin"),oUe=o(" \u2014 "),iS=a("a"),rUe=o("SwinConfig"),tUe=o(" (Swin model)"),aUe=l(),Um=a("li"),cre=a("strong"),nUe=o("t5"),sUe=o(" \u2014 "),dS=a("a"),lUe=o("T5Config"),iUe=o(" (T5 model)"),dUe=l(),Jm=a("li"),fre=a("strong"),cUe=o("tapas"),fUe=o(" \u2014 "),cS=a("a"),mUe=o("TapasConfig"),gUe=o(" (TAPAS model)"),hUe=l(),Ym=a("li"),mre=a("strong"),pUe=o("transfo-xl"),_Ue=o(" \u2014 "),fS=a("a"),uUe=o("TransfoXLConfig"),bUe=o(" (Transformer-XL model)"),vUe=l(),Km=a("li"),gre=a("strong"),FUe=o("trocr"),TUe=o(" \u2014 "),mS=a("a"),MUe=o("TrOCRConfig"),EUe=o(" (TrOCR model)"),CUe=l(),Zm=a("li"),hre=a("strong"),wUe=o("unispeech"),AUe=o(" \u2014 "),gS=a("a"),yUe=o("UniSpeechConfig"),LUe=o(" (UniSpeech model)"),xUe=l(),eg=a("li"),pre=a("strong"),$Ue=o("unispeech-sat"),kUe=o(" \u2014 "),hS=a("a"),SUe=o("UniSpeechSatConfig"),RUe=o(" (UniSpeechSat model)"),PUe=l(),og=a("li"),_re=a("strong"),BUe=o("van"),IUe=o(" \u2014 "),pS=a("a"),qUe=o("VanConfig"),NUe=o(" (VAN model)"),jUe=l(),rg=a("li"),ure=a("strong"),DUe=o("vilt"),GUe=o(" \u2014 "),_S=a("a"),OUe=o("ViltConfig"),VUe=o(" (ViLT model)"),XUe=l(),tg=a("li"),bre=a("strong"),zUe=o("vision-encoder-decoder"),WUe=o(" \u2014 "),uS=a("a"),QUe=o("VisionEncoderDecoderConfig"),HUe=o(" (Vision Encoder decoder model)"),UUe=l(),ag=a("li"),vre=a("strong"),JUe=o("vision-text-dual-encoder"),YUe=o(" \u2014 "),bS=a("a"),KUe=o("VisionTextDualEncoderConfig"),ZUe=o(" (VisionTextDualEncoder model)"),eJe=l(),ng=a("li"),Fre=a("strong"),oJe=o("visual_bert"),rJe=o(" \u2014 "),vS=a("a"),tJe=o("VisualBertConfig"),aJe=o(" (VisualBert model)"),nJe=l(),sg=a("li"),Tre=a("strong"),sJe=o("vit"),lJe=o(" \u2014 "),FS=a("a"),iJe=o("ViTConfig"),dJe=o(" (ViT model)"),cJe=l(),lg=a("li"),Mre=a("strong"),fJe=o("vit_mae"),mJe=o(" \u2014 "),TS=a("a"),gJe=o("ViTMAEConfig"),hJe=o(" (ViTMAE model)"),pJe=l(),ig=a("li"),Ere=a("strong"),_Je=o("wav2vec2"),uJe=o(" \u2014 "),MS=a("a"),bJe=o("Wav2Vec2Config"),vJe=o(" (Wav2Vec2 model)"),FJe=l(),dg=a("li"),Cre=a("strong"),TJe=o("wav2vec2-conformer"),MJe=o(" \u2014 "),ES=a("a"),EJe=o("Wav2Vec2ConformerConfig"),CJe=o(" (Wav2Vec2-Conformer model)"),wJe=l(),cg=a("li"),wre=a("strong"),AJe=o("wavlm"),yJe=o(" \u2014 "),CS=a("a"),LJe=o("WavLMConfig"),xJe=o(" (WavLM model)"),$Je=l(),fg=a("li"),Are=a("strong"),kJe=o("xglm"),SJe=o(" \u2014 "),wS=a("a"),RJe=o("XGLMConfig"),PJe=o(" (XGLM model)"),BJe=l(),mg=a("li"),yre=a("strong"),IJe=o("xlm"),qJe=o(" \u2014 "),AS=a("a"),NJe=o("XLMConfig"),jJe=o(" (XLM model)"),DJe=l(),gg=a("li"),Lre=a("strong"),GJe=o("xlm-prophetnet"),OJe=o(" \u2014 "),yS=a("a"),VJe=o("XLMProphetNetConfig"),XJe=o(" (XLMProphetNet model)"),zJe=l(),hg=a("li"),xre=a("strong"),WJe=o("xlm-roberta"),QJe=o(" \u2014 "),LS=a("a"),HJe=o("XLMRobertaConfig"),UJe=o(" (XLM-RoBERTa model)"),JJe=l(),pg=a("li"),$re=a("strong"),YJe=o("xlm-roberta-xl"),KJe=o(" \u2014 "),xS=a("a"),ZJe=o("XLMRobertaXLConfig"),eYe=o(" (XLM-RoBERTa-XL model)"),oYe=l(),_g=a("li"),kre=a("strong"),rYe=o("xlnet"),tYe=o(" \u2014 "),$S=a("a"),aYe=o("XLNetConfig"),nYe=o(" (XLNet model)"),sYe=l(),ug=a("li"),Sre=a("strong"),lYe=o("yolos"),iYe=o(" \u2014 "),kS=a("a"),dYe=o("YolosConfig"),cYe=o(" (YOLOS model)"),fYe=l(),bg=a("li"),Rre=a("strong"),mYe=o("yoso"),gYe=o(" \u2014 "),SS=a("a"),hYe=o("YosoConfig"),pYe=o(" (YOSO model)"),_Ye=l(),F(vg.$$.fragment),uYe=l(),Fg=a("div"),F(bA.$$.fragment),bYe=l(),Pre=a("p"),vYe=o("Register a new configuration for this class."),HIe=l(),Fi=a("h2"),Tg=a("a"),Bre=a("span"),F(vA.$$.fragment),FYe=l(),Ire=a("span"),TYe=o("AutoTokenizer"),UIe=l(),wo=a("div"),F(FA.$$.fragment),MYe=l(),TA=a("p"),EYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RS=a("a"),CYe=o("AutoTokenizer.from_pretrained()"),wYe=o(" class method."),AYe=l(),MA=a("p"),yYe=o("This class cannot be instantiated directly using "),qre=a("code"),LYe=o("__init__()"),xYe=o(" (throws an error)."),$Ye=l(),Cr=a("div"),F(EA.$$.fragment),kYe=l(),Nre=a("p"),SYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),RYe=l(),Aa=a("p"),PYe=o("The tokenizer class to instantiate is selected based on the "),jre=a("code"),BYe=o("model_type"),IYe=o(` property of the config object (either
passed as an argument or loaded from `),Dre=a("code"),qYe=o("pretrained_model_name_or_path"),NYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gre=a("code"),jYe=o("pretrained_model_name_or_path"),DYe=o(":"),GYe=l(),k=a("ul"),Sn=a("li"),Ore=a("strong"),OYe=o("albert"),VYe=o(" \u2014 "),PS=a("a"),XYe=o("AlbertTokenizer"),zYe=o(" or "),BS=a("a"),WYe=o("AlbertTokenizerFast"),QYe=o(" (ALBERT model)"),HYe=l(),Rn=a("li"),Vre=a("strong"),UYe=o("bart"),JYe=o(" \u2014 "),IS=a("a"),YYe=o("BartTokenizer"),KYe=o(" or "),qS=a("a"),ZYe=o("BartTokenizerFast"),eKe=o(" (BART model)"),oKe=l(),Pn=a("li"),Xre=a("strong"),rKe=o("barthez"),tKe=o(" \u2014 "),NS=a("a"),aKe=o("BarthezTokenizer"),nKe=o(" or "),jS=a("a"),sKe=o("BarthezTokenizerFast"),lKe=o(" (BARThez model)"),iKe=l(),Mg=a("li"),zre=a("strong"),dKe=o("bartpho"),cKe=o(" \u2014 "),DS=a("a"),fKe=o("BartphoTokenizer"),mKe=o(" (BARTpho model)"),gKe=l(),Bn=a("li"),Wre=a("strong"),hKe=o("bert"),pKe=o(" \u2014 "),GS=a("a"),_Ke=o("BertTokenizer"),uKe=o(" or "),OS=a("a"),bKe=o("BertTokenizerFast"),vKe=o(" (BERT model)"),FKe=l(),Eg=a("li"),Qre=a("strong"),TKe=o("bert-generation"),MKe=o(" \u2014 "),VS=a("a"),EKe=o("BertGenerationTokenizer"),CKe=o(" (Bert Generation model)"),wKe=l(),Cg=a("li"),Hre=a("strong"),AKe=o("bert-japanese"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("BertJapaneseTokenizer"),xKe=o(" (BertJapanese model)"),$Ke=l(),wg=a("li"),Ure=a("strong"),kKe=o("bertweet"),SKe=o(" \u2014 "),zS=a("a"),RKe=o("BertweetTokenizer"),PKe=o(" (Bertweet model)"),BKe=l(),In=a("li"),Jre=a("strong"),IKe=o("big_bird"),qKe=o(" \u2014 "),WS=a("a"),NKe=o("BigBirdTokenizer"),jKe=o(" or "),QS=a("a"),DKe=o("BigBirdTokenizerFast"),GKe=o(" (BigBird model)"),OKe=l(),qn=a("li"),Yre=a("strong"),VKe=o("bigbird_pegasus"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("PegasusTokenizer"),WKe=o(" or "),US=a("a"),QKe=o("PegasusTokenizerFast"),HKe=o(" (BigBirdPegasus model)"),UKe=l(),Nn=a("li"),Kre=a("strong"),JKe=o("blenderbot"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("BlenderbotTokenizer"),ZKe=o(" or "),YS=a("a"),eZe=o("BlenderbotTokenizerFast"),oZe=o(" (Blenderbot model)"),rZe=l(),Ag=a("li"),Zre=a("strong"),tZe=o("blenderbot-small"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("BlenderbotSmallTokenizer"),sZe=o(" (BlenderbotSmall model)"),lZe=l(),yg=a("li"),ete=a("strong"),iZe=o("byt5"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("ByT5Tokenizer"),fZe=o(" (ByT5 model)"),mZe=l(),jn=a("li"),ote=a("strong"),gZe=o("camembert"),hZe=o(" \u2014 "),eR=a("a"),pZe=o("CamembertTokenizer"),_Ze=o(" or "),oR=a("a"),uZe=o("CamembertTokenizerFast"),bZe=o(" (CamemBERT model)"),vZe=l(),Lg=a("li"),rte=a("strong"),FZe=o("canine"),TZe=o(" \u2014 "),rR=a("a"),MZe=o("CanineTokenizer"),EZe=o(" (Canine model)"),CZe=l(),Dn=a("li"),tte=a("strong"),wZe=o("clip"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("CLIPTokenizer"),LZe=o(" or "),aR=a("a"),xZe=o("CLIPTokenizerFast"),$Ze=o(" (CLIP model)"),kZe=l(),Gn=a("li"),ate=a("strong"),SZe=o("convbert"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("ConvBertTokenizer"),BZe=o(" or "),sR=a("a"),IZe=o("ConvBertTokenizerFast"),qZe=o(" (ConvBERT model)"),NZe=l(),On=a("li"),nte=a("strong"),jZe=o("cpm"),DZe=o(" \u2014 "),lR=a("a"),GZe=o("CpmTokenizer"),OZe=o(" or "),iR=a("a"),VZe=o("CpmTokenizerFast"),XZe=o(" (CPM model)"),zZe=l(),xg=a("li"),ste=a("strong"),WZe=o("ctrl"),QZe=o(" \u2014 "),dR=a("a"),HZe=o("CTRLTokenizer"),UZe=o(" (CTRL model)"),JZe=l(),Vn=a("li"),lte=a("strong"),YZe=o("data2vec-text"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("RobertaTokenizer"),eeo=o(" or "),fR=a("a"),oeo=o("RobertaTokenizerFast"),reo=o(" (Data2VecText model)"),teo=l(),Xn=a("li"),ite=a("strong"),aeo=o("deberta"),neo=o(" \u2014 "),mR=a("a"),seo=o("DebertaTokenizer"),leo=o(" or "),gR=a("a"),ieo=o("DebertaTokenizerFast"),deo=o(" (DeBERTa model)"),ceo=l(),zn=a("li"),dte=a("strong"),feo=o("deberta-v2"),meo=o(" \u2014 "),hR=a("a"),geo=o("DebertaV2Tokenizer"),heo=o(" or "),pR=a("a"),peo=o("DebertaV2TokenizerFast"),_eo=o(" (DeBERTa-v2 model)"),ueo=l(),Wn=a("li"),cte=a("strong"),beo=o("distilbert"),veo=o(" \u2014 "),_R=a("a"),Feo=o("DistilBertTokenizer"),Teo=o(" or "),uR=a("a"),Meo=o("DistilBertTokenizerFast"),Eeo=o(" (DistilBERT model)"),Ceo=l(),Qn=a("li"),fte=a("strong"),weo=o("dpr"),Aeo=o(" \u2014 "),bR=a("a"),yeo=o("DPRQuestionEncoderTokenizer"),Leo=o(" or "),vR=a("a"),xeo=o("DPRQuestionEncoderTokenizerFast"),$eo=o(" (DPR model)"),keo=l(),Hn=a("li"),mte=a("strong"),Seo=o("electra"),Reo=o(" \u2014 "),FR=a("a"),Peo=o("ElectraTokenizer"),Beo=o(" or "),TR=a("a"),Ieo=o("ElectraTokenizerFast"),qeo=o(" (ELECTRA model)"),Neo=l(),$g=a("li"),gte=a("strong"),jeo=o("flaubert"),Deo=o(" \u2014 "),MR=a("a"),Geo=o("FlaubertTokenizer"),Oeo=o(" (FlauBERT model)"),Veo=l(),Un=a("li"),hte=a("strong"),Xeo=o("fnet"),zeo=o(" \u2014 "),ER=a("a"),Weo=o("FNetTokenizer"),Qeo=o(" or "),CR=a("a"),Heo=o("FNetTokenizerFast"),Ueo=o(" (FNet model)"),Jeo=l(),kg=a("li"),pte=a("strong"),Yeo=o("fsmt"),Keo=o(" \u2014 "),wR=a("a"),Zeo=o("FSMTTokenizer"),eoo=o(" (FairSeq Machine-Translation model)"),ooo=l(),Jn=a("li"),_te=a("strong"),roo=o("funnel"),too=o(" \u2014 "),AR=a("a"),aoo=o("FunnelTokenizer"),noo=o(" or "),yR=a("a"),soo=o("FunnelTokenizerFast"),loo=o(" (Funnel Transformer model)"),ioo=l(),Yn=a("li"),ute=a("strong"),doo=o("gpt2"),coo=o(" \u2014 "),LR=a("a"),foo=o("GPT2Tokenizer"),moo=o(" or "),xR=a("a"),goo=o("GPT2TokenizerFast"),hoo=o(" (OpenAI GPT-2 model)"),poo=l(),Kn=a("li"),bte=a("strong"),_oo=o("gpt_neo"),uoo=o(" \u2014 "),$R=a("a"),boo=o("GPT2Tokenizer"),voo=o(" or "),kR=a("a"),Foo=o("GPT2TokenizerFast"),Too=o(" (GPT Neo model)"),Moo=l(),Zn=a("li"),vte=a("strong"),Eoo=o("gptj"),Coo=o(" \u2014 "),SR=a("a"),woo=o("GPT2Tokenizer"),Aoo=o(" or "),RR=a("a"),yoo=o("GPT2TokenizerFast"),Loo=o(" (GPT-J model)"),xoo=l(),es=a("li"),Fte=a("strong"),$oo=o("herbert"),koo=o(" \u2014 "),PR=a("a"),Soo=o("HerbertTokenizer"),Roo=o(" or "),BR=a("a"),Poo=o("HerbertTokenizerFast"),Boo=o(" (HerBERT model)"),Ioo=l(),Sg=a("li"),Tte=a("strong"),qoo=o("hubert"),Noo=o(" \u2014 "),IR=a("a"),joo=o("Wav2Vec2CTCTokenizer"),Doo=o(" (Hubert model)"),Goo=l(),os=a("li"),Mte=a("strong"),Ooo=o("ibert"),Voo=o(" \u2014 "),qR=a("a"),Xoo=o("RobertaTokenizer"),zoo=o(" or "),NR=a("a"),Woo=o("RobertaTokenizerFast"),Qoo=o(" (I-BERT model)"),Hoo=l(),rs=a("li"),Ete=a("strong"),Uoo=o("layoutlm"),Joo=o(" \u2014 "),jR=a("a"),Yoo=o("LayoutLMTokenizer"),Koo=o(" or "),DR=a("a"),Zoo=o("LayoutLMTokenizerFast"),ero=o(" (LayoutLM model)"),oro=l(),ts=a("li"),Cte=a("strong"),rro=o("layoutlmv2"),tro=o(" \u2014 "),GR=a("a"),aro=o("LayoutLMv2Tokenizer"),nro=o(" or "),OR=a("a"),sro=o("LayoutLMv2TokenizerFast"),lro=o(" (LayoutLMv2 model)"),iro=l(),as=a("li"),wte=a("strong"),dro=o("layoutxlm"),cro=o(" \u2014 "),VR=a("a"),fro=o("LayoutXLMTokenizer"),mro=o(" or "),XR=a("a"),gro=o("LayoutXLMTokenizerFast"),hro=o(" (LayoutXLM model)"),pro=l(),ns=a("li"),Ate=a("strong"),_ro=o("led"),uro=o(" \u2014 "),zR=a("a"),bro=o("LEDTokenizer"),vro=o(" or "),WR=a("a"),Fro=o("LEDTokenizerFast"),Tro=o(" (LED model)"),Mro=l(),ss=a("li"),yte=a("strong"),Ero=o("longformer"),Cro=o(" \u2014 "),QR=a("a"),wro=o("LongformerTokenizer"),Aro=o(" or "),HR=a("a"),yro=o("LongformerTokenizerFast"),Lro=o(" (Longformer model)"),xro=l(),Rg=a("li"),Lte=a("strong"),$ro=o("luke"),kro=o(" \u2014 "),UR=a("a"),Sro=o("LukeTokenizer"),Rro=o(" (LUKE model)"),Pro=l(),ls=a("li"),xte=a("strong"),Bro=o("lxmert"),Iro=o(" \u2014 "),JR=a("a"),qro=o("LxmertTokenizer"),Nro=o(" or "),YR=a("a"),jro=o("LxmertTokenizerFast"),Dro=o(" (LXMERT model)"),Gro=l(),Pg=a("li"),$te=a("strong"),Oro=o("m2m_100"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("M2M100Tokenizer"),zro=o(" (M2M100 model)"),Wro=l(),Bg=a("li"),kte=a("strong"),Qro=o("marian"),Hro=o(" \u2014 "),ZR=a("a"),Uro=o("MarianTokenizer"),Jro=o(" (Marian model)"),Yro=l(),is=a("li"),Ste=a("strong"),Kro=o("mbart"),Zro=o(" \u2014 "),eP=a("a"),eto=o("MBartTokenizer"),oto=o(" or "),oP=a("a"),rto=o("MBartTokenizerFast"),tto=o(" (mBART model)"),ato=l(),ds=a("li"),Rte=a("strong"),nto=o("mbart50"),sto=o(" \u2014 "),rP=a("a"),lto=o("MBart50Tokenizer"),ito=o(" or "),tP=a("a"),dto=o("MBart50TokenizerFast"),cto=o(" (mBART-50 model)"),fto=l(),cs=a("li"),Pte=a("strong"),mto=o("megatron-bert"),gto=o(" \u2014 "),aP=a("a"),hto=o("BertTokenizer"),pto=o(" or "),nP=a("a"),_to=o("BertTokenizerFast"),uto=o(" (MegatronBert model)"),bto=l(),Ig=a("li"),Bte=a("strong"),vto=o("mluke"),Fto=o(" \u2014 "),sP=a("a"),Tto=o("MLukeTokenizer"),Mto=o(" (mLUKE model)"),Eto=l(),fs=a("li"),Ite=a("strong"),Cto=o("mobilebert"),wto=o(" \u2014 "),lP=a("a"),Ato=o("MobileBertTokenizer"),yto=o(" or "),iP=a("a"),Lto=o("MobileBertTokenizerFast"),xto=o(" (MobileBERT model)"),$to=l(),ms=a("li"),qte=a("strong"),kto=o("mpnet"),Sto=o(" \u2014 "),dP=a("a"),Rto=o("MPNetTokenizer"),Pto=o(" or "),cP=a("a"),Bto=o("MPNetTokenizerFast"),Ito=o(" (MPNet model)"),qto=l(),gs=a("li"),Nte=a("strong"),Nto=o("mt5"),jto=o(" \u2014 "),fP=a("a"),Dto=o("MT5Tokenizer"),Gto=o(" or "),mP=a("a"),Oto=o("MT5TokenizerFast"),Vto=o(" (mT5 model)"),Xto=l(),hs=a("li"),jte=a("strong"),zto=o("nystromformer"),Wto=o(" \u2014 "),gP=a("a"),Qto=o("AlbertTokenizer"),Hto=o(" or "),hP=a("a"),Uto=o("AlbertTokenizerFast"),Jto=o(" (Nystromformer model)"),Yto=l(),ps=a("li"),Dte=a("strong"),Kto=o("openai-gpt"),Zto=o(" \u2014 "),pP=a("a"),eao=o("OpenAIGPTTokenizer"),oao=o(" or "),_P=a("a"),rao=o("OpenAIGPTTokenizerFast"),tao=o(" (OpenAI GPT model)"),aao=l(),qg=a("li"),Gte=a("strong"),nao=o("opt"),sao=o(" \u2014 "),uP=a("a"),lao=o("GPT2Tokenizer"),iao=o(" (OPT model)"),dao=l(),_s=a("li"),Ote=a("strong"),cao=o("pegasus"),fao=o(" \u2014 "),bP=a("a"),mao=o("PegasusTokenizer"),gao=o(" or "),vP=a("a"),hao=o("PegasusTokenizerFast"),pao=o(" (Pegasus model)"),_ao=l(),Ng=a("li"),Vte=a("strong"),uao=o("perceiver"),bao=o(" \u2014 "),FP=a("a"),vao=o("PerceiverTokenizer"),Fao=o(" (Perceiver model)"),Tao=l(),jg=a("li"),Xte=a("strong"),Mao=o("phobert"),Eao=o(" \u2014 "),TP=a("a"),Cao=o("PhobertTokenizer"),wao=o(" (PhoBERT model)"),Aao=l(),Dg=a("li"),zte=a("strong"),yao=o("plbart"),Lao=o(" \u2014 "),MP=a("a"),xao=o("PLBartTokenizer"),$ao=o(" (PLBart model)"),kao=l(),Gg=a("li"),Wte=a("strong"),Sao=o("prophetnet"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("ProphetNetTokenizer"),Bao=o(" (ProphetNet model)"),Iao=l(),us=a("li"),Qte=a("strong"),qao=o("qdqbert"),Nao=o(" \u2014 "),CP=a("a"),jao=o("BertTokenizer"),Dao=o(" or "),wP=a("a"),Gao=o("BertTokenizerFast"),Oao=o(" (QDQBert model)"),Vao=l(),Og=a("li"),Hte=a("strong"),Xao=o("rag"),zao=o(" \u2014 "),AP=a("a"),Wao=o("RagTokenizer"),Qao=o(" (RAG model)"),Hao=l(),bs=a("li"),Ute=a("strong"),Uao=o("realm"),Jao=o(" \u2014 "),yP=a("a"),Yao=o("RealmTokenizer"),Kao=o(" or "),LP=a("a"),Zao=o("RealmTokenizerFast"),eno=o(" (Realm model)"),ono=l(),vs=a("li"),Jte=a("strong"),rno=o("reformer"),tno=o(" \u2014 "),xP=a("a"),ano=o("ReformerTokenizer"),nno=o(" or "),$P=a("a"),sno=o("ReformerTokenizerFast"),lno=o(" (Reformer model)"),ino=l(),Fs=a("li"),Yte=a("strong"),dno=o("rembert"),cno=o(" \u2014 "),kP=a("a"),fno=o("RemBertTokenizer"),mno=o(" or "),SP=a("a"),gno=o("RemBertTokenizerFast"),hno=o(" (RemBERT model)"),pno=l(),Ts=a("li"),Kte=a("strong"),_no=o("retribert"),uno=o(" \u2014 "),RP=a("a"),bno=o("RetriBertTokenizer"),vno=o(" or "),PP=a("a"),Fno=o("RetriBertTokenizerFast"),Tno=o(" (RetriBERT model)"),Mno=l(),Ms=a("li"),Zte=a("strong"),Eno=o("roberta"),Cno=o(" \u2014 "),BP=a("a"),wno=o("RobertaTokenizer"),Ano=o(" or "),IP=a("a"),yno=o("RobertaTokenizerFast"),Lno=o(" (RoBERTa model)"),xno=l(),Es=a("li"),eae=a("strong"),$no=o("roformer"),kno=o(" \u2014 "),qP=a("a"),Sno=o("RoFormerTokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("RoFormerTokenizerFast"),Bno=o(" (RoFormer model)"),Ino=l(),Vg=a("li"),oae=a("strong"),qno=o("speech_to_text"),Nno=o(" \u2014 "),jP=a("a"),jno=o("Speech2TextTokenizer"),Dno=o(" (Speech2Text model)"),Gno=l(),Xg=a("li"),rae=a("strong"),Ono=o("speech_to_text_2"),Vno=o(" \u2014 "),DP=a("a"),Xno=o("Speech2Text2Tokenizer"),zno=o(" (Speech2Text2 model)"),Wno=l(),Cs=a("li"),tae=a("strong"),Qno=o("splinter"),Hno=o(" \u2014 "),GP=a("a"),Uno=o("SplinterTokenizer"),Jno=o(" or "),OP=a("a"),Yno=o("SplinterTokenizerFast"),Kno=o(" (Splinter model)"),Zno=l(),ws=a("li"),aae=a("strong"),eso=o("squeezebert"),oso=o(" \u2014 "),VP=a("a"),rso=o("SqueezeBertTokenizer"),tso=o(" or "),XP=a("a"),aso=o("SqueezeBertTokenizerFast"),nso=o(" (SqueezeBERT model)"),sso=l(),As=a("li"),nae=a("strong"),lso=o("t5"),iso=o(" \u2014 "),zP=a("a"),dso=o("T5Tokenizer"),cso=o(" or "),WP=a("a"),fso=o("T5TokenizerFast"),mso=o(" (T5 model)"),gso=l(),zg=a("li"),sae=a("strong"),hso=o("tapas"),pso=o(" \u2014 "),QP=a("a"),_so=o("TapasTokenizer"),uso=o(" (TAPAS model)"),bso=l(),Wg=a("li"),lae=a("strong"),vso=o("tapex"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("TapexTokenizer"),Mso=o(" (TAPEX model)"),Eso=l(),Qg=a("li"),iae=a("strong"),Cso=o("transfo-xl"),wso=o(" \u2014 "),UP=a("a"),Aso=o("TransfoXLTokenizer"),yso=o(" (Transformer-XL model)"),Lso=l(),ys=a("li"),dae=a("strong"),xso=o("visual_bert"),$so=o(" \u2014 "),JP=a("a"),kso=o("BertTokenizer"),Sso=o(" or "),YP=a("a"),Rso=o("BertTokenizerFast"),Pso=o(" (VisualBert model)"),Bso=l(),Hg=a("li"),cae=a("strong"),Iso=o("wav2vec2"),qso=o(" \u2014 "),KP=a("a"),Nso=o("Wav2Vec2CTCTokenizer"),jso=o(" (Wav2Vec2 model)"),Dso=l(),Ug=a("li"),fae=a("strong"),Gso=o("wav2vec2-conformer"),Oso=o(" \u2014 "),ZP=a("a"),Vso=o("Wav2Vec2CTCTokenizer"),Xso=o(" (Wav2Vec2-Conformer model)"),zso=l(),Jg=a("li"),mae=a("strong"),Wso=o("wav2vec2_phoneme"),Qso=o(" \u2014 "),eB=a("a"),Hso=o("Wav2Vec2PhonemeCTCTokenizer"),Uso=o(" (Wav2Vec2Phoneme model)"),Jso=l(),Ls=a("li"),gae=a("strong"),Yso=o("xglm"),Kso=o(" \u2014 "),oB=a("a"),Zso=o("XGLMTokenizer"),elo=o(" or "),rB=a("a"),olo=o("XGLMTokenizerFast"),rlo=o(" (XGLM model)"),tlo=l(),Yg=a("li"),hae=a("strong"),alo=o("xlm"),nlo=o(" \u2014 "),tB=a("a"),slo=o("XLMTokenizer"),llo=o(" (XLM model)"),ilo=l(),Kg=a("li"),pae=a("strong"),dlo=o("xlm-prophetnet"),clo=o(" \u2014 "),aB=a("a"),flo=o("XLMProphetNetTokenizer"),mlo=o(" (XLMProphetNet model)"),glo=l(),xs=a("li"),_ae=a("strong"),hlo=o("xlm-roberta"),plo=o(" \u2014 "),nB=a("a"),_lo=o("XLMRobertaTokenizer"),ulo=o(" or "),sB=a("a"),blo=o("XLMRobertaTokenizerFast"),vlo=o(" (XLM-RoBERTa model)"),Flo=l(),$s=a("li"),uae=a("strong"),Tlo=o("xlm-roberta-xl"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("RobertaTokenizer"),Clo=o(" or "),iB=a("a"),wlo=o("RobertaTokenizerFast"),Alo=o(" (XLM-RoBERTa-XL model)"),ylo=l(),ks=a("li"),bae=a("strong"),Llo=o("xlnet"),xlo=o(" \u2014 "),dB=a("a"),$lo=o("XLNetTokenizer"),klo=o(" or "),cB=a("a"),Slo=o("XLNetTokenizerFast"),Rlo=o(" (XLNet model)"),Plo=l(),Ss=a("li"),vae=a("strong"),Blo=o("yoso"),Ilo=o(" \u2014 "),fB=a("a"),qlo=o("AlbertTokenizer"),Nlo=o(" or "),mB=a("a"),jlo=o("AlbertTokenizerFast"),Dlo=o(" (YOSO model)"),Glo=l(),F(Zg.$$.fragment),Olo=l(),eh=a("div"),F(CA.$$.fragment),Vlo=l(),Fae=a("p"),Xlo=o("Register a new tokenizer in this mapping."),JIe=l(),Ti=a("h2"),oh=a("a"),Tae=a("span"),F(wA.$$.fragment),zlo=l(),Mae=a("span"),Wlo=o("AutoFeatureExtractor"),YIe=l(),Ao=a("div"),F(AA.$$.fragment),Qlo=l(),yA=a("p"),Hlo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=a("a"),Ulo=o("AutoFeatureExtractor.from_pretrained()"),Jlo=o(" class method."),Ylo=l(),LA=a("p"),Klo=o("This class cannot be instantiated directly using "),Eae=a("code"),Zlo=o("__init__()"),eio=o(" (throws an error)."),oio=l(),He=a("div"),F(xA.$$.fragment),rio=l(),Cae=a("p"),tio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aio=l(),ya=a("p"),nio=o("The feature extractor class to instantiate is selected based on the "),wae=a("code"),sio=o("model_type"),lio=o(` property of the config object
(either passed as an argument or loaded from `),Aae=a("code"),iio=o("pretrained_model_name_or_path"),dio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),yae=a("code"),cio=o("pretrained_model_name_or_path"),fio=o(":"),mio=l(),Z=a("ul"),rh=a("li"),Lae=a("strong"),gio=o("beit"),hio=o(" \u2014 "),hB=a("a"),pio=o("BeitFeatureExtractor"),_io=o(" (BEiT model)"),uio=l(),th=a("li"),xae=a("strong"),bio=o("clip"),vio=o(" \u2014 "),pB=a("a"),Fio=o("CLIPFeatureExtractor"),Tio=o(" (CLIP model)"),Mio=l(),ah=a("li"),$ae=a("strong"),Eio=o("convnext"),Cio=o(" \u2014 "),_B=a("a"),wio=o("ConvNextFeatureExtractor"),Aio=o(" (ConvNext model)"),yio=l(),nh=a("li"),kae=a("strong"),Lio=o("cvt"),xio=o(" \u2014 "),uB=a("a"),$io=o("ConvNextFeatureExtractor"),kio=o(" (CvT model)"),Sio=l(),sh=a("li"),Sae=a("strong"),Rio=o("data2vec-audio"),Pio=o(" \u2014 "),bB=a("a"),Bio=o("Wav2Vec2FeatureExtractor"),Iio=o(" (Data2VecAudio model)"),qio=l(),lh=a("li"),Rae=a("strong"),Nio=o("data2vec-vision"),jio=o(" \u2014 "),vB=a("a"),Dio=o("BeitFeatureExtractor"),Gio=o(" (Data2VecVision model)"),Oio=l(),ih=a("li"),Pae=a("strong"),Vio=o("deit"),Xio=o(" \u2014 "),FB=a("a"),zio=o("DeiTFeatureExtractor"),Wio=o(" (DeiT model)"),Qio=l(),dh=a("li"),Bae=a("strong"),Hio=o("detr"),Uio=o(" \u2014 "),TB=a("a"),Jio=o("DetrFeatureExtractor"),Yio=o(" (DETR model)"),Kio=l(),ch=a("li"),Iae=a("strong"),Zio=o("dpt"),edo=o(" \u2014 "),MB=a("a"),odo=o("DPTFeatureExtractor"),rdo=o(" (DPT model)"),tdo=l(),fh=a("li"),qae=a("strong"),ado=o("flava"),ndo=o(" \u2014 "),EB=a("a"),sdo=o("FlavaFeatureExtractor"),ldo=o(" (Flava model)"),ido=l(),mh=a("li"),Nae=a("strong"),ddo=o("glpn"),cdo=o(" \u2014 "),CB=a("a"),fdo=o("GLPNFeatureExtractor"),mdo=o(" (GLPN model)"),gdo=l(),gh=a("li"),jae=a("strong"),hdo=o("hubert"),pdo=o(" \u2014 "),wB=a("a"),_do=o("Wav2Vec2FeatureExtractor"),udo=o(" (Hubert model)"),bdo=l(),hh=a("li"),Dae=a("strong"),vdo=o("layoutlmv2"),Fdo=o(" \u2014 "),AB=a("a"),Tdo=o("LayoutLMv2FeatureExtractor"),Mdo=o(" (LayoutLMv2 model)"),Edo=l(),ph=a("li"),Gae=a("strong"),Cdo=o("maskformer"),wdo=o(" \u2014 "),yB=a("a"),Ado=o("MaskFormerFeatureExtractor"),ydo=o(" (MaskFormer model)"),Ldo=l(),_h=a("li"),Oae=a("strong"),xdo=o("perceiver"),$do=o(" \u2014 "),LB=a("a"),kdo=o("PerceiverFeatureExtractor"),Sdo=o(" (Perceiver model)"),Rdo=l(),uh=a("li"),Vae=a("strong"),Pdo=o("poolformer"),Bdo=o(" \u2014 "),xB=a("a"),Ido=o("PoolFormerFeatureExtractor"),qdo=o(" (PoolFormer model)"),Ndo=l(),bh=a("li"),Xae=a("strong"),jdo=o("regnet"),Ddo=o(" \u2014 "),$B=a("a"),Gdo=o("ConvNextFeatureExtractor"),Odo=o(" (RegNet model)"),Vdo=l(),vh=a("li"),zae=a("strong"),Xdo=o("resnet"),zdo=o(" \u2014 "),kB=a("a"),Wdo=o("ConvNextFeatureExtractor"),Qdo=o(" (ResNet model)"),Hdo=l(),Fh=a("li"),Wae=a("strong"),Udo=o("segformer"),Jdo=o(" \u2014 "),SB=a("a"),Ydo=o("SegformerFeatureExtractor"),Kdo=o(" (SegFormer model)"),Zdo=l(),Th=a("li"),Qae=a("strong"),eco=o("speech_to_text"),oco=o(" \u2014 "),RB=a("a"),rco=o("Speech2TextFeatureExtractor"),tco=o(" (Speech2Text model)"),aco=l(),Mh=a("li"),Hae=a("strong"),nco=o("swin"),sco=o(" \u2014 "),PB=a("a"),lco=o("ViTFeatureExtractor"),ico=o(" (Swin model)"),dco=l(),Eh=a("li"),Uae=a("strong"),cco=o("van"),fco=o(" \u2014 "),BB=a("a"),mco=o("ConvNextFeatureExtractor"),gco=o(" (VAN model)"),hco=l(),Ch=a("li"),Jae=a("strong"),pco=o("vit"),_co=o(" \u2014 "),IB=a("a"),uco=o("ViTFeatureExtractor"),bco=o(" (ViT model)"),vco=l(),wh=a("li"),Yae=a("strong"),Fco=o("vit_mae"),Tco=o(" \u2014 "),qB=a("a"),Mco=o("ViTFeatureExtractor"),Eco=o(" (ViTMAE model)"),Cco=l(),Ah=a("li"),Kae=a("strong"),wco=o("wav2vec2"),Aco=o(" \u2014 "),NB=a("a"),yco=o("Wav2Vec2FeatureExtractor"),Lco=o(" (Wav2Vec2 model)"),xco=l(),yh=a("li"),Zae=a("strong"),$co=o("wav2vec2-conformer"),kco=o(" \u2014 "),jB=a("a"),Sco=o("Wav2Vec2FeatureExtractor"),Rco=o(" (Wav2Vec2-Conformer model)"),Pco=l(),Lh=a("li"),ene=a("strong"),Bco=o("yolos"),Ico=o(" \u2014 "),DB=a("a"),qco=o("YolosFeatureExtractor"),Nco=o(" (YOLOS model)"),jco=l(),F(xh.$$.fragment),Dco=l(),F($h.$$.fragment),Gco=l(),kh=a("div"),F($A.$$.fragment),Oco=l(),one=a("p"),Vco=o("Register a new feature extractor for this class."),KIe=l(),Mi=a("h2"),Sh=a("a"),rne=a("span"),F(kA.$$.fragment),Xco=l(),tne=a("span"),zco=o("AutoProcessor"),ZIe=l(),yo=a("div"),F(SA.$$.fragment),Wco=l(),RA=a("p"),Qco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=a("a"),Hco=o("AutoProcessor.from_pretrained()"),Uco=o(" class method."),Jco=l(),PA=a("p"),Yco=o("This class cannot be instantiated directly using "),ane=a("code"),Kco=o("__init__()"),Zco=o(" (throws an error)."),efo=l(),Ue=a("div"),F(BA.$$.fragment),ofo=l(),nne=a("p"),rfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tfo=l(),Ei=a("p"),afo=o("The processor class to instantiate is selected based on the "),sne=a("code"),nfo=o("model_type"),sfo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),lfo=o("pretrained_model_name_or_path"),ifo=o(" if possible):"),dfo=l(),pe=a("ul"),Rh=a("li"),ine=a("strong"),cfo=o("clip"),ffo=o(" \u2014 "),OB=a("a"),mfo=o("CLIPProcessor"),gfo=o(" (CLIP model)"),hfo=l(),Ph=a("li"),dne=a("strong"),pfo=o("flava"),_fo=o(" \u2014 "),cne=a("code"),ufo=o("FLAVAProcessor"),bfo=o(" (Flava model)"),vfo=l(),Bh=a("li"),fne=a("strong"),Ffo=o("layoutlmv2"),Tfo=o(" \u2014 "),VB=a("a"),Mfo=o("LayoutLMv2Processor"),Efo=o(" (LayoutLMv2 model)"),Cfo=l(),Ih=a("li"),mne=a("strong"),wfo=o("layoutxlm"),Afo=o(" \u2014 "),XB=a("a"),yfo=o("LayoutXLMProcessor"),Lfo=o(" (LayoutXLM model)"),xfo=l(),qh=a("li"),gne=a("strong"),$fo=o("sew"),kfo=o(" \u2014 "),zB=a("a"),Sfo=o("Wav2Vec2Processor"),Rfo=o(" (SEW model)"),Pfo=l(),Nh=a("li"),hne=a("strong"),Bfo=o("sew-d"),Ifo=o(" \u2014 "),WB=a("a"),qfo=o("Wav2Vec2Processor"),Nfo=o(" (SEW-D model)"),jfo=l(),jh=a("li"),pne=a("strong"),Dfo=o("speech_to_text"),Gfo=o(" \u2014 "),QB=a("a"),Ofo=o("Speech2TextProcessor"),Vfo=o(" (Speech2Text model)"),Xfo=l(),Dh=a("li"),_ne=a("strong"),zfo=o("speech_to_text_2"),Wfo=o(" \u2014 "),HB=a("a"),Qfo=o("Speech2Text2Processor"),Hfo=o(" (Speech2Text2 model)"),Ufo=l(),Gh=a("li"),une=a("strong"),Jfo=o("trocr"),Yfo=o(" \u2014 "),UB=a("a"),Kfo=o("TrOCRProcessor"),Zfo=o(" (TrOCR model)"),emo=l(),Oh=a("li"),bne=a("strong"),omo=o("unispeech"),rmo=o(" \u2014 "),JB=a("a"),tmo=o("Wav2Vec2Processor"),amo=o(" (UniSpeech model)"),nmo=l(),Vh=a("li"),vne=a("strong"),smo=o("unispeech-sat"),lmo=o(" \u2014 "),YB=a("a"),imo=o("Wav2Vec2Processor"),dmo=o(" (UniSpeechSat model)"),cmo=l(),Xh=a("li"),Fne=a("strong"),fmo=o("vilt"),mmo=o(" \u2014 "),KB=a("a"),gmo=o("ViltProcessor"),hmo=o(" (ViLT model)"),pmo=l(),zh=a("li"),Tne=a("strong"),_mo=o("vision-text-dual-encoder"),umo=o(" \u2014 "),ZB=a("a"),bmo=o("VisionTextDualEncoderProcessor"),vmo=o(" (VisionTextDualEncoder model)"),Fmo=l(),Wh=a("li"),Mne=a("strong"),Tmo=o("wav2vec2"),Mmo=o(" \u2014 "),eI=a("a"),Emo=o("Wav2Vec2Processor"),Cmo=o(" (Wav2Vec2 model)"),wmo=l(),Qh=a("li"),Ene=a("strong"),Amo=o("wav2vec2-conformer"),ymo=o(" \u2014 "),oI=a("a"),Lmo=o("Wav2Vec2Processor"),xmo=o(" (Wav2Vec2-Conformer model)"),$mo=l(),Hh=a("li"),Cne=a("strong"),kmo=o("wavlm"),Smo=o(" \u2014 "),rI=a("a"),Rmo=o("Wav2Vec2Processor"),Pmo=o(" (WavLM model)"),Bmo=l(),F(Uh.$$.fragment),Imo=l(),F(Jh.$$.fragment),qmo=l(),Yh=a("div"),F(IA.$$.fragment),Nmo=l(),wne=a("p"),jmo=o("Register a new processor for this class."),eqe=l(),Ci=a("h2"),Kh=a("a"),Ane=a("span"),F(qA.$$.fragment),Dmo=l(),yne=a("span"),Gmo=o("AutoModel"),oqe=l(),Lo=a("div"),F(NA.$$.fragment),Omo=l(),wi=a("p"),Vmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tI=a("a"),Xmo=o("from_pretrained()"),zmo=o(" class method or the "),aI=a("a"),Wmo=o("from_config()"),Qmo=o(` class
method.`),Hmo=l(),jA=a("p"),Umo=o("This class cannot be instantiated directly using "),Lne=a("code"),Jmo=o("__init__()"),Ymo=o(" (throws an error)."),Kmo=l(),tt=a("div"),F(DA.$$.fragment),Zmo=l(),xne=a("p"),ego=o("Instantiates one of the base model classes of the library from a configuration."),ogo=l(),Ai=a("p"),rgo=o(`Note:
Loading a model from its configuration file does `),$ne=a("strong"),tgo=o("not"),ago=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=a("a"),ngo=o("from_pretrained()"),sgo=o(" to load the model weights."),lgo=l(),F(Zh.$$.fragment),igo=l(),Je=a("div"),F(GA.$$.fragment),dgo=l(),kne=a("p"),cgo=o("Instantiate one of the base model classes of the library from a pretrained model."),fgo=l(),La=a("p"),mgo=o("The model class to instantiate is selected based on the "),Sne=a("code"),ggo=o("model_type"),hgo=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),pgo=o("pretrained_model_name_or_path"),_go=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pne=a("code"),ugo=o("pretrained_model_name_or_path"),bgo=o(":"),vgo=l(),x=a("ul"),ep=a("li"),Bne=a("strong"),Fgo=o("albert"),Tgo=o(" \u2014 "),sI=a("a"),Mgo=o("AlbertModel"),Ego=o(" (ALBERT model)"),Cgo=l(),op=a("li"),Ine=a("strong"),wgo=o("bart"),Ago=o(" \u2014 "),lI=a("a"),ygo=o("BartModel"),Lgo=o(" (BART model)"),xgo=l(),rp=a("li"),qne=a("strong"),$go=o("beit"),kgo=o(" \u2014 "),iI=a("a"),Sgo=o("BeitModel"),Rgo=o(" (BEiT model)"),Pgo=l(),tp=a("li"),Nne=a("strong"),Bgo=o("bert"),Igo=o(" \u2014 "),dI=a("a"),qgo=o("BertModel"),Ngo=o(" (BERT model)"),jgo=l(),ap=a("li"),jne=a("strong"),Dgo=o("bert-generation"),Ggo=o(" \u2014 "),cI=a("a"),Ogo=o("BertGenerationEncoder"),Vgo=o(" (Bert Generation model)"),Xgo=l(),np=a("li"),Dne=a("strong"),zgo=o("big_bird"),Wgo=o(" \u2014 "),fI=a("a"),Qgo=o("BigBirdModel"),Hgo=o(" (BigBird model)"),Ugo=l(),sp=a("li"),Gne=a("strong"),Jgo=o("bigbird_pegasus"),Ygo=o(" \u2014 "),mI=a("a"),Kgo=o("BigBirdPegasusModel"),Zgo=o(" (BigBirdPegasus model)"),eho=l(),lp=a("li"),One=a("strong"),oho=o("blenderbot"),rho=o(" \u2014 "),gI=a("a"),tho=o("BlenderbotModel"),aho=o(" (Blenderbot model)"),nho=l(),ip=a("li"),Vne=a("strong"),sho=o("blenderbot-small"),lho=o(" \u2014 "),hI=a("a"),iho=o("BlenderbotSmallModel"),dho=o(" (BlenderbotSmall model)"),cho=l(),dp=a("li"),Xne=a("strong"),fho=o("camembert"),mho=o(" \u2014 "),pI=a("a"),gho=o("CamembertModel"),hho=o(" (CamemBERT model)"),pho=l(),cp=a("li"),zne=a("strong"),_ho=o("canine"),uho=o(" \u2014 "),_I=a("a"),bho=o("CanineModel"),vho=o(" (Canine model)"),Fho=l(),fp=a("li"),Wne=a("strong"),Tho=o("clip"),Mho=o(" \u2014 "),uI=a("a"),Eho=o("CLIPModel"),Cho=o(" (CLIP model)"),who=l(),mp=a("li"),Qne=a("strong"),Aho=o("convbert"),yho=o(" \u2014 "),bI=a("a"),Lho=o("ConvBertModel"),xho=o(" (ConvBERT model)"),$ho=l(),gp=a("li"),Hne=a("strong"),kho=o("convnext"),Sho=o(" \u2014 "),vI=a("a"),Rho=o("ConvNextModel"),Pho=o(" (ConvNext model)"),Bho=l(),hp=a("li"),Une=a("strong"),Iho=o("ctrl"),qho=o(" \u2014 "),FI=a("a"),Nho=o("CTRLModel"),jho=o(" (CTRL model)"),Dho=l(),pp=a("li"),Jne=a("strong"),Gho=o("cvt"),Oho=o(" \u2014 "),TI=a("a"),Vho=o("CvtModel"),Xho=o(" (CvT model)"),zho=l(),_p=a("li"),Yne=a("strong"),Who=o("data2vec-audio"),Qho=o(" \u2014 "),MI=a("a"),Hho=o("Data2VecAudioModel"),Uho=o(" (Data2VecAudio model)"),Jho=l(),up=a("li"),Kne=a("strong"),Yho=o("data2vec-text"),Kho=o(" \u2014 "),EI=a("a"),Zho=o("Data2VecTextModel"),epo=o(" (Data2VecText model)"),opo=l(),bp=a("li"),Zne=a("strong"),rpo=o("data2vec-vision"),tpo=o(" \u2014 "),CI=a("a"),apo=o("Data2VecVisionModel"),npo=o(" (Data2VecVision model)"),spo=l(),vp=a("li"),ese=a("strong"),lpo=o("deberta"),ipo=o(" \u2014 "),wI=a("a"),dpo=o("DebertaModel"),cpo=o(" (DeBERTa model)"),fpo=l(),Fp=a("li"),ose=a("strong"),mpo=o("deberta-v2"),gpo=o(" \u2014 "),AI=a("a"),hpo=o("DebertaV2Model"),ppo=o(" (DeBERTa-v2 model)"),_po=l(),Tp=a("li"),rse=a("strong"),upo=o("decision_transformer"),bpo=o(" \u2014 "),yI=a("a"),vpo=o("DecisionTransformerModel"),Fpo=o(" (Decision Transformer model)"),Tpo=l(),Mp=a("li"),tse=a("strong"),Mpo=o("deit"),Epo=o(" \u2014 "),LI=a("a"),Cpo=o("DeiTModel"),wpo=o(" (DeiT model)"),Apo=l(),Ep=a("li"),ase=a("strong"),ypo=o("detr"),Lpo=o(" \u2014 "),xI=a("a"),xpo=o("DetrModel"),$po=o(" (DETR model)"),kpo=l(),Cp=a("li"),nse=a("strong"),Spo=o("distilbert"),Rpo=o(" \u2014 "),$I=a("a"),Ppo=o("DistilBertModel"),Bpo=o(" (DistilBERT model)"),Ipo=l(),wp=a("li"),sse=a("strong"),qpo=o("dpr"),Npo=o(" \u2014 "),kI=a("a"),jpo=o("DPRQuestionEncoder"),Dpo=o(" (DPR model)"),Gpo=l(),Ap=a("li"),lse=a("strong"),Opo=o("dpt"),Vpo=o(" \u2014 "),SI=a("a"),Xpo=o("DPTModel"),zpo=o(" (DPT model)"),Wpo=l(),yp=a("li"),ise=a("strong"),Qpo=o("electra"),Hpo=o(" \u2014 "),RI=a("a"),Upo=o("ElectraModel"),Jpo=o(" (ELECTRA model)"),Ypo=l(),Lp=a("li"),dse=a("strong"),Kpo=o("flaubert"),Zpo=o(" \u2014 "),PI=a("a"),e_o=o("FlaubertModel"),o_o=o(" (FlauBERT model)"),r_o=l(),xp=a("li"),cse=a("strong"),t_o=o("flava"),a_o=o(" \u2014 "),BI=a("a"),n_o=o("FlavaModel"),s_o=o(" (Flava model)"),l_o=l(),$p=a("li"),fse=a("strong"),i_o=o("fnet"),d_o=o(" \u2014 "),II=a("a"),c_o=o("FNetModel"),f_o=o(" (FNet model)"),m_o=l(),kp=a("li"),mse=a("strong"),g_o=o("fsmt"),h_o=o(" \u2014 "),qI=a("a"),p_o=o("FSMTModel"),__o=o(" (FairSeq Machine-Translation model)"),u_o=l(),Rs=a("li"),gse=a("strong"),b_o=o("funnel"),v_o=o(" \u2014 "),NI=a("a"),F_o=o("FunnelModel"),T_o=o(" or "),jI=a("a"),M_o=o("FunnelBaseModel"),E_o=o(" (Funnel Transformer model)"),C_o=l(),Sp=a("li"),hse=a("strong"),w_o=o("glpn"),A_o=o(" \u2014 "),DI=a("a"),y_o=o("GLPNModel"),L_o=o(" (GLPN model)"),x_o=l(),Rp=a("li"),pse=a("strong"),$_o=o("gpt2"),k_o=o(" \u2014 "),GI=a("a"),S_o=o("GPT2Model"),R_o=o(" (OpenAI GPT-2 model)"),P_o=l(),Pp=a("li"),_se=a("strong"),B_o=o("gpt_neo"),I_o=o(" \u2014 "),OI=a("a"),q_o=o("GPTNeoModel"),N_o=o(" (GPT Neo model)"),j_o=l(),Bp=a("li"),use=a("strong"),D_o=o("gptj"),G_o=o(" \u2014 "),VI=a("a"),O_o=o("GPTJModel"),V_o=o(" (GPT-J model)"),X_o=l(),Ip=a("li"),bse=a("strong"),z_o=o("hubert"),W_o=o(" \u2014 "),XI=a("a"),Q_o=o("HubertModel"),H_o=o(" (Hubert model)"),U_o=l(),qp=a("li"),vse=a("strong"),J_o=o("ibert"),Y_o=o(" \u2014 "),zI=a("a"),K_o=o("IBertModel"),Z_o=o(" (I-BERT model)"),euo=l(),Np=a("li"),Fse=a("strong"),ouo=o("imagegpt"),ruo=o(" \u2014 "),WI=a("a"),tuo=o("ImageGPTModel"),auo=o(" (ImageGPT model)"),nuo=l(),jp=a("li"),Tse=a("strong"),suo=o("layoutlm"),luo=o(" \u2014 "),QI=a("a"),iuo=o("LayoutLMModel"),duo=o(" (LayoutLM model)"),cuo=l(),Dp=a("li"),Mse=a("strong"),fuo=o("layoutlmv2"),muo=o(" \u2014 "),HI=a("a"),guo=o("LayoutLMv2Model"),huo=o(" (LayoutLMv2 model)"),puo=l(),Gp=a("li"),Ese=a("strong"),_uo=o("led"),uuo=o(" \u2014 "),UI=a("a"),buo=o("LEDModel"),vuo=o(" (LED model)"),Fuo=l(),Op=a("li"),Cse=a("strong"),Tuo=o("longformer"),Muo=o(" \u2014 "),JI=a("a"),Euo=o("LongformerModel"),Cuo=o(" (Longformer model)"),wuo=l(),Vp=a("li"),wse=a("strong"),Auo=o("luke"),yuo=o(" \u2014 "),YI=a("a"),Luo=o("LukeModel"),xuo=o(" (LUKE model)"),$uo=l(),Xp=a("li"),Ase=a("strong"),kuo=o("lxmert"),Suo=o(" \u2014 "),KI=a("a"),Ruo=o("LxmertModel"),Puo=o(" (LXMERT model)"),Buo=l(),zp=a("li"),yse=a("strong"),Iuo=o("m2m_100"),quo=o(" \u2014 "),ZI=a("a"),Nuo=o("M2M100Model"),juo=o(" (M2M100 model)"),Duo=l(),Wp=a("li"),Lse=a("strong"),Guo=o("marian"),Ouo=o(" \u2014 "),eq=a("a"),Vuo=o("MarianModel"),Xuo=o(" (Marian model)"),zuo=l(),Qp=a("li"),xse=a("strong"),Wuo=o("maskformer"),Quo=o(" \u2014 "),oq=a("a"),Huo=o("MaskFormerModel"),Uuo=o(" (MaskFormer model)"),Juo=l(),Hp=a("li"),$se=a("strong"),Yuo=o("mbart"),Kuo=o(" \u2014 "),rq=a("a"),Zuo=o("MBartModel"),e2o=o(" (mBART model)"),o2o=l(),Up=a("li"),kse=a("strong"),r2o=o("megatron-bert"),t2o=o(" \u2014 "),tq=a("a"),a2o=o("MegatronBertModel"),n2o=o(" (MegatronBert model)"),s2o=l(),Jp=a("li"),Sse=a("strong"),l2o=o("mobilebert"),i2o=o(" \u2014 "),aq=a("a"),d2o=o("MobileBertModel"),c2o=o(" (MobileBERT model)"),f2o=l(),Yp=a("li"),Rse=a("strong"),m2o=o("mpnet"),g2o=o(" \u2014 "),nq=a("a"),h2o=o("MPNetModel"),p2o=o(" (MPNet model)"),_2o=l(),Kp=a("li"),Pse=a("strong"),u2o=o("mt5"),b2o=o(" \u2014 "),sq=a("a"),v2o=o("MT5Model"),F2o=o(" (mT5 model)"),T2o=l(),Zp=a("li"),Bse=a("strong"),M2o=o("nystromformer"),E2o=o(" \u2014 "),lq=a("a"),C2o=o("NystromformerModel"),w2o=o(" (Nystromformer model)"),A2o=l(),e_=a("li"),Ise=a("strong"),y2o=o("openai-gpt"),L2o=o(" \u2014 "),iq=a("a"),x2o=o("OpenAIGPTModel"),$2o=o(" (OpenAI GPT model)"),k2o=l(),o_=a("li"),qse=a("strong"),S2o=o("opt"),R2o=o(" \u2014 "),dq=a("a"),P2o=o("OPTModel"),B2o=o(" (OPT model)"),I2o=l(),r_=a("li"),Nse=a("strong"),q2o=o("pegasus"),N2o=o(" \u2014 "),cq=a("a"),j2o=o("PegasusModel"),D2o=o(" (Pegasus model)"),G2o=l(),t_=a("li"),jse=a("strong"),O2o=o("perceiver"),V2o=o(" \u2014 "),fq=a("a"),X2o=o("PerceiverModel"),z2o=o(" (Perceiver model)"),W2o=l(),a_=a("li"),Dse=a("strong"),Q2o=o("plbart"),H2o=o(" \u2014 "),mq=a("a"),U2o=o("PLBartModel"),J2o=o(" (PLBart model)"),Y2o=l(),n_=a("li"),Gse=a("strong"),K2o=o("poolformer"),Z2o=o(" \u2014 "),gq=a("a"),e1o=o("PoolFormerModel"),o1o=o(" (PoolFormer model)"),r1o=l(),s_=a("li"),Ose=a("strong"),t1o=o("prophetnet"),a1o=o(" \u2014 "),hq=a("a"),n1o=o("ProphetNetModel"),s1o=o(" (ProphetNet model)"),l1o=l(),l_=a("li"),Vse=a("strong"),i1o=o("qdqbert"),d1o=o(" \u2014 "),pq=a("a"),c1o=o("QDQBertModel"),f1o=o(" (QDQBert model)"),m1o=l(),i_=a("li"),Xse=a("strong"),g1o=o("reformer"),h1o=o(" \u2014 "),_q=a("a"),p1o=o("ReformerModel"),_1o=o(" (Reformer model)"),u1o=l(),d_=a("li"),zse=a("strong"),b1o=o("regnet"),v1o=o(" \u2014 "),uq=a("a"),F1o=o("RegNetModel"),T1o=o(" (RegNet model)"),M1o=l(),c_=a("li"),Wse=a("strong"),E1o=o("rembert"),C1o=o(" \u2014 "),bq=a("a"),w1o=o("RemBertModel"),A1o=o(" (RemBERT model)"),y1o=l(),f_=a("li"),Qse=a("strong"),L1o=o("resnet"),x1o=o(" \u2014 "),vq=a("a"),$1o=o("ResNetModel"),k1o=o(" (ResNet model)"),S1o=l(),m_=a("li"),Hse=a("strong"),R1o=o("retribert"),P1o=o(" \u2014 "),Fq=a("a"),B1o=o("RetriBertModel"),I1o=o(" (RetriBERT model)"),q1o=l(),g_=a("li"),Use=a("strong"),N1o=o("roberta"),j1o=o(" \u2014 "),Tq=a("a"),D1o=o("RobertaModel"),G1o=o(" (RoBERTa model)"),O1o=l(),h_=a("li"),Jse=a("strong"),V1o=o("roformer"),X1o=o(" \u2014 "),Mq=a("a"),z1o=o("RoFormerModel"),W1o=o(" (RoFormer model)"),Q1o=l(),p_=a("li"),Yse=a("strong"),H1o=o("segformer"),U1o=o(" \u2014 "),Eq=a("a"),J1o=o("SegformerModel"),Y1o=o(" (SegFormer model)"),K1o=l(),__=a("li"),Kse=a("strong"),Z1o=o("sew"),e9o=o(" \u2014 "),Cq=a("a"),o9o=o("SEWModel"),r9o=o(" (SEW model)"),t9o=l(),u_=a("li"),Zse=a("strong"),a9o=o("sew-d"),n9o=o(" \u2014 "),wq=a("a"),s9o=o("SEWDModel"),l9o=o(" (SEW-D model)"),i9o=l(),b_=a("li"),ele=a("strong"),d9o=o("speech_to_text"),c9o=o(" \u2014 "),Aq=a("a"),f9o=o("Speech2TextModel"),m9o=o(" (Speech2Text model)"),g9o=l(),v_=a("li"),ole=a("strong"),h9o=o("splinter"),p9o=o(" \u2014 "),yq=a("a"),_9o=o("SplinterModel"),u9o=o(" (Splinter model)"),b9o=l(),F_=a("li"),rle=a("strong"),v9o=o("squeezebert"),F9o=o(" \u2014 "),Lq=a("a"),T9o=o("SqueezeBertModel"),M9o=o(" (SqueezeBERT model)"),E9o=l(),T_=a("li"),tle=a("strong"),C9o=o("swin"),w9o=o(" \u2014 "),xq=a("a"),A9o=o("SwinModel"),y9o=o(" (Swin model)"),L9o=l(),M_=a("li"),ale=a("strong"),x9o=o("t5"),$9o=o(" \u2014 "),$q=a("a"),k9o=o("T5Model"),S9o=o(" (T5 model)"),R9o=l(),E_=a("li"),nle=a("strong"),P9o=o("tapas"),B9o=o(" \u2014 "),kq=a("a"),I9o=o("TapasModel"),q9o=o(" (TAPAS model)"),N9o=l(),C_=a("li"),sle=a("strong"),j9o=o("transfo-xl"),D9o=o(" \u2014 "),Sq=a("a"),G9o=o("TransfoXLModel"),O9o=o(" (Transformer-XL model)"),V9o=l(),w_=a("li"),lle=a("strong"),X9o=o("unispeech"),z9o=o(" \u2014 "),Rq=a("a"),W9o=o("UniSpeechModel"),Q9o=o(" (UniSpeech model)"),H9o=l(),A_=a("li"),ile=a("strong"),U9o=o("unispeech-sat"),J9o=o(" \u2014 "),Pq=a("a"),Y9o=o("UniSpeechSatModel"),K9o=o(" (UniSpeechSat model)"),Z9o=l(),y_=a("li"),dle=a("strong"),ebo=o("van"),obo=o(" \u2014 "),Bq=a("a"),rbo=o("VanModel"),tbo=o(" (VAN model)"),abo=l(),L_=a("li"),cle=a("strong"),nbo=o("vilt"),sbo=o(" \u2014 "),Iq=a("a"),lbo=o("ViltModel"),ibo=o(" (ViLT model)"),dbo=l(),x_=a("li"),fle=a("strong"),cbo=o("vision-text-dual-encoder"),fbo=o(" \u2014 "),qq=a("a"),mbo=o("VisionTextDualEncoderModel"),gbo=o(" (VisionTextDualEncoder model)"),hbo=l(),$_=a("li"),mle=a("strong"),pbo=o("visual_bert"),_bo=o(" \u2014 "),Nq=a("a"),ubo=o("VisualBertModel"),bbo=o(" (VisualBert model)"),vbo=l(),k_=a("li"),gle=a("strong"),Fbo=o("vit"),Tbo=o(" \u2014 "),jq=a("a"),Mbo=o("ViTModel"),Ebo=o(" (ViT model)"),Cbo=l(),S_=a("li"),hle=a("strong"),wbo=o("vit_mae"),Abo=o(" \u2014 "),Dq=a("a"),ybo=o("ViTMAEModel"),Lbo=o(" (ViTMAE model)"),xbo=l(),R_=a("li"),ple=a("strong"),$bo=o("wav2vec2"),kbo=o(" \u2014 "),Gq=a("a"),Sbo=o("Wav2Vec2Model"),Rbo=o(" (Wav2Vec2 model)"),Pbo=l(),P_=a("li"),_le=a("strong"),Bbo=o("wav2vec2-conformer"),Ibo=o(" \u2014 "),Oq=a("a"),qbo=o("Wav2Vec2ConformerModel"),Nbo=o(" (Wav2Vec2-Conformer model)"),jbo=l(),B_=a("li"),ule=a("strong"),Dbo=o("wavlm"),Gbo=o(" \u2014 "),Vq=a("a"),Obo=o("WavLMModel"),Vbo=o(" (WavLM model)"),Xbo=l(),I_=a("li"),ble=a("strong"),zbo=o("xglm"),Wbo=o(" \u2014 "),Xq=a("a"),Qbo=o("XGLMModel"),Hbo=o(" (XGLM model)"),Ubo=l(),q_=a("li"),vle=a("strong"),Jbo=o("xlm"),Ybo=o(" \u2014 "),zq=a("a"),Kbo=o("XLMModel"),Zbo=o(" (XLM model)"),evo=l(),N_=a("li"),Fle=a("strong"),ovo=o("xlm-prophetnet"),rvo=o(" \u2014 "),Wq=a("a"),tvo=o("XLMProphetNetModel"),avo=o(" (XLMProphetNet model)"),nvo=l(),j_=a("li"),Tle=a("strong"),svo=o("xlm-roberta"),lvo=o(" \u2014 "),Qq=a("a"),ivo=o("XLMRobertaModel"),dvo=o(" (XLM-RoBERTa model)"),cvo=l(),D_=a("li"),Mle=a("strong"),fvo=o("xlm-roberta-xl"),mvo=o(" \u2014 "),Hq=a("a"),gvo=o("XLMRobertaXLModel"),hvo=o(" (XLM-RoBERTa-XL model)"),pvo=l(),G_=a("li"),Ele=a("strong"),_vo=o("xlnet"),uvo=o(" \u2014 "),Uq=a("a"),bvo=o("XLNetModel"),vvo=o(" (XLNet model)"),Fvo=l(),O_=a("li"),Cle=a("strong"),Tvo=o("yolos"),Mvo=o(" \u2014 "),Jq=a("a"),Evo=o("YolosModel"),Cvo=o(" (YOLOS model)"),wvo=l(),V_=a("li"),wle=a("strong"),Avo=o("yoso"),yvo=o(" \u2014 "),Yq=a("a"),Lvo=o("YosoModel"),xvo=o(" (YOSO model)"),$vo=l(),X_=a("p"),kvo=o("The model is set in evaluation mode by default using "),Ale=a("code"),Svo=o("model.eval()"),Rvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yle=a("code"),Pvo=o("model.train()"),Bvo=l(),F(z_.$$.fragment),rqe=l(),yi=a("h2"),W_=a("a"),Lle=a("span"),F(OA.$$.fragment),Ivo=l(),xle=a("span"),qvo=o("AutoModelForPreTraining"),tqe=l(),xo=a("div"),F(VA.$$.fragment),Nvo=l(),Li=a("p"),jvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=a("a"),Dvo=o("from_pretrained()"),Gvo=o(" class method or the "),Zq=a("a"),Ovo=o("from_config()"),Vvo=o(` class
method.`),Xvo=l(),XA=a("p"),zvo=o("This class cannot be instantiated directly using "),$le=a("code"),Wvo=o("__init__()"),Qvo=o(" (throws an error)."),Hvo=l(),at=a("div"),F(zA.$$.fragment),Uvo=l(),kle=a("p"),Jvo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yvo=l(),xi=a("p"),Kvo=o(`Note:
Loading a model from its configuration file does `),Sle=a("strong"),Zvo=o("not"),eFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=a("a"),oFo=o("from_pretrained()"),rFo=o(" to load the model weights."),tFo=l(),F(Q_.$$.fragment),aFo=l(),Ye=a("div"),F(WA.$$.fragment),nFo=l(),Rle=a("p"),sFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lFo=l(),xa=a("p"),iFo=o("The model class to instantiate is selected based on the "),Ple=a("code"),dFo=o("model_type"),cFo=o(` property of the config object (either
passed as an argument or loaded from `),Ble=a("code"),fFo=o("pretrained_model_name_or_path"),mFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),gFo=o("pretrained_model_name_or_path"),hFo=o(":"),pFo=l(),G=a("ul"),H_=a("li"),qle=a("strong"),_Fo=o("albert"),uFo=o(" \u2014 "),oN=a("a"),bFo=o("AlbertForPreTraining"),vFo=o(" (ALBERT model)"),FFo=l(),U_=a("li"),Nle=a("strong"),TFo=o("bart"),MFo=o(" \u2014 "),rN=a("a"),EFo=o("BartForConditionalGeneration"),CFo=o(" (BART model)"),wFo=l(),J_=a("li"),jle=a("strong"),AFo=o("bert"),yFo=o(" \u2014 "),tN=a("a"),LFo=o("BertForPreTraining"),xFo=o(" (BERT model)"),$Fo=l(),Y_=a("li"),Dle=a("strong"),kFo=o("big_bird"),SFo=o(" \u2014 "),aN=a("a"),RFo=o("BigBirdForPreTraining"),PFo=o(" (BigBird model)"),BFo=l(),K_=a("li"),Gle=a("strong"),IFo=o("camembert"),qFo=o(" \u2014 "),nN=a("a"),NFo=o("CamembertForMaskedLM"),jFo=o(" (CamemBERT model)"),DFo=l(),Z_=a("li"),Ole=a("strong"),GFo=o("ctrl"),OFo=o(" \u2014 "),sN=a("a"),VFo=o("CTRLLMHeadModel"),XFo=o(" (CTRL model)"),zFo=l(),eu=a("li"),Vle=a("strong"),WFo=o("data2vec-text"),QFo=o(" \u2014 "),lN=a("a"),HFo=o("Data2VecTextForMaskedLM"),UFo=o(" (Data2VecText model)"),JFo=l(),ou=a("li"),Xle=a("strong"),YFo=o("deberta"),KFo=o(" \u2014 "),iN=a("a"),ZFo=o("DebertaForMaskedLM"),eTo=o(" (DeBERTa model)"),oTo=l(),ru=a("li"),zle=a("strong"),rTo=o("deberta-v2"),tTo=o(" \u2014 "),dN=a("a"),aTo=o("DebertaV2ForMaskedLM"),nTo=o(" (DeBERTa-v2 model)"),sTo=l(),tu=a("li"),Wle=a("strong"),lTo=o("distilbert"),iTo=o(" \u2014 "),cN=a("a"),dTo=o("DistilBertForMaskedLM"),cTo=o(" (DistilBERT model)"),fTo=l(),au=a("li"),Qle=a("strong"),mTo=o("electra"),gTo=o(" \u2014 "),fN=a("a"),hTo=o("ElectraForPreTraining"),pTo=o(" (ELECTRA model)"),_To=l(),nu=a("li"),Hle=a("strong"),uTo=o("flaubert"),bTo=o(" \u2014 "),mN=a("a"),vTo=o("FlaubertWithLMHeadModel"),FTo=o(" (FlauBERT model)"),TTo=l(),su=a("li"),Ule=a("strong"),MTo=o("flava"),ETo=o(" \u2014 "),gN=a("a"),CTo=o("FlavaForPreTraining"),wTo=o(" (Flava model)"),ATo=l(),lu=a("li"),Jle=a("strong"),yTo=o("fnet"),LTo=o(" \u2014 "),hN=a("a"),xTo=o("FNetForPreTraining"),$To=o(" (FNet model)"),kTo=l(),iu=a("li"),Yle=a("strong"),STo=o("fsmt"),RTo=o(" \u2014 "),pN=a("a"),PTo=o("FSMTForConditionalGeneration"),BTo=o(" (FairSeq Machine-Translation model)"),ITo=l(),du=a("li"),Kle=a("strong"),qTo=o("funnel"),NTo=o(" \u2014 "),_N=a("a"),jTo=o("FunnelForPreTraining"),DTo=o(" (Funnel Transformer model)"),GTo=l(),cu=a("li"),Zle=a("strong"),OTo=o("gpt2"),VTo=o(" \u2014 "),uN=a("a"),XTo=o("GPT2LMHeadModel"),zTo=o(" (OpenAI GPT-2 model)"),WTo=l(),fu=a("li"),eie=a("strong"),QTo=o("ibert"),HTo=o(" \u2014 "),bN=a("a"),UTo=o("IBertForMaskedLM"),JTo=o(" (I-BERT model)"),YTo=l(),mu=a("li"),oie=a("strong"),KTo=o("layoutlm"),ZTo=o(" \u2014 "),vN=a("a"),e7o=o("LayoutLMForMaskedLM"),o7o=o(" (LayoutLM model)"),r7o=l(),gu=a("li"),rie=a("strong"),t7o=o("longformer"),a7o=o(" \u2014 "),FN=a("a"),n7o=o("LongformerForMaskedLM"),s7o=o(" (Longformer model)"),l7o=l(),hu=a("li"),tie=a("strong"),i7o=o("lxmert"),d7o=o(" \u2014 "),TN=a("a"),c7o=o("LxmertForPreTraining"),f7o=o(" (LXMERT model)"),m7o=l(),pu=a("li"),aie=a("strong"),g7o=o("megatron-bert"),h7o=o(" \u2014 "),MN=a("a"),p7o=o("MegatronBertForPreTraining"),_7o=o(" (MegatronBert model)"),u7o=l(),_u=a("li"),nie=a("strong"),b7o=o("mobilebert"),v7o=o(" \u2014 "),EN=a("a"),F7o=o("MobileBertForPreTraining"),T7o=o(" (MobileBERT model)"),M7o=l(),uu=a("li"),sie=a("strong"),E7o=o("mpnet"),C7o=o(" \u2014 "),CN=a("a"),w7o=o("MPNetForMaskedLM"),A7o=o(" (MPNet model)"),y7o=l(),bu=a("li"),lie=a("strong"),L7o=o("openai-gpt"),x7o=o(" \u2014 "),wN=a("a"),$7o=o("OpenAIGPTLMHeadModel"),k7o=o(" (OpenAI GPT model)"),S7o=l(),vu=a("li"),iie=a("strong"),R7o=o("retribert"),P7o=o(" \u2014 "),AN=a("a"),B7o=o("RetriBertModel"),I7o=o(" (RetriBERT model)"),q7o=l(),Fu=a("li"),die=a("strong"),N7o=o("roberta"),j7o=o(" \u2014 "),yN=a("a"),D7o=o("RobertaForMaskedLM"),G7o=o(" (RoBERTa model)"),O7o=l(),Tu=a("li"),cie=a("strong"),V7o=o("squeezebert"),X7o=o(" \u2014 "),LN=a("a"),z7o=o("SqueezeBertForMaskedLM"),W7o=o(" (SqueezeBERT model)"),Q7o=l(),Mu=a("li"),fie=a("strong"),H7o=o("t5"),U7o=o(" \u2014 "),xN=a("a"),J7o=o("T5ForConditionalGeneration"),Y7o=o(" (T5 model)"),K7o=l(),Eu=a("li"),mie=a("strong"),Z7o=o("tapas"),eMo=o(" \u2014 "),$N=a("a"),oMo=o("TapasForMaskedLM"),rMo=o(" (TAPAS model)"),tMo=l(),Cu=a("li"),gie=a("strong"),aMo=o("transfo-xl"),nMo=o(" \u2014 "),kN=a("a"),sMo=o("TransfoXLLMHeadModel"),lMo=o(" (Transformer-XL model)"),iMo=l(),wu=a("li"),hie=a("strong"),dMo=o("unispeech"),cMo=o(" \u2014 "),SN=a("a"),fMo=o("UniSpeechForPreTraining"),mMo=o(" (UniSpeech model)"),gMo=l(),Au=a("li"),pie=a("strong"),hMo=o("unispeech-sat"),pMo=o(" \u2014 "),RN=a("a"),_Mo=o("UniSpeechSatForPreTraining"),uMo=o(" (UniSpeechSat model)"),bMo=l(),yu=a("li"),_ie=a("strong"),vMo=o("visual_bert"),FMo=o(" \u2014 "),PN=a("a"),TMo=o("VisualBertForPreTraining"),MMo=o(" (VisualBert model)"),EMo=l(),Lu=a("li"),uie=a("strong"),CMo=o("vit_mae"),wMo=o(" \u2014 "),BN=a("a"),AMo=o("ViTMAEForPreTraining"),yMo=o(" (ViTMAE model)"),LMo=l(),xu=a("li"),bie=a("strong"),xMo=o("wav2vec2"),$Mo=o(" \u2014 "),IN=a("a"),kMo=o("Wav2Vec2ForPreTraining"),SMo=o(" (Wav2Vec2 model)"),RMo=l(),$u=a("li"),vie=a("strong"),PMo=o("wav2vec2-conformer"),BMo=o(" \u2014 "),qN=a("a"),IMo=o("Wav2Vec2ConformerForPreTraining"),qMo=o(" (Wav2Vec2-Conformer model)"),NMo=l(),ku=a("li"),Fie=a("strong"),jMo=o("xlm"),DMo=o(" \u2014 "),NN=a("a"),GMo=o("XLMWithLMHeadModel"),OMo=o(" (XLM model)"),VMo=l(),Su=a("li"),Tie=a("strong"),XMo=o("xlm-roberta"),zMo=o(" \u2014 "),jN=a("a"),WMo=o("XLMRobertaForMaskedLM"),QMo=o(" (XLM-RoBERTa model)"),HMo=l(),Ru=a("li"),Mie=a("strong"),UMo=o("xlm-roberta-xl"),JMo=o(" \u2014 "),DN=a("a"),YMo=o("XLMRobertaXLForMaskedLM"),KMo=o(" (XLM-RoBERTa-XL model)"),ZMo=l(),Pu=a("li"),Eie=a("strong"),e4o=o("xlnet"),o4o=o(" \u2014 "),GN=a("a"),r4o=o("XLNetLMHeadModel"),t4o=o(" (XLNet model)"),a4o=l(),Bu=a("p"),n4o=o("The model is set in evaluation mode by default using "),Cie=a("code"),s4o=o("model.eval()"),l4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),i4o=o("model.train()"),d4o=l(),F(Iu.$$.fragment),aqe=l(),$i=a("h2"),qu=a("a"),Aie=a("span"),F(QA.$$.fragment),c4o=l(),yie=a("span"),f4o=o("AutoModelForCausalLM"),nqe=l(),$o=a("div"),F(HA.$$.fragment),m4o=l(),ki=a("p"),g4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ON=a("a"),h4o=o("from_pretrained()"),p4o=o(" class method or the "),VN=a("a"),_4o=o("from_config()"),u4o=o(` class
method.`),b4o=l(),UA=a("p"),v4o=o("This class cannot be instantiated directly using "),Lie=a("code"),F4o=o("__init__()"),T4o=o(" (throws an error)."),M4o=l(),nt=a("div"),F(JA.$$.fragment),E4o=l(),xie=a("p"),C4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),w4o=l(),Si=a("p"),A4o=o(`Note:
Loading a model from its configuration file does `),$ie=a("strong"),y4o=o("not"),L4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),x4o=o("from_pretrained()"),$4o=o(" to load the model weights."),k4o=l(),F(Nu.$$.fragment),S4o=l(),Ke=a("div"),F(YA.$$.fragment),R4o=l(),kie=a("p"),P4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B4o=l(),$a=a("p"),I4o=o("The model class to instantiate is selected based on the "),Sie=a("code"),q4o=o("model_type"),N4o=o(` property of the config object (either
passed as an argument or loaded from `),Rie=a("code"),j4o=o("pretrained_model_name_or_path"),D4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),G4o=o("pretrained_model_name_or_path"),O4o=o(":"),V4o=l(),z=a("ul"),ju=a("li"),Bie=a("strong"),X4o=o("bart"),z4o=o(" \u2014 "),zN=a("a"),W4o=o("BartForCausalLM"),Q4o=o(" (BART model)"),H4o=l(),Du=a("li"),Iie=a("strong"),U4o=o("bert"),J4o=o(" \u2014 "),WN=a("a"),Y4o=o("BertLMHeadModel"),K4o=o(" (BERT model)"),Z4o=l(),Gu=a("li"),qie=a("strong"),eEo=o("bert-generation"),oEo=o(" \u2014 "),QN=a("a"),rEo=o("BertGenerationDecoder"),tEo=o(" (Bert Generation model)"),aEo=l(),Ou=a("li"),Nie=a("strong"),nEo=o("big_bird"),sEo=o(" \u2014 "),HN=a("a"),lEo=o("BigBirdForCausalLM"),iEo=o(" (BigBird model)"),dEo=l(),Vu=a("li"),jie=a("strong"),cEo=o("bigbird_pegasus"),fEo=o(" \u2014 "),UN=a("a"),mEo=o("BigBirdPegasusForCausalLM"),gEo=o(" (BigBirdPegasus model)"),hEo=l(),Xu=a("li"),Die=a("strong"),pEo=o("blenderbot"),_Eo=o(" \u2014 "),JN=a("a"),uEo=o("BlenderbotForCausalLM"),bEo=o(" (Blenderbot model)"),vEo=l(),zu=a("li"),Gie=a("strong"),FEo=o("blenderbot-small"),TEo=o(" \u2014 "),YN=a("a"),MEo=o("BlenderbotSmallForCausalLM"),EEo=o(" (BlenderbotSmall model)"),CEo=l(),Wu=a("li"),Oie=a("strong"),wEo=o("camembert"),AEo=o(" \u2014 "),KN=a("a"),yEo=o("CamembertForCausalLM"),LEo=o(" (CamemBERT model)"),xEo=l(),Qu=a("li"),Vie=a("strong"),$Eo=o("ctrl"),kEo=o(" \u2014 "),ZN=a("a"),SEo=o("CTRLLMHeadModel"),REo=o(" (CTRL model)"),PEo=l(),Hu=a("li"),Xie=a("strong"),BEo=o("data2vec-text"),IEo=o(" \u2014 "),ej=a("a"),qEo=o("Data2VecTextForCausalLM"),NEo=o(" (Data2VecText model)"),jEo=l(),Uu=a("li"),zie=a("strong"),DEo=o("electra"),GEo=o(" \u2014 "),oj=a("a"),OEo=o("ElectraForCausalLM"),VEo=o(" (ELECTRA model)"),XEo=l(),Ju=a("li"),Wie=a("strong"),zEo=o("gpt2"),WEo=o(" \u2014 "),rj=a("a"),QEo=o("GPT2LMHeadModel"),HEo=o(" (OpenAI GPT-2 model)"),UEo=l(),Yu=a("li"),Qie=a("strong"),JEo=o("gpt_neo"),YEo=o(" \u2014 "),tj=a("a"),KEo=o("GPTNeoForCausalLM"),ZEo=o(" (GPT Neo model)"),eCo=l(),Ku=a("li"),Hie=a("strong"),oCo=o("gptj"),rCo=o(" \u2014 "),aj=a("a"),tCo=o("GPTJForCausalLM"),aCo=o(" (GPT-J model)"),nCo=l(),Zu=a("li"),Uie=a("strong"),sCo=o("marian"),lCo=o(" \u2014 "),nj=a("a"),iCo=o("MarianForCausalLM"),dCo=o(" (Marian model)"),cCo=l(),e2=a("li"),Jie=a("strong"),fCo=o("mbart"),mCo=o(" \u2014 "),sj=a("a"),gCo=o("MBartForCausalLM"),hCo=o(" (mBART model)"),pCo=l(),o2=a("li"),Yie=a("strong"),_Co=o("megatron-bert"),uCo=o(" \u2014 "),lj=a("a"),bCo=o("MegatronBertForCausalLM"),vCo=o(" (MegatronBert model)"),FCo=l(),r2=a("li"),Kie=a("strong"),TCo=o("openai-gpt"),MCo=o(" \u2014 "),ij=a("a"),ECo=o("OpenAIGPTLMHeadModel"),CCo=o(" (OpenAI GPT model)"),wCo=l(),t2=a("li"),Zie=a("strong"),ACo=o("opt"),yCo=o(" \u2014 "),dj=a("a"),LCo=o("OPTForCausalLM"),xCo=o(" (OPT model)"),$Co=l(),a2=a("li"),ede=a("strong"),kCo=o("pegasus"),SCo=o(" \u2014 "),cj=a("a"),RCo=o("PegasusForCausalLM"),PCo=o(" (Pegasus model)"),BCo=l(),n2=a("li"),ode=a("strong"),ICo=o("plbart"),qCo=o(" \u2014 "),fj=a("a"),NCo=o("PLBartForCausalLM"),jCo=o(" (PLBart model)"),DCo=l(),s2=a("li"),rde=a("strong"),GCo=o("prophetnet"),OCo=o(" \u2014 "),mj=a("a"),VCo=o("ProphetNetForCausalLM"),XCo=o(" (ProphetNet model)"),zCo=l(),l2=a("li"),tde=a("strong"),WCo=o("qdqbert"),QCo=o(" \u2014 "),gj=a("a"),HCo=o("QDQBertLMHeadModel"),UCo=o(" (QDQBert model)"),JCo=l(),i2=a("li"),ade=a("strong"),YCo=o("reformer"),KCo=o(" \u2014 "),hj=a("a"),ZCo=o("ReformerModelWithLMHead"),e5o=o(" (Reformer model)"),o5o=l(),d2=a("li"),nde=a("strong"),r5o=o("rembert"),t5o=o(" \u2014 "),pj=a("a"),a5o=o("RemBertForCausalLM"),n5o=o(" (RemBERT model)"),s5o=l(),c2=a("li"),sde=a("strong"),l5o=o("roberta"),i5o=o(" \u2014 "),_j=a("a"),d5o=o("RobertaForCausalLM"),c5o=o(" (RoBERTa model)"),f5o=l(),f2=a("li"),lde=a("strong"),m5o=o("roformer"),g5o=o(" \u2014 "),uj=a("a"),h5o=o("RoFormerForCausalLM"),p5o=o(" (RoFormer model)"),_5o=l(),m2=a("li"),ide=a("strong"),u5o=o("speech_to_text_2"),b5o=o(" \u2014 "),bj=a("a"),v5o=o("Speech2Text2ForCausalLM"),F5o=o(" (Speech2Text2 model)"),T5o=l(),g2=a("li"),dde=a("strong"),M5o=o("transfo-xl"),E5o=o(" \u2014 "),vj=a("a"),C5o=o("TransfoXLLMHeadModel"),w5o=o(" (Transformer-XL model)"),A5o=l(),h2=a("li"),cde=a("strong"),y5o=o("trocr"),L5o=o(" \u2014 "),Fj=a("a"),x5o=o("TrOCRForCausalLM"),$5o=o(" (TrOCR model)"),k5o=l(),p2=a("li"),fde=a("strong"),S5o=o("xglm"),R5o=o(" \u2014 "),Tj=a("a"),P5o=o("XGLMForCausalLM"),B5o=o(" (XGLM model)"),I5o=l(),_2=a("li"),mde=a("strong"),q5o=o("xlm"),N5o=o(" \u2014 "),Mj=a("a"),j5o=o("XLMWithLMHeadModel"),D5o=o(" (XLM model)"),G5o=l(),u2=a("li"),gde=a("strong"),O5o=o("xlm-prophetnet"),V5o=o(" \u2014 "),Ej=a("a"),X5o=o("XLMProphetNetForCausalLM"),z5o=o(" (XLMProphetNet model)"),W5o=l(),b2=a("li"),hde=a("strong"),Q5o=o("xlm-roberta"),H5o=o(" \u2014 "),Cj=a("a"),U5o=o("XLMRobertaForCausalLM"),J5o=o(" (XLM-RoBERTa model)"),Y5o=l(),v2=a("li"),pde=a("strong"),K5o=o("xlm-roberta-xl"),Z5o=o(" \u2014 "),wj=a("a"),e3o=o("XLMRobertaXLForCausalLM"),o3o=o(" (XLM-RoBERTa-XL model)"),r3o=l(),F2=a("li"),_de=a("strong"),t3o=o("xlnet"),a3o=o(" \u2014 "),Aj=a("a"),n3o=o("XLNetLMHeadModel"),s3o=o(" (XLNet model)"),l3o=l(),T2=a("p"),i3o=o("The model is set in evaluation mode by default using "),ude=a("code"),d3o=o("model.eval()"),c3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=a("code"),f3o=o("model.train()"),m3o=l(),F(M2.$$.fragment),sqe=l(),Ri=a("h2"),E2=a("a"),vde=a("span"),F(KA.$$.fragment),g3o=l(),Fde=a("span"),h3o=o("AutoModelForMaskedLM"),lqe=l(),ko=a("div"),F(ZA.$$.fragment),p3o=l(),Pi=a("p"),_3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yj=a("a"),u3o=o("from_pretrained()"),b3o=o(" class method or the "),Lj=a("a"),v3o=o("from_config()"),F3o=o(` class
method.`),T3o=l(),e6=a("p"),M3o=o("This class cannot be instantiated directly using "),Tde=a("code"),E3o=o("__init__()"),C3o=o(" (throws an error)."),w3o=l(),st=a("div"),F(o6.$$.fragment),A3o=l(),Mde=a("p"),y3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),L3o=l(),Bi=a("p"),x3o=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),$3o=o("not"),k3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),S3o=o("from_pretrained()"),R3o=o(" to load the model weights."),P3o=l(),F(C2.$$.fragment),B3o=l(),Ze=a("div"),F(r6.$$.fragment),I3o=l(),Cde=a("p"),q3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N3o=l(),ka=a("p"),j3o=o("The model class to instantiate is selected based on the "),wde=a("code"),D3o=o("model_type"),G3o=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),O3o=o("pretrained_model_name_or_path"),V3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),X3o=o("pretrained_model_name_or_path"),z3o=o(":"),W3o=l(),W=a("ul"),w2=a("li"),Lde=a("strong"),Q3o=o("albert"),H3o=o(" \u2014 "),$j=a("a"),U3o=o("AlbertForMaskedLM"),J3o=o(" (ALBERT model)"),Y3o=l(),A2=a("li"),xde=a("strong"),K3o=o("bart"),Z3o=o(" \u2014 "),kj=a("a"),ewo=o("BartForConditionalGeneration"),owo=o(" (BART model)"),rwo=l(),y2=a("li"),$de=a("strong"),two=o("bert"),awo=o(" \u2014 "),Sj=a("a"),nwo=o("BertForMaskedLM"),swo=o(" (BERT model)"),lwo=l(),L2=a("li"),kde=a("strong"),iwo=o("big_bird"),dwo=o(" \u2014 "),Rj=a("a"),cwo=o("BigBirdForMaskedLM"),fwo=o(" (BigBird model)"),mwo=l(),x2=a("li"),Sde=a("strong"),gwo=o("camembert"),hwo=o(" \u2014 "),Pj=a("a"),pwo=o("CamembertForMaskedLM"),_wo=o(" (CamemBERT model)"),uwo=l(),$2=a("li"),Rde=a("strong"),bwo=o("convbert"),vwo=o(" \u2014 "),Bj=a("a"),Fwo=o("ConvBertForMaskedLM"),Two=o(" (ConvBERT model)"),Mwo=l(),k2=a("li"),Pde=a("strong"),Ewo=o("data2vec-text"),Cwo=o(" \u2014 "),Ij=a("a"),wwo=o("Data2VecTextForMaskedLM"),Awo=o(" (Data2VecText model)"),ywo=l(),S2=a("li"),Bde=a("strong"),Lwo=o("deberta"),xwo=o(" \u2014 "),qj=a("a"),$wo=o("DebertaForMaskedLM"),kwo=o(" (DeBERTa model)"),Swo=l(),R2=a("li"),Ide=a("strong"),Rwo=o("deberta-v2"),Pwo=o(" \u2014 "),Nj=a("a"),Bwo=o("DebertaV2ForMaskedLM"),Iwo=o(" (DeBERTa-v2 model)"),qwo=l(),P2=a("li"),qde=a("strong"),Nwo=o("distilbert"),jwo=o(" \u2014 "),jj=a("a"),Dwo=o("DistilBertForMaskedLM"),Gwo=o(" (DistilBERT model)"),Owo=l(),B2=a("li"),Nde=a("strong"),Vwo=o("electra"),Xwo=o(" \u2014 "),Dj=a("a"),zwo=o("ElectraForMaskedLM"),Wwo=o(" (ELECTRA model)"),Qwo=l(),I2=a("li"),jde=a("strong"),Hwo=o("flaubert"),Uwo=o(" \u2014 "),Gj=a("a"),Jwo=o("FlaubertWithLMHeadModel"),Ywo=o(" (FlauBERT model)"),Kwo=l(),q2=a("li"),Dde=a("strong"),Zwo=o("fnet"),e0o=o(" \u2014 "),Oj=a("a"),o0o=o("FNetForMaskedLM"),r0o=o(" (FNet model)"),t0o=l(),N2=a("li"),Gde=a("strong"),a0o=o("funnel"),n0o=o(" \u2014 "),Vj=a("a"),s0o=o("FunnelForMaskedLM"),l0o=o(" (Funnel Transformer model)"),i0o=l(),j2=a("li"),Ode=a("strong"),d0o=o("ibert"),c0o=o(" \u2014 "),Xj=a("a"),f0o=o("IBertForMaskedLM"),m0o=o(" (I-BERT model)"),g0o=l(),D2=a("li"),Vde=a("strong"),h0o=o("layoutlm"),p0o=o(" \u2014 "),zj=a("a"),_0o=o("LayoutLMForMaskedLM"),u0o=o(" (LayoutLM model)"),b0o=l(),G2=a("li"),Xde=a("strong"),v0o=o("longformer"),F0o=o(" \u2014 "),Wj=a("a"),T0o=o("LongformerForMaskedLM"),M0o=o(" (Longformer model)"),E0o=l(),O2=a("li"),zde=a("strong"),C0o=o("mbart"),w0o=o(" \u2014 "),Qj=a("a"),A0o=o("MBartForConditionalGeneration"),y0o=o(" (mBART model)"),L0o=l(),V2=a("li"),Wde=a("strong"),x0o=o("megatron-bert"),$0o=o(" \u2014 "),Hj=a("a"),k0o=o("MegatronBertForMaskedLM"),S0o=o(" (MegatronBert model)"),R0o=l(),X2=a("li"),Qde=a("strong"),P0o=o("mobilebert"),B0o=o(" \u2014 "),Uj=a("a"),I0o=o("MobileBertForMaskedLM"),q0o=o(" (MobileBERT model)"),N0o=l(),z2=a("li"),Hde=a("strong"),j0o=o("mpnet"),D0o=o(" \u2014 "),Jj=a("a"),G0o=o("MPNetForMaskedLM"),O0o=o(" (MPNet model)"),V0o=l(),W2=a("li"),Ude=a("strong"),X0o=o("nystromformer"),z0o=o(" \u2014 "),Yj=a("a"),W0o=o("NystromformerForMaskedLM"),Q0o=o(" (Nystromformer model)"),H0o=l(),Q2=a("li"),Jde=a("strong"),U0o=o("perceiver"),J0o=o(" \u2014 "),Kj=a("a"),Y0o=o("PerceiverForMaskedLM"),K0o=o(" (Perceiver model)"),Z0o=l(),H2=a("li"),Yde=a("strong"),eAo=o("qdqbert"),oAo=o(" \u2014 "),Zj=a("a"),rAo=o("QDQBertForMaskedLM"),tAo=o(" (QDQBert model)"),aAo=l(),U2=a("li"),Kde=a("strong"),nAo=o("reformer"),sAo=o(" \u2014 "),eD=a("a"),lAo=o("ReformerForMaskedLM"),iAo=o(" (Reformer model)"),dAo=l(),J2=a("li"),Zde=a("strong"),cAo=o("rembert"),fAo=o(" \u2014 "),oD=a("a"),mAo=o("RemBertForMaskedLM"),gAo=o(" (RemBERT model)"),hAo=l(),Y2=a("li"),ece=a("strong"),pAo=o("roberta"),_Ao=o(" \u2014 "),rD=a("a"),uAo=o("RobertaForMaskedLM"),bAo=o(" (RoBERTa model)"),vAo=l(),K2=a("li"),oce=a("strong"),FAo=o("roformer"),TAo=o(" \u2014 "),tD=a("a"),MAo=o("RoFormerForMaskedLM"),EAo=o(" (RoFormer model)"),CAo=l(),Z2=a("li"),rce=a("strong"),wAo=o("squeezebert"),AAo=o(" \u2014 "),aD=a("a"),yAo=o("SqueezeBertForMaskedLM"),LAo=o(" (SqueezeBERT model)"),xAo=l(),e1=a("li"),tce=a("strong"),$Ao=o("tapas"),kAo=o(" \u2014 "),nD=a("a"),SAo=o("TapasForMaskedLM"),RAo=o(" (TAPAS model)"),PAo=l(),o1=a("li"),ace=a("strong"),BAo=o("wav2vec2"),IAo=o(" \u2014 "),nce=a("code"),qAo=o("Wav2Vec2ForMaskedLM"),NAo=o(" (Wav2Vec2 model)"),jAo=l(),r1=a("li"),sce=a("strong"),DAo=o("xlm"),GAo=o(" \u2014 "),sD=a("a"),OAo=o("XLMWithLMHeadModel"),VAo=o(" (XLM model)"),XAo=l(),t1=a("li"),lce=a("strong"),zAo=o("xlm-roberta"),WAo=o(" \u2014 "),lD=a("a"),QAo=o("XLMRobertaForMaskedLM"),HAo=o(" (XLM-RoBERTa model)"),UAo=l(),a1=a("li"),ice=a("strong"),JAo=o("xlm-roberta-xl"),YAo=o(" \u2014 "),iD=a("a"),KAo=o("XLMRobertaXLForMaskedLM"),ZAo=o(" (XLM-RoBERTa-XL model)"),e6o=l(),n1=a("li"),dce=a("strong"),o6o=o("yoso"),r6o=o(" \u2014 "),dD=a("a"),t6o=o("YosoForMaskedLM"),a6o=o(" (YOSO model)"),n6o=l(),s1=a("p"),s6o=o("The model is set in evaluation mode by default using "),cce=a("code"),l6o=o("model.eval()"),i6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),d6o=o("model.train()"),c6o=l(),F(l1.$$.fragment),iqe=l(),Ii=a("h2"),i1=a("a"),mce=a("span"),F(t6.$$.fragment),f6o=l(),gce=a("span"),m6o=o("AutoModelForSeq2SeqLM"),dqe=l(),So=a("div"),F(a6.$$.fragment),g6o=l(),qi=a("p"),h6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cD=a("a"),p6o=o("from_pretrained()"),_6o=o(" class method or the "),fD=a("a"),u6o=o("from_config()"),b6o=o(` class
method.`),v6o=l(),n6=a("p"),F6o=o("This class cannot be instantiated directly using "),hce=a("code"),T6o=o("__init__()"),M6o=o(" (throws an error)."),E6o=l(),lt=a("div"),F(s6.$$.fragment),C6o=l(),pce=a("p"),w6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A6o=l(),Ni=a("p"),y6o=o(`Note:
Loading a model from its configuration file does `),_ce=a("strong"),L6o=o("not"),x6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),$6o=o("from_pretrained()"),k6o=o(" to load the model weights."),S6o=l(),F(d1.$$.fragment),R6o=l(),eo=a("div"),F(l6.$$.fragment),P6o=l(),uce=a("p"),B6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I6o=l(),Sa=a("p"),q6o=o("The model class to instantiate is selected based on the "),bce=a("code"),N6o=o("model_type"),j6o=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),D6o=o("pretrained_model_name_or_path"),G6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),O6o=o("pretrained_model_name_or_path"),V6o=o(":"),X6o=l(),_e=a("ul"),c1=a("li"),Tce=a("strong"),z6o=o("bart"),W6o=o(" \u2014 "),gD=a("a"),Q6o=o("BartForConditionalGeneration"),H6o=o(" (BART model)"),U6o=l(),f1=a("li"),Mce=a("strong"),J6o=o("bigbird_pegasus"),Y6o=o(" \u2014 "),hD=a("a"),K6o=o("BigBirdPegasusForConditionalGeneration"),Z6o=o(" (BigBirdPegasus model)"),eyo=l(),m1=a("li"),Ece=a("strong"),oyo=o("blenderbot"),ryo=o(" \u2014 "),pD=a("a"),tyo=o("BlenderbotForConditionalGeneration"),ayo=o(" (Blenderbot model)"),nyo=l(),g1=a("li"),Cce=a("strong"),syo=o("blenderbot-small"),lyo=o(" \u2014 "),_D=a("a"),iyo=o("BlenderbotSmallForConditionalGeneration"),dyo=o(" (BlenderbotSmall model)"),cyo=l(),h1=a("li"),wce=a("strong"),fyo=o("encoder-decoder"),myo=o(" \u2014 "),uD=a("a"),gyo=o("EncoderDecoderModel"),hyo=o(" (Encoder decoder model)"),pyo=l(),p1=a("li"),Ace=a("strong"),_yo=o("fsmt"),uyo=o(" \u2014 "),bD=a("a"),byo=o("FSMTForConditionalGeneration"),vyo=o(" (FairSeq Machine-Translation model)"),Fyo=l(),_1=a("li"),yce=a("strong"),Tyo=o("led"),Myo=o(" \u2014 "),vD=a("a"),Eyo=o("LEDForConditionalGeneration"),Cyo=o(" (LED model)"),wyo=l(),u1=a("li"),Lce=a("strong"),Ayo=o("m2m_100"),yyo=o(" \u2014 "),FD=a("a"),Lyo=o("M2M100ForConditionalGeneration"),xyo=o(" (M2M100 model)"),$yo=l(),b1=a("li"),xce=a("strong"),kyo=o("marian"),Syo=o(" \u2014 "),TD=a("a"),Ryo=o("MarianMTModel"),Pyo=o(" (Marian model)"),Byo=l(),v1=a("li"),$ce=a("strong"),Iyo=o("mbart"),qyo=o(" \u2014 "),MD=a("a"),Nyo=o("MBartForConditionalGeneration"),jyo=o(" (mBART model)"),Dyo=l(),F1=a("li"),kce=a("strong"),Gyo=o("mt5"),Oyo=o(" \u2014 "),ED=a("a"),Vyo=o("MT5ForConditionalGeneration"),Xyo=o(" (mT5 model)"),zyo=l(),T1=a("li"),Sce=a("strong"),Wyo=o("pegasus"),Qyo=o(" \u2014 "),CD=a("a"),Hyo=o("PegasusForConditionalGeneration"),Uyo=o(" (Pegasus model)"),Jyo=l(),M1=a("li"),Rce=a("strong"),Yyo=o("plbart"),Kyo=o(" \u2014 "),wD=a("a"),Zyo=o("PLBartForConditionalGeneration"),eLo=o(" (PLBart model)"),oLo=l(),E1=a("li"),Pce=a("strong"),rLo=o("prophetnet"),tLo=o(" \u2014 "),AD=a("a"),aLo=o("ProphetNetForConditionalGeneration"),nLo=o(" (ProphetNet model)"),sLo=l(),C1=a("li"),Bce=a("strong"),lLo=o("t5"),iLo=o(" \u2014 "),yD=a("a"),dLo=o("T5ForConditionalGeneration"),cLo=o(" (T5 model)"),fLo=l(),w1=a("li"),Ice=a("strong"),mLo=o("xlm-prophetnet"),gLo=o(" \u2014 "),LD=a("a"),hLo=o("XLMProphetNetForConditionalGeneration"),pLo=o(" (XLMProphetNet model)"),_Lo=l(),A1=a("p"),uLo=o("The model is set in evaluation mode by default using "),qce=a("code"),bLo=o("model.eval()"),vLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),FLo=o("model.train()"),TLo=l(),F(y1.$$.fragment),cqe=l(),ji=a("h2"),L1=a("a"),jce=a("span"),F(i6.$$.fragment),MLo=l(),Dce=a("span"),ELo=o("AutoModelForSequenceClassification"),fqe=l(),Ro=a("div"),F(d6.$$.fragment),CLo=l(),Di=a("p"),wLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xD=a("a"),ALo=o("from_pretrained()"),yLo=o(" class method or the "),$D=a("a"),LLo=o("from_config()"),xLo=o(` class
method.`),$Lo=l(),c6=a("p"),kLo=o("This class cannot be instantiated directly using "),Gce=a("code"),SLo=o("__init__()"),RLo=o(" (throws an error)."),PLo=l(),it=a("div"),F(f6.$$.fragment),BLo=l(),Oce=a("p"),ILo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qLo=l(),Gi=a("p"),NLo=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),jLo=o("not"),DLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=a("a"),GLo=o("from_pretrained()"),OLo=o(" to load the model weights."),VLo=l(),F(x1.$$.fragment),XLo=l(),oo=a("div"),F(m6.$$.fragment),zLo=l(),Xce=a("p"),WLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QLo=l(),Ra=a("p"),HLo=o("The model class to instantiate is selected based on the "),zce=a("code"),ULo=o("model_type"),JLo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),YLo=o("pretrained_model_name_or_path"),KLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),ZLo=o("pretrained_model_name_or_path"),e8o=o(":"),o8o=l(),q=a("ul"),$1=a("li"),Hce=a("strong"),r8o=o("albert"),t8o=o(" \u2014 "),SD=a("a"),a8o=o("AlbertForSequenceClassification"),n8o=o(" (ALBERT model)"),s8o=l(),k1=a("li"),Uce=a("strong"),l8o=o("bart"),i8o=o(" \u2014 "),RD=a("a"),d8o=o("BartForSequenceClassification"),c8o=o(" (BART model)"),f8o=l(),S1=a("li"),Jce=a("strong"),m8o=o("bert"),g8o=o(" \u2014 "),PD=a("a"),h8o=o("BertForSequenceClassification"),p8o=o(" (BERT model)"),_8o=l(),R1=a("li"),Yce=a("strong"),u8o=o("big_bird"),b8o=o(" \u2014 "),BD=a("a"),v8o=o("BigBirdForSequenceClassification"),F8o=o(" (BigBird model)"),T8o=l(),P1=a("li"),Kce=a("strong"),M8o=o("bigbird_pegasus"),E8o=o(" \u2014 "),ID=a("a"),C8o=o("BigBirdPegasusForSequenceClassification"),w8o=o(" (BigBirdPegasus model)"),A8o=l(),B1=a("li"),Zce=a("strong"),y8o=o("camembert"),L8o=o(" \u2014 "),qD=a("a"),x8o=o("CamembertForSequenceClassification"),$8o=o(" (CamemBERT model)"),k8o=l(),I1=a("li"),efe=a("strong"),S8o=o("canine"),R8o=o(" \u2014 "),ND=a("a"),P8o=o("CanineForSequenceClassification"),B8o=o(" (Canine model)"),I8o=l(),q1=a("li"),ofe=a("strong"),q8o=o("convbert"),N8o=o(" \u2014 "),jD=a("a"),j8o=o("ConvBertForSequenceClassification"),D8o=o(" (ConvBERT model)"),G8o=l(),N1=a("li"),rfe=a("strong"),O8o=o("ctrl"),V8o=o(" \u2014 "),DD=a("a"),X8o=o("CTRLForSequenceClassification"),z8o=o(" (CTRL model)"),W8o=l(),j1=a("li"),tfe=a("strong"),Q8o=o("data2vec-text"),H8o=o(" \u2014 "),GD=a("a"),U8o=o("Data2VecTextForSequenceClassification"),J8o=o(" (Data2VecText model)"),Y8o=l(),D1=a("li"),afe=a("strong"),K8o=o("deberta"),Z8o=o(" \u2014 "),OD=a("a"),exo=o("DebertaForSequenceClassification"),oxo=o(" (DeBERTa model)"),rxo=l(),G1=a("li"),nfe=a("strong"),txo=o("deberta-v2"),axo=o(" \u2014 "),VD=a("a"),nxo=o("DebertaV2ForSequenceClassification"),sxo=o(" (DeBERTa-v2 model)"),lxo=l(),O1=a("li"),sfe=a("strong"),ixo=o("distilbert"),dxo=o(" \u2014 "),XD=a("a"),cxo=o("DistilBertForSequenceClassification"),fxo=o(" (DistilBERT model)"),mxo=l(),V1=a("li"),lfe=a("strong"),gxo=o("electra"),hxo=o(" \u2014 "),zD=a("a"),pxo=o("ElectraForSequenceClassification"),_xo=o(" (ELECTRA model)"),uxo=l(),X1=a("li"),ife=a("strong"),bxo=o("flaubert"),vxo=o(" \u2014 "),WD=a("a"),Fxo=o("FlaubertForSequenceClassification"),Txo=o(" (FlauBERT model)"),Mxo=l(),z1=a("li"),dfe=a("strong"),Exo=o("fnet"),Cxo=o(" \u2014 "),QD=a("a"),wxo=o("FNetForSequenceClassification"),Axo=o(" (FNet model)"),yxo=l(),W1=a("li"),cfe=a("strong"),Lxo=o("funnel"),xxo=o(" \u2014 "),HD=a("a"),$xo=o("FunnelForSequenceClassification"),kxo=o(" (Funnel Transformer model)"),Sxo=l(),Q1=a("li"),ffe=a("strong"),Rxo=o("gpt2"),Pxo=o(" \u2014 "),UD=a("a"),Bxo=o("GPT2ForSequenceClassification"),Ixo=o(" (OpenAI GPT-2 model)"),qxo=l(),H1=a("li"),mfe=a("strong"),Nxo=o("gpt_neo"),jxo=o(" \u2014 "),JD=a("a"),Dxo=o("GPTNeoForSequenceClassification"),Gxo=o(" (GPT Neo model)"),Oxo=l(),U1=a("li"),gfe=a("strong"),Vxo=o("gptj"),Xxo=o(" \u2014 "),YD=a("a"),zxo=o("GPTJForSequenceClassification"),Wxo=o(" (GPT-J model)"),Qxo=l(),J1=a("li"),hfe=a("strong"),Hxo=o("ibert"),Uxo=o(" \u2014 "),KD=a("a"),Jxo=o("IBertForSequenceClassification"),Yxo=o(" (I-BERT model)"),Kxo=l(),Y1=a("li"),pfe=a("strong"),Zxo=o("layoutlm"),e$o=o(" \u2014 "),ZD=a("a"),o$o=o("LayoutLMForSequenceClassification"),r$o=o(" (LayoutLM model)"),t$o=l(),K1=a("li"),_fe=a("strong"),a$o=o("layoutlmv2"),n$o=o(" \u2014 "),eG=a("a"),s$o=o("LayoutLMv2ForSequenceClassification"),l$o=o(" (LayoutLMv2 model)"),i$o=l(),Z1=a("li"),ufe=a("strong"),d$o=o("led"),c$o=o(" \u2014 "),oG=a("a"),f$o=o("LEDForSequenceClassification"),m$o=o(" (LED model)"),g$o=l(),e9=a("li"),bfe=a("strong"),h$o=o("longformer"),p$o=o(" \u2014 "),rG=a("a"),_$o=o("LongformerForSequenceClassification"),u$o=o(" (Longformer model)"),b$o=l(),o9=a("li"),vfe=a("strong"),v$o=o("mbart"),F$o=o(" \u2014 "),tG=a("a"),T$o=o("MBartForSequenceClassification"),M$o=o(" (mBART model)"),E$o=l(),r9=a("li"),Ffe=a("strong"),C$o=o("megatron-bert"),w$o=o(" \u2014 "),aG=a("a"),A$o=o("MegatronBertForSequenceClassification"),y$o=o(" (MegatronBert model)"),L$o=l(),t9=a("li"),Tfe=a("strong"),x$o=o("mobilebert"),$$o=o(" \u2014 "),nG=a("a"),k$o=o("MobileBertForSequenceClassification"),S$o=o(" (MobileBERT model)"),R$o=l(),a9=a("li"),Mfe=a("strong"),P$o=o("mpnet"),B$o=o(" \u2014 "),sG=a("a"),I$o=o("MPNetForSequenceClassification"),q$o=o(" (MPNet model)"),N$o=l(),n9=a("li"),Efe=a("strong"),j$o=o("nystromformer"),D$o=o(" \u2014 "),lG=a("a"),G$o=o("NystromformerForSequenceClassification"),O$o=o(" (Nystromformer model)"),V$o=l(),s9=a("li"),Cfe=a("strong"),X$o=o("openai-gpt"),z$o=o(" \u2014 "),iG=a("a"),W$o=o("OpenAIGPTForSequenceClassification"),Q$o=o(" (OpenAI GPT model)"),H$o=l(),l9=a("li"),wfe=a("strong"),U$o=o("perceiver"),J$o=o(" \u2014 "),dG=a("a"),Y$o=o("PerceiverForSequenceClassification"),K$o=o(" (Perceiver model)"),Z$o=l(),i9=a("li"),Afe=a("strong"),eko=o("plbart"),oko=o(" \u2014 "),cG=a("a"),rko=o("PLBartForSequenceClassification"),tko=o(" (PLBart model)"),ako=l(),d9=a("li"),yfe=a("strong"),nko=o("qdqbert"),sko=o(" \u2014 "),fG=a("a"),lko=o("QDQBertForSequenceClassification"),iko=o(" (QDQBert model)"),dko=l(),c9=a("li"),Lfe=a("strong"),cko=o("reformer"),fko=o(" \u2014 "),mG=a("a"),mko=o("ReformerForSequenceClassification"),gko=o(" (Reformer model)"),hko=l(),f9=a("li"),xfe=a("strong"),pko=o("rembert"),_ko=o(" \u2014 "),gG=a("a"),uko=o("RemBertForSequenceClassification"),bko=o(" (RemBERT model)"),vko=l(),m9=a("li"),$fe=a("strong"),Fko=o("roberta"),Tko=o(" \u2014 "),hG=a("a"),Mko=o("RobertaForSequenceClassification"),Eko=o(" (RoBERTa model)"),Cko=l(),g9=a("li"),kfe=a("strong"),wko=o("roformer"),Ako=o(" \u2014 "),pG=a("a"),yko=o("RoFormerForSequenceClassification"),Lko=o(" (RoFormer model)"),xko=l(),h9=a("li"),Sfe=a("strong"),$ko=o("squeezebert"),kko=o(" \u2014 "),_G=a("a"),Sko=o("SqueezeBertForSequenceClassification"),Rko=o(" (SqueezeBERT model)"),Pko=l(),p9=a("li"),Rfe=a("strong"),Bko=o("tapas"),Iko=o(" \u2014 "),uG=a("a"),qko=o("TapasForSequenceClassification"),Nko=o(" (TAPAS model)"),jko=l(),_9=a("li"),Pfe=a("strong"),Dko=o("transfo-xl"),Gko=o(" \u2014 "),bG=a("a"),Oko=o("TransfoXLForSequenceClassification"),Vko=o(" (Transformer-XL model)"),Xko=l(),u9=a("li"),Bfe=a("strong"),zko=o("xlm"),Wko=o(" \u2014 "),vG=a("a"),Qko=o("XLMForSequenceClassification"),Hko=o(" (XLM model)"),Uko=l(),b9=a("li"),Ife=a("strong"),Jko=o("xlm-roberta"),Yko=o(" \u2014 "),FG=a("a"),Kko=o("XLMRobertaForSequenceClassification"),Zko=o(" (XLM-RoBERTa model)"),eSo=l(),v9=a("li"),qfe=a("strong"),oSo=o("xlm-roberta-xl"),rSo=o(" \u2014 "),TG=a("a"),tSo=o("XLMRobertaXLForSequenceClassification"),aSo=o(" (XLM-RoBERTa-XL model)"),nSo=l(),F9=a("li"),Nfe=a("strong"),sSo=o("xlnet"),lSo=o(" \u2014 "),MG=a("a"),iSo=o("XLNetForSequenceClassification"),dSo=o(" (XLNet model)"),cSo=l(),T9=a("li"),jfe=a("strong"),fSo=o("yoso"),mSo=o(" \u2014 "),EG=a("a"),gSo=o("YosoForSequenceClassification"),hSo=o(" (YOSO model)"),pSo=l(),M9=a("p"),_So=o("The model is set in evaluation mode by default using "),Dfe=a("code"),uSo=o("model.eval()"),bSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),vSo=o("model.train()"),FSo=l(),F(E9.$$.fragment),mqe=l(),Oi=a("h2"),C9=a("a"),Ofe=a("span"),F(g6.$$.fragment),TSo=l(),Vfe=a("span"),MSo=o("AutoModelForMultipleChoice"),gqe=l(),Po=a("div"),F(h6.$$.fragment),ESo=l(),Vi=a("p"),CSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CG=a("a"),wSo=o("from_pretrained()"),ASo=o(" class method or the "),wG=a("a"),ySo=o("from_config()"),LSo=o(` class
method.`),xSo=l(),p6=a("p"),$So=o("This class cannot be instantiated directly using "),Xfe=a("code"),kSo=o("__init__()"),SSo=o(" (throws an error)."),RSo=l(),dt=a("div"),F(_6.$$.fragment),PSo=l(),zfe=a("p"),BSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ISo=l(),Xi=a("p"),qSo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),NSo=o("not"),jSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),DSo=o("from_pretrained()"),GSo=o(" to load the model weights."),OSo=l(),F(w9.$$.fragment),VSo=l(),ro=a("div"),F(u6.$$.fragment),XSo=l(),Qfe=a("p"),zSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WSo=l(),Pa=a("p"),QSo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),HSo=o("model_type"),USo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),JSo=o("pretrained_model_name_or_path"),YSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),KSo=o("pretrained_model_name_or_path"),ZSo=o(":"),eRo=l(),Y=a("ul"),A9=a("li"),Yfe=a("strong"),oRo=o("albert"),rRo=o(" \u2014 "),yG=a("a"),tRo=o("AlbertForMultipleChoice"),aRo=o(" (ALBERT model)"),nRo=l(),y9=a("li"),Kfe=a("strong"),sRo=o("bert"),lRo=o(" \u2014 "),LG=a("a"),iRo=o("BertForMultipleChoice"),dRo=o(" (BERT model)"),cRo=l(),L9=a("li"),Zfe=a("strong"),fRo=o("big_bird"),mRo=o(" \u2014 "),xG=a("a"),gRo=o("BigBirdForMultipleChoice"),hRo=o(" (BigBird model)"),pRo=l(),x9=a("li"),eme=a("strong"),_Ro=o("camembert"),uRo=o(" \u2014 "),$G=a("a"),bRo=o("CamembertForMultipleChoice"),vRo=o(" (CamemBERT model)"),FRo=l(),$9=a("li"),ome=a("strong"),TRo=o("canine"),MRo=o(" \u2014 "),kG=a("a"),ERo=o("CanineForMultipleChoice"),CRo=o(" (Canine model)"),wRo=l(),k9=a("li"),rme=a("strong"),ARo=o("convbert"),yRo=o(" \u2014 "),SG=a("a"),LRo=o("ConvBertForMultipleChoice"),xRo=o(" (ConvBERT model)"),$Ro=l(),S9=a("li"),tme=a("strong"),kRo=o("data2vec-text"),SRo=o(" \u2014 "),RG=a("a"),RRo=o("Data2VecTextForMultipleChoice"),PRo=o(" (Data2VecText model)"),BRo=l(),R9=a("li"),ame=a("strong"),IRo=o("deberta-v2"),qRo=o(" \u2014 "),PG=a("a"),NRo=o("DebertaV2ForMultipleChoice"),jRo=o(" (DeBERTa-v2 model)"),DRo=l(),P9=a("li"),nme=a("strong"),GRo=o("distilbert"),ORo=o(" \u2014 "),BG=a("a"),VRo=o("DistilBertForMultipleChoice"),XRo=o(" (DistilBERT model)"),zRo=l(),B9=a("li"),sme=a("strong"),WRo=o("electra"),QRo=o(" \u2014 "),IG=a("a"),HRo=o("ElectraForMultipleChoice"),URo=o(" (ELECTRA model)"),JRo=l(),I9=a("li"),lme=a("strong"),YRo=o("flaubert"),KRo=o(" \u2014 "),qG=a("a"),ZRo=o("FlaubertForMultipleChoice"),ePo=o(" (FlauBERT model)"),oPo=l(),q9=a("li"),ime=a("strong"),rPo=o("fnet"),tPo=o(" \u2014 "),NG=a("a"),aPo=o("FNetForMultipleChoice"),nPo=o(" (FNet model)"),sPo=l(),N9=a("li"),dme=a("strong"),lPo=o("funnel"),iPo=o(" \u2014 "),jG=a("a"),dPo=o("FunnelForMultipleChoice"),cPo=o(" (Funnel Transformer model)"),fPo=l(),j9=a("li"),cme=a("strong"),mPo=o("ibert"),gPo=o(" \u2014 "),DG=a("a"),hPo=o("IBertForMultipleChoice"),pPo=o(" (I-BERT model)"),_Po=l(),D9=a("li"),fme=a("strong"),uPo=o("longformer"),bPo=o(" \u2014 "),GG=a("a"),vPo=o("LongformerForMultipleChoice"),FPo=o(" (Longformer model)"),TPo=l(),G9=a("li"),mme=a("strong"),MPo=o("megatron-bert"),EPo=o(" \u2014 "),OG=a("a"),CPo=o("MegatronBertForMultipleChoice"),wPo=o(" (MegatronBert model)"),APo=l(),O9=a("li"),gme=a("strong"),yPo=o("mobilebert"),LPo=o(" \u2014 "),VG=a("a"),xPo=o("MobileBertForMultipleChoice"),$Po=o(" (MobileBERT model)"),kPo=l(),V9=a("li"),hme=a("strong"),SPo=o("mpnet"),RPo=o(" \u2014 "),XG=a("a"),PPo=o("MPNetForMultipleChoice"),BPo=o(" (MPNet model)"),IPo=l(),X9=a("li"),pme=a("strong"),qPo=o("nystromformer"),NPo=o(" \u2014 "),zG=a("a"),jPo=o("NystromformerForMultipleChoice"),DPo=o(" (Nystromformer model)"),GPo=l(),z9=a("li"),_me=a("strong"),OPo=o("qdqbert"),VPo=o(" \u2014 "),WG=a("a"),XPo=o("QDQBertForMultipleChoice"),zPo=o(" (QDQBert model)"),WPo=l(),W9=a("li"),ume=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),QG=a("a"),UPo=o("RemBertForMultipleChoice"),JPo=o(" (RemBERT model)"),YPo=l(),Q9=a("li"),bme=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),HG=a("a"),eBo=o("RobertaForMultipleChoice"),oBo=o(" (RoBERTa model)"),rBo=l(),H9=a("li"),vme=a("strong"),tBo=o("roformer"),aBo=o(" \u2014 "),UG=a("a"),nBo=o("RoFormerForMultipleChoice"),sBo=o(" (RoFormer model)"),lBo=l(),U9=a("li"),Fme=a("strong"),iBo=o("squeezebert"),dBo=o(" \u2014 "),JG=a("a"),cBo=o("SqueezeBertForMultipleChoice"),fBo=o(" (SqueezeBERT model)"),mBo=l(),J9=a("li"),Tme=a("strong"),gBo=o("xlm"),hBo=o(" \u2014 "),YG=a("a"),pBo=o("XLMForMultipleChoice"),_Bo=o(" (XLM model)"),uBo=l(),Y9=a("li"),Mme=a("strong"),bBo=o("xlm-roberta"),vBo=o(" \u2014 "),KG=a("a"),FBo=o("XLMRobertaForMultipleChoice"),TBo=o(" (XLM-RoBERTa model)"),MBo=l(),K9=a("li"),Eme=a("strong"),EBo=o("xlm-roberta-xl"),CBo=o(" \u2014 "),ZG=a("a"),wBo=o("XLMRobertaXLForMultipleChoice"),ABo=o(" (XLM-RoBERTa-XL model)"),yBo=l(),Z9=a("li"),Cme=a("strong"),LBo=o("xlnet"),xBo=o(" \u2014 "),eO=a("a"),$Bo=o("XLNetForMultipleChoice"),kBo=o(" (XLNet model)"),SBo=l(),eb=a("li"),wme=a("strong"),RBo=o("yoso"),PBo=o(" \u2014 "),oO=a("a"),BBo=o("YosoForMultipleChoice"),IBo=o(" (YOSO model)"),qBo=l(),ob=a("p"),NBo=o("The model is set in evaluation mode by default using "),Ame=a("code"),jBo=o("model.eval()"),DBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),GBo=o("model.train()"),OBo=l(),F(rb.$$.fragment),hqe=l(),zi=a("h2"),tb=a("a"),Lme=a("span"),F(b6.$$.fragment),VBo=l(),xme=a("span"),XBo=o("AutoModelForNextSentencePrediction"),pqe=l(),Bo=a("div"),F(v6.$$.fragment),zBo=l(),Wi=a("p"),WBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rO=a("a"),QBo=o("from_pretrained()"),HBo=o(" class method or the "),tO=a("a"),UBo=o("from_config()"),JBo=o(` class
method.`),YBo=l(),F6=a("p"),KBo=o("This class cannot be instantiated directly using "),$me=a("code"),ZBo=o("__init__()"),eIo=o(" (throws an error)."),oIo=l(),ct=a("div"),F(T6.$$.fragment),rIo=l(),kme=a("p"),tIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aIo=l(),Qi=a("p"),nIo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),sIo=o("not"),lIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),iIo=o("from_pretrained()"),dIo=o(" to load the model weights."),cIo=l(),F(ab.$$.fragment),fIo=l(),to=a("div"),F(M6.$$.fragment),mIo=l(),Rme=a("p"),gIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hIo=l(),Ba=a("p"),pIo=o("The model class to instantiate is selected based on the "),Pme=a("code"),_Io=o("model_type"),uIo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(":"),MIo=l(),Yr=a("ul"),nb=a("li"),qme=a("strong"),EIo=o("bert"),CIo=o(" \u2014 "),nO=a("a"),wIo=o("BertForNextSentencePrediction"),AIo=o(" (BERT model)"),yIo=l(),sb=a("li"),Nme=a("strong"),LIo=o("fnet"),xIo=o(" \u2014 "),sO=a("a"),$Io=o("FNetForNextSentencePrediction"),kIo=o(" (FNet model)"),SIo=l(),lb=a("li"),jme=a("strong"),RIo=o("megatron-bert"),PIo=o(" \u2014 "),lO=a("a"),BIo=o("MegatronBertForNextSentencePrediction"),IIo=o(" (MegatronBert model)"),qIo=l(),ib=a("li"),Dme=a("strong"),NIo=o("mobilebert"),jIo=o(" \u2014 "),iO=a("a"),DIo=o("MobileBertForNextSentencePrediction"),GIo=o(" (MobileBERT model)"),OIo=l(),db=a("li"),Gme=a("strong"),VIo=o("qdqbert"),XIo=o(" \u2014 "),dO=a("a"),zIo=o("QDQBertForNextSentencePrediction"),WIo=o(" (QDQBert model)"),QIo=l(),cb=a("p"),HIo=o("The model is set in evaluation mode by default using "),Ome=a("code"),UIo=o("model.eval()"),JIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=a("code"),YIo=o("model.train()"),KIo=l(),F(fb.$$.fragment),_qe=l(),Hi=a("h2"),mb=a("a"),Xme=a("span"),F(E6.$$.fragment),ZIo=l(),zme=a("span"),eqo=o("AutoModelForTokenClassification"),uqe=l(),Io=a("div"),F(C6.$$.fragment),oqo=l(),Ui=a("p"),rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cO=a("a"),tqo=o("from_pretrained()"),aqo=o(" class method or the "),fO=a("a"),nqo=o("from_config()"),sqo=o(` class
method.`),lqo=l(),w6=a("p"),iqo=o("This class cannot be instantiated directly using "),Wme=a("code"),dqo=o("__init__()"),cqo=o(" (throws an error)."),fqo=l(),ft=a("div"),F(A6.$$.fragment),mqo=l(),Qme=a("p"),gqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hqo=l(),Ji=a("p"),pqo=o(`Note:
Loading a model from its configuration file does `),Hme=a("strong"),_qo=o("not"),uqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),bqo=o("from_pretrained()"),vqo=o(" to load the model weights."),Fqo=l(),F(gb.$$.fragment),Tqo=l(),ao=a("div"),F(y6.$$.fragment),Mqo=l(),Ume=a("p"),Eqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cqo=l(),Ia=a("p"),wqo=o("The model class to instantiate is selected based on the "),Jme=a("code"),Aqo=o("model_type"),yqo=o(` property of the config object (either
passed as an argument or loaded from `),Yme=a("code"),Lqo=o("pretrained_model_name_or_path"),xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=a("code"),$qo=o("pretrained_model_name_or_path"),kqo=o(":"),Sqo=l(),U=a("ul"),hb=a("li"),Zme=a("strong"),Rqo=o("albert"),Pqo=o(" \u2014 "),gO=a("a"),Bqo=o("AlbertForTokenClassification"),Iqo=o(" (ALBERT model)"),qqo=l(),pb=a("li"),ege=a("strong"),Nqo=o("bert"),jqo=o(" \u2014 "),hO=a("a"),Dqo=o("BertForTokenClassification"),Gqo=o(" (BERT model)"),Oqo=l(),_b=a("li"),oge=a("strong"),Vqo=o("big_bird"),Xqo=o(" \u2014 "),pO=a("a"),zqo=o("BigBirdForTokenClassification"),Wqo=o(" (BigBird model)"),Qqo=l(),ub=a("li"),rge=a("strong"),Hqo=o("camembert"),Uqo=o(" \u2014 "),_O=a("a"),Jqo=o("CamembertForTokenClassification"),Yqo=o(" (CamemBERT model)"),Kqo=l(),bb=a("li"),tge=a("strong"),Zqo=o("canine"),eNo=o(" \u2014 "),uO=a("a"),oNo=o("CanineForTokenClassification"),rNo=o(" (Canine model)"),tNo=l(),vb=a("li"),age=a("strong"),aNo=o("convbert"),nNo=o(" \u2014 "),bO=a("a"),sNo=o("ConvBertForTokenClassification"),lNo=o(" (ConvBERT model)"),iNo=l(),Fb=a("li"),nge=a("strong"),dNo=o("data2vec-text"),cNo=o(" \u2014 "),vO=a("a"),fNo=o("Data2VecTextForTokenClassification"),mNo=o(" (Data2VecText model)"),gNo=l(),Tb=a("li"),sge=a("strong"),hNo=o("deberta"),pNo=o(" \u2014 "),FO=a("a"),_No=o("DebertaForTokenClassification"),uNo=o(" (DeBERTa model)"),bNo=l(),Mb=a("li"),lge=a("strong"),vNo=o("deberta-v2"),FNo=o(" \u2014 "),TO=a("a"),TNo=o("DebertaV2ForTokenClassification"),MNo=o(" (DeBERTa-v2 model)"),ENo=l(),Eb=a("li"),ige=a("strong"),CNo=o("distilbert"),wNo=o(" \u2014 "),MO=a("a"),ANo=o("DistilBertForTokenClassification"),yNo=o(" (DistilBERT model)"),LNo=l(),Cb=a("li"),dge=a("strong"),xNo=o("electra"),$No=o(" \u2014 "),EO=a("a"),kNo=o("ElectraForTokenClassification"),SNo=o(" (ELECTRA model)"),RNo=l(),wb=a("li"),cge=a("strong"),PNo=o("flaubert"),BNo=o(" \u2014 "),CO=a("a"),INo=o("FlaubertForTokenClassification"),qNo=o(" (FlauBERT model)"),NNo=l(),Ab=a("li"),fge=a("strong"),jNo=o("fnet"),DNo=o(" \u2014 "),wO=a("a"),GNo=o("FNetForTokenClassification"),ONo=o(" (FNet model)"),VNo=l(),yb=a("li"),mge=a("strong"),XNo=o("funnel"),zNo=o(" \u2014 "),AO=a("a"),WNo=o("FunnelForTokenClassification"),QNo=o(" (Funnel Transformer model)"),HNo=l(),Lb=a("li"),gge=a("strong"),UNo=o("gpt2"),JNo=o(" \u2014 "),yO=a("a"),YNo=o("GPT2ForTokenClassification"),KNo=o(" (OpenAI GPT-2 model)"),ZNo=l(),xb=a("li"),hge=a("strong"),ejo=o("ibert"),ojo=o(" \u2014 "),LO=a("a"),rjo=o("IBertForTokenClassification"),tjo=o(" (I-BERT model)"),ajo=l(),$b=a("li"),pge=a("strong"),njo=o("layoutlm"),sjo=o(" \u2014 "),xO=a("a"),ljo=o("LayoutLMForTokenClassification"),ijo=o(" (LayoutLM model)"),djo=l(),kb=a("li"),_ge=a("strong"),cjo=o("layoutlmv2"),fjo=o(" \u2014 "),$O=a("a"),mjo=o("LayoutLMv2ForTokenClassification"),gjo=o(" (LayoutLMv2 model)"),hjo=l(),Sb=a("li"),uge=a("strong"),pjo=o("longformer"),_jo=o(" \u2014 "),kO=a("a"),ujo=o("LongformerForTokenClassification"),bjo=o(" (Longformer model)"),vjo=l(),Rb=a("li"),bge=a("strong"),Fjo=o("megatron-bert"),Tjo=o(" \u2014 "),SO=a("a"),Mjo=o("MegatronBertForTokenClassification"),Ejo=o(" (MegatronBert model)"),Cjo=l(),Pb=a("li"),vge=a("strong"),wjo=o("mobilebert"),Ajo=o(" \u2014 "),RO=a("a"),yjo=o("MobileBertForTokenClassification"),Ljo=o(" (MobileBERT model)"),xjo=l(),Bb=a("li"),Fge=a("strong"),$jo=o("mpnet"),kjo=o(" \u2014 "),PO=a("a"),Sjo=o("MPNetForTokenClassification"),Rjo=o(" (MPNet model)"),Pjo=l(),Ib=a("li"),Tge=a("strong"),Bjo=o("nystromformer"),Ijo=o(" \u2014 "),BO=a("a"),qjo=o("NystromformerForTokenClassification"),Njo=o(" (Nystromformer model)"),jjo=l(),qb=a("li"),Mge=a("strong"),Djo=o("qdqbert"),Gjo=o(" \u2014 "),IO=a("a"),Ojo=o("QDQBertForTokenClassification"),Vjo=o(" (QDQBert model)"),Xjo=l(),Nb=a("li"),Ege=a("strong"),zjo=o("rembert"),Wjo=o(" \u2014 "),qO=a("a"),Qjo=o("RemBertForTokenClassification"),Hjo=o(" (RemBERT model)"),Ujo=l(),jb=a("li"),Cge=a("strong"),Jjo=o("roberta"),Yjo=o(" \u2014 "),NO=a("a"),Kjo=o("RobertaForTokenClassification"),Zjo=o(" (RoBERTa model)"),eDo=l(),Db=a("li"),wge=a("strong"),oDo=o("roformer"),rDo=o(" \u2014 "),jO=a("a"),tDo=o("RoFormerForTokenClassification"),aDo=o(" (RoFormer model)"),nDo=l(),Gb=a("li"),Age=a("strong"),sDo=o("squeezebert"),lDo=o(" \u2014 "),DO=a("a"),iDo=o("SqueezeBertForTokenClassification"),dDo=o(" (SqueezeBERT model)"),cDo=l(),Ob=a("li"),yge=a("strong"),fDo=o("xlm"),mDo=o(" \u2014 "),GO=a("a"),gDo=o("XLMForTokenClassification"),hDo=o(" (XLM model)"),pDo=l(),Vb=a("li"),Lge=a("strong"),_Do=o("xlm-roberta"),uDo=o(" \u2014 "),OO=a("a"),bDo=o("XLMRobertaForTokenClassification"),vDo=o(" (XLM-RoBERTa model)"),FDo=l(),Xb=a("li"),xge=a("strong"),TDo=o("xlm-roberta-xl"),MDo=o(" \u2014 "),VO=a("a"),EDo=o("XLMRobertaXLForTokenClassification"),CDo=o(" (XLM-RoBERTa-XL model)"),wDo=l(),zb=a("li"),$ge=a("strong"),ADo=o("xlnet"),yDo=o(" \u2014 "),XO=a("a"),LDo=o("XLNetForTokenClassification"),xDo=o(" (XLNet model)"),$Do=l(),Wb=a("li"),kge=a("strong"),kDo=o("yoso"),SDo=o(" \u2014 "),zO=a("a"),RDo=o("YosoForTokenClassification"),PDo=o(" (YOSO model)"),BDo=l(),Qb=a("p"),IDo=o("The model is set in evaluation mode by default using "),Sge=a("code"),qDo=o("model.eval()"),NDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),jDo=o("model.train()"),DDo=l(),F(Hb.$$.fragment),bqe=l(),Yi=a("h2"),Ub=a("a"),Pge=a("span"),F(L6.$$.fragment),GDo=l(),Bge=a("span"),ODo=o("AutoModelForQuestionAnswering"),vqe=l(),qo=a("div"),F(x6.$$.fragment),VDo=l(),Ki=a("p"),XDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WO=a("a"),zDo=o("from_pretrained()"),WDo=o(" class method or the "),QO=a("a"),QDo=o("from_config()"),HDo=o(` class
method.`),UDo=l(),$6=a("p"),JDo=o("This class cannot be instantiated directly using "),Ige=a("code"),YDo=o("__init__()"),KDo=o(" (throws an error)."),ZDo=l(),mt=a("div"),F(k6.$$.fragment),eGo=l(),qge=a("p"),oGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rGo=l(),Zi=a("p"),tGo=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),aGo=o("not"),nGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),sGo=o("from_pretrained()"),lGo=o(" to load the model weights."),iGo=l(),F(Jb.$$.fragment),dGo=l(),no=a("div"),F(S6.$$.fragment),cGo=l(),jge=a("p"),fGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mGo=l(),qa=a("p"),gGo=o("The model class to instantiate is selected based on the "),Dge=a("code"),hGo=o("model_type"),pGo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),bGo=o("pretrained_model_name_or_path"),vGo=o(":"),FGo=l(),V=a("ul"),Yb=a("li"),Vge=a("strong"),TGo=o("albert"),MGo=o(" \u2014 "),UO=a("a"),EGo=o("AlbertForQuestionAnswering"),CGo=o(" (ALBERT model)"),wGo=l(),Kb=a("li"),Xge=a("strong"),AGo=o("bart"),yGo=o(" \u2014 "),JO=a("a"),LGo=o("BartForQuestionAnswering"),xGo=o(" (BART model)"),$Go=l(),Zb=a("li"),zge=a("strong"),kGo=o("bert"),SGo=o(" \u2014 "),YO=a("a"),RGo=o("BertForQuestionAnswering"),PGo=o(" (BERT model)"),BGo=l(),ev=a("li"),Wge=a("strong"),IGo=o("big_bird"),qGo=o(" \u2014 "),KO=a("a"),NGo=o("BigBirdForQuestionAnswering"),jGo=o(" (BigBird model)"),DGo=l(),ov=a("li"),Qge=a("strong"),GGo=o("bigbird_pegasus"),OGo=o(" \u2014 "),ZO=a("a"),VGo=o("BigBirdPegasusForQuestionAnswering"),XGo=o(" (BigBirdPegasus model)"),zGo=l(),rv=a("li"),Hge=a("strong"),WGo=o("camembert"),QGo=o(" \u2014 "),eV=a("a"),HGo=o("CamembertForQuestionAnswering"),UGo=o(" (CamemBERT model)"),JGo=l(),tv=a("li"),Uge=a("strong"),YGo=o("canine"),KGo=o(" \u2014 "),oV=a("a"),ZGo=o("CanineForQuestionAnswering"),eOo=o(" (Canine model)"),oOo=l(),av=a("li"),Jge=a("strong"),rOo=o("convbert"),tOo=o(" \u2014 "),rV=a("a"),aOo=o("ConvBertForQuestionAnswering"),nOo=o(" (ConvBERT model)"),sOo=l(),nv=a("li"),Yge=a("strong"),lOo=o("data2vec-text"),iOo=o(" \u2014 "),tV=a("a"),dOo=o("Data2VecTextForQuestionAnswering"),cOo=o(" (Data2VecText model)"),fOo=l(),sv=a("li"),Kge=a("strong"),mOo=o("deberta"),gOo=o(" \u2014 "),aV=a("a"),hOo=o("DebertaForQuestionAnswering"),pOo=o(" (DeBERTa model)"),_Oo=l(),lv=a("li"),Zge=a("strong"),uOo=o("deberta-v2"),bOo=o(" \u2014 "),nV=a("a"),vOo=o("DebertaV2ForQuestionAnswering"),FOo=o(" (DeBERTa-v2 model)"),TOo=l(),iv=a("li"),ehe=a("strong"),MOo=o("distilbert"),EOo=o(" \u2014 "),sV=a("a"),COo=o("DistilBertForQuestionAnswering"),wOo=o(" (DistilBERT model)"),AOo=l(),dv=a("li"),ohe=a("strong"),yOo=o("electra"),LOo=o(" \u2014 "),lV=a("a"),xOo=o("ElectraForQuestionAnswering"),$Oo=o(" (ELECTRA model)"),kOo=l(),cv=a("li"),rhe=a("strong"),SOo=o("flaubert"),ROo=o(" \u2014 "),iV=a("a"),POo=o("FlaubertForQuestionAnsweringSimple"),BOo=o(" (FlauBERT model)"),IOo=l(),fv=a("li"),the=a("strong"),qOo=o("fnet"),NOo=o(" \u2014 "),dV=a("a"),jOo=o("FNetForQuestionAnswering"),DOo=o(" (FNet model)"),GOo=l(),mv=a("li"),ahe=a("strong"),OOo=o("funnel"),VOo=o(" \u2014 "),cV=a("a"),XOo=o("FunnelForQuestionAnswering"),zOo=o(" (Funnel Transformer model)"),WOo=l(),gv=a("li"),nhe=a("strong"),QOo=o("gptj"),HOo=o(" \u2014 "),fV=a("a"),UOo=o("GPTJForQuestionAnswering"),JOo=o(" (GPT-J model)"),YOo=l(),hv=a("li"),she=a("strong"),KOo=o("ibert"),ZOo=o(" \u2014 "),mV=a("a"),eVo=o("IBertForQuestionAnswering"),oVo=o(" (I-BERT model)"),rVo=l(),pv=a("li"),lhe=a("strong"),tVo=o("layoutlmv2"),aVo=o(" \u2014 "),gV=a("a"),nVo=o("LayoutLMv2ForQuestionAnswering"),sVo=o(" (LayoutLMv2 model)"),lVo=l(),_v=a("li"),ihe=a("strong"),iVo=o("led"),dVo=o(" \u2014 "),hV=a("a"),cVo=o("LEDForQuestionAnswering"),fVo=o(" (LED model)"),mVo=l(),uv=a("li"),dhe=a("strong"),gVo=o("longformer"),hVo=o(" \u2014 "),pV=a("a"),pVo=o("LongformerForQuestionAnswering"),_Vo=o(" (Longformer model)"),uVo=l(),bv=a("li"),che=a("strong"),bVo=o("lxmert"),vVo=o(" \u2014 "),_V=a("a"),FVo=o("LxmertForQuestionAnswering"),TVo=o(" (LXMERT model)"),MVo=l(),vv=a("li"),fhe=a("strong"),EVo=o("mbart"),CVo=o(" \u2014 "),uV=a("a"),wVo=o("MBartForQuestionAnswering"),AVo=o(" (mBART model)"),yVo=l(),Fv=a("li"),mhe=a("strong"),LVo=o("megatron-bert"),xVo=o(" \u2014 "),bV=a("a"),$Vo=o("MegatronBertForQuestionAnswering"),kVo=o(" (MegatronBert model)"),SVo=l(),Tv=a("li"),ghe=a("strong"),RVo=o("mobilebert"),PVo=o(" \u2014 "),vV=a("a"),BVo=o("MobileBertForQuestionAnswering"),IVo=o(" (MobileBERT model)"),qVo=l(),Mv=a("li"),hhe=a("strong"),NVo=o("mpnet"),jVo=o(" \u2014 "),FV=a("a"),DVo=o("MPNetForQuestionAnswering"),GVo=o(" (MPNet model)"),OVo=l(),Ev=a("li"),phe=a("strong"),VVo=o("nystromformer"),XVo=o(" \u2014 "),TV=a("a"),zVo=o("NystromformerForQuestionAnswering"),WVo=o(" (Nystromformer model)"),QVo=l(),Cv=a("li"),_he=a("strong"),HVo=o("qdqbert"),UVo=o(" \u2014 "),MV=a("a"),JVo=o("QDQBertForQuestionAnswering"),YVo=o(" (QDQBert model)"),KVo=l(),wv=a("li"),uhe=a("strong"),ZVo=o("reformer"),eXo=o(" \u2014 "),EV=a("a"),oXo=o("ReformerForQuestionAnswering"),rXo=o(" (Reformer model)"),tXo=l(),Av=a("li"),bhe=a("strong"),aXo=o("rembert"),nXo=o(" \u2014 "),CV=a("a"),sXo=o("RemBertForQuestionAnswering"),lXo=o(" (RemBERT model)"),iXo=l(),yv=a("li"),vhe=a("strong"),dXo=o("roberta"),cXo=o(" \u2014 "),wV=a("a"),fXo=o("RobertaForQuestionAnswering"),mXo=o(" (RoBERTa model)"),gXo=l(),Lv=a("li"),Fhe=a("strong"),hXo=o("roformer"),pXo=o(" \u2014 "),AV=a("a"),_Xo=o("RoFormerForQuestionAnswering"),uXo=o(" (RoFormer model)"),bXo=l(),xv=a("li"),The=a("strong"),vXo=o("splinter"),FXo=o(" \u2014 "),yV=a("a"),TXo=o("SplinterForQuestionAnswering"),MXo=o(" (Splinter model)"),EXo=l(),$v=a("li"),Mhe=a("strong"),CXo=o("squeezebert"),wXo=o(" \u2014 "),LV=a("a"),AXo=o("SqueezeBertForQuestionAnswering"),yXo=o(" (SqueezeBERT model)"),LXo=l(),kv=a("li"),Ehe=a("strong"),xXo=o("xlm"),$Xo=o(" \u2014 "),xV=a("a"),kXo=o("XLMForQuestionAnsweringSimple"),SXo=o(" (XLM model)"),RXo=l(),Sv=a("li"),Che=a("strong"),PXo=o("xlm-roberta"),BXo=o(" \u2014 "),$V=a("a"),IXo=o("XLMRobertaForQuestionAnswering"),qXo=o(" (XLM-RoBERTa model)"),NXo=l(),Rv=a("li"),whe=a("strong"),jXo=o("xlm-roberta-xl"),DXo=o(" \u2014 "),kV=a("a"),GXo=o("XLMRobertaXLForQuestionAnswering"),OXo=o(" (XLM-RoBERTa-XL model)"),VXo=l(),Pv=a("li"),Ahe=a("strong"),XXo=o("xlnet"),zXo=o(" \u2014 "),SV=a("a"),WXo=o("XLNetForQuestionAnsweringSimple"),QXo=o(" (XLNet model)"),HXo=l(),Bv=a("li"),yhe=a("strong"),UXo=o("yoso"),JXo=o(" \u2014 "),RV=a("a"),YXo=o("YosoForQuestionAnswering"),KXo=o(" (YOSO model)"),ZXo=l(),Iv=a("p"),ezo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),ozo=o("model.eval()"),rzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),tzo=o("model.train()"),azo=l(),F(qv.$$.fragment),Fqe=l(),ed=a("h2"),Nv=a("a"),$he=a("span"),F(R6.$$.fragment),nzo=l(),khe=a("span"),szo=o("AutoModelForTableQuestionAnswering"),Tqe=l(),No=a("div"),F(P6.$$.fragment),lzo=l(),od=a("p"),izo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PV=a("a"),dzo=o("from_pretrained()"),czo=o(" class method or the "),BV=a("a"),fzo=o("from_config()"),mzo=o(` class
method.`),gzo=l(),B6=a("p"),hzo=o("This class cannot be instantiated directly using "),She=a("code"),pzo=o("__init__()"),_zo=o(" (throws an error)."),uzo=l(),gt=a("div"),F(I6.$$.fragment),bzo=l(),Rhe=a("p"),vzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fzo=l(),rd=a("p"),Tzo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),Mzo=o("not"),Ezo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),Czo=o("from_pretrained()"),wzo=o(" to load the model weights."),Azo=l(),F(jv.$$.fragment),yzo=l(),so=a("div"),F(q6.$$.fragment),Lzo=l(),Bhe=a("p"),xzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$zo=l(),Na=a("p"),kzo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),Szo=o("model_type"),Rzo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),Pzo=o("pretrained_model_name_or_path"),Bzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),Izo=o("pretrained_model_name_or_path"),qzo=o(":"),Nzo=l(),jhe=a("ul"),Dv=a("li"),Dhe=a("strong"),jzo=o("tapas"),Dzo=o(" \u2014 "),qV=a("a"),Gzo=o("TapasForQuestionAnswering"),Ozo=o(" (TAPAS model)"),Vzo=l(),Gv=a("p"),Xzo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),zzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),Qzo=o("model.train()"),Hzo=l(),F(Ov.$$.fragment),Mqe=l(),td=a("h2"),Vv=a("a"),Vhe=a("span"),F(N6.$$.fragment),Uzo=l(),Xhe=a("span"),Jzo=o("AutoModelForImageClassification"),Eqe=l(),jo=a("div"),F(j6.$$.fragment),Yzo=l(),ad=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NV=a("a"),Zzo=o("from_pretrained()"),eWo=o(" class method or the "),jV=a("a"),oWo=o("from_config()"),rWo=o(` class
method.`),tWo=l(),D6=a("p"),aWo=o("This class cannot be instantiated directly using "),zhe=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),ht=a("div"),F(G6.$$.fragment),iWo=l(),Whe=a("p"),dWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cWo=l(),nd=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),hWo=o("from_pretrained()"),pWo=o(" to load the model weights."),_Wo=l(),F(Xv.$$.fragment),uWo=l(),lo=a("div"),F(O6.$$.fragment),bWo=l(),Hhe=a("p"),vWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FWo=l(),ja=a("p"),TWo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),MWo=o("model_type"),EWo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(":"),LWo=l(),Fe=a("ul"),zv=a("li"),Khe=a("strong"),xWo=o("beit"),$Wo=o(" \u2014 "),GV=a("a"),kWo=o("BeitForImageClassification"),SWo=o(" (BEiT model)"),RWo=l(),Wv=a("li"),Zhe=a("strong"),PWo=o("convnext"),BWo=o(" \u2014 "),OV=a("a"),IWo=o("ConvNextForImageClassification"),qWo=o(" (ConvNext model)"),NWo=l(),Qv=a("li"),epe=a("strong"),jWo=o("cvt"),DWo=o(" \u2014 "),VV=a("a"),GWo=o("CvtForImageClassification"),OWo=o(" (CvT model)"),VWo=l(),Hv=a("li"),ope=a("strong"),XWo=o("data2vec-vision"),zWo=o(" \u2014 "),XV=a("a"),WWo=o("Data2VecVisionForImageClassification"),QWo=o(" (Data2VecVision model)"),HWo=l(),Ps=a("li"),rpe=a("strong"),UWo=o("deit"),JWo=o(" \u2014 "),zV=a("a"),YWo=o("DeiTForImageClassification"),KWo=o(" or "),WV=a("a"),ZWo=o("DeiTForImageClassificationWithTeacher"),eQo=o(" (DeiT model)"),oQo=l(),Uv=a("li"),tpe=a("strong"),rQo=o("imagegpt"),tQo=o(" \u2014 "),QV=a("a"),aQo=o("ImageGPTForImageClassification"),nQo=o(" (ImageGPT model)"),sQo=l(),pt=a("li"),ape=a("strong"),lQo=o("perceiver"),iQo=o(" \u2014 "),HV=a("a"),dQo=o("PerceiverForImageClassificationLearned"),cQo=o(" or "),UV=a("a"),fQo=o("PerceiverForImageClassificationFourier"),mQo=o(" or "),JV=a("a"),gQo=o("PerceiverForImageClassificationConvProcessing"),hQo=o(" (Perceiver model)"),pQo=l(),Jv=a("li"),npe=a("strong"),_Qo=o("poolformer"),uQo=o(" \u2014 "),YV=a("a"),bQo=o("PoolFormerForImageClassification"),vQo=o(" (PoolFormer model)"),FQo=l(),Yv=a("li"),spe=a("strong"),TQo=o("regnet"),MQo=o(" \u2014 "),KV=a("a"),EQo=o("RegNetForImageClassification"),CQo=o(" (RegNet model)"),wQo=l(),Kv=a("li"),lpe=a("strong"),AQo=o("resnet"),yQo=o(" \u2014 "),ZV=a("a"),LQo=o("ResNetForImageClassification"),xQo=o(" (ResNet model)"),$Qo=l(),Zv=a("li"),ipe=a("strong"),kQo=o("segformer"),SQo=o(" \u2014 "),eX=a("a"),RQo=o("SegformerForImageClassification"),PQo=o(" (SegFormer model)"),BQo=l(),eF=a("li"),dpe=a("strong"),IQo=o("swin"),qQo=o(" \u2014 "),oX=a("a"),NQo=o("SwinForImageClassification"),jQo=o(" (Swin model)"),DQo=l(),oF=a("li"),cpe=a("strong"),GQo=o("van"),OQo=o(" \u2014 "),rX=a("a"),VQo=o("VanForImageClassification"),XQo=o(" (VAN model)"),zQo=l(),rF=a("li"),fpe=a("strong"),WQo=o("vit"),QQo=o(" \u2014 "),tX=a("a"),HQo=o("ViTForImageClassification"),UQo=o(" (ViT model)"),JQo=l(),tF=a("p"),YQo=o("The model is set in evaluation mode by default using "),mpe=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),eHo=o("model.train()"),oHo=l(),F(aF.$$.fragment),Cqe=l(),sd=a("h2"),nF=a("a"),hpe=a("span"),F(V6.$$.fragment),rHo=l(),ppe=a("span"),tHo=o("AutoModelForVision2Seq"),wqe=l(),Do=a("div"),F(X6.$$.fragment),aHo=l(),ld=a("p"),nHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aX=a("a"),sHo=o("from_pretrained()"),lHo=o(" class method or the "),nX=a("a"),iHo=o("from_config()"),dHo=o(` class
method.`),cHo=l(),z6=a("p"),fHo=o("This class cannot be instantiated directly using "),_pe=a("code"),mHo=o("__init__()"),gHo=o(" (throws an error)."),hHo=l(),_t=a("div"),F(W6.$$.fragment),pHo=l(),upe=a("p"),_Ho=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uHo=l(),id=a("p"),bHo=o(`Note:
Loading a model from its configuration file does `),bpe=a("strong"),vHo=o("not"),FHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),THo=o("from_pretrained()"),MHo=o(" to load the model weights."),EHo=l(),F(sF.$$.fragment),CHo=l(),io=a("div"),F(Q6.$$.fragment),wHo=l(),vpe=a("p"),AHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yHo=l(),Da=a("p"),LHo=o("The model class to instantiate is selected based on the "),Fpe=a("code"),xHo=o("model_type"),$Ho=o(` property of the config object (either
passed as an argument or loaded from `),Tpe=a("code"),kHo=o("pretrained_model_name_or_path"),SHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=a("code"),RHo=o("pretrained_model_name_or_path"),PHo=o(":"),BHo=l(),Epe=a("ul"),lF=a("li"),Cpe=a("strong"),IHo=o("vision-encoder-decoder"),qHo=o(" \u2014 "),lX=a("a"),NHo=o("VisionEncoderDecoderModel"),jHo=o(" (Vision Encoder decoder model)"),DHo=l(),iF=a("p"),GHo=o("The model is set in evaluation mode by default using "),wpe=a("code"),OHo=o("model.eval()"),VHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),XHo=o("model.train()"),zHo=l(),F(dF.$$.fragment),Aqe=l(),dd=a("h2"),cF=a("a"),ype=a("span"),F(H6.$$.fragment),WHo=l(),Lpe=a("span"),QHo=o("AutoModelForAudioClassification"),yqe=l(),Go=a("div"),F(U6.$$.fragment),HHo=l(),cd=a("p"),UHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iX=a("a"),JHo=o("from_pretrained()"),YHo=o(" class method or the "),dX=a("a"),KHo=o("from_config()"),ZHo=o(` class
method.`),eUo=l(),J6=a("p"),oUo=o("This class cannot be instantiated directly using "),xpe=a("code"),rUo=o("__init__()"),tUo=o(" (throws an error)."),aUo=l(),ut=a("div"),F(Y6.$$.fragment),nUo=l(),$pe=a("p"),sUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),lUo=l(),fd=a("p"),iUo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),dUo=o("not"),cUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),fUo=o("from_pretrained()"),mUo=o(" to load the model weights."),gUo=l(),F(fF.$$.fragment),hUo=l(),co=a("div"),F(K6.$$.fragment),pUo=l(),Spe=a("p"),_Uo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uUo=l(),Ga=a("p"),bUo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),vUo=o("model_type"),FUo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),TUo=o("pretrained_model_name_or_path"),MUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),EUo=o("pretrained_model_name_or_path"),CUo=o(":"),wUo=l(),ke=a("ul"),mF=a("li"),Ipe=a("strong"),AUo=o("data2vec-audio"),yUo=o(" \u2014 "),fX=a("a"),LUo=o("Data2VecAudioForSequenceClassification"),xUo=o(" (Data2VecAudio model)"),$Uo=l(),gF=a("li"),qpe=a("strong"),kUo=o("hubert"),SUo=o(" \u2014 "),mX=a("a"),RUo=o("HubertForSequenceClassification"),PUo=o(" (Hubert model)"),BUo=l(),hF=a("li"),Npe=a("strong"),IUo=o("sew"),qUo=o(" \u2014 "),gX=a("a"),NUo=o("SEWForSequenceClassification"),jUo=o(" (SEW model)"),DUo=l(),pF=a("li"),jpe=a("strong"),GUo=o("sew-d"),OUo=o(" \u2014 "),hX=a("a"),VUo=o("SEWDForSequenceClassification"),XUo=o(" (SEW-D model)"),zUo=l(),_F=a("li"),Dpe=a("strong"),WUo=o("unispeech"),QUo=o(" \u2014 "),pX=a("a"),HUo=o("UniSpeechForSequenceClassification"),UUo=o(" (UniSpeech model)"),JUo=l(),uF=a("li"),Gpe=a("strong"),YUo=o("unispeech-sat"),KUo=o(" \u2014 "),_X=a("a"),ZUo=o("UniSpeechSatForSequenceClassification"),eJo=o(" (UniSpeechSat model)"),oJo=l(),bF=a("li"),Ope=a("strong"),rJo=o("wav2vec2"),tJo=o(" \u2014 "),uX=a("a"),aJo=o("Wav2Vec2ForSequenceClassification"),nJo=o(" (Wav2Vec2 model)"),sJo=l(),vF=a("li"),Vpe=a("strong"),lJo=o("wav2vec2-conformer"),iJo=o(" \u2014 "),bX=a("a"),dJo=o("Wav2Vec2ConformerForSequenceClassification"),cJo=o(" (Wav2Vec2-Conformer model)"),fJo=l(),FF=a("li"),Xpe=a("strong"),mJo=o("wavlm"),gJo=o(" \u2014 "),vX=a("a"),hJo=o("WavLMForSequenceClassification"),pJo=o(" (WavLM model)"),_Jo=l(),TF=a("p"),uJo=o("The model is set in evaluation mode by default using "),zpe=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),FJo=o("model.train()"),TJo=l(),F(MF.$$.fragment),Lqe=l(),md=a("h2"),EF=a("a"),Qpe=a("span"),F(Z6.$$.fragment),MJo=l(),Hpe=a("span"),EJo=o("AutoModelForAudioFrameClassification"),xqe=l(),Oo=a("div"),F(ey.$$.fragment),CJo=l(),gd=a("p"),wJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FX=a("a"),AJo=o("from_pretrained()"),yJo=o(" class method or the "),TX=a("a"),LJo=o("from_config()"),xJo=o(` class
method.`),$Jo=l(),oy=a("p"),kJo=o("This class cannot be instantiated directly using "),Upe=a("code"),SJo=o("__init__()"),RJo=o(" (throws an error)."),PJo=l(),bt=a("div"),F(ry.$$.fragment),BJo=l(),Jpe=a("p"),IJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qJo=l(),hd=a("p"),NJo=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),jJo=o("not"),DJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),GJo=o("from_pretrained()"),OJo=o(" to load the model weights."),VJo=l(),F(CF.$$.fragment),XJo=l(),fo=a("div"),F(ty.$$.fragment),zJo=l(),Kpe=a("p"),WJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),QJo=l(),Oa=a("p"),HJo=o("The model class to instantiate is selected based on the "),Zpe=a("code"),UJo=o("model_type"),JJo=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),YJo=o("pretrained_model_name_or_path"),KJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),ZJo=o("pretrained_model_name_or_path"),eYo=o(":"),oYo=l(),Kr=a("ul"),wF=a("li"),r_e=a("strong"),rYo=o("data2vec-audio"),tYo=o(" \u2014 "),EX=a("a"),aYo=o("Data2VecAudioForAudioFrameClassification"),nYo=o(" (Data2VecAudio model)"),sYo=l(),AF=a("li"),t_e=a("strong"),lYo=o("unispeech-sat"),iYo=o(" \u2014 "),CX=a("a"),dYo=o("UniSpeechSatForAudioFrameClassification"),cYo=o(" (UniSpeechSat model)"),fYo=l(),yF=a("li"),a_e=a("strong"),mYo=o("wav2vec2"),gYo=o(" \u2014 "),wX=a("a"),hYo=o("Wav2Vec2ForAudioFrameClassification"),pYo=o(" (Wav2Vec2 model)"),_Yo=l(),LF=a("li"),n_e=a("strong"),uYo=o("wav2vec2-conformer"),bYo=o(" \u2014 "),AX=a("a"),vYo=o("Wav2Vec2ConformerForAudioFrameClassification"),FYo=o(" (Wav2Vec2-Conformer model)"),TYo=l(),xF=a("li"),s_e=a("strong"),MYo=o("wavlm"),EYo=o(" \u2014 "),yX=a("a"),CYo=o("WavLMForAudioFrameClassification"),wYo=o(" (WavLM model)"),AYo=l(),$F=a("p"),yYo=o("The model is set in evaluation mode by default using "),l_e=a("code"),LYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),$Yo=o("model.train()"),kYo=l(),F(kF.$$.fragment),$qe=l(),pd=a("h2"),SF=a("a"),d_e=a("span"),F(ay.$$.fragment),SYo=l(),c_e=a("span"),RYo=o("AutoModelForCTC"),kqe=l(),Vo=a("div"),F(ny.$$.fragment),PYo=l(),_d=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),LX=a("a"),IYo=o("from_pretrained()"),qYo=o(" class method or the "),xX=a("a"),NYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),sy=a("p"),GYo=o("This class cannot be instantiated directly using "),f_e=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),vt=a("div"),F(ly.$$.fragment),zYo=l(),m_e=a("p"),WYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),QYo=l(),ud=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(RF.$$.fragment),eKo=l(),mo=a("div"),F(iy.$$.fragment),oKo=l(),h_e=a("p"),rKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tKo=l(),Va=a("p"),aKo=o("The model class to instantiate is selected based on the "),p_e=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),Se=a("ul"),PF=a("li"),b_e=a("strong"),mKo=o("data2vec-audio"),gKo=o(" \u2014 "),kX=a("a"),hKo=o("Data2VecAudioForCTC"),pKo=o(" (Data2VecAudio model)"),_Ko=l(),BF=a("li"),v_e=a("strong"),uKo=o("hubert"),bKo=o(" \u2014 "),SX=a("a"),vKo=o("HubertForCTC"),FKo=o(" (Hubert model)"),TKo=l(),IF=a("li"),F_e=a("strong"),MKo=o("sew"),EKo=o(" \u2014 "),RX=a("a"),CKo=o("SEWForCTC"),wKo=o(" (SEW model)"),AKo=l(),qF=a("li"),T_e=a("strong"),yKo=o("sew-d"),LKo=o(" \u2014 "),PX=a("a"),xKo=o("SEWDForCTC"),$Ko=o(" (SEW-D model)"),kKo=l(),NF=a("li"),M_e=a("strong"),SKo=o("unispeech"),RKo=o(" \u2014 "),BX=a("a"),PKo=o("UniSpeechForCTC"),BKo=o(" (UniSpeech model)"),IKo=l(),jF=a("li"),E_e=a("strong"),qKo=o("unispeech-sat"),NKo=o(" \u2014 "),IX=a("a"),jKo=o("UniSpeechSatForCTC"),DKo=o(" (UniSpeechSat model)"),GKo=l(),DF=a("li"),C_e=a("strong"),OKo=o("wav2vec2"),VKo=o(" \u2014 "),qX=a("a"),XKo=o("Wav2Vec2ForCTC"),zKo=o(" (Wav2Vec2 model)"),WKo=l(),GF=a("li"),w_e=a("strong"),QKo=o("wav2vec2-conformer"),HKo=o(" \u2014 "),NX=a("a"),UKo=o("Wav2Vec2ConformerForCTC"),JKo=o(" (Wav2Vec2-Conformer model)"),YKo=l(),OF=a("li"),A_e=a("strong"),KKo=o("wavlm"),ZKo=o(" \u2014 "),jX=a("a"),eZo=o("WavLMForCTC"),oZo=o(" (WavLM model)"),rZo=l(),VF=a("p"),tZo=o("The model is set in evaluation mode by default using "),y_e=a("code"),aZo=o("model.eval()"),nZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=a("code"),sZo=o("model.train()"),lZo=l(),F(XF.$$.fragment),Sqe=l(),bd=a("h2"),zF=a("a"),x_e=a("span"),F(dy.$$.fragment),iZo=l(),$_e=a("span"),dZo=o("AutoModelForSpeechSeq2Seq"),Rqe=l(),Xo=a("div"),F(cy.$$.fragment),cZo=l(),vd=a("p"),fZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DX=a("a"),mZo=o("from_pretrained()"),gZo=o(" class method or the "),GX=a("a"),hZo=o("from_config()"),pZo=o(` class
method.`),_Zo=l(),fy=a("p"),uZo=o("This class cannot be instantiated directly using "),k_e=a("code"),bZo=o("__init__()"),vZo=o(" (throws an error)."),FZo=l(),Ft=a("div"),F(my.$$.fragment),TZo=l(),S_e=a("p"),MZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),EZo=l(),Fd=a("p"),CZo=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),wZo=o("not"),AZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),yZo=o("from_pretrained()"),LZo=o(" to load the model weights."),xZo=l(),F(WF.$$.fragment),$Zo=l(),go=a("div"),F(gy.$$.fragment),kZo=l(),P_e=a("p"),SZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RZo=l(),Xa=a("p"),PZo=o("The model class to instantiate is selected based on the "),B_e=a("code"),BZo=o("model_type"),IZo=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),qZo=o("pretrained_model_name_or_path"),NZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=a("code"),jZo=o("pretrained_model_name_or_path"),DZo=o(":"),GZo=l(),hy=a("ul"),QF=a("li"),N_e=a("strong"),OZo=o("speech-encoder-decoder"),VZo=o(" \u2014 "),VX=a("a"),XZo=o("SpeechEncoderDecoderModel"),zZo=o(" (Speech Encoder decoder model)"),WZo=l(),HF=a("li"),j_e=a("strong"),QZo=o("speech_to_text"),HZo=o(" \u2014 "),XX=a("a"),UZo=o("Speech2TextForConditionalGeneration"),JZo=o(" (Speech2Text model)"),YZo=l(),UF=a("p"),KZo=o("The model is set in evaluation mode by default using "),D_e=a("code"),ZZo=o("model.eval()"),eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),oer=o("model.train()"),rer=l(),F(JF.$$.fragment),Pqe=l(),Td=a("h2"),YF=a("a"),O_e=a("span"),F(py.$$.fragment),ter=l(),V_e=a("span"),aer=o("AutoModelForAudioXVector"),Bqe=l(),zo=a("div"),F(_y.$$.fragment),ner=l(),Md=a("p"),ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zX=a("a"),ler=o("from_pretrained()"),ier=o(" class method or the "),WX=a("a"),der=o("from_config()"),cer=o(` class
method.`),fer=l(),uy=a("p"),mer=o("This class cannot be instantiated directly using "),X_e=a("code"),ger=o("__init__()"),her=o(" (throws an error)."),per=l(),Tt=a("div"),F(by.$$.fragment),_er=l(),z_e=a("p"),uer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ber=l(),Ed=a("p"),ver=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),Fer=o("not"),Ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Mer=o("from_pretrained()"),Eer=o(" to load the model weights."),Cer=l(),F(KF.$$.fragment),wer=l(),ho=a("div"),F(vy.$$.fragment),Aer=l(),Q_e=a("p"),yer=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Ler=l(),za=a("p"),xer=o("The model class to instantiate is selected based on the "),H_e=a("code"),$er=o("model_type"),ker=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),Ser=o("pretrained_model_name_or_path"),Rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),Per=o("pretrained_model_name_or_path"),Ber=o(":"),Ier=l(),Zr=a("ul"),ZF=a("li"),Y_e=a("strong"),qer=o("data2vec-audio"),Ner=o(" \u2014 "),HX=a("a"),jer=o("Data2VecAudioForXVector"),Der=o(" (Data2VecAudio model)"),Ger=l(),eT=a("li"),K_e=a("strong"),Oer=o("unispeech-sat"),Ver=o(" \u2014 "),UX=a("a"),Xer=o("UniSpeechSatForXVector"),zer=o(" (UniSpeechSat model)"),Wer=l(),oT=a("li"),Z_e=a("strong"),Qer=o("wav2vec2"),Her=o(" \u2014 "),JX=a("a"),Uer=o("Wav2Vec2ForXVector"),Jer=o(" (Wav2Vec2 model)"),Yer=l(),rT=a("li"),eue=a("strong"),Ker=o("wav2vec2-conformer"),Zer=o(" \u2014 "),YX=a("a"),eor=o("Wav2Vec2ConformerForXVector"),oor=o(" (Wav2Vec2-Conformer model)"),ror=l(),tT=a("li"),oue=a("strong"),tor=o("wavlm"),aor=o(" \u2014 "),KX=a("a"),nor=o("WavLMForXVector"),sor=o(" (WavLM model)"),lor=l(),aT=a("p"),ior=o("The model is set in evaluation mode by default using "),rue=a("code"),dor=o("model.eval()"),cor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),mor=o("model.train()"),gor=l(),F(nT.$$.fragment),Iqe=l(),Cd=a("h2"),sT=a("a"),aue=a("span"),F(Fy.$$.fragment),hor=l(),nue=a("span"),por=o("AutoModelForMaskedImageModeling"),qqe=l(),Wo=a("div"),F(Ty.$$.fragment),_or=l(),wd=a("p"),uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZX=a("a"),bor=o("from_pretrained()"),vor=o(" class method or the "),ez=a("a"),For=o("from_config()"),Tor=o(` class
method.`),Mor=l(),My=a("p"),Eor=o("This class cannot be instantiated directly using "),sue=a("code"),Cor=o("__init__()"),wor=o(" (throws an error)."),Aor=l(),Mt=a("div"),F(Ey.$$.fragment),yor=l(),lue=a("p"),Lor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xor=l(),Ad=a("p"),$or=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),kor=o("not"),Sor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Ror=o("from_pretrained()"),Por=o(" to load the model weights."),Bor=l(),F(lT.$$.fragment),Ior=l(),po=a("div"),F(Cy.$$.fragment),qor=l(),due=a("p"),Nor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jor=l(),Wa=a("p"),Dor=o("The model class to instantiate is selected based on the "),cue=a("code"),Gor=o("model_type"),Oor=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),zor=o("pretrained_model_name_or_path"),Wor=o(":"),Qor=l(),yd=a("ul"),iT=a("li"),gue=a("strong"),Hor=o("deit"),Uor=o(" \u2014 "),rz=a("a"),Jor=o("DeiTForMaskedImageModeling"),Yor=o(" (DeiT model)"),Kor=l(),dT=a("li"),hue=a("strong"),Zor=o("swin"),err=o(" \u2014 "),tz=a("a"),orr=o("SwinForMaskedImageModeling"),rrr=o(" (Swin model)"),trr=l(),cT=a("li"),pue=a("strong"),arr=o("vit"),nrr=o(" \u2014 "),az=a("a"),srr=o("ViTForMaskedImageModeling"),lrr=o(" (ViT model)"),irr=l(),fT=a("p"),drr=o("The model is set in evaluation mode by default using "),_ue=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),mrr=o("model.train()"),grr=l(),F(mT.$$.fragment),Nqe=l(),Ld=a("h2"),gT=a("a"),bue=a("span"),F(wy.$$.fragment),hrr=l(),vue=a("span"),prr=o("AutoModelForObjectDetection"),jqe=l(),Qo=a("div"),F(Ay.$$.fragment),_rr=l(),xd=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nz=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),sz=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),yy=a("p"),Err=o("This class cannot be instantiated directly using "),Fue=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Et=a("div"),F(Ly.$$.fragment),yrr=l(),Tue=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xrr=l(),$d=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(hT.$$.fragment),Irr=l(),_o=a("div"),F(xy.$$.fragment),qrr=l(),Eue=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jrr=l(),Qa=a("p"),Drr=o("The model class to instantiate is selected based on the "),Cue=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),zrr=o("pretrained_model_name_or_path"),Wrr=o(":"),Qrr=l(),$y=a("ul"),pT=a("li"),yue=a("strong"),Hrr=o("detr"),Urr=o(" \u2014 "),iz=a("a"),Jrr=o("DetrForObjectDetection"),Yrr=o(" (DETR model)"),Krr=l(),_T=a("li"),Lue=a("strong"),Zrr=o("yolos"),etr=o(" \u2014 "),dz=a("a"),otr=o("YolosForObjectDetection"),rtr=o(" (YOLOS model)"),ttr=l(),uT=a("p"),atr=o("The model is set in evaluation mode by default using "),xue=a("code"),ntr=o("model.eval()"),str=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),ltr=o("model.train()"),itr=l(),F(bT.$$.fragment),Dqe=l(),kd=a("h2"),vT=a("a"),kue=a("span"),F(ky.$$.fragment),dtr=l(),Sue=a("span"),ctr=o("AutoModelForImageSegmentation"),Gqe=l(),Ho=a("div"),F(Sy.$$.fragment),ftr=l(),Sd=a("p"),mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cz=a("a"),gtr=o("from_pretrained()"),htr=o(" class method or the "),fz=a("a"),ptr=o("from_config()"),_tr=o(` class
method.`),utr=l(),Ry=a("p"),btr=o("This class cannot be instantiated directly using "),Rue=a("code"),vtr=o("__init__()"),Ftr=o(" (throws an error)."),Ttr=l(),Ct=a("div"),F(Py.$$.fragment),Mtr=l(),Pue=a("p"),Etr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ctr=l(),Rd=a("p"),wtr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),Atr=o("not"),ytr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),Ltr=o("from_pretrained()"),xtr=o(" to load the model weights."),$tr=l(),F(FT.$$.fragment),ktr=l(),uo=a("div"),F(By.$$.fragment),Str=l(),Iue=a("p"),Rtr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ptr=l(),Ha=a("p"),Btr=o("The model class to instantiate is selected based on the "),que=a("code"),Itr=o("model_type"),qtr=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),Ntr=o("pretrained_model_name_or_path"),jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),Dtr=o("pretrained_model_name_or_path"),Gtr=o(":"),Otr=l(),Due=a("ul"),TT=a("li"),Gue=a("strong"),Vtr=o("detr"),Xtr=o(" \u2014 "),gz=a("a"),ztr=o("DetrForSegmentation"),Wtr=o(" (DETR model)"),Qtr=l(),MT=a("p"),Htr=o("The model is set in evaluation mode by default using "),Oue=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),Ytr=o("model.train()"),Ktr=l(),F(ET.$$.fragment),Oqe=l(),Pd=a("h2"),CT=a("a"),Xue=a("span"),F(Iy.$$.fragment),Ztr=l(),zue=a("span"),ear=o("AutoModelForSemanticSegmentation"),Vqe=l(),Uo=a("div"),F(qy.$$.fragment),oar=l(),Bd=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),pz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),Ny=a("p"),iar=o("This class cannot be instantiated directly using "),Wue=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),wt=a("div"),F(jy.$$.fragment),mar=l(),Que=a("p"),gar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),har=l(),Id=a("p"),par=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),_ar=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(wT.$$.fragment),Mar=l(),bo=a("div"),F(Dy.$$.fragment),Ear=l(),Uue=a("p"),Car=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),war=l(),Ua=a("p"),Aar=o("The model class to instantiate is selected based on the "),Jue=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Ja=a("ul"),AT=a("li"),Zue=a("strong"),Par=o("beit"),Bar=o(" \u2014 "),uz=a("a"),Iar=o("BeitForSemanticSegmentation"),qar=o(" (BEiT model)"),Nar=l(),yT=a("li"),e2e=a("strong"),jar=o("data2vec-vision"),Dar=o(" \u2014 "),bz=a("a"),Gar=o("Data2VecVisionForSemanticSegmentation"),Oar=o(" (Data2VecVision model)"),Var=l(),LT=a("li"),o2e=a("strong"),Xar=o("dpt"),zar=o(" \u2014 "),vz=a("a"),War=o("DPTForSemanticSegmentation"),Qar=o(" (DPT model)"),Har=l(),xT=a("li"),r2e=a("strong"),Uar=o("segformer"),Jar=o(" \u2014 "),Fz=a("a"),Yar=o("SegformerForSemanticSegmentation"),Kar=o(" (SegFormer model)"),Zar=l(),$T=a("p"),enr=o("The model is set in evaluation mode by default using "),t2e=a("code"),onr=o("model.eval()"),rnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=a("code"),tnr=o("model.train()"),anr=l(),F(kT.$$.fragment),Xqe=l(),qd=a("h2"),ST=a("a"),n2e=a("span"),F(Gy.$$.fragment),nnr=l(),s2e=a("span"),snr=o("AutoModelForInstanceSegmentation"),zqe=l(),Jo=a("div"),F(Oy.$$.fragment),lnr=l(),Nd=a("p"),inr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Tz=a("a"),dnr=o("from_pretrained()"),cnr=o(" class method or the "),Mz=a("a"),fnr=o("from_config()"),mnr=o(` class
method.`),gnr=l(),Vy=a("p"),hnr=o("This class cannot be instantiated directly using "),l2e=a("code"),pnr=o("__init__()"),_nr=o(" (throws an error)."),unr=l(),At=a("div"),F(Xy.$$.fragment),bnr=l(),i2e=a("p"),vnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fnr=l(),jd=a("p"),Tnr=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),Mnr=o("not"),Enr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),Cnr=o("from_pretrained()"),wnr=o(" to load the model weights."),Anr=l(),F(RT.$$.fragment),ynr=l(),vo=a("div"),F(zy.$$.fragment),Lnr=l(),c2e=a("p"),xnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$nr=l(),Ya=a("p"),knr=o("The model class to instantiate is selected based on the "),f2e=a("code"),Snr=o("model_type"),Rnr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),Pnr=o("pretrained_model_name_or_path"),Bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),Inr=o("pretrained_model_name_or_path"),qnr=o(":"),Nnr=l(),h2e=a("ul"),PT=a("li"),p2e=a("strong"),jnr=o("maskformer"),Dnr=o(" \u2014 "),Cz=a("a"),Gnr=o("MaskFormerForInstanceSegmentation"),Onr=o(" (MaskFormer model)"),Vnr=l(),BT=a("p"),Xnr=o("The model is set in evaluation mode by default using "),_2e=a("code"),znr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),Qnr=o("model.train()"),Hnr=l(),F(IT.$$.fragment),Wqe=l(),Dd=a("h2"),qT=a("a"),b2e=a("span"),F(Wy.$$.fragment),Unr=l(),v2e=a("span"),Jnr=o("TFAutoModel"),Qqe=l(),Yo=a("div"),F(Qy.$$.fragment),Ynr=l(),Gd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wz=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),Az=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),Hy=a("p"),asr=o("This class cannot be instantiated directly using "),F2e=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),yt=a("div"),F(Uy.$$.fragment),isr=l(),T2e=a("p"),dsr=o("Instantiates one of the base model classes of the library from a configuration."),csr=l(),Od=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),hsr=o("from_pretrained()"),psr=o(" to load the model weights."),_sr=l(),F(NT.$$.fragment),usr=l(),wr=a("div"),F(Jy.$$.fragment),bsr=l(),E2e=a("p"),vsr=o("Instantiate one of the base model classes of the library from a pretrained model."),Fsr=l(),Ka=a("p"),Tsr=o("The model class to instantiate is selected based on the "),C2e=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),Asr=o("pretrained_model_name_or_path"),ysr=o(":"),Lsr=l(),N=a("ul"),jT=a("li"),y2e=a("strong"),xsr=o("albert"),$sr=o(" \u2014 "),Lz=a("a"),ksr=o("TFAlbertModel"),Ssr=o(" (ALBERT model)"),Rsr=l(),DT=a("li"),L2e=a("strong"),Psr=o("bart"),Bsr=o(" \u2014 "),xz=a("a"),Isr=o("TFBartModel"),qsr=o(" (BART model)"),Nsr=l(),GT=a("li"),x2e=a("strong"),jsr=o("bert"),Dsr=o(" \u2014 "),$z=a("a"),Gsr=o("TFBertModel"),Osr=o(" (BERT model)"),Vsr=l(),OT=a("li"),$2e=a("strong"),Xsr=o("blenderbot"),zsr=o(" \u2014 "),kz=a("a"),Wsr=o("TFBlenderbotModel"),Qsr=o(" (Blenderbot model)"),Hsr=l(),VT=a("li"),k2e=a("strong"),Usr=o("blenderbot-small"),Jsr=o(" \u2014 "),Sz=a("a"),Ysr=o("TFBlenderbotSmallModel"),Ksr=o(" (BlenderbotSmall model)"),Zsr=l(),XT=a("li"),S2e=a("strong"),elr=o("camembert"),olr=o(" \u2014 "),Rz=a("a"),rlr=o("TFCamembertModel"),tlr=o(" (CamemBERT model)"),alr=l(),zT=a("li"),R2e=a("strong"),nlr=o("clip"),slr=o(" \u2014 "),Pz=a("a"),llr=o("TFCLIPModel"),ilr=o(" (CLIP model)"),dlr=l(),WT=a("li"),P2e=a("strong"),clr=o("convbert"),flr=o(" \u2014 "),Bz=a("a"),mlr=o("TFConvBertModel"),glr=o(" (ConvBERT model)"),hlr=l(),QT=a("li"),B2e=a("strong"),plr=o("convnext"),_lr=o(" \u2014 "),Iz=a("a"),ulr=o("TFConvNextModel"),blr=o(" (ConvNext model)"),vlr=l(),HT=a("li"),I2e=a("strong"),Flr=o("ctrl"),Tlr=o(" \u2014 "),qz=a("a"),Mlr=o("TFCTRLModel"),Elr=o(" (CTRL model)"),Clr=l(),UT=a("li"),q2e=a("strong"),wlr=o("data2vec-vision"),Alr=o(" \u2014 "),Nz=a("a"),ylr=o("TFData2VecVisionModel"),Llr=o(" (Data2VecVision model)"),xlr=l(),JT=a("li"),N2e=a("strong"),$lr=o("deberta"),klr=o(" \u2014 "),jz=a("a"),Slr=o("TFDebertaModel"),Rlr=o(" (DeBERTa model)"),Plr=l(),YT=a("li"),j2e=a("strong"),Blr=o("deberta-v2"),Ilr=o(" \u2014 "),Dz=a("a"),qlr=o("TFDebertaV2Model"),Nlr=o(" (DeBERTa-v2 model)"),jlr=l(),KT=a("li"),D2e=a("strong"),Dlr=o("distilbert"),Glr=o(" \u2014 "),Gz=a("a"),Olr=o("TFDistilBertModel"),Vlr=o(" (DistilBERT model)"),Xlr=l(),ZT=a("li"),G2e=a("strong"),zlr=o("dpr"),Wlr=o(" \u2014 "),Oz=a("a"),Qlr=o("TFDPRQuestionEncoder"),Hlr=o(" (DPR model)"),Ulr=l(),e7=a("li"),O2e=a("strong"),Jlr=o("electra"),Ylr=o(" \u2014 "),Vz=a("a"),Klr=o("TFElectraModel"),Zlr=o(" (ELECTRA model)"),eir=l(),o7=a("li"),V2e=a("strong"),oir=o("flaubert"),rir=o(" \u2014 "),Xz=a("a"),tir=o("TFFlaubertModel"),air=o(" (FlauBERT model)"),nir=l(),Bs=a("li"),X2e=a("strong"),sir=o("funnel"),lir=o(" \u2014 "),zz=a("a"),iir=o("TFFunnelModel"),dir=o(" or "),Wz=a("a"),cir=o("TFFunnelBaseModel"),fir=o(" (Funnel Transformer model)"),mir=l(),r7=a("li"),z2e=a("strong"),gir=o("gpt2"),hir=o(" \u2014 "),Qz=a("a"),pir=o("TFGPT2Model"),_ir=o(" (OpenAI GPT-2 model)"),uir=l(),t7=a("li"),W2e=a("strong"),bir=o("gptj"),vir=o(" \u2014 "),Hz=a("a"),Fir=o("TFGPTJModel"),Tir=o(" (GPT-J model)"),Mir=l(),a7=a("li"),Q2e=a("strong"),Eir=o("hubert"),Cir=o(" \u2014 "),Uz=a("a"),wir=o("TFHubertModel"),Air=o(" (Hubert model)"),yir=l(),n7=a("li"),H2e=a("strong"),Lir=o("layoutlm"),xir=o(" \u2014 "),Jz=a("a"),$ir=o("TFLayoutLMModel"),kir=o(" (LayoutLM model)"),Sir=l(),s7=a("li"),U2e=a("strong"),Rir=o("led"),Pir=o(" \u2014 "),Yz=a("a"),Bir=o("TFLEDModel"),Iir=o(" (LED model)"),qir=l(),l7=a("li"),J2e=a("strong"),Nir=o("longformer"),jir=o(" \u2014 "),Kz=a("a"),Dir=o("TFLongformerModel"),Gir=o(" (Longformer model)"),Oir=l(),i7=a("li"),Y2e=a("strong"),Vir=o("lxmert"),Xir=o(" \u2014 "),Zz=a("a"),zir=o("TFLxmertModel"),Wir=o(" (LXMERT model)"),Qir=l(),d7=a("li"),K2e=a("strong"),Hir=o("marian"),Uir=o(" \u2014 "),eW=a("a"),Jir=o("TFMarianModel"),Yir=o(" (Marian model)"),Kir=l(),c7=a("li"),Z2e=a("strong"),Zir=o("mbart"),edr=o(" \u2014 "),oW=a("a"),odr=o("TFMBartModel"),rdr=o(" (mBART model)"),tdr=l(),f7=a("li"),e1e=a("strong"),adr=o("mobilebert"),ndr=o(" \u2014 "),rW=a("a"),sdr=o("TFMobileBertModel"),ldr=o(" (MobileBERT model)"),idr=l(),m7=a("li"),o1e=a("strong"),ddr=o("mpnet"),cdr=o(" \u2014 "),tW=a("a"),fdr=o("TFMPNetModel"),mdr=o(" (MPNet model)"),gdr=l(),g7=a("li"),r1e=a("strong"),hdr=o("mt5"),pdr=o(" \u2014 "),aW=a("a"),_dr=o("TFMT5Model"),udr=o(" (mT5 model)"),bdr=l(),h7=a("li"),t1e=a("strong"),vdr=o("openai-gpt"),Fdr=o(" \u2014 "),nW=a("a"),Tdr=o("TFOpenAIGPTModel"),Mdr=o(" (OpenAI GPT model)"),Edr=l(),p7=a("li"),a1e=a("strong"),Cdr=o("pegasus"),wdr=o(" \u2014 "),sW=a("a"),Adr=o("TFPegasusModel"),ydr=o(" (Pegasus model)"),Ldr=l(),_7=a("li"),n1e=a("strong"),xdr=o("rembert"),$dr=o(" \u2014 "),lW=a("a"),kdr=o("TFRemBertModel"),Sdr=o(" (RemBERT model)"),Rdr=l(),u7=a("li"),s1e=a("strong"),Pdr=o("roberta"),Bdr=o(" \u2014 "),iW=a("a"),Idr=o("TFRobertaModel"),qdr=o(" (RoBERTa model)"),Ndr=l(),b7=a("li"),l1e=a("strong"),jdr=o("roformer"),Ddr=o(" \u2014 "),dW=a("a"),Gdr=o("TFRoFormerModel"),Odr=o(" (RoFormer model)"),Vdr=l(),v7=a("li"),i1e=a("strong"),Xdr=o("speech_to_text"),zdr=o(" \u2014 "),cW=a("a"),Wdr=o("TFSpeech2TextModel"),Qdr=o(" (Speech2Text model)"),Hdr=l(),F7=a("li"),d1e=a("strong"),Udr=o("swin"),Jdr=o(" \u2014 "),fW=a("a"),Ydr=o("TFSwinModel"),Kdr=o(" (Swin model)"),Zdr=l(),T7=a("li"),c1e=a("strong"),ecr=o("t5"),ocr=o(" \u2014 "),mW=a("a"),rcr=o("TFT5Model"),tcr=o(" (T5 model)"),acr=l(),M7=a("li"),f1e=a("strong"),ncr=o("tapas"),scr=o(" \u2014 "),gW=a("a"),lcr=o("TFTapasModel"),icr=o(" (TAPAS model)"),dcr=l(),E7=a("li"),m1e=a("strong"),ccr=o("transfo-xl"),fcr=o(" \u2014 "),hW=a("a"),mcr=o("TFTransfoXLModel"),gcr=o(" (Transformer-XL model)"),hcr=l(),C7=a("li"),g1e=a("strong"),pcr=o("vit"),_cr=o(" \u2014 "),pW=a("a"),ucr=o("TFViTModel"),bcr=o(" (ViT model)"),vcr=l(),w7=a("li"),h1e=a("strong"),Fcr=o("vit_mae"),Tcr=o(" \u2014 "),_W=a("a"),Mcr=o("TFViTMAEModel"),Ecr=o(" (ViTMAE model)"),Ccr=l(),A7=a("li"),p1e=a("strong"),wcr=o("wav2vec2"),Acr=o(" \u2014 "),uW=a("a"),ycr=o("TFWav2Vec2Model"),Lcr=o(" (Wav2Vec2 model)"),xcr=l(),y7=a("li"),_1e=a("strong"),$cr=o("xlm"),kcr=o(" \u2014 "),bW=a("a"),Scr=o("TFXLMModel"),Rcr=o(" (XLM model)"),Pcr=l(),L7=a("li"),u1e=a("strong"),Bcr=o("xlm-roberta"),Icr=o(" \u2014 "),vW=a("a"),qcr=o("TFXLMRobertaModel"),Ncr=o(" (XLM-RoBERTa model)"),jcr=l(),x7=a("li"),b1e=a("strong"),Dcr=o("xlnet"),Gcr=o(" \u2014 "),FW=a("a"),Ocr=o("TFXLNetModel"),Vcr=o(" (XLNet model)"),Xcr=l(),F($7.$$.fragment),Hqe=l(),Vd=a("h2"),k7=a("a"),v1e=a("span"),F(Yy.$$.fragment),zcr=l(),F1e=a("span"),Wcr=o("TFAutoModelForPreTraining"),Uqe=l(),Ko=a("div"),F(Ky.$$.fragment),Qcr=l(),Xd=a("p"),Hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TW=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" class method or the "),MW=a("a"),Ycr=o("from_config()"),Kcr=o(` class
method.`),Zcr=l(),Zy=a("p"),efr=o("This class cannot be instantiated directly using "),T1e=a("code"),ofr=o("__init__()"),rfr=o(" (throws an error)."),tfr=l(),Lt=a("div"),F(eL.$$.fragment),afr=l(),M1e=a("p"),nfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sfr=l(),zd=a("p"),lfr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),ifr=o("not"),dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),cfr=o("from_pretrained()"),ffr=o(" to load the model weights."),mfr=l(),F(S7.$$.fragment),gfr=l(),Ar=a("div"),F(oL.$$.fragment),hfr=l(),C1e=a("p"),pfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_fr=l(),Za=a("p"),ufr=o("The model class to instantiate is selected based on the "),w1e=a("code"),bfr=o("model_type"),vfr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),Ffr=o("pretrained_model_name_or_path"),Tfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(":"),Cfr=l(),se=a("ul"),R7=a("li"),L1e=a("strong"),wfr=o("albert"),Afr=o(" \u2014 "),CW=a("a"),yfr=o("TFAlbertForPreTraining"),Lfr=o(" (ALBERT model)"),xfr=l(),P7=a("li"),x1e=a("strong"),$fr=o("bart"),kfr=o(" \u2014 "),wW=a("a"),Sfr=o("TFBartForConditionalGeneration"),Rfr=o(" (BART model)"),Pfr=l(),B7=a("li"),$1e=a("strong"),Bfr=o("bert"),Ifr=o(" \u2014 "),AW=a("a"),qfr=o("TFBertForPreTraining"),Nfr=o(" (BERT model)"),jfr=l(),I7=a("li"),k1e=a("strong"),Dfr=o("camembert"),Gfr=o(" \u2014 "),yW=a("a"),Ofr=o("TFCamembertForMaskedLM"),Vfr=o(" (CamemBERT model)"),Xfr=l(),q7=a("li"),S1e=a("strong"),zfr=o("ctrl"),Wfr=o(" \u2014 "),LW=a("a"),Qfr=o("TFCTRLLMHeadModel"),Hfr=o(" (CTRL model)"),Ufr=l(),N7=a("li"),R1e=a("strong"),Jfr=o("distilbert"),Yfr=o(" \u2014 "),xW=a("a"),Kfr=o("TFDistilBertForMaskedLM"),Zfr=o(" (DistilBERT model)"),emr=l(),j7=a("li"),P1e=a("strong"),omr=o("electra"),rmr=o(" \u2014 "),$W=a("a"),tmr=o("TFElectraForPreTraining"),amr=o(" (ELECTRA model)"),nmr=l(),D7=a("li"),B1e=a("strong"),smr=o("flaubert"),lmr=o(" \u2014 "),kW=a("a"),imr=o("TFFlaubertWithLMHeadModel"),dmr=o(" (FlauBERT model)"),cmr=l(),G7=a("li"),I1e=a("strong"),fmr=o("funnel"),mmr=o(" \u2014 "),SW=a("a"),gmr=o("TFFunnelForPreTraining"),hmr=o(" (Funnel Transformer model)"),pmr=l(),O7=a("li"),q1e=a("strong"),_mr=o("gpt2"),umr=o(" \u2014 "),RW=a("a"),bmr=o("TFGPT2LMHeadModel"),vmr=o(" (OpenAI GPT-2 model)"),Fmr=l(),V7=a("li"),N1e=a("strong"),Tmr=o("layoutlm"),Mmr=o(" \u2014 "),PW=a("a"),Emr=o("TFLayoutLMForMaskedLM"),Cmr=o(" (LayoutLM model)"),wmr=l(),X7=a("li"),j1e=a("strong"),Amr=o("lxmert"),ymr=o(" \u2014 "),BW=a("a"),Lmr=o("TFLxmertForPreTraining"),xmr=o(" (LXMERT model)"),$mr=l(),z7=a("li"),D1e=a("strong"),kmr=o("mobilebert"),Smr=o(" \u2014 "),IW=a("a"),Rmr=o("TFMobileBertForPreTraining"),Pmr=o(" (MobileBERT model)"),Bmr=l(),W7=a("li"),G1e=a("strong"),Imr=o("mpnet"),qmr=o(" \u2014 "),qW=a("a"),Nmr=o("TFMPNetForMaskedLM"),jmr=o(" (MPNet model)"),Dmr=l(),Q7=a("li"),O1e=a("strong"),Gmr=o("openai-gpt"),Omr=o(" \u2014 "),NW=a("a"),Vmr=o("TFOpenAIGPTLMHeadModel"),Xmr=o(" (OpenAI GPT model)"),zmr=l(),H7=a("li"),V1e=a("strong"),Wmr=o("roberta"),Qmr=o(" \u2014 "),jW=a("a"),Hmr=o("TFRobertaForMaskedLM"),Umr=o(" (RoBERTa model)"),Jmr=l(),U7=a("li"),X1e=a("strong"),Ymr=o("t5"),Kmr=o(" \u2014 "),DW=a("a"),Zmr=o("TFT5ForConditionalGeneration"),egr=o(" (T5 model)"),ogr=l(),J7=a("li"),z1e=a("strong"),rgr=o("tapas"),tgr=o(" \u2014 "),GW=a("a"),agr=o("TFTapasForMaskedLM"),ngr=o(" (TAPAS model)"),sgr=l(),Y7=a("li"),W1e=a("strong"),lgr=o("transfo-xl"),igr=o(" \u2014 "),OW=a("a"),dgr=o("TFTransfoXLLMHeadModel"),cgr=o(" (Transformer-XL model)"),fgr=l(),K7=a("li"),Q1e=a("strong"),mgr=o("vit_mae"),ggr=o(" \u2014 "),VW=a("a"),hgr=o("TFViTMAEForPreTraining"),pgr=o(" (ViTMAE model)"),_gr=l(),Z7=a("li"),H1e=a("strong"),ugr=o("xlm"),bgr=o(" \u2014 "),XW=a("a"),vgr=o("TFXLMWithLMHeadModel"),Fgr=o(" (XLM model)"),Tgr=l(),eM=a("li"),U1e=a("strong"),Mgr=o("xlm-roberta"),Egr=o(" \u2014 "),zW=a("a"),Cgr=o("TFXLMRobertaForMaskedLM"),wgr=o(" (XLM-RoBERTa model)"),Agr=l(),oM=a("li"),J1e=a("strong"),ygr=o("xlnet"),Lgr=o(" \u2014 "),WW=a("a"),xgr=o("TFXLNetLMHeadModel"),$gr=o(" (XLNet model)"),kgr=l(),F(rM.$$.fragment),Jqe=l(),Wd=a("h2"),tM=a("a"),Y1e=a("span"),F(rL.$$.fragment),Sgr=l(),K1e=a("span"),Rgr=o("TFAutoModelForCausalLM"),Yqe=l(),Zo=a("div"),F(tL.$$.fragment),Pgr=l(),Qd=a("p"),Bgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QW=a("a"),Igr=o("from_pretrained()"),qgr=o(" class method or the "),HW=a("a"),Ngr=o("from_config()"),jgr=o(` class
method.`),Dgr=l(),aL=a("p"),Ggr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Ogr=o("__init__()"),Vgr=o(" (throws an error)."),Xgr=l(),xt=a("div"),F(nL.$$.fragment),zgr=l(),e9e=a("p"),Wgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qgr=l(),Hd=a("p"),Hgr=o(`Note:
Loading a model from its configuration file does `),o9e=a("strong"),Ugr=o("not"),Jgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),Ygr=o("from_pretrained()"),Kgr=o(" to load the model weights."),Zgr=l(),F(aM.$$.fragment),ehr=l(),yr=a("div"),F(sL.$$.fragment),ohr=l(),r9e=a("p"),rhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),thr=l(),en=a("p"),ahr=o("The model class to instantiate is selected based on the "),t9e=a("code"),nhr=o("model_type"),shr=o(` property of the config object (either
passed as an argument or loaded from `),a9e=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=a("code"),dhr=o("pretrained_model_name_or_path"),chr=o(":"),fhr=l(),Me=a("ul"),nM=a("li"),s9e=a("strong"),mhr=o("bert"),ghr=o(" \u2014 "),JW=a("a"),hhr=o("TFBertLMHeadModel"),phr=o(" (BERT model)"),_hr=l(),sM=a("li"),l9e=a("strong"),uhr=o("camembert"),bhr=o(" \u2014 "),YW=a("a"),vhr=o("TFCamembertForCausalLM"),Fhr=o(" (CamemBERT model)"),Thr=l(),lM=a("li"),i9e=a("strong"),Mhr=o("ctrl"),Ehr=o(" \u2014 "),KW=a("a"),Chr=o("TFCTRLLMHeadModel"),whr=o(" (CTRL model)"),Ahr=l(),iM=a("li"),d9e=a("strong"),yhr=o("gpt2"),Lhr=o(" \u2014 "),ZW=a("a"),xhr=o("TFGPT2LMHeadModel"),$hr=o(" (OpenAI GPT-2 model)"),khr=l(),dM=a("li"),c9e=a("strong"),Shr=o("gptj"),Rhr=o(" \u2014 "),eQ=a("a"),Phr=o("TFGPTJForCausalLM"),Bhr=o(" (GPT-J model)"),Ihr=l(),cM=a("li"),f9e=a("strong"),qhr=o("openai-gpt"),Nhr=o(" \u2014 "),oQ=a("a"),jhr=o("TFOpenAIGPTLMHeadModel"),Dhr=o(" (OpenAI GPT model)"),Ghr=l(),fM=a("li"),m9e=a("strong"),Ohr=o("rembert"),Vhr=o(" \u2014 "),rQ=a("a"),Xhr=o("TFRemBertForCausalLM"),zhr=o(" (RemBERT model)"),Whr=l(),mM=a("li"),g9e=a("strong"),Qhr=o("roberta"),Hhr=o(" \u2014 "),tQ=a("a"),Uhr=o("TFRobertaForCausalLM"),Jhr=o(" (RoBERTa model)"),Yhr=l(),gM=a("li"),h9e=a("strong"),Khr=o("roformer"),Zhr=o(" \u2014 "),aQ=a("a"),epr=o("TFRoFormerForCausalLM"),opr=o(" (RoFormer model)"),rpr=l(),hM=a("li"),p9e=a("strong"),tpr=o("transfo-xl"),apr=o(" \u2014 "),nQ=a("a"),npr=o("TFTransfoXLLMHeadModel"),spr=o(" (Transformer-XL model)"),lpr=l(),pM=a("li"),_9e=a("strong"),ipr=o("xlm"),dpr=o(" \u2014 "),sQ=a("a"),cpr=o("TFXLMWithLMHeadModel"),fpr=o(" (XLM model)"),mpr=l(),_M=a("li"),u9e=a("strong"),gpr=o("xlnet"),hpr=o(" \u2014 "),lQ=a("a"),ppr=o("TFXLNetLMHeadModel"),_pr=o(" (XLNet model)"),upr=l(),F(uM.$$.fragment),Kqe=l(),Ud=a("h2"),bM=a("a"),b9e=a("span"),F(lL.$$.fragment),bpr=l(),v9e=a("span"),vpr=o("TFAutoModelForImageClassification"),Zqe=l(),er=a("div"),F(iL.$$.fragment),Fpr=l(),Jd=a("p"),Tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iQ=a("a"),Mpr=o("from_pretrained()"),Epr=o(" class method or the "),dQ=a("a"),Cpr=o("from_config()"),wpr=o(` class
method.`),Apr=l(),dL=a("p"),ypr=o("This class cannot be instantiated directly using "),F9e=a("code"),Lpr=o("__init__()"),xpr=o(" (throws an error)."),$pr=l(),$t=a("div"),F(cL.$$.fragment),kpr=l(),T9e=a("p"),Spr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rpr=l(),Yd=a("p"),Ppr=o(`Note:
Loading a model from its configuration file does `),M9e=a("strong"),Bpr=o("not"),Ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),qpr=o("from_pretrained()"),Npr=o(" to load the model weights."),jpr=l(),F(vM.$$.fragment),Dpr=l(),Lr=a("div"),F(fL.$$.fragment),Gpr=l(),E9e=a("p"),Opr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vpr=l(),on=a("p"),Xpr=o("The model class to instantiate is selected based on the "),C9e=a("code"),zpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),w9e=a("code"),Qpr=o("pretrained_model_name_or_path"),Hpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(":"),Ypr=l(),rn=a("ul"),FM=a("li"),y9e=a("strong"),Kpr=o("convnext"),Zpr=o(" \u2014 "),fQ=a("a"),e_r=o("TFConvNextForImageClassification"),o_r=o(" (ConvNext model)"),r_r=l(),TM=a("li"),L9e=a("strong"),t_r=o("data2vec-vision"),a_r=o(" \u2014 "),mQ=a("a"),n_r=o("TFData2VecVisionForImageClassification"),s_r=o(" (Data2VecVision model)"),l_r=l(),MM=a("li"),x9e=a("strong"),i_r=o("swin"),d_r=o(" \u2014 "),gQ=a("a"),c_r=o("TFSwinForImageClassification"),f_r=o(" (Swin model)"),m_r=l(),EM=a("li"),$9e=a("strong"),g_r=o("vit"),h_r=o(" \u2014 "),hQ=a("a"),p_r=o("TFViTForImageClassification"),__r=o(" (ViT model)"),u_r=l(),F(CM.$$.fragment),eNe=l(),Kd=a("h2"),wM=a("a"),k9e=a("span"),F(mL.$$.fragment),b_r=l(),S9e=a("span"),v_r=o("TFAutoModelForMaskedLM"),oNe=l(),or=a("div"),F(gL.$$.fragment),F_r=l(),Zd=a("p"),T_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pQ=a("a"),M_r=o("from_pretrained()"),E_r=o(" class method or the "),_Q=a("a"),C_r=o("from_config()"),w_r=o(` class
method.`),A_r=l(),hL=a("p"),y_r=o("This class cannot be instantiated directly using "),R9e=a("code"),L_r=o("__init__()"),x_r=o(" (throws an error)."),$_r=l(),kt=a("div"),F(pL.$$.fragment),k_r=l(),P9e=a("p"),S_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R_r=l(),ec=a("p"),P_r=o(`Note:
Loading a model from its configuration file does `),B9e=a("strong"),B_r=o("not"),I_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),q_r=o("from_pretrained()"),N_r=o(" to load the model weights."),j_r=l(),F(AM.$$.fragment),D_r=l(),xr=a("div"),F(_L.$$.fragment),G_r=l(),I9e=a("p"),O_r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),V_r=l(),tn=a("p"),X_r=o("The model class to instantiate is selected based on the "),q9e=a("code"),z_r=o("model_type"),W_r=o(` property of the config object (either
passed as an argument or loaded from `),N9e=a("code"),Q_r=o("pretrained_model_name_or_path"),H_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(":"),Y_r=l(),ie=a("ul"),yM=a("li"),D9e=a("strong"),K_r=o("albert"),Z_r=o(" \u2014 "),bQ=a("a"),eur=o("TFAlbertForMaskedLM"),our=o(" (ALBERT model)"),rur=l(),LM=a("li"),G9e=a("strong"),tur=o("bert"),aur=o(" \u2014 "),vQ=a("a"),nur=o("TFBertForMaskedLM"),sur=o(" (BERT model)"),lur=l(),xM=a("li"),O9e=a("strong"),iur=o("camembert"),dur=o(" \u2014 "),FQ=a("a"),cur=o("TFCamembertForMaskedLM"),fur=o(" (CamemBERT model)"),mur=l(),$M=a("li"),V9e=a("strong"),gur=o("convbert"),hur=o(" \u2014 "),TQ=a("a"),pur=o("TFConvBertForMaskedLM"),_ur=o(" (ConvBERT model)"),uur=l(),kM=a("li"),X9e=a("strong"),bur=o("deberta"),vur=o(" \u2014 "),MQ=a("a"),Fur=o("TFDebertaForMaskedLM"),Tur=o(" (DeBERTa model)"),Mur=l(),SM=a("li"),z9e=a("strong"),Eur=o("deberta-v2"),Cur=o(" \u2014 "),EQ=a("a"),wur=o("TFDebertaV2ForMaskedLM"),Aur=o(" (DeBERTa-v2 model)"),yur=l(),RM=a("li"),W9e=a("strong"),Lur=o("distilbert"),xur=o(" \u2014 "),CQ=a("a"),$ur=o("TFDistilBertForMaskedLM"),kur=o(" (DistilBERT model)"),Sur=l(),PM=a("li"),Q9e=a("strong"),Rur=o("electra"),Pur=o(" \u2014 "),wQ=a("a"),Bur=o("TFElectraForMaskedLM"),Iur=o(" (ELECTRA model)"),qur=l(),BM=a("li"),H9e=a("strong"),Nur=o("flaubert"),jur=o(" \u2014 "),AQ=a("a"),Dur=o("TFFlaubertWithLMHeadModel"),Gur=o(" (FlauBERT model)"),Our=l(),IM=a("li"),U9e=a("strong"),Vur=o("funnel"),Xur=o(" \u2014 "),yQ=a("a"),zur=o("TFFunnelForMaskedLM"),Wur=o(" (Funnel Transformer model)"),Qur=l(),qM=a("li"),J9e=a("strong"),Hur=o("layoutlm"),Uur=o(" \u2014 "),LQ=a("a"),Jur=o("TFLayoutLMForMaskedLM"),Yur=o(" (LayoutLM model)"),Kur=l(),NM=a("li"),Y9e=a("strong"),Zur=o("longformer"),e2r=o(" \u2014 "),xQ=a("a"),o2r=o("TFLongformerForMaskedLM"),r2r=o(" (Longformer model)"),t2r=l(),jM=a("li"),K9e=a("strong"),a2r=o("mobilebert"),n2r=o(" \u2014 "),$Q=a("a"),s2r=o("TFMobileBertForMaskedLM"),l2r=o(" (MobileBERT model)"),i2r=l(),DM=a("li"),Z9e=a("strong"),d2r=o("mpnet"),c2r=o(" \u2014 "),kQ=a("a"),f2r=o("TFMPNetForMaskedLM"),m2r=o(" (MPNet model)"),g2r=l(),GM=a("li"),ebe=a("strong"),h2r=o("rembert"),p2r=o(" \u2014 "),SQ=a("a"),_2r=o("TFRemBertForMaskedLM"),u2r=o(" (RemBERT model)"),b2r=l(),OM=a("li"),obe=a("strong"),v2r=o("roberta"),F2r=o(" \u2014 "),RQ=a("a"),T2r=o("TFRobertaForMaskedLM"),M2r=o(" (RoBERTa model)"),E2r=l(),VM=a("li"),rbe=a("strong"),C2r=o("roformer"),w2r=o(" \u2014 "),PQ=a("a"),A2r=o("TFRoFormerForMaskedLM"),y2r=o(" (RoFormer model)"),L2r=l(),XM=a("li"),tbe=a("strong"),x2r=o("tapas"),$2r=o(" \u2014 "),BQ=a("a"),k2r=o("TFTapasForMaskedLM"),S2r=o(" (TAPAS model)"),R2r=l(),zM=a("li"),abe=a("strong"),P2r=o("xlm"),B2r=o(" \u2014 "),IQ=a("a"),I2r=o("TFXLMWithLMHeadModel"),q2r=o(" (XLM model)"),N2r=l(),WM=a("li"),nbe=a("strong"),j2r=o("xlm-roberta"),D2r=o(" \u2014 "),qQ=a("a"),G2r=o("TFXLMRobertaForMaskedLM"),O2r=o(" (XLM-RoBERTa model)"),V2r=l(),F(QM.$$.fragment),rNe=l(),oc=a("h2"),HM=a("a"),sbe=a("span"),F(uL.$$.fragment),X2r=l(),lbe=a("span"),z2r=o("TFAutoModelForSeq2SeqLM"),tNe=l(),rr=a("div"),F(bL.$$.fragment),W2r=l(),rc=a("p"),Q2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NQ=a("a"),H2r=o("from_pretrained()"),U2r=o(" class method or the "),jQ=a("a"),J2r=o("from_config()"),Y2r=o(` class
method.`),K2r=l(),vL=a("p"),Z2r=o("This class cannot be instantiated directly using "),ibe=a("code"),e1r=o("__init__()"),o1r=o(" (throws an error)."),r1r=l(),St=a("div"),F(FL.$$.fragment),t1r=l(),dbe=a("p"),a1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n1r=l(),tc=a("p"),s1r=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),l1r=o("not"),i1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),d1r=o("from_pretrained()"),c1r=o(" to load the model weights."),f1r=l(),F(UM.$$.fragment),m1r=l(),$r=a("div"),F(TL.$$.fragment),g1r=l(),fbe=a("p"),h1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p1r=l(),an=a("p"),_1r=o("The model class to instantiate is selected based on the "),mbe=a("code"),u1r=o("model_type"),b1r=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),v1r=o("pretrained_model_name_or_path"),F1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),T1r=o("pretrained_model_name_or_path"),M1r=o(":"),E1r=l(),ye=a("ul"),JM=a("li"),pbe=a("strong"),C1r=o("bart"),w1r=o(" \u2014 "),GQ=a("a"),A1r=o("TFBartForConditionalGeneration"),y1r=o(" (BART model)"),L1r=l(),YM=a("li"),_be=a("strong"),x1r=o("blenderbot"),$1r=o(" \u2014 "),OQ=a("a"),k1r=o("TFBlenderbotForConditionalGeneration"),S1r=o(" (Blenderbot model)"),R1r=l(),KM=a("li"),ube=a("strong"),P1r=o("blenderbot-small"),B1r=o(" \u2014 "),VQ=a("a"),I1r=o("TFBlenderbotSmallForConditionalGeneration"),q1r=o(" (BlenderbotSmall model)"),N1r=l(),ZM=a("li"),bbe=a("strong"),j1r=o("encoder-decoder"),D1r=o(" \u2014 "),XQ=a("a"),G1r=o("TFEncoderDecoderModel"),O1r=o(" (Encoder decoder model)"),V1r=l(),e4=a("li"),vbe=a("strong"),X1r=o("led"),z1r=o(" \u2014 "),zQ=a("a"),W1r=o("TFLEDForConditionalGeneration"),Q1r=o(" (LED model)"),H1r=l(),o4=a("li"),Fbe=a("strong"),U1r=o("marian"),J1r=o(" \u2014 "),WQ=a("a"),Y1r=o("TFMarianMTModel"),K1r=o(" (Marian model)"),Z1r=l(),r4=a("li"),Tbe=a("strong"),e9r=o("mbart"),o9r=o(" \u2014 "),QQ=a("a"),r9r=o("TFMBartForConditionalGeneration"),t9r=o(" (mBART model)"),a9r=l(),t4=a("li"),Mbe=a("strong"),n9r=o("mt5"),s9r=o(" \u2014 "),HQ=a("a"),l9r=o("TFMT5ForConditionalGeneration"),i9r=o(" (mT5 model)"),d9r=l(),a4=a("li"),Ebe=a("strong"),c9r=o("pegasus"),f9r=o(" \u2014 "),UQ=a("a"),m9r=o("TFPegasusForConditionalGeneration"),g9r=o(" (Pegasus model)"),h9r=l(),n4=a("li"),Cbe=a("strong"),p9r=o("t5"),_9r=o(" \u2014 "),JQ=a("a"),u9r=o("TFT5ForConditionalGeneration"),b9r=o(" (T5 model)"),v9r=l(),F(s4.$$.fragment),aNe=l(),ac=a("h2"),l4=a("a"),wbe=a("span"),F(ML.$$.fragment),F9r=l(),Abe=a("span"),T9r=o("TFAutoModelForSequenceClassification"),nNe=l(),tr=a("div"),F(EL.$$.fragment),M9r=l(),nc=a("p"),E9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YQ=a("a"),C9r=o("from_pretrained()"),w9r=o(" class method or the "),KQ=a("a"),A9r=o("from_config()"),y9r=o(` class
method.`),L9r=l(),CL=a("p"),x9r=o("This class cannot be instantiated directly using "),ybe=a("code"),$9r=o("__init__()"),k9r=o(" (throws an error)."),S9r=l(),Rt=a("div"),F(wL.$$.fragment),R9r=l(),Lbe=a("p"),P9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B9r=l(),sc=a("p"),I9r=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),q9r=o("not"),N9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),j9r=o("from_pretrained()"),D9r=o(" to load the model weights."),G9r=l(),F(i4.$$.fragment),O9r=l(),kr=a("div"),F(AL.$$.fragment),V9r=l(),$be=a("p"),X9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z9r=l(),nn=a("p"),W9r=o("The model class to instantiate is selected based on the "),kbe=a("code"),Q9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(":"),Z9r=l(),ee=a("ul"),d4=a("li"),Pbe=a("strong"),ebr=o("albert"),obr=o(" \u2014 "),eH=a("a"),rbr=o("TFAlbertForSequenceClassification"),tbr=o(" (ALBERT model)"),abr=l(),c4=a("li"),Bbe=a("strong"),nbr=o("bert"),sbr=o(" \u2014 "),oH=a("a"),lbr=o("TFBertForSequenceClassification"),ibr=o(" (BERT model)"),dbr=l(),f4=a("li"),Ibe=a("strong"),cbr=o("camembert"),fbr=o(" \u2014 "),rH=a("a"),mbr=o("TFCamembertForSequenceClassification"),gbr=o(" (CamemBERT model)"),hbr=l(),m4=a("li"),qbe=a("strong"),pbr=o("convbert"),_br=o(" \u2014 "),tH=a("a"),ubr=o("TFConvBertForSequenceClassification"),bbr=o(" (ConvBERT model)"),vbr=l(),g4=a("li"),Nbe=a("strong"),Fbr=o("ctrl"),Tbr=o(" \u2014 "),aH=a("a"),Mbr=o("TFCTRLForSequenceClassification"),Ebr=o(" (CTRL model)"),Cbr=l(),h4=a("li"),jbe=a("strong"),wbr=o("deberta"),Abr=o(" \u2014 "),nH=a("a"),ybr=o("TFDebertaForSequenceClassification"),Lbr=o(" (DeBERTa model)"),xbr=l(),p4=a("li"),Dbe=a("strong"),$br=o("deberta-v2"),kbr=o(" \u2014 "),sH=a("a"),Sbr=o("TFDebertaV2ForSequenceClassification"),Rbr=o(" (DeBERTa-v2 model)"),Pbr=l(),_4=a("li"),Gbe=a("strong"),Bbr=o("distilbert"),Ibr=o(" \u2014 "),lH=a("a"),qbr=o("TFDistilBertForSequenceClassification"),Nbr=o(" (DistilBERT model)"),jbr=l(),u4=a("li"),Obe=a("strong"),Dbr=o("electra"),Gbr=o(" \u2014 "),iH=a("a"),Obr=o("TFElectraForSequenceClassification"),Vbr=o(" (ELECTRA model)"),Xbr=l(),b4=a("li"),Vbe=a("strong"),zbr=o("flaubert"),Wbr=o(" \u2014 "),dH=a("a"),Qbr=o("TFFlaubertForSequenceClassification"),Hbr=o(" (FlauBERT model)"),Ubr=l(),v4=a("li"),Xbe=a("strong"),Jbr=o("funnel"),Ybr=o(" \u2014 "),cH=a("a"),Kbr=o("TFFunnelForSequenceClassification"),Zbr=o(" (Funnel Transformer model)"),evr=l(),F4=a("li"),zbe=a("strong"),ovr=o("gpt2"),rvr=o(" \u2014 "),fH=a("a"),tvr=o("TFGPT2ForSequenceClassification"),avr=o(" (OpenAI GPT-2 model)"),nvr=l(),T4=a("li"),Wbe=a("strong"),svr=o("gptj"),lvr=o(" \u2014 "),mH=a("a"),ivr=o("TFGPTJForSequenceClassification"),dvr=o(" (GPT-J model)"),cvr=l(),M4=a("li"),Qbe=a("strong"),fvr=o("layoutlm"),mvr=o(" \u2014 "),gH=a("a"),gvr=o("TFLayoutLMForSequenceClassification"),hvr=o(" (LayoutLM model)"),pvr=l(),E4=a("li"),Hbe=a("strong"),_vr=o("longformer"),uvr=o(" \u2014 "),hH=a("a"),bvr=o("TFLongformerForSequenceClassification"),vvr=o(" (Longformer model)"),Fvr=l(),C4=a("li"),Ube=a("strong"),Tvr=o("mobilebert"),Mvr=o(" \u2014 "),pH=a("a"),Evr=o("TFMobileBertForSequenceClassification"),Cvr=o(" (MobileBERT model)"),wvr=l(),w4=a("li"),Jbe=a("strong"),Avr=o("mpnet"),yvr=o(" \u2014 "),_H=a("a"),Lvr=o("TFMPNetForSequenceClassification"),xvr=o(" (MPNet model)"),$vr=l(),A4=a("li"),Ybe=a("strong"),kvr=o("openai-gpt"),Svr=o(" \u2014 "),uH=a("a"),Rvr=o("TFOpenAIGPTForSequenceClassification"),Pvr=o(" (OpenAI GPT model)"),Bvr=l(),y4=a("li"),Kbe=a("strong"),Ivr=o("rembert"),qvr=o(" \u2014 "),bH=a("a"),Nvr=o("TFRemBertForSequenceClassification"),jvr=o(" (RemBERT model)"),Dvr=l(),L4=a("li"),Zbe=a("strong"),Gvr=o("roberta"),Ovr=o(" \u2014 "),vH=a("a"),Vvr=o("TFRobertaForSequenceClassification"),Xvr=o(" (RoBERTa model)"),zvr=l(),x4=a("li"),eve=a("strong"),Wvr=o("roformer"),Qvr=o(" \u2014 "),FH=a("a"),Hvr=o("TFRoFormerForSequenceClassification"),Uvr=o(" (RoFormer model)"),Jvr=l(),$4=a("li"),ove=a("strong"),Yvr=o("tapas"),Kvr=o(" \u2014 "),TH=a("a"),Zvr=o("TFTapasForSequenceClassification"),eFr=o(" (TAPAS model)"),oFr=l(),k4=a("li"),rve=a("strong"),rFr=o("transfo-xl"),tFr=o(" \u2014 "),MH=a("a"),aFr=o("TFTransfoXLForSequenceClassification"),nFr=o(" (Transformer-XL model)"),sFr=l(),S4=a("li"),tve=a("strong"),lFr=o("xlm"),iFr=o(" \u2014 "),EH=a("a"),dFr=o("TFXLMForSequenceClassification"),cFr=o(" (XLM model)"),fFr=l(),R4=a("li"),ave=a("strong"),mFr=o("xlm-roberta"),gFr=o(" \u2014 "),CH=a("a"),hFr=o("TFXLMRobertaForSequenceClassification"),pFr=o(" (XLM-RoBERTa model)"),_Fr=l(),P4=a("li"),nve=a("strong"),uFr=o("xlnet"),bFr=o(" \u2014 "),wH=a("a"),vFr=o("TFXLNetForSequenceClassification"),FFr=o(" (XLNet model)"),TFr=l(),F(B4.$$.fragment),sNe=l(),lc=a("h2"),I4=a("a"),sve=a("span"),F(yL.$$.fragment),MFr=l(),lve=a("span"),EFr=o("TFAutoModelForMultipleChoice"),lNe=l(),ar=a("div"),F(LL.$$.fragment),CFr=l(),ic=a("p"),wFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AH=a("a"),AFr=o("from_pretrained()"),yFr=o(" class method or the "),yH=a("a"),LFr=o("from_config()"),xFr=o(` class
method.`),$Fr=l(),xL=a("p"),kFr=o("This class cannot be instantiated directly using "),ive=a("code"),SFr=o("__init__()"),RFr=o(" (throws an error)."),PFr=l(),Pt=a("div"),F($L.$$.fragment),BFr=l(),dve=a("p"),IFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qFr=l(),dc=a("p"),NFr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),jFr=o("not"),DFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),GFr=o("from_pretrained()"),OFr=o(" to load the model weights."),VFr=l(),F(q4.$$.fragment),XFr=l(),Sr=a("div"),F(kL.$$.fragment),zFr=l(),fve=a("p"),WFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QFr=l(),sn=a("p"),HFr=o("The model class to instantiate is selected based on the "),mve=a("code"),UFr=o("model_type"),JFr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),YFr=o("pretrained_model_name_or_path"),KFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),ZFr=o("pretrained_model_name_or_path"),eTr=o(":"),oTr=l(),he=a("ul"),N4=a("li"),pve=a("strong"),rTr=o("albert"),tTr=o(" \u2014 "),xH=a("a"),aTr=o("TFAlbertForMultipleChoice"),nTr=o(" (ALBERT model)"),sTr=l(),j4=a("li"),_ve=a("strong"),lTr=o("bert"),iTr=o(" \u2014 "),$H=a("a"),dTr=o("TFBertForMultipleChoice"),cTr=o(" (BERT model)"),fTr=l(),D4=a("li"),uve=a("strong"),mTr=o("camembert"),gTr=o(" \u2014 "),kH=a("a"),hTr=o("TFCamembertForMultipleChoice"),pTr=o(" (CamemBERT model)"),_Tr=l(),G4=a("li"),bve=a("strong"),uTr=o("convbert"),bTr=o(" \u2014 "),SH=a("a"),vTr=o("TFConvBertForMultipleChoice"),FTr=o(" (ConvBERT model)"),TTr=l(),O4=a("li"),vve=a("strong"),MTr=o("distilbert"),ETr=o(" \u2014 "),RH=a("a"),CTr=o("TFDistilBertForMultipleChoice"),wTr=o(" (DistilBERT model)"),ATr=l(),V4=a("li"),Fve=a("strong"),yTr=o("electra"),LTr=o(" \u2014 "),PH=a("a"),xTr=o("TFElectraForMultipleChoice"),$Tr=o(" (ELECTRA model)"),kTr=l(),X4=a("li"),Tve=a("strong"),STr=o("flaubert"),RTr=o(" \u2014 "),BH=a("a"),PTr=o("TFFlaubertForMultipleChoice"),BTr=o(" (FlauBERT model)"),ITr=l(),z4=a("li"),Mve=a("strong"),qTr=o("funnel"),NTr=o(" \u2014 "),IH=a("a"),jTr=o("TFFunnelForMultipleChoice"),DTr=o(" (Funnel Transformer model)"),GTr=l(),W4=a("li"),Eve=a("strong"),OTr=o("longformer"),VTr=o(" \u2014 "),qH=a("a"),XTr=o("TFLongformerForMultipleChoice"),zTr=o(" (Longformer model)"),WTr=l(),Q4=a("li"),Cve=a("strong"),QTr=o("mobilebert"),HTr=o(" \u2014 "),NH=a("a"),UTr=o("TFMobileBertForMultipleChoice"),JTr=o(" (MobileBERT model)"),YTr=l(),H4=a("li"),wve=a("strong"),KTr=o("mpnet"),ZTr=o(" \u2014 "),jH=a("a"),e7r=o("TFMPNetForMultipleChoice"),o7r=o(" (MPNet model)"),r7r=l(),U4=a("li"),Ave=a("strong"),t7r=o("rembert"),a7r=o(" \u2014 "),DH=a("a"),n7r=o("TFRemBertForMultipleChoice"),s7r=o(" (RemBERT model)"),l7r=l(),J4=a("li"),yve=a("strong"),i7r=o("roberta"),d7r=o(" \u2014 "),GH=a("a"),c7r=o("TFRobertaForMultipleChoice"),f7r=o(" (RoBERTa model)"),m7r=l(),Y4=a("li"),Lve=a("strong"),g7r=o("roformer"),h7r=o(" \u2014 "),OH=a("a"),p7r=o("TFRoFormerForMultipleChoice"),_7r=o(" (RoFormer model)"),u7r=l(),K4=a("li"),xve=a("strong"),b7r=o("xlm"),v7r=o(" \u2014 "),VH=a("a"),F7r=o("TFXLMForMultipleChoice"),T7r=o(" (XLM model)"),M7r=l(),Z4=a("li"),$ve=a("strong"),E7r=o("xlm-roberta"),C7r=o(" \u2014 "),XH=a("a"),w7r=o("TFXLMRobertaForMultipleChoice"),A7r=o(" (XLM-RoBERTa model)"),y7r=l(),eE=a("li"),kve=a("strong"),L7r=o("xlnet"),x7r=o(" \u2014 "),zH=a("a"),$7r=o("TFXLNetForMultipleChoice"),k7r=o(" (XLNet model)"),S7r=l(),F(oE.$$.fragment),iNe=l(),cc=a("h2"),rE=a("a"),Sve=a("span"),F(SL.$$.fragment),R7r=l(),Rve=a("span"),P7r=o("TFAutoModelForNextSentencePrediction"),dNe=l(),nr=a("div"),F(RL.$$.fragment),B7r=l(),fc=a("p"),I7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WH=a("a"),q7r=o("from_pretrained()"),N7r=o(" class method or the "),QH=a("a"),j7r=o("from_config()"),D7r=o(` class
method.`),G7r=l(),PL=a("p"),O7r=o("This class cannot be instantiated directly using "),Pve=a("code"),V7r=o("__init__()"),X7r=o(" (throws an error)."),z7r=l(),Bt=a("div"),F(BL.$$.fragment),W7r=l(),Bve=a("p"),Q7r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H7r=l(),mc=a("p"),U7r=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),J7r=o("not"),Y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),K7r=o("from_pretrained()"),Z7r=o(" to load the model weights."),eMr=l(),F(tE.$$.fragment),oMr=l(),Rr=a("div"),F(IL.$$.fragment),rMr=l(),qve=a("p"),tMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aMr=l(),ln=a("p"),nMr=o("The model class to instantiate is selected based on the "),Nve=a("code"),sMr=o("model_type"),lMr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(":"),mMr=l(),qL=a("ul"),aE=a("li"),Gve=a("strong"),gMr=o("bert"),hMr=o(" \u2014 "),UH=a("a"),pMr=o("TFBertForNextSentencePrediction"),_Mr=o(" (BERT model)"),uMr=l(),nE=a("li"),Ove=a("strong"),bMr=o("mobilebert"),vMr=o(" \u2014 "),JH=a("a"),FMr=o("TFMobileBertForNextSentencePrediction"),TMr=o(" (MobileBERT model)"),MMr=l(),F(sE.$$.fragment),cNe=l(),gc=a("h2"),lE=a("a"),Vve=a("span"),F(NL.$$.fragment),EMr=l(),Xve=a("span"),CMr=o("TFAutoModelForTableQuestionAnswering"),fNe=l(),sr=a("div"),F(jL.$$.fragment),wMr=l(),hc=a("p"),AMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YH=a("a"),yMr=o("from_pretrained()"),LMr=o(" class method or the "),KH=a("a"),xMr=o("from_config()"),$Mr=o(` class
method.`),kMr=l(),DL=a("p"),SMr=o("This class cannot be instantiated directly using "),zve=a("code"),RMr=o("__init__()"),PMr=o(" (throws an error)."),BMr=l(),It=a("div"),F(GL.$$.fragment),IMr=l(),Wve=a("p"),qMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NMr=l(),pc=a("p"),jMr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),DMr=o("not"),GMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),OMr=o("from_pretrained()"),VMr=o(" to load the model weights."),XMr=l(),F(iE.$$.fragment),zMr=l(),Pr=a("div"),F(OL.$$.fragment),WMr=l(),Hve=a("p"),QMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HMr=l(),dn=a("p"),UMr=o("The model class to instantiate is selected based on the "),Uve=a("code"),JMr=o("model_type"),YMr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),KMr=o("pretrained_model_name_or_path"),ZMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(":"),r4r=l(),Kve=a("ul"),dE=a("li"),Zve=a("strong"),t4r=o("tapas"),a4r=o(" \u2014 "),eU=a("a"),n4r=o("TFTapasForQuestionAnswering"),s4r=o(" (TAPAS model)"),l4r=l(),F(cE.$$.fragment),mNe=l(),_c=a("h2"),fE=a("a"),eFe=a("span"),F(VL.$$.fragment),i4r=l(),oFe=a("span"),d4r=o("TFAutoModelForTokenClassification"),gNe=l(),lr=a("div"),F(XL.$$.fragment),c4r=l(),uc=a("p"),f4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oU=a("a"),m4r=o("from_pretrained()"),g4r=o(" class method or the "),rU=a("a"),h4r=o("from_config()"),p4r=o(` class
method.`),_4r=l(),zL=a("p"),u4r=o("This class cannot be instantiated directly using "),rFe=a("code"),b4r=o("__init__()"),v4r=o(" (throws an error)."),F4r=l(),qt=a("div"),F(WL.$$.fragment),T4r=l(),tFe=a("p"),M4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E4r=l(),bc=a("p"),C4r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),w4r=o("not"),A4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),y4r=o("from_pretrained()"),L4r=o(" to load the model weights."),x4r=l(),F(mE.$$.fragment),$4r=l(),Br=a("div"),F(QL.$$.fragment),k4r=l(),nFe=a("p"),S4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),R4r=l(),cn=a("p"),P4r=o("The model class to instantiate is selected based on the "),sFe=a("code"),B4r=o("model_type"),I4r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),q4r=o("pretrained_model_name_or_path"),N4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),j4r=o("pretrained_model_name_or_path"),D4r=o(":"),G4r=l(),de=a("ul"),gE=a("li"),dFe=a("strong"),O4r=o("albert"),V4r=o(" \u2014 "),aU=a("a"),X4r=o("TFAlbertForTokenClassification"),z4r=o(" (ALBERT model)"),W4r=l(),hE=a("li"),cFe=a("strong"),Q4r=o("bert"),H4r=o(" \u2014 "),nU=a("a"),U4r=o("TFBertForTokenClassification"),J4r=o(" (BERT model)"),Y4r=l(),pE=a("li"),fFe=a("strong"),K4r=o("camembert"),Z4r=o(" \u2014 "),sU=a("a"),eEr=o("TFCamembertForTokenClassification"),oEr=o(" (CamemBERT model)"),rEr=l(),_E=a("li"),mFe=a("strong"),tEr=o("convbert"),aEr=o(" \u2014 "),lU=a("a"),nEr=o("TFConvBertForTokenClassification"),sEr=o(" (ConvBERT model)"),lEr=l(),uE=a("li"),gFe=a("strong"),iEr=o("deberta"),dEr=o(" \u2014 "),iU=a("a"),cEr=o("TFDebertaForTokenClassification"),fEr=o(" (DeBERTa model)"),mEr=l(),bE=a("li"),hFe=a("strong"),gEr=o("deberta-v2"),hEr=o(" \u2014 "),dU=a("a"),pEr=o("TFDebertaV2ForTokenClassification"),_Er=o(" (DeBERTa-v2 model)"),uEr=l(),vE=a("li"),pFe=a("strong"),bEr=o("distilbert"),vEr=o(" \u2014 "),cU=a("a"),FEr=o("TFDistilBertForTokenClassification"),TEr=o(" (DistilBERT model)"),MEr=l(),FE=a("li"),_Fe=a("strong"),EEr=o("electra"),CEr=o(" \u2014 "),fU=a("a"),wEr=o("TFElectraForTokenClassification"),AEr=o(" (ELECTRA model)"),yEr=l(),TE=a("li"),uFe=a("strong"),LEr=o("flaubert"),xEr=o(" \u2014 "),mU=a("a"),$Er=o("TFFlaubertForTokenClassification"),kEr=o(" (FlauBERT model)"),SEr=l(),ME=a("li"),bFe=a("strong"),REr=o("funnel"),PEr=o(" \u2014 "),gU=a("a"),BEr=o("TFFunnelForTokenClassification"),IEr=o(" (Funnel Transformer model)"),qEr=l(),EE=a("li"),vFe=a("strong"),NEr=o("layoutlm"),jEr=o(" \u2014 "),hU=a("a"),DEr=o("TFLayoutLMForTokenClassification"),GEr=o(" (LayoutLM model)"),OEr=l(),CE=a("li"),FFe=a("strong"),VEr=o("longformer"),XEr=o(" \u2014 "),pU=a("a"),zEr=o("TFLongformerForTokenClassification"),WEr=o(" (Longformer model)"),QEr=l(),wE=a("li"),TFe=a("strong"),HEr=o("mobilebert"),UEr=o(" \u2014 "),_U=a("a"),JEr=o("TFMobileBertForTokenClassification"),YEr=o(" (MobileBERT model)"),KEr=l(),AE=a("li"),MFe=a("strong"),ZEr=o("mpnet"),eCr=o(" \u2014 "),uU=a("a"),oCr=o("TFMPNetForTokenClassification"),rCr=o(" (MPNet model)"),tCr=l(),yE=a("li"),EFe=a("strong"),aCr=o("rembert"),nCr=o(" \u2014 "),bU=a("a"),sCr=o("TFRemBertForTokenClassification"),lCr=o(" (RemBERT model)"),iCr=l(),LE=a("li"),CFe=a("strong"),dCr=o("roberta"),cCr=o(" \u2014 "),vU=a("a"),fCr=o("TFRobertaForTokenClassification"),mCr=o(" (RoBERTa model)"),gCr=l(),xE=a("li"),wFe=a("strong"),hCr=o("roformer"),pCr=o(" \u2014 "),FU=a("a"),_Cr=o("TFRoFormerForTokenClassification"),uCr=o(" (RoFormer model)"),bCr=l(),$E=a("li"),AFe=a("strong"),vCr=o("xlm"),FCr=o(" \u2014 "),TU=a("a"),TCr=o("TFXLMForTokenClassification"),MCr=o(" (XLM model)"),ECr=l(),kE=a("li"),yFe=a("strong"),CCr=o("xlm-roberta"),wCr=o(" \u2014 "),MU=a("a"),ACr=o("TFXLMRobertaForTokenClassification"),yCr=o(" (XLM-RoBERTa model)"),LCr=l(),SE=a("li"),LFe=a("strong"),xCr=o("xlnet"),$Cr=o(" \u2014 "),EU=a("a"),kCr=o("TFXLNetForTokenClassification"),SCr=o(" (XLNet model)"),RCr=l(),F(RE.$$.fragment),hNe=l(),vc=a("h2"),PE=a("a"),xFe=a("span"),F(HL.$$.fragment),PCr=l(),$Fe=a("span"),BCr=o("TFAutoModelForQuestionAnswering"),pNe=l(),ir=a("div"),F(UL.$$.fragment),ICr=l(),Fc=a("p"),qCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CU=a("a"),NCr=o("from_pretrained()"),jCr=o(" class method or the "),wU=a("a"),DCr=o("from_config()"),GCr=o(` class
method.`),OCr=l(),JL=a("p"),VCr=o("This class cannot be instantiated directly using "),kFe=a("code"),XCr=o("__init__()"),zCr=o(" (throws an error)."),WCr=l(),Nt=a("div"),F(YL.$$.fragment),QCr=l(),SFe=a("p"),HCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UCr=l(),Tc=a("p"),JCr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),YCr=o("not"),KCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),ZCr=o("from_pretrained()"),e5r=o(" to load the model weights."),o5r=l(),F(BE.$$.fragment),r5r=l(),Ir=a("div"),F(KL.$$.fragment),t5r=l(),PFe=a("p"),a5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n5r=l(),fn=a("p"),s5r=o("The model class to instantiate is selected based on the "),BFe=a("code"),l5r=o("model_type"),i5r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),d5r=o("pretrained_model_name_or_path"),c5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(":"),g5r=l(),ce=a("ul"),IE=a("li"),NFe=a("strong"),h5r=o("albert"),p5r=o(" \u2014 "),yU=a("a"),_5r=o("TFAlbertForQuestionAnswering"),u5r=o(" (ALBERT model)"),b5r=l(),qE=a("li"),jFe=a("strong"),v5r=o("bert"),F5r=o(" \u2014 "),LU=a("a"),T5r=o("TFBertForQuestionAnswering"),M5r=o(" (BERT model)"),E5r=l(),NE=a("li"),DFe=a("strong"),C5r=o("camembert"),w5r=o(" \u2014 "),xU=a("a"),A5r=o("TFCamembertForQuestionAnswering"),y5r=o(" (CamemBERT model)"),L5r=l(),jE=a("li"),GFe=a("strong"),x5r=o("convbert"),$5r=o(" \u2014 "),$U=a("a"),k5r=o("TFConvBertForQuestionAnswering"),S5r=o(" (ConvBERT model)"),R5r=l(),DE=a("li"),OFe=a("strong"),P5r=o("deberta"),B5r=o(" \u2014 "),kU=a("a"),I5r=o("TFDebertaForQuestionAnswering"),q5r=o(" (DeBERTa model)"),N5r=l(),GE=a("li"),VFe=a("strong"),j5r=o("deberta-v2"),D5r=o(" \u2014 "),SU=a("a"),G5r=o("TFDebertaV2ForQuestionAnswering"),O5r=o(" (DeBERTa-v2 model)"),V5r=l(),OE=a("li"),XFe=a("strong"),X5r=o("distilbert"),z5r=o(" \u2014 "),RU=a("a"),W5r=o("TFDistilBertForQuestionAnswering"),Q5r=o(" (DistilBERT model)"),H5r=l(),VE=a("li"),zFe=a("strong"),U5r=o("electra"),J5r=o(" \u2014 "),PU=a("a"),Y5r=o("TFElectraForQuestionAnswering"),K5r=o(" (ELECTRA model)"),Z5r=l(),XE=a("li"),WFe=a("strong"),e3r=o("flaubert"),o3r=o(" \u2014 "),BU=a("a"),r3r=o("TFFlaubertForQuestionAnsweringSimple"),t3r=o(" (FlauBERT model)"),a3r=l(),zE=a("li"),QFe=a("strong"),n3r=o("funnel"),s3r=o(" \u2014 "),IU=a("a"),l3r=o("TFFunnelForQuestionAnswering"),i3r=o(" (Funnel Transformer model)"),d3r=l(),WE=a("li"),HFe=a("strong"),c3r=o("gptj"),f3r=o(" \u2014 "),qU=a("a"),m3r=o("TFGPTJForQuestionAnswering"),g3r=o(" (GPT-J model)"),h3r=l(),QE=a("li"),UFe=a("strong"),p3r=o("longformer"),_3r=o(" \u2014 "),NU=a("a"),u3r=o("TFLongformerForQuestionAnswering"),b3r=o(" (Longformer model)"),v3r=l(),HE=a("li"),JFe=a("strong"),F3r=o("mobilebert"),T3r=o(" \u2014 "),jU=a("a"),M3r=o("TFMobileBertForQuestionAnswering"),E3r=o(" (MobileBERT model)"),C3r=l(),UE=a("li"),YFe=a("strong"),w3r=o("mpnet"),A3r=o(" \u2014 "),DU=a("a"),y3r=o("TFMPNetForQuestionAnswering"),L3r=o(" (MPNet model)"),x3r=l(),JE=a("li"),KFe=a("strong"),$3r=o("rembert"),k3r=o(" \u2014 "),GU=a("a"),S3r=o("TFRemBertForQuestionAnswering"),R3r=o(" (RemBERT model)"),P3r=l(),YE=a("li"),ZFe=a("strong"),B3r=o("roberta"),I3r=o(" \u2014 "),OU=a("a"),q3r=o("TFRobertaForQuestionAnswering"),N3r=o(" (RoBERTa model)"),j3r=l(),KE=a("li"),eTe=a("strong"),D3r=o("roformer"),G3r=o(" \u2014 "),VU=a("a"),O3r=o("TFRoFormerForQuestionAnswering"),V3r=o(" (RoFormer model)"),X3r=l(),ZE=a("li"),oTe=a("strong"),z3r=o("xlm"),W3r=o(" \u2014 "),XU=a("a"),Q3r=o("TFXLMForQuestionAnsweringSimple"),H3r=o(" (XLM model)"),U3r=l(),eC=a("li"),rTe=a("strong"),J3r=o("xlm-roberta"),Y3r=o(" \u2014 "),zU=a("a"),K3r=o("TFXLMRobertaForQuestionAnswering"),Z3r=o(" (XLM-RoBERTa model)"),ewr=l(),oC=a("li"),tTe=a("strong"),owr=o("xlnet"),rwr=o(" \u2014 "),WU=a("a"),twr=o("TFXLNetForQuestionAnsweringSimple"),awr=o(" (XLNet model)"),nwr=l(),F(rC.$$.fragment),_Ne=l(),Mc=a("h2"),tC=a("a"),aTe=a("span"),F(ZL.$$.fragment),swr=l(),nTe=a("span"),lwr=o("TFAutoModelForVision2Seq"),uNe=l(),dr=a("div"),F(e8.$$.fragment),iwr=l(),Ec=a("p"),dwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QU=a("a"),cwr=o("from_pretrained()"),fwr=o(" class method or the "),HU=a("a"),mwr=o("from_config()"),gwr=o(` class
method.`),hwr=l(),o8=a("p"),pwr=o("This class cannot be instantiated directly using "),sTe=a("code"),_wr=o("__init__()"),uwr=o(" (throws an error)."),bwr=l(),jt=a("div"),F(r8.$$.fragment),vwr=l(),lTe=a("p"),Fwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Twr=l(),Cc=a("p"),Mwr=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),Ewr=o("not"),Cwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),wwr=o("from_pretrained()"),Awr=o(" to load the model weights."),ywr=l(),F(aC.$$.fragment),Lwr=l(),qr=a("div"),F(t8.$$.fragment),xwr=l(),dTe=a("p"),$wr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kwr=l(),mn=a("p"),Swr=o("The model class to instantiate is selected based on the "),cTe=a("code"),Rwr=o("model_type"),Pwr=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),Bwr=o("pretrained_model_name_or_path"),Iwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),qwr=o("pretrained_model_name_or_path"),Nwr=o(":"),jwr=l(),gTe=a("ul"),nC=a("li"),hTe=a("strong"),Dwr=o("vision-encoder-decoder"),Gwr=o(" \u2014 "),JU=a("a"),Owr=o("TFVisionEncoderDecoderModel"),Vwr=o(" (Vision Encoder decoder model)"),Xwr=l(),F(sC.$$.fragment),bNe=l(),wc=a("h2"),lC=a("a"),pTe=a("span"),F(a8.$$.fragment),zwr=l(),_Te=a("span"),Wwr=o("TFAutoModelForSpeechSeq2Seq"),vNe=l(),cr=a("div"),F(n8.$$.fragment),Qwr=l(),Ac=a("p"),Hwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YU=a("a"),Uwr=o("from_pretrained()"),Jwr=o(" class method or the "),KU=a("a"),Ywr=o("from_config()"),Kwr=o(` class
method.`),Zwr=l(),s8=a("p"),e0r=o("This class cannot be instantiated directly using "),uTe=a("code"),o0r=o("__init__()"),r0r=o(" (throws an error)."),t0r=l(),Dt=a("div"),F(l8.$$.fragment),a0r=l(),bTe=a("p"),n0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),s0r=l(),yc=a("p"),l0r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),i0r=o("not"),d0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),c0r=o("from_pretrained()"),f0r=o(" to load the model weights."),m0r=l(),F(iC.$$.fragment),g0r=l(),Nr=a("div"),F(i8.$$.fragment),h0r=l(),FTe=a("p"),p0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_0r=l(),gn=a("p"),u0r=o("The model class to instantiate is selected based on the "),TTe=a("code"),b0r=o("model_type"),v0r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),F0r=o("pretrained_model_name_or_path"),T0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(":"),C0r=l(),CTe=a("ul"),dC=a("li"),wTe=a("strong"),w0r=o("speech_to_text"),A0r=o(" \u2014 "),eJ=a("a"),y0r=o("TFSpeech2TextForConditionalGeneration"),L0r=o(" (Speech2Text model)"),x0r=l(),F(cC.$$.fragment),FNe=l(),Lc=a("h2"),fC=a("a"),ATe=a("span"),F(d8.$$.fragment),$0r=l(),yTe=a("span"),k0r=o("FlaxAutoModel"),TNe=l(),fr=a("div"),F(c8.$$.fragment),S0r=l(),xc=a("p"),R0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oJ=a("a"),P0r=o("from_pretrained()"),B0r=o(" class method or the "),rJ=a("a"),I0r=o("from_config()"),q0r=o(` class
method.`),N0r=l(),f8=a("p"),j0r=o("This class cannot be instantiated directly using "),LTe=a("code"),D0r=o("__init__()"),G0r=o(" (throws an error)."),O0r=l(),Gt=a("div"),F(m8.$$.fragment),V0r=l(),xTe=a("p"),X0r=o("Instantiates one of the base model classes of the library from a configuration."),z0r=l(),$c=a("p"),W0r=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),Q0r=o("not"),H0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),U0r=o("from_pretrained()"),J0r=o(" to load the model weights."),Y0r=l(),F(mC.$$.fragment),K0r=l(),jr=a("div"),F(g8.$$.fragment),Z0r=l(),kTe=a("p"),eAr=o("Instantiate one of the base model classes of the library from a pretrained model."),oAr=l(),hn=a("p"),rAr=o("The model class to instantiate is selected based on the "),STe=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),te=a("ul"),gC=a("li"),BTe=a("strong"),cAr=o("albert"),fAr=o(" \u2014 "),aJ=a("a"),mAr=o("FlaxAlbertModel"),gAr=o(" (ALBERT model)"),hAr=l(),hC=a("li"),ITe=a("strong"),pAr=o("bart"),_Ar=o(" \u2014 "),nJ=a("a"),uAr=o("FlaxBartModel"),bAr=o(" (BART model)"),vAr=l(),pC=a("li"),qTe=a("strong"),FAr=o("beit"),TAr=o(" \u2014 "),sJ=a("a"),MAr=o("FlaxBeitModel"),EAr=o(" (BEiT model)"),CAr=l(),_C=a("li"),NTe=a("strong"),wAr=o("bert"),AAr=o(" \u2014 "),lJ=a("a"),yAr=o("FlaxBertModel"),LAr=o(" (BERT model)"),xAr=l(),uC=a("li"),jTe=a("strong"),$Ar=o("big_bird"),kAr=o(" \u2014 "),iJ=a("a"),SAr=o("FlaxBigBirdModel"),RAr=o(" (BigBird model)"),PAr=l(),bC=a("li"),DTe=a("strong"),BAr=o("blenderbot"),IAr=o(" \u2014 "),dJ=a("a"),qAr=o("FlaxBlenderbotModel"),NAr=o(" (Blenderbot model)"),jAr=l(),vC=a("li"),GTe=a("strong"),DAr=o("blenderbot-small"),GAr=o(" \u2014 "),cJ=a("a"),OAr=o("FlaxBlenderbotSmallModel"),VAr=o(" (BlenderbotSmall model)"),XAr=l(),FC=a("li"),OTe=a("strong"),zAr=o("clip"),WAr=o(" \u2014 "),fJ=a("a"),QAr=o("FlaxCLIPModel"),HAr=o(" (CLIP model)"),UAr=l(),TC=a("li"),VTe=a("strong"),JAr=o("distilbert"),YAr=o(" \u2014 "),mJ=a("a"),KAr=o("FlaxDistilBertModel"),ZAr=o(" (DistilBERT model)"),e6r=l(),MC=a("li"),XTe=a("strong"),o6r=o("electra"),r6r=o(" \u2014 "),gJ=a("a"),t6r=o("FlaxElectraModel"),a6r=o(" (ELECTRA model)"),n6r=l(),EC=a("li"),zTe=a("strong"),s6r=o("gpt2"),l6r=o(" \u2014 "),hJ=a("a"),i6r=o("FlaxGPT2Model"),d6r=o(" (OpenAI GPT-2 model)"),c6r=l(),CC=a("li"),WTe=a("strong"),f6r=o("gpt_neo"),m6r=o(" \u2014 "),pJ=a("a"),g6r=o("FlaxGPTNeoModel"),h6r=o(" (GPT Neo model)"),p6r=l(),wC=a("li"),QTe=a("strong"),_6r=o("gptj"),u6r=o(" \u2014 "),_J=a("a"),b6r=o("FlaxGPTJModel"),v6r=o(" (GPT-J model)"),F6r=l(),AC=a("li"),HTe=a("strong"),T6r=o("marian"),M6r=o(" \u2014 "),uJ=a("a"),E6r=o("FlaxMarianModel"),C6r=o(" (Marian model)"),w6r=l(),yC=a("li"),UTe=a("strong"),A6r=o("mbart"),y6r=o(" \u2014 "),bJ=a("a"),L6r=o("FlaxMBartModel"),x6r=o(" (mBART model)"),$6r=l(),LC=a("li"),JTe=a("strong"),k6r=o("mt5"),S6r=o(" \u2014 "),vJ=a("a"),R6r=o("FlaxMT5Model"),P6r=o(" (mT5 model)"),B6r=l(),xC=a("li"),YTe=a("strong"),I6r=o("pegasus"),q6r=o(" \u2014 "),FJ=a("a"),N6r=o("FlaxPegasusModel"),j6r=o(" (Pegasus model)"),D6r=l(),$C=a("li"),KTe=a("strong"),G6r=o("roberta"),O6r=o(" \u2014 "),TJ=a("a"),V6r=o("FlaxRobertaModel"),X6r=o(" (RoBERTa model)"),z6r=l(),kC=a("li"),ZTe=a("strong"),W6r=o("roformer"),Q6r=o(" \u2014 "),MJ=a("a"),H6r=o("FlaxRoFormerModel"),U6r=o(" (RoFormer model)"),J6r=l(),SC=a("li"),e7e=a("strong"),Y6r=o("t5"),K6r=o(" \u2014 "),EJ=a("a"),Z6r=o("FlaxT5Model"),eyr=o(" (T5 model)"),oyr=l(),RC=a("li"),o7e=a("strong"),ryr=o("vision-text-dual-encoder"),tyr=o(" \u2014 "),CJ=a("a"),ayr=o("FlaxVisionTextDualEncoderModel"),nyr=o(" (VisionTextDualEncoder model)"),syr=l(),PC=a("li"),r7e=a("strong"),lyr=o("vit"),iyr=o(" \u2014 "),wJ=a("a"),dyr=o("FlaxViTModel"),cyr=o(" (ViT model)"),fyr=l(),BC=a("li"),t7e=a("strong"),myr=o("wav2vec2"),gyr=o(" \u2014 "),AJ=a("a"),hyr=o("FlaxWav2Vec2Model"),pyr=o(" (Wav2Vec2 model)"),_yr=l(),IC=a("li"),a7e=a("strong"),uyr=o("xglm"),byr=o(" \u2014 "),yJ=a("a"),vyr=o("FlaxXGLMModel"),Fyr=o(" (XGLM model)"),Tyr=l(),qC=a("li"),n7e=a("strong"),Myr=o("xlm-roberta"),Eyr=o(" \u2014 "),LJ=a("a"),Cyr=o("FlaxXLMRobertaModel"),wyr=o(" (XLM-RoBERTa model)"),Ayr=l(),F(NC.$$.fragment),MNe=l(),kc=a("h2"),jC=a("a"),s7e=a("span"),F(h8.$$.fragment),yyr=l(),l7e=a("span"),Lyr=o("FlaxAutoModelForCausalLM"),ENe=l(),mr=a("div"),F(p8.$$.fragment),xyr=l(),Sc=a("p"),$yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),$J=a("a"),Ryr=o("from_config()"),Pyr=o(` class
method.`),Byr=l(),_8=a("p"),Iyr=o("This class cannot be instantiated directly using "),i7e=a("code"),qyr=o("__init__()"),Nyr=o(" (throws an error)."),jyr=l(),Ot=a("div"),F(u8.$$.fragment),Dyr=l(),d7e=a("p"),Gyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oyr=l(),Rc=a("p"),Vyr=o(`Note:
Loading a model from its configuration file does `),c7e=a("strong"),Xyr=o("not"),zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),Wyr=o("from_pretrained()"),Qyr=o(" to load the model weights."),Hyr=l(),F(DC.$$.fragment),Uyr=l(),Dr=a("div"),F(b8.$$.fragment),Jyr=l(),f7e=a("p"),Yyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kyr=l(),pn=a("p"),Zyr=o("The model class to instantiate is selected based on the "),m7e=a("code"),eLr=o("model_type"),oLr=o(` property of the config object (either
passed as an argument or loaded from `),g7e=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(":"),sLr=l(),Re=a("ul"),GC=a("li"),p7e=a("strong"),lLr=o("bart"),iLr=o(" \u2014 "),SJ=a("a"),dLr=o("FlaxBartForCausalLM"),cLr=o(" (BART model)"),fLr=l(),OC=a("li"),_7e=a("strong"),mLr=o("bert"),gLr=o(" \u2014 "),RJ=a("a"),hLr=o("FlaxBertForCausalLM"),pLr=o(" (BERT model)"),_Lr=l(),VC=a("li"),u7e=a("strong"),uLr=o("big_bird"),bLr=o(" \u2014 "),PJ=a("a"),vLr=o("FlaxBigBirdForCausalLM"),FLr=o(" (BigBird model)"),TLr=l(),XC=a("li"),b7e=a("strong"),MLr=o("electra"),ELr=o(" \u2014 "),BJ=a("a"),CLr=o("FlaxElectraForCausalLM"),wLr=o(" (ELECTRA model)"),ALr=l(),zC=a("li"),v7e=a("strong"),yLr=o("gpt2"),LLr=o(" \u2014 "),IJ=a("a"),xLr=o("FlaxGPT2LMHeadModel"),$Lr=o(" (OpenAI GPT-2 model)"),kLr=l(),WC=a("li"),F7e=a("strong"),SLr=o("gpt_neo"),RLr=o(" \u2014 "),qJ=a("a"),PLr=o("FlaxGPTNeoForCausalLM"),BLr=o(" (GPT Neo model)"),ILr=l(),QC=a("li"),T7e=a("strong"),qLr=o("gptj"),NLr=o(" \u2014 "),NJ=a("a"),jLr=o("FlaxGPTJForCausalLM"),DLr=o(" (GPT-J model)"),GLr=l(),HC=a("li"),M7e=a("strong"),OLr=o("roberta"),VLr=o(" \u2014 "),jJ=a("a"),XLr=o("FlaxRobertaForCausalLM"),zLr=o(" (RoBERTa model)"),WLr=l(),UC=a("li"),E7e=a("strong"),QLr=o("xglm"),HLr=o(" \u2014 "),DJ=a("a"),ULr=o("FlaxXGLMForCausalLM"),JLr=o(" (XGLM model)"),YLr=l(),F(JC.$$.fragment),CNe=l(),Pc=a("h2"),YC=a("a"),C7e=a("span"),F(v8.$$.fragment),KLr=l(),w7e=a("span"),ZLr=o("FlaxAutoModelForPreTraining"),wNe=l(),gr=a("div"),F(F8.$$.fragment),e8r=l(),Bc=a("p"),o8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GJ=a("a"),r8r=o("from_pretrained()"),t8r=o(" class method or the "),OJ=a("a"),a8r=o("from_config()"),n8r=o(` class
method.`),s8r=l(),T8=a("p"),l8r=o("This class cannot be instantiated directly using "),A7e=a("code"),i8r=o("__init__()"),d8r=o(" (throws an error)."),c8r=l(),Vt=a("div"),F(M8.$$.fragment),f8r=l(),y7e=a("p"),m8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g8r=l(),Ic=a("p"),h8r=o(`Note:
Loading a model from its configuration file does `),L7e=a("strong"),p8r=o("not"),_8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),u8r=o("from_pretrained()"),b8r=o(" to load the model weights."),v8r=l(),F(KC.$$.fragment),F8r=l(),Gr=a("div"),F(E8.$$.fragment),T8r=l(),x7e=a("p"),M8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E8r=l(),_n=a("p"),C8r=o("The model class to instantiate is selected based on the "),$7e=a("code"),w8r=o("model_type"),A8r=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),y8r=o("pretrained_model_name_or_path"),L8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),x8r=o("pretrained_model_name_or_path"),$8r=o(":"),k8r=l(),Ee=a("ul"),ZC=a("li"),R7e=a("strong"),S8r=o("albert"),R8r=o(" \u2014 "),XJ=a("a"),P8r=o("FlaxAlbertForPreTraining"),B8r=o(" (ALBERT model)"),I8r=l(),e5=a("li"),P7e=a("strong"),q8r=o("bart"),N8r=o(" \u2014 "),zJ=a("a"),j8r=o("FlaxBartForConditionalGeneration"),D8r=o(" (BART model)"),G8r=l(),o5=a("li"),B7e=a("strong"),O8r=o("bert"),V8r=o(" \u2014 "),WJ=a("a"),X8r=o("FlaxBertForPreTraining"),z8r=o(" (BERT model)"),W8r=l(),r5=a("li"),I7e=a("strong"),Q8r=o("big_bird"),H8r=o(" \u2014 "),QJ=a("a"),U8r=o("FlaxBigBirdForPreTraining"),J8r=o(" (BigBird model)"),Y8r=l(),t5=a("li"),q7e=a("strong"),K8r=o("electra"),Z8r=o(" \u2014 "),HJ=a("a"),exr=o("FlaxElectraForPreTraining"),oxr=o(" (ELECTRA model)"),rxr=l(),a5=a("li"),N7e=a("strong"),txr=o("mbart"),axr=o(" \u2014 "),UJ=a("a"),nxr=o("FlaxMBartForConditionalGeneration"),sxr=o(" (mBART model)"),lxr=l(),n5=a("li"),j7e=a("strong"),ixr=o("mt5"),dxr=o(" \u2014 "),JJ=a("a"),cxr=o("FlaxMT5ForConditionalGeneration"),fxr=o(" (mT5 model)"),mxr=l(),s5=a("li"),D7e=a("strong"),gxr=o("roberta"),hxr=o(" \u2014 "),YJ=a("a"),pxr=o("FlaxRobertaForMaskedLM"),_xr=o(" (RoBERTa model)"),uxr=l(),l5=a("li"),G7e=a("strong"),bxr=o("roformer"),vxr=o(" \u2014 "),KJ=a("a"),Fxr=o("FlaxRoFormerForMaskedLM"),Txr=o(" (RoFormer model)"),Mxr=l(),i5=a("li"),O7e=a("strong"),Exr=o("t5"),Cxr=o(" \u2014 "),ZJ=a("a"),wxr=o("FlaxT5ForConditionalGeneration"),Axr=o(" (T5 model)"),yxr=l(),d5=a("li"),V7e=a("strong"),Lxr=o("wav2vec2"),xxr=o(" \u2014 "),eY=a("a"),$xr=o("FlaxWav2Vec2ForPreTraining"),kxr=o(" (Wav2Vec2 model)"),Sxr=l(),c5=a("li"),X7e=a("strong"),Rxr=o("xlm-roberta"),Pxr=o(" \u2014 "),oY=a("a"),Bxr=o("FlaxXLMRobertaForMaskedLM"),Ixr=o(" (XLM-RoBERTa model)"),qxr=l(),F(f5.$$.fragment),ANe=l(),qc=a("h2"),m5=a("a"),z7e=a("span"),F(C8.$$.fragment),Nxr=l(),W7e=a("span"),jxr=o("FlaxAutoModelForMaskedLM"),yNe=l(),hr=a("div"),F(w8.$$.fragment),Dxr=l(),Nc=a("p"),Gxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rY=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" class method or the "),tY=a("a"),Xxr=o("from_config()"),zxr=o(` class
method.`),Wxr=l(),A8=a("p"),Qxr=o("This class cannot be instantiated directly using "),Q7e=a("code"),Hxr=o("__init__()"),Uxr=o(" (throws an error)."),Jxr=l(),Xt=a("div"),F(y8.$$.fragment),Yxr=l(),H7e=a("p"),Kxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zxr=l(),jc=a("p"),e$r=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),o$r=o("not"),r$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),t$r=o("from_pretrained()"),a$r=o(" to load the model weights."),n$r=l(),F(g5.$$.fragment),s$r=l(),Or=a("div"),F(L8.$$.fragment),l$r=l(),J7e=a("p"),i$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d$r=l(),un=a("p"),c$r=o("The model class to instantiate is selected based on the "),Y7e=a("code"),f$r=o("model_type"),m$r=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),g$r=o("pretrained_model_name_or_path"),h$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),p$r=o("pretrained_model_name_or_path"),_$r=o(":"),u$r=l(),Le=a("ul"),h5=a("li"),eMe=a("strong"),b$r=o("albert"),v$r=o(" \u2014 "),nY=a("a"),F$r=o("FlaxAlbertForMaskedLM"),T$r=o(" (ALBERT model)"),M$r=l(),p5=a("li"),oMe=a("strong"),E$r=o("bart"),C$r=o(" \u2014 "),sY=a("a"),w$r=o("FlaxBartForConditionalGeneration"),A$r=o(" (BART model)"),y$r=l(),_5=a("li"),rMe=a("strong"),L$r=o("bert"),x$r=o(" \u2014 "),lY=a("a"),$$r=o("FlaxBertForMaskedLM"),k$r=o(" (BERT model)"),S$r=l(),u5=a("li"),tMe=a("strong"),R$r=o("big_bird"),P$r=o(" \u2014 "),iY=a("a"),B$r=o("FlaxBigBirdForMaskedLM"),I$r=o(" (BigBird model)"),q$r=l(),b5=a("li"),aMe=a("strong"),N$r=o("distilbert"),j$r=o(" \u2014 "),dY=a("a"),D$r=o("FlaxDistilBertForMaskedLM"),G$r=o(" (DistilBERT model)"),O$r=l(),v5=a("li"),nMe=a("strong"),V$r=o("electra"),X$r=o(" \u2014 "),cY=a("a"),z$r=o("FlaxElectraForMaskedLM"),W$r=o(" (ELECTRA model)"),Q$r=l(),F5=a("li"),sMe=a("strong"),H$r=o("mbart"),U$r=o(" \u2014 "),fY=a("a"),J$r=o("FlaxMBartForConditionalGeneration"),Y$r=o(" (mBART model)"),K$r=l(),T5=a("li"),lMe=a("strong"),Z$r=o("roberta"),ekr=o(" \u2014 "),mY=a("a"),okr=o("FlaxRobertaForMaskedLM"),rkr=o(" (RoBERTa model)"),tkr=l(),M5=a("li"),iMe=a("strong"),akr=o("roformer"),nkr=o(" \u2014 "),gY=a("a"),skr=o("FlaxRoFormerForMaskedLM"),lkr=o(" (RoFormer model)"),ikr=l(),E5=a("li"),dMe=a("strong"),dkr=o("xlm-roberta"),ckr=o(" \u2014 "),hY=a("a"),fkr=o("FlaxXLMRobertaForMaskedLM"),mkr=o(" (XLM-RoBERTa model)"),gkr=l(),F(C5.$$.fragment),LNe=l(),Dc=a("h2"),w5=a("a"),cMe=a("span"),F(x8.$$.fragment),hkr=l(),fMe=a("span"),pkr=o("FlaxAutoModelForSeq2SeqLM"),xNe=l(),pr=a("div"),F($8.$$.fragment),_kr=l(),Gc=a("p"),ukr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pY=a("a"),bkr=o("from_pretrained()"),vkr=o(" class method or the "),_Y=a("a"),Fkr=o("from_config()"),Tkr=o(` class
method.`),Mkr=l(),k8=a("p"),Ekr=o("This class cannot be instantiated directly using "),mMe=a("code"),Ckr=o("__init__()"),wkr=o(" (throws an error)."),Akr=l(),zt=a("div"),F(S8.$$.fragment),ykr=l(),gMe=a("p"),Lkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xkr=l(),Oc=a("p"),$kr=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),kkr=o("not"),Skr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),Rkr=o("from_pretrained()"),Pkr=o(" to load the model weights."),Bkr=l(),F(A5.$$.fragment),Ikr=l(),Vr=a("div"),F(R8.$$.fragment),qkr=l(),pMe=a("p"),Nkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jkr=l(),bn=a("p"),Dkr=o("The model class to instantiate is selected based on the "),_Me=a("code"),Gkr=o("model_type"),Okr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),Vkr=o("pretrained_model_name_or_path"),Xkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),zkr=o("pretrained_model_name_or_path"),Wkr=o(":"),Qkr=l(),Pe=a("ul"),y5=a("li"),vMe=a("strong"),Hkr=o("bart"),Ukr=o(" \u2014 "),bY=a("a"),Jkr=o("FlaxBartForConditionalGeneration"),Ykr=o(" (BART model)"),Kkr=l(),L5=a("li"),FMe=a("strong"),Zkr=o("blenderbot"),eSr=o(" \u2014 "),vY=a("a"),oSr=o("FlaxBlenderbotForConditionalGeneration"),rSr=o(" (Blenderbot model)"),tSr=l(),x5=a("li"),TMe=a("strong"),aSr=o("blenderbot-small"),nSr=o(" \u2014 "),FY=a("a"),sSr=o("FlaxBlenderbotSmallForConditionalGeneration"),lSr=o(" (BlenderbotSmall model)"),iSr=l(),$5=a("li"),MMe=a("strong"),dSr=o("encoder-decoder"),cSr=o(" \u2014 "),TY=a("a"),fSr=o("FlaxEncoderDecoderModel"),mSr=o(" (Encoder decoder model)"),gSr=l(),k5=a("li"),EMe=a("strong"),hSr=o("marian"),pSr=o(" \u2014 "),MY=a("a"),_Sr=o("FlaxMarianMTModel"),uSr=o(" (Marian model)"),bSr=l(),S5=a("li"),CMe=a("strong"),vSr=o("mbart"),FSr=o(" \u2014 "),EY=a("a"),TSr=o("FlaxMBartForConditionalGeneration"),MSr=o(" (mBART model)"),ESr=l(),R5=a("li"),wMe=a("strong"),CSr=o("mt5"),wSr=o(" \u2014 "),CY=a("a"),ASr=o("FlaxMT5ForConditionalGeneration"),ySr=o(" (mT5 model)"),LSr=l(),P5=a("li"),AMe=a("strong"),xSr=o("pegasus"),$Sr=o(" \u2014 "),wY=a("a"),kSr=o("FlaxPegasusForConditionalGeneration"),SSr=o(" (Pegasus model)"),RSr=l(),B5=a("li"),yMe=a("strong"),PSr=o("t5"),BSr=o(" \u2014 "),AY=a("a"),ISr=o("FlaxT5ForConditionalGeneration"),qSr=o(" (T5 model)"),NSr=l(),F(I5.$$.fragment),$Ne=l(),Vc=a("h2"),q5=a("a"),LMe=a("span"),F(P8.$$.fragment),jSr=l(),xMe=a("span"),DSr=o("FlaxAutoModelForSequenceClassification"),kNe=l(),_r=a("div"),F(B8.$$.fragment),GSr=l(),Xc=a("p"),OSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yY=a("a"),VSr=o("from_pretrained()"),XSr=o(" class method or the "),LY=a("a"),zSr=o("from_config()"),WSr=o(` class
method.`),QSr=l(),I8=a("p"),HSr=o("This class cannot be instantiated directly using "),$Me=a("code"),USr=o("__init__()"),JSr=o(" (throws an error)."),YSr=l(),Wt=a("div"),F(q8.$$.fragment),KSr=l(),kMe=a("p"),ZSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eRr=l(),zc=a("p"),oRr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),rRr=o("not"),tRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),aRr=o("from_pretrained()"),nRr=o(" to load the model weights."),sRr=l(),F(N5.$$.fragment),lRr=l(),Xr=a("div"),F(N8.$$.fragment),iRr=l(),RMe=a("p"),dRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cRr=l(),vn=a("p"),fRr=o("The model class to instantiate is selected based on the "),PMe=a("code"),mRr=o("model_type"),gRr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),hRr=o("pretrained_model_name_or_path"),pRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(":"),bRr=l(),xe=a("ul"),j5=a("li"),qMe=a("strong"),vRr=o("albert"),FRr=o(" \u2014 "),$Y=a("a"),TRr=o("FlaxAlbertForSequenceClassification"),MRr=o(" (ALBERT model)"),ERr=l(),D5=a("li"),NMe=a("strong"),CRr=o("bart"),wRr=o(" \u2014 "),kY=a("a"),ARr=o("FlaxBartForSequenceClassification"),yRr=o(" (BART model)"),LRr=l(),G5=a("li"),jMe=a("strong"),xRr=o("bert"),$Rr=o(" \u2014 "),SY=a("a"),kRr=o("FlaxBertForSequenceClassification"),SRr=o(" (BERT model)"),RRr=l(),O5=a("li"),DMe=a("strong"),PRr=o("big_bird"),BRr=o(" \u2014 "),RY=a("a"),IRr=o("FlaxBigBirdForSequenceClassification"),qRr=o(" (BigBird model)"),NRr=l(),V5=a("li"),GMe=a("strong"),jRr=o("distilbert"),DRr=o(" \u2014 "),PY=a("a"),GRr=o("FlaxDistilBertForSequenceClassification"),ORr=o(" (DistilBERT model)"),VRr=l(),X5=a("li"),OMe=a("strong"),XRr=o("electra"),zRr=o(" \u2014 "),BY=a("a"),WRr=o("FlaxElectraForSequenceClassification"),QRr=o(" (ELECTRA model)"),HRr=l(),z5=a("li"),VMe=a("strong"),URr=o("mbart"),JRr=o(" \u2014 "),IY=a("a"),YRr=o("FlaxMBartForSequenceClassification"),KRr=o(" (mBART model)"),ZRr=l(),W5=a("li"),XMe=a("strong"),ePr=o("roberta"),oPr=o(" \u2014 "),qY=a("a"),rPr=o("FlaxRobertaForSequenceClassification"),tPr=o(" (RoBERTa model)"),aPr=l(),Q5=a("li"),zMe=a("strong"),nPr=o("roformer"),sPr=o(" \u2014 "),NY=a("a"),lPr=o("FlaxRoFormerForSequenceClassification"),iPr=o(" (RoFormer model)"),dPr=l(),H5=a("li"),WMe=a("strong"),cPr=o("xlm-roberta"),fPr=o(" \u2014 "),jY=a("a"),mPr=o("FlaxXLMRobertaForSequenceClassification"),gPr=o(" (XLM-RoBERTa model)"),hPr=l(),F(U5.$$.fragment),SNe=l(),Wc=a("h2"),J5=a("a"),QMe=a("span"),F(j8.$$.fragment),pPr=l(),HMe=a("span"),_Pr=o("FlaxAutoModelForQuestionAnswering"),RNe=l(),ur=a("div"),F(D8.$$.fragment),uPr=l(),Qc=a("p"),bPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DY=a("a"),vPr=o("from_pretrained()"),FPr=o(" class method or the "),GY=a("a"),TPr=o("from_config()"),MPr=o(` class
method.`),EPr=l(),G8=a("p"),CPr=o("This class cannot be instantiated directly using "),UMe=a("code"),wPr=o("__init__()"),APr=o(" (throws an error)."),yPr=l(),Qt=a("div"),F(O8.$$.fragment),LPr=l(),JMe=a("p"),xPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Pr=l(),Hc=a("p"),kPr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),SPr=o("not"),RPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),PPr=o("from_pretrained()"),BPr=o(" to load the model weights."),IPr=l(),F(Y5.$$.fragment),qPr=l(),zr=a("div"),F(V8.$$.fragment),NPr=l(),KMe=a("p"),jPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DPr=l(),Fn=a("p"),GPr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),OPr=o("model_type"),VPr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),XPr=o("pretrained_model_name_or_path"),zPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(":"),HPr=l(),$e=a("ul"),K5=a("li"),r4e=a("strong"),UPr=o("albert"),JPr=o(" \u2014 "),VY=a("a"),YPr=o("FlaxAlbertForQuestionAnswering"),KPr=o(" (ALBERT model)"),ZPr=l(),Z5=a("li"),t4e=a("strong"),eBr=o("bart"),oBr=o(" \u2014 "),XY=a("a"),rBr=o("FlaxBartForQuestionAnswering"),tBr=o(" (BART model)"),aBr=l(),e3=a("li"),a4e=a("strong"),nBr=o("bert"),sBr=o(" \u2014 "),zY=a("a"),lBr=o("FlaxBertForQuestionAnswering"),iBr=o(" (BERT model)"),dBr=l(),o3=a("li"),n4e=a("strong"),cBr=o("big_bird"),fBr=o(" \u2014 "),WY=a("a"),mBr=o("FlaxBigBirdForQuestionAnswering"),gBr=o(" (BigBird model)"),hBr=l(),r3=a("li"),s4e=a("strong"),pBr=o("distilbert"),_Br=o(" \u2014 "),QY=a("a"),uBr=o("FlaxDistilBertForQuestionAnswering"),bBr=o(" (DistilBERT model)"),vBr=l(),t3=a("li"),l4e=a("strong"),FBr=o("electra"),TBr=o(" \u2014 "),HY=a("a"),MBr=o("FlaxElectraForQuestionAnswering"),EBr=o(" (ELECTRA model)"),CBr=l(),a3=a("li"),i4e=a("strong"),wBr=o("mbart"),ABr=o(" \u2014 "),UY=a("a"),yBr=o("FlaxMBartForQuestionAnswering"),LBr=o(" (mBART model)"),xBr=l(),n3=a("li"),d4e=a("strong"),$Br=o("roberta"),kBr=o(" \u2014 "),JY=a("a"),SBr=o("FlaxRobertaForQuestionAnswering"),RBr=o(" (RoBERTa model)"),PBr=l(),s3=a("li"),c4e=a("strong"),BBr=o("roformer"),IBr=o(" \u2014 "),YY=a("a"),qBr=o("FlaxRoFormerForQuestionAnswering"),NBr=o(" (RoFormer model)"),jBr=l(),l3=a("li"),f4e=a("strong"),DBr=o("xlm-roberta"),GBr=o(" \u2014 "),KY=a("a"),OBr=o("FlaxXLMRobertaForQuestionAnswering"),VBr=o(" (XLM-RoBERTa model)"),XBr=l(),F(i3.$$.fragment),PNe=l(),Uc=a("h2"),d3=a("a"),m4e=a("span"),F(X8.$$.fragment),zBr=l(),g4e=a("span"),WBr=o("FlaxAutoModelForTokenClassification"),BNe=l(),br=a("div"),F(z8.$$.fragment),QBr=l(),Jc=a("p"),HBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZY=a("a"),UBr=o("from_pretrained()"),JBr=o(" class method or the "),eK=a("a"),YBr=o("from_config()"),KBr=o(` class
method.`),ZBr=l(),W8=a("p"),eIr=o("This class cannot be instantiated directly using "),h4e=a("code"),oIr=o("__init__()"),rIr=o(" (throws an error)."),tIr=l(),Ht=a("div"),F(Q8.$$.fragment),aIr=l(),p4e=a("p"),nIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sIr=l(),Yc=a("p"),lIr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),iIr=o("not"),dIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),cIr=o("from_pretrained()"),fIr=o(" to load the model weights."),mIr=l(),F(c3.$$.fragment),gIr=l(),Wr=a("div"),F(H8.$$.fragment),hIr=l(),u4e=a("p"),pIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Ir=l(),Tn=a("p"),uIr=o("The model class to instantiate is selected based on the "),b4e=a("code"),bIr=o("model_type"),vIr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),MIr=o("pretrained_model_name_or_path"),EIr=o(":"),CIr=l(),De=a("ul"),f3=a("li"),T4e=a("strong"),wIr=o("albert"),AIr=o(" \u2014 "),rK=a("a"),yIr=o("FlaxAlbertForTokenClassification"),LIr=o(" (ALBERT model)"),xIr=l(),m3=a("li"),M4e=a("strong"),$Ir=o("bert"),kIr=o(" \u2014 "),tK=a("a"),SIr=o("FlaxBertForTokenClassification"),RIr=o(" (BERT model)"),PIr=l(),g3=a("li"),E4e=a("strong"),BIr=o("big_bird"),IIr=o(" \u2014 "),aK=a("a"),qIr=o("FlaxBigBirdForTokenClassification"),NIr=o(" (BigBird model)"),jIr=l(),h3=a("li"),C4e=a("strong"),DIr=o("distilbert"),GIr=o(" \u2014 "),nK=a("a"),OIr=o("FlaxDistilBertForTokenClassification"),VIr=o(" (DistilBERT model)"),XIr=l(),p3=a("li"),w4e=a("strong"),zIr=o("electra"),WIr=o(" \u2014 "),sK=a("a"),QIr=o("FlaxElectraForTokenClassification"),HIr=o(" (ELECTRA model)"),UIr=l(),_3=a("li"),A4e=a("strong"),JIr=o("roberta"),YIr=o(" \u2014 "),lK=a("a"),KIr=o("FlaxRobertaForTokenClassification"),ZIr=o(" (RoBERTa model)"),eqr=l(),u3=a("li"),y4e=a("strong"),oqr=o("roformer"),rqr=o(" \u2014 "),iK=a("a"),tqr=o("FlaxRoFormerForTokenClassification"),aqr=o(" (RoFormer model)"),nqr=l(),b3=a("li"),L4e=a("strong"),sqr=o("xlm-roberta"),lqr=o(" \u2014 "),dK=a("a"),iqr=o("FlaxXLMRobertaForTokenClassification"),dqr=o(" (XLM-RoBERTa model)"),cqr=l(),F(v3.$$.fragment),INe=l(),Kc=a("h2"),F3=a("a"),x4e=a("span"),F(U8.$$.fragment),fqr=l(),$4e=a("span"),mqr=o("FlaxAutoModelForMultipleChoice"),qNe=l(),vr=a("div"),F(J8.$$.fragment),gqr=l(),Zc=a("p"),hqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cK=a("a"),pqr=o("from_pretrained()"),_qr=o(" class method or the "),fK=a("a"),uqr=o("from_config()"),bqr=o(` class
method.`),vqr=l(),Y8=a("p"),Fqr=o("This class cannot be instantiated directly using "),k4e=a("code"),Tqr=o("__init__()"),Mqr=o(" (throws an error)."),Eqr=l(),Ut=a("div"),F(K8.$$.fragment),Cqr=l(),S4e=a("p"),wqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Aqr=l(),ef=a("p"),yqr=o(`Note:
Loading a model from its configuration file does `),R4e=a("strong"),Lqr=o("not"),xqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),$qr=o("from_pretrained()"),kqr=o(" to load the model weights."),Sqr=l(),F(T3.$$.fragment),Rqr=l(),Qr=a("div"),F(Z8.$$.fragment),Pqr=l(),P4e=a("p"),Bqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Iqr=l(),Mn=a("p"),qqr=o("The model class to instantiate is selected based on the "),B4e=a("code"),Nqr=o("model_type"),jqr=o(` property of the config object (either
passed as an argument or loaded from `),I4e=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),Oqr=o("pretrained_model_name_or_path"),Vqr=o(":"),Xqr=l(),Ge=a("ul"),M3=a("li"),N4e=a("strong"),zqr=o("albert"),Wqr=o(" \u2014 "),gK=a("a"),Qqr=o("FlaxAlbertForMultipleChoice"),Hqr=o(" (ALBERT model)"),Uqr=l(),E3=a("li"),j4e=a("strong"),Jqr=o("bert"),Yqr=o(" \u2014 "),hK=a("a"),Kqr=o("FlaxBertForMultipleChoice"),Zqr=o(" (BERT model)"),eNr=l(),C3=a("li"),D4e=a("strong"),oNr=o("big_bird"),rNr=o(" \u2014 "),pK=a("a"),tNr=o("FlaxBigBirdForMultipleChoice"),aNr=o(" (BigBird model)"),nNr=l(),w3=a("li"),G4e=a("strong"),sNr=o("distilbert"),lNr=o(" \u2014 "),_K=a("a"),iNr=o("FlaxDistilBertForMultipleChoice"),dNr=o(" (DistilBERT model)"),cNr=l(),A3=a("li"),O4e=a("strong"),fNr=o("electra"),mNr=o(" \u2014 "),uK=a("a"),gNr=o("FlaxElectraForMultipleChoice"),hNr=o(" (ELECTRA model)"),pNr=l(),y3=a("li"),V4e=a("strong"),_Nr=o("roberta"),uNr=o(" \u2014 "),bK=a("a"),bNr=o("FlaxRobertaForMultipleChoice"),vNr=o(" (RoBERTa model)"),FNr=l(),L3=a("li"),X4e=a("strong"),TNr=o("roformer"),MNr=o(" \u2014 "),vK=a("a"),ENr=o("FlaxRoFormerForMultipleChoice"),CNr=o(" (RoFormer model)"),wNr=l(),x3=a("li"),z4e=a("strong"),ANr=o("xlm-roberta"),yNr=o(" \u2014 "),FK=a("a"),LNr=o("FlaxXLMRobertaForMultipleChoice"),xNr=o(" (XLM-RoBERTa model)"),$Nr=l(),F($3.$$.fragment),NNe=l(),of=a("h2"),k3=a("a"),W4e=a("span"),F(ex.$$.fragment),kNr=l(),Q4e=a("span"),SNr=o("FlaxAutoModelForNextSentencePrediction"),jNe=l(),Fr=a("div"),F(ox.$$.fragment),RNr=l(),rf=a("p"),PNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TK=a("a"),BNr=o("from_pretrained()"),INr=o(" class method or the "),MK=a("a"),qNr=o("from_config()"),NNr=o(` class
method.`),jNr=l(),rx=a("p"),DNr=o("This class cannot be instantiated directly using "),H4e=a("code"),GNr=o("__init__()"),ONr=o(" (throws an error)."),VNr=l(),Jt=a("div"),F(tx.$$.fragment),XNr=l(),U4e=a("p"),zNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WNr=l(),tf=a("p"),QNr=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),HNr=o("not"),UNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),JNr=o("from_pretrained()"),YNr=o(" to load the model weights."),KNr=l(),F(S3.$$.fragment),ZNr=l(),Hr=a("div"),F(ax.$$.fragment),ejr=l(),Y4e=a("p"),ojr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rjr=l(),En=a("p"),tjr=o("The model class to instantiate is selected based on the "),K4e=a("code"),ajr=o("model_type"),njr=o(` property of the config object (either
passed as an argument or loaded from `),Z4e=a("code"),sjr=o("pretrained_model_name_or_path"),ljr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),ijr=o("pretrained_model_name_or_path"),djr=o(":"),cjr=l(),oEe=a("ul"),R3=a("li"),rEe=a("strong"),fjr=o("bert"),mjr=o(" \u2014 "),CK=a("a"),gjr=o("FlaxBertForNextSentencePrediction"),hjr=o(" (BERT model)"),pjr=l(),F(P3.$$.fragment),DNe=l(),af=a("h2"),B3=a("a"),tEe=a("span"),F(nx.$$.fragment),_jr=l(),aEe=a("span"),ujr=o("FlaxAutoModelForImageClassification"),GNe=l(),Tr=a("div"),F(sx.$$.fragment),bjr=l(),nf=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wK=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),AK=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),lx=a("p"),wjr=o("This class cannot be instantiated directly using "),nEe=a("code"),Ajr=o("__init__()"),yjr=o(" (throws an error)."),Ljr=l(),Yt=a("div"),F(ix.$$.fragment),xjr=l(),sEe=a("p"),$jr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kjr=l(),sf=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),qjr=l(),F(I3.$$.fragment),Njr=l(),Ur=a("div"),F(dx.$$.fragment),jjr=l(),iEe=a("p"),Djr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gjr=l(),Cn=a("p"),Ojr=o("The model class to instantiate is selected based on the "),dEe=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),zjr=o("pretrained_model_name_or_path"),Wjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),Qjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),cx=a("ul"),q3=a("li"),mEe=a("strong"),Jjr=o("beit"),Yjr=o(" \u2014 "),LK=a("a"),Kjr=o("FlaxBeitForImageClassification"),Zjr=o(" (BEiT model)"),eDr=l(),N3=a("li"),gEe=a("strong"),oDr=o("vit"),rDr=o(" \u2014 "),xK=a("a"),tDr=o("FlaxViTForImageClassification"),aDr=o(" (ViT model)"),nDr=l(),F(j3.$$.fragment),ONe=l(),lf=a("h2"),D3=a("a"),hEe=a("span"),F(fx.$$.fragment),sDr=l(),pEe=a("span"),lDr=o("FlaxAutoModelForVision2Seq"),VNe=l(),Mr=a("div"),F(mx.$$.fragment),iDr=l(),df=a("p"),dDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$K=a("a"),cDr=o("from_pretrained()"),fDr=o(" class method or the "),kK=a("a"),mDr=o("from_config()"),gDr=o(` class
method.`),hDr=l(),gx=a("p"),pDr=o("This class cannot be instantiated directly using "),_Ee=a("code"),_Dr=o("__init__()"),uDr=o(" (throws an error)."),bDr=l(),Kt=a("div"),F(hx.$$.fragment),vDr=l(),uEe=a("p"),FDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TDr=l(),cf=a("p"),MDr=o(`Note:
Loading a model from its configuration file does `),bEe=a("strong"),EDr=o("not"),CDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),wDr=o("from_pretrained()"),ADr=o(" to load the model weights."),yDr=l(),F(G3.$$.fragment),LDr=l(),Jr=a("div"),F(px.$$.fragment),xDr=l(),vEe=a("p"),$Dr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kDr=l(),wn=a("p"),SDr=o("The model class to instantiate is selected based on the "),FEe=a("code"),RDr=o("model_type"),PDr=o(` property of the config object (either
passed as an argument or loaded from `),TEe=a("code"),BDr=o("pretrained_model_name_or_path"),IDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=a("code"),qDr=o("pretrained_model_name_or_path"),NDr=o(":"),jDr=l(),EEe=a("ul"),O3=a("li"),CEe=a("strong"),DDr=o("vision-encoder-decoder"),GDr=o(" \u2014 "),RK=a("a"),ODr=o("FlaxVisionEncoderDecoderModel"),VDr=o(" (Vision Encoder decoder model)"),XDr=l(),F(V3.$$.fragment),this.h()},l(f){const u=zyt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var _x=s(p);m=n(_x,"A",{id:!0,class:!0,href:!0});var wEe=s(m);_=n(wEe,"SPAN",{});var AEe=s(_);T(d.$$.fragment,AEe),AEe.forEach(t),wEe.forEach(t),h=i(_x),Mo=n(_x,"SPAN",{});var yEe=s(Mo);ci=r(yEe,"Auto Classes"),yEe.forEach(t),_x.forEach(t),hf=i(f),rt=n(f,"P",{});var ux=s(rt);fi=r(ux,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(ux,"CODE",{});var LEe=s(mi);lA=r(LEe,"from_pretrained()"),LEe.forEach(t),pf=r(ux,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ux.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var xEe=s(yn);iA=r(xEe,"AutoConfig"),xEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var $Ee=s(xn);dA=r($Ee,"AutoModel"),$Ee.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var kEe=s($n);cA=r(kEe,"AutoTokenizer"),kEe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var bx=s(Ae);L$=r(bx,"will create a model that is an instance of "),_i=n(bx,"A",{href:!0});var SEe=s(_i);x$=r(SEe,"BertModel"),SEe.forEach(t),$$=r(bx,"."),bx.forEach(t),Eo=i(f),wa=n(f,"P",{});var vx=s(wa);k$=r(vx,"There is one class of "),uf=n(vx,"CODE",{});var REe=s(uf);S$=r(REe,"AutoModel"),REe.forEach(t),KDe=r(vx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vx.forEach(t),GIe=i(f),ui=n(f,"H2",{class:!0});var Fx=s(ui);bf=n(Fx,"A",{id:!0,class:!0,href:!0});var PEe=s(bf);Aee=n(PEe,"SPAN",{});var BEe=s(Aee);T(fA.$$.fragment,BEe),BEe.forEach(t),PEe.forEach(t),ZDe=i(Fx),yee=n(Fx,"SPAN",{});var IEe=s(yee);eGe=r(IEe,"Extending the Auto Classes"),IEe.forEach(t),Fx.forEach(t),OIe=i(f),kn=n(f,"P",{});var ff=s(kn);oGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Lee=n(ff,"CODE",{});var qEe=s(Lee);rGe=r(qEe,"NewModel"),qEe.forEach(t),tGe=r(ff,", make sure you have a "),xee=n(ff,"CODE",{});var NEe=s(xee);aGe=r(NEe,"NewModelConfig"),NEe.forEach(t),nGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),VIe=i(f),T(mA.$$.fragment,f),XIe=i(f),R$=n(f,"P",{});var jEe=s(R$);sGe=r(jEe,"You will then be able to use the auto classes like you would usually do!"),jEe.forEach(t),zIe=i(f),T(vf.$$.fragment,f),WIe=i(f),bi=n(f,"H2",{class:!0});var Tx=s(bi);Ff=n(Tx,"A",{id:!0,class:!0,href:!0});var DEe=s(Ff);$ee=n(DEe,"SPAN",{});var GEe=s($ee);T(gA.$$.fragment,GEe),GEe.forEach(t),DEe.forEach(t),lGe=i(Tx),kee=n(Tx,"SPAN",{});var OEe=s(kee);iGe=r(OEe,"AutoConfig"),OEe.forEach(t),Tx.forEach(t),QIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(hA.$$.fragment,et),dGe=i(et),pA=n(et,"P",{});var Mx=s(pA);cGe=r(Mx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P$=n(Mx,"A",{href:!0});var VEe=s(P$);fGe=r(VEe,"from_pretrained()"),VEe.forEach(t),mGe=r(Mx," class method."),Mx.forEach(t),gGe=i(et),_A=n(et,"P",{});var Ex=s(_A);hGe=r(Ex,"This class cannot be instantiated directly using "),See=n(Ex,"CODE",{});var XEe=s(See);pGe=r(XEe,"__init__()"),XEe.forEach(t),_Ge=r(Ex," (throws an error)."),Ex.forEach(t),uGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(uA.$$.fragment,ot),bGe=i(ot),Ree=n(ot,"P",{});var zEe=s(Ree);vGe=r(zEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zEe.forEach(t),FGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);TGe=r(mf,"The configuration class to instantiate is selected based on the "),Pee=n(mf,"CODE",{});var WEe=s(Pee);MGe=r(WEe,"model_type"),WEe.forEach(t),EGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Bee=n(mf,"CODE",{});var QEe=s(Bee);CGe=r(QEe,"pretrained_model_name_or_path"),QEe.forEach(t),wGe=r(mf,":"),mf.forEach(t),AGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var X3=s(Tf);Iee=n(X3,"STRONG",{});var HEe=s(Iee);yGe=r(HEe,"albert"),HEe.forEach(t),LGe=r(X3," \u2014 "),B$=n(X3,"A",{href:!0});var UEe=s(B$);xGe=r(UEe,"AlbertConfig"),UEe.forEach(t),$Ge=r(X3," (ALBERT model)"),X3.forEach(t),kGe=i(y),Mf=n(y,"LI",{});var z3=s(Mf);qee=n(z3,"STRONG",{});var JEe=s(qee);SGe=r(JEe,"bart"),JEe.forEach(t),RGe=r(z3," \u2014 "),I$=n(z3,"A",{href:!0});var YEe=s(I$);PGe=r(YEe,"BartConfig"),YEe.forEach(t),BGe=r(z3," (BART model)"),z3.forEach(t),IGe=i(y),Ef=n(y,"LI",{});var W3=s(Ef);Nee=n(W3,"STRONG",{});var KEe=s(Nee);qGe=r(KEe,"beit"),KEe.forEach(t),NGe=r(W3," \u2014 "),q$=n(W3,"A",{href:!0});var ZEe=s(q$);jGe=r(ZEe,"BeitConfig"),ZEe.forEach(t),DGe=r(W3," (BEiT model)"),W3.forEach(t),GGe=i(y),Cf=n(y,"LI",{});var Q3=s(Cf);jee=n(Q3,"STRONG",{});var eCe=s(jee);OGe=r(eCe,"bert"),eCe.forEach(t),VGe=r(Q3," \u2014 "),N$=n(Q3,"A",{href:!0});var oCe=s(N$);XGe=r(oCe,"BertConfig"),oCe.forEach(t),zGe=r(Q3," (BERT model)"),Q3.forEach(t),WGe=i(y),wf=n(y,"LI",{});var H3=s(wf);Dee=n(H3,"STRONG",{});var rCe=s(Dee);QGe=r(rCe,"bert-generation"),rCe.forEach(t),HGe=r(H3," \u2014 "),j$=n(H3,"A",{href:!0});var tCe=s(j$);UGe=r(tCe,"BertGenerationConfig"),tCe.forEach(t),JGe=r(H3," (Bert Generation model)"),H3.forEach(t),YGe=i(y),Af=n(y,"LI",{});var U3=s(Af);Gee=n(U3,"STRONG",{});var aCe=s(Gee);KGe=r(aCe,"big_bird"),aCe.forEach(t),ZGe=r(U3," \u2014 "),D$=n(U3,"A",{href:!0});var nCe=s(D$);eOe=r(nCe,"BigBirdConfig"),nCe.forEach(t),oOe=r(U3," (BigBird model)"),U3.forEach(t),rOe=i(y),yf=n(y,"LI",{});var J3=s(yf);Oee=n(J3,"STRONG",{});var sCe=s(Oee);tOe=r(sCe,"bigbird_pegasus"),sCe.forEach(t),aOe=r(J3," \u2014 "),G$=n(J3,"A",{href:!0});var lCe=s(G$);nOe=r(lCe,"BigBirdPegasusConfig"),lCe.forEach(t),sOe=r(J3," (BigBirdPegasus model)"),J3.forEach(t),lOe=i(y),Lf=n(y,"LI",{});var Y3=s(Lf);Vee=n(Y3,"STRONG",{});var iCe=s(Vee);iOe=r(iCe,"blenderbot"),iCe.forEach(t),dOe=r(Y3," \u2014 "),O$=n(Y3,"A",{href:!0});var dCe=s(O$);cOe=r(dCe,"BlenderbotConfig"),dCe.forEach(t),fOe=r(Y3," (Blenderbot model)"),Y3.forEach(t),mOe=i(y),xf=n(y,"LI",{});var K3=s(xf);Xee=n(K3,"STRONG",{});var cCe=s(Xee);gOe=r(cCe,"blenderbot-small"),cCe.forEach(t),hOe=r(K3," \u2014 "),V$=n(K3,"A",{href:!0});var fCe=s(V$);pOe=r(fCe,"BlenderbotSmallConfig"),fCe.forEach(t),_Oe=r(K3," (BlenderbotSmall model)"),K3.forEach(t),uOe=i(y),$f=n(y,"LI",{});var Z3=s($f);zee=n(Z3,"STRONG",{});var mCe=s(zee);bOe=r(mCe,"camembert"),mCe.forEach(t),vOe=r(Z3," \u2014 "),X$=n(Z3,"A",{href:!0});var gCe=s(X$);FOe=r(gCe,"CamembertConfig"),gCe.forEach(t),TOe=r(Z3," (CamemBERT model)"),Z3.forEach(t),MOe=i(y),kf=n(y,"LI",{});var ew=s(kf);Wee=n(ew,"STRONG",{});var hCe=s(Wee);EOe=r(hCe,"canine"),hCe.forEach(t),COe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var pCe=s(z$);wOe=r(pCe,"CanineConfig"),pCe.forEach(t),AOe=r(ew," (Canine model)"),ew.forEach(t),yOe=i(y),Sf=n(y,"LI",{});var ow=s(Sf);Qee=n(ow,"STRONG",{});var _Ce=s(Qee);LOe=r(_Ce,"clip"),_Ce.forEach(t),xOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var uCe=s(W$);$Oe=r(uCe,"CLIPConfig"),uCe.forEach(t),kOe=r(ow," (CLIP model)"),ow.forEach(t),SOe=i(y),Rf=n(y,"LI",{});var rw=s(Rf);Hee=n(rw,"STRONG",{});var bCe=s(Hee);ROe=r(bCe,"convbert"),bCe.forEach(t),POe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var vCe=s(Q$);BOe=r(vCe,"ConvBertConfig"),vCe.forEach(t),IOe=r(rw," (ConvBERT model)"),rw.forEach(t),qOe=i(y),Pf=n(y,"LI",{});var tw=s(Pf);Uee=n(tw,"STRONG",{});var FCe=s(Uee);NOe=r(FCe,"convnext"),FCe.forEach(t),jOe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var TCe=s(H$);DOe=r(TCe,"ConvNextConfig"),TCe.forEach(t),GOe=r(tw," (ConvNext model)"),tw.forEach(t),OOe=i(y),Bf=n(y,"LI",{});var aw=s(Bf);Jee=n(aw,"STRONG",{});var MCe=s(Jee);VOe=r(MCe,"ctrl"),MCe.forEach(t),XOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var ECe=s(U$);zOe=r(ECe,"CTRLConfig"),ECe.forEach(t),WOe=r(aw," (CTRL model)"),aw.forEach(t),QOe=i(y),If=n(y,"LI",{});var nw=s(If);Yee=n(nw,"STRONG",{});var CCe=s(Yee);HOe=r(CCe,"cvt"),CCe.forEach(t),UOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var wCe=s(J$);JOe=r(wCe,"CvtConfig"),wCe.forEach(t),YOe=r(nw," (CvT model)"),nw.forEach(t),KOe=i(y),qf=n(y,"LI",{});var sw=s(qf);Kee=n(sw,"STRONG",{});var ACe=s(Kee);ZOe=r(ACe,"data2vec-audio"),ACe.forEach(t),eVe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var yCe=s(Y$);oVe=r(yCe,"Data2VecAudioConfig"),yCe.forEach(t),rVe=r(sw," (Data2VecAudio model)"),sw.forEach(t),tVe=i(y),Nf=n(y,"LI",{});var lw=s(Nf);Zee=n(lw,"STRONG",{});var LCe=s(Zee);aVe=r(LCe,"data2vec-text"),LCe.forEach(t),nVe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var xCe=s(K$);sVe=r(xCe,"Data2VecTextConfig"),xCe.forEach(t),lVe=r(lw," (Data2VecText model)"),lw.forEach(t),iVe=i(y),jf=n(y,"LI",{});var iw=s(jf);eoe=n(iw,"STRONG",{});var $Ce=s(eoe);dVe=r($Ce,"data2vec-vision"),$Ce.forEach(t),cVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var kCe=s(Z$);fVe=r(kCe,"Data2VecVisionConfig"),kCe.forEach(t),mVe=r(iw," (Data2VecVision model)"),iw.forEach(t),gVe=i(y),Df=n(y,"LI",{});var dw=s(Df);ooe=n(dw,"STRONG",{});var SCe=s(ooe);hVe=r(SCe,"deberta"),SCe.forEach(t),pVe=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var RCe=s(ek);_Ve=r(RCe,"DebertaConfig"),RCe.forEach(t),uVe=r(dw," (DeBERTa model)"),dw.forEach(t),bVe=i(y),Gf=n(y,"LI",{});var cw=s(Gf);roe=n(cw,"STRONG",{});var PCe=s(roe);vVe=r(PCe,"deberta-v2"),PCe.forEach(t),FVe=r(cw," \u2014 "),ok=n(cw,"A",{href:!0});var BCe=s(ok);TVe=r(BCe,"DebertaV2Config"),BCe.forEach(t),MVe=r(cw," (DeBERTa-v2 model)"),cw.forEach(t),EVe=i(y),Of=n(y,"LI",{});var fw=s(Of);toe=n(fw,"STRONG",{});var ICe=s(toe);CVe=r(ICe,"decision_transformer"),ICe.forEach(t),wVe=r(fw," \u2014 "),rk=n(fw,"A",{href:!0});var qCe=s(rk);AVe=r(qCe,"DecisionTransformerConfig"),qCe.forEach(t),yVe=r(fw," (Decision Transformer model)"),fw.forEach(t),LVe=i(y),Vf=n(y,"LI",{});var mw=s(Vf);aoe=n(mw,"STRONG",{});var NCe=s(aoe);xVe=r(NCe,"deit"),NCe.forEach(t),$Ve=r(mw," \u2014 "),tk=n(mw,"A",{href:!0});var WDr=s(tk);kVe=r(WDr,"DeiTConfig"),WDr.forEach(t),SVe=r(mw," (DeiT model)"),mw.forEach(t),RVe=i(y),Xf=n(y,"LI",{});var jCe=s(Xf);noe=n(jCe,"STRONG",{});var QDr=s(noe);PVe=r(QDr,"detr"),QDr.forEach(t),BVe=r(jCe," \u2014 "),ak=n(jCe,"A",{href:!0});var HDr=s(ak);IVe=r(HDr,"DetrConfig"),HDr.forEach(t),qVe=r(jCe," (DETR model)"),jCe.forEach(t),NVe=i(y),zf=n(y,"LI",{});var DCe=s(zf);soe=n(DCe,"STRONG",{});var UDr=s(soe);jVe=r(UDr,"distilbert"),UDr.forEach(t),DVe=r(DCe," \u2014 "),nk=n(DCe,"A",{href:!0});var JDr=s(nk);GVe=r(JDr,"DistilBertConfig"),JDr.forEach(t),OVe=r(DCe," (DistilBERT model)"),DCe.forEach(t),VVe=i(y),Wf=n(y,"LI",{});var GCe=s(Wf);loe=n(GCe,"STRONG",{});var YDr=s(loe);XVe=r(YDr,"dpr"),YDr.forEach(t),zVe=r(GCe," \u2014 "),sk=n(GCe,"A",{href:!0});var KDr=s(sk);WVe=r(KDr,"DPRConfig"),KDr.forEach(t),QVe=r(GCe," (DPR model)"),GCe.forEach(t),HVe=i(y),Qf=n(y,"LI",{});var OCe=s(Qf);ioe=n(OCe,"STRONG",{});var ZDr=s(ioe);UVe=r(ZDr,"dpt"),ZDr.forEach(t),JVe=r(OCe," \u2014 "),lk=n(OCe,"A",{href:!0});var eGr=s(lk);YVe=r(eGr,"DPTConfig"),eGr.forEach(t),KVe=r(OCe," (DPT model)"),OCe.forEach(t),ZVe=i(y),Hf=n(y,"LI",{});var VCe=s(Hf);doe=n(VCe,"STRONG",{});var oGr=s(doe);eXe=r(oGr,"electra"),oGr.forEach(t),oXe=r(VCe," \u2014 "),ik=n(VCe,"A",{href:!0});var rGr=s(ik);rXe=r(rGr,"ElectraConfig"),rGr.forEach(t),tXe=r(VCe," (ELECTRA model)"),VCe.forEach(t),aXe=i(y),Uf=n(y,"LI",{});var XCe=s(Uf);coe=n(XCe,"STRONG",{});var tGr=s(coe);nXe=r(tGr,"encoder-decoder"),tGr.forEach(t),sXe=r(XCe," \u2014 "),dk=n(XCe,"A",{href:!0});var aGr=s(dk);lXe=r(aGr,"EncoderDecoderConfig"),aGr.forEach(t),iXe=r(XCe," (Encoder decoder model)"),XCe.forEach(t),dXe=i(y),Jf=n(y,"LI",{});var zCe=s(Jf);foe=n(zCe,"STRONG",{});var nGr=s(foe);cXe=r(nGr,"flaubert"),nGr.forEach(t),fXe=r(zCe," \u2014 "),ck=n(zCe,"A",{href:!0});var sGr=s(ck);mXe=r(sGr,"FlaubertConfig"),sGr.forEach(t),gXe=r(zCe," (FlauBERT model)"),zCe.forEach(t),hXe=i(y),Yf=n(y,"LI",{});var WCe=s(Yf);moe=n(WCe,"STRONG",{});var lGr=s(moe);pXe=r(lGr,"flava"),lGr.forEach(t),_Xe=r(WCe," \u2014 "),fk=n(WCe,"A",{href:!0});var iGr=s(fk);uXe=r(iGr,"FlavaConfig"),iGr.forEach(t),bXe=r(WCe," (Flava model)"),WCe.forEach(t),vXe=i(y),Kf=n(y,"LI",{});var QCe=s(Kf);goe=n(QCe,"STRONG",{});var dGr=s(goe);FXe=r(dGr,"fnet"),dGr.forEach(t),TXe=r(QCe," \u2014 "),mk=n(QCe,"A",{href:!0});var cGr=s(mk);MXe=r(cGr,"FNetConfig"),cGr.forEach(t),EXe=r(QCe," (FNet model)"),QCe.forEach(t),CXe=i(y),Zf=n(y,"LI",{});var HCe=s(Zf);hoe=n(HCe,"STRONG",{});var fGr=s(hoe);wXe=r(fGr,"fsmt"),fGr.forEach(t),AXe=r(HCe," \u2014 "),gk=n(HCe,"A",{href:!0});var mGr=s(gk);yXe=r(mGr,"FSMTConfig"),mGr.forEach(t),LXe=r(HCe," (FairSeq Machine-Translation model)"),HCe.forEach(t),xXe=i(y),em=n(y,"LI",{});var UCe=s(em);poe=n(UCe,"STRONG",{});var gGr=s(poe);$Xe=r(gGr,"funnel"),gGr.forEach(t),kXe=r(UCe," \u2014 "),hk=n(UCe,"A",{href:!0});var hGr=s(hk);SXe=r(hGr,"FunnelConfig"),hGr.forEach(t),RXe=r(UCe," (Funnel Transformer model)"),UCe.forEach(t),PXe=i(y),om=n(y,"LI",{});var JCe=s(om);_oe=n(JCe,"STRONG",{});var pGr=s(_oe);BXe=r(pGr,"glpn"),pGr.forEach(t),IXe=r(JCe," \u2014 "),pk=n(JCe,"A",{href:!0});var _Gr=s(pk);qXe=r(_Gr,"GLPNConfig"),_Gr.forEach(t),NXe=r(JCe," (GLPN model)"),JCe.forEach(t),jXe=i(y),rm=n(y,"LI",{});var YCe=s(rm);uoe=n(YCe,"STRONG",{});var uGr=s(uoe);DXe=r(uGr,"gpt2"),uGr.forEach(t),GXe=r(YCe," \u2014 "),_k=n(YCe,"A",{href:!0});var bGr=s(_k);OXe=r(bGr,"GPT2Config"),bGr.forEach(t),VXe=r(YCe," (OpenAI GPT-2 model)"),YCe.forEach(t),XXe=i(y),tm=n(y,"LI",{});var KCe=s(tm);boe=n(KCe,"STRONG",{});var vGr=s(boe);zXe=r(vGr,"gpt_neo"),vGr.forEach(t),WXe=r(KCe," \u2014 "),uk=n(KCe,"A",{href:!0});var FGr=s(uk);QXe=r(FGr,"GPTNeoConfig"),FGr.forEach(t),HXe=r(KCe," (GPT Neo model)"),KCe.forEach(t),UXe=i(y),am=n(y,"LI",{});var ZCe=s(am);voe=n(ZCe,"STRONG",{});var TGr=s(voe);JXe=r(TGr,"gptj"),TGr.forEach(t),YXe=r(ZCe," \u2014 "),bk=n(ZCe,"A",{href:!0});var MGr=s(bk);KXe=r(MGr,"GPTJConfig"),MGr.forEach(t),ZXe=r(ZCe," (GPT-J model)"),ZCe.forEach(t),eze=i(y),nm=n(y,"LI",{});var e5e=s(nm);Foe=n(e5e,"STRONG",{});var EGr=s(Foe);oze=r(EGr,"hubert"),EGr.forEach(t),rze=r(e5e," \u2014 "),vk=n(e5e,"A",{href:!0});var CGr=s(vk);tze=r(CGr,"HubertConfig"),CGr.forEach(t),aze=r(e5e," (Hubert model)"),e5e.forEach(t),nze=i(y),sm=n(y,"LI",{});var o5e=s(sm);Toe=n(o5e,"STRONG",{});var wGr=s(Toe);sze=r(wGr,"ibert"),wGr.forEach(t),lze=r(o5e," \u2014 "),Fk=n(o5e,"A",{href:!0});var AGr=s(Fk);ize=r(AGr,"IBertConfig"),AGr.forEach(t),dze=r(o5e," (I-BERT model)"),o5e.forEach(t),cze=i(y),lm=n(y,"LI",{});var r5e=s(lm);Moe=n(r5e,"STRONG",{});var yGr=s(Moe);fze=r(yGr,"imagegpt"),yGr.forEach(t),mze=r(r5e," \u2014 "),Tk=n(r5e,"A",{href:!0});var LGr=s(Tk);gze=r(LGr,"ImageGPTConfig"),LGr.forEach(t),hze=r(r5e," (ImageGPT model)"),r5e.forEach(t),pze=i(y),im=n(y,"LI",{});var t5e=s(im);Eoe=n(t5e,"STRONG",{});var xGr=s(Eoe);_ze=r(xGr,"layoutlm"),xGr.forEach(t),uze=r(t5e," \u2014 "),Mk=n(t5e,"A",{href:!0});var $Gr=s(Mk);bze=r($Gr,"LayoutLMConfig"),$Gr.forEach(t),vze=r(t5e," (LayoutLM model)"),t5e.forEach(t),Fze=i(y),dm=n(y,"LI",{});var a5e=s(dm);Coe=n(a5e,"STRONG",{});var kGr=s(Coe);Tze=r(kGr,"layoutlmv2"),kGr.forEach(t),Mze=r(a5e," \u2014 "),Ek=n(a5e,"A",{href:!0});var SGr=s(Ek);Eze=r(SGr,"LayoutLMv2Config"),SGr.forEach(t),Cze=r(a5e," (LayoutLMv2 model)"),a5e.forEach(t),wze=i(y),cm=n(y,"LI",{});var n5e=s(cm);woe=n(n5e,"STRONG",{});var RGr=s(woe);Aze=r(RGr,"led"),RGr.forEach(t),yze=r(n5e," \u2014 "),Ck=n(n5e,"A",{href:!0});var PGr=s(Ck);Lze=r(PGr,"LEDConfig"),PGr.forEach(t),xze=r(n5e," (LED model)"),n5e.forEach(t),$ze=i(y),fm=n(y,"LI",{});var s5e=s(fm);Aoe=n(s5e,"STRONG",{});var BGr=s(Aoe);kze=r(BGr,"longformer"),BGr.forEach(t),Sze=r(s5e," \u2014 "),wk=n(s5e,"A",{href:!0});var IGr=s(wk);Rze=r(IGr,"LongformerConfig"),IGr.forEach(t),Pze=r(s5e," (Longformer model)"),s5e.forEach(t),Bze=i(y),mm=n(y,"LI",{});var l5e=s(mm);yoe=n(l5e,"STRONG",{});var qGr=s(yoe);Ize=r(qGr,"luke"),qGr.forEach(t),qze=r(l5e," \u2014 "),Ak=n(l5e,"A",{href:!0});var NGr=s(Ak);Nze=r(NGr,"LukeConfig"),NGr.forEach(t),jze=r(l5e," (LUKE model)"),l5e.forEach(t),Dze=i(y),gm=n(y,"LI",{});var i5e=s(gm);Loe=n(i5e,"STRONG",{});var jGr=s(Loe);Gze=r(jGr,"lxmert"),jGr.forEach(t),Oze=r(i5e," \u2014 "),yk=n(i5e,"A",{href:!0});var DGr=s(yk);Vze=r(DGr,"LxmertConfig"),DGr.forEach(t),Xze=r(i5e," (LXMERT model)"),i5e.forEach(t),zze=i(y),hm=n(y,"LI",{});var d5e=s(hm);xoe=n(d5e,"STRONG",{});var GGr=s(xoe);Wze=r(GGr,"m2m_100"),GGr.forEach(t),Qze=r(d5e," \u2014 "),Lk=n(d5e,"A",{href:!0});var OGr=s(Lk);Hze=r(OGr,"M2M100Config"),OGr.forEach(t),Uze=r(d5e," (M2M100 model)"),d5e.forEach(t),Jze=i(y),pm=n(y,"LI",{});var c5e=s(pm);$oe=n(c5e,"STRONG",{});var VGr=s($oe);Yze=r(VGr,"marian"),VGr.forEach(t),Kze=r(c5e," \u2014 "),xk=n(c5e,"A",{href:!0});var XGr=s(xk);Zze=r(XGr,"MarianConfig"),XGr.forEach(t),eWe=r(c5e," (Marian model)"),c5e.forEach(t),oWe=i(y),_m=n(y,"LI",{});var f5e=s(_m);koe=n(f5e,"STRONG",{});var zGr=s(koe);rWe=r(zGr,"maskformer"),zGr.forEach(t),tWe=r(f5e," \u2014 "),$k=n(f5e,"A",{href:!0});var WGr=s($k);aWe=r(WGr,"MaskFormerConfig"),WGr.forEach(t),nWe=r(f5e," (MaskFormer model)"),f5e.forEach(t),sWe=i(y),um=n(y,"LI",{});var m5e=s(um);Soe=n(m5e,"STRONG",{});var QGr=s(Soe);lWe=r(QGr,"mbart"),QGr.forEach(t),iWe=r(m5e," \u2014 "),kk=n(m5e,"A",{href:!0});var HGr=s(kk);dWe=r(HGr,"MBartConfig"),HGr.forEach(t),cWe=r(m5e," (mBART model)"),m5e.forEach(t),fWe=i(y),bm=n(y,"LI",{});var g5e=s(bm);Roe=n(g5e,"STRONG",{});var UGr=s(Roe);mWe=r(UGr,"megatron-bert"),UGr.forEach(t),gWe=r(g5e," \u2014 "),Sk=n(g5e,"A",{href:!0});var JGr=s(Sk);hWe=r(JGr,"MegatronBertConfig"),JGr.forEach(t),pWe=r(g5e," (MegatronBert model)"),g5e.forEach(t),_We=i(y),vm=n(y,"LI",{});var h5e=s(vm);Poe=n(h5e,"STRONG",{});var YGr=s(Poe);uWe=r(YGr,"mobilebert"),YGr.forEach(t),bWe=r(h5e," \u2014 "),Rk=n(h5e,"A",{href:!0});var KGr=s(Rk);vWe=r(KGr,"MobileBertConfig"),KGr.forEach(t),FWe=r(h5e," (MobileBERT model)"),h5e.forEach(t),TWe=i(y),Fm=n(y,"LI",{});var p5e=s(Fm);Boe=n(p5e,"STRONG",{});var ZGr=s(Boe);MWe=r(ZGr,"mpnet"),ZGr.forEach(t),EWe=r(p5e," \u2014 "),Pk=n(p5e,"A",{href:!0});var eOr=s(Pk);CWe=r(eOr,"MPNetConfig"),eOr.forEach(t),wWe=r(p5e," (MPNet model)"),p5e.forEach(t),AWe=i(y),Tm=n(y,"LI",{});var _5e=s(Tm);Ioe=n(_5e,"STRONG",{});var oOr=s(Ioe);yWe=r(oOr,"mt5"),oOr.forEach(t),LWe=r(_5e," \u2014 "),Bk=n(_5e,"A",{href:!0});var rOr=s(Bk);xWe=r(rOr,"MT5Config"),rOr.forEach(t),$We=r(_5e," (mT5 model)"),_5e.forEach(t),kWe=i(y),Mm=n(y,"LI",{});var u5e=s(Mm);qoe=n(u5e,"STRONG",{});var tOr=s(qoe);SWe=r(tOr,"nystromformer"),tOr.forEach(t),RWe=r(u5e," \u2014 "),Ik=n(u5e,"A",{href:!0});var aOr=s(Ik);PWe=r(aOr,"NystromformerConfig"),aOr.forEach(t),BWe=r(u5e," (Nystromformer model)"),u5e.forEach(t),IWe=i(y),Em=n(y,"LI",{});var b5e=s(Em);Noe=n(b5e,"STRONG",{});var nOr=s(Noe);qWe=r(nOr,"openai-gpt"),nOr.forEach(t),NWe=r(b5e," \u2014 "),qk=n(b5e,"A",{href:!0});var sOr=s(qk);jWe=r(sOr,"OpenAIGPTConfig"),sOr.forEach(t),DWe=r(b5e," (OpenAI GPT model)"),b5e.forEach(t),GWe=i(y),Cm=n(y,"LI",{});var v5e=s(Cm);joe=n(v5e,"STRONG",{});var lOr=s(joe);OWe=r(lOr,"opt"),lOr.forEach(t),VWe=r(v5e," \u2014 "),Nk=n(v5e,"A",{href:!0});var iOr=s(Nk);XWe=r(iOr,"OPTConfig"),iOr.forEach(t),zWe=r(v5e," (OPT model)"),v5e.forEach(t),WWe=i(y),wm=n(y,"LI",{});var F5e=s(wm);Doe=n(F5e,"STRONG",{});var dOr=s(Doe);QWe=r(dOr,"pegasus"),dOr.forEach(t),HWe=r(F5e," \u2014 "),jk=n(F5e,"A",{href:!0});var cOr=s(jk);UWe=r(cOr,"PegasusConfig"),cOr.forEach(t),JWe=r(F5e," (Pegasus model)"),F5e.forEach(t),YWe=i(y),Am=n(y,"LI",{});var T5e=s(Am);Goe=n(T5e,"STRONG",{});var fOr=s(Goe);KWe=r(fOr,"perceiver"),fOr.forEach(t),ZWe=r(T5e," \u2014 "),Dk=n(T5e,"A",{href:!0});var mOr=s(Dk);eQe=r(mOr,"PerceiverConfig"),mOr.forEach(t),oQe=r(T5e," (Perceiver model)"),T5e.forEach(t),rQe=i(y),ym=n(y,"LI",{});var M5e=s(ym);Ooe=n(M5e,"STRONG",{});var gOr=s(Ooe);tQe=r(gOr,"plbart"),gOr.forEach(t),aQe=r(M5e," \u2014 "),Gk=n(M5e,"A",{href:!0});var hOr=s(Gk);nQe=r(hOr,"PLBartConfig"),hOr.forEach(t),sQe=r(M5e," (PLBart model)"),M5e.forEach(t),lQe=i(y),Lm=n(y,"LI",{});var E5e=s(Lm);Voe=n(E5e,"STRONG",{});var pOr=s(Voe);iQe=r(pOr,"poolformer"),pOr.forEach(t),dQe=r(E5e," \u2014 "),Ok=n(E5e,"A",{href:!0});var _Or=s(Ok);cQe=r(_Or,"PoolFormerConfig"),_Or.forEach(t),fQe=r(E5e," (PoolFormer model)"),E5e.forEach(t),mQe=i(y),xm=n(y,"LI",{});var C5e=s(xm);Xoe=n(C5e,"STRONG",{});var uOr=s(Xoe);gQe=r(uOr,"prophetnet"),uOr.forEach(t),hQe=r(C5e," \u2014 "),Vk=n(C5e,"A",{href:!0});var bOr=s(Vk);pQe=r(bOr,"ProphetNetConfig"),bOr.forEach(t),_Qe=r(C5e," (ProphetNet model)"),C5e.forEach(t),uQe=i(y),$m=n(y,"LI",{});var w5e=s($m);zoe=n(w5e,"STRONG",{});var vOr=s(zoe);bQe=r(vOr,"qdqbert"),vOr.forEach(t),vQe=r(w5e," \u2014 "),Xk=n(w5e,"A",{href:!0});var FOr=s(Xk);FQe=r(FOr,"QDQBertConfig"),FOr.forEach(t),TQe=r(w5e," (QDQBert model)"),w5e.forEach(t),MQe=i(y),km=n(y,"LI",{});var A5e=s(km);Woe=n(A5e,"STRONG",{});var TOr=s(Woe);EQe=r(TOr,"rag"),TOr.forEach(t),CQe=r(A5e," \u2014 "),zk=n(A5e,"A",{href:!0});var MOr=s(zk);wQe=r(MOr,"RagConfig"),MOr.forEach(t),AQe=r(A5e," (RAG model)"),A5e.forEach(t),yQe=i(y),Sm=n(y,"LI",{});var y5e=s(Sm);Qoe=n(y5e,"STRONG",{});var EOr=s(Qoe);LQe=r(EOr,"realm"),EOr.forEach(t),xQe=r(y5e," \u2014 "),Wk=n(y5e,"A",{href:!0});var COr=s(Wk);$Qe=r(COr,"RealmConfig"),COr.forEach(t),kQe=r(y5e," (Realm model)"),y5e.forEach(t),SQe=i(y),Rm=n(y,"LI",{});var L5e=s(Rm);Hoe=n(L5e,"STRONG",{});var wOr=s(Hoe);RQe=r(wOr,"reformer"),wOr.forEach(t),PQe=r(L5e," \u2014 "),Qk=n(L5e,"A",{href:!0});var AOr=s(Qk);BQe=r(AOr,"ReformerConfig"),AOr.forEach(t),IQe=r(L5e," (Reformer model)"),L5e.forEach(t),qQe=i(y),Pm=n(y,"LI",{});var x5e=s(Pm);Uoe=n(x5e,"STRONG",{});var yOr=s(Uoe);NQe=r(yOr,"regnet"),yOr.forEach(t),jQe=r(x5e," \u2014 "),Hk=n(x5e,"A",{href:!0});var LOr=s(Hk);DQe=r(LOr,"RegNetConfig"),LOr.forEach(t),GQe=r(x5e," (RegNet model)"),x5e.forEach(t),OQe=i(y),Bm=n(y,"LI",{});var $5e=s(Bm);Joe=n($5e,"STRONG",{});var xOr=s(Joe);VQe=r(xOr,"rembert"),xOr.forEach(t),XQe=r($5e," \u2014 "),Uk=n($5e,"A",{href:!0});var $Or=s(Uk);zQe=r($Or,"RemBertConfig"),$Or.forEach(t),WQe=r($5e," (RemBERT model)"),$5e.forEach(t),QQe=i(y),Im=n(y,"LI",{});var k5e=s(Im);Yoe=n(k5e,"STRONG",{});var kOr=s(Yoe);HQe=r(kOr,"resnet"),kOr.forEach(t),UQe=r(k5e," \u2014 "),Jk=n(k5e,"A",{href:!0});var SOr=s(Jk);JQe=r(SOr,"ResNetConfig"),SOr.forEach(t),YQe=r(k5e," (ResNet model)"),k5e.forEach(t),KQe=i(y),qm=n(y,"LI",{});var S5e=s(qm);Koe=n(S5e,"STRONG",{});var ROr=s(Koe);ZQe=r(ROr,"retribert"),ROr.forEach(t),eHe=r(S5e," \u2014 "),Yk=n(S5e,"A",{href:!0});var POr=s(Yk);oHe=r(POr,"RetriBertConfig"),POr.forEach(t),rHe=r(S5e," (RetriBERT model)"),S5e.forEach(t),tHe=i(y),Nm=n(y,"LI",{});var R5e=s(Nm);Zoe=n(R5e,"STRONG",{});var BOr=s(Zoe);aHe=r(BOr,"roberta"),BOr.forEach(t),nHe=r(R5e," \u2014 "),Kk=n(R5e,"A",{href:!0});var IOr=s(Kk);sHe=r(IOr,"RobertaConfig"),IOr.forEach(t),lHe=r(R5e," (RoBERTa model)"),R5e.forEach(t),iHe=i(y),jm=n(y,"LI",{});var P5e=s(jm);ere=n(P5e,"STRONG",{});var qOr=s(ere);dHe=r(qOr,"roformer"),qOr.forEach(t),cHe=r(P5e," \u2014 "),Zk=n(P5e,"A",{href:!0});var NOr=s(Zk);fHe=r(NOr,"RoFormerConfig"),NOr.forEach(t),mHe=r(P5e," (RoFormer model)"),P5e.forEach(t),gHe=i(y),Dm=n(y,"LI",{});var B5e=s(Dm);ore=n(B5e,"STRONG",{});var jOr=s(ore);hHe=r(jOr,"segformer"),jOr.forEach(t),pHe=r(B5e," \u2014 "),eS=n(B5e,"A",{href:!0});var DOr=s(eS);_He=r(DOr,"SegformerConfig"),DOr.forEach(t),uHe=r(B5e," (SegFormer model)"),B5e.forEach(t),bHe=i(y),Gm=n(y,"LI",{});var I5e=s(Gm);rre=n(I5e,"STRONG",{});var GOr=s(rre);vHe=r(GOr,"sew"),GOr.forEach(t),FHe=r(I5e," \u2014 "),oS=n(I5e,"A",{href:!0});var OOr=s(oS);THe=r(OOr,"SEWConfig"),OOr.forEach(t),MHe=r(I5e," (SEW model)"),I5e.forEach(t),EHe=i(y),Om=n(y,"LI",{});var q5e=s(Om);tre=n(q5e,"STRONG",{});var VOr=s(tre);CHe=r(VOr,"sew-d"),VOr.forEach(t),wHe=r(q5e," \u2014 "),rS=n(q5e,"A",{href:!0});var XOr=s(rS);AHe=r(XOr,"SEWDConfig"),XOr.forEach(t),yHe=r(q5e," (SEW-D model)"),q5e.forEach(t),LHe=i(y),Vm=n(y,"LI",{});var N5e=s(Vm);are=n(N5e,"STRONG",{});var zOr=s(are);xHe=r(zOr,"speech-encoder-decoder"),zOr.forEach(t),$He=r(N5e," \u2014 "),tS=n(N5e,"A",{href:!0});var WOr=s(tS);kHe=r(WOr,"SpeechEncoderDecoderConfig"),WOr.forEach(t),SHe=r(N5e," (Speech Encoder decoder model)"),N5e.forEach(t),RHe=i(y),Xm=n(y,"LI",{});var j5e=s(Xm);nre=n(j5e,"STRONG",{});var QOr=s(nre);PHe=r(QOr,"speech_to_text"),QOr.forEach(t),BHe=r(j5e," \u2014 "),aS=n(j5e,"A",{href:!0});var HOr=s(aS);IHe=r(HOr,"Speech2TextConfig"),HOr.forEach(t),qHe=r(j5e," (Speech2Text model)"),j5e.forEach(t),NHe=i(y),zm=n(y,"LI",{});var D5e=s(zm);sre=n(D5e,"STRONG",{});var UOr=s(sre);jHe=r(UOr,"speech_to_text_2"),UOr.forEach(t),DHe=r(D5e," \u2014 "),nS=n(D5e,"A",{href:!0});var JOr=s(nS);GHe=r(JOr,"Speech2Text2Config"),JOr.forEach(t),OHe=r(D5e," (Speech2Text2 model)"),D5e.forEach(t),VHe=i(y),Wm=n(y,"LI",{});var G5e=s(Wm);lre=n(G5e,"STRONG",{});var YOr=s(lre);XHe=r(YOr,"splinter"),YOr.forEach(t),zHe=r(G5e," \u2014 "),sS=n(G5e,"A",{href:!0});var KOr=s(sS);WHe=r(KOr,"SplinterConfig"),KOr.forEach(t),QHe=r(G5e," (Splinter model)"),G5e.forEach(t),HHe=i(y),Qm=n(y,"LI",{});var O5e=s(Qm);ire=n(O5e,"STRONG",{});var ZOr=s(ire);UHe=r(ZOr,"squeezebert"),ZOr.forEach(t),JHe=r(O5e," \u2014 "),lS=n(O5e,"A",{href:!0});var eVr=s(lS);YHe=r(eVr,"SqueezeBertConfig"),eVr.forEach(t),KHe=r(O5e," (SqueezeBERT model)"),O5e.forEach(t),ZHe=i(y),Hm=n(y,"LI",{});var V5e=s(Hm);dre=n(V5e,"STRONG",{});var oVr=s(dre);eUe=r(oVr,"swin"),oVr.forEach(t),oUe=r(V5e," \u2014 "),iS=n(V5e,"A",{href:!0});var rVr=s(iS);rUe=r(rVr,"SwinConfig"),rVr.forEach(t),tUe=r(V5e," (Swin model)"),V5e.forEach(t),aUe=i(y),Um=n(y,"LI",{});var X5e=s(Um);cre=n(X5e,"STRONG",{});var tVr=s(cre);nUe=r(tVr,"t5"),tVr.forEach(t),sUe=r(X5e," \u2014 "),dS=n(X5e,"A",{href:!0});var aVr=s(dS);lUe=r(aVr,"T5Config"),aVr.forEach(t),iUe=r(X5e," (T5 model)"),X5e.forEach(t),dUe=i(y),Jm=n(y,"LI",{});var z5e=s(Jm);fre=n(z5e,"STRONG",{});var nVr=s(fre);cUe=r(nVr,"tapas"),nVr.forEach(t),fUe=r(z5e," \u2014 "),cS=n(z5e,"A",{href:!0});var sVr=s(cS);mUe=r(sVr,"TapasConfig"),sVr.forEach(t),gUe=r(z5e," (TAPAS model)"),z5e.forEach(t),hUe=i(y),Ym=n(y,"LI",{});var W5e=s(Ym);mre=n(W5e,"STRONG",{});var lVr=s(mre);pUe=r(lVr,"transfo-xl"),lVr.forEach(t),_Ue=r(W5e," \u2014 "),fS=n(W5e,"A",{href:!0});var iVr=s(fS);uUe=r(iVr,"TransfoXLConfig"),iVr.forEach(t),bUe=r(W5e," (Transformer-XL model)"),W5e.forEach(t),vUe=i(y),Km=n(y,"LI",{});var Q5e=s(Km);gre=n(Q5e,"STRONG",{});var dVr=s(gre);FUe=r(dVr,"trocr"),dVr.forEach(t),TUe=r(Q5e," \u2014 "),mS=n(Q5e,"A",{href:!0});var cVr=s(mS);MUe=r(cVr,"TrOCRConfig"),cVr.forEach(t),EUe=r(Q5e," (TrOCR model)"),Q5e.forEach(t),CUe=i(y),Zm=n(y,"LI",{});var H5e=s(Zm);hre=n(H5e,"STRONG",{});var fVr=s(hre);wUe=r(fVr,"unispeech"),fVr.forEach(t),AUe=r(H5e," \u2014 "),gS=n(H5e,"A",{href:!0});var mVr=s(gS);yUe=r(mVr,"UniSpeechConfig"),mVr.forEach(t),LUe=r(H5e," (UniSpeech model)"),H5e.forEach(t),xUe=i(y),eg=n(y,"LI",{});var U5e=s(eg);pre=n(U5e,"STRONG",{});var gVr=s(pre);$Ue=r(gVr,"unispeech-sat"),gVr.forEach(t),kUe=r(U5e," \u2014 "),hS=n(U5e,"A",{href:!0});var hVr=s(hS);SUe=r(hVr,"UniSpeechSatConfig"),hVr.forEach(t),RUe=r(U5e," (UniSpeechSat model)"),U5e.forEach(t),PUe=i(y),og=n(y,"LI",{});var J5e=s(og);_re=n(J5e,"STRONG",{});var pVr=s(_re);BUe=r(pVr,"van"),pVr.forEach(t),IUe=r(J5e," \u2014 "),pS=n(J5e,"A",{href:!0});var _Vr=s(pS);qUe=r(_Vr,"VanConfig"),_Vr.forEach(t),NUe=r(J5e," (VAN model)"),J5e.forEach(t),jUe=i(y),rg=n(y,"LI",{});var Y5e=s(rg);ure=n(Y5e,"STRONG",{});var uVr=s(ure);DUe=r(uVr,"vilt"),uVr.forEach(t),GUe=r(Y5e," \u2014 "),_S=n(Y5e,"A",{href:!0});var bVr=s(_S);OUe=r(bVr,"ViltConfig"),bVr.forEach(t),VUe=r(Y5e," (ViLT model)"),Y5e.forEach(t),XUe=i(y),tg=n(y,"LI",{});var K5e=s(tg);bre=n(K5e,"STRONG",{});var vVr=s(bre);zUe=r(vVr,"vision-encoder-decoder"),vVr.forEach(t),WUe=r(K5e," \u2014 "),uS=n(K5e,"A",{href:!0});var FVr=s(uS);QUe=r(FVr,"VisionEncoderDecoderConfig"),FVr.forEach(t),HUe=r(K5e," (Vision Encoder decoder model)"),K5e.forEach(t),UUe=i(y),ag=n(y,"LI",{});var Z5e=s(ag);vre=n(Z5e,"STRONG",{});var TVr=s(vre);JUe=r(TVr,"vision-text-dual-encoder"),TVr.forEach(t),YUe=r(Z5e," \u2014 "),bS=n(Z5e,"A",{href:!0});var MVr=s(bS);KUe=r(MVr,"VisionTextDualEncoderConfig"),MVr.forEach(t),ZUe=r(Z5e," (VisionTextDualEncoder model)"),Z5e.forEach(t),eJe=i(y),ng=n(y,"LI",{});var e3e=s(ng);Fre=n(e3e,"STRONG",{});var EVr=s(Fre);oJe=r(EVr,"visual_bert"),EVr.forEach(t),rJe=r(e3e," \u2014 "),vS=n(e3e,"A",{href:!0});var CVr=s(vS);tJe=r(CVr,"VisualBertConfig"),CVr.forEach(t),aJe=r(e3e," (VisualBert model)"),e3e.forEach(t),nJe=i(y),sg=n(y,"LI",{});var o3e=s(sg);Tre=n(o3e,"STRONG",{});var wVr=s(Tre);sJe=r(wVr,"vit"),wVr.forEach(t),lJe=r(o3e," \u2014 "),FS=n(o3e,"A",{href:!0});var AVr=s(FS);iJe=r(AVr,"ViTConfig"),AVr.forEach(t),dJe=r(o3e," (ViT model)"),o3e.forEach(t),cJe=i(y),lg=n(y,"LI",{});var r3e=s(lg);Mre=n(r3e,"STRONG",{});var yVr=s(Mre);fJe=r(yVr,"vit_mae"),yVr.forEach(t),mJe=r(r3e," \u2014 "),TS=n(r3e,"A",{href:!0});var LVr=s(TS);gJe=r(LVr,"ViTMAEConfig"),LVr.forEach(t),hJe=r(r3e," (ViTMAE model)"),r3e.forEach(t),pJe=i(y),ig=n(y,"LI",{});var t3e=s(ig);Ere=n(t3e,"STRONG",{});var xVr=s(Ere);_Je=r(xVr,"wav2vec2"),xVr.forEach(t),uJe=r(t3e," \u2014 "),MS=n(t3e,"A",{href:!0});var $Vr=s(MS);bJe=r($Vr,"Wav2Vec2Config"),$Vr.forEach(t),vJe=r(t3e," (Wav2Vec2 model)"),t3e.forEach(t),FJe=i(y),dg=n(y,"LI",{});var a3e=s(dg);Cre=n(a3e,"STRONG",{});var kVr=s(Cre);TJe=r(kVr,"wav2vec2-conformer"),kVr.forEach(t),MJe=r(a3e," \u2014 "),ES=n(a3e,"A",{href:!0});var SVr=s(ES);EJe=r(SVr,"Wav2Vec2ConformerConfig"),SVr.forEach(t),CJe=r(a3e," (Wav2Vec2-Conformer model)"),a3e.forEach(t),wJe=i(y),cg=n(y,"LI",{});var n3e=s(cg);wre=n(n3e,"STRONG",{});var RVr=s(wre);AJe=r(RVr,"wavlm"),RVr.forEach(t),yJe=r(n3e," \u2014 "),CS=n(n3e,"A",{href:!0});var PVr=s(CS);LJe=r(PVr,"WavLMConfig"),PVr.forEach(t),xJe=r(n3e," (WavLM model)"),n3e.forEach(t),$Je=i(y),fg=n(y,"LI",{});var s3e=s(fg);Are=n(s3e,"STRONG",{});var BVr=s(Are);kJe=r(BVr,"xglm"),BVr.forEach(t),SJe=r(s3e," \u2014 "),wS=n(s3e,"A",{href:!0});var IVr=s(wS);RJe=r(IVr,"XGLMConfig"),IVr.forEach(t),PJe=r(s3e," (XGLM model)"),s3e.forEach(t),BJe=i(y),mg=n(y,"LI",{});var l3e=s(mg);yre=n(l3e,"STRONG",{});var qVr=s(yre);IJe=r(qVr,"xlm"),qVr.forEach(t),qJe=r(l3e," \u2014 "),AS=n(l3e,"A",{href:!0});var NVr=s(AS);NJe=r(NVr,"XLMConfig"),NVr.forEach(t),jJe=r(l3e," (XLM model)"),l3e.forEach(t),DJe=i(y),gg=n(y,"LI",{});var i3e=s(gg);Lre=n(i3e,"STRONG",{});var jVr=s(Lre);GJe=r(jVr,"xlm-prophetnet"),jVr.forEach(t),OJe=r(i3e," \u2014 "),yS=n(i3e,"A",{href:!0});var DVr=s(yS);VJe=r(DVr,"XLMProphetNetConfig"),DVr.forEach(t),XJe=r(i3e," (XLMProphetNet model)"),i3e.forEach(t),zJe=i(y),hg=n(y,"LI",{});var d3e=s(hg);xre=n(d3e,"STRONG",{});var GVr=s(xre);WJe=r(GVr,"xlm-roberta"),GVr.forEach(t),QJe=r(d3e," \u2014 "),LS=n(d3e,"A",{href:!0});var OVr=s(LS);HJe=r(OVr,"XLMRobertaConfig"),OVr.forEach(t),UJe=r(d3e," (XLM-RoBERTa model)"),d3e.forEach(t),JJe=i(y),pg=n(y,"LI",{});var c3e=s(pg);$re=n(c3e,"STRONG",{});var VVr=s($re);YJe=r(VVr,"xlm-roberta-xl"),VVr.forEach(t),KJe=r(c3e," \u2014 "),xS=n(c3e,"A",{href:!0});var XVr=s(xS);ZJe=r(XVr,"XLMRobertaXLConfig"),XVr.forEach(t),eYe=r(c3e," (XLM-RoBERTa-XL model)"),c3e.forEach(t),oYe=i(y),_g=n(y,"LI",{});var f3e=s(_g);kre=n(f3e,"STRONG",{});var zVr=s(kre);rYe=r(zVr,"xlnet"),zVr.forEach(t),tYe=r(f3e," \u2014 "),$S=n(f3e,"A",{href:!0});var WVr=s($S);aYe=r(WVr,"XLNetConfig"),WVr.forEach(t),nYe=r(f3e," (XLNet model)"),f3e.forEach(t),sYe=i(y),ug=n(y,"LI",{});var m3e=s(ug);Sre=n(m3e,"STRONG",{});var QVr=s(Sre);lYe=r(QVr,"yolos"),QVr.forEach(t),iYe=r(m3e," \u2014 "),kS=n(m3e,"A",{href:!0});var HVr=s(kS);dYe=r(HVr,"YolosConfig"),HVr.forEach(t),cYe=r(m3e," (YOLOS model)"),m3e.forEach(t),fYe=i(y),bg=n(y,"LI",{});var g3e=s(bg);Rre=n(g3e,"STRONG",{});var UVr=s(Rre);mYe=r(UVr,"yoso"),UVr.forEach(t),gYe=r(g3e," \u2014 "),SS=n(g3e,"A",{href:!0});var JVr=s(SS);hYe=r(JVr,"YosoConfig"),JVr.forEach(t),pYe=r(g3e," (YOSO model)"),g3e.forEach(t),y.forEach(t),_Ye=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),uYe=i(et),Fg=n(et,"DIV",{class:!0});var zNe=s(Fg);T(bA.$$.fragment,zNe),bYe=i(zNe),Pre=n(zNe,"P",{});var YVr=s(Pre);vYe=r(YVr,"Register a new configuration for this class."),YVr.forEach(t),zNe.forEach(t),et.forEach(t),HIe=i(f),Fi=n(f,"H2",{class:!0});var WNe=s(Fi);Tg=n(WNe,"A",{id:!0,class:!0,href:!0});var KVr=s(Tg);Bre=n(KVr,"SPAN",{});var ZVr=s(Bre);T(vA.$$.fragment,ZVr),ZVr.forEach(t),KVr.forEach(t),FYe=i(WNe),Ire=n(WNe,"SPAN",{});var eXr=s(Ire);TYe=r(eXr,"AutoTokenizer"),eXr.forEach(t),WNe.forEach(t),UIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(FA.$$.fragment,Is),MYe=i(Is),TA=n(Is,"P",{});var QNe=s(TA);EYe=r(QNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RS=n(QNe,"A",{href:!0});var oXr=s(RS);CYe=r(oXr,"AutoTokenizer.from_pretrained()"),oXr.forEach(t),wYe=r(QNe," class method."),QNe.forEach(t),AYe=i(Is),MA=n(Is,"P",{});var HNe=s(MA);yYe=r(HNe,"This class cannot be instantiated directly using "),qre=n(HNe,"CODE",{});var rXr=s(qre);LYe=r(rXr,"__init__()"),rXr.forEach(t),xYe=r(HNe," (throws an error)."),HNe.forEach(t),$Ye=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(EA.$$.fragment,qs),kYe=i(qs),Nre=n(qs,"P",{});var tXr=s(Nre);SYe=r(tXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tXr.forEach(t),RYe=i(qs),Aa=n(qs,"P",{});var gw=s(Aa);PYe=r(gw,"The tokenizer class to instantiate is selected based on the "),jre=n(gw,"CODE",{});var aXr=s(jre);BYe=r(aXr,"model_type"),aXr.forEach(t),IYe=r(gw,` property of the config object (either
passed as an argument or loaded from `),Dre=n(gw,"CODE",{});var nXr=s(Dre);qYe=r(nXr,"pretrained_model_name_or_path"),nXr.forEach(t),NYe=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gre=n(gw,"CODE",{});var sXr=s(Gre);jYe=r(sXr,"pretrained_model_name_or_path"),sXr.forEach(t),DYe=r(gw,":"),gw.forEach(t),GYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Cx=s(Sn);Ore=n(Cx,"STRONG",{});var lXr=s(Ore);OYe=r(lXr,"albert"),lXr.forEach(t),VYe=r(Cx," \u2014 "),PS=n(Cx,"A",{href:!0});var iXr=s(PS);XYe=r(iXr,"AlbertTokenizer"),iXr.forEach(t),zYe=r(Cx," or "),BS=n(Cx,"A",{href:!0});var dXr=s(BS);WYe=r(dXr,"AlbertTokenizerFast"),dXr.forEach(t),QYe=r(Cx," (ALBERT model)"),Cx.forEach(t),HYe=i(S),Rn=n(S,"LI",{});var wx=s(Rn);Vre=n(wx,"STRONG",{});var cXr=s(Vre);UYe=r(cXr,"bart"),cXr.forEach(t),JYe=r(wx," \u2014 "),IS=n(wx,"A",{href:!0});var fXr=s(IS);YYe=r(fXr,"BartTokenizer"),fXr.forEach(t),KYe=r(wx," or "),qS=n(wx,"A",{href:!0});var mXr=s(qS);ZYe=r(mXr,"BartTokenizerFast"),mXr.forEach(t),eKe=r(wx," (BART model)"),wx.forEach(t),oKe=i(S),Pn=n(S,"LI",{});var Ax=s(Pn);Xre=n(Ax,"STRONG",{});var gXr=s(Xre);rKe=r(gXr,"barthez"),gXr.forEach(t),tKe=r(Ax," \u2014 "),NS=n(Ax,"A",{href:!0});var hXr=s(NS);aKe=r(hXr,"BarthezTokenizer"),hXr.forEach(t),nKe=r(Ax," or "),jS=n(Ax,"A",{href:!0});var pXr=s(jS);sKe=r(pXr,"BarthezTokenizerFast"),pXr.forEach(t),lKe=r(Ax," (BARThez model)"),Ax.forEach(t),iKe=i(S),Mg=n(S,"LI",{});var h3e=s(Mg);zre=n(h3e,"STRONG",{});var _Xr=s(zre);dKe=r(_Xr,"bartpho"),_Xr.forEach(t),cKe=r(h3e," \u2014 "),DS=n(h3e,"A",{href:!0});var uXr=s(DS);fKe=r(uXr,"BartphoTokenizer"),uXr.forEach(t),mKe=r(h3e," (BARTpho model)"),h3e.forEach(t),gKe=i(S),Bn=n(S,"LI",{});var yx=s(Bn);Wre=n(yx,"STRONG",{});var bXr=s(Wre);hKe=r(bXr,"bert"),bXr.forEach(t),pKe=r(yx," \u2014 "),GS=n(yx,"A",{href:!0});var vXr=s(GS);_Ke=r(vXr,"BertTokenizer"),vXr.forEach(t),uKe=r(yx," or "),OS=n(yx,"A",{href:!0});var FXr=s(OS);bKe=r(FXr,"BertTokenizerFast"),FXr.forEach(t),vKe=r(yx," (BERT model)"),yx.forEach(t),FKe=i(S),Eg=n(S,"LI",{});var p3e=s(Eg);Qre=n(p3e,"STRONG",{});var TXr=s(Qre);TKe=r(TXr,"bert-generation"),TXr.forEach(t),MKe=r(p3e," \u2014 "),VS=n(p3e,"A",{href:!0});var MXr=s(VS);EKe=r(MXr,"BertGenerationTokenizer"),MXr.forEach(t),CKe=r(p3e," (Bert Generation model)"),p3e.forEach(t),wKe=i(S),Cg=n(S,"LI",{});var _3e=s(Cg);Hre=n(_3e,"STRONG",{});var EXr=s(Hre);AKe=r(EXr,"bert-japanese"),EXr.forEach(t),yKe=r(_3e," \u2014 "),XS=n(_3e,"A",{href:!0});var CXr=s(XS);LKe=r(CXr,"BertJapaneseTokenizer"),CXr.forEach(t),xKe=r(_3e," (BertJapanese model)"),_3e.forEach(t),$Ke=i(S),wg=n(S,"LI",{});var u3e=s(wg);Ure=n(u3e,"STRONG",{});var wXr=s(Ure);kKe=r(wXr,"bertweet"),wXr.forEach(t),SKe=r(u3e," \u2014 "),zS=n(u3e,"A",{href:!0});var AXr=s(zS);RKe=r(AXr,"BertweetTokenizer"),AXr.forEach(t),PKe=r(u3e," (Bertweet model)"),u3e.forEach(t),BKe=i(S),In=n(S,"LI",{});var Lx=s(In);Jre=n(Lx,"STRONG",{});var yXr=s(Jre);IKe=r(yXr,"big_bird"),yXr.forEach(t),qKe=r(Lx," \u2014 "),WS=n(Lx,"A",{href:!0});var LXr=s(WS);NKe=r(LXr,"BigBirdTokenizer"),LXr.forEach(t),jKe=r(Lx," or "),QS=n(Lx,"A",{href:!0});var xXr=s(QS);DKe=r(xXr,"BigBirdTokenizerFast"),xXr.forEach(t),GKe=r(Lx," (BigBird model)"),Lx.forEach(t),OKe=i(S),qn=n(S,"LI",{});var xx=s(qn);Yre=n(xx,"STRONG",{});var $Xr=s(Yre);VKe=r($Xr,"bigbird_pegasus"),$Xr.forEach(t),XKe=r(xx," \u2014 "),HS=n(xx,"A",{href:!0});var kXr=s(HS);zKe=r(kXr,"PegasusTokenizer"),kXr.forEach(t),WKe=r(xx," or "),US=n(xx,"A",{href:!0});var SXr=s(US);QKe=r(SXr,"PegasusTokenizerFast"),SXr.forEach(t),HKe=r(xx," (BigBirdPegasus model)"),xx.forEach(t),UKe=i(S),Nn=n(S,"LI",{});var $x=s(Nn);Kre=n($x,"STRONG",{});var RXr=s(Kre);JKe=r(RXr,"blenderbot"),RXr.forEach(t),YKe=r($x," \u2014 "),JS=n($x,"A",{href:!0});var PXr=s(JS);KKe=r(PXr,"BlenderbotTokenizer"),PXr.forEach(t),ZKe=r($x," or "),YS=n($x,"A",{href:!0});var BXr=s(YS);eZe=r(BXr,"BlenderbotTokenizerFast"),BXr.forEach(t),oZe=r($x," (Blenderbot model)"),$x.forEach(t),rZe=i(S),Ag=n(S,"LI",{});var b3e=s(Ag);Zre=n(b3e,"STRONG",{});var IXr=s(Zre);tZe=r(IXr,"blenderbot-small"),IXr.forEach(t),aZe=r(b3e," \u2014 "),KS=n(b3e,"A",{href:!0});var qXr=s(KS);nZe=r(qXr,"BlenderbotSmallTokenizer"),qXr.forEach(t),sZe=r(b3e," (BlenderbotSmall model)"),b3e.forEach(t),lZe=i(S),yg=n(S,"LI",{});var v3e=s(yg);ete=n(v3e,"STRONG",{});var NXr=s(ete);iZe=r(NXr,"byt5"),NXr.forEach(t),dZe=r(v3e," \u2014 "),ZS=n(v3e,"A",{href:!0});var jXr=s(ZS);cZe=r(jXr,"ByT5Tokenizer"),jXr.forEach(t),fZe=r(v3e," (ByT5 model)"),v3e.forEach(t),mZe=i(S),jn=n(S,"LI",{});var kx=s(jn);ote=n(kx,"STRONG",{});var DXr=s(ote);gZe=r(DXr,"camembert"),DXr.forEach(t),hZe=r(kx," \u2014 "),eR=n(kx,"A",{href:!0});var GXr=s(eR);pZe=r(GXr,"CamembertTokenizer"),GXr.forEach(t),_Ze=r(kx," or "),oR=n(kx,"A",{href:!0});var OXr=s(oR);uZe=r(OXr,"CamembertTokenizerFast"),OXr.forEach(t),bZe=r(kx," (CamemBERT model)"),kx.forEach(t),vZe=i(S),Lg=n(S,"LI",{});var F3e=s(Lg);rte=n(F3e,"STRONG",{});var VXr=s(rte);FZe=r(VXr,"canine"),VXr.forEach(t),TZe=r(F3e," \u2014 "),rR=n(F3e,"A",{href:!0});var XXr=s(rR);MZe=r(XXr,"CanineTokenizer"),XXr.forEach(t),EZe=r(F3e," (Canine model)"),F3e.forEach(t),CZe=i(S),Dn=n(S,"LI",{});var Sx=s(Dn);tte=n(Sx,"STRONG",{});var zXr=s(tte);wZe=r(zXr,"clip"),zXr.forEach(t),AZe=r(Sx," \u2014 "),tR=n(Sx,"A",{href:!0});var WXr=s(tR);yZe=r(WXr,"CLIPTokenizer"),WXr.forEach(t),LZe=r(Sx," or "),aR=n(Sx,"A",{href:!0});var QXr=s(aR);xZe=r(QXr,"CLIPTokenizerFast"),QXr.forEach(t),$Ze=r(Sx," (CLIP model)"),Sx.forEach(t),kZe=i(S),Gn=n(S,"LI",{});var Rx=s(Gn);ate=n(Rx,"STRONG",{});var HXr=s(ate);SZe=r(HXr,"convbert"),HXr.forEach(t),RZe=r(Rx," \u2014 "),nR=n(Rx,"A",{href:!0});var UXr=s(nR);PZe=r(UXr,"ConvBertTokenizer"),UXr.forEach(t),BZe=r(Rx," or "),sR=n(Rx,"A",{href:!0});var JXr=s(sR);IZe=r(JXr,"ConvBertTokenizerFast"),JXr.forEach(t),qZe=r(Rx," (ConvBERT model)"),Rx.forEach(t),NZe=i(S),On=n(S,"LI",{});var Px=s(On);nte=n(Px,"STRONG",{});var YXr=s(nte);jZe=r(YXr,"cpm"),YXr.forEach(t),DZe=r(Px," \u2014 "),lR=n(Px,"A",{href:!0});var KXr=s(lR);GZe=r(KXr,"CpmTokenizer"),KXr.forEach(t),OZe=r(Px," or "),iR=n(Px,"A",{href:!0});var ZXr=s(iR);VZe=r(ZXr,"CpmTokenizerFast"),ZXr.forEach(t),XZe=r(Px," (CPM model)"),Px.forEach(t),zZe=i(S),xg=n(S,"LI",{});var T3e=s(xg);ste=n(T3e,"STRONG",{});var ezr=s(ste);WZe=r(ezr,"ctrl"),ezr.forEach(t),QZe=r(T3e," \u2014 "),dR=n(T3e,"A",{href:!0});var ozr=s(dR);HZe=r(ozr,"CTRLTokenizer"),ozr.forEach(t),UZe=r(T3e," (CTRL model)"),T3e.forEach(t),JZe=i(S),Vn=n(S,"LI",{});var Bx=s(Vn);lte=n(Bx,"STRONG",{});var rzr=s(lte);YZe=r(rzr,"data2vec-text"),rzr.forEach(t),KZe=r(Bx," \u2014 "),cR=n(Bx,"A",{href:!0});var tzr=s(cR);ZZe=r(tzr,"RobertaTokenizer"),tzr.forEach(t),eeo=r(Bx," or "),fR=n(Bx,"A",{href:!0});var azr=s(fR);oeo=r(azr,"RobertaTokenizerFast"),azr.forEach(t),reo=r(Bx," (Data2VecText model)"),Bx.forEach(t),teo=i(S),Xn=n(S,"LI",{});var Ix=s(Xn);ite=n(Ix,"STRONG",{});var nzr=s(ite);aeo=r(nzr,"deberta"),nzr.forEach(t),neo=r(Ix," \u2014 "),mR=n(Ix,"A",{href:!0});var szr=s(mR);seo=r(szr,"DebertaTokenizer"),szr.forEach(t),leo=r(Ix," or "),gR=n(Ix,"A",{href:!0});var lzr=s(gR);ieo=r(lzr,"DebertaTokenizerFast"),lzr.forEach(t),deo=r(Ix," (DeBERTa model)"),Ix.forEach(t),ceo=i(S),zn=n(S,"LI",{});var qx=s(zn);dte=n(qx,"STRONG",{});var izr=s(dte);feo=r(izr,"deberta-v2"),izr.forEach(t),meo=r(qx," \u2014 "),hR=n(qx,"A",{href:!0});var dzr=s(hR);geo=r(dzr,"DebertaV2Tokenizer"),dzr.forEach(t),heo=r(qx," or "),pR=n(qx,"A",{href:!0});var czr=s(pR);peo=r(czr,"DebertaV2TokenizerFast"),czr.forEach(t),_eo=r(qx," (DeBERTa-v2 model)"),qx.forEach(t),ueo=i(S),Wn=n(S,"LI",{});var Nx=s(Wn);cte=n(Nx,"STRONG",{});var fzr=s(cte);beo=r(fzr,"distilbert"),fzr.forEach(t),veo=r(Nx," \u2014 "),_R=n(Nx,"A",{href:!0});var mzr=s(_R);Feo=r(mzr,"DistilBertTokenizer"),mzr.forEach(t),Teo=r(Nx," or "),uR=n(Nx,"A",{href:!0});var gzr=s(uR);Meo=r(gzr,"DistilBertTokenizerFast"),gzr.forEach(t),Eeo=r(Nx," (DistilBERT model)"),Nx.forEach(t),Ceo=i(S),Qn=n(S,"LI",{});var jx=s(Qn);fte=n(jx,"STRONG",{});var hzr=s(fte);weo=r(hzr,"dpr"),hzr.forEach(t),Aeo=r(jx," \u2014 "),bR=n(jx,"A",{href:!0});var pzr=s(bR);yeo=r(pzr,"DPRQuestionEncoderTokenizer"),pzr.forEach(t),Leo=r(jx," or "),vR=n(jx,"A",{href:!0});var _zr=s(vR);xeo=r(_zr,"DPRQuestionEncoderTokenizerFast"),_zr.forEach(t),$eo=r(jx," (DPR model)"),jx.forEach(t),keo=i(S),Hn=n(S,"LI",{});var Dx=s(Hn);mte=n(Dx,"STRONG",{});var uzr=s(mte);Seo=r(uzr,"electra"),uzr.forEach(t),Reo=r(Dx," \u2014 "),FR=n(Dx,"A",{href:!0});var bzr=s(FR);Peo=r(bzr,"ElectraTokenizer"),bzr.forEach(t),Beo=r(Dx," or "),TR=n(Dx,"A",{href:!0});var vzr=s(TR);Ieo=r(vzr,"ElectraTokenizerFast"),vzr.forEach(t),qeo=r(Dx," (ELECTRA model)"),Dx.forEach(t),Neo=i(S),$g=n(S,"LI",{});var M3e=s($g);gte=n(M3e,"STRONG",{});var Fzr=s(gte);jeo=r(Fzr,"flaubert"),Fzr.forEach(t),Deo=r(M3e," \u2014 "),MR=n(M3e,"A",{href:!0});var Tzr=s(MR);Geo=r(Tzr,"FlaubertTokenizer"),Tzr.forEach(t),Oeo=r(M3e," (FlauBERT model)"),M3e.forEach(t),Veo=i(S),Un=n(S,"LI",{});var Gx=s(Un);hte=n(Gx,"STRONG",{});var Mzr=s(hte);Xeo=r(Mzr,"fnet"),Mzr.forEach(t),zeo=r(Gx," \u2014 "),ER=n(Gx,"A",{href:!0});var Ezr=s(ER);Weo=r(Ezr,"FNetTokenizer"),Ezr.forEach(t),Qeo=r(Gx," or "),CR=n(Gx,"A",{href:!0});var Czr=s(CR);Heo=r(Czr,"FNetTokenizerFast"),Czr.forEach(t),Ueo=r(Gx," (FNet model)"),Gx.forEach(t),Jeo=i(S),kg=n(S,"LI",{});var E3e=s(kg);pte=n(E3e,"STRONG",{});var wzr=s(pte);Yeo=r(wzr,"fsmt"),wzr.forEach(t),Keo=r(E3e," \u2014 "),wR=n(E3e,"A",{href:!0});var Azr=s(wR);Zeo=r(Azr,"FSMTTokenizer"),Azr.forEach(t),eoo=r(E3e," (FairSeq Machine-Translation model)"),E3e.forEach(t),ooo=i(S),Jn=n(S,"LI",{});var Ox=s(Jn);_te=n(Ox,"STRONG",{});var yzr=s(_te);roo=r(yzr,"funnel"),yzr.forEach(t),too=r(Ox," \u2014 "),AR=n(Ox,"A",{href:!0});var Lzr=s(AR);aoo=r(Lzr,"FunnelTokenizer"),Lzr.forEach(t),noo=r(Ox," or "),yR=n(Ox,"A",{href:!0});var xzr=s(yR);soo=r(xzr,"FunnelTokenizerFast"),xzr.forEach(t),loo=r(Ox," (Funnel Transformer model)"),Ox.forEach(t),ioo=i(S),Yn=n(S,"LI",{});var Vx=s(Yn);ute=n(Vx,"STRONG",{});var $zr=s(ute);doo=r($zr,"gpt2"),$zr.forEach(t),coo=r(Vx," \u2014 "),LR=n(Vx,"A",{href:!0});var kzr=s(LR);foo=r(kzr,"GPT2Tokenizer"),kzr.forEach(t),moo=r(Vx," or "),xR=n(Vx,"A",{href:!0});var Szr=s(xR);goo=r(Szr,"GPT2TokenizerFast"),Szr.forEach(t),hoo=r(Vx," (OpenAI GPT-2 model)"),Vx.forEach(t),poo=i(S),Kn=n(S,"LI",{});var Xx=s(Kn);bte=n(Xx,"STRONG",{});var Rzr=s(bte);_oo=r(Rzr,"gpt_neo"),Rzr.forEach(t),uoo=r(Xx," \u2014 "),$R=n(Xx,"A",{href:!0});var Pzr=s($R);boo=r(Pzr,"GPT2Tokenizer"),Pzr.forEach(t),voo=r(Xx," or "),kR=n(Xx,"A",{href:!0});var Bzr=s(kR);Foo=r(Bzr,"GPT2TokenizerFast"),Bzr.forEach(t),Too=r(Xx," (GPT Neo model)"),Xx.forEach(t),Moo=i(S),Zn=n(S,"LI",{});var zx=s(Zn);vte=n(zx,"STRONG",{});var Izr=s(vte);Eoo=r(Izr,"gptj"),Izr.forEach(t),Coo=r(zx," \u2014 "),SR=n(zx,"A",{href:!0});var qzr=s(SR);woo=r(qzr,"GPT2Tokenizer"),qzr.forEach(t),Aoo=r(zx," or "),RR=n(zx,"A",{href:!0});var Nzr=s(RR);yoo=r(Nzr,"GPT2TokenizerFast"),Nzr.forEach(t),Loo=r(zx," (GPT-J model)"),zx.forEach(t),xoo=i(S),es=n(S,"LI",{});var Wx=s(es);Fte=n(Wx,"STRONG",{});var jzr=s(Fte);$oo=r(jzr,"herbert"),jzr.forEach(t),koo=r(Wx," \u2014 "),PR=n(Wx,"A",{href:!0});var Dzr=s(PR);Soo=r(Dzr,"HerbertTokenizer"),Dzr.forEach(t),Roo=r(Wx," or "),BR=n(Wx,"A",{href:!0});var Gzr=s(BR);Poo=r(Gzr,"HerbertTokenizerFast"),Gzr.forEach(t),Boo=r(Wx," (HerBERT model)"),Wx.forEach(t),Ioo=i(S),Sg=n(S,"LI",{});var C3e=s(Sg);Tte=n(C3e,"STRONG",{});var Ozr=s(Tte);qoo=r(Ozr,"hubert"),Ozr.forEach(t),Noo=r(C3e," \u2014 "),IR=n(C3e,"A",{href:!0});var Vzr=s(IR);joo=r(Vzr,"Wav2Vec2CTCTokenizer"),Vzr.forEach(t),Doo=r(C3e," (Hubert model)"),C3e.forEach(t),Goo=i(S),os=n(S,"LI",{});var Qx=s(os);Mte=n(Qx,"STRONG",{});var Xzr=s(Mte);Ooo=r(Xzr,"ibert"),Xzr.forEach(t),Voo=r(Qx," \u2014 "),qR=n(Qx,"A",{href:!0});var zzr=s(qR);Xoo=r(zzr,"RobertaTokenizer"),zzr.forEach(t),zoo=r(Qx," or "),NR=n(Qx,"A",{href:!0});var Wzr=s(NR);Woo=r(Wzr,"RobertaTokenizerFast"),Wzr.forEach(t),Qoo=r(Qx," (I-BERT model)"),Qx.forEach(t),Hoo=i(S),rs=n(S,"LI",{});var Hx=s(rs);Ete=n(Hx,"STRONG",{});var Qzr=s(Ete);Uoo=r(Qzr,"layoutlm"),Qzr.forEach(t),Joo=r(Hx," \u2014 "),jR=n(Hx,"A",{href:!0});var Hzr=s(jR);Yoo=r(Hzr,"LayoutLMTokenizer"),Hzr.forEach(t),Koo=r(Hx," or "),DR=n(Hx,"A",{href:!0});var Uzr=s(DR);Zoo=r(Uzr,"LayoutLMTokenizerFast"),Uzr.forEach(t),ero=r(Hx," (LayoutLM model)"),Hx.forEach(t),oro=i(S),ts=n(S,"LI",{});var Ux=s(ts);Cte=n(Ux,"STRONG",{});var Jzr=s(Cte);rro=r(Jzr,"layoutlmv2"),Jzr.forEach(t),tro=r(Ux," \u2014 "),GR=n(Ux,"A",{href:!0});var Yzr=s(GR);aro=r(Yzr,"LayoutLMv2Tokenizer"),Yzr.forEach(t),nro=r(Ux," or "),OR=n(Ux,"A",{href:!0});var Kzr=s(OR);sro=r(Kzr,"LayoutLMv2TokenizerFast"),Kzr.forEach(t),lro=r(Ux," (LayoutLMv2 model)"),Ux.forEach(t),iro=i(S),as=n(S,"LI",{});var Jx=s(as);wte=n(Jx,"STRONG",{});var Zzr=s(wte);dro=r(Zzr,"layoutxlm"),Zzr.forEach(t),cro=r(Jx," \u2014 "),VR=n(Jx,"A",{href:!0});var eWr=s(VR);fro=r(eWr,"LayoutXLMTokenizer"),eWr.forEach(t),mro=r(Jx," or "),XR=n(Jx,"A",{href:!0});var oWr=s(XR);gro=r(oWr,"LayoutXLMTokenizerFast"),oWr.forEach(t),hro=r(Jx," (LayoutXLM model)"),Jx.forEach(t),pro=i(S),ns=n(S,"LI",{});var Yx=s(ns);Ate=n(Yx,"STRONG",{});var rWr=s(Ate);_ro=r(rWr,"led"),rWr.forEach(t),uro=r(Yx," \u2014 "),zR=n(Yx,"A",{href:!0});var tWr=s(zR);bro=r(tWr,"LEDTokenizer"),tWr.forEach(t),vro=r(Yx," or "),WR=n(Yx,"A",{href:!0});var aWr=s(WR);Fro=r(aWr,"LEDTokenizerFast"),aWr.forEach(t),Tro=r(Yx," (LED model)"),Yx.forEach(t),Mro=i(S),ss=n(S,"LI",{});var Kx=s(ss);yte=n(Kx,"STRONG",{});var nWr=s(yte);Ero=r(nWr,"longformer"),nWr.forEach(t),Cro=r(Kx," \u2014 "),QR=n(Kx,"A",{href:!0});var sWr=s(QR);wro=r(sWr,"LongformerTokenizer"),sWr.forEach(t),Aro=r(Kx," or "),HR=n(Kx,"A",{href:!0});var lWr=s(HR);yro=r(lWr,"LongformerTokenizerFast"),lWr.forEach(t),Lro=r(Kx," (Longformer model)"),Kx.forEach(t),xro=i(S),Rg=n(S,"LI",{});var w3e=s(Rg);Lte=n(w3e,"STRONG",{});var iWr=s(Lte);$ro=r(iWr,"luke"),iWr.forEach(t),kro=r(w3e," \u2014 "),UR=n(w3e,"A",{href:!0});var dWr=s(UR);Sro=r(dWr,"LukeTokenizer"),dWr.forEach(t),Rro=r(w3e," (LUKE model)"),w3e.forEach(t),Pro=i(S),ls=n(S,"LI",{});var Zx=s(ls);xte=n(Zx,"STRONG",{});var cWr=s(xte);Bro=r(cWr,"lxmert"),cWr.forEach(t),Iro=r(Zx," \u2014 "),JR=n(Zx,"A",{href:!0});var fWr=s(JR);qro=r(fWr,"LxmertTokenizer"),fWr.forEach(t),Nro=r(Zx," or "),YR=n(Zx,"A",{href:!0});var mWr=s(YR);jro=r(mWr,"LxmertTokenizerFast"),mWr.forEach(t),Dro=r(Zx," (LXMERT model)"),Zx.forEach(t),Gro=i(S),Pg=n(S,"LI",{});var A3e=s(Pg);$te=n(A3e,"STRONG",{});var gWr=s($te);Oro=r(gWr,"m2m_100"),gWr.forEach(t),Vro=r(A3e," \u2014 "),KR=n(A3e,"A",{href:!0});var hWr=s(KR);Xro=r(hWr,"M2M100Tokenizer"),hWr.forEach(t),zro=r(A3e," (M2M100 model)"),A3e.forEach(t),Wro=i(S),Bg=n(S,"LI",{});var y3e=s(Bg);kte=n(y3e,"STRONG",{});var pWr=s(kte);Qro=r(pWr,"marian"),pWr.forEach(t),Hro=r(y3e," \u2014 "),ZR=n(y3e,"A",{href:!0});var _Wr=s(ZR);Uro=r(_Wr,"MarianTokenizer"),_Wr.forEach(t),Jro=r(y3e," (Marian model)"),y3e.forEach(t),Yro=i(S),is=n(S,"LI",{});var e$=s(is);Ste=n(e$,"STRONG",{});var uWr=s(Ste);Kro=r(uWr,"mbart"),uWr.forEach(t),Zro=r(e$," \u2014 "),eP=n(e$,"A",{href:!0});var bWr=s(eP);eto=r(bWr,"MBartTokenizer"),bWr.forEach(t),oto=r(e$," or "),oP=n(e$,"A",{href:!0});var vWr=s(oP);rto=r(vWr,"MBartTokenizerFast"),vWr.forEach(t),tto=r(e$," (mBART model)"),e$.forEach(t),ato=i(S),ds=n(S,"LI",{});var o$=s(ds);Rte=n(o$,"STRONG",{});var FWr=s(Rte);nto=r(FWr,"mbart50"),FWr.forEach(t),sto=r(o$," \u2014 "),rP=n(o$,"A",{href:!0});var TWr=s(rP);lto=r(TWr,"MBart50Tokenizer"),TWr.forEach(t),ito=r(o$," or "),tP=n(o$,"A",{href:!0});var MWr=s(tP);dto=r(MWr,"MBart50TokenizerFast"),MWr.forEach(t),cto=r(o$," (mBART-50 model)"),o$.forEach(t),fto=i(S),cs=n(S,"LI",{});var r$=s(cs);Pte=n(r$,"STRONG",{});var EWr=s(Pte);mto=r(EWr,"megatron-bert"),EWr.forEach(t),gto=r(r$," \u2014 "),aP=n(r$,"A",{href:!0});var CWr=s(aP);hto=r(CWr,"BertTokenizer"),CWr.forEach(t),pto=r(r$," or "),nP=n(r$,"A",{href:!0});var wWr=s(nP);_to=r(wWr,"BertTokenizerFast"),wWr.forEach(t),uto=r(r$," (MegatronBert model)"),r$.forEach(t),bto=i(S),Ig=n(S,"LI",{});var L3e=s(Ig);Bte=n(L3e,"STRONG",{});var AWr=s(Bte);vto=r(AWr,"mluke"),AWr.forEach(t),Fto=r(L3e," \u2014 "),sP=n(L3e,"A",{href:!0});var yWr=s(sP);Tto=r(yWr,"MLukeTokenizer"),yWr.forEach(t),Mto=r(L3e," (mLUKE model)"),L3e.forEach(t),Eto=i(S),fs=n(S,"LI",{});var t$=s(fs);Ite=n(t$,"STRONG",{});var LWr=s(Ite);Cto=r(LWr,"mobilebert"),LWr.forEach(t),wto=r(t$," \u2014 "),lP=n(t$,"A",{href:!0});var xWr=s(lP);Ato=r(xWr,"MobileBertTokenizer"),xWr.forEach(t),yto=r(t$," or "),iP=n(t$,"A",{href:!0});var $Wr=s(iP);Lto=r($Wr,"MobileBertTokenizerFast"),$Wr.forEach(t),xto=r(t$," (MobileBERT model)"),t$.forEach(t),$to=i(S),ms=n(S,"LI",{});var a$=s(ms);qte=n(a$,"STRONG",{});var kWr=s(qte);kto=r(kWr,"mpnet"),kWr.forEach(t),Sto=r(a$," \u2014 "),dP=n(a$,"A",{href:!0});var SWr=s(dP);Rto=r(SWr,"MPNetTokenizer"),SWr.forEach(t),Pto=r(a$," or "),cP=n(a$,"A",{href:!0});var RWr=s(cP);Bto=r(RWr,"MPNetTokenizerFast"),RWr.forEach(t),Ito=r(a$," (MPNet model)"),a$.forEach(t),qto=i(S),gs=n(S,"LI",{});var n$=s(gs);Nte=n(n$,"STRONG",{});var PWr=s(Nte);Nto=r(PWr,"mt5"),PWr.forEach(t),jto=r(n$," \u2014 "),fP=n(n$,"A",{href:!0});var BWr=s(fP);Dto=r(BWr,"MT5Tokenizer"),BWr.forEach(t),Gto=r(n$," or "),mP=n(n$,"A",{href:!0});var IWr=s(mP);Oto=r(IWr,"MT5TokenizerFast"),IWr.forEach(t),Vto=r(n$," (mT5 model)"),n$.forEach(t),Xto=i(S),hs=n(S,"LI",{});var s$=s(hs);jte=n(s$,"STRONG",{});var qWr=s(jte);zto=r(qWr,"nystromformer"),qWr.forEach(t),Wto=r(s$," \u2014 "),gP=n(s$,"A",{href:!0});var NWr=s(gP);Qto=r(NWr,"AlbertTokenizer"),NWr.forEach(t),Hto=r(s$," or "),hP=n(s$,"A",{href:!0});var jWr=s(hP);Uto=r(jWr,"AlbertTokenizerFast"),jWr.forEach(t),Jto=r(s$," (Nystromformer model)"),s$.forEach(t),Yto=i(S),ps=n(S,"LI",{});var l$=s(ps);Dte=n(l$,"STRONG",{});var DWr=s(Dte);Kto=r(DWr,"openai-gpt"),DWr.forEach(t),Zto=r(l$," \u2014 "),pP=n(l$,"A",{href:!0});var GWr=s(pP);eao=r(GWr,"OpenAIGPTTokenizer"),GWr.forEach(t),oao=r(l$," or "),_P=n(l$,"A",{href:!0});var OWr=s(_P);rao=r(OWr,"OpenAIGPTTokenizerFast"),OWr.forEach(t),tao=r(l$," (OpenAI GPT model)"),l$.forEach(t),aao=i(S),qg=n(S,"LI",{});var x3e=s(qg);Gte=n(x3e,"STRONG",{});var VWr=s(Gte);nao=r(VWr,"opt"),VWr.forEach(t),sao=r(x3e," \u2014 "),uP=n(x3e,"A",{href:!0});var XWr=s(uP);lao=r(XWr,"GPT2Tokenizer"),XWr.forEach(t),iao=r(x3e," (OPT model)"),x3e.forEach(t),dao=i(S),_s=n(S,"LI",{});var i$=s(_s);Ote=n(i$,"STRONG",{});var zWr=s(Ote);cao=r(zWr,"pegasus"),zWr.forEach(t),fao=r(i$," \u2014 "),bP=n(i$,"A",{href:!0});var WWr=s(bP);mao=r(WWr,"PegasusTokenizer"),WWr.forEach(t),gao=r(i$," or "),vP=n(i$,"A",{href:!0});var QWr=s(vP);hao=r(QWr,"PegasusTokenizerFast"),QWr.forEach(t),pao=r(i$," (Pegasus model)"),i$.forEach(t),_ao=i(S),Ng=n(S,"LI",{});var $3e=s(Ng);Vte=n($3e,"STRONG",{});var HWr=s(Vte);uao=r(HWr,"perceiver"),HWr.forEach(t),bao=r($3e," \u2014 "),FP=n($3e,"A",{href:!0});var UWr=s(FP);vao=r(UWr,"PerceiverTokenizer"),UWr.forEach(t),Fao=r($3e," (Perceiver model)"),$3e.forEach(t),Tao=i(S),jg=n(S,"LI",{});var k3e=s(jg);Xte=n(k3e,"STRONG",{});var JWr=s(Xte);Mao=r(JWr,"phobert"),JWr.forEach(t),Eao=r(k3e," \u2014 "),TP=n(k3e,"A",{href:!0});var YWr=s(TP);Cao=r(YWr,"PhobertTokenizer"),YWr.forEach(t),wao=r(k3e," (PhoBERT model)"),k3e.forEach(t),Aao=i(S),Dg=n(S,"LI",{});var S3e=s(Dg);zte=n(S3e,"STRONG",{});var KWr=s(zte);yao=r(KWr,"plbart"),KWr.forEach(t),Lao=r(S3e," \u2014 "),MP=n(S3e,"A",{href:!0});var ZWr=s(MP);xao=r(ZWr,"PLBartTokenizer"),ZWr.forEach(t),$ao=r(S3e," (PLBart model)"),S3e.forEach(t),kao=i(S),Gg=n(S,"LI",{});var R3e=s(Gg);Wte=n(R3e,"STRONG",{});var eQr=s(Wte);Sao=r(eQr,"prophetnet"),eQr.forEach(t),Rao=r(R3e," \u2014 "),EP=n(R3e,"A",{href:!0});var oQr=s(EP);Pao=r(oQr,"ProphetNetTokenizer"),oQr.forEach(t),Bao=r(R3e," (ProphetNet model)"),R3e.forEach(t),Iao=i(S),us=n(S,"LI",{});var d$=s(us);Qte=n(d$,"STRONG",{});var rQr=s(Qte);qao=r(rQr,"qdqbert"),rQr.forEach(t),Nao=r(d$," \u2014 "),CP=n(d$,"A",{href:!0});var tQr=s(CP);jao=r(tQr,"BertTokenizer"),tQr.forEach(t),Dao=r(d$," or "),wP=n(d$,"A",{href:!0});var aQr=s(wP);Gao=r(aQr,"BertTokenizerFast"),aQr.forEach(t),Oao=r(d$," (QDQBert model)"),d$.forEach(t),Vao=i(S),Og=n(S,"LI",{});var P3e=s(Og);Hte=n(P3e,"STRONG",{});var nQr=s(Hte);Xao=r(nQr,"rag"),nQr.forEach(t),zao=r(P3e," \u2014 "),AP=n(P3e,"A",{href:!0});var sQr=s(AP);Wao=r(sQr,"RagTokenizer"),sQr.forEach(t),Qao=r(P3e," (RAG model)"),P3e.forEach(t),Hao=i(S),bs=n(S,"LI",{});var c$=s(bs);Ute=n(c$,"STRONG",{});var lQr=s(Ute);Uao=r(lQr,"realm"),lQr.forEach(t),Jao=r(c$," \u2014 "),yP=n(c$,"A",{href:!0});var iQr=s(yP);Yao=r(iQr,"RealmTokenizer"),iQr.forEach(t),Kao=r(c$," or "),LP=n(c$,"A",{href:!0});var dQr=s(LP);Zao=r(dQr,"RealmTokenizerFast"),dQr.forEach(t),eno=r(c$," (Realm model)"),c$.forEach(t),ono=i(S),vs=n(S,"LI",{});var f$=s(vs);Jte=n(f$,"STRONG",{});var cQr=s(Jte);rno=r(cQr,"reformer"),cQr.forEach(t),tno=r(f$," \u2014 "),xP=n(f$,"A",{href:!0});var fQr=s(xP);ano=r(fQr,"ReformerTokenizer"),fQr.forEach(t),nno=r(f$," or "),$P=n(f$,"A",{href:!0});var mQr=s($P);sno=r(mQr,"ReformerTokenizerFast"),mQr.forEach(t),lno=r(f$," (Reformer model)"),f$.forEach(t),ino=i(S),Fs=n(S,"LI",{});var m$=s(Fs);Yte=n(m$,"STRONG",{});var gQr=s(Yte);dno=r(gQr,"rembert"),gQr.forEach(t),cno=r(m$," \u2014 "),kP=n(m$,"A",{href:!0});var hQr=s(kP);fno=r(hQr,"RemBertTokenizer"),hQr.forEach(t),mno=r(m$," or "),SP=n(m$,"A",{href:!0});var pQr=s(SP);gno=r(pQr,"RemBertTokenizerFast"),pQr.forEach(t),hno=r(m$," (RemBERT model)"),m$.forEach(t),pno=i(S),Ts=n(S,"LI",{});var g$=s(Ts);Kte=n(g$,"STRONG",{});var _Qr=s(Kte);_no=r(_Qr,"retribert"),_Qr.forEach(t),uno=r(g$," \u2014 "),RP=n(g$,"A",{href:!0});var uQr=s(RP);bno=r(uQr,"RetriBertTokenizer"),uQr.forEach(t),vno=r(g$," or "),PP=n(g$,"A",{href:!0});var bQr=s(PP);Fno=r(bQr,"RetriBertTokenizerFast"),bQr.forEach(t),Tno=r(g$," (RetriBERT model)"),g$.forEach(t),Mno=i(S),Ms=n(S,"LI",{});var h$=s(Ms);Zte=n(h$,"STRONG",{});var vQr=s(Zte);Eno=r(vQr,"roberta"),vQr.forEach(t),Cno=r(h$," \u2014 "),BP=n(h$,"A",{href:!0});var FQr=s(BP);wno=r(FQr,"RobertaTokenizer"),FQr.forEach(t),Ano=r(h$," or "),IP=n(h$,"A",{href:!0});var TQr=s(IP);yno=r(TQr,"RobertaTokenizerFast"),TQr.forEach(t),Lno=r(h$," (RoBERTa model)"),h$.forEach(t),xno=i(S),Es=n(S,"LI",{});var p$=s(Es);eae=n(p$,"STRONG",{});var MQr=s(eae);$no=r(MQr,"roformer"),MQr.forEach(t),kno=r(p$," \u2014 "),qP=n(p$,"A",{href:!0});var EQr=s(qP);Sno=r(EQr,"RoFormerTokenizer"),EQr.forEach(t),Rno=r(p$," or "),NP=n(p$,"A",{href:!0});var CQr=s(NP);Pno=r(CQr,"RoFormerTokenizerFast"),CQr.forEach(t),Bno=r(p$," (RoFormer model)"),p$.forEach(t),Ino=i(S),Vg=n(S,"LI",{});var B3e=s(Vg);oae=n(B3e,"STRONG",{});var wQr=s(oae);qno=r(wQr,"speech_to_text"),wQr.forEach(t),Nno=r(B3e," \u2014 "),jP=n(B3e,"A",{href:!0});var AQr=s(jP);jno=r(AQr,"Speech2TextTokenizer"),AQr.forEach(t),Dno=r(B3e," (Speech2Text model)"),B3e.forEach(t),Gno=i(S),Xg=n(S,"LI",{});var I3e=s(Xg);rae=n(I3e,"STRONG",{});var yQr=s(rae);Ono=r(yQr,"speech_to_text_2"),yQr.forEach(t),Vno=r(I3e," \u2014 "),DP=n(I3e,"A",{href:!0});var LQr=s(DP);Xno=r(LQr,"Speech2Text2Tokenizer"),LQr.forEach(t),zno=r(I3e," (Speech2Text2 model)"),I3e.forEach(t),Wno=i(S),Cs=n(S,"LI",{});var _$=s(Cs);tae=n(_$,"STRONG",{});var xQr=s(tae);Qno=r(xQr,"splinter"),xQr.forEach(t),Hno=r(_$," \u2014 "),GP=n(_$,"A",{href:!0});var $Qr=s(GP);Uno=r($Qr,"SplinterTokenizer"),$Qr.forEach(t),Jno=r(_$," or "),OP=n(_$,"A",{href:!0});var kQr=s(OP);Yno=r(kQr,"SplinterTokenizerFast"),kQr.forEach(t),Kno=r(_$," (Splinter model)"),_$.forEach(t),Zno=i(S),ws=n(S,"LI",{});var u$=s(ws);aae=n(u$,"STRONG",{});var SQr=s(aae);eso=r(SQr,"squeezebert"),SQr.forEach(t),oso=r(u$," \u2014 "),VP=n(u$,"A",{href:!0});var RQr=s(VP);rso=r(RQr,"SqueezeBertTokenizer"),RQr.forEach(t),tso=r(u$," or "),XP=n(u$,"A",{href:!0});var PQr=s(XP);aso=r(PQr,"SqueezeBertTokenizerFast"),PQr.forEach(t),nso=r(u$," (SqueezeBERT model)"),u$.forEach(t),sso=i(S),As=n(S,"LI",{});var b$=s(As);nae=n(b$,"STRONG",{});var BQr=s(nae);lso=r(BQr,"t5"),BQr.forEach(t),iso=r(b$," \u2014 "),zP=n(b$,"A",{href:!0});var IQr=s(zP);dso=r(IQr,"T5Tokenizer"),IQr.forEach(t),cso=r(b$," or "),WP=n(b$,"A",{href:!0});var qQr=s(WP);fso=r(qQr,"T5TokenizerFast"),qQr.forEach(t),mso=r(b$," (T5 model)"),b$.forEach(t),gso=i(S),zg=n(S,"LI",{});var q3e=s(zg);sae=n(q3e,"STRONG",{});var NQr=s(sae);hso=r(NQr,"tapas"),NQr.forEach(t),pso=r(q3e," \u2014 "),QP=n(q3e,"A",{href:!0});var jQr=s(QP);_so=r(jQr,"TapasTokenizer"),jQr.forEach(t),uso=r(q3e," (TAPAS model)"),q3e.forEach(t),bso=i(S),Wg=n(S,"LI",{});var N3e=s(Wg);lae=n(N3e,"STRONG",{});var DQr=s(lae);vso=r(DQr,"tapex"),DQr.forEach(t),Fso=r(N3e," \u2014 "),HP=n(N3e,"A",{href:!0});var GQr=s(HP);Tso=r(GQr,"TapexTokenizer"),GQr.forEach(t),Mso=r(N3e," (TAPEX model)"),N3e.forEach(t),Eso=i(S),Qg=n(S,"LI",{});var j3e=s(Qg);iae=n(j3e,"STRONG",{});var OQr=s(iae);Cso=r(OQr,"transfo-xl"),OQr.forEach(t),wso=r(j3e," \u2014 "),UP=n(j3e,"A",{href:!0});var VQr=s(UP);Aso=r(VQr,"TransfoXLTokenizer"),VQr.forEach(t),yso=r(j3e," (Transformer-XL model)"),j3e.forEach(t),Lso=i(S),ys=n(S,"LI",{});var v$=s(ys);dae=n(v$,"STRONG",{});var XQr=s(dae);xso=r(XQr,"visual_bert"),XQr.forEach(t),$so=r(v$," \u2014 "),JP=n(v$,"A",{href:!0});var zQr=s(JP);kso=r(zQr,"BertTokenizer"),zQr.forEach(t),Sso=r(v$," or "),YP=n(v$,"A",{href:!0});var WQr=s(YP);Rso=r(WQr,"BertTokenizerFast"),WQr.forEach(t),Pso=r(v$," (VisualBert model)"),v$.forEach(t),Bso=i(S),Hg=n(S,"LI",{});var D3e=s(Hg);cae=n(D3e,"STRONG",{});var QQr=s(cae);Iso=r(QQr,"wav2vec2"),QQr.forEach(t),qso=r(D3e," \u2014 "),KP=n(D3e,"A",{href:!0});var HQr=s(KP);Nso=r(HQr,"Wav2Vec2CTCTokenizer"),HQr.forEach(t),jso=r(D3e," (Wav2Vec2 model)"),D3e.forEach(t),Dso=i(S),Ug=n(S,"LI",{});var G3e=s(Ug);fae=n(G3e,"STRONG",{});var UQr=s(fae);Gso=r(UQr,"wav2vec2-conformer"),UQr.forEach(t),Oso=r(G3e," \u2014 "),ZP=n(G3e,"A",{href:!0});var JQr=s(ZP);Vso=r(JQr,"Wav2Vec2CTCTokenizer"),JQr.forEach(t),Xso=r(G3e," (Wav2Vec2-Conformer model)"),G3e.forEach(t),zso=i(S),Jg=n(S,"LI",{});var O3e=s(Jg);mae=n(O3e,"STRONG",{});var YQr=s(mae);Wso=r(YQr,"wav2vec2_phoneme"),YQr.forEach(t),Qso=r(O3e," \u2014 "),eB=n(O3e,"A",{href:!0});var KQr=s(eB);Hso=r(KQr,"Wav2Vec2PhonemeCTCTokenizer"),KQr.forEach(t),Uso=r(O3e," (Wav2Vec2Phoneme model)"),O3e.forEach(t),Jso=i(S),Ls=n(S,"LI",{});var F$=s(Ls);gae=n(F$,"STRONG",{});var ZQr=s(gae);Yso=r(ZQr,"xglm"),ZQr.forEach(t),Kso=r(F$," \u2014 "),oB=n(F$,"A",{href:!0});var eHr=s(oB);Zso=r(eHr,"XGLMTokenizer"),eHr.forEach(t),elo=r(F$," or "),rB=n(F$,"A",{href:!0});var oHr=s(rB);olo=r(oHr,"XGLMTokenizerFast"),oHr.forEach(t),rlo=r(F$," (XGLM model)"),F$.forEach(t),tlo=i(S),Yg=n(S,"LI",{});var V3e=s(Yg);hae=n(V3e,"STRONG",{});var rHr=s(hae);alo=r(rHr,"xlm"),rHr.forEach(t),nlo=r(V3e," \u2014 "),tB=n(V3e,"A",{href:!0});var tHr=s(tB);slo=r(tHr,"XLMTokenizer"),tHr.forEach(t),llo=r(V3e," (XLM model)"),V3e.forEach(t),ilo=i(S),Kg=n(S,"LI",{});var X3e=s(Kg);pae=n(X3e,"STRONG",{});var aHr=s(pae);dlo=r(aHr,"xlm-prophetnet"),aHr.forEach(t),clo=r(X3e," \u2014 "),aB=n(X3e,"A",{href:!0});var nHr=s(aB);flo=r(nHr,"XLMProphetNetTokenizer"),nHr.forEach(t),mlo=r(X3e," (XLMProphetNet model)"),X3e.forEach(t),glo=i(S),xs=n(S,"LI",{});var T$=s(xs);_ae=n(T$,"STRONG",{});var sHr=s(_ae);hlo=r(sHr,"xlm-roberta"),sHr.forEach(t),plo=r(T$," \u2014 "),nB=n(T$,"A",{href:!0});var lHr=s(nB);_lo=r(lHr,"XLMRobertaTokenizer"),lHr.forEach(t),ulo=r(T$," or "),sB=n(T$,"A",{href:!0});var iHr=s(sB);blo=r(iHr,"XLMRobertaTokenizerFast"),iHr.forEach(t),vlo=r(T$," (XLM-RoBERTa model)"),T$.forEach(t),Flo=i(S),$s=n(S,"LI",{});var M$=s($s);uae=n(M$,"STRONG",{});var dHr=s(uae);Tlo=r(dHr,"xlm-roberta-xl"),dHr.forEach(t),Mlo=r(M$," \u2014 "),lB=n(M$,"A",{href:!0});var cHr=s(lB);Elo=r(cHr,"RobertaTokenizer"),cHr.forEach(t),Clo=r(M$," or "),iB=n(M$,"A",{href:!0});var fHr=s(iB);wlo=r(fHr,"RobertaTokenizerFast"),fHr.forEach(t),Alo=r(M$," (XLM-RoBERTa-XL model)"),M$.forEach(t),ylo=i(S),ks=n(S,"LI",{});var E$=s(ks);bae=n(E$,"STRONG",{});var mHr=s(bae);Llo=r(mHr,"xlnet"),mHr.forEach(t),xlo=r(E$," \u2014 "),dB=n(E$,"A",{href:!0});var gHr=s(dB);$lo=r(gHr,"XLNetTokenizer"),gHr.forEach(t),klo=r(E$," or "),cB=n(E$,"A",{href:!0});var hHr=s(cB);Slo=r(hHr,"XLNetTokenizerFast"),hHr.forEach(t),Rlo=r(E$," (XLNet model)"),E$.forEach(t),Plo=i(S),Ss=n(S,"LI",{});var C$=s(Ss);vae=n(C$,"STRONG",{});var pHr=s(vae);Blo=r(pHr,"yoso"),pHr.forEach(t),Ilo=r(C$," \u2014 "),fB=n(C$,"A",{href:!0});var _Hr=s(fB);qlo=r(_Hr,"AlbertTokenizer"),_Hr.forEach(t),Nlo=r(C$," or "),mB=n(C$,"A",{href:!0});var uHr=s(mB);jlo=r(uHr,"AlbertTokenizerFast"),uHr.forEach(t),Dlo=r(C$," (YOSO model)"),C$.forEach(t),S.forEach(t),Glo=i(qs),T(Zg.$$.fragment,qs),qs.forEach(t),Olo=i(Is),eh=n(Is,"DIV",{class:!0});var UNe=s(eh);T(CA.$$.fragment,UNe),Vlo=i(UNe),Fae=n(UNe,"P",{});var bHr=s(Fae);Xlo=r(bHr,"Register a new tokenizer in this mapping."),bHr.forEach(t),UNe.forEach(t),Is.forEach(t),JIe=i(f),Ti=n(f,"H2",{class:!0});var JNe=s(Ti);oh=n(JNe,"A",{id:!0,class:!0,href:!0});var vHr=s(oh);Tae=n(vHr,"SPAN",{});var FHr=s(Tae);T(wA.$$.fragment,FHr),FHr.forEach(t),vHr.forEach(t),zlo=i(JNe),Mae=n(JNe,"SPAN",{});var THr=s(Mae);Wlo=r(THr,"AutoFeatureExtractor"),THr.forEach(t),JNe.forEach(t),YIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(AA.$$.fragment,Ns),Qlo=i(Ns),yA=n(Ns,"P",{});var YNe=s(yA);Hlo=r(YNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=n(YNe,"A",{href:!0});var MHr=s(gB);Ulo=r(MHr,"AutoFeatureExtractor.from_pretrained()"),MHr.forEach(t),Jlo=r(YNe," class method."),YNe.forEach(t),Ylo=i(Ns),LA=n(Ns,"P",{});var KNe=s(LA);Klo=r(KNe,"This class cannot be instantiated directly using "),Eae=n(KNe,"CODE",{});var EHr=s(Eae);Zlo=r(EHr,"__init__()"),EHr.forEach(t),eio=r(KNe," (throws an error)."),KNe.forEach(t),oio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(xA.$$.fragment,Zt),rio=i(Zt),Cae=n(Zt,"P",{});var CHr=s(Cae);tio=r(CHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),CHr.forEach(t),aio=i(Zt),ya=n(Zt,"P",{});var hw=s(ya);nio=r(hw,"The feature extractor class to instantiate is selected based on the "),wae=n(hw,"CODE",{});var wHr=s(wae);sio=r(wHr,"model_type"),wHr.forEach(t),lio=r(hw,` property of the config object
(either passed as an argument or loaded from `),Aae=n(hw,"CODE",{});var AHr=s(Aae);iio=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),dio=r(hw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),yae=n(hw,"CODE",{});var yHr=s(yae);cio=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),fio=r(hw,":"),hw.forEach(t),mio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);rh=n(re,"LI",{});var z3e=s(rh);Lae=n(z3e,"STRONG",{});var LHr=s(Lae);gio=r(LHr,"beit"),LHr.forEach(t),hio=r(z3e," \u2014 "),hB=n(z3e,"A",{href:!0});var xHr=s(hB);pio=r(xHr,"BeitFeatureExtractor"),xHr.forEach(t),_io=r(z3e," (BEiT model)"),z3e.forEach(t),uio=i(re),th=n(re,"LI",{});var W3e=s(th);xae=n(W3e,"STRONG",{});var $Hr=s(xae);bio=r($Hr,"clip"),$Hr.forEach(t),vio=r(W3e," \u2014 "),pB=n(W3e,"A",{href:!0});var kHr=s(pB);Fio=r(kHr,"CLIPFeatureExtractor"),kHr.forEach(t),Tio=r(W3e," (CLIP model)"),W3e.forEach(t),Mio=i(re),ah=n(re,"LI",{});var Q3e=s(ah);$ae=n(Q3e,"STRONG",{});var SHr=s($ae);Eio=r(SHr,"convnext"),SHr.forEach(t),Cio=r(Q3e," \u2014 "),_B=n(Q3e,"A",{href:!0});var RHr=s(_B);wio=r(RHr,"ConvNextFeatureExtractor"),RHr.forEach(t),Aio=r(Q3e," (ConvNext model)"),Q3e.forEach(t),yio=i(re),nh=n(re,"LI",{});var H3e=s(nh);kae=n(H3e,"STRONG",{});var PHr=s(kae);Lio=r(PHr,"cvt"),PHr.forEach(t),xio=r(H3e," \u2014 "),uB=n(H3e,"A",{href:!0});var BHr=s(uB);$io=r(BHr,"ConvNextFeatureExtractor"),BHr.forEach(t),kio=r(H3e," (CvT model)"),H3e.forEach(t),Sio=i(re),sh=n(re,"LI",{});var U3e=s(sh);Sae=n(U3e,"STRONG",{});var IHr=s(Sae);Rio=r(IHr,"data2vec-audio"),IHr.forEach(t),Pio=r(U3e," \u2014 "),bB=n(U3e,"A",{href:!0});var qHr=s(bB);Bio=r(qHr,"Wav2Vec2FeatureExtractor"),qHr.forEach(t),Iio=r(U3e," (Data2VecAudio model)"),U3e.forEach(t),qio=i(re),lh=n(re,"LI",{});var J3e=s(lh);Rae=n(J3e,"STRONG",{});var NHr=s(Rae);Nio=r(NHr,"data2vec-vision"),NHr.forEach(t),jio=r(J3e," \u2014 "),vB=n(J3e,"A",{href:!0});var jHr=s(vB);Dio=r(jHr,"BeitFeatureExtractor"),jHr.forEach(t),Gio=r(J3e," (Data2VecVision model)"),J3e.forEach(t),Oio=i(re),ih=n(re,"LI",{});var Y3e=s(ih);Pae=n(Y3e,"STRONG",{});var DHr=s(Pae);Vio=r(DHr,"deit"),DHr.forEach(t),Xio=r(Y3e," \u2014 "),FB=n(Y3e,"A",{href:!0});var GHr=s(FB);zio=r(GHr,"DeiTFeatureExtractor"),GHr.forEach(t),Wio=r(Y3e," (DeiT model)"),Y3e.forEach(t),Qio=i(re),dh=n(re,"LI",{});var K3e=s(dh);Bae=n(K3e,"STRONG",{});var OHr=s(Bae);Hio=r(OHr,"detr"),OHr.forEach(t),Uio=r(K3e," \u2014 "),TB=n(K3e,"A",{href:!0});var VHr=s(TB);Jio=r(VHr,"DetrFeatureExtractor"),VHr.forEach(t),Yio=r(K3e," (DETR model)"),K3e.forEach(t),Kio=i(re),ch=n(re,"LI",{});var Z3e=s(ch);Iae=n(Z3e,"STRONG",{});var XHr=s(Iae);Zio=r(XHr,"dpt"),XHr.forEach(t),edo=r(Z3e," \u2014 "),MB=n(Z3e,"A",{href:!0});var zHr=s(MB);odo=r(zHr,"DPTFeatureExtractor"),zHr.forEach(t),rdo=r(Z3e," (DPT model)"),Z3e.forEach(t),tdo=i(re),fh=n(re,"LI",{});var ewe=s(fh);qae=n(ewe,"STRONG",{});var WHr=s(qae);ado=r(WHr,"flava"),WHr.forEach(t),ndo=r(ewe," \u2014 "),EB=n(ewe,"A",{href:!0});var QHr=s(EB);sdo=r(QHr,"FlavaFeatureExtractor"),QHr.forEach(t),ldo=r(ewe," (Flava model)"),ewe.forEach(t),ido=i(re),mh=n(re,"LI",{});var owe=s(mh);Nae=n(owe,"STRONG",{});var HHr=s(Nae);ddo=r(HHr,"glpn"),HHr.forEach(t),cdo=r(owe," \u2014 "),CB=n(owe,"A",{href:!0});var UHr=s(CB);fdo=r(UHr,"GLPNFeatureExtractor"),UHr.forEach(t),mdo=r(owe," (GLPN model)"),owe.forEach(t),gdo=i(re),gh=n(re,"LI",{});var rwe=s(gh);jae=n(rwe,"STRONG",{});var JHr=s(jae);hdo=r(JHr,"hubert"),JHr.forEach(t),pdo=r(rwe," \u2014 "),wB=n(rwe,"A",{href:!0});var YHr=s(wB);_do=r(YHr,"Wav2Vec2FeatureExtractor"),YHr.forEach(t),udo=r(rwe," (Hubert model)"),rwe.forEach(t),bdo=i(re),hh=n(re,"LI",{});var twe=s(hh);Dae=n(twe,"STRONG",{});var KHr=s(Dae);vdo=r(KHr,"layoutlmv2"),KHr.forEach(t),Fdo=r(twe," \u2014 "),AB=n(twe,"A",{href:!0});var ZHr=s(AB);Tdo=r(ZHr,"LayoutLMv2FeatureExtractor"),ZHr.forEach(t),Mdo=r(twe," (LayoutLMv2 model)"),twe.forEach(t),Edo=i(re),ph=n(re,"LI",{});var awe=s(ph);Gae=n(awe,"STRONG",{});var eUr=s(Gae);Cdo=r(eUr,"maskformer"),eUr.forEach(t),wdo=r(awe," \u2014 "),yB=n(awe,"A",{href:!0});var oUr=s(yB);Ado=r(oUr,"MaskFormerFeatureExtractor"),oUr.forEach(t),ydo=r(awe," (MaskFormer model)"),awe.forEach(t),Ldo=i(re),_h=n(re,"LI",{});var nwe=s(_h);Oae=n(nwe,"STRONG",{});var rUr=s(Oae);xdo=r(rUr,"perceiver"),rUr.forEach(t),$do=r(nwe," \u2014 "),LB=n(nwe,"A",{href:!0});var tUr=s(LB);kdo=r(tUr,"PerceiverFeatureExtractor"),tUr.forEach(t),Sdo=r(nwe," (Perceiver model)"),nwe.forEach(t),Rdo=i(re),uh=n(re,"LI",{});var swe=s(uh);Vae=n(swe,"STRONG",{});var aUr=s(Vae);Pdo=r(aUr,"poolformer"),aUr.forEach(t),Bdo=r(swe," \u2014 "),xB=n(swe,"A",{href:!0});var nUr=s(xB);Ido=r(nUr,"PoolFormerFeatureExtractor"),nUr.forEach(t),qdo=r(swe," (PoolFormer model)"),swe.forEach(t),Ndo=i(re),bh=n(re,"LI",{});var lwe=s(bh);Xae=n(lwe,"STRONG",{});var sUr=s(Xae);jdo=r(sUr,"regnet"),sUr.forEach(t),Ddo=r(lwe," \u2014 "),$B=n(lwe,"A",{href:!0});var lUr=s($B);Gdo=r(lUr,"ConvNextFeatureExtractor"),lUr.forEach(t),Odo=r(lwe," (RegNet model)"),lwe.forEach(t),Vdo=i(re),vh=n(re,"LI",{});var iwe=s(vh);zae=n(iwe,"STRONG",{});var iUr=s(zae);Xdo=r(iUr,"resnet"),iUr.forEach(t),zdo=r(iwe," \u2014 "),kB=n(iwe,"A",{href:!0});var dUr=s(kB);Wdo=r(dUr,"ConvNextFeatureExtractor"),dUr.forEach(t),Qdo=r(iwe," (ResNet model)"),iwe.forEach(t),Hdo=i(re),Fh=n(re,"LI",{});var dwe=s(Fh);Wae=n(dwe,"STRONG",{});var cUr=s(Wae);Udo=r(cUr,"segformer"),cUr.forEach(t),Jdo=r(dwe," \u2014 "),SB=n(dwe,"A",{href:!0});var fUr=s(SB);Ydo=r(fUr,"SegformerFeatureExtractor"),fUr.forEach(t),Kdo=r(dwe," (SegFormer model)"),dwe.forEach(t),Zdo=i(re),Th=n(re,"LI",{});var cwe=s(Th);Qae=n(cwe,"STRONG",{});var mUr=s(Qae);eco=r(mUr,"speech_to_text"),mUr.forEach(t),oco=r(cwe," \u2014 "),RB=n(cwe,"A",{href:!0});var gUr=s(RB);rco=r(gUr,"Speech2TextFeatureExtractor"),gUr.forEach(t),tco=r(cwe," (Speech2Text model)"),cwe.forEach(t),aco=i(re),Mh=n(re,"LI",{});var fwe=s(Mh);Hae=n(fwe,"STRONG",{});var hUr=s(Hae);nco=r(hUr,"swin"),hUr.forEach(t),sco=r(fwe," \u2014 "),PB=n(fwe,"A",{href:!0});var pUr=s(PB);lco=r(pUr,"ViTFeatureExtractor"),pUr.forEach(t),ico=r(fwe," (Swin model)"),fwe.forEach(t),dco=i(re),Eh=n(re,"LI",{});var mwe=s(Eh);Uae=n(mwe,"STRONG",{});var _Ur=s(Uae);cco=r(_Ur,"van"),_Ur.forEach(t),fco=r(mwe," \u2014 "),BB=n(mwe,"A",{href:!0});var uUr=s(BB);mco=r(uUr,"ConvNextFeatureExtractor"),uUr.forEach(t),gco=r(mwe," (VAN model)"),mwe.forEach(t),hco=i(re),Ch=n(re,"LI",{});var gwe=s(Ch);Jae=n(gwe,"STRONG",{});var bUr=s(Jae);pco=r(bUr,"vit"),bUr.forEach(t),_co=r(gwe," \u2014 "),IB=n(gwe,"A",{href:!0});var vUr=s(IB);uco=r(vUr,"ViTFeatureExtractor"),vUr.forEach(t),bco=r(gwe," (ViT model)"),gwe.forEach(t),vco=i(re),wh=n(re,"LI",{});var hwe=s(wh);Yae=n(hwe,"STRONG",{});var FUr=s(Yae);Fco=r(FUr,"vit_mae"),FUr.forEach(t),Tco=r(hwe," \u2014 "),qB=n(hwe,"A",{href:!0});var TUr=s(qB);Mco=r(TUr,"ViTFeatureExtractor"),TUr.forEach(t),Eco=r(hwe," (ViTMAE model)"),hwe.forEach(t),Cco=i(re),Ah=n(re,"LI",{});var pwe=s(Ah);Kae=n(pwe,"STRONG",{});var MUr=s(Kae);wco=r(MUr,"wav2vec2"),MUr.forEach(t),Aco=r(pwe," \u2014 "),NB=n(pwe,"A",{href:!0});var EUr=s(NB);yco=r(EUr,"Wav2Vec2FeatureExtractor"),EUr.forEach(t),Lco=r(pwe," (Wav2Vec2 model)"),pwe.forEach(t),xco=i(re),yh=n(re,"LI",{});var _we=s(yh);Zae=n(_we,"STRONG",{});var CUr=s(Zae);$co=r(CUr,"wav2vec2-conformer"),CUr.forEach(t),kco=r(_we," \u2014 "),jB=n(_we,"A",{href:!0});var wUr=s(jB);Sco=r(wUr,"Wav2Vec2FeatureExtractor"),wUr.forEach(t),Rco=r(_we," (Wav2Vec2-Conformer model)"),_we.forEach(t),Pco=i(re),Lh=n(re,"LI",{});var uwe=s(Lh);ene=n(uwe,"STRONG",{});var AUr=s(ene);Bco=r(AUr,"yolos"),AUr.forEach(t),Ico=r(uwe," \u2014 "),DB=n(uwe,"A",{href:!0});var yUr=s(DB);qco=r(yUr,"YolosFeatureExtractor"),yUr.forEach(t),Nco=r(uwe," (YOLOS model)"),uwe.forEach(t),re.forEach(t),jco=i(Zt),T(xh.$$.fragment,Zt),Dco=i(Zt),T($h.$$.fragment,Zt),Zt.forEach(t),Gco=i(Ns),kh=n(Ns,"DIV",{class:!0});var ZNe=s(kh);T($A.$$.fragment,ZNe),Oco=i(ZNe),one=n(ZNe,"P",{});var LUr=s(one);Vco=r(LUr,"Register a new feature extractor for this class."),LUr.forEach(t),ZNe.forEach(t),Ns.forEach(t),KIe=i(f),Mi=n(f,"H2",{class:!0});var eje=s(Mi);Sh=n(eje,"A",{id:!0,class:!0,href:!0});var xUr=s(Sh);rne=n(xUr,"SPAN",{});var $Ur=s(rne);T(kA.$$.fragment,$Ur),$Ur.forEach(t),xUr.forEach(t),Xco=i(eje),tne=n(eje,"SPAN",{});var kUr=s(tne);zco=r(kUr,"AutoProcessor"),kUr.forEach(t),eje.forEach(t),ZIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(SA.$$.fragment,js),Wco=i(js),RA=n(js,"P",{});var oje=s(RA);Qco=r(oje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=n(oje,"A",{href:!0});var SUr=s(GB);Hco=r(SUr,"AutoProcessor.from_pretrained()"),SUr.forEach(t),Uco=r(oje," class method."),oje.forEach(t),Jco=i(js),PA=n(js,"P",{});var rje=s(PA);Yco=r(rje,"This class cannot be instantiated directly using "),ane=n(rje,"CODE",{});var RUr=s(ane);Kco=r(RUr,"__init__()"),RUr.forEach(t),Zco=r(rje," (throws an error)."),rje.forEach(t),efo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(BA.$$.fragment,ea),ofo=i(ea),nne=n(ea,"P",{});var PUr=s(nne);rfo=r(PUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PUr.forEach(t),tfo=i(ea),Ei=n(ea,"P",{});var PK=s(Ei);afo=r(PK,"The processor class to instantiate is selected based on the "),sne=n(PK,"CODE",{});var BUr=s(sne);nfo=r(BUr,"model_type"),BUr.forEach(t),sfo=r(PK,` property of the config object (either
passed as an argument or loaded from `),lne=n(PK,"CODE",{});var IUr=s(lne);lfo=r(IUr,"pretrained_model_name_or_path"),IUr.forEach(t),ifo=r(PK," if possible):"),PK.forEach(t),dfo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Rh=n(be,"LI",{});var bwe=s(Rh);ine=n(bwe,"STRONG",{});var qUr=s(ine);cfo=r(qUr,"clip"),qUr.forEach(t),ffo=r(bwe," \u2014 "),OB=n(bwe,"A",{href:!0});var NUr=s(OB);mfo=r(NUr,"CLIPProcessor"),NUr.forEach(t),gfo=r(bwe," (CLIP model)"),bwe.forEach(t),hfo=i(be),Ph=n(be,"LI",{});var vwe=s(Ph);dne=n(vwe,"STRONG",{});var jUr=s(dne);pfo=r(jUr,"flava"),jUr.forEach(t),_fo=r(vwe," \u2014 "),cne=n(vwe,"CODE",{});var DUr=s(cne);ufo=r(DUr,"FLAVAProcessor"),DUr.forEach(t),bfo=r(vwe," (Flava model)"),vwe.forEach(t),vfo=i(be),Bh=n(be,"LI",{});var Fwe=s(Bh);fne=n(Fwe,"STRONG",{});var GUr=s(fne);Ffo=r(GUr,"layoutlmv2"),GUr.forEach(t),Tfo=r(Fwe," \u2014 "),VB=n(Fwe,"A",{href:!0});var OUr=s(VB);Mfo=r(OUr,"LayoutLMv2Processor"),OUr.forEach(t),Efo=r(Fwe," (LayoutLMv2 model)"),Fwe.forEach(t),Cfo=i(be),Ih=n(be,"LI",{});var Twe=s(Ih);mne=n(Twe,"STRONG",{});var VUr=s(mne);wfo=r(VUr,"layoutxlm"),VUr.forEach(t),Afo=r(Twe," \u2014 "),XB=n(Twe,"A",{href:!0});var XUr=s(XB);yfo=r(XUr,"LayoutXLMProcessor"),XUr.forEach(t),Lfo=r(Twe," (LayoutXLM model)"),Twe.forEach(t),xfo=i(be),qh=n(be,"LI",{});var Mwe=s(qh);gne=n(Mwe,"STRONG",{});var zUr=s(gne);$fo=r(zUr,"sew"),zUr.forEach(t),kfo=r(Mwe," \u2014 "),zB=n(Mwe,"A",{href:!0});var WUr=s(zB);Sfo=r(WUr,"Wav2Vec2Processor"),WUr.forEach(t),Rfo=r(Mwe," (SEW model)"),Mwe.forEach(t),Pfo=i(be),Nh=n(be,"LI",{});var Ewe=s(Nh);hne=n(Ewe,"STRONG",{});var QUr=s(hne);Bfo=r(QUr,"sew-d"),QUr.forEach(t),Ifo=r(Ewe," \u2014 "),WB=n(Ewe,"A",{href:!0});var HUr=s(WB);qfo=r(HUr,"Wav2Vec2Processor"),HUr.forEach(t),Nfo=r(Ewe," (SEW-D model)"),Ewe.forEach(t),jfo=i(be),jh=n(be,"LI",{});var Cwe=s(jh);pne=n(Cwe,"STRONG",{});var UUr=s(pne);Dfo=r(UUr,"speech_to_text"),UUr.forEach(t),Gfo=r(Cwe," \u2014 "),QB=n(Cwe,"A",{href:!0});var JUr=s(QB);Ofo=r(JUr,"Speech2TextProcessor"),JUr.forEach(t),Vfo=r(Cwe," (Speech2Text model)"),Cwe.forEach(t),Xfo=i(be),Dh=n(be,"LI",{});var wwe=s(Dh);_ne=n(wwe,"STRONG",{});var YUr=s(_ne);zfo=r(YUr,"speech_to_text_2"),YUr.forEach(t),Wfo=r(wwe," \u2014 "),HB=n(wwe,"A",{href:!0});var KUr=s(HB);Qfo=r(KUr,"Speech2Text2Processor"),KUr.forEach(t),Hfo=r(wwe," (Speech2Text2 model)"),wwe.forEach(t),Ufo=i(be),Gh=n(be,"LI",{});var Awe=s(Gh);une=n(Awe,"STRONG",{});var ZUr=s(une);Jfo=r(ZUr,"trocr"),ZUr.forEach(t),Yfo=r(Awe," \u2014 "),UB=n(Awe,"A",{href:!0});var eJr=s(UB);Kfo=r(eJr,"TrOCRProcessor"),eJr.forEach(t),Zfo=r(Awe," (TrOCR model)"),Awe.forEach(t),emo=i(be),Oh=n(be,"LI",{});var ywe=s(Oh);bne=n(ywe,"STRONG",{});var oJr=s(bne);omo=r(oJr,"unispeech"),oJr.forEach(t),rmo=r(ywe," \u2014 "),JB=n(ywe,"A",{href:!0});var rJr=s(JB);tmo=r(rJr,"Wav2Vec2Processor"),rJr.forEach(t),amo=r(ywe," (UniSpeech model)"),ywe.forEach(t),nmo=i(be),Vh=n(be,"LI",{});var Lwe=s(Vh);vne=n(Lwe,"STRONG",{});var tJr=s(vne);smo=r(tJr,"unispeech-sat"),tJr.forEach(t),lmo=r(Lwe," \u2014 "),YB=n(Lwe,"A",{href:!0});var aJr=s(YB);imo=r(aJr,"Wav2Vec2Processor"),aJr.forEach(t),dmo=r(Lwe," (UniSpeechSat model)"),Lwe.forEach(t),cmo=i(be),Xh=n(be,"LI",{});var xwe=s(Xh);Fne=n(xwe,"STRONG",{});var nJr=s(Fne);fmo=r(nJr,"vilt"),nJr.forEach(t),mmo=r(xwe," \u2014 "),KB=n(xwe,"A",{href:!0});var sJr=s(KB);gmo=r(sJr,"ViltProcessor"),sJr.forEach(t),hmo=r(xwe," (ViLT model)"),xwe.forEach(t),pmo=i(be),zh=n(be,"LI",{});var $we=s(zh);Tne=n($we,"STRONG",{});var lJr=s(Tne);_mo=r(lJr,"vision-text-dual-encoder"),lJr.forEach(t),umo=r($we," \u2014 "),ZB=n($we,"A",{href:!0});var iJr=s(ZB);bmo=r(iJr,"VisionTextDualEncoderProcessor"),iJr.forEach(t),vmo=r($we," (VisionTextDualEncoder model)"),$we.forEach(t),Fmo=i(be),Wh=n(be,"LI",{});var kwe=s(Wh);Mne=n(kwe,"STRONG",{});var dJr=s(Mne);Tmo=r(dJr,"wav2vec2"),dJr.forEach(t),Mmo=r(kwe," \u2014 "),eI=n(kwe,"A",{href:!0});var cJr=s(eI);Emo=r(cJr,"Wav2Vec2Processor"),cJr.forEach(t),Cmo=r(kwe," (Wav2Vec2 model)"),kwe.forEach(t),wmo=i(be),Qh=n(be,"LI",{});var Swe=s(Qh);Ene=n(Swe,"STRONG",{});var fJr=s(Ene);Amo=r(fJr,"wav2vec2-conformer"),fJr.forEach(t),ymo=r(Swe," \u2014 "),oI=n(Swe,"A",{href:!0});var mJr=s(oI);Lmo=r(mJr,"Wav2Vec2Processor"),mJr.forEach(t),xmo=r(Swe," (Wav2Vec2-Conformer model)"),Swe.forEach(t),$mo=i(be),Hh=n(be,"LI",{});var Rwe=s(Hh);Cne=n(Rwe,"STRONG",{});var gJr=s(Cne);kmo=r(gJr,"wavlm"),gJr.forEach(t),Smo=r(Rwe," \u2014 "),rI=n(Rwe,"A",{href:!0});var hJr=s(rI);Rmo=r(hJr,"Wav2Vec2Processor"),hJr.forEach(t),Pmo=r(Rwe," (WavLM model)"),Rwe.forEach(t),be.forEach(t),Bmo=i(ea),T(Uh.$$.fragment,ea),Imo=i(ea),T(Jh.$$.fragment,ea),ea.forEach(t),qmo=i(js),Yh=n(js,"DIV",{class:!0});var tje=s(Yh);T(IA.$$.fragment,tje),Nmo=i(tje),wne=n(tje,"P",{});var pJr=s(wne);jmo=r(pJr,"Register a new processor for this class."),pJr.forEach(t),tje.forEach(t),js.forEach(t),eqe=i(f),Ci=n(f,"H2",{class:!0});var aje=s(Ci);Kh=n(aje,"A",{id:!0,class:!0,href:!0});var _Jr=s(Kh);Ane=n(_Jr,"SPAN",{});var uJr=s(Ane);T(qA.$$.fragment,uJr),uJr.forEach(t),_Jr.forEach(t),Dmo=i(aje),yne=n(aje,"SPAN",{});var bJr=s(yne);Gmo=r(bJr,"AutoModel"),bJr.forEach(t),aje.forEach(t),oqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(NA.$$.fragment,Ds),Omo=i(Ds),wi=n(Ds,"P",{});var BK=s(wi);Vmo=r(BK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tI=n(BK,"A",{href:!0});var vJr=s(tI);Xmo=r(vJr,"from_pretrained()"),vJr.forEach(t),zmo=r(BK," class method or the "),aI=n(BK,"A",{href:!0});var FJr=s(aI);Wmo=r(FJr,"from_config()"),FJr.forEach(t),Qmo=r(BK,` class
method.`),BK.forEach(t),Hmo=i(Ds),jA=n(Ds,"P",{});var nje=s(jA);Umo=r(nje,"This class cannot be instantiated directly using "),Lne=n(nje,"CODE",{});var TJr=s(Lne);Jmo=r(TJr,"__init__()"),TJr.forEach(t),Ymo=r(nje," (throws an error)."),nje.forEach(t),Kmo=i(Ds),tt=n(Ds,"DIV",{class:!0});var pw=s(tt);T(DA.$$.fragment,pw),Zmo=i(pw),xne=n(pw,"P",{});var MJr=s(xne);ego=r(MJr,"Instantiates one of the base model classes of the library from a configuration."),MJr.forEach(t),ogo=i(pw),Ai=n(pw,"P",{});var IK=s(Ai);rgo=r(IK,`Note:
Loading a model from its configuration file does `),$ne=n(IK,"STRONG",{});var EJr=s($ne);tgo=r(EJr,"not"),EJr.forEach(t),ago=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=n(IK,"A",{href:!0});var CJr=s(nI);ngo=r(CJr,"from_pretrained()"),CJr.forEach(t),sgo=r(IK," to load the model weights."),IK.forEach(t),lgo=i(pw),T(Zh.$$.fragment,pw),pw.forEach(t),igo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(GA.$$.fragment,oa),dgo=i(oa),kne=n(oa,"P",{});var wJr=s(kne);cgo=r(wJr,"Instantiate one of the base model classes of the library from a pretrained model."),wJr.forEach(t),fgo=i(oa),La=n(oa,"P",{});var _w=s(La);mgo=r(_w,"The model class to instantiate is selected based on the "),Sne=n(_w,"CODE",{});var AJr=s(Sne);ggo=r(AJr,"model_type"),AJr.forEach(t),hgo=r(_w,` property of the config object (either
passed as an argument or loaded from `),Rne=n(_w,"CODE",{});var yJr=s(Rne);pgo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),_go=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pne=n(_w,"CODE",{});var LJr=s(Pne);ugo=r(LJr,"pretrained_model_name_or_path"),LJr.forEach(t),bgo=r(_w,":"),_w.forEach(t),vgo=i(oa),x=n(oa,"UL",{});var $=s(x);ep=n($,"LI",{});var Pwe=s(ep);Bne=n(Pwe,"STRONG",{});var xJr=s(Bne);Fgo=r(xJr,"albert"),xJr.forEach(t),Tgo=r(Pwe," \u2014 "),sI=n(Pwe,"A",{href:!0});var $Jr=s(sI);Mgo=r($Jr,"AlbertModel"),$Jr.forEach(t),Ego=r(Pwe," (ALBERT model)"),Pwe.forEach(t),Cgo=i($),op=n($,"LI",{});var Bwe=s(op);Ine=n(Bwe,"STRONG",{});var kJr=s(Ine);wgo=r(kJr,"bart"),kJr.forEach(t),Ago=r(Bwe," \u2014 "),lI=n(Bwe,"A",{href:!0});var SJr=s(lI);ygo=r(SJr,"BartModel"),SJr.forEach(t),Lgo=r(Bwe," (BART model)"),Bwe.forEach(t),xgo=i($),rp=n($,"LI",{});var Iwe=s(rp);qne=n(Iwe,"STRONG",{});var RJr=s(qne);$go=r(RJr,"beit"),RJr.forEach(t),kgo=r(Iwe," \u2014 "),iI=n(Iwe,"A",{href:!0});var PJr=s(iI);Sgo=r(PJr,"BeitModel"),PJr.forEach(t),Rgo=r(Iwe," (BEiT model)"),Iwe.forEach(t),Pgo=i($),tp=n($,"LI",{});var qwe=s(tp);Nne=n(qwe,"STRONG",{});var BJr=s(Nne);Bgo=r(BJr,"bert"),BJr.forEach(t),Igo=r(qwe," \u2014 "),dI=n(qwe,"A",{href:!0});var IJr=s(dI);qgo=r(IJr,"BertModel"),IJr.forEach(t),Ngo=r(qwe," (BERT model)"),qwe.forEach(t),jgo=i($),ap=n($,"LI",{});var Nwe=s(ap);jne=n(Nwe,"STRONG",{});var qJr=s(jne);Dgo=r(qJr,"bert-generation"),qJr.forEach(t),Ggo=r(Nwe," \u2014 "),cI=n(Nwe,"A",{href:!0});var NJr=s(cI);Ogo=r(NJr,"BertGenerationEncoder"),NJr.forEach(t),Vgo=r(Nwe," (Bert Generation model)"),Nwe.forEach(t),Xgo=i($),np=n($,"LI",{});var jwe=s(np);Dne=n(jwe,"STRONG",{});var jJr=s(Dne);zgo=r(jJr,"big_bird"),jJr.forEach(t),Wgo=r(jwe," \u2014 "),fI=n(jwe,"A",{href:!0});var DJr=s(fI);Qgo=r(DJr,"BigBirdModel"),DJr.forEach(t),Hgo=r(jwe," (BigBird model)"),jwe.forEach(t),Ugo=i($),sp=n($,"LI",{});var Dwe=s(sp);Gne=n(Dwe,"STRONG",{});var GJr=s(Gne);Jgo=r(GJr,"bigbird_pegasus"),GJr.forEach(t),Ygo=r(Dwe," \u2014 "),mI=n(Dwe,"A",{href:!0});var OJr=s(mI);Kgo=r(OJr,"BigBirdPegasusModel"),OJr.forEach(t),Zgo=r(Dwe," (BigBirdPegasus model)"),Dwe.forEach(t),eho=i($),lp=n($,"LI",{});var Gwe=s(lp);One=n(Gwe,"STRONG",{});var VJr=s(One);oho=r(VJr,"blenderbot"),VJr.forEach(t),rho=r(Gwe," \u2014 "),gI=n(Gwe,"A",{href:!0});var XJr=s(gI);tho=r(XJr,"BlenderbotModel"),XJr.forEach(t),aho=r(Gwe," (Blenderbot model)"),Gwe.forEach(t),nho=i($),ip=n($,"LI",{});var Owe=s(ip);Vne=n(Owe,"STRONG",{});var zJr=s(Vne);sho=r(zJr,"blenderbot-small"),zJr.forEach(t),lho=r(Owe," \u2014 "),hI=n(Owe,"A",{href:!0});var WJr=s(hI);iho=r(WJr,"BlenderbotSmallModel"),WJr.forEach(t),dho=r(Owe," (BlenderbotSmall model)"),Owe.forEach(t),cho=i($),dp=n($,"LI",{});var Vwe=s(dp);Xne=n(Vwe,"STRONG",{});var QJr=s(Xne);fho=r(QJr,"camembert"),QJr.forEach(t),mho=r(Vwe," \u2014 "),pI=n(Vwe,"A",{href:!0});var HJr=s(pI);gho=r(HJr,"CamembertModel"),HJr.forEach(t),hho=r(Vwe," (CamemBERT model)"),Vwe.forEach(t),pho=i($),cp=n($,"LI",{});var Xwe=s(cp);zne=n(Xwe,"STRONG",{});var UJr=s(zne);_ho=r(UJr,"canine"),UJr.forEach(t),uho=r(Xwe," \u2014 "),_I=n(Xwe,"A",{href:!0});var JJr=s(_I);bho=r(JJr,"CanineModel"),JJr.forEach(t),vho=r(Xwe," (Canine model)"),Xwe.forEach(t),Fho=i($),fp=n($,"LI",{});var zwe=s(fp);Wne=n(zwe,"STRONG",{});var YJr=s(Wne);Tho=r(YJr,"clip"),YJr.forEach(t),Mho=r(zwe," \u2014 "),uI=n(zwe,"A",{href:!0});var KJr=s(uI);Eho=r(KJr,"CLIPModel"),KJr.forEach(t),Cho=r(zwe," (CLIP model)"),zwe.forEach(t),who=i($),mp=n($,"LI",{});var Wwe=s(mp);Qne=n(Wwe,"STRONG",{});var ZJr=s(Qne);Aho=r(ZJr,"convbert"),ZJr.forEach(t),yho=r(Wwe," \u2014 "),bI=n(Wwe,"A",{href:!0});var eYr=s(bI);Lho=r(eYr,"ConvBertModel"),eYr.forEach(t),xho=r(Wwe," (ConvBERT model)"),Wwe.forEach(t),$ho=i($),gp=n($,"LI",{});var Qwe=s(gp);Hne=n(Qwe,"STRONG",{});var oYr=s(Hne);kho=r(oYr,"convnext"),oYr.forEach(t),Sho=r(Qwe," \u2014 "),vI=n(Qwe,"A",{href:!0});var rYr=s(vI);Rho=r(rYr,"ConvNextModel"),rYr.forEach(t),Pho=r(Qwe," (ConvNext model)"),Qwe.forEach(t),Bho=i($),hp=n($,"LI",{});var Hwe=s(hp);Une=n(Hwe,"STRONG",{});var tYr=s(Une);Iho=r(tYr,"ctrl"),tYr.forEach(t),qho=r(Hwe," \u2014 "),FI=n(Hwe,"A",{href:!0});var aYr=s(FI);Nho=r(aYr,"CTRLModel"),aYr.forEach(t),jho=r(Hwe," (CTRL model)"),Hwe.forEach(t),Dho=i($),pp=n($,"LI",{});var Uwe=s(pp);Jne=n(Uwe,"STRONG",{});var nYr=s(Jne);Gho=r(nYr,"cvt"),nYr.forEach(t),Oho=r(Uwe," \u2014 "),TI=n(Uwe,"A",{href:!0});var sYr=s(TI);Vho=r(sYr,"CvtModel"),sYr.forEach(t),Xho=r(Uwe," (CvT model)"),Uwe.forEach(t),zho=i($),_p=n($,"LI",{});var Jwe=s(_p);Yne=n(Jwe,"STRONG",{});var lYr=s(Yne);Who=r(lYr,"data2vec-audio"),lYr.forEach(t),Qho=r(Jwe," \u2014 "),MI=n(Jwe,"A",{href:!0});var iYr=s(MI);Hho=r(iYr,"Data2VecAudioModel"),iYr.forEach(t),Uho=r(Jwe," (Data2VecAudio model)"),Jwe.forEach(t),Jho=i($),up=n($,"LI",{});var Ywe=s(up);Kne=n(Ywe,"STRONG",{});var dYr=s(Kne);Yho=r(dYr,"data2vec-text"),dYr.forEach(t),Kho=r(Ywe," \u2014 "),EI=n(Ywe,"A",{href:!0});var cYr=s(EI);Zho=r(cYr,"Data2VecTextModel"),cYr.forEach(t),epo=r(Ywe," (Data2VecText model)"),Ywe.forEach(t),opo=i($),bp=n($,"LI",{});var Kwe=s(bp);Zne=n(Kwe,"STRONG",{});var fYr=s(Zne);rpo=r(fYr,"data2vec-vision"),fYr.forEach(t),tpo=r(Kwe," \u2014 "),CI=n(Kwe,"A",{href:!0});var mYr=s(CI);apo=r(mYr,"Data2VecVisionModel"),mYr.forEach(t),npo=r(Kwe," (Data2VecVision model)"),Kwe.forEach(t),spo=i($),vp=n($,"LI",{});var Zwe=s(vp);ese=n(Zwe,"STRONG",{});var gYr=s(ese);lpo=r(gYr,"deberta"),gYr.forEach(t),ipo=r(Zwe," \u2014 "),wI=n(Zwe,"A",{href:!0});var hYr=s(wI);dpo=r(hYr,"DebertaModel"),hYr.forEach(t),cpo=r(Zwe," (DeBERTa model)"),Zwe.forEach(t),fpo=i($),Fp=n($,"LI",{});var e0e=s(Fp);ose=n(e0e,"STRONG",{});var pYr=s(ose);mpo=r(pYr,"deberta-v2"),pYr.forEach(t),gpo=r(e0e," \u2014 "),AI=n(e0e,"A",{href:!0});var _Yr=s(AI);hpo=r(_Yr,"DebertaV2Model"),_Yr.forEach(t),ppo=r(e0e," (DeBERTa-v2 model)"),e0e.forEach(t),_po=i($),Tp=n($,"LI",{});var o0e=s(Tp);rse=n(o0e,"STRONG",{});var uYr=s(rse);upo=r(uYr,"decision_transformer"),uYr.forEach(t),bpo=r(o0e," \u2014 "),yI=n(o0e,"A",{href:!0});var bYr=s(yI);vpo=r(bYr,"DecisionTransformerModel"),bYr.forEach(t),Fpo=r(o0e," (Decision Transformer model)"),o0e.forEach(t),Tpo=i($),Mp=n($,"LI",{});var r0e=s(Mp);tse=n(r0e,"STRONG",{});var vYr=s(tse);Mpo=r(vYr,"deit"),vYr.forEach(t),Epo=r(r0e," \u2014 "),LI=n(r0e,"A",{href:!0});var FYr=s(LI);Cpo=r(FYr,"DeiTModel"),FYr.forEach(t),wpo=r(r0e," (DeiT model)"),r0e.forEach(t),Apo=i($),Ep=n($,"LI",{});var t0e=s(Ep);ase=n(t0e,"STRONG",{});var TYr=s(ase);ypo=r(TYr,"detr"),TYr.forEach(t),Lpo=r(t0e," \u2014 "),xI=n(t0e,"A",{href:!0});var MYr=s(xI);xpo=r(MYr,"DetrModel"),MYr.forEach(t),$po=r(t0e," (DETR model)"),t0e.forEach(t),kpo=i($),Cp=n($,"LI",{});var a0e=s(Cp);nse=n(a0e,"STRONG",{});var EYr=s(nse);Spo=r(EYr,"distilbert"),EYr.forEach(t),Rpo=r(a0e," \u2014 "),$I=n(a0e,"A",{href:!0});var CYr=s($I);Ppo=r(CYr,"DistilBertModel"),CYr.forEach(t),Bpo=r(a0e," (DistilBERT model)"),a0e.forEach(t),Ipo=i($),wp=n($,"LI",{});var n0e=s(wp);sse=n(n0e,"STRONG",{});var wYr=s(sse);qpo=r(wYr,"dpr"),wYr.forEach(t),Npo=r(n0e," \u2014 "),kI=n(n0e,"A",{href:!0});var AYr=s(kI);jpo=r(AYr,"DPRQuestionEncoder"),AYr.forEach(t),Dpo=r(n0e," (DPR model)"),n0e.forEach(t),Gpo=i($),Ap=n($,"LI",{});var s0e=s(Ap);lse=n(s0e,"STRONG",{});var yYr=s(lse);Opo=r(yYr,"dpt"),yYr.forEach(t),Vpo=r(s0e," \u2014 "),SI=n(s0e,"A",{href:!0});var LYr=s(SI);Xpo=r(LYr,"DPTModel"),LYr.forEach(t),zpo=r(s0e," (DPT model)"),s0e.forEach(t),Wpo=i($),yp=n($,"LI",{});var l0e=s(yp);ise=n(l0e,"STRONG",{});var xYr=s(ise);Qpo=r(xYr,"electra"),xYr.forEach(t),Hpo=r(l0e," \u2014 "),RI=n(l0e,"A",{href:!0});var $Yr=s(RI);Upo=r($Yr,"ElectraModel"),$Yr.forEach(t),Jpo=r(l0e," (ELECTRA model)"),l0e.forEach(t),Ypo=i($),Lp=n($,"LI",{});var i0e=s(Lp);dse=n(i0e,"STRONG",{});var kYr=s(dse);Kpo=r(kYr,"flaubert"),kYr.forEach(t),Zpo=r(i0e," \u2014 "),PI=n(i0e,"A",{href:!0});var SYr=s(PI);e_o=r(SYr,"FlaubertModel"),SYr.forEach(t),o_o=r(i0e," (FlauBERT model)"),i0e.forEach(t),r_o=i($),xp=n($,"LI",{});var d0e=s(xp);cse=n(d0e,"STRONG",{});var RYr=s(cse);t_o=r(RYr,"flava"),RYr.forEach(t),a_o=r(d0e," \u2014 "),BI=n(d0e,"A",{href:!0});var PYr=s(BI);n_o=r(PYr,"FlavaModel"),PYr.forEach(t),s_o=r(d0e," (Flava model)"),d0e.forEach(t),l_o=i($),$p=n($,"LI",{});var c0e=s($p);fse=n(c0e,"STRONG",{});var BYr=s(fse);i_o=r(BYr,"fnet"),BYr.forEach(t),d_o=r(c0e," \u2014 "),II=n(c0e,"A",{href:!0});var IYr=s(II);c_o=r(IYr,"FNetModel"),IYr.forEach(t),f_o=r(c0e," (FNet model)"),c0e.forEach(t),m_o=i($),kp=n($,"LI",{});var f0e=s(kp);mse=n(f0e,"STRONG",{});var qYr=s(mse);g_o=r(qYr,"fsmt"),qYr.forEach(t),h_o=r(f0e," \u2014 "),qI=n(f0e,"A",{href:!0});var NYr=s(qI);p_o=r(NYr,"FSMTModel"),NYr.forEach(t),__o=r(f0e," (FairSeq Machine-Translation model)"),f0e.forEach(t),u_o=i($),Rs=n($,"LI",{});var w$=s(Rs);gse=n(w$,"STRONG",{});var jYr=s(gse);b_o=r(jYr,"funnel"),jYr.forEach(t),v_o=r(w$," \u2014 "),NI=n(w$,"A",{href:!0});var DYr=s(NI);F_o=r(DYr,"FunnelModel"),DYr.forEach(t),T_o=r(w$," or "),jI=n(w$,"A",{href:!0});var GYr=s(jI);M_o=r(GYr,"FunnelBaseModel"),GYr.forEach(t),E_o=r(w$," (Funnel Transformer model)"),w$.forEach(t),C_o=i($),Sp=n($,"LI",{});var m0e=s(Sp);hse=n(m0e,"STRONG",{});var OYr=s(hse);w_o=r(OYr,"glpn"),OYr.forEach(t),A_o=r(m0e," \u2014 "),DI=n(m0e,"A",{href:!0});var VYr=s(DI);y_o=r(VYr,"GLPNModel"),VYr.forEach(t),L_o=r(m0e," (GLPN model)"),m0e.forEach(t),x_o=i($),Rp=n($,"LI",{});var g0e=s(Rp);pse=n(g0e,"STRONG",{});var XYr=s(pse);$_o=r(XYr,"gpt2"),XYr.forEach(t),k_o=r(g0e," \u2014 "),GI=n(g0e,"A",{href:!0});var zYr=s(GI);S_o=r(zYr,"GPT2Model"),zYr.forEach(t),R_o=r(g0e," (OpenAI GPT-2 model)"),g0e.forEach(t),P_o=i($),Pp=n($,"LI",{});var h0e=s(Pp);_se=n(h0e,"STRONG",{});var WYr=s(_se);B_o=r(WYr,"gpt_neo"),WYr.forEach(t),I_o=r(h0e," \u2014 "),OI=n(h0e,"A",{href:!0});var QYr=s(OI);q_o=r(QYr,"GPTNeoModel"),QYr.forEach(t),N_o=r(h0e," (GPT Neo model)"),h0e.forEach(t),j_o=i($),Bp=n($,"LI",{});var p0e=s(Bp);use=n(p0e,"STRONG",{});var HYr=s(use);D_o=r(HYr,"gptj"),HYr.forEach(t),G_o=r(p0e," \u2014 "),VI=n(p0e,"A",{href:!0});var UYr=s(VI);O_o=r(UYr,"GPTJModel"),UYr.forEach(t),V_o=r(p0e," (GPT-J model)"),p0e.forEach(t),X_o=i($),Ip=n($,"LI",{});var _0e=s(Ip);bse=n(_0e,"STRONG",{});var JYr=s(bse);z_o=r(JYr,"hubert"),JYr.forEach(t),W_o=r(_0e," \u2014 "),XI=n(_0e,"A",{href:!0});var YYr=s(XI);Q_o=r(YYr,"HubertModel"),YYr.forEach(t),H_o=r(_0e," (Hubert model)"),_0e.forEach(t),U_o=i($),qp=n($,"LI",{});var u0e=s(qp);vse=n(u0e,"STRONG",{});var KYr=s(vse);J_o=r(KYr,"ibert"),KYr.forEach(t),Y_o=r(u0e," \u2014 "),zI=n(u0e,"A",{href:!0});var ZYr=s(zI);K_o=r(ZYr,"IBertModel"),ZYr.forEach(t),Z_o=r(u0e," (I-BERT model)"),u0e.forEach(t),euo=i($),Np=n($,"LI",{});var b0e=s(Np);Fse=n(b0e,"STRONG",{});var eKr=s(Fse);ouo=r(eKr,"imagegpt"),eKr.forEach(t),ruo=r(b0e," \u2014 "),WI=n(b0e,"A",{href:!0});var oKr=s(WI);tuo=r(oKr,"ImageGPTModel"),oKr.forEach(t),auo=r(b0e," (ImageGPT model)"),b0e.forEach(t),nuo=i($),jp=n($,"LI",{});var v0e=s(jp);Tse=n(v0e,"STRONG",{});var rKr=s(Tse);suo=r(rKr,"layoutlm"),rKr.forEach(t),luo=r(v0e," \u2014 "),QI=n(v0e,"A",{href:!0});var tKr=s(QI);iuo=r(tKr,"LayoutLMModel"),tKr.forEach(t),duo=r(v0e," (LayoutLM model)"),v0e.forEach(t),cuo=i($),Dp=n($,"LI",{});var F0e=s(Dp);Mse=n(F0e,"STRONG",{});var aKr=s(Mse);fuo=r(aKr,"layoutlmv2"),aKr.forEach(t),muo=r(F0e," \u2014 "),HI=n(F0e,"A",{href:!0});var nKr=s(HI);guo=r(nKr,"LayoutLMv2Model"),nKr.forEach(t),huo=r(F0e," (LayoutLMv2 model)"),F0e.forEach(t),puo=i($),Gp=n($,"LI",{});var T0e=s(Gp);Ese=n(T0e,"STRONG",{});var sKr=s(Ese);_uo=r(sKr,"led"),sKr.forEach(t),uuo=r(T0e," \u2014 "),UI=n(T0e,"A",{href:!0});var lKr=s(UI);buo=r(lKr,"LEDModel"),lKr.forEach(t),vuo=r(T0e," (LED model)"),T0e.forEach(t),Fuo=i($),Op=n($,"LI",{});var M0e=s(Op);Cse=n(M0e,"STRONG",{});var iKr=s(Cse);Tuo=r(iKr,"longformer"),iKr.forEach(t),Muo=r(M0e," \u2014 "),JI=n(M0e,"A",{href:!0});var dKr=s(JI);Euo=r(dKr,"LongformerModel"),dKr.forEach(t),Cuo=r(M0e," (Longformer model)"),M0e.forEach(t),wuo=i($),Vp=n($,"LI",{});var E0e=s(Vp);wse=n(E0e,"STRONG",{});var cKr=s(wse);Auo=r(cKr,"luke"),cKr.forEach(t),yuo=r(E0e," \u2014 "),YI=n(E0e,"A",{href:!0});var fKr=s(YI);Luo=r(fKr,"LukeModel"),fKr.forEach(t),xuo=r(E0e," (LUKE model)"),E0e.forEach(t),$uo=i($),Xp=n($,"LI",{});var C0e=s(Xp);Ase=n(C0e,"STRONG",{});var mKr=s(Ase);kuo=r(mKr,"lxmert"),mKr.forEach(t),Suo=r(C0e," \u2014 "),KI=n(C0e,"A",{href:!0});var gKr=s(KI);Ruo=r(gKr,"LxmertModel"),gKr.forEach(t),Puo=r(C0e," (LXMERT model)"),C0e.forEach(t),Buo=i($),zp=n($,"LI",{});var w0e=s(zp);yse=n(w0e,"STRONG",{});var hKr=s(yse);Iuo=r(hKr,"m2m_100"),hKr.forEach(t),quo=r(w0e," \u2014 "),ZI=n(w0e,"A",{href:!0});var pKr=s(ZI);Nuo=r(pKr,"M2M100Model"),pKr.forEach(t),juo=r(w0e," (M2M100 model)"),w0e.forEach(t),Duo=i($),Wp=n($,"LI",{});var A0e=s(Wp);Lse=n(A0e,"STRONG",{});var _Kr=s(Lse);Guo=r(_Kr,"marian"),_Kr.forEach(t),Ouo=r(A0e," \u2014 "),eq=n(A0e,"A",{href:!0});var uKr=s(eq);Vuo=r(uKr,"MarianModel"),uKr.forEach(t),Xuo=r(A0e," (Marian model)"),A0e.forEach(t),zuo=i($),Qp=n($,"LI",{});var y0e=s(Qp);xse=n(y0e,"STRONG",{});var bKr=s(xse);Wuo=r(bKr,"maskformer"),bKr.forEach(t),Quo=r(y0e," \u2014 "),oq=n(y0e,"A",{href:!0});var vKr=s(oq);Huo=r(vKr,"MaskFormerModel"),vKr.forEach(t),Uuo=r(y0e," (MaskFormer model)"),y0e.forEach(t),Juo=i($),Hp=n($,"LI",{});var L0e=s(Hp);$se=n(L0e,"STRONG",{});var FKr=s($se);Yuo=r(FKr,"mbart"),FKr.forEach(t),Kuo=r(L0e," \u2014 "),rq=n(L0e,"A",{href:!0});var TKr=s(rq);Zuo=r(TKr,"MBartModel"),TKr.forEach(t),e2o=r(L0e," (mBART model)"),L0e.forEach(t),o2o=i($),Up=n($,"LI",{});var x0e=s(Up);kse=n(x0e,"STRONG",{});var MKr=s(kse);r2o=r(MKr,"megatron-bert"),MKr.forEach(t),t2o=r(x0e," \u2014 "),tq=n(x0e,"A",{href:!0});var EKr=s(tq);a2o=r(EKr,"MegatronBertModel"),EKr.forEach(t),n2o=r(x0e," (MegatronBert model)"),x0e.forEach(t),s2o=i($),Jp=n($,"LI",{});var $0e=s(Jp);Sse=n($0e,"STRONG",{});var CKr=s(Sse);l2o=r(CKr,"mobilebert"),CKr.forEach(t),i2o=r($0e," \u2014 "),aq=n($0e,"A",{href:!0});var wKr=s(aq);d2o=r(wKr,"MobileBertModel"),wKr.forEach(t),c2o=r($0e," (MobileBERT model)"),$0e.forEach(t),f2o=i($),Yp=n($,"LI",{});var k0e=s(Yp);Rse=n(k0e,"STRONG",{});var AKr=s(Rse);m2o=r(AKr,"mpnet"),AKr.forEach(t),g2o=r(k0e," \u2014 "),nq=n(k0e,"A",{href:!0});var yKr=s(nq);h2o=r(yKr,"MPNetModel"),yKr.forEach(t),p2o=r(k0e," (MPNet model)"),k0e.forEach(t),_2o=i($),Kp=n($,"LI",{});var S0e=s(Kp);Pse=n(S0e,"STRONG",{});var LKr=s(Pse);u2o=r(LKr,"mt5"),LKr.forEach(t),b2o=r(S0e," \u2014 "),sq=n(S0e,"A",{href:!0});var xKr=s(sq);v2o=r(xKr,"MT5Model"),xKr.forEach(t),F2o=r(S0e," (mT5 model)"),S0e.forEach(t),T2o=i($),Zp=n($,"LI",{});var R0e=s(Zp);Bse=n(R0e,"STRONG",{});var $Kr=s(Bse);M2o=r($Kr,"nystromformer"),$Kr.forEach(t),E2o=r(R0e," \u2014 "),lq=n(R0e,"A",{href:!0});var kKr=s(lq);C2o=r(kKr,"NystromformerModel"),kKr.forEach(t),w2o=r(R0e," (Nystromformer model)"),R0e.forEach(t),A2o=i($),e_=n($,"LI",{});var P0e=s(e_);Ise=n(P0e,"STRONG",{});var SKr=s(Ise);y2o=r(SKr,"openai-gpt"),SKr.forEach(t),L2o=r(P0e," \u2014 "),iq=n(P0e,"A",{href:!0});var RKr=s(iq);x2o=r(RKr,"OpenAIGPTModel"),RKr.forEach(t),$2o=r(P0e," (OpenAI GPT model)"),P0e.forEach(t),k2o=i($),o_=n($,"LI",{});var B0e=s(o_);qse=n(B0e,"STRONG",{});var PKr=s(qse);S2o=r(PKr,"opt"),PKr.forEach(t),R2o=r(B0e," \u2014 "),dq=n(B0e,"A",{href:!0});var BKr=s(dq);P2o=r(BKr,"OPTModel"),BKr.forEach(t),B2o=r(B0e," (OPT model)"),B0e.forEach(t),I2o=i($),r_=n($,"LI",{});var I0e=s(r_);Nse=n(I0e,"STRONG",{});var IKr=s(Nse);q2o=r(IKr,"pegasus"),IKr.forEach(t),N2o=r(I0e," \u2014 "),cq=n(I0e,"A",{href:!0});var qKr=s(cq);j2o=r(qKr,"PegasusModel"),qKr.forEach(t),D2o=r(I0e," (Pegasus model)"),I0e.forEach(t),G2o=i($),t_=n($,"LI",{});var q0e=s(t_);jse=n(q0e,"STRONG",{});var NKr=s(jse);O2o=r(NKr,"perceiver"),NKr.forEach(t),V2o=r(q0e," \u2014 "),fq=n(q0e,"A",{href:!0});var jKr=s(fq);X2o=r(jKr,"PerceiverModel"),jKr.forEach(t),z2o=r(q0e," (Perceiver model)"),q0e.forEach(t),W2o=i($),a_=n($,"LI",{});var N0e=s(a_);Dse=n(N0e,"STRONG",{});var DKr=s(Dse);Q2o=r(DKr,"plbart"),DKr.forEach(t),H2o=r(N0e," \u2014 "),mq=n(N0e,"A",{href:!0});var GKr=s(mq);U2o=r(GKr,"PLBartModel"),GKr.forEach(t),J2o=r(N0e," (PLBart model)"),N0e.forEach(t),Y2o=i($),n_=n($,"LI",{});var j0e=s(n_);Gse=n(j0e,"STRONG",{});var OKr=s(Gse);K2o=r(OKr,"poolformer"),OKr.forEach(t),Z2o=r(j0e," \u2014 "),gq=n(j0e,"A",{href:!0});var VKr=s(gq);e1o=r(VKr,"PoolFormerModel"),VKr.forEach(t),o1o=r(j0e," (PoolFormer model)"),j0e.forEach(t),r1o=i($),s_=n($,"LI",{});var D0e=s(s_);Ose=n(D0e,"STRONG",{});var XKr=s(Ose);t1o=r(XKr,"prophetnet"),XKr.forEach(t),a1o=r(D0e," \u2014 "),hq=n(D0e,"A",{href:!0});var zKr=s(hq);n1o=r(zKr,"ProphetNetModel"),zKr.forEach(t),s1o=r(D0e," (ProphetNet model)"),D0e.forEach(t),l1o=i($),l_=n($,"LI",{});var G0e=s(l_);Vse=n(G0e,"STRONG",{});var WKr=s(Vse);i1o=r(WKr,"qdqbert"),WKr.forEach(t),d1o=r(G0e," \u2014 "),pq=n(G0e,"A",{href:!0});var QKr=s(pq);c1o=r(QKr,"QDQBertModel"),QKr.forEach(t),f1o=r(G0e," (QDQBert model)"),G0e.forEach(t),m1o=i($),i_=n($,"LI",{});var O0e=s(i_);Xse=n(O0e,"STRONG",{});var HKr=s(Xse);g1o=r(HKr,"reformer"),HKr.forEach(t),h1o=r(O0e," \u2014 "),_q=n(O0e,"A",{href:!0});var UKr=s(_q);p1o=r(UKr,"ReformerModel"),UKr.forEach(t),_1o=r(O0e," (Reformer model)"),O0e.forEach(t),u1o=i($),d_=n($,"LI",{});var V0e=s(d_);zse=n(V0e,"STRONG",{});var JKr=s(zse);b1o=r(JKr,"regnet"),JKr.forEach(t),v1o=r(V0e," \u2014 "),uq=n(V0e,"A",{href:!0});var YKr=s(uq);F1o=r(YKr,"RegNetModel"),YKr.forEach(t),T1o=r(V0e," (RegNet model)"),V0e.forEach(t),M1o=i($),c_=n($,"LI",{});var X0e=s(c_);Wse=n(X0e,"STRONG",{});var KKr=s(Wse);E1o=r(KKr,"rembert"),KKr.forEach(t),C1o=r(X0e," \u2014 "),bq=n(X0e,"A",{href:!0});var ZKr=s(bq);w1o=r(ZKr,"RemBertModel"),ZKr.forEach(t),A1o=r(X0e," (RemBERT model)"),X0e.forEach(t),y1o=i($),f_=n($,"LI",{});var z0e=s(f_);Qse=n(z0e,"STRONG",{});var eZr=s(Qse);L1o=r(eZr,"resnet"),eZr.forEach(t),x1o=r(z0e," \u2014 "),vq=n(z0e,"A",{href:!0});var oZr=s(vq);$1o=r(oZr,"ResNetModel"),oZr.forEach(t),k1o=r(z0e," (ResNet model)"),z0e.forEach(t),S1o=i($),m_=n($,"LI",{});var W0e=s(m_);Hse=n(W0e,"STRONG",{});var rZr=s(Hse);R1o=r(rZr,"retribert"),rZr.forEach(t),P1o=r(W0e," \u2014 "),Fq=n(W0e,"A",{href:!0});var tZr=s(Fq);B1o=r(tZr,"RetriBertModel"),tZr.forEach(t),I1o=r(W0e," (RetriBERT model)"),W0e.forEach(t),q1o=i($),g_=n($,"LI",{});var Q0e=s(g_);Use=n(Q0e,"STRONG",{});var aZr=s(Use);N1o=r(aZr,"roberta"),aZr.forEach(t),j1o=r(Q0e," \u2014 "),Tq=n(Q0e,"A",{href:!0});var nZr=s(Tq);D1o=r(nZr,"RobertaModel"),nZr.forEach(t),G1o=r(Q0e," (RoBERTa model)"),Q0e.forEach(t),O1o=i($),h_=n($,"LI",{});var H0e=s(h_);Jse=n(H0e,"STRONG",{});var sZr=s(Jse);V1o=r(sZr,"roformer"),sZr.forEach(t),X1o=r(H0e," \u2014 "),Mq=n(H0e,"A",{href:!0});var lZr=s(Mq);z1o=r(lZr,"RoFormerModel"),lZr.forEach(t),W1o=r(H0e," (RoFormer model)"),H0e.forEach(t),Q1o=i($),p_=n($,"LI",{});var U0e=s(p_);Yse=n(U0e,"STRONG",{});var iZr=s(Yse);H1o=r(iZr,"segformer"),iZr.forEach(t),U1o=r(U0e," \u2014 "),Eq=n(U0e,"A",{href:!0});var dZr=s(Eq);J1o=r(dZr,"SegformerModel"),dZr.forEach(t),Y1o=r(U0e," (SegFormer model)"),U0e.forEach(t),K1o=i($),__=n($,"LI",{});var J0e=s(__);Kse=n(J0e,"STRONG",{});var cZr=s(Kse);Z1o=r(cZr,"sew"),cZr.forEach(t),e9o=r(J0e," \u2014 "),Cq=n(J0e,"A",{href:!0});var fZr=s(Cq);o9o=r(fZr,"SEWModel"),fZr.forEach(t),r9o=r(J0e," (SEW model)"),J0e.forEach(t),t9o=i($),u_=n($,"LI",{});var Y0e=s(u_);Zse=n(Y0e,"STRONG",{});var mZr=s(Zse);a9o=r(mZr,"sew-d"),mZr.forEach(t),n9o=r(Y0e," \u2014 "),wq=n(Y0e,"A",{href:!0});var gZr=s(wq);s9o=r(gZr,"SEWDModel"),gZr.forEach(t),l9o=r(Y0e," (SEW-D model)"),Y0e.forEach(t),i9o=i($),b_=n($,"LI",{});var K0e=s(b_);ele=n(K0e,"STRONG",{});var hZr=s(ele);d9o=r(hZr,"speech_to_text"),hZr.forEach(t),c9o=r(K0e," \u2014 "),Aq=n(K0e,"A",{href:!0});var pZr=s(Aq);f9o=r(pZr,"Speech2TextModel"),pZr.forEach(t),m9o=r(K0e," (Speech2Text model)"),K0e.forEach(t),g9o=i($),v_=n($,"LI",{});var Z0e=s(v_);ole=n(Z0e,"STRONG",{});var _Zr=s(ole);h9o=r(_Zr,"splinter"),_Zr.forEach(t),p9o=r(Z0e," \u2014 "),yq=n(Z0e,"A",{href:!0});var uZr=s(yq);_9o=r(uZr,"SplinterModel"),uZr.forEach(t),u9o=r(Z0e," (Splinter model)"),Z0e.forEach(t),b9o=i($),F_=n($,"LI",{});var eAe=s(F_);rle=n(eAe,"STRONG",{});var bZr=s(rle);v9o=r(bZr,"squeezebert"),bZr.forEach(t),F9o=r(eAe," \u2014 "),Lq=n(eAe,"A",{href:!0});var vZr=s(Lq);T9o=r(vZr,"SqueezeBertModel"),vZr.forEach(t),M9o=r(eAe," (SqueezeBERT model)"),eAe.forEach(t),E9o=i($),T_=n($,"LI",{});var oAe=s(T_);tle=n(oAe,"STRONG",{});var FZr=s(tle);C9o=r(FZr,"swin"),FZr.forEach(t),w9o=r(oAe," \u2014 "),xq=n(oAe,"A",{href:!0});var TZr=s(xq);A9o=r(TZr,"SwinModel"),TZr.forEach(t),y9o=r(oAe," (Swin model)"),oAe.forEach(t),L9o=i($),M_=n($,"LI",{});var rAe=s(M_);ale=n(rAe,"STRONG",{});var MZr=s(ale);x9o=r(MZr,"t5"),MZr.forEach(t),$9o=r(rAe," \u2014 "),$q=n(rAe,"A",{href:!0});var EZr=s($q);k9o=r(EZr,"T5Model"),EZr.forEach(t),S9o=r(rAe," (T5 model)"),rAe.forEach(t),R9o=i($),E_=n($,"LI",{});var tAe=s(E_);nle=n(tAe,"STRONG",{});var CZr=s(nle);P9o=r(CZr,"tapas"),CZr.forEach(t),B9o=r(tAe," \u2014 "),kq=n(tAe,"A",{href:!0});var wZr=s(kq);I9o=r(wZr,"TapasModel"),wZr.forEach(t),q9o=r(tAe," (TAPAS model)"),tAe.forEach(t),N9o=i($),C_=n($,"LI",{});var aAe=s(C_);sle=n(aAe,"STRONG",{});var AZr=s(sle);j9o=r(AZr,"transfo-xl"),AZr.forEach(t),D9o=r(aAe," \u2014 "),Sq=n(aAe,"A",{href:!0});var yZr=s(Sq);G9o=r(yZr,"TransfoXLModel"),yZr.forEach(t),O9o=r(aAe," (Transformer-XL model)"),aAe.forEach(t),V9o=i($),w_=n($,"LI",{});var nAe=s(w_);lle=n(nAe,"STRONG",{});var LZr=s(lle);X9o=r(LZr,"unispeech"),LZr.forEach(t),z9o=r(nAe," \u2014 "),Rq=n(nAe,"A",{href:!0});var xZr=s(Rq);W9o=r(xZr,"UniSpeechModel"),xZr.forEach(t),Q9o=r(nAe," (UniSpeech model)"),nAe.forEach(t),H9o=i($),A_=n($,"LI",{});var sAe=s(A_);ile=n(sAe,"STRONG",{});var $Zr=s(ile);U9o=r($Zr,"unispeech-sat"),$Zr.forEach(t),J9o=r(sAe," \u2014 "),Pq=n(sAe,"A",{href:!0});var kZr=s(Pq);Y9o=r(kZr,"UniSpeechSatModel"),kZr.forEach(t),K9o=r(sAe," (UniSpeechSat model)"),sAe.forEach(t),Z9o=i($),y_=n($,"LI",{});var lAe=s(y_);dle=n(lAe,"STRONG",{});var SZr=s(dle);ebo=r(SZr,"van"),SZr.forEach(t),obo=r(lAe," \u2014 "),Bq=n(lAe,"A",{href:!0});var RZr=s(Bq);rbo=r(RZr,"VanModel"),RZr.forEach(t),tbo=r(lAe," (VAN model)"),lAe.forEach(t),abo=i($),L_=n($,"LI",{});var iAe=s(L_);cle=n(iAe,"STRONG",{});var PZr=s(cle);nbo=r(PZr,"vilt"),PZr.forEach(t),sbo=r(iAe," \u2014 "),Iq=n(iAe,"A",{href:!0});var BZr=s(Iq);lbo=r(BZr,"ViltModel"),BZr.forEach(t),ibo=r(iAe," (ViLT model)"),iAe.forEach(t),dbo=i($),x_=n($,"LI",{});var dAe=s(x_);fle=n(dAe,"STRONG",{});var IZr=s(fle);cbo=r(IZr,"vision-text-dual-encoder"),IZr.forEach(t),fbo=r(dAe," \u2014 "),qq=n(dAe,"A",{href:!0});var qZr=s(qq);mbo=r(qZr,"VisionTextDualEncoderModel"),qZr.forEach(t),gbo=r(dAe," (VisionTextDualEncoder model)"),dAe.forEach(t),hbo=i($),$_=n($,"LI",{});var cAe=s($_);mle=n(cAe,"STRONG",{});var NZr=s(mle);pbo=r(NZr,"visual_bert"),NZr.forEach(t),_bo=r(cAe," \u2014 "),Nq=n(cAe,"A",{href:!0});var jZr=s(Nq);ubo=r(jZr,"VisualBertModel"),jZr.forEach(t),bbo=r(cAe," (VisualBert model)"),cAe.forEach(t),vbo=i($),k_=n($,"LI",{});var fAe=s(k_);gle=n(fAe,"STRONG",{});var DZr=s(gle);Fbo=r(DZr,"vit"),DZr.forEach(t),Tbo=r(fAe," \u2014 "),jq=n(fAe,"A",{href:!0});var GZr=s(jq);Mbo=r(GZr,"ViTModel"),GZr.forEach(t),Ebo=r(fAe," (ViT model)"),fAe.forEach(t),Cbo=i($),S_=n($,"LI",{});var mAe=s(S_);hle=n(mAe,"STRONG",{});var OZr=s(hle);wbo=r(OZr,"vit_mae"),OZr.forEach(t),Abo=r(mAe," \u2014 "),Dq=n(mAe,"A",{href:!0});var VZr=s(Dq);ybo=r(VZr,"ViTMAEModel"),VZr.forEach(t),Lbo=r(mAe," (ViTMAE model)"),mAe.forEach(t),xbo=i($),R_=n($,"LI",{});var gAe=s(R_);ple=n(gAe,"STRONG",{});var XZr=s(ple);$bo=r(XZr,"wav2vec2"),XZr.forEach(t),kbo=r(gAe," \u2014 "),Gq=n(gAe,"A",{href:!0});var zZr=s(Gq);Sbo=r(zZr,"Wav2Vec2Model"),zZr.forEach(t),Rbo=r(gAe," (Wav2Vec2 model)"),gAe.forEach(t),Pbo=i($),P_=n($,"LI",{});var hAe=s(P_);_le=n(hAe,"STRONG",{});var WZr=s(_le);Bbo=r(WZr,"wav2vec2-conformer"),WZr.forEach(t),Ibo=r(hAe," \u2014 "),Oq=n(hAe,"A",{href:!0});var QZr=s(Oq);qbo=r(QZr,"Wav2Vec2ConformerModel"),QZr.forEach(t),Nbo=r(hAe," (Wav2Vec2-Conformer model)"),hAe.forEach(t),jbo=i($),B_=n($,"LI",{});var pAe=s(B_);ule=n(pAe,"STRONG",{});var HZr=s(ule);Dbo=r(HZr,"wavlm"),HZr.forEach(t),Gbo=r(pAe," \u2014 "),Vq=n(pAe,"A",{href:!0});var UZr=s(Vq);Obo=r(UZr,"WavLMModel"),UZr.forEach(t),Vbo=r(pAe," (WavLM model)"),pAe.forEach(t),Xbo=i($),I_=n($,"LI",{});var _Ae=s(I_);ble=n(_Ae,"STRONG",{});var JZr=s(ble);zbo=r(JZr,"xglm"),JZr.forEach(t),Wbo=r(_Ae," \u2014 "),Xq=n(_Ae,"A",{href:!0});var YZr=s(Xq);Qbo=r(YZr,"XGLMModel"),YZr.forEach(t),Hbo=r(_Ae," (XGLM model)"),_Ae.forEach(t),Ubo=i($),q_=n($,"LI",{});var uAe=s(q_);vle=n(uAe,"STRONG",{});var KZr=s(vle);Jbo=r(KZr,"xlm"),KZr.forEach(t),Ybo=r(uAe," \u2014 "),zq=n(uAe,"A",{href:!0});var ZZr=s(zq);Kbo=r(ZZr,"XLMModel"),ZZr.forEach(t),Zbo=r(uAe," (XLM model)"),uAe.forEach(t),evo=i($),N_=n($,"LI",{});var bAe=s(N_);Fle=n(bAe,"STRONG",{});var eet=s(Fle);ovo=r(eet,"xlm-prophetnet"),eet.forEach(t),rvo=r(bAe," \u2014 "),Wq=n(bAe,"A",{href:!0});var oet=s(Wq);tvo=r(oet,"XLMProphetNetModel"),oet.forEach(t),avo=r(bAe," (XLMProphetNet model)"),bAe.forEach(t),nvo=i($),j_=n($,"LI",{});var vAe=s(j_);Tle=n(vAe,"STRONG",{});var ret=s(Tle);svo=r(ret,"xlm-roberta"),ret.forEach(t),lvo=r(vAe," \u2014 "),Qq=n(vAe,"A",{href:!0});var tet=s(Qq);ivo=r(tet,"XLMRobertaModel"),tet.forEach(t),dvo=r(vAe," (XLM-RoBERTa model)"),vAe.forEach(t),cvo=i($),D_=n($,"LI",{});var FAe=s(D_);Mle=n(FAe,"STRONG",{});var aet=s(Mle);fvo=r(aet,"xlm-roberta-xl"),aet.forEach(t),mvo=r(FAe," \u2014 "),Hq=n(FAe,"A",{href:!0});var net=s(Hq);gvo=r(net,"XLMRobertaXLModel"),net.forEach(t),hvo=r(FAe," (XLM-RoBERTa-XL model)"),FAe.forEach(t),pvo=i($),G_=n($,"LI",{});var TAe=s(G_);Ele=n(TAe,"STRONG",{});var set=s(Ele);_vo=r(set,"xlnet"),set.forEach(t),uvo=r(TAe," \u2014 "),Uq=n(TAe,"A",{href:!0});var iet=s(Uq);bvo=r(iet,"XLNetModel"),iet.forEach(t),vvo=r(TAe," (XLNet model)"),TAe.forEach(t),Fvo=i($),O_=n($,"LI",{});var MAe=s(O_);Cle=n(MAe,"STRONG",{});var det=s(Cle);Tvo=r(det,"yolos"),det.forEach(t),Mvo=r(MAe," \u2014 "),Jq=n(MAe,"A",{href:!0});var cet=s(Jq);Evo=r(cet,"YolosModel"),cet.forEach(t),Cvo=r(MAe," (YOLOS model)"),MAe.forEach(t),wvo=i($),V_=n($,"LI",{});var EAe=s(V_);wle=n(EAe,"STRONG",{});var fet=s(wle);Avo=r(fet,"yoso"),fet.forEach(t),yvo=r(EAe," \u2014 "),Yq=n(EAe,"A",{href:!0});var met=s(Yq);Lvo=r(met,"YosoModel"),met.forEach(t),xvo=r(EAe," (YOSO model)"),EAe.forEach(t),$.forEach(t),$vo=i(oa),X_=n(oa,"P",{});var CAe=s(X_);kvo=r(CAe,"The model is set in evaluation mode by default using "),Ale=n(CAe,"CODE",{});var get=s(Ale);Svo=r(get,"model.eval()"),get.forEach(t),Rvo=r(CAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yle=n(CAe,"CODE",{});var het=s(yle);Pvo=r(het,"model.train()"),het.forEach(t),CAe.forEach(t),Bvo=i(oa),T(z_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),rqe=i(f),yi=n(f,"H2",{class:!0});var sje=s(yi);W_=n(sje,"A",{id:!0,class:!0,href:!0});var pet=s(W_);Lle=n(pet,"SPAN",{});var _et=s(Lle);T(OA.$$.fragment,_et),_et.forEach(t),pet.forEach(t),Ivo=i(sje),xle=n(sje,"SPAN",{});var uet=s(xle);qvo=r(uet,"AutoModelForPreTraining"),uet.forEach(t),sje.forEach(t),tqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(VA.$$.fragment,Gs),Nvo=i(Gs),Li=n(Gs,"P",{});var qK=s(Li);jvo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=n(qK,"A",{href:!0});var bet=s(Kq);Dvo=r(bet,"from_pretrained()"),bet.forEach(t),Gvo=r(qK," class method or the "),Zq=n(qK,"A",{href:!0});var vet=s(Zq);Ovo=r(vet,"from_config()"),vet.forEach(t),Vvo=r(qK,` class
method.`),qK.forEach(t),Xvo=i(Gs),XA=n(Gs,"P",{});var lje=s(XA);zvo=r(lje,"This class cannot be instantiated directly using "),$le=n(lje,"CODE",{});var Fet=s($le);Wvo=r(Fet,"__init__()"),Fet.forEach(t),Qvo=r(lje," (throws an error)."),lje.forEach(t),Hvo=i(Gs),at=n(Gs,"DIV",{class:!0});var uw=s(at);T(zA.$$.fragment,uw),Uvo=i(uw),kle=n(uw,"P",{});var Tet=s(kle);Jvo=r(Tet,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tet.forEach(t),Yvo=i(uw),xi=n(uw,"P",{});var NK=s(xi);Kvo=r(NK,`Note:
Loading a model from its configuration file does `),Sle=n(NK,"STRONG",{});var Met=s(Sle);Zvo=r(Met,"not"),Met.forEach(t),eFo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=n(NK,"A",{href:!0});var Eet=s(eN);oFo=r(Eet,"from_pretrained()"),Eet.forEach(t),rFo=r(NK," to load the model weights."),NK.forEach(t),tFo=i(uw),T(Q_.$$.fragment,uw),uw.forEach(t),aFo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(WA.$$.fragment,ra),nFo=i(ra),Rle=n(ra,"P",{});var Cet=s(Rle);sFo=r(Cet,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cet.forEach(t),lFo=i(ra),xa=n(ra,"P",{});var bw=s(xa);iFo=r(bw,"The model class to instantiate is selected based on the "),Ple=n(bw,"CODE",{});var wet=s(Ple);dFo=r(wet,"model_type"),wet.forEach(t),cFo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Ble=n(bw,"CODE",{});var Aet=s(Ble);fFo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),mFo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(bw,"CODE",{});var yet=s(Ile);gFo=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),hFo=r(bw,":"),bw.forEach(t),pFo=i(ra),G=n(ra,"UL",{});var O=s(G);H_=n(O,"LI",{});var wAe=s(H_);qle=n(wAe,"STRONG",{});var Let=s(qle);_Fo=r(Let,"albert"),Let.forEach(t),uFo=r(wAe," \u2014 "),oN=n(wAe,"A",{href:!0});var xet=s(oN);bFo=r(xet,"AlbertForPreTraining"),xet.forEach(t),vFo=r(wAe," (ALBERT model)"),wAe.forEach(t),FFo=i(O),U_=n(O,"LI",{});var AAe=s(U_);Nle=n(AAe,"STRONG",{});var $et=s(Nle);TFo=r($et,"bart"),$et.forEach(t),MFo=r(AAe," \u2014 "),rN=n(AAe,"A",{href:!0});var ket=s(rN);EFo=r(ket,"BartForConditionalGeneration"),ket.forEach(t),CFo=r(AAe," (BART model)"),AAe.forEach(t),wFo=i(O),J_=n(O,"LI",{});var yAe=s(J_);jle=n(yAe,"STRONG",{});var Set=s(jle);AFo=r(Set,"bert"),Set.forEach(t),yFo=r(yAe," \u2014 "),tN=n(yAe,"A",{href:!0});var Ret=s(tN);LFo=r(Ret,"BertForPreTraining"),Ret.forEach(t),xFo=r(yAe," (BERT model)"),yAe.forEach(t),$Fo=i(O),Y_=n(O,"LI",{});var LAe=s(Y_);Dle=n(LAe,"STRONG",{});var Pet=s(Dle);kFo=r(Pet,"big_bird"),Pet.forEach(t),SFo=r(LAe," \u2014 "),aN=n(LAe,"A",{href:!0});var Bet=s(aN);RFo=r(Bet,"BigBirdForPreTraining"),Bet.forEach(t),PFo=r(LAe," (BigBird model)"),LAe.forEach(t),BFo=i(O),K_=n(O,"LI",{});var xAe=s(K_);Gle=n(xAe,"STRONG",{});var Iet=s(Gle);IFo=r(Iet,"camembert"),Iet.forEach(t),qFo=r(xAe," \u2014 "),nN=n(xAe,"A",{href:!0});var qet=s(nN);NFo=r(qet,"CamembertForMaskedLM"),qet.forEach(t),jFo=r(xAe," (CamemBERT model)"),xAe.forEach(t),DFo=i(O),Z_=n(O,"LI",{});var $Ae=s(Z_);Ole=n($Ae,"STRONG",{});var Net=s(Ole);GFo=r(Net,"ctrl"),Net.forEach(t),OFo=r($Ae," \u2014 "),sN=n($Ae,"A",{href:!0});var jet=s(sN);VFo=r(jet,"CTRLLMHeadModel"),jet.forEach(t),XFo=r($Ae," (CTRL model)"),$Ae.forEach(t),zFo=i(O),eu=n(O,"LI",{});var kAe=s(eu);Vle=n(kAe,"STRONG",{});var Det=s(Vle);WFo=r(Det,"data2vec-text"),Det.forEach(t),QFo=r(kAe," \u2014 "),lN=n(kAe,"A",{href:!0});var Get=s(lN);HFo=r(Get,"Data2VecTextForMaskedLM"),Get.forEach(t),UFo=r(kAe," (Data2VecText model)"),kAe.forEach(t),JFo=i(O),ou=n(O,"LI",{});var SAe=s(ou);Xle=n(SAe,"STRONG",{});var Oet=s(Xle);YFo=r(Oet,"deberta"),Oet.forEach(t),KFo=r(SAe," \u2014 "),iN=n(SAe,"A",{href:!0});var Vet=s(iN);ZFo=r(Vet,"DebertaForMaskedLM"),Vet.forEach(t),eTo=r(SAe," (DeBERTa model)"),SAe.forEach(t),oTo=i(O),ru=n(O,"LI",{});var RAe=s(ru);zle=n(RAe,"STRONG",{});var Xet=s(zle);rTo=r(Xet,"deberta-v2"),Xet.forEach(t),tTo=r(RAe," \u2014 "),dN=n(RAe,"A",{href:!0});var zet=s(dN);aTo=r(zet,"DebertaV2ForMaskedLM"),zet.forEach(t),nTo=r(RAe," (DeBERTa-v2 model)"),RAe.forEach(t),sTo=i(O),tu=n(O,"LI",{});var PAe=s(tu);Wle=n(PAe,"STRONG",{});var Wet=s(Wle);lTo=r(Wet,"distilbert"),Wet.forEach(t),iTo=r(PAe," \u2014 "),cN=n(PAe,"A",{href:!0});var Qet=s(cN);dTo=r(Qet,"DistilBertForMaskedLM"),Qet.forEach(t),cTo=r(PAe," (DistilBERT model)"),PAe.forEach(t),fTo=i(O),au=n(O,"LI",{});var BAe=s(au);Qle=n(BAe,"STRONG",{});var Het=s(Qle);mTo=r(Het,"electra"),Het.forEach(t),gTo=r(BAe," \u2014 "),fN=n(BAe,"A",{href:!0});var Uet=s(fN);hTo=r(Uet,"ElectraForPreTraining"),Uet.forEach(t),pTo=r(BAe," (ELECTRA model)"),BAe.forEach(t),_To=i(O),nu=n(O,"LI",{});var IAe=s(nu);Hle=n(IAe,"STRONG",{});var Jet=s(Hle);uTo=r(Jet,"flaubert"),Jet.forEach(t),bTo=r(IAe," \u2014 "),mN=n(IAe,"A",{href:!0});var Yet=s(mN);vTo=r(Yet,"FlaubertWithLMHeadModel"),Yet.forEach(t),FTo=r(IAe," (FlauBERT model)"),IAe.forEach(t),TTo=i(O),su=n(O,"LI",{});var qAe=s(su);Ule=n(qAe,"STRONG",{});var Ket=s(Ule);MTo=r(Ket,"flava"),Ket.forEach(t),ETo=r(qAe," \u2014 "),gN=n(qAe,"A",{href:!0});var Zet=s(gN);CTo=r(Zet,"FlavaForPreTraining"),Zet.forEach(t),wTo=r(qAe," (Flava model)"),qAe.forEach(t),ATo=i(O),lu=n(O,"LI",{});var NAe=s(lu);Jle=n(NAe,"STRONG",{});var eot=s(Jle);yTo=r(eot,"fnet"),eot.forEach(t),LTo=r(NAe," \u2014 "),hN=n(NAe,"A",{href:!0});var oot=s(hN);xTo=r(oot,"FNetForPreTraining"),oot.forEach(t),$To=r(NAe," (FNet model)"),NAe.forEach(t),kTo=i(O),iu=n(O,"LI",{});var jAe=s(iu);Yle=n(jAe,"STRONG",{});var rot=s(Yle);STo=r(rot,"fsmt"),rot.forEach(t),RTo=r(jAe," \u2014 "),pN=n(jAe,"A",{href:!0});var tot=s(pN);PTo=r(tot,"FSMTForConditionalGeneration"),tot.forEach(t),BTo=r(jAe," (FairSeq Machine-Translation model)"),jAe.forEach(t),ITo=i(O),du=n(O,"LI",{});var DAe=s(du);Kle=n(DAe,"STRONG",{});var aot=s(Kle);qTo=r(aot,"funnel"),aot.forEach(t),NTo=r(DAe," \u2014 "),_N=n(DAe,"A",{href:!0});var not=s(_N);jTo=r(not,"FunnelForPreTraining"),not.forEach(t),DTo=r(DAe," (Funnel Transformer model)"),DAe.forEach(t),GTo=i(O),cu=n(O,"LI",{});var GAe=s(cu);Zle=n(GAe,"STRONG",{});var sot=s(Zle);OTo=r(sot,"gpt2"),sot.forEach(t),VTo=r(GAe," \u2014 "),uN=n(GAe,"A",{href:!0});var lot=s(uN);XTo=r(lot,"GPT2LMHeadModel"),lot.forEach(t),zTo=r(GAe," (OpenAI GPT-2 model)"),GAe.forEach(t),WTo=i(O),fu=n(O,"LI",{});var OAe=s(fu);eie=n(OAe,"STRONG",{});var iot=s(eie);QTo=r(iot,"ibert"),iot.forEach(t),HTo=r(OAe," \u2014 "),bN=n(OAe,"A",{href:!0});var dot=s(bN);UTo=r(dot,"IBertForMaskedLM"),dot.forEach(t),JTo=r(OAe," (I-BERT model)"),OAe.forEach(t),YTo=i(O),mu=n(O,"LI",{});var VAe=s(mu);oie=n(VAe,"STRONG",{});var cot=s(oie);KTo=r(cot,"layoutlm"),cot.forEach(t),ZTo=r(VAe," \u2014 "),vN=n(VAe,"A",{href:!0});var fot=s(vN);e7o=r(fot,"LayoutLMForMaskedLM"),fot.forEach(t),o7o=r(VAe," (LayoutLM model)"),VAe.forEach(t),r7o=i(O),gu=n(O,"LI",{});var XAe=s(gu);rie=n(XAe,"STRONG",{});var mot=s(rie);t7o=r(mot,"longformer"),mot.forEach(t),a7o=r(XAe," \u2014 "),FN=n(XAe,"A",{href:!0});var got=s(FN);n7o=r(got,"LongformerForMaskedLM"),got.forEach(t),s7o=r(XAe," (Longformer model)"),XAe.forEach(t),l7o=i(O),hu=n(O,"LI",{});var zAe=s(hu);tie=n(zAe,"STRONG",{});var hot=s(tie);i7o=r(hot,"lxmert"),hot.forEach(t),d7o=r(zAe," \u2014 "),TN=n(zAe,"A",{href:!0});var pot=s(TN);c7o=r(pot,"LxmertForPreTraining"),pot.forEach(t),f7o=r(zAe," (LXMERT model)"),zAe.forEach(t),m7o=i(O),pu=n(O,"LI",{});var WAe=s(pu);aie=n(WAe,"STRONG",{});var _ot=s(aie);g7o=r(_ot,"megatron-bert"),_ot.forEach(t),h7o=r(WAe," \u2014 "),MN=n(WAe,"A",{href:!0});var uot=s(MN);p7o=r(uot,"MegatronBertForPreTraining"),uot.forEach(t),_7o=r(WAe," (MegatronBert model)"),WAe.forEach(t),u7o=i(O),_u=n(O,"LI",{});var QAe=s(_u);nie=n(QAe,"STRONG",{});var bot=s(nie);b7o=r(bot,"mobilebert"),bot.forEach(t),v7o=r(QAe," \u2014 "),EN=n(QAe,"A",{href:!0});var vot=s(EN);F7o=r(vot,"MobileBertForPreTraining"),vot.forEach(t),T7o=r(QAe," (MobileBERT model)"),QAe.forEach(t),M7o=i(O),uu=n(O,"LI",{});var HAe=s(uu);sie=n(HAe,"STRONG",{});var Fot=s(sie);E7o=r(Fot,"mpnet"),Fot.forEach(t),C7o=r(HAe," \u2014 "),CN=n(HAe,"A",{href:!0});var Tot=s(CN);w7o=r(Tot,"MPNetForMaskedLM"),Tot.forEach(t),A7o=r(HAe," (MPNet model)"),HAe.forEach(t),y7o=i(O),bu=n(O,"LI",{});var UAe=s(bu);lie=n(UAe,"STRONG",{});var Mot=s(lie);L7o=r(Mot,"openai-gpt"),Mot.forEach(t),x7o=r(UAe," \u2014 "),wN=n(UAe,"A",{href:!0});var Eot=s(wN);$7o=r(Eot,"OpenAIGPTLMHeadModel"),Eot.forEach(t),k7o=r(UAe," (OpenAI GPT model)"),UAe.forEach(t),S7o=i(O),vu=n(O,"LI",{});var JAe=s(vu);iie=n(JAe,"STRONG",{});var Cot=s(iie);R7o=r(Cot,"retribert"),Cot.forEach(t),P7o=r(JAe," \u2014 "),AN=n(JAe,"A",{href:!0});var wot=s(AN);B7o=r(wot,"RetriBertModel"),wot.forEach(t),I7o=r(JAe," (RetriBERT model)"),JAe.forEach(t),q7o=i(O),Fu=n(O,"LI",{});var YAe=s(Fu);die=n(YAe,"STRONG",{});var Aot=s(die);N7o=r(Aot,"roberta"),Aot.forEach(t),j7o=r(YAe," \u2014 "),yN=n(YAe,"A",{href:!0});var yot=s(yN);D7o=r(yot,"RobertaForMaskedLM"),yot.forEach(t),G7o=r(YAe," (RoBERTa model)"),YAe.forEach(t),O7o=i(O),Tu=n(O,"LI",{});var KAe=s(Tu);cie=n(KAe,"STRONG",{});var Lot=s(cie);V7o=r(Lot,"squeezebert"),Lot.forEach(t),X7o=r(KAe," \u2014 "),LN=n(KAe,"A",{href:!0});var xot=s(LN);z7o=r(xot,"SqueezeBertForMaskedLM"),xot.forEach(t),W7o=r(KAe," (SqueezeBERT model)"),KAe.forEach(t),Q7o=i(O),Mu=n(O,"LI",{});var ZAe=s(Mu);fie=n(ZAe,"STRONG",{});var $ot=s(fie);H7o=r($ot,"t5"),$ot.forEach(t),U7o=r(ZAe," \u2014 "),xN=n(ZAe,"A",{href:!0});var kot=s(xN);J7o=r(kot,"T5ForConditionalGeneration"),kot.forEach(t),Y7o=r(ZAe," (T5 model)"),ZAe.forEach(t),K7o=i(O),Eu=n(O,"LI",{});var e6e=s(Eu);mie=n(e6e,"STRONG",{});var Sot=s(mie);Z7o=r(Sot,"tapas"),Sot.forEach(t),eMo=r(e6e," \u2014 "),$N=n(e6e,"A",{href:!0});var Rot=s($N);oMo=r(Rot,"TapasForMaskedLM"),Rot.forEach(t),rMo=r(e6e," (TAPAS model)"),e6e.forEach(t),tMo=i(O),Cu=n(O,"LI",{});var o6e=s(Cu);gie=n(o6e,"STRONG",{});var Pot=s(gie);aMo=r(Pot,"transfo-xl"),Pot.forEach(t),nMo=r(o6e," \u2014 "),kN=n(o6e,"A",{href:!0});var Bot=s(kN);sMo=r(Bot,"TransfoXLLMHeadModel"),Bot.forEach(t),lMo=r(o6e," (Transformer-XL model)"),o6e.forEach(t),iMo=i(O),wu=n(O,"LI",{});var r6e=s(wu);hie=n(r6e,"STRONG",{});var Iot=s(hie);dMo=r(Iot,"unispeech"),Iot.forEach(t),cMo=r(r6e," \u2014 "),SN=n(r6e,"A",{href:!0});var qot=s(SN);fMo=r(qot,"UniSpeechForPreTraining"),qot.forEach(t),mMo=r(r6e," (UniSpeech model)"),r6e.forEach(t),gMo=i(O),Au=n(O,"LI",{});var t6e=s(Au);pie=n(t6e,"STRONG",{});var Not=s(pie);hMo=r(Not,"unispeech-sat"),Not.forEach(t),pMo=r(t6e," \u2014 "),RN=n(t6e,"A",{href:!0});var jot=s(RN);_Mo=r(jot,"UniSpeechSatForPreTraining"),jot.forEach(t),uMo=r(t6e," (UniSpeechSat model)"),t6e.forEach(t),bMo=i(O),yu=n(O,"LI",{});var a6e=s(yu);_ie=n(a6e,"STRONG",{});var Dot=s(_ie);vMo=r(Dot,"visual_bert"),Dot.forEach(t),FMo=r(a6e," \u2014 "),PN=n(a6e,"A",{href:!0});var Got=s(PN);TMo=r(Got,"VisualBertForPreTraining"),Got.forEach(t),MMo=r(a6e," (VisualBert model)"),a6e.forEach(t),EMo=i(O),Lu=n(O,"LI",{});var n6e=s(Lu);uie=n(n6e,"STRONG",{});var Oot=s(uie);CMo=r(Oot,"vit_mae"),Oot.forEach(t),wMo=r(n6e," \u2014 "),BN=n(n6e,"A",{href:!0});var Vot=s(BN);AMo=r(Vot,"ViTMAEForPreTraining"),Vot.forEach(t),yMo=r(n6e," (ViTMAE model)"),n6e.forEach(t),LMo=i(O),xu=n(O,"LI",{});var s6e=s(xu);bie=n(s6e,"STRONG",{});var Xot=s(bie);xMo=r(Xot,"wav2vec2"),Xot.forEach(t),$Mo=r(s6e," \u2014 "),IN=n(s6e,"A",{href:!0});var zot=s(IN);kMo=r(zot,"Wav2Vec2ForPreTraining"),zot.forEach(t),SMo=r(s6e," (Wav2Vec2 model)"),s6e.forEach(t),RMo=i(O),$u=n(O,"LI",{});var l6e=s($u);vie=n(l6e,"STRONG",{});var Wot=s(vie);PMo=r(Wot,"wav2vec2-conformer"),Wot.forEach(t),BMo=r(l6e," \u2014 "),qN=n(l6e,"A",{href:!0});var Qot=s(qN);IMo=r(Qot,"Wav2Vec2ConformerForPreTraining"),Qot.forEach(t),qMo=r(l6e," (Wav2Vec2-Conformer model)"),l6e.forEach(t),NMo=i(O),ku=n(O,"LI",{});var i6e=s(ku);Fie=n(i6e,"STRONG",{});var Hot=s(Fie);jMo=r(Hot,"xlm"),Hot.forEach(t),DMo=r(i6e," \u2014 "),NN=n(i6e,"A",{href:!0});var Uot=s(NN);GMo=r(Uot,"XLMWithLMHeadModel"),Uot.forEach(t),OMo=r(i6e," (XLM model)"),i6e.forEach(t),VMo=i(O),Su=n(O,"LI",{});var d6e=s(Su);Tie=n(d6e,"STRONG",{});var Jot=s(Tie);XMo=r(Jot,"xlm-roberta"),Jot.forEach(t),zMo=r(d6e," \u2014 "),jN=n(d6e,"A",{href:!0});var Yot=s(jN);WMo=r(Yot,"XLMRobertaForMaskedLM"),Yot.forEach(t),QMo=r(d6e," (XLM-RoBERTa model)"),d6e.forEach(t),HMo=i(O),Ru=n(O,"LI",{});var c6e=s(Ru);Mie=n(c6e,"STRONG",{});var Kot=s(Mie);UMo=r(Kot,"xlm-roberta-xl"),Kot.forEach(t),JMo=r(c6e," \u2014 "),DN=n(c6e,"A",{href:!0});var Zot=s(DN);YMo=r(Zot,"XLMRobertaXLForMaskedLM"),Zot.forEach(t),KMo=r(c6e," (XLM-RoBERTa-XL model)"),c6e.forEach(t),ZMo=i(O),Pu=n(O,"LI",{});var f6e=s(Pu);Eie=n(f6e,"STRONG",{});var ert=s(Eie);e4o=r(ert,"xlnet"),ert.forEach(t),o4o=r(f6e," \u2014 "),GN=n(f6e,"A",{href:!0});var ort=s(GN);r4o=r(ort,"XLNetLMHeadModel"),ort.forEach(t),t4o=r(f6e," (XLNet model)"),f6e.forEach(t),O.forEach(t),a4o=i(ra),Bu=n(ra,"P",{});var m6e=s(Bu);n4o=r(m6e,"The model is set in evaluation mode by default using "),Cie=n(m6e,"CODE",{});var rrt=s(Cie);s4o=r(rrt,"model.eval()"),rrt.forEach(t),l4o=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(m6e,"CODE",{});var trt=s(wie);i4o=r(trt,"model.train()"),trt.forEach(t),m6e.forEach(t),d4o=i(ra),T(Iu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),aqe=i(f),$i=n(f,"H2",{class:!0});var ije=s($i);qu=n(ije,"A",{id:!0,class:!0,href:!0});var art=s(qu);Aie=n(art,"SPAN",{});var nrt=s(Aie);T(QA.$$.fragment,nrt),nrt.forEach(t),art.forEach(t),c4o=i(ije),yie=n(ije,"SPAN",{});var srt=s(yie);f4o=r(srt,"AutoModelForCausalLM"),srt.forEach(t),ije.forEach(t),nqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(HA.$$.fragment,Os),m4o=i(Os),ki=n(Os,"P",{});var jK=s(ki);g4o=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ON=n(jK,"A",{href:!0});var lrt=s(ON);h4o=r(lrt,"from_pretrained()"),lrt.forEach(t),p4o=r(jK," class method or the "),VN=n(jK,"A",{href:!0});var irt=s(VN);_4o=r(irt,"from_config()"),irt.forEach(t),u4o=r(jK,` class
method.`),jK.forEach(t),b4o=i(Os),UA=n(Os,"P",{});var dje=s(UA);v4o=r(dje,"This class cannot be instantiated directly using "),Lie=n(dje,"CODE",{});var drt=s(Lie);F4o=r(drt,"__init__()"),drt.forEach(t),T4o=r(dje," (throws an error)."),dje.forEach(t),M4o=i(Os),nt=n(Os,"DIV",{class:!0});var vw=s(nt);T(JA.$$.fragment,vw),E4o=i(vw),xie=n(vw,"P",{});var crt=s(xie);C4o=r(crt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),crt.forEach(t),w4o=i(vw),Si=n(vw,"P",{});var DK=s(Si);A4o=r(DK,`Note:
Loading a model from its configuration file does `),$ie=n(DK,"STRONG",{});var frt=s($ie);y4o=r(frt,"not"),frt.forEach(t),L4o=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(DK,"A",{href:!0});var mrt=s(XN);x4o=r(mrt,"from_pretrained()"),mrt.forEach(t),$4o=r(DK," to load the model weights."),DK.forEach(t),k4o=i(vw),T(Nu.$$.fragment,vw),vw.forEach(t),S4o=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(YA.$$.fragment,ta),R4o=i(ta),kie=n(ta,"P",{});var grt=s(kie);P4o=r(grt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),grt.forEach(t),B4o=i(ta),$a=n(ta,"P",{});var Fw=s($a);I4o=r(Fw,"The model class to instantiate is selected based on the "),Sie=n(Fw,"CODE",{});var hrt=s(Sie);q4o=r(hrt,"model_type"),hrt.forEach(t),N4o=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Rie=n(Fw,"CODE",{});var prt=s(Rie);j4o=r(prt,"pretrained_model_name_or_path"),prt.forEach(t),D4o=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(Fw,"CODE",{});var _rt=s(Pie);G4o=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),O4o=r(Fw,":"),Fw.forEach(t),V4o=i(ta),z=n(ta,"UL",{});var Q=s(z);ju=n(Q,"LI",{});var g6e=s(ju);Bie=n(g6e,"STRONG",{});var urt=s(Bie);X4o=r(urt,"bart"),urt.forEach(t),z4o=r(g6e," \u2014 "),zN=n(g6e,"A",{href:!0});var brt=s(zN);W4o=r(brt,"BartForCausalLM"),brt.forEach(t),Q4o=r(g6e," (BART model)"),g6e.forEach(t),H4o=i(Q),Du=n(Q,"LI",{});var h6e=s(Du);Iie=n(h6e,"STRONG",{});var vrt=s(Iie);U4o=r(vrt,"bert"),vrt.forEach(t),J4o=r(h6e," \u2014 "),WN=n(h6e,"A",{href:!0});var Frt=s(WN);Y4o=r(Frt,"BertLMHeadModel"),Frt.forEach(t),K4o=r(h6e," (BERT model)"),h6e.forEach(t),Z4o=i(Q),Gu=n(Q,"LI",{});var p6e=s(Gu);qie=n(p6e,"STRONG",{});var Trt=s(qie);eEo=r(Trt,"bert-generation"),Trt.forEach(t),oEo=r(p6e," \u2014 "),QN=n(p6e,"A",{href:!0});var Mrt=s(QN);rEo=r(Mrt,"BertGenerationDecoder"),Mrt.forEach(t),tEo=r(p6e," (Bert Generation model)"),p6e.forEach(t),aEo=i(Q),Ou=n(Q,"LI",{});var _6e=s(Ou);Nie=n(_6e,"STRONG",{});var Ert=s(Nie);nEo=r(Ert,"big_bird"),Ert.forEach(t),sEo=r(_6e," \u2014 "),HN=n(_6e,"A",{href:!0});var Crt=s(HN);lEo=r(Crt,"BigBirdForCausalLM"),Crt.forEach(t),iEo=r(_6e," (BigBird model)"),_6e.forEach(t),dEo=i(Q),Vu=n(Q,"LI",{});var u6e=s(Vu);jie=n(u6e,"STRONG",{});var wrt=s(jie);cEo=r(wrt,"bigbird_pegasus"),wrt.forEach(t),fEo=r(u6e," \u2014 "),UN=n(u6e,"A",{href:!0});var Art=s(UN);mEo=r(Art,"BigBirdPegasusForCausalLM"),Art.forEach(t),gEo=r(u6e," (BigBirdPegasus model)"),u6e.forEach(t),hEo=i(Q),Xu=n(Q,"LI",{});var b6e=s(Xu);Die=n(b6e,"STRONG",{});var yrt=s(Die);pEo=r(yrt,"blenderbot"),yrt.forEach(t),_Eo=r(b6e," \u2014 "),JN=n(b6e,"A",{href:!0});var Lrt=s(JN);uEo=r(Lrt,"BlenderbotForCausalLM"),Lrt.forEach(t),bEo=r(b6e," (Blenderbot model)"),b6e.forEach(t),vEo=i(Q),zu=n(Q,"LI",{});var v6e=s(zu);Gie=n(v6e,"STRONG",{});var xrt=s(Gie);FEo=r(xrt,"blenderbot-small"),xrt.forEach(t),TEo=r(v6e," \u2014 "),YN=n(v6e,"A",{href:!0});var $rt=s(YN);MEo=r($rt,"BlenderbotSmallForCausalLM"),$rt.forEach(t),EEo=r(v6e," (BlenderbotSmall model)"),v6e.forEach(t),CEo=i(Q),Wu=n(Q,"LI",{});var F6e=s(Wu);Oie=n(F6e,"STRONG",{});var krt=s(Oie);wEo=r(krt,"camembert"),krt.forEach(t),AEo=r(F6e," \u2014 "),KN=n(F6e,"A",{href:!0});var Srt=s(KN);yEo=r(Srt,"CamembertForCausalLM"),Srt.forEach(t),LEo=r(F6e," (CamemBERT model)"),F6e.forEach(t),xEo=i(Q),Qu=n(Q,"LI",{});var T6e=s(Qu);Vie=n(T6e,"STRONG",{});var Rrt=s(Vie);$Eo=r(Rrt,"ctrl"),Rrt.forEach(t),kEo=r(T6e," \u2014 "),ZN=n(T6e,"A",{href:!0});var Prt=s(ZN);SEo=r(Prt,"CTRLLMHeadModel"),Prt.forEach(t),REo=r(T6e," (CTRL model)"),T6e.forEach(t),PEo=i(Q),Hu=n(Q,"LI",{});var M6e=s(Hu);Xie=n(M6e,"STRONG",{});var Brt=s(Xie);BEo=r(Brt,"data2vec-text"),Brt.forEach(t),IEo=r(M6e," \u2014 "),ej=n(M6e,"A",{href:!0});var Irt=s(ej);qEo=r(Irt,"Data2VecTextForCausalLM"),Irt.forEach(t),NEo=r(M6e," (Data2VecText model)"),M6e.forEach(t),jEo=i(Q),Uu=n(Q,"LI",{});var E6e=s(Uu);zie=n(E6e,"STRONG",{});var qrt=s(zie);DEo=r(qrt,"electra"),qrt.forEach(t),GEo=r(E6e," \u2014 "),oj=n(E6e,"A",{href:!0});var Nrt=s(oj);OEo=r(Nrt,"ElectraForCausalLM"),Nrt.forEach(t),VEo=r(E6e," (ELECTRA model)"),E6e.forEach(t),XEo=i(Q),Ju=n(Q,"LI",{});var C6e=s(Ju);Wie=n(C6e,"STRONG",{});var jrt=s(Wie);zEo=r(jrt,"gpt2"),jrt.forEach(t),WEo=r(C6e," \u2014 "),rj=n(C6e,"A",{href:!0});var Drt=s(rj);QEo=r(Drt,"GPT2LMHeadModel"),Drt.forEach(t),HEo=r(C6e," (OpenAI GPT-2 model)"),C6e.forEach(t),UEo=i(Q),Yu=n(Q,"LI",{});var w6e=s(Yu);Qie=n(w6e,"STRONG",{});var Grt=s(Qie);JEo=r(Grt,"gpt_neo"),Grt.forEach(t),YEo=r(w6e," \u2014 "),tj=n(w6e,"A",{href:!0});var Ort=s(tj);KEo=r(Ort,"GPTNeoForCausalLM"),Ort.forEach(t),ZEo=r(w6e," (GPT Neo model)"),w6e.forEach(t),eCo=i(Q),Ku=n(Q,"LI",{});var A6e=s(Ku);Hie=n(A6e,"STRONG",{});var Vrt=s(Hie);oCo=r(Vrt,"gptj"),Vrt.forEach(t),rCo=r(A6e," \u2014 "),aj=n(A6e,"A",{href:!0});var Xrt=s(aj);tCo=r(Xrt,"GPTJForCausalLM"),Xrt.forEach(t),aCo=r(A6e," (GPT-J model)"),A6e.forEach(t),nCo=i(Q),Zu=n(Q,"LI",{});var y6e=s(Zu);Uie=n(y6e,"STRONG",{});var zrt=s(Uie);sCo=r(zrt,"marian"),zrt.forEach(t),lCo=r(y6e," \u2014 "),nj=n(y6e,"A",{href:!0});var Wrt=s(nj);iCo=r(Wrt,"MarianForCausalLM"),Wrt.forEach(t),dCo=r(y6e," (Marian model)"),y6e.forEach(t),cCo=i(Q),e2=n(Q,"LI",{});var L6e=s(e2);Jie=n(L6e,"STRONG",{});var Qrt=s(Jie);fCo=r(Qrt,"mbart"),Qrt.forEach(t),mCo=r(L6e," \u2014 "),sj=n(L6e,"A",{href:!0});var Hrt=s(sj);gCo=r(Hrt,"MBartForCausalLM"),Hrt.forEach(t),hCo=r(L6e," (mBART model)"),L6e.forEach(t),pCo=i(Q),o2=n(Q,"LI",{});var x6e=s(o2);Yie=n(x6e,"STRONG",{});var Urt=s(Yie);_Co=r(Urt,"megatron-bert"),Urt.forEach(t),uCo=r(x6e," \u2014 "),lj=n(x6e,"A",{href:!0});var Jrt=s(lj);bCo=r(Jrt,"MegatronBertForCausalLM"),Jrt.forEach(t),vCo=r(x6e," (MegatronBert model)"),x6e.forEach(t),FCo=i(Q),r2=n(Q,"LI",{});var $6e=s(r2);Kie=n($6e,"STRONG",{});var Yrt=s(Kie);TCo=r(Yrt,"openai-gpt"),Yrt.forEach(t),MCo=r($6e," \u2014 "),ij=n($6e,"A",{href:!0});var Krt=s(ij);ECo=r(Krt,"OpenAIGPTLMHeadModel"),Krt.forEach(t),CCo=r($6e," (OpenAI GPT model)"),$6e.forEach(t),wCo=i(Q),t2=n(Q,"LI",{});var k6e=s(t2);Zie=n(k6e,"STRONG",{});var Zrt=s(Zie);ACo=r(Zrt,"opt"),Zrt.forEach(t),yCo=r(k6e," \u2014 "),dj=n(k6e,"A",{href:!0});var ett=s(dj);LCo=r(ett,"OPTForCausalLM"),ett.forEach(t),xCo=r(k6e," (OPT model)"),k6e.forEach(t),$Co=i(Q),a2=n(Q,"LI",{});var S6e=s(a2);ede=n(S6e,"STRONG",{});var ott=s(ede);kCo=r(ott,"pegasus"),ott.forEach(t),SCo=r(S6e," \u2014 "),cj=n(S6e,"A",{href:!0});var rtt=s(cj);RCo=r(rtt,"PegasusForCausalLM"),rtt.forEach(t),PCo=r(S6e," (Pegasus model)"),S6e.forEach(t),BCo=i(Q),n2=n(Q,"LI",{});var R6e=s(n2);ode=n(R6e,"STRONG",{});var ttt=s(ode);ICo=r(ttt,"plbart"),ttt.forEach(t),qCo=r(R6e," \u2014 "),fj=n(R6e,"A",{href:!0});var att=s(fj);NCo=r(att,"PLBartForCausalLM"),att.forEach(t),jCo=r(R6e," (PLBart model)"),R6e.forEach(t),DCo=i(Q),s2=n(Q,"LI",{});var P6e=s(s2);rde=n(P6e,"STRONG",{});var ntt=s(rde);GCo=r(ntt,"prophetnet"),ntt.forEach(t),OCo=r(P6e," \u2014 "),mj=n(P6e,"A",{href:!0});var stt=s(mj);VCo=r(stt,"ProphetNetForCausalLM"),stt.forEach(t),XCo=r(P6e," (ProphetNet model)"),P6e.forEach(t),zCo=i(Q),l2=n(Q,"LI",{});var B6e=s(l2);tde=n(B6e,"STRONG",{});var ltt=s(tde);WCo=r(ltt,"qdqbert"),ltt.forEach(t),QCo=r(B6e," \u2014 "),gj=n(B6e,"A",{href:!0});var itt=s(gj);HCo=r(itt,"QDQBertLMHeadModel"),itt.forEach(t),UCo=r(B6e," (QDQBert model)"),B6e.forEach(t),JCo=i(Q),i2=n(Q,"LI",{});var I6e=s(i2);ade=n(I6e,"STRONG",{});var dtt=s(ade);YCo=r(dtt,"reformer"),dtt.forEach(t),KCo=r(I6e," \u2014 "),hj=n(I6e,"A",{href:!0});var ctt=s(hj);ZCo=r(ctt,"ReformerModelWithLMHead"),ctt.forEach(t),e5o=r(I6e," (Reformer model)"),I6e.forEach(t),o5o=i(Q),d2=n(Q,"LI",{});var q6e=s(d2);nde=n(q6e,"STRONG",{});var ftt=s(nde);r5o=r(ftt,"rembert"),ftt.forEach(t),t5o=r(q6e," \u2014 "),pj=n(q6e,"A",{href:!0});var mtt=s(pj);a5o=r(mtt,"RemBertForCausalLM"),mtt.forEach(t),n5o=r(q6e," (RemBERT model)"),q6e.forEach(t),s5o=i(Q),c2=n(Q,"LI",{});var N6e=s(c2);sde=n(N6e,"STRONG",{});var gtt=s(sde);l5o=r(gtt,"roberta"),gtt.forEach(t),i5o=r(N6e," \u2014 "),_j=n(N6e,"A",{href:!0});var htt=s(_j);d5o=r(htt,"RobertaForCausalLM"),htt.forEach(t),c5o=r(N6e," (RoBERTa model)"),N6e.forEach(t),f5o=i(Q),f2=n(Q,"LI",{});var j6e=s(f2);lde=n(j6e,"STRONG",{});var ptt=s(lde);m5o=r(ptt,"roformer"),ptt.forEach(t),g5o=r(j6e," \u2014 "),uj=n(j6e,"A",{href:!0});var _tt=s(uj);h5o=r(_tt,"RoFormerForCausalLM"),_tt.forEach(t),p5o=r(j6e," (RoFormer model)"),j6e.forEach(t),_5o=i(Q),m2=n(Q,"LI",{});var D6e=s(m2);ide=n(D6e,"STRONG",{});var utt=s(ide);u5o=r(utt,"speech_to_text_2"),utt.forEach(t),b5o=r(D6e," \u2014 "),bj=n(D6e,"A",{href:!0});var btt=s(bj);v5o=r(btt,"Speech2Text2ForCausalLM"),btt.forEach(t),F5o=r(D6e," (Speech2Text2 model)"),D6e.forEach(t),T5o=i(Q),g2=n(Q,"LI",{});var G6e=s(g2);dde=n(G6e,"STRONG",{});var vtt=s(dde);M5o=r(vtt,"transfo-xl"),vtt.forEach(t),E5o=r(G6e," \u2014 "),vj=n(G6e,"A",{href:!0});var Ftt=s(vj);C5o=r(Ftt,"TransfoXLLMHeadModel"),Ftt.forEach(t),w5o=r(G6e," (Transformer-XL model)"),G6e.forEach(t),A5o=i(Q),h2=n(Q,"LI",{});var O6e=s(h2);cde=n(O6e,"STRONG",{});var Ttt=s(cde);y5o=r(Ttt,"trocr"),Ttt.forEach(t),L5o=r(O6e," \u2014 "),Fj=n(O6e,"A",{href:!0});var Mtt=s(Fj);x5o=r(Mtt,"TrOCRForCausalLM"),Mtt.forEach(t),$5o=r(O6e," (TrOCR model)"),O6e.forEach(t),k5o=i(Q),p2=n(Q,"LI",{});var V6e=s(p2);fde=n(V6e,"STRONG",{});var Ett=s(fde);S5o=r(Ett,"xglm"),Ett.forEach(t),R5o=r(V6e," \u2014 "),Tj=n(V6e,"A",{href:!0});var Ctt=s(Tj);P5o=r(Ctt,"XGLMForCausalLM"),Ctt.forEach(t),B5o=r(V6e," (XGLM model)"),V6e.forEach(t),I5o=i(Q),_2=n(Q,"LI",{});var X6e=s(_2);mde=n(X6e,"STRONG",{});var wtt=s(mde);q5o=r(wtt,"xlm"),wtt.forEach(t),N5o=r(X6e," \u2014 "),Mj=n(X6e,"A",{href:!0});var Att=s(Mj);j5o=r(Att,"XLMWithLMHeadModel"),Att.forEach(t),D5o=r(X6e," (XLM model)"),X6e.forEach(t),G5o=i(Q),u2=n(Q,"LI",{});var z6e=s(u2);gde=n(z6e,"STRONG",{});var ytt=s(gde);O5o=r(ytt,"xlm-prophetnet"),ytt.forEach(t),V5o=r(z6e," \u2014 "),Ej=n(z6e,"A",{href:!0});var Ltt=s(Ej);X5o=r(Ltt,"XLMProphetNetForCausalLM"),Ltt.forEach(t),z5o=r(z6e," (XLMProphetNet model)"),z6e.forEach(t),W5o=i(Q),b2=n(Q,"LI",{});var W6e=s(b2);hde=n(W6e,"STRONG",{});var xtt=s(hde);Q5o=r(xtt,"xlm-roberta"),xtt.forEach(t),H5o=r(W6e," \u2014 "),Cj=n(W6e,"A",{href:!0});var $tt=s(Cj);U5o=r($tt,"XLMRobertaForCausalLM"),$tt.forEach(t),J5o=r(W6e," (XLM-RoBERTa model)"),W6e.forEach(t),Y5o=i(Q),v2=n(Q,"LI",{});var Q6e=s(v2);pde=n(Q6e,"STRONG",{});var ktt=s(pde);K5o=r(ktt,"xlm-roberta-xl"),ktt.forEach(t),Z5o=r(Q6e," \u2014 "),wj=n(Q6e,"A",{href:!0});var Stt=s(wj);e3o=r(Stt,"XLMRobertaXLForCausalLM"),Stt.forEach(t),o3o=r(Q6e," (XLM-RoBERTa-XL model)"),Q6e.forEach(t),r3o=i(Q),F2=n(Q,"LI",{});var H6e=s(F2);_de=n(H6e,"STRONG",{});var Rtt=s(_de);t3o=r(Rtt,"xlnet"),Rtt.forEach(t),a3o=r(H6e," \u2014 "),Aj=n(H6e,"A",{href:!0});var Ptt=s(Aj);n3o=r(Ptt,"XLNetLMHeadModel"),Ptt.forEach(t),s3o=r(H6e," (XLNet model)"),H6e.forEach(t),Q.forEach(t),l3o=i(ta),T2=n(ta,"P",{});var U6e=s(T2);i3o=r(U6e,"The model is set in evaluation mode by default using "),ude=n(U6e,"CODE",{});var Btt=s(ude);d3o=r(Btt,"model.eval()"),Btt.forEach(t),c3o=r(U6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=n(U6e,"CODE",{});var Itt=s(bde);f3o=r(Itt,"model.train()"),Itt.forEach(t),U6e.forEach(t),m3o=i(ta),T(M2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),sqe=i(f),Ri=n(f,"H2",{class:!0});var cje=s(Ri);E2=n(cje,"A",{id:!0,class:!0,href:!0});var qtt=s(E2);vde=n(qtt,"SPAN",{});var Ntt=s(vde);T(KA.$$.fragment,Ntt),Ntt.forEach(t),qtt.forEach(t),g3o=i(cje),Fde=n(cje,"SPAN",{});var jtt=s(Fde);h3o=r(jtt,"AutoModelForMaskedLM"),jtt.forEach(t),cje.forEach(t),lqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(ZA.$$.fragment,Vs),p3o=i(Vs),Pi=n(Vs,"P",{});var GK=s(Pi);_3o=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yj=n(GK,"A",{href:!0});var Dtt=s(yj);u3o=r(Dtt,"from_pretrained()"),Dtt.forEach(t),b3o=r(GK," class method or the "),Lj=n(GK,"A",{href:!0});var Gtt=s(Lj);v3o=r(Gtt,"from_config()"),Gtt.forEach(t),F3o=r(GK,` class
method.`),GK.forEach(t),T3o=i(Vs),e6=n(Vs,"P",{});var fje=s(e6);M3o=r(fje,"This class cannot be instantiated directly using "),Tde=n(fje,"CODE",{});var Ott=s(Tde);E3o=r(Ott,"__init__()"),Ott.forEach(t),C3o=r(fje," (throws an error)."),fje.forEach(t),w3o=i(Vs),st=n(Vs,"DIV",{class:!0});var Tw=s(st);T(o6.$$.fragment,Tw),A3o=i(Tw),Mde=n(Tw,"P",{});var Vtt=s(Mde);y3o=r(Vtt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vtt.forEach(t),L3o=i(Tw),Bi=n(Tw,"P",{});var OK=s(Bi);x3o=r(OK,`Note:
Loading a model from its configuration file does `),Ede=n(OK,"STRONG",{});var Xtt=s(Ede);$3o=r(Xtt,"not"),Xtt.forEach(t),k3o=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n(OK,"A",{href:!0});var ztt=s(xj);S3o=r(ztt,"from_pretrained()"),ztt.forEach(t),R3o=r(OK," to load the model weights."),OK.forEach(t),P3o=i(Tw),T(C2.$$.fragment,Tw),Tw.forEach(t),B3o=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(r6.$$.fragment,aa),I3o=i(aa),Cde=n(aa,"P",{});var Wtt=s(Cde);q3o=r(Wtt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wtt.forEach(t),N3o=i(aa),ka=n(aa,"P",{});var Mw=s(ka);j3o=r(Mw,"The model class to instantiate is selected based on the "),wde=n(Mw,"CODE",{});var Qtt=s(wde);D3o=r(Qtt,"model_type"),Qtt.forEach(t),G3o=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Ade=n(Mw,"CODE",{});var Htt=s(Ade);O3o=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),V3o=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(Mw,"CODE",{});var Utt=s(yde);X3o=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),z3o=r(Mw,":"),Mw.forEach(t),W3o=i(aa),W=n(aa,"UL",{});var H=s(W);w2=n(H,"LI",{});var J6e=s(w2);Lde=n(J6e,"STRONG",{});var Jtt=s(Lde);Q3o=r(Jtt,"albert"),Jtt.forEach(t),H3o=r(J6e," \u2014 "),$j=n(J6e,"A",{href:!0});var Ytt=s($j);U3o=r(Ytt,"AlbertForMaskedLM"),Ytt.forEach(t),J3o=r(J6e," (ALBERT model)"),J6e.forEach(t),Y3o=i(H),A2=n(H,"LI",{});var Y6e=s(A2);xde=n(Y6e,"STRONG",{});var Ktt=s(xde);K3o=r(Ktt,"bart"),Ktt.forEach(t),Z3o=r(Y6e," \u2014 "),kj=n(Y6e,"A",{href:!0});var Ztt=s(kj);ewo=r(Ztt,"BartForConditionalGeneration"),Ztt.forEach(t),owo=r(Y6e," (BART model)"),Y6e.forEach(t),rwo=i(H),y2=n(H,"LI",{});var K6e=s(y2);$de=n(K6e,"STRONG",{});var eat=s($de);two=r(eat,"bert"),eat.forEach(t),awo=r(K6e," \u2014 "),Sj=n(K6e,"A",{href:!0});var oat=s(Sj);nwo=r(oat,"BertForMaskedLM"),oat.forEach(t),swo=r(K6e," (BERT model)"),K6e.forEach(t),lwo=i(H),L2=n(H,"LI",{});var Z6e=s(L2);kde=n(Z6e,"STRONG",{});var rat=s(kde);iwo=r(rat,"big_bird"),rat.forEach(t),dwo=r(Z6e," \u2014 "),Rj=n(Z6e,"A",{href:!0});var tat=s(Rj);cwo=r(tat,"BigBirdForMaskedLM"),tat.forEach(t),fwo=r(Z6e," (BigBird model)"),Z6e.forEach(t),mwo=i(H),x2=n(H,"LI",{});var eye=s(x2);Sde=n(eye,"STRONG",{});var aat=s(Sde);gwo=r(aat,"camembert"),aat.forEach(t),hwo=r(eye," \u2014 "),Pj=n(eye,"A",{href:!0});var nat=s(Pj);pwo=r(nat,"CamembertForMaskedLM"),nat.forEach(t),_wo=r(eye," (CamemBERT model)"),eye.forEach(t),uwo=i(H),$2=n(H,"LI",{});var oye=s($2);Rde=n(oye,"STRONG",{});var sat=s(Rde);bwo=r(sat,"convbert"),sat.forEach(t),vwo=r(oye," \u2014 "),Bj=n(oye,"A",{href:!0});var lat=s(Bj);Fwo=r(lat,"ConvBertForMaskedLM"),lat.forEach(t),Two=r(oye," (ConvBERT model)"),oye.forEach(t),Mwo=i(H),k2=n(H,"LI",{});var rye=s(k2);Pde=n(rye,"STRONG",{});var iat=s(Pde);Ewo=r(iat,"data2vec-text"),iat.forEach(t),Cwo=r(rye," \u2014 "),Ij=n(rye,"A",{href:!0});var dat=s(Ij);wwo=r(dat,"Data2VecTextForMaskedLM"),dat.forEach(t),Awo=r(rye," (Data2VecText model)"),rye.forEach(t),ywo=i(H),S2=n(H,"LI",{});var tye=s(S2);Bde=n(tye,"STRONG",{});var cat=s(Bde);Lwo=r(cat,"deberta"),cat.forEach(t),xwo=r(tye," \u2014 "),qj=n(tye,"A",{href:!0});var fat=s(qj);$wo=r(fat,"DebertaForMaskedLM"),fat.forEach(t),kwo=r(tye," (DeBERTa model)"),tye.forEach(t),Swo=i(H),R2=n(H,"LI",{});var aye=s(R2);Ide=n(aye,"STRONG",{});var mat=s(Ide);Rwo=r(mat,"deberta-v2"),mat.forEach(t),Pwo=r(aye," \u2014 "),Nj=n(aye,"A",{href:!0});var gat=s(Nj);Bwo=r(gat,"DebertaV2ForMaskedLM"),gat.forEach(t),Iwo=r(aye," (DeBERTa-v2 model)"),aye.forEach(t),qwo=i(H),P2=n(H,"LI",{});var nye=s(P2);qde=n(nye,"STRONG",{});var hat=s(qde);Nwo=r(hat,"distilbert"),hat.forEach(t),jwo=r(nye," \u2014 "),jj=n(nye,"A",{href:!0});var pat=s(jj);Dwo=r(pat,"DistilBertForMaskedLM"),pat.forEach(t),Gwo=r(nye," (DistilBERT model)"),nye.forEach(t),Owo=i(H),B2=n(H,"LI",{});var sye=s(B2);Nde=n(sye,"STRONG",{});var _at=s(Nde);Vwo=r(_at,"electra"),_at.forEach(t),Xwo=r(sye," \u2014 "),Dj=n(sye,"A",{href:!0});var uat=s(Dj);zwo=r(uat,"ElectraForMaskedLM"),uat.forEach(t),Wwo=r(sye," (ELECTRA model)"),sye.forEach(t),Qwo=i(H),I2=n(H,"LI",{});var lye=s(I2);jde=n(lye,"STRONG",{});var bat=s(jde);Hwo=r(bat,"flaubert"),bat.forEach(t),Uwo=r(lye," \u2014 "),Gj=n(lye,"A",{href:!0});var vat=s(Gj);Jwo=r(vat,"FlaubertWithLMHeadModel"),vat.forEach(t),Ywo=r(lye," (FlauBERT model)"),lye.forEach(t),Kwo=i(H),q2=n(H,"LI",{});var iye=s(q2);Dde=n(iye,"STRONG",{});var Fat=s(Dde);Zwo=r(Fat,"fnet"),Fat.forEach(t),e0o=r(iye," \u2014 "),Oj=n(iye,"A",{href:!0});var Tat=s(Oj);o0o=r(Tat,"FNetForMaskedLM"),Tat.forEach(t),r0o=r(iye," (FNet model)"),iye.forEach(t),t0o=i(H),N2=n(H,"LI",{});var dye=s(N2);Gde=n(dye,"STRONG",{});var Mat=s(Gde);a0o=r(Mat,"funnel"),Mat.forEach(t),n0o=r(dye," \u2014 "),Vj=n(dye,"A",{href:!0});var Eat=s(Vj);s0o=r(Eat,"FunnelForMaskedLM"),Eat.forEach(t),l0o=r(dye," (Funnel Transformer model)"),dye.forEach(t),i0o=i(H),j2=n(H,"LI",{});var cye=s(j2);Ode=n(cye,"STRONG",{});var Cat=s(Ode);d0o=r(Cat,"ibert"),Cat.forEach(t),c0o=r(cye," \u2014 "),Xj=n(cye,"A",{href:!0});var wat=s(Xj);f0o=r(wat,"IBertForMaskedLM"),wat.forEach(t),m0o=r(cye," (I-BERT model)"),cye.forEach(t),g0o=i(H),D2=n(H,"LI",{});var fye=s(D2);Vde=n(fye,"STRONG",{});var Aat=s(Vde);h0o=r(Aat,"layoutlm"),Aat.forEach(t),p0o=r(fye," \u2014 "),zj=n(fye,"A",{href:!0});var yat=s(zj);_0o=r(yat,"LayoutLMForMaskedLM"),yat.forEach(t),u0o=r(fye," (LayoutLM model)"),fye.forEach(t),b0o=i(H),G2=n(H,"LI",{});var mye=s(G2);Xde=n(mye,"STRONG",{});var Lat=s(Xde);v0o=r(Lat,"longformer"),Lat.forEach(t),F0o=r(mye," \u2014 "),Wj=n(mye,"A",{href:!0});var xat=s(Wj);T0o=r(xat,"LongformerForMaskedLM"),xat.forEach(t),M0o=r(mye," (Longformer model)"),mye.forEach(t),E0o=i(H),O2=n(H,"LI",{});var gye=s(O2);zde=n(gye,"STRONG",{});var $at=s(zde);C0o=r($at,"mbart"),$at.forEach(t),w0o=r(gye," \u2014 "),Qj=n(gye,"A",{href:!0});var kat=s(Qj);A0o=r(kat,"MBartForConditionalGeneration"),kat.forEach(t),y0o=r(gye," (mBART model)"),gye.forEach(t),L0o=i(H),V2=n(H,"LI",{});var hye=s(V2);Wde=n(hye,"STRONG",{});var Sat=s(Wde);x0o=r(Sat,"megatron-bert"),Sat.forEach(t),$0o=r(hye," \u2014 "),Hj=n(hye,"A",{href:!0});var Rat=s(Hj);k0o=r(Rat,"MegatronBertForMaskedLM"),Rat.forEach(t),S0o=r(hye," (MegatronBert model)"),hye.forEach(t),R0o=i(H),X2=n(H,"LI",{});var pye=s(X2);Qde=n(pye,"STRONG",{});var Pat=s(Qde);P0o=r(Pat,"mobilebert"),Pat.forEach(t),B0o=r(pye," \u2014 "),Uj=n(pye,"A",{href:!0});var Bat=s(Uj);I0o=r(Bat,"MobileBertForMaskedLM"),Bat.forEach(t),q0o=r(pye," (MobileBERT model)"),pye.forEach(t),N0o=i(H),z2=n(H,"LI",{});var _ye=s(z2);Hde=n(_ye,"STRONG",{});var Iat=s(Hde);j0o=r(Iat,"mpnet"),Iat.forEach(t),D0o=r(_ye," \u2014 "),Jj=n(_ye,"A",{href:!0});var qat=s(Jj);G0o=r(qat,"MPNetForMaskedLM"),qat.forEach(t),O0o=r(_ye," (MPNet model)"),_ye.forEach(t),V0o=i(H),W2=n(H,"LI",{});var uye=s(W2);Ude=n(uye,"STRONG",{});var Nat=s(Ude);X0o=r(Nat,"nystromformer"),Nat.forEach(t),z0o=r(uye," \u2014 "),Yj=n(uye,"A",{href:!0});var jat=s(Yj);W0o=r(jat,"NystromformerForMaskedLM"),jat.forEach(t),Q0o=r(uye," (Nystromformer model)"),uye.forEach(t),H0o=i(H),Q2=n(H,"LI",{});var bye=s(Q2);Jde=n(bye,"STRONG",{});var Dat=s(Jde);U0o=r(Dat,"perceiver"),Dat.forEach(t),J0o=r(bye," \u2014 "),Kj=n(bye,"A",{href:!0});var Gat=s(Kj);Y0o=r(Gat,"PerceiverForMaskedLM"),Gat.forEach(t),K0o=r(bye," (Perceiver model)"),bye.forEach(t),Z0o=i(H),H2=n(H,"LI",{});var vye=s(H2);Yde=n(vye,"STRONG",{});var Oat=s(Yde);eAo=r(Oat,"qdqbert"),Oat.forEach(t),oAo=r(vye," \u2014 "),Zj=n(vye,"A",{href:!0});var Vat=s(Zj);rAo=r(Vat,"QDQBertForMaskedLM"),Vat.forEach(t),tAo=r(vye," (QDQBert model)"),vye.forEach(t),aAo=i(H),U2=n(H,"LI",{});var Fye=s(U2);Kde=n(Fye,"STRONG",{});var Xat=s(Kde);nAo=r(Xat,"reformer"),Xat.forEach(t),sAo=r(Fye," \u2014 "),eD=n(Fye,"A",{href:!0});var zat=s(eD);lAo=r(zat,"ReformerForMaskedLM"),zat.forEach(t),iAo=r(Fye," (Reformer model)"),Fye.forEach(t),dAo=i(H),J2=n(H,"LI",{});var Tye=s(J2);Zde=n(Tye,"STRONG",{});var Wat=s(Zde);cAo=r(Wat,"rembert"),Wat.forEach(t),fAo=r(Tye," \u2014 "),oD=n(Tye,"A",{href:!0});var Qat=s(oD);mAo=r(Qat,"RemBertForMaskedLM"),Qat.forEach(t),gAo=r(Tye," (RemBERT model)"),Tye.forEach(t),hAo=i(H),Y2=n(H,"LI",{});var Mye=s(Y2);ece=n(Mye,"STRONG",{});var Hat=s(ece);pAo=r(Hat,"roberta"),Hat.forEach(t),_Ao=r(Mye," \u2014 "),rD=n(Mye,"A",{href:!0});var Uat=s(rD);uAo=r(Uat,"RobertaForMaskedLM"),Uat.forEach(t),bAo=r(Mye," (RoBERTa model)"),Mye.forEach(t),vAo=i(H),K2=n(H,"LI",{});var Eye=s(K2);oce=n(Eye,"STRONG",{});var Jat=s(oce);FAo=r(Jat,"roformer"),Jat.forEach(t),TAo=r(Eye," \u2014 "),tD=n(Eye,"A",{href:!0});var Yat=s(tD);MAo=r(Yat,"RoFormerForMaskedLM"),Yat.forEach(t),EAo=r(Eye," (RoFormer model)"),Eye.forEach(t),CAo=i(H),Z2=n(H,"LI",{});var Cye=s(Z2);rce=n(Cye,"STRONG",{});var Kat=s(rce);wAo=r(Kat,"squeezebert"),Kat.forEach(t),AAo=r(Cye," \u2014 "),aD=n(Cye,"A",{href:!0});var Zat=s(aD);yAo=r(Zat,"SqueezeBertForMaskedLM"),Zat.forEach(t),LAo=r(Cye," (SqueezeBERT model)"),Cye.forEach(t),xAo=i(H),e1=n(H,"LI",{});var wye=s(e1);tce=n(wye,"STRONG",{});var ent=s(tce);$Ao=r(ent,"tapas"),ent.forEach(t),kAo=r(wye," \u2014 "),nD=n(wye,"A",{href:!0});var ont=s(nD);SAo=r(ont,"TapasForMaskedLM"),ont.forEach(t),RAo=r(wye," (TAPAS model)"),wye.forEach(t),PAo=i(H),o1=n(H,"LI",{});var Aye=s(o1);ace=n(Aye,"STRONG",{});var rnt=s(ace);BAo=r(rnt,"wav2vec2"),rnt.forEach(t),IAo=r(Aye," \u2014 "),nce=n(Aye,"CODE",{});var tnt=s(nce);qAo=r(tnt,"Wav2Vec2ForMaskedLM"),tnt.forEach(t),NAo=r(Aye," (Wav2Vec2 model)"),Aye.forEach(t),jAo=i(H),r1=n(H,"LI",{});var yye=s(r1);sce=n(yye,"STRONG",{});var ant=s(sce);DAo=r(ant,"xlm"),ant.forEach(t),GAo=r(yye," \u2014 "),sD=n(yye,"A",{href:!0});var nnt=s(sD);OAo=r(nnt,"XLMWithLMHeadModel"),nnt.forEach(t),VAo=r(yye," (XLM model)"),yye.forEach(t),XAo=i(H),t1=n(H,"LI",{});var Lye=s(t1);lce=n(Lye,"STRONG",{});var snt=s(lce);zAo=r(snt,"xlm-roberta"),snt.forEach(t),WAo=r(Lye," \u2014 "),lD=n(Lye,"A",{href:!0});var lnt=s(lD);QAo=r(lnt,"XLMRobertaForMaskedLM"),lnt.forEach(t),HAo=r(Lye," (XLM-RoBERTa model)"),Lye.forEach(t),UAo=i(H),a1=n(H,"LI",{});var xye=s(a1);ice=n(xye,"STRONG",{});var int=s(ice);JAo=r(int,"xlm-roberta-xl"),int.forEach(t),YAo=r(xye," \u2014 "),iD=n(xye,"A",{href:!0});var dnt=s(iD);KAo=r(dnt,"XLMRobertaXLForMaskedLM"),dnt.forEach(t),ZAo=r(xye," (XLM-RoBERTa-XL model)"),xye.forEach(t),e6o=i(H),n1=n(H,"LI",{});var $ye=s(n1);dce=n($ye,"STRONG",{});var cnt=s(dce);o6o=r(cnt,"yoso"),cnt.forEach(t),r6o=r($ye," \u2014 "),dD=n($ye,"A",{href:!0});var fnt=s(dD);t6o=r(fnt,"YosoForMaskedLM"),fnt.forEach(t),a6o=r($ye," (YOSO model)"),$ye.forEach(t),H.forEach(t),n6o=i(aa),s1=n(aa,"P",{});var kye=s(s1);s6o=r(kye,"The model is set in evaluation mode by default using "),cce=n(kye,"CODE",{});var mnt=s(cce);l6o=r(mnt,"model.eval()"),mnt.forEach(t),i6o=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(kye,"CODE",{});var gnt=s(fce);d6o=r(gnt,"model.train()"),gnt.forEach(t),kye.forEach(t),c6o=i(aa),T(l1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),iqe=i(f),Ii=n(f,"H2",{class:!0});var mje=s(Ii);i1=n(mje,"A",{id:!0,class:!0,href:!0});var hnt=s(i1);mce=n(hnt,"SPAN",{});var pnt=s(mce);T(t6.$$.fragment,pnt),pnt.forEach(t),hnt.forEach(t),f6o=i(mje),gce=n(mje,"SPAN",{});var _nt=s(gce);m6o=r(_nt,"AutoModelForSeq2SeqLM"),_nt.forEach(t),mje.forEach(t),dqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(a6.$$.fragment,Xs),g6o=i(Xs),qi=n(Xs,"P",{});var VK=s(qi);h6o=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cD=n(VK,"A",{href:!0});var unt=s(cD);p6o=r(unt,"from_pretrained()"),unt.forEach(t),_6o=r(VK," class method or the "),fD=n(VK,"A",{href:!0});var bnt=s(fD);u6o=r(bnt,"from_config()"),bnt.forEach(t),b6o=r(VK,` class
method.`),VK.forEach(t),v6o=i(Xs),n6=n(Xs,"P",{});var gje=s(n6);F6o=r(gje,"This class cannot be instantiated directly using "),hce=n(gje,"CODE",{});var vnt=s(hce);T6o=r(vnt,"__init__()"),vnt.forEach(t),M6o=r(gje," (throws an error)."),gje.forEach(t),E6o=i(Xs),lt=n(Xs,"DIV",{class:!0});var Ew=s(lt);T(s6.$$.fragment,Ew),C6o=i(Ew),pce=n(Ew,"P",{});var Fnt=s(pce);w6o=r(Fnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fnt.forEach(t),A6o=i(Ew),Ni=n(Ew,"P",{});var XK=s(Ni);y6o=r(XK,`Note:
Loading a model from its configuration file does `),_ce=n(XK,"STRONG",{});var Tnt=s(_ce);L6o=r(Tnt,"not"),Tnt.forEach(t),x6o=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(XK,"A",{href:!0});var Mnt=s(mD);$6o=r(Mnt,"from_pretrained()"),Mnt.forEach(t),k6o=r(XK," to load the model weights."),XK.forEach(t),S6o=i(Ew),T(d1.$$.fragment,Ew),Ew.forEach(t),R6o=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(l6.$$.fragment,na),P6o=i(na),uce=n(na,"P",{});var Ent=s(uce);B6o=r(Ent,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ent.forEach(t),I6o=i(na),Sa=n(na,"P",{});var Cw=s(Sa);q6o=r(Cw,"The model class to instantiate is selected based on the "),bce=n(Cw,"CODE",{});var Cnt=s(bce);N6o=r(Cnt,"model_type"),Cnt.forEach(t),j6o=r(Cw,` property of the config object (either
passed as an argument or loaded from `),vce=n(Cw,"CODE",{});var wnt=s(vce);D6o=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),G6o=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(Cw,"CODE",{});var Ant=s(Fce);O6o=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),V6o=r(Cw,":"),Cw.forEach(t),X6o=i(na),_e=n(na,"UL",{});var ve=s(_e);c1=n(ve,"LI",{});var Sye=s(c1);Tce=n(Sye,"STRONG",{});var ynt=s(Tce);z6o=r(ynt,"bart"),ynt.forEach(t),W6o=r(Sye," \u2014 "),gD=n(Sye,"A",{href:!0});var Lnt=s(gD);Q6o=r(Lnt,"BartForConditionalGeneration"),Lnt.forEach(t),H6o=r(Sye," (BART model)"),Sye.forEach(t),U6o=i(ve),f1=n(ve,"LI",{});var Rye=s(f1);Mce=n(Rye,"STRONG",{});var xnt=s(Mce);J6o=r(xnt,"bigbird_pegasus"),xnt.forEach(t),Y6o=r(Rye," \u2014 "),hD=n(Rye,"A",{href:!0});var $nt=s(hD);K6o=r($nt,"BigBirdPegasusForConditionalGeneration"),$nt.forEach(t),Z6o=r(Rye," (BigBirdPegasus model)"),Rye.forEach(t),eyo=i(ve),m1=n(ve,"LI",{});var Pye=s(m1);Ece=n(Pye,"STRONG",{});var knt=s(Ece);oyo=r(knt,"blenderbot"),knt.forEach(t),ryo=r(Pye," \u2014 "),pD=n(Pye,"A",{href:!0});var Snt=s(pD);tyo=r(Snt,"BlenderbotForConditionalGeneration"),Snt.forEach(t),ayo=r(Pye," (Blenderbot model)"),Pye.forEach(t),nyo=i(ve),g1=n(ve,"LI",{});var Bye=s(g1);Cce=n(Bye,"STRONG",{});var Rnt=s(Cce);syo=r(Rnt,"blenderbot-small"),Rnt.forEach(t),lyo=r(Bye," \u2014 "),_D=n(Bye,"A",{href:!0});var Pnt=s(_D);iyo=r(Pnt,"BlenderbotSmallForConditionalGeneration"),Pnt.forEach(t),dyo=r(Bye," (BlenderbotSmall model)"),Bye.forEach(t),cyo=i(ve),h1=n(ve,"LI",{});var Iye=s(h1);wce=n(Iye,"STRONG",{});var Bnt=s(wce);fyo=r(Bnt,"encoder-decoder"),Bnt.forEach(t),myo=r(Iye," \u2014 "),uD=n(Iye,"A",{href:!0});var Int=s(uD);gyo=r(Int,"EncoderDecoderModel"),Int.forEach(t),hyo=r(Iye," (Encoder decoder model)"),Iye.forEach(t),pyo=i(ve),p1=n(ve,"LI",{});var qye=s(p1);Ace=n(qye,"STRONG",{});var qnt=s(Ace);_yo=r(qnt,"fsmt"),qnt.forEach(t),uyo=r(qye," \u2014 "),bD=n(qye,"A",{href:!0});var Nnt=s(bD);byo=r(Nnt,"FSMTForConditionalGeneration"),Nnt.forEach(t),vyo=r(qye," (FairSeq Machine-Translation model)"),qye.forEach(t),Fyo=i(ve),_1=n(ve,"LI",{});var Nye=s(_1);yce=n(Nye,"STRONG",{});var jnt=s(yce);Tyo=r(jnt,"led"),jnt.forEach(t),Myo=r(Nye," \u2014 "),vD=n(Nye,"A",{href:!0});var Dnt=s(vD);Eyo=r(Dnt,"LEDForConditionalGeneration"),Dnt.forEach(t),Cyo=r(Nye," (LED model)"),Nye.forEach(t),wyo=i(ve),u1=n(ve,"LI",{});var jye=s(u1);Lce=n(jye,"STRONG",{});var Gnt=s(Lce);Ayo=r(Gnt,"m2m_100"),Gnt.forEach(t),yyo=r(jye," \u2014 "),FD=n(jye,"A",{href:!0});var Ont=s(FD);Lyo=r(Ont,"M2M100ForConditionalGeneration"),Ont.forEach(t),xyo=r(jye," (M2M100 model)"),jye.forEach(t),$yo=i(ve),b1=n(ve,"LI",{});var Dye=s(b1);xce=n(Dye,"STRONG",{});var Vnt=s(xce);kyo=r(Vnt,"marian"),Vnt.forEach(t),Syo=r(Dye," \u2014 "),TD=n(Dye,"A",{href:!0});var Xnt=s(TD);Ryo=r(Xnt,"MarianMTModel"),Xnt.forEach(t),Pyo=r(Dye," (Marian model)"),Dye.forEach(t),Byo=i(ve),v1=n(ve,"LI",{});var Gye=s(v1);$ce=n(Gye,"STRONG",{});var znt=s($ce);Iyo=r(znt,"mbart"),znt.forEach(t),qyo=r(Gye," \u2014 "),MD=n(Gye,"A",{href:!0});var Wnt=s(MD);Nyo=r(Wnt,"MBartForConditionalGeneration"),Wnt.forEach(t),jyo=r(Gye," (mBART model)"),Gye.forEach(t),Dyo=i(ve),F1=n(ve,"LI",{});var Oye=s(F1);kce=n(Oye,"STRONG",{});var Qnt=s(kce);Gyo=r(Qnt,"mt5"),Qnt.forEach(t),Oyo=r(Oye," \u2014 "),ED=n(Oye,"A",{href:!0});var Hnt=s(ED);Vyo=r(Hnt,"MT5ForConditionalGeneration"),Hnt.forEach(t),Xyo=r(Oye," (mT5 model)"),Oye.forEach(t),zyo=i(ve),T1=n(ve,"LI",{});var Vye=s(T1);Sce=n(Vye,"STRONG",{});var Unt=s(Sce);Wyo=r(Unt,"pegasus"),Unt.forEach(t),Qyo=r(Vye," \u2014 "),CD=n(Vye,"A",{href:!0});var Jnt=s(CD);Hyo=r(Jnt,"PegasusForConditionalGeneration"),Jnt.forEach(t),Uyo=r(Vye," (Pegasus model)"),Vye.forEach(t),Jyo=i(ve),M1=n(ve,"LI",{});var Xye=s(M1);Rce=n(Xye,"STRONG",{});var Ynt=s(Rce);Yyo=r(Ynt,"plbart"),Ynt.forEach(t),Kyo=r(Xye," \u2014 "),wD=n(Xye,"A",{href:!0});var Knt=s(wD);Zyo=r(Knt,"PLBartForConditionalGeneration"),Knt.forEach(t),eLo=r(Xye," (PLBart model)"),Xye.forEach(t),oLo=i(ve),E1=n(ve,"LI",{});var zye=s(E1);Pce=n(zye,"STRONG",{});var Znt=s(Pce);rLo=r(Znt,"prophetnet"),Znt.forEach(t),tLo=r(zye," \u2014 "),AD=n(zye,"A",{href:!0});var est=s(AD);aLo=r(est,"ProphetNetForConditionalGeneration"),est.forEach(t),nLo=r(zye," (ProphetNet model)"),zye.forEach(t),sLo=i(ve),C1=n(ve,"LI",{});var Wye=s(C1);Bce=n(Wye,"STRONG",{});var ost=s(Bce);lLo=r(ost,"t5"),ost.forEach(t),iLo=r(Wye," \u2014 "),yD=n(Wye,"A",{href:!0});var rst=s(yD);dLo=r(rst,"T5ForConditionalGeneration"),rst.forEach(t),cLo=r(Wye," (T5 model)"),Wye.forEach(t),fLo=i(ve),w1=n(ve,"LI",{});var Qye=s(w1);Ice=n(Qye,"STRONG",{});var tst=s(Ice);mLo=r(tst,"xlm-prophetnet"),tst.forEach(t),gLo=r(Qye," \u2014 "),LD=n(Qye,"A",{href:!0});var ast=s(LD);hLo=r(ast,"XLMProphetNetForConditionalGeneration"),ast.forEach(t),pLo=r(Qye," (XLMProphetNet model)"),Qye.forEach(t),ve.forEach(t),_Lo=i(na),A1=n(na,"P",{});var Hye=s(A1);uLo=r(Hye,"The model is set in evaluation mode by default using "),qce=n(Hye,"CODE",{});var nst=s(qce);bLo=r(nst,"model.eval()"),nst.forEach(t),vLo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(Hye,"CODE",{});var sst=s(Nce);FLo=r(sst,"model.train()"),sst.forEach(t),Hye.forEach(t),TLo=i(na),T(y1.$$.fragment,na),na.forEach(t),Xs.forEach(t),cqe=i(f),ji=n(f,"H2",{class:!0});var hje=s(ji);L1=n(hje,"A",{id:!0,class:!0,href:!0});var lst=s(L1);jce=n(lst,"SPAN",{});var ist=s(jce);T(i6.$$.fragment,ist),ist.forEach(t),lst.forEach(t),MLo=i(hje),Dce=n(hje,"SPAN",{});var dst=s(Dce);ELo=r(dst,"AutoModelForSequenceClassification"),dst.forEach(t),hje.forEach(t),fqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(d6.$$.fragment,zs),CLo=i(zs),Di=n(zs,"P",{});var zK=s(Di);wLo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xD=n(zK,"A",{href:!0});var cst=s(xD);ALo=r(cst,"from_pretrained()"),cst.forEach(t),yLo=r(zK," class method or the "),$D=n(zK,"A",{href:!0});var fst=s($D);LLo=r(fst,"from_config()"),fst.forEach(t),xLo=r(zK,` class
method.`),zK.forEach(t),$Lo=i(zs),c6=n(zs,"P",{});var pje=s(c6);kLo=r(pje,"This class cannot be instantiated directly using "),Gce=n(pje,"CODE",{});var mst=s(Gce);SLo=r(mst,"__init__()"),mst.forEach(t),RLo=r(pje," (throws an error)."),pje.forEach(t),PLo=i(zs),it=n(zs,"DIV",{class:!0});var ww=s(it);T(f6.$$.fragment,ww),BLo=i(ww),Oce=n(ww,"P",{});var gst=s(Oce);ILo=r(gst,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gst.forEach(t),qLo=i(ww),Gi=n(ww,"P",{});var WK=s(Gi);NLo=r(WK,`Note:
Loading a model from its configuration file does `),Vce=n(WK,"STRONG",{});var hst=s(Vce);jLo=r(hst,"not"),hst.forEach(t),DLo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kD=n(WK,"A",{href:!0});var pst=s(kD);GLo=r(pst,"from_pretrained()"),pst.forEach(t),OLo=r(WK," to load the model weights."),WK.forEach(t),VLo=i(ww),T(x1.$$.fragment,ww),ww.forEach(t),XLo=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(m6.$$.fragment,sa),zLo=i(sa),Xce=n(sa,"P",{});var _st=s(Xce);WLo=r(_st,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_st.forEach(t),QLo=i(sa),Ra=n(sa,"P",{});var Aw=s(Ra);HLo=r(Aw,"The model class to instantiate is selected based on the "),zce=n(Aw,"CODE",{});var ust=s(zce);ULo=r(ust,"model_type"),ust.forEach(t),JLo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Wce=n(Aw,"CODE",{});var bst=s(Wce);YLo=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),KLo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(Aw,"CODE",{});var vst=s(Qce);ZLo=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),e8o=r(Aw,":"),Aw.forEach(t),o8o=i(sa),q=n(sa,"UL",{});var j=s(q);$1=n(j,"LI",{});var Uye=s($1);Hce=n(Uye,"STRONG",{});var Fst=s(Hce);r8o=r(Fst,"albert"),Fst.forEach(t),t8o=r(Uye," \u2014 "),SD=n(Uye,"A",{href:!0});var Tst=s(SD);a8o=r(Tst,"AlbertForSequenceClassification"),Tst.forEach(t),n8o=r(Uye," (ALBERT model)"),Uye.forEach(t),s8o=i(j),k1=n(j,"LI",{});var Jye=s(k1);Uce=n(Jye,"STRONG",{});var Mst=s(Uce);l8o=r(Mst,"bart"),Mst.forEach(t),i8o=r(Jye," \u2014 "),RD=n(Jye,"A",{href:!0});var Est=s(RD);d8o=r(Est,"BartForSequenceClassification"),Est.forEach(t),c8o=r(Jye," (BART model)"),Jye.forEach(t),f8o=i(j),S1=n(j,"LI",{});var Yye=s(S1);Jce=n(Yye,"STRONG",{});var Cst=s(Jce);m8o=r(Cst,"bert"),Cst.forEach(t),g8o=r(Yye," \u2014 "),PD=n(Yye,"A",{href:!0});var wst=s(PD);h8o=r(wst,"BertForSequenceClassification"),wst.forEach(t),p8o=r(Yye," (BERT model)"),Yye.forEach(t),_8o=i(j),R1=n(j,"LI",{});var Kye=s(R1);Yce=n(Kye,"STRONG",{});var Ast=s(Yce);u8o=r(Ast,"big_bird"),Ast.forEach(t),b8o=r(Kye," \u2014 "),BD=n(Kye,"A",{href:!0});var yst=s(BD);v8o=r(yst,"BigBirdForSequenceClassification"),yst.forEach(t),F8o=r(Kye," (BigBird model)"),Kye.forEach(t),T8o=i(j),P1=n(j,"LI",{});var Zye=s(P1);Kce=n(Zye,"STRONG",{});var Lst=s(Kce);M8o=r(Lst,"bigbird_pegasus"),Lst.forEach(t),E8o=r(Zye," \u2014 "),ID=n(Zye,"A",{href:!0});var xst=s(ID);C8o=r(xst,"BigBirdPegasusForSequenceClassification"),xst.forEach(t),w8o=r(Zye," (BigBirdPegasus model)"),Zye.forEach(t),A8o=i(j),B1=n(j,"LI",{});var eLe=s(B1);Zce=n(eLe,"STRONG",{});var $st=s(Zce);y8o=r($st,"camembert"),$st.forEach(t),L8o=r(eLe," \u2014 "),qD=n(eLe,"A",{href:!0});var kst=s(qD);x8o=r(kst,"CamembertForSequenceClassification"),kst.forEach(t),$8o=r(eLe," (CamemBERT model)"),eLe.forEach(t),k8o=i(j),I1=n(j,"LI",{});var oLe=s(I1);efe=n(oLe,"STRONG",{});var Sst=s(efe);S8o=r(Sst,"canine"),Sst.forEach(t),R8o=r(oLe," \u2014 "),ND=n(oLe,"A",{href:!0});var Rst=s(ND);P8o=r(Rst,"CanineForSequenceClassification"),Rst.forEach(t),B8o=r(oLe," (Canine model)"),oLe.forEach(t),I8o=i(j),q1=n(j,"LI",{});var rLe=s(q1);ofe=n(rLe,"STRONG",{});var Pst=s(ofe);q8o=r(Pst,"convbert"),Pst.forEach(t),N8o=r(rLe," \u2014 "),jD=n(rLe,"A",{href:!0});var Bst=s(jD);j8o=r(Bst,"ConvBertForSequenceClassification"),Bst.forEach(t),D8o=r(rLe," (ConvBERT model)"),rLe.forEach(t),G8o=i(j),N1=n(j,"LI",{});var tLe=s(N1);rfe=n(tLe,"STRONG",{});var Ist=s(rfe);O8o=r(Ist,"ctrl"),Ist.forEach(t),V8o=r(tLe," \u2014 "),DD=n(tLe,"A",{href:!0});var qst=s(DD);X8o=r(qst,"CTRLForSequenceClassification"),qst.forEach(t),z8o=r(tLe," (CTRL model)"),tLe.forEach(t),W8o=i(j),j1=n(j,"LI",{});var aLe=s(j1);tfe=n(aLe,"STRONG",{});var Nst=s(tfe);Q8o=r(Nst,"data2vec-text"),Nst.forEach(t),H8o=r(aLe," \u2014 "),GD=n(aLe,"A",{href:!0});var jst=s(GD);U8o=r(jst,"Data2VecTextForSequenceClassification"),jst.forEach(t),J8o=r(aLe," (Data2VecText model)"),aLe.forEach(t),Y8o=i(j),D1=n(j,"LI",{});var nLe=s(D1);afe=n(nLe,"STRONG",{});var Dst=s(afe);K8o=r(Dst,"deberta"),Dst.forEach(t),Z8o=r(nLe," \u2014 "),OD=n(nLe,"A",{href:!0});var Gst=s(OD);exo=r(Gst,"DebertaForSequenceClassification"),Gst.forEach(t),oxo=r(nLe," (DeBERTa model)"),nLe.forEach(t),rxo=i(j),G1=n(j,"LI",{});var sLe=s(G1);nfe=n(sLe,"STRONG",{});var Ost=s(nfe);txo=r(Ost,"deberta-v2"),Ost.forEach(t),axo=r(sLe," \u2014 "),VD=n(sLe,"A",{href:!0});var Vst=s(VD);nxo=r(Vst,"DebertaV2ForSequenceClassification"),Vst.forEach(t),sxo=r(sLe," (DeBERTa-v2 model)"),sLe.forEach(t),lxo=i(j),O1=n(j,"LI",{});var lLe=s(O1);sfe=n(lLe,"STRONG",{});var Xst=s(sfe);ixo=r(Xst,"distilbert"),Xst.forEach(t),dxo=r(lLe," \u2014 "),XD=n(lLe,"A",{href:!0});var zst=s(XD);cxo=r(zst,"DistilBertForSequenceClassification"),zst.forEach(t),fxo=r(lLe," (DistilBERT model)"),lLe.forEach(t),mxo=i(j),V1=n(j,"LI",{});var iLe=s(V1);lfe=n(iLe,"STRONG",{});var Wst=s(lfe);gxo=r(Wst,"electra"),Wst.forEach(t),hxo=r(iLe," \u2014 "),zD=n(iLe,"A",{href:!0});var Qst=s(zD);pxo=r(Qst,"ElectraForSequenceClassification"),Qst.forEach(t),_xo=r(iLe," (ELECTRA model)"),iLe.forEach(t),uxo=i(j),X1=n(j,"LI",{});var dLe=s(X1);ife=n(dLe,"STRONG",{});var Hst=s(ife);bxo=r(Hst,"flaubert"),Hst.forEach(t),vxo=r(dLe," \u2014 "),WD=n(dLe,"A",{href:!0});var Ust=s(WD);Fxo=r(Ust,"FlaubertForSequenceClassification"),Ust.forEach(t),Txo=r(dLe," (FlauBERT model)"),dLe.forEach(t),Mxo=i(j),z1=n(j,"LI",{});var cLe=s(z1);dfe=n(cLe,"STRONG",{});var Jst=s(dfe);Exo=r(Jst,"fnet"),Jst.forEach(t),Cxo=r(cLe," \u2014 "),QD=n(cLe,"A",{href:!0});var Yst=s(QD);wxo=r(Yst,"FNetForSequenceClassification"),Yst.forEach(t),Axo=r(cLe," (FNet model)"),cLe.forEach(t),yxo=i(j),W1=n(j,"LI",{});var fLe=s(W1);cfe=n(fLe,"STRONG",{});var Kst=s(cfe);Lxo=r(Kst,"funnel"),Kst.forEach(t),xxo=r(fLe," \u2014 "),HD=n(fLe,"A",{href:!0});var Zst=s(HD);$xo=r(Zst,"FunnelForSequenceClassification"),Zst.forEach(t),kxo=r(fLe," (Funnel Transformer model)"),fLe.forEach(t),Sxo=i(j),Q1=n(j,"LI",{});var mLe=s(Q1);ffe=n(mLe,"STRONG",{});var elt=s(ffe);Rxo=r(elt,"gpt2"),elt.forEach(t),Pxo=r(mLe," \u2014 "),UD=n(mLe,"A",{href:!0});var olt=s(UD);Bxo=r(olt,"GPT2ForSequenceClassification"),olt.forEach(t),Ixo=r(mLe," (OpenAI GPT-2 model)"),mLe.forEach(t),qxo=i(j),H1=n(j,"LI",{});var gLe=s(H1);mfe=n(gLe,"STRONG",{});var rlt=s(mfe);Nxo=r(rlt,"gpt_neo"),rlt.forEach(t),jxo=r(gLe," \u2014 "),JD=n(gLe,"A",{href:!0});var tlt=s(JD);Dxo=r(tlt,"GPTNeoForSequenceClassification"),tlt.forEach(t),Gxo=r(gLe," (GPT Neo model)"),gLe.forEach(t),Oxo=i(j),U1=n(j,"LI",{});var hLe=s(U1);gfe=n(hLe,"STRONG",{});var alt=s(gfe);Vxo=r(alt,"gptj"),alt.forEach(t),Xxo=r(hLe," \u2014 "),YD=n(hLe,"A",{href:!0});var nlt=s(YD);zxo=r(nlt,"GPTJForSequenceClassification"),nlt.forEach(t),Wxo=r(hLe," (GPT-J model)"),hLe.forEach(t),Qxo=i(j),J1=n(j,"LI",{});var pLe=s(J1);hfe=n(pLe,"STRONG",{});var slt=s(hfe);Hxo=r(slt,"ibert"),slt.forEach(t),Uxo=r(pLe," \u2014 "),KD=n(pLe,"A",{href:!0});var llt=s(KD);Jxo=r(llt,"IBertForSequenceClassification"),llt.forEach(t),Yxo=r(pLe," (I-BERT model)"),pLe.forEach(t),Kxo=i(j),Y1=n(j,"LI",{});var _Le=s(Y1);pfe=n(_Le,"STRONG",{});var ilt=s(pfe);Zxo=r(ilt,"layoutlm"),ilt.forEach(t),e$o=r(_Le," \u2014 "),ZD=n(_Le,"A",{href:!0});var dlt=s(ZD);o$o=r(dlt,"LayoutLMForSequenceClassification"),dlt.forEach(t),r$o=r(_Le," (LayoutLM model)"),_Le.forEach(t),t$o=i(j),K1=n(j,"LI",{});var uLe=s(K1);_fe=n(uLe,"STRONG",{});var clt=s(_fe);a$o=r(clt,"layoutlmv2"),clt.forEach(t),n$o=r(uLe," \u2014 "),eG=n(uLe,"A",{href:!0});var flt=s(eG);s$o=r(flt,"LayoutLMv2ForSequenceClassification"),flt.forEach(t),l$o=r(uLe," (LayoutLMv2 model)"),uLe.forEach(t),i$o=i(j),Z1=n(j,"LI",{});var bLe=s(Z1);ufe=n(bLe,"STRONG",{});var mlt=s(ufe);d$o=r(mlt,"led"),mlt.forEach(t),c$o=r(bLe," \u2014 "),oG=n(bLe,"A",{href:!0});var glt=s(oG);f$o=r(glt,"LEDForSequenceClassification"),glt.forEach(t),m$o=r(bLe," (LED model)"),bLe.forEach(t),g$o=i(j),e9=n(j,"LI",{});var vLe=s(e9);bfe=n(vLe,"STRONG",{});var hlt=s(bfe);h$o=r(hlt,"longformer"),hlt.forEach(t),p$o=r(vLe," \u2014 "),rG=n(vLe,"A",{href:!0});var plt=s(rG);_$o=r(plt,"LongformerForSequenceClassification"),plt.forEach(t),u$o=r(vLe," (Longformer model)"),vLe.forEach(t),b$o=i(j),o9=n(j,"LI",{});var FLe=s(o9);vfe=n(FLe,"STRONG",{});var _lt=s(vfe);v$o=r(_lt,"mbart"),_lt.forEach(t),F$o=r(FLe," \u2014 "),tG=n(FLe,"A",{href:!0});var ult=s(tG);T$o=r(ult,"MBartForSequenceClassification"),ult.forEach(t),M$o=r(FLe," (mBART model)"),FLe.forEach(t),E$o=i(j),r9=n(j,"LI",{});var TLe=s(r9);Ffe=n(TLe,"STRONG",{});var blt=s(Ffe);C$o=r(blt,"megatron-bert"),blt.forEach(t),w$o=r(TLe," \u2014 "),aG=n(TLe,"A",{href:!0});var vlt=s(aG);A$o=r(vlt,"MegatronBertForSequenceClassification"),vlt.forEach(t),y$o=r(TLe," (MegatronBert model)"),TLe.forEach(t),L$o=i(j),t9=n(j,"LI",{});var MLe=s(t9);Tfe=n(MLe,"STRONG",{});var Flt=s(Tfe);x$o=r(Flt,"mobilebert"),Flt.forEach(t),$$o=r(MLe," \u2014 "),nG=n(MLe,"A",{href:!0});var Tlt=s(nG);k$o=r(Tlt,"MobileBertForSequenceClassification"),Tlt.forEach(t),S$o=r(MLe," (MobileBERT model)"),MLe.forEach(t),R$o=i(j),a9=n(j,"LI",{});var ELe=s(a9);Mfe=n(ELe,"STRONG",{});var Mlt=s(Mfe);P$o=r(Mlt,"mpnet"),Mlt.forEach(t),B$o=r(ELe," \u2014 "),sG=n(ELe,"A",{href:!0});var Elt=s(sG);I$o=r(Elt,"MPNetForSequenceClassification"),Elt.forEach(t),q$o=r(ELe," (MPNet model)"),ELe.forEach(t),N$o=i(j),n9=n(j,"LI",{});var CLe=s(n9);Efe=n(CLe,"STRONG",{});var Clt=s(Efe);j$o=r(Clt,"nystromformer"),Clt.forEach(t),D$o=r(CLe," \u2014 "),lG=n(CLe,"A",{href:!0});var wlt=s(lG);G$o=r(wlt,"NystromformerForSequenceClassification"),wlt.forEach(t),O$o=r(CLe," (Nystromformer model)"),CLe.forEach(t),V$o=i(j),s9=n(j,"LI",{});var wLe=s(s9);Cfe=n(wLe,"STRONG",{});var Alt=s(Cfe);X$o=r(Alt,"openai-gpt"),Alt.forEach(t),z$o=r(wLe," \u2014 "),iG=n(wLe,"A",{href:!0});var ylt=s(iG);W$o=r(ylt,"OpenAIGPTForSequenceClassification"),ylt.forEach(t),Q$o=r(wLe," (OpenAI GPT model)"),wLe.forEach(t),H$o=i(j),l9=n(j,"LI",{});var ALe=s(l9);wfe=n(ALe,"STRONG",{});var Llt=s(wfe);U$o=r(Llt,"perceiver"),Llt.forEach(t),J$o=r(ALe," \u2014 "),dG=n(ALe,"A",{href:!0});var xlt=s(dG);Y$o=r(xlt,"PerceiverForSequenceClassification"),xlt.forEach(t),K$o=r(ALe," (Perceiver model)"),ALe.forEach(t),Z$o=i(j),i9=n(j,"LI",{});var yLe=s(i9);Afe=n(yLe,"STRONG",{});var $lt=s(Afe);eko=r($lt,"plbart"),$lt.forEach(t),oko=r(yLe," \u2014 "),cG=n(yLe,"A",{href:!0});var klt=s(cG);rko=r(klt,"PLBartForSequenceClassification"),klt.forEach(t),tko=r(yLe," (PLBart model)"),yLe.forEach(t),ako=i(j),d9=n(j,"LI",{});var LLe=s(d9);yfe=n(LLe,"STRONG",{});var Slt=s(yfe);nko=r(Slt,"qdqbert"),Slt.forEach(t),sko=r(LLe," \u2014 "),fG=n(LLe,"A",{href:!0});var Rlt=s(fG);lko=r(Rlt,"QDQBertForSequenceClassification"),Rlt.forEach(t),iko=r(LLe," (QDQBert model)"),LLe.forEach(t),dko=i(j),c9=n(j,"LI",{});var xLe=s(c9);Lfe=n(xLe,"STRONG",{});var Plt=s(Lfe);cko=r(Plt,"reformer"),Plt.forEach(t),fko=r(xLe," \u2014 "),mG=n(xLe,"A",{href:!0});var Blt=s(mG);mko=r(Blt,"ReformerForSequenceClassification"),Blt.forEach(t),gko=r(xLe," (Reformer model)"),xLe.forEach(t),hko=i(j),f9=n(j,"LI",{});var $Le=s(f9);xfe=n($Le,"STRONG",{});var Ilt=s(xfe);pko=r(Ilt,"rembert"),Ilt.forEach(t),_ko=r($Le," \u2014 "),gG=n($Le,"A",{href:!0});var qlt=s(gG);uko=r(qlt,"RemBertForSequenceClassification"),qlt.forEach(t),bko=r($Le," (RemBERT model)"),$Le.forEach(t),vko=i(j),m9=n(j,"LI",{});var kLe=s(m9);$fe=n(kLe,"STRONG",{});var Nlt=s($fe);Fko=r(Nlt,"roberta"),Nlt.forEach(t),Tko=r(kLe," \u2014 "),hG=n(kLe,"A",{href:!0});var jlt=s(hG);Mko=r(jlt,"RobertaForSequenceClassification"),jlt.forEach(t),Eko=r(kLe," (RoBERTa model)"),kLe.forEach(t),Cko=i(j),g9=n(j,"LI",{});var SLe=s(g9);kfe=n(SLe,"STRONG",{});var Dlt=s(kfe);wko=r(Dlt,"roformer"),Dlt.forEach(t),Ako=r(SLe," \u2014 "),pG=n(SLe,"A",{href:!0});var Glt=s(pG);yko=r(Glt,"RoFormerForSequenceClassification"),Glt.forEach(t),Lko=r(SLe," (RoFormer model)"),SLe.forEach(t),xko=i(j),h9=n(j,"LI",{});var RLe=s(h9);Sfe=n(RLe,"STRONG",{});var Olt=s(Sfe);$ko=r(Olt,"squeezebert"),Olt.forEach(t),kko=r(RLe," \u2014 "),_G=n(RLe,"A",{href:!0});var Vlt=s(_G);Sko=r(Vlt,"SqueezeBertForSequenceClassification"),Vlt.forEach(t),Rko=r(RLe," (SqueezeBERT model)"),RLe.forEach(t),Pko=i(j),p9=n(j,"LI",{});var PLe=s(p9);Rfe=n(PLe,"STRONG",{});var Xlt=s(Rfe);Bko=r(Xlt,"tapas"),Xlt.forEach(t),Iko=r(PLe," \u2014 "),uG=n(PLe,"A",{href:!0});var zlt=s(uG);qko=r(zlt,"TapasForSequenceClassification"),zlt.forEach(t),Nko=r(PLe," (TAPAS model)"),PLe.forEach(t),jko=i(j),_9=n(j,"LI",{});var BLe=s(_9);Pfe=n(BLe,"STRONG",{});var Wlt=s(Pfe);Dko=r(Wlt,"transfo-xl"),Wlt.forEach(t),Gko=r(BLe," \u2014 "),bG=n(BLe,"A",{href:!0});var Qlt=s(bG);Oko=r(Qlt,"TransfoXLForSequenceClassification"),Qlt.forEach(t),Vko=r(BLe," (Transformer-XL model)"),BLe.forEach(t),Xko=i(j),u9=n(j,"LI",{});var ILe=s(u9);Bfe=n(ILe,"STRONG",{});var Hlt=s(Bfe);zko=r(Hlt,"xlm"),Hlt.forEach(t),Wko=r(ILe," \u2014 "),vG=n(ILe,"A",{href:!0});var Ult=s(vG);Qko=r(Ult,"XLMForSequenceClassification"),Ult.forEach(t),Hko=r(ILe," (XLM model)"),ILe.forEach(t),Uko=i(j),b9=n(j,"LI",{});var qLe=s(b9);Ife=n(qLe,"STRONG",{});var Jlt=s(Ife);Jko=r(Jlt,"xlm-roberta"),Jlt.forEach(t),Yko=r(qLe," \u2014 "),FG=n(qLe,"A",{href:!0});var Ylt=s(FG);Kko=r(Ylt,"XLMRobertaForSequenceClassification"),Ylt.forEach(t),Zko=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),eSo=i(j),v9=n(j,"LI",{});var NLe=s(v9);qfe=n(NLe,"STRONG",{});var Klt=s(qfe);oSo=r(Klt,"xlm-roberta-xl"),Klt.forEach(t),rSo=r(NLe," \u2014 "),TG=n(NLe,"A",{href:!0});var Zlt=s(TG);tSo=r(Zlt,"XLMRobertaXLForSequenceClassification"),Zlt.forEach(t),aSo=r(NLe," (XLM-RoBERTa-XL model)"),NLe.forEach(t),nSo=i(j),F9=n(j,"LI",{});var jLe=s(F9);Nfe=n(jLe,"STRONG",{});var eit=s(Nfe);sSo=r(eit,"xlnet"),eit.forEach(t),lSo=r(jLe," \u2014 "),MG=n(jLe,"A",{href:!0});var oit=s(MG);iSo=r(oit,"XLNetForSequenceClassification"),oit.forEach(t),dSo=r(jLe," (XLNet model)"),jLe.forEach(t),cSo=i(j),T9=n(j,"LI",{});var DLe=s(T9);jfe=n(DLe,"STRONG",{});var rit=s(jfe);fSo=r(rit,"yoso"),rit.forEach(t),mSo=r(DLe," \u2014 "),EG=n(DLe,"A",{href:!0});var tit=s(EG);gSo=r(tit,"YosoForSequenceClassification"),tit.forEach(t),hSo=r(DLe," (YOSO model)"),DLe.forEach(t),j.forEach(t),pSo=i(sa),M9=n(sa,"P",{});var GLe=s(M9);_So=r(GLe,"The model is set in evaluation mode by default using "),Dfe=n(GLe,"CODE",{});var ait=s(Dfe);uSo=r(ait,"model.eval()"),ait.forEach(t),bSo=r(GLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(GLe,"CODE",{});var nit=s(Gfe);vSo=r(nit,"model.train()"),nit.forEach(t),GLe.forEach(t),FSo=i(sa),T(E9.$$.fragment,sa),sa.forEach(t),zs.forEach(t),mqe=i(f),Oi=n(f,"H2",{class:!0});var _je=s(Oi);C9=n(_je,"A",{id:!0,class:!0,href:!0});var sit=s(C9);Ofe=n(sit,"SPAN",{});var lit=s(Ofe);T(g6.$$.fragment,lit),lit.forEach(t),sit.forEach(t),TSo=i(_je),Vfe=n(_je,"SPAN",{});var iit=s(Vfe);MSo=r(iit,"AutoModelForMultipleChoice"),iit.forEach(t),_je.forEach(t),gqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(h6.$$.fragment,Ws),ESo=i(Ws),Vi=n(Ws,"P",{});var QK=s(Vi);CSo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CG=n(QK,"A",{href:!0});var dit=s(CG);wSo=r(dit,"from_pretrained()"),dit.forEach(t),ASo=r(QK," class method or the "),wG=n(QK,"A",{href:!0});var cit=s(wG);ySo=r(cit,"from_config()"),cit.forEach(t),LSo=r(QK,` class
method.`),QK.forEach(t),xSo=i(Ws),p6=n(Ws,"P",{});var uje=s(p6);$So=r(uje,"This class cannot be instantiated directly using "),Xfe=n(uje,"CODE",{});var fit=s(Xfe);kSo=r(fit,"__init__()"),fit.forEach(t),SSo=r(uje," (throws an error)."),uje.forEach(t),RSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var yw=s(dt);T(_6.$$.fragment,yw),PSo=i(yw),zfe=n(yw,"P",{});var mit=s(zfe);BSo=r(mit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mit.forEach(t),ISo=i(yw),Xi=n(yw,"P",{});var HK=s(Xi);qSo=r(HK,`Note:
Loading a model from its configuration file does `),Wfe=n(HK,"STRONG",{});var git=s(Wfe);NSo=r(git,"not"),git.forEach(t),jSo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(HK,"A",{href:!0});var hit=s(AG);DSo=r(hit,"from_pretrained()"),hit.forEach(t),GSo=r(HK," to load the model weights."),HK.forEach(t),OSo=i(yw),T(w9.$$.fragment,yw),yw.forEach(t),VSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(u6.$$.fragment,la),XSo=i(la),Qfe=n(la,"P",{});var pit=s(Qfe);zSo=r(pit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pit.forEach(t),WSo=i(la),Pa=n(la,"P",{});var Lw=s(Pa);QSo=r(Lw,"The model class to instantiate is selected based on the "),Hfe=n(Lw,"CODE",{});var _it=s(Hfe);HSo=r(_it,"model_type"),_it.forEach(t),USo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(Lw,"CODE",{});var uit=s(Ufe);JSo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),YSo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(Lw,"CODE",{});var bit=s(Jfe);KSo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),ZSo=r(Lw,":"),Lw.forEach(t),eRo=i(la),Y=n(la,"UL",{});var K=s(Y);A9=n(K,"LI",{});var OLe=s(A9);Yfe=n(OLe,"STRONG",{});var vit=s(Yfe);oRo=r(vit,"albert"),vit.forEach(t),rRo=r(OLe," \u2014 "),yG=n(OLe,"A",{href:!0});var Fit=s(yG);tRo=r(Fit,"AlbertForMultipleChoice"),Fit.forEach(t),aRo=r(OLe," (ALBERT model)"),OLe.forEach(t),nRo=i(K),y9=n(K,"LI",{});var VLe=s(y9);Kfe=n(VLe,"STRONG",{});var Tit=s(Kfe);sRo=r(Tit,"bert"),Tit.forEach(t),lRo=r(VLe," \u2014 "),LG=n(VLe,"A",{href:!0});var Mit=s(LG);iRo=r(Mit,"BertForMultipleChoice"),Mit.forEach(t),dRo=r(VLe," (BERT model)"),VLe.forEach(t),cRo=i(K),L9=n(K,"LI",{});var XLe=s(L9);Zfe=n(XLe,"STRONG",{});var Eit=s(Zfe);fRo=r(Eit,"big_bird"),Eit.forEach(t),mRo=r(XLe," \u2014 "),xG=n(XLe,"A",{href:!0});var Cit=s(xG);gRo=r(Cit,"BigBirdForMultipleChoice"),Cit.forEach(t),hRo=r(XLe," (BigBird model)"),XLe.forEach(t),pRo=i(K),x9=n(K,"LI",{});var zLe=s(x9);eme=n(zLe,"STRONG",{});var wit=s(eme);_Ro=r(wit,"camembert"),wit.forEach(t),uRo=r(zLe," \u2014 "),$G=n(zLe,"A",{href:!0});var Ait=s($G);bRo=r(Ait,"CamembertForMultipleChoice"),Ait.forEach(t),vRo=r(zLe," (CamemBERT model)"),zLe.forEach(t),FRo=i(K),$9=n(K,"LI",{});var WLe=s($9);ome=n(WLe,"STRONG",{});var yit=s(ome);TRo=r(yit,"canine"),yit.forEach(t),MRo=r(WLe," \u2014 "),kG=n(WLe,"A",{href:!0});var Lit=s(kG);ERo=r(Lit,"CanineForMultipleChoice"),Lit.forEach(t),CRo=r(WLe," (Canine model)"),WLe.forEach(t),wRo=i(K),k9=n(K,"LI",{});var QLe=s(k9);rme=n(QLe,"STRONG",{});var xit=s(rme);ARo=r(xit,"convbert"),xit.forEach(t),yRo=r(QLe," \u2014 "),SG=n(QLe,"A",{href:!0});var $it=s(SG);LRo=r($it,"ConvBertForMultipleChoice"),$it.forEach(t),xRo=r(QLe," (ConvBERT model)"),QLe.forEach(t),$Ro=i(K),S9=n(K,"LI",{});var HLe=s(S9);tme=n(HLe,"STRONG",{});var kit=s(tme);kRo=r(kit,"data2vec-text"),kit.forEach(t),SRo=r(HLe," \u2014 "),RG=n(HLe,"A",{href:!0});var Sit=s(RG);RRo=r(Sit,"Data2VecTextForMultipleChoice"),Sit.forEach(t),PRo=r(HLe," (Data2VecText model)"),HLe.forEach(t),BRo=i(K),R9=n(K,"LI",{});var ULe=s(R9);ame=n(ULe,"STRONG",{});var Rit=s(ame);IRo=r(Rit,"deberta-v2"),Rit.forEach(t),qRo=r(ULe," \u2014 "),PG=n(ULe,"A",{href:!0});var Pit=s(PG);NRo=r(Pit,"DebertaV2ForMultipleChoice"),Pit.forEach(t),jRo=r(ULe," (DeBERTa-v2 model)"),ULe.forEach(t),DRo=i(K),P9=n(K,"LI",{});var JLe=s(P9);nme=n(JLe,"STRONG",{});var Bit=s(nme);GRo=r(Bit,"distilbert"),Bit.forEach(t),ORo=r(JLe," \u2014 "),BG=n(JLe,"A",{href:!0});var Iit=s(BG);VRo=r(Iit,"DistilBertForMultipleChoice"),Iit.forEach(t),XRo=r(JLe," (DistilBERT model)"),JLe.forEach(t),zRo=i(K),B9=n(K,"LI",{});var YLe=s(B9);sme=n(YLe,"STRONG",{});var qit=s(sme);WRo=r(qit,"electra"),qit.forEach(t),QRo=r(YLe," \u2014 "),IG=n(YLe,"A",{href:!0});var Nit=s(IG);HRo=r(Nit,"ElectraForMultipleChoice"),Nit.forEach(t),URo=r(YLe," (ELECTRA model)"),YLe.forEach(t),JRo=i(K),I9=n(K,"LI",{});var KLe=s(I9);lme=n(KLe,"STRONG",{});var jit=s(lme);YRo=r(jit,"flaubert"),jit.forEach(t),KRo=r(KLe," \u2014 "),qG=n(KLe,"A",{href:!0});var Dit=s(qG);ZRo=r(Dit,"FlaubertForMultipleChoice"),Dit.forEach(t),ePo=r(KLe," (FlauBERT model)"),KLe.forEach(t),oPo=i(K),q9=n(K,"LI",{});var ZLe=s(q9);ime=n(ZLe,"STRONG",{});var Git=s(ime);rPo=r(Git,"fnet"),Git.forEach(t),tPo=r(ZLe," \u2014 "),NG=n(ZLe,"A",{href:!0});var Oit=s(NG);aPo=r(Oit,"FNetForMultipleChoice"),Oit.forEach(t),nPo=r(ZLe," (FNet model)"),ZLe.forEach(t),sPo=i(K),N9=n(K,"LI",{});var e8e=s(N9);dme=n(e8e,"STRONG",{});var Vit=s(dme);lPo=r(Vit,"funnel"),Vit.forEach(t),iPo=r(e8e," \u2014 "),jG=n(e8e,"A",{href:!0});var Xit=s(jG);dPo=r(Xit,"FunnelForMultipleChoice"),Xit.forEach(t),cPo=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),fPo=i(K),j9=n(K,"LI",{});var o8e=s(j9);cme=n(o8e,"STRONG",{});var zit=s(cme);mPo=r(zit,"ibert"),zit.forEach(t),gPo=r(o8e," \u2014 "),DG=n(o8e,"A",{href:!0});var Wit=s(DG);hPo=r(Wit,"IBertForMultipleChoice"),Wit.forEach(t),pPo=r(o8e," (I-BERT model)"),o8e.forEach(t),_Po=i(K),D9=n(K,"LI",{});var r8e=s(D9);fme=n(r8e,"STRONG",{});var Qit=s(fme);uPo=r(Qit,"longformer"),Qit.forEach(t),bPo=r(r8e," \u2014 "),GG=n(r8e,"A",{href:!0});var Hit=s(GG);vPo=r(Hit,"LongformerForMultipleChoice"),Hit.forEach(t),FPo=r(r8e," (Longformer model)"),r8e.forEach(t),TPo=i(K),G9=n(K,"LI",{});var t8e=s(G9);mme=n(t8e,"STRONG",{});var Uit=s(mme);MPo=r(Uit,"megatron-bert"),Uit.forEach(t),EPo=r(t8e," \u2014 "),OG=n(t8e,"A",{href:!0});var Jit=s(OG);CPo=r(Jit,"MegatronBertForMultipleChoice"),Jit.forEach(t),wPo=r(t8e," (MegatronBert model)"),t8e.forEach(t),APo=i(K),O9=n(K,"LI",{});var a8e=s(O9);gme=n(a8e,"STRONG",{});var Yit=s(gme);yPo=r(Yit,"mobilebert"),Yit.forEach(t),LPo=r(a8e," \u2014 "),VG=n(a8e,"A",{href:!0});var Kit=s(VG);xPo=r(Kit,"MobileBertForMultipleChoice"),Kit.forEach(t),$Po=r(a8e," (MobileBERT model)"),a8e.forEach(t),kPo=i(K),V9=n(K,"LI",{});var n8e=s(V9);hme=n(n8e,"STRONG",{});var Zit=s(hme);SPo=r(Zit,"mpnet"),Zit.forEach(t),RPo=r(n8e," \u2014 "),XG=n(n8e,"A",{href:!0});var edt=s(XG);PPo=r(edt,"MPNetForMultipleChoice"),edt.forEach(t),BPo=r(n8e," (MPNet model)"),n8e.forEach(t),IPo=i(K),X9=n(K,"LI",{});var s8e=s(X9);pme=n(s8e,"STRONG",{});var odt=s(pme);qPo=r(odt,"nystromformer"),odt.forEach(t),NPo=r(s8e," \u2014 "),zG=n(s8e,"A",{href:!0});var rdt=s(zG);jPo=r(rdt,"NystromformerForMultipleChoice"),rdt.forEach(t),DPo=r(s8e," (Nystromformer model)"),s8e.forEach(t),GPo=i(K),z9=n(K,"LI",{});var l8e=s(z9);_me=n(l8e,"STRONG",{});var tdt=s(_me);OPo=r(tdt,"qdqbert"),tdt.forEach(t),VPo=r(l8e," \u2014 "),WG=n(l8e,"A",{href:!0});var adt=s(WG);XPo=r(adt,"QDQBertForMultipleChoice"),adt.forEach(t),zPo=r(l8e," (QDQBert model)"),l8e.forEach(t),WPo=i(K),W9=n(K,"LI",{});var i8e=s(W9);ume=n(i8e,"STRONG",{});var ndt=s(ume);QPo=r(ndt,"rembert"),ndt.forEach(t),HPo=r(i8e," \u2014 "),QG=n(i8e,"A",{href:!0});var sdt=s(QG);UPo=r(sdt,"RemBertForMultipleChoice"),sdt.forEach(t),JPo=r(i8e," (RemBERT model)"),i8e.forEach(t),YPo=i(K),Q9=n(K,"LI",{});var d8e=s(Q9);bme=n(d8e,"STRONG",{});var ldt=s(bme);KPo=r(ldt,"roberta"),ldt.forEach(t),ZPo=r(d8e," \u2014 "),HG=n(d8e,"A",{href:!0});var idt=s(HG);eBo=r(idt,"RobertaForMultipleChoice"),idt.forEach(t),oBo=r(d8e," (RoBERTa model)"),d8e.forEach(t),rBo=i(K),H9=n(K,"LI",{});var c8e=s(H9);vme=n(c8e,"STRONG",{});var ddt=s(vme);tBo=r(ddt,"roformer"),ddt.forEach(t),aBo=r(c8e," \u2014 "),UG=n(c8e,"A",{href:!0});var cdt=s(UG);nBo=r(cdt,"RoFormerForMultipleChoice"),cdt.forEach(t),sBo=r(c8e," (RoFormer model)"),c8e.forEach(t),lBo=i(K),U9=n(K,"LI",{});var f8e=s(U9);Fme=n(f8e,"STRONG",{});var fdt=s(Fme);iBo=r(fdt,"squeezebert"),fdt.forEach(t),dBo=r(f8e," \u2014 "),JG=n(f8e,"A",{href:!0});var mdt=s(JG);cBo=r(mdt,"SqueezeBertForMultipleChoice"),mdt.forEach(t),fBo=r(f8e," (SqueezeBERT model)"),f8e.forEach(t),mBo=i(K),J9=n(K,"LI",{});var m8e=s(J9);Tme=n(m8e,"STRONG",{});var gdt=s(Tme);gBo=r(gdt,"xlm"),gdt.forEach(t),hBo=r(m8e," \u2014 "),YG=n(m8e,"A",{href:!0});var hdt=s(YG);pBo=r(hdt,"XLMForMultipleChoice"),hdt.forEach(t),_Bo=r(m8e," (XLM model)"),m8e.forEach(t),uBo=i(K),Y9=n(K,"LI",{});var g8e=s(Y9);Mme=n(g8e,"STRONG",{});var pdt=s(Mme);bBo=r(pdt,"xlm-roberta"),pdt.forEach(t),vBo=r(g8e," \u2014 "),KG=n(g8e,"A",{href:!0});var _dt=s(KG);FBo=r(_dt,"XLMRobertaForMultipleChoice"),_dt.forEach(t),TBo=r(g8e," (XLM-RoBERTa model)"),g8e.forEach(t),MBo=i(K),K9=n(K,"LI",{});var h8e=s(K9);Eme=n(h8e,"STRONG",{});var udt=s(Eme);EBo=r(udt,"xlm-roberta-xl"),udt.forEach(t),CBo=r(h8e," \u2014 "),ZG=n(h8e,"A",{href:!0});var bdt=s(ZG);wBo=r(bdt,"XLMRobertaXLForMultipleChoice"),bdt.forEach(t),ABo=r(h8e," (XLM-RoBERTa-XL model)"),h8e.forEach(t),yBo=i(K),Z9=n(K,"LI",{});var p8e=s(Z9);Cme=n(p8e,"STRONG",{});var vdt=s(Cme);LBo=r(vdt,"xlnet"),vdt.forEach(t),xBo=r(p8e," \u2014 "),eO=n(p8e,"A",{href:!0});var Fdt=s(eO);$Bo=r(Fdt,"XLNetForMultipleChoice"),Fdt.forEach(t),kBo=r(p8e," (XLNet model)"),p8e.forEach(t),SBo=i(K),eb=n(K,"LI",{});var _8e=s(eb);wme=n(_8e,"STRONG",{});var Tdt=s(wme);RBo=r(Tdt,"yoso"),Tdt.forEach(t),PBo=r(_8e," \u2014 "),oO=n(_8e,"A",{href:!0});var Mdt=s(oO);BBo=r(Mdt,"YosoForMultipleChoice"),Mdt.forEach(t),IBo=r(_8e," (YOSO model)"),_8e.forEach(t),K.forEach(t),qBo=i(la),ob=n(la,"P",{});var u8e=s(ob);NBo=r(u8e,"The model is set in evaluation mode by default using "),Ame=n(u8e,"CODE",{});var Edt=s(Ame);jBo=r(Edt,"model.eval()"),Edt.forEach(t),DBo=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(u8e,"CODE",{});var Cdt=s(yme);GBo=r(Cdt,"model.train()"),Cdt.forEach(t),u8e.forEach(t),OBo=i(la),T(rb.$$.fragment,la),la.forEach(t),Ws.forEach(t),hqe=i(f),zi=n(f,"H2",{class:!0});var bje=s(zi);tb=n(bje,"A",{id:!0,class:!0,href:!0});var wdt=s(tb);Lme=n(wdt,"SPAN",{});var Adt=s(Lme);T(b6.$$.fragment,Adt),Adt.forEach(t),wdt.forEach(t),VBo=i(bje),xme=n(bje,"SPAN",{});var ydt=s(xme);XBo=r(ydt,"AutoModelForNextSentencePrediction"),ydt.forEach(t),bje.forEach(t),pqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(v6.$$.fragment,Qs),zBo=i(Qs),Wi=n(Qs,"P",{});var UK=s(Wi);WBo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rO=n(UK,"A",{href:!0});var Ldt=s(rO);QBo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),HBo=r(UK," class method or the "),tO=n(UK,"A",{href:!0});var xdt=s(tO);UBo=r(xdt,"from_config()"),xdt.forEach(t),JBo=r(UK,` class
method.`),UK.forEach(t),YBo=i(Qs),F6=n(Qs,"P",{});var vje=s(F6);KBo=r(vje,"This class cannot be instantiated directly using "),$me=n(vje,"CODE",{});var $dt=s($me);ZBo=r($dt,"__init__()"),$dt.forEach(t),eIo=r(vje," (throws an error)."),vje.forEach(t),oIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var xw=s(ct);T(T6.$$.fragment,xw),rIo=i(xw),kme=n(xw,"P",{});var kdt=s(kme);tIo=r(kdt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kdt.forEach(t),aIo=i(xw),Qi=n(xw,"P",{});var JK=s(Qi);nIo=r(JK,`Note:
Loading a model from its configuration file does `),Sme=n(JK,"STRONG",{});var Sdt=s(Sme);sIo=r(Sdt,"not"),Sdt.forEach(t),lIo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(JK,"A",{href:!0});var Rdt=s(aO);iIo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),dIo=r(JK," to load the model weights."),JK.forEach(t),cIo=i(xw),T(ab.$$.fragment,xw),xw.forEach(t),fIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(M6.$$.fragment,ia),mIo=i(ia),Rme=n(ia,"P",{});var Pdt=s(Rme);gIo=r(Pdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pdt.forEach(t),hIo=i(ia),Ba=n(ia,"P",{});var $w=s(Ba);pIo=r($w,"The model class to instantiate is selected based on the "),Pme=n($w,"CODE",{});var Bdt=s(Pme);_Io=r(Bdt,"model_type"),Bdt.forEach(t),uIo=r($w,` property of the config object (either
passed as an argument or loaded from `),Bme=n($w,"CODE",{});var Idt=s(Bme);bIo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),vIo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=n($w,"CODE",{});var qdt=s(Ime);FIo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),TIo=r($w,":"),$w.forEach(t),MIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);nb=n(Hs,"LI",{});var b8e=s(nb);qme=n(b8e,"STRONG",{});var Ndt=s(qme);EIo=r(Ndt,"bert"),Ndt.forEach(t),CIo=r(b8e," \u2014 "),nO=n(b8e,"A",{href:!0});var jdt=s(nO);wIo=r(jdt,"BertForNextSentencePrediction"),jdt.forEach(t),AIo=r(b8e," (BERT model)"),b8e.forEach(t),yIo=i(Hs),sb=n(Hs,"LI",{});var v8e=s(sb);Nme=n(v8e,"STRONG",{});var Ddt=s(Nme);LIo=r(Ddt,"fnet"),Ddt.forEach(t),xIo=r(v8e," \u2014 "),sO=n(v8e,"A",{href:!0});var Gdt=s(sO);$Io=r(Gdt,"FNetForNextSentencePrediction"),Gdt.forEach(t),kIo=r(v8e," (FNet model)"),v8e.forEach(t),SIo=i(Hs),lb=n(Hs,"LI",{});var F8e=s(lb);jme=n(F8e,"STRONG",{});var Odt=s(jme);RIo=r(Odt,"megatron-bert"),Odt.forEach(t),PIo=r(F8e," \u2014 "),lO=n(F8e,"A",{href:!0});var Vdt=s(lO);BIo=r(Vdt,"MegatronBertForNextSentencePrediction"),Vdt.forEach(t),IIo=r(F8e," (MegatronBert model)"),F8e.forEach(t),qIo=i(Hs),ib=n(Hs,"LI",{});var T8e=s(ib);Dme=n(T8e,"STRONG",{});var Xdt=s(Dme);NIo=r(Xdt,"mobilebert"),Xdt.forEach(t),jIo=r(T8e," \u2014 "),iO=n(T8e,"A",{href:!0});var zdt=s(iO);DIo=r(zdt,"MobileBertForNextSentencePrediction"),zdt.forEach(t),GIo=r(T8e," (MobileBERT model)"),T8e.forEach(t),OIo=i(Hs),db=n(Hs,"LI",{});var M8e=s(db);Gme=n(M8e,"STRONG",{});var Wdt=s(Gme);VIo=r(Wdt,"qdqbert"),Wdt.forEach(t),XIo=r(M8e," \u2014 "),dO=n(M8e,"A",{href:!0});var Qdt=s(dO);zIo=r(Qdt,"QDQBertForNextSentencePrediction"),Qdt.forEach(t),WIo=r(M8e," (QDQBert model)"),M8e.forEach(t),Hs.forEach(t),QIo=i(ia),cb=n(ia,"P",{});var E8e=s(cb);HIo=r(E8e,"The model is set in evaluation mode by default using "),Ome=n(E8e,"CODE",{});var Hdt=s(Ome);UIo=r(Hdt,"model.eval()"),Hdt.forEach(t),JIo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=n(E8e,"CODE",{});var Udt=s(Vme);YIo=r(Udt,"model.train()"),Udt.forEach(t),E8e.forEach(t),KIo=i(ia),T(fb.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),_qe=i(f),Hi=n(f,"H2",{class:!0});var Fje=s(Hi);mb=n(Fje,"A",{id:!0,class:!0,href:!0});var Jdt=s(mb);Xme=n(Jdt,"SPAN",{});var Ydt=s(Xme);T(E6.$$.fragment,Ydt),Ydt.forEach(t),Jdt.forEach(t),ZIo=i(Fje),zme=n(Fje,"SPAN",{});var Kdt=s(zme);eqo=r(Kdt,"AutoModelForTokenClassification"),Kdt.forEach(t),Fje.forEach(t),uqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(C6.$$.fragment,Us),oqo=i(Us),Ui=n(Us,"P",{});var YK=s(Ui);rqo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cO=n(YK,"A",{href:!0});var Zdt=s(cO);tqo=r(Zdt,"from_pretrained()"),Zdt.forEach(t),aqo=r(YK," class method or the "),fO=n(YK,"A",{href:!0});var ect=s(fO);nqo=r(ect,"from_config()"),ect.forEach(t),sqo=r(YK,` class
method.`),YK.forEach(t),lqo=i(Us),w6=n(Us,"P",{});var Tje=s(w6);iqo=r(Tje,"This class cannot be instantiated directly using "),Wme=n(Tje,"CODE",{});var oct=s(Wme);dqo=r(oct,"__init__()"),oct.forEach(t),cqo=r(Tje," (throws an error)."),Tje.forEach(t),fqo=i(Us),ft=n(Us,"DIV",{class:!0});var kw=s(ft);T(A6.$$.fragment,kw),mqo=i(kw),Qme=n(kw,"P",{});var rct=s(Qme);gqo=r(rct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rct.forEach(t),hqo=i(kw),Ji=n(kw,"P",{});var KK=s(Ji);pqo=r(KK,`Note:
Loading a model from its configuration file does `),Hme=n(KK,"STRONG",{});var tct=s(Hme);_qo=r(tct,"not"),tct.forEach(t),uqo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(KK,"A",{href:!0});var act=s(mO);bqo=r(act,"from_pretrained()"),act.forEach(t),vqo=r(KK," to load the model weights."),KK.forEach(t),Fqo=i(kw),T(gb.$$.fragment,kw),kw.forEach(t),Tqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(y6.$$.fragment,da),Mqo=i(da),Ume=n(da,"P",{});var nct=s(Ume);Eqo=r(nct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nct.forEach(t),Cqo=i(da),Ia=n(da,"P",{});var Sw=s(Ia);wqo=r(Sw,"The model class to instantiate is selected based on the "),Jme=n(Sw,"CODE",{});var sct=s(Jme);Aqo=r(sct,"model_type"),sct.forEach(t),yqo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Yme=n(Sw,"CODE",{});var lct=s(Yme);Lqo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),xqo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=n(Sw,"CODE",{});var ict=s(Kme);$qo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),kqo=r(Sw,":"),Sw.forEach(t),Sqo=i(da),U=n(da,"UL",{});var J=s(U);hb=n(J,"LI",{});var C8e=s(hb);Zme=n(C8e,"STRONG",{});var dct=s(Zme);Rqo=r(dct,"albert"),dct.forEach(t),Pqo=r(C8e," \u2014 "),gO=n(C8e,"A",{href:!0});var cct=s(gO);Bqo=r(cct,"AlbertForTokenClassification"),cct.forEach(t),Iqo=r(C8e," (ALBERT model)"),C8e.forEach(t),qqo=i(J),pb=n(J,"LI",{});var w8e=s(pb);ege=n(w8e,"STRONG",{});var fct=s(ege);Nqo=r(fct,"bert"),fct.forEach(t),jqo=r(w8e," \u2014 "),hO=n(w8e,"A",{href:!0});var mct=s(hO);Dqo=r(mct,"BertForTokenClassification"),mct.forEach(t),Gqo=r(w8e," (BERT model)"),w8e.forEach(t),Oqo=i(J),_b=n(J,"LI",{});var A8e=s(_b);oge=n(A8e,"STRONG",{});var gct=s(oge);Vqo=r(gct,"big_bird"),gct.forEach(t),Xqo=r(A8e," \u2014 "),pO=n(A8e,"A",{href:!0});var hct=s(pO);zqo=r(hct,"BigBirdForTokenClassification"),hct.forEach(t),Wqo=r(A8e," (BigBird model)"),A8e.forEach(t),Qqo=i(J),ub=n(J,"LI",{});var y8e=s(ub);rge=n(y8e,"STRONG",{});var pct=s(rge);Hqo=r(pct,"camembert"),pct.forEach(t),Uqo=r(y8e," \u2014 "),_O=n(y8e,"A",{href:!0});var _ct=s(_O);Jqo=r(_ct,"CamembertForTokenClassification"),_ct.forEach(t),Yqo=r(y8e," (CamemBERT model)"),y8e.forEach(t),Kqo=i(J),bb=n(J,"LI",{});var L8e=s(bb);tge=n(L8e,"STRONG",{});var uct=s(tge);Zqo=r(uct,"canine"),uct.forEach(t),eNo=r(L8e," \u2014 "),uO=n(L8e,"A",{href:!0});var bct=s(uO);oNo=r(bct,"CanineForTokenClassification"),bct.forEach(t),rNo=r(L8e," (Canine model)"),L8e.forEach(t),tNo=i(J),vb=n(J,"LI",{});var x8e=s(vb);age=n(x8e,"STRONG",{});var vct=s(age);aNo=r(vct,"convbert"),vct.forEach(t),nNo=r(x8e," \u2014 "),bO=n(x8e,"A",{href:!0});var Fct=s(bO);sNo=r(Fct,"ConvBertForTokenClassification"),Fct.forEach(t),lNo=r(x8e," (ConvBERT model)"),x8e.forEach(t),iNo=i(J),Fb=n(J,"LI",{});var $8e=s(Fb);nge=n($8e,"STRONG",{});var Tct=s(nge);dNo=r(Tct,"data2vec-text"),Tct.forEach(t),cNo=r($8e," \u2014 "),vO=n($8e,"A",{href:!0});var Mct=s(vO);fNo=r(Mct,"Data2VecTextForTokenClassification"),Mct.forEach(t),mNo=r($8e," (Data2VecText model)"),$8e.forEach(t),gNo=i(J),Tb=n(J,"LI",{});var k8e=s(Tb);sge=n(k8e,"STRONG",{});var Ect=s(sge);hNo=r(Ect,"deberta"),Ect.forEach(t),pNo=r(k8e," \u2014 "),FO=n(k8e,"A",{href:!0});var Cct=s(FO);_No=r(Cct,"DebertaForTokenClassification"),Cct.forEach(t),uNo=r(k8e," (DeBERTa model)"),k8e.forEach(t),bNo=i(J),Mb=n(J,"LI",{});var S8e=s(Mb);lge=n(S8e,"STRONG",{});var wct=s(lge);vNo=r(wct,"deberta-v2"),wct.forEach(t),FNo=r(S8e," \u2014 "),TO=n(S8e,"A",{href:!0});var Act=s(TO);TNo=r(Act,"DebertaV2ForTokenClassification"),Act.forEach(t),MNo=r(S8e," (DeBERTa-v2 model)"),S8e.forEach(t),ENo=i(J),Eb=n(J,"LI",{});var R8e=s(Eb);ige=n(R8e,"STRONG",{});var yct=s(ige);CNo=r(yct,"distilbert"),yct.forEach(t),wNo=r(R8e," \u2014 "),MO=n(R8e,"A",{href:!0});var Lct=s(MO);ANo=r(Lct,"DistilBertForTokenClassification"),Lct.forEach(t),yNo=r(R8e," (DistilBERT model)"),R8e.forEach(t),LNo=i(J),Cb=n(J,"LI",{});var P8e=s(Cb);dge=n(P8e,"STRONG",{});var xct=s(dge);xNo=r(xct,"electra"),xct.forEach(t),$No=r(P8e," \u2014 "),EO=n(P8e,"A",{href:!0});var $ct=s(EO);kNo=r($ct,"ElectraForTokenClassification"),$ct.forEach(t),SNo=r(P8e," (ELECTRA model)"),P8e.forEach(t),RNo=i(J),wb=n(J,"LI",{});var B8e=s(wb);cge=n(B8e,"STRONG",{});var kct=s(cge);PNo=r(kct,"flaubert"),kct.forEach(t),BNo=r(B8e," \u2014 "),CO=n(B8e,"A",{href:!0});var Sct=s(CO);INo=r(Sct,"FlaubertForTokenClassification"),Sct.forEach(t),qNo=r(B8e," (FlauBERT model)"),B8e.forEach(t),NNo=i(J),Ab=n(J,"LI",{});var I8e=s(Ab);fge=n(I8e,"STRONG",{});var Rct=s(fge);jNo=r(Rct,"fnet"),Rct.forEach(t),DNo=r(I8e," \u2014 "),wO=n(I8e,"A",{href:!0});var Pct=s(wO);GNo=r(Pct,"FNetForTokenClassification"),Pct.forEach(t),ONo=r(I8e," (FNet model)"),I8e.forEach(t),VNo=i(J),yb=n(J,"LI",{});var q8e=s(yb);mge=n(q8e,"STRONG",{});var Bct=s(mge);XNo=r(Bct,"funnel"),Bct.forEach(t),zNo=r(q8e," \u2014 "),AO=n(q8e,"A",{href:!0});var Ict=s(AO);WNo=r(Ict,"FunnelForTokenClassification"),Ict.forEach(t),QNo=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),HNo=i(J),Lb=n(J,"LI",{});var N8e=s(Lb);gge=n(N8e,"STRONG",{});var qct=s(gge);UNo=r(qct,"gpt2"),qct.forEach(t),JNo=r(N8e," \u2014 "),yO=n(N8e,"A",{href:!0});var Nct=s(yO);YNo=r(Nct,"GPT2ForTokenClassification"),Nct.forEach(t),KNo=r(N8e," (OpenAI GPT-2 model)"),N8e.forEach(t),ZNo=i(J),xb=n(J,"LI",{});var j8e=s(xb);hge=n(j8e,"STRONG",{});var jct=s(hge);ejo=r(jct,"ibert"),jct.forEach(t),ojo=r(j8e," \u2014 "),LO=n(j8e,"A",{href:!0});var Dct=s(LO);rjo=r(Dct,"IBertForTokenClassification"),Dct.forEach(t),tjo=r(j8e," (I-BERT model)"),j8e.forEach(t),ajo=i(J),$b=n(J,"LI",{});var D8e=s($b);pge=n(D8e,"STRONG",{});var Gct=s(pge);njo=r(Gct,"layoutlm"),Gct.forEach(t),sjo=r(D8e," \u2014 "),xO=n(D8e,"A",{href:!0});var Oct=s(xO);ljo=r(Oct,"LayoutLMForTokenClassification"),Oct.forEach(t),ijo=r(D8e," (LayoutLM model)"),D8e.forEach(t),djo=i(J),kb=n(J,"LI",{});var G8e=s(kb);_ge=n(G8e,"STRONG",{});var Vct=s(_ge);cjo=r(Vct,"layoutlmv2"),Vct.forEach(t),fjo=r(G8e," \u2014 "),$O=n(G8e,"A",{href:!0});var Xct=s($O);mjo=r(Xct,"LayoutLMv2ForTokenClassification"),Xct.forEach(t),gjo=r(G8e," (LayoutLMv2 model)"),G8e.forEach(t),hjo=i(J),Sb=n(J,"LI",{});var O8e=s(Sb);uge=n(O8e,"STRONG",{});var zct=s(uge);pjo=r(zct,"longformer"),zct.forEach(t),_jo=r(O8e," \u2014 "),kO=n(O8e,"A",{href:!0});var Wct=s(kO);ujo=r(Wct,"LongformerForTokenClassification"),Wct.forEach(t),bjo=r(O8e," (Longformer model)"),O8e.forEach(t),vjo=i(J),Rb=n(J,"LI",{});var V8e=s(Rb);bge=n(V8e,"STRONG",{});var Qct=s(bge);Fjo=r(Qct,"megatron-bert"),Qct.forEach(t),Tjo=r(V8e," \u2014 "),SO=n(V8e,"A",{href:!0});var Hct=s(SO);Mjo=r(Hct,"MegatronBertForTokenClassification"),Hct.forEach(t),Ejo=r(V8e," (MegatronBert model)"),V8e.forEach(t),Cjo=i(J),Pb=n(J,"LI",{});var X8e=s(Pb);vge=n(X8e,"STRONG",{});var Uct=s(vge);wjo=r(Uct,"mobilebert"),Uct.forEach(t),Ajo=r(X8e," \u2014 "),RO=n(X8e,"A",{href:!0});var Jct=s(RO);yjo=r(Jct,"MobileBertForTokenClassification"),Jct.forEach(t),Ljo=r(X8e," (MobileBERT model)"),X8e.forEach(t),xjo=i(J),Bb=n(J,"LI",{});var z8e=s(Bb);Fge=n(z8e,"STRONG",{});var Yct=s(Fge);$jo=r(Yct,"mpnet"),Yct.forEach(t),kjo=r(z8e," \u2014 "),PO=n(z8e,"A",{href:!0});var Kct=s(PO);Sjo=r(Kct,"MPNetForTokenClassification"),Kct.forEach(t),Rjo=r(z8e," (MPNet model)"),z8e.forEach(t),Pjo=i(J),Ib=n(J,"LI",{});var W8e=s(Ib);Tge=n(W8e,"STRONG",{});var Zct=s(Tge);Bjo=r(Zct,"nystromformer"),Zct.forEach(t),Ijo=r(W8e," \u2014 "),BO=n(W8e,"A",{href:!0});var eft=s(BO);qjo=r(eft,"NystromformerForTokenClassification"),eft.forEach(t),Njo=r(W8e," (Nystromformer model)"),W8e.forEach(t),jjo=i(J),qb=n(J,"LI",{});var Q8e=s(qb);Mge=n(Q8e,"STRONG",{});var oft=s(Mge);Djo=r(oft,"qdqbert"),oft.forEach(t),Gjo=r(Q8e," \u2014 "),IO=n(Q8e,"A",{href:!0});var rft=s(IO);Ojo=r(rft,"QDQBertForTokenClassification"),rft.forEach(t),Vjo=r(Q8e," (QDQBert model)"),Q8e.forEach(t),Xjo=i(J),Nb=n(J,"LI",{});var H8e=s(Nb);Ege=n(H8e,"STRONG",{});var tft=s(Ege);zjo=r(tft,"rembert"),tft.forEach(t),Wjo=r(H8e," \u2014 "),qO=n(H8e,"A",{href:!0});var aft=s(qO);Qjo=r(aft,"RemBertForTokenClassification"),aft.forEach(t),Hjo=r(H8e," (RemBERT model)"),H8e.forEach(t),Ujo=i(J),jb=n(J,"LI",{});var U8e=s(jb);Cge=n(U8e,"STRONG",{});var nft=s(Cge);Jjo=r(nft,"roberta"),nft.forEach(t),Yjo=r(U8e," \u2014 "),NO=n(U8e,"A",{href:!0});var sft=s(NO);Kjo=r(sft,"RobertaForTokenClassification"),sft.forEach(t),Zjo=r(U8e," (RoBERTa model)"),U8e.forEach(t),eDo=i(J),Db=n(J,"LI",{});var J8e=s(Db);wge=n(J8e,"STRONG",{});var lft=s(wge);oDo=r(lft,"roformer"),lft.forEach(t),rDo=r(J8e," \u2014 "),jO=n(J8e,"A",{href:!0});var ift=s(jO);tDo=r(ift,"RoFormerForTokenClassification"),ift.forEach(t),aDo=r(J8e," (RoFormer model)"),J8e.forEach(t),nDo=i(J),Gb=n(J,"LI",{});var Y8e=s(Gb);Age=n(Y8e,"STRONG",{});var dft=s(Age);sDo=r(dft,"squeezebert"),dft.forEach(t),lDo=r(Y8e," \u2014 "),DO=n(Y8e,"A",{href:!0});var cft=s(DO);iDo=r(cft,"SqueezeBertForTokenClassification"),cft.forEach(t),dDo=r(Y8e," (SqueezeBERT model)"),Y8e.forEach(t),cDo=i(J),Ob=n(J,"LI",{});var K8e=s(Ob);yge=n(K8e,"STRONG",{});var fft=s(yge);fDo=r(fft,"xlm"),fft.forEach(t),mDo=r(K8e," \u2014 "),GO=n(K8e,"A",{href:!0});var mft=s(GO);gDo=r(mft,"XLMForTokenClassification"),mft.forEach(t),hDo=r(K8e," (XLM model)"),K8e.forEach(t),pDo=i(J),Vb=n(J,"LI",{});var Z8e=s(Vb);Lge=n(Z8e,"STRONG",{});var gft=s(Lge);_Do=r(gft,"xlm-roberta"),gft.forEach(t),uDo=r(Z8e," \u2014 "),OO=n(Z8e,"A",{href:!0});var hft=s(OO);bDo=r(hft,"XLMRobertaForTokenClassification"),hft.forEach(t),vDo=r(Z8e," (XLM-RoBERTa model)"),Z8e.forEach(t),FDo=i(J),Xb=n(J,"LI",{});var exe=s(Xb);xge=n(exe,"STRONG",{});var pft=s(xge);TDo=r(pft,"xlm-roberta-xl"),pft.forEach(t),MDo=r(exe," \u2014 "),VO=n(exe,"A",{href:!0});var _ft=s(VO);EDo=r(_ft,"XLMRobertaXLForTokenClassification"),_ft.forEach(t),CDo=r(exe," (XLM-RoBERTa-XL model)"),exe.forEach(t),wDo=i(J),zb=n(J,"LI",{});var oxe=s(zb);$ge=n(oxe,"STRONG",{});var uft=s($ge);ADo=r(uft,"xlnet"),uft.forEach(t),yDo=r(oxe," \u2014 "),XO=n(oxe,"A",{href:!0});var bft=s(XO);LDo=r(bft,"XLNetForTokenClassification"),bft.forEach(t),xDo=r(oxe," (XLNet model)"),oxe.forEach(t),$Do=i(J),Wb=n(J,"LI",{});var rxe=s(Wb);kge=n(rxe,"STRONG",{});var vft=s(kge);kDo=r(vft,"yoso"),vft.forEach(t),SDo=r(rxe," \u2014 "),zO=n(rxe,"A",{href:!0});var Fft=s(zO);RDo=r(Fft,"YosoForTokenClassification"),Fft.forEach(t),PDo=r(rxe," (YOSO model)"),rxe.forEach(t),J.forEach(t),BDo=i(da),Qb=n(da,"P",{});var txe=s(Qb);IDo=r(txe,"The model is set in evaluation mode by default using "),Sge=n(txe,"CODE",{});var Tft=s(Sge);qDo=r(Tft,"model.eval()"),Tft.forEach(t),NDo=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(txe,"CODE",{});var Mft=s(Rge);jDo=r(Mft,"model.train()"),Mft.forEach(t),txe.forEach(t),DDo=i(da),T(Hb.$$.fragment,da),da.forEach(t),Us.forEach(t),bqe=i(f),Yi=n(f,"H2",{class:!0});var Mje=s(Yi);Ub=n(Mje,"A",{id:!0,class:!0,href:!0});var Eft=s(Ub);Pge=n(Eft,"SPAN",{});var Cft=s(Pge);T(L6.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),GDo=i(Mje),Bge=n(Mje,"SPAN",{});var wft=s(Bge);ODo=r(wft,"AutoModelForQuestionAnswering"),wft.forEach(t),Mje.forEach(t),vqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(x6.$$.fragment,Js),VDo=i(Js),Ki=n(Js,"P",{});var ZK=s(Ki);XDo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WO=n(ZK,"A",{href:!0});var Aft=s(WO);zDo=r(Aft,"from_pretrained()"),Aft.forEach(t),WDo=r(ZK," class method or the "),QO=n(ZK,"A",{href:!0});var yft=s(QO);QDo=r(yft,"from_config()"),yft.forEach(t),HDo=r(ZK,` class
method.`),ZK.forEach(t),UDo=i(Js),$6=n(Js,"P",{});var Eje=s($6);JDo=r(Eje,"This class cannot be instantiated directly using "),Ige=n(Eje,"CODE",{});var Lft=s(Ige);YDo=r(Lft,"__init__()"),Lft.forEach(t),KDo=r(Eje," (throws an error)."),Eje.forEach(t),ZDo=i(Js),mt=n(Js,"DIV",{class:!0});var Rw=s(mt);T(k6.$$.fragment,Rw),eGo=i(Rw),qge=n(Rw,"P",{});var xft=s(qge);oGo=r(xft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xft.forEach(t),rGo=i(Rw),Zi=n(Rw,"P",{});var eZ=s(Zi);tGo=r(eZ,`Note:
Loading a model from its configuration file does `),Nge=n(eZ,"STRONG",{});var $ft=s(Nge);aGo=r($ft,"not"),$ft.forEach(t),nGo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(eZ,"A",{href:!0});var kft=s(HO);sGo=r(kft,"from_pretrained()"),kft.forEach(t),lGo=r(eZ," to load the model weights."),eZ.forEach(t),iGo=i(Rw),T(Jb.$$.fragment,Rw),Rw.forEach(t),dGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(S6.$$.fragment,ca),cGo=i(ca),jge=n(ca,"P",{});var Sft=s(jge);fGo=r(Sft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sft.forEach(t),mGo=i(ca),qa=n(ca,"P",{});var Pw=s(qa);gGo=r(Pw,"The model class to instantiate is selected based on the "),Dge=n(Pw,"CODE",{});var Rft=s(Dge);hGo=r(Rft,"model_type"),Rft.forEach(t),pGo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Gge=n(Pw,"CODE",{});var Pft=s(Gge);_Go=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),uGo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(Pw,"CODE",{});var Bft=s(Oge);bGo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),vGo=r(Pw,":"),Pw.forEach(t),FGo=i(ca),V=n(ca,"UL",{});var X=s(V);Yb=n(X,"LI",{});var axe=s(Yb);Vge=n(axe,"STRONG",{});var Ift=s(Vge);TGo=r(Ift,"albert"),Ift.forEach(t),MGo=r(axe," \u2014 "),UO=n(axe,"A",{href:!0});var qft=s(UO);EGo=r(qft,"AlbertForQuestionAnswering"),qft.forEach(t),CGo=r(axe," (ALBERT model)"),axe.forEach(t),wGo=i(X),Kb=n(X,"LI",{});var nxe=s(Kb);Xge=n(nxe,"STRONG",{});var Nft=s(Xge);AGo=r(Nft,"bart"),Nft.forEach(t),yGo=r(nxe," \u2014 "),JO=n(nxe,"A",{href:!0});var jft=s(JO);LGo=r(jft,"BartForQuestionAnswering"),jft.forEach(t),xGo=r(nxe," (BART model)"),nxe.forEach(t),$Go=i(X),Zb=n(X,"LI",{});var sxe=s(Zb);zge=n(sxe,"STRONG",{});var Dft=s(zge);kGo=r(Dft,"bert"),Dft.forEach(t),SGo=r(sxe," \u2014 "),YO=n(sxe,"A",{href:!0});var Gft=s(YO);RGo=r(Gft,"BertForQuestionAnswering"),Gft.forEach(t),PGo=r(sxe," (BERT model)"),sxe.forEach(t),BGo=i(X),ev=n(X,"LI",{});var lxe=s(ev);Wge=n(lxe,"STRONG",{});var Oft=s(Wge);IGo=r(Oft,"big_bird"),Oft.forEach(t),qGo=r(lxe," \u2014 "),KO=n(lxe,"A",{href:!0});var Vft=s(KO);NGo=r(Vft,"BigBirdForQuestionAnswering"),Vft.forEach(t),jGo=r(lxe," (BigBird model)"),lxe.forEach(t),DGo=i(X),ov=n(X,"LI",{});var ixe=s(ov);Qge=n(ixe,"STRONG",{});var Xft=s(Qge);GGo=r(Xft,"bigbird_pegasus"),Xft.forEach(t),OGo=r(ixe," \u2014 "),ZO=n(ixe,"A",{href:!0});var zft=s(ZO);VGo=r(zft,"BigBirdPegasusForQuestionAnswering"),zft.forEach(t),XGo=r(ixe," (BigBirdPegasus model)"),ixe.forEach(t),zGo=i(X),rv=n(X,"LI",{});var dxe=s(rv);Hge=n(dxe,"STRONG",{});var Wft=s(Hge);WGo=r(Wft,"camembert"),Wft.forEach(t),QGo=r(dxe," \u2014 "),eV=n(dxe,"A",{href:!0});var Qft=s(eV);HGo=r(Qft,"CamembertForQuestionAnswering"),Qft.forEach(t),UGo=r(dxe," (CamemBERT model)"),dxe.forEach(t),JGo=i(X),tv=n(X,"LI",{});var cxe=s(tv);Uge=n(cxe,"STRONG",{});var Hft=s(Uge);YGo=r(Hft,"canine"),Hft.forEach(t),KGo=r(cxe," \u2014 "),oV=n(cxe,"A",{href:!0});var Uft=s(oV);ZGo=r(Uft,"CanineForQuestionAnswering"),Uft.forEach(t),eOo=r(cxe," (Canine model)"),cxe.forEach(t),oOo=i(X),av=n(X,"LI",{});var fxe=s(av);Jge=n(fxe,"STRONG",{});var Jft=s(Jge);rOo=r(Jft,"convbert"),Jft.forEach(t),tOo=r(fxe," \u2014 "),rV=n(fxe,"A",{href:!0});var Yft=s(rV);aOo=r(Yft,"ConvBertForQuestionAnswering"),Yft.forEach(t),nOo=r(fxe," (ConvBERT model)"),fxe.forEach(t),sOo=i(X),nv=n(X,"LI",{});var mxe=s(nv);Yge=n(mxe,"STRONG",{});var Kft=s(Yge);lOo=r(Kft,"data2vec-text"),Kft.forEach(t),iOo=r(mxe," \u2014 "),tV=n(mxe,"A",{href:!0});var Zft=s(tV);dOo=r(Zft,"Data2VecTextForQuestionAnswering"),Zft.forEach(t),cOo=r(mxe," (Data2VecText model)"),mxe.forEach(t),fOo=i(X),sv=n(X,"LI",{});var gxe=s(sv);Kge=n(gxe,"STRONG",{});var emt=s(Kge);mOo=r(emt,"deberta"),emt.forEach(t),gOo=r(gxe," \u2014 "),aV=n(gxe,"A",{href:!0});var omt=s(aV);hOo=r(omt,"DebertaForQuestionAnswering"),omt.forEach(t),pOo=r(gxe," (DeBERTa model)"),gxe.forEach(t),_Oo=i(X),lv=n(X,"LI",{});var hxe=s(lv);Zge=n(hxe,"STRONG",{});var rmt=s(Zge);uOo=r(rmt,"deberta-v2"),rmt.forEach(t),bOo=r(hxe," \u2014 "),nV=n(hxe,"A",{href:!0});var tmt=s(nV);vOo=r(tmt,"DebertaV2ForQuestionAnswering"),tmt.forEach(t),FOo=r(hxe," (DeBERTa-v2 model)"),hxe.forEach(t),TOo=i(X),iv=n(X,"LI",{});var pxe=s(iv);ehe=n(pxe,"STRONG",{});var amt=s(ehe);MOo=r(amt,"distilbert"),amt.forEach(t),EOo=r(pxe," \u2014 "),sV=n(pxe,"A",{href:!0});var nmt=s(sV);COo=r(nmt,"DistilBertForQuestionAnswering"),nmt.forEach(t),wOo=r(pxe," (DistilBERT model)"),pxe.forEach(t),AOo=i(X),dv=n(X,"LI",{});var _xe=s(dv);ohe=n(_xe,"STRONG",{});var smt=s(ohe);yOo=r(smt,"electra"),smt.forEach(t),LOo=r(_xe," \u2014 "),lV=n(_xe,"A",{href:!0});var lmt=s(lV);xOo=r(lmt,"ElectraForQuestionAnswering"),lmt.forEach(t),$Oo=r(_xe," (ELECTRA model)"),_xe.forEach(t),kOo=i(X),cv=n(X,"LI",{});var uxe=s(cv);rhe=n(uxe,"STRONG",{});var imt=s(rhe);SOo=r(imt,"flaubert"),imt.forEach(t),ROo=r(uxe," \u2014 "),iV=n(uxe,"A",{href:!0});var dmt=s(iV);POo=r(dmt,"FlaubertForQuestionAnsweringSimple"),dmt.forEach(t),BOo=r(uxe," (FlauBERT model)"),uxe.forEach(t),IOo=i(X),fv=n(X,"LI",{});var bxe=s(fv);the=n(bxe,"STRONG",{});var cmt=s(the);qOo=r(cmt,"fnet"),cmt.forEach(t),NOo=r(bxe," \u2014 "),dV=n(bxe,"A",{href:!0});var fmt=s(dV);jOo=r(fmt,"FNetForQuestionAnswering"),fmt.forEach(t),DOo=r(bxe," (FNet model)"),bxe.forEach(t),GOo=i(X),mv=n(X,"LI",{});var vxe=s(mv);ahe=n(vxe,"STRONG",{});var mmt=s(ahe);OOo=r(mmt,"funnel"),mmt.forEach(t),VOo=r(vxe," \u2014 "),cV=n(vxe,"A",{href:!0});var gmt=s(cV);XOo=r(gmt,"FunnelForQuestionAnswering"),gmt.forEach(t),zOo=r(vxe," (Funnel Transformer model)"),vxe.forEach(t),WOo=i(X),gv=n(X,"LI",{});var Fxe=s(gv);nhe=n(Fxe,"STRONG",{});var hmt=s(nhe);QOo=r(hmt,"gptj"),hmt.forEach(t),HOo=r(Fxe," \u2014 "),fV=n(Fxe,"A",{href:!0});var pmt=s(fV);UOo=r(pmt,"GPTJForQuestionAnswering"),pmt.forEach(t),JOo=r(Fxe," (GPT-J model)"),Fxe.forEach(t),YOo=i(X),hv=n(X,"LI",{});var Txe=s(hv);she=n(Txe,"STRONG",{});var _mt=s(she);KOo=r(_mt,"ibert"),_mt.forEach(t),ZOo=r(Txe," \u2014 "),mV=n(Txe,"A",{href:!0});var umt=s(mV);eVo=r(umt,"IBertForQuestionAnswering"),umt.forEach(t),oVo=r(Txe," (I-BERT model)"),Txe.forEach(t),rVo=i(X),pv=n(X,"LI",{});var Mxe=s(pv);lhe=n(Mxe,"STRONG",{});var bmt=s(lhe);tVo=r(bmt,"layoutlmv2"),bmt.forEach(t),aVo=r(Mxe," \u2014 "),gV=n(Mxe,"A",{href:!0});var vmt=s(gV);nVo=r(vmt,"LayoutLMv2ForQuestionAnswering"),vmt.forEach(t),sVo=r(Mxe," (LayoutLMv2 model)"),Mxe.forEach(t),lVo=i(X),_v=n(X,"LI",{});var Exe=s(_v);ihe=n(Exe,"STRONG",{});var Fmt=s(ihe);iVo=r(Fmt,"led"),Fmt.forEach(t),dVo=r(Exe," \u2014 "),hV=n(Exe,"A",{href:!0});var Tmt=s(hV);cVo=r(Tmt,"LEDForQuestionAnswering"),Tmt.forEach(t),fVo=r(Exe," (LED model)"),Exe.forEach(t),mVo=i(X),uv=n(X,"LI",{});var Cxe=s(uv);dhe=n(Cxe,"STRONG",{});var Mmt=s(dhe);gVo=r(Mmt,"longformer"),Mmt.forEach(t),hVo=r(Cxe," \u2014 "),pV=n(Cxe,"A",{href:!0});var Emt=s(pV);pVo=r(Emt,"LongformerForQuestionAnswering"),Emt.forEach(t),_Vo=r(Cxe," (Longformer model)"),Cxe.forEach(t),uVo=i(X),bv=n(X,"LI",{});var wxe=s(bv);che=n(wxe,"STRONG",{});var Cmt=s(che);bVo=r(Cmt,"lxmert"),Cmt.forEach(t),vVo=r(wxe," \u2014 "),_V=n(wxe,"A",{href:!0});var wmt=s(_V);FVo=r(wmt,"LxmertForQuestionAnswering"),wmt.forEach(t),TVo=r(wxe," (LXMERT model)"),wxe.forEach(t),MVo=i(X),vv=n(X,"LI",{});var Axe=s(vv);fhe=n(Axe,"STRONG",{});var Amt=s(fhe);EVo=r(Amt,"mbart"),Amt.forEach(t),CVo=r(Axe," \u2014 "),uV=n(Axe,"A",{href:!0});var ymt=s(uV);wVo=r(ymt,"MBartForQuestionAnswering"),ymt.forEach(t),AVo=r(Axe," (mBART model)"),Axe.forEach(t),yVo=i(X),Fv=n(X,"LI",{});var yxe=s(Fv);mhe=n(yxe,"STRONG",{});var Lmt=s(mhe);LVo=r(Lmt,"megatron-bert"),Lmt.forEach(t),xVo=r(yxe," \u2014 "),bV=n(yxe,"A",{href:!0});var xmt=s(bV);$Vo=r(xmt,"MegatronBertForQuestionAnswering"),xmt.forEach(t),kVo=r(yxe," (MegatronBert model)"),yxe.forEach(t),SVo=i(X),Tv=n(X,"LI",{});var Lxe=s(Tv);ghe=n(Lxe,"STRONG",{});var $mt=s(ghe);RVo=r($mt,"mobilebert"),$mt.forEach(t),PVo=r(Lxe," \u2014 "),vV=n(Lxe,"A",{href:!0});var kmt=s(vV);BVo=r(kmt,"MobileBertForQuestionAnswering"),kmt.forEach(t),IVo=r(Lxe," (MobileBERT model)"),Lxe.forEach(t),qVo=i(X),Mv=n(X,"LI",{});var xxe=s(Mv);hhe=n(xxe,"STRONG",{});var Smt=s(hhe);NVo=r(Smt,"mpnet"),Smt.forEach(t),jVo=r(xxe," \u2014 "),FV=n(xxe,"A",{href:!0});var Rmt=s(FV);DVo=r(Rmt,"MPNetForQuestionAnswering"),Rmt.forEach(t),GVo=r(xxe," (MPNet model)"),xxe.forEach(t),OVo=i(X),Ev=n(X,"LI",{});var $xe=s(Ev);phe=n($xe,"STRONG",{});var Pmt=s(phe);VVo=r(Pmt,"nystromformer"),Pmt.forEach(t),XVo=r($xe," \u2014 "),TV=n($xe,"A",{href:!0});var Bmt=s(TV);zVo=r(Bmt,"NystromformerForQuestionAnswering"),Bmt.forEach(t),WVo=r($xe," (Nystromformer model)"),$xe.forEach(t),QVo=i(X),Cv=n(X,"LI",{});var kxe=s(Cv);_he=n(kxe,"STRONG",{});var Imt=s(_he);HVo=r(Imt,"qdqbert"),Imt.forEach(t),UVo=r(kxe," \u2014 "),MV=n(kxe,"A",{href:!0});var qmt=s(MV);JVo=r(qmt,"QDQBertForQuestionAnswering"),qmt.forEach(t),YVo=r(kxe," (QDQBert model)"),kxe.forEach(t),KVo=i(X),wv=n(X,"LI",{});var Sxe=s(wv);uhe=n(Sxe,"STRONG",{});var Nmt=s(uhe);ZVo=r(Nmt,"reformer"),Nmt.forEach(t),eXo=r(Sxe," \u2014 "),EV=n(Sxe,"A",{href:!0});var jmt=s(EV);oXo=r(jmt,"ReformerForQuestionAnswering"),jmt.forEach(t),rXo=r(Sxe," (Reformer model)"),Sxe.forEach(t),tXo=i(X),Av=n(X,"LI",{});var Rxe=s(Av);bhe=n(Rxe,"STRONG",{});var Dmt=s(bhe);aXo=r(Dmt,"rembert"),Dmt.forEach(t),nXo=r(Rxe," \u2014 "),CV=n(Rxe,"A",{href:!0});var Gmt=s(CV);sXo=r(Gmt,"RemBertForQuestionAnswering"),Gmt.forEach(t),lXo=r(Rxe," (RemBERT model)"),Rxe.forEach(t),iXo=i(X),yv=n(X,"LI",{});var Pxe=s(yv);vhe=n(Pxe,"STRONG",{});var Omt=s(vhe);dXo=r(Omt,"roberta"),Omt.forEach(t),cXo=r(Pxe," \u2014 "),wV=n(Pxe,"A",{href:!0});var Vmt=s(wV);fXo=r(Vmt,"RobertaForQuestionAnswering"),Vmt.forEach(t),mXo=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),gXo=i(X),Lv=n(X,"LI",{});var Bxe=s(Lv);Fhe=n(Bxe,"STRONG",{});var Xmt=s(Fhe);hXo=r(Xmt,"roformer"),Xmt.forEach(t),pXo=r(Bxe," \u2014 "),AV=n(Bxe,"A",{href:!0});var zmt=s(AV);_Xo=r(zmt,"RoFormerForQuestionAnswering"),zmt.forEach(t),uXo=r(Bxe," (RoFormer model)"),Bxe.forEach(t),bXo=i(X),xv=n(X,"LI",{});var Ixe=s(xv);The=n(Ixe,"STRONG",{});var Wmt=s(The);vXo=r(Wmt,"splinter"),Wmt.forEach(t),FXo=r(Ixe," \u2014 "),yV=n(Ixe,"A",{href:!0});var Qmt=s(yV);TXo=r(Qmt,"SplinterForQuestionAnswering"),Qmt.forEach(t),MXo=r(Ixe," (Splinter model)"),Ixe.forEach(t),EXo=i(X),$v=n(X,"LI",{});var qxe=s($v);Mhe=n(qxe,"STRONG",{});var Hmt=s(Mhe);CXo=r(Hmt,"squeezebert"),Hmt.forEach(t),wXo=r(qxe," \u2014 "),LV=n(qxe,"A",{href:!0});var Umt=s(LV);AXo=r(Umt,"SqueezeBertForQuestionAnswering"),Umt.forEach(t),yXo=r(qxe," (SqueezeBERT model)"),qxe.forEach(t),LXo=i(X),kv=n(X,"LI",{});var Nxe=s(kv);Ehe=n(Nxe,"STRONG",{});var Jmt=s(Ehe);xXo=r(Jmt,"xlm"),Jmt.forEach(t),$Xo=r(Nxe," \u2014 "),xV=n(Nxe,"A",{href:!0});var Ymt=s(xV);kXo=r(Ymt,"XLMForQuestionAnsweringSimple"),Ymt.forEach(t),SXo=r(Nxe," (XLM model)"),Nxe.forEach(t),RXo=i(X),Sv=n(X,"LI",{});var jxe=s(Sv);Che=n(jxe,"STRONG",{});var Kmt=s(Che);PXo=r(Kmt,"xlm-roberta"),Kmt.forEach(t),BXo=r(jxe," \u2014 "),$V=n(jxe,"A",{href:!0});var Zmt=s($V);IXo=r(Zmt,"XLMRobertaForQuestionAnswering"),Zmt.forEach(t),qXo=r(jxe," (XLM-RoBERTa model)"),jxe.forEach(t),NXo=i(X),Rv=n(X,"LI",{});var Dxe=s(Rv);whe=n(Dxe,"STRONG",{});var egt=s(whe);jXo=r(egt,"xlm-roberta-xl"),egt.forEach(t),DXo=r(Dxe," \u2014 "),kV=n(Dxe,"A",{href:!0});var ogt=s(kV);GXo=r(ogt,"XLMRobertaXLForQuestionAnswering"),ogt.forEach(t),OXo=r(Dxe," (XLM-RoBERTa-XL model)"),Dxe.forEach(t),VXo=i(X),Pv=n(X,"LI",{});var Gxe=s(Pv);Ahe=n(Gxe,"STRONG",{});var rgt=s(Ahe);XXo=r(rgt,"xlnet"),rgt.forEach(t),zXo=r(Gxe," \u2014 "),SV=n(Gxe,"A",{href:!0});var tgt=s(SV);WXo=r(tgt,"XLNetForQuestionAnsweringSimple"),tgt.forEach(t),QXo=r(Gxe," (XLNet model)"),Gxe.forEach(t),HXo=i(X),Bv=n(X,"LI",{});var Oxe=s(Bv);yhe=n(Oxe,"STRONG",{});var agt=s(yhe);UXo=r(agt,"yoso"),agt.forEach(t),JXo=r(Oxe," \u2014 "),RV=n(Oxe,"A",{href:!0});var ngt=s(RV);YXo=r(ngt,"YosoForQuestionAnswering"),ngt.forEach(t),KXo=r(Oxe," (YOSO model)"),Oxe.forEach(t),X.forEach(t),ZXo=i(ca),Iv=n(ca,"P",{});var Vxe=s(Iv);ezo=r(Vxe,"The model is set in evaluation mode by default using "),Lhe=n(Vxe,"CODE",{});var sgt=s(Lhe);ozo=r(sgt,"model.eval()"),sgt.forEach(t),rzo=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(Vxe,"CODE",{});var lgt=s(xhe);tzo=r(lgt,"model.train()"),lgt.forEach(t),Vxe.forEach(t),azo=i(ca),T(qv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Fqe=i(f),ed=n(f,"H2",{class:!0});var Cje=s(ed);Nv=n(Cje,"A",{id:!0,class:!0,href:!0});var igt=s(Nv);$he=n(igt,"SPAN",{});var dgt=s($he);T(R6.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),nzo=i(Cje),khe=n(Cje,"SPAN",{});var cgt=s(khe);szo=r(cgt,"AutoModelForTableQuestionAnswering"),cgt.forEach(t),Cje.forEach(t),Tqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(P6.$$.fragment,Ys),lzo=i(Ys),od=n(Ys,"P",{});var oZ=s(od);izo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PV=n(oZ,"A",{href:!0});var fgt=s(PV);dzo=r(fgt,"from_pretrained()"),fgt.forEach(t),czo=r(oZ," class method or the "),BV=n(oZ,"A",{href:!0});var mgt=s(BV);fzo=r(mgt,"from_config()"),mgt.forEach(t),mzo=r(oZ,` class
method.`),oZ.forEach(t),gzo=i(Ys),B6=n(Ys,"P",{});var wje=s(B6);hzo=r(wje,"This class cannot be instantiated directly using "),She=n(wje,"CODE",{});var ggt=s(She);pzo=r(ggt,"__init__()"),ggt.forEach(t),_zo=r(wje," (throws an error)."),wje.forEach(t),uzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var Bw=s(gt);T(I6.$$.fragment,Bw),bzo=i(Bw),Rhe=n(Bw,"P",{});var hgt=s(Rhe);vzo=r(hgt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hgt.forEach(t),Fzo=i(Bw),rd=n(Bw,"P",{});var rZ=s(rd);Tzo=r(rZ,`Note:
Loading a model from its configuration file does `),Phe=n(rZ,"STRONG",{});var pgt=s(Phe);Mzo=r(pgt,"not"),pgt.forEach(t),Ezo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(rZ,"A",{href:!0});var _gt=s(IV);Czo=r(_gt,"from_pretrained()"),_gt.forEach(t),wzo=r(rZ," to load the model weights."),rZ.forEach(t),Azo=i(Bw),T(jv.$$.fragment,Bw),Bw.forEach(t),yzo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(q6.$$.fragment,fa),Lzo=i(fa),Bhe=n(fa,"P",{});var ugt=s(Bhe);xzo=r(ugt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ugt.forEach(t),$zo=i(fa),Na=n(fa,"P",{});var Iw=s(Na);kzo=r(Iw,"The model class to instantiate is selected based on the "),Ihe=n(Iw,"CODE",{});var bgt=s(Ihe);Szo=r(bgt,"model_type"),bgt.forEach(t),Rzo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),qhe=n(Iw,"CODE",{});var vgt=s(qhe);Pzo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),Bzo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(Iw,"CODE",{});var Fgt=s(Nhe);Izo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),qzo=r(Iw,":"),Iw.forEach(t),Nzo=i(fa),jhe=n(fa,"UL",{});var Tgt=s(jhe);Dv=n(Tgt,"LI",{});var Xxe=s(Dv);Dhe=n(Xxe,"STRONG",{});var Mgt=s(Dhe);jzo=r(Mgt,"tapas"),Mgt.forEach(t),Dzo=r(Xxe," \u2014 "),qV=n(Xxe,"A",{href:!0});var Egt=s(qV);Gzo=r(Egt,"TapasForQuestionAnswering"),Egt.forEach(t),Ozo=r(Xxe," (TAPAS model)"),Xxe.forEach(t),Tgt.forEach(t),Vzo=i(fa),Gv=n(fa,"P",{});var zxe=s(Gv);Xzo=r(zxe,"The model is set in evaluation mode by default using "),Ghe=n(zxe,"CODE",{});var Cgt=s(Ghe);zzo=r(Cgt,"model.eval()"),Cgt.forEach(t),Wzo=r(zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(zxe,"CODE",{});var wgt=s(Ohe);Qzo=r(wgt,"model.train()"),wgt.forEach(t),zxe.forEach(t),Hzo=i(fa),T(Ov.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Mqe=i(f),td=n(f,"H2",{class:!0});var Aje=s(td);Vv=n(Aje,"A",{id:!0,class:!0,href:!0});var Agt=s(Vv);Vhe=n(Agt,"SPAN",{});var ygt=s(Vhe);T(N6.$$.fragment,ygt),ygt.forEach(t),Agt.forEach(t),Uzo=i(Aje),Xhe=n(Aje,"SPAN",{});var Lgt=s(Xhe);Jzo=r(Lgt,"AutoModelForImageClassification"),Lgt.forEach(t),Aje.forEach(t),Eqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(j6.$$.fragment,Ks),Yzo=i(Ks),ad=n(Ks,"P",{});var tZ=s(ad);Kzo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NV=n(tZ,"A",{href:!0});var xgt=s(NV);Zzo=r(xgt,"from_pretrained()"),xgt.forEach(t),eWo=r(tZ," class method or the "),jV=n(tZ,"A",{href:!0});var $gt=s(jV);oWo=r($gt,"from_config()"),$gt.forEach(t),rWo=r(tZ,` class
method.`),tZ.forEach(t),tWo=i(Ks),D6=n(Ks,"P",{});var yje=s(D6);aWo=r(yje,"This class cannot be instantiated directly using "),zhe=n(yje,"CODE",{});var kgt=s(zhe);nWo=r(kgt,"__init__()"),kgt.forEach(t),sWo=r(yje," (throws an error)."),yje.forEach(t),lWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var qw=s(ht);T(G6.$$.fragment,qw),iWo=i(qw),Whe=n(qw,"P",{});var Sgt=s(Whe);dWo=r(Sgt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sgt.forEach(t),cWo=i(qw),nd=n(qw,"P",{});var aZ=s(nd);fWo=r(aZ,`Note:
Loading a model from its configuration file does `),Qhe=n(aZ,"STRONG",{});var Rgt=s(Qhe);mWo=r(Rgt,"not"),Rgt.forEach(t),gWo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(aZ,"A",{href:!0});var Pgt=s(DV);hWo=r(Pgt,"from_pretrained()"),Pgt.forEach(t),pWo=r(aZ," to load the model weights."),aZ.forEach(t),_Wo=i(qw),T(Xv.$$.fragment,qw),qw.forEach(t),uWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(O6.$$.fragment,ma),bWo=i(ma),Hhe=n(ma,"P",{});var Bgt=s(Hhe);vWo=r(Bgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bgt.forEach(t),FWo=i(ma),ja=n(ma,"P",{});var Nw=s(ja);TWo=r(Nw,"The model class to instantiate is selected based on the "),Uhe=n(Nw,"CODE",{});var Igt=s(Uhe);MWo=r(Igt,"model_type"),Igt.forEach(t),EWo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(Nw,"CODE",{});var qgt=s(Jhe);CWo=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),wWo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(Nw,"CODE",{});var Ngt=s(Yhe);AWo=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),yWo=r(Nw,":"),Nw.forEach(t),LWo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);zv=n(Te,"LI",{});var Wxe=s(zv);Khe=n(Wxe,"STRONG",{});var jgt=s(Khe);xWo=r(jgt,"beit"),jgt.forEach(t),$Wo=r(Wxe," \u2014 "),GV=n(Wxe,"A",{href:!0});var Dgt=s(GV);kWo=r(Dgt,"BeitForImageClassification"),Dgt.forEach(t),SWo=r(Wxe," (BEiT model)"),Wxe.forEach(t),RWo=i(Te),Wv=n(Te,"LI",{});var Qxe=s(Wv);Zhe=n(Qxe,"STRONG",{});var Ggt=s(Zhe);PWo=r(Ggt,"convnext"),Ggt.forEach(t),BWo=r(Qxe," \u2014 "),OV=n(Qxe,"A",{href:!0});var Ogt=s(OV);IWo=r(Ogt,"ConvNextForImageClassification"),Ogt.forEach(t),qWo=r(Qxe," (ConvNext model)"),Qxe.forEach(t),NWo=i(Te),Qv=n(Te,"LI",{});var Hxe=s(Qv);epe=n(Hxe,"STRONG",{});var Vgt=s(epe);jWo=r(Vgt,"cvt"),Vgt.forEach(t),DWo=r(Hxe," \u2014 "),VV=n(Hxe,"A",{href:!0});var Xgt=s(VV);GWo=r(Xgt,"CvtForImageClassification"),Xgt.forEach(t),OWo=r(Hxe," (CvT model)"),Hxe.forEach(t),VWo=i(Te),Hv=n(Te,"LI",{});var Uxe=s(Hv);ope=n(Uxe,"STRONG",{});var zgt=s(ope);XWo=r(zgt,"data2vec-vision"),zgt.forEach(t),zWo=r(Uxe," \u2014 "),XV=n(Uxe,"A",{href:!0});var Wgt=s(XV);WWo=r(Wgt,"Data2VecVisionForImageClassification"),Wgt.forEach(t),QWo=r(Uxe," (Data2VecVision model)"),Uxe.forEach(t),HWo=i(Te),Ps=n(Te,"LI",{});var A$=s(Ps);rpe=n(A$,"STRONG",{});var Qgt=s(rpe);UWo=r(Qgt,"deit"),Qgt.forEach(t),JWo=r(A$," \u2014 "),zV=n(A$,"A",{href:!0});var Hgt=s(zV);YWo=r(Hgt,"DeiTForImageClassification"),Hgt.forEach(t),KWo=r(A$," or "),WV=n(A$,"A",{href:!0});var Ugt=s(WV);ZWo=r(Ugt,"DeiTForImageClassificationWithTeacher"),Ugt.forEach(t),eQo=r(A$," (DeiT model)"),A$.forEach(t),oQo=i(Te),Uv=n(Te,"LI",{});var Jxe=s(Uv);tpe=n(Jxe,"STRONG",{});var Jgt=s(tpe);rQo=r(Jgt,"imagegpt"),Jgt.forEach(t),tQo=r(Jxe," \u2014 "),QV=n(Jxe,"A",{href:!0});var Ygt=s(QV);aQo=r(Ygt,"ImageGPTForImageClassification"),Ygt.forEach(t),nQo=r(Jxe," (ImageGPT model)"),Jxe.forEach(t),sQo=i(Te),pt=n(Te,"LI",{});var gf=s(pt);ape=n(gf,"STRONG",{});var Kgt=s(ape);lQo=r(Kgt,"perceiver"),Kgt.forEach(t),iQo=r(gf," \u2014 "),HV=n(gf,"A",{href:!0});var Zgt=s(HV);dQo=r(Zgt,"PerceiverForImageClassificationLearned"),Zgt.forEach(t),cQo=r(gf," or "),UV=n(gf,"A",{href:!0});var eht=s(UV);fQo=r(eht,"PerceiverForImageClassificationFourier"),eht.forEach(t),mQo=r(gf," or "),JV=n(gf,"A",{href:!0});var oht=s(JV);gQo=r(oht,"PerceiverForImageClassificationConvProcessing"),oht.forEach(t),hQo=r(gf," (Perceiver model)"),gf.forEach(t),pQo=i(Te),Jv=n(Te,"LI",{});var Yxe=s(Jv);npe=n(Yxe,"STRONG",{});var rht=s(npe);_Qo=r(rht,"poolformer"),rht.forEach(t),uQo=r(Yxe," \u2014 "),YV=n(Yxe,"A",{href:!0});var tht=s(YV);bQo=r(tht,"PoolFormerForImageClassification"),tht.forEach(t),vQo=r(Yxe," (PoolFormer model)"),Yxe.forEach(t),FQo=i(Te),Yv=n(Te,"LI",{});var Kxe=s(Yv);spe=n(Kxe,"STRONG",{});var aht=s(spe);TQo=r(aht,"regnet"),aht.forEach(t),MQo=r(Kxe," \u2014 "),KV=n(Kxe,"A",{href:!0});var nht=s(KV);EQo=r(nht,"RegNetForImageClassification"),nht.forEach(t),CQo=r(Kxe," (RegNet model)"),Kxe.forEach(t),wQo=i(Te),Kv=n(Te,"LI",{});var Zxe=s(Kv);lpe=n(Zxe,"STRONG",{});var sht=s(lpe);AQo=r(sht,"resnet"),sht.forEach(t),yQo=r(Zxe," \u2014 "),ZV=n(Zxe,"A",{href:!0});var lht=s(ZV);LQo=r(lht,"ResNetForImageClassification"),lht.forEach(t),xQo=r(Zxe," (ResNet model)"),Zxe.forEach(t),$Qo=i(Te),Zv=n(Te,"LI",{});var e$e=s(Zv);ipe=n(e$e,"STRONG",{});var iht=s(ipe);kQo=r(iht,"segformer"),iht.forEach(t),SQo=r(e$e," \u2014 "),eX=n(e$e,"A",{href:!0});var dht=s(eX);RQo=r(dht,"SegformerForImageClassification"),dht.forEach(t),PQo=r(e$e," (SegFormer model)"),e$e.forEach(t),BQo=i(Te),eF=n(Te,"LI",{});var o$e=s(eF);dpe=n(o$e,"STRONG",{});var cht=s(dpe);IQo=r(cht,"swin"),cht.forEach(t),qQo=r(o$e," \u2014 "),oX=n(o$e,"A",{href:!0});var fht=s(oX);NQo=r(fht,"SwinForImageClassification"),fht.forEach(t),jQo=r(o$e," (Swin model)"),o$e.forEach(t),DQo=i(Te),oF=n(Te,"LI",{});var r$e=s(oF);cpe=n(r$e,"STRONG",{});var mht=s(cpe);GQo=r(mht,"van"),mht.forEach(t),OQo=r(r$e," \u2014 "),rX=n(r$e,"A",{href:!0});var ght=s(rX);VQo=r(ght,"VanForImageClassification"),ght.forEach(t),XQo=r(r$e," (VAN model)"),r$e.forEach(t),zQo=i(Te),rF=n(Te,"LI",{});var t$e=s(rF);fpe=n(t$e,"STRONG",{});var hht=s(fpe);WQo=r(hht,"vit"),hht.forEach(t),QQo=r(t$e," \u2014 "),tX=n(t$e,"A",{href:!0});var pht=s(tX);HQo=r(pht,"ViTForImageClassification"),pht.forEach(t),UQo=r(t$e," (ViT model)"),t$e.forEach(t),Te.forEach(t),JQo=i(ma),tF=n(ma,"P",{});var a$e=s(tF);YQo=r(a$e,"The model is set in evaluation mode by default using "),mpe=n(a$e,"CODE",{});var _ht=s(mpe);KQo=r(_ht,"model.eval()"),_ht.forEach(t),ZQo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(a$e,"CODE",{});var uht=s(gpe);eHo=r(uht,"model.train()"),uht.forEach(t),a$e.forEach(t),oHo=i(ma),T(aF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Cqe=i(f),sd=n(f,"H2",{class:!0});var Lje=s(sd);nF=n(Lje,"A",{id:!0,class:!0,href:!0});var bht=s(nF);hpe=n(bht,"SPAN",{});var vht=s(hpe);T(V6.$$.fragment,vht),vht.forEach(t),bht.forEach(t),rHo=i(Lje),ppe=n(Lje,"SPAN",{});var Fht=s(ppe);tHo=r(Fht,"AutoModelForVision2Seq"),Fht.forEach(t),Lje.forEach(t),wqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(X6.$$.fragment,Zs),aHo=i(Zs),ld=n(Zs,"P",{});var nZ=s(ld);nHo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aX=n(nZ,"A",{href:!0});var Tht=s(aX);sHo=r(Tht,"from_pretrained()"),Tht.forEach(t),lHo=r(nZ," class method or the "),nX=n(nZ,"A",{href:!0});var Mht=s(nX);iHo=r(Mht,"from_config()"),Mht.forEach(t),dHo=r(nZ,` class
method.`),nZ.forEach(t),cHo=i(Zs),z6=n(Zs,"P",{});var xje=s(z6);fHo=r(xje,"This class cannot be instantiated directly using "),_pe=n(xje,"CODE",{});var Eht=s(_pe);mHo=r(Eht,"__init__()"),Eht.forEach(t),gHo=r(xje," (throws an error)."),xje.forEach(t),hHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var jw=s(_t);T(W6.$$.fragment,jw),pHo=i(jw),upe=n(jw,"P",{});var Cht=s(upe);_Ho=r(Cht,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cht.forEach(t),uHo=i(jw),id=n(jw,"P",{});var sZ=s(id);bHo=r(sZ,`Note:
Loading a model from its configuration file does `),bpe=n(sZ,"STRONG",{});var wht=s(bpe);vHo=r(wht,"not"),wht.forEach(t),FHo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(sZ,"A",{href:!0});var Aht=s(sX);THo=r(Aht,"from_pretrained()"),Aht.forEach(t),MHo=r(sZ," to load the model weights."),sZ.forEach(t),EHo=i(jw),T(sF.$$.fragment,jw),jw.forEach(t),CHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Q6.$$.fragment,ga),wHo=i(ga),vpe=n(ga,"P",{});var yht=s(vpe);AHo=r(yht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yht.forEach(t),yHo=i(ga),Da=n(ga,"P",{});var Dw=s(Da);LHo=r(Dw,"The model class to instantiate is selected based on the "),Fpe=n(Dw,"CODE",{});var Lht=s(Fpe);xHo=r(Lht,"model_type"),Lht.forEach(t),$Ho=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Tpe=n(Dw,"CODE",{});var xht=s(Tpe);kHo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),SHo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mpe=n(Dw,"CODE",{});var $ht=s(Mpe);RHo=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),PHo=r(Dw,":"),Dw.forEach(t),BHo=i(ga),Epe=n(ga,"UL",{});var kht=s(Epe);lF=n(kht,"LI",{});var n$e=s(lF);Cpe=n(n$e,"STRONG",{});var Sht=s(Cpe);IHo=r(Sht,"vision-encoder-decoder"),Sht.forEach(t),qHo=r(n$e," \u2014 "),lX=n(n$e,"A",{href:!0});var Rht=s(lX);NHo=r(Rht,"VisionEncoderDecoderModel"),Rht.forEach(t),jHo=r(n$e," (Vision Encoder decoder model)"),n$e.forEach(t),kht.forEach(t),DHo=i(ga),iF=n(ga,"P",{});var s$e=s(iF);GHo=r(s$e,"The model is set in evaluation mode by default using "),wpe=n(s$e,"CODE",{});var Pht=s(wpe);OHo=r(Pht,"model.eval()"),Pht.forEach(t),VHo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(s$e,"CODE",{});var Bht=s(Ape);XHo=r(Bht,"model.train()"),Bht.forEach(t),s$e.forEach(t),zHo=i(ga),T(dF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Aqe=i(f),dd=n(f,"H2",{class:!0});var $je=s(dd);cF=n($je,"A",{id:!0,class:!0,href:!0});var Iht=s(cF);ype=n(Iht,"SPAN",{});var qht=s(ype);T(H6.$$.fragment,qht),qht.forEach(t),Iht.forEach(t),WHo=i($je),Lpe=n($je,"SPAN",{});var Nht=s(Lpe);QHo=r(Nht,"AutoModelForAudioClassification"),Nht.forEach(t),$je.forEach(t),yqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(U6.$$.fragment,el),HHo=i(el),cd=n(el,"P",{});var lZ=s(cd);UHo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iX=n(lZ,"A",{href:!0});var jht=s(iX);JHo=r(jht,"from_pretrained()"),jht.forEach(t),YHo=r(lZ," class method or the "),dX=n(lZ,"A",{href:!0});var Dht=s(dX);KHo=r(Dht,"from_config()"),Dht.forEach(t),ZHo=r(lZ,` class
method.`),lZ.forEach(t),eUo=i(el),J6=n(el,"P",{});var kje=s(J6);oUo=r(kje,"This class cannot be instantiated directly using "),xpe=n(kje,"CODE",{});var Ght=s(xpe);rUo=r(Ght,"__init__()"),Ght.forEach(t),tUo=r(kje," (throws an error)."),kje.forEach(t),aUo=i(el),ut=n(el,"DIV",{class:!0});var Gw=s(ut);T(Y6.$$.fragment,Gw),nUo=i(Gw),$pe=n(Gw,"P",{});var Oht=s($pe);sUo=r(Oht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Oht.forEach(t),lUo=i(Gw),fd=n(Gw,"P",{});var iZ=s(fd);iUo=r(iZ,`Note:
Loading a model from its configuration file does `),kpe=n(iZ,"STRONG",{});var Vht=s(kpe);dUo=r(Vht,"not"),Vht.forEach(t),cUo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(iZ,"A",{href:!0});var Xht=s(cX);fUo=r(Xht,"from_pretrained()"),Xht.forEach(t),mUo=r(iZ," to load the model weights."),iZ.forEach(t),gUo=i(Gw),T(fF.$$.fragment,Gw),Gw.forEach(t),hUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(K6.$$.fragment,ha),pUo=i(ha),Spe=n(ha,"P",{});var zht=s(Spe);_Uo=r(zht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zht.forEach(t),uUo=i(ha),Ga=n(ha,"P",{});var Ow=s(Ga);bUo=r(Ow,"The model class to instantiate is selected based on the "),Rpe=n(Ow,"CODE",{});var Wht=s(Rpe);vUo=r(Wht,"model_type"),Wht.forEach(t),FUo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(Ow,"CODE",{});var Qht=s(Ppe);TUo=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),MUo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(Ow,"CODE",{});var Hht=s(Bpe);EUo=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),CUo=r(Ow,":"),Ow.forEach(t),wUo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);mF=n(Oe,"LI",{});var l$e=s(mF);Ipe=n(l$e,"STRONG",{});var Uht=s(Ipe);AUo=r(Uht,"data2vec-audio"),Uht.forEach(t),yUo=r(l$e," \u2014 "),fX=n(l$e,"A",{href:!0});var Jht=s(fX);LUo=r(Jht,"Data2VecAudioForSequenceClassification"),Jht.forEach(t),xUo=r(l$e," (Data2VecAudio model)"),l$e.forEach(t),$Uo=i(Oe),gF=n(Oe,"LI",{});var i$e=s(gF);qpe=n(i$e,"STRONG",{});var Yht=s(qpe);kUo=r(Yht,"hubert"),Yht.forEach(t),SUo=r(i$e," \u2014 "),mX=n(i$e,"A",{href:!0});var Kht=s(mX);RUo=r(Kht,"HubertForSequenceClassification"),Kht.forEach(t),PUo=r(i$e," (Hubert model)"),i$e.forEach(t),BUo=i(Oe),hF=n(Oe,"LI",{});var d$e=s(hF);Npe=n(d$e,"STRONG",{});var Zht=s(Npe);IUo=r(Zht,"sew"),Zht.forEach(t),qUo=r(d$e," \u2014 "),gX=n(d$e,"A",{href:!0});var ept=s(gX);NUo=r(ept,"SEWForSequenceClassification"),ept.forEach(t),jUo=r(d$e," (SEW model)"),d$e.forEach(t),DUo=i(Oe),pF=n(Oe,"LI",{});var c$e=s(pF);jpe=n(c$e,"STRONG",{});var opt=s(jpe);GUo=r(opt,"sew-d"),opt.forEach(t),OUo=r(c$e," \u2014 "),hX=n(c$e,"A",{href:!0});var rpt=s(hX);VUo=r(rpt,"SEWDForSequenceClassification"),rpt.forEach(t),XUo=r(c$e," (SEW-D model)"),c$e.forEach(t),zUo=i(Oe),_F=n(Oe,"LI",{});var f$e=s(_F);Dpe=n(f$e,"STRONG",{});var tpt=s(Dpe);WUo=r(tpt,"unispeech"),tpt.forEach(t),QUo=r(f$e," \u2014 "),pX=n(f$e,"A",{href:!0});var apt=s(pX);HUo=r(apt,"UniSpeechForSequenceClassification"),apt.forEach(t),UUo=r(f$e," (UniSpeech model)"),f$e.forEach(t),JUo=i(Oe),uF=n(Oe,"LI",{});var m$e=s(uF);Gpe=n(m$e,"STRONG",{});var npt=s(Gpe);YUo=r(npt,"unispeech-sat"),npt.forEach(t),KUo=r(m$e," \u2014 "),_X=n(m$e,"A",{href:!0});var spt=s(_X);ZUo=r(spt,"UniSpeechSatForSequenceClassification"),spt.forEach(t),eJo=r(m$e," (UniSpeechSat model)"),m$e.forEach(t),oJo=i(Oe),bF=n(Oe,"LI",{});var g$e=s(bF);Ope=n(g$e,"STRONG",{});var lpt=s(Ope);rJo=r(lpt,"wav2vec2"),lpt.forEach(t),tJo=r(g$e," \u2014 "),uX=n(g$e,"A",{href:!0});var ipt=s(uX);aJo=r(ipt,"Wav2Vec2ForSequenceClassification"),ipt.forEach(t),nJo=r(g$e," (Wav2Vec2 model)"),g$e.forEach(t),sJo=i(Oe),vF=n(Oe,"LI",{});var h$e=s(vF);Vpe=n(h$e,"STRONG",{});var dpt=s(Vpe);lJo=r(dpt,"wav2vec2-conformer"),dpt.forEach(t),iJo=r(h$e," \u2014 "),bX=n(h$e,"A",{href:!0});var cpt=s(bX);dJo=r(cpt,"Wav2Vec2ConformerForSequenceClassification"),cpt.forEach(t),cJo=r(h$e," (Wav2Vec2-Conformer model)"),h$e.forEach(t),fJo=i(Oe),FF=n(Oe,"LI",{});var p$e=s(FF);Xpe=n(p$e,"STRONG",{});var fpt=s(Xpe);mJo=r(fpt,"wavlm"),fpt.forEach(t),gJo=r(p$e," \u2014 "),vX=n(p$e,"A",{href:!0});var mpt=s(vX);hJo=r(mpt,"WavLMForSequenceClassification"),mpt.forEach(t),pJo=r(p$e," (WavLM model)"),p$e.forEach(t),Oe.forEach(t),_Jo=i(ha),TF=n(ha,"P",{});var _$e=s(TF);uJo=r(_$e,"The model is set in evaluation mode by default using "),zpe=n(_$e,"CODE",{});var gpt=s(zpe);bJo=r(gpt,"model.eval()"),gpt.forEach(t),vJo=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(_$e,"CODE",{});var hpt=s(Wpe);FJo=r(hpt,"model.train()"),hpt.forEach(t),_$e.forEach(t),TJo=i(ha),T(MF.$$.fragment,ha),ha.forEach(t),el.forEach(t),Lqe=i(f),md=n(f,"H2",{class:!0});var Sje=s(md);EF=n(Sje,"A",{id:!0,class:!0,href:!0});var ppt=s(EF);Qpe=n(ppt,"SPAN",{});var _pt=s(Qpe);T(Z6.$$.fragment,_pt),_pt.forEach(t),ppt.forEach(t),MJo=i(Sje),Hpe=n(Sje,"SPAN",{});var upt=s(Hpe);EJo=r(upt,"AutoModelForAudioFrameClassification"),upt.forEach(t),Sje.forEach(t),xqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(ey.$$.fragment,ol),CJo=i(ol),gd=n(ol,"P",{});var dZ=s(gd);wJo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FX=n(dZ,"A",{href:!0});var bpt=s(FX);AJo=r(bpt,"from_pretrained()"),bpt.forEach(t),yJo=r(dZ," class method or the "),TX=n(dZ,"A",{href:!0});var vpt=s(TX);LJo=r(vpt,"from_config()"),vpt.forEach(t),xJo=r(dZ,` class
method.`),dZ.forEach(t),$Jo=i(ol),oy=n(ol,"P",{});var Rje=s(oy);kJo=r(Rje,"This class cannot be instantiated directly using "),Upe=n(Rje,"CODE",{});var Fpt=s(Upe);SJo=r(Fpt,"__init__()"),Fpt.forEach(t),RJo=r(Rje," (throws an error)."),Rje.forEach(t),PJo=i(ol),bt=n(ol,"DIV",{class:!0});var Vw=s(bt);T(ry.$$.fragment,Vw),BJo=i(Vw),Jpe=n(Vw,"P",{});var Tpt=s(Jpe);IJo=r(Tpt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tpt.forEach(t),qJo=i(Vw),hd=n(Vw,"P",{});var cZ=s(hd);NJo=r(cZ,`Note:
Loading a model from its configuration file does `),Ype=n(cZ,"STRONG",{});var Mpt=s(Ype);jJo=r(Mpt,"not"),Mpt.forEach(t),DJo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(cZ,"A",{href:!0});var Ept=s(MX);GJo=r(Ept,"from_pretrained()"),Ept.forEach(t),OJo=r(cZ," to load the model weights."),cZ.forEach(t),VJo=i(Vw),T(CF.$$.fragment,Vw),Vw.forEach(t),XJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(ty.$$.fragment,pa),zJo=i(pa),Kpe=n(pa,"P",{});var Cpt=s(Kpe);WJo=r(Cpt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Cpt.forEach(t),QJo=i(pa),Oa=n(pa,"P",{});var Xw=s(Oa);HJo=r(Xw,"The model class to instantiate is selected based on the "),Zpe=n(Xw,"CODE",{});var wpt=s(Zpe);UJo=r(wpt,"model_type"),wpt.forEach(t),JJo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),e_e=n(Xw,"CODE",{});var Apt=s(e_e);YJo=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),KJo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(Xw,"CODE",{});var ypt=s(o_e);ZJo=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),eYo=r(Xw,":"),Xw.forEach(t),oYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);wF=n(rl,"LI",{});var u$e=s(wF);r_e=n(u$e,"STRONG",{});var Lpt=s(r_e);rYo=r(Lpt,"data2vec-audio"),Lpt.forEach(t),tYo=r(u$e," \u2014 "),EX=n(u$e,"A",{href:!0});var xpt=s(EX);aYo=r(xpt,"Data2VecAudioForAudioFrameClassification"),xpt.forEach(t),nYo=r(u$e," (Data2VecAudio model)"),u$e.forEach(t),sYo=i(rl),AF=n(rl,"LI",{});var b$e=s(AF);t_e=n(b$e,"STRONG",{});var $pt=s(t_e);lYo=r($pt,"unispeech-sat"),$pt.forEach(t),iYo=r(b$e," \u2014 "),CX=n(b$e,"A",{href:!0});var kpt=s(CX);dYo=r(kpt,"UniSpeechSatForAudioFrameClassification"),kpt.forEach(t),cYo=r(b$e," (UniSpeechSat model)"),b$e.forEach(t),fYo=i(rl),yF=n(rl,"LI",{});var v$e=s(yF);a_e=n(v$e,"STRONG",{});var Spt=s(a_e);mYo=r(Spt,"wav2vec2"),Spt.forEach(t),gYo=r(v$e," \u2014 "),wX=n(v$e,"A",{href:!0});var Rpt=s(wX);hYo=r(Rpt,"Wav2Vec2ForAudioFrameClassification"),Rpt.forEach(t),pYo=r(v$e," (Wav2Vec2 model)"),v$e.forEach(t),_Yo=i(rl),LF=n(rl,"LI",{});var F$e=s(LF);n_e=n(F$e,"STRONG",{});var Ppt=s(n_e);uYo=r(Ppt,"wav2vec2-conformer"),Ppt.forEach(t),bYo=r(F$e," \u2014 "),AX=n(F$e,"A",{href:!0});var Bpt=s(AX);vYo=r(Bpt,"Wav2Vec2ConformerForAudioFrameClassification"),Bpt.forEach(t),FYo=r(F$e," (Wav2Vec2-Conformer model)"),F$e.forEach(t),TYo=i(rl),xF=n(rl,"LI",{});var T$e=s(xF);s_e=n(T$e,"STRONG",{});var Ipt=s(s_e);MYo=r(Ipt,"wavlm"),Ipt.forEach(t),EYo=r(T$e," \u2014 "),yX=n(T$e,"A",{href:!0});var qpt=s(yX);CYo=r(qpt,"WavLMForAudioFrameClassification"),qpt.forEach(t),wYo=r(T$e," (WavLM model)"),T$e.forEach(t),rl.forEach(t),AYo=i(pa),$F=n(pa,"P",{});var M$e=s($F);yYo=r(M$e,"The model is set in evaluation mode by default using "),l_e=n(M$e,"CODE",{});var Npt=s(l_e);LYo=r(Npt,"model.eval()"),Npt.forEach(t),xYo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(M$e,"CODE",{});var jpt=s(i_e);$Yo=r(jpt,"model.train()"),jpt.forEach(t),M$e.forEach(t),kYo=i(pa),T(kF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),$qe=i(f),pd=n(f,"H2",{class:!0});var Pje=s(pd);SF=n(Pje,"A",{id:!0,class:!0,href:!0});var Dpt=s(SF);d_e=n(Dpt,"SPAN",{});var Gpt=s(d_e);T(ay.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),SYo=i(Pje),c_e=n(Pje,"SPAN",{});var Opt=s(c_e);RYo=r(Opt,"AutoModelForCTC"),Opt.forEach(t),Pje.forEach(t),kqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(ny.$$.fragment,tl),PYo=i(tl),_d=n(tl,"P",{});var fZ=s(_d);BYo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),LX=n(fZ,"A",{href:!0});var Vpt=s(LX);IYo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),qYo=r(fZ," class method or the "),xX=n(fZ,"A",{href:!0});var Xpt=s(xX);NYo=r(Xpt,"from_config()"),Xpt.forEach(t),jYo=r(fZ,` class
method.`),fZ.forEach(t),DYo=i(tl),sy=n(tl,"P",{});var Bje=s(sy);GYo=r(Bje,"This class cannot be instantiated directly using "),f_e=n(Bje,"CODE",{});var zpt=s(f_e);OYo=r(zpt,"__init__()"),zpt.forEach(t),VYo=r(Bje," (throws an error)."),Bje.forEach(t),XYo=i(tl),vt=n(tl,"DIV",{class:!0});var zw=s(vt);T(ly.$$.fragment,zw),zYo=i(zw),m_e=n(zw,"P",{});var Wpt=s(m_e);WYo=r(Wpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Wpt.forEach(t),QYo=i(zw),ud=n(zw,"P",{});var mZ=s(ud);HYo=r(mZ,`Note:
Loading a model from its configuration file does `),g_e=n(mZ,"STRONG",{});var Qpt=s(g_e);UYo=r(Qpt,"not"),Qpt.forEach(t),JYo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(mZ,"A",{href:!0});var Hpt=s($X);YYo=r(Hpt,"from_pretrained()"),Hpt.forEach(t),KYo=r(mZ," to load the model weights."),mZ.forEach(t),ZYo=i(zw),T(RF.$$.fragment,zw),zw.forEach(t),eKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(iy.$$.fragment,_a),oKo=i(_a),h_e=n(_a,"P",{});var Upt=s(h_e);rKo=r(Upt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Upt.forEach(t),tKo=i(_a),Va=n(_a,"P",{});var Ww=s(Va);aKo=r(Ww,"The model class to instantiate is selected based on the "),p_e=n(Ww,"CODE",{});var Jpt=s(p_e);nKo=r(Jpt,"model_type"),Jpt.forEach(t),sKo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),__e=n(Ww,"CODE",{});var Ypt=s(__e);lKo=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),iKo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(Ww,"CODE",{});var Kpt=s(u_e);dKo=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),cKo=r(Ww,":"),Ww.forEach(t),fKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);PF=n(Ve,"LI",{});var E$e=s(PF);b_e=n(E$e,"STRONG",{});var Zpt=s(b_e);mKo=r(Zpt,"data2vec-audio"),Zpt.forEach(t),gKo=r(E$e," \u2014 "),kX=n(E$e,"A",{href:!0});var e_t=s(kX);hKo=r(e_t,"Data2VecAudioForCTC"),e_t.forEach(t),pKo=r(E$e," (Data2VecAudio model)"),E$e.forEach(t),_Ko=i(Ve),BF=n(Ve,"LI",{});var C$e=s(BF);v_e=n(C$e,"STRONG",{});var o_t=s(v_e);uKo=r(o_t,"hubert"),o_t.forEach(t),bKo=r(C$e," \u2014 "),SX=n(C$e,"A",{href:!0});var r_t=s(SX);vKo=r(r_t,"HubertForCTC"),r_t.forEach(t),FKo=r(C$e," (Hubert model)"),C$e.forEach(t),TKo=i(Ve),IF=n(Ve,"LI",{});var w$e=s(IF);F_e=n(w$e,"STRONG",{});var t_t=s(F_e);MKo=r(t_t,"sew"),t_t.forEach(t),EKo=r(w$e," \u2014 "),RX=n(w$e,"A",{href:!0});var a_t=s(RX);CKo=r(a_t,"SEWForCTC"),a_t.forEach(t),wKo=r(w$e," (SEW model)"),w$e.forEach(t),AKo=i(Ve),qF=n(Ve,"LI",{});var A$e=s(qF);T_e=n(A$e,"STRONG",{});var n_t=s(T_e);yKo=r(n_t,"sew-d"),n_t.forEach(t),LKo=r(A$e," \u2014 "),PX=n(A$e,"A",{href:!0});var s_t=s(PX);xKo=r(s_t,"SEWDForCTC"),s_t.forEach(t),$Ko=r(A$e," (SEW-D model)"),A$e.forEach(t),kKo=i(Ve),NF=n(Ve,"LI",{});var y$e=s(NF);M_e=n(y$e,"STRONG",{});var l_t=s(M_e);SKo=r(l_t,"unispeech"),l_t.forEach(t),RKo=r(y$e," \u2014 "),BX=n(y$e,"A",{href:!0});var i_t=s(BX);PKo=r(i_t,"UniSpeechForCTC"),i_t.forEach(t),BKo=r(y$e," (UniSpeech model)"),y$e.forEach(t),IKo=i(Ve),jF=n(Ve,"LI",{});var L$e=s(jF);E_e=n(L$e,"STRONG",{});var d_t=s(E_e);qKo=r(d_t,"unispeech-sat"),d_t.forEach(t),NKo=r(L$e," \u2014 "),IX=n(L$e,"A",{href:!0});var c_t=s(IX);jKo=r(c_t,"UniSpeechSatForCTC"),c_t.forEach(t),DKo=r(L$e," (UniSpeechSat model)"),L$e.forEach(t),GKo=i(Ve),DF=n(Ve,"LI",{});var x$e=s(DF);C_e=n(x$e,"STRONG",{});var f_t=s(C_e);OKo=r(f_t,"wav2vec2"),f_t.forEach(t),VKo=r(x$e," \u2014 "),qX=n(x$e,"A",{href:!0});var m_t=s(qX);XKo=r(m_t,"Wav2Vec2ForCTC"),m_t.forEach(t),zKo=r(x$e," (Wav2Vec2 model)"),x$e.forEach(t),WKo=i(Ve),GF=n(Ve,"LI",{});var $$e=s(GF);w_e=n($$e,"STRONG",{});var g_t=s(w_e);QKo=r(g_t,"wav2vec2-conformer"),g_t.forEach(t),HKo=r($$e," \u2014 "),NX=n($$e,"A",{href:!0});var h_t=s(NX);UKo=r(h_t,"Wav2Vec2ConformerForCTC"),h_t.forEach(t),JKo=r($$e," (Wav2Vec2-Conformer model)"),$$e.forEach(t),YKo=i(Ve),OF=n(Ve,"LI",{});var k$e=s(OF);A_e=n(k$e,"STRONG",{});var p_t=s(A_e);KKo=r(p_t,"wavlm"),p_t.forEach(t),ZKo=r(k$e," \u2014 "),jX=n(k$e,"A",{href:!0});var __t=s(jX);eZo=r(__t,"WavLMForCTC"),__t.forEach(t),oZo=r(k$e," (WavLM model)"),k$e.forEach(t),Ve.forEach(t),rZo=i(_a),VF=n(_a,"P",{});var S$e=s(VF);tZo=r(S$e,"The model is set in evaluation mode by default using "),y_e=n(S$e,"CODE",{});var u_t=s(y_e);aZo=r(u_t,"model.eval()"),u_t.forEach(t),nZo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=n(S$e,"CODE",{});var b_t=s(L_e);sZo=r(b_t,"model.train()"),b_t.forEach(t),S$e.forEach(t),lZo=i(_a),T(XF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Sqe=i(f),bd=n(f,"H2",{class:!0});var Ije=s(bd);zF=n(Ije,"A",{id:!0,class:!0,href:!0});var v_t=s(zF);x_e=n(v_t,"SPAN",{});var F_t=s(x_e);T(dy.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),iZo=i(Ije),$_e=n(Ije,"SPAN",{});var T_t=s($_e);dZo=r(T_t,"AutoModelForSpeechSeq2Seq"),T_t.forEach(t),Ije.forEach(t),Rqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(cy.$$.fragment,al),cZo=i(al),vd=n(al,"P",{});var gZ=s(vd);fZo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DX=n(gZ,"A",{href:!0});var M_t=s(DX);mZo=r(M_t,"from_pretrained()"),M_t.forEach(t),gZo=r(gZ," class method or the "),GX=n(gZ,"A",{href:!0});var E_t=s(GX);hZo=r(E_t,"from_config()"),E_t.forEach(t),pZo=r(gZ,` class
method.`),gZ.forEach(t),_Zo=i(al),fy=n(al,"P",{});var qje=s(fy);uZo=r(qje,"This class cannot be instantiated directly using "),k_e=n(qje,"CODE",{});var C_t=s(k_e);bZo=r(C_t,"__init__()"),C_t.forEach(t),vZo=r(qje," (throws an error)."),qje.forEach(t),FZo=i(al),Ft=n(al,"DIV",{class:!0});var Qw=s(Ft);T(my.$$.fragment,Qw),TZo=i(Qw),S_e=n(Qw,"P",{});var w_t=s(S_e);MZo=r(w_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),w_t.forEach(t),EZo=i(Qw),Fd=n(Qw,"P",{});var hZ=s(Fd);CZo=r(hZ,`Note:
Loading a model from its configuration file does `),R_e=n(hZ,"STRONG",{});var A_t=s(R_e);wZo=r(A_t,"not"),A_t.forEach(t),AZo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(hZ,"A",{href:!0});var y_t=s(OX);yZo=r(y_t,"from_pretrained()"),y_t.forEach(t),LZo=r(hZ," to load the model weights."),hZ.forEach(t),xZo=i(Qw),T(WF.$$.fragment,Qw),Qw.forEach(t),$Zo=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(gy.$$.fragment,ua),kZo=i(ua),P_e=n(ua,"P",{});var L_t=s(P_e);SZo=r(L_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),L_t.forEach(t),RZo=i(ua),Xa=n(ua,"P",{});var Hw=s(Xa);PZo=r(Hw,"The model class to instantiate is selected based on the "),B_e=n(Hw,"CODE",{});var x_t=s(B_e);BZo=r(x_t,"model_type"),x_t.forEach(t),IZo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),I_e=n(Hw,"CODE",{});var $_t=s(I_e);qZo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),NZo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q_e=n(Hw,"CODE",{});var k_t=s(q_e);jZo=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),DZo=r(Hw,":"),Hw.forEach(t),GZo=i(ua),hy=n(ua,"UL",{});var Nje=s(hy);QF=n(Nje,"LI",{});var R$e=s(QF);N_e=n(R$e,"STRONG",{});var S_t=s(N_e);OZo=r(S_t,"speech-encoder-decoder"),S_t.forEach(t),VZo=r(R$e," \u2014 "),VX=n(R$e,"A",{href:!0});var R_t=s(VX);XZo=r(R_t,"SpeechEncoderDecoderModel"),R_t.forEach(t),zZo=r(R$e," (Speech Encoder decoder model)"),R$e.forEach(t),WZo=i(Nje),HF=n(Nje,"LI",{});var P$e=s(HF);j_e=n(P$e,"STRONG",{});var P_t=s(j_e);QZo=r(P_t,"speech_to_text"),P_t.forEach(t),HZo=r(P$e," \u2014 "),XX=n(P$e,"A",{href:!0});var B_t=s(XX);UZo=r(B_t,"Speech2TextForConditionalGeneration"),B_t.forEach(t),JZo=r(P$e," (Speech2Text model)"),P$e.forEach(t),Nje.forEach(t),YZo=i(ua),UF=n(ua,"P",{});var B$e=s(UF);KZo=r(B$e,"The model is set in evaluation mode by default using "),D_e=n(B$e,"CODE",{});var I_t=s(D_e);ZZo=r(I_t,"model.eval()"),I_t.forEach(t),eer=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(B$e,"CODE",{});var q_t=s(G_e);oer=r(q_t,"model.train()"),q_t.forEach(t),B$e.forEach(t),rer=i(ua),T(JF.$$.fragment,ua),ua.forEach(t),al.forEach(t),Pqe=i(f),Td=n(f,"H2",{class:!0});var jje=s(Td);YF=n(jje,"A",{id:!0,class:!0,href:!0});var N_t=s(YF);O_e=n(N_t,"SPAN",{});var j_t=s(O_e);T(py.$$.fragment,j_t),j_t.forEach(t),N_t.forEach(t),ter=i(jje),V_e=n(jje,"SPAN",{});var D_t=s(V_e);aer=r(D_t,"AutoModelForAudioXVector"),D_t.forEach(t),jje.forEach(t),Bqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(_y.$$.fragment,nl),ner=i(nl),Md=n(nl,"P",{});var pZ=s(Md);ser=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zX=n(pZ,"A",{href:!0});var G_t=s(zX);ler=r(G_t,"from_pretrained()"),G_t.forEach(t),ier=r(pZ," class method or the "),WX=n(pZ,"A",{href:!0});var O_t=s(WX);der=r(O_t,"from_config()"),O_t.forEach(t),cer=r(pZ,` class
method.`),pZ.forEach(t),fer=i(nl),uy=n(nl,"P",{});var Dje=s(uy);mer=r(Dje,"This class cannot be instantiated directly using "),X_e=n(Dje,"CODE",{});var V_t=s(X_e);ger=r(V_t,"__init__()"),V_t.forEach(t),her=r(Dje," (throws an error)."),Dje.forEach(t),per=i(nl),Tt=n(nl,"DIV",{class:!0});var Uw=s(Tt);T(by.$$.fragment,Uw),_er=i(Uw),z_e=n(Uw,"P",{});var X_t=s(z_e);uer=r(X_t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),X_t.forEach(t),ber=i(Uw),Ed=n(Uw,"P",{});var _Z=s(Ed);ver=r(_Z,`Note:
Loading a model from its configuration file does `),W_e=n(_Z,"STRONG",{});var z_t=s(W_e);Fer=r(z_t,"not"),z_t.forEach(t),Ter=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(_Z,"A",{href:!0});var W_t=s(QX);Mer=r(W_t,"from_pretrained()"),W_t.forEach(t),Eer=r(_Z," to load the model weights."),_Z.forEach(t),Cer=i(Uw),T(KF.$$.fragment,Uw),Uw.forEach(t),wer=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(vy.$$.fragment,ba),Aer=i(ba),Q_e=n(ba,"P",{});var Q_t=s(Q_e);yer=r(Q_t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Q_t.forEach(t),Ler=i(ba),za=n(ba,"P",{});var Jw=s(za);xer=r(Jw,"The model class to instantiate is selected based on the "),H_e=n(Jw,"CODE",{});var H_t=s(H_e);$er=r(H_t,"model_type"),H_t.forEach(t),ker=r(Jw,` property of the config object (either
passed as an argument or loaded from `),U_e=n(Jw,"CODE",{});var U_t=s(U_e);Ser=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),Rer=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(Jw,"CODE",{});var J_t=s(J_e);Per=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Ber=r(Jw,":"),Jw.forEach(t),Ier=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);ZF=n(sl,"LI",{});var I$e=s(ZF);Y_e=n(I$e,"STRONG",{});var Y_t=s(Y_e);qer=r(Y_t,"data2vec-audio"),Y_t.forEach(t),Ner=r(I$e," \u2014 "),HX=n(I$e,"A",{href:!0});var K_t=s(HX);jer=r(K_t,"Data2VecAudioForXVector"),K_t.forEach(t),Der=r(I$e," (Data2VecAudio model)"),I$e.forEach(t),Ger=i(sl),eT=n(sl,"LI",{});var q$e=s(eT);K_e=n(q$e,"STRONG",{});var Z_t=s(K_e);Oer=r(Z_t,"unispeech-sat"),Z_t.forEach(t),Ver=r(q$e," \u2014 "),UX=n(q$e,"A",{href:!0});var eut=s(UX);Xer=r(eut,"UniSpeechSatForXVector"),eut.forEach(t),zer=r(q$e," (UniSpeechSat model)"),q$e.forEach(t),Wer=i(sl),oT=n(sl,"LI",{});var N$e=s(oT);Z_e=n(N$e,"STRONG",{});var out=s(Z_e);Qer=r(out,"wav2vec2"),out.forEach(t),Her=r(N$e," \u2014 "),JX=n(N$e,"A",{href:!0});var rut=s(JX);Uer=r(rut,"Wav2Vec2ForXVector"),rut.forEach(t),Jer=r(N$e," (Wav2Vec2 model)"),N$e.forEach(t),Yer=i(sl),rT=n(sl,"LI",{});var j$e=s(rT);eue=n(j$e,"STRONG",{});var tut=s(eue);Ker=r(tut,"wav2vec2-conformer"),tut.forEach(t),Zer=r(j$e," \u2014 "),YX=n(j$e,"A",{href:!0});var aut=s(YX);eor=r(aut,"Wav2Vec2ConformerForXVector"),aut.forEach(t),oor=r(j$e," (Wav2Vec2-Conformer model)"),j$e.forEach(t),ror=i(sl),tT=n(sl,"LI",{});var D$e=s(tT);oue=n(D$e,"STRONG",{});var nut=s(oue);tor=r(nut,"wavlm"),nut.forEach(t),aor=r(D$e," \u2014 "),KX=n(D$e,"A",{href:!0});var sut=s(KX);nor=r(sut,"WavLMForXVector"),sut.forEach(t),sor=r(D$e," (WavLM model)"),D$e.forEach(t),sl.forEach(t),lor=i(ba),aT=n(ba,"P",{});var G$e=s(aT);ior=r(G$e,"The model is set in evaluation mode by default using "),rue=n(G$e,"CODE",{});var lut=s(rue);dor=r(lut,"model.eval()"),lut.forEach(t),cor=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(G$e,"CODE",{});var iut=s(tue);mor=r(iut,"model.train()"),iut.forEach(t),G$e.forEach(t),gor=i(ba),T(nT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Iqe=i(f),Cd=n(f,"H2",{class:!0});var Gje=s(Cd);sT=n(Gje,"A",{id:!0,class:!0,href:!0});var dut=s(sT);aue=n(dut,"SPAN",{});var cut=s(aue);T(Fy.$$.fragment,cut),cut.forEach(t),dut.forEach(t),hor=i(Gje),nue=n(Gje,"SPAN",{});var fut=s(nue);por=r(fut,"AutoModelForMaskedImageModeling"),fut.forEach(t),Gje.forEach(t),qqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(Ty.$$.fragment,ll),_or=i(ll),wd=n(ll,"P",{});var uZ=s(wd);uor=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZX=n(uZ,"A",{href:!0});var mut=s(ZX);bor=r(mut,"from_pretrained()"),mut.forEach(t),vor=r(uZ," class method or the "),ez=n(uZ,"A",{href:!0});var gut=s(ez);For=r(gut,"from_config()"),gut.forEach(t),Tor=r(uZ,` class
method.`),uZ.forEach(t),Mor=i(ll),My=n(ll,"P",{});var Oje=s(My);Eor=r(Oje,"This class cannot be instantiated directly using "),sue=n(Oje,"CODE",{});var hut=s(sue);Cor=r(hut,"__init__()"),hut.forEach(t),wor=r(Oje," (throws an error)."),Oje.forEach(t),Aor=i(ll),Mt=n(ll,"DIV",{class:!0});var Yw=s(Mt);T(Ey.$$.fragment,Yw),yor=i(Yw),lue=n(Yw,"P",{});var put=s(lue);Lor=r(put,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),put.forEach(t),xor=i(Yw),Ad=n(Yw,"P",{});var bZ=s(Ad);$or=r(bZ,`Note:
Loading a model from its configuration file does `),iue=n(bZ,"STRONG",{});var _ut=s(iue);kor=r(_ut,"not"),_ut.forEach(t),Sor=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(bZ,"A",{href:!0});var uut=s(oz);Ror=r(uut,"from_pretrained()"),uut.forEach(t),Por=r(bZ," to load the model weights."),bZ.forEach(t),Bor=i(Yw),T(lT.$$.fragment,Yw),Yw.forEach(t),Ior=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(Cy.$$.fragment,va),qor=i(va),due=n(va,"P",{});var but=s(due);Nor=r(but,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),but.forEach(t),jor=i(va),Wa=n(va,"P",{});var Kw=s(Wa);Dor=r(Kw,"The model class to instantiate is selected based on the "),cue=n(Kw,"CODE",{});var vut=s(cue);Gor=r(vut,"model_type"),vut.forEach(t),Oor=r(Kw,` property of the config object (either
passed as an argument or loaded from `),fue=n(Kw,"CODE",{});var Fut=s(fue);Vor=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Xor=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(Kw,"CODE",{});var Tut=s(mue);zor=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),Wor=r(Kw,":"),Kw.forEach(t),Qor=i(va),yd=n(va,"UL",{});var vZ=s(yd);iT=n(vZ,"LI",{});var O$e=s(iT);gue=n(O$e,"STRONG",{});var Mut=s(gue);Hor=r(Mut,"deit"),Mut.forEach(t),Uor=r(O$e," \u2014 "),rz=n(O$e,"A",{href:!0});var Eut=s(rz);Jor=r(Eut,"DeiTForMaskedImageModeling"),Eut.forEach(t),Yor=r(O$e," (DeiT model)"),O$e.forEach(t),Kor=i(vZ),dT=n(vZ,"LI",{});var V$e=s(dT);hue=n(V$e,"STRONG",{});var Cut=s(hue);Zor=r(Cut,"swin"),Cut.forEach(t),err=r(V$e," \u2014 "),tz=n(V$e,"A",{href:!0});var wut=s(tz);orr=r(wut,"SwinForMaskedImageModeling"),wut.forEach(t),rrr=r(V$e," (Swin model)"),V$e.forEach(t),trr=i(vZ),cT=n(vZ,"LI",{});var X$e=s(cT);pue=n(X$e,"STRONG",{});var Aut=s(pue);arr=r(Aut,"vit"),Aut.forEach(t),nrr=r(X$e," \u2014 "),az=n(X$e,"A",{href:!0});var yut=s(az);srr=r(yut,"ViTForMaskedImageModeling"),yut.forEach(t),lrr=r(X$e," (ViT model)"),X$e.forEach(t),vZ.forEach(t),irr=i(va),fT=n(va,"P",{});var z$e=s(fT);drr=r(z$e,"The model is set in evaluation mode by default using "),_ue=n(z$e,"CODE",{});var Lut=s(_ue);crr=r(Lut,"model.eval()"),Lut.forEach(t),frr=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(z$e,"CODE",{});var xut=s(uue);mrr=r(xut,"model.train()"),xut.forEach(t),z$e.forEach(t),grr=i(va),T(mT.$$.fragment,va),va.forEach(t),ll.forEach(t),Nqe=i(f),Ld=n(f,"H2",{class:!0});var Vje=s(Ld);gT=n(Vje,"A",{id:!0,class:!0,href:!0});var $ut=s(gT);bue=n($ut,"SPAN",{});var kut=s(bue);T(wy.$$.fragment,kut),kut.forEach(t),$ut.forEach(t),hrr=i(Vje),vue=n(Vje,"SPAN",{});var Sut=s(vue);prr=r(Sut,"AutoModelForObjectDetection"),Sut.forEach(t),Vje.forEach(t),jqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(Ay.$$.fragment,il),_rr=i(il),xd=n(il,"P",{});var FZ=s(xd);urr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nz=n(FZ,"A",{href:!0});var Rut=s(nz);brr=r(Rut,"from_pretrained()"),Rut.forEach(t),vrr=r(FZ," class method or the "),sz=n(FZ,"A",{href:!0});var Put=s(sz);Frr=r(Put,"from_config()"),Put.forEach(t),Trr=r(FZ,` class
method.`),FZ.forEach(t),Mrr=i(il),yy=n(il,"P",{});var Xje=s(yy);Err=r(Xje,"This class cannot be instantiated directly using "),Fue=n(Xje,"CODE",{});var But=s(Fue);Crr=r(But,"__init__()"),But.forEach(t),wrr=r(Xje," (throws an error)."),Xje.forEach(t),Arr=i(il),Et=n(il,"DIV",{class:!0});var Zw=s(Et);T(Ly.$$.fragment,Zw),yrr=i(Zw),Tue=n(Zw,"P",{});var Iut=s(Tue);Lrr=r(Iut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Iut.forEach(t),xrr=i(Zw),$d=n(Zw,"P",{});var TZ=s($d);$rr=r(TZ,`Note:
Loading a model from its configuration file does `),Mue=n(TZ,"STRONG",{});var qut=s(Mue);krr=r(qut,"not"),qut.forEach(t),Srr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(TZ,"A",{href:!0});var Nut=s(lz);Rrr=r(Nut,"from_pretrained()"),Nut.forEach(t),Prr=r(TZ," to load the model weights."),TZ.forEach(t),Brr=i(Zw),T(hT.$$.fragment,Zw),Zw.forEach(t),Irr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(xy.$$.fragment,Fa),qrr=i(Fa),Eue=n(Fa,"P",{});var jut=s(Eue);Nrr=r(jut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jut.forEach(t),jrr=i(Fa),Qa=n(Fa,"P",{});var e0=s(Qa);Drr=r(e0,"The model class to instantiate is selected based on the "),Cue=n(e0,"CODE",{});var Dut=s(Cue);Grr=r(Dut,"model_type"),Dut.forEach(t),Orr=r(e0,` property of the config object (either
passed as an argument or loaded from `),wue=n(e0,"CODE",{});var Gut=s(wue);Vrr=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),Xrr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(e0,"CODE",{});var Out=s(Aue);zrr=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),Wrr=r(e0,":"),e0.forEach(t),Qrr=i(Fa),$y=n(Fa,"UL",{});var zje=s($y);pT=n(zje,"LI",{});var W$e=s(pT);yue=n(W$e,"STRONG",{});var Vut=s(yue);Hrr=r(Vut,"detr"),Vut.forEach(t),Urr=r(W$e," \u2014 "),iz=n(W$e,"A",{href:!0});var Xut=s(iz);Jrr=r(Xut,"DetrForObjectDetection"),Xut.forEach(t),Yrr=r(W$e," (DETR model)"),W$e.forEach(t),Krr=i(zje),_T=n(zje,"LI",{});var Q$e=s(_T);Lue=n(Q$e,"STRONG",{});var zut=s(Lue);Zrr=r(zut,"yolos"),zut.forEach(t),etr=r(Q$e," \u2014 "),dz=n(Q$e,"A",{href:!0});var Wut=s(dz);otr=r(Wut,"YolosForObjectDetection"),Wut.forEach(t),rtr=r(Q$e," (YOLOS model)"),Q$e.forEach(t),zje.forEach(t),ttr=i(Fa),uT=n(Fa,"P",{});var H$e=s(uT);atr=r(H$e,"The model is set in evaluation mode by default using "),xue=n(H$e,"CODE",{});var Qut=s(xue);ntr=r(Qut,"model.eval()"),Qut.forEach(t),str=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(H$e,"CODE",{});var Hut=s($ue);ltr=r(Hut,"model.train()"),Hut.forEach(t),H$e.forEach(t),itr=i(Fa),T(bT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Dqe=i(f),kd=n(f,"H2",{class:!0});var Wje=s(kd);vT=n(Wje,"A",{id:!0,class:!0,href:!0});var Uut=s(vT);kue=n(Uut,"SPAN",{});var Jut=s(kue);T(ky.$$.fragment,Jut),Jut.forEach(t),Uut.forEach(t),dtr=i(Wje),Sue=n(Wje,"SPAN",{});var Yut=s(Sue);ctr=r(Yut,"AutoModelForImageSegmentation"),Yut.forEach(t),Wje.forEach(t),Gqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(Sy.$$.fragment,dl),ftr=i(dl),Sd=n(dl,"P",{});var MZ=s(Sd);mtr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cz=n(MZ,"A",{href:!0});var Kut=s(cz);gtr=r(Kut,"from_pretrained()"),Kut.forEach(t),htr=r(MZ," class method or the "),fz=n(MZ,"A",{href:!0});var Zut=s(fz);ptr=r(Zut,"from_config()"),Zut.forEach(t),_tr=r(MZ,` class
method.`),MZ.forEach(t),utr=i(dl),Ry=n(dl,"P",{});var Qje=s(Ry);btr=r(Qje,"This class cannot be instantiated directly using "),Rue=n(Qje,"CODE",{});var e2t=s(Rue);vtr=r(e2t,"__init__()"),e2t.forEach(t),Ftr=r(Qje," (throws an error)."),Qje.forEach(t),Ttr=i(dl),Ct=n(dl,"DIV",{class:!0});var o0=s(Ct);T(Py.$$.fragment,o0),Mtr=i(o0),Pue=n(o0,"P",{});var o2t=s(Pue);Etr=r(o2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),o2t.forEach(t),Ctr=i(o0),Rd=n(o0,"P",{});var EZ=s(Rd);wtr=r(EZ,`Note:
Loading a model from its configuration file does `),Bue=n(EZ,"STRONG",{});var r2t=s(Bue);Atr=r(r2t,"not"),r2t.forEach(t),ytr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(EZ,"A",{href:!0});var t2t=s(mz);Ltr=r(t2t,"from_pretrained()"),t2t.forEach(t),xtr=r(EZ," to load the model weights."),EZ.forEach(t),$tr=i(o0),T(FT.$$.fragment,o0),o0.forEach(t),ktr=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(By.$$.fragment,Ta),Str=i(Ta),Iue=n(Ta,"P",{});var a2t=s(Iue);Rtr=r(a2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),a2t.forEach(t),Ptr=i(Ta),Ha=n(Ta,"P",{});var r0=s(Ha);Btr=r(r0,"The model class to instantiate is selected based on the "),que=n(r0,"CODE",{});var n2t=s(que);Itr=r(n2t,"model_type"),n2t.forEach(t),qtr=r(r0,` property of the config object (either
passed as an argument or loaded from `),Nue=n(r0,"CODE",{});var s2t=s(Nue);Ntr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),jtr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(r0,"CODE",{});var l2t=s(jue);Dtr=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),Gtr=r(r0,":"),r0.forEach(t),Otr=i(Ta),Due=n(Ta,"UL",{});var i2t=s(Due);TT=n(i2t,"LI",{});var U$e=s(TT);Gue=n(U$e,"STRONG",{});var d2t=s(Gue);Vtr=r(d2t,"detr"),d2t.forEach(t),Xtr=r(U$e," \u2014 "),gz=n(U$e,"A",{href:!0});var c2t=s(gz);ztr=r(c2t,"DetrForSegmentation"),c2t.forEach(t),Wtr=r(U$e," (DETR model)"),U$e.forEach(t),i2t.forEach(t),Qtr=i(Ta),MT=n(Ta,"P",{});var J$e=s(MT);Htr=r(J$e,"The model is set in evaluation mode by default using "),Oue=n(J$e,"CODE",{});var f2t=s(Oue);Utr=r(f2t,"model.eval()"),f2t.forEach(t),Jtr=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(J$e,"CODE",{});var m2t=s(Vue);Ytr=r(m2t,"model.train()"),m2t.forEach(t),J$e.forEach(t),Ktr=i(Ta),T(ET.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Oqe=i(f),Pd=n(f,"H2",{class:!0});var Hje=s(Pd);CT=n(Hje,"A",{id:!0,class:!0,href:!0});var g2t=s(CT);Xue=n(g2t,"SPAN",{});var h2t=s(Xue);T(Iy.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),Ztr=i(Hje),zue=n(Hje,"SPAN",{});var p2t=s(zue);ear=r(p2t,"AutoModelForSemanticSegmentation"),p2t.forEach(t),Hje.forEach(t),Vqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(qy.$$.fragment,cl),oar=i(cl),Bd=n(cl,"P",{});var CZ=s(Bd);rar=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hz=n(CZ,"A",{href:!0});var _2t=s(hz);tar=r(_2t,"from_pretrained()"),_2t.forEach(t),aar=r(CZ," class method or the "),pz=n(CZ,"A",{href:!0});var u2t=s(pz);nar=r(u2t,"from_config()"),u2t.forEach(t),sar=r(CZ,` class
method.`),CZ.forEach(t),lar=i(cl),Ny=n(cl,"P",{});var Uje=s(Ny);iar=r(Uje,"This class cannot be instantiated directly using "),Wue=n(Uje,"CODE",{});var b2t=s(Wue);dar=r(b2t,"__init__()"),b2t.forEach(t),car=r(Uje," (throws an error)."),Uje.forEach(t),far=i(cl),wt=n(cl,"DIV",{class:!0});var t0=s(wt);T(jy.$$.fragment,t0),mar=i(t0),Que=n(t0,"P",{});var v2t=s(Que);gar=r(v2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),v2t.forEach(t),har=i(t0),Id=n(t0,"P",{});var wZ=s(Id);par=r(wZ,`Note:
Loading a model from its configuration file does `),Hue=n(wZ,"STRONG",{});var F2t=s(Hue);_ar=r(F2t,"not"),F2t.forEach(t),uar=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(wZ,"A",{href:!0});var T2t=s(_z);bar=r(T2t,"from_pretrained()"),T2t.forEach(t),Far=r(wZ," to load the model weights."),wZ.forEach(t),Tar=i(t0),T(wT.$$.fragment,t0),t0.forEach(t),Mar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(Dy.$$.fragment,Ma),Ear=i(Ma),Uue=n(Ma,"P",{});var M2t=s(Uue);Car=r(M2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),M2t.forEach(t),war=i(Ma),Ua=n(Ma,"P",{});var a0=s(Ua);Aar=r(a0,"The model class to instantiate is selected based on the "),Jue=n(a0,"CODE",{});var E2t=s(Jue);yar=r(E2t,"model_type"),E2t.forEach(t),Lar=r(a0,` property of the config object (either
passed as an argument or loaded from `),Yue=n(a0,"CODE",{});var C2t=s(Yue);xar=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),$ar=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(a0,"CODE",{});var w2t=s(Kue);kar=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Sar=r(a0,":"),a0.forEach(t),Rar=i(Ma),Ja=n(Ma,"UL",{});var n0=s(Ja);AT=n(n0,"LI",{});var Y$e=s(AT);Zue=n(Y$e,"STRONG",{});var A2t=s(Zue);Par=r(A2t,"beit"),A2t.forEach(t),Bar=r(Y$e," \u2014 "),uz=n(Y$e,"A",{href:!0});var y2t=s(uz);Iar=r(y2t,"BeitForSemanticSegmentation"),y2t.forEach(t),qar=r(Y$e," (BEiT model)"),Y$e.forEach(t),Nar=i(n0),yT=n(n0,"LI",{});var K$e=s(yT);e2e=n(K$e,"STRONG",{});var L2t=s(e2e);jar=r(L2t,"data2vec-vision"),L2t.forEach(t),Dar=r(K$e," \u2014 "),bz=n(K$e,"A",{href:!0});var x2t=s(bz);Gar=r(x2t,"Data2VecVisionForSemanticSegmentation"),x2t.forEach(t),Oar=r(K$e," (Data2VecVision model)"),K$e.forEach(t),Var=i(n0),LT=n(n0,"LI",{});var Z$e=s(LT);o2e=n(Z$e,"STRONG",{});var $2t=s(o2e);Xar=r($2t,"dpt"),$2t.forEach(t),zar=r(Z$e," \u2014 "),vz=n(Z$e,"A",{href:!0});var k2t=s(vz);War=r(k2t,"DPTForSemanticSegmentation"),k2t.forEach(t),Qar=r(Z$e," (DPT model)"),Z$e.forEach(t),Har=i(n0),xT=n(n0,"LI",{});var eke=s(xT);r2e=n(eke,"STRONG",{});var S2t=s(r2e);Uar=r(S2t,"segformer"),S2t.forEach(t),Jar=r(eke," \u2014 "),Fz=n(eke,"A",{href:!0});var R2t=s(Fz);Yar=r(R2t,"SegformerForSemanticSegmentation"),R2t.forEach(t),Kar=r(eke," (SegFormer model)"),eke.forEach(t),n0.forEach(t),Zar=i(Ma),$T=n(Ma,"P",{});var oke=s($T);enr=r(oke,"The model is set in evaluation mode by default using "),t2e=n(oke,"CODE",{});var P2t=s(t2e);onr=r(P2t,"model.eval()"),P2t.forEach(t),rnr=r(oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=n(oke,"CODE",{});var B2t=s(a2e);tnr=r(B2t,"model.train()"),B2t.forEach(t),oke.forEach(t),anr=i(Ma),T(kT.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Xqe=i(f),qd=n(f,"H2",{class:!0});var Jje=s(qd);ST=n(Jje,"A",{id:!0,class:!0,href:!0});var I2t=s(ST);n2e=n(I2t,"SPAN",{});var q2t=s(n2e);T(Gy.$$.fragment,q2t),q2t.forEach(t),I2t.forEach(t),nnr=i(Jje),s2e=n(Jje,"SPAN",{});var N2t=s(s2e);snr=r(N2t,"AutoModelForInstanceSegmentation"),N2t.forEach(t),Jje.forEach(t),zqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(Oy.$$.fragment,fl),lnr=i(fl),Nd=n(fl,"P",{});var AZ=s(Nd);inr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Tz=n(AZ,"A",{href:!0});var j2t=s(Tz);dnr=r(j2t,"from_pretrained()"),j2t.forEach(t),cnr=r(AZ," class method or the "),Mz=n(AZ,"A",{href:!0});var D2t=s(Mz);fnr=r(D2t,"from_config()"),D2t.forEach(t),mnr=r(AZ,` class
method.`),AZ.forEach(t),gnr=i(fl),Vy=n(fl,"P",{});var Yje=s(Vy);hnr=r(Yje,"This class cannot be instantiated directly using "),l2e=n(Yje,"CODE",{});var G2t=s(l2e);pnr=r(G2t,"__init__()"),G2t.forEach(t),_nr=r(Yje," (throws an error)."),Yje.forEach(t),unr=i(fl),At=n(fl,"DIV",{class:!0});var s0=s(At);T(Xy.$$.fragment,s0),bnr=i(s0),i2e=n(s0,"P",{});var O2t=s(i2e);vnr=r(O2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),O2t.forEach(t),Fnr=i(s0),jd=n(s0,"P",{});var yZ=s(jd);Tnr=r(yZ,`Note:
Loading a model from its configuration file does `),d2e=n(yZ,"STRONG",{});var V2t=s(d2e);Mnr=r(V2t,"not"),V2t.forEach(t),Enr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(yZ,"A",{href:!0});var X2t=s(Ez);Cnr=r(X2t,"from_pretrained()"),X2t.forEach(t),wnr=r(yZ," to load the model weights."),yZ.forEach(t),Anr=i(s0),T(RT.$$.fragment,s0),s0.forEach(t),ynr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(zy.$$.fragment,Ea),Lnr=i(Ea),c2e=n(Ea,"P",{});var z2t=s(c2e);xnr=r(z2t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),z2t.forEach(t),$nr=i(Ea),Ya=n(Ea,"P",{});var l0=s(Ya);knr=r(l0,"The model class to instantiate is selected based on the "),f2e=n(l0,"CODE",{});var W2t=s(f2e);Snr=r(W2t,"model_type"),W2t.forEach(t),Rnr=r(l0,` property of the config object (either
passed as an argument or loaded from `),m2e=n(l0,"CODE",{});var Q2t=s(m2e);Pnr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),Bnr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(l0,"CODE",{});var H2t=s(g2e);Inr=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),qnr=r(l0,":"),l0.forEach(t),Nnr=i(Ea),h2e=n(Ea,"UL",{});var U2t=s(h2e);PT=n(U2t,"LI",{});var rke=s(PT);p2e=n(rke,"STRONG",{});var J2t=s(p2e);jnr=r(J2t,"maskformer"),J2t.forEach(t),Dnr=r(rke," \u2014 "),Cz=n(rke,"A",{href:!0});var Y2t=s(Cz);Gnr=r(Y2t,"MaskFormerForInstanceSegmentation"),Y2t.forEach(t),Onr=r(rke," (MaskFormer model)"),rke.forEach(t),U2t.forEach(t),Vnr=i(Ea),BT=n(Ea,"P",{});var tke=s(BT);Xnr=r(tke,"The model is set in evaluation mode by default using "),_2e=n(tke,"CODE",{});var K2t=s(_2e);znr=r(K2t,"model.eval()"),K2t.forEach(t),Wnr=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(tke,"CODE",{});var Z2t=s(u2e);Qnr=r(Z2t,"model.train()"),Z2t.forEach(t),tke.forEach(t),Hnr=i(Ea),T(IT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Wqe=i(f),Dd=n(f,"H2",{class:!0});var Kje=s(Dd);qT=n(Kje,"A",{id:!0,class:!0,href:!0});var e1t=s(qT);b2e=n(e1t,"SPAN",{});var o1t=s(b2e);T(Wy.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),Unr=i(Kje),v2e=n(Kje,"SPAN",{});var r1t=s(v2e);Jnr=r(r1t,"TFAutoModel"),r1t.forEach(t),Kje.forEach(t),Qqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(Qy.$$.fragment,ml),Ynr=i(ml),Gd=n(ml,"P",{});var LZ=s(Gd);Knr=r(LZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wz=n(LZ,"A",{href:!0});var t1t=s(wz);Znr=r(t1t,"from_pretrained()"),t1t.forEach(t),esr=r(LZ," class method or the "),Az=n(LZ,"A",{href:!0});var a1t=s(Az);osr=r(a1t,"from_config()"),a1t.forEach(t),rsr=r(LZ,` class
method.`),LZ.forEach(t),tsr=i(ml),Hy=n(ml,"P",{});var Zje=s(Hy);asr=r(Zje,"This class cannot be instantiated directly using "),F2e=n(Zje,"CODE",{});var n1t=s(F2e);nsr=r(n1t,"__init__()"),n1t.forEach(t),ssr=r(Zje," (throws an error)."),Zje.forEach(t),lsr=i(ml),yt=n(ml,"DIV",{class:!0});var i0=s(yt);T(Uy.$$.fragment,i0),isr=i(i0),T2e=n(i0,"P",{});var s1t=s(T2e);dsr=r(s1t,"Instantiates one of the base model classes of the library from a configuration."),s1t.forEach(t),csr=i(i0),Od=n(i0,"P",{});var xZ=s(Od);fsr=r(xZ,`Note:
Loading a model from its configuration file does `),M2e=n(xZ,"STRONG",{});var l1t=s(M2e);msr=r(l1t,"not"),l1t.forEach(t),gsr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(xZ,"A",{href:!0});var i1t=s(yz);hsr=r(i1t,"from_pretrained()"),i1t.forEach(t),psr=r(xZ," to load the model weights."),xZ.forEach(t),_sr=i(i0),T(NT.$$.fragment,i0),i0.forEach(t),usr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(Jy.$$.fragment,gl),bsr=i(gl),E2e=n(gl,"P",{});var d1t=s(E2e);vsr=r(d1t,"Instantiate one of the base model classes of the library from a pretrained model."),d1t.forEach(t),Fsr=i(gl),Ka=n(gl,"P",{});var d0=s(Ka);Tsr=r(d0,"The model class to instantiate is selected based on the "),C2e=n(d0,"CODE",{});var c1t=s(C2e);Msr=r(c1t,"model_type"),c1t.forEach(t),Esr=r(d0,` property of the config object (either
passed as an argument or loaded from `),w2e=n(d0,"CODE",{});var f1t=s(w2e);Csr=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),wsr=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(d0,"CODE",{});var m1t=s(A2e);Asr=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),ysr=r(d0,":"),d0.forEach(t),Lsr=i(gl),N=n(gl,"UL",{});var D=s(N);jT=n(D,"LI",{});var ake=s(jT);y2e=n(ake,"STRONG",{});var g1t=s(y2e);xsr=r(g1t,"albert"),g1t.forEach(t),$sr=r(ake," \u2014 "),Lz=n(ake,"A",{href:!0});var h1t=s(Lz);ksr=r(h1t,"TFAlbertModel"),h1t.forEach(t),Ssr=r(ake," (ALBERT model)"),ake.forEach(t),Rsr=i(D),DT=n(D,"LI",{});var nke=s(DT);L2e=n(nke,"STRONG",{});var p1t=s(L2e);Psr=r(p1t,"bart"),p1t.forEach(t),Bsr=r(nke," \u2014 "),xz=n(nke,"A",{href:!0});var _1t=s(xz);Isr=r(_1t,"TFBartModel"),_1t.forEach(t),qsr=r(nke," (BART model)"),nke.forEach(t),Nsr=i(D),GT=n(D,"LI",{});var ske=s(GT);x2e=n(ske,"STRONG",{});var u1t=s(x2e);jsr=r(u1t,"bert"),u1t.forEach(t),Dsr=r(ske," \u2014 "),$z=n(ske,"A",{href:!0});var b1t=s($z);Gsr=r(b1t,"TFBertModel"),b1t.forEach(t),Osr=r(ske," (BERT model)"),ske.forEach(t),Vsr=i(D),OT=n(D,"LI",{});var lke=s(OT);$2e=n(lke,"STRONG",{});var v1t=s($2e);Xsr=r(v1t,"blenderbot"),v1t.forEach(t),zsr=r(lke," \u2014 "),kz=n(lke,"A",{href:!0});var F1t=s(kz);Wsr=r(F1t,"TFBlenderbotModel"),F1t.forEach(t),Qsr=r(lke," (Blenderbot model)"),lke.forEach(t),Hsr=i(D),VT=n(D,"LI",{});var ike=s(VT);k2e=n(ike,"STRONG",{});var T1t=s(k2e);Usr=r(T1t,"blenderbot-small"),T1t.forEach(t),Jsr=r(ike," \u2014 "),Sz=n(ike,"A",{href:!0});var M1t=s(Sz);Ysr=r(M1t,"TFBlenderbotSmallModel"),M1t.forEach(t),Ksr=r(ike," (BlenderbotSmall model)"),ike.forEach(t),Zsr=i(D),XT=n(D,"LI",{});var dke=s(XT);S2e=n(dke,"STRONG",{});var E1t=s(S2e);elr=r(E1t,"camembert"),E1t.forEach(t),olr=r(dke," \u2014 "),Rz=n(dke,"A",{href:!0});var C1t=s(Rz);rlr=r(C1t,"TFCamembertModel"),C1t.forEach(t),tlr=r(dke," (CamemBERT model)"),dke.forEach(t),alr=i(D),zT=n(D,"LI",{});var cke=s(zT);R2e=n(cke,"STRONG",{});var w1t=s(R2e);nlr=r(w1t,"clip"),w1t.forEach(t),slr=r(cke," \u2014 "),Pz=n(cke,"A",{href:!0});var A1t=s(Pz);llr=r(A1t,"TFCLIPModel"),A1t.forEach(t),ilr=r(cke," (CLIP model)"),cke.forEach(t),dlr=i(D),WT=n(D,"LI",{});var fke=s(WT);P2e=n(fke,"STRONG",{});var y1t=s(P2e);clr=r(y1t,"convbert"),y1t.forEach(t),flr=r(fke," \u2014 "),Bz=n(fke,"A",{href:!0});var L1t=s(Bz);mlr=r(L1t,"TFConvBertModel"),L1t.forEach(t),glr=r(fke," (ConvBERT model)"),fke.forEach(t),hlr=i(D),QT=n(D,"LI",{});var mke=s(QT);B2e=n(mke,"STRONG",{});var x1t=s(B2e);plr=r(x1t,"convnext"),x1t.forEach(t),_lr=r(mke," \u2014 "),Iz=n(mke,"A",{href:!0});var $1t=s(Iz);ulr=r($1t,"TFConvNextModel"),$1t.forEach(t),blr=r(mke," (ConvNext model)"),mke.forEach(t),vlr=i(D),HT=n(D,"LI",{});var gke=s(HT);I2e=n(gke,"STRONG",{});var k1t=s(I2e);Flr=r(k1t,"ctrl"),k1t.forEach(t),Tlr=r(gke," \u2014 "),qz=n(gke,"A",{href:!0});var S1t=s(qz);Mlr=r(S1t,"TFCTRLModel"),S1t.forEach(t),Elr=r(gke," (CTRL model)"),gke.forEach(t),Clr=i(D),UT=n(D,"LI",{});var hke=s(UT);q2e=n(hke,"STRONG",{});var R1t=s(q2e);wlr=r(R1t,"data2vec-vision"),R1t.forEach(t),Alr=r(hke," \u2014 "),Nz=n(hke,"A",{href:!0});var P1t=s(Nz);ylr=r(P1t,"TFData2VecVisionModel"),P1t.forEach(t),Llr=r(hke," (Data2VecVision model)"),hke.forEach(t),xlr=i(D),JT=n(D,"LI",{});var pke=s(JT);N2e=n(pke,"STRONG",{});var B1t=s(N2e);$lr=r(B1t,"deberta"),B1t.forEach(t),klr=r(pke," \u2014 "),jz=n(pke,"A",{href:!0});var I1t=s(jz);Slr=r(I1t,"TFDebertaModel"),I1t.forEach(t),Rlr=r(pke," (DeBERTa model)"),pke.forEach(t),Plr=i(D),YT=n(D,"LI",{});var _ke=s(YT);j2e=n(_ke,"STRONG",{});var q1t=s(j2e);Blr=r(q1t,"deberta-v2"),q1t.forEach(t),Ilr=r(_ke," \u2014 "),Dz=n(_ke,"A",{href:!0});var N1t=s(Dz);qlr=r(N1t,"TFDebertaV2Model"),N1t.forEach(t),Nlr=r(_ke," (DeBERTa-v2 model)"),_ke.forEach(t),jlr=i(D),KT=n(D,"LI",{});var uke=s(KT);D2e=n(uke,"STRONG",{});var j1t=s(D2e);Dlr=r(j1t,"distilbert"),j1t.forEach(t),Glr=r(uke," \u2014 "),Gz=n(uke,"A",{href:!0});var D1t=s(Gz);Olr=r(D1t,"TFDistilBertModel"),D1t.forEach(t),Vlr=r(uke," (DistilBERT model)"),uke.forEach(t),Xlr=i(D),ZT=n(D,"LI",{});var bke=s(ZT);G2e=n(bke,"STRONG",{});var G1t=s(G2e);zlr=r(G1t,"dpr"),G1t.forEach(t),Wlr=r(bke," \u2014 "),Oz=n(bke,"A",{href:!0});var O1t=s(Oz);Qlr=r(O1t,"TFDPRQuestionEncoder"),O1t.forEach(t),Hlr=r(bke," (DPR model)"),bke.forEach(t),Ulr=i(D),e7=n(D,"LI",{});var vke=s(e7);O2e=n(vke,"STRONG",{});var V1t=s(O2e);Jlr=r(V1t,"electra"),V1t.forEach(t),Ylr=r(vke," \u2014 "),Vz=n(vke,"A",{href:!0});var X1t=s(Vz);Klr=r(X1t,"TFElectraModel"),X1t.forEach(t),Zlr=r(vke," (ELECTRA model)"),vke.forEach(t),eir=i(D),o7=n(D,"LI",{});var Fke=s(o7);V2e=n(Fke,"STRONG",{});var z1t=s(V2e);oir=r(z1t,"flaubert"),z1t.forEach(t),rir=r(Fke," \u2014 "),Xz=n(Fke,"A",{href:!0});var W1t=s(Xz);tir=r(W1t,"TFFlaubertModel"),W1t.forEach(t),air=r(Fke," (FlauBERT model)"),Fke.forEach(t),nir=i(D),Bs=n(D,"LI",{});var y$=s(Bs);X2e=n(y$,"STRONG",{});var Q1t=s(X2e);sir=r(Q1t,"funnel"),Q1t.forEach(t),lir=r(y$," \u2014 "),zz=n(y$,"A",{href:!0});var H1t=s(zz);iir=r(H1t,"TFFunnelModel"),H1t.forEach(t),dir=r(y$," or "),Wz=n(y$,"A",{href:!0});var U1t=s(Wz);cir=r(U1t,"TFFunnelBaseModel"),U1t.forEach(t),fir=r(y$," (Funnel Transformer model)"),y$.forEach(t),mir=i(D),r7=n(D,"LI",{});var Tke=s(r7);z2e=n(Tke,"STRONG",{});var J1t=s(z2e);gir=r(J1t,"gpt2"),J1t.forEach(t),hir=r(Tke," \u2014 "),Qz=n(Tke,"A",{href:!0});var Y1t=s(Qz);pir=r(Y1t,"TFGPT2Model"),Y1t.forEach(t),_ir=r(Tke," (OpenAI GPT-2 model)"),Tke.forEach(t),uir=i(D),t7=n(D,"LI",{});var Mke=s(t7);W2e=n(Mke,"STRONG",{});var K1t=s(W2e);bir=r(K1t,"gptj"),K1t.forEach(t),vir=r(Mke," \u2014 "),Hz=n(Mke,"A",{href:!0});var Z1t=s(Hz);Fir=r(Z1t,"TFGPTJModel"),Z1t.forEach(t),Tir=r(Mke," (GPT-J model)"),Mke.forEach(t),Mir=i(D),a7=n(D,"LI",{});var Eke=s(a7);Q2e=n(Eke,"STRONG",{});var e9t=s(Q2e);Eir=r(e9t,"hubert"),e9t.forEach(t),Cir=r(Eke," \u2014 "),Uz=n(Eke,"A",{href:!0});var o9t=s(Uz);wir=r(o9t,"TFHubertModel"),o9t.forEach(t),Air=r(Eke," (Hubert model)"),Eke.forEach(t),yir=i(D),n7=n(D,"LI",{});var Cke=s(n7);H2e=n(Cke,"STRONG",{});var r9t=s(H2e);Lir=r(r9t,"layoutlm"),r9t.forEach(t),xir=r(Cke," \u2014 "),Jz=n(Cke,"A",{href:!0});var t9t=s(Jz);$ir=r(t9t,"TFLayoutLMModel"),t9t.forEach(t),kir=r(Cke," (LayoutLM model)"),Cke.forEach(t),Sir=i(D),s7=n(D,"LI",{});var wke=s(s7);U2e=n(wke,"STRONG",{});var a9t=s(U2e);Rir=r(a9t,"led"),a9t.forEach(t),Pir=r(wke," \u2014 "),Yz=n(wke,"A",{href:!0});var n9t=s(Yz);Bir=r(n9t,"TFLEDModel"),n9t.forEach(t),Iir=r(wke," (LED model)"),wke.forEach(t),qir=i(D),l7=n(D,"LI",{});var Ake=s(l7);J2e=n(Ake,"STRONG",{});var s9t=s(J2e);Nir=r(s9t,"longformer"),s9t.forEach(t),jir=r(Ake," \u2014 "),Kz=n(Ake,"A",{href:!0});var l9t=s(Kz);Dir=r(l9t,"TFLongformerModel"),l9t.forEach(t),Gir=r(Ake," (Longformer model)"),Ake.forEach(t),Oir=i(D),i7=n(D,"LI",{});var yke=s(i7);Y2e=n(yke,"STRONG",{});var i9t=s(Y2e);Vir=r(i9t,"lxmert"),i9t.forEach(t),Xir=r(yke," \u2014 "),Zz=n(yke,"A",{href:!0});var d9t=s(Zz);zir=r(d9t,"TFLxmertModel"),d9t.forEach(t),Wir=r(yke," (LXMERT model)"),yke.forEach(t),Qir=i(D),d7=n(D,"LI",{});var Lke=s(d7);K2e=n(Lke,"STRONG",{});var c9t=s(K2e);Hir=r(c9t,"marian"),c9t.forEach(t),Uir=r(Lke," \u2014 "),eW=n(Lke,"A",{href:!0});var f9t=s(eW);Jir=r(f9t,"TFMarianModel"),f9t.forEach(t),Yir=r(Lke," (Marian model)"),Lke.forEach(t),Kir=i(D),c7=n(D,"LI",{});var xke=s(c7);Z2e=n(xke,"STRONG",{});var m9t=s(Z2e);Zir=r(m9t,"mbart"),m9t.forEach(t),edr=r(xke," \u2014 "),oW=n(xke,"A",{href:!0});var g9t=s(oW);odr=r(g9t,"TFMBartModel"),g9t.forEach(t),rdr=r(xke," (mBART model)"),xke.forEach(t),tdr=i(D),f7=n(D,"LI",{});var $ke=s(f7);e1e=n($ke,"STRONG",{});var h9t=s(e1e);adr=r(h9t,"mobilebert"),h9t.forEach(t),ndr=r($ke," \u2014 "),rW=n($ke,"A",{href:!0});var p9t=s(rW);sdr=r(p9t,"TFMobileBertModel"),p9t.forEach(t),ldr=r($ke," (MobileBERT model)"),$ke.forEach(t),idr=i(D),m7=n(D,"LI",{});var kke=s(m7);o1e=n(kke,"STRONG",{});var _9t=s(o1e);ddr=r(_9t,"mpnet"),_9t.forEach(t),cdr=r(kke," \u2014 "),tW=n(kke,"A",{href:!0});var u9t=s(tW);fdr=r(u9t,"TFMPNetModel"),u9t.forEach(t),mdr=r(kke," (MPNet model)"),kke.forEach(t),gdr=i(D),g7=n(D,"LI",{});var Ske=s(g7);r1e=n(Ske,"STRONG",{});var b9t=s(r1e);hdr=r(b9t,"mt5"),b9t.forEach(t),pdr=r(Ske," \u2014 "),aW=n(Ske,"A",{href:!0});var v9t=s(aW);_dr=r(v9t,"TFMT5Model"),v9t.forEach(t),udr=r(Ske," (mT5 model)"),Ske.forEach(t),bdr=i(D),h7=n(D,"LI",{});var Rke=s(h7);t1e=n(Rke,"STRONG",{});var F9t=s(t1e);vdr=r(F9t,"openai-gpt"),F9t.forEach(t),Fdr=r(Rke," \u2014 "),nW=n(Rke,"A",{href:!0});var T9t=s(nW);Tdr=r(T9t,"TFOpenAIGPTModel"),T9t.forEach(t),Mdr=r(Rke," (OpenAI GPT model)"),Rke.forEach(t),Edr=i(D),p7=n(D,"LI",{});var Pke=s(p7);a1e=n(Pke,"STRONG",{});var M9t=s(a1e);Cdr=r(M9t,"pegasus"),M9t.forEach(t),wdr=r(Pke," \u2014 "),sW=n(Pke,"A",{href:!0});var E9t=s(sW);Adr=r(E9t,"TFPegasusModel"),E9t.forEach(t),ydr=r(Pke," (Pegasus model)"),Pke.forEach(t),Ldr=i(D),_7=n(D,"LI",{});var Bke=s(_7);n1e=n(Bke,"STRONG",{});var C9t=s(n1e);xdr=r(C9t,"rembert"),C9t.forEach(t),$dr=r(Bke," \u2014 "),lW=n(Bke,"A",{href:!0});var w9t=s(lW);kdr=r(w9t,"TFRemBertModel"),w9t.forEach(t),Sdr=r(Bke," (RemBERT model)"),Bke.forEach(t),Rdr=i(D),u7=n(D,"LI",{});var Ike=s(u7);s1e=n(Ike,"STRONG",{});var A9t=s(s1e);Pdr=r(A9t,"roberta"),A9t.forEach(t),Bdr=r(Ike," \u2014 "),iW=n(Ike,"A",{href:!0});var y9t=s(iW);Idr=r(y9t,"TFRobertaModel"),y9t.forEach(t),qdr=r(Ike," (RoBERTa model)"),Ike.forEach(t),Ndr=i(D),b7=n(D,"LI",{});var qke=s(b7);l1e=n(qke,"STRONG",{});var L9t=s(l1e);jdr=r(L9t,"roformer"),L9t.forEach(t),Ddr=r(qke," \u2014 "),dW=n(qke,"A",{href:!0});var x9t=s(dW);Gdr=r(x9t,"TFRoFormerModel"),x9t.forEach(t),Odr=r(qke," (RoFormer model)"),qke.forEach(t),Vdr=i(D),v7=n(D,"LI",{});var Nke=s(v7);i1e=n(Nke,"STRONG",{});var $9t=s(i1e);Xdr=r($9t,"speech_to_text"),$9t.forEach(t),zdr=r(Nke," \u2014 "),cW=n(Nke,"A",{href:!0});var k9t=s(cW);Wdr=r(k9t,"TFSpeech2TextModel"),k9t.forEach(t),Qdr=r(Nke," (Speech2Text model)"),Nke.forEach(t),Hdr=i(D),F7=n(D,"LI",{});var jke=s(F7);d1e=n(jke,"STRONG",{});var S9t=s(d1e);Udr=r(S9t,"swin"),S9t.forEach(t),Jdr=r(jke," \u2014 "),fW=n(jke,"A",{href:!0});var R9t=s(fW);Ydr=r(R9t,"TFSwinModel"),R9t.forEach(t),Kdr=r(jke," (Swin model)"),jke.forEach(t),Zdr=i(D),T7=n(D,"LI",{});var Dke=s(T7);c1e=n(Dke,"STRONG",{});var P9t=s(c1e);ecr=r(P9t,"t5"),P9t.forEach(t),ocr=r(Dke," \u2014 "),mW=n(Dke,"A",{href:!0});var B9t=s(mW);rcr=r(B9t,"TFT5Model"),B9t.forEach(t),tcr=r(Dke," (T5 model)"),Dke.forEach(t),acr=i(D),M7=n(D,"LI",{});var Gke=s(M7);f1e=n(Gke,"STRONG",{});var I9t=s(f1e);ncr=r(I9t,"tapas"),I9t.forEach(t),scr=r(Gke," \u2014 "),gW=n(Gke,"A",{href:!0});var q9t=s(gW);lcr=r(q9t,"TFTapasModel"),q9t.forEach(t),icr=r(Gke," (TAPAS model)"),Gke.forEach(t),dcr=i(D),E7=n(D,"LI",{});var Oke=s(E7);m1e=n(Oke,"STRONG",{});var N9t=s(m1e);ccr=r(N9t,"transfo-xl"),N9t.forEach(t),fcr=r(Oke," \u2014 "),hW=n(Oke,"A",{href:!0});var j9t=s(hW);mcr=r(j9t,"TFTransfoXLModel"),j9t.forEach(t),gcr=r(Oke," (Transformer-XL model)"),Oke.forEach(t),hcr=i(D),C7=n(D,"LI",{});var Vke=s(C7);g1e=n(Vke,"STRONG",{});var D9t=s(g1e);pcr=r(D9t,"vit"),D9t.forEach(t),_cr=r(Vke," \u2014 "),pW=n(Vke,"A",{href:!0});var G9t=s(pW);ucr=r(G9t,"TFViTModel"),G9t.forEach(t),bcr=r(Vke," (ViT model)"),Vke.forEach(t),vcr=i(D),w7=n(D,"LI",{});var Xke=s(w7);h1e=n(Xke,"STRONG",{});var O9t=s(h1e);Fcr=r(O9t,"vit_mae"),O9t.forEach(t),Tcr=r(Xke," \u2014 "),_W=n(Xke,"A",{href:!0});var V9t=s(_W);Mcr=r(V9t,"TFViTMAEModel"),V9t.forEach(t),Ecr=r(Xke," (ViTMAE model)"),Xke.forEach(t),Ccr=i(D),A7=n(D,"LI",{});var zke=s(A7);p1e=n(zke,"STRONG",{});var X9t=s(p1e);wcr=r(X9t,"wav2vec2"),X9t.forEach(t),Acr=r(zke," \u2014 "),uW=n(zke,"A",{href:!0});var z9t=s(uW);ycr=r(z9t,"TFWav2Vec2Model"),z9t.forEach(t),Lcr=r(zke," (Wav2Vec2 model)"),zke.forEach(t),xcr=i(D),y7=n(D,"LI",{});var Wke=s(y7);_1e=n(Wke,"STRONG",{});var W9t=s(_1e);$cr=r(W9t,"xlm"),W9t.forEach(t),kcr=r(Wke," \u2014 "),bW=n(Wke,"A",{href:!0});var Q9t=s(bW);Scr=r(Q9t,"TFXLMModel"),Q9t.forEach(t),Rcr=r(Wke," (XLM model)"),Wke.forEach(t),Pcr=i(D),L7=n(D,"LI",{});var Qke=s(L7);u1e=n(Qke,"STRONG",{});var H9t=s(u1e);Bcr=r(H9t,"xlm-roberta"),H9t.forEach(t),Icr=r(Qke," \u2014 "),vW=n(Qke,"A",{href:!0});var U9t=s(vW);qcr=r(U9t,"TFXLMRobertaModel"),U9t.forEach(t),Ncr=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),jcr=i(D),x7=n(D,"LI",{});var Hke=s(x7);b1e=n(Hke,"STRONG",{});var J9t=s(b1e);Dcr=r(J9t,"xlnet"),J9t.forEach(t),Gcr=r(Hke," \u2014 "),FW=n(Hke,"A",{href:!0});var Y9t=s(FW);Ocr=r(Y9t,"TFXLNetModel"),Y9t.forEach(t),Vcr=r(Hke," (XLNet model)"),Hke.forEach(t),D.forEach(t),Xcr=i(gl),T($7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Hqe=i(f),Vd=n(f,"H2",{class:!0});var eDe=s(Vd);k7=n(eDe,"A",{id:!0,class:!0,href:!0});var K9t=s(k7);v1e=n(K9t,"SPAN",{});var Z9t=s(v1e);T(Yy.$$.fragment,Z9t),Z9t.forEach(t),K9t.forEach(t),zcr=i(eDe),F1e=n(eDe,"SPAN",{});var ebt=s(F1e);Wcr=r(ebt,"TFAutoModelForPreTraining"),ebt.forEach(t),eDe.forEach(t),Uqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(Ky.$$.fragment,hl),Qcr=i(hl),Xd=n(hl,"P",{});var $Z=s(Xd);Hcr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TW=n($Z,"A",{href:!0});var obt=s(TW);Ucr=r(obt,"from_pretrained()"),obt.forEach(t),Jcr=r($Z," class method or the "),MW=n($Z,"A",{href:!0});var rbt=s(MW);Ycr=r(rbt,"from_config()"),rbt.forEach(t),Kcr=r($Z,` class
method.`),$Z.forEach(t),Zcr=i(hl),Zy=n(hl,"P",{});var oDe=s(Zy);efr=r(oDe,"This class cannot be instantiated directly using "),T1e=n(oDe,"CODE",{});var tbt=s(T1e);ofr=r(tbt,"__init__()"),tbt.forEach(t),rfr=r(oDe," (throws an error)."),oDe.forEach(t),tfr=i(hl),Lt=n(hl,"DIV",{class:!0});var c0=s(Lt);T(eL.$$.fragment,c0),afr=i(c0),M1e=n(c0,"P",{});var abt=s(M1e);nfr=r(abt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),abt.forEach(t),sfr=i(c0),zd=n(c0,"P",{});var kZ=s(zd);lfr=r(kZ,`Note:
Loading a model from its configuration file does `),E1e=n(kZ,"STRONG",{});var nbt=s(E1e);ifr=r(nbt,"not"),nbt.forEach(t),dfr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(kZ,"A",{href:!0});var sbt=s(EW);cfr=r(sbt,"from_pretrained()"),sbt.forEach(t),ffr=r(kZ," to load the model weights."),kZ.forEach(t),mfr=i(c0),T(S7.$$.fragment,c0),c0.forEach(t),gfr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(oL.$$.fragment,pl),hfr=i(pl),C1e=n(pl,"P",{});var lbt=s(C1e);pfr=r(lbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lbt.forEach(t),_fr=i(pl),Za=n(pl,"P",{});var f0=s(Za);ufr=r(f0,"The model class to instantiate is selected based on the "),w1e=n(f0,"CODE",{});var ibt=s(w1e);bfr=r(ibt,"model_type"),ibt.forEach(t),vfr=r(f0,` property of the config object (either
passed as an argument or loaded from `),A1e=n(f0,"CODE",{});var dbt=s(A1e);Ffr=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),Tfr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(f0,"CODE",{});var cbt=s(y1e);Mfr=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),Efr=r(f0,":"),f0.forEach(t),Cfr=i(pl),se=n(pl,"UL",{});var le=s(se);R7=n(le,"LI",{});var Uke=s(R7);L1e=n(Uke,"STRONG",{});var fbt=s(L1e);wfr=r(fbt,"albert"),fbt.forEach(t),Afr=r(Uke," \u2014 "),CW=n(Uke,"A",{href:!0});var mbt=s(CW);yfr=r(mbt,"TFAlbertForPreTraining"),mbt.forEach(t),Lfr=r(Uke," (ALBERT model)"),Uke.forEach(t),xfr=i(le),P7=n(le,"LI",{});var Jke=s(P7);x1e=n(Jke,"STRONG",{});var gbt=s(x1e);$fr=r(gbt,"bart"),gbt.forEach(t),kfr=r(Jke," \u2014 "),wW=n(Jke,"A",{href:!0});var hbt=s(wW);Sfr=r(hbt,"TFBartForConditionalGeneration"),hbt.forEach(t),Rfr=r(Jke," (BART model)"),Jke.forEach(t),Pfr=i(le),B7=n(le,"LI",{});var Yke=s(B7);$1e=n(Yke,"STRONG",{});var pbt=s($1e);Bfr=r(pbt,"bert"),pbt.forEach(t),Ifr=r(Yke," \u2014 "),AW=n(Yke,"A",{href:!0});var _bt=s(AW);qfr=r(_bt,"TFBertForPreTraining"),_bt.forEach(t),Nfr=r(Yke," (BERT model)"),Yke.forEach(t),jfr=i(le),I7=n(le,"LI",{});var Kke=s(I7);k1e=n(Kke,"STRONG",{});var ubt=s(k1e);Dfr=r(ubt,"camembert"),ubt.forEach(t),Gfr=r(Kke," \u2014 "),yW=n(Kke,"A",{href:!0});var bbt=s(yW);Ofr=r(bbt,"TFCamembertForMaskedLM"),bbt.forEach(t),Vfr=r(Kke," (CamemBERT model)"),Kke.forEach(t),Xfr=i(le),q7=n(le,"LI",{});var Zke=s(q7);S1e=n(Zke,"STRONG",{});var vbt=s(S1e);zfr=r(vbt,"ctrl"),vbt.forEach(t),Wfr=r(Zke," \u2014 "),LW=n(Zke,"A",{href:!0});var Fbt=s(LW);Qfr=r(Fbt,"TFCTRLLMHeadModel"),Fbt.forEach(t),Hfr=r(Zke," (CTRL model)"),Zke.forEach(t),Ufr=i(le),N7=n(le,"LI",{});var eSe=s(N7);R1e=n(eSe,"STRONG",{});var Tbt=s(R1e);Jfr=r(Tbt,"distilbert"),Tbt.forEach(t),Yfr=r(eSe," \u2014 "),xW=n(eSe,"A",{href:!0});var Mbt=s(xW);Kfr=r(Mbt,"TFDistilBertForMaskedLM"),Mbt.forEach(t),Zfr=r(eSe," (DistilBERT model)"),eSe.forEach(t),emr=i(le),j7=n(le,"LI",{});var oSe=s(j7);P1e=n(oSe,"STRONG",{});var Ebt=s(P1e);omr=r(Ebt,"electra"),Ebt.forEach(t),rmr=r(oSe," \u2014 "),$W=n(oSe,"A",{href:!0});var Cbt=s($W);tmr=r(Cbt,"TFElectraForPreTraining"),Cbt.forEach(t),amr=r(oSe," (ELECTRA model)"),oSe.forEach(t),nmr=i(le),D7=n(le,"LI",{});var rSe=s(D7);B1e=n(rSe,"STRONG",{});var wbt=s(B1e);smr=r(wbt,"flaubert"),wbt.forEach(t),lmr=r(rSe," \u2014 "),kW=n(rSe,"A",{href:!0});var Abt=s(kW);imr=r(Abt,"TFFlaubertWithLMHeadModel"),Abt.forEach(t),dmr=r(rSe," (FlauBERT model)"),rSe.forEach(t),cmr=i(le),G7=n(le,"LI",{});var tSe=s(G7);I1e=n(tSe,"STRONG",{});var ybt=s(I1e);fmr=r(ybt,"funnel"),ybt.forEach(t),mmr=r(tSe," \u2014 "),SW=n(tSe,"A",{href:!0});var Lbt=s(SW);gmr=r(Lbt,"TFFunnelForPreTraining"),Lbt.forEach(t),hmr=r(tSe," (Funnel Transformer model)"),tSe.forEach(t),pmr=i(le),O7=n(le,"LI",{});var aSe=s(O7);q1e=n(aSe,"STRONG",{});var xbt=s(q1e);_mr=r(xbt,"gpt2"),xbt.forEach(t),umr=r(aSe," \u2014 "),RW=n(aSe,"A",{href:!0});var $bt=s(RW);bmr=r($bt,"TFGPT2LMHeadModel"),$bt.forEach(t),vmr=r(aSe," (OpenAI GPT-2 model)"),aSe.forEach(t),Fmr=i(le),V7=n(le,"LI",{});var nSe=s(V7);N1e=n(nSe,"STRONG",{});var kbt=s(N1e);Tmr=r(kbt,"layoutlm"),kbt.forEach(t),Mmr=r(nSe," \u2014 "),PW=n(nSe,"A",{href:!0});var Sbt=s(PW);Emr=r(Sbt,"TFLayoutLMForMaskedLM"),Sbt.forEach(t),Cmr=r(nSe," (LayoutLM model)"),nSe.forEach(t),wmr=i(le),X7=n(le,"LI",{});var sSe=s(X7);j1e=n(sSe,"STRONG",{});var Rbt=s(j1e);Amr=r(Rbt,"lxmert"),Rbt.forEach(t),ymr=r(sSe," \u2014 "),BW=n(sSe,"A",{href:!0});var Pbt=s(BW);Lmr=r(Pbt,"TFLxmertForPreTraining"),Pbt.forEach(t),xmr=r(sSe," (LXMERT model)"),sSe.forEach(t),$mr=i(le),z7=n(le,"LI",{});var lSe=s(z7);D1e=n(lSe,"STRONG",{});var Bbt=s(D1e);kmr=r(Bbt,"mobilebert"),Bbt.forEach(t),Smr=r(lSe," \u2014 "),IW=n(lSe,"A",{href:!0});var Ibt=s(IW);Rmr=r(Ibt,"TFMobileBertForPreTraining"),Ibt.forEach(t),Pmr=r(lSe," (MobileBERT model)"),lSe.forEach(t),Bmr=i(le),W7=n(le,"LI",{});var iSe=s(W7);G1e=n(iSe,"STRONG",{});var qbt=s(G1e);Imr=r(qbt,"mpnet"),qbt.forEach(t),qmr=r(iSe," \u2014 "),qW=n(iSe,"A",{href:!0});var Nbt=s(qW);Nmr=r(Nbt,"TFMPNetForMaskedLM"),Nbt.forEach(t),jmr=r(iSe," (MPNet model)"),iSe.forEach(t),Dmr=i(le),Q7=n(le,"LI",{});var dSe=s(Q7);O1e=n(dSe,"STRONG",{});var jbt=s(O1e);Gmr=r(jbt,"openai-gpt"),jbt.forEach(t),Omr=r(dSe," \u2014 "),NW=n(dSe,"A",{href:!0});var Dbt=s(NW);Vmr=r(Dbt,"TFOpenAIGPTLMHeadModel"),Dbt.forEach(t),Xmr=r(dSe," (OpenAI GPT model)"),dSe.forEach(t),zmr=i(le),H7=n(le,"LI",{});var cSe=s(H7);V1e=n(cSe,"STRONG",{});var Gbt=s(V1e);Wmr=r(Gbt,"roberta"),Gbt.forEach(t),Qmr=r(cSe," \u2014 "),jW=n(cSe,"A",{href:!0});var Obt=s(jW);Hmr=r(Obt,"TFRobertaForMaskedLM"),Obt.forEach(t),Umr=r(cSe," (RoBERTa model)"),cSe.forEach(t),Jmr=i(le),U7=n(le,"LI",{});var fSe=s(U7);X1e=n(fSe,"STRONG",{});var Vbt=s(X1e);Ymr=r(Vbt,"t5"),Vbt.forEach(t),Kmr=r(fSe," \u2014 "),DW=n(fSe,"A",{href:!0});var Xbt=s(DW);Zmr=r(Xbt,"TFT5ForConditionalGeneration"),Xbt.forEach(t),egr=r(fSe," (T5 model)"),fSe.forEach(t),ogr=i(le),J7=n(le,"LI",{});var mSe=s(J7);z1e=n(mSe,"STRONG",{});var zbt=s(z1e);rgr=r(zbt,"tapas"),zbt.forEach(t),tgr=r(mSe," \u2014 "),GW=n(mSe,"A",{href:!0});var Wbt=s(GW);agr=r(Wbt,"TFTapasForMaskedLM"),Wbt.forEach(t),ngr=r(mSe," (TAPAS model)"),mSe.forEach(t),sgr=i(le),Y7=n(le,"LI",{});var gSe=s(Y7);W1e=n(gSe,"STRONG",{});var Qbt=s(W1e);lgr=r(Qbt,"transfo-xl"),Qbt.forEach(t),igr=r(gSe," \u2014 "),OW=n(gSe,"A",{href:!0});var Hbt=s(OW);dgr=r(Hbt,"TFTransfoXLLMHeadModel"),Hbt.forEach(t),cgr=r(gSe," (Transformer-XL model)"),gSe.forEach(t),fgr=i(le),K7=n(le,"LI",{});var hSe=s(K7);Q1e=n(hSe,"STRONG",{});var Ubt=s(Q1e);mgr=r(Ubt,"vit_mae"),Ubt.forEach(t),ggr=r(hSe," \u2014 "),VW=n(hSe,"A",{href:!0});var Jbt=s(VW);hgr=r(Jbt,"TFViTMAEForPreTraining"),Jbt.forEach(t),pgr=r(hSe," (ViTMAE model)"),hSe.forEach(t),_gr=i(le),Z7=n(le,"LI",{});var pSe=s(Z7);H1e=n(pSe,"STRONG",{});var Ybt=s(H1e);ugr=r(Ybt,"xlm"),Ybt.forEach(t),bgr=r(pSe," \u2014 "),XW=n(pSe,"A",{href:!0});var Kbt=s(XW);vgr=r(Kbt,"TFXLMWithLMHeadModel"),Kbt.forEach(t),Fgr=r(pSe," (XLM model)"),pSe.forEach(t),Tgr=i(le),eM=n(le,"LI",{});var _Se=s(eM);U1e=n(_Se,"STRONG",{});var Zbt=s(U1e);Mgr=r(Zbt,"xlm-roberta"),Zbt.forEach(t),Egr=r(_Se," \u2014 "),zW=n(_Se,"A",{href:!0});var evt=s(zW);Cgr=r(evt,"TFXLMRobertaForMaskedLM"),evt.forEach(t),wgr=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),Agr=i(le),oM=n(le,"LI",{});var uSe=s(oM);J1e=n(uSe,"STRONG",{});var ovt=s(J1e);ygr=r(ovt,"xlnet"),ovt.forEach(t),Lgr=r(uSe," \u2014 "),WW=n(uSe,"A",{href:!0});var rvt=s(WW);xgr=r(rvt,"TFXLNetLMHeadModel"),rvt.forEach(t),$gr=r(uSe," (XLNet model)"),uSe.forEach(t),le.forEach(t),kgr=i(pl),T(rM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Jqe=i(f),Wd=n(f,"H2",{class:!0});var rDe=s(Wd);tM=n(rDe,"A",{id:!0,class:!0,href:!0});var tvt=s(tM);Y1e=n(tvt,"SPAN",{});var avt=s(Y1e);T(rL.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),Sgr=i(rDe),K1e=n(rDe,"SPAN",{});var nvt=s(K1e);Rgr=r(nvt,"TFAutoModelForCausalLM"),nvt.forEach(t),rDe.forEach(t),Yqe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(tL.$$.fragment,_l),Pgr=i(_l),Qd=n(_l,"P",{});var SZ=s(Qd);Bgr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QW=n(SZ,"A",{href:!0});var svt=s(QW);Igr=r(svt,"from_pretrained()"),svt.forEach(t),qgr=r(SZ," class method or the "),HW=n(SZ,"A",{href:!0});var lvt=s(HW);Ngr=r(lvt,"from_config()"),lvt.forEach(t),jgr=r(SZ,` class
method.`),SZ.forEach(t),Dgr=i(_l),aL=n(_l,"P",{});var tDe=s(aL);Ggr=r(tDe,"This class cannot be instantiated directly using "),Z1e=n(tDe,"CODE",{});var ivt=s(Z1e);Ogr=r(ivt,"__init__()"),ivt.forEach(t),Vgr=r(tDe," (throws an error)."),tDe.forEach(t),Xgr=i(_l),xt=n(_l,"DIV",{class:!0});var m0=s(xt);T(nL.$$.fragment,m0),zgr=i(m0),e9e=n(m0,"P",{});var dvt=s(e9e);Wgr=r(dvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dvt.forEach(t),Qgr=i(m0),Hd=n(m0,"P",{});var RZ=s(Hd);Hgr=r(RZ,`Note:
Loading a model from its configuration file does `),o9e=n(RZ,"STRONG",{});var cvt=s(o9e);Ugr=r(cvt,"not"),cvt.forEach(t),Jgr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(RZ,"A",{href:!0});var fvt=s(UW);Ygr=r(fvt,"from_pretrained()"),fvt.forEach(t),Kgr=r(RZ," to load the model weights."),RZ.forEach(t),Zgr=i(m0),T(aM.$$.fragment,m0),m0.forEach(t),ehr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(sL.$$.fragment,ul),ohr=i(ul),r9e=n(ul,"P",{});var mvt=s(r9e);rhr=r(mvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mvt.forEach(t),thr=i(ul),en=n(ul,"P",{});var g0=s(en);ahr=r(g0,"The model class to instantiate is selected based on the "),t9e=n(g0,"CODE",{});var gvt=s(t9e);nhr=r(gvt,"model_type"),gvt.forEach(t),shr=r(g0,` property of the config object (either
passed as an argument or loaded from `),a9e=n(g0,"CODE",{});var hvt=s(a9e);lhr=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),ihr=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=n(g0,"CODE",{});var pvt=s(n9e);dhr=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),chr=r(g0,":"),g0.forEach(t),fhr=i(ul),Me=n(ul,"UL",{});var Ce=s(Me);nM=n(Ce,"LI",{});var bSe=s(nM);s9e=n(bSe,"STRONG",{});var _vt=s(s9e);mhr=r(_vt,"bert"),_vt.forEach(t),ghr=r(bSe," \u2014 "),JW=n(bSe,"A",{href:!0});var uvt=s(JW);hhr=r(uvt,"TFBertLMHeadModel"),uvt.forEach(t),phr=r(bSe," (BERT model)"),bSe.forEach(t),_hr=i(Ce),sM=n(Ce,"LI",{});var vSe=s(sM);l9e=n(vSe,"STRONG",{});var bvt=s(l9e);uhr=r(bvt,"camembert"),bvt.forEach(t),bhr=r(vSe," \u2014 "),YW=n(vSe,"A",{href:!0});var vvt=s(YW);vhr=r(vvt,"TFCamembertForCausalLM"),vvt.forEach(t),Fhr=r(vSe," (CamemBERT model)"),vSe.forEach(t),Thr=i(Ce),lM=n(Ce,"LI",{});var FSe=s(lM);i9e=n(FSe,"STRONG",{});var Fvt=s(i9e);Mhr=r(Fvt,"ctrl"),Fvt.forEach(t),Ehr=r(FSe," \u2014 "),KW=n(FSe,"A",{href:!0});var Tvt=s(KW);Chr=r(Tvt,"TFCTRLLMHeadModel"),Tvt.forEach(t),whr=r(FSe," (CTRL model)"),FSe.forEach(t),Ahr=i(Ce),iM=n(Ce,"LI",{});var TSe=s(iM);d9e=n(TSe,"STRONG",{});var Mvt=s(d9e);yhr=r(Mvt,"gpt2"),Mvt.forEach(t),Lhr=r(TSe," \u2014 "),ZW=n(TSe,"A",{href:!0});var Evt=s(ZW);xhr=r(Evt,"TFGPT2LMHeadModel"),Evt.forEach(t),$hr=r(TSe," (OpenAI GPT-2 model)"),TSe.forEach(t),khr=i(Ce),dM=n(Ce,"LI",{});var MSe=s(dM);c9e=n(MSe,"STRONG",{});var Cvt=s(c9e);Shr=r(Cvt,"gptj"),Cvt.forEach(t),Rhr=r(MSe," \u2014 "),eQ=n(MSe,"A",{href:!0});var wvt=s(eQ);Phr=r(wvt,"TFGPTJForCausalLM"),wvt.forEach(t),Bhr=r(MSe," (GPT-J model)"),MSe.forEach(t),Ihr=i(Ce),cM=n(Ce,"LI",{});var ESe=s(cM);f9e=n(ESe,"STRONG",{});var Avt=s(f9e);qhr=r(Avt,"openai-gpt"),Avt.forEach(t),Nhr=r(ESe," \u2014 "),oQ=n(ESe,"A",{href:!0});var yvt=s(oQ);jhr=r(yvt,"TFOpenAIGPTLMHeadModel"),yvt.forEach(t),Dhr=r(ESe," (OpenAI GPT model)"),ESe.forEach(t),Ghr=i(Ce),fM=n(Ce,"LI",{});var CSe=s(fM);m9e=n(CSe,"STRONG",{});var Lvt=s(m9e);Ohr=r(Lvt,"rembert"),Lvt.forEach(t),Vhr=r(CSe," \u2014 "),rQ=n(CSe,"A",{href:!0});var xvt=s(rQ);Xhr=r(xvt,"TFRemBertForCausalLM"),xvt.forEach(t),zhr=r(CSe," (RemBERT model)"),CSe.forEach(t),Whr=i(Ce),mM=n(Ce,"LI",{});var wSe=s(mM);g9e=n(wSe,"STRONG",{});var $vt=s(g9e);Qhr=r($vt,"roberta"),$vt.forEach(t),Hhr=r(wSe," \u2014 "),tQ=n(wSe,"A",{href:!0});var kvt=s(tQ);Uhr=r(kvt,"TFRobertaForCausalLM"),kvt.forEach(t),Jhr=r(wSe," (RoBERTa model)"),wSe.forEach(t),Yhr=i(Ce),gM=n(Ce,"LI",{});var ASe=s(gM);h9e=n(ASe,"STRONG",{});var Svt=s(h9e);Khr=r(Svt,"roformer"),Svt.forEach(t),Zhr=r(ASe," \u2014 "),aQ=n(ASe,"A",{href:!0});var Rvt=s(aQ);epr=r(Rvt,"TFRoFormerForCausalLM"),Rvt.forEach(t),opr=r(ASe," (RoFormer model)"),ASe.forEach(t),rpr=i(Ce),hM=n(Ce,"LI",{});var ySe=s(hM);p9e=n(ySe,"STRONG",{});var Pvt=s(p9e);tpr=r(Pvt,"transfo-xl"),Pvt.forEach(t),apr=r(ySe," \u2014 "),nQ=n(ySe,"A",{href:!0});var Bvt=s(nQ);npr=r(Bvt,"TFTransfoXLLMHeadModel"),Bvt.forEach(t),spr=r(ySe," (Transformer-XL model)"),ySe.forEach(t),lpr=i(Ce),pM=n(Ce,"LI",{});var LSe=s(pM);_9e=n(LSe,"STRONG",{});var Ivt=s(_9e);ipr=r(Ivt,"xlm"),Ivt.forEach(t),dpr=r(LSe," \u2014 "),sQ=n(LSe,"A",{href:!0});var qvt=s(sQ);cpr=r(qvt,"TFXLMWithLMHeadModel"),qvt.forEach(t),fpr=r(LSe," (XLM model)"),LSe.forEach(t),mpr=i(Ce),_M=n(Ce,"LI",{});var xSe=s(_M);u9e=n(xSe,"STRONG",{});var Nvt=s(u9e);gpr=r(Nvt,"xlnet"),Nvt.forEach(t),hpr=r(xSe," \u2014 "),lQ=n(xSe,"A",{href:!0});var jvt=s(lQ);ppr=r(jvt,"TFXLNetLMHeadModel"),jvt.forEach(t),_pr=r(xSe," (XLNet model)"),xSe.forEach(t),Ce.forEach(t),upr=i(ul),T(uM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Kqe=i(f),Ud=n(f,"H2",{class:!0});var aDe=s(Ud);bM=n(aDe,"A",{id:!0,class:!0,href:!0});var Dvt=s(bM);b9e=n(Dvt,"SPAN",{});var Gvt=s(b9e);T(lL.$$.fragment,Gvt),Gvt.forEach(t),Dvt.forEach(t),bpr=i(aDe),v9e=n(aDe,"SPAN",{});var Ovt=s(v9e);vpr=r(Ovt,"TFAutoModelForImageClassification"),Ovt.forEach(t),aDe.forEach(t),Zqe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(iL.$$.fragment,bl),Fpr=i(bl),Jd=n(bl,"P",{});var PZ=s(Jd);Tpr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iQ=n(PZ,"A",{href:!0});var Vvt=s(iQ);Mpr=r(Vvt,"from_pretrained()"),Vvt.forEach(t),Epr=r(PZ," class method or the "),dQ=n(PZ,"A",{href:!0});var Xvt=s(dQ);Cpr=r(Xvt,"from_config()"),Xvt.forEach(t),wpr=r(PZ,` class
method.`),PZ.forEach(t),Apr=i(bl),dL=n(bl,"P",{});var nDe=s(dL);ypr=r(nDe,"This class cannot be instantiated directly using "),F9e=n(nDe,"CODE",{});var zvt=s(F9e);Lpr=r(zvt,"__init__()"),zvt.forEach(t),xpr=r(nDe," (throws an error)."),nDe.forEach(t),$pr=i(bl),$t=n(bl,"DIV",{class:!0});var h0=s($t);T(cL.$$.fragment,h0),kpr=i(h0),T9e=n(h0,"P",{});var Wvt=s(T9e);Spr=r(Wvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wvt.forEach(t),Rpr=i(h0),Yd=n(h0,"P",{});var BZ=s(Yd);Ppr=r(BZ,`Note:
Loading a model from its configuration file does `),M9e=n(BZ,"STRONG",{});var Qvt=s(M9e);Bpr=r(Qvt,"not"),Qvt.forEach(t),Ipr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(BZ,"A",{href:!0});var Hvt=s(cQ);qpr=r(Hvt,"from_pretrained()"),Hvt.forEach(t),Npr=r(BZ," to load the model weights."),BZ.forEach(t),jpr=i(h0),T(vM.$$.fragment,h0),h0.forEach(t),Dpr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(fL.$$.fragment,vl),Gpr=i(vl),E9e=n(vl,"P",{});var Uvt=s(E9e);Opr=r(Uvt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uvt.forEach(t),Vpr=i(vl),on=n(vl,"P",{});var p0=s(on);Xpr=r(p0,"The model class to instantiate is selected based on the "),C9e=n(p0,"CODE",{});var Jvt=s(C9e);zpr=r(Jvt,"model_type"),Jvt.forEach(t),Wpr=r(p0,` property of the config object (either
passed as an argument or loaded from `),w9e=n(p0,"CODE",{});var Yvt=s(w9e);Qpr=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),Hpr=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=n(p0,"CODE",{});var Kvt=s(A9e);Upr=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),Jpr=r(p0,":"),p0.forEach(t),Ypr=i(vl),rn=n(vl,"UL",{});var _0=s(rn);FM=n(_0,"LI",{});var $Se=s(FM);y9e=n($Se,"STRONG",{});var Zvt=s(y9e);Kpr=r(Zvt,"convnext"),Zvt.forEach(t),Zpr=r($Se," \u2014 "),fQ=n($Se,"A",{href:!0});var eFt=s(fQ);e_r=r(eFt,"TFConvNextForImageClassification"),eFt.forEach(t),o_r=r($Se," (ConvNext model)"),$Se.forEach(t),r_r=i(_0),TM=n(_0,"LI",{});var kSe=s(TM);L9e=n(kSe,"STRONG",{});var oFt=s(L9e);t_r=r(oFt,"data2vec-vision"),oFt.forEach(t),a_r=r(kSe," \u2014 "),mQ=n(kSe,"A",{href:!0});var rFt=s(mQ);n_r=r(rFt,"TFData2VecVisionForImageClassification"),rFt.forEach(t),s_r=r(kSe," (Data2VecVision model)"),kSe.forEach(t),l_r=i(_0),MM=n(_0,"LI",{});var SSe=s(MM);x9e=n(SSe,"STRONG",{});var tFt=s(x9e);i_r=r(tFt,"swin"),tFt.forEach(t),d_r=r(SSe," \u2014 "),gQ=n(SSe,"A",{href:!0});var aFt=s(gQ);c_r=r(aFt,"TFSwinForImageClassification"),aFt.forEach(t),f_r=r(SSe," (Swin model)"),SSe.forEach(t),m_r=i(_0),EM=n(_0,"LI",{});var RSe=s(EM);$9e=n(RSe,"STRONG",{});var nFt=s($9e);g_r=r(nFt,"vit"),nFt.forEach(t),h_r=r(RSe," \u2014 "),hQ=n(RSe,"A",{href:!0});var sFt=s(hQ);p_r=r(sFt,"TFViTForImageClassification"),sFt.forEach(t),__r=r(RSe," (ViT model)"),RSe.forEach(t),_0.forEach(t),u_r=i(vl),T(CM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),eNe=i(f),Kd=n(f,"H2",{class:!0});var sDe=s(Kd);wM=n(sDe,"A",{id:!0,class:!0,href:!0});var lFt=s(wM);k9e=n(lFt,"SPAN",{});var iFt=s(k9e);T(mL.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),b_r=i(sDe),S9e=n(sDe,"SPAN",{});var dFt=s(S9e);v_r=r(dFt,"TFAutoModelForMaskedLM"),dFt.forEach(t),sDe.forEach(t),oNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(gL.$$.fragment,Fl),F_r=i(Fl),Zd=n(Fl,"P",{});var IZ=s(Zd);T_r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pQ=n(IZ,"A",{href:!0});var cFt=s(pQ);M_r=r(cFt,"from_pretrained()"),cFt.forEach(t),E_r=r(IZ," class method or the "),_Q=n(IZ,"A",{href:!0});var fFt=s(_Q);C_r=r(fFt,"from_config()"),fFt.forEach(t),w_r=r(IZ,` class
method.`),IZ.forEach(t),A_r=i(Fl),hL=n(Fl,"P",{});var lDe=s(hL);y_r=r(lDe,"This class cannot be instantiated directly using "),R9e=n(lDe,"CODE",{});var mFt=s(R9e);L_r=r(mFt,"__init__()"),mFt.forEach(t),x_r=r(lDe," (throws an error)."),lDe.forEach(t),$_r=i(Fl),kt=n(Fl,"DIV",{class:!0});var u0=s(kt);T(pL.$$.fragment,u0),k_r=i(u0),P9e=n(u0,"P",{});var gFt=s(P9e);S_r=r(gFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gFt.forEach(t),R_r=i(u0),ec=n(u0,"P",{});var qZ=s(ec);P_r=r(qZ,`Note:
Loading a model from its configuration file does `),B9e=n(qZ,"STRONG",{});var hFt=s(B9e);B_r=r(hFt,"not"),hFt.forEach(t),I_r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(qZ,"A",{href:!0});var pFt=s(uQ);q_r=r(pFt,"from_pretrained()"),pFt.forEach(t),N_r=r(qZ," to load the model weights."),qZ.forEach(t),j_r=i(u0),T(AM.$$.fragment,u0),u0.forEach(t),D_r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(_L.$$.fragment,Tl),G_r=i(Tl),I9e=n(Tl,"P",{});var _Ft=s(I9e);O_r=r(_Ft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Ft.forEach(t),V_r=i(Tl),tn=n(Tl,"P",{});var b0=s(tn);X_r=r(b0,"The model class to instantiate is selected based on the "),q9e=n(b0,"CODE",{});var uFt=s(q9e);z_r=r(uFt,"model_type"),uFt.forEach(t),W_r=r(b0,` property of the config object (either
passed as an argument or loaded from `),N9e=n(b0,"CODE",{});var bFt=s(N9e);Q_r=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),H_r=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=n(b0,"CODE",{});var vFt=s(j9e);U_r=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),J_r=r(b0,":"),b0.forEach(t),Y_r=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);yM=n(fe,"LI",{});var PSe=s(yM);D9e=n(PSe,"STRONG",{});var FFt=s(D9e);K_r=r(FFt,"albert"),FFt.forEach(t),Z_r=r(PSe," \u2014 "),bQ=n(PSe,"A",{href:!0});var TFt=s(bQ);eur=r(TFt,"TFAlbertForMaskedLM"),TFt.forEach(t),our=r(PSe," (ALBERT model)"),PSe.forEach(t),rur=i(fe),LM=n(fe,"LI",{});var BSe=s(LM);G9e=n(BSe,"STRONG",{});var MFt=s(G9e);tur=r(MFt,"bert"),MFt.forEach(t),aur=r(BSe," \u2014 "),vQ=n(BSe,"A",{href:!0});var EFt=s(vQ);nur=r(EFt,"TFBertForMaskedLM"),EFt.forEach(t),sur=r(BSe," (BERT model)"),BSe.forEach(t),lur=i(fe),xM=n(fe,"LI",{});var ISe=s(xM);O9e=n(ISe,"STRONG",{});var CFt=s(O9e);iur=r(CFt,"camembert"),CFt.forEach(t),dur=r(ISe," \u2014 "),FQ=n(ISe,"A",{href:!0});var wFt=s(FQ);cur=r(wFt,"TFCamembertForMaskedLM"),wFt.forEach(t),fur=r(ISe," (CamemBERT model)"),ISe.forEach(t),mur=i(fe),$M=n(fe,"LI",{});var qSe=s($M);V9e=n(qSe,"STRONG",{});var AFt=s(V9e);gur=r(AFt,"convbert"),AFt.forEach(t),hur=r(qSe," \u2014 "),TQ=n(qSe,"A",{href:!0});var yFt=s(TQ);pur=r(yFt,"TFConvBertForMaskedLM"),yFt.forEach(t),_ur=r(qSe," (ConvBERT model)"),qSe.forEach(t),uur=i(fe),kM=n(fe,"LI",{});var NSe=s(kM);X9e=n(NSe,"STRONG",{});var LFt=s(X9e);bur=r(LFt,"deberta"),LFt.forEach(t),vur=r(NSe," \u2014 "),MQ=n(NSe,"A",{href:!0});var xFt=s(MQ);Fur=r(xFt,"TFDebertaForMaskedLM"),xFt.forEach(t),Tur=r(NSe," (DeBERTa model)"),NSe.forEach(t),Mur=i(fe),SM=n(fe,"LI",{});var jSe=s(SM);z9e=n(jSe,"STRONG",{});var $Ft=s(z9e);Eur=r($Ft,"deberta-v2"),$Ft.forEach(t),Cur=r(jSe," \u2014 "),EQ=n(jSe,"A",{href:!0});var kFt=s(EQ);wur=r(kFt,"TFDebertaV2ForMaskedLM"),kFt.forEach(t),Aur=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),yur=i(fe),RM=n(fe,"LI",{});var DSe=s(RM);W9e=n(DSe,"STRONG",{});var SFt=s(W9e);Lur=r(SFt,"distilbert"),SFt.forEach(t),xur=r(DSe," \u2014 "),CQ=n(DSe,"A",{href:!0});var RFt=s(CQ);$ur=r(RFt,"TFDistilBertForMaskedLM"),RFt.forEach(t),kur=r(DSe," (DistilBERT model)"),DSe.forEach(t),Sur=i(fe),PM=n(fe,"LI",{});var GSe=s(PM);Q9e=n(GSe,"STRONG",{});var PFt=s(Q9e);Rur=r(PFt,"electra"),PFt.forEach(t),Pur=r(GSe," \u2014 "),wQ=n(GSe,"A",{href:!0});var BFt=s(wQ);Bur=r(BFt,"TFElectraForMaskedLM"),BFt.forEach(t),Iur=r(GSe," (ELECTRA model)"),GSe.forEach(t),qur=i(fe),BM=n(fe,"LI",{});var OSe=s(BM);H9e=n(OSe,"STRONG",{});var IFt=s(H9e);Nur=r(IFt,"flaubert"),IFt.forEach(t),jur=r(OSe," \u2014 "),AQ=n(OSe,"A",{href:!0});var qFt=s(AQ);Dur=r(qFt,"TFFlaubertWithLMHeadModel"),qFt.forEach(t),Gur=r(OSe," (FlauBERT model)"),OSe.forEach(t),Our=i(fe),IM=n(fe,"LI",{});var VSe=s(IM);U9e=n(VSe,"STRONG",{});var NFt=s(U9e);Vur=r(NFt,"funnel"),NFt.forEach(t),Xur=r(VSe," \u2014 "),yQ=n(VSe,"A",{href:!0});var jFt=s(yQ);zur=r(jFt,"TFFunnelForMaskedLM"),jFt.forEach(t),Wur=r(VSe," (Funnel Transformer model)"),VSe.forEach(t),Qur=i(fe),qM=n(fe,"LI",{});var XSe=s(qM);J9e=n(XSe,"STRONG",{});var DFt=s(J9e);Hur=r(DFt,"layoutlm"),DFt.forEach(t),Uur=r(XSe," \u2014 "),LQ=n(XSe,"A",{href:!0});var GFt=s(LQ);Jur=r(GFt,"TFLayoutLMForMaskedLM"),GFt.forEach(t),Yur=r(XSe," (LayoutLM model)"),XSe.forEach(t),Kur=i(fe),NM=n(fe,"LI",{});var zSe=s(NM);Y9e=n(zSe,"STRONG",{});var OFt=s(Y9e);Zur=r(OFt,"longformer"),OFt.forEach(t),e2r=r(zSe," \u2014 "),xQ=n(zSe,"A",{href:!0});var VFt=s(xQ);o2r=r(VFt,"TFLongformerForMaskedLM"),VFt.forEach(t),r2r=r(zSe," (Longformer model)"),zSe.forEach(t),t2r=i(fe),jM=n(fe,"LI",{});var WSe=s(jM);K9e=n(WSe,"STRONG",{});var XFt=s(K9e);a2r=r(XFt,"mobilebert"),XFt.forEach(t),n2r=r(WSe," \u2014 "),$Q=n(WSe,"A",{href:!0});var zFt=s($Q);s2r=r(zFt,"TFMobileBertForMaskedLM"),zFt.forEach(t),l2r=r(WSe," (MobileBERT model)"),WSe.forEach(t),i2r=i(fe),DM=n(fe,"LI",{});var QSe=s(DM);Z9e=n(QSe,"STRONG",{});var WFt=s(Z9e);d2r=r(WFt,"mpnet"),WFt.forEach(t),c2r=r(QSe," \u2014 "),kQ=n(QSe,"A",{href:!0});var QFt=s(kQ);f2r=r(QFt,"TFMPNetForMaskedLM"),QFt.forEach(t),m2r=r(QSe," (MPNet model)"),QSe.forEach(t),g2r=i(fe),GM=n(fe,"LI",{});var HSe=s(GM);ebe=n(HSe,"STRONG",{});var HFt=s(ebe);h2r=r(HFt,"rembert"),HFt.forEach(t),p2r=r(HSe," \u2014 "),SQ=n(HSe,"A",{href:!0});var UFt=s(SQ);_2r=r(UFt,"TFRemBertForMaskedLM"),UFt.forEach(t),u2r=r(HSe," (RemBERT model)"),HSe.forEach(t),b2r=i(fe),OM=n(fe,"LI",{});var USe=s(OM);obe=n(USe,"STRONG",{});var JFt=s(obe);v2r=r(JFt,"roberta"),JFt.forEach(t),F2r=r(USe," \u2014 "),RQ=n(USe,"A",{href:!0});var YFt=s(RQ);T2r=r(YFt,"TFRobertaForMaskedLM"),YFt.forEach(t),M2r=r(USe," (RoBERTa model)"),USe.forEach(t),E2r=i(fe),VM=n(fe,"LI",{});var JSe=s(VM);rbe=n(JSe,"STRONG",{});var KFt=s(rbe);C2r=r(KFt,"roformer"),KFt.forEach(t),w2r=r(JSe," \u2014 "),PQ=n(JSe,"A",{href:!0});var ZFt=s(PQ);A2r=r(ZFt,"TFRoFormerForMaskedLM"),ZFt.forEach(t),y2r=r(JSe," (RoFormer model)"),JSe.forEach(t),L2r=i(fe),XM=n(fe,"LI",{});var YSe=s(XM);tbe=n(YSe,"STRONG",{});var eTt=s(tbe);x2r=r(eTt,"tapas"),eTt.forEach(t),$2r=r(YSe," \u2014 "),BQ=n(YSe,"A",{href:!0});var oTt=s(BQ);k2r=r(oTt,"TFTapasForMaskedLM"),oTt.forEach(t),S2r=r(YSe," (TAPAS model)"),YSe.forEach(t),R2r=i(fe),zM=n(fe,"LI",{});var KSe=s(zM);abe=n(KSe,"STRONG",{});var rTt=s(abe);P2r=r(rTt,"xlm"),rTt.forEach(t),B2r=r(KSe," \u2014 "),IQ=n(KSe,"A",{href:!0});var tTt=s(IQ);I2r=r(tTt,"TFXLMWithLMHeadModel"),tTt.forEach(t),q2r=r(KSe," (XLM model)"),KSe.forEach(t),N2r=i(fe),WM=n(fe,"LI",{});var ZSe=s(WM);nbe=n(ZSe,"STRONG",{});var aTt=s(nbe);j2r=r(aTt,"xlm-roberta"),aTt.forEach(t),D2r=r(ZSe," \u2014 "),qQ=n(ZSe,"A",{href:!0});var nTt=s(qQ);G2r=r(nTt,"TFXLMRobertaForMaskedLM"),nTt.forEach(t),O2r=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),fe.forEach(t),V2r=i(Tl),T(QM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),rNe=i(f),oc=n(f,"H2",{class:!0});var iDe=s(oc);HM=n(iDe,"A",{id:!0,class:!0,href:!0});var sTt=s(HM);sbe=n(sTt,"SPAN",{});var lTt=s(sbe);T(uL.$$.fragment,lTt),lTt.forEach(t),sTt.forEach(t),X2r=i(iDe),lbe=n(iDe,"SPAN",{});var iTt=s(lbe);z2r=r(iTt,"TFAutoModelForSeq2SeqLM"),iTt.forEach(t),iDe.forEach(t),tNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(bL.$$.fragment,Ml),W2r=i(Ml),rc=n(Ml,"P",{});var NZ=s(rc);Q2r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NQ=n(NZ,"A",{href:!0});var dTt=s(NQ);H2r=r(dTt,"from_pretrained()"),dTt.forEach(t),U2r=r(NZ," class method or the "),jQ=n(NZ,"A",{href:!0});var cTt=s(jQ);J2r=r(cTt,"from_config()"),cTt.forEach(t),Y2r=r(NZ,` class
method.`),NZ.forEach(t),K2r=i(Ml),vL=n(Ml,"P",{});var dDe=s(vL);Z2r=r(dDe,"This class cannot be instantiated directly using "),ibe=n(dDe,"CODE",{});var fTt=s(ibe);e1r=r(fTt,"__init__()"),fTt.forEach(t),o1r=r(dDe," (throws an error)."),dDe.forEach(t),r1r=i(Ml),St=n(Ml,"DIV",{class:!0});var v0=s(St);T(FL.$$.fragment,v0),t1r=i(v0),dbe=n(v0,"P",{});var mTt=s(dbe);a1r=r(mTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mTt.forEach(t),n1r=i(v0),tc=n(v0,"P",{});var jZ=s(tc);s1r=r(jZ,`Note:
Loading a model from its configuration file does `),cbe=n(jZ,"STRONG",{});var gTt=s(cbe);l1r=r(gTt,"not"),gTt.forEach(t),i1r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(jZ,"A",{href:!0});var hTt=s(DQ);d1r=r(hTt,"from_pretrained()"),hTt.forEach(t),c1r=r(jZ," to load the model weights."),jZ.forEach(t),f1r=i(v0),T(UM.$$.fragment,v0),v0.forEach(t),m1r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(TL.$$.fragment,El),g1r=i(El),fbe=n(El,"P",{});var pTt=s(fbe);h1r=r(pTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pTt.forEach(t),p1r=i(El),an=n(El,"P",{});var F0=s(an);_1r=r(F0,"The model class to instantiate is selected based on the "),mbe=n(F0,"CODE",{});var _Tt=s(mbe);u1r=r(_Tt,"model_type"),_Tt.forEach(t),b1r=r(F0,` property of the config object (either
passed as an argument or loaded from `),gbe=n(F0,"CODE",{});var uTt=s(gbe);v1r=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),F1r=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(F0,"CODE",{});var bTt=s(hbe);T1r=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),M1r=r(F0,":"),F0.forEach(t),E1r=i(El),ye=n(El,"UL",{});var Be=s(ye);JM=n(Be,"LI",{});var eRe=s(JM);pbe=n(eRe,"STRONG",{});var vTt=s(pbe);C1r=r(vTt,"bart"),vTt.forEach(t),w1r=r(eRe," \u2014 "),GQ=n(eRe,"A",{href:!0});var FTt=s(GQ);A1r=r(FTt,"TFBartForConditionalGeneration"),FTt.forEach(t),y1r=r(eRe," (BART model)"),eRe.forEach(t),L1r=i(Be),YM=n(Be,"LI",{});var oRe=s(YM);_be=n(oRe,"STRONG",{});var TTt=s(_be);x1r=r(TTt,"blenderbot"),TTt.forEach(t),$1r=r(oRe," \u2014 "),OQ=n(oRe,"A",{href:!0});var MTt=s(OQ);k1r=r(MTt,"TFBlenderbotForConditionalGeneration"),MTt.forEach(t),S1r=r(oRe," (Blenderbot model)"),oRe.forEach(t),R1r=i(Be),KM=n(Be,"LI",{});var rRe=s(KM);ube=n(rRe,"STRONG",{});var ETt=s(ube);P1r=r(ETt,"blenderbot-small"),ETt.forEach(t),B1r=r(rRe," \u2014 "),VQ=n(rRe,"A",{href:!0});var CTt=s(VQ);I1r=r(CTt,"TFBlenderbotSmallForConditionalGeneration"),CTt.forEach(t),q1r=r(rRe," (BlenderbotSmall model)"),rRe.forEach(t),N1r=i(Be),ZM=n(Be,"LI",{});var tRe=s(ZM);bbe=n(tRe,"STRONG",{});var wTt=s(bbe);j1r=r(wTt,"encoder-decoder"),wTt.forEach(t),D1r=r(tRe," \u2014 "),XQ=n(tRe,"A",{href:!0});var ATt=s(XQ);G1r=r(ATt,"TFEncoderDecoderModel"),ATt.forEach(t),O1r=r(tRe," (Encoder decoder model)"),tRe.forEach(t),V1r=i(Be),e4=n(Be,"LI",{});var aRe=s(e4);vbe=n(aRe,"STRONG",{});var yTt=s(vbe);X1r=r(yTt,"led"),yTt.forEach(t),z1r=r(aRe," \u2014 "),zQ=n(aRe,"A",{href:!0});var LTt=s(zQ);W1r=r(LTt,"TFLEDForConditionalGeneration"),LTt.forEach(t),Q1r=r(aRe," (LED model)"),aRe.forEach(t),H1r=i(Be),o4=n(Be,"LI",{});var nRe=s(o4);Fbe=n(nRe,"STRONG",{});var xTt=s(Fbe);U1r=r(xTt,"marian"),xTt.forEach(t),J1r=r(nRe," \u2014 "),WQ=n(nRe,"A",{href:!0});var $Tt=s(WQ);Y1r=r($Tt,"TFMarianMTModel"),$Tt.forEach(t),K1r=r(nRe," (Marian model)"),nRe.forEach(t),Z1r=i(Be),r4=n(Be,"LI",{});var sRe=s(r4);Tbe=n(sRe,"STRONG",{});var kTt=s(Tbe);e9r=r(kTt,"mbart"),kTt.forEach(t),o9r=r(sRe," \u2014 "),QQ=n(sRe,"A",{href:!0});var STt=s(QQ);r9r=r(STt,"TFMBartForConditionalGeneration"),STt.forEach(t),t9r=r(sRe," (mBART model)"),sRe.forEach(t),a9r=i(Be),t4=n(Be,"LI",{});var lRe=s(t4);Mbe=n(lRe,"STRONG",{});var RTt=s(Mbe);n9r=r(RTt,"mt5"),RTt.forEach(t),s9r=r(lRe," \u2014 "),HQ=n(lRe,"A",{href:!0});var PTt=s(HQ);l9r=r(PTt,"TFMT5ForConditionalGeneration"),PTt.forEach(t),i9r=r(lRe," (mT5 model)"),lRe.forEach(t),d9r=i(Be),a4=n(Be,"LI",{});var iRe=s(a4);Ebe=n(iRe,"STRONG",{});var BTt=s(Ebe);c9r=r(BTt,"pegasus"),BTt.forEach(t),f9r=r(iRe," \u2014 "),UQ=n(iRe,"A",{href:!0});var ITt=s(UQ);m9r=r(ITt,"TFPegasusForConditionalGeneration"),ITt.forEach(t),g9r=r(iRe," (Pegasus model)"),iRe.forEach(t),h9r=i(Be),n4=n(Be,"LI",{});var dRe=s(n4);Cbe=n(dRe,"STRONG",{});var qTt=s(Cbe);p9r=r(qTt,"t5"),qTt.forEach(t),_9r=r(dRe," \u2014 "),JQ=n(dRe,"A",{href:!0});var NTt=s(JQ);u9r=r(NTt,"TFT5ForConditionalGeneration"),NTt.forEach(t),b9r=r(dRe," (T5 model)"),dRe.forEach(t),Be.forEach(t),v9r=i(El),T(s4.$$.fragment,El),El.forEach(t),Ml.forEach(t),aNe=i(f),ac=n(f,"H2",{class:!0});var cDe=s(ac);l4=n(cDe,"A",{id:!0,class:!0,href:!0});var jTt=s(l4);wbe=n(jTt,"SPAN",{});var DTt=s(wbe);T(ML.$$.fragment,DTt),DTt.forEach(t),jTt.forEach(t),F9r=i(cDe),Abe=n(cDe,"SPAN",{});var GTt=s(Abe);T9r=r(GTt,"TFAutoModelForSequenceClassification"),GTt.forEach(t),cDe.forEach(t),nNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(EL.$$.fragment,Cl),M9r=i(Cl),nc=n(Cl,"P",{});var DZ=s(nc);E9r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YQ=n(DZ,"A",{href:!0});var OTt=s(YQ);C9r=r(OTt,"from_pretrained()"),OTt.forEach(t),w9r=r(DZ," class method or the "),KQ=n(DZ,"A",{href:!0});var VTt=s(KQ);A9r=r(VTt,"from_config()"),VTt.forEach(t),y9r=r(DZ,` class
method.`),DZ.forEach(t),L9r=i(Cl),CL=n(Cl,"P",{});var fDe=s(CL);x9r=r(fDe,"This class cannot be instantiated directly using "),ybe=n(fDe,"CODE",{});var XTt=s(ybe);$9r=r(XTt,"__init__()"),XTt.forEach(t),k9r=r(fDe," (throws an error)."),fDe.forEach(t),S9r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var T0=s(Rt);T(wL.$$.fragment,T0),R9r=i(T0),Lbe=n(T0,"P",{});var zTt=s(Lbe);P9r=r(zTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zTt.forEach(t),B9r=i(T0),sc=n(T0,"P",{});var GZ=s(sc);I9r=r(GZ,`Note:
Loading a model from its configuration file does `),xbe=n(GZ,"STRONG",{});var WTt=s(xbe);q9r=r(WTt,"not"),WTt.forEach(t),N9r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(GZ,"A",{href:!0});var QTt=s(ZQ);j9r=r(QTt,"from_pretrained()"),QTt.forEach(t),D9r=r(GZ," to load the model weights."),GZ.forEach(t),G9r=i(T0),T(i4.$$.fragment,T0),T0.forEach(t),O9r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(AL.$$.fragment,wl),V9r=i(wl),$be=n(wl,"P",{});var HTt=s($be);X9r=r(HTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HTt.forEach(t),z9r=i(wl),nn=n(wl,"P",{});var M0=s(nn);W9r=r(M0,"The model class to instantiate is selected based on the "),kbe=n(M0,"CODE",{});var UTt=s(kbe);Q9r=r(UTt,"model_type"),UTt.forEach(t),H9r=r(M0,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(M0,"CODE",{});var JTt=s(Sbe);U9r=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),J9r=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(M0,"CODE",{});var YTt=s(Rbe);Y9r=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),K9r=r(M0,":"),M0.forEach(t),Z9r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);d4=n(ae,"LI",{});var cRe=s(d4);Pbe=n(cRe,"STRONG",{});var KTt=s(Pbe);ebr=r(KTt,"albert"),KTt.forEach(t),obr=r(cRe," \u2014 "),eH=n(cRe,"A",{href:!0});var ZTt=s(eH);rbr=r(ZTt,"TFAlbertForSequenceClassification"),ZTt.forEach(t),tbr=r(cRe," (ALBERT model)"),cRe.forEach(t),abr=i(ae),c4=n(ae,"LI",{});var fRe=s(c4);Bbe=n(fRe,"STRONG",{});var e7t=s(Bbe);nbr=r(e7t,"bert"),e7t.forEach(t),sbr=r(fRe," \u2014 "),oH=n(fRe,"A",{href:!0});var o7t=s(oH);lbr=r(o7t,"TFBertForSequenceClassification"),o7t.forEach(t),ibr=r(fRe," (BERT model)"),fRe.forEach(t),dbr=i(ae),f4=n(ae,"LI",{});var mRe=s(f4);Ibe=n(mRe,"STRONG",{});var r7t=s(Ibe);cbr=r(r7t,"camembert"),r7t.forEach(t),fbr=r(mRe," \u2014 "),rH=n(mRe,"A",{href:!0});var t7t=s(rH);mbr=r(t7t,"TFCamembertForSequenceClassification"),t7t.forEach(t),gbr=r(mRe," (CamemBERT model)"),mRe.forEach(t),hbr=i(ae),m4=n(ae,"LI",{});var gRe=s(m4);qbe=n(gRe,"STRONG",{});var a7t=s(qbe);pbr=r(a7t,"convbert"),a7t.forEach(t),_br=r(gRe," \u2014 "),tH=n(gRe,"A",{href:!0});var n7t=s(tH);ubr=r(n7t,"TFConvBertForSequenceClassification"),n7t.forEach(t),bbr=r(gRe," (ConvBERT model)"),gRe.forEach(t),vbr=i(ae),g4=n(ae,"LI",{});var hRe=s(g4);Nbe=n(hRe,"STRONG",{});var s7t=s(Nbe);Fbr=r(s7t,"ctrl"),s7t.forEach(t),Tbr=r(hRe," \u2014 "),aH=n(hRe,"A",{href:!0});var l7t=s(aH);Mbr=r(l7t,"TFCTRLForSequenceClassification"),l7t.forEach(t),Ebr=r(hRe," (CTRL model)"),hRe.forEach(t),Cbr=i(ae),h4=n(ae,"LI",{});var pRe=s(h4);jbe=n(pRe,"STRONG",{});var i7t=s(jbe);wbr=r(i7t,"deberta"),i7t.forEach(t),Abr=r(pRe," \u2014 "),nH=n(pRe,"A",{href:!0});var d7t=s(nH);ybr=r(d7t,"TFDebertaForSequenceClassification"),d7t.forEach(t),Lbr=r(pRe," (DeBERTa model)"),pRe.forEach(t),xbr=i(ae),p4=n(ae,"LI",{});var _Re=s(p4);Dbe=n(_Re,"STRONG",{});var c7t=s(Dbe);$br=r(c7t,"deberta-v2"),c7t.forEach(t),kbr=r(_Re," \u2014 "),sH=n(_Re,"A",{href:!0});var f7t=s(sH);Sbr=r(f7t,"TFDebertaV2ForSequenceClassification"),f7t.forEach(t),Rbr=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),Pbr=i(ae),_4=n(ae,"LI",{});var uRe=s(_4);Gbe=n(uRe,"STRONG",{});var m7t=s(Gbe);Bbr=r(m7t,"distilbert"),m7t.forEach(t),Ibr=r(uRe," \u2014 "),lH=n(uRe,"A",{href:!0});var g7t=s(lH);qbr=r(g7t,"TFDistilBertForSequenceClassification"),g7t.forEach(t),Nbr=r(uRe," (DistilBERT model)"),uRe.forEach(t),jbr=i(ae),u4=n(ae,"LI",{});var bRe=s(u4);Obe=n(bRe,"STRONG",{});var h7t=s(Obe);Dbr=r(h7t,"electra"),h7t.forEach(t),Gbr=r(bRe," \u2014 "),iH=n(bRe,"A",{href:!0});var p7t=s(iH);Obr=r(p7t,"TFElectraForSequenceClassification"),p7t.forEach(t),Vbr=r(bRe," (ELECTRA model)"),bRe.forEach(t),Xbr=i(ae),b4=n(ae,"LI",{});var vRe=s(b4);Vbe=n(vRe,"STRONG",{});var _7t=s(Vbe);zbr=r(_7t,"flaubert"),_7t.forEach(t),Wbr=r(vRe," \u2014 "),dH=n(vRe,"A",{href:!0});var u7t=s(dH);Qbr=r(u7t,"TFFlaubertForSequenceClassification"),u7t.forEach(t),Hbr=r(vRe," (FlauBERT model)"),vRe.forEach(t),Ubr=i(ae),v4=n(ae,"LI",{});var FRe=s(v4);Xbe=n(FRe,"STRONG",{});var b7t=s(Xbe);Jbr=r(b7t,"funnel"),b7t.forEach(t),Ybr=r(FRe," \u2014 "),cH=n(FRe,"A",{href:!0});var v7t=s(cH);Kbr=r(v7t,"TFFunnelForSequenceClassification"),v7t.forEach(t),Zbr=r(FRe," (Funnel Transformer model)"),FRe.forEach(t),evr=i(ae),F4=n(ae,"LI",{});var TRe=s(F4);zbe=n(TRe,"STRONG",{});var F7t=s(zbe);ovr=r(F7t,"gpt2"),F7t.forEach(t),rvr=r(TRe," \u2014 "),fH=n(TRe,"A",{href:!0});var T7t=s(fH);tvr=r(T7t,"TFGPT2ForSequenceClassification"),T7t.forEach(t),avr=r(TRe," (OpenAI GPT-2 model)"),TRe.forEach(t),nvr=i(ae),T4=n(ae,"LI",{});var MRe=s(T4);Wbe=n(MRe,"STRONG",{});var M7t=s(Wbe);svr=r(M7t,"gptj"),M7t.forEach(t),lvr=r(MRe," \u2014 "),mH=n(MRe,"A",{href:!0});var E7t=s(mH);ivr=r(E7t,"TFGPTJForSequenceClassification"),E7t.forEach(t),dvr=r(MRe," (GPT-J model)"),MRe.forEach(t),cvr=i(ae),M4=n(ae,"LI",{});var ERe=s(M4);Qbe=n(ERe,"STRONG",{});var C7t=s(Qbe);fvr=r(C7t,"layoutlm"),C7t.forEach(t),mvr=r(ERe," \u2014 "),gH=n(ERe,"A",{href:!0});var w7t=s(gH);gvr=r(w7t,"TFLayoutLMForSequenceClassification"),w7t.forEach(t),hvr=r(ERe," (LayoutLM model)"),ERe.forEach(t),pvr=i(ae),E4=n(ae,"LI",{});var CRe=s(E4);Hbe=n(CRe,"STRONG",{});var A7t=s(Hbe);_vr=r(A7t,"longformer"),A7t.forEach(t),uvr=r(CRe," \u2014 "),hH=n(CRe,"A",{href:!0});var y7t=s(hH);bvr=r(y7t,"TFLongformerForSequenceClassification"),y7t.forEach(t),vvr=r(CRe," (Longformer model)"),CRe.forEach(t),Fvr=i(ae),C4=n(ae,"LI",{});var wRe=s(C4);Ube=n(wRe,"STRONG",{});var L7t=s(Ube);Tvr=r(L7t,"mobilebert"),L7t.forEach(t),Mvr=r(wRe," \u2014 "),pH=n(wRe,"A",{href:!0});var x7t=s(pH);Evr=r(x7t,"TFMobileBertForSequenceClassification"),x7t.forEach(t),Cvr=r(wRe," (MobileBERT model)"),wRe.forEach(t),wvr=i(ae),w4=n(ae,"LI",{});var ARe=s(w4);Jbe=n(ARe,"STRONG",{});var $7t=s(Jbe);Avr=r($7t,"mpnet"),$7t.forEach(t),yvr=r(ARe," \u2014 "),_H=n(ARe,"A",{href:!0});var k7t=s(_H);Lvr=r(k7t,"TFMPNetForSequenceClassification"),k7t.forEach(t),xvr=r(ARe," (MPNet model)"),ARe.forEach(t),$vr=i(ae),A4=n(ae,"LI",{});var yRe=s(A4);Ybe=n(yRe,"STRONG",{});var S7t=s(Ybe);kvr=r(S7t,"openai-gpt"),S7t.forEach(t),Svr=r(yRe," \u2014 "),uH=n(yRe,"A",{href:!0});var R7t=s(uH);Rvr=r(R7t,"TFOpenAIGPTForSequenceClassification"),R7t.forEach(t),Pvr=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),Bvr=i(ae),y4=n(ae,"LI",{});var LRe=s(y4);Kbe=n(LRe,"STRONG",{});var P7t=s(Kbe);Ivr=r(P7t,"rembert"),P7t.forEach(t),qvr=r(LRe," \u2014 "),bH=n(LRe,"A",{href:!0});var B7t=s(bH);Nvr=r(B7t,"TFRemBertForSequenceClassification"),B7t.forEach(t),jvr=r(LRe," (RemBERT model)"),LRe.forEach(t),Dvr=i(ae),L4=n(ae,"LI",{});var xRe=s(L4);Zbe=n(xRe,"STRONG",{});var I7t=s(Zbe);Gvr=r(I7t,"roberta"),I7t.forEach(t),Ovr=r(xRe," \u2014 "),vH=n(xRe,"A",{href:!0});var q7t=s(vH);Vvr=r(q7t,"TFRobertaForSequenceClassification"),q7t.forEach(t),Xvr=r(xRe," (RoBERTa model)"),xRe.forEach(t),zvr=i(ae),x4=n(ae,"LI",{});var $Re=s(x4);eve=n($Re,"STRONG",{});var N7t=s(eve);Wvr=r(N7t,"roformer"),N7t.forEach(t),Qvr=r($Re," \u2014 "),FH=n($Re,"A",{href:!0});var j7t=s(FH);Hvr=r(j7t,"TFRoFormerForSequenceClassification"),j7t.forEach(t),Uvr=r($Re," (RoFormer model)"),$Re.forEach(t),Jvr=i(ae),$4=n(ae,"LI",{});var kRe=s($4);ove=n(kRe,"STRONG",{});var D7t=s(ove);Yvr=r(D7t,"tapas"),D7t.forEach(t),Kvr=r(kRe," \u2014 "),TH=n(kRe,"A",{href:!0});var G7t=s(TH);Zvr=r(G7t,"TFTapasForSequenceClassification"),G7t.forEach(t),eFr=r(kRe," (TAPAS model)"),kRe.forEach(t),oFr=i(ae),k4=n(ae,"LI",{});var SRe=s(k4);rve=n(SRe,"STRONG",{});var O7t=s(rve);rFr=r(O7t,"transfo-xl"),O7t.forEach(t),tFr=r(SRe," \u2014 "),MH=n(SRe,"A",{href:!0});var V7t=s(MH);aFr=r(V7t,"TFTransfoXLForSequenceClassification"),V7t.forEach(t),nFr=r(SRe," (Transformer-XL model)"),SRe.forEach(t),sFr=i(ae),S4=n(ae,"LI",{});var RRe=s(S4);tve=n(RRe,"STRONG",{});var X7t=s(tve);lFr=r(X7t,"xlm"),X7t.forEach(t),iFr=r(RRe," \u2014 "),EH=n(RRe,"A",{href:!0});var z7t=s(EH);dFr=r(z7t,"TFXLMForSequenceClassification"),z7t.forEach(t),cFr=r(RRe," (XLM model)"),RRe.forEach(t),fFr=i(ae),R4=n(ae,"LI",{});var PRe=s(R4);ave=n(PRe,"STRONG",{});var W7t=s(ave);mFr=r(W7t,"xlm-roberta"),W7t.forEach(t),gFr=r(PRe," \u2014 "),CH=n(PRe,"A",{href:!0});var Q7t=s(CH);hFr=r(Q7t,"TFXLMRobertaForSequenceClassification"),Q7t.forEach(t),pFr=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),_Fr=i(ae),P4=n(ae,"LI",{});var BRe=s(P4);nve=n(BRe,"STRONG",{});var H7t=s(nve);uFr=r(H7t,"xlnet"),H7t.forEach(t),bFr=r(BRe," \u2014 "),wH=n(BRe,"A",{href:!0});var U7t=s(wH);vFr=r(U7t,"TFXLNetForSequenceClassification"),U7t.forEach(t),FFr=r(BRe," (XLNet model)"),BRe.forEach(t),ae.forEach(t),TFr=i(wl),T(B4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),sNe=i(f),lc=n(f,"H2",{class:!0});var mDe=s(lc);I4=n(mDe,"A",{id:!0,class:!0,href:!0});var J7t=s(I4);sve=n(J7t,"SPAN",{});var Y7t=s(sve);T(yL.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),MFr=i(mDe),lve=n(mDe,"SPAN",{});var K7t=s(lve);EFr=r(K7t,"TFAutoModelForMultipleChoice"),K7t.forEach(t),mDe.forEach(t),lNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(LL.$$.fragment,Al),CFr=i(Al),ic=n(Al,"P",{});var OZ=s(ic);wFr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AH=n(OZ,"A",{href:!0});var Z7t=s(AH);AFr=r(Z7t,"from_pretrained()"),Z7t.forEach(t),yFr=r(OZ," class method or the "),yH=n(OZ,"A",{href:!0});var eMt=s(yH);LFr=r(eMt,"from_config()"),eMt.forEach(t),xFr=r(OZ,` class
method.`),OZ.forEach(t),$Fr=i(Al),xL=n(Al,"P",{});var gDe=s(xL);kFr=r(gDe,"This class cannot be instantiated directly using "),ive=n(gDe,"CODE",{});var oMt=s(ive);SFr=r(oMt,"__init__()"),oMt.forEach(t),RFr=r(gDe," (throws an error)."),gDe.forEach(t),PFr=i(Al),Pt=n(Al,"DIV",{class:!0});var E0=s(Pt);T($L.$$.fragment,E0),BFr=i(E0),dve=n(E0,"P",{});var rMt=s(dve);IFr=r(rMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rMt.forEach(t),qFr=i(E0),dc=n(E0,"P",{});var VZ=s(dc);NFr=r(VZ,`Note:
Loading a model from its configuration file does `),cve=n(VZ,"STRONG",{});var tMt=s(cve);jFr=r(tMt,"not"),tMt.forEach(t),DFr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(VZ,"A",{href:!0});var aMt=s(LH);GFr=r(aMt,"from_pretrained()"),aMt.forEach(t),OFr=r(VZ," to load the model weights."),VZ.forEach(t),VFr=i(E0),T(q4.$$.fragment,E0),E0.forEach(t),XFr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(kL.$$.fragment,yl),zFr=i(yl),fve=n(yl,"P",{});var nMt=s(fve);WFr=r(nMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nMt.forEach(t),QFr=i(yl),sn=n(yl,"P",{});var C0=s(sn);HFr=r(C0,"The model class to instantiate is selected based on the "),mve=n(C0,"CODE",{});var sMt=s(mve);UFr=r(sMt,"model_type"),sMt.forEach(t),JFr=r(C0,` property of the config object (either
passed as an argument or loaded from `),gve=n(C0,"CODE",{});var lMt=s(gve);YFr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),KFr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(C0,"CODE",{});var iMt=s(hve);ZFr=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),eTr=r(C0,":"),C0.forEach(t),oTr=i(yl),he=n(yl,"UL",{});var ue=s(he);N4=n(ue,"LI",{});var IRe=s(N4);pve=n(IRe,"STRONG",{});var dMt=s(pve);rTr=r(dMt,"albert"),dMt.forEach(t),tTr=r(IRe," \u2014 "),xH=n(IRe,"A",{href:!0});var cMt=s(xH);aTr=r(cMt,"TFAlbertForMultipleChoice"),cMt.forEach(t),nTr=r(IRe," (ALBERT model)"),IRe.forEach(t),sTr=i(ue),j4=n(ue,"LI",{});var qRe=s(j4);_ve=n(qRe,"STRONG",{});var fMt=s(_ve);lTr=r(fMt,"bert"),fMt.forEach(t),iTr=r(qRe," \u2014 "),$H=n(qRe,"A",{href:!0});var mMt=s($H);dTr=r(mMt,"TFBertForMultipleChoice"),mMt.forEach(t),cTr=r(qRe," (BERT model)"),qRe.forEach(t),fTr=i(ue),D4=n(ue,"LI",{});var NRe=s(D4);uve=n(NRe,"STRONG",{});var gMt=s(uve);mTr=r(gMt,"camembert"),gMt.forEach(t),gTr=r(NRe," \u2014 "),kH=n(NRe,"A",{href:!0});var hMt=s(kH);hTr=r(hMt,"TFCamembertForMultipleChoice"),hMt.forEach(t),pTr=r(NRe," (CamemBERT model)"),NRe.forEach(t),_Tr=i(ue),G4=n(ue,"LI",{});var jRe=s(G4);bve=n(jRe,"STRONG",{});var pMt=s(bve);uTr=r(pMt,"convbert"),pMt.forEach(t),bTr=r(jRe," \u2014 "),SH=n(jRe,"A",{href:!0});var _Mt=s(SH);vTr=r(_Mt,"TFConvBertForMultipleChoice"),_Mt.forEach(t),FTr=r(jRe," (ConvBERT model)"),jRe.forEach(t),TTr=i(ue),O4=n(ue,"LI",{});var DRe=s(O4);vve=n(DRe,"STRONG",{});var uMt=s(vve);MTr=r(uMt,"distilbert"),uMt.forEach(t),ETr=r(DRe," \u2014 "),RH=n(DRe,"A",{href:!0});var bMt=s(RH);CTr=r(bMt,"TFDistilBertForMultipleChoice"),bMt.forEach(t),wTr=r(DRe," (DistilBERT model)"),DRe.forEach(t),ATr=i(ue),V4=n(ue,"LI",{});var GRe=s(V4);Fve=n(GRe,"STRONG",{});var vMt=s(Fve);yTr=r(vMt,"electra"),vMt.forEach(t),LTr=r(GRe," \u2014 "),PH=n(GRe,"A",{href:!0});var FMt=s(PH);xTr=r(FMt,"TFElectraForMultipleChoice"),FMt.forEach(t),$Tr=r(GRe," (ELECTRA model)"),GRe.forEach(t),kTr=i(ue),X4=n(ue,"LI",{});var ORe=s(X4);Tve=n(ORe,"STRONG",{});var TMt=s(Tve);STr=r(TMt,"flaubert"),TMt.forEach(t),RTr=r(ORe," \u2014 "),BH=n(ORe,"A",{href:!0});var MMt=s(BH);PTr=r(MMt,"TFFlaubertForMultipleChoice"),MMt.forEach(t),BTr=r(ORe," (FlauBERT model)"),ORe.forEach(t),ITr=i(ue),z4=n(ue,"LI",{});var VRe=s(z4);Mve=n(VRe,"STRONG",{});var EMt=s(Mve);qTr=r(EMt,"funnel"),EMt.forEach(t),NTr=r(VRe," \u2014 "),IH=n(VRe,"A",{href:!0});var CMt=s(IH);jTr=r(CMt,"TFFunnelForMultipleChoice"),CMt.forEach(t),DTr=r(VRe," (Funnel Transformer model)"),VRe.forEach(t),GTr=i(ue),W4=n(ue,"LI",{});var XRe=s(W4);Eve=n(XRe,"STRONG",{});var wMt=s(Eve);OTr=r(wMt,"longformer"),wMt.forEach(t),VTr=r(XRe," \u2014 "),qH=n(XRe,"A",{href:!0});var AMt=s(qH);XTr=r(AMt,"TFLongformerForMultipleChoice"),AMt.forEach(t),zTr=r(XRe," (Longformer model)"),XRe.forEach(t),WTr=i(ue),Q4=n(ue,"LI",{});var zRe=s(Q4);Cve=n(zRe,"STRONG",{});var yMt=s(Cve);QTr=r(yMt,"mobilebert"),yMt.forEach(t),HTr=r(zRe," \u2014 "),NH=n(zRe,"A",{href:!0});var LMt=s(NH);UTr=r(LMt,"TFMobileBertForMultipleChoice"),LMt.forEach(t),JTr=r(zRe," (MobileBERT model)"),zRe.forEach(t),YTr=i(ue),H4=n(ue,"LI",{});var WRe=s(H4);wve=n(WRe,"STRONG",{});var xMt=s(wve);KTr=r(xMt,"mpnet"),xMt.forEach(t),ZTr=r(WRe," \u2014 "),jH=n(WRe,"A",{href:!0});var $Mt=s(jH);e7r=r($Mt,"TFMPNetForMultipleChoice"),$Mt.forEach(t),o7r=r(WRe," (MPNet model)"),WRe.forEach(t),r7r=i(ue),U4=n(ue,"LI",{});var QRe=s(U4);Ave=n(QRe,"STRONG",{});var kMt=s(Ave);t7r=r(kMt,"rembert"),kMt.forEach(t),a7r=r(QRe," \u2014 "),DH=n(QRe,"A",{href:!0});var SMt=s(DH);n7r=r(SMt,"TFRemBertForMultipleChoice"),SMt.forEach(t),s7r=r(QRe," (RemBERT model)"),QRe.forEach(t),l7r=i(ue),J4=n(ue,"LI",{});var HRe=s(J4);yve=n(HRe,"STRONG",{});var RMt=s(yve);i7r=r(RMt,"roberta"),RMt.forEach(t),d7r=r(HRe," \u2014 "),GH=n(HRe,"A",{href:!0});var PMt=s(GH);c7r=r(PMt,"TFRobertaForMultipleChoice"),PMt.forEach(t),f7r=r(HRe," (RoBERTa model)"),HRe.forEach(t),m7r=i(ue),Y4=n(ue,"LI",{});var URe=s(Y4);Lve=n(URe,"STRONG",{});var BMt=s(Lve);g7r=r(BMt,"roformer"),BMt.forEach(t),h7r=r(URe," \u2014 "),OH=n(URe,"A",{href:!0});var IMt=s(OH);p7r=r(IMt,"TFRoFormerForMultipleChoice"),IMt.forEach(t),_7r=r(URe," (RoFormer model)"),URe.forEach(t),u7r=i(ue),K4=n(ue,"LI",{});var JRe=s(K4);xve=n(JRe,"STRONG",{});var qMt=s(xve);b7r=r(qMt,"xlm"),qMt.forEach(t),v7r=r(JRe," \u2014 "),VH=n(JRe,"A",{href:!0});var NMt=s(VH);F7r=r(NMt,"TFXLMForMultipleChoice"),NMt.forEach(t),T7r=r(JRe," (XLM model)"),JRe.forEach(t),M7r=i(ue),Z4=n(ue,"LI",{});var YRe=s(Z4);$ve=n(YRe,"STRONG",{});var jMt=s($ve);E7r=r(jMt,"xlm-roberta"),jMt.forEach(t),C7r=r(YRe," \u2014 "),XH=n(YRe,"A",{href:!0});var DMt=s(XH);w7r=r(DMt,"TFXLMRobertaForMultipleChoice"),DMt.forEach(t),A7r=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),y7r=i(ue),eE=n(ue,"LI",{});var KRe=s(eE);kve=n(KRe,"STRONG",{});var GMt=s(kve);L7r=r(GMt,"xlnet"),GMt.forEach(t),x7r=r(KRe," \u2014 "),zH=n(KRe,"A",{href:!0});var OMt=s(zH);$7r=r(OMt,"TFXLNetForMultipleChoice"),OMt.forEach(t),k7r=r(KRe," (XLNet model)"),KRe.forEach(t),ue.forEach(t),S7r=i(yl),T(oE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),iNe=i(f),cc=n(f,"H2",{class:!0});var hDe=s(cc);rE=n(hDe,"A",{id:!0,class:!0,href:!0});var VMt=s(rE);Sve=n(VMt,"SPAN",{});var XMt=s(Sve);T(SL.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),R7r=i(hDe),Rve=n(hDe,"SPAN",{});var zMt=s(Rve);P7r=r(zMt,"TFAutoModelForNextSentencePrediction"),zMt.forEach(t),hDe.forEach(t),dNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(RL.$$.fragment,Ll),B7r=i(Ll),fc=n(Ll,"P",{});var XZ=s(fc);I7r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WH=n(XZ,"A",{href:!0});var WMt=s(WH);q7r=r(WMt,"from_pretrained()"),WMt.forEach(t),N7r=r(XZ," class method or the "),QH=n(XZ,"A",{href:!0});var QMt=s(QH);j7r=r(QMt,"from_config()"),QMt.forEach(t),D7r=r(XZ,` class
method.`),XZ.forEach(t),G7r=i(Ll),PL=n(Ll,"P",{});var pDe=s(PL);O7r=r(pDe,"This class cannot be instantiated directly using "),Pve=n(pDe,"CODE",{});var HMt=s(Pve);V7r=r(HMt,"__init__()"),HMt.forEach(t),X7r=r(pDe," (throws an error)."),pDe.forEach(t),z7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var w0=s(Bt);T(BL.$$.fragment,w0),W7r=i(w0),Bve=n(w0,"P",{});var UMt=s(Bve);Q7r=r(UMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UMt.forEach(t),H7r=i(w0),mc=n(w0,"P",{});var zZ=s(mc);U7r=r(zZ,`Note:
Loading a model from its configuration file does `),Ive=n(zZ,"STRONG",{});var JMt=s(Ive);J7r=r(JMt,"not"),JMt.forEach(t),Y7r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(zZ,"A",{href:!0});var YMt=s(HH);K7r=r(YMt,"from_pretrained()"),YMt.forEach(t),Z7r=r(zZ," to load the model weights."),zZ.forEach(t),eMr=i(w0),T(tE.$$.fragment,w0),w0.forEach(t),oMr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(IL.$$.fragment,xl),rMr=i(xl),qve=n(xl,"P",{});var KMt=s(qve);tMr=r(KMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KMt.forEach(t),aMr=i(xl),ln=n(xl,"P",{});var A0=s(ln);nMr=r(A0,"The model class to instantiate is selected based on the "),Nve=n(A0,"CODE",{});var ZMt=s(Nve);sMr=r(ZMt,"model_type"),ZMt.forEach(t),lMr=r(A0,` property of the config object (either
passed as an argument or loaded from `),jve=n(A0,"CODE",{});var e4t=s(jve);iMr=r(e4t,"pretrained_model_name_or_path"),e4t.forEach(t),dMr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(A0,"CODE",{});var o4t=s(Dve);cMr=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),fMr=r(A0,":"),A0.forEach(t),mMr=i(xl),qL=n(xl,"UL",{});var _De=s(qL);aE=n(_De,"LI",{});var ZRe=s(aE);Gve=n(ZRe,"STRONG",{});var r4t=s(Gve);gMr=r(r4t,"bert"),r4t.forEach(t),hMr=r(ZRe," \u2014 "),UH=n(ZRe,"A",{href:!0});var t4t=s(UH);pMr=r(t4t,"TFBertForNextSentencePrediction"),t4t.forEach(t),_Mr=r(ZRe," (BERT model)"),ZRe.forEach(t),uMr=i(_De),nE=n(_De,"LI",{});var ePe=s(nE);Ove=n(ePe,"STRONG",{});var a4t=s(Ove);bMr=r(a4t,"mobilebert"),a4t.forEach(t),vMr=r(ePe," \u2014 "),JH=n(ePe,"A",{href:!0});var n4t=s(JH);FMr=r(n4t,"TFMobileBertForNextSentencePrediction"),n4t.forEach(t),TMr=r(ePe," (MobileBERT model)"),ePe.forEach(t),_De.forEach(t),MMr=i(xl),T(sE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),cNe=i(f),gc=n(f,"H2",{class:!0});var uDe=s(gc);lE=n(uDe,"A",{id:!0,class:!0,href:!0});var s4t=s(lE);Vve=n(s4t,"SPAN",{});var l4t=s(Vve);T(NL.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),EMr=i(uDe),Xve=n(uDe,"SPAN",{});var i4t=s(Xve);CMr=r(i4t,"TFAutoModelForTableQuestionAnswering"),i4t.forEach(t),uDe.forEach(t),fNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(jL.$$.fragment,$l),wMr=i($l),hc=n($l,"P",{});var WZ=s(hc);AMr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YH=n(WZ,"A",{href:!0});var d4t=s(YH);yMr=r(d4t,"from_pretrained()"),d4t.forEach(t),LMr=r(WZ," class method or the "),KH=n(WZ,"A",{href:!0});var c4t=s(KH);xMr=r(c4t,"from_config()"),c4t.forEach(t),$Mr=r(WZ,` class
method.`),WZ.forEach(t),kMr=i($l),DL=n($l,"P",{});var bDe=s(DL);SMr=r(bDe,"This class cannot be instantiated directly using "),zve=n(bDe,"CODE",{});var f4t=s(zve);RMr=r(f4t,"__init__()"),f4t.forEach(t),PMr=r(bDe," (throws an error)."),bDe.forEach(t),BMr=i($l),It=n($l,"DIV",{class:!0});var y0=s(It);T(GL.$$.fragment,y0),IMr=i(y0),Wve=n(y0,"P",{});var m4t=s(Wve);qMr=r(m4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),m4t.forEach(t),NMr=i(y0),pc=n(y0,"P",{});var QZ=s(pc);jMr=r(QZ,`Note:
Loading a model from its configuration file does `),Qve=n(QZ,"STRONG",{});var g4t=s(Qve);DMr=r(g4t,"not"),g4t.forEach(t),GMr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(QZ,"A",{href:!0});var h4t=s(ZH);OMr=r(h4t,"from_pretrained()"),h4t.forEach(t),VMr=r(QZ," to load the model weights."),QZ.forEach(t),XMr=i(y0),T(iE.$$.fragment,y0),y0.forEach(t),zMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(OL.$$.fragment,kl),WMr=i(kl),Hve=n(kl,"P",{});var p4t=s(Hve);QMr=r(p4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),p4t.forEach(t),HMr=i(kl),dn=n(kl,"P",{});var L0=s(dn);UMr=r(L0,"The model class to instantiate is selected based on the "),Uve=n(L0,"CODE",{});var _4t=s(Uve);JMr=r(_4t,"model_type"),_4t.forEach(t),YMr=r(L0,` property of the config object (either
passed as an argument or loaded from `),Jve=n(L0,"CODE",{});var u4t=s(Jve);KMr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),ZMr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(L0,"CODE",{});var b4t=s(Yve);e4r=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),o4r=r(L0,":"),L0.forEach(t),r4r=i(kl),Kve=n(kl,"UL",{});var v4t=s(Kve);dE=n(v4t,"LI",{});var oPe=s(dE);Zve=n(oPe,"STRONG",{});var F4t=s(Zve);t4r=r(F4t,"tapas"),F4t.forEach(t),a4r=r(oPe," \u2014 "),eU=n(oPe,"A",{href:!0});var T4t=s(eU);n4r=r(T4t,"TFTapasForQuestionAnswering"),T4t.forEach(t),s4r=r(oPe," (TAPAS model)"),oPe.forEach(t),v4t.forEach(t),l4r=i(kl),T(cE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),mNe=i(f),_c=n(f,"H2",{class:!0});var vDe=s(_c);fE=n(vDe,"A",{id:!0,class:!0,href:!0});var M4t=s(fE);eFe=n(M4t,"SPAN",{});var E4t=s(eFe);T(VL.$$.fragment,E4t),E4t.forEach(t),M4t.forEach(t),i4r=i(vDe),oFe=n(vDe,"SPAN",{});var C4t=s(oFe);d4r=r(C4t,"TFAutoModelForTokenClassification"),C4t.forEach(t),vDe.forEach(t),gNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(XL.$$.fragment,Sl),c4r=i(Sl),uc=n(Sl,"P",{});var HZ=s(uc);f4r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oU=n(HZ,"A",{href:!0});var w4t=s(oU);m4r=r(w4t,"from_pretrained()"),w4t.forEach(t),g4r=r(HZ," class method or the "),rU=n(HZ,"A",{href:!0});var A4t=s(rU);h4r=r(A4t,"from_config()"),A4t.forEach(t),p4r=r(HZ,` class
method.`),HZ.forEach(t),_4r=i(Sl),zL=n(Sl,"P",{});var FDe=s(zL);u4r=r(FDe,"This class cannot be instantiated directly using "),rFe=n(FDe,"CODE",{});var y4t=s(rFe);b4r=r(y4t,"__init__()"),y4t.forEach(t),v4r=r(FDe," (throws an error)."),FDe.forEach(t),F4r=i(Sl),qt=n(Sl,"DIV",{class:!0});var x0=s(qt);T(WL.$$.fragment,x0),T4r=i(x0),tFe=n(x0,"P",{});var L4t=s(tFe);M4r=r(L4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),L4t.forEach(t),E4r=i(x0),bc=n(x0,"P",{});var UZ=s(bc);C4r=r(UZ,`Note:
Loading a model from its configuration file does `),aFe=n(UZ,"STRONG",{});var x4t=s(aFe);w4r=r(x4t,"not"),x4t.forEach(t),A4r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(UZ,"A",{href:!0});var $4t=s(tU);y4r=r($4t,"from_pretrained()"),$4t.forEach(t),L4r=r(UZ," to load the model weights."),UZ.forEach(t),x4r=i(x0),T(mE.$$.fragment,x0),x0.forEach(t),$4r=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(QL.$$.fragment,Rl),k4r=i(Rl),nFe=n(Rl,"P",{});var k4t=s(nFe);S4r=r(k4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k4t.forEach(t),R4r=i(Rl),cn=n(Rl,"P",{});var $0=s(cn);P4r=r($0,"The model class to instantiate is selected based on the "),sFe=n($0,"CODE",{});var S4t=s(sFe);B4r=r(S4t,"model_type"),S4t.forEach(t),I4r=r($0,` property of the config object (either
passed as an argument or loaded from `),lFe=n($0,"CODE",{});var R4t=s(lFe);q4r=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),N4r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n($0,"CODE",{});var P4t=s(iFe);j4r=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),D4r=r($0,":"),$0.forEach(t),G4r=i(Rl),de=n(Rl,"UL",{});var me=s(de);gE=n(me,"LI",{});var rPe=s(gE);dFe=n(rPe,"STRONG",{});var B4t=s(dFe);O4r=r(B4t,"albert"),B4t.forEach(t),V4r=r(rPe," \u2014 "),aU=n(rPe,"A",{href:!0});var I4t=s(aU);X4r=r(I4t,"TFAlbertForTokenClassification"),I4t.forEach(t),z4r=r(rPe," (ALBERT model)"),rPe.forEach(t),W4r=i(me),hE=n(me,"LI",{});var tPe=s(hE);cFe=n(tPe,"STRONG",{});var q4t=s(cFe);Q4r=r(q4t,"bert"),q4t.forEach(t),H4r=r(tPe," \u2014 "),nU=n(tPe,"A",{href:!0});var N4t=s(nU);U4r=r(N4t,"TFBertForTokenClassification"),N4t.forEach(t),J4r=r(tPe," (BERT model)"),tPe.forEach(t),Y4r=i(me),pE=n(me,"LI",{});var aPe=s(pE);fFe=n(aPe,"STRONG",{});var j4t=s(fFe);K4r=r(j4t,"camembert"),j4t.forEach(t),Z4r=r(aPe," \u2014 "),sU=n(aPe,"A",{href:!0});var D4t=s(sU);eEr=r(D4t,"TFCamembertForTokenClassification"),D4t.forEach(t),oEr=r(aPe," (CamemBERT model)"),aPe.forEach(t),rEr=i(me),_E=n(me,"LI",{});var nPe=s(_E);mFe=n(nPe,"STRONG",{});var G4t=s(mFe);tEr=r(G4t,"convbert"),G4t.forEach(t),aEr=r(nPe," \u2014 "),lU=n(nPe,"A",{href:!0});var O4t=s(lU);nEr=r(O4t,"TFConvBertForTokenClassification"),O4t.forEach(t),sEr=r(nPe," (ConvBERT model)"),nPe.forEach(t),lEr=i(me),uE=n(me,"LI",{});var sPe=s(uE);gFe=n(sPe,"STRONG",{});var V4t=s(gFe);iEr=r(V4t,"deberta"),V4t.forEach(t),dEr=r(sPe," \u2014 "),iU=n(sPe,"A",{href:!0});var X4t=s(iU);cEr=r(X4t,"TFDebertaForTokenClassification"),X4t.forEach(t),fEr=r(sPe," (DeBERTa model)"),sPe.forEach(t),mEr=i(me),bE=n(me,"LI",{});var lPe=s(bE);hFe=n(lPe,"STRONG",{});var z4t=s(hFe);gEr=r(z4t,"deberta-v2"),z4t.forEach(t),hEr=r(lPe," \u2014 "),dU=n(lPe,"A",{href:!0});var W4t=s(dU);pEr=r(W4t,"TFDebertaV2ForTokenClassification"),W4t.forEach(t),_Er=r(lPe," (DeBERTa-v2 model)"),lPe.forEach(t),uEr=i(me),vE=n(me,"LI",{});var iPe=s(vE);pFe=n(iPe,"STRONG",{});var Q4t=s(pFe);bEr=r(Q4t,"distilbert"),Q4t.forEach(t),vEr=r(iPe," \u2014 "),cU=n(iPe,"A",{href:!0});var H4t=s(cU);FEr=r(H4t,"TFDistilBertForTokenClassification"),H4t.forEach(t),TEr=r(iPe," (DistilBERT model)"),iPe.forEach(t),MEr=i(me),FE=n(me,"LI",{});var dPe=s(FE);_Fe=n(dPe,"STRONG",{});var U4t=s(_Fe);EEr=r(U4t,"electra"),U4t.forEach(t),CEr=r(dPe," \u2014 "),fU=n(dPe,"A",{href:!0});var J4t=s(fU);wEr=r(J4t,"TFElectraForTokenClassification"),J4t.forEach(t),AEr=r(dPe," (ELECTRA model)"),dPe.forEach(t),yEr=i(me),TE=n(me,"LI",{});var cPe=s(TE);uFe=n(cPe,"STRONG",{});var Y4t=s(uFe);LEr=r(Y4t,"flaubert"),Y4t.forEach(t),xEr=r(cPe," \u2014 "),mU=n(cPe,"A",{href:!0});var K4t=s(mU);$Er=r(K4t,"TFFlaubertForTokenClassification"),K4t.forEach(t),kEr=r(cPe," (FlauBERT model)"),cPe.forEach(t),SEr=i(me),ME=n(me,"LI",{});var fPe=s(ME);bFe=n(fPe,"STRONG",{});var Z4t=s(bFe);REr=r(Z4t,"funnel"),Z4t.forEach(t),PEr=r(fPe," \u2014 "),gU=n(fPe,"A",{href:!0});var eEt=s(gU);BEr=r(eEt,"TFFunnelForTokenClassification"),eEt.forEach(t),IEr=r(fPe," (Funnel Transformer model)"),fPe.forEach(t),qEr=i(me),EE=n(me,"LI",{});var mPe=s(EE);vFe=n(mPe,"STRONG",{});var oEt=s(vFe);NEr=r(oEt,"layoutlm"),oEt.forEach(t),jEr=r(mPe," \u2014 "),hU=n(mPe,"A",{href:!0});var rEt=s(hU);DEr=r(rEt,"TFLayoutLMForTokenClassification"),rEt.forEach(t),GEr=r(mPe," (LayoutLM model)"),mPe.forEach(t),OEr=i(me),CE=n(me,"LI",{});var gPe=s(CE);FFe=n(gPe,"STRONG",{});var tEt=s(FFe);VEr=r(tEt,"longformer"),tEt.forEach(t),XEr=r(gPe," \u2014 "),pU=n(gPe,"A",{href:!0});var aEt=s(pU);zEr=r(aEt,"TFLongformerForTokenClassification"),aEt.forEach(t),WEr=r(gPe," (Longformer model)"),gPe.forEach(t),QEr=i(me),wE=n(me,"LI",{});var hPe=s(wE);TFe=n(hPe,"STRONG",{});var nEt=s(TFe);HEr=r(nEt,"mobilebert"),nEt.forEach(t),UEr=r(hPe," \u2014 "),_U=n(hPe,"A",{href:!0});var sEt=s(_U);JEr=r(sEt,"TFMobileBertForTokenClassification"),sEt.forEach(t),YEr=r(hPe," (MobileBERT model)"),hPe.forEach(t),KEr=i(me),AE=n(me,"LI",{});var pPe=s(AE);MFe=n(pPe,"STRONG",{});var lEt=s(MFe);ZEr=r(lEt,"mpnet"),lEt.forEach(t),eCr=r(pPe," \u2014 "),uU=n(pPe,"A",{href:!0});var iEt=s(uU);oCr=r(iEt,"TFMPNetForTokenClassification"),iEt.forEach(t),rCr=r(pPe," (MPNet model)"),pPe.forEach(t),tCr=i(me),yE=n(me,"LI",{});var _Pe=s(yE);EFe=n(_Pe,"STRONG",{});var dEt=s(EFe);aCr=r(dEt,"rembert"),dEt.forEach(t),nCr=r(_Pe," \u2014 "),bU=n(_Pe,"A",{href:!0});var cEt=s(bU);sCr=r(cEt,"TFRemBertForTokenClassification"),cEt.forEach(t),lCr=r(_Pe," (RemBERT model)"),_Pe.forEach(t),iCr=i(me),LE=n(me,"LI",{});var uPe=s(LE);CFe=n(uPe,"STRONG",{});var fEt=s(CFe);dCr=r(fEt,"roberta"),fEt.forEach(t),cCr=r(uPe," \u2014 "),vU=n(uPe,"A",{href:!0});var mEt=s(vU);fCr=r(mEt,"TFRobertaForTokenClassification"),mEt.forEach(t),mCr=r(uPe," (RoBERTa model)"),uPe.forEach(t),gCr=i(me),xE=n(me,"LI",{});var bPe=s(xE);wFe=n(bPe,"STRONG",{});var gEt=s(wFe);hCr=r(gEt,"roformer"),gEt.forEach(t),pCr=r(bPe," \u2014 "),FU=n(bPe,"A",{href:!0});var hEt=s(FU);_Cr=r(hEt,"TFRoFormerForTokenClassification"),hEt.forEach(t),uCr=r(bPe," (RoFormer model)"),bPe.forEach(t),bCr=i(me),$E=n(me,"LI",{});var vPe=s($E);AFe=n(vPe,"STRONG",{});var pEt=s(AFe);vCr=r(pEt,"xlm"),pEt.forEach(t),FCr=r(vPe," \u2014 "),TU=n(vPe,"A",{href:!0});var _Et=s(TU);TCr=r(_Et,"TFXLMForTokenClassification"),_Et.forEach(t),MCr=r(vPe," (XLM model)"),vPe.forEach(t),ECr=i(me),kE=n(me,"LI",{});var FPe=s(kE);yFe=n(FPe,"STRONG",{});var uEt=s(yFe);CCr=r(uEt,"xlm-roberta"),uEt.forEach(t),wCr=r(FPe," \u2014 "),MU=n(FPe,"A",{href:!0});var bEt=s(MU);ACr=r(bEt,"TFXLMRobertaForTokenClassification"),bEt.forEach(t),yCr=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),LCr=i(me),SE=n(me,"LI",{});var TPe=s(SE);LFe=n(TPe,"STRONG",{});var vEt=s(LFe);xCr=r(vEt,"xlnet"),vEt.forEach(t),$Cr=r(TPe," \u2014 "),EU=n(TPe,"A",{href:!0});var FEt=s(EU);kCr=r(FEt,"TFXLNetForTokenClassification"),FEt.forEach(t),SCr=r(TPe," (XLNet model)"),TPe.forEach(t),me.forEach(t),RCr=i(Rl),T(RE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),hNe=i(f),vc=n(f,"H2",{class:!0});var TDe=s(vc);PE=n(TDe,"A",{id:!0,class:!0,href:!0});var TEt=s(PE);xFe=n(TEt,"SPAN",{});var MEt=s(xFe);T(HL.$$.fragment,MEt),MEt.forEach(t),TEt.forEach(t),PCr=i(TDe),$Fe=n(TDe,"SPAN",{});var EEt=s($Fe);BCr=r(EEt,"TFAutoModelForQuestionAnswering"),EEt.forEach(t),TDe.forEach(t),pNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(UL.$$.fragment,Pl),ICr=i(Pl),Fc=n(Pl,"P",{});var JZ=s(Fc);qCr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CU=n(JZ,"A",{href:!0});var CEt=s(CU);NCr=r(CEt,"from_pretrained()"),CEt.forEach(t),jCr=r(JZ," class method or the "),wU=n(JZ,"A",{href:!0});var wEt=s(wU);DCr=r(wEt,"from_config()"),wEt.forEach(t),GCr=r(JZ,` class
method.`),JZ.forEach(t),OCr=i(Pl),JL=n(Pl,"P",{});var MDe=s(JL);VCr=r(MDe,"This class cannot be instantiated directly using "),kFe=n(MDe,"CODE",{});var AEt=s(kFe);XCr=r(AEt,"__init__()"),AEt.forEach(t),zCr=r(MDe," (throws an error)."),MDe.forEach(t),WCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var k0=s(Nt);T(YL.$$.fragment,k0),QCr=i(k0),SFe=n(k0,"P",{});var yEt=s(SFe);HCr=r(yEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yEt.forEach(t),UCr=i(k0),Tc=n(k0,"P",{});var YZ=s(Tc);JCr=r(YZ,`Note:
Loading a model from its configuration file does `),RFe=n(YZ,"STRONG",{});var LEt=s(RFe);YCr=r(LEt,"not"),LEt.forEach(t),KCr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(YZ,"A",{href:!0});var xEt=s(AU);ZCr=r(xEt,"from_pretrained()"),xEt.forEach(t),e5r=r(YZ," to load the model weights."),YZ.forEach(t),o5r=i(k0),T(BE.$$.fragment,k0),k0.forEach(t),r5r=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(KL.$$.fragment,Bl),t5r=i(Bl),PFe=n(Bl,"P",{});var $Et=s(PFe);a5r=r($Et,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Et.forEach(t),n5r=i(Bl),fn=n(Bl,"P",{});var S0=s(fn);s5r=r(S0,"The model class to instantiate is selected based on the "),BFe=n(S0,"CODE",{});var kEt=s(BFe);l5r=r(kEt,"model_type"),kEt.forEach(t),i5r=r(S0,` property of the config object (either
passed as an argument or loaded from `),IFe=n(S0,"CODE",{});var SEt=s(IFe);d5r=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),c5r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(S0,"CODE",{});var REt=s(qFe);f5r=r(REt,"pretrained_model_name_or_path"),REt.forEach(t),m5r=r(S0,":"),S0.forEach(t),g5r=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);IE=n(ge,"LI",{});var MPe=s(IE);NFe=n(MPe,"STRONG",{});var PEt=s(NFe);h5r=r(PEt,"albert"),PEt.forEach(t),p5r=r(MPe," \u2014 "),yU=n(MPe,"A",{href:!0});var BEt=s(yU);_5r=r(BEt,"TFAlbertForQuestionAnswering"),BEt.forEach(t),u5r=r(MPe," (ALBERT model)"),MPe.forEach(t),b5r=i(ge),qE=n(ge,"LI",{});var EPe=s(qE);jFe=n(EPe,"STRONG",{});var IEt=s(jFe);v5r=r(IEt,"bert"),IEt.forEach(t),F5r=r(EPe," \u2014 "),LU=n(EPe,"A",{href:!0});var qEt=s(LU);T5r=r(qEt,"TFBertForQuestionAnswering"),qEt.forEach(t),M5r=r(EPe," (BERT model)"),EPe.forEach(t),E5r=i(ge),NE=n(ge,"LI",{});var CPe=s(NE);DFe=n(CPe,"STRONG",{});var NEt=s(DFe);C5r=r(NEt,"camembert"),NEt.forEach(t),w5r=r(CPe," \u2014 "),xU=n(CPe,"A",{href:!0});var jEt=s(xU);A5r=r(jEt,"TFCamembertForQuestionAnswering"),jEt.forEach(t),y5r=r(CPe," (CamemBERT model)"),CPe.forEach(t),L5r=i(ge),jE=n(ge,"LI",{});var wPe=s(jE);GFe=n(wPe,"STRONG",{});var DEt=s(GFe);x5r=r(DEt,"convbert"),DEt.forEach(t),$5r=r(wPe," \u2014 "),$U=n(wPe,"A",{href:!0});var GEt=s($U);k5r=r(GEt,"TFConvBertForQuestionAnswering"),GEt.forEach(t),S5r=r(wPe," (ConvBERT model)"),wPe.forEach(t),R5r=i(ge),DE=n(ge,"LI",{});var APe=s(DE);OFe=n(APe,"STRONG",{});var OEt=s(OFe);P5r=r(OEt,"deberta"),OEt.forEach(t),B5r=r(APe," \u2014 "),kU=n(APe,"A",{href:!0});var VEt=s(kU);I5r=r(VEt,"TFDebertaForQuestionAnswering"),VEt.forEach(t),q5r=r(APe," (DeBERTa model)"),APe.forEach(t),N5r=i(ge),GE=n(ge,"LI",{});var yPe=s(GE);VFe=n(yPe,"STRONG",{});var XEt=s(VFe);j5r=r(XEt,"deberta-v2"),XEt.forEach(t),D5r=r(yPe," \u2014 "),SU=n(yPe,"A",{href:!0});var zEt=s(SU);G5r=r(zEt,"TFDebertaV2ForQuestionAnswering"),zEt.forEach(t),O5r=r(yPe," (DeBERTa-v2 model)"),yPe.forEach(t),V5r=i(ge),OE=n(ge,"LI",{});var LPe=s(OE);XFe=n(LPe,"STRONG",{});var WEt=s(XFe);X5r=r(WEt,"distilbert"),WEt.forEach(t),z5r=r(LPe," \u2014 "),RU=n(LPe,"A",{href:!0});var QEt=s(RU);W5r=r(QEt,"TFDistilBertForQuestionAnswering"),QEt.forEach(t),Q5r=r(LPe," (DistilBERT model)"),LPe.forEach(t),H5r=i(ge),VE=n(ge,"LI",{});var xPe=s(VE);zFe=n(xPe,"STRONG",{});var HEt=s(zFe);U5r=r(HEt,"electra"),HEt.forEach(t),J5r=r(xPe," \u2014 "),PU=n(xPe,"A",{href:!0});var UEt=s(PU);Y5r=r(UEt,"TFElectraForQuestionAnswering"),UEt.forEach(t),K5r=r(xPe," (ELECTRA model)"),xPe.forEach(t),Z5r=i(ge),XE=n(ge,"LI",{});var $Pe=s(XE);WFe=n($Pe,"STRONG",{});var JEt=s(WFe);e3r=r(JEt,"flaubert"),JEt.forEach(t),o3r=r($Pe," \u2014 "),BU=n($Pe,"A",{href:!0});var YEt=s(BU);r3r=r(YEt,"TFFlaubertForQuestionAnsweringSimple"),YEt.forEach(t),t3r=r($Pe," (FlauBERT model)"),$Pe.forEach(t),a3r=i(ge),zE=n(ge,"LI",{});var kPe=s(zE);QFe=n(kPe,"STRONG",{});var KEt=s(QFe);n3r=r(KEt,"funnel"),KEt.forEach(t),s3r=r(kPe," \u2014 "),IU=n(kPe,"A",{href:!0});var ZEt=s(IU);l3r=r(ZEt,"TFFunnelForQuestionAnswering"),ZEt.forEach(t),i3r=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),d3r=i(ge),WE=n(ge,"LI",{});var SPe=s(WE);HFe=n(SPe,"STRONG",{});var eCt=s(HFe);c3r=r(eCt,"gptj"),eCt.forEach(t),f3r=r(SPe," \u2014 "),qU=n(SPe,"A",{href:!0});var oCt=s(qU);m3r=r(oCt,"TFGPTJForQuestionAnswering"),oCt.forEach(t),g3r=r(SPe," (GPT-J model)"),SPe.forEach(t),h3r=i(ge),QE=n(ge,"LI",{});var RPe=s(QE);UFe=n(RPe,"STRONG",{});var rCt=s(UFe);p3r=r(rCt,"longformer"),rCt.forEach(t),_3r=r(RPe," \u2014 "),NU=n(RPe,"A",{href:!0});var tCt=s(NU);u3r=r(tCt,"TFLongformerForQuestionAnswering"),tCt.forEach(t),b3r=r(RPe," (Longformer model)"),RPe.forEach(t),v3r=i(ge),HE=n(ge,"LI",{});var PPe=s(HE);JFe=n(PPe,"STRONG",{});var aCt=s(JFe);F3r=r(aCt,"mobilebert"),aCt.forEach(t),T3r=r(PPe," \u2014 "),jU=n(PPe,"A",{href:!0});var nCt=s(jU);M3r=r(nCt,"TFMobileBertForQuestionAnswering"),nCt.forEach(t),E3r=r(PPe," (MobileBERT model)"),PPe.forEach(t),C3r=i(ge),UE=n(ge,"LI",{});var BPe=s(UE);YFe=n(BPe,"STRONG",{});var sCt=s(YFe);w3r=r(sCt,"mpnet"),sCt.forEach(t),A3r=r(BPe," \u2014 "),DU=n(BPe,"A",{href:!0});var lCt=s(DU);y3r=r(lCt,"TFMPNetForQuestionAnswering"),lCt.forEach(t),L3r=r(BPe," (MPNet model)"),BPe.forEach(t),x3r=i(ge),JE=n(ge,"LI",{});var IPe=s(JE);KFe=n(IPe,"STRONG",{});var iCt=s(KFe);$3r=r(iCt,"rembert"),iCt.forEach(t),k3r=r(IPe," \u2014 "),GU=n(IPe,"A",{href:!0});var dCt=s(GU);S3r=r(dCt,"TFRemBertForQuestionAnswering"),dCt.forEach(t),R3r=r(IPe," (RemBERT model)"),IPe.forEach(t),P3r=i(ge),YE=n(ge,"LI",{});var qPe=s(YE);ZFe=n(qPe,"STRONG",{});var cCt=s(ZFe);B3r=r(cCt,"roberta"),cCt.forEach(t),I3r=r(qPe," \u2014 "),OU=n(qPe,"A",{href:!0});var fCt=s(OU);q3r=r(fCt,"TFRobertaForQuestionAnswering"),fCt.forEach(t),N3r=r(qPe," (RoBERTa model)"),qPe.forEach(t),j3r=i(ge),KE=n(ge,"LI",{});var NPe=s(KE);eTe=n(NPe,"STRONG",{});var mCt=s(eTe);D3r=r(mCt,"roformer"),mCt.forEach(t),G3r=r(NPe," \u2014 "),VU=n(NPe,"A",{href:!0});var gCt=s(VU);O3r=r(gCt,"TFRoFormerForQuestionAnswering"),gCt.forEach(t),V3r=r(NPe," (RoFormer model)"),NPe.forEach(t),X3r=i(ge),ZE=n(ge,"LI",{});var jPe=s(ZE);oTe=n(jPe,"STRONG",{});var hCt=s(oTe);z3r=r(hCt,"xlm"),hCt.forEach(t),W3r=r(jPe," \u2014 "),XU=n(jPe,"A",{href:!0});var pCt=s(XU);Q3r=r(pCt,"TFXLMForQuestionAnsweringSimple"),pCt.forEach(t),H3r=r(jPe," (XLM model)"),jPe.forEach(t),U3r=i(ge),eC=n(ge,"LI",{});var DPe=s(eC);rTe=n(DPe,"STRONG",{});var _Ct=s(rTe);J3r=r(_Ct,"xlm-roberta"),_Ct.forEach(t),Y3r=r(DPe," \u2014 "),zU=n(DPe,"A",{href:!0});var uCt=s(zU);K3r=r(uCt,"TFXLMRobertaForQuestionAnswering"),uCt.forEach(t),Z3r=r(DPe," (XLM-RoBERTa model)"),DPe.forEach(t),ewr=i(ge),oC=n(ge,"LI",{});var GPe=s(oC);tTe=n(GPe,"STRONG",{});var bCt=s(tTe);owr=r(bCt,"xlnet"),bCt.forEach(t),rwr=r(GPe," \u2014 "),WU=n(GPe,"A",{href:!0});var vCt=s(WU);twr=r(vCt,"TFXLNetForQuestionAnsweringSimple"),vCt.forEach(t),awr=r(GPe," (XLNet model)"),GPe.forEach(t),ge.forEach(t),nwr=i(Bl),T(rC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),_Ne=i(f),Mc=n(f,"H2",{class:!0});var EDe=s(Mc);tC=n(EDe,"A",{id:!0,class:!0,href:!0});var FCt=s(tC);aTe=n(FCt,"SPAN",{});var TCt=s(aTe);T(ZL.$$.fragment,TCt),TCt.forEach(t),FCt.forEach(t),swr=i(EDe),nTe=n(EDe,"SPAN",{});var MCt=s(nTe);lwr=r(MCt,"TFAutoModelForVision2Seq"),MCt.forEach(t),EDe.forEach(t),uNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(e8.$$.fragment,Il),iwr=i(Il),Ec=n(Il,"P",{});var KZ=s(Ec);dwr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QU=n(KZ,"A",{href:!0});var ECt=s(QU);cwr=r(ECt,"from_pretrained()"),ECt.forEach(t),fwr=r(KZ," class method or the "),HU=n(KZ,"A",{href:!0});var CCt=s(HU);mwr=r(CCt,"from_config()"),CCt.forEach(t),gwr=r(KZ,` class
method.`),KZ.forEach(t),hwr=i(Il),o8=n(Il,"P",{});var CDe=s(o8);pwr=r(CDe,"This class cannot be instantiated directly using "),sTe=n(CDe,"CODE",{});var wCt=s(sTe);_wr=r(wCt,"__init__()"),wCt.forEach(t),uwr=r(CDe," (throws an error)."),CDe.forEach(t),bwr=i(Il),jt=n(Il,"DIV",{class:!0});var R0=s(jt);T(r8.$$.fragment,R0),vwr=i(R0),lTe=n(R0,"P",{});var ACt=s(lTe);Fwr=r(ACt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ACt.forEach(t),Twr=i(R0),Cc=n(R0,"P",{});var ZZ=s(Cc);Mwr=r(ZZ,`Note:
Loading a model from its configuration file does `),iTe=n(ZZ,"STRONG",{});var yCt=s(iTe);Ewr=r(yCt,"not"),yCt.forEach(t),Cwr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(ZZ,"A",{href:!0});var LCt=s(UU);wwr=r(LCt,"from_pretrained()"),LCt.forEach(t),Awr=r(ZZ," to load the model weights."),ZZ.forEach(t),ywr=i(R0),T(aC.$$.fragment,R0),R0.forEach(t),Lwr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(t8.$$.fragment,ql),xwr=i(ql),dTe=n(ql,"P",{});var xCt=s(dTe);$wr=r(xCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xCt.forEach(t),kwr=i(ql),mn=n(ql,"P",{});var P0=s(mn);Swr=r(P0,"The model class to instantiate is selected based on the "),cTe=n(P0,"CODE",{});var $Ct=s(cTe);Rwr=r($Ct,"model_type"),$Ct.forEach(t),Pwr=r(P0,` property of the config object (either
passed as an argument or loaded from `),fTe=n(P0,"CODE",{});var kCt=s(fTe);Bwr=r(kCt,"pretrained_model_name_or_path"),kCt.forEach(t),Iwr=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(P0,"CODE",{});var SCt=s(mTe);qwr=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),Nwr=r(P0,":"),P0.forEach(t),jwr=i(ql),gTe=n(ql,"UL",{});var RCt=s(gTe);nC=n(RCt,"LI",{});var OPe=s(nC);hTe=n(OPe,"STRONG",{});var PCt=s(hTe);Dwr=r(PCt,"vision-encoder-decoder"),PCt.forEach(t),Gwr=r(OPe," \u2014 "),JU=n(OPe,"A",{href:!0});var BCt=s(JU);Owr=r(BCt,"TFVisionEncoderDecoderModel"),BCt.forEach(t),Vwr=r(OPe," (Vision Encoder decoder model)"),OPe.forEach(t),RCt.forEach(t),Xwr=i(ql),T(sC.$$.fragment,ql),ql.forEach(t),Il.forEach(t),bNe=i(f),wc=n(f,"H2",{class:!0});var wDe=s(wc);lC=n(wDe,"A",{id:!0,class:!0,href:!0});var ICt=s(lC);pTe=n(ICt,"SPAN",{});var qCt=s(pTe);T(a8.$$.fragment,qCt),qCt.forEach(t),ICt.forEach(t),zwr=i(wDe),_Te=n(wDe,"SPAN",{});var NCt=s(_Te);Wwr=r(NCt,"TFAutoModelForSpeechSeq2Seq"),NCt.forEach(t),wDe.forEach(t),vNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(n8.$$.fragment,Nl),Qwr=i(Nl),Ac=n(Nl,"P",{});var eee=s(Ac);Hwr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YU=n(eee,"A",{href:!0});var jCt=s(YU);Uwr=r(jCt,"from_pretrained()"),jCt.forEach(t),Jwr=r(eee," class method or the "),KU=n(eee,"A",{href:!0});var DCt=s(KU);Ywr=r(DCt,"from_config()"),DCt.forEach(t),Kwr=r(eee,` class
method.`),eee.forEach(t),Zwr=i(Nl),s8=n(Nl,"P",{});var ADe=s(s8);e0r=r(ADe,"This class cannot be instantiated directly using "),uTe=n(ADe,"CODE",{});var GCt=s(uTe);o0r=r(GCt,"__init__()"),GCt.forEach(t),r0r=r(ADe," (throws an error)."),ADe.forEach(t),t0r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var B0=s(Dt);T(l8.$$.fragment,B0),a0r=i(B0),bTe=n(B0,"P",{});var OCt=s(bTe);n0r=r(OCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OCt.forEach(t),s0r=i(B0),yc=n(B0,"P",{});var oee=s(yc);l0r=r(oee,`Note:
Loading a model from its configuration file does `),vTe=n(oee,"STRONG",{});var VCt=s(vTe);i0r=r(VCt,"not"),VCt.forEach(t),d0r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(oee,"A",{href:!0});var XCt=s(ZU);c0r=r(XCt,"from_pretrained()"),XCt.forEach(t),f0r=r(oee," to load the model weights."),oee.forEach(t),m0r=i(B0),T(iC.$$.fragment,B0),B0.forEach(t),g0r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(i8.$$.fragment,jl),h0r=i(jl),FTe=n(jl,"P",{});var zCt=s(FTe);p0r=r(zCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zCt.forEach(t),_0r=i(jl),gn=n(jl,"P",{});var I0=s(gn);u0r=r(I0,"The model class to instantiate is selected based on the "),TTe=n(I0,"CODE",{});var WCt=s(TTe);b0r=r(WCt,"model_type"),WCt.forEach(t),v0r=r(I0,` property of the config object (either
passed as an argument or loaded from `),MTe=n(I0,"CODE",{});var QCt=s(MTe);F0r=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),T0r=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(I0,"CODE",{});var HCt=s(ETe);M0r=r(HCt,"pretrained_model_name_or_path"),HCt.forEach(t),E0r=r(I0,":"),I0.forEach(t),C0r=i(jl),CTe=n(jl,"UL",{});var UCt=s(CTe);dC=n(UCt,"LI",{});var VPe=s(dC);wTe=n(VPe,"STRONG",{});var JCt=s(wTe);w0r=r(JCt,"speech_to_text"),JCt.forEach(t),A0r=r(VPe," \u2014 "),eJ=n(VPe,"A",{href:!0});var YCt=s(eJ);y0r=r(YCt,"TFSpeech2TextForConditionalGeneration"),YCt.forEach(t),L0r=r(VPe," (Speech2Text model)"),VPe.forEach(t),UCt.forEach(t),x0r=i(jl),T(cC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),FNe=i(f),Lc=n(f,"H2",{class:!0});var yDe=s(Lc);fC=n(yDe,"A",{id:!0,class:!0,href:!0});var KCt=s(fC);ATe=n(KCt,"SPAN",{});var ZCt=s(ATe);T(d8.$$.fragment,ZCt),ZCt.forEach(t),KCt.forEach(t),$0r=i(yDe),yTe=n(yDe,"SPAN",{});var e5t=s(yTe);k0r=r(e5t,"FlaxAutoModel"),e5t.forEach(t),yDe.forEach(t),TNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(c8.$$.fragment,Dl),S0r=i(Dl),xc=n(Dl,"P",{});var ree=s(xc);R0r=r(ree,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oJ=n(ree,"A",{href:!0});var o5t=s(oJ);P0r=r(o5t,"from_pretrained()"),o5t.forEach(t),B0r=r(ree," class method or the "),rJ=n(ree,"A",{href:!0});var r5t=s(rJ);I0r=r(r5t,"from_config()"),r5t.forEach(t),q0r=r(ree,` class
method.`),ree.forEach(t),N0r=i(Dl),f8=n(Dl,"P",{});var LDe=s(f8);j0r=r(LDe,"This class cannot be instantiated directly using "),LTe=n(LDe,"CODE",{});var t5t=s(LTe);D0r=r(t5t,"__init__()"),t5t.forEach(t),G0r=r(LDe," (throws an error)."),LDe.forEach(t),O0r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var q0=s(Gt);T(m8.$$.fragment,q0),V0r=i(q0),xTe=n(q0,"P",{});var a5t=s(xTe);X0r=r(a5t,"Instantiates one of the base model classes of the library from a configuration."),a5t.forEach(t),z0r=i(q0),$c=n(q0,"P",{});var tee=s($c);W0r=r(tee,`Note:
Loading a model from its configuration file does `),$Te=n(tee,"STRONG",{});var n5t=s($Te);Q0r=r(n5t,"not"),n5t.forEach(t),H0r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(tee,"A",{href:!0});var s5t=s(tJ);U0r=r(s5t,"from_pretrained()"),s5t.forEach(t),J0r=r(tee," to load the model weights."),tee.forEach(t),Y0r=i(q0),T(mC.$$.fragment,q0),q0.forEach(t),K0r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(g8.$$.fragment,Gl),Z0r=i(Gl),kTe=n(Gl,"P",{});var l5t=s(kTe);eAr=r(l5t,"Instantiate one of the base model classes of the library from a pretrained model."),l5t.forEach(t),oAr=i(Gl),hn=n(Gl,"P",{});var N0=s(hn);rAr=r(N0,"The model class to instantiate is selected based on the "),STe=n(N0,"CODE",{});var i5t=s(STe);tAr=r(i5t,"model_type"),i5t.forEach(t),aAr=r(N0,` property of the config object (either
passed as an argument or loaded from `),RTe=n(N0,"CODE",{});var d5t=s(RTe);nAr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),sAr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(N0,"CODE",{});var c5t=s(PTe);lAr=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),iAr=r(N0,":"),N0.forEach(t),dAr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);gC=n(ne,"LI",{});var XPe=s(gC);BTe=n(XPe,"STRONG",{});var f5t=s(BTe);cAr=r(f5t,"albert"),f5t.forEach(t),fAr=r(XPe," \u2014 "),aJ=n(XPe,"A",{href:!0});var m5t=s(aJ);mAr=r(m5t,"FlaxAlbertModel"),m5t.forEach(t),gAr=r(XPe," (ALBERT model)"),XPe.forEach(t),hAr=i(ne),hC=n(ne,"LI",{});var zPe=s(hC);ITe=n(zPe,"STRONG",{});var g5t=s(ITe);pAr=r(g5t,"bart"),g5t.forEach(t),_Ar=r(zPe," \u2014 "),nJ=n(zPe,"A",{href:!0});var h5t=s(nJ);uAr=r(h5t,"FlaxBartModel"),h5t.forEach(t),bAr=r(zPe," (BART model)"),zPe.forEach(t),vAr=i(ne),pC=n(ne,"LI",{});var WPe=s(pC);qTe=n(WPe,"STRONG",{});var p5t=s(qTe);FAr=r(p5t,"beit"),p5t.forEach(t),TAr=r(WPe," \u2014 "),sJ=n(WPe,"A",{href:!0});var _5t=s(sJ);MAr=r(_5t,"FlaxBeitModel"),_5t.forEach(t),EAr=r(WPe," (BEiT model)"),WPe.forEach(t),CAr=i(ne),_C=n(ne,"LI",{});var QPe=s(_C);NTe=n(QPe,"STRONG",{});var u5t=s(NTe);wAr=r(u5t,"bert"),u5t.forEach(t),AAr=r(QPe," \u2014 "),lJ=n(QPe,"A",{href:!0});var b5t=s(lJ);yAr=r(b5t,"FlaxBertModel"),b5t.forEach(t),LAr=r(QPe," (BERT model)"),QPe.forEach(t),xAr=i(ne),uC=n(ne,"LI",{});var HPe=s(uC);jTe=n(HPe,"STRONG",{});var v5t=s(jTe);$Ar=r(v5t,"big_bird"),v5t.forEach(t),kAr=r(HPe," \u2014 "),iJ=n(HPe,"A",{href:!0});var F5t=s(iJ);SAr=r(F5t,"FlaxBigBirdModel"),F5t.forEach(t),RAr=r(HPe," (BigBird model)"),HPe.forEach(t),PAr=i(ne),bC=n(ne,"LI",{});var UPe=s(bC);DTe=n(UPe,"STRONG",{});var T5t=s(DTe);BAr=r(T5t,"blenderbot"),T5t.forEach(t),IAr=r(UPe," \u2014 "),dJ=n(UPe,"A",{href:!0});var M5t=s(dJ);qAr=r(M5t,"FlaxBlenderbotModel"),M5t.forEach(t),NAr=r(UPe," (Blenderbot model)"),UPe.forEach(t),jAr=i(ne),vC=n(ne,"LI",{});var JPe=s(vC);GTe=n(JPe,"STRONG",{});var E5t=s(GTe);DAr=r(E5t,"blenderbot-small"),E5t.forEach(t),GAr=r(JPe," \u2014 "),cJ=n(JPe,"A",{href:!0});var C5t=s(cJ);OAr=r(C5t,"FlaxBlenderbotSmallModel"),C5t.forEach(t),VAr=r(JPe," (BlenderbotSmall model)"),JPe.forEach(t),XAr=i(ne),FC=n(ne,"LI",{});var YPe=s(FC);OTe=n(YPe,"STRONG",{});var w5t=s(OTe);zAr=r(w5t,"clip"),w5t.forEach(t),WAr=r(YPe," \u2014 "),fJ=n(YPe,"A",{href:!0});var A5t=s(fJ);QAr=r(A5t,"FlaxCLIPModel"),A5t.forEach(t),HAr=r(YPe," (CLIP model)"),YPe.forEach(t),UAr=i(ne),TC=n(ne,"LI",{});var KPe=s(TC);VTe=n(KPe,"STRONG",{});var y5t=s(VTe);JAr=r(y5t,"distilbert"),y5t.forEach(t),YAr=r(KPe," \u2014 "),mJ=n(KPe,"A",{href:!0});var L5t=s(mJ);KAr=r(L5t,"FlaxDistilBertModel"),L5t.forEach(t),ZAr=r(KPe," (DistilBERT model)"),KPe.forEach(t),e6r=i(ne),MC=n(ne,"LI",{});var ZPe=s(MC);XTe=n(ZPe,"STRONG",{});var x5t=s(XTe);o6r=r(x5t,"electra"),x5t.forEach(t),r6r=r(ZPe," \u2014 "),gJ=n(ZPe,"A",{href:!0});var $5t=s(gJ);t6r=r($5t,"FlaxElectraModel"),$5t.forEach(t),a6r=r(ZPe," (ELECTRA model)"),ZPe.forEach(t),n6r=i(ne),EC=n(ne,"LI",{});var eBe=s(EC);zTe=n(eBe,"STRONG",{});var k5t=s(zTe);s6r=r(k5t,"gpt2"),k5t.forEach(t),l6r=r(eBe," \u2014 "),hJ=n(eBe,"A",{href:!0});var S5t=s(hJ);i6r=r(S5t,"FlaxGPT2Model"),S5t.forEach(t),d6r=r(eBe," (OpenAI GPT-2 model)"),eBe.forEach(t),c6r=i(ne),CC=n(ne,"LI",{});var oBe=s(CC);WTe=n(oBe,"STRONG",{});var R5t=s(WTe);f6r=r(R5t,"gpt_neo"),R5t.forEach(t),m6r=r(oBe," \u2014 "),pJ=n(oBe,"A",{href:!0});var P5t=s(pJ);g6r=r(P5t,"FlaxGPTNeoModel"),P5t.forEach(t),h6r=r(oBe," (GPT Neo model)"),oBe.forEach(t),p6r=i(ne),wC=n(ne,"LI",{});var rBe=s(wC);QTe=n(rBe,"STRONG",{});var B5t=s(QTe);_6r=r(B5t,"gptj"),B5t.forEach(t),u6r=r(rBe," \u2014 "),_J=n(rBe,"A",{href:!0});var I5t=s(_J);b6r=r(I5t,"FlaxGPTJModel"),I5t.forEach(t),v6r=r(rBe," (GPT-J model)"),rBe.forEach(t),F6r=i(ne),AC=n(ne,"LI",{});var tBe=s(AC);HTe=n(tBe,"STRONG",{});var q5t=s(HTe);T6r=r(q5t,"marian"),q5t.forEach(t),M6r=r(tBe," \u2014 "),uJ=n(tBe,"A",{href:!0});var N5t=s(uJ);E6r=r(N5t,"FlaxMarianModel"),N5t.forEach(t),C6r=r(tBe," (Marian model)"),tBe.forEach(t),w6r=i(ne),yC=n(ne,"LI",{});var aBe=s(yC);UTe=n(aBe,"STRONG",{});var j5t=s(UTe);A6r=r(j5t,"mbart"),j5t.forEach(t),y6r=r(aBe," \u2014 "),bJ=n(aBe,"A",{href:!0});var D5t=s(bJ);L6r=r(D5t,"FlaxMBartModel"),D5t.forEach(t),x6r=r(aBe," (mBART model)"),aBe.forEach(t),$6r=i(ne),LC=n(ne,"LI",{});var nBe=s(LC);JTe=n(nBe,"STRONG",{});var G5t=s(JTe);k6r=r(G5t,"mt5"),G5t.forEach(t),S6r=r(nBe," \u2014 "),vJ=n(nBe,"A",{href:!0});var O5t=s(vJ);R6r=r(O5t,"FlaxMT5Model"),O5t.forEach(t),P6r=r(nBe," (mT5 model)"),nBe.forEach(t),B6r=i(ne),xC=n(ne,"LI",{});var sBe=s(xC);YTe=n(sBe,"STRONG",{});var V5t=s(YTe);I6r=r(V5t,"pegasus"),V5t.forEach(t),q6r=r(sBe," \u2014 "),FJ=n(sBe,"A",{href:!0});var X5t=s(FJ);N6r=r(X5t,"FlaxPegasusModel"),X5t.forEach(t),j6r=r(sBe," (Pegasus model)"),sBe.forEach(t),D6r=i(ne),$C=n(ne,"LI",{});var lBe=s($C);KTe=n(lBe,"STRONG",{});var z5t=s(KTe);G6r=r(z5t,"roberta"),z5t.forEach(t),O6r=r(lBe," \u2014 "),TJ=n(lBe,"A",{href:!0});var W5t=s(TJ);V6r=r(W5t,"FlaxRobertaModel"),W5t.forEach(t),X6r=r(lBe," (RoBERTa model)"),lBe.forEach(t),z6r=i(ne),kC=n(ne,"LI",{});var iBe=s(kC);ZTe=n(iBe,"STRONG",{});var Q5t=s(ZTe);W6r=r(Q5t,"roformer"),Q5t.forEach(t),Q6r=r(iBe," \u2014 "),MJ=n(iBe,"A",{href:!0});var H5t=s(MJ);H6r=r(H5t,"FlaxRoFormerModel"),H5t.forEach(t),U6r=r(iBe," (RoFormer model)"),iBe.forEach(t),J6r=i(ne),SC=n(ne,"LI",{});var dBe=s(SC);e7e=n(dBe,"STRONG",{});var U5t=s(e7e);Y6r=r(U5t,"t5"),U5t.forEach(t),K6r=r(dBe," \u2014 "),EJ=n(dBe,"A",{href:!0});var J5t=s(EJ);Z6r=r(J5t,"FlaxT5Model"),J5t.forEach(t),eyr=r(dBe," (T5 model)"),dBe.forEach(t),oyr=i(ne),RC=n(ne,"LI",{});var cBe=s(RC);o7e=n(cBe,"STRONG",{});var Y5t=s(o7e);ryr=r(Y5t,"vision-text-dual-encoder"),Y5t.forEach(t),tyr=r(cBe," \u2014 "),CJ=n(cBe,"A",{href:!0});var K5t=s(CJ);ayr=r(K5t,"FlaxVisionTextDualEncoderModel"),K5t.forEach(t),nyr=r(cBe," (VisionTextDualEncoder model)"),cBe.forEach(t),syr=i(ne),PC=n(ne,"LI",{});var fBe=s(PC);r7e=n(fBe,"STRONG",{});var Z5t=s(r7e);lyr=r(Z5t,"vit"),Z5t.forEach(t),iyr=r(fBe," \u2014 "),wJ=n(fBe,"A",{href:!0});var e3t=s(wJ);dyr=r(e3t,"FlaxViTModel"),e3t.forEach(t),cyr=r(fBe," (ViT model)"),fBe.forEach(t),fyr=i(ne),BC=n(ne,"LI",{});var mBe=s(BC);t7e=n(mBe,"STRONG",{});var o3t=s(t7e);myr=r(o3t,"wav2vec2"),o3t.forEach(t),gyr=r(mBe," \u2014 "),AJ=n(mBe,"A",{href:!0});var r3t=s(AJ);hyr=r(r3t,"FlaxWav2Vec2Model"),r3t.forEach(t),pyr=r(mBe," (Wav2Vec2 model)"),mBe.forEach(t),_yr=i(ne),IC=n(ne,"LI",{});var gBe=s(IC);a7e=n(gBe,"STRONG",{});var t3t=s(a7e);uyr=r(t3t,"xglm"),t3t.forEach(t),byr=r(gBe," \u2014 "),yJ=n(gBe,"A",{href:!0});var a3t=s(yJ);vyr=r(a3t,"FlaxXGLMModel"),a3t.forEach(t),Fyr=r(gBe," (XGLM model)"),gBe.forEach(t),Tyr=i(ne),qC=n(ne,"LI",{});var hBe=s(qC);n7e=n(hBe,"STRONG",{});var n3t=s(n7e);Myr=r(n3t,"xlm-roberta"),n3t.forEach(t),Eyr=r(hBe," \u2014 "),LJ=n(hBe,"A",{href:!0});var s3t=s(LJ);Cyr=r(s3t,"FlaxXLMRobertaModel"),s3t.forEach(t),wyr=r(hBe," (XLM-RoBERTa model)"),hBe.forEach(t),ne.forEach(t),Ayr=i(Gl),T(NC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),MNe=i(f),kc=n(f,"H2",{class:!0});var xDe=s(kc);jC=n(xDe,"A",{id:!0,class:!0,href:!0});var l3t=s(jC);s7e=n(l3t,"SPAN",{});var i3t=s(s7e);T(h8.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),yyr=i(xDe),l7e=n(xDe,"SPAN",{});var d3t=s(l7e);Lyr=r(d3t,"FlaxAutoModelForCausalLM"),d3t.forEach(t),xDe.forEach(t),ENe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(p8.$$.fragment,Ol),xyr=i(Ol),Sc=n(Ol,"P",{});var aee=s(Sc);$yr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=n(aee,"A",{href:!0});var c3t=s(xJ);kyr=r(c3t,"from_pretrained()"),c3t.forEach(t),Syr=r(aee," class method or the "),$J=n(aee,"A",{href:!0});var f3t=s($J);Ryr=r(f3t,"from_config()"),f3t.forEach(t),Pyr=r(aee,` class
method.`),aee.forEach(t),Byr=i(Ol),_8=n(Ol,"P",{});var $De=s(_8);Iyr=r($De,"This class cannot be instantiated directly using "),i7e=n($De,"CODE",{});var m3t=s(i7e);qyr=r(m3t,"__init__()"),m3t.forEach(t),Nyr=r($De," (throws an error)."),$De.forEach(t),jyr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var j0=s(Ot);T(u8.$$.fragment,j0),Dyr=i(j0),d7e=n(j0,"P",{});var g3t=s(d7e);Gyr=r(g3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g3t.forEach(t),Oyr=i(j0),Rc=n(j0,"P",{});var nee=s(Rc);Vyr=r(nee,`Note:
Loading a model from its configuration file does `),c7e=n(nee,"STRONG",{});var h3t=s(c7e);Xyr=r(h3t,"not"),h3t.forEach(t),zyr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(nee,"A",{href:!0});var p3t=s(kJ);Wyr=r(p3t,"from_pretrained()"),p3t.forEach(t),Qyr=r(nee," to load the model weights."),nee.forEach(t),Hyr=i(j0),T(DC.$$.fragment,j0),j0.forEach(t),Uyr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(b8.$$.fragment,Vl),Jyr=i(Vl),f7e=n(Vl,"P",{});var _3t=s(f7e);Yyr=r(_3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_3t.forEach(t),Kyr=i(Vl),pn=n(Vl,"P",{});var D0=s(pn);Zyr=r(D0,"The model class to instantiate is selected based on the "),m7e=n(D0,"CODE",{});var u3t=s(m7e);eLr=r(u3t,"model_type"),u3t.forEach(t),oLr=r(D0,` property of the config object (either
passed as an argument or loaded from `),g7e=n(D0,"CODE",{});var b3t=s(g7e);rLr=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),tLr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h7e=n(D0,"CODE",{});var v3t=s(h7e);aLr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),nLr=r(D0,":"),D0.forEach(t),sLr=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);GC=n(Xe,"LI",{});var pBe=s(GC);p7e=n(pBe,"STRONG",{});var F3t=s(p7e);lLr=r(F3t,"bart"),F3t.forEach(t),iLr=r(pBe," \u2014 "),SJ=n(pBe,"A",{href:!0});var T3t=s(SJ);dLr=r(T3t,"FlaxBartForCausalLM"),T3t.forEach(t),cLr=r(pBe," (BART model)"),pBe.forEach(t),fLr=i(Xe),OC=n(Xe,"LI",{});var _Be=s(OC);_7e=n(_Be,"STRONG",{});var M3t=s(_7e);mLr=r(M3t,"bert"),M3t.forEach(t),gLr=r(_Be," \u2014 "),RJ=n(_Be,"A",{href:!0});var E3t=s(RJ);hLr=r(E3t,"FlaxBertForCausalLM"),E3t.forEach(t),pLr=r(_Be," (BERT model)"),_Be.forEach(t),_Lr=i(Xe),VC=n(Xe,"LI",{});var uBe=s(VC);u7e=n(uBe,"STRONG",{});var C3t=s(u7e);uLr=r(C3t,"big_bird"),C3t.forEach(t),bLr=r(uBe," \u2014 "),PJ=n(uBe,"A",{href:!0});var w3t=s(PJ);vLr=r(w3t,"FlaxBigBirdForCausalLM"),w3t.forEach(t),FLr=r(uBe," (BigBird model)"),uBe.forEach(t),TLr=i(Xe),XC=n(Xe,"LI",{});var bBe=s(XC);b7e=n(bBe,"STRONG",{});var A3t=s(b7e);MLr=r(A3t,"electra"),A3t.forEach(t),ELr=r(bBe," \u2014 "),BJ=n(bBe,"A",{href:!0});var y3t=s(BJ);CLr=r(y3t,"FlaxElectraForCausalLM"),y3t.forEach(t),wLr=r(bBe," (ELECTRA model)"),bBe.forEach(t),ALr=i(Xe),zC=n(Xe,"LI",{});var vBe=s(zC);v7e=n(vBe,"STRONG",{});var L3t=s(v7e);yLr=r(L3t,"gpt2"),L3t.forEach(t),LLr=r(vBe," \u2014 "),IJ=n(vBe,"A",{href:!0});var x3t=s(IJ);xLr=r(x3t,"FlaxGPT2LMHeadModel"),x3t.forEach(t),$Lr=r(vBe," (OpenAI GPT-2 model)"),vBe.forEach(t),kLr=i(Xe),WC=n(Xe,"LI",{});var FBe=s(WC);F7e=n(FBe,"STRONG",{});var $3t=s(F7e);SLr=r($3t,"gpt_neo"),$3t.forEach(t),RLr=r(FBe," \u2014 "),qJ=n(FBe,"A",{href:!0});var k3t=s(qJ);PLr=r(k3t,"FlaxGPTNeoForCausalLM"),k3t.forEach(t),BLr=r(FBe," (GPT Neo model)"),FBe.forEach(t),ILr=i(Xe),QC=n(Xe,"LI",{});var TBe=s(QC);T7e=n(TBe,"STRONG",{});var S3t=s(T7e);qLr=r(S3t,"gptj"),S3t.forEach(t),NLr=r(TBe," \u2014 "),NJ=n(TBe,"A",{href:!0});var R3t=s(NJ);jLr=r(R3t,"FlaxGPTJForCausalLM"),R3t.forEach(t),DLr=r(TBe," (GPT-J model)"),TBe.forEach(t),GLr=i(Xe),HC=n(Xe,"LI",{});var MBe=s(HC);M7e=n(MBe,"STRONG",{});var P3t=s(M7e);OLr=r(P3t,"roberta"),P3t.forEach(t),VLr=r(MBe," \u2014 "),jJ=n(MBe,"A",{href:!0});var B3t=s(jJ);XLr=r(B3t,"FlaxRobertaForCausalLM"),B3t.forEach(t),zLr=r(MBe," (RoBERTa model)"),MBe.forEach(t),WLr=i(Xe),UC=n(Xe,"LI",{});var EBe=s(UC);E7e=n(EBe,"STRONG",{});var I3t=s(E7e);QLr=r(I3t,"xglm"),I3t.forEach(t),HLr=r(EBe," \u2014 "),DJ=n(EBe,"A",{href:!0});var q3t=s(DJ);ULr=r(q3t,"FlaxXGLMForCausalLM"),q3t.forEach(t),JLr=r(EBe," (XGLM model)"),EBe.forEach(t),Xe.forEach(t),YLr=i(Vl),T(JC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),CNe=i(f),Pc=n(f,"H2",{class:!0});var kDe=s(Pc);YC=n(kDe,"A",{id:!0,class:!0,href:!0});var N3t=s(YC);C7e=n(N3t,"SPAN",{});var j3t=s(C7e);T(v8.$$.fragment,j3t),j3t.forEach(t),N3t.forEach(t),KLr=i(kDe),w7e=n(kDe,"SPAN",{});var D3t=s(w7e);ZLr=r(D3t,"FlaxAutoModelForPreTraining"),D3t.forEach(t),kDe.forEach(t),wNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(F8.$$.fragment,Xl),e8r=i(Xl),Bc=n(Xl,"P",{});var see=s(Bc);o8r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GJ=n(see,"A",{href:!0});var G3t=s(GJ);r8r=r(G3t,"from_pretrained()"),G3t.forEach(t),t8r=r(see," class method or the "),OJ=n(see,"A",{href:!0});var O3t=s(OJ);a8r=r(O3t,"from_config()"),O3t.forEach(t),n8r=r(see,` class
method.`),see.forEach(t),s8r=i(Xl),T8=n(Xl,"P",{});var SDe=s(T8);l8r=r(SDe,"This class cannot be instantiated directly using "),A7e=n(SDe,"CODE",{});var V3t=s(A7e);i8r=r(V3t,"__init__()"),V3t.forEach(t),d8r=r(SDe," (throws an error)."),SDe.forEach(t),c8r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var G0=s(Vt);T(M8.$$.fragment,G0),f8r=i(G0),y7e=n(G0,"P",{});var X3t=s(y7e);m8r=r(X3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),X3t.forEach(t),g8r=i(G0),Ic=n(G0,"P",{});var lee=s(Ic);h8r=r(lee,`Note:
Loading a model from its configuration file does `),L7e=n(lee,"STRONG",{});var z3t=s(L7e);p8r=r(z3t,"not"),z3t.forEach(t),_8r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(lee,"A",{href:!0});var W3t=s(VJ);u8r=r(W3t,"from_pretrained()"),W3t.forEach(t),b8r=r(lee," to load the model weights."),lee.forEach(t),v8r=i(G0),T(KC.$$.fragment,G0),G0.forEach(t),F8r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(E8.$$.fragment,zl),T8r=i(zl),x7e=n(zl,"P",{});var Q3t=s(x7e);M8r=r(Q3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q3t.forEach(t),E8r=i(zl),_n=n(zl,"P",{});var O0=s(_n);C8r=r(O0,"The model class to instantiate is selected based on the "),$7e=n(O0,"CODE",{});var H3t=s($7e);w8r=r(H3t,"model_type"),H3t.forEach(t),A8r=r(O0,` property of the config object (either
passed as an argument or loaded from `),k7e=n(O0,"CODE",{});var U3t=s(k7e);y8r=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),L8r=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(O0,"CODE",{});var J3t=s(S7e);x8r=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),$8r=r(O0,":"),O0.forEach(t),k8r=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);ZC=n(we,"LI",{});var CBe=s(ZC);R7e=n(CBe,"STRONG",{});var Y3t=s(R7e);S8r=r(Y3t,"albert"),Y3t.forEach(t),R8r=r(CBe," \u2014 "),XJ=n(CBe,"A",{href:!0});var K3t=s(XJ);P8r=r(K3t,"FlaxAlbertForPreTraining"),K3t.forEach(t),B8r=r(CBe," (ALBERT model)"),CBe.forEach(t),I8r=i(we),e5=n(we,"LI",{});var wBe=s(e5);P7e=n(wBe,"STRONG",{});var Z3t=s(P7e);q8r=r(Z3t,"bart"),Z3t.forEach(t),N8r=r(wBe," \u2014 "),zJ=n(wBe,"A",{href:!0});var ewt=s(zJ);j8r=r(ewt,"FlaxBartForConditionalGeneration"),ewt.forEach(t),D8r=r(wBe," (BART model)"),wBe.forEach(t),G8r=i(we),o5=n(we,"LI",{});var ABe=s(o5);B7e=n(ABe,"STRONG",{});var owt=s(B7e);O8r=r(owt,"bert"),owt.forEach(t),V8r=r(ABe," \u2014 "),WJ=n(ABe,"A",{href:!0});var rwt=s(WJ);X8r=r(rwt,"FlaxBertForPreTraining"),rwt.forEach(t),z8r=r(ABe," (BERT model)"),ABe.forEach(t),W8r=i(we),r5=n(we,"LI",{});var yBe=s(r5);I7e=n(yBe,"STRONG",{});var twt=s(I7e);Q8r=r(twt,"big_bird"),twt.forEach(t),H8r=r(yBe," \u2014 "),QJ=n(yBe,"A",{href:!0});var awt=s(QJ);U8r=r(awt,"FlaxBigBirdForPreTraining"),awt.forEach(t),J8r=r(yBe," (BigBird model)"),yBe.forEach(t),Y8r=i(we),t5=n(we,"LI",{});var LBe=s(t5);q7e=n(LBe,"STRONG",{});var nwt=s(q7e);K8r=r(nwt,"electra"),nwt.forEach(t),Z8r=r(LBe," \u2014 "),HJ=n(LBe,"A",{href:!0});var swt=s(HJ);exr=r(swt,"FlaxElectraForPreTraining"),swt.forEach(t),oxr=r(LBe," (ELECTRA model)"),LBe.forEach(t),rxr=i(we),a5=n(we,"LI",{});var xBe=s(a5);N7e=n(xBe,"STRONG",{});var lwt=s(N7e);txr=r(lwt,"mbart"),lwt.forEach(t),axr=r(xBe," \u2014 "),UJ=n(xBe,"A",{href:!0});var iwt=s(UJ);nxr=r(iwt,"FlaxMBartForConditionalGeneration"),iwt.forEach(t),sxr=r(xBe," (mBART model)"),xBe.forEach(t),lxr=i(we),n5=n(we,"LI",{});var $Be=s(n5);j7e=n($Be,"STRONG",{});var dwt=s(j7e);ixr=r(dwt,"mt5"),dwt.forEach(t),dxr=r($Be," \u2014 "),JJ=n($Be,"A",{href:!0});var cwt=s(JJ);cxr=r(cwt,"FlaxMT5ForConditionalGeneration"),cwt.forEach(t),fxr=r($Be," (mT5 model)"),$Be.forEach(t),mxr=i(we),s5=n(we,"LI",{});var kBe=s(s5);D7e=n(kBe,"STRONG",{});var fwt=s(D7e);gxr=r(fwt,"roberta"),fwt.forEach(t),hxr=r(kBe," \u2014 "),YJ=n(kBe,"A",{href:!0});var mwt=s(YJ);pxr=r(mwt,"FlaxRobertaForMaskedLM"),mwt.forEach(t),_xr=r(kBe," (RoBERTa model)"),kBe.forEach(t),uxr=i(we),l5=n(we,"LI",{});var SBe=s(l5);G7e=n(SBe,"STRONG",{});var gwt=s(G7e);bxr=r(gwt,"roformer"),gwt.forEach(t),vxr=r(SBe," \u2014 "),KJ=n(SBe,"A",{href:!0});var hwt=s(KJ);Fxr=r(hwt,"FlaxRoFormerForMaskedLM"),hwt.forEach(t),Txr=r(SBe," (RoFormer model)"),SBe.forEach(t),Mxr=i(we),i5=n(we,"LI",{});var RBe=s(i5);O7e=n(RBe,"STRONG",{});var pwt=s(O7e);Exr=r(pwt,"t5"),pwt.forEach(t),Cxr=r(RBe," \u2014 "),ZJ=n(RBe,"A",{href:!0});var _wt=s(ZJ);wxr=r(_wt,"FlaxT5ForConditionalGeneration"),_wt.forEach(t),Axr=r(RBe," (T5 model)"),RBe.forEach(t),yxr=i(we),d5=n(we,"LI",{});var PBe=s(d5);V7e=n(PBe,"STRONG",{});var uwt=s(V7e);Lxr=r(uwt,"wav2vec2"),uwt.forEach(t),xxr=r(PBe," \u2014 "),eY=n(PBe,"A",{href:!0});var bwt=s(eY);$xr=r(bwt,"FlaxWav2Vec2ForPreTraining"),bwt.forEach(t),kxr=r(PBe," (Wav2Vec2 model)"),PBe.forEach(t),Sxr=i(we),c5=n(we,"LI",{});var BBe=s(c5);X7e=n(BBe,"STRONG",{});var vwt=s(X7e);Rxr=r(vwt,"xlm-roberta"),vwt.forEach(t),Pxr=r(BBe," \u2014 "),oY=n(BBe,"A",{href:!0});var Fwt=s(oY);Bxr=r(Fwt,"FlaxXLMRobertaForMaskedLM"),Fwt.forEach(t),Ixr=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),we.forEach(t),qxr=i(zl),T(f5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),ANe=i(f),qc=n(f,"H2",{class:!0});var RDe=s(qc);m5=n(RDe,"A",{id:!0,class:!0,href:!0});var Twt=s(m5);z7e=n(Twt,"SPAN",{});var Mwt=s(z7e);T(C8.$$.fragment,Mwt),Mwt.forEach(t),Twt.forEach(t),Nxr=i(RDe),W7e=n(RDe,"SPAN",{});var Ewt=s(W7e);jxr=r(Ewt,"FlaxAutoModelForMaskedLM"),Ewt.forEach(t),RDe.forEach(t),yNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(w8.$$.fragment,Wl),Dxr=i(Wl),Nc=n(Wl,"P",{});var iee=s(Nc);Gxr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rY=n(iee,"A",{href:!0});var Cwt=s(rY);Oxr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),Vxr=r(iee," class method or the "),tY=n(iee,"A",{href:!0});var wwt=s(tY);Xxr=r(wwt,"from_config()"),wwt.forEach(t),zxr=r(iee,` class
method.`),iee.forEach(t),Wxr=i(Wl),A8=n(Wl,"P",{});var PDe=s(A8);Qxr=r(PDe,"This class cannot be instantiated directly using "),Q7e=n(PDe,"CODE",{});var Awt=s(Q7e);Hxr=r(Awt,"__init__()"),Awt.forEach(t),Uxr=r(PDe," (throws an error)."),PDe.forEach(t),Jxr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var V0=s(Xt);T(y8.$$.fragment,V0),Yxr=i(V0),H7e=n(V0,"P",{});var ywt=s(H7e);Kxr=r(ywt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ywt.forEach(t),Zxr=i(V0),jc=n(V0,"P",{});var dee=s(jc);e$r=r(dee,`Note:
Loading a model from its configuration file does `),U7e=n(dee,"STRONG",{});var Lwt=s(U7e);o$r=r(Lwt,"not"),Lwt.forEach(t),r$r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(dee,"A",{href:!0});var xwt=s(aY);t$r=r(xwt,"from_pretrained()"),xwt.forEach(t),a$r=r(dee," to load the model weights."),dee.forEach(t),n$r=i(V0),T(g5.$$.fragment,V0),V0.forEach(t),s$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(L8.$$.fragment,Ql),l$r=i(Ql),J7e=n(Ql,"P",{});var $wt=s(J7e);i$r=r($wt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$wt.forEach(t),d$r=i(Ql),un=n(Ql,"P",{});var X0=s(un);c$r=r(X0,"The model class to instantiate is selected based on the "),Y7e=n(X0,"CODE",{});var kwt=s(Y7e);f$r=r(kwt,"model_type"),kwt.forEach(t),m$r=r(X0,` property of the config object (either
passed as an argument or loaded from `),K7e=n(X0,"CODE",{});var Swt=s(K7e);g$r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),h$r=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(X0,"CODE",{});var Rwt=s(Z7e);p$r=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),_$r=r(X0,":"),X0.forEach(t),u$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);h5=n(Ie,"LI",{});var IBe=s(h5);eMe=n(IBe,"STRONG",{});var Pwt=s(eMe);b$r=r(Pwt,"albert"),Pwt.forEach(t),v$r=r(IBe," \u2014 "),nY=n(IBe,"A",{href:!0});var Bwt=s(nY);F$r=r(Bwt,"FlaxAlbertForMaskedLM"),Bwt.forEach(t),T$r=r(IBe," (ALBERT model)"),IBe.forEach(t),M$r=i(Ie),p5=n(Ie,"LI",{});var qBe=s(p5);oMe=n(qBe,"STRONG",{});var Iwt=s(oMe);E$r=r(Iwt,"bart"),Iwt.forEach(t),C$r=r(qBe," \u2014 "),sY=n(qBe,"A",{href:!0});var qwt=s(sY);w$r=r(qwt,"FlaxBartForConditionalGeneration"),qwt.forEach(t),A$r=r(qBe," (BART model)"),qBe.forEach(t),y$r=i(Ie),_5=n(Ie,"LI",{});var NBe=s(_5);rMe=n(NBe,"STRONG",{});var Nwt=s(rMe);L$r=r(Nwt,"bert"),Nwt.forEach(t),x$r=r(NBe," \u2014 "),lY=n(NBe,"A",{href:!0});var jwt=s(lY);$$r=r(jwt,"FlaxBertForMaskedLM"),jwt.forEach(t),k$r=r(NBe," (BERT model)"),NBe.forEach(t),S$r=i(Ie),u5=n(Ie,"LI",{});var jBe=s(u5);tMe=n(jBe,"STRONG",{});var Dwt=s(tMe);R$r=r(Dwt,"big_bird"),Dwt.forEach(t),P$r=r(jBe," \u2014 "),iY=n(jBe,"A",{href:!0});var Gwt=s(iY);B$r=r(Gwt,"FlaxBigBirdForMaskedLM"),Gwt.forEach(t),I$r=r(jBe," (BigBird model)"),jBe.forEach(t),q$r=i(Ie),b5=n(Ie,"LI",{});var DBe=s(b5);aMe=n(DBe,"STRONG",{});var Owt=s(aMe);N$r=r(Owt,"distilbert"),Owt.forEach(t),j$r=r(DBe," \u2014 "),dY=n(DBe,"A",{href:!0});var Vwt=s(dY);D$r=r(Vwt,"FlaxDistilBertForMaskedLM"),Vwt.forEach(t),G$r=r(DBe," (DistilBERT model)"),DBe.forEach(t),O$r=i(Ie),v5=n(Ie,"LI",{});var GBe=s(v5);nMe=n(GBe,"STRONG",{});var Xwt=s(nMe);V$r=r(Xwt,"electra"),Xwt.forEach(t),X$r=r(GBe," \u2014 "),cY=n(GBe,"A",{href:!0});var zwt=s(cY);z$r=r(zwt,"FlaxElectraForMaskedLM"),zwt.forEach(t),W$r=r(GBe," (ELECTRA model)"),GBe.forEach(t),Q$r=i(Ie),F5=n(Ie,"LI",{});var OBe=s(F5);sMe=n(OBe,"STRONG",{});var Wwt=s(sMe);H$r=r(Wwt,"mbart"),Wwt.forEach(t),U$r=r(OBe," \u2014 "),fY=n(OBe,"A",{href:!0});var Qwt=s(fY);J$r=r(Qwt,"FlaxMBartForConditionalGeneration"),Qwt.forEach(t),Y$r=r(OBe," (mBART model)"),OBe.forEach(t),K$r=i(Ie),T5=n(Ie,"LI",{});var VBe=s(T5);lMe=n(VBe,"STRONG",{});var Hwt=s(lMe);Z$r=r(Hwt,"roberta"),Hwt.forEach(t),ekr=r(VBe," \u2014 "),mY=n(VBe,"A",{href:!0});var Uwt=s(mY);okr=r(Uwt,"FlaxRobertaForMaskedLM"),Uwt.forEach(t),rkr=r(VBe," (RoBERTa model)"),VBe.forEach(t),tkr=i(Ie),M5=n(Ie,"LI",{});var XBe=s(M5);iMe=n(XBe,"STRONG",{});var Jwt=s(iMe);akr=r(Jwt,"roformer"),Jwt.forEach(t),nkr=r(XBe," \u2014 "),gY=n(XBe,"A",{href:!0});var Ywt=s(gY);skr=r(Ywt,"FlaxRoFormerForMaskedLM"),Ywt.forEach(t),lkr=r(XBe," (RoFormer model)"),XBe.forEach(t),ikr=i(Ie),E5=n(Ie,"LI",{});var zBe=s(E5);dMe=n(zBe,"STRONG",{});var Kwt=s(dMe);dkr=r(Kwt,"xlm-roberta"),Kwt.forEach(t),ckr=r(zBe," \u2014 "),hY=n(zBe,"A",{href:!0});var Zwt=s(hY);fkr=r(Zwt,"FlaxXLMRobertaForMaskedLM"),Zwt.forEach(t),mkr=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),Ie.forEach(t),gkr=i(Ql),T(C5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),LNe=i(f),Dc=n(f,"H2",{class:!0});var BDe=s(Dc);w5=n(BDe,"A",{id:!0,class:!0,href:!0});var e0t=s(w5);cMe=n(e0t,"SPAN",{});var o0t=s(cMe);T(x8.$$.fragment,o0t),o0t.forEach(t),e0t.forEach(t),hkr=i(BDe),fMe=n(BDe,"SPAN",{});var r0t=s(fMe);pkr=r(r0t,"FlaxAutoModelForSeq2SeqLM"),r0t.forEach(t),BDe.forEach(t),xNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T($8.$$.fragment,Hl),_kr=i(Hl),Gc=n(Hl,"P",{});var cee=s(Gc);ukr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pY=n(cee,"A",{href:!0});var t0t=s(pY);bkr=r(t0t,"from_pretrained()"),t0t.forEach(t),vkr=r(cee," class method or the "),_Y=n(cee,"A",{href:!0});var a0t=s(_Y);Fkr=r(a0t,"from_config()"),a0t.forEach(t),Tkr=r(cee,` class
method.`),cee.forEach(t),Mkr=i(Hl),k8=n(Hl,"P",{});var IDe=s(k8);Ekr=r(IDe,"This class cannot be instantiated directly using "),mMe=n(IDe,"CODE",{});var n0t=s(mMe);Ckr=r(n0t,"__init__()"),n0t.forEach(t),wkr=r(IDe," (throws an error)."),IDe.forEach(t),Akr=i(Hl),zt=n(Hl,"DIV",{class:!0});var z0=s(zt);T(S8.$$.fragment,z0),ykr=i(z0),gMe=n(z0,"P",{});var s0t=s(gMe);Lkr=r(s0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),s0t.forEach(t),xkr=i(z0),Oc=n(z0,"P",{});var fee=s(Oc);$kr=r(fee,`Note:
Loading a model from its configuration file does `),hMe=n(fee,"STRONG",{});var l0t=s(hMe);kkr=r(l0t,"not"),l0t.forEach(t),Skr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(fee,"A",{href:!0});var i0t=s(uY);Rkr=r(i0t,"from_pretrained()"),i0t.forEach(t),Pkr=r(fee," to load the model weights."),fee.forEach(t),Bkr=i(z0),T(A5.$$.fragment,z0),z0.forEach(t),Ikr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(R8.$$.fragment,Ul),qkr=i(Ul),pMe=n(Ul,"P",{});var d0t=s(pMe);Nkr=r(d0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d0t.forEach(t),jkr=i(Ul),bn=n(Ul,"P",{});var W0=s(bn);Dkr=r(W0,"The model class to instantiate is selected based on the "),_Me=n(W0,"CODE",{});var c0t=s(_Me);Gkr=r(c0t,"model_type"),c0t.forEach(t),Okr=r(W0,` property of the config object (either
passed as an argument or loaded from `),uMe=n(W0,"CODE",{});var f0t=s(uMe);Vkr=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),Xkr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(W0,"CODE",{});var m0t=s(bMe);zkr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),Wkr=r(W0,":"),W0.forEach(t),Qkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);y5=n(ze,"LI",{});var WBe=s(y5);vMe=n(WBe,"STRONG",{});var g0t=s(vMe);Hkr=r(g0t,"bart"),g0t.forEach(t),Ukr=r(WBe," \u2014 "),bY=n(WBe,"A",{href:!0});var h0t=s(bY);Jkr=r(h0t,"FlaxBartForConditionalGeneration"),h0t.forEach(t),Ykr=r(WBe," (BART model)"),WBe.forEach(t),Kkr=i(ze),L5=n(ze,"LI",{});var QBe=s(L5);FMe=n(QBe,"STRONG",{});var p0t=s(FMe);Zkr=r(p0t,"blenderbot"),p0t.forEach(t),eSr=r(QBe," \u2014 "),vY=n(QBe,"A",{href:!0});var _0t=s(vY);oSr=r(_0t,"FlaxBlenderbotForConditionalGeneration"),_0t.forEach(t),rSr=r(QBe," (Blenderbot model)"),QBe.forEach(t),tSr=i(ze),x5=n(ze,"LI",{});var HBe=s(x5);TMe=n(HBe,"STRONG",{});var u0t=s(TMe);aSr=r(u0t,"blenderbot-small"),u0t.forEach(t),nSr=r(HBe," \u2014 "),FY=n(HBe,"A",{href:!0});var b0t=s(FY);sSr=r(b0t,"FlaxBlenderbotSmallForConditionalGeneration"),b0t.forEach(t),lSr=r(HBe," (BlenderbotSmall model)"),HBe.forEach(t),iSr=i(ze),$5=n(ze,"LI",{});var UBe=s($5);MMe=n(UBe,"STRONG",{});var v0t=s(MMe);dSr=r(v0t,"encoder-decoder"),v0t.forEach(t),cSr=r(UBe," \u2014 "),TY=n(UBe,"A",{href:!0});var F0t=s(TY);fSr=r(F0t,"FlaxEncoderDecoderModel"),F0t.forEach(t),mSr=r(UBe," (Encoder decoder model)"),UBe.forEach(t),gSr=i(ze),k5=n(ze,"LI",{});var JBe=s(k5);EMe=n(JBe,"STRONG",{});var T0t=s(EMe);hSr=r(T0t,"marian"),T0t.forEach(t),pSr=r(JBe," \u2014 "),MY=n(JBe,"A",{href:!0});var M0t=s(MY);_Sr=r(M0t,"FlaxMarianMTModel"),M0t.forEach(t),uSr=r(JBe," (Marian model)"),JBe.forEach(t),bSr=i(ze),S5=n(ze,"LI",{});var YBe=s(S5);CMe=n(YBe,"STRONG",{});var E0t=s(CMe);vSr=r(E0t,"mbart"),E0t.forEach(t),FSr=r(YBe," \u2014 "),EY=n(YBe,"A",{href:!0});var C0t=s(EY);TSr=r(C0t,"FlaxMBartForConditionalGeneration"),C0t.forEach(t),MSr=r(YBe," (mBART model)"),YBe.forEach(t),ESr=i(ze),R5=n(ze,"LI",{});var KBe=s(R5);wMe=n(KBe,"STRONG",{});var w0t=s(wMe);CSr=r(w0t,"mt5"),w0t.forEach(t),wSr=r(KBe," \u2014 "),CY=n(KBe,"A",{href:!0});var A0t=s(CY);ASr=r(A0t,"FlaxMT5ForConditionalGeneration"),A0t.forEach(t),ySr=r(KBe," (mT5 model)"),KBe.forEach(t),LSr=i(ze),P5=n(ze,"LI",{});var ZBe=s(P5);AMe=n(ZBe,"STRONG",{});var y0t=s(AMe);xSr=r(y0t,"pegasus"),y0t.forEach(t),$Sr=r(ZBe," \u2014 "),wY=n(ZBe,"A",{href:!0});var L0t=s(wY);kSr=r(L0t,"FlaxPegasusForConditionalGeneration"),L0t.forEach(t),SSr=r(ZBe," (Pegasus model)"),ZBe.forEach(t),RSr=i(ze),B5=n(ze,"LI",{});var eIe=s(B5);yMe=n(eIe,"STRONG",{});var x0t=s(yMe);PSr=r(x0t,"t5"),x0t.forEach(t),BSr=r(eIe," \u2014 "),AY=n(eIe,"A",{href:!0});var $0t=s(AY);ISr=r($0t,"FlaxT5ForConditionalGeneration"),$0t.forEach(t),qSr=r(eIe," (T5 model)"),eIe.forEach(t),ze.forEach(t),NSr=i(Ul),T(I5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),$Ne=i(f),Vc=n(f,"H2",{class:!0});var qDe=s(Vc);q5=n(qDe,"A",{id:!0,class:!0,href:!0});var k0t=s(q5);LMe=n(k0t,"SPAN",{});var S0t=s(LMe);T(P8.$$.fragment,S0t),S0t.forEach(t),k0t.forEach(t),jSr=i(qDe),xMe=n(qDe,"SPAN",{});var R0t=s(xMe);DSr=r(R0t,"FlaxAutoModelForSequenceClassification"),R0t.forEach(t),qDe.forEach(t),kNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(B8.$$.fragment,Jl),GSr=i(Jl),Xc=n(Jl,"P",{});var mee=s(Xc);OSr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yY=n(mee,"A",{href:!0});var P0t=s(yY);VSr=r(P0t,"from_pretrained()"),P0t.forEach(t),XSr=r(mee," class method or the "),LY=n(mee,"A",{href:!0});var B0t=s(LY);zSr=r(B0t,"from_config()"),B0t.forEach(t),WSr=r(mee,` class
method.`),mee.forEach(t),QSr=i(Jl),I8=n(Jl,"P",{});var NDe=s(I8);HSr=r(NDe,"This class cannot be instantiated directly using "),$Me=n(NDe,"CODE",{});var I0t=s($Me);USr=r(I0t,"__init__()"),I0t.forEach(t),JSr=r(NDe," (throws an error)."),NDe.forEach(t),YSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var Q0=s(Wt);T(q8.$$.fragment,Q0),KSr=i(Q0),kMe=n(Q0,"P",{});var q0t=s(kMe);ZSr=r(q0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q0t.forEach(t),eRr=i(Q0),zc=n(Q0,"P",{});var gee=s(zc);oRr=r(gee,`Note:
Loading a model from its configuration file does `),SMe=n(gee,"STRONG",{});var N0t=s(SMe);rRr=r(N0t,"not"),N0t.forEach(t),tRr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(gee,"A",{href:!0});var j0t=s(xY);aRr=r(j0t,"from_pretrained()"),j0t.forEach(t),nRr=r(gee," to load the model weights."),gee.forEach(t),sRr=i(Q0),T(N5.$$.fragment,Q0),Q0.forEach(t),lRr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(N8.$$.fragment,Yl),iRr=i(Yl),RMe=n(Yl,"P",{});var D0t=s(RMe);dRr=r(D0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),D0t.forEach(t),cRr=i(Yl),vn=n(Yl,"P",{});var H0=s(vn);fRr=r(H0,"The model class to instantiate is selected based on the "),PMe=n(H0,"CODE",{});var G0t=s(PMe);mRr=r(G0t,"model_type"),G0t.forEach(t),gRr=r(H0,` property of the config object (either
passed as an argument or loaded from `),BMe=n(H0,"CODE",{});var O0t=s(BMe);hRr=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),pRr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(H0,"CODE",{});var V0t=s(IMe);_Rr=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),uRr=r(H0,":"),H0.forEach(t),bRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);j5=n(qe,"LI",{});var oIe=s(j5);qMe=n(oIe,"STRONG",{});var X0t=s(qMe);vRr=r(X0t,"albert"),X0t.forEach(t),FRr=r(oIe," \u2014 "),$Y=n(oIe,"A",{href:!0});var z0t=s($Y);TRr=r(z0t,"FlaxAlbertForSequenceClassification"),z0t.forEach(t),MRr=r(oIe," (ALBERT model)"),oIe.forEach(t),ERr=i(qe),D5=n(qe,"LI",{});var rIe=s(D5);NMe=n(rIe,"STRONG",{});var W0t=s(NMe);CRr=r(W0t,"bart"),W0t.forEach(t),wRr=r(rIe," \u2014 "),kY=n(rIe,"A",{href:!0});var Q0t=s(kY);ARr=r(Q0t,"FlaxBartForSequenceClassification"),Q0t.forEach(t),yRr=r(rIe," (BART model)"),rIe.forEach(t),LRr=i(qe),G5=n(qe,"LI",{});var tIe=s(G5);jMe=n(tIe,"STRONG",{});var H0t=s(jMe);xRr=r(H0t,"bert"),H0t.forEach(t),$Rr=r(tIe," \u2014 "),SY=n(tIe,"A",{href:!0});var U0t=s(SY);kRr=r(U0t,"FlaxBertForSequenceClassification"),U0t.forEach(t),SRr=r(tIe," (BERT model)"),tIe.forEach(t),RRr=i(qe),O5=n(qe,"LI",{});var aIe=s(O5);DMe=n(aIe,"STRONG",{});var J0t=s(DMe);PRr=r(J0t,"big_bird"),J0t.forEach(t),BRr=r(aIe," \u2014 "),RY=n(aIe,"A",{href:!0});var Y0t=s(RY);IRr=r(Y0t,"FlaxBigBirdForSequenceClassification"),Y0t.forEach(t),qRr=r(aIe," (BigBird model)"),aIe.forEach(t),NRr=i(qe),V5=n(qe,"LI",{});var nIe=s(V5);GMe=n(nIe,"STRONG",{});var K0t=s(GMe);jRr=r(K0t,"distilbert"),K0t.forEach(t),DRr=r(nIe," \u2014 "),PY=n(nIe,"A",{href:!0});var Z0t=s(PY);GRr=r(Z0t,"FlaxDistilBertForSequenceClassification"),Z0t.forEach(t),ORr=r(nIe," (DistilBERT model)"),nIe.forEach(t),VRr=i(qe),X5=n(qe,"LI",{});var sIe=s(X5);OMe=n(sIe,"STRONG",{});var eAt=s(OMe);XRr=r(eAt,"electra"),eAt.forEach(t),zRr=r(sIe," \u2014 "),BY=n(sIe,"A",{href:!0});var oAt=s(BY);WRr=r(oAt,"FlaxElectraForSequenceClassification"),oAt.forEach(t),QRr=r(sIe," (ELECTRA model)"),sIe.forEach(t),HRr=i(qe),z5=n(qe,"LI",{});var lIe=s(z5);VMe=n(lIe,"STRONG",{});var rAt=s(VMe);URr=r(rAt,"mbart"),rAt.forEach(t),JRr=r(lIe," \u2014 "),IY=n(lIe,"A",{href:!0});var tAt=s(IY);YRr=r(tAt,"FlaxMBartForSequenceClassification"),tAt.forEach(t),KRr=r(lIe," (mBART model)"),lIe.forEach(t),ZRr=i(qe),W5=n(qe,"LI",{});var iIe=s(W5);XMe=n(iIe,"STRONG",{});var aAt=s(XMe);ePr=r(aAt,"roberta"),aAt.forEach(t),oPr=r(iIe," \u2014 "),qY=n(iIe,"A",{href:!0});var nAt=s(qY);rPr=r(nAt,"FlaxRobertaForSequenceClassification"),nAt.forEach(t),tPr=r(iIe," (RoBERTa model)"),iIe.forEach(t),aPr=i(qe),Q5=n(qe,"LI",{});var dIe=s(Q5);zMe=n(dIe,"STRONG",{});var sAt=s(zMe);nPr=r(sAt,"roformer"),sAt.forEach(t),sPr=r(dIe," \u2014 "),NY=n(dIe,"A",{href:!0});var lAt=s(NY);lPr=r(lAt,"FlaxRoFormerForSequenceClassification"),lAt.forEach(t),iPr=r(dIe," (RoFormer model)"),dIe.forEach(t),dPr=i(qe),H5=n(qe,"LI",{});var cIe=s(H5);WMe=n(cIe,"STRONG",{});var iAt=s(WMe);cPr=r(iAt,"xlm-roberta"),iAt.forEach(t),fPr=r(cIe," \u2014 "),jY=n(cIe,"A",{href:!0});var dAt=s(jY);mPr=r(dAt,"FlaxXLMRobertaForSequenceClassification"),dAt.forEach(t),gPr=r(cIe," (XLM-RoBERTa model)"),cIe.forEach(t),qe.forEach(t),hPr=i(Yl),T(U5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),SNe=i(f),Wc=n(f,"H2",{class:!0});var jDe=s(Wc);J5=n(jDe,"A",{id:!0,class:!0,href:!0});var cAt=s(J5);QMe=n(cAt,"SPAN",{});var fAt=s(QMe);T(j8.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),pPr=i(jDe),HMe=n(jDe,"SPAN",{});var mAt=s(HMe);_Pr=r(mAt,"FlaxAutoModelForQuestionAnswering"),mAt.forEach(t),jDe.forEach(t),RNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(D8.$$.fragment,Kl),uPr=i(Kl),Qc=n(Kl,"P",{});var hee=s(Qc);bPr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DY=n(hee,"A",{href:!0});var gAt=s(DY);vPr=r(gAt,"from_pretrained()"),gAt.forEach(t),FPr=r(hee," class method or the "),GY=n(hee,"A",{href:!0});var hAt=s(GY);TPr=r(hAt,"from_config()"),hAt.forEach(t),MPr=r(hee,` class
method.`),hee.forEach(t),EPr=i(Kl),G8=n(Kl,"P",{});var DDe=s(G8);CPr=r(DDe,"This class cannot be instantiated directly using "),UMe=n(DDe,"CODE",{});var pAt=s(UMe);wPr=r(pAt,"__init__()"),pAt.forEach(t),APr=r(DDe," (throws an error)."),DDe.forEach(t),yPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var U0=s(Qt);T(O8.$$.fragment,U0),LPr=i(U0),JMe=n(U0,"P",{});var _At=s(JMe);xPr=r(_At,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_At.forEach(t),$Pr=i(U0),Hc=n(U0,"P",{});var pee=s(Hc);kPr=r(pee,`Note:
Loading a model from its configuration file does `),YMe=n(pee,"STRONG",{});var uAt=s(YMe);SPr=r(uAt,"not"),uAt.forEach(t),RPr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(pee,"A",{href:!0});var bAt=s(OY);PPr=r(bAt,"from_pretrained()"),bAt.forEach(t),BPr=r(pee," to load the model weights."),pee.forEach(t),IPr=i(U0),T(Y5.$$.fragment,U0),U0.forEach(t),qPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(V8.$$.fragment,Zl),NPr=i(Zl),KMe=n(Zl,"P",{});var vAt=s(KMe);jPr=r(vAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vAt.forEach(t),DPr=i(Zl),Fn=n(Zl,"P",{});var J0=s(Fn);GPr=r(J0,"The model class to instantiate is selected based on the "),ZMe=n(J0,"CODE",{});var FAt=s(ZMe);OPr=r(FAt,"model_type"),FAt.forEach(t),VPr=r(J0,` property of the config object (either
passed as an argument or loaded from `),e4e=n(J0,"CODE",{});var TAt=s(e4e);XPr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),zPr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(J0,"CODE",{});var MAt=s(o4e);WPr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),QPr=r(J0,":"),J0.forEach(t),HPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);K5=n(Ne,"LI",{});var fIe=s(K5);r4e=n(fIe,"STRONG",{});var EAt=s(r4e);UPr=r(EAt,"albert"),EAt.forEach(t),JPr=r(fIe," \u2014 "),VY=n(fIe,"A",{href:!0});var CAt=s(VY);YPr=r(CAt,"FlaxAlbertForQuestionAnswering"),CAt.forEach(t),KPr=r(fIe," (ALBERT model)"),fIe.forEach(t),ZPr=i(Ne),Z5=n(Ne,"LI",{});var mIe=s(Z5);t4e=n(mIe,"STRONG",{});var wAt=s(t4e);eBr=r(wAt,"bart"),wAt.forEach(t),oBr=r(mIe," \u2014 "),XY=n(mIe,"A",{href:!0});var AAt=s(XY);rBr=r(AAt,"FlaxBartForQuestionAnswering"),AAt.forEach(t),tBr=r(mIe," (BART model)"),mIe.forEach(t),aBr=i(Ne),e3=n(Ne,"LI",{});var gIe=s(e3);a4e=n(gIe,"STRONG",{});var yAt=s(a4e);nBr=r(yAt,"bert"),yAt.forEach(t),sBr=r(gIe," \u2014 "),zY=n(gIe,"A",{href:!0});var LAt=s(zY);lBr=r(LAt,"FlaxBertForQuestionAnswering"),LAt.forEach(t),iBr=r(gIe," (BERT model)"),gIe.forEach(t),dBr=i(Ne),o3=n(Ne,"LI",{});var hIe=s(o3);n4e=n(hIe,"STRONG",{});var xAt=s(n4e);cBr=r(xAt,"big_bird"),xAt.forEach(t),fBr=r(hIe," \u2014 "),WY=n(hIe,"A",{href:!0});var $At=s(WY);mBr=r($At,"FlaxBigBirdForQuestionAnswering"),$At.forEach(t),gBr=r(hIe," (BigBird model)"),hIe.forEach(t),hBr=i(Ne),r3=n(Ne,"LI",{});var pIe=s(r3);s4e=n(pIe,"STRONG",{});var kAt=s(s4e);pBr=r(kAt,"distilbert"),kAt.forEach(t),_Br=r(pIe," \u2014 "),QY=n(pIe,"A",{href:!0});var SAt=s(QY);uBr=r(SAt,"FlaxDistilBertForQuestionAnswering"),SAt.forEach(t),bBr=r(pIe," (DistilBERT model)"),pIe.forEach(t),vBr=i(Ne),t3=n(Ne,"LI",{});var _Ie=s(t3);l4e=n(_Ie,"STRONG",{});var RAt=s(l4e);FBr=r(RAt,"electra"),RAt.forEach(t),TBr=r(_Ie," \u2014 "),HY=n(_Ie,"A",{href:!0});var PAt=s(HY);MBr=r(PAt,"FlaxElectraForQuestionAnswering"),PAt.forEach(t),EBr=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),CBr=i(Ne),a3=n(Ne,"LI",{});var uIe=s(a3);i4e=n(uIe,"STRONG",{});var BAt=s(i4e);wBr=r(BAt,"mbart"),BAt.forEach(t),ABr=r(uIe," \u2014 "),UY=n(uIe,"A",{href:!0});var IAt=s(UY);yBr=r(IAt,"FlaxMBartForQuestionAnswering"),IAt.forEach(t),LBr=r(uIe," (mBART model)"),uIe.forEach(t),xBr=i(Ne),n3=n(Ne,"LI",{});var bIe=s(n3);d4e=n(bIe,"STRONG",{});var qAt=s(d4e);$Br=r(qAt,"roberta"),qAt.forEach(t),kBr=r(bIe," \u2014 "),JY=n(bIe,"A",{href:!0});var NAt=s(JY);SBr=r(NAt,"FlaxRobertaForQuestionAnswering"),NAt.forEach(t),RBr=r(bIe," (RoBERTa model)"),bIe.forEach(t),PBr=i(Ne),s3=n(Ne,"LI",{});var vIe=s(s3);c4e=n(vIe,"STRONG",{});var jAt=s(c4e);BBr=r(jAt,"roformer"),jAt.forEach(t),IBr=r(vIe," \u2014 "),YY=n(vIe,"A",{href:!0});var DAt=s(YY);qBr=r(DAt,"FlaxRoFormerForQuestionAnswering"),DAt.forEach(t),NBr=r(vIe," (RoFormer model)"),vIe.forEach(t),jBr=i(Ne),l3=n(Ne,"LI",{});var FIe=s(l3);f4e=n(FIe,"STRONG",{});var GAt=s(f4e);DBr=r(GAt,"xlm-roberta"),GAt.forEach(t),GBr=r(FIe," \u2014 "),KY=n(FIe,"A",{href:!0});var OAt=s(KY);OBr=r(OAt,"FlaxXLMRobertaForQuestionAnswering"),OAt.forEach(t),VBr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),Ne.forEach(t),XBr=i(Zl),T(i3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),PNe=i(f),Uc=n(f,"H2",{class:!0});var GDe=s(Uc);d3=n(GDe,"A",{id:!0,class:!0,href:!0});var VAt=s(d3);m4e=n(VAt,"SPAN",{});var XAt=s(m4e);T(X8.$$.fragment,XAt),XAt.forEach(t),VAt.forEach(t),zBr=i(GDe),g4e=n(GDe,"SPAN",{});var zAt=s(g4e);WBr=r(zAt,"FlaxAutoModelForTokenClassification"),zAt.forEach(t),GDe.forEach(t),BNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(z8.$$.fragment,ei),QBr=i(ei),Jc=n(ei,"P",{});var _ee=s(Jc);HBr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZY=n(_ee,"A",{href:!0});var WAt=s(ZY);UBr=r(WAt,"from_pretrained()"),WAt.forEach(t),JBr=r(_ee," class method or the "),eK=n(_ee,"A",{href:!0});var QAt=s(eK);YBr=r(QAt,"from_config()"),QAt.forEach(t),KBr=r(_ee,` class
method.`),_ee.forEach(t),ZBr=i(ei),W8=n(ei,"P",{});var ODe=s(W8);eIr=r(ODe,"This class cannot be instantiated directly using "),h4e=n(ODe,"CODE",{});var HAt=s(h4e);oIr=r(HAt,"__init__()"),HAt.forEach(t),rIr=r(ODe," (throws an error)."),ODe.forEach(t),tIr=i(ei),Ht=n(ei,"DIV",{class:!0});var Y0=s(Ht);T(Q8.$$.fragment,Y0),aIr=i(Y0),p4e=n(Y0,"P",{});var UAt=s(p4e);nIr=r(UAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UAt.forEach(t),sIr=i(Y0),Yc=n(Y0,"P",{});var uee=s(Yc);lIr=r(uee,`Note:
Loading a model from its configuration file does `),_4e=n(uee,"STRONG",{});var JAt=s(_4e);iIr=r(JAt,"not"),JAt.forEach(t),dIr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(uee,"A",{href:!0});var YAt=s(oK);cIr=r(YAt,"from_pretrained()"),YAt.forEach(t),fIr=r(uee," to load the model weights."),uee.forEach(t),mIr=i(Y0),T(c3.$$.fragment,Y0),Y0.forEach(t),gIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(H8.$$.fragment,oi),hIr=i(oi),u4e=n(oi,"P",{});var KAt=s(u4e);pIr=r(KAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KAt.forEach(t),_Ir=i(oi),Tn=n(oi,"P",{});var K0=s(Tn);uIr=r(K0,"The model class to instantiate is selected based on the "),b4e=n(K0,"CODE",{});var ZAt=s(b4e);bIr=r(ZAt,"model_type"),ZAt.forEach(t),vIr=r(K0,` property of the config object (either
passed as an argument or loaded from `),v4e=n(K0,"CODE",{});var e6t=s(v4e);FIr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),TIr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(K0,"CODE",{});var o6t=s(F4e);MIr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),EIr=r(K0,":"),K0.forEach(t),CIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);f3=n(Fo,"LI",{});var TIe=s(f3);T4e=n(TIe,"STRONG",{});var r6t=s(T4e);wIr=r(r6t,"albert"),r6t.forEach(t),AIr=r(TIe," \u2014 "),rK=n(TIe,"A",{href:!0});var t6t=s(rK);yIr=r(t6t,"FlaxAlbertForTokenClassification"),t6t.forEach(t),LIr=r(TIe," (ALBERT model)"),TIe.forEach(t),xIr=i(Fo),m3=n(Fo,"LI",{});var MIe=s(m3);M4e=n(MIe,"STRONG",{});var a6t=s(M4e);$Ir=r(a6t,"bert"),a6t.forEach(t),kIr=r(MIe," \u2014 "),tK=n(MIe,"A",{href:!0});var n6t=s(tK);SIr=r(n6t,"FlaxBertForTokenClassification"),n6t.forEach(t),RIr=r(MIe," (BERT model)"),MIe.forEach(t),PIr=i(Fo),g3=n(Fo,"LI",{});var EIe=s(g3);E4e=n(EIe,"STRONG",{});var s6t=s(E4e);BIr=r(s6t,"big_bird"),s6t.forEach(t),IIr=r(EIe," \u2014 "),aK=n(EIe,"A",{href:!0});var l6t=s(aK);qIr=r(l6t,"FlaxBigBirdForTokenClassification"),l6t.forEach(t),NIr=r(EIe," (BigBird model)"),EIe.forEach(t),jIr=i(Fo),h3=n(Fo,"LI",{});var CIe=s(h3);C4e=n(CIe,"STRONG",{});var i6t=s(C4e);DIr=r(i6t,"distilbert"),i6t.forEach(t),GIr=r(CIe," \u2014 "),nK=n(CIe,"A",{href:!0});var d6t=s(nK);OIr=r(d6t,"FlaxDistilBertForTokenClassification"),d6t.forEach(t),VIr=r(CIe," (DistilBERT model)"),CIe.forEach(t),XIr=i(Fo),p3=n(Fo,"LI",{});var wIe=s(p3);w4e=n(wIe,"STRONG",{});var c6t=s(w4e);zIr=r(c6t,"electra"),c6t.forEach(t),WIr=r(wIe," \u2014 "),sK=n(wIe,"A",{href:!0});var f6t=s(sK);QIr=r(f6t,"FlaxElectraForTokenClassification"),f6t.forEach(t),HIr=r(wIe," (ELECTRA model)"),wIe.forEach(t),UIr=i(Fo),_3=n(Fo,"LI",{});var AIe=s(_3);A4e=n(AIe,"STRONG",{});var m6t=s(A4e);JIr=r(m6t,"roberta"),m6t.forEach(t),YIr=r(AIe," \u2014 "),lK=n(AIe,"A",{href:!0});var g6t=s(lK);KIr=r(g6t,"FlaxRobertaForTokenClassification"),g6t.forEach(t),ZIr=r(AIe," (RoBERTa model)"),AIe.forEach(t),eqr=i(Fo),u3=n(Fo,"LI",{});var yIe=s(u3);y4e=n(yIe,"STRONG",{});var h6t=s(y4e);oqr=r(h6t,"roformer"),h6t.forEach(t),rqr=r(yIe," \u2014 "),iK=n(yIe,"A",{href:!0});var p6t=s(iK);tqr=r(p6t,"FlaxRoFormerForTokenClassification"),p6t.forEach(t),aqr=r(yIe," (RoFormer model)"),yIe.forEach(t),nqr=i(Fo),b3=n(Fo,"LI",{});var LIe=s(b3);L4e=n(LIe,"STRONG",{});var _6t=s(L4e);sqr=r(_6t,"xlm-roberta"),_6t.forEach(t),lqr=r(LIe," \u2014 "),dK=n(LIe,"A",{href:!0});var u6t=s(dK);iqr=r(u6t,"FlaxXLMRobertaForTokenClassification"),u6t.forEach(t),dqr=r(LIe," (XLM-RoBERTa model)"),LIe.forEach(t),Fo.forEach(t),cqr=i(oi),T(v3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),INe=i(f),Kc=n(f,"H2",{class:!0});var VDe=s(Kc);F3=n(VDe,"A",{id:!0,class:!0,href:!0});var b6t=s(F3);x4e=n(b6t,"SPAN",{});var v6t=s(x4e);T(U8.$$.fragment,v6t),v6t.forEach(t),b6t.forEach(t),fqr=i(VDe),$4e=n(VDe,"SPAN",{});var F6t=s($4e);mqr=r(F6t,"FlaxAutoModelForMultipleChoice"),F6t.forEach(t),VDe.forEach(t),qNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(J8.$$.fragment,ri),gqr=i(ri),Zc=n(ri,"P",{});var bee=s(Zc);hqr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cK=n(bee,"A",{href:!0});var T6t=s(cK);pqr=r(T6t,"from_pretrained()"),T6t.forEach(t),_qr=r(bee," class method or the "),fK=n(bee,"A",{href:!0});var M6t=s(fK);uqr=r(M6t,"from_config()"),M6t.forEach(t),bqr=r(bee,` class
method.`),bee.forEach(t),vqr=i(ri),Y8=n(ri,"P",{});var XDe=s(Y8);Fqr=r(XDe,"This class cannot be instantiated directly using "),k4e=n(XDe,"CODE",{});var E6t=s(k4e);Tqr=r(E6t,"__init__()"),E6t.forEach(t),Mqr=r(XDe," (throws an error)."),XDe.forEach(t),Eqr=i(ri),Ut=n(ri,"DIV",{class:!0});var Z0=s(Ut);T(K8.$$.fragment,Z0),Cqr=i(Z0),S4e=n(Z0,"P",{});var C6t=s(S4e);wqr=r(C6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),C6t.forEach(t),Aqr=i(Z0),ef=n(Z0,"P",{});var vee=s(ef);yqr=r(vee,`Note:
Loading a model from its configuration file does `),R4e=n(vee,"STRONG",{});var w6t=s(R4e);Lqr=r(w6t,"not"),w6t.forEach(t),xqr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(vee,"A",{href:!0});var A6t=s(mK);$qr=r(A6t,"from_pretrained()"),A6t.forEach(t),kqr=r(vee," to load the model weights."),vee.forEach(t),Sqr=i(Z0),T(T3.$$.fragment,Z0),Z0.forEach(t),Rqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Z8.$$.fragment,ti),Pqr=i(ti),P4e=n(ti,"P",{});var y6t=s(P4e);Bqr=r(y6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y6t.forEach(t),Iqr=i(ti),Mn=n(ti,"P",{});var eA=s(Mn);qqr=r(eA,"The model class to instantiate is selected based on the "),B4e=n(eA,"CODE",{});var L6t=s(B4e);Nqr=r(L6t,"model_type"),L6t.forEach(t),jqr=r(eA,` property of the config object (either
passed as an argument or loaded from `),I4e=n(eA,"CODE",{});var x6t=s(I4e);Dqr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),Gqr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(eA,"CODE",{});var $6t=s(q4e);Oqr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),Vqr=r(eA,":"),eA.forEach(t),Xqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);M3=n(To,"LI",{});var xIe=s(M3);N4e=n(xIe,"STRONG",{});var k6t=s(N4e);zqr=r(k6t,"albert"),k6t.forEach(t),Wqr=r(xIe," \u2014 "),gK=n(xIe,"A",{href:!0});var S6t=s(gK);Qqr=r(S6t,"FlaxAlbertForMultipleChoice"),S6t.forEach(t),Hqr=r(xIe," (ALBERT model)"),xIe.forEach(t),Uqr=i(To),E3=n(To,"LI",{});var $Ie=s(E3);j4e=n($Ie,"STRONG",{});var R6t=s(j4e);Jqr=r(R6t,"bert"),R6t.forEach(t),Yqr=r($Ie," \u2014 "),hK=n($Ie,"A",{href:!0});var P6t=s(hK);Kqr=r(P6t,"FlaxBertForMultipleChoice"),P6t.forEach(t),Zqr=r($Ie," (BERT model)"),$Ie.forEach(t),eNr=i(To),C3=n(To,"LI",{});var kIe=s(C3);D4e=n(kIe,"STRONG",{});var B6t=s(D4e);oNr=r(B6t,"big_bird"),B6t.forEach(t),rNr=r(kIe," \u2014 "),pK=n(kIe,"A",{href:!0});var I6t=s(pK);tNr=r(I6t,"FlaxBigBirdForMultipleChoice"),I6t.forEach(t),aNr=r(kIe," (BigBird model)"),kIe.forEach(t),nNr=i(To),w3=n(To,"LI",{});var SIe=s(w3);G4e=n(SIe,"STRONG",{});var q6t=s(G4e);sNr=r(q6t,"distilbert"),q6t.forEach(t),lNr=r(SIe," \u2014 "),_K=n(SIe,"A",{href:!0});var N6t=s(_K);iNr=r(N6t,"FlaxDistilBertForMultipleChoice"),N6t.forEach(t),dNr=r(SIe," (DistilBERT model)"),SIe.forEach(t),cNr=i(To),A3=n(To,"LI",{});var RIe=s(A3);O4e=n(RIe,"STRONG",{});var j6t=s(O4e);fNr=r(j6t,"electra"),j6t.forEach(t),mNr=r(RIe," \u2014 "),uK=n(RIe,"A",{href:!0});var D6t=s(uK);gNr=r(D6t,"FlaxElectraForMultipleChoice"),D6t.forEach(t),hNr=r(RIe," (ELECTRA model)"),RIe.forEach(t),pNr=i(To),y3=n(To,"LI",{});var PIe=s(y3);V4e=n(PIe,"STRONG",{});var G6t=s(V4e);_Nr=r(G6t,"roberta"),G6t.forEach(t),uNr=r(PIe," \u2014 "),bK=n(PIe,"A",{href:!0});var O6t=s(bK);bNr=r(O6t,"FlaxRobertaForMultipleChoice"),O6t.forEach(t),vNr=r(PIe," (RoBERTa model)"),PIe.forEach(t),FNr=i(To),L3=n(To,"LI",{});var BIe=s(L3);X4e=n(BIe,"STRONG",{});var V6t=s(X4e);TNr=r(V6t,"roformer"),V6t.forEach(t),MNr=r(BIe," \u2014 "),vK=n(BIe,"A",{href:!0});var X6t=s(vK);ENr=r(X6t,"FlaxRoFormerForMultipleChoice"),X6t.forEach(t),CNr=r(BIe," (RoFormer model)"),BIe.forEach(t),wNr=i(To),x3=n(To,"LI",{});var IIe=s(x3);z4e=n(IIe,"STRONG",{});var z6t=s(z4e);ANr=r(z6t,"xlm-roberta"),z6t.forEach(t),yNr=r(IIe," \u2014 "),FK=n(IIe,"A",{href:!0});var W6t=s(FK);LNr=r(W6t,"FlaxXLMRobertaForMultipleChoice"),W6t.forEach(t),xNr=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),To.forEach(t),$Nr=i(ti),T($3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),NNe=i(f),of=n(f,"H2",{class:!0});var zDe=s(of);k3=n(zDe,"A",{id:!0,class:!0,href:!0});var Q6t=s(k3);W4e=n(Q6t,"SPAN",{});var H6t=s(W4e);T(ex.$$.fragment,H6t),H6t.forEach(t),Q6t.forEach(t),kNr=i(zDe),Q4e=n(zDe,"SPAN",{});var U6t=s(Q4e);SNr=r(U6t,"FlaxAutoModelForNextSentencePrediction"),U6t.forEach(t),zDe.forEach(t),jNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(ox.$$.fragment,ai),RNr=i(ai),rf=n(ai,"P",{});var Fee=s(rf);PNr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TK=n(Fee,"A",{href:!0});var J6t=s(TK);BNr=r(J6t,"from_pretrained()"),J6t.forEach(t),INr=r(Fee," class method or the "),MK=n(Fee,"A",{href:!0});var Y6t=s(MK);qNr=r(Y6t,"from_config()"),Y6t.forEach(t),NNr=r(Fee,` class
method.`),Fee.forEach(t),jNr=i(ai),rx=n(ai,"P",{});var WDe=s(rx);DNr=r(WDe,"This class cannot be instantiated directly using "),H4e=n(WDe,"CODE",{});var K6t=s(H4e);GNr=r(K6t,"__init__()"),K6t.forEach(t),ONr=r(WDe," (throws an error)."),WDe.forEach(t),VNr=i(ai),Jt=n(ai,"DIV",{class:!0});var oA=s(Jt);T(tx.$$.fragment,oA),XNr=i(oA),U4e=n(oA,"P",{});var Z6t=s(U4e);zNr=r(Z6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Z6t.forEach(t),WNr=i(oA),tf=n(oA,"P",{});var Tee=s(tf);QNr=r(Tee,`Note:
Loading a model from its configuration file does `),J4e=n(Tee,"STRONG",{});var eyt=s(J4e);HNr=r(eyt,"not"),eyt.forEach(t),UNr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(Tee,"A",{href:!0});var oyt=s(EK);JNr=r(oyt,"from_pretrained()"),oyt.forEach(t),YNr=r(Tee," to load the model weights."),Tee.forEach(t),KNr=i(oA),T(S3.$$.fragment,oA),oA.forEach(t),ZNr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(ax.$$.fragment,ni),ejr=i(ni),Y4e=n(ni,"P",{});var ryt=s(Y4e);ojr=r(ryt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ryt.forEach(t),rjr=i(ni),En=n(ni,"P",{});var rA=s(En);tjr=r(rA,"The model class to instantiate is selected based on the "),K4e=n(rA,"CODE",{});var tyt=s(K4e);ajr=r(tyt,"model_type"),tyt.forEach(t),njr=r(rA,` property of the config object (either
passed as an argument or loaded from `),Z4e=n(rA,"CODE",{});var ayt=s(Z4e);sjr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),ljr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(rA,"CODE",{});var nyt=s(eEe);ijr=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),djr=r(rA,":"),rA.forEach(t),cjr=i(ni),oEe=n(ni,"UL",{});var syt=s(oEe);R3=n(syt,"LI",{});var qIe=s(R3);rEe=n(qIe,"STRONG",{});var lyt=s(rEe);fjr=r(lyt,"bert"),lyt.forEach(t),mjr=r(qIe," \u2014 "),CK=n(qIe,"A",{href:!0});var iyt=s(CK);gjr=r(iyt,"FlaxBertForNextSentencePrediction"),iyt.forEach(t),hjr=r(qIe," (BERT model)"),qIe.forEach(t),syt.forEach(t),pjr=i(ni),T(P3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),DNe=i(f),af=n(f,"H2",{class:!0});var QDe=s(af);B3=n(QDe,"A",{id:!0,class:!0,href:!0});var dyt=s(B3);tEe=n(dyt,"SPAN",{});var cyt=s(tEe);T(nx.$$.fragment,cyt),cyt.forEach(t),dyt.forEach(t),_jr=i(QDe),aEe=n(QDe,"SPAN",{});var fyt=s(aEe);ujr=r(fyt,"FlaxAutoModelForImageClassification"),fyt.forEach(t),QDe.forEach(t),GNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(sx.$$.fragment,si),bjr=i(si),nf=n(si,"P",{});var Mee=s(nf);vjr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wK=n(Mee,"A",{href:!0});var myt=s(wK);Fjr=r(myt,"from_pretrained()"),myt.forEach(t),Tjr=r(Mee," class method or the "),AK=n(Mee,"A",{href:!0});var gyt=s(AK);Mjr=r(gyt,"from_config()"),gyt.forEach(t),Ejr=r(Mee,` class
method.`),Mee.forEach(t),Cjr=i(si),lx=n(si,"P",{});var HDe=s(lx);wjr=r(HDe,"This class cannot be instantiated directly using "),nEe=n(HDe,"CODE",{});var hyt=s(nEe);Ajr=r(hyt,"__init__()"),hyt.forEach(t),yjr=r(HDe," (throws an error)."),HDe.forEach(t),Ljr=i(si),Yt=n(si,"DIV",{class:!0});var tA=s(Yt);T(ix.$$.fragment,tA),xjr=i(tA),sEe=n(tA,"P",{});var pyt=s(sEe);$jr=r(pyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pyt.forEach(t),kjr=i(tA),sf=n(tA,"P",{});var Eee=s(sf);Sjr=r(Eee,`Note:
Loading a model from its configuration file does `),lEe=n(Eee,"STRONG",{});var _yt=s(lEe);Rjr=r(_yt,"not"),_yt.forEach(t),Pjr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Eee,"A",{href:!0});var uyt=s(yK);Bjr=r(uyt,"from_pretrained()"),uyt.forEach(t),Ijr=r(Eee," to load the model weights."),Eee.forEach(t),qjr=i(tA),T(I3.$$.fragment,tA),tA.forEach(t),Njr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(dx.$$.fragment,li),jjr=i(li),iEe=n(li,"P",{});var byt=s(iEe);Djr=r(byt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),byt.forEach(t),Gjr=i(li),Cn=n(li,"P",{});var aA=s(Cn);Ojr=r(aA,"The model class to instantiate is selected based on the "),dEe=n(aA,"CODE",{});var vyt=s(dEe);Vjr=r(vyt,"model_type"),vyt.forEach(t),Xjr=r(aA,` property of the config object (either
passed as an argument or loaded from `),cEe=n(aA,"CODE",{});var Fyt=s(cEe);zjr=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),Wjr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(aA,"CODE",{});var Tyt=s(fEe);Qjr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),Hjr=r(aA,":"),aA.forEach(t),Ujr=i(li),cx=n(li,"UL",{});var UDe=s(cx);q3=n(UDe,"LI",{});var NIe=s(q3);mEe=n(NIe,"STRONG",{});var Myt=s(mEe);Jjr=r(Myt,"beit"),Myt.forEach(t),Yjr=r(NIe," \u2014 "),LK=n(NIe,"A",{href:!0});var Eyt=s(LK);Kjr=r(Eyt,"FlaxBeitForImageClassification"),Eyt.forEach(t),Zjr=r(NIe," (BEiT model)"),NIe.forEach(t),eDr=i(UDe),N3=n(UDe,"LI",{});var jIe=s(N3);gEe=n(jIe,"STRONG",{});var Cyt=s(gEe);oDr=r(Cyt,"vit"),Cyt.forEach(t),rDr=r(jIe," \u2014 "),xK=n(jIe,"A",{href:!0});var wyt=s(xK);tDr=r(wyt,"FlaxViTForImageClassification"),wyt.forEach(t),aDr=r(jIe," (ViT model)"),jIe.forEach(t),UDe.forEach(t),nDr=i(li),T(j3.$$.fragment,li),li.forEach(t),si.forEach(t),ONe=i(f),lf=n(f,"H2",{class:!0});var JDe=s(lf);D3=n(JDe,"A",{id:!0,class:!0,href:!0});var Ayt=s(D3);hEe=n(Ayt,"SPAN",{});var yyt=s(hEe);T(fx.$$.fragment,yyt),yyt.forEach(t),Ayt.forEach(t),sDr=i(JDe),pEe=n(JDe,"SPAN",{});var Lyt=s(pEe);lDr=r(Lyt,"FlaxAutoModelForVision2Seq"),Lyt.forEach(t),JDe.forEach(t),VNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(mx.$$.fragment,ii),iDr=i(ii),df=n(ii,"P",{});var Cee=s(df);dDr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$K=n(Cee,"A",{href:!0});var xyt=s($K);cDr=r(xyt,"from_pretrained()"),xyt.forEach(t),fDr=r(Cee," class method or the "),kK=n(Cee,"A",{href:!0});var $yt=s(kK);mDr=r($yt,"from_config()"),$yt.forEach(t),gDr=r(Cee,` class
method.`),Cee.forEach(t),hDr=i(ii),gx=n(ii,"P",{});var YDe=s(gx);pDr=r(YDe,"This class cannot be instantiated directly using "),_Ee=n(YDe,"CODE",{});var kyt=s(_Ee);_Dr=r(kyt,"__init__()"),kyt.forEach(t),uDr=r(YDe," (throws an error)."),YDe.forEach(t),bDr=i(ii),Kt=n(ii,"DIV",{class:!0});var nA=s(Kt);T(hx.$$.fragment,nA),vDr=i(nA),uEe=n(nA,"P",{});var Syt=s(uEe);FDr=r(Syt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Syt.forEach(t),TDr=i(nA),cf=n(nA,"P",{});var wee=s(cf);MDr=r(wee,`Note:
Loading a model from its configuration file does `),bEe=n(wee,"STRONG",{});var Ryt=s(bEe);EDr=r(Ryt,"not"),Ryt.forEach(t),CDr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(wee,"A",{href:!0});var Pyt=s(SK);wDr=r(Pyt,"from_pretrained()"),Pyt.forEach(t),ADr=r(wee," to load the model weights."),wee.forEach(t),yDr=i(nA),T(G3.$$.fragment,nA),nA.forEach(t),LDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(px.$$.fragment,di),xDr=i(di),vEe=n(di,"P",{});var Byt=s(vEe);$Dr=r(Byt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Byt.forEach(t),kDr=i(di),wn=n(di,"P",{});var sA=s(wn);SDr=r(sA,"The model class to instantiate is selected based on the "),FEe=n(sA,"CODE",{});var Iyt=s(FEe);RDr=r(Iyt,"model_type"),Iyt.forEach(t),PDr=r(sA,` property of the config object (either
passed as an argument or loaded from `),TEe=n(sA,"CODE",{});var qyt=s(TEe);BDr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),IDr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MEe=n(sA,"CODE",{});var Nyt=s(MEe);qDr=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),NDr=r(sA,":"),sA.forEach(t),jDr=i(di),EEe=n(di,"UL",{});var jyt=s(EEe);O3=n(jyt,"LI",{});var DIe=s(O3);CEe=n(DIe,"STRONG",{});var Dyt=s(CEe);DDr=r(Dyt,"vision-encoder-decoder"),Dyt.forEach(t),GDr=r(DIe," \u2014 "),RK=n(DIe,"A",{href:!0});var Gyt=s(RK);ODr=r(Gyt,"FlaxVisionEncoderDecoderModel"),Gyt.forEach(t),VDr=r(DIe," (Vision Encoder decoder model)"),DIe.forEach(t),jyt.forEach(t),XDr=i(di),T(V3.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(z8t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(P$,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(B$,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertConfig"),c(I$,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartConfig"),c(q$,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitConfig"),c(N$,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertConfig"),c(j$,"href","/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(D$,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdConfig"),c(G$,"href","/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(O$,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(V$,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(X$,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertConfig"),c(z$,"href","/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineConfig"),c(W$,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPConfig"),c(Q$,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertConfig"),c(H$,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextConfig"),c(U$,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLConfig"),c(J$,"href","/docs/transformers/pr_17299/en/model_doc/cvt#transformers.CvtConfig"),c(Y$,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(K$,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Z$,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ek,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaConfig"),c(ok,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(rk,"href","/docs/transformers/pr_17299/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(tk,"href","/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTConfig"),c(ak,"href","/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrConfig"),c(nk,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertConfig"),c(sk,"href","/docs/transformers/pr_17299/en/model_doc/dpr#transformers.DPRConfig"),c(lk,"href","/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTConfig"),c(ik,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraConfig"),c(dk,"href","/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ck,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertConfig"),c(fk,"href","/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaConfig"),c(mk,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetConfig"),c(gk,"href","/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTConfig"),c(hk,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelConfig"),c(pk,"href","/docs/transformers/pr_17299/en/model_doc/glpn#transformers.GLPNConfig"),c(_k,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Config"),c(uk,"href","/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(bk,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJConfig"),c(vk,"href","/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertConfig"),c(Fk,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertConfig"),c(Tk,"href","/docs/transformers/pr_17299/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Mk,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ek,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ck,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDConfig"),c(wk,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerConfig"),c(Ak,"href","/docs/transformers/pr_17299/en/model_doc/luke#transformers.LukeConfig"),c(yk,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertConfig"),c(Lk,"href","/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100Config"),c(xk,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianConfig"),c($k,"href","/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(kk,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartConfig"),c(Sk,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Rk,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Pk,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetConfig"),c(Bk,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Config"),c(Ik,"href","/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(qk,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Nk,"href","/docs/transformers/pr_17299/en/model_doc/opt#transformers.OPTConfig"),c(jk,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusConfig"),c(Dk,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Gk,"href","/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartConfig"),c(Ok,"href","/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Vk,"href","/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Xk,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(zk,"href","/docs/transformers/pr_17299/en/model_doc/rag#transformers.RagConfig"),c(Wk,"href","/docs/transformers/pr_17299/en/model_doc/realm#transformers.RealmConfig"),c(Qk,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerConfig"),c(Hk,"href","/docs/transformers/pr_17299/en/model_doc/regnet#transformers.RegNetConfig"),c(Uk,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertConfig"),c(Jk,"href","/docs/transformers/pr_17299/en/model_doc/resnet#transformers.ResNetConfig"),c(Yk,"href","/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertConfig"),c(Kk,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaConfig"),c(Zk,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerConfig"),c(eS,"href","/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerConfig"),c(oS,"href","/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWConfig"),c(rS,"href","/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDConfig"),c(tS,"href","/docs/transformers/pr_17299/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(aS,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(nS,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(sS,"href","/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterConfig"),c(lS,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(iS,"href","/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinConfig"),c(dS,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Config"),c(cS,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasConfig"),c(fS,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(mS,"href","/docs/transformers/pr_17299/en/model_doc/trocr#transformers.TrOCRConfig"),c(gS,"href","/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(hS,"href","/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(pS,"href","/docs/transformers/pr_17299/en/model_doc/van#transformers.VanConfig"),c(_S,"href","/docs/transformers/pr_17299/en/model_doc/vilt#transformers.ViltConfig"),c(uS,"href","/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(bS,"href","/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(vS,"href","/docs/transformers/pr_17299/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(FS,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTConfig"),c(TS,"href","/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(MS,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ES,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(CS,"href","/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMConfig"),c(wS,"href","/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMConfig"),c(AS,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMConfig"),c(yS,"href","/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(LS,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(xS,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c($S,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetConfig"),c(kS,"href","/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosConfig"),c(SS,"href","/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(RS,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(PS,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertTokenizer"),c(BS,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(IS,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartTokenizer"),c(qS,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartTokenizerFast"),c(NS,"href","/docs/transformers/pr_17299/en/model_doc/barthez#transformers.BarthezTokenizer"),c(jS,"href","/docs/transformers/pr_17299/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(DS,"href","/docs/transformers/pr_17299/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(GS,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizer"),c(OS,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizerFast"),c(VS,"href","/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(XS,"href","/docs/transformers/pr_17299/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(zS,"href","/docs/transformers/pr_17299/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(WS,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(QS,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(HS,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(US,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JS,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(YS,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(KS,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ZS,"href","/docs/transformers/pr_17299/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(eR,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertTokenizer"),c(oR,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineTokenizer"),c(tR,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPTokenizer"),c(aR,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nR,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sR,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17299/en/model_doc/cpm#transformers.CpmTokenizer"),c(iR,"href","/docs/transformers/pr_17299/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(dR,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(cR,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fR,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mR,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaTokenizer"),c(gR,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(hR,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(pR,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(_R,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uR,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17299/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(vR,"href","/docs/transformers/pr_17299/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(FR,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraTokenizer"),c(TR,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(MR,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ER,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetTokenizer"),c(CR,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(wR,"href","/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(AR,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelTokenizer"),c(yR,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(LR,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xR,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($R,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kR,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SR,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RR,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(PR,"href","/docs/transformers/pr_17299/en/model_doc/herbert#transformers.HerbertTokenizer"),c(BR,"href","/docs/transformers/pr_17299/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qR,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NR,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jR,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(DR,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(GR,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(OR,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17299/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(XR,"href","/docs/transformers/pr_17299/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(zR,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDTokenizer"),c(WR,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDTokenizerFast"),c(QR,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerTokenizer"),c(HR,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(UR,"href","/docs/transformers/pr_17299/en/model_doc/luke#transformers.LukeTokenizer"),c(JR,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(YR,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(ZR,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianTokenizer"),c(eP,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartTokenizer"),c(oP,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(rP,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(tP,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(aP,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizer"),c(nP,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17299/en/model_doc/mluke#transformers.MLukeTokenizer"),c(lP,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(iP,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(cP,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(fP,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.T5Tokenizer"),c(mP,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.T5TokenizerFast"),c(gP,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertTokenizer"),c(hP,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(_P,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(uP,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bP,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vP,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FP,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(TP,"href","/docs/transformers/pr_17299/en/model_doc/phobert#transformers.PhobertTokenizer"),c(MP,"href","/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartTokenizer"),c(EP,"href","/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(CP,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizer"),c(wP,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizerFast"),c(AP,"href","/docs/transformers/pr_17299/en/model_doc/rag#transformers.RagTokenizer"),c(yP,"href","/docs/transformers/pr_17299/en/model_doc/realm#transformers.RealmTokenizer"),c(LP,"href","/docs/transformers/pr_17299/en/model_doc/realm#transformers.RealmTokenizerFast"),c(xP,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerTokenizer"),c($P,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(kP,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertTokenizer"),c(SP,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(RP,"href","/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(PP,"href","/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IP,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qP,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(NP,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(jP,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(DP,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(GP,"href","/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterTokenizer"),c(OP,"href","/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(VP,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(XP,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.T5Tokenizer"),c(WP,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QP,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasTokenizer"),c(HP,"href","/docs/transformers/pr_17299/en/model_doc/tapex#transformers.TapexTokenizer"),c(UP,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(JP,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizer"),c(YP,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ZP,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(oB,"href","/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMTokenizer"),c(rB,"href","/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(tB,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMTokenizer"),c(aB,"href","/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(nB,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(sB,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(lB,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(cB,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(fB,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertTokenizer"),c(mB,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoFeatureExtractor"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(gB,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hB,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(TB,"href","/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17299/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AB,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(yB,"href","/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c($B,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DB,"href","/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoProcessor"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(GB,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(OB,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPProcessor"),c(VB,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(XB,"href","/docs/transformers/pr_17299/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(HB,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(UB,"href","/docs/transformers/pr_17299/en/model_doc/trocr#transformers.TrOCRProcessor"),c(JB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_17299/en/model_doc/vilt#transformers.ViltProcessor"),c(ZB,"href","/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(eI,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"id","transformers.AutoModel"),c(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(tI,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aI,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nI,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sI,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertModel"),c(lI,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartModel"),c(iI,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitModel"),c(dI,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertModel"),c(cI,"href","/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(fI,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdModel"),c(mI,"href","/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(gI,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(hI,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(pI,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertModel"),c(_I,"href","/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineModel"),c(uI,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.CLIPModel"),c(bI,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertModel"),c(vI,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextModel"),c(FI,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLModel"),c(TI,"href","/docs/transformers/pr_17299/en/model_doc/cvt#transformers.CvtModel"),c(MI,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(EI,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(CI,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wI,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaModel"),c(AI,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(yI,"href","/docs/transformers/pr_17299/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(LI,"href","/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTModel"),c(xI,"href","/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrModel"),c($I,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertModel"),c(kI,"href","/docs/transformers/pr_17299/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(SI,"href","/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTModel"),c(RI,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraModel"),c(PI,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertModel"),c(BI,"href","/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaModel"),c(II,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetModel"),c(qI,"href","/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTModel"),c(NI,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelModel"),c(jI,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelBaseModel"),c(DI,"href","/docs/transformers/pr_17299/en/model_doc/glpn#transformers.GLPNModel"),c(GI,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2Model"),c(OI,"href","/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(VI,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJModel"),c(XI,"href","/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertModel"),c(zI,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertModel"),c(WI,"href","/docs/transformers/pr_17299/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(QI,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(HI,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(UI,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDModel"),c(JI,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerModel"),c(YI,"href","/docs/transformers/pr_17299/en/model_doc/luke#transformers.LukeModel"),c(KI,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertModel"),c(ZI,"href","/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100Model"),c(eq,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianModel"),c(oq,"href","/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerModel"),c(rq,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartModel"),c(tq,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aq,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nq,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetModel"),c(sq,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5Model"),c(lq,"href","/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerModel"),c(iq,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(dq,"href","/docs/transformers/pr_17299/en/model_doc/opt#transformers.OPTModel"),c(cq,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusModel"),c(fq,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverModel"),c(mq,"href","/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartModel"),c(gq,"href","/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hq,"href","/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pq,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_q,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerModel"),c(uq,"href","/docs/transformers/pr_17299/en/model_doc/regnet#transformers.RegNetModel"),c(bq,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertModel"),c(vq,"href","/docs/transformers/pr_17299/en/model_doc/resnet#transformers.ResNetModel"),c(Fq,"href","/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertModel"),c(Tq,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaModel"),c(Mq,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerModel"),c(Eq,"href","/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerModel"),c(Cq,"href","/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWModel"),c(wq,"href","/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDModel"),c(Aq,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yq,"href","/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterModel"),c(Lq,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(xq,"href","/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinModel"),c($q,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5Model"),c(kq,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasModel"),c(Sq,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Rq,"href","/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Pq,"href","/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Bq,"href","/docs/transformers/pr_17299/en/model_doc/van#transformers.VanModel"),c(Iq,"href","/docs/transformers/pr_17299/en/model_doc/vilt#transformers.ViltModel"),c(qq,"href","/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Nq,"href","/docs/transformers/pr_17299/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jq,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTModel"),c(Dq,"href","/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Gq,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oq,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vq,"href","/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMModel"),c(Xq,"href","/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMModel"),c(zq,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMModel"),c(Wq,"href","/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Qq,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Hq,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Uq,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetModel"),c(Jq,"href","/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosModel"),c(Yq,"href","/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForPreTraining"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Kq,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zq,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eN,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oN,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rN,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tN,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForPreTraining"),c(aN,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nN,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sN,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lN,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iN,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dN,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cN,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fN,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mN,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gN,"href","/docs/transformers/pr_17299/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hN,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pN,"href","/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_N,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uN,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bN,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FN,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TN,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MN,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(EN,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CN,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wN,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AN,"href","/docs/transformers/pr_17299/en/model_doc/retribert#transformers.RetriBertModel"),c(yN,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LN,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($N,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kN,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SN,"href","/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(RN,"href","/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(PN,"href","/docs/transformers/pr_17299/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(BN,"href","/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(IN,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qN,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(NN,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jN,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DN,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GN,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForCausalLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(ON,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForCausalLM"),c(WN,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertLMHeadModel"),c(QN,"href","/docs/transformers/pr_17299/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(HN,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(UN,"href","/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(JN,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(YN,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(KN,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ZN,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ej,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oj,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rj,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tj,"href","/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(aj,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(nj,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianForCausalLM"),c(sj,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForCausalLM"),c(lj,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(ij,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dj,"href","/docs/transformers/pr_17299/en/model_doc/opt#transformers.OPTForCausalLM"),c(cj,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(fj,"href","/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(mj,"href","/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(gj,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(hj,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(pj,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(_j,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uj,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(bj,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(vj,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17299/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Tj,"href","/docs/transformers/pr_17299/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Mj,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Cj,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(wj,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Aj,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E2,"id","transformers.AutoModelForMaskedLM"),c(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(yj,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lj,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xj,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($j,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qj,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jj,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Oj,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tD,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(aD,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(sD,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lD,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(iD,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(dD,"href","/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i1,"id","transformers.AutoModelForSeq2SeqLM"),c(i1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(cD,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fD,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mD,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gD,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(bD,"href","/docs/transformers/pr_17299/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17299/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.MarianMTModel"),c(MD,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17299/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17299/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L1,"id","transformers.AutoModelForSequenceClassification"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(xD,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($D,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kD,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SD,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17299/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C9,"id","transformers.AutoModelForMultipleChoice"),c(C9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C9,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(CG,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wG,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AG,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yG,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c($G,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForNextSentencePrediction"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(rO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(sO,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(lO,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(iO,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(dO,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mb,"id","transformers.AutoModelForTokenClassification"),c(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mb,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(cO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(_O,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForTokenClassification"),c(bO,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(vO,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(FO,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(TO,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(MO,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(CO,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AO,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(yO,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(LO,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($O,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kO,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(SO,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(BO,"href","/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(IO,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(NO,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(jO,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(DO,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(OO,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(VO,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(XO,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(zO,"href","/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ub,"id","transformers.AutoModelForQuestionAnswering"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(WO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17299/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17299/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(dV,"href","/docs/transformers/pr_17299/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17299/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17299/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17299/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17299/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17299/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17299/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17299/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17299/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c($V,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(RV,"href","/docs/transformers/pr_17299/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(PV,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vv,"id","transformers.AutoModelForImageClassification"),c(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vv,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(NV,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitForImageClassification"),c(OV,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(VV,"href","/docs/transformers/pr_17299/en/model_doc/cvt#transformers.CvtForImageClassification"),c(XV,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(zV,"href","/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTForImageClassification"),c(WV,"href","/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(QV,"href","/docs/transformers/pr_17299/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(HV,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(UV,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(JV,"href","/docs/transformers/pr_17299/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(YV,"href","/docs/transformers/pr_17299/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(KV,"href","/docs/transformers/pr_17299/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(ZV,"href","/docs/transformers/pr_17299/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(eX,"href","/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(oX,"href","/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinForImageClassification"),c(rX,"href","/docs/transformers/pr_17299/en/model_doc/van#transformers.VanForImageClassification"),c(tX,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForVision2Seq"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(aX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForAudioClassification"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(iX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForAudioFrameClassification"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(FX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(CX,"href","/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(wX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(AX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(yX,"href","/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForCTC"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(LX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(SX,"href","/docs/transformers/pr_17299/en/model_doc/hubert#transformers.HubertForCTC"),c(RX,"href","/docs/transformers/pr_17299/en/model_doc/sew#transformers.SEWForCTC"),c(PX,"href","/docs/transformers/pr_17299/en/model_doc/sew-d#transformers.SEWDForCTC"),c(BX,"href","/docs/transformers/pr_17299/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(IX,"href","/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(qX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(NX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(jX,"href","/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17299/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(XX,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForAudioXVector"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(zX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(UX,"href","/docs/transformers/pr_17299/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(JX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(YX,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(KX,"href","/docs/transformers/pr_17299/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForMaskedImageModeling"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17299/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(tz,"href","/docs/transformers/pr_17299/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(az,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForObjectDetection"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(nz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrForObjectDetection"),c(dz,"href","/docs/transformers/pr_17299/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForImageSegmentation"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17299/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForSemanticSegmentation"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(hz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(bz,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(vz,"href","/docs/transformers/pr_17299/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Fz,"href","/docs/transformers/pr_17299/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForInstanceSegmentation"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17299/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.TFAutoModel"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertModel"),c(xz,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.TFBartModel"),c($z,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertModel"),c(kz,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Sz,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Rz,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertModel"),c(Pz,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.TFCLIPModel"),c(Bz,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertModel"),c(Iz,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.TFConvNextModel"),c(qz,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Nz,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(jz,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaModel"),c(Dz,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Gz,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Oz,"href","/docs/transformers/pr_17299/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Vz,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraModel"),c(Xz,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(zz,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelModel"),c(Wz,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Qz,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Hz,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJModel"),c(Uz,"href","/docs/transformers/pr_17299/en/model_doc/hubert#transformers.TFHubertModel"),c(Jz,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Yz,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.TFLEDModel"),c(Kz,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerModel"),c(Zz,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.TFLxmertModel"),c(eW,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.TFMarianModel"),c(oW,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.TFMBartModel"),c(rW,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(tW,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetModel"),c(aW,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.TFMT5Model"),c(nW,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(sW,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.TFPegasusModel"),c(lW,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertModel"),c(iW,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaModel"),c(dW,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cW,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fW,"href","/docs/transformers/pr_17299/en/model_doc/swin#transformers.TFSwinModel"),c(mW,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.TFT5Model"),c(gW,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasModel"),c(hW,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pW,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.TFViTModel"),c(_W,"href","/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uW,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bW,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMModel"),c(vW,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FW,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.TFAutoModelForPreTraining"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wW,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AW,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForPreTraining"),c(yW,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LW,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xW,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($W,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kW,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SW,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RW,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PW,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BW,"href","/docs/transformers/pr_17299/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IW,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(qW,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NW,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jW,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DW,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GW,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OW,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VW,"href","/docs/transformers/pr_17299/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XW,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zW,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(WW,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForCausalLM"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YW,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KW,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eQ,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oQ,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(tQ,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(aQ,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(nQ,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(sQ,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.TFAutoModelForImageClassification"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17299/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(mQ,"href","/docs/transformers/pr_17299/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(gQ,"href","/docs/transformers/pr_17299/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(hQ,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForMaskedLM"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($Q,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zQ,"href","/docs/transformers/pr_17299/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.TFMarianMTModel"),c(QQ,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.TFAutoModelForSequenceClassification"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(YQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17299/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17299/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17299/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I4,"id","transformers.TFAutoModelForMultipleChoice"),c(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I4,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(AH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c($H,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(kH,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(WH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(JH,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(YH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_17299/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForTokenClassification"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(oU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(nU,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(lU,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(dU,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(cU,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(mU,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(hU,"href","/docs/transformers/pr_17299/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(pU,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(_U,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(uU,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(bU,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(FU,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(TU,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(MU,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(EU,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForQuestionAnswering"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17299/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c($U,"href","/docs/transformers/pr_17299/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17299/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17299/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17299/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(IU,"href","/docs/transformers/pr_17299/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17299/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17299/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17299/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17299/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17299/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(zU,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17299/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForVision2Seq"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(QU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17299/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModel"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertModel"),c(nJ,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartModel"),c(sJ,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.FlaxBeitModel"),c(lJ,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertModel"),c(iJ,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(dJ,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(cJ,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fJ,"href","/docs/transformers/pr_17299/en/model_doc/clip#transformers.FlaxCLIPModel"),c(mJ,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(gJ,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraModel"),c(hJ,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pJ,"href","/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_J,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(uJ,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.FlaxMarianModel"),c(bJ,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartModel"),c(vJ,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.FlaxMT5Model"),c(FJ,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(TJ,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(MJ,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(EJ,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.FlaxT5Model"),c(CJ,"href","/docs/transformers/pr_17299/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(wJ,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.FlaxViTModel"),c(AJ,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(yJ,"href","/docs/transformers/pr_17299/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(LJ,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForCausalLM"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(RJ,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(PJ,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(BJ,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(IJ,"href","/docs/transformers/pr_17299/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(qJ,"href","/docs/transformers/pr_17299/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(NJ,"href","/docs/transformers/pr_17299/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(jJ,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(DJ,"href","/docs/transformers/pr_17299/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForPreTraining"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zJ,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(QJ,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(HJ,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(UJ,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KJ,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZJ,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_17299/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(oY,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModelForMaskedLM"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(rY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(sY,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lY,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(iY,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(dY,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(fY,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gY,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hY,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vY,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_17299/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17299/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(MY,"href","/docs/transformers/pr_17299/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(EY,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CY,"href","/docs/transformers/pr_17299/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wY,"href","/docs/transformers/pr_17299/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17299/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(yY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(kY,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(SY,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(PY,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(BY,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17299/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17299/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForTokenClassification"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tK,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nK,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lK,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iK,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dK,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(cK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/pr_17299/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hK,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17299/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17299/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_17299/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bK,"href","/docs/transformers/pr_17299/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17299/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17299/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(TK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_17299/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.FlaxAutoModelForImageClassification"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(wK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LK,"href","/docs/transformers/pr_17299/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xK,"href","/docs/transformers/pr_17299/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForVision2Seq"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c($K,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17299/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17299/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,lA),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,iA),e(We,Ln),e(We,xn),e(xn,dA),e(We,hi),e(We,$n),e($n,cA),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,L$),e(Ae,_i),e(_i,x$),e(Ae,$$),b(f,Eo,u),b(f,wa,u),e(wa,k$),e(wa,uf),e(uf,S$),e(wa,KDe),b(f,GIe,u),b(f,ui,u),e(ui,bf),e(bf,Aee),M(fA,Aee,null),e(ui,ZDe),e(ui,yee),e(yee,eGe),b(f,OIe,u),b(f,kn,u),e(kn,oGe),e(kn,Lee),e(Lee,rGe),e(kn,tGe),e(kn,xee),e(xee,aGe),e(kn,nGe),b(f,VIe,u),M(mA,f,u),b(f,XIe,u),b(f,R$,u),e(R$,sGe),b(f,zIe,u),M(vf,f,u),b(f,WIe,u),b(f,bi,u),e(bi,Ff),e(Ff,$ee),M(gA,$ee,null),e(bi,lGe),e(bi,kee),e(kee,iGe),b(f,QIe,u),b(f,Co,u),M(hA,Co,null),e(Co,dGe),e(Co,pA),e(pA,cGe),e(pA,P$),e(P$,fGe),e(pA,mGe),e(Co,gGe),e(Co,_A),e(_A,hGe),e(_A,See),e(See,pGe),e(_A,_Ge),e(Co,uGe),e(Co,Er),M(uA,Er,null),e(Er,bGe),e(Er,Ree),e(Ree,vGe),e(Er,FGe),e(Er,vi),e(vi,TGe),e(vi,Pee),e(Pee,MGe),e(vi,EGe),e(vi,Bee),e(Bee,CGe),e(vi,wGe),e(Er,AGe),e(Er,A),e(A,Tf),e(Tf,Iee),e(Iee,yGe),e(Tf,LGe),e(Tf,B$),e(B$,xGe),e(Tf,$Ge),e(A,kGe),e(A,Mf),e(Mf,qee),e(qee,SGe),e(Mf,RGe),e(Mf,I$),e(I$,PGe),e(Mf,BGe),e(A,IGe),e(A,Ef),e(Ef,Nee),e(Nee,qGe),e(Ef,NGe),e(Ef,q$),e(q$,jGe),e(Ef,DGe),e(A,GGe),e(A,Cf),e(Cf,jee),e(jee,OGe),e(Cf,VGe),e(Cf,N$),e(N$,XGe),e(Cf,zGe),e(A,WGe),e(A,wf),e(wf,Dee),e(Dee,QGe),e(wf,HGe),e(wf,j$),e(j$,UGe),e(wf,JGe),e(A,YGe),e(A,Af),e(Af,Gee),e(Gee,KGe),e(Af,ZGe),e(Af,D$),e(D$,eOe),e(Af,oOe),e(A,rOe),e(A,yf),e(yf,Oee),e(Oee,tOe),e(yf,aOe),e(yf,G$),e(G$,nOe),e(yf,sOe),e(A,lOe),e(A,Lf),e(Lf,Vee),e(Vee,iOe),e(Lf,dOe),e(Lf,O$),e(O$,cOe),e(Lf,fOe),e(A,mOe),e(A,xf),e(xf,Xee),e(Xee,gOe),e(xf,hOe),e(xf,V$),e(V$,pOe),e(xf,_Oe),e(A,uOe),e(A,$f),e($f,zee),e(zee,bOe),e($f,vOe),e($f,X$),e(X$,FOe),e($f,TOe),e(A,MOe),e(A,kf),e(kf,Wee),e(Wee,EOe),e(kf,COe),e(kf,z$),e(z$,wOe),e(kf,AOe),e(A,yOe),e(A,Sf),e(Sf,Qee),e(Qee,LOe),e(Sf,xOe),e(Sf,W$),e(W$,$Oe),e(Sf,kOe),e(A,SOe),e(A,Rf),e(Rf,Hee),e(Hee,ROe),e(Rf,POe),e(Rf,Q$),e(Q$,BOe),e(Rf,IOe),e(A,qOe),e(A,Pf),e(Pf,Uee),e(Uee,NOe),e(Pf,jOe),e(Pf,H$),e(H$,DOe),e(Pf,GOe),e(A,OOe),e(A,Bf),e(Bf,Jee),e(Jee,VOe),e(Bf,XOe),e(Bf,U$),e(U$,zOe),e(Bf,WOe),e(A,QOe),e(A,If),e(If,Yee),e(Yee,HOe),e(If,UOe),e(If,J$),e(J$,JOe),e(If,YOe),e(A,KOe),e(A,qf),e(qf,Kee),e(Kee,ZOe),e(qf,eVe),e(qf,Y$),e(Y$,oVe),e(qf,rVe),e(A,tVe),e(A,Nf),e(Nf,Zee),e(Zee,aVe),e(Nf,nVe),e(Nf,K$),e(K$,sVe),e(Nf,lVe),e(A,iVe),e(A,jf),e(jf,eoe),e(eoe,dVe),e(jf,cVe),e(jf,Z$),e(Z$,fVe),e(jf,mVe),e(A,gVe),e(A,Df),e(Df,ooe),e(ooe,hVe),e(Df,pVe),e(Df,ek),e(ek,_Ve),e(Df,uVe),e(A,bVe),e(A,Gf),e(Gf,roe),e(roe,vVe),e(Gf,FVe),e(Gf,ok),e(ok,TVe),e(Gf,MVe),e(A,EVe),e(A,Of),e(Of,toe),e(toe,CVe),e(Of,wVe),e(Of,rk),e(rk,AVe),e(Of,yVe),e(A,LVe),e(A,Vf),e(Vf,aoe),e(aoe,xVe),e(Vf,$Ve),e(Vf,tk),e(tk,kVe),e(Vf,SVe),e(A,RVe),e(A,Xf),e(Xf,noe),e(noe,PVe),e(Xf,BVe),e(Xf,ak),e(ak,IVe),e(Xf,qVe),e(A,NVe),e(A,zf),e(zf,soe),e(soe,jVe),e(zf,DVe),e(zf,nk),e(nk,GVe),e(zf,OVe),e(A,VVe),e(A,Wf),e(Wf,loe),e(loe,XVe),e(Wf,zVe),e(Wf,sk),e(sk,WVe),e(Wf,QVe),e(A,HVe),e(A,Qf),e(Qf,ioe),e(ioe,UVe),e(Qf,JVe),e(Qf,lk),e(lk,YVe),e(Qf,KVe),e(A,ZVe),e(A,Hf),e(Hf,doe),e(doe,eXe),e(Hf,oXe),e(Hf,ik),e(ik,rXe),e(Hf,tXe),e(A,aXe),e(A,Uf),e(Uf,coe),e(coe,nXe),e(Uf,sXe),e(Uf,dk),e(dk,lXe),e(Uf,iXe),e(A,dXe),e(A,Jf),e(Jf,foe),e(foe,cXe),e(Jf,fXe),e(Jf,ck),e(ck,mXe),e(Jf,gXe),e(A,hXe),e(A,Yf),e(Yf,moe),e(moe,pXe),e(Yf,_Xe),e(Yf,fk),e(fk,uXe),e(Yf,bXe),e(A,vXe),e(A,Kf),e(Kf,goe),e(goe,FXe),e(Kf,TXe),e(Kf,mk),e(mk,MXe),e(Kf,EXe),e(A,CXe),e(A,Zf),e(Zf,hoe),e(hoe,wXe),e(Zf,AXe),e(Zf,gk),e(gk,yXe),e(Zf,LXe),e(A,xXe),e(A,em),e(em,poe),e(poe,$Xe),e(em,kXe),e(em,hk),e(hk,SXe),e(em,RXe),e(A,PXe),e(A,om),e(om,_oe),e(_oe,BXe),e(om,IXe),e(om,pk),e(pk,qXe),e(om,NXe),e(A,jXe),e(A,rm),e(rm,uoe),e(uoe,DXe),e(rm,GXe),e(rm,_k),e(_k,OXe),e(rm,VXe),e(A,XXe),e(A,tm),e(tm,boe),e(boe,zXe),e(tm,WXe),e(tm,uk),e(uk,QXe),e(tm,HXe),e(A,UXe),e(A,am),e(am,voe),e(voe,JXe),e(am,YXe),e(am,bk),e(bk,KXe),e(am,ZXe),e(A,eze),e(A,nm),e(nm,Foe),e(Foe,oze),e(nm,rze),e(nm,vk),e(vk,tze),e(nm,aze),e(A,nze),e(A,sm),e(sm,Toe),e(Toe,sze),e(sm,lze),e(sm,Fk),e(Fk,ize),e(sm,dze),e(A,cze),e(A,lm),e(lm,Moe),e(Moe,fze),e(lm,mze),e(lm,Tk),e(Tk,gze),e(lm,hze),e(A,pze),e(A,im),e(im,Eoe),e(Eoe,_ze),e(im,uze),e(im,Mk),e(Mk,bze),e(im,vze),e(A,Fze),e(A,dm),e(dm,Coe),e(Coe,Tze),e(dm,Mze),e(dm,Ek),e(Ek,Eze),e(dm,Cze),e(A,wze),e(A,cm),e(cm,woe),e(woe,Aze),e(cm,yze),e(cm,Ck),e(Ck,Lze),e(cm,xze),e(A,$ze),e(A,fm),e(fm,Aoe),e(Aoe,kze),e(fm,Sze),e(fm,wk),e(wk,Rze),e(fm,Pze),e(A,Bze),e(A,mm),e(mm,yoe),e(yoe,Ize),e(mm,qze),e(mm,Ak),e(Ak,Nze),e(mm,jze),e(A,Dze),e(A,gm),e(gm,Loe),e(Loe,Gze),e(gm,Oze),e(gm,yk),e(yk,Vze),e(gm,Xze),e(A,zze),e(A,hm),e(hm,xoe),e(xoe,Wze),e(hm,Qze),e(hm,Lk),e(Lk,Hze),e(hm,Uze),e(A,Jze),e(A,pm),e(pm,$oe),e($oe,Yze),e(pm,Kze),e(pm,xk),e(xk,Zze),e(pm,eWe),e(A,oWe),e(A,_m),e(_m,koe),e(koe,rWe),e(_m,tWe),e(_m,$k),e($k,aWe),e(_m,nWe),e(A,sWe),e(A,um),e(um,Soe),e(Soe,lWe),e(um,iWe),e(um,kk),e(kk,dWe),e(um,cWe),e(A,fWe),e(A,bm),e(bm,Roe),e(Roe,mWe),e(bm,gWe),e(bm,Sk),e(Sk,hWe),e(bm,pWe),e(A,_We),e(A,vm),e(vm,Poe),e(Poe,uWe),e(vm,bWe),e(vm,Rk),e(Rk,vWe),e(vm,FWe),e(A,TWe),e(A,Fm),e(Fm,Boe),e(Boe,MWe),e(Fm,EWe),e(Fm,Pk),e(Pk,CWe),e(Fm,wWe),e(A,AWe),e(A,Tm),e(Tm,Ioe),e(Ioe,yWe),e(Tm,LWe),e(Tm,Bk),e(Bk,xWe),e(Tm,$We),e(A,kWe),e(A,Mm),e(Mm,qoe),e(qoe,SWe),e(Mm,RWe),e(Mm,Ik),e(Ik,PWe),e(Mm,BWe),e(A,IWe),e(A,Em),e(Em,Noe),e(Noe,qWe),e(Em,NWe),e(Em,qk),e(qk,jWe),e(Em,DWe),e(A,GWe),e(A,Cm),e(Cm,joe),e(joe,OWe),e(Cm,VWe),e(Cm,Nk),e(Nk,XWe),e(Cm,zWe),e(A,WWe),e(A,wm),e(wm,Doe),e(Doe,QWe),e(wm,HWe),e(wm,jk),e(jk,UWe),e(wm,JWe),e(A,YWe),e(A,Am),e(Am,Goe),e(Goe,KWe),e(Am,ZWe),e(Am,Dk),e(Dk,eQe),e(Am,oQe),e(A,rQe),e(A,ym),e(ym,Ooe),e(Ooe,tQe),e(ym,aQe),e(ym,Gk),e(Gk,nQe),e(ym,sQe),e(A,lQe),e(A,Lm),e(Lm,Voe),e(Voe,iQe),e(Lm,dQe),e(Lm,Ok),e(Ok,cQe),e(Lm,fQe),e(A,mQe),e(A,xm),e(xm,Xoe),e(Xoe,gQe),e(xm,hQe),e(xm,Vk),e(Vk,pQe),e(xm,_Qe),e(A,uQe),e(A,$m),e($m,zoe),e(zoe,bQe),e($m,vQe),e($m,Xk),e(Xk,FQe),e($m,TQe),e(A,MQe),e(A,km),e(km,Woe),e(Woe,EQe),e(km,CQe),e(km,zk),e(zk,wQe),e(km,AQe),e(A,yQe),e(A,Sm),e(Sm,Qoe),e(Qoe,LQe),e(Sm,xQe),e(Sm,Wk),e(Wk,$Qe),e(Sm,kQe),e(A,SQe),e(A,Rm),e(Rm,Hoe),e(Hoe,RQe),e(Rm,PQe),e(Rm,Qk),e(Qk,BQe),e(Rm,IQe),e(A,qQe),e(A,Pm),e(Pm,Uoe),e(Uoe,NQe),e(Pm,jQe),e(Pm,Hk),e(Hk,DQe),e(Pm,GQe),e(A,OQe),e(A,Bm),e(Bm,Joe),e(Joe,VQe),e(Bm,XQe),e(Bm,Uk),e(Uk,zQe),e(Bm,WQe),e(A,QQe),e(A,Im),e(Im,Yoe),e(Yoe,HQe),e(Im,UQe),e(Im,Jk),e(Jk,JQe),e(Im,YQe),e(A,KQe),e(A,qm),e(qm,Koe),e(Koe,ZQe),e(qm,eHe),e(qm,Yk),e(Yk,oHe),e(qm,rHe),e(A,tHe),e(A,Nm),e(Nm,Zoe),e(Zoe,aHe),e(Nm,nHe),e(Nm,Kk),e(Kk,sHe),e(Nm,lHe),e(A,iHe),e(A,jm),e(jm,ere),e(ere,dHe),e(jm,cHe),e(jm,Zk),e(Zk,fHe),e(jm,mHe),e(A,gHe),e(A,Dm),e(Dm,ore),e(ore,hHe),e(Dm,pHe),e(Dm,eS),e(eS,_He),e(Dm,uHe),e(A,bHe),e(A,Gm),e(Gm,rre),e(rre,vHe),e(Gm,FHe),e(Gm,oS),e(oS,THe),e(Gm,MHe),e(A,EHe),e(A,Om),e(Om,tre),e(tre,CHe),e(Om,wHe),e(Om,rS),e(rS,AHe),e(Om,yHe),e(A,LHe),e(A,Vm),e(Vm,are),e(are,xHe),e(Vm,$He),e(Vm,tS),e(tS,kHe),e(Vm,SHe),e(A,RHe),e(A,Xm),e(Xm,nre),e(nre,PHe),e(Xm,BHe),e(Xm,aS),e(aS,IHe),e(Xm,qHe),e(A,NHe),e(A,zm),e(zm,sre),e(sre,jHe),e(zm,DHe),e(zm,nS),e(nS,GHe),e(zm,OHe),e(A,VHe),e(A,Wm),e(Wm,lre),e(lre,XHe),e(Wm,zHe),e(Wm,sS),e(sS,WHe),e(Wm,QHe),e(A,HHe),e(A,Qm),e(Qm,ire),e(ire,UHe),e(Qm,JHe),e(Qm,lS),e(lS,YHe),e(Qm,KHe),e(A,ZHe),e(A,Hm),e(Hm,dre),e(dre,eUe),e(Hm,oUe),e(Hm,iS),e(iS,rUe),e(Hm,tUe),e(A,aUe),e(A,Um),e(Um,cre),e(cre,nUe),e(Um,sUe),e(Um,dS),e(dS,lUe),e(Um,iUe),e(A,dUe),e(A,Jm),e(Jm,fre),e(fre,cUe),e(Jm,fUe),e(Jm,cS),e(cS,mUe),e(Jm,gUe),e(A,hUe),e(A,Ym),e(Ym,mre),e(mre,pUe),e(Ym,_Ue),e(Ym,fS),e(fS,uUe),e(Ym,bUe),e(A,vUe),e(A,Km),e(Km,gre),e(gre,FUe),e(Km,TUe),e(Km,mS),e(mS,MUe),e(Km,EUe),e(A,CUe),e(A,Zm),e(Zm,hre),e(hre,wUe),e(Zm,AUe),e(Zm,gS),e(gS,yUe),e(Zm,LUe),e(A,xUe),e(A,eg),e(eg,pre),e(pre,$Ue),e(eg,kUe),e(eg,hS),e(hS,SUe),e(eg,RUe),e(A,PUe),e(A,og),e(og,_re),e(_re,BUe),e(og,IUe),e(og,pS),e(pS,qUe),e(og,NUe),e(A,jUe),e(A,rg),e(rg,ure),e(ure,DUe),e(rg,GUe),e(rg,_S),e(_S,OUe),e(rg,VUe),e(A,XUe),e(A,tg),e(tg,bre),e(bre,zUe),e(tg,WUe),e(tg,uS),e(uS,QUe),e(tg,HUe),e(A,UUe),e(A,ag),e(ag,vre),e(vre,JUe),e(ag,YUe),e(ag,bS),e(bS,KUe),e(ag,ZUe),e(A,eJe),e(A,ng),e(ng,Fre),e(Fre,oJe),e(ng,rJe),e(ng,vS),e(vS,tJe),e(ng,aJe),e(A,nJe),e(A,sg),e(sg,Tre),e(Tre,sJe),e(sg,lJe),e(sg,FS),e(FS,iJe),e(sg,dJe),e(A,cJe),e(A,lg),e(lg,Mre),e(Mre,fJe),e(lg,mJe),e(lg,TS),e(TS,gJe),e(lg,hJe),e(A,pJe),e(A,ig),e(ig,Ere),e(Ere,_Je),e(ig,uJe),e(ig,MS),e(MS,bJe),e(ig,vJe),e(A,FJe),e(A,dg),e(dg,Cre),e(Cre,TJe),e(dg,MJe),e(dg,ES),e(ES,EJe),e(dg,CJe),e(A,wJe),e(A,cg),e(cg,wre),e(wre,AJe),e(cg,yJe),e(cg,CS),e(CS,LJe),e(cg,xJe),e(A,$Je),e(A,fg),e(fg,Are),e(Are,kJe),e(fg,SJe),e(fg,wS),e(wS,RJe),e(fg,PJe),e(A,BJe),e(A,mg),e(mg,yre),e(yre,IJe),e(mg,qJe),e(mg,AS),e(AS,NJe),e(mg,jJe),e(A,DJe),e(A,gg),e(gg,Lre),e(Lre,GJe),e(gg,OJe),e(gg,yS),e(yS,VJe),e(gg,XJe),e(A,zJe),e(A,hg),e(hg,xre),e(xre,WJe),e(hg,QJe),e(hg,LS),e(LS,HJe),e(hg,UJe),e(A,JJe),e(A,pg),e(pg,$re),e($re,YJe),e(pg,KJe),e(pg,xS),e(xS,ZJe),e(pg,eYe),e(A,oYe),e(A,_g),e(_g,kre),e(kre,rYe),e(_g,tYe),e(_g,$S),e($S,aYe),e(_g,nYe),e(A,sYe),e(A,ug),e(ug,Sre),e(Sre,lYe),e(ug,iYe),e(ug,kS),e(kS,dYe),e(ug,cYe),e(A,fYe),e(A,bg),e(bg,Rre),e(Rre,mYe),e(bg,gYe),e(bg,SS),e(SS,hYe),e(bg,pYe),e(Er,_Ye),M(vg,Er,null),e(Co,uYe),e(Co,Fg),M(bA,Fg,null),e(Fg,bYe),e(Fg,Pre),e(Pre,vYe),b(f,HIe,u),b(f,Fi,u),e(Fi,Tg),e(Tg,Bre),M(vA,Bre,null),e(Fi,FYe),e(Fi,Ire),e(Ire,TYe),b(f,UIe,u),b(f,wo,u),M(FA,wo,null),e(wo,MYe),e(wo,TA),e(TA,EYe),e(TA,RS),e(RS,CYe),e(TA,wYe),e(wo,AYe),e(wo,MA),e(MA,yYe),e(MA,qre),e(qre,LYe),e(MA,xYe),e(wo,$Ye),e(wo,Cr),M(EA,Cr,null),e(Cr,kYe),e(Cr,Nre),e(Nre,SYe),e(Cr,RYe),e(Cr,Aa),e(Aa,PYe),e(Aa,jre),e(jre,BYe),e(Aa,IYe),e(Aa,Dre),e(Dre,qYe),e(Aa,NYe),e(Aa,Gre),e(Gre,jYe),e(Aa,DYe),e(Cr,GYe),e(Cr,k),e(k,Sn),e(Sn,Ore),e(Ore,OYe),e(Sn,VYe),e(Sn,PS),e(PS,XYe),e(Sn,zYe),e(Sn,BS),e(BS,WYe),e(Sn,QYe),e(k,HYe),e(k,Rn),e(Rn,Vre),e(Vre,UYe),e(Rn,JYe),e(Rn,IS),e(IS,YYe),e(Rn,KYe),e(Rn,qS),e(qS,ZYe),e(Rn,eKe),e(k,oKe),e(k,Pn),e(Pn,Xre),e(Xre,rKe),e(Pn,tKe),e(Pn,NS),e(NS,aKe),e(Pn,nKe),e(Pn,jS),e(jS,sKe),e(Pn,lKe),e(k,iKe),e(k,Mg),e(Mg,zre),e(zre,dKe),e(Mg,cKe),e(Mg,DS),e(DS,fKe),e(Mg,mKe),e(k,gKe),e(k,Bn),e(Bn,Wre),e(Wre,hKe),e(Bn,pKe),e(Bn,GS),e(GS,_Ke),e(Bn,uKe),e(Bn,OS),e(OS,bKe),e(Bn,vKe),e(k,FKe),e(k,Eg),e(Eg,Qre),e(Qre,TKe),e(Eg,MKe),e(Eg,VS),e(VS,EKe),e(Eg,CKe),e(k,wKe),e(k,Cg),e(Cg,Hre),e(Hre,AKe),e(Cg,yKe),e(Cg,XS),e(XS,LKe),e(Cg,xKe),e(k,$Ke),e(k,wg),e(wg,Ure),e(Ure,kKe),e(wg,SKe),e(wg,zS),e(zS,RKe),e(wg,PKe),e(k,BKe),e(k,In),e(In,Jre),e(Jre,IKe),e(In,qKe),e(In,WS),e(WS,NKe),e(In,jKe),e(In,QS),e(QS,DKe),e(In,GKe),e(k,OKe),e(k,qn),e(qn,Yre),e(Yre,VKe),e(qn,XKe),e(qn,HS),e(HS,zKe),e(qn,WKe),e(qn,US),e(US,QKe),e(qn,HKe),e(k,UKe),e(k,Nn),e(Nn,Kre),e(Kre,JKe),e(Nn,YKe),e(Nn,JS),e(JS,KKe),e(Nn,ZKe),e(Nn,YS),e(YS,eZe),e(Nn,oZe),e(k,rZe),e(k,Ag),e(Ag,Zre),e(Zre,tZe),e(Ag,aZe),e(Ag,KS),e(KS,nZe),e(Ag,sZe),e(k,lZe),e(k,yg),e(yg,ete),e(ete,iZe),e(yg,dZe),e(yg,ZS),e(ZS,cZe),e(yg,fZe),e(k,mZe),e(k,jn),e(jn,ote),e(ote,gZe),e(jn,hZe),e(jn,eR),e(eR,pZe),e(jn,_Ze),e(jn,oR),e(oR,uZe),e(jn,bZe),e(k,vZe),e(k,Lg),e(Lg,rte),e(rte,FZe),e(Lg,TZe),e(Lg,rR),e(rR,MZe),e(Lg,EZe),e(k,CZe),e(k,Dn),e(Dn,tte),e(tte,wZe),e(Dn,AZe),e(Dn,tR),e(tR,yZe),e(Dn,LZe),e(Dn,aR),e(aR,xZe),e(Dn,$Ze),e(k,kZe),e(k,Gn),e(Gn,ate),e(ate,SZe),e(Gn,RZe),e(Gn,nR),e(nR,PZe),e(Gn,BZe),e(Gn,sR),e(sR,IZe),e(Gn,qZe),e(k,NZe),e(k,On),e(On,nte),e(nte,jZe),e(On,DZe),e(On,lR),e(lR,GZe),e(On,OZe),e(On,iR),e(iR,VZe),e(On,XZe),e(k,zZe),e(k,xg),e(xg,ste),e(ste,WZe),e(xg,QZe),e(xg,dR),e(dR,HZe),e(xg,UZe),e(k,JZe),e(k,Vn),e(Vn,lte),e(lte,YZe),e(Vn,KZe),e(Vn,cR),e(cR,ZZe),e(Vn,eeo),e(Vn,fR),e(fR,oeo),e(Vn,reo),e(k,teo),e(k,Xn),e(Xn,ite),e(ite,aeo),e(Xn,neo),e(Xn,mR),e(mR,seo),e(Xn,leo),e(Xn,gR),e(gR,ieo),e(Xn,deo),e(k,ceo),e(k,zn),e(zn,dte),e(dte,feo),e(zn,meo),e(zn,hR),e(hR,geo),e(zn,heo),e(zn,pR),e(pR,peo),e(zn,_eo),e(k,ueo),e(k,Wn),e(Wn,cte),e(cte,beo),e(Wn,veo),e(Wn,_R),e(_R,Feo),e(Wn,Teo),e(Wn,uR),e(uR,Meo),e(Wn,Eeo),e(k,Ceo),e(k,Qn),e(Qn,fte),e(fte,weo),e(Qn,Aeo),e(Qn,bR),e(bR,yeo),e(Qn,Leo),e(Qn,vR),e(vR,xeo),e(Qn,$eo),e(k,keo),e(k,Hn),e(Hn,mte),e(mte,Seo),e(Hn,Reo),e(Hn,FR),e(FR,Peo),e(Hn,Beo),e(Hn,TR),e(TR,Ieo),e(Hn,qeo),e(k,Neo),e(k,$g),e($g,gte),e(gte,jeo),e($g,Deo),e($g,MR),e(MR,Geo),e($g,Oeo),e(k,Veo),e(k,Un),e(Un,hte),e(hte,Xeo),e(Un,zeo),e(Un,ER),e(ER,Weo),e(Un,Qeo),e(Un,CR),e(CR,Heo),e(Un,Ueo),e(k,Jeo),e(k,kg),e(kg,pte),e(pte,Yeo),e(kg,Keo),e(kg,wR),e(wR,Zeo),e(kg,eoo),e(k,ooo),e(k,Jn),e(Jn,_te),e(_te,roo),e(Jn,too),e(Jn,AR),e(AR,aoo),e(Jn,noo),e(Jn,yR),e(yR,soo),e(Jn,loo),e(k,ioo),e(k,Yn),e(Yn,ute),e(ute,doo),e(Yn,coo),e(Yn,LR),e(LR,foo),e(Yn,moo),e(Yn,xR),e(xR,goo),e(Yn,hoo),e(k,poo),e(k,Kn),e(Kn,bte),e(bte,_oo),e(Kn,uoo),e(Kn,$R),e($R,boo),e(Kn,voo),e(Kn,kR),e(kR,Foo),e(Kn,Too),e(k,Moo),e(k,Zn),e(Zn,vte),e(vte,Eoo),e(Zn,Coo),e(Zn,SR),e(SR,woo),e(Zn,Aoo),e(Zn,RR),e(RR,yoo),e(Zn,Loo),e(k,xoo),e(k,es),e(es,Fte),e(Fte,$oo),e(es,koo),e(es,PR),e(PR,Soo),e(es,Roo),e(es,BR),e(BR,Poo),e(es,Boo),e(k,Ioo),e(k,Sg),e(Sg,Tte),e(Tte,qoo),e(Sg,Noo),e(Sg,IR),e(IR,joo),e(Sg,Doo),e(k,Goo),e(k,os),e(os,Mte),e(Mte,Ooo),e(os,Voo),e(os,qR),e(qR,Xoo),e(os,zoo),e(os,NR),e(NR,Woo),e(os,Qoo),e(k,Hoo),e(k,rs),e(rs,Ete),e(Ete,Uoo),e(rs,Joo),e(rs,jR),e(jR,Yoo),e(rs,Koo),e(rs,DR),e(DR,Zoo),e(rs,ero),e(k,oro),e(k,ts),e(ts,Cte),e(Cte,rro),e(ts,tro),e(ts,GR),e(GR,aro),e(ts,nro),e(ts,OR),e(OR,sro),e(ts,lro),e(k,iro),e(k,as),e(as,wte),e(wte,dro),e(as,cro),e(as,VR),e(VR,fro),e(as,mro),e(as,XR),e(XR,gro),e(as,hro),e(k,pro),e(k,ns),e(ns,Ate),e(Ate,_ro),e(ns,uro),e(ns,zR),e(zR,bro),e(ns,vro),e(ns,WR),e(WR,Fro),e(ns,Tro),e(k,Mro),e(k,ss),e(ss,yte),e(yte,Ero),e(ss,Cro),e(ss,QR),e(QR,wro),e(ss,Aro),e(ss,HR),e(HR,yro),e(ss,Lro),e(k,xro),e(k,Rg),e(Rg,Lte),e(Lte,$ro),e(Rg,kro),e(Rg,UR),e(UR,Sro),e(Rg,Rro),e(k,Pro),e(k,ls),e(ls,xte),e(xte,Bro),e(ls,Iro),e(ls,JR),e(JR,qro),e(ls,Nro),e(ls,YR),e(YR,jro),e(ls,Dro),e(k,Gro),e(k,Pg),e(Pg,$te),e($te,Oro),e(Pg,Vro),e(Pg,KR),e(KR,Xro),e(Pg,zro),e(k,Wro),e(k,Bg),e(Bg,kte),e(kte,Qro),e(Bg,Hro),e(Bg,ZR),e(ZR,Uro),e(Bg,Jro),e(k,Yro),e(k,is),e(is,Ste),e(Ste,Kro),e(is,Zro),e(is,eP),e(eP,eto),e(is,oto),e(is,oP),e(oP,rto),e(is,tto),e(k,ato),e(k,ds),e(ds,Rte),e(Rte,nto),e(ds,sto),e(ds,rP),e(rP,lto),e(ds,ito),e(ds,tP),e(tP,dto),e(ds,cto),e(k,fto),e(k,cs),e(cs,Pte),e(Pte,mto),e(cs,gto),e(cs,aP),e(aP,hto),e(cs,pto),e(cs,nP),e(nP,_to),e(cs,uto),e(k,bto),e(k,Ig),e(Ig,Bte),e(Bte,vto),e(Ig,Fto),e(Ig,sP),e(sP,Tto),e(Ig,Mto),e(k,Eto),e(k,fs),e(fs,Ite),e(Ite,Cto),e(fs,wto),e(fs,lP),e(lP,Ato),e(fs,yto),e(fs,iP),e(iP,Lto),e(fs,xto),e(k,$to),e(k,ms),e(ms,qte),e(qte,kto),e(ms,Sto),e(ms,dP),e(dP,Rto),e(ms,Pto),e(ms,cP),e(cP,Bto),e(ms,Ito),e(k,qto),e(k,gs),e(gs,Nte),e(Nte,Nto),e(gs,jto),e(gs,fP),e(fP,Dto),e(gs,Gto),e(gs,mP),e(mP,Oto),e(gs,Vto),e(k,Xto),e(k,hs),e(hs,jte),e(jte,zto),e(hs,Wto),e(hs,gP),e(gP,Qto),e(hs,Hto),e(hs,hP),e(hP,Uto),e(hs,Jto),e(k,Yto),e(k,ps),e(ps,Dte),e(Dte,Kto),e(ps,Zto),e(ps,pP),e(pP,eao),e(ps,oao),e(ps,_P),e(_P,rao),e(ps,tao),e(k,aao),e(k,qg),e(qg,Gte),e(Gte,nao),e(qg,sao),e(qg,uP),e(uP,lao),e(qg,iao),e(k,dao),e(k,_s),e(_s,Ote),e(Ote,cao),e(_s,fao),e(_s,bP),e(bP,mao),e(_s,gao),e(_s,vP),e(vP,hao),e(_s,pao),e(k,_ao),e(k,Ng),e(Ng,Vte),e(Vte,uao),e(Ng,bao),e(Ng,FP),e(FP,vao),e(Ng,Fao),e(k,Tao),e(k,jg),e(jg,Xte),e(Xte,Mao),e(jg,Eao),e(jg,TP),e(TP,Cao),e(jg,wao),e(k,Aao),e(k,Dg),e(Dg,zte),e(zte,yao),e(Dg,Lao),e(Dg,MP),e(MP,xao),e(Dg,$ao),e(k,kao),e(k,Gg),e(Gg,Wte),e(Wte,Sao),e(Gg,Rao),e(Gg,EP),e(EP,Pao),e(Gg,Bao),e(k,Iao),e(k,us),e(us,Qte),e(Qte,qao),e(us,Nao),e(us,CP),e(CP,jao),e(us,Dao),e(us,wP),e(wP,Gao),e(us,Oao),e(k,Vao),e(k,Og),e(Og,Hte),e(Hte,Xao),e(Og,zao),e(Og,AP),e(AP,Wao),e(Og,Qao),e(k,Hao),e(k,bs),e(bs,Ute),e(Ute,Uao),e(bs,Jao),e(bs,yP),e(yP,Yao),e(bs,Kao),e(bs,LP),e(LP,Zao),e(bs,eno),e(k,ono),e(k,vs),e(vs,Jte),e(Jte,rno),e(vs,tno),e(vs,xP),e(xP,ano),e(vs,nno),e(vs,$P),e($P,sno),e(vs,lno),e(k,ino),e(k,Fs),e(Fs,Yte),e(Yte,dno),e(Fs,cno),e(Fs,kP),e(kP,fno),e(Fs,mno),e(Fs,SP),e(SP,gno),e(Fs,hno),e(k,pno),e(k,Ts),e(Ts,Kte),e(Kte,_no),e(Ts,uno),e(Ts,RP),e(RP,bno),e(Ts,vno),e(Ts,PP),e(PP,Fno),e(Ts,Tno),e(k,Mno),e(k,Ms),e(Ms,Zte),e(Zte,Eno),e(Ms,Cno),e(Ms,BP),e(BP,wno),e(Ms,Ano),e(Ms,IP),e(IP,yno),e(Ms,Lno),e(k,xno),e(k,Es),e(Es,eae),e(eae,$no),e(Es,kno),e(Es,qP),e(qP,Sno),e(Es,Rno),e(Es,NP),e(NP,Pno),e(Es,Bno),e(k,Ino),e(k,Vg),e(Vg,oae),e(oae,qno),e(Vg,Nno),e(Vg,jP),e(jP,jno),e(Vg,Dno),e(k,Gno),e(k,Xg),e(Xg,rae),e(rae,Ono),e(Xg,Vno),e(Xg,DP),e(DP,Xno),e(Xg,zno),e(k,Wno),e(k,Cs),e(Cs,tae),e(tae,Qno),e(Cs,Hno),e(Cs,GP),e(GP,Uno),e(Cs,Jno),e(Cs,OP),e(OP,Yno),e(Cs,Kno),e(k,Zno),e(k,ws),e(ws,aae),e(aae,eso),e(ws,oso),e(ws,VP),e(VP,rso),e(ws,tso),e(ws,XP),e(XP,aso),e(ws,nso),e(k,sso),e(k,As),e(As,nae),e(nae,lso),e(As,iso),e(As,zP),e(zP,dso),e(As,cso),e(As,WP),e(WP,fso),e(As,mso),e(k,gso),e(k,zg),e(zg,sae),e(sae,hso),e(zg,pso),e(zg,QP),e(QP,_so),e(zg,uso),e(k,bso),e(k,Wg),e(Wg,lae),e(lae,vso),e(Wg,Fso),e(Wg,HP),e(HP,Tso),e(Wg,Mso),e(k,Eso),e(k,Qg),e(Qg,iae),e(iae,Cso),e(Qg,wso),e(Qg,UP),e(UP,Aso),e(Qg,yso),e(k,Lso),e(k,ys),e(ys,dae),e(dae,xso),e(ys,$so),e(ys,JP),e(JP,kso),e(ys,Sso),e(ys,YP),e(YP,Rso),e(ys,Pso),e(k,Bso),e(k,Hg),e(Hg,cae),e(cae,Iso),e(Hg,qso),e(Hg,KP),e(KP,Nso),e(Hg,jso),e(k,Dso),e(k,Ug),e(Ug,fae),e(fae,Gso),e(Ug,Oso),e(Ug,ZP),e(ZP,Vso),e(Ug,Xso),e(k,zso),e(k,Jg),e(Jg,mae),e(mae,Wso),e(Jg,Qso),e(Jg,eB),e(eB,Hso),e(Jg,Uso),e(k,Jso),e(k,Ls),e(Ls,gae),e(gae,Yso),e(Ls,Kso),e(Ls,oB),e(oB,Zso),e(Ls,elo),e(Ls,rB),e(rB,olo),e(Ls,rlo),e(k,tlo),e(k,Yg),e(Yg,hae),e(hae,alo),e(Yg,nlo),e(Yg,tB),e(tB,slo),e(Yg,llo),e(k,ilo),e(k,Kg),e(Kg,pae),e(pae,dlo),e(Kg,clo),e(Kg,aB),e(aB,flo),e(Kg,mlo),e(k,glo),e(k,xs),e(xs,_ae),e(_ae,hlo),e(xs,plo),e(xs,nB),e(nB,_lo),e(xs,ulo),e(xs,sB),e(sB,blo),e(xs,vlo),e(k,Flo),e(k,$s),e($s,uae),e(uae,Tlo),e($s,Mlo),e($s,lB),e(lB,Elo),e($s,Clo),e($s,iB),e(iB,wlo),e($s,Alo),e(k,ylo),e(k,ks),e(ks,bae),e(bae,Llo),e(ks,xlo),e(ks,dB),e(dB,$lo),e(ks,klo),e(ks,cB),e(cB,Slo),e(ks,Rlo),e(k,Plo),e(k,Ss),e(Ss,vae),e(vae,Blo),e(Ss,Ilo),e(Ss,fB),e(fB,qlo),e(Ss,Nlo),e(Ss,mB),e(mB,jlo),e(Ss,Dlo),e(Cr,Glo),M(Zg,Cr,null),e(wo,Olo),e(wo,eh),M(CA,eh,null),e(eh,Vlo),e(eh,Fae),e(Fae,Xlo),b(f,JIe,u),b(f,Ti,u),e(Ti,oh),e(oh,Tae),M(wA,Tae,null),e(Ti,zlo),e(Ti,Mae),e(Mae,Wlo),b(f,YIe,u),b(f,Ao,u),M(AA,Ao,null),e(Ao,Qlo),e(Ao,yA),e(yA,Hlo),e(yA,gB),e(gB,Ulo),e(yA,Jlo),e(Ao,Ylo),e(Ao,LA),e(LA,Klo),e(LA,Eae),e(Eae,Zlo),e(LA,eio),e(Ao,oio),e(Ao,He),M(xA,He,null),e(He,rio),e(He,Cae),e(Cae,tio),e(He,aio),e(He,ya),e(ya,nio),e(ya,wae),e(wae,sio),e(ya,lio),e(ya,Aae),e(Aae,iio),e(ya,dio),e(ya,yae),e(yae,cio),e(ya,fio),e(He,mio),e(He,Z),e(Z,rh),e(rh,Lae),e(Lae,gio),e(rh,hio),e(rh,hB),e(hB,pio),e(rh,_io),e(Z,uio),e(Z,th),e(th,xae),e(xae,bio),e(th,vio),e(th,pB),e(pB,Fio),e(th,Tio),e(Z,Mio),e(Z,ah),e(ah,$ae),e($ae,Eio),e(ah,Cio),e(ah,_B),e(_B,wio),e(ah,Aio),e(Z,yio),e(Z,nh),e(nh,kae),e(kae,Lio),e(nh,xio),e(nh,uB),e(uB,$io),e(nh,kio),e(Z,Sio),e(Z,sh),e(sh,Sae),e(Sae,Rio),e(sh,Pio),e(sh,bB),e(bB,Bio),e(sh,Iio),e(Z,qio),e(Z,lh),e(lh,Rae),e(Rae,Nio),e(lh,jio),e(lh,vB),e(vB,Dio),e(lh,Gio),e(Z,Oio),e(Z,ih),e(ih,Pae),e(Pae,Vio),e(ih,Xio),e(ih,FB),e(FB,zio),e(ih,Wio),e(Z,Qio),e(Z,dh),e(dh,Bae),e(Bae,Hio),e(dh,Uio),e(dh,TB),e(TB,Jio),e(dh,Yio),e(Z,Kio),e(Z,ch),e(ch,Iae),e(Iae,Zio),e(ch,edo),e(ch,MB),e(MB,odo),e(ch,rdo),e(Z,tdo),e(Z,fh),e(fh,qae),e(qae,ado),e(fh,ndo),e(fh,EB),e(EB,sdo),e(fh,ldo),e(Z,ido),e(Z,mh),e(mh,Nae),e(Nae,ddo),e(mh,cdo),e(mh,CB),e(CB,fdo),e(mh,mdo),e(Z,gdo),e(Z,gh),e(gh,jae),e(jae,hdo),e(gh,pdo),e(gh,wB),e(wB,_do),e(gh,udo),e(Z,bdo),e(Z,hh),e(hh,Dae),e(Dae,vdo),e(hh,Fdo),e(hh,AB),e(AB,Tdo),e(hh,Mdo),e(Z,Edo),e(Z,ph),e(ph,Gae),e(Gae,Cdo),e(ph,wdo),e(ph,yB),e(yB,Ado),e(ph,ydo),e(Z,Ldo),e(Z,_h),e(_h,Oae),e(Oae,xdo),e(_h,$do),e(_h,LB),e(LB,kdo),e(_h,Sdo),e(Z,Rdo),e(Z,uh),e(uh,Vae),e(Vae,Pdo),e(uh,Bdo),e(uh,xB),e(xB,Ido),e(uh,qdo),e(Z,Ndo),e(Z,bh),e(bh,Xae),e(Xae,jdo),e(bh,Ddo),e(bh,$B),e($B,Gdo),e(bh,Odo),e(Z,Vdo),e(Z,vh),e(vh,zae),e(zae,Xdo),e(vh,zdo),e(vh,kB),e(kB,Wdo),e(vh,Qdo),e(Z,Hdo),e(Z,Fh),e(Fh,Wae),e(Wae,Udo),e(Fh,Jdo),e(Fh,SB),e(SB,Ydo),e(Fh,Kdo),e(Z,Zdo),e(Z,Th),e(Th,Qae),e(Qae,eco),e(Th,oco),e(Th,RB),e(RB,rco),e(Th,tco),e(Z,aco),e(Z,Mh),e(Mh,Hae),e(Hae,nco),e(Mh,sco),e(Mh,PB),e(PB,lco),e(Mh,ico),e(Z,dco),e(Z,Eh),e(Eh,Uae),e(Uae,cco),e(Eh,fco),e(Eh,BB),e(BB,mco),e(Eh,gco),e(Z,hco),e(Z,Ch),e(Ch,Jae),e(Jae,pco),e(Ch,_co),e(Ch,IB),e(IB,uco),e(Ch,bco),e(Z,vco),e(Z,wh),e(wh,Yae),e(Yae,Fco),e(wh,Tco),e(wh,qB),e(qB,Mco),e(wh,Eco),e(Z,Cco),e(Z,Ah),e(Ah,Kae),e(Kae,wco),e(Ah,Aco),e(Ah,NB),e(NB,yco),e(Ah,Lco),e(Z,xco),e(Z,yh),e(yh,Zae),e(Zae,$co),e(yh,kco),e(yh,jB),e(jB,Sco),e(yh,Rco),e(Z,Pco),e(Z,Lh),e(Lh,ene),e(ene,Bco),e(Lh,Ico),e(Lh,DB),e(DB,qco),e(Lh,Nco),e(He,jco),M(xh,He,null),e(He,Dco),M($h,He,null),e(Ao,Gco),e(Ao,kh),M($A,kh,null),e(kh,Oco),e(kh,one),e(one,Vco),b(f,KIe,u),b(f,Mi,u),e(Mi,Sh),e(Sh,rne),M(kA,rne,null),e(Mi,Xco),e(Mi,tne),e(tne,zco),b(f,ZIe,u),b(f,yo,u),M(SA,yo,null),e(yo,Wco),e(yo,RA),e(RA,Qco),e(RA,GB),e(GB,Hco),e(RA,Uco),e(yo,Jco),e(yo,PA),e(PA,Yco),e(PA,ane),e(ane,Kco),e(PA,Zco),e(yo,efo),e(yo,Ue),M(BA,Ue,null),e(Ue,ofo),e(Ue,nne),e(nne,rfo),e(Ue,tfo),e(Ue,Ei),e(Ei,afo),e(Ei,sne),e(sne,nfo),e(Ei,sfo),e(Ei,lne),e(lne,lfo),e(Ei,ifo),e(Ue,dfo),e(Ue,pe),e(pe,Rh),e(Rh,ine),e(ine,cfo),e(Rh,ffo),e(Rh,OB),e(OB,mfo),e(Rh,gfo),e(pe,hfo),e(pe,Ph),e(Ph,dne),e(dne,pfo),e(Ph,_fo),e(Ph,cne),e(cne,ufo),e(Ph,bfo),e(pe,vfo),e(pe,Bh),e(Bh,fne),e(fne,Ffo),e(Bh,Tfo),e(Bh,VB),e(VB,Mfo),e(Bh,Efo),e(pe,Cfo),e(pe,Ih),e(Ih,mne),e(mne,wfo),e(Ih,Afo),e(Ih,XB),e(XB,yfo),e(Ih,Lfo),e(pe,xfo),e(pe,qh),e(qh,gne),e(gne,$fo),e(qh,kfo),e(qh,zB),e(zB,Sfo),e(qh,Rfo),e(pe,Pfo),e(pe,Nh),e(Nh,hne),e(hne,Bfo),e(Nh,Ifo),e(Nh,WB),e(WB,qfo),e(Nh,Nfo),e(pe,jfo),e(pe,jh),e(jh,pne),e(pne,Dfo),e(jh,Gfo),e(jh,QB),e(QB,Ofo),e(jh,Vfo),e(pe,Xfo),e(pe,Dh),e(Dh,_ne),e(_ne,zfo),e(Dh,Wfo),e(Dh,HB),e(HB,Qfo),e(Dh,Hfo),e(pe,Ufo),e(pe,Gh),e(Gh,une),e(une,Jfo),e(Gh,Yfo),e(Gh,UB),e(UB,Kfo),e(Gh,Zfo),e(pe,emo),e(pe,Oh),e(Oh,bne),e(bne,omo),e(Oh,rmo),e(Oh,JB),e(JB,tmo),e(Oh,amo),e(pe,nmo),e(pe,Vh),e(Vh,vne),e(vne,smo),e(Vh,lmo),e(Vh,YB),e(YB,imo),e(Vh,dmo),e(pe,cmo),e(pe,Xh),e(Xh,Fne),e(Fne,fmo),e(Xh,mmo),e(Xh,KB),e(KB,gmo),e(Xh,hmo),e(pe,pmo),e(pe,zh),e(zh,Tne),e(Tne,_mo),e(zh,umo),e(zh,ZB),e(ZB,bmo),e(zh,vmo),e(pe,Fmo),e(pe,Wh),e(Wh,Mne),e(Mne,Tmo),e(Wh,Mmo),e(Wh,eI),e(eI,Emo),e(Wh,Cmo),e(pe,wmo),e(pe,Qh),e(Qh,Ene),e(Ene,Amo),e(Qh,ymo),e(Qh,oI),e(oI,Lmo),e(Qh,xmo),e(pe,$mo),e(pe,Hh),e(Hh,Cne),e(Cne,kmo),e(Hh,Smo),e(Hh,rI),e(rI,Rmo),e(Hh,Pmo),e(Ue,Bmo),M(Uh,Ue,null),e(Ue,Imo),M(Jh,Ue,null),e(yo,qmo),e(yo,Yh),M(IA,Yh,null),e(Yh,Nmo),e(Yh,wne),e(wne,jmo),b(f,eqe,u),b(f,Ci,u),e(Ci,Kh),e(Kh,Ane),M(qA,Ane,null),e(Ci,Dmo),e(Ci,yne),e(yne,Gmo),b(f,oqe,u),b(f,Lo,u),M(NA,Lo,null),e(Lo,Omo),e(Lo,wi),e(wi,Vmo),e(wi,tI),e(tI,Xmo),e(wi,zmo),e(wi,aI),e(aI,Wmo),e(wi,Qmo),e(Lo,Hmo),e(Lo,jA),e(jA,Umo),e(jA,Lne),e(Lne,Jmo),e(jA,Ymo),e(Lo,Kmo),e(Lo,tt),M(DA,tt,null),e(tt,Zmo),e(tt,xne),e(xne,ego),e(tt,ogo),e(tt,Ai),e(Ai,rgo),e(Ai,$ne),e($ne,tgo),e(Ai,ago),e(Ai,nI),e(nI,ngo),e(Ai,sgo),e(tt,lgo),M(Zh,tt,null),e(Lo,igo),e(Lo,Je),M(GA,Je,null),e(Je,dgo),e(Je,kne),e(kne,cgo),e(Je,fgo),e(Je,La),e(La,mgo),e(La,Sne),e(Sne,ggo),e(La,hgo),e(La,Rne),e(Rne,pgo),e(La,_go),e(La,Pne),e(Pne,ugo),e(La,bgo),e(Je,vgo),e(Je,x),e(x,ep),e(ep,Bne),e(Bne,Fgo),e(ep,Tgo),e(ep,sI),e(sI,Mgo),e(ep,Ego),e(x,Cgo),e(x,op),e(op,Ine),e(Ine,wgo),e(op,Ago),e(op,lI),e(lI,ygo),e(op,Lgo),e(x,xgo),e(x,rp),e(rp,qne),e(qne,$go),e(rp,kgo),e(rp,iI),e(iI,Sgo),e(rp,Rgo),e(x,Pgo),e(x,tp),e(tp,Nne),e(Nne,Bgo),e(tp,Igo),e(tp,dI),e(dI,qgo),e(tp,Ngo),e(x,jgo),e(x,ap),e(ap,jne),e(jne,Dgo),e(ap,Ggo),e(ap,cI),e(cI,Ogo),e(ap,Vgo),e(x,Xgo),e(x,np),e(np,Dne),e(Dne,zgo),e(np,Wgo),e(np,fI),e(fI,Qgo),e(np,Hgo),e(x,Ugo),e(x,sp),e(sp,Gne),e(Gne,Jgo),e(sp,Ygo),e(sp,mI),e(mI,Kgo),e(sp,Zgo),e(x,eho),e(x,lp),e(lp,One),e(One,oho),e(lp,rho),e(lp,gI),e(gI,tho),e(lp,aho),e(x,nho),e(x,ip),e(ip,Vne),e(Vne,sho),e(ip,lho),e(ip,hI),e(hI,iho),e(ip,dho),e(x,cho),e(x,dp),e(dp,Xne),e(Xne,fho),e(dp,mho),e(dp,pI),e(pI,gho),e(dp,hho),e(x,pho),e(x,cp),e(cp,zne),e(zne,_ho),e(cp,uho),e(cp,_I),e(_I,bho),e(cp,vho),e(x,Fho),e(x,fp),e(fp,Wne),e(Wne,Tho),e(fp,Mho),e(fp,uI),e(uI,Eho),e(fp,Cho),e(x,who),e(x,mp),e(mp,Qne),e(Qne,Aho),e(mp,yho),e(mp,bI),e(bI,Lho),e(mp,xho),e(x,$ho),e(x,gp),e(gp,Hne),e(Hne,kho),e(gp,Sho),e(gp,vI),e(vI,Rho),e(gp,Pho),e(x,Bho),e(x,hp),e(hp,Une),e(Une,Iho),e(hp,qho),e(hp,FI),e(FI,Nho),e(hp,jho),e(x,Dho),e(x,pp),e(pp,Jne),e(Jne,Gho),e(pp,Oho),e(pp,TI),e(TI,Vho),e(pp,Xho),e(x,zho),e(x,_p),e(_p,Yne),e(Yne,Who),e(_p,Qho),e(_p,MI),e(MI,Hho),e(_p,Uho),e(x,Jho),e(x,up),e(up,Kne),e(Kne,Yho),e(up,Kho),e(up,EI),e(EI,Zho),e(up,epo),e(x,opo),e(x,bp),e(bp,Zne),e(Zne,rpo),e(bp,tpo),e(bp,CI),e(CI,apo),e(bp,npo),e(x,spo),e(x,vp),e(vp,ese),e(ese,lpo),e(vp,ipo),e(vp,wI),e(wI,dpo),e(vp,cpo),e(x,fpo),e(x,Fp),e(Fp,ose),e(ose,mpo),e(Fp,gpo),e(Fp,AI),e(AI,hpo),e(Fp,ppo),e(x,_po),e(x,Tp),e(Tp,rse),e(rse,upo),e(Tp,bpo),e(Tp,yI),e(yI,vpo),e(Tp,Fpo),e(x,Tpo),e(x,Mp),e(Mp,tse),e(tse,Mpo),e(Mp,Epo),e(Mp,LI),e(LI,Cpo),e(Mp,wpo),e(x,Apo),e(x,Ep),e(Ep,ase),e(ase,ypo),e(Ep,Lpo),e(Ep,xI),e(xI,xpo),e(Ep,$po),e(x,kpo),e(x,Cp),e(Cp,nse),e(nse,Spo),e(Cp,Rpo),e(Cp,$I),e($I,Ppo),e(Cp,Bpo),e(x,Ipo),e(x,wp),e(wp,sse),e(sse,qpo),e(wp,Npo),e(wp,kI),e(kI,jpo),e(wp,Dpo),e(x,Gpo),e(x,Ap),e(Ap,lse),e(lse,Opo),e(Ap,Vpo),e(Ap,SI),e(SI,Xpo),e(Ap,zpo),e(x,Wpo),e(x,yp),e(yp,ise),e(ise,Qpo),e(yp,Hpo),e(yp,RI),e(RI,Upo),e(yp,Jpo),e(x,Ypo),e(x,Lp),e(Lp,dse),e(dse,Kpo),e(Lp,Zpo),e(Lp,PI),e(PI,e_o),e(Lp,o_o),e(x,r_o),e(x,xp),e(xp,cse),e(cse,t_o),e(xp,a_o),e(xp,BI),e(BI,n_o),e(xp,s_o),e(x,l_o),e(x,$p),e($p,fse),e(fse,i_o),e($p,d_o),e($p,II),e(II,c_o),e($p,f_o),e(x,m_o),e(x,kp),e(kp,mse),e(mse,g_o),e(kp,h_o),e(kp,qI),e(qI,p_o),e(kp,__o),e(x,u_o),e(x,Rs),e(Rs,gse),e(gse,b_o),e(Rs,v_o),e(Rs,NI),e(NI,F_o),e(Rs,T_o),e(Rs,jI),e(jI,M_o),e(Rs,E_o),e(x,C_o),e(x,Sp),e(Sp,hse),e(hse,w_o),e(Sp,A_o),e(Sp,DI),e(DI,y_o),e(Sp,L_o),e(x,x_o),e(x,Rp),e(Rp,pse),e(pse,$_o),e(Rp,k_o),e(Rp,GI),e(GI,S_o),e(Rp,R_o),e(x,P_o),e(x,Pp),e(Pp,_se),e(_se,B_o),e(Pp,I_o),e(Pp,OI),e(OI,q_o),e(Pp,N_o),e(x,j_o),e(x,Bp),e(Bp,use),e(use,D_o),e(Bp,G_o),e(Bp,VI),e(VI,O_o),e(Bp,V_o),e(x,X_o),e(x,Ip),e(Ip,bse),e(bse,z_o),e(Ip,W_o),e(Ip,XI),e(XI,Q_o),e(Ip,H_o),e(x,U_o),e(x,qp),e(qp,vse),e(vse,J_o),e(qp,Y_o),e(qp,zI),e(zI,K_o),e(qp,Z_o),e(x,euo),e(x,Np),e(Np,Fse),e(Fse,ouo),e(Np,ruo),e(Np,WI),e(WI,tuo),e(Np,auo),e(x,nuo),e(x,jp),e(jp,Tse),e(Tse,suo),e(jp,luo),e(jp,QI),e(QI,iuo),e(jp,duo),e(x,cuo),e(x,Dp),e(Dp,Mse),e(Mse,fuo),e(Dp,muo),e(Dp,HI),e(HI,guo),e(Dp,huo),e(x,puo),e(x,Gp),e(Gp,Ese),e(Ese,_uo),e(Gp,uuo),e(Gp,UI),e(UI,buo),e(Gp,vuo),e(x,Fuo),e(x,Op),e(Op,Cse),e(Cse,Tuo),e(Op,Muo),e(Op,JI),e(JI,Euo),e(Op,Cuo),e(x,wuo),e(x,Vp),e(Vp,wse),e(wse,Auo),e(Vp,yuo),e(Vp,YI),e(YI,Luo),e(Vp,xuo),e(x,$uo),e(x,Xp),e(Xp,Ase),e(Ase,kuo),e(Xp,Suo),e(Xp,KI),e(KI,Ruo),e(Xp,Puo),e(x,Buo),e(x,zp),e(zp,yse),e(yse,Iuo),e(zp,quo),e(zp,ZI),e(ZI,Nuo),e(zp,juo),e(x,Duo),e(x,Wp),e(Wp,Lse),e(Lse,Guo),e(Wp,Ouo),e(Wp,eq),e(eq,Vuo),e(Wp,Xuo),e(x,zuo),e(x,Qp),e(Qp,xse),e(xse,Wuo),e(Qp,Quo),e(Qp,oq),e(oq,Huo),e(Qp,Uuo),e(x,Juo),e(x,Hp),e(Hp,$se),e($se,Yuo),e(Hp,Kuo),e(Hp,rq),e(rq,Zuo),e(Hp,e2o),e(x,o2o),e(x,Up),e(Up,kse),e(kse,r2o),e(Up,t2o),e(Up,tq),e(tq,a2o),e(Up,n2o),e(x,s2o),e(x,Jp),e(Jp,Sse),e(Sse,l2o),e(Jp,i2o),e(Jp,aq),e(aq,d2o),e(Jp,c2o),e(x,f2o),e(x,Yp),e(Yp,Rse),e(Rse,m2o),e(Yp,g2o),e(Yp,nq),e(nq,h2o),e(Yp,p2o),e(x,_2o),e(x,Kp),e(Kp,Pse),e(Pse,u2o),e(Kp,b2o),e(Kp,sq),e(sq,v2o),e(Kp,F2o),e(x,T2o),e(x,Zp),e(Zp,Bse),e(Bse,M2o),e(Zp,E2o),e(Zp,lq),e(lq,C2o),e(Zp,w2o),e(x,A2o),e(x,e_),e(e_,Ise),e(Ise,y2o),e(e_,L2o),e(e_,iq),e(iq,x2o),e(e_,$2o),e(x,k2o),e(x,o_),e(o_,qse),e(qse,S2o),e(o_,R2o),e(o_,dq),e(dq,P2o),e(o_,B2o),e(x,I2o),e(x,r_),e(r_,Nse),e(Nse,q2o),e(r_,N2o),e(r_,cq),e(cq,j2o),e(r_,D2o),e(x,G2o),e(x,t_),e(t_,jse),e(jse,O2o),e(t_,V2o),e(t_,fq),e(fq,X2o),e(t_,z2o),e(x,W2o),e(x,a_),e(a_,Dse),e(Dse,Q2o),e(a_,H2o),e(a_,mq),e(mq,U2o),e(a_,J2o),e(x,Y2o),e(x,n_),e(n_,Gse),e(Gse,K2o),e(n_,Z2o),e(n_,gq),e(gq,e1o),e(n_,o1o),e(x,r1o),e(x,s_),e(s_,Ose),e(Ose,t1o),e(s_,a1o),e(s_,hq),e(hq,n1o),e(s_,s1o),e(x,l1o),e(x,l_),e(l_,Vse),e(Vse,i1o),e(l_,d1o),e(l_,pq),e(pq,c1o),e(l_,f1o),e(x,m1o),e(x,i_),e(i_,Xse),e(Xse,g1o),e(i_,h1o),e(i_,_q),e(_q,p1o),e(i_,_1o),e(x,u1o),e(x,d_),e(d_,zse),e(zse,b1o),e(d_,v1o),e(d_,uq),e(uq,F1o),e(d_,T1o),e(x,M1o),e(x,c_),e(c_,Wse),e(Wse,E1o),e(c_,C1o),e(c_,bq),e(bq,w1o),e(c_,A1o),e(x,y1o),e(x,f_),e(f_,Qse),e(Qse,L1o),e(f_,x1o),e(f_,vq),e(vq,$1o),e(f_,k1o),e(x,S1o),e(x,m_),e(m_,Hse),e(Hse,R1o),e(m_,P1o),e(m_,Fq),e(Fq,B1o),e(m_,I1o),e(x,q1o),e(x,g_),e(g_,Use),e(Use,N1o),e(g_,j1o),e(g_,Tq),e(Tq,D1o),e(g_,G1o),e(x,O1o),e(x,h_),e(h_,Jse),e(Jse,V1o),e(h_,X1o),e(h_,Mq),e(Mq,z1o),e(h_,W1o),e(x,Q1o),e(x,p_),e(p_,Yse),e(Yse,H1o),e(p_,U1o),e(p_,Eq),e(Eq,J1o),e(p_,Y1o),e(x,K1o),e(x,__),e(__,Kse),e(Kse,Z1o),e(__,e9o),e(__,Cq),e(Cq,o9o),e(__,r9o),e(x,t9o),e(x,u_),e(u_,Zse),e(Zse,a9o),e(u_,n9o),e(u_,wq),e(wq,s9o),e(u_,l9o),e(x,i9o),e(x,b_),e(b_,ele),e(ele,d9o),e(b_,c9o),e(b_,Aq),e(Aq,f9o),e(b_,m9o),e(x,g9o),e(x,v_),e(v_,ole),e(ole,h9o),e(v_,p9o),e(v_,yq),e(yq,_9o),e(v_,u9o),e(x,b9o),e(x,F_),e(F_,rle),e(rle,v9o),e(F_,F9o),e(F_,Lq),e(Lq,T9o),e(F_,M9o),e(x,E9o),e(x,T_),e(T_,tle),e(tle,C9o),e(T_,w9o),e(T_,xq),e(xq,A9o),e(T_,y9o),e(x,L9o),e(x,M_),e(M_,ale),e(ale,x9o),e(M_,$9o),e(M_,$q),e($q,k9o),e(M_,S9o),e(x,R9o),e(x,E_),e(E_,nle),e(nle,P9o),e(E_,B9o),e(E_,kq),e(kq,I9o),e(E_,q9o),e(x,N9o),e(x,C_),e(C_,sle),e(sle,j9o),e(C_,D9o),e(C_,Sq),e(Sq,G9o),e(C_,O9o),e(x,V9o),e(x,w_),e(w_,lle),e(lle,X9o),e(w_,z9o),e(w_,Rq),e(Rq,W9o),e(w_,Q9o),e(x,H9o),e(x,A_),e(A_,ile),e(ile,U9o),e(A_,J9o),e(A_,Pq),e(Pq,Y9o),e(A_,K9o),e(x,Z9o),e(x,y_),e(y_,dle),e(dle,ebo),e(y_,obo),e(y_,Bq),e(Bq,rbo),e(y_,tbo),e(x,abo),e(x,L_),e(L_,cle),e(cle,nbo),e(L_,sbo),e(L_,Iq),e(Iq,lbo),e(L_,ibo),e(x,dbo),e(x,x_),e(x_,fle),e(fle,cbo),e(x_,fbo),e(x_,qq),e(qq,mbo),e(x_,gbo),e(x,hbo),e(x,$_),e($_,mle),e(mle,pbo),e($_,_bo),e($_,Nq),e(Nq,ubo),e($_,bbo),e(x,vbo),e(x,k_),e(k_,gle),e(gle,Fbo),e(k_,Tbo),e(k_,jq),e(jq,Mbo),e(k_,Ebo),e(x,Cbo),e(x,S_),e(S_,hle),e(hle,wbo),e(S_,Abo),e(S_,Dq),e(Dq,ybo),e(S_,Lbo),e(x,xbo),e(x,R_),e(R_,ple),e(ple,$bo),e(R_,kbo),e(R_,Gq),e(Gq,Sbo),e(R_,Rbo),e(x,Pbo),e(x,P_),e(P_,_le),e(_le,Bbo),e(P_,Ibo),e(P_,Oq),e(Oq,qbo),e(P_,Nbo),e(x,jbo),e(x,B_),e(B_,ule),e(ule,Dbo),e(B_,Gbo),e(B_,Vq),e(Vq,Obo),e(B_,Vbo),e(x,Xbo),e(x,I_),e(I_,ble),e(ble,zbo),e(I_,Wbo),e(I_,Xq),e(Xq,Qbo),e(I_,Hbo),e(x,Ubo),e(x,q_),e(q_,vle),e(vle,Jbo),e(q_,Ybo),e(q_,zq),e(zq,Kbo),e(q_,Zbo),e(x,evo),e(x,N_),e(N_,Fle),e(Fle,ovo),e(N_,rvo),e(N_,Wq),e(Wq,tvo),e(N_,avo),e(x,nvo),e(x,j_),e(j_,Tle),e(Tle,svo),e(j_,lvo),e(j_,Qq),e(Qq,ivo),e(j_,dvo),e(x,cvo),e(x,D_),e(D_,Mle),e(Mle,fvo),e(D_,mvo),e(D_,Hq),e(Hq,gvo),e(D_,hvo),e(x,pvo),e(x,G_),e(G_,Ele),e(Ele,_vo),e(G_,uvo),e(G_,Uq),e(Uq,bvo),e(G_,vvo),e(x,Fvo),e(x,O_),e(O_,Cle),e(Cle,Tvo),e(O_,Mvo),e(O_,Jq),e(Jq,Evo),e(O_,Cvo),e(x,wvo),e(x,V_),e(V_,wle),e(wle,Avo),e(V_,yvo),e(V_,Yq),e(Yq,Lvo),e(V_,xvo),e(Je,$vo),e(Je,X_),e(X_,kvo),e(X_,Ale),e(Ale,Svo),e(X_,Rvo),e(X_,yle),e(yle,Pvo),e(Je,Bvo),M(z_,Je,null),b(f,rqe,u),b(f,yi,u),e(yi,W_),e(W_,Lle),M(OA,Lle,null),e(yi,Ivo),e(yi,xle),e(xle,qvo),b(f,tqe,u),b(f,xo,u),M(VA,xo,null),e(xo,Nvo),e(xo,Li),e(Li,jvo),e(Li,Kq),e(Kq,Dvo),e(Li,Gvo),e(Li,Zq),e(Zq,Ovo),e(Li,Vvo),e(xo,Xvo),e(xo,XA),e(XA,zvo),e(XA,$le),e($le,Wvo),e(XA,Qvo),e(xo,Hvo),e(xo,at),M(zA,at,null),e(at,Uvo),e(at,kle),e(kle,Jvo),e(at,Yvo),e(at,xi),e(xi,Kvo),e(xi,Sle),e(Sle,Zvo),e(xi,eFo),e(xi,eN),e(eN,oFo),e(xi,rFo),e(at,tFo),M(Q_,at,null),e(xo,aFo),e(xo,Ye),M(WA,Ye,null),e(Ye,nFo),e(Ye,Rle),e(Rle,sFo),e(Ye,lFo),e(Ye,xa),e(xa,iFo),e(xa,Ple),e(Ple,dFo),e(xa,cFo),e(xa,Ble),e(Ble,fFo),e(xa,mFo),e(xa,Ile),e(Ile,gFo),e(xa,hFo),e(Ye,pFo),e(Ye,G),e(G,H_),e(H_,qle),e(qle,_Fo),e(H_,uFo),e(H_,oN),e(oN,bFo),e(H_,vFo),e(G,FFo),e(G,U_),e(U_,Nle),e(Nle,TFo),e(U_,MFo),e(U_,rN),e(rN,EFo),e(U_,CFo),e(G,wFo),e(G,J_),e(J_,jle),e(jle,AFo),e(J_,yFo),e(J_,tN),e(tN,LFo),e(J_,xFo),e(G,$Fo),e(G,Y_),e(Y_,Dle),e(Dle,kFo),e(Y_,SFo),e(Y_,aN),e(aN,RFo),e(Y_,PFo),e(G,BFo),e(G,K_),e(K_,Gle),e(Gle,IFo),e(K_,qFo),e(K_,nN),e(nN,NFo),e(K_,jFo),e(G,DFo),e(G,Z_),e(Z_,Ole),e(Ole,GFo),e(Z_,OFo),e(Z_,sN),e(sN,VFo),e(Z_,XFo),e(G,zFo),e(G,eu),e(eu,Vle),e(Vle,WFo),e(eu,QFo),e(eu,lN),e(lN,HFo),e(eu,UFo),e(G,JFo),e(G,ou),e(ou,Xle),e(Xle,YFo),e(ou,KFo),e(ou,iN),e(iN,ZFo),e(ou,eTo),e(G,oTo),e(G,ru),e(ru,zle),e(zle,rTo),e(ru,tTo),e(ru,dN),e(dN,aTo),e(ru,nTo),e(G,sTo),e(G,tu),e(tu,Wle),e(Wle,lTo),e(tu,iTo),e(tu,cN),e(cN,dTo),e(tu,cTo),e(G,fTo),e(G,au),e(au,Qle),e(Qle,mTo),e(au,gTo),e(au,fN),e(fN,hTo),e(au,pTo),e(G,_To),e(G,nu),e(nu,Hle),e(Hle,uTo),e(nu,bTo),e(nu,mN),e(mN,vTo),e(nu,FTo),e(G,TTo),e(G,su),e(su,Ule),e(Ule,MTo),e(su,ETo),e(su,gN),e(gN,CTo),e(su,wTo),e(G,ATo),e(G,lu),e(lu,Jle),e(Jle,yTo),e(lu,LTo),e(lu,hN),e(hN,xTo),e(lu,$To),e(G,kTo),e(G,iu),e(iu,Yle),e(Yle,STo),e(iu,RTo),e(iu,pN),e(pN,PTo),e(iu,BTo),e(G,ITo),e(G,du),e(du,Kle),e(Kle,qTo),e(du,NTo),e(du,_N),e(_N,jTo),e(du,DTo),e(G,GTo),e(G,cu),e(cu,Zle),e(Zle,OTo),e(cu,VTo),e(cu,uN),e(uN,XTo),e(cu,zTo),e(G,WTo),e(G,fu),e(fu,eie),e(eie,QTo),e(fu,HTo),e(fu,bN),e(bN,UTo),e(fu,JTo),e(G,YTo),e(G,mu),e(mu,oie),e(oie,KTo),e(mu,ZTo),e(mu,vN),e(vN,e7o),e(mu,o7o),e(G,r7o),e(G,gu),e(gu,rie),e(rie,t7o),e(gu,a7o),e(gu,FN),e(FN,n7o),e(gu,s7o),e(G,l7o),e(G,hu),e(hu,tie),e(tie,i7o),e(hu,d7o),e(hu,TN),e(TN,c7o),e(hu,f7o),e(G,m7o),e(G,pu),e(pu,aie),e(aie,g7o),e(pu,h7o),e(pu,MN),e(MN,p7o),e(pu,_7o),e(G,u7o),e(G,_u),e(_u,nie),e(nie,b7o),e(_u,v7o),e(_u,EN),e(EN,F7o),e(_u,T7o),e(G,M7o),e(G,uu),e(uu,sie),e(sie,E7o),e(uu,C7o),e(uu,CN),e(CN,w7o),e(uu,A7o),e(G,y7o),e(G,bu),e(bu,lie),e(lie,L7o),e(bu,x7o),e(bu,wN),e(wN,$7o),e(bu,k7o),e(G,S7o),e(G,vu),e(vu,iie),e(iie,R7o),e(vu,P7o),e(vu,AN),e(AN,B7o),e(vu,I7o),e(G,q7o),e(G,Fu),e(Fu,die),e(die,N7o),e(Fu,j7o),e(Fu,yN),e(yN,D7o),e(Fu,G7o),e(G,O7o),e(G,Tu),e(Tu,cie),e(cie,V7o),e(Tu,X7o),e(Tu,LN),e(LN,z7o),e(Tu,W7o),e(G,Q7o),e(G,Mu),e(Mu,fie),e(fie,H7o),e(Mu,U7o),e(Mu,xN),e(xN,J7o),e(Mu,Y7o),e(G,K7o),e(G,Eu),e(Eu,mie),e(mie,Z7o),e(Eu,eMo),e(Eu,$N),e($N,oMo),e(Eu,rMo),e(G,tMo),e(G,Cu),e(Cu,gie),e(gie,aMo),e(Cu,nMo),e(Cu,kN),e(kN,sMo),e(Cu,lMo),e(G,iMo),e(G,wu),e(wu,hie),e(hie,dMo),e(wu,cMo),e(wu,SN),e(SN,fMo),e(wu,mMo),e(G,gMo),e(G,Au),e(Au,pie),e(pie,hMo),e(Au,pMo),e(Au,RN),e(RN,_Mo),e(Au,uMo),e(G,bMo),e(G,yu),e(yu,_ie),e(_ie,vMo),e(yu,FMo),e(yu,PN),e(PN,TMo),e(yu,MMo),e(G,EMo),e(G,Lu),e(Lu,uie),e(uie,CMo),e(Lu,wMo),e(Lu,BN),e(BN,AMo),e(Lu,yMo),e(G,LMo),e(G,xu),e(xu,bie),e(bie,xMo),e(xu,$Mo),e(xu,IN),e(IN,kMo),e(xu,SMo),e(G,RMo),e(G,$u),e($u,vie),e(vie,PMo),e($u,BMo),e($u,qN),e(qN,IMo),e($u,qMo),e(G,NMo),e(G,ku),e(ku,Fie),e(Fie,jMo),e(ku,DMo),e(ku,NN),e(NN,GMo),e(ku,OMo),e(G,VMo),e(G,Su),e(Su,Tie),e(Tie,XMo),e(Su,zMo),e(Su,jN),e(jN,WMo),e(Su,QMo),e(G,HMo),e(G,Ru),e(Ru,Mie),e(Mie,UMo),e(Ru,JMo),e(Ru,DN),e(DN,YMo),e(Ru,KMo),e(G,ZMo),e(G,Pu),e(Pu,Eie),e(Eie,e4o),e(Pu,o4o),e(Pu,GN),e(GN,r4o),e(Pu,t4o),e(Ye,a4o),e(Ye,Bu),e(Bu,n4o),e(Bu,Cie),e(Cie,s4o),e(Bu,l4o),e(Bu,wie),e(wie,i4o),e(Ye,d4o),M(Iu,Ye,null),b(f,aqe,u),b(f,$i,u),e($i,qu),e(qu,Aie),M(QA,Aie,null),e($i,c4o),e($i,yie),e(yie,f4o),b(f,nqe,u),b(f,$o,u),M(HA,$o,null),e($o,m4o),e($o,ki),e(ki,g4o),e(ki,ON),e(ON,h4o),e(ki,p4o),e(ki,VN),e(VN,_4o),e(ki,u4o),e($o,b4o),e($o,UA),e(UA,v4o),e(UA,Lie),e(Lie,F4o),e(UA,T4o),e($o,M4o),e($o,nt),M(JA,nt,null),e(nt,E4o),e(nt,xie),e(xie,C4o),e(nt,w4o),e(nt,Si),e(Si,A4o),e(Si,$ie),e($ie,y4o),e(Si,L4o),e(Si,XN),e(XN,x4o),e(Si,$4o),e(nt,k4o),M(Nu,nt,null),e($o,S4o),e($o,Ke),M(YA,Ke,null),e(Ke,R4o),e(Ke,kie),e(kie,P4o),e(Ke,B4o),e(Ke,$a),e($a,I4o),e($a,Sie),e(Sie,q4o),e($a,N4o),e($a,Rie),e(Rie,j4o),e($a,D4o),e($a,Pie),e(Pie,G4o),e($a,O4o),e(Ke,V4o),e(Ke,z),e(z,ju),e(ju,Bie),e(Bie,X4o),e(ju,z4o),e(ju,zN),e(zN,W4o),e(ju,Q4o),e(z,H4o),e(z,Du),e(Du,Iie),e(Iie,U4o),e(Du,J4o),e(Du,WN),e(WN,Y4o),e(Du,K4o),e(z,Z4o),e(z,Gu),e(Gu,qie),e(qie,eEo),e(Gu,oEo),e(Gu,QN),e(QN,rEo),e(Gu,tEo),e(z,aEo),e(z,Ou),e(Ou,Nie),e(Nie,nEo),e(Ou,sEo),e(Ou,HN),e(HN,lEo),e(Ou,iEo),e(z,dEo),e(z,Vu),e(Vu,jie),e(jie,cEo),e(Vu,fEo),e(Vu,UN),e(UN,mEo),e(Vu,gEo),e(z,hEo),e(z,Xu),e(Xu,Die),e(Die,pEo),e(Xu,_Eo),e(Xu,JN),e(JN,uEo),e(Xu,bEo),e(z,vEo),e(z,zu),e(zu,Gie),e(Gie,FEo),e(zu,TEo),e(zu,YN),e(YN,MEo),e(zu,EEo),e(z,CEo),e(z,Wu),e(Wu,Oie),e(Oie,wEo),e(Wu,AEo),e(Wu,KN),e(KN,yEo),e(Wu,LEo),e(z,xEo),e(z,Qu),e(Qu,Vie),e(Vie,$Eo),e(Qu,kEo),e(Qu,ZN),e(ZN,SEo),e(Qu,REo),e(z,PEo),e(z,Hu),e(Hu,Xie),e(Xie,BEo),e(Hu,IEo),e(Hu,ej),e(ej,qEo),e(Hu,NEo),e(z,jEo),e(z,Uu),e(Uu,zie),e(zie,DEo),e(Uu,GEo),e(Uu,oj),e(oj,OEo),e(Uu,VEo),e(z,XEo),e(z,Ju),e(Ju,Wie),e(Wie,zEo),e(Ju,WEo),e(Ju,rj),e(rj,QEo),e(Ju,HEo),e(z,UEo),e(z,Yu),e(Yu,Qie),e(Qie,JEo),e(Yu,YEo),e(Yu,tj),e(tj,KEo),e(Yu,ZEo),e(z,eCo),e(z,Ku),e(Ku,Hie),e(Hie,oCo),e(Ku,rCo),e(Ku,aj),e(aj,tCo),e(Ku,aCo),e(z,nCo),e(z,Zu),e(Zu,Uie),e(Uie,sCo),e(Zu,lCo),e(Zu,nj),e(nj,iCo),e(Zu,dCo),e(z,cCo),e(z,e2),e(e2,Jie),e(Jie,fCo),e(e2,mCo),e(e2,sj),e(sj,gCo),e(e2,hCo),e(z,pCo),e(z,o2),e(o2,Yie),e(Yie,_Co),e(o2,uCo),e(o2,lj),e(lj,bCo),e(o2,vCo),e(z,FCo),e(z,r2),e(r2,Kie),e(Kie,TCo),e(r2,MCo),e(r2,ij),e(ij,ECo),e(r2,CCo),e(z,wCo),e(z,t2),e(t2,Zie),e(Zie,ACo),e(t2,yCo),e(t2,dj),e(dj,LCo),e(t2,xCo),e(z,$Co),e(z,a2),e(a2,ede),e(ede,kCo),e(a2,SCo),e(a2,cj),e(cj,RCo),e(a2,PCo),e(z,BCo),e(z,n2),e(n2,ode),e(ode,ICo),e(n2,qCo),e(n2,fj),e(fj,NCo),e(n2,jCo),e(z,DCo),e(z,s2),e(s2,rde),e(rde,GCo),e(s2,OCo),e(s2,mj),e(mj,VCo),e(s2,XCo),e(z,zCo),e(z,l2),e(l2,tde),e(tde,WCo),e(l2,QCo),e(l2,gj),e(gj,HCo),e(l2,UCo),e(z,JCo),e(z,i2),e(i2,ade),e(ade,YCo),e(i2,KCo),e(i2,hj),e(hj,ZCo),e(i2,e5o),e(z,o5o),e(z,d2),e(d2,nde),e(nde,r5o),e(d2,t5o),e(d2,pj),e(pj,a5o),e(d2,n5o),e(z,s5o),e(z,c2),e(c2,sde),e(sde,l5o),e(c2,i5o),e(c2,_j),e(_j,d5o),e(c2,c5o),e(z,f5o),e(z,f2),e(f2,lde),e(lde,m5o),e(f2,g5o),e(f2,uj),e(uj,h5o),e(f2,p5o),e(z,_5o),e(z,m2),e(m2,ide),e(ide,u5o),e(m2,b5o),e(m2,bj),e(bj,v5o),e(m2,F5o),e(z,T5o),e(z,g2),e(g2,dde),e(dde,M5o),e(g2,E5o),e(g2,vj),e(vj,C5o),e(g2,w5o),e(z,A5o),e(z,h2),e(h2,cde),e(cde,y5o),e(h2,L5o),e(h2,Fj),e(Fj,x5o),e(h2,$5o),e(z,k5o),e(z,p2),e(p2,fde),e(fde,S5o),e(p2,R5o),e(p2,Tj),e(Tj,P5o),e(p2,B5o),e(z,I5o),e(z,_2),e(_2,mde),e(mde,q5o),e(_2,N5o),e(_2,Mj),e(Mj,j5o),e(_2,D5o),e(z,G5o),e(z,u2),e(u2,gde),e(gde,O5o),e(u2,V5o),e(u2,Ej),e(Ej,X5o),e(u2,z5o),e(z,W5o),e(z,b2),e(b2,hde),e(hde,Q5o),e(b2,H5o),e(b2,Cj),e(Cj,U5o),e(b2,J5o),e(z,Y5o),e(z,v2),e(v2,pde),e(pde,K5o),e(v2,Z5o),e(v2,wj),e(wj,e3o),e(v2,o3o),e(z,r3o),e(z,F2),e(F2,_de),e(_de,t3o),e(F2,a3o),e(F2,Aj),e(Aj,n3o),e(F2,s3o),e(Ke,l3o),e(Ke,T2),e(T2,i3o),e(T2,ude),e(ude,d3o),e(T2,c3o),e(T2,bde),e(bde,f3o),e(Ke,m3o),M(M2,Ke,null),b(f,sqe,u),b(f,Ri,u),e(Ri,E2),e(E2,vde),M(KA,vde,null),e(Ri,g3o),e(Ri,Fde),e(Fde,h3o),b(f,lqe,u),b(f,ko,u),M(ZA,ko,null),e(ko,p3o),e(ko,Pi),e(Pi,_3o),e(Pi,yj),e(yj,u3o),e(Pi,b3o),e(Pi,Lj),e(Lj,v3o),e(Pi,F3o),e(ko,T3o),e(ko,e6),e(e6,M3o),e(e6,Tde),e(Tde,E3o),e(e6,C3o),e(ko,w3o),e(ko,st),M(o6,st,null),e(st,A3o),e(st,Mde),e(Mde,y3o),e(st,L3o),e(st,Bi),e(Bi,x3o),e(Bi,Ede),e(Ede,$3o),e(Bi,k3o),e(Bi,xj),e(xj,S3o),e(Bi,R3o),e(st,P3o),M(C2,st,null),e(ko,B3o),e(ko,Ze),M(r6,Ze,null),e(Ze,I3o),e(Ze,Cde),e(Cde,q3o),e(Ze,N3o),e(Ze,ka),e(ka,j3o),e(ka,wde),e(wde,D3o),e(ka,G3o),e(ka,Ade),e(Ade,O3o),e(ka,V3o),e(ka,yde),e(yde,X3o),e(ka,z3o),e(Ze,W3o),e(Ze,W),e(W,w2),e(w2,Lde),e(Lde,Q3o),e(w2,H3o),e(w2,$j),e($j,U3o),e(w2,J3o),e(W,Y3o),e(W,A2),e(A2,xde),e(xde,K3o),e(A2,Z3o),e(A2,kj),e(kj,ewo),e(A2,owo),e(W,rwo),e(W,y2),e(y2,$de),e($de,two),e(y2,awo),e(y2,Sj),e(Sj,nwo),e(y2,swo),e(W,lwo),e(W,L2),e(L2,kde),e(kde,iwo),e(L2,dwo),e(L2,Rj),e(Rj,cwo),e(L2,fwo),e(W,mwo),e(W,x2),e(x2,Sde),e(Sde,gwo),e(x2,hwo),e(x2,Pj),e(Pj,pwo),e(x2,_wo),e(W,uwo),e(W,$2),e($2,Rde),e(Rde,bwo),e($2,vwo),e($2,Bj),e(Bj,Fwo),e($2,Two),e(W,Mwo),e(W,k2),e(k2,Pde),e(Pde,Ewo),e(k2,Cwo),e(k2,Ij),e(Ij,wwo),e(k2,Awo),e(W,ywo),e(W,S2),e(S2,Bde),e(Bde,Lwo),e(S2,xwo),e(S2,qj),e(qj,$wo),e(S2,kwo),e(W,Swo),e(W,R2),e(R2,Ide),e(Ide,Rwo),e(R2,Pwo),e(R2,Nj),e(Nj,Bwo),e(R2,Iwo),e(W,qwo),e(W,P2),e(P2,qde),e(qde,Nwo),e(P2,jwo),e(P2,jj),e(jj,Dwo),e(P2,Gwo),e(W,Owo),e(W,B2),e(B2,Nde),e(Nde,Vwo),e(B2,Xwo),e(B2,Dj),e(Dj,zwo),e(B2,Wwo),e(W,Qwo),e(W,I2),e(I2,jde),e(jde,Hwo),e(I2,Uwo),e(I2,Gj),e(Gj,Jwo),e(I2,Ywo),e(W,Kwo),e(W,q2),e(q2,Dde),e(Dde,Zwo),e(q2,e0o),e(q2,Oj),e(Oj,o0o),e(q2,r0o),e(W,t0o),e(W,N2),e(N2,Gde),e(Gde,a0o),e(N2,n0o),e(N2,Vj),e(Vj,s0o),e(N2,l0o),e(W,i0o),e(W,j2),e(j2,Ode),e(Ode,d0o),e(j2,c0o),e(j2,Xj),e(Xj,f0o),e(j2,m0o),e(W,g0o),e(W,D2),e(D2,Vde),e(Vde,h0o),e(D2,p0o),e(D2,zj),e(zj,_0o),e(D2,u0o),e(W,b0o),e(W,G2),e(G2,Xde),e(Xde,v0o),e(G2,F0o),e(G2,Wj),e(Wj,T0o),e(G2,M0o),e(W,E0o),e(W,O2),e(O2,zde),e(zde,C0o),e(O2,w0o),e(O2,Qj),e(Qj,A0o),e(O2,y0o),e(W,L0o),e(W,V2),e(V2,Wde),e(Wde,x0o),e(V2,$0o),e(V2,Hj),e(Hj,k0o),e(V2,S0o),e(W,R0o),e(W,X2),e(X2,Qde),e(Qde,P0o),e(X2,B0o),e(X2,Uj),e(Uj,I0o),e(X2,q0o),e(W,N0o),e(W,z2),e(z2,Hde),e(Hde,j0o),e(z2,D0o),e(z2,Jj),e(Jj,G0o),e(z2,O0o),e(W,V0o),e(W,W2),e(W2,Ude),e(Ude,X0o),e(W2,z0o),e(W2,Yj),e(Yj,W0o),e(W2,Q0o),e(W,H0o),e(W,Q2),e(Q2,Jde),e(Jde,U0o),e(Q2,J0o),e(Q2,Kj),e(Kj,Y0o),e(Q2,K0o),e(W,Z0o),e(W,H2),e(H2,Yde),e(Yde,eAo),e(H2,oAo),e(H2,Zj),e(Zj,rAo),e(H2,tAo),e(W,aAo),e(W,U2),e(U2,Kde),e(Kde,nAo),e(U2,sAo),e(U2,eD),e(eD,lAo),e(U2,iAo),e(W,dAo),e(W,J2),e(J2,Zde),e(Zde,cAo),e(J2,fAo),e(J2,oD),e(oD,mAo),e(J2,gAo),e(W,hAo),e(W,Y2),e(Y2,ece),e(ece,pAo),e(Y2,_Ao),e(Y2,rD),e(rD,uAo),e(Y2,bAo),e(W,vAo),e(W,K2),e(K2,oce),e(oce,FAo),e(K2,TAo),e(K2,tD),e(tD,MAo),e(K2,EAo),e(W,CAo),e(W,Z2),e(Z2,rce),e(rce,wAo),e(Z2,AAo),e(Z2,aD),e(aD,yAo),e(Z2,LAo),e(W,xAo),e(W,e1),e(e1,tce),e(tce,$Ao),e(e1,kAo),e(e1,nD),e(nD,SAo),e(e1,RAo),e(W,PAo),e(W,o1),e(o1,ace),e(ace,BAo),e(o1,IAo),e(o1,nce),e(nce,qAo),e(o1,NAo),e(W,jAo),e(W,r1),e(r1,sce),e(sce,DAo),e(r1,GAo),e(r1,sD),e(sD,OAo),e(r1,VAo),e(W,XAo),e(W,t1),e(t1,lce),e(lce,zAo),e(t1,WAo),e(t1,lD),e(lD,QAo),e(t1,HAo),e(W,UAo),e(W,a1),e(a1,ice),e(ice,JAo),e(a1,YAo),e(a1,iD),e(iD,KAo),e(a1,ZAo),e(W,e6o),e(W,n1),e(n1,dce),e(dce,o6o),e(n1,r6o),e(n1,dD),e(dD,t6o),e(n1,a6o),e(Ze,n6o),e(Ze,s1),e(s1,s6o),e(s1,cce),e(cce,l6o),e(s1,i6o),e(s1,fce),e(fce,d6o),e(Ze,c6o),M(l1,Ze,null),b(f,iqe,u),b(f,Ii,u),e(Ii,i1),e(i1,mce),M(t6,mce,null),e(Ii,f6o),e(Ii,gce),e(gce,m6o),b(f,dqe,u),b(f,So,u),M(a6,So,null),e(So,g6o),e(So,qi),e(qi,h6o),e(qi,cD),e(cD,p6o),e(qi,_6o),e(qi,fD),e(fD,u6o),e(qi,b6o),e(So,v6o),e(So,n6),e(n6,F6o),e(n6,hce),e(hce,T6o),e(n6,M6o),e(So,E6o),e(So,lt),M(s6,lt,null),e(lt,C6o),e(lt,pce),e(pce,w6o),e(lt,A6o),e(lt,Ni),e(Ni,y6o),e(Ni,_ce),e(_ce,L6o),e(Ni,x6o),e(Ni,mD),e(mD,$6o),e(Ni,k6o),e(lt,S6o),M(d1,lt,null),e(So,R6o),e(So,eo),M(l6,eo,null),e(eo,P6o),e(eo,uce),e(uce,B6o),e(eo,I6o),e(eo,Sa),e(Sa,q6o),e(Sa,bce),e(bce,N6o),e(Sa,j6o),e(Sa,vce),e(vce,D6o),e(Sa,G6o),e(Sa,Fce),e(Fce,O6o),e(Sa,V6o),e(eo,X6o),e(eo,_e),e(_e,c1),e(c1,Tce),e(Tce,z6o),e(c1,W6o),e(c1,gD),e(gD,Q6o),e(c1,H6o),e(_e,U6o),e(_e,f1),e(f1,Mce),e(Mce,J6o),e(f1,Y6o),e(f1,hD),e(hD,K6o),e(f1,Z6o),e(_e,eyo),e(_e,m1),e(m1,Ece),e(Ece,oyo),e(m1,ryo),e(m1,pD),e(pD,tyo),e(m1,ayo),e(_e,nyo),e(_e,g1),e(g1,Cce),e(Cce,syo),e(g1,lyo),e(g1,_D),e(_D,iyo),e(g1,dyo),e(_e,cyo),e(_e,h1),e(h1,wce),e(wce,fyo),e(h1,myo),e(h1,uD),e(uD,gyo),e(h1,hyo),e(_e,pyo),e(_e,p1),e(p1,Ace),e(Ace,_yo),e(p1,uyo),e(p1,bD),e(bD,byo),e(p1,vyo),e(_e,Fyo),e(_e,_1),e(_1,yce),e(yce,Tyo),e(_1,Myo),e(_1,vD),e(vD,Eyo),e(_1,Cyo),e(_e,wyo),e(_e,u1),e(u1,Lce),e(Lce,Ayo),e(u1,yyo),e(u1,FD),e(FD,Lyo),e(u1,xyo),e(_e,$yo),e(_e,b1),e(b1,xce),e(xce,kyo),e(b1,Syo),e(b1,TD),e(TD,Ryo),e(b1,Pyo),e(_e,Byo),e(_e,v1),e(v1,$ce),e($ce,Iyo),e(v1,qyo),e(v1,MD),e(MD,Nyo),e(v1,jyo),e(_e,Dyo),e(_e,F1),e(F1,kce),e(kce,Gyo),e(F1,Oyo),e(F1,ED),e(ED,Vyo),e(F1,Xyo),e(_e,zyo),e(_e,T1),e(T1,Sce),e(Sce,Wyo),e(T1,Qyo),e(T1,CD),e(CD,Hyo),e(T1,Uyo),e(_e,Jyo),e(_e,M1),e(M1,Rce),e(Rce,Yyo),e(M1,Kyo),e(M1,wD),e(wD,Zyo),e(M1,eLo),e(_e,oLo),e(_e,E1),e(E1,Pce),e(Pce,rLo),e(E1,tLo),e(E1,AD),e(AD,aLo),e(E1,nLo),e(_e,sLo),e(_e,C1),e(C1,Bce),e(Bce,lLo),e(C1,iLo),e(C1,yD),e(yD,dLo),e(C1,cLo),e(_e,fLo),e(_e,w1),e(w1,Ice),e(Ice,mLo),e(w1,gLo),e(w1,LD),e(LD,hLo),e(w1,pLo),e(eo,_Lo),e(eo,A1),e(A1,uLo),e(A1,qce),e(qce,bLo),e(A1,vLo),e(A1,Nce),e(Nce,FLo),e(eo,TLo),M(y1,eo,null),b(f,cqe,u),b(f,ji,u),e(ji,L1),e(L1,jce),M(i6,jce,null),e(ji,MLo),e(ji,Dce),e(Dce,ELo),b(f,fqe,u),b(f,Ro,u),M(d6,Ro,null),e(Ro,CLo),e(Ro,Di),e(Di,wLo),e(Di,xD),e(xD,ALo),e(Di,yLo),e(Di,$D),e($D,LLo),e(Di,xLo),e(Ro,$Lo),e(Ro,c6),e(c6,kLo),e(c6,Gce),e(Gce,SLo),e(c6,RLo),e(Ro,PLo),e(Ro,it),M(f6,it,null),e(it,BLo),e(it,Oce),e(Oce,ILo),e(it,qLo),e(it,Gi),e(Gi,NLo),e(Gi,Vce),e(Vce,jLo),e(Gi,DLo),e(Gi,kD),e(kD,GLo),e(Gi,OLo),e(it,VLo),M(x1,it,null),e(Ro,XLo),e(Ro,oo),M(m6,oo,null),e(oo,zLo),e(oo,Xce),e(Xce,WLo),e(oo,QLo),e(oo,Ra),e(Ra,HLo),e(Ra,zce),e(zce,ULo),e(Ra,JLo),e(Ra,Wce),e(Wce,YLo),e(Ra,KLo),e(Ra,Qce),e(Qce,ZLo),e(Ra,e8o),e(oo,o8o),e(oo,q),e(q,$1),e($1,Hce),e(Hce,r8o),e($1,t8o),e($1,SD),e(SD,a8o),e($1,n8o),e(q,s8o),e(q,k1),e(k1,Uce),e(Uce,l8o),e(k1,i8o),e(k1,RD),e(RD,d8o),e(k1,c8o),e(q,f8o),e(q,S1),e(S1,Jce),e(Jce,m8o),e(S1,g8o),e(S1,PD),e(PD,h8o),e(S1,p8o),e(q,_8o),e(q,R1),e(R1,Yce),e(Yce,u8o),e(R1,b8o),e(R1,BD),e(BD,v8o),e(R1,F8o),e(q,T8o),e(q,P1),e(P1,Kce),e(Kce,M8o),e(P1,E8o),e(P1,ID),e(ID,C8o),e(P1,w8o),e(q,A8o),e(q,B1),e(B1,Zce),e(Zce,y8o),e(B1,L8o),e(B1,qD),e(qD,x8o),e(B1,$8o),e(q,k8o),e(q,I1),e(I1,efe),e(efe,S8o),e(I1,R8o),e(I1,ND),e(ND,P8o),e(I1,B8o),e(q,I8o),e(q,q1),e(q1,ofe),e(ofe,q8o),e(q1,N8o),e(q1,jD),e(jD,j8o),e(q1,D8o),e(q,G8o),e(q,N1),e(N1,rfe),e(rfe,O8o),e(N1,V8o),e(N1,DD),e(DD,X8o),e(N1,z8o),e(q,W8o),e(q,j1),e(j1,tfe),e(tfe,Q8o),e(j1,H8o),e(j1,GD),e(GD,U8o),e(j1,J8o),e(q,Y8o),e(q,D1),e(D1,afe),e(afe,K8o),e(D1,Z8o),e(D1,OD),e(OD,exo),e(D1,oxo),e(q,rxo),e(q,G1),e(G1,nfe),e(nfe,txo),e(G1,axo),e(G1,VD),e(VD,nxo),e(G1,sxo),e(q,lxo),e(q,O1),e(O1,sfe),e(sfe,ixo),e(O1,dxo),e(O1,XD),e(XD,cxo),e(O1,fxo),e(q,mxo),e(q,V1),e(V1,lfe),e(lfe,gxo),e(V1,hxo),e(V1,zD),e(zD,pxo),e(V1,_xo),e(q,uxo),e(q,X1),e(X1,ife),e(ife,bxo),e(X1,vxo),e(X1,WD),e(WD,Fxo),e(X1,Txo),e(q,Mxo),e(q,z1),e(z1,dfe),e(dfe,Exo),e(z1,Cxo),e(z1,QD),e(QD,wxo),e(z1,Axo),e(q,yxo),e(q,W1),e(W1,cfe),e(cfe,Lxo),e(W1,xxo),e(W1,HD),e(HD,$xo),e(W1,kxo),e(q,Sxo),e(q,Q1),e(Q1,ffe),e(ffe,Rxo),e(Q1,Pxo),e(Q1,UD),e(UD,Bxo),e(Q1,Ixo),e(q,qxo),e(q,H1),e(H1,mfe),e(mfe,Nxo),e(H1,jxo),e(H1,JD),e(JD,Dxo),e(H1,Gxo),e(q,Oxo),e(q,U1),e(U1,gfe),e(gfe,Vxo),e(U1,Xxo),e(U1,YD),e(YD,zxo),e(U1,Wxo),e(q,Qxo),e(q,J1),e(J1,hfe),e(hfe,Hxo),e(J1,Uxo),e(J1,KD),e(KD,Jxo),e(J1,Yxo),e(q,Kxo),e(q,Y1),e(Y1,pfe),e(pfe,Zxo),e(Y1,e$o),e(Y1,ZD),e(ZD,o$o),e(Y1,r$o),e(q,t$o),e(q,K1),e(K1,_fe),e(_fe,a$o),e(K1,n$o),e(K1,eG),e(eG,s$o),e(K1,l$o),e(q,i$o),e(q,Z1),e(Z1,ufe),e(ufe,d$o),e(Z1,c$o),e(Z1,oG),e(oG,f$o),e(Z1,m$o),e(q,g$o),e(q,e9),e(e9,bfe),e(bfe,h$o),e(e9,p$o),e(e9,rG),e(rG,_$o),e(e9,u$o),e(q,b$o),e(q,o9),e(o9,vfe),e(vfe,v$o),e(o9,F$o),e(o9,tG),e(tG,T$o),e(o9,M$o),e(q,E$o),e(q,r9),e(r9,Ffe),e(Ffe,C$o),e(r9,w$o),e(r9,aG),e(aG,A$o),e(r9,y$o),e(q,L$o),e(q,t9),e(t9,Tfe),e(Tfe,x$o),e(t9,$$o),e(t9,nG),e(nG,k$o),e(t9,S$o),e(q,R$o),e(q,a9),e(a9,Mfe),e(Mfe,P$o),e(a9,B$o),e(a9,sG),e(sG,I$o),e(a9,q$o),e(q,N$o),e(q,n9),e(n9,Efe),e(Efe,j$o),e(n9,D$o),e(n9,lG),e(lG,G$o),e(n9,O$o),e(q,V$o),e(q,s9),e(s9,Cfe),e(Cfe,X$o),e(s9,z$o),e(s9,iG),e(iG,W$o),e(s9,Q$o),e(q,H$o),e(q,l9),e(l9,wfe),e(wfe,U$o),e(l9,J$o),e(l9,dG),e(dG,Y$o),e(l9,K$o),e(q,Z$o),e(q,i9),e(i9,Afe),e(Afe,eko),e(i9,oko),e(i9,cG),e(cG,rko),e(i9,tko),e(q,ako),e(q,d9),e(d9,yfe),e(yfe,nko),e(d9,sko),e(d9,fG),e(fG,lko),e(d9,iko),e(q,dko),e(q,c9),e(c9,Lfe),e(Lfe,cko),e(c9,fko),e(c9,mG),e(mG,mko),e(c9,gko),e(q,hko),e(q,f9),e(f9,xfe),e(xfe,pko),e(f9,_ko),e(f9,gG),e(gG,uko),e(f9,bko),e(q,vko),e(q,m9),e(m9,$fe),e($fe,Fko),e(m9,Tko),e(m9,hG),e(hG,Mko),e(m9,Eko),e(q,Cko),e(q,g9),e(g9,kfe),e(kfe,wko),e(g9,Ako),e(g9,pG),e(pG,yko),e(g9,Lko),e(q,xko),e(q,h9),e(h9,Sfe),e(Sfe,$ko),e(h9,kko),e(h9,_G),e(_G,Sko),e(h9,Rko),e(q,Pko),e(q,p9),e(p9,Rfe),e(Rfe,Bko),e(p9,Iko),e(p9,uG),e(uG,qko),e(p9,Nko),e(q,jko),e(q,_9),e(_9,Pfe),e(Pfe,Dko),e(_9,Gko),e(_9,bG),e(bG,Oko),e(_9,Vko),e(q,Xko),e(q,u9),e(u9,Bfe),e(Bfe,zko),e(u9,Wko),e(u9,vG),e(vG,Qko),e(u9,Hko),e(q,Uko),e(q,b9),e(b9,Ife),e(Ife,Jko),e(b9,Yko),e(b9,FG),e(FG,Kko),e(b9,Zko),e(q,eSo),e(q,v9),e(v9,qfe),e(qfe,oSo),e(v9,rSo),e(v9,TG),e(TG,tSo),e(v9,aSo),e(q,nSo),e(q,F9),e(F9,Nfe),e(Nfe,sSo),e(F9,lSo),e(F9,MG),e(MG,iSo),e(F9,dSo),e(q,cSo),e(q,T9),e(T9,jfe),e(jfe,fSo),e(T9,mSo),e(T9,EG),e(EG,gSo),e(T9,hSo),e(oo,pSo),e(oo,M9),e(M9,_So),e(M9,Dfe),e(Dfe,uSo),e(M9,bSo),e(M9,Gfe),e(Gfe,vSo),e(oo,FSo),M(E9,oo,null),b(f,mqe,u),b(f,Oi,u),e(Oi,C9),e(C9,Ofe),M(g6,Ofe,null),e(Oi,TSo),e(Oi,Vfe),e(Vfe,MSo),b(f,gqe,u),b(f,Po,u),M(h6,Po,null),e(Po,ESo),e(Po,Vi),e(Vi,CSo),e(Vi,CG),e(CG,wSo),e(Vi,ASo),e(Vi,wG),e(wG,ySo),e(Vi,LSo),e(Po,xSo),e(Po,p6),e(p6,$So),e(p6,Xfe),e(Xfe,kSo),e(p6,SSo),e(Po,RSo),e(Po,dt),M(_6,dt,null),e(dt,PSo),e(dt,zfe),e(zfe,BSo),e(dt,ISo),e(dt,Xi),e(Xi,qSo),e(Xi,Wfe),e(Wfe,NSo),e(Xi,jSo),e(Xi,AG),e(AG,DSo),e(Xi,GSo),e(dt,OSo),M(w9,dt,null),e(Po,VSo),e(Po,ro),M(u6,ro,null),e(ro,XSo),e(ro,Qfe),e(Qfe,zSo),e(ro,WSo),e(ro,Pa),e(Pa,QSo),e(Pa,Hfe),e(Hfe,HSo),e(Pa,USo),e(Pa,Ufe),e(Ufe,JSo),e(Pa,YSo),e(Pa,Jfe),e(Jfe,KSo),e(Pa,ZSo),e(ro,eRo),e(ro,Y),e(Y,A9),e(A9,Yfe),e(Yfe,oRo),e(A9,rRo),e(A9,yG),e(yG,tRo),e(A9,aRo),e(Y,nRo),e(Y,y9),e(y9,Kfe),e(Kfe,sRo),e(y9,lRo),e(y9,LG),e(LG,iRo),e(y9,dRo),e(Y,cRo),e(Y,L9),e(L9,Zfe),e(Zfe,fRo),e(L9,mRo),e(L9,xG),e(xG,gRo),e(L9,hRo),e(Y,pRo),e(Y,x9),e(x9,eme),e(eme,_Ro),e(x9,uRo),e(x9,$G),e($G,bRo),e(x9,vRo),e(Y,FRo),e(Y,$9),e($9,ome),e(ome,TRo),e($9,MRo),e($9,kG),e(kG,ERo),e($9,CRo),e(Y,wRo),e(Y,k9),e(k9,rme),e(rme,ARo),e(k9,yRo),e(k9,SG),e(SG,LRo),e(k9,xRo),e(Y,$Ro),e(Y,S9),e(S9,tme),e(tme,kRo),e(S9,SRo),e(S9,RG),e(RG,RRo),e(S9,PRo),e(Y,BRo),e(Y,R9),e(R9,ame),e(ame,IRo),e(R9,qRo),e(R9,PG),e(PG,NRo),e(R9,jRo),e(Y,DRo),e(Y,P9),e(P9,nme),e(nme,GRo),e(P9,ORo),e(P9,BG),e(BG,VRo),e(P9,XRo),e(Y,zRo),e(Y,B9),e(B9,sme),e(sme,WRo),e(B9,QRo),e(B9,IG),e(IG,HRo),e(B9,URo),e(Y,JRo),e(Y,I9),e(I9,lme),e(lme,YRo),e(I9,KRo),e(I9,qG),e(qG,ZRo),e(I9,ePo),e(Y,oPo),e(Y,q9),e(q9,ime),e(ime,rPo),e(q9,tPo),e(q9,NG),e(NG,aPo),e(q9,nPo),e(Y,sPo),e(Y,N9),e(N9,dme),e(dme,lPo),e(N9,iPo),e(N9,jG),e(jG,dPo),e(N9,cPo),e(Y,fPo),e(Y,j9),e(j9,cme),e(cme,mPo),e(j9,gPo),e(j9,DG),e(DG,hPo),e(j9,pPo),e(Y,_Po),e(Y,D9),e(D9,fme),e(fme,uPo),e(D9,bPo),e(D9,GG),e(GG,vPo),e(D9,FPo),e(Y,TPo),e(Y,G9),e(G9,mme),e(mme,MPo),e(G9,EPo),e(G9,OG),e(OG,CPo),e(G9,wPo),e(Y,APo),e(Y,O9),e(O9,gme),e(gme,yPo),e(O9,LPo),e(O9,VG),e(VG,xPo),e(O9,$Po),e(Y,kPo),e(Y,V9),e(V9,hme),e(hme,SPo),e(V9,RPo),e(V9,XG),e(XG,PPo),e(V9,BPo),e(Y,IPo),e(Y,X9),e(X9,pme),e(pme,qPo),e(X9,NPo),e(X9,zG),e(zG,jPo),e(X9,DPo),e(Y,GPo),e(Y,z9),e(z9,_me),e(_me,OPo),e(z9,VPo),e(z9,WG),e(WG,XPo),e(z9,zPo),e(Y,WPo),e(Y,W9),e(W9,ume),e(ume,QPo),e(W9,HPo),e(W9,QG),e(QG,UPo),e(W9,JPo),e(Y,YPo),e(Y,Q9),e(Q9,bme),e(bme,KPo),e(Q9,ZPo),e(Q9,HG),e(HG,eBo),e(Q9,oBo),e(Y,rBo),e(Y,H9),e(H9,vme),e(vme,tBo),e(H9,aBo),e(H9,UG),e(UG,nBo),e(H9,sBo),e(Y,lBo),e(Y,U9),e(U9,Fme),e(Fme,iBo),e(U9,dBo),e(U9,JG),e(JG,cBo),e(U9,fBo),e(Y,mBo),e(Y,J9),e(J9,Tme),e(Tme,gBo),e(J9,hBo),e(J9,YG),e(YG,pBo),e(J9,_Bo),e(Y,uBo),e(Y,Y9),e(Y9,Mme),e(Mme,bBo),e(Y9,vBo),e(Y9,KG),e(KG,FBo),e(Y9,TBo),e(Y,MBo),e(Y,K9),e(K9,Eme),e(Eme,EBo),e(K9,CBo),e(K9,ZG),e(ZG,wBo),e(K9,ABo),e(Y,yBo),e(Y,Z9),e(Z9,Cme),e(Cme,LBo),e(Z9,xBo),e(Z9,eO),e(eO,$Bo),e(Z9,kBo),e(Y,SBo),e(Y,eb),e(eb,wme),e(wme,RBo),e(eb,PBo),e(eb,oO),e(oO,BBo),e(eb,IBo),e(ro,qBo),e(ro,ob),e(ob,NBo),e(ob,Ame),e(Ame,jBo),e(ob,DBo),e(ob,yme),e(yme,GBo),e(ro,OBo),M(rb,ro,null),b(f,hqe,u),b(f,zi,u),e(zi,tb),e(tb,Lme),M(b6,Lme,null),e(zi,VBo),e(zi,xme),e(xme,XBo),b(f,pqe,u),b(f,Bo,u),M(v6,Bo,null),e(Bo,zBo),e(Bo,Wi),e(Wi,WBo),e(Wi,rO),e(rO,QBo),e(Wi,HBo),e(Wi,tO),e(tO,UBo),e(Wi,JBo),e(Bo,YBo),e(Bo,F6),e(F6,KBo),e(F6,$me),e($me,ZBo),e(F6,eIo),e(Bo,oIo),e(Bo,ct),M(T6,ct,null),e(ct,rIo),e(ct,kme),e(kme,tIo),e(ct,aIo),e(ct,Qi),e(Qi,nIo),e(Qi,Sme),e(Sme,sIo),e(Qi,lIo),e(Qi,aO),e(aO,iIo),e(Qi,dIo),e(ct,cIo),M(ab,ct,null),e(Bo,fIo),e(Bo,to),M(M6,to,null),e(to,mIo),e(to,Rme),e(Rme,gIo),e(to,hIo),e(to,Ba),e(Ba,pIo),e(Ba,Pme),e(Pme,_Io),e(Ba,uIo),e(Ba,Bme),e(Bme,bIo),e(Ba,vIo),e(Ba,Ime),e(Ime,FIo),e(Ba,TIo),e(to,MIo),e(to,Yr),e(Yr,nb),e(nb,qme),e(qme,EIo),e(nb,CIo),e(nb,nO),e(nO,wIo),e(nb,AIo),e(Yr,yIo),e(Yr,sb),e(sb,Nme),e(Nme,LIo),e(sb,xIo),e(sb,sO),e(sO,$Io),e(sb,kIo),e(Yr,SIo),e(Yr,lb),e(lb,jme),e(jme,RIo),e(lb,PIo),e(lb,lO),e(lO,BIo),e(lb,IIo),e(Yr,qIo),e(Yr,ib),e(ib,Dme),e(Dme,NIo),e(ib,jIo),e(ib,iO),e(iO,DIo),e(ib,GIo),e(Yr,OIo),e(Yr,db),e(db,Gme),e(Gme,VIo),e(db,XIo),e(db,dO),e(dO,zIo),e(db,WIo),e(to,QIo),e(to,cb),e(cb,HIo),e(cb,Ome),e(Ome,UIo),e(cb,JIo),e(cb,Vme),e(Vme,YIo),e(to,KIo),M(fb,to,null),b(f,_qe,u),b(f,Hi,u),e(Hi,mb),e(mb,Xme),M(E6,Xme,null),e(Hi,ZIo),e(Hi,zme),e(zme,eqo),b(f,uqe,u),b(f,Io,u),M(C6,Io,null),e(Io,oqo),e(Io,Ui),e(Ui,rqo),e(Ui,cO),e(cO,tqo),e(Ui,aqo),e(Ui,fO),e(fO,nqo),e(Ui,sqo),e(Io,lqo),e(Io,w6),e(w6,iqo),e(w6,Wme),e(Wme,dqo),e(w6,cqo),e(Io,fqo),e(Io,ft),M(A6,ft,null),e(ft,mqo),e(ft,Qme),e(Qme,gqo),e(ft,hqo),e(ft,Ji),e(Ji,pqo),e(Ji,Hme),e(Hme,_qo),e(Ji,uqo),e(Ji,mO),e(mO,bqo),e(Ji,vqo),e(ft,Fqo),M(gb,ft,null),e(Io,Tqo),e(Io,ao),M(y6,ao,null),e(ao,Mqo),e(ao,Ume),e(Ume,Eqo),e(ao,Cqo),e(ao,Ia),e(Ia,wqo),e(Ia,Jme),e(Jme,Aqo),e(Ia,yqo),e(Ia,Yme),e(Yme,Lqo),e(Ia,xqo),e(Ia,Kme),e(Kme,$qo),e(Ia,kqo),e(ao,Sqo),e(ao,U),e(U,hb),e(hb,Zme),e(Zme,Rqo),e(hb,Pqo),e(hb,gO),e(gO,Bqo),e(hb,Iqo),e(U,qqo),e(U,pb),e(pb,ege),e(ege,Nqo),e(pb,jqo),e(pb,hO),e(hO,Dqo),e(pb,Gqo),e(U,Oqo),e(U,_b),e(_b,oge),e(oge,Vqo),e(_b,Xqo),e(_b,pO),e(pO,zqo),e(_b,Wqo),e(U,Qqo),e(U,ub),e(ub,rge),e(rge,Hqo),e(ub,Uqo),e(ub,_O),e(_O,Jqo),e(ub,Yqo),e(U,Kqo),e(U,bb),e(bb,tge),e(tge,Zqo),e(bb,eNo),e(bb,uO),e(uO,oNo),e(bb,rNo),e(U,tNo),e(U,vb),e(vb,age),e(age,aNo),e(vb,nNo),e(vb,bO),e(bO,sNo),e(vb,lNo),e(U,iNo),e(U,Fb),e(Fb,nge),e(nge,dNo),e(Fb,cNo),e(Fb,vO),e(vO,fNo),e(Fb,mNo),e(U,gNo),e(U,Tb),e(Tb,sge),e(sge,hNo),e(Tb,pNo),e(Tb,FO),e(FO,_No),e(Tb,uNo),e(U,bNo),e(U,Mb),e(Mb,lge),e(lge,vNo),e(Mb,FNo),e(Mb,TO),e(TO,TNo),e(Mb,MNo),e(U,ENo),e(U,Eb),e(Eb,ige),e(ige,CNo),e(Eb,wNo),e(Eb,MO),e(MO,ANo),e(Eb,yNo),e(U,LNo),e(U,Cb),e(Cb,dge),e(dge,xNo),e(Cb,$No),e(Cb,EO),e(EO,kNo),e(Cb,SNo),e(U,RNo),e(U,wb),e(wb,cge),e(cge,PNo),e(wb,BNo),e(wb,CO),e(CO,INo),e(wb,qNo),e(U,NNo),e(U,Ab),e(Ab,fge),e(fge,jNo),e(Ab,DNo),e(Ab,wO),e(wO,GNo),e(Ab,ONo),e(U,VNo),e(U,yb),e(yb,mge),e(mge,XNo),e(yb,zNo),e(yb,AO),e(AO,WNo),e(yb,QNo),e(U,HNo),e(U,Lb),e(Lb,gge),e(gge,UNo),e(Lb,JNo),e(Lb,yO),e(yO,YNo),e(Lb,KNo),e(U,ZNo),e(U,xb),e(xb,hge),e(hge,ejo),e(xb,ojo),e(xb,LO),e(LO,rjo),e(xb,tjo),e(U,ajo),e(U,$b),e($b,pge),e(pge,njo),e($b,sjo),e($b,xO),e(xO,ljo),e($b,ijo),e(U,djo),e(U,kb),e(kb,_ge),e(_ge,cjo),e(kb,fjo),e(kb,$O),e($O,mjo),e(kb,gjo),e(U,hjo),e(U,Sb),e(Sb,uge),e(uge,pjo),e(Sb,_jo),e(Sb,kO),e(kO,ujo),e(Sb,bjo),e(U,vjo),e(U,Rb),e(Rb,bge),e(bge,Fjo),e(Rb,Tjo),e(Rb,SO),e(SO,Mjo),e(Rb,Ejo),e(U,Cjo),e(U,Pb),e(Pb,vge),e(vge,wjo),e(Pb,Ajo),e(Pb,RO),e(RO,yjo),e(Pb,Ljo),e(U,xjo),e(U,Bb),e(Bb,Fge),e(Fge,$jo),e(Bb,kjo),e(Bb,PO),e(PO,Sjo),e(Bb,Rjo),e(U,Pjo),e(U,Ib),e(Ib,Tge),e(Tge,Bjo),e(Ib,Ijo),e(Ib,BO),e(BO,qjo),e(Ib,Njo),e(U,jjo),e(U,qb),e(qb,Mge),e(Mge,Djo),e(qb,Gjo),e(qb,IO),e(IO,Ojo),e(qb,Vjo),e(U,Xjo),e(U,Nb),e(Nb,Ege),e(Ege,zjo),e(Nb,Wjo),e(Nb,qO),e(qO,Qjo),e(Nb,Hjo),e(U,Ujo),e(U,jb),e(jb,Cge),e(Cge,Jjo),e(jb,Yjo),e(jb,NO),e(NO,Kjo),e(jb,Zjo),e(U,eDo),e(U,Db),e(Db,wge),e(wge,oDo),e(Db,rDo),e(Db,jO),e(jO,tDo),e(Db,aDo),e(U,nDo),e(U,Gb),e(Gb,Age),e(Age,sDo),e(Gb,lDo),e(Gb,DO),e(DO,iDo),e(Gb,dDo),e(U,cDo),e(U,Ob),e(Ob,yge),e(yge,fDo),e(Ob,mDo),e(Ob,GO),e(GO,gDo),e(Ob,hDo),e(U,pDo),e(U,Vb),e(Vb,Lge),e(Lge,_Do),e(Vb,uDo),e(Vb,OO),e(OO,bDo),e(Vb,vDo),e(U,FDo),e(U,Xb),e(Xb,xge),e(xge,TDo),e(Xb,MDo),e(Xb,VO),e(VO,EDo),e(Xb,CDo),e(U,wDo),e(U,zb),e(zb,$ge),e($ge,ADo),e(zb,yDo),e(zb,XO),e(XO,LDo),e(zb,xDo),e(U,$Do),e(U,Wb),e(Wb,kge),e(kge,kDo),e(Wb,SDo),e(Wb,zO),e(zO,RDo),e(Wb,PDo),e(ao,BDo),e(ao,Qb),e(Qb,IDo),e(Qb,Sge),e(Sge,qDo),e(Qb,NDo),e(Qb,Rge),e(Rge,jDo),e(ao,DDo),M(Hb,ao,null),b(f,bqe,u),b(f,Yi,u),e(Yi,Ub),e(Ub,Pge),M(L6,Pge,null),e(Yi,GDo),e(Yi,Bge),e(Bge,ODo),b(f,vqe,u),b(f,qo,u),M(x6,qo,null),e(qo,VDo),e(qo,Ki),e(Ki,XDo),e(Ki,WO),e(WO,zDo),e(Ki,WDo),e(Ki,QO),e(QO,QDo),e(Ki,HDo),e(qo,UDo),e(qo,$6),e($6,JDo),e($6,Ige),e(Ige,YDo),e($6,KDo),e(qo,ZDo),e(qo,mt),M(k6,mt,null),e(mt,eGo),e(mt,qge),e(qge,oGo),e(mt,rGo),e(mt,Zi),e(Zi,tGo),e(Zi,Nge),e(Nge,aGo),e(Zi,nGo),e(Zi,HO),e(HO,sGo),e(Zi,lGo),e(mt,iGo),M(Jb,mt,null),e(qo,dGo),e(qo,no),M(S6,no,null),e(no,cGo),e(no,jge),e(jge,fGo),e(no,mGo),e(no,qa),e(qa,gGo),e(qa,Dge),e(Dge,hGo),e(qa,pGo),e(qa,Gge),e(Gge,_Go),e(qa,uGo),e(qa,Oge),e(Oge,bGo),e(qa,vGo),e(no,FGo),e(no,V),e(V,Yb),e(Yb,Vge),e(Vge,TGo),e(Yb,MGo),e(Yb,UO),e(UO,EGo),e(Yb,CGo),e(V,wGo),e(V,Kb),e(Kb,Xge),e(Xge,AGo),e(Kb,yGo),e(Kb,JO),e(JO,LGo),e(Kb,xGo),e(V,$Go),e(V,Zb),e(Zb,zge),e(zge,kGo),e(Zb,SGo),e(Zb,YO),e(YO,RGo),e(Zb,PGo),e(V,BGo),e(V,ev),e(ev,Wge),e(Wge,IGo),e(ev,qGo),e(ev,KO),e(KO,NGo),e(ev,jGo),e(V,DGo),e(V,ov),e(ov,Qge),e(Qge,GGo),e(ov,OGo),e(ov,ZO),e(ZO,VGo),e(ov,XGo),e(V,zGo),e(V,rv),e(rv,Hge),e(Hge,WGo),e(rv,QGo),e(rv,eV),e(eV,HGo),e(rv,UGo),e(V,JGo),e(V,tv),e(tv,Uge),e(Uge,YGo),e(tv,KGo),e(tv,oV),e(oV,ZGo),e(tv,eOo),e(V,oOo),e(V,av),e(av,Jge),e(Jge,rOo),e(av,tOo),e(av,rV),e(rV,aOo),e(av,nOo),e(V,sOo),e(V,nv),e(nv,Yge),e(Yge,lOo),e(nv,iOo),e(nv,tV),e(tV,dOo),e(nv,cOo),e(V,fOo),e(V,sv),e(sv,Kge),e(Kge,mOo),e(sv,gOo),e(sv,aV),e(aV,hOo),e(sv,pOo),e(V,_Oo),e(V,lv),e(lv,Zge),e(Zge,uOo),e(lv,bOo),e(lv,nV),e(nV,vOo),e(lv,FOo),e(V,TOo),e(V,iv),e(iv,ehe),e(ehe,MOo),e(iv,EOo),e(iv,sV),e(sV,COo),e(iv,wOo),e(V,AOo),e(V,dv),e(dv,ohe),e(ohe,yOo),e(dv,LOo),e(dv,lV),e(lV,xOo),e(dv,$Oo),e(V,kOo),e(V,cv),e(cv,rhe),e(rhe,SOo),e(cv,ROo),e(cv,iV),e(iV,POo),e(cv,BOo),e(V,IOo),e(V,fv),e(fv,the),e(the,qOo),e(fv,NOo),e(fv,dV),e(dV,jOo),e(fv,DOo),e(V,GOo),e(V,mv),e(mv,ahe),e(ahe,OOo),e(mv,VOo),e(mv,cV),e(cV,XOo),e(mv,zOo),e(V,WOo),e(V,gv),e(gv,nhe),e(nhe,QOo),e(gv,HOo),e(gv,fV),e(fV,UOo),e(gv,JOo),e(V,YOo),e(V,hv),e(hv,she),e(she,KOo),e(hv,ZOo),e(hv,mV),e(mV,eVo),e(hv,oVo),e(V,rVo),e(V,pv),e(pv,lhe),e(lhe,tVo),e(pv,aVo),e(pv,gV),e(gV,nVo),e(pv,sVo),e(V,lVo),e(V,_v),e(_v,ihe),e(ihe,iVo),e(_v,dVo),e(_v,hV),e(hV,cVo),e(_v,fVo),e(V,mVo),e(V,uv),e(uv,dhe),e(dhe,gVo),e(uv,hVo),e(uv,pV),e(pV,pVo),e(uv,_Vo),e(V,uVo),e(V,bv),e(bv,che),e(che,bVo),e(bv,vVo),e(bv,_V),e(_V,FVo),e(bv,TVo),e(V,MVo),e(V,vv),e(vv,fhe),e(fhe,EVo),e(vv,CVo),e(vv,uV),e(uV,wVo),e(vv,AVo),e(V,yVo),e(V,Fv),e(Fv,mhe),e(mhe,LVo),e(Fv,xVo),e(Fv,bV),e(bV,$Vo),e(Fv,kVo),e(V,SVo),e(V,Tv),e(Tv,ghe),e(ghe,RVo),e(Tv,PVo),e(Tv,vV),e(vV,BVo),e(Tv,IVo),e(V,qVo),e(V,Mv),e(Mv,hhe),e(hhe,NVo),e(Mv,jVo),e(Mv,FV),e(FV,DVo),e(Mv,GVo),e(V,OVo),e(V,Ev),e(Ev,phe),e(phe,VVo),e(Ev,XVo),e(Ev,TV),e(TV,zVo),e(Ev,WVo),e(V,QVo),e(V,Cv),e(Cv,_he),e(_he,HVo),e(Cv,UVo),e(Cv,MV),e(MV,JVo),e(Cv,YVo),e(V,KVo),e(V,wv),e(wv,uhe),e(uhe,ZVo),e(wv,eXo),e(wv,EV),e(EV,oXo),e(wv,rXo),e(V,tXo),e(V,Av),e(Av,bhe),e(bhe,aXo),e(Av,nXo),e(Av,CV),e(CV,sXo),e(Av,lXo),e(V,iXo),e(V,yv),e(yv,vhe),e(vhe,dXo),e(yv,cXo),e(yv,wV),e(wV,fXo),e(yv,mXo),e(V,gXo),e(V,Lv),e(Lv,Fhe),e(Fhe,hXo),e(Lv,pXo),e(Lv,AV),e(AV,_Xo),e(Lv,uXo),e(V,bXo),e(V,xv),e(xv,The),e(The,vXo),e(xv,FXo),e(xv,yV),e(yV,TXo),e(xv,MXo),e(V,EXo),e(V,$v),e($v,Mhe),e(Mhe,CXo),e($v,wXo),e($v,LV),e(LV,AXo),e($v,yXo),e(V,LXo),e(V,kv),e(kv,Ehe),e(Ehe,xXo),e(kv,$Xo),e(kv,xV),e(xV,kXo),e(kv,SXo),e(V,RXo),e(V,Sv),e(Sv,Che),e(Che,PXo),e(Sv,BXo),e(Sv,$V),e($V,IXo),e(Sv,qXo),e(V,NXo),e(V,Rv),e(Rv,whe),e(whe,jXo),e(Rv,DXo),e(Rv,kV),e(kV,GXo),e(Rv,OXo),e(V,VXo),e(V,Pv),e(Pv,Ahe),e(Ahe,XXo),e(Pv,zXo),e(Pv,SV),e(SV,WXo),e(Pv,QXo),e(V,HXo),e(V,Bv),e(Bv,yhe),e(yhe,UXo),e(Bv,JXo),e(Bv,RV),e(RV,YXo),e(Bv,KXo),e(no,ZXo),e(no,Iv),e(Iv,ezo),e(Iv,Lhe),e(Lhe,ozo),e(Iv,rzo),e(Iv,xhe),e(xhe,tzo),e(no,azo),M(qv,no,null),b(f,Fqe,u),b(f,ed,u),e(ed,Nv),e(Nv,$he),M(R6,$he,null),e(ed,nzo),e(ed,khe),e(khe,szo),b(f,Tqe,u),b(f,No,u),M(P6,No,null),e(No,lzo),e(No,od),e(od,izo),e(od,PV),e(PV,dzo),e(od,czo),e(od,BV),e(BV,fzo),e(od,mzo),e(No,gzo),e(No,B6),e(B6,hzo),e(B6,She),e(She,pzo),e(B6,_zo),e(No,uzo),e(No,gt),M(I6,gt,null),e(gt,bzo),e(gt,Rhe),e(Rhe,vzo),e(gt,Fzo),e(gt,rd),e(rd,Tzo),e(rd,Phe),e(Phe,Mzo),e(rd,Ezo),e(rd,IV),e(IV,Czo),e(rd,wzo),e(gt,Azo),M(jv,gt,null),e(No,yzo),e(No,so),M(q6,so,null),e(so,Lzo),e(so,Bhe),e(Bhe,xzo),e(so,$zo),e(so,Na),e(Na,kzo),e(Na,Ihe),e(Ihe,Szo),e(Na,Rzo),e(Na,qhe),e(qhe,Pzo),e(Na,Bzo),e(Na,Nhe),e(Nhe,Izo),e(Na,qzo),e(so,Nzo),e(so,jhe),e(jhe,Dv),e(Dv,Dhe),e(Dhe,jzo),e(Dv,Dzo),e(Dv,qV),e(qV,Gzo),e(Dv,Ozo),e(so,Vzo),e(so,Gv),e(Gv,Xzo),e(Gv,Ghe),e(Ghe,zzo),e(Gv,Wzo),e(Gv,Ohe),e(Ohe,Qzo),e(so,Hzo),M(Ov,so,null),b(f,Mqe,u),b(f,td,u),e(td,Vv),e(Vv,Vhe),M(N6,Vhe,null),e(td,Uzo),e(td,Xhe),e(Xhe,Jzo),b(f,Eqe,u),b(f,jo,u),M(j6,jo,null),e(jo,Yzo),e(jo,ad),e(ad,Kzo),e(ad,NV),e(NV,Zzo),e(ad,eWo),e(ad,jV),e(jV,oWo),e(ad,rWo),e(jo,tWo),e(jo,D6),e(D6,aWo),e(D6,zhe),e(zhe,nWo),e(D6,sWo),e(jo,lWo),e(jo,ht),M(G6,ht,null),e(ht,iWo),e(ht,Whe),e(Whe,dWo),e(ht,cWo),e(ht,nd),e(nd,fWo),e(nd,Qhe),e(Qhe,mWo),e(nd,gWo),e(nd,DV),e(DV,hWo),e(nd,pWo),e(ht,_Wo),M(Xv,ht,null),e(jo,uWo),e(jo,lo),M(O6,lo,null),e(lo,bWo),e(lo,Hhe),e(Hhe,vWo),e(lo,FWo),e(lo,ja),e(ja,TWo),e(ja,Uhe),e(Uhe,MWo),e(ja,EWo),e(ja,Jhe),e(Jhe,CWo),e(ja,wWo),e(ja,Yhe),e(Yhe,AWo),e(ja,yWo),e(lo,LWo),e(lo,Fe),e(Fe,zv),e(zv,Khe),e(Khe,xWo),e(zv,$Wo),e(zv,GV),e(GV,kWo),e(zv,SWo),e(Fe,RWo),e(Fe,Wv),e(Wv,Zhe),e(Zhe,PWo),e(Wv,BWo),e(Wv,OV),e(OV,IWo),e(Wv,qWo),e(Fe,NWo),e(Fe,Qv),e(Qv,epe),e(epe,jWo),e(Qv,DWo),e(Qv,VV),e(VV,GWo),e(Qv,OWo),e(Fe,VWo),e(Fe,Hv),e(Hv,ope),e(ope,XWo),e(Hv,zWo),e(Hv,XV),e(XV,WWo),e(Hv,QWo),e(Fe,HWo),e(Fe,Ps),e(Ps,rpe),e(rpe,UWo),e(Ps,JWo),e(Ps,zV),e(zV,YWo),e(Ps,KWo),e(Ps,WV),e(WV,ZWo),e(Ps,eQo),e(Fe,oQo),e(Fe,Uv),e(Uv,tpe),e(tpe,rQo),e(Uv,tQo),e(Uv,QV),e(QV,aQo),e(Uv,nQo),e(Fe,sQo),e(Fe,pt),e(pt,ape),e(ape,lQo),e(pt,iQo),e(pt,HV),e(HV,dQo),e(pt,cQo),e(pt,UV),e(UV,fQo),e(pt,mQo),e(pt,JV),e(JV,gQo),e(pt,hQo),e(Fe,pQo),e(Fe,Jv),e(Jv,npe),e(npe,_Qo),e(Jv,uQo),e(Jv,YV),e(YV,bQo),e(Jv,vQo),e(Fe,FQo),e(Fe,Yv),e(Yv,spe),e(spe,TQo),e(Yv,MQo),e(Yv,KV),e(KV,EQo),e(Yv,CQo),e(Fe,wQo),e(Fe,Kv),e(Kv,lpe),e(lpe,AQo),e(Kv,yQo),e(Kv,ZV),e(ZV,LQo),e(Kv,xQo),e(Fe,$Qo),e(Fe,Zv),e(Zv,ipe),e(ipe,kQo),e(Zv,SQo),e(Zv,eX),e(eX,RQo),e(Zv,PQo),e(Fe,BQo),e(Fe,eF),e(eF,dpe),e(dpe,IQo),e(eF,qQo),e(eF,oX),e(oX,NQo),e(eF,jQo),e(Fe,DQo),e(Fe,oF),e(oF,cpe),e(cpe,GQo),e(oF,OQo),e(oF,rX),e(rX,VQo),e(oF,XQo),e(Fe,zQo),e(Fe,rF),e(rF,fpe),e(fpe,WQo),e(rF,QQo),e(rF,tX),e(tX,HQo),e(rF,UQo),e(lo,JQo),e(lo,tF),e(tF,YQo),e(tF,mpe),e(mpe,KQo),e(tF,ZQo),e(tF,gpe),e(gpe,eHo),e(lo,oHo),M(aF,lo,null),b(f,Cqe,u),b(f,sd,u),e(sd,nF),e(nF,hpe),M(V6,hpe,null),e(sd,rHo),e(sd,ppe),e(ppe,tHo),b(f,wqe,u),b(f,Do,u),M(X6,Do,null),e(Do,aHo),e(Do,ld),e(ld,nHo),e(ld,aX),e(aX,sHo),e(ld,lHo),e(ld,nX),e(nX,iHo),e(ld,dHo),e(Do,cHo),e(Do,z6),e(z6,fHo),e(z6,_pe),e(_pe,mHo),e(z6,gHo),e(Do,hHo),e(Do,_t),M(W6,_t,null),e(_t,pHo),e(_t,upe),e(upe,_Ho),e(_t,uHo),e(_t,id),e(id,bHo),e(id,bpe),e(bpe,vHo),e(id,FHo),e(id,sX),e(sX,THo),e(id,MHo),e(_t,EHo),M(sF,_t,null),e(Do,CHo),e(Do,io),M(Q6,io,null),e(io,wHo),e(io,vpe),e(vpe,AHo),e(io,yHo),e(io,Da),e(Da,LHo),e(Da,Fpe),e(Fpe,xHo),e(Da,$Ho),e(Da,Tpe),e(Tpe,kHo),e(Da,SHo),e(Da,Mpe),e(Mpe,RHo),e(Da,PHo),e(io,BHo),e(io,Epe),e(Epe,lF),e(lF,Cpe),e(Cpe,IHo),e(lF,qHo),e(lF,lX),e(lX,NHo),e(lF,jHo),e(io,DHo),e(io,iF),e(iF,GHo),e(iF,wpe),e(wpe,OHo),e(iF,VHo),e(iF,Ape),e(Ape,XHo),e(io,zHo),M(dF,io,null),b(f,Aqe,u),b(f,dd,u),e(dd,cF),e(cF,ype),M(H6,ype,null),e(dd,WHo),e(dd,Lpe),e(Lpe,QHo),b(f,yqe,u),b(f,Go,u),M(U6,Go,null),e(Go,HHo),e(Go,cd),e(cd,UHo),e(cd,iX),e(iX,JHo),e(cd,YHo),e(cd,dX),e(dX,KHo),e(cd,ZHo),e(Go,eUo),e(Go,J6),e(J6,oUo),e(J6,xpe),e(xpe,rUo),e(J6,tUo),e(Go,aUo),e(Go,ut),M(Y6,ut,null),e(ut,nUo),e(ut,$pe),e($pe,sUo),e(ut,lUo),e(ut,fd),e(fd,iUo),e(fd,kpe),e(kpe,dUo),e(fd,cUo),e(fd,cX),e(cX,fUo),e(fd,mUo),e(ut,gUo),M(fF,ut,null),e(Go,hUo),e(Go,co),M(K6,co,null),e(co,pUo),e(co,Spe),e(Spe,_Uo),e(co,uUo),e(co,Ga),e(Ga,bUo),e(Ga,Rpe),e(Rpe,vUo),e(Ga,FUo),e(Ga,Ppe),e(Ppe,TUo),e(Ga,MUo),e(Ga,Bpe),e(Bpe,EUo),e(Ga,CUo),e(co,wUo),e(co,ke),e(ke,mF),e(mF,Ipe),e(Ipe,AUo),e(mF,yUo),e(mF,fX),e(fX,LUo),e(mF,xUo),e(ke,$Uo),e(ke,gF),e(gF,qpe),e(qpe,kUo),e(gF,SUo),e(gF,mX),e(mX,RUo),e(gF,PUo),e(ke,BUo),e(ke,hF),e(hF,Npe),e(Npe,IUo),e(hF,qUo),e(hF,gX),e(gX,NUo),e(hF,jUo),e(ke,DUo),e(ke,pF),e(pF,jpe),e(jpe,GUo),e(pF,OUo),e(pF,hX),e(hX,VUo),e(pF,XUo),e(ke,zUo),e(ke,_F),e(_F,Dpe),e(Dpe,WUo),e(_F,QUo),e(_F,pX),e(pX,HUo),e(_F,UUo),e(ke,JUo),e(ke,uF),e(uF,Gpe),e(Gpe,YUo),e(uF,KUo),e(uF,_X),e(_X,ZUo),e(uF,eJo),e(ke,oJo),e(ke,bF),e(bF,Ope),e(Ope,rJo),e(bF,tJo),e(bF,uX),e(uX,aJo),e(bF,nJo),e(ke,sJo),e(ke,vF),e(vF,Vpe),e(Vpe,lJo),e(vF,iJo),e(vF,bX),e(bX,dJo),e(vF,cJo),e(ke,fJo),e(ke,FF),e(FF,Xpe),e(Xpe,mJo),e(FF,gJo),e(FF,vX),e(vX,hJo),e(FF,pJo),e(co,_Jo),e(co,TF),e(TF,uJo),e(TF,zpe),e(zpe,bJo),e(TF,vJo),e(TF,Wpe),e(Wpe,FJo),e(co,TJo),M(MF,co,null),b(f,Lqe,u),b(f,md,u),e(md,EF),e(EF,Qpe),M(Z6,Qpe,null),e(md,MJo),e(md,Hpe),e(Hpe,EJo),b(f,xqe,u),b(f,Oo,u),M(ey,Oo,null),e(Oo,CJo),e(Oo,gd),e(gd,wJo),e(gd,FX),e(FX,AJo),e(gd,yJo),e(gd,TX),e(TX,LJo),e(gd,xJo),e(Oo,$Jo),e(Oo,oy),e(oy,kJo),e(oy,Upe),e(Upe,SJo),e(oy,RJo),e(Oo,PJo),e(Oo,bt),M(ry,bt,null),e(bt,BJo),e(bt,Jpe),e(Jpe,IJo),e(bt,qJo),e(bt,hd),e(hd,NJo),e(hd,Ype),e(Ype,jJo),e(hd,DJo),e(hd,MX),e(MX,GJo),e(hd,OJo),e(bt,VJo),M(CF,bt,null),e(Oo,XJo),e(Oo,fo),M(ty,fo,null),e(fo,zJo),e(fo,Kpe),e(Kpe,WJo),e(fo,QJo),e(fo,Oa),e(Oa,HJo),e(Oa,Zpe),e(Zpe,UJo),e(Oa,JJo),e(Oa,e_e),e(e_e,YJo),e(Oa,KJo),e(Oa,o_e),e(o_e,ZJo),e(Oa,eYo),e(fo,oYo),e(fo,Kr),e(Kr,wF),e(wF,r_e),e(r_e,rYo),e(wF,tYo),e(wF,EX),e(EX,aYo),e(wF,nYo),e(Kr,sYo),e(Kr,AF),e(AF,t_e),e(t_e,lYo),e(AF,iYo),e(AF,CX),e(CX,dYo),e(AF,cYo),e(Kr,fYo),e(Kr,yF),e(yF,a_e),e(a_e,mYo),e(yF,gYo),e(yF,wX),e(wX,hYo),e(yF,pYo),e(Kr,_Yo),e(Kr,LF),e(LF,n_e),e(n_e,uYo),e(LF,bYo),e(LF,AX),e(AX,vYo),e(LF,FYo),e(Kr,TYo),e(Kr,xF),e(xF,s_e),e(s_e,MYo),e(xF,EYo),e(xF,yX),e(yX,CYo),e(xF,wYo),e(fo,AYo),e(fo,$F),e($F,yYo),e($F,l_e),e(l_e,LYo),e($F,xYo),e($F,i_e),e(i_e,$Yo),e(fo,kYo),M(kF,fo,null),b(f,$qe,u),b(f,pd,u),e(pd,SF),e(SF,d_e),M(ay,d_e,null),e(pd,SYo),e(pd,c_e),e(c_e,RYo),b(f,kqe,u),b(f,Vo,u),M(ny,Vo,null),e(Vo,PYo),e(Vo,_d),e(_d,BYo),e(_d,LX),e(LX,IYo),e(_d,qYo),e(_d,xX),e(xX,NYo),e(_d,jYo),e(Vo,DYo),e(Vo,sy),e(sy,GYo),e(sy,f_e),e(f_e,OYo),e(sy,VYo),e(Vo,XYo),e(Vo,vt),M(ly,vt,null),e(vt,zYo),e(vt,m_e),e(m_e,WYo),e(vt,QYo),e(vt,ud),e(ud,HYo),e(ud,g_e),e(g_e,UYo),e(ud,JYo),e(ud,$X),e($X,YYo),e(ud,KYo),e(vt,ZYo),M(RF,vt,null),e(Vo,eKo),e(Vo,mo),M(iy,mo,null),e(mo,oKo),e(mo,h_e),e(h_e,rKo),e(mo,tKo),e(mo,Va),e(Va,aKo),e(Va,p_e),e(p_e,nKo),e(Va,sKo),e(Va,__e),e(__e,lKo),e(Va,iKo),e(Va,u_e),e(u_e,dKo),e(Va,cKo),e(mo,fKo),e(mo,Se),e(Se,PF),e(PF,b_e),e(b_e,mKo),e(PF,gKo),e(PF,kX),e(kX,hKo),e(PF,pKo),e(Se,_Ko),e(Se,BF),e(BF,v_e),e(v_e,uKo),e(BF,bKo),e(BF,SX),e(SX,vKo),e(BF,FKo),e(Se,TKo),e(Se,IF),e(IF,F_e),e(F_e,MKo),e(IF,EKo),e(IF,RX),e(RX,CKo),e(IF,wKo),e(Se,AKo),e(Se,qF),e(qF,T_e),e(T_e,yKo),e(qF,LKo),e(qF,PX),e(PX,xKo),e(qF,$Ko),e(Se,kKo),e(Se,NF),e(NF,M_e),e(M_e,SKo),e(NF,RKo),e(NF,BX),e(BX,PKo),e(NF,BKo),e(Se,IKo),e(Se,jF),e(jF,E_e),e(E_e,qKo),e(jF,NKo),e(jF,IX),e(IX,jKo),e(jF,DKo),e(Se,GKo),e(Se,DF),e(DF,C_e),e(C_e,OKo),e(DF,VKo),e(DF,qX),e(qX,XKo),e(DF,zKo),e(Se,WKo),e(Se,GF),e(GF,w_e),e(w_e,QKo),e(GF,HKo),e(GF,NX),e(NX,UKo),e(GF,JKo),e(Se,YKo),e(Se,OF),e(OF,A_e),e(A_e,KKo),e(OF,ZKo),e(OF,jX),e(jX,eZo),e(OF,oZo),e(mo,rZo),e(mo,VF),e(VF,tZo),e(VF,y_e),e(y_e,aZo),e(VF,nZo),e(VF,L_e),e(L_e,sZo),e(mo,lZo),M(XF,mo,null),b(f,Sqe,u),b(f,bd,u),e(bd,zF),e(zF,x_e),M(dy,x_e,null),e(bd,iZo),e(bd,$_e),e($_e,dZo),b(f,Rqe,u),b(f,Xo,u),M(cy,Xo,null),e(Xo,cZo),e(Xo,vd),e(vd,fZo),e(vd,DX),e(DX,mZo),e(vd,gZo),e(vd,GX),e(GX,hZo),e(vd,pZo),e(Xo,_Zo),e(Xo,fy),e(fy,uZo),e(fy,k_e),e(k_e,bZo),e(fy,vZo),e(Xo,FZo),e(Xo,Ft),M(my,Ft,null),e(Ft,TZo),e(Ft,S_e),e(S_e,MZo),e(Ft,EZo),e(Ft,Fd),e(Fd,CZo),e(Fd,R_e),e(R_e,wZo),e(Fd,AZo),e(Fd,OX),e(OX,yZo),e(Fd,LZo),e(Ft,xZo),M(WF,Ft,null),e(Xo,$Zo),e(Xo,go),M(gy,go,null),e(go,kZo),e(go,P_e),e(P_e,SZo),e(go,RZo),e(go,Xa),e(Xa,PZo),e(Xa,B_e),e(B_e,BZo),e(Xa,IZo),e(Xa,I_e),e(I_e,qZo),e(Xa,NZo),e(Xa,q_e),e(q_e,jZo),e(Xa,DZo),e(go,GZo),e(go,hy),e(hy,QF),e(QF,N_e),e(N_e,OZo),e(QF,VZo),e(QF,VX),e(VX,XZo),e(QF,zZo),e(hy,WZo),e(hy,HF),e(HF,j_e),e(j_e,QZo),e(HF,HZo),e(HF,XX),e(XX,UZo),e(HF,JZo),e(go,YZo),e(go,UF),e(UF,KZo),e(UF,D_e),e(D_e,ZZo),e(UF,eer),e(UF,G_e),e(G_e,oer),e(go,rer),M(JF,go,null),b(f,Pqe,u),b(f,Td,u),e(Td,YF),e(YF,O_e),M(py,O_e,null),e(Td,ter),e(Td,V_e),e(V_e,aer),b(f,Bqe,u),b(f,zo,u),M(_y,zo,null),e(zo,ner),e(zo,Md),e(Md,ser),e(Md,zX),e(zX,ler),e(Md,ier),e(Md,WX),e(WX,der),e(Md,cer),e(zo,fer),e(zo,uy),e(uy,mer),e(uy,X_e),e(X_e,ger),e(uy,her),e(zo,per),e(zo,Tt),M(by,Tt,null),e(Tt,_er),e(Tt,z_e),e(z_e,uer),e(Tt,ber),e(Tt,Ed),e(Ed,ver),e(Ed,W_e),e(W_e,Fer),e(Ed,Ter),e(Ed,QX),e(QX,Mer),e(Ed,Eer),e(Tt,Cer),M(KF,Tt,null),e(zo,wer),e(zo,ho),M(vy,ho,null),e(ho,Aer),e(ho,Q_e),e(Q_e,yer),e(ho,Ler),e(ho,za),e(za,xer),e(za,H_e),e(H_e,$er),e(za,ker),e(za,U_e),e(U_e,Ser),e(za,Rer),e(za,J_e),e(J_e,Per),e(za,Ber),e(ho,Ier),e(ho,Zr),e(Zr,ZF),e(ZF,Y_e),e(Y_e,qer),e(ZF,Ner),e(ZF,HX),e(HX,jer),e(ZF,Der),e(Zr,Ger),e(Zr,eT),e(eT,K_e),e(K_e,Oer),e(eT,Ver),e(eT,UX),e(UX,Xer),e(eT,zer),e(Zr,Wer),e(Zr,oT),e(oT,Z_e),e(Z_e,Qer),e(oT,Her),e(oT,JX),e(JX,Uer),e(oT,Jer),e(Zr,Yer),e(Zr,rT),e(rT,eue),e(eue,Ker),e(rT,Zer),e(rT,YX),e(YX,eor),e(rT,oor),e(Zr,ror),e(Zr,tT),e(tT,oue),e(oue,tor),e(tT,aor),e(tT,KX),e(KX,nor),e(tT,sor),e(ho,lor),e(ho,aT),e(aT,ior),e(aT,rue),e(rue,dor),e(aT,cor),e(aT,tue),e(tue,mor),e(ho,gor),M(nT,ho,null),b(f,Iqe,u),b(f,Cd,u),e(Cd,sT),e(sT,aue),M(Fy,aue,null),e(Cd,hor),e(Cd,nue),e(nue,por),b(f,qqe,u),b(f,Wo,u),M(Ty,Wo,null),e(Wo,_or),e(Wo,wd),e(wd,uor),e(wd,ZX),e(ZX,bor),e(wd,vor),e(wd,ez),e(ez,For),e(wd,Tor),e(Wo,Mor),e(Wo,My),e(My,Eor),e(My,sue),e(sue,Cor),e(My,wor),e(Wo,Aor),e(Wo,Mt),M(Ey,Mt,null),e(Mt,yor),e(Mt,lue),e(lue,Lor),e(Mt,xor),e(Mt,Ad),e(Ad,$or),e(Ad,iue),e(iue,kor),e(Ad,Sor),e(Ad,oz),e(oz,Ror),e(Ad,Por),e(Mt,Bor),M(lT,Mt,null),e(Wo,Ior),e(Wo,po),M(Cy,po,null),e(po,qor),e(po,due),e(due,Nor),e(po,jor),e(po,Wa),e(Wa,Dor),e(Wa,cue),e(cue,Gor),e(Wa,Oor),e(Wa,fue),e(fue,Vor),e(Wa,Xor),e(Wa,mue),e(mue,zor),e(Wa,Wor),e(po,Qor),e(po,yd),e(yd,iT),e(iT,gue),e(gue,Hor),e(iT,Uor),e(iT,rz),e(rz,Jor),e(iT,Yor),e(yd,Kor),e(yd,dT),e(dT,hue),e(hue,Zor),e(dT,err),e(dT,tz),e(tz,orr),e(dT,rrr),e(yd,trr),e(yd,cT),e(cT,pue),e(pue,arr),e(cT,nrr),e(cT,az),e(az,srr),e(cT,lrr),e(po,irr),e(po,fT),e(fT,drr),e(fT,_ue),e(_ue,crr),e(fT,frr),e(fT,uue),e(uue,mrr),e(po,grr),M(mT,po,null),b(f,Nqe,u),b(f,Ld,u),e(Ld,gT),e(gT,bue),M(wy,bue,null),e(Ld,hrr),e(Ld,vue),e(vue,prr),b(f,jqe,u),b(f,Qo,u),M(Ay,Qo,null),e(Qo,_rr),e(Qo,xd),e(xd,urr),e(xd,nz),e(nz,brr),e(xd,vrr),e(xd,sz),e(sz,Frr),e(xd,Trr),e(Qo,Mrr),e(Qo,yy),e(yy,Err),e(yy,Fue),e(Fue,Crr),e(yy,wrr),e(Qo,Arr),e(Qo,Et),M(Ly,Et,null),e(Et,yrr),e(Et,Tue),e(Tue,Lrr),e(Et,xrr),e(Et,$d),e($d,$rr),e($d,Mue),e(Mue,krr),e($d,Srr),e($d,lz),e(lz,Rrr),e($d,Prr),e(Et,Brr),M(hT,Et,null),e(Qo,Irr),e(Qo,_o),M(xy,_o,null),e(_o,qrr),e(_o,Eue),e(Eue,Nrr),e(_o,jrr),e(_o,Qa),e(Qa,Drr),e(Qa,Cue),e(Cue,Grr),e(Qa,Orr),e(Qa,wue),e(wue,Vrr),e(Qa,Xrr),e(Qa,Aue),e(Aue,zrr),e(Qa,Wrr),e(_o,Qrr),e(_o,$y),e($y,pT),e(pT,yue),e(yue,Hrr),e(pT,Urr),e(pT,iz),e(iz,Jrr),e(pT,Yrr),e($y,Krr),e($y,_T),e(_T,Lue),e(Lue,Zrr),e(_T,etr),e(_T,dz),e(dz,otr),e(_T,rtr),e(_o,ttr),e(_o,uT),e(uT,atr),e(uT,xue),e(xue,ntr),e(uT,str),e(uT,$ue),e($ue,ltr),e(_o,itr),M(bT,_o,null),b(f,Dqe,u),b(f,kd,u),e(kd,vT),e(vT,kue),M(ky,kue,null),e(kd,dtr),e(kd,Sue),e(Sue,ctr),b(f,Gqe,u),b(f,Ho,u),M(Sy,Ho,null),e(Ho,ftr),e(Ho,Sd),e(Sd,mtr),e(Sd,cz),e(cz,gtr),e(Sd,htr),e(Sd,fz),e(fz,ptr),e(Sd,_tr),e(Ho,utr),e(Ho,Ry),e(Ry,btr),e(Ry,Rue),e(Rue,vtr),e(Ry,Ftr),e(Ho,Ttr),e(Ho,Ct),M(Py,Ct,null),e(Ct,Mtr),e(Ct,Pue),e(Pue,Etr),e(Ct,Ctr),e(Ct,Rd),e(Rd,wtr),e(Rd,Bue),e(Bue,Atr),e(Rd,ytr),e(Rd,mz),e(mz,Ltr),e(Rd,xtr),e(Ct,$tr),M(FT,Ct,null),e(Ho,ktr),e(Ho,uo),M(By,uo,null),e(uo,Str),e(uo,Iue),e(Iue,Rtr),e(uo,Ptr),e(uo,Ha),e(Ha,Btr),e(Ha,que),e(que,Itr),e(Ha,qtr),e(Ha,Nue),e(Nue,Ntr),e(Ha,jtr),e(Ha,jue),e(jue,Dtr),e(Ha,Gtr),e(uo,Otr),e(uo,Due),e(Due,TT),e(TT,Gue),e(Gue,Vtr),e(TT,Xtr),e(TT,gz),e(gz,ztr),e(TT,Wtr),e(uo,Qtr),e(uo,MT),e(MT,Htr),e(MT,Oue),e(Oue,Utr),e(MT,Jtr),e(MT,Vue),e(Vue,Ytr),e(uo,Ktr),M(ET,uo,null),b(f,Oqe,u),b(f,Pd,u),e(Pd,CT),e(CT,Xue),M(Iy,Xue,null),e(Pd,Ztr),e(Pd,zue),e(zue,ear),b(f,Vqe,u),b(f,Uo,u),M(qy,Uo,null),e(Uo,oar),e(Uo,Bd),e(Bd,rar),e(Bd,hz),e(hz,tar),e(Bd,aar),e(Bd,pz),e(pz,nar),e(Bd,sar),e(Uo,lar),e(Uo,Ny),e(Ny,iar),e(Ny,Wue),e(Wue,dar),e(Ny,car),e(Uo,far),e(Uo,wt),M(jy,wt,null),e(wt,mar),e(wt,Que),e(Que,gar),e(wt,har),e(wt,Id),e(Id,par),e(Id,Hue),e(Hue,_ar),e(Id,uar),e(Id,_z),e(_z,bar),e(Id,Far),e(wt,Tar),M(wT,wt,null),e(Uo,Mar),e(Uo,bo),M(Dy,bo,null),e(bo,Ear),e(bo,Uue),e(Uue,Car),e(bo,war),e(bo,Ua),e(Ua,Aar),e(Ua,Jue),e(Jue,yar),e(Ua,Lar),e(Ua,Yue),e(Yue,xar),e(Ua,$ar),e(Ua,Kue),e(Kue,kar),e(Ua,Sar),e(bo,Rar),e(bo,Ja),e(Ja,AT),e(AT,Zue),e(Zue,Par),e(AT,Bar),e(AT,uz),e(uz,Iar),e(AT,qar),e(Ja,Nar),e(Ja,yT),e(yT,e2e),e(e2e,jar),e(yT,Dar),e(yT,bz),e(bz,Gar),e(yT,Oar),e(Ja,Var),e(Ja,LT),e(LT,o2e),e(o2e,Xar),e(LT,zar),e(LT,vz),e(vz,War),e(LT,Qar),e(Ja,Har),e(Ja,xT),e(xT,r2e),e(r2e,Uar),e(xT,Jar),e(xT,Fz),e(Fz,Yar),e(xT,Kar),e(bo,Zar),e(bo,$T),e($T,enr),e($T,t2e),e(t2e,onr),e($T,rnr),e($T,a2e),e(a2e,tnr),e(bo,anr),M(kT,bo,null),b(f,Xqe,u),b(f,qd,u),e(qd,ST),e(ST,n2e),M(Gy,n2e,null),e(qd,nnr),e(qd,s2e),e(s2e,snr),b(f,zqe,u),b(f,Jo,u),M(Oy,Jo,null),e(Jo,lnr),e(Jo,Nd),e(Nd,inr),e(Nd,Tz),e(Tz,dnr),e(Nd,cnr),e(Nd,Mz),e(Mz,fnr),e(Nd,mnr),e(Jo,gnr),e(Jo,Vy),e(Vy,hnr),e(Vy,l2e),e(l2e,pnr),e(Vy,_nr),e(Jo,unr),e(Jo,At),M(Xy,At,null),e(At,bnr),e(At,i2e),e(i2e,vnr),e(At,Fnr),e(At,jd),e(jd,Tnr),e(jd,d2e),e(d2e,Mnr),e(jd,Enr),e(jd,Ez),e(Ez,Cnr),e(jd,wnr),e(At,Anr),M(RT,At,null),e(Jo,ynr),e(Jo,vo),M(zy,vo,null),e(vo,Lnr),e(vo,c2e),e(c2e,xnr),e(vo,$nr),e(vo,Ya),e(Ya,knr),e(Ya,f2e),e(f2e,Snr),e(Ya,Rnr),e(Ya,m2e),e(m2e,Pnr),e(Ya,Bnr),e(Ya,g2e),e(g2e,Inr),e(Ya,qnr),e(vo,Nnr),e(vo,h2e),e(h2e,PT),e(PT,p2e),e(p2e,jnr),e(PT,Dnr),e(PT,Cz),e(Cz,Gnr),e(PT,Onr),e(vo,Vnr),e(vo,BT),e(BT,Xnr),e(BT,_2e),e(_2e,znr),e(BT,Wnr),e(BT,u2e),e(u2e,Qnr),e(vo,Hnr),M(IT,vo,null),b(f,Wqe,u),b(f,Dd,u),e(Dd,qT),e(qT,b2e),M(Wy,b2e,null),e(Dd,Unr),e(Dd,v2e),e(v2e,Jnr),b(f,Qqe,u),b(f,Yo,u),M(Qy,Yo,null),e(Yo,Ynr),e(Yo,Gd),e(Gd,Knr),e(Gd,wz),e(wz,Znr),e(Gd,esr),e(Gd,Az),e(Az,osr),e(Gd,rsr),e(Yo,tsr),e(Yo,Hy),e(Hy,asr),e(Hy,F2e),e(F2e,nsr),e(Hy,ssr),e(Yo,lsr),e(Yo,yt),M(Uy,yt,null),e(yt,isr),e(yt,T2e),e(T2e,dsr),e(yt,csr),e(yt,Od),e(Od,fsr),e(Od,M2e),e(M2e,msr),e(Od,gsr),e(Od,yz),e(yz,hsr),e(Od,psr),e(yt,_sr),M(NT,yt,null),e(Yo,usr),e(Yo,wr),M(Jy,wr,null),e(wr,bsr),e(wr,E2e),e(E2e,vsr),e(wr,Fsr),e(wr,Ka),e(Ka,Tsr),e(Ka,C2e),e(C2e,Msr),e(Ka,Esr),e(Ka,w2e),e(w2e,Csr),e(Ka,wsr),e(Ka,A2e),e(A2e,Asr),e(Ka,ysr),e(wr,Lsr),e(wr,N),e(N,jT),e(jT,y2e),e(y2e,xsr),e(jT,$sr),e(jT,Lz),e(Lz,ksr),e(jT,Ssr),e(N,Rsr),e(N,DT),e(DT,L2e),e(L2e,Psr),e(DT,Bsr),e(DT,xz),e(xz,Isr),e(DT,qsr),e(N,Nsr),e(N,GT),e(GT,x2e),e(x2e,jsr),e(GT,Dsr),e(GT,$z),e($z,Gsr),e(GT,Osr),e(N,Vsr),e(N,OT),e(OT,$2e),e($2e,Xsr),e(OT,zsr),e(OT,kz),e(kz,Wsr),e(OT,Qsr),e(N,Hsr),e(N,VT),e(VT,k2e),e(k2e,Usr),e(VT,Jsr),e(VT,Sz),e(Sz,Ysr),e(VT,Ksr),e(N,Zsr),e(N,XT),e(XT,S2e),e(S2e,elr),e(XT,olr),e(XT,Rz),e(Rz,rlr),e(XT,tlr),e(N,alr),e(N,zT),e(zT,R2e),e(R2e,nlr),e(zT,slr),e(zT,Pz),e(Pz,llr),e(zT,ilr),e(N,dlr),e(N,WT),e(WT,P2e),e(P2e,clr),e(WT,flr),e(WT,Bz),e(Bz,mlr),e(WT,glr),e(N,hlr),e(N,QT),e(QT,B2e),e(B2e,plr),e(QT,_lr),e(QT,Iz),e(Iz,ulr),e(QT,blr),e(N,vlr),e(N,HT),e(HT,I2e),e(I2e,Flr),e(HT,Tlr),e(HT,qz),e(qz,Mlr),e(HT,Elr),e(N,Clr),e(N,UT),e(UT,q2e),e(q2e,wlr),e(UT,Alr),e(UT,Nz),e(Nz,ylr),e(UT,Llr),e(N,xlr),e(N,JT),e(JT,N2e),e(N2e,$lr),e(JT,klr),e(JT,jz),e(jz,Slr),e(JT,Rlr),e(N,Plr),e(N,YT),e(YT,j2e),e(j2e,Blr),e(YT,Ilr),e(YT,Dz),e(Dz,qlr),e(YT,Nlr),e(N,jlr),e(N,KT),e(KT,D2e),e(D2e,Dlr),e(KT,Glr),e(KT,Gz),e(Gz,Olr),e(KT,Vlr),e(N,Xlr),e(N,ZT),e(ZT,G2e),e(G2e,zlr),e(ZT,Wlr),e(ZT,Oz),e(Oz,Qlr),e(ZT,Hlr),e(N,Ulr),e(N,e7),e(e7,O2e),e(O2e,Jlr),e(e7,Ylr),e(e7,Vz),e(Vz,Klr),e(e7,Zlr),e(N,eir),e(N,o7),e(o7,V2e),e(V2e,oir),e(o7,rir),e(o7,Xz),e(Xz,tir),e(o7,air),e(N,nir),e(N,Bs),e(Bs,X2e),e(X2e,sir),e(Bs,lir),e(Bs,zz),e(zz,iir),e(Bs,dir),e(Bs,Wz),e(Wz,cir),e(Bs,fir),e(N,mir),e(N,r7),e(r7,z2e),e(z2e,gir),e(r7,hir),e(r7,Qz),e(Qz,pir),e(r7,_ir),e(N,uir),e(N,t7),e(t7,W2e),e(W2e,bir),e(t7,vir),e(t7,Hz),e(Hz,Fir),e(t7,Tir),e(N,Mir),e(N,a7),e(a7,Q2e),e(Q2e,Eir),e(a7,Cir),e(a7,Uz),e(Uz,wir),e(a7,Air),e(N,yir),e(N,n7),e(n7,H2e),e(H2e,Lir),e(n7,xir),e(n7,Jz),e(Jz,$ir),e(n7,kir),e(N,Sir),e(N,s7),e(s7,U2e),e(U2e,Rir),e(s7,Pir),e(s7,Yz),e(Yz,Bir),e(s7,Iir),e(N,qir),e(N,l7),e(l7,J2e),e(J2e,Nir),e(l7,jir),e(l7,Kz),e(Kz,Dir),e(l7,Gir),e(N,Oir),e(N,i7),e(i7,Y2e),e(Y2e,Vir),e(i7,Xir),e(i7,Zz),e(Zz,zir),e(i7,Wir),e(N,Qir),e(N,d7),e(d7,K2e),e(K2e,Hir),e(d7,Uir),e(d7,eW),e(eW,Jir),e(d7,Yir),e(N,Kir),e(N,c7),e(c7,Z2e),e(Z2e,Zir),e(c7,edr),e(c7,oW),e(oW,odr),e(c7,rdr),e(N,tdr),e(N,f7),e(f7,e1e),e(e1e,adr),e(f7,ndr),e(f7,rW),e(rW,sdr),e(f7,ldr),e(N,idr),e(N,m7),e(m7,o1e),e(o1e,ddr),e(m7,cdr),e(m7,tW),e(tW,fdr),e(m7,mdr),e(N,gdr),e(N,g7),e(g7,r1e),e(r1e,hdr),e(g7,pdr),e(g7,aW),e(aW,_dr),e(g7,udr),e(N,bdr),e(N,h7),e(h7,t1e),e(t1e,vdr),e(h7,Fdr),e(h7,nW),e(nW,Tdr),e(h7,Mdr),e(N,Edr),e(N,p7),e(p7,a1e),e(a1e,Cdr),e(p7,wdr),e(p7,sW),e(sW,Adr),e(p7,ydr),e(N,Ldr),e(N,_7),e(_7,n1e),e(n1e,xdr),e(_7,$dr),e(_7,lW),e(lW,kdr),e(_7,Sdr),e(N,Rdr),e(N,u7),e(u7,s1e),e(s1e,Pdr),e(u7,Bdr),e(u7,iW),e(iW,Idr),e(u7,qdr),e(N,Ndr),e(N,b7),e(b7,l1e),e(l1e,jdr),e(b7,Ddr),e(b7,dW),e(dW,Gdr),e(b7,Odr),e(N,Vdr),e(N,v7),e(v7,i1e),e(i1e,Xdr),e(v7,zdr),e(v7,cW),e(cW,Wdr),e(v7,Qdr),e(N,Hdr),e(N,F7),e(F7,d1e),e(d1e,Udr),e(F7,Jdr),e(F7,fW),e(fW,Ydr),e(F7,Kdr),e(N,Zdr),e(N,T7),e(T7,c1e),e(c1e,ecr),e(T7,ocr),e(T7,mW),e(mW,rcr),e(T7,tcr),e(N,acr),e(N,M7),e(M7,f1e),e(f1e,ncr),e(M7,scr),e(M7,gW),e(gW,lcr),e(M7,icr),e(N,dcr),e(N,E7),e(E7,m1e),e(m1e,ccr),e(E7,fcr),e(E7,hW),e(hW,mcr),e(E7,gcr),e(N,hcr),e(N,C7),e(C7,g1e),e(g1e,pcr),e(C7,_cr),e(C7,pW),e(pW,ucr),e(C7,bcr),e(N,vcr),e(N,w7),e(w7,h1e),e(h1e,Fcr),e(w7,Tcr),e(w7,_W),e(_W,Mcr),e(w7,Ecr),e(N,Ccr),e(N,A7),e(A7,p1e),e(p1e,wcr),e(A7,Acr),e(A7,uW),e(uW,ycr),e(A7,Lcr),e(N,xcr),e(N,y7),e(y7,_1e),e(_1e,$cr),e(y7,kcr),e(y7,bW),e(bW,Scr),e(y7,Rcr),e(N,Pcr),e(N,L7),e(L7,u1e),e(u1e,Bcr),e(L7,Icr),e(L7,vW),e(vW,qcr),e(L7,Ncr),e(N,jcr),e(N,x7),e(x7,b1e),e(b1e,Dcr),e(x7,Gcr),e(x7,FW),e(FW,Ocr),e(x7,Vcr),e(wr,Xcr),M($7,wr,null),b(f,Hqe,u),b(f,Vd,u),e(Vd,k7),e(k7,v1e),M(Yy,v1e,null),e(Vd,zcr),e(Vd,F1e),e(F1e,Wcr),b(f,Uqe,u),b(f,Ko,u),M(Ky,Ko,null),e(Ko,Qcr),e(Ko,Xd),e(Xd,Hcr),e(Xd,TW),e(TW,Ucr),e(Xd,Jcr),e(Xd,MW),e(MW,Ycr),e(Xd,Kcr),e(Ko,Zcr),e(Ko,Zy),e(Zy,efr),e(Zy,T1e),e(T1e,ofr),e(Zy,rfr),e(Ko,tfr),e(Ko,Lt),M(eL,Lt,null),e(Lt,afr),e(Lt,M1e),e(M1e,nfr),e(Lt,sfr),e(Lt,zd),e(zd,lfr),e(zd,E1e),e(E1e,ifr),e(zd,dfr),e(zd,EW),e(EW,cfr),e(zd,ffr),e(Lt,mfr),M(S7,Lt,null),e(Ko,gfr),e(Ko,Ar),M(oL,Ar,null),e(Ar,hfr),e(Ar,C1e),e(C1e,pfr),e(Ar,_fr),e(Ar,Za),e(Za,ufr),e(Za,w1e),e(w1e,bfr),e(Za,vfr),e(Za,A1e),e(A1e,Ffr),e(Za,Tfr),e(Za,y1e),e(y1e,Mfr),e(Za,Efr),e(Ar,Cfr),e(Ar,se),e(se,R7),e(R7,L1e),e(L1e,wfr),e(R7,Afr),e(R7,CW),e(CW,yfr),e(R7,Lfr),e(se,xfr),e(se,P7),e(P7,x1e),e(x1e,$fr),e(P7,kfr),e(P7,wW),e(wW,Sfr),e(P7,Rfr),e(se,Pfr),e(se,B7),e(B7,$1e),e($1e,Bfr),e(B7,Ifr),e(B7,AW),e(AW,qfr),e(B7,Nfr),e(se,jfr),e(se,I7),e(I7,k1e),e(k1e,Dfr),e(I7,Gfr),e(I7,yW),e(yW,Ofr),e(I7,Vfr),e(se,Xfr),e(se,q7),e(q7,S1e),e(S1e,zfr),e(q7,Wfr),e(q7,LW),e(LW,Qfr),e(q7,Hfr),e(se,Ufr),e(se,N7),e(N7,R1e),e(R1e,Jfr),e(N7,Yfr),e(N7,xW),e(xW,Kfr),e(N7,Zfr),e(se,emr),e(se,j7),e(j7,P1e),e(P1e,omr),e(j7,rmr),e(j7,$W),e($W,tmr),e(j7,amr),e(se,nmr),e(se,D7),e(D7,B1e),e(B1e,smr),e(D7,lmr),e(D7,kW),e(kW,imr),e(D7,dmr),e(se,cmr),e(se,G7),e(G7,I1e),e(I1e,fmr),e(G7,mmr),e(G7,SW),e(SW,gmr),e(G7,hmr),e(se,pmr),e(se,O7),e(O7,q1e),e(q1e,_mr),e(O7,umr),e(O7,RW),e(RW,bmr),e(O7,vmr),e(se,Fmr),e(se,V7),e(V7,N1e),e(N1e,Tmr),e(V7,Mmr),e(V7,PW),e(PW,Emr),e(V7,Cmr),e(se,wmr),e(se,X7),e(X7,j1e),e(j1e,Amr),e(X7,ymr),e(X7,BW),e(BW,Lmr),e(X7,xmr),e(se,$mr),e(se,z7),e(z7,D1e),e(D1e,kmr),e(z7,Smr),e(z7,IW),e(IW,Rmr),e(z7,Pmr),e(se,Bmr),e(se,W7),e(W7,G1e),e(G1e,Imr),e(W7,qmr),e(W7,qW),e(qW,Nmr),e(W7,jmr),e(se,Dmr),e(se,Q7),e(Q7,O1e),e(O1e,Gmr),e(Q7,Omr),e(Q7,NW),e(NW,Vmr),e(Q7,Xmr),e(se,zmr),e(se,H7),e(H7,V1e),e(V1e,Wmr),e(H7,Qmr),e(H7,jW),e(jW,Hmr),e(H7,Umr),e(se,Jmr),e(se,U7),e(U7,X1e),e(X1e,Ymr),e(U7,Kmr),e(U7,DW),e(DW,Zmr),e(U7,egr),e(se,ogr),e(se,J7),e(J7,z1e),e(z1e,rgr),e(J7,tgr),e(J7,GW),e(GW,agr),e(J7,ngr),e(se,sgr),e(se,Y7),e(Y7,W1e),e(W1e,lgr),e(Y7,igr),e(Y7,OW),e(OW,dgr),e(Y7,cgr),e(se,fgr),e(se,K7),e(K7,Q1e),e(Q1e,mgr),e(K7,ggr),e(K7,VW),e(VW,hgr),e(K7,pgr),e(se,_gr),e(se,Z7),e(Z7,H1e),e(H1e,ugr),e(Z7,bgr),e(Z7,XW),e(XW,vgr),e(Z7,Fgr),e(se,Tgr),e(se,eM),e(eM,U1e),e(U1e,Mgr),e(eM,Egr),e(eM,zW),e(zW,Cgr),e(eM,wgr),e(se,Agr),e(se,oM),e(oM,J1e),e(J1e,ygr),e(oM,Lgr),e(oM,WW),e(WW,xgr),e(oM,$gr),e(Ar,kgr),M(rM,Ar,null),b(f,Jqe,u),b(f,Wd,u),e(Wd,tM),e(tM,Y1e),M(rL,Y1e,null),e(Wd,Sgr),e(Wd,K1e),e(K1e,Rgr),b(f,Yqe,u),b(f,Zo,u),M(tL,Zo,null),e(Zo,Pgr),e(Zo,Qd),e(Qd,Bgr),e(Qd,QW),e(QW,Igr),e(Qd,qgr),e(Qd,HW),e(HW,Ngr),e(Qd,jgr),e(Zo,Dgr),e(Zo,aL),e(aL,Ggr),e(aL,Z1e),e(Z1e,Ogr),e(aL,Vgr),e(Zo,Xgr),e(Zo,xt),M(nL,xt,null),e(xt,zgr),e(xt,e9e),e(e9e,Wgr),e(xt,Qgr),e(xt,Hd),e(Hd,Hgr),e(Hd,o9e),e(o9e,Ugr),e(Hd,Jgr),e(Hd,UW),e(UW,Ygr),e(Hd,Kgr),e(xt,Zgr),M(aM,xt,null),e(Zo,ehr),e(Zo,yr),M(sL,yr,null),e(yr,ohr),e(yr,r9e),e(r9e,rhr),e(yr,thr),e(yr,en),e(en,ahr),e(en,t9e),e(t9e,nhr),e(en,shr),e(en,a9e),e(a9e,lhr),e(en,ihr),e(en,n9e),e(n9e,dhr),e(en,chr),e(yr,fhr),e(yr,Me),e(Me,nM),e(nM,s9e),e(s9e,mhr),e(nM,ghr),e(nM,JW),e(JW,hhr),e(nM,phr),e(Me,_hr),e(Me,sM),e(sM,l9e),e(l9e,uhr),e(sM,bhr),e(sM,YW),e(YW,vhr),e(sM,Fhr),e(Me,Thr),e(Me,lM),e(lM,i9e),e(i9e,Mhr),e(lM,Ehr),e(lM,KW),e(KW,Chr),e(lM,whr),e(Me,Ahr),e(Me,iM),e(iM,d9e),e(d9e,yhr),e(iM,Lhr),e(iM,ZW),e(ZW,xhr),e(iM,$hr),e(Me,khr),e(Me,dM),e(dM,c9e),e(c9e,Shr),e(dM,Rhr),e(dM,eQ),e(eQ,Phr),e(dM,Bhr),e(Me,Ihr),e(Me,cM),e(cM,f9e),e(f9e,qhr),e(cM,Nhr),e(cM,oQ),e(oQ,jhr),e(cM,Dhr),e(Me,Ghr),e(Me,fM),e(fM,m9e),e(m9e,Ohr),e(fM,Vhr),e(fM,rQ),e(rQ,Xhr),e(fM,zhr),e(Me,Whr),e(Me,mM),e(mM,g9e),e(g9e,Qhr),e(mM,Hhr),e(mM,tQ),e(tQ,Uhr),e(mM,Jhr),e(Me,Yhr),e(Me,gM),e(gM,h9e),e(h9e,Khr),e(gM,Zhr),e(gM,aQ),e(aQ,epr),e(gM,opr),e(Me,rpr),e(Me,hM),e(hM,p9e),e(p9e,tpr),e(hM,apr),e(hM,nQ),e(nQ,npr),e(hM,spr),e(Me,lpr),e(Me,pM),e(pM,_9e),e(_9e,ipr),e(pM,dpr),e(pM,sQ),e(sQ,cpr),e(pM,fpr),e(Me,mpr),e(Me,_M),e(_M,u9e),e(u9e,gpr),e(_M,hpr),e(_M,lQ),e(lQ,ppr),e(_M,_pr),e(yr,upr),M(uM,yr,null),b(f,Kqe,u),b(f,Ud,u),e(Ud,bM),e(bM,b9e),M(lL,b9e,null),e(Ud,bpr),e(Ud,v9e),e(v9e,vpr),b(f,Zqe,u),b(f,er,u),M(iL,er,null),e(er,Fpr),e(er,Jd),e(Jd,Tpr),e(Jd,iQ),e(iQ,Mpr),e(Jd,Epr),e(Jd,dQ),e(dQ,Cpr),e(Jd,wpr),e(er,Apr),e(er,dL),e(dL,ypr),e(dL,F9e),e(F9e,Lpr),e(dL,xpr),e(er,$pr),e(er,$t),M(cL,$t,null),e($t,kpr),e($t,T9e),e(T9e,Spr),e($t,Rpr),e($t,Yd),e(Yd,Ppr),e(Yd,M9e),e(M9e,Bpr),e(Yd,Ipr),e(Yd,cQ),e(cQ,qpr),e(Yd,Npr),e($t,jpr),M(vM,$t,null),e(er,Dpr),e(er,Lr),M(fL,Lr,null),e(Lr,Gpr),e(Lr,E9e),e(E9e,Opr),e(Lr,Vpr),e(Lr,on),e(on,Xpr),e(on,C9e),e(C9e,zpr),e(on,Wpr),e(on,w9e),e(w9e,Qpr),e(on,Hpr),e(on,A9e),e(A9e,Upr),e(on,Jpr),e(Lr,Ypr),e(Lr,rn),e(rn,FM),e(FM,y9e),e(y9e,Kpr),e(FM,Zpr),e(FM,fQ),e(fQ,e_r),e(FM,o_r),e(rn,r_r),e(rn,TM),e(TM,L9e),e(L9e,t_r),e(TM,a_r),e(TM,mQ),e(mQ,n_r),e(TM,s_r),e(rn,l_r),e(rn,MM),e(MM,x9e),e(x9e,i_r),e(MM,d_r),e(MM,gQ),e(gQ,c_r),e(MM,f_r),e(rn,m_r),e(rn,EM),e(EM,$9e),e($9e,g_r),e(EM,h_r),e(EM,hQ),e(hQ,p_r),e(EM,__r),e(Lr,u_r),M(CM,Lr,null),b(f,eNe,u),b(f,Kd,u),e(Kd,wM),e(wM,k9e),M(mL,k9e,null),e(Kd,b_r),e(Kd,S9e),e(S9e,v_r),b(f,oNe,u),b(f,or,u),M(gL,or,null),e(or,F_r),e(or,Zd),e(Zd,T_r),e(Zd,pQ),e(pQ,M_r),e(Zd,E_r),e(Zd,_Q),e(_Q,C_r),e(Zd,w_r),e(or,A_r),e(or,hL),e(hL,y_r),e(hL,R9e),e(R9e,L_r),e(hL,x_r),e(or,$_r),e(or,kt),M(pL,kt,null),e(kt,k_r),e(kt,P9e),e(P9e,S_r),e(kt,R_r),e(kt,ec),e(ec,P_r),e(ec,B9e),e(B9e,B_r),e(ec,I_r),e(ec,uQ),e(uQ,q_r),e(ec,N_r),e(kt,j_r),M(AM,kt,null),e(or,D_r),e(or,xr),M(_L,xr,null),e(xr,G_r),e(xr,I9e),e(I9e,O_r),e(xr,V_r),e(xr,tn),e(tn,X_r),e(tn,q9e),e(q9e,z_r),e(tn,W_r),e(tn,N9e),e(N9e,Q_r),e(tn,H_r),e(tn,j9e),e(j9e,U_r),e(tn,J_r),e(xr,Y_r),e(xr,ie),e(ie,yM),e(yM,D9e),e(D9e,K_r),e(yM,Z_r),e(yM,bQ),e(bQ,eur),e(yM,our),e(ie,rur),e(ie,LM),e(LM,G9e),e(G9e,tur),e(LM,aur),e(LM,vQ),e(vQ,nur),e(LM,sur),e(ie,lur),e(ie,xM),e(xM,O9e),e(O9e,iur),e(xM,dur),e(xM,FQ),e(FQ,cur),e(xM,fur),e(ie,mur),e(ie,$M),e($M,V9e),e(V9e,gur),e($M,hur),e($M,TQ),e(TQ,pur),e($M,_ur),e(ie,uur),e(ie,kM),e(kM,X9e),e(X9e,bur),e(kM,vur),e(kM,MQ),e(MQ,Fur),e(kM,Tur),e(ie,Mur),e(ie,SM),e(SM,z9e),e(z9e,Eur),e(SM,Cur),e(SM,EQ),e(EQ,wur),e(SM,Aur),e(ie,yur),e(ie,RM),e(RM,W9e),e(W9e,Lur),e(RM,xur),e(RM,CQ),e(CQ,$ur),e(RM,kur),e(ie,Sur),e(ie,PM),e(PM,Q9e),e(Q9e,Rur),e(PM,Pur),e(PM,wQ),e(wQ,Bur),e(PM,Iur),e(ie,qur),e(ie,BM),e(BM,H9e),e(H9e,Nur),e(BM,jur),e(BM,AQ),e(AQ,Dur),e(BM,Gur),e(ie,Our),e(ie,IM),e(IM,U9e),e(U9e,Vur),e(IM,Xur),e(IM,yQ),e(yQ,zur),e(IM,Wur),e(ie,Qur),e(ie,qM),e(qM,J9e),e(J9e,Hur),e(qM,Uur),e(qM,LQ),e(LQ,Jur),e(qM,Yur),e(ie,Kur),e(ie,NM),e(NM,Y9e),e(Y9e,Zur),e(NM,e2r),e(NM,xQ),e(xQ,o2r),e(NM,r2r),e(ie,t2r),e(ie,jM),e(jM,K9e),e(K9e,a2r),e(jM,n2r),e(jM,$Q),e($Q,s2r),e(jM,l2r),e(ie,i2r),e(ie,DM),e(DM,Z9e),e(Z9e,d2r),e(DM,c2r),e(DM,kQ),e(kQ,f2r),e(DM,m2r),e(ie,g2r),e(ie,GM),e(GM,ebe),e(ebe,h2r),e(GM,p2r),e(GM,SQ),e(SQ,_2r),e(GM,u2r),e(ie,b2r),e(ie,OM),e(OM,obe),e(obe,v2r),e(OM,F2r),e(OM,RQ),e(RQ,T2r),e(OM,M2r),e(ie,E2r),e(ie,VM),e(VM,rbe),e(rbe,C2r),e(VM,w2r),e(VM,PQ),e(PQ,A2r),e(VM,y2r),e(ie,L2r),e(ie,XM),e(XM,tbe),e(tbe,x2r),e(XM,$2r),e(XM,BQ),e(BQ,k2r),e(XM,S2r),e(ie,R2r),e(ie,zM),e(zM,abe),e(abe,P2r),e(zM,B2r),e(zM,IQ),e(IQ,I2r),e(zM,q2r),e(ie,N2r),e(ie,WM),e(WM,nbe),e(nbe,j2r),e(WM,D2r),e(WM,qQ),e(qQ,G2r),e(WM,O2r),e(xr,V2r),M(QM,xr,null),b(f,rNe,u),b(f,oc,u),e(oc,HM),e(HM,sbe),M(uL,sbe,null),e(oc,X2r),e(oc,lbe),e(lbe,z2r),b(f,tNe,u),b(f,rr,u),M(bL,rr,null),e(rr,W2r),e(rr,rc),e(rc,Q2r),e(rc,NQ),e(NQ,H2r),e(rc,U2r),e(rc,jQ),e(jQ,J2r),e(rc,Y2r),e(rr,K2r),e(rr,vL),e(vL,Z2r),e(vL,ibe),e(ibe,e1r),e(vL,o1r),e(rr,r1r),e(rr,St),M(FL,St,null),e(St,t1r),e(St,dbe),e(dbe,a1r),e(St,n1r),e(St,tc),e(tc,s1r),e(tc,cbe),e(cbe,l1r),e(tc,i1r),e(tc,DQ),e(DQ,d1r),e(tc,c1r),e(St,f1r),M(UM,St,null),e(rr,m1r),e(rr,$r),M(TL,$r,null),e($r,g1r),e($r,fbe),e(fbe,h1r),e($r,p1r),e($r,an),e(an,_1r),e(an,mbe),e(mbe,u1r),e(an,b1r),e(an,gbe),e(gbe,v1r),e(an,F1r),e(an,hbe),e(hbe,T1r),e(an,M1r),e($r,E1r),e($r,ye),e(ye,JM),e(JM,pbe),e(pbe,C1r),e(JM,w1r),e(JM,GQ),e(GQ,A1r),e(JM,y1r),e(ye,L1r),e(ye,YM),e(YM,_be),e(_be,x1r),e(YM,$1r),e(YM,OQ),e(OQ,k1r),e(YM,S1r),e(ye,R1r),e(ye,KM),e(KM,ube),e(ube,P1r),e(KM,B1r),e(KM,VQ),e(VQ,I1r),e(KM,q1r),e(ye,N1r),e(ye,ZM),e(ZM,bbe),e(bbe,j1r),e(ZM,D1r),e(ZM,XQ),e(XQ,G1r),e(ZM,O1r),e(ye,V1r),e(ye,e4),e(e4,vbe),e(vbe,X1r),e(e4,z1r),e(e4,zQ),e(zQ,W1r),e(e4,Q1r),e(ye,H1r),e(ye,o4),e(o4,Fbe),e(Fbe,U1r),e(o4,J1r),e(o4,WQ),e(WQ,Y1r),e(o4,K1r),e(ye,Z1r),e(ye,r4),e(r4,Tbe),e(Tbe,e9r),e(r4,o9r),e(r4,QQ),e(QQ,r9r),e(r4,t9r),e(ye,a9r),e(ye,t4),e(t4,Mbe),e(Mbe,n9r),e(t4,s9r),e(t4,HQ),e(HQ,l9r),e(t4,i9r),e(ye,d9r),e(ye,a4),e(a4,Ebe),e(Ebe,c9r),e(a4,f9r),e(a4,UQ),e(UQ,m9r),e(a4,g9r),e(ye,h9r),e(ye,n4),e(n4,Cbe),e(Cbe,p9r),e(n4,_9r),e(n4,JQ),e(JQ,u9r),e(n4,b9r),e($r,v9r),M(s4,$r,null),b(f,aNe,u),b(f,ac,u),e(ac,l4),e(l4,wbe),M(ML,wbe,null),e(ac,F9r),e(ac,Abe),e(Abe,T9r),b(f,nNe,u),b(f,tr,u),M(EL,tr,null),e(tr,M9r),e(tr,nc),e(nc,E9r),e(nc,YQ),e(YQ,C9r),e(nc,w9r),e(nc,KQ),e(KQ,A9r),e(nc,y9r),e(tr,L9r),e(tr,CL),e(CL,x9r),e(CL,ybe),e(ybe,$9r),e(CL,k9r),e(tr,S9r),e(tr,Rt),M(wL,Rt,null),e(Rt,R9r),e(Rt,Lbe),e(Lbe,P9r),e(Rt,B9r),e(Rt,sc),e(sc,I9r),e(sc,xbe),e(xbe,q9r),e(sc,N9r),e(sc,ZQ),e(ZQ,j9r),e(sc,D9r),e(Rt,G9r),M(i4,Rt,null),e(tr,O9r),e(tr,kr),M(AL,kr,null),e(kr,V9r),e(kr,$be),e($be,X9r),e(kr,z9r),e(kr,nn),e(nn,W9r),e(nn,kbe),e(kbe,Q9r),e(nn,H9r),e(nn,Sbe),e(Sbe,U9r),e(nn,J9r),e(nn,Rbe),e(Rbe,Y9r),e(nn,K9r),e(kr,Z9r),e(kr,ee),e(ee,d4),e(d4,Pbe),e(Pbe,ebr),e(d4,obr),e(d4,eH),e(eH,rbr),e(d4,tbr),e(ee,abr),e(ee,c4),e(c4,Bbe),e(Bbe,nbr),e(c4,sbr),e(c4,oH),e(oH,lbr),e(c4,ibr),e(ee,dbr),e(ee,f4),e(f4,Ibe),e(Ibe,cbr),e(f4,fbr),e(f4,rH),e(rH,mbr),e(f4,gbr),e(ee,hbr),e(ee,m4),e(m4,qbe),e(qbe,pbr),e(m4,_br),e(m4,tH),e(tH,ubr),e(m4,bbr),e(ee,vbr),e(ee,g4),e(g4,Nbe),e(Nbe,Fbr),e(g4,Tbr),e(g4,aH),e(aH,Mbr),e(g4,Ebr),e(ee,Cbr),e(ee,h4),e(h4,jbe),e(jbe,wbr),e(h4,Abr),e(h4,nH),e(nH,ybr),e(h4,Lbr),e(ee,xbr),e(ee,p4),e(p4,Dbe),e(Dbe,$br),e(p4,kbr),e(p4,sH),e(sH,Sbr),e(p4,Rbr),e(ee,Pbr),e(ee,_4),e(_4,Gbe),e(Gbe,Bbr),e(_4,Ibr),e(_4,lH),e(lH,qbr),e(_4,Nbr),e(ee,jbr),e(ee,u4),e(u4,Obe),e(Obe,Dbr),e(u4,Gbr),e(u4,iH),e(iH,Obr),e(u4,Vbr),e(ee,Xbr),e(ee,b4),e(b4,Vbe),e(Vbe,zbr),e(b4,Wbr),e(b4,dH),e(dH,Qbr),e(b4,Hbr),e(ee,Ubr),e(ee,v4),e(v4,Xbe),e(Xbe,Jbr),e(v4,Ybr),e(v4,cH),e(cH,Kbr),e(v4,Zbr),e(ee,evr),e(ee,F4),e(F4,zbe),e(zbe,ovr),e(F4,rvr),e(F4,fH),e(fH,tvr),e(F4,avr),e(ee,nvr),e(ee,T4),e(T4,Wbe),e(Wbe,svr),e(T4,lvr),e(T4,mH),e(mH,ivr),e(T4,dvr),e(ee,cvr),e(ee,M4),e(M4,Qbe),e(Qbe,fvr),e(M4,mvr),e(M4,gH),e(gH,gvr),e(M4,hvr),e(ee,pvr),e(ee,E4),e(E4,Hbe),e(Hbe,_vr),e(E4,uvr),e(E4,hH),e(hH,bvr),e(E4,vvr),e(ee,Fvr),e(ee,C4),e(C4,Ube),e(Ube,Tvr),e(C4,Mvr),e(C4,pH),e(pH,Evr),e(C4,Cvr),e(ee,wvr),e(ee,w4),e(w4,Jbe),e(Jbe,Avr),e(w4,yvr),e(w4,_H),e(_H,Lvr),e(w4,xvr),e(ee,$vr),e(ee,A4),e(A4,Ybe),e(Ybe,kvr),e(A4,Svr),e(A4,uH),e(uH,Rvr),e(A4,Pvr),e(ee,Bvr),e(ee,y4),e(y4,Kbe),e(Kbe,Ivr),e(y4,qvr),e(y4,bH),e(bH,Nvr),e(y4,jvr),e(ee,Dvr),e(ee,L4),e(L4,Zbe),e(Zbe,Gvr),e(L4,Ovr),e(L4,vH),e(vH,Vvr),e(L4,Xvr),e(ee,zvr),e(ee,x4),e(x4,eve),e(eve,Wvr),e(x4,Qvr),e(x4,FH),e(FH,Hvr),e(x4,Uvr),e(ee,Jvr),e(ee,$4),e($4,ove),e(ove,Yvr),e($4,Kvr),e($4,TH),e(TH,Zvr),e($4,eFr),e(ee,oFr),e(ee,k4),e(k4,rve),e(rve,rFr),e(k4,tFr),e(k4,MH),e(MH,aFr),e(k4,nFr),e(ee,sFr),e(ee,S4),e(S4,tve),e(tve,lFr),e(S4,iFr),e(S4,EH),e(EH,dFr),e(S4,cFr),e(ee,fFr),e(ee,R4),e(R4,ave),e(ave,mFr),e(R4,gFr),e(R4,CH),e(CH,hFr),e(R4,pFr),e(ee,_Fr),e(ee,P4),e(P4,nve),e(nve,uFr),e(P4,bFr),e(P4,wH),e(wH,vFr),e(P4,FFr),e(kr,TFr),M(B4,kr,null),b(f,sNe,u),b(f,lc,u),e(lc,I4),e(I4,sve),M(yL,sve,null),e(lc,MFr),e(lc,lve),e(lve,EFr),b(f,lNe,u),b(f,ar,u),M(LL,ar,null),e(ar,CFr),e(ar,ic),e(ic,wFr),e(ic,AH),e(AH,AFr),e(ic,yFr),e(ic,yH),e(yH,LFr),e(ic,xFr),e(ar,$Fr),e(ar,xL),e(xL,kFr),e(xL,ive),e(ive,SFr),e(xL,RFr),e(ar,PFr),e(ar,Pt),M($L,Pt,null),e(Pt,BFr),e(Pt,dve),e(dve,IFr),e(Pt,qFr),e(Pt,dc),e(dc,NFr),e(dc,cve),e(cve,jFr),e(dc,DFr),e(dc,LH),e(LH,GFr),e(dc,OFr),e(Pt,VFr),M(q4,Pt,null),e(ar,XFr),e(ar,Sr),M(kL,Sr,null),e(Sr,zFr),e(Sr,fve),e(fve,WFr),e(Sr,QFr),e(Sr,sn),e(sn,HFr),e(sn,mve),e(mve,UFr),e(sn,JFr),e(sn,gve),e(gve,YFr),e(sn,KFr),e(sn,hve),e(hve,ZFr),e(sn,eTr),e(Sr,oTr),e(Sr,he),e(he,N4),e(N4,pve),e(pve,rTr),e(N4,tTr),e(N4,xH),e(xH,aTr),e(N4,nTr),e(he,sTr),e(he,j4),e(j4,_ve),e(_ve,lTr),e(j4,iTr),e(j4,$H),e($H,dTr),e(j4,cTr),e(he,fTr),e(he,D4),e(D4,uve),e(uve,mTr),e(D4,gTr),e(D4,kH),e(kH,hTr),e(D4,pTr),e(he,_Tr),e(he,G4),e(G4,bve),e(bve,uTr),e(G4,bTr),e(G4,SH),e(SH,vTr),e(G4,FTr),e(he,TTr),e(he,O4),e(O4,vve),e(vve,MTr),e(O4,ETr),e(O4,RH),e(RH,CTr),e(O4,wTr),e(he,ATr),e(he,V4),e(V4,Fve),e(Fve,yTr),e(V4,LTr),e(V4,PH),e(PH,xTr),e(V4,$Tr),e(he,kTr),e(he,X4),e(X4,Tve),e(Tve,STr),e(X4,RTr),e(X4,BH),e(BH,PTr),e(X4,BTr),e(he,ITr),e(he,z4),e(z4,Mve),e(Mve,qTr),e(z4,NTr),e(z4,IH),e(IH,jTr),e(z4,DTr),e(he,GTr),e(he,W4),e(W4,Eve),e(Eve,OTr),e(W4,VTr),e(W4,qH),e(qH,XTr),e(W4,zTr),e(he,WTr),e(he,Q4),e(Q4,Cve),e(Cve,QTr),e(Q4,HTr),e(Q4,NH),e(NH,UTr),e(Q4,JTr),e(he,YTr),e(he,H4),e(H4,wve),e(wve,KTr),e(H4,ZTr),e(H4,jH),e(jH,e7r),e(H4,o7r),e(he,r7r),e(he,U4),e(U4,Ave),e(Ave,t7r),e(U4,a7r),e(U4,DH),e(DH,n7r),e(U4,s7r),e(he,l7r),e(he,J4),e(J4,yve),e(yve,i7r),e(J4,d7r),e(J4,GH),e(GH,c7r),e(J4,f7r),e(he,m7r),e(he,Y4),e(Y4,Lve),e(Lve,g7r),e(Y4,h7r),e(Y4,OH),e(OH,p7r),e(Y4,_7r),e(he,u7r),e(he,K4),e(K4,xve),e(xve,b7r),e(K4,v7r),e(K4,VH),e(VH,F7r),e(K4,T7r),e(he,M7r),e(he,Z4),e(Z4,$ve),e($ve,E7r),e(Z4,C7r),e(Z4,XH),e(XH,w7r),e(Z4,A7r),e(he,y7r),e(he,eE),e(eE,kve),e(kve,L7r),e(eE,x7r),e(eE,zH),e(zH,$7r),e(eE,k7r),e(Sr,S7r),M(oE,Sr,null),b(f,iNe,u),b(f,cc,u),e(cc,rE),e(rE,Sve),M(SL,Sve,null),e(cc,R7r),e(cc,Rve),e(Rve,P7r),b(f,dNe,u),b(f,nr,u),M(RL,nr,null),e(nr,B7r),e(nr,fc),e(fc,I7r),e(fc,WH),e(WH,q7r),e(fc,N7r),e(fc,QH),e(QH,j7r),e(fc,D7r),e(nr,G7r),e(nr,PL),e(PL,O7r),e(PL,Pve),e(Pve,V7r),e(PL,X7r),e(nr,z7r),e(nr,Bt),M(BL,Bt,null),e(Bt,W7r),e(Bt,Bve),e(Bve,Q7r),e(Bt,H7r),e(Bt,mc),e(mc,U7r),e(mc,Ive),e(Ive,J7r),e(mc,Y7r),e(mc,HH),e(HH,K7r),e(mc,Z7r),e(Bt,eMr),M(tE,Bt,null),e(nr,oMr),e(nr,Rr),M(IL,Rr,null),e(Rr,rMr),e(Rr,qve),e(qve,tMr),e(Rr,aMr),e(Rr,ln),e(ln,nMr),e(ln,Nve),e(Nve,sMr),e(ln,lMr),e(ln,jve),e(jve,iMr),e(ln,dMr),e(ln,Dve),e(Dve,cMr),e(ln,fMr),e(Rr,mMr),e(Rr,qL),e(qL,aE),e(aE,Gve),e(Gve,gMr),e(aE,hMr),e(aE,UH),e(UH,pMr),e(aE,_Mr),e(qL,uMr),e(qL,nE),e(nE,Ove),e(Ove,bMr),e(nE,vMr),e(nE,JH),e(JH,FMr),e(nE,TMr),e(Rr,MMr),M(sE,Rr,null),b(f,cNe,u),b(f,gc,u),e(gc,lE),e(lE,Vve),M(NL,Vve,null),e(gc,EMr),e(gc,Xve),e(Xve,CMr),b(f,fNe,u),b(f,sr,u),M(jL,sr,null),e(sr,wMr),e(sr,hc),e(hc,AMr),e(hc,YH),e(YH,yMr),e(hc,LMr),e(hc,KH),e(KH,xMr),e(hc,$Mr),e(sr,kMr),e(sr,DL),e(DL,SMr),e(DL,zve),e(zve,RMr),e(DL,PMr),e(sr,BMr),e(sr,It),M(GL,It,null),e(It,IMr),e(It,Wve),e(Wve,qMr),e(It,NMr),e(It,pc),e(pc,jMr),e(pc,Qve),e(Qve,DMr),e(pc,GMr),e(pc,ZH),e(ZH,OMr),e(pc,VMr),e(It,XMr),M(iE,It,null),e(sr,zMr),e(sr,Pr),M(OL,Pr,null),e(Pr,WMr),e(Pr,Hve),e(Hve,QMr),e(Pr,HMr),e(Pr,dn),e(dn,UMr),e(dn,Uve),e(Uve,JMr),e(dn,YMr),e(dn,Jve),e(Jve,KMr),e(dn,ZMr),e(dn,Yve),e(Yve,e4r),e(dn,o4r),e(Pr,r4r),e(Pr,Kve),e(Kve,dE),e(dE,Zve),e(Zve,t4r),e(dE,a4r),e(dE,eU),e(eU,n4r),e(dE,s4r),e(Pr,l4r),M(cE,Pr,null),b(f,mNe,u),b(f,_c,u),e(_c,fE),e(fE,eFe),M(VL,eFe,null),e(_c,i4r),e(_c,oFe),e(oFe,d4r),b(f,gNe,u),b(f,lr,u),M(XL,lr,null),e(lr,c4r),e(lr,uc),e(uc,f4r),e(uc,oU),e(oU,m4r),e(uc,g4r),e(uc,rU),e(rU,h4r),e(uc,p4r),e(lr,_4r),e(lr,zL),e(zL,u4r),e(zL,rFe),e(rFe,b4r),e(zL,v4r),e(lr,F4r),e(lr,qt),M(WL,qt,null),e(qt,T4r),e(qt,tFe),e(tFe,M4r),e(qt,E4r),e(qt,bc),e(bc,C4r),e(bc,aFe),e(aFe,w4r),e(bc,A4r),e(bc,tU),e(tU,y4r),e(bc,L4r),e(qt,x4r),M(mE,qt,null),e(lr,$4r),e(lr,Br),M(QL,Br,null),e(Br,k4r),e(Br,nFe),e(nFe,S4r),e(Br,R4r),e(Br,cn),e(cn,P4r),e(cn,sFe),e(sFe,B4r),e(cn,I4r),e(cn,lFe),e(lFe,q4r),e(cn,N4r),e(cn,iFe),e(iFe,j4r),e(cn,D4r),e(Br,G4r),e(Br,de),e(de,gE),e(gE,dFe),e(dFe,O4r),e(gE,V4r),e(gE,aU),e(aU,X4r),e(gE,z4r),e(de,W4r),e(de,hE),e(hE,cFe),e(cFe,Q4r),e(hE,H4r),e(hE,nU),e(nU,U4r),e(hE,J4r),e(de,Y4r),e(de,pE),e(pE,fFe),e(fFe,K4r),e(pE,Z4r),e(pE,sU),e(sU,eEr),e(pE,oEr),e(de,rEr),e(de,_E),e(_E,mFe),e(mFe,tEr),e(_E,aEr),e(_E,lU),e(lU,nEr),e(_E,sEr),e(de,lEr),e(de,uE),e(uE,gFe),e(gFe,iEr),e(uE,dEr),e(uE,iU),e(iU,cEr),e(uE,fEr),e(de,mEr),e(de,bE),e(bE,hFe),e(hFe,gEr),e(bE,hEr),e(bE,dU),e(dU,pEr),e(bE,_Er),e(de,uEr),e(de,vE),e(vE,pFe),e(pFe,bEr),e(vE,vEr),e(vE,cU),e(cU,FEr),e(vE,TEr),e(de,MEr),e(de,FE),e(FE,_Fe),e(_Fe,EEr),e(FE,CEr),e(FE,fU),e(fU,wEr),e(FE,AEr),e(de,yEr),e(de,TE),e(TE,uFe),e(uFe,LEr),e(TE,xEr),e(TE,mU),e(mU,$Er),e(TE,kEr),e(de,SEr),e(de,ME),e(ME,bFe),e(bFe,REr),e(ME,PEr),e(ME,gU),e(gU,BEr),e(ME,IEr),e(de,qEr),e(de,EE),e(EE,vFe),e(vFe,NEr),e(EE,jEr),e(EE,hU),e(hU,DEr),e(EE,GEr),e(de,OEr),e(de,CE),e(CE,FFe),e(FFe,VEr),e(CE,XEr),e(CE,pU),e(pU,zEr),e(CE,WEr),e(de,QEr),e(de,wE),e(wE,TFe),e(TFe,HEr),e(wE,UEr),e(wE,_U),e(_U,JEr),e(wE,YEr),e(de,KEr),e(de,AE),e(AE,MFe),e(MFe,ZEr),e(AE,eCr),e(AE,uU),e(uU,oCr),e(AE,rCr),e(de,tCr),e(de,yE),e(yE,EFe),e(EFe,aCr),e(yE,nCr),e(yE,bU),e(bU,sCr),e(yE,lCr),e(de,iCr),e(de,LE),e(LE,CFe),e(CFe,dCr),e(LE,cCr),e(LE,vU),e(vU,fCr),e(LE,mCr),e(de,gCr),e(de,xE),e(xE,wFe),e(wFe,hCr),e(xE,pCr),e(xE,FU),e(FU,_Cr),e(xE,uCr),e(de,bCr),e(de,$E),e($E,AFe),e(AFe,vCr),e($E,FCr),e($E,TU),e(TU,TCr),e($E,MCr),e(de,ECr),e(de,kE),e(kE,yFe),e(yFe,CCr),e(kE,wCr),e(kE,MU),e(MU,ACr),e(kE,yCr),e(de,LCr),e(de,SE),e(SE,LFe),e(LFe,xCr),e(SE,$Cr),e(SE,EU),e(EU,kCr),e(SE,SCr),e(Br,RCr),M(RE,Br,null),b(f,hNe,u),b(f,vc,u),e(vc,PE),e(PE,xFe),M(HL,xFe,null),e(vc,PCr),e(vc,$Fe),e($Fe,BCr),b(f,pNe,u),b(f,ir,u),M(UL,ir,null),e(ir,ICr),e(ir,Fc),e(Fc,qCr),e(Fc,CU),e(CU,NCr),e(Fc,jCr),e(Fc,wU),e(wU,DCr),e(Fc,GCr),e(ir,OCr),e(ir,JL),e(JL,VCr),e(JL,kFe),e(kFe,XCr),e(JL,zCr),e(ir,WCr),e(ir,Nt),M(YL,Nt,null),e(Nt,QCr),e(Nt,SFe),e(SFe,HCr),e(Nt,UCr),e(Nt,Tc),e(Tc,JCr),e(Tc,RFe),e(RFe,YCr),e(Tc,KCr),e(Tc,AU),e(AU,ZCr),e(Tc,e5r),e(Nt,o5r),M(BE,Nt,null),e(ir,r5r),e(ir,Ir),M(KL,Ir,null),e(Ir,t5r),e(Ir,PFe),e(PFe,a5r),e(Ir,n5r),e(Ir,fn),e(fn,s5r),e(fn,BFe),e(BFe,l5r),e(fn,i5r),e(fn,IFe),e(IFe,d5r),e(fn,c5r),e(fn,qFe),e(qFe,f5r),e(fn,m5r),e(Ir,g5r),e(Ir,ce),e(ce,IE),e(IE,NFe),e(NFe,h5r),e(IE,p5r),e(IE,yU),e(yU,_5r),e(IE,u5r),e(ce,b5r),e(ce,qE),e(qE,jFe),e(jFe,v5r),e(qE,F5r),e(qE,LU),e(LU,T5r),e(qE,M5r),e(ce,E5r),e(ce,NE),e(NE,DFe),e(DFe,C5r),e(NE,w5r),e(NE,xU),e(xU,A5r),e(NE,y5r),e(ce,L5r),e(ce,jE),e(jE,GFe),e(GFe,x5r),e(jE,$5r),e(jE,$U),e($U,k5r),e(jE,S5r),e(ce,R5r),e(ce,DE),e(DE,OFe),e(OFe,P5r),e(DE,B5r),e(DE,kU),e(kU,I5r),e(DE,q5r),e(ce,N5r),e(ce,GE),e(GE,VFe),e(VFe,j5r),e(GE,D5r),e(GE,SU),e(SU,G5r),e(GE,O5r),e(ce,V5r),e(ce,OE),e(OE,XFe),e(XFe,X5r),e(OE,z5r),e(OE,RU),e(RU,W5r),e(OE,Q5r),e(ce,H5r),e(ce,VE),e(VE,zFe),e(zFe,U5r),e(VE,J5r),e(VE,PU),e(PU,Y5r),e(VE,K5r),e(ce,Z5r),e(ce,XE),e(XE,WFe),e(WFe,e3r),e(XE,o3r),e(XE,BU),e(BU,r3r),e(XE,t3r),e(ce,a3r),e(ce,zE),e(zE,QFe),e(QFe,n3r),e(zE,s3r),e(zE,IU),e(IU,l3r),e(zE,i3r),e(ce,d3r),e(ce,WE),e(WE,HFe),e(HFe,c3r),e(WE,f3r),e(WE,qU),e(qU,m3r),e(WE,g3r),e(ce,h3r),e(ce,QE),e(QE,UFe),e(UFe,p3r),e(QE,_3r),e(QE,NU),e(NU,u3r),e(QE,b3r),e(ce,v3r),e(ce,HE),e(HE,JFe),e(JFe,F3r),e(HE,T3r),e(HE,jU),e(jU,M3r),e(HE,E3r),e(ce,C3r),e(ce,UE),e(UE,YFe),e(YFe,w3r),e(UE,A3r),e(UE,DU),e(DU,y3r),e(UE,L3r),e(ce,x3r),e(ce,JE),e(JE,KFe),e(KFe,$3r),e(JE,k3r),e(JE,GU),e(GU,S3r),e(JE,R3r),e(ce,P3r),e(ce,YE),e(YE,ZFe),e(ZFe,B3r),e(YE,I3r),e(YE,OU),e(OU,q3r),e(YE,N3r),e(ce,j3r),e(ce,KE),e(KE,eTe),e(eTe,D3r),e(KE,G3r),e(KE,VU),e(VU,O3r),e(KE,V3r),e(ce,X3r),e(ce,ZE),e(ZE,oTe),e(oTe,z3r),e(ZE,W3r),e(ZE,XU),e(XU,Q3r),e(ZE,H3r),e(ce,U3r),e(ce,eC),e(eC,rTe),e(rTe,J3r),e(eC,Y3r),e(eC,zU),e(zU,K3r),e(eC,Z3r),e(ce,ewr),e(ce,oC),e(oC,tTe),e(tTe,owr),e(oC,rwr),e(oC,WU),e(WU,twr),e(oC,awr),e(Ir,nwr),M(rC,Ir,null),b(f,_Ne,u),b(f,Mc,u),e(Mc,tC),e(tC,aTe),M(ZL,aTe,null),e(Mc,swr),e(Mc,nTe),e(nTe,lwr),b(f,uNe,u),b(f,dr,u),M(e8,dr,null),e(dr,iwr),e(dr,Ec),e(Ec,dwr),e(Ec,QU),e(QU,cwr),e(Ec,fwr),e(Ec,HU),e(HU,mwr),e(Ec,gwr),e(dr,hwr),e(dr,o8),e(o8,pwr),e(o8,sTe),e(sTe,_wr),e(o8,uwr),e(dr,bwr),e(dr,jt),M(r8,jt,null),e(jt,vwr),e(jt,lTe),e(lTe,Fwr),e(jt,Twr),e(jt,Cc),e(Cc,Mwr),e(Cc,iTe),e(iTe,Ewr),e(Cc,Cwr),e(Cc,UU),e(UU,wwr),e(Cc,Awr),e(jt,ywr),M(aC,jt,null),e(dr,Lwr),e(dr,qr),M(t8,qr,null),e(qr,xwr),e(qr,dTe),e(dTe,$wr),e(qr,kwr),e(qr,mn),e(mn,Swr),e(mn,cTe),e(cTe,Rwr),e(mn,Pwr),e(mn,fTe),e(fTe,Bwr),e(mn,Iwr),e(mn,mTe),e(mTe,qwr),e(mn,Nwr),e(qr,jwr),e(qr,gTe),e(gTe,nC),e(nC,hTe),e(hTe,Dwr),e(nC,Gwr),e(nC,JU),e(JU,Owr),e(nC,Vwr),e(qr,Xwr),M(sC,qr,null),b(f,bNe,u),b(f,wc,u),e(wc,lC),e(lC,pTe),M(a8,pTe,null),e(wc,zwr),e(wc,_Te),e(_Te,Wwr),b(f,vNe,u),b(f,cr,u),M(n8,cr,null),e(cr,Qwr),e(cr,Ac),e(Ac,Hwr),e(Ac,YU),e(YU,Uwr),e(Ac,Jwr),e(Ac,KU),e(KU,Ywr),e(Ac,Kwr),e(cr,Zwr),e(cr,s8),e(s8,e0r),e(s8,uTe),e(uTe,o0r),e(s8,r0r),e(cr,t0r),e(cr,Dt),M(l8,Dt,null),e(Dt,a0r),e(Dt,bTe),e(bTe,n0r),e(Dt,s0r),e(Dt,yc),e(yc,l0r),e(yc,vTe),e(vTe,i0r),e(yc,d0r),e(yc,ZU),e(ZU,c0r),e(yc,f0r),e(Dt,m0r),M(iC,Dt,null),e(cr,g0r),e(cr,Nr),M(i8,Nr,null),e(Nr,h0r),e(Nr,FTe),e(FTe,p0r),e(Nr,_0r),e(Nr,gn),e(gn,u0r),e(gn,TTe),e(TTe,b0r),e(gn,v0r),e(gn,MTe),e(MTe,F0r),e(gn,T0r),e(gn,ETe),e(ETe,M0r),e(gn,E0r),e(Nr,C0r),e(Nr,CTe),e(CTe,dC),e(dC,wTe),e(wTe,w0r),e(dC,A0r),e(dC,eJ),e(eJ,y0r),e(dC,L0r),e(Nr,x0r),M(cC,Nr,null),b(f,FNe,u),b(f,Lc,u),e(Lc,fC),e(fC,ATe),M(d8,ATe,null),e(Lc,$0r),e(Lc,yTe),e(yTe,k0r),b(f,TNe,u),b(f,fr,u),M(c8,fr,null),e(fr,S0r),e(fr,xc),e(xc,R0r),e(xc,oJ),e(oJ,P0r),e(xc,B0r),e(xc,rJ),e(rJ,I0r),e(xc,q0r),e(fr,N0r),e(fr,f8),e(f8,j0r),e(f8,LTe),e(LTe,D0r),e(f8,G0r),e(fr,O0r),e(fr,Gt),M(m8,Gt,null),e(Gt,V0r),e(Gt,xTe),e(xTe,X0r),e(Gt,z0r),e(Gt,$c),e($c,W0r),e($c,$Te),e($Te,Q0r),e($c,H0r),e($c,tJ),e(tJ,U0r),e($c,J0r),e(Gt,Y0r),M(mC,Gt,null),e(fr,K0r),e(fr,jr),M(g8,jr,null),e(jr,Z0r),e(jr,kTe),e(kTe,eAr),e(jr,oAr),e(jr,hn),e(hn,rAr),e(hn,STe),e(STe,tAr),e(hn,aAr),e(hn,RTe),e(RTe,nAr),e(hn,sAr),e(hn,PTe),e(PTe,lAr),e(hn,iAr),e(jr,dAr),e(jr,te),e(te,gC),e(gC,BTe),e(BTe,cAr),e(gC,fAr),e(gC,aJ),e(aJ,mAr),e(gC,gAr),e(te,hAr),e(te,hC),e(hC,ITe),e(ITe,pAr),e(hC,_Ar),e(hC,nJ),e(nJ,uAr),e(hC,bAr),e(te,vAr),e(te,pC),e(pC,qTe),e(qTe,FAr),e(pC,TAr),e(pC,sJ),e(sJ,MAr),e(pC,EAr),e(te,CAr),e(te,_C),e(_C,NTe),e(NTe,wAr),e(_C,AAr),e(_C,lJ),e(lJ,yAr),e(_C,LAr),e(te,xAr),e(te,uC),e(uC,jTe),e(jTe,$Ar),e(uC,kAr),e(uC,iJ),e(iJ,SAr),e(uC,RAr),e(te,PAr),e(te,bC),e(bC,DTe),e(DTe,BAr),e(bC,IAr),e(bC,dJ),e(dJ,qAr),e(bC,NAr),e(te,jAr),e(te,vC),e(vC,GTe),e(GTe,DAr),e(vC,GAr),e(vC,cJ),e(cJ,OAr),e(vC,VAr),e(te,XAr),e(te,FC),e(FC,OTe),e(OTe,zAr),e(FC,WAr),e(FC,fJ),e(fJ,QAr),e(FC,HAr),e(te,UAr),e(te,TC),e(TC,VTe),e(VTe,JAr),e(TC,YAr),e(TC,mJ),e(mJ,KAr),e(TC,ZAr),e(te,e6r),e(te,MC),e(MC,XTe),e(XTe,o6r),e(MC,r6r),e(MC,gJ),e(gJ,t6r),e(MC,a6r),e(te,n6r),e(te,EC),e(EC,zTe),e(zTe,s6r),e(EC,l6r),e(EC,hJ),e(hJ,i6r),e(EC,d6r),e(te,c6r),e(te,CC),e(CC,WTe),e(WTe,f6r),e(CC,m6r),e(CC,pJ),e(pJ,g6r),e(CC,h6r),e(te,p6r),e(te,wC),e(wC,QTe),e(QTe,_6r),e(wC,u6r),e(wC,_J),e(_J,b6r),e(wC,v6r),e(te,F6r),e(te,AC),e(AC,HTe),e(HTe,T6r),e(AC,M6r),e(AC,uJ),e(uJ,E6r),e(AC,C6r),e(te,w6r),e(te,yC),e(yC,UTe),e(UTe,A6r),e(yC,y6r),e(yC,bJ),e(bJ,L6r),e(yC,x6r),e(te,$6r),e(te,LC),e(LC,JTe),e(JTe,k6r),e(LC,S6r),e(LC,vJ),e(vJ,R6r),e(LC,P6r),e(te,B6r),e(te,xC),e(xC,YTe),e(YTe,I6r),e(xC,q6r),e(xC,FJ),e(FJ,N6r),e(xC,j6r),e(te,D6r),e(te,$C),e($C,KTe),e(KTe,G6r),e($C,O6r),e($C,TJ),e(TJ,V6r),e($C,X6r),e(te,z6r),e(te,kC),e(kC,ZTe),e(ZTe,W6r),e(kC,Q6r),e(kC,MJ),e(MJ,H6r),e(kC,U6r),e(te,J6r),e(te,SC),e(SC,e7e),e(e7e,Y6r),e(SC,K6r),e(SC,EJ),e(EJ,Z6r),e(SC,eyr),e(te,oyr),e(te,RC),e(RC,o7e),e(o7e,ryr),e(RC,tyr),e(RC,CJ),e(CJ,ayr),e(RC,nyr),e(te,syr),e(te,PC),e(PC,r7e),e(r7e,lyr),e(PC,iyr),e(PC,wJ),e(wJ,dyr),e(PC,cyr),e(te,fyr),e(te,BC),e(BC,t7e),e(t7e,myr),e(BC,gyr),e(BC,AJ),e(AJ,hyr),e(BC,pyr),e(te,_yr),e(te,IC),e(IC,a7e),e(a7e,uyr),e(IC,byr),e(IC,yJ),e(yJ,vyr),e(IC,Fyr),e(te,Tyr),e(te,qC),e(qC,n7e),e(n7e,Myr),e(qC,Eyr),e(qC,LJ),e(LJ,Cyr),e(qC,wyr),e(jr,Ayr),M(NC,jr,null),b(f,MNe,u),b(f,kc,u),e(kc,jC),e(jC,s7e),M(h8,s7e,null),e(kc,yyr),e(kc,l7e),e(l7e,Lyr),b(f,ENe,u),b(f,mr,u),M(p8,mr,null),e(mr,xyr),e(mr,Sc),e(Sc,$yr),e(Sc,xJ),e(xJ,kyr),e(Sc,Syr),e(Sc,$J),e($J,Ryr),e(Sc,Pyr),e(mr,Byr),e(mr,_8),e(_8,Iyr),e(_8,i7e),e(i7e,qyr),e(_8,Nyr),e(mr,jyr),e(mr,Ot),M(u8,Ot,null),e(Ot,Dyr),e(Ot,d7e),e(d7e,Gyr),e(Ot,Oyr),e(Ot,Rc),e(Rc,Vyr),e(Rc,c7e),e(c7e,Xyr),e(Rc,zyr),e(Rc,kJ),e(kJ,Wyr),e(Rc,Qyr),e(Ot,Hyr),M(DC,Ot,null),e(mr,Uyr),e(mr,Dr),M(b8,Dr,null),e(Dr,Jyr),e(Dr,f7e),e(f7e,Yyr),e(Dr,Kyr),e(Dr,pn),e(pn,Zyr),e(pn,m7e),e(m7e,eLr),e(pn,oLr),e(pn,g7e),e(g7e,rLr),e(pn,tLr),e(pn,h7e),e(h7e,aLr),e(pn,nLr),e(Dr,sLr),e(Dr,Re),e(Re,GC),e(GC,p7e),e(p7e,lLr),e(GC,iLr),e(GC,SJ),e(SJ,dLr),e(GC,cLr),e(Re,fLr),e(Re,OC),e(OC,_7e),e(_7e,mLr),e(OC,gLr),e(OC,RJ),e(RJ,hLr),e(OC,pLr),e(Re,_Lr),e(Re,VC),e(VC,u7e),e(u7e,uLr),e(VC,bLr),e(VC,PJ),e(PJ,vLr),e(VC,FLr),e(Re,TLr),e(Re,XC),e(XC,b7e),e(b7e,MLr),e(XC,ELr),e(XC,BJ),e(BJ,CLr),e(XC,wLr),e(Re,ALr),e(Re,zC),e(zC,v7e),e(v7e,yLr),e(zC,LLr),e(zC,IJ),e(IJ,xLr),e(zC,$Lr),e(Re,kLr),e(Re,WC),e(WC,F7e),e(F7e,SLr),e(WC,RLr),e(WC,qJ),e(qJ,PLr),e(WC,BLr),e(Re,ILr),e(Re,QC),e(QC,T7e),e(T7e,qLr),e(QC,NLr),e(QC,NJ),e(NJ,jLr),e(QC,DLr),e(Re,GLr),e(Re,HC),e(HC,M7e),e(M7e,OLr),e(HC,VLr),e(HC,jJ),e(jJ,XLr),e(HC,zLr),e(Re,WLr),e(Re,UC),e(UC,E7e),e(E7e,QLr),e(UC,HLr),e(UC,DJ),e(DJ,ULr),e(UC,JLr),e(Dr,YLr),M(JC,Dr,null),b(f,CNe,u),b(f,Pc,u),e(Pc,YC),e(YC,C7e),M(v8,C7e,null),e(Pc,KLr),e(Pc,w7e),e(w7e,ZLr),b(f,wNe,u),b(f,gr,u),M(F8,gr,null),e(gr,e8r),e(gr,Bc),e(Bc,o8r),e(Bc,GJ),e(GJ,r8r),e(Bc,t8r),e(Bc,OJ),e(OJ,a8r),e(Bc,n8r),e(gr,s8r),e(gr,T8),e(T8,l8r),e(T8,A7e),e(A7e,i8r),e(T8,d8r),e(gr,c8r),e(gr,Vt),M(M8,Vt,null),e(Vt,f8r),e(Vt,y7e),e(y7e,m8r),e(Vt,g8r),e(Vt,Ic),e(Ic,h8r),e(Ic,L7e),e(L7e,p8r),e(Ic,_8r),e(Ic,VJ),e(VJ,u8r),e(Ic,b8r),e(Vt,v8r),M(KC,Vt,null),e(gr,F8r),e(gr,Gr),M(E8,Gr,null),e(Gr,T8r),e(Gr,x7e),e(x7e,M8r),e(Gr,E8r),e(Gr,_n),e(_n,C8r),e(_n,$7e),e($7e,w8r),e(_n,A8r),e(_n,k7e),e(k7e,y8r),e(_n,L8r),e(_n,S7e),e(S7e,x8r),e(_n,$8r),e(Gr,k8r),e(Gr,Ee),e(Ee,ZC),e(ZC,R7e),e(R7e,S8r),e(ZC,R8r),e(ZC,XJ),e(XJ,P8r),e(ZC,B8r),e(Ee,I8r),e(Ee,e5),e(e5,P7e),e(P7e,q8r),e(e5,N8r),e(e5,zJ),e(zJ,j8r),e(e5,D8r),e(Ee,G8r),e(Ee,o5),e(o5,B7e),e(B7e,O8r),e(o5,V8r),e(o5,WJ),e(WJ,X8r),e(o5,z8r),e(Ee,W8r),e(Ee,r5),e(r5,I7e),e(I7e,Q8r),e(r5,H8r),e(r5,QJ),e(QJ,U8r),e(r5,J8r),e(Ee,Y8r),e(Ee,t5),e(t5,q7e),e(q7e,K8r),e(t5,Z8r),e(t5,HJ),e(HJ,exr),e(t5,oxr),e(Ee,rxr),e(Ee,a5),e(a5,N7e),e(N7e,txr),e(a5,axr),e(a5,UJ),e(UJ,nxr),e(a5,sxr),e(Ee,lxr),e(Ee,n5),e(n5,j7e),e(j7e,ixr),e(n5,dxr),e(n5,JJ),e(JJ,cxr),e(n5,fxr),e(Ee,mxr),e(Ee,s5),e(s5,D7e),e(D7e,gxr),e(s5,hxr),e(s5,YJ),e(YJ,pxr),e(s5,_xr),e(Ee,uxr),e(Ee,l5),e(l5,G7e),e(G7e,bxr),e(l5,vxr),e(l5,KJ),e(KJ,Fxr),e(l5,Txr),e(Ee,Mxr),e(Ee,i5),e(i5,O7e),e(O7e,Exr),e(i5,Cxr),e(i5,ZJ),e(ZJ,wxr),e(i5,Axr),e(Ee,yxr),e(Ee,d5),e(d5,V7e),e(V7e,Lxr),e(d5,xxr),e(d5,eY),e(eY,$xr),e(d5,kxr),e(Ee,Sxr),e(Ee,c5),e(c5,X7e),e(X7e,Rxr),e(c5,Pxr),e(c5,oY),e(oY,Bxr),e(c5,Ixr),e(Gr,qxr),M(f5,Gr,null),b(f,ANe,u),b(f,qc,u),e(qc,m5),e(m5,z7e),M(C8,z7e,null),e(qc,Nxr),e(qc,W7e),e(W7e,jxr),b(f,yNe,u),b(f,hr,u),M(w8,hr,null),e(hr,Dxr),e(hr,Nc),e(Nc,Gxr),e(Nc,rY),e(rY,Oxr),e(Nc,Vxr),e(Nc,tY),e(tY,Xxr),e(Nc,zxr),e(hr,Wxr),e(hr,A8),e(A8,Qxr),e(A8,Q7e),e(Q7e,Hxr),e(A8,Uxr),e(hr,Jxr),e(hr,Xt),M(y8,Xt,null),e(Xt,Yxr),e(Xt,H7e),e(H7e,Kxr),e(Xt,Zxr),e(Xt,jc),e(jc,e$r),e(jc,U7e),e(U7e,o$r),e(jc,r$r),e(jc,aY),e(aY,t$r),e(jc,a$r),e(Xt,n$r),M(g5,Xt,null),e(hr,s$r),e(hr,Or),M(L8,Or,null),e(Or,l$r),e(Or,J7e),e(J7e,i$r),e(Or,d$r),e(Or,un),e(un,c$r),e(un,Y7e),e(Y7e,f$r),e(un,m$r),e(un,K7e),e(K7e,g$r),e(un,h$r),e(un,Z7e),e(Z7e,p$r),e(un,_$r),e(Or,u$r),e(Or,Le),e(Le,h5),e(h5,eMe),e(eMe,b$r),e(h5,v$r),e(h5,nY),e(nY,F$r),e(h5,T$r),e(Le,M$r),e(Le,p5),e(p5,oMe),e(oMe,E$r),e(p5,C$r),e(p5,sY),e(sY,w$r),e(p5,A$r),e(Le,y$r),e(Le,_5),e(_5,rMe),e(rMe,L$r),e(_5,x$r),e(_5,lY),e(lY,$$r),e(_5,k$r),e(Le,S$r),e(Le,u5),e(u5,tMe),e(tMe,R$r),e(u5,P$r),e(u5,iY),e(iY,B$r),e(u5,I$r),e(Le,q$r),e(Le,b5),e(b5,aMe),e(aMe,N$r),e(b5,j$r),e(b5,dY),e(dY,D$r),e(b5,G$r),e(Le,O$r),e(Le,v5),e(v5,nMe),e(nMe,V$r),e(v5,X$r),e(v5,cY),e(cY,z$r),e(v5,W$r),e(Le,Q$r),e(Le,F5),e(F5,sMe),e(sMe,H$r),e(F5,U$r),e(F5,fY),e(fY,J$r),e(F5,Y$r),e(Le,K$r),e(Le,T5),e(T5,lMe),e(lMe,Z$r),e(T5,ekr),e(T5,mY),e(mY,okr),e(T5,rkr),e(Le,tkr),e(Le,M5),e(M5,iMe),e(iMe,akr),e(M5,nkr),e(M5,gY),e(gY,skr),e(M5,lkr),e(Le,ikr),e(Le,E5),e(E5,dMe),e(dMe,dkr),e(E5,ckr),e(E5,hY),e(hY,fkr),e(E5,mkr),e(Or,gkr),M(C5,Or,null),b(f,LNe,u),b(f,Dc,u),e(Dc,w5),e(w5,cMe),M(x8,cMe,null),e(Dc,hkr),e(Dc,fMe),e(fMe,pkr),b(f,xNe,u),b(f,pr,u),M($8,pr,null),e(pr,_kr),e(pr,Gc),e(Gc,ukr),e(Gc,pY),e(pY,bkr),e(Gc,vkr),e(Gc,_Y),e(_Y,Fkr),e(Gc,Tkr),e(pr,Mkr),e(pr,k8),e(k8,Ekr),e(k8,mMe),e(mMe,Ckr),e(k8,wkr),e(pr,Akr),e(pr,zt),M(S8,zt,null),e(zt,ykr),e(zt,gMe),e(gMe,Lkr),e(zt,xkr),e(zt,Oc),e(Oc,$kr),e(Oc,hMe),e(hMe,kkr),e(Oc,Skr),e(Oc,uY),e(uY,Rkr),e(Oc,Pkr),e(zt,Bkr),M(A5,zt,null),e(pr,Ikr),e(pr,Vr),M(R8,Vr,null),e(Vr,qkr),e(Vr,pMe),e(pMe,Nkr),e(Vr,jkr),e(Vr,bn),e(bn,Dkr),e(bn,_Me),e(_Me,Gkr),e(bn,Okr),e(bn,uMe),e(uMe,Vkr),e(bn,Xkr),e(bn,bMe),e(bMe,zkr),e(bn,Wkr),e(Vr,Qkr),e(Vr,Pe),e(Pe,y5),e(y5,vMe),e(vMe,Hkr),e(y5,Ukr),e(y5,bY),e(bY,Jkr),e(y5,Ykr),e(Pe,Kkr),e(Pe,L5),e(L5,FMe),e(FMe,Zkr),e(L5,eSr),e(L5,vY),e(vY,oSr),e(L5,rSr),e(Pe,tSr),e(Pe,x5),e(x5,TMe),e(TMe,aSr),e(x5,nSr),e(x5,FY),e(FY,sSr),e(x5,lSr),e(Pe,iSr),e(Pe,$5),e($5,MMe),e(MMe,dSr),e($5,cSr),e($5,TY),e(TY,fSr),e($5,mSr),e(Pe,gSr),e(Pe,k5),e(k5,EMe),e(EMe,hSr),e(k5,pSr),e(k5,MY),e(MY,_Sr),e(k5,uSr),e(Pe,bSr),e(Pe,S5),e(S5,CMe),e(CMe,vSr),e(S5,FSr),e(S5,EY),e(EY,TSr),e(S5,MSr),e(Pe,ESr),e(Pe,R5),e(R5,wMe),e(wMe,CSr),e(R5,wSr),e(R5,CY),e(CY,ASr),e(R5,ySr),e(Pe,LSr),e(Pe,P5),e(P5,AMe),e(AMe,xSr),e(P5,$Sr),e(P5,wY),e(wY,kSr),e(P5,SSr),e(Pe,RSr),e(Pe,B5),e(B5,yMe),e(yMe,PSr),e(B5,BSr),e(B5,AY),e(AY,ISr),e(B5,qSr),e(Vr,NSr),M(I5,Vr,null),b(f,$Ne,u),b(f,Vc,u),e(Vc,q5),e(q5,LMe),M(P8,LMe,null),e(Vc,jSr),e(Vc,xMe),e(xMe,DSr),b(f,kNe,u),b(f,_r,u),M(B8,_r,null),e(_r,GSr),e(_r,Xc),e(Xc,OSr),e(Xc,yY),e(yY,VSr),e(Xc,XSr),e(Xc,LY),e(LY,zSr),e(Xc,WSr),e(_r,QSr),e(_r,I8),e(I8,HSr),e(I8,$Me),e($Me,USr),e(I8,JSr),e(_r,YSr),e(_r,Wt),M(q8,Wt,null),e(Wt,KSr),e(Wt,kMe),e(kMe,ZSr),e(Wt,eRr),e(Wt,zc),e(zc,oRr),e(zc,SMe),e(SMe,rRr),e(zc,tRr),e(zc,xY),e(xY,aRr),e(zc,nRr),e(Wt,sRr),M(N5,Wt,null),e(_r,lRr),e(_r,Xr),M(N8,Xr,null),e(Xr,iRr),e(Xr,RMe),e(RMe,dRr),e(Xr,cRr),e(Xr,vn),e(vn,fRr),e(vn,PMe),e(PMe,mRr),e(vn,gRr),e(vn,BMe),e(BMe,hRr),e(vn,pRr),e(vn,IMe),e(IMe,_Rr),e(vn,uRr),e(Xr,bRr),e(Xr,xe),e(xe,j5),e(j5,qMe),e(qMe,vRr),e(j5,FRr),e(j5,$Y),e($Y,TRr),e(j5,MRr),e(xe,ERr),e(xe,D5),e(D5,NMe),e(NMe,CRr),e(D5,wRr),e(D5,kY),e(kY,ARr),e(D5,yRr),e(xe,LRr),e(xe,G5),e(G5,jMe),e(jMe,xRr),e(G5,$Rr),e(G5,SY),e(SY,kRr),e(G5,SRr),e(xe,RRr),e(xe,O5),e(O5,DMe),e(DMe,PRr),e(O5,BRr),e(O5,RY),e(RY,IRr),e(O5,qRr),e(xe,NRr),e(xe,V5),e(V5,GMe),e(GMe,jRr),e(V5,DRr),e(V5,PY),e(PY,GRr),e(V5,ORr),e(xe,VRr),e(xe,X5),e(X5,OMe),e(OMe,XRr),e(X5,zRr),e(X5,BY),e(BY,WRr),e(X5,QRr),e(xe,HRr),e(xe,z5),e(z5,VMe),e(VMe,URr),e(z5,JRr),e(z5,IY),e(IY,YRr),e(z5,KRr),e(xe,ZRr),e(xe,W5),e(W5,XMe),e(XMe,ePr),e(W5,oPr),e(W5,qY),e(qY,rPr),e(W5,tPr),e(xe,aPr),e(xe,Q5),e(Q5,zMe),e(zMe,nPr),e(Q5,sPr),e(Q5,NY),e(NY,lPr),e(Q5,iPr),e(xe,dPr),e(xe,H5),e(H5,WMe),e(WMe,cPr),e(H5,fPr),e(H5,jY),e(jY,mPr),e(H5,gPr),e(Xr,hPr),M(U5,Xr,null),b(f,SNe,u),b(f,Wc,u),e(Wc,J5),e(J5,QMe),M(j8,QMe,null),e(Wc,pPr),e(Wc,HMe),e(HMe,_Pr),b(f,RNe,u),b(f,ur,u),M(D8,ur,null),e(ur,uPr),e(ur,Qc),e(Qc,bPr),e(Qc,DY),e(DY,vPr),e(Qc,FPr),e(Qc,GY),e(GY,TPr),e(Qc,MPr),e(ur,EPr),e(ur,G8),e(G8,CPr),e(G8,UMe),e(UMe,wPr),e(G8,APr),e(ur,yPr),e(ur,Qt),M(O8,Qt,null),e(Qt,LPr),e(Qt,JMe),e(JMe,xPr),e(Qt,$Pr),e(Qt,Hc),e(Hc,kPr),e(Hc,YMe),e(YMe,SPr),e(Hc,RPr),e(Hc,OY),e(OY,PPr),e(Hc,BPr),e(Qt,IPr),M(Y5,Qt,null),e(ur,qPr),e(ur,zr),M(V8,zr,null),e(zr,NPr),e(zr,KMe),e(KMe,jPr),e(zr,DPr),e(zr,Fn),e(Fn,GPr),e(Fn,ZMe),e(ZMe,OPr),e(Fn,VPr),e(Fn,e4e),e(e4e,XPr),e(Fn,zPr),e(Fn,o4e),e(o4e,WPr),e(Fn,QPr),e(zr,HPr),e(zr,$e),e($e,K5),e(K5,r4e),e(r4e,UPr),e(K5,JPr),e(K5,VY),e(VY,YPr),e(K5,KPr),e($e,ZPr),e($e,Z5),e(Z5,t4e),e(t4e,eBr),e(Z5,oBr),e(Z5,XY),e(XY,rBr),e(Z5,tBr),e($e,aBr),e($e,e3),e(e3,a4e),e(a4e,nBr),e(e3,sBr),e(e3,zY),e(zY,lBr),e(e3,iBr),e($e,dBr),e($e,o3),e(o3,n4e),e(n4e,cBr),e(o3,fBr),e(o3,WY),e(WY,mBr),e(o3,gBr),e($e,hBr),e($e,r3),e(r3,s4e),e(s4e,pBr),e(r3,_Br),e(r3,QY),e(QY,uBr),e(r3,bBr),e($e,vBr),e($e,t3),e(t3,l4e),e(l4e,FBr),e(t3,TBr),e(t3,HY),e(HY,MBr),e(t3,EBr),e($e,CBr),e($e,a3),e(a3,i4e),e(i4e,wBr),e(a3,ABr),e(a3,UY),e(UY,yBr),e(a3,LBr),e($e,xBr),e($e,n3),e(n3,d4e),e(d4e,$Br),e(n3,kBr),e(n3,JY),e(JY,SBr),e(n3,RBr),e($e,PBr),e($e,s3),e(s3,c4e),e(c4e,BBr),e(s3,IBr),e(s3,YY),e(YY,qBr),e(s3,NBr),e($e,jBr),e($e,l3),e(l3,f4e),e(f4e,DBr),e(l3,GBr),e(l3,KY),e(KY,OBr),e(l3,VBr),e(zr,XBr),M(i3,zr,null),b(f,PNe,u),b(f,Uc,u),e(Uc,d3),e(d3,m4e),M(X8,m4e,null),e(Uc,zBr),e(Uc,g4e),e(g4e,WBr),b(f,BNe,u),b(f,br,u),M(z8,br,null),e(br,QBr),e(br,Jc),e(Jc,HBr),e(Jc,ZY),e(ZY,UBr),e(Jc,JBr),e(Jc,eK),e(eK,YBr),e(Jc,KBr),e(br,ZBr),e(br,W8),e(W8,eIr),e(W8,h4e),e(h4e,oIr),e(W8,rIr),e(br,tIr),e(br,Ht),M(Q8,Ht,null),e(Ht,aIr),e(Ht,p4e),e(p4e,nIr),e(Ht,sIr),e(Ht,Yc),e(Yc,lIr),e(Yc,_4e),e(_4e,iIr),e(Yc,dIr),e(Yc,oK),e(oK,cIr),e(Yc,fIr),e(Ht,mIr),M(c3,Ht,null),e(br,gIr),e(br,Wr),M(H8,Wr,null),e(Wr,hIr),e(Wr,u4e),e(u4e,pIr),e(Wr,_Ir),e(Wr,Tn),e(Tn,uIr),e(Tn,b4e),e(b4e,bIr),e(Tn,vIr),e(Tn,v4e),e(v4e,FIr),e(Tn,TIr),e(Tn,F4e),e(F4e,MIr),e(Tn,EIr),e(Wr,CIr),e(Wr,De),e(De,f3),e(f3,T4e),e(T4e,wIr),e(f3,AIr),e(f3,rK),e(rK,yIr),e(f3,LIr),e(De,xIr),e(De,m3),e(m3,M4e),e(M4e,$Ir),e(m3,kIr),e(m3,tK),e(tK,SIr),e(m3,RIr),e(De,PIr),e(De,g3),e(g3,E4e),e(E4e,BIr),e(g3,IIr),e(g3,aK),e(aK,qIr),e(g3,NIr),e(De,jIr),e(De,h3),e(h3,C4e),e(C4e,DIr),e(h3,GIr),e(h3,nK),e(nK,OIr),e(h3,VIr),e(De,XIr),e(De,p3),e(p3,w4e),e(w4e,zIr),e(p3,WIr),e(p3,sK),e(sK,QIr),e(p3,HIr),e(De,UIr),e(De,_3),e(_3,A4e),e(A4e,JIr),e(_3,YIr),e(_3,lK),e(lK,KIr),e(_3,ZIr),e(De,eqr),e(De,u3),e(u3,y4e),e(y4e,oqr),e(u3,rqr),e(u3,iK),e(iK,tqr),e(u3,aqr),e(De,nqr),e(De,b3),e(b3,L4e),e(L4e,sqr),e(b3,lqr),e(b3,dK),e(dK,iqr),e(b3,dqr),e(Wr,cqr),M(v3,Wr,null),b(f,INe,u),b(f,Kc,u),e(Kc,F3),e(F3,x4e),M(U8,x4e,null),e(Kc,fqr),e(Kc,$4e),e($4e,mqr),b(f,qNe,u),b(f,vr,u),M(J8,vr,null),e(vr,gqr),e(vr,Zc),e(Zc,hqr),e(Zc,cK),e(cK,pqr),e(Zc,_qr),e(Zc,fK),e(fK,uqr),e(Zc,bqr),e(vr,vqr),e(vr,Y8),e(Y8,Fqr),e(Y8,k4e),e(k4e,Tqr),e(Y8,Mqr),e(vr,Eqr),e(vr,Ut),M(K8,Ut,null),e(Ut,Cqr),e(Ut,S4e),e(S4e,wqr),e(Ut,Aqr),e(Ut,ef),e(ef,yqr),e(ef,R4e),e(R4e,Lqr),e(ef,xqr),e(ef,mK),e(mK,$qr),e(ef,kqr),e(Ut,Sqr),M(T3,Ut,null),e(vr,Rqr),e(vr,Qr),M(Z8,Qr,null),e(Qr,Pqr),e(Qr,P4e),e(P4e,Bqr),e(Qr,Iqr),e(Qr,Mn),e(Mn,qqr),e(Mn,B4e),e(B4e,Nqr),e(Mn,jqr),e(Mn,I4e),e(I4e,Dqr),e(Mn,Gqr),e(Mn,q4e),e(q4e,Oqr),e(Mn,Vqr),e(Qr,Xqr),e(Qr,Ge),e(Ge,M3),e(M3,N4e),e(N4e,zqr),e(M3,Wqr),e(M3,gK),e(gK,Qqr),e(M3,Hqr),e(Ge,Uqr),e(Ge,E3),e(E3,j4e),e(j4e,Jqr),e(E3,Yqr),e(E3,hK),e(hK,Kqr),e(E3,Zqr),e(Ge,eNr),e(Ge,C3),e(C3,D4e),e(D4e,oNr),e(C3,rNr),e(C3,pK),e(pK,tNr),e(C3,aNr),e(Ge,nNr),e(Ge,w3),e(w3,G4e),e(G4e,sNr),e(w3,lNr),e(w3,_K),e(_K,iNr),e(w3,dNr),e(Ge,cNr),e(Ge,A3),e(A3,O4e),e(O4e,fNr),e(A3,mNr),e(A3,uK),e(uK,gNr),e(A3,hNr),e(Ge,pNr),e(Ge,y3),e(y3,V4e),e(V4e,_Nr),e(y3,uNr),e(y3,bK),e(bK,bNr),e(y3,vNr),e(Ge,FNr),e(Ge,L3),e(L3,X4e),e(X4e,TNr),e(L3,MNr),e(L3,vK),e(vK,ENr),e(L3,CNr),e(Ge,wNr),e(Ge,x3),e(x3,z4e),e(z4e,ANr),e(x3,yNr),e(x3,FK),e(FK,LNr),e(x3,xNr),e(Qr,$Nr),M($3,Qr,null),b(f,NNe,u),b(f,of,u),e(of,k3),e(k3,W4e),M(ex,W4e,null),e(of,kNr),e(of,Q4e),e(Q4e,SNr),b(f,jNe,u),b(f,Fr,u),M(ox,Fr,null),e(Fr,RNr),e(Fr,rf),e(rf,PNr),e(rf,TK),e(TK,BNr),e(rf,INr),e(rf,MK),e(MK,qNr),e(rf,NNr),e(Fr,jNr),e(Fr,rx),e(rx,DNr),e(rx,H4e),e(H4e,GNr),e(rx,ONr),e(Fr,VNr),e(Fr,Jt),M(tx,Jt,null),e(Jt,XNr),e(Jt,U4e),e(U4e,zNr),e(Jt,WNr),e(Jt,tf),e(tf,QNr),e(tf,J4e),e(J4e,HNr),e(tf,UNr),e(tf,EK),e(EK,JNr),e(tf,YNr),e(Jt,KNr),M(S3,Jt,null),e(Fr,ZNr),e(Fr,Hr),M(ax,Hr,null),e(Hr,ejr),e(Hr,Y4e),e(Y4e,ojr),e(Hr,rjr),e(Hr,En),e(En,tjr),e(En,K4e),e(K4e,ajr),e(En,njr),e(En,Z4e),e(Z4e,sjr),e(En,ljr),e(En,eEe),e(eEe,ijr),e(En,djr),e(Hr,cjr),e(Hr,oEe),e(oEe,R3),e(R3,rEe),e(rEe,fjr),e(R3,mjr),e(R3,CK),e(CK,gjr),e(R3,hjr),e(Hr,pjr),M(P3,Hr,null),b(f,DNe,u),b(f,af,u),e(af,B3),e(B3,tEe),M(nx,tEe,null),e(af,_jr),e(af,aEe),e(aEe,ujr),b(f,GNe,u),b(f,Tr,u),M(sx,Tr,null),e(Tr,bjr),e(Tr,nf),e(nf,vjr),e(nf,wK),e(wK,Fjr),e(nf,Tjr),e(nf,AK),e(AK,Mjr),e(nf,Ejr),e(Tr,Cjr),e(Tr,lx),e(lx,wjr),e(lx,nEe),e(nEe,Ajr),e(lx,yjr),e(Tr,Ljr),e(Tr,Yt),M(ix,Yt,null),e(Yt,xjr),e(Yt,sEe),e(sEe,$jr),e(Yt,kjr),e(Yt,sf),e(sf,Sjr),e(sf,lEe),e(lEe,Rjr),e(sf,Pjr),e(sf,yK),e(yK,Bjr),e(sf,Ijr),e(Yt,qjr),M(I3,Yt,null),e(Tr,Njr),e(Tr,Ur),M(dx,Ur,null),e(Ur,jjr),e(Ur,iEe),e(iEe,Djr),e(Ur,Gjr),e(Ur,Cn),e(Cn,Ojr),e(Cn,dEe),e(dEe,Vjr),e(Cn,Xjr),e(Cn,cEe),e(cEe,zjr),e(Cn,Wjr),e(Cn,fEe),e(fEe,Qjr),e(Cn,Hjr),e(Ur,Ujr),e(Ur,cx),e(cx,q3),e(q3,mEe),e(mEe,Jjr),e(q3,Yjr),e(q3,LK),e(LK,Kjr),e(q3,Zjr),e(cx,eDr),e(cx,N3),e(N3,gEe),e(gEe,oDr),e(N3,rDr),e(N3,xK),e(xK,tDr),e(N3,aDr),e(Ur,nDr),M(j3,Ur,null),b(f,ONe,u),b(f,lf,u),e(lf,D3),e(D3,hEe),M(fx,hEe,null),e(lf,sDr),e(lf,pEe),e(pEe,lDr),b(f,VNe,u),b(f,Mr,u),M(mx,Mr,null),e(Mr,iDr),e(Mr,df),e(df,dDr),e(df,$K),e($K,cDr),e(df,fDr),e(df,kK),e(kK,mDr),e(df,gDr),e(Mr,hDr),e(Mr,gx),e(gx,pDr),e(gx,_Ee),e(_Ee,_Dr),e(gx,uDr),e(Mr,bDr),e(Mr,Kt),M(hx,Kt,null),e(Kt,vDr),e(Kt,uEe),e(uEe,FDr),e(Kt,TDr),e(Kt,cf),e(cf,MDr),e(cf,bEe),e(bEe,EDr),e(cf,CDr),e(cf,SK),e(SK,wDr),e(cf,ADr),e(Kt,yDr),M(G3,Kt,null),e(Mr,LDr),e(Mr,Jr),M(px,Jr,null),e(Jr,xDr),e(Jr,vEe),e(vEe,$Dr),e(Jr,kDr),e(Jr,wn),e(wn,SDr),e(wn,FEe),e(FEe,RDr),e(wn,PDr),e(wn,TEe),e(TEe,BDr),e(wn,IDr),e(wn,MEe),e(MEe,qDr),e(wn,NDr),e(Jr,jDr),e(Jr,EEe),e(EEe,O3),e(O3,CEe),e(CEe,DDr),e(O3,GDr),e(O3,RK),e(RK,ODr),e(O3,VDr),e(Jr,XDr),M(V3,Jr,null),XNe=!0},p(f,[u]){const _x={};u&2&&(_x.$$scope={dirty:u,ctx:f}),vf.$set(_x);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),vg.$set(wEe);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),Zg.$set(AEe);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),xh.$set(yEe);const ux={};u&2&&(ux.$$scope={dirty:u,ctx:f}),$h.$set(ux);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),Uh.$set(LEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Jh.$set(An);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),Zh.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),z_.$set($Ee);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),Q_.$set(kEe);const bx={};u&2&&(bx.$$scope={dirty:u,ctx:f}),Iu.$set(bx);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),Nu.$set(SEe);const vx={};u&2&&(vx.$$scope={dirty:u,ctx:f}),M2.$set(vx);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),C2.$set(REe);const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),l1.$set(Fx);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),d1.$set(PEe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),y1.$set(BEe);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),x1.$set(IEe);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),E9.$set(ff);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),w9.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),rb.$set(NEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),ab.$set(jEe);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),fb.$set(Tx);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),gb.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),Hb.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),Jb.$set(OEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),qv.$set(et);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),jv.$set(Mx);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),Ov.$set(VEe);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),Xv.$set(Ex);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),aF.$set(XEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),sF.$set(ot);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),dF.$set(zEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),fF.$set(mf);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),MF.$set(WEe);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),CF.$set(QEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),kF.$set(y);const X3={};u&2&&(X3.$$scope={dirty:u,ctx:f}),RF.$set(X3);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),XF.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),WF.$set(UEe);const z3={};u&2&&(z3.$$scope={dirty:u,ctx:f}),JF.$set(z3);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),KF.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),nT.$set(YEe);const W3={};u&2&&(W3.$$scope={dirty:u,ctx:f}),lT.$set(W3);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),mT.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),hT.$set(ZEe);const Q3={};u&2&&(Q3.$$scope={dirty:u,ctx:f}),bT.$set(Q3);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),FT.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),ET.$set(oCe);const H3={};u&2&&(H3.$$scope={dirty:u,ctx:f}),wT.$set(H3);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),kT.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),RT.$set(tCe);const U3={};u&2&&(U3.$$scope={dirty:u,ctx:f}),IT.$set(U3);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),NT.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),$7.$set(nCe);const J3={};u&2&&(J3.$$scope={dirty:u,ctx:f}),S7.$set(J3);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),rM.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),aM.$set(lCe);const Y3={};u&2&&(Y3.$$scope={dirty:u,ctx:f}),uM.$set(Y3);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),vM.$set(iCe);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),CM.$set(dCe);const K3={};u&2&&(K3.$$scope={dirty:u,ctx:f}),AM.$set(K3);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),QM.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),UM.$set(fCe);const Z3={};u&2&&(Z3.$$scope={dirty:u,ctx:f}),s4.$set(Z3);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),i4.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),B4.$set(gCe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),q4.$set(ew);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),oE.$set(hCe);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),tE.$set(pCe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),sE.$set(ow);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),iE.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),cE.$set(uCe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),mE.$set(rw);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),RE.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),BE.$set(vCe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),rC.$set(tw);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),aC.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),sC.$set(TCe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),iC.$set(aw);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),cC.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),mC.$set(ECe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),NC.$set(nw);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),DC.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),JC.$set(wCe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),KC.$set(sw);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),f5.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),g5.$set(yCe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),C5.$set(lw);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),A5.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),I5.$set(xCe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),N5.$set(iw);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),U5.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),Y5.$set(kCe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),i3.$set(dw);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),c3.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),v3.$set(RCe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),T3.$set(cw);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),$3.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),S3.$set(BCe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),P3.$set(fw);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),I3.$set(ICe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),j3.$set(qCe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),G3.$set(mw);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),V3.$set(NCe)},i(f){XNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(fA.$$.fragment,f),E(mA.$$.fragment,f),E(vf.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(uA.$$.fragment,f),E(vg.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(Zg.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(xh.$$.fragment,f),E($h.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(Uh.$$.fragment,f),E(Jh.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(DA.$$.fragment,f),E(Zh.$$.fragment,f),E(GA.$$.fragment,f),E(z_.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E(Q_.$$.fragment,f),E(WA.$$.fragment,f),E(Iu.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(Nu.$$.fragment,f),E(YA.$$.fragment,f),E(M2.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(o6.$$.fragment,f),E(C2.$$.fragment,f),E(r6.$$.fragment,f),E(l1.$$.fragment,f),E(t6.$$.fragment,f),E(a6.$$.fragment,f),E(s6.$$.fragment,f),E(d1.$$.fragment,f),E(l6.$$.fragment,f),E(y1.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(f6.$$.fragment,f),E(x1.$$.fragment,f),E(m6.$$.fragment,f),E(E9.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(_6.$$.fragment,f),E(w9.$$.fragment,f),E(u6.$$.fragment,f),E(rb.$$.fragment,f),E(b6.$$.fragment,f),E(v6.$$.fragment,f),E(T6.$$.fragment,f),E(ab.$$.fragment,f),E(M6.$$.fragment,f),E(fb.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(A6.$$.fragment,f),E(gb.$$.fragment,f),E(y6.$$.fragment,f),E(Hb.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(k6.$$.fragment,f),E(Jb.$$.fragment,f),E(S6.$$.fragment,f),E(qv.$$.fragment,f),E(R6.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(jv.$$.fragment,f),E(q6.$$.fragment,f),E(Ov.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(Xv.$$.fragment,f),E(O6.$$.fragment,f),E(aF.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(W6.$$.fragment,f),E(sF.$$.fragment,f),E(Q6.$$.fragment,f),E(dF.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(fF.$$.fragment,f),E(K6.$$.fragment,f),E(MF.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(CF.$$.fragment,f),E(ty.$$.fragment,f),E(kF.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(RF.$$.fragment,f),E(iy.$$.fragment,f),E(XF.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(WF.$$.fragment,f),E(gy.$$.fragment,f),E(JF.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(KF.$$.fragment,f),E(vy.$$.fragment,f),E(nT.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(lT.$$.fragment,f),E(Cy.$$.fragment,f),E(mT.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(hT.$$.fragment,f),E(xy.$$.fragment,f),E(bT.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(FT.$$.fragment,f),E(By.$$.fragment,f),E(ET.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(wT.$$.fragment,f),E(Dy.$$.fragment,f),E(kT.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(RT.$$.fragment,f),E(zy.$$.fragment,f),E(IT.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(NT.$$.fragment,f),E(Jy.$$.fragment,f),E($7.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(S7.$$.fragment,f),E(oL.$$.fragment,f),E(rM.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(aM.$$.fragment,f),E(sL.$$.fragment,f),E(uM.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(vM.$$.fragment,f),E(fL.$$.fragment,f),E(CM.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(AM.$$.fragment,f),E(_L.$$.fragment,f),E(QM.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(UM.$$.fragment,f),E(TL.$$.fragment,f),E(s4.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(i4.$$.fragment,f),E(AL.$$.fragment,f),E(B4.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(q4.$$.fragment,f),E(kL.$$.fragment,f),E(oE.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(tE.$$.fragment,f),E(IL.$$.fragment,f),E(sE.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(iE.$$.fragment,f),E(OL.$$.fragment,f),E(cE.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(mE.$$.fragment,f),E(QL.$$.fragment,f),E(RE.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(BE.$$.fragment,f),E(KL.$$.fragment,f),E(rC.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(aC.$$.fragment,f),E(t8.$$.fragment,f),E(sC.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(iC.$$.fragment,f),E(i8.$$.fragment,f),E(cC.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(mC.$$.fragment,f),E(g8.$$.fragment,f),E(NC.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(DC.$$.fragment,f),E(b8.$$.fragment,f),E(JC.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(KC.$$.fragment,f),E(E8.$$.fragment,f),E(f5.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(g5.$$.fragment,f),E(L8.$$.fragment,f),E(C5.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(A5.$$.fragment,f),E(R8.$$.fragment,f),E(I5.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(q8.$$.fragment,f),E(N5.$$.fragment,f),E(N8.$$.fragment,f),E(U5.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(Y5.$$.fragment,f),E(V8.$$.fragment,f),E(i3.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(c3.$$.fragment,f),E(H8.$$.fragment,f),E(v3.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(T3.$$.fragment,f),E(Z8.$$.fragment,f),E($3.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(S3.$$.fragment,f),E(ax.$$.fragment,f),E(P3.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(I3.$$.fragment,f),E(dx.$$.fragment,f),E(j3.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(G3.$$.fragment,f),E(px.$$.fragment,f),E(V3.$$.fragment,f),XNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(fA.$$.fragment,f),C(mA.$$.fragment,f),C(vf.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(uA.$$.fragment,f),C(vg.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(Zg.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(xh.$$.fragment,f),C($h.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(Uh.$$.fragment,f),C(Jh.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(DA.$$.fragment,f),C(Zh.$$.fragment,f),C(GA.$$.fragment,f),C(z_.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C(Q_.$$.fragment,f),C(WA.$$.fragment,f),C(Iu.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(Nu.$$.fragment,f),C(YA.$$.fragment,f),C(M2.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(o6.$$.fragment,f),C(C2.$$.fragment,f),C(r6.$$.fragment,f),C(l1.$$.fragment,f),C(t6.$$.fragment,f),C(a6.$$.fragment,f),C(s6.$$.fragment,f),C(d1.$$.fragment,f),C(l6.$$.fragment,f),C(y1.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(f6.$$.fragment,f),C(x1.$$.fragment,f),C(m6.$$.fragment,f),C(E9.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(_6.$$.fragment,f),C(w9.$$.fragment,f),C(u6.$$.fragment,f),C(rb.$$.fragment,f),C(b6.$$.fragment,f),C(v6.$$.fragment,f),C(T6.$$.fragment,f),C(ab.$$.fragment,f),C(M6.$$.fragment,f),C(fb.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(A6.$$.fragment,f),C(gb.$$.fragment,f),C(y6.$$.fragment,f),C(Hb.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(k6.$$.fragment,f),C(Jb.$$.fragment,f),C(S6.$$.fragment,f),C(qv.$$.fragment,f),C(R6.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(jv.$$.fragment,f),C(q6.$$.fragment,f),C(Ov.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(Xv.$$.fragment,f),C(O6.$$.fragment,f),C(aF.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(W6.$$.fragment,f),C(sF.$$.fragment,f),C(Q6.$$.fragment,f),C(dF.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(fF.$$.fragment,f),C(K6.$$.fragment,f),C(MF.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(CF.$$.fragment,f),C(ty.$$.fragment,f),C(kF.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(RF.$$.fragment,f),C(iy.$$.fragment,f),C(XF.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(WF.$$.fragment,f),C(gy.$$.fragment,f),C(JF.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(KF.$$.fragment,f),C(vy.$$.fragment,f),C(nT.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(lT.$$.fragment,f),C(Cy.$$.fragment,f),C(mT.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(hT.$$.fragment,f),C(xy.$$.fragment,f),C(bT.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(FT.$$.fragment,f),C(By.$$.fragment,f),C(ET.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(wT.$$.fragment,f),C(Dy.$$.fragment,f),C(kT.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(RT.$$.fragment,f),C(zy.$$.fragment,f),C(IT.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(NT.$$.fragment,f),C(Jy.$$.fragment,f),C($7.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(S7.$$.fragment,f),C(oL.$$.fragment,f),C(rM.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(aM.$$.fragment,f),C(sL.$$.fragment,f),C(uM.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(vM.$$.fragment,f),C(fL.$$.fragment,f),C(CM.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(AM.$$.fragment,f),C(_L.$$.fragment,f),C(QM.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(UM.$$.fragment,f),C(TL.$$.fragment,f),C(s4.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(i4.$$.fragment,f),C(AL.$$.fragment,f),C(B4.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(q4.$$.fragment,f),C(kL.$$.fragment,f),C(oE.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(tE.$$.fragment,f),C(IL.$$.fragment,f),C(sE.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(iE.$$.fragment,f),C(OL.$$.fragment,f),C(cE.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(mE.$$.fragment,f),C(QL.$$.fragment,f),C(RE.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(BE.$$.fragment,f),C(KL.$$.fragment,f),C(rC.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(aC.$$.fragment,f),C(t8.$$.fragment,f),C(sC.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(iC.$$.fragment,f),C(i8.$$.fragment,f),C(cC.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(mC.$$.fragment,f),C(g8.$$.fragment,f),C(NC.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(DC.$$.fragment,f),C(b8.$$.fragment,f),C(JC.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(KC.$$.fragment,f),C(E8.$$.fragment,f),C(f5.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(g5.$$.fragment,f),C(L8.$$.fragment,f),C(C5.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(A5.$$.fragment,f),C(R8.$$.fragment,f),C(I5.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(q8.$$.fragment,f),C(N5.$$.fragment,f),C(N8.$$.fragment,f),C(U5.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(Y5.$$.fragment,f),C(V8.$$.fragment,f),C(i3.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(c3.$$.fragment,f),C(H8.$$.fragment,f),C(v3.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(T3.$$.fragment,f),C(Z8.$$.fragment,f),C($3.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(S3.$$.fragment,f),C(ax.$$.fragment,f),C(P3.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(I3.$$.fragment,f),C(dx.$$.fragment,f),C(j3.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(G3.$$.fragment,f),C(px.$$.fragment,f),C(V3.$$.fragment,f),XNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(GIe),f&&t(ui),w(fA),f&&t(OIe),f&&t(kn),f&&t(VIe),w(mA,f),f&&t(XIe),f&&t(R$),f&&t(zIe),w(vf,f),f&&t(WIe),f&&t(bi),w(gA),f&&t(QIe),f&&t(Co),w(hA),w(uA),w(vg),w(bA),f&&t(HIe),f&&t(Fi),w(vA),f&&t(UIe),f&&t(wo),w(FA),w(EA),w(Zg),w(CA),f&&t(JIe),f&&t(Ti),w(wA),f&&t(YIe),f&&t(Ao),w(AA),w(xA),w(xh),w($h),w($A),f&&t(KIe),f&&t(Mi),w(kA),f&&t(ZIe),f&&t(yo),w(SA),w(BA),w(Uh),w(Jh),w(IA),f&&t(eqe),f&&t(Ci),w(qA),f&&t(oqe),f&&t(Lo),w(NA),w(DA),w(Zh),w(GA),w(z_),f&&t(rqe),f&&t(yi),w(OA),f&&t(tqe),f&&t(xo),w(VA),w(zA),w(Q_),w(WA),w(Iu),f&&t(aqe),f&&t($i),w(QA),f&&t(nqe),f&&t($o),w(HA),w(JA),w(Nu),w(YA),w(M2),f&&t(sqe),f&&t(Ri),w(KA),f&&t(lqe),f&&t(ko),w(ZA),w(o6),w(C2),w(r6),w(l1),f&&t(iqe),f&&t(Ii),w(t6),f&&t(dqe),f&&t(So),w(a6),w(s6),w(d1),w(l6),w(y1),f&&t(cqe),f&&t(ji),w(i6),f&&t(fqe),f&&t(Ro),w(d6),w(f6),w(x1),w(m6),w(E9),f&&t(mqe),f&&t(Oi),w(g6),f&&t(gqe),f&&t(Po),w(h6),w(_6),w(w9),w(u6),w(rb),f&&t(hqe),f&&t(zi),w(b6),f&&t(pqe),f&&t(Bo),w(v6),w(T6),w(ab),w(M6),w(fb),f&&t(_qe),f&&t(Hi),w(E6),f&&t(uqe),f&&t(Io),w(C6),w(A6),w(gb),w(y6),w(Hb),f&&t(bqe),f&&t(Yi),w(L6),f&&t(vqe),f&&t(qo),w(x6),w(k6),w(Jb),w(S6),w(qv),f&&t(Fqe),f&&t(ed),w(R6),f&&t(Tqe),f&&t(No),w(P6),w(I6),w(jv),w(q6),w(Ov),f&&t(Mqe),f&&t(td),w(N6),f&&t(Eqe),f&&t(jo),w(j6),w(G6),w(Xv),w(O6),w(aF),f&&t(Cqe),f&&t(sd),w(V6),f&&t(wqe),f&&t(Do),w(X6),w(W6),w(sF),w(Q6),w(dF),f&&t(Aqe),f&&t(dd),w(H6),f&&t(yqe),f&&t(Go),w(U6),w(Y6),w(fF),w(K6),w(MF),f&&t(Lqe),f&&t(md),w(Z6),f&&t(xqe),f&&t(Oo),w(ey),w(ry),w(CF),w(ty),w(kF),f&&t($qe),f&&t(pd),w(ay),f&&t(kqe),f&&t(Vo),w(ny),w(ly),w(RF),w(iy),w(XF),f&&t(Sqe),f&&t(bd),w(dy),f&&t(Rqe),f&&t(Xo),w(cy),w(my),w(WF),w(gy),w(JF),f&&t(Pqe),f&&t(Td),w(py),f&&t(Bqe),f&&t(zo),w(_y),w(by),w(KF),w(vy),w(nT),f&&t(Iqe),f&&t(Cd),w(Fy),f&&t(qqe),f&&t(Wo),w(Ty),w(Ey),w(lT),w(Cy),w(mT),f&&t(Nqe),f&&t(Ld),w(wy),f&&t(jqe),f&&t(Qo),w(Ay),w(Ly),w(hT),w(xy),w(bT),f&&t(Dqe),f&&t(kd),w(ky),f&&t(Gqe),f&&t(Ho),w(Sy),w(Py),w(FT),w(By),w(ET),f&&t(Oqe),f&&t(Pd),w(Iy),f&&t(Vqe),f&&t(Uo),w(qy),w(jy),w(wT),w(Dy),w(kT),f&&t(Xqe),f&&t(qd),w(Gy),f&&t(zqe),f&&t(Jo),w(Oy),w(Xy),w(RT),w(zy),w(IT),f&&t(Wqe),f&&t(Dd),w(Wy),f&&t(Qqe),f&&t(Yo),w(Qy),w(Uy),w(NT),w(Jy),w($7),f&&t(Hqe),f&&t(Vd),w(Yy),f&&t(Uqe),f&&t(Ko),w(Ky),w(eL),w(S7),w(oL),w(rM),f&&t(Jqe),f&&t(Wd),w(rL),f&&t(Yqe),f&&t(Zo),w(tL),w(nL),w(aM),w(sL),w(uM),f&&t(Kqe),f&&t(Ud),w(lL),f&&t(Zqe),f&&t(er),w(iL),w(cL),w(vM),w(fL),w(CM),f&&t(eNe),f&&t(Kd),w(mL),f&&t(oNe),f&&t(or),w(gL),w(pL),w(AM),w(_L),w(QM),f&&t(rNe),f&&t(oc),w(uL),f&&t(tNe),f&&t(rr),w(bL),w(FL),w(UM),w(TL),w(s4),f&&t(aNe),f&&t(ac),w(ML),f&&t(nNe),f&&t(tr),w(EL),w(wL),w(i4),w(AL),w(B4),f&&t(sNe),f&&t(lc),w(yL),f&&t(lNe),f&&t(ar),w(LL),w($L),w(q4),w(kL),w(oE),f&&t(iNe),f&&t(cc),w(SL),f&&t(dNe),f&&t(nr),w(RL),w(BL),w(tE),w(IL),w(sE),f&&t(cNe),f&&t(gc),w(NL),f&&t(fNe),f&&t(sr),w(jL),w(GL),w(iE),w(OL),w(cE),f&&t(mNe),f&&t(_c),w(VL),f&&t(gNe),f&&t(lr),w(XL),w(WL),w(mE),w(QL),w(RE),f&&t(hNe),f&&t(vc),w(HL),f&&t(pNe),f&&t(ir),w(UL),w(YL),w(BE),w(KL),w(rC),f&&t(_Ne),f&&t(Mc),w(ZL),f&&t(uNe),f&&t(dr),w(e8),w(r8),w(aC),w(t8),w(sC),f&&t(bNe),f&&t(wc),w(a8),f&&t(vNe),f&&t(cr),w(n8),w(l8),w(iC),w(i8),w(cC),f&&t(FNe),f&&t(Lc),w(d8),f&&t(TNe),f&&t(fr),w(c8),w(m8),w(mC),w(g8),w(NC),f&&t(MNe),f&&t(kc),w(h8),f&&t(ENe),f&&t(mr),w(p8),w(u8),w(DC),w(b8),w(JC),f&&t(CNe),f&&t(Pc),w(v8),f&&t(wNe),f&&t(gr),w(F8),w(M8),w(KC),w(E8),w(f5),f&&t(ANe),f&&t(qc),w(C8),f&&t(yNe),f&&t(hr),w(w8),w(y8),w(g5),w(L8),w(C5),f&&t(LNe),f&&t(Dc),w(x8),f&&t(xNe),f&&t(pr),w($8),w(S8),w(A5),w(R8),w(I5),f&&t($Ne),f&&t(Vc),w(P8),f&&t(kNe),f&&t(_r),w(B8),w(q8),w(N5),w(N8),w(U5),f&&t(SNe),f&&t(Wc),w(j8),f&&t(RNe),f&&t(ur),w(D8),w(O8),w(Y5),w(V8),w(i3),f&&t(PNe),f&&t(Uc),w(X8),f&&t(BNe),f&&t(br),w(z8),w(Q8),w(c3),w(H8),w(v3),f&&t(INe),f&&t(Kc),w(U8),f&&t(qNe),f&&t(vr),w(J8),w(K8),w(T3),w(Z8),w($3),f&&t(NNe),f&&t(of),w(ex),f&&t(jNe),f&&t(Fr),w(ox),w(tx),w(S3),w(ax),w(P3),f&&t(DNe),f&&t(af),w(nx),f&&t(GNe),f&&t(Tr),w(sx),w(ix),w(I3),w(dx),w(j3),f&&t(ONe),f&&t(lf),w(fx),f&&t(VNe),f&&t(Mr),w(mx),w(hx),w(G3),w(px),w(V3)}}}const z8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function W8t(L){return Wyt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Z8t extends Oyt{constructor(g){super();Vyt(this,g,W8t,X8t,Xyt,{})}}export{Z8t as default,z8t as metadata};
