import{S as tjt,i as ajt,s as njt,e as a,k as l,w as F,t as o,M as sjt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ljt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as UJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function ijt(x){let g,v,p,m,_,d,h,Eo,Fi,Lf,at,Ti,Mi,v6,yf,Oe,We,Ei,Sn,F6,Rn,Pn,T6,Ci,Bn,M6,wi,xf,ya;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),v6=o(")."),yf=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),F6=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),T6=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),M6=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Uk=s(p);m=r(Uk,"NewModelConfig"),Uk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Jk=s(Fi);Lf=r(Jk,"model_type"),Jk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var Yk=s(Ti);Mi=r(Yk,'"new-model"'),Yk.forEach(t),v6=r(Ae,")."),Ae.forEach(t),yf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),F6=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Kk=s(Rn);Pn=r(Kk,"PreTrainedModel"),Kk.forEach(t),T6=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),M6=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Zk=s(wi);xf=r(Zk,"NewModelConfig"),Zk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,v6),b(Qe,yf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,F6),e(Oe,Rn),e(Rn,Pn),e(Oe,T6),e(Oe,Ci),e(Ci,Bn),e(Oe,M6),e(Oe,wi),e(wi,xf),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(yf),Qe&&t(Oe)}}}function djt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function mjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function hjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lGt(x){let g,v,p,m,_,d,h,Eo,Fi,Lf,at,Ti,Mi,v6,yf,Oe,We,Ei,Sn,F6,Rn,Pn,T6,Ci,Bn,M6,wi,xf,ya,Qe,Ae,Uk,Ai,Jk,Yk,Co,xa,Kk,$f,Zk,xze,hGe,Li,kf,Kre,E6,$ze,Zre,kze,pGe,In,Sze,ete,Rze,Pze,ote,Bze,Ize,_Ge,C6,uGe,eS,Nze,bGe,Sf,vGe,yi,Rf,rte,w6,qze,tte,jze,FGe,wo,A6,Dze,L6,Gze,oS,Oze,Vze,Xze,y6,zze,ate,Wze,Qze,Hze,wr,x6,Uze,nte,Jze,Yze,xi,Kze,ste,Zze,eWe,lte,oWe,rWe,tWe,A,Pf,ite,aWe,nWe,rS,sWe,lWe,iWe,Bf,dte,dWe,cWe,tS,fWe,mWe,gWe,If,cte,hWe,pWe,aS,_We,uWe,bWe,Nf,fte,vWe,FWe,nS,TWe,MWe,EWe,qf,mte,CWe,wWe,sS,AWe,LWe,yWe,jf,gte,xWe,$We,lS,kWe,SWe,RWe,Df,hte,PWe,BWe,iS,IWe,NWe,qWe,Gf,pte,jWe,DWe,dS,GWe,OWe,VWe,Of,_te,XWe,zWe,cS,WWe,QWe,HWe,Vf,ute,UWe,JWe,fS,YWe,KWe,ZWe,Xf,bte,eQe,oQe,mS,rQe,tQe,aQe,zf,vte,nQe,sQe,gS,lQe,iQe,dQe,Wf,Fte,cQe,fQe,hS,mQe,gQe,hQe,Qf,Tte,pQe,_Qe,pS,uQe,bQe,vQe,Hf,Mte,FQe,TQe,_S,MQe,EQe,CQe,Uf,Ete,wQe,AQe,uS,LQe,yQe,xQe,Jf,Cte,$Qe,kQe,bS,SQe,RQe,PQe,Yf,wte,BQe,IQe,vS,NQe,qQe,jQe,Kf,Ate,DQe,GQe,FS,OQe,VQe,XQe,Zf,Lte,zQe,WQe,TS,QQe,HQe,UQe,em,yte,JQe,YQe,MS,KQe,ZQe,eHe,om,xte,oHe,rHe,ES,tHe,aHe,nHe,rm,$te,sHe,lHe,CS,iHe,dHe,cHe,tm,kte,fHe,mHe,wS,gHe,hHe,pHe,am,Ste,_He,uHe,AS,bHe,vHe,FHe,nm,Rte,THe,MHe,LS,EHe,CHe,wHe,sm,Pte,AHe,LHe,yS,yHe,xHe,$He,lm,Bte,kHe,SHe,xS,RHe,PHe,BHe,im,Ite,IHe,NHe,$S,qHe,jHe,DHe,dm,Nte,GHe,OHe,kS,VHe,XHe,zHe,cm,qte,WHe,QHe,SS,HHe,UHe,JHe,fm,jte,YHe,KHe,RS,ZHe,eUe,oUe,mm,Dte,rUe,tUe,PS,aUe,nUe,sUe,gm,Gte,lUe,iUe,BS,dUe,cUe,fUe,hm,Ote,mUe,gUe,IS,hUe,pUe,_Ue,pm,Vte,uUe,bUe,NS,vUe,FUe,TUe,_m,Xte,MUe,EUe,qS,CUe,wUe,AUe,um,zte,LUe,yUe,jS,xUe,$Ue,kUe,bm,Wte,SUe,RUe,DS,PUe,BUe,IUe,vm,Qte,NUe,qUe,GS,jUe,DUe,GUe,Fm,Hte,OUe,VUe,OS,XUe,zUe,WUe,Tm,Ute,QUe,HUe,VS,UUe,JUe,YUe,Mm,Jte,KUe,ZUe,XS,eJe,oJe,rJe,Em,Yte,tJe,aJe,zS,nJe,sJe,lJe,Cm,Kte,iJe,dJe,WS,cJe,fJe,mJe,wm,Zte,gJe,hJe,QS,pJe,_Je,uJe,Am,eae,bJe,vJe,HS,FJe,TJe,MJe,Lm,oae,EJe,CJe,US,wJe,AJe,LJe,ym,rae,yJe,xJe,JS,$Je,kJe,SJe,xm,tae,RJe,PJe,YS,BJe,IJe,NJe,$m,aae,qJe,jJe,KS,DJe,GJe,OJe,km,nae,VJe,XJe,ZS,zJe,WJe,QJe,Sm,sae,HJe,UJe,eR,JJe,YJe,KJe,Rm,lae,ZJe,eYe,oR,oYe,rYe,tYe,Pm,iae,aYe,nYe,rR,sYe,lYe,iYe,Bm,dae,dYe,cYe,tR,fYe,mYe,gYe,Im,cae,hYe,pYe,aR,_Ye,uYe,bYe,Nm,fae,vYe,FYe,nR,TYe,MYe,EYe,qm,mae,CYe,wYe,sR,AYe,LYe,yYe,jm,gae,xYe,$Ye,lR,kYe,SYe,RYe,Dm,hae,PYe,BYe,iR,IYe,NYe,qYe,Gm,pae,jYe,DYe,dR,GYe,OYe,VYe,Om,_ae,XYe,zYe,cR,WYe,QYe,HYe,Vm,uae,UYe,JYe,fR,YYe,KYe,ZYe,Xm,bae,eKe,oKe,mR,rKe,tKe,aKe,zm,vae,nKe,sKe,gR,lKe,iKe,dKe,Wm,Fae,cKe,fKe,hR,mKe,gKe,hKe,Qm,Tae,pKe,_Ke,pR,uKe,bKe,vKe,Hm,Mae,FKe,TKe,_R,MKe,EKe,CKe,Um,Eae,wKe,AKe,uR,LKe,yKe,xKe,Jm,Cae,$Ke,kKe,bR,SKe,RKe,PKe,Ym,wae,BKe,IKe,vR,NKe,qKe,jKe,Km,Aae,DKe,GKe,FR,OKe,VKe,XKe,Zm,Lae,zKe,WKe,TR,QKe,HKe,UKe,eg,yae,JKe,YKe,MR,KKe,ZKe,eZe,og,xae,oZe,rZe,ER,tZe,aZe,nZe,rg,$ae,sZe,lZe,CR,iZe,dZe,cZe,tg,kae,fZe,mZe,wR,gZe,hZe,pZe,ag,Sae,_Ze,uZe,AR,bZe,vZe,FZe,ng,Rae,TZe,MZe,LR,EZe,CZe,wZe,sg,Pae,AZe,LZe,yR,yZe,xZe,$Ze,lg,Bae,kZe,SZe,xR,RZe,PZe,BZe,ig,Iae,IZe,NZe,$R,qZe,jZe,DZe,dg,Nae,GZe,OZe,kR,VZe,XZe,zZe,cg,qae,WZe,QZe,SR,HZe,UZe,JZe,fg,jae,YZe,KZe,RR,ZZe,eeo,oeo,mg,Dae,reo,teo,PR,aeo,neo,seo,gg,Gae,leo,ieo,BR,deo,ceo,feo,hg,Oae,meo,geo,IR,heo,peo,_eo,pg,Vae,ueo,beo,NR,veo,Feo,Teo,_g,Xae,Meo,Eeo,qR,Ceo,weo,Aeo,ug,zae,Leo,yeo,jR,xeo,$eo,keo,bg,Wae,Seo,Reo,DR,Peo,Beo,Ieo,vg,Qae,Neo,qeo,GR,jeo,Deo,Geo,Fg,Hae,Oeo,Veo,OR,Xeo,zeo,Weo,Tg,Uae,Qeo,Heo,VR,Ueo,Jeo,Yeo,Mg,Jae,Keo,Zeo,XR,eoo,ooo,roo,Eg,Yae,too,aoo,zR,noo,soo,loo,Cg,Kae,ioo,doo,WR,coo,foo,moo,wg,Zae,goo,hoo,QR,poo,_oo,uoo,Ag,ene,boo,voo,HR,Foo,Too,Moo,Lg,one,Eoo,Coo,UR,woo,Aoo,Loo,yg,rne,yoo,xoo,JR,$oo,koo,Soo,xg,tne,Roo,Poo,YR,Boo,Ioo,Noo,$g,ane,qoo,joo,KR,Doo,Goo,Ooo,kg,nne,Voo,Xoo,ZR,zoo,Woo,Qoo,Sg,sne,Hoo,Uoo,eP,Joo,Yoo,Koo,Rg,lne,Zoo,ero,oP,oro,rro,tro,Pg,ine,aro,nro,rP,sro,lro,iro,Bg,dne,dro,cro,tP,fro,mro,gro,Ig,cne,hro,pro,aP,_ro,uro,bro,Ng,fne,vro,Fro,nP,Tro,Mro,Ero,qg,mne,Cro,wro,sP,Aro,Lro,yro,jg,gne,xro,$ro,lP,kro,Sro,Rro,Dg,Pro,Gg,$6,Bro,hne,Iro,TGe,$i,Og,pne,k6,Nro,_ne,qro,MGe,Ao,S6,jro,R6,Dro,iP,Gro,Oro,Vro,P6,Xro,une,zro,Wro,Qro,Ar,B6,Hro,bne,Uro,Jro,$a,Yro,vne,Kro,Zro,Fne,eto,oto,Tne,rto,tto,ato,k,Nn,Mne,nto,sto,dP,lto,ito,cP,dto,cto,fto,qn,Ene,mto,gto,fP,hto,pto,mP,_to,uto,bto,jn,Cne,vto,Fto,gP,Tto,Mto,hP,Eto,Cto,wto,Vg,wne,Ato,Lto,pP,yto,xto,$to,Dn,Ane,kto,Sto,_P,Rto,Pto,uP,Bto,Ito,Nto,Xg,Lne,qto,jto,bP,Dto,Gto,Oto,zg,yne,Vto,Xto,vP,zto,Wto,Qto,Wg,xne,Hto,Uto,FP,Jto,Yto,Kto,Gn,$ne,Zto,eao,TP,oao,rao,MP,tao,aao,nao,On,kne,sao,lao,EP,iao,dao,CP,cao,fao,mao,Vn,Sne,gao,hao,wP,pao,_ao,AP,uao,bao,vao,Qg,Rne,Fao,Tao,LP,Mao,Eao,Cao,Hg,Pne,wao,Aao,yP,Lao,yao,xao,Ug,Bne,$ao,kao,xP,Sao,Rao,Pao,Xn,Ine,Bao,Iao,$P,Nao,qao,kP,jao,Dao,Gao,Jg,Nne,Oao,Vao,SP,Xao,zao,Wao,zn,qne,Qao,Hao,RP,Uao,Jao,PP,Yao,Kao,Zao,Wn,jne,eno,ono,BP,rno,tno,IP,ano,nno,sno,Qn,Dne,lno,ino,NP,dno,cno,qP,fno,mno,gno,Yg,Gne,hno,pno,jP,_no,uno,bno,Hn,One,vno,Fno,DP,Tno,Mno,GP,Eno,Cno,wno,Un,Vne,Ano,Lno,OP,yno,xno,VP,$no,kno,Sno,Jn,Xne,Rno,Pno,XP,Bno,Ino,zP,Nno,qno,jno,Yn,zne,Dno,Gno,WP,Ono,Vno,QP,Xno,zno,Wno,Kn,Wne,Qno,Hno,HP,Uno,Jno,UP,Yno,Kno,Zno,Zn,Qne,eso,oso,JP,rso,tso,YP,aso,nso,sso,Kg,Hne,lso,iso,KP,dso,cso,fso,es,Une,mso,gso,ZP,hso,pso,eB,_so,uso,bso,Zg,Jne,vso,Fso,oB,Tso,Mso,Eso,os,Yne,Cso,wso,rB,Aso,Lso,tB,yso,xso,$so,rs,Kne,kso,Sso,aB,Rso,Pso,nB,Bso,Iso,Nso,ts,Zne,qso,jso,sB,Dso,Gso,lB,Oso,Vso,Xso,eh,ese,zso,Wso,iB,Qso,Hso,Uso,as,ose,Jso,Yso,dB,Kso,Zso,cB,elo,olo,rlo,ns,rse,tlo,alo,fB,nlo,slo,mB,llo,ilo,dlo,oh,tse,clo,flo,gB,mlo,glo,hlo,ss,ase,plo,_lo,hB,ulo,blo,pB,vlo,Flo,Tlo,ls,nse,Mlo,Elo,_B,Clo,wlo,uB,Alo,Llo,ylo,is,sse,xlo,$lo,bB,klo,Slo,vB,Rlo,Plo,Blo,ds,lse,Ilo,Nlo,FB,qlo,jlo,TB,Dlo,Glo,Olo,cs,ise,Vlo,Xlo,MB,zlo,Wlo,EB,Qlo,Hlo,Ulo,fs,dse,Jlo,Ylo,CB,Klo,Zlo,wB,eio,oio,rio,ms,cse,tio,aio,AB,nio,sio,LB,lio,iio,dio,gs,fse,cio,fio,yB,mio,gio,xB,hio,pio,_io,rh,mse,uio,bio,$B,vio,Fio,Tio,hs,gse,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,th,hse,xio,$io,RB,kio,Sio,Rio,ah,pse,Pio,Bio,PB,Iio,Nio,qio,ps,_se,jio,Dio,BB,Gio,Oio,IB,Vio,Xio,zio,_s,use,Wio,Qio,NB,Hio,Uio,qB,Jio,Yio,Kio,us,bse,Zio,edo,jB,odo,rdo,DB,tdo,ado,ndo,nh,vse,sdo,ldo,GB,ido,ddo,cdo,bs,Fse,fdo,mdo,OB,gdo,hdo,VB,pdo,_do,udo,vs,Tse,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,Fs,Mse,wdo,Ado,WB,Ldo,ydo,QB,xdo,$do,kdo,Ts,Ese,Sdo,Rdo,HB,Pdo,Bdo,UB,Ido,Ndo,qdo,Ms,Cse,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,sh,wse,Wdo,Qdo,KB,Hdo,Udo,Jdo,Es,Ase,Ydo,Kdo,ZB,Zdo,eco,eI,oco,rco,tco,lh,Lse,aco,nco,oI,sco,lco,ico,ih,yse,dco,cco,rI,fco,mco,gco,dh,xse,hco,pco,tI,_co,uco,bco,ch,$se,vco,Fco,aI,Tco,Mco,Eco,Cs,kse,Cco,wco,nI,Aco,Lco,sI,yco,xco,$co,fh,Sse,kco,Sco,lI,Rco,Pco,Bco,ws,Rse,Ico,Nco,iI,qco,jco,dI,Dco,Gco,Oco,As,Pse,Vco,Xco,cI,zco,Wco,fI,Qco,Hco,Uco,Ls,Bse,Jco,Yco,mI,Kco,Zco,gI,efo,ofo,rfo,ys,Ise,tfo,afo,hI,nfo,sfo,pI,lfo,ifo,dfo,xs,Nse,cfo,ffo,_I,mfo,gfo,uI,hfo,pfo,_fo,$s,qse,ufo,bfo,bI,vfo,Ffo,vI,Tfo,Mfo,Efo,mh,jse,Cfo,wfo,FI,Afo,Lfo,yfo,gh,Dse,xfo,$fo,TI,kfo,Sfo,Rfo,ks,Gse,Pfo,Bfo,MI,Ifo,Nfo,EI,qfo,jfo,Dfo,Ss,Ose,Gfo,Ofo,CI,Vfo,Xfo,wI,zfo,Wfo,Qfo,Rs,Vse,Hfo,Ufo,AI,Jfo,Yfo,LI,Kfo,Zfo,emo,hh,Xse,omo,rmo,yI,tmo,amo,nmo,ph,zse,smo,lmo,xI,imo,dmo,cmo,_h,Wse,fmo,mmo,$I,gmo,hmo,pmo,Ps,Qse,_mo,umo,kI,bmo,vmo,SI,Fmo,Tmo,Mmo,Bs,Hse,Emo,Cmo,RI,wmo,Amo,PI,Lmo,ymo,xmo,uh,Use,$mo,kmo,BI,Smo,Rmo,Pmo,bh,Jse,Bmo,Imo,II,Nmo,qmo,jmo,vh,Yse,Dmo,Gmo,NI,Omo,Vmo,Xmo,Is,Kse,zmo,Wmo,qI,Qmo,Hmo,jI,Umo,Jmo,Ymo,Fh,Zse,Kmo,Zmo,DI,ego,ogo,rgo,Th,ele,tgo,ago,GI,ngo,sgo,lgo,Ns,ole,igo,dgo,OI,cgo,fgo,VI,mgo,ggo,hgo,qs,rle,pgo,_go,XI,ugo,bgo,zI,vgo,Fgo,Tgo,js,tle,Mgo,Ego,WI,Cgo,wgo,QI,Ago,Lgo,ygo,Ds,ale,xgo,$go,HI,kgo,Sgo,UI,Rgo,Pgo,Bgo,Mh,Igo,Eh,I6,Ngo,nle,qgo,EGe,ki,Ch,sle,N6,jgo,lle,Dgo,CGe,Lo,q6,Ggo,j6,Ogo,JI,Vgo,Xgo,zgo,D6,Wgo,ile,Qgo,Hgo,Ugo,He,G6,Jgo,dle,Ygo,Kgo,ka,Zgo,cle,eho,oho,fle,rho,tho,mle,aho,nho,sho,Y,wh,gle,lho,iho,YI,dho,cho,fho,Ah,hle,mho,gho,KI,hho,pho,_ho,Lh,ple,uho,bho,ZI,vho,Fho,Tho,yh,_le,Mho,Eho,eN,Cho,who,Aho,xh,ule,Lho,yho,oN,xho,$ho,kho,$h,ble,Sho,Rho,rN,Pho,Bho,Iho,kh,vle,Nho,qho,tN,jho,Dho,Gho,Sh,Fle,Oho,Vho,aN,Xho,zho,Who,Rh,Tle,Qho,Hho,nN,Uho,Jho,Yho,Ph,Mle,Kho,Zho,sN,epo,opo,rpo,Bh,Ele,tpo,apo,lN,npo,spo,lpo,Ih,Cle,ipo,dpo,iN,cpo,fpo,mpo,Nh,wle,gpo,hpo,dN,ppo,_po,upo,qh,Ale,bpo,vpo,cN,Fpo,Tpo,Mpo,jh,Lle,Epo,Cpo,fN,wpo,Apo,Lpo,Dh,yle,ypo,xpo,mN,$po,kpo,Spo,Gh,xle,Rpo,Ppo,gN,Bpo,Ipo,Npo,Oh,$le,qpo,jpo,hN,Dpo,Gpo,Opo,Vh,kle,Vpo,Xpo,pN,zpo,Wpo,Qpo,Xh,Sle,Hpo,Upo,_N,Jpo,Ypo,Kpo,zh,Rle,Zpo,e_o,uN,o_o,r_o,t_o,Wh,Ple,a_o,n_o,bN,s_o,l_o,i_o,Qh,Ble,d_o,c_o,vN,f_o,m_o,g_o,Hh,Ile,h_o,p_o,FN,__o,u_o,b_o,Uh,Nle,v_o,F_o,TN,T_o,M_o,E_o,Jh,qle,C_o,w_o,MN,A_o,L_o,y_o,Yh,jle,x_o,$_o,EN,k_o,S_o,R_o,Kh,Dle,P_o,B_o,CN,I_o,N_o,q_o,Zh,Gle,j_o,D_o,wN,G_o,O_o,V_o,ep,Ole,X_o,z_o,AN,W_o,Q_o,H_o,op,Vle,U_o,J_o,LN,Y_o,K_o,Z_o,rp,Xle,euo,ouo,yN,ruo,tuo,auo,tp,zle,nuo,suo,xN,luo,iuo,duo,ap,cuo,np,fuo,sp,O6,muo,Wle,guo,wGe,Si,lp,Qle,V6,huo,Hle,puo,AGe,yo,X6,_uo,z6,uuo,$N,buo,vuo,Fuo,W6,Tuo,Ule,Muo,Euo,Cuo,Ue,Q6,wuo,Jle,Auo,Luo,Ri,yuo,Yle,xuo,$uo,Kle,kuo,Suo,Ruo,he,ip,Zle,Puo,Buo,kN,Iuo,Nuo,quo,dp,eie,juo,Duo,oie,Guo,Ouo,Vuo,cp,rie,Xuo,zuo,SN,Wuo,Quo,Huo,fp,tie,Uuo,Juo,RN,Yuo,Kuo,Zuo,mp,aie,e1o,o1o,PN,r1o,t1o,a1o,gp,nie,n1o,s1o,BN,l1o,i1o,d1o,hp,sie,c1o,f1o,IN,m1o,g1o,h1o,pp,lie,p1o,_1o,NN,u1o,b1o,v1o,_p,iie,F1o,T1o,qN,M1o,E1o,C1o,up,die,w1o,A1o,jN,L1o,y1o,x1o,bp,cie,$1o,k1o,DN,S1o,R1o,P1o,vp,fie,B1o,I1o,GN,N1o,q1o,j1o,Fp,mie,D1o,G1o,ON,O1o,V1o,X1o,Tp,gie,z1o,W1o,VN,Q1o,H1o,U1o,Mp,hie,J1o,Y1o,XN,K1o,Z1o,e7o,Ep,pie,o7o,r7o,zN,t7o,a7o,n7o,Cp,_ie,s7o,l7o,WN,i7o,d7o,c7o,wp,f7o,Ap,m7o,Lp,H6,g7o,uie,h7o,LGe,Pi,yp,bie,U6,p7o,vie,_7o,yGe,xo,J6,u7o,Bi,b7o,QN,v7o,F7o,HN,T7o,M7o,E7o,Y6,C7o,Fie,w7o,A7o,L7o,nt,K6,y7o,Tie,x7o,$7o,Ii,k7o,Mie,S7o,R7o,UN,P7o,B7o,I7o,xp,N7o,Je,Z6,q7o,Eie,j7o,D7o,Sa,G7o,Cie,O7o,V7o,wie,X7o,z7o,Aie,W7o,Q7o,H7o,y,$p,Lie,U7o,J7o,JN,Y7o,K7o,Z7o,kp,yie,e9o,o9o,YN,r9o,t9o,a9o,Sp,xie,n9o,s9o,KN,l9o,i9o,d9o,Rp,$ie,c9o,f9o,ZN,m9o,g9o,h9o,Pp,kie,p9o,_9o,eq,u9o,b9o,v9o,Bp,Sie,F9o,T9o,oq,M9o,E9o,C9o,Ip,Rie,w9o,A9o,rq,L9o,y9o,x9o,Np,Pie,$9o,k9o,tq,S9o,R9o,P9o,qp,Bie,B9o,I9o,aq,N9o,q9o,j9o,jp,Iie,D9o,G9o,nq,O9o,V9o,X9o,Dp,Nie,z9o,W9o,sq,Q9o,H9o,U9o,Gp,qie,J9o,Y9o,lq,K9o,Z9o,ebo,Op,jie,obo,rbo,iq,tbo,abo,nbo,Vp,Die,sbo,lbo,dq,ibo,dbo,cbo,Xp,Gie,fbo,mbo,cq,gbo,hbo,pbo,zp,Oie,_bo,ubo,fq,bbo,vbo,Fbo,Wp,Vie,Tbo,Mbo,mq,Ebo,Cbo,wbo,Qp,Xie,Abo,Lbo,gq,ybo,xbo,$bo,Hp,zie,kbo,Sbo,hq,Rbo,Pbo,Bbo,Up,Wie,Ibo,Nbo,pq,qbo,jbo,Dbo,Jp,Qie,Gbo,Obo,_q,Vbo,Xbo,zbo,Yp,Hie,Wbo,Qbo,uq,Hbo,Ubo,Jbo,Kp,Uie,Ybo,Kbo,bq,Zbo,e2o,o2o,Zp,Jie,r2o,t2o,vq,a2o,n2o,s2o,e_,Yie,l2o,i2o,Fq,d2o,c2o,f2o,o_,Kie,m2o,g2o,Tq,h2o,p2o,_2o,r_,Zie,u2o,b2o,Mq,v2o,F2o,T2o,t_,ede,M2o,E2o,Eq,C2o,w2o,A2o,a_,ode,L2o,y2o,Cq,x2o,$2o,k2o,n_,rde,S2o,R2o,wq,P2o,B2o,I2o,s_,tde,N2o,q2o,Aq,j2o,D2o,G2o,l_,ade,O2o,V2o,Lq,X2o,z2o,W2o,i_,nde,Q2o,H2o,yq,U2o,J2o,Y2o,Gs,sde,K2o,Z2o,xq,evo,ovo,$q,rvo,tvo,avo,d_,lde,nvo,svo,kq,lvo,ivo,dvo,c_,ide,cvo,fvo,Sq,mvo,gvo,hvo,f_,dde,pvo,_vo,Rq,uvo,bvo,vvo,m_,cde,Fvo,Tvo,Pq,Mvo,Evo,Cvo,g_,fde,wvo,Avo,Bq,Lvo,yvo,xvo,h_,mde,$vo,kvo,Iq,Svo,Rvo,Pvo,p_,gde,Bvo,Ivo,Nq,Nvo,qvo,jvo,__,hde,Dvo,Gvo,qq,Ovo,Vvo,Xvo,u_,pde,zvo,Wvo,jq,Qvo,Hvo,Uvo,b_,_de,Jvo,Yvo,Dq,Kvo,Zvo,eFo,v_,ude,oFo,rFo,Gq,tFo,aFo,nFo,F_,bde,sFo,lFo,Oq,iFo,dFo,cFo,T_,vde,fFo,mFo,Vq,gFo,hFo,pFo,M_,Fde,_Fo,uFo,Xq,bFo,vFo,FFo,E_,Tde,TFo,MFo,zq,EFo,CFo,wFo,C_,Mde,AFo,LFo,Wq,yFo,xFo,$Fo,w_,Ede,kFo,SFo,Qq,RFo,PFo,BFo,A_,Cde,IFo,NFo,Hq,qFo,jFo,DFo,L_,wde,GFo,OFo,Uq,VFo,XFo,zFo,y_,Ade,WFo,QFo,Jq,HFo,UFo,JFo,x_,Lde,YFo,KFo,Yq,ZFo,eTo,oTo,$_,yde,rTo,tTo,Kq,aTo,nTo,sTo,k_,xde,lTo,iTo,Zq,dTo,cTo,fTo,S_,$de,mTo,gTo,ej,hTo,pTo,_To,R_,kde,uTo,bTo,oj,vTo,FTo,TTo,P_,Sde,MTo,ETo,rj,CTo,wTo,ATo,B_,Rde,LTo,yTo,tj,xTo,$To,kTo,I_,Pde,STo,RTo,aj,PTo,BTo,ITo,N_,Bde,NTo,qTo,nj,jTo,DTo,GTo,q_,Ide,OTo,VTo,sj,XTo,zTo,WTo,j_,Nde,QTo,HTo,lj,UTo,JTo,YTo,D_,qde,KTo,ZTo,ij,eMo,oMo,rMo,G_,jde,tMo,aMo,dj,nMo,sMo,lMo,O_,Dde,iMo,dMo,cj,cMo,fMo,mMo,V_,Gde,gMo,hMo,fj,pMo,_Mo,uMo,X_,Ode,bMo,vMo,mj,FMo,TMo,MMo,z_,Vde,EMo,CMo,gj,wMo,AMo,LMo,W_,Xde,yMo,xMo,hj,$Mo,kMo,SMo,Q_,zde,RMo,PMo,pj,BMo,IMo,NMo,H_,Wde,qMo,jMo,_j,DMo,GMo,OMo,U_,Qde,VMo,XMo,uj,zMo,WMo,QMo,J_,Hde,HMo,UMo,bj,JMo,YMo,KMo,Y_,Ude,ZMo,eEo,vj,oEo,rEo,tEo,K_,Jde,aEo,nEo,Fj,sEo,lEo,iEo,Z_,Yde,dEo,cEo,Tj,fEo,mEo,gEo,eu,Kde,hEo,pEo,Mj,_Eo,uEo,bEo,ou,Zde,vEo,FEo,Ej,TEo,MEo,EEo,ru,ece,CEo,wEo,Cj,AEo,LEo,yEo,tu,oce,xEo,$Eo,wj,kEo,SEo,REo,au,rce,PEo,BEo,Aj,IEo,NEo,qEo,nu,tce,jEo,DEo,Lj,GEo,OEo,VEo,su,ace,XEo,zEo,yj,WEo,QEo,HEo,lu,nce,UEo,JEo,xj,YEo,KEo,ZEo,iu,sce,e4o,o4o,$j,r4o,t4o,a4o,du,lce,n4o,s4o,kj,l4o,i4o,d4o,cu,ice,c4o,f4o,Sj,m4o,g4o,h4o,fu,dce,p4o,_4o,Rj,u4o,b4o,v4o,mu,cce,F4o,T4o,Pj,M4o,E4o,C4o,gu,fce,w4o,A4o,Bj,L4o,y4o,x4o,hu,mce,$4o,k4o,Ij,S4o,R4o,P4o,pu,gce,B4o,I4o,Nj,N4o,q4o,j4o,_u,hce,D4o,G4o,qj,O4o,V4o,X4o,uu,pce,z4o,W4o,jj,Q4o,H4o,U4o,bu,_ce,J4o,Y4o,Dj,K4o,Z4o,eCo,vu,uce,oCo,rCo,Gj,tCo,aCo,nCo,Fu,bce,sCo,lCo,Oj,iCo,dCo,cCo,Tu,vce,fCo,mCo,Vj,gCo,hCo,pCo,Mu,Fce,_Co,uCo,Xj,bCo,vCo,FCo,Eu,Tce,TCo,MCo,zj,ECo,CCo,wCo,Cu,Mce,ACo,LCo,Wj,yCo,xCo,$Co,wu,Ece,kCo,SCo,Qj,RCo,PCo,BCo,Au,Cce,ICo,NCo,Hj,qCo,jCo,DCo,Lu,wce,GCo,OCo,Uj,VCo,XCo,zCo,yu,WCo,Ace,QCo,HCo,Lce,UCo,JCo,xu,xGe,Ni,$u,yce,eL,YCo,xce,KCo,$Ge,$o,oL,ZCo,qi,e5o,Jj,o5o,r5o,Yj,t5o,a5o,n5o,rL,s5o,$ce,l5o,i5o,d5o,st,tL,c5o,kce,f5o,m5o,ji,g5o,Sce,h5o,p5o,Kj,_5o,u5o,b5o,ku,v5o,Ye,aL,F5o,Rce,T5o,M5o,Ra,E5o,Pce,C5o,w5o,Bce,A5o,L5o,Ice,y5o,x5o,$5o,G,Su,Nce,k5o,S5o,Zj,R5o,P5o,B5o,Ru,qce,I5o,N5o,eD,q5o,j5o,D5o,Pu,jce,G5o,O5o,oD,V5o,X5o,z5o,Bu,Dce,W5o,Q5o,rD,H5o,U5o,J5o,Iu,Gce,Y5o,K5o,tD,Z5o,e3o,o3o,Nu,Oce,r3o,t3o,aD,a3o,n3o,s3o,qu,Vce,l3o,i3o,nD,d3o,c3o,f3o,ju,Xce,m3o,g3o,sD,h3o,p3o,_3o,Du,zce,u3o,b3o,lD,v3o,F3o,T3o,Gu,Wce,M3o,E3o,iD,C3o,w3o,A3o,Ou,Qce,L3o,y3o,dD,x3o,$3o,k3o,Vu,Hce,S3o,R3o,cD,P3o,B3o,I3o,Xu,Uce,N3o,q3o,fD,j3o,D3o,G3o,zu,Jce,O3o,V3o,mD,X3o,z3o,W3o,Wu,Yce,Q3o,H3o,gD,U3o,J3o,Y3o,Qu,Kce,K3o,Z3o,hD,e0o,o0o,r0o,Hu,Zce,t0o,a0o,pD,n0o,s0o,l0o,Uu,efe,i0o,d0o,_D,c0o,f0o,m0o,Ju,ofe,g0o,h0o,uD,p0o,_0o,u0o,Yu,rfe,b0o,v0o,bD,F0o,T0o,M0o,Ku,tfe,E0o,C0o,vD,w0o,A0o,L0o,Zu,afe,y0o,x0o,FD,$0o,k0o,S0o,e1,nfe,R0o,P0o,TD,B0o,I0o,N0o,o1,sfe,q0o,j0o,MD,D0o,G0o,O0o,r1,lfe,V0o,X0o,ED,z0o,W0o,Q0o,t1,ife,H0o,U0o,CD,J0o,Y0o,K0o,a1,dfe,Z0o,ewo,wD,owo,rwo,two,n1,cfe,awo,nwo,AD,swo,lwo,iwo,s1,ffe,dwo,cwo,LD,fwo,mwo,gwo,l1,mfe,hwo,pwo,yD,_wo,uwo,bwo,i1,gfe,vwo,Fwo,xD,Two,Mwo,Ewo,d1,hfe,Cwo,wwo,$D,Awo,Lwo,ywo,c1,pfe,xwo,$wo,kD,kwo,Swo,Rwo,f1,_fe,Pwo,Bwo,SD,Iwo,Nwo,qwo,m1,ufe,jwo,Dwo,RD,Gwo,Owo,Vwo,g1,bfe,Xwo,zwo,PD,Wwo,Qwo,Hwo,h1,vfe,Uwo,Jwo,BD,Ywo,Kwo,Zwo,p1,Ffe,eAo,oAo,ID,rAo,tAo,aAo,_1,Tfe,nAo,sAo,ND,lAo,iAo,dAo,u1,Mfe,cAo,fAo,qD,mAo,gAo,hAo,b1,Efe,pAo,_Ao,jD,uAo,bAo,vAo,v1,Cfe,FAo,TAo,DD,MAo,EAo,CAo,F1,wfe,wAo,AAo,GD,LAo,yAo,xAo,T1,$Ao,Afe,kAo,SAo,Lfe,RAo,PAo,M1,kGe,Di,E1,yfe,nL,BAo,xfe,IAo,SGe,ko,sL,NAo,Gi,qAo,OD,jAo,DAo,VD,GAo,OAo,VAo,lL,XAo,$fe,zAo,WAo,QAo,lt,iL,HAo,kfe,UAo,JAo,Oi,YAo,Sfe,KAo,ZAo,XD,e6o,o6o,r6o,C1,t6o,Ke,dL,a6o,Rfe,n6o,s6o,Pa,l6o,Pfe,i6o,d6o,Bfe,c6o,f6o,Ife,m6o,g6o,h6o,z,w1,Nfe,p6o,_6o,zD,u6o,b6o,v6o,A1,qfe,F6o,T6o,WD,M6o,E6o,C6o,L1,jfe,w6o,A6o,QD,L6o,y6o,x6o,y1,Dfe,$6o,k6o,HD,S6o,R6o,P6o,x1,Gfe,B6o,I6o,UD,N6o,q6o,j6o,$1,Ofe,D6o,G6o,JD,O6o,V6o,X6o,k1,Vfe,z6o,W6o,YD,Q6o,H6o,U6o,S1,Xfe,J6o,Y6o,KD,K6o,Z6o,eLo,R1,zfe,oLo,rLo,ZD,tLo,aLo,nLo,P1,Wfe,sLo,lLo,eG,iLo,dLo,cLo,B1,Qfe,fLo,mLo,oG,gLo,hLo,pLo,I1,Hfe,_Lo,uLo,rG,bLo,vLo,FLo,N1,Ufe,TLo,MLo,tG,ELo,CLo,wLo,q1,Jfe,ALo,LLo,aG,yLo,xLo,$Lo,j1,Yfe,kLo,SLo,nG,RLo,PLo,BLo,D1,Kfe,ILo,NLo,sG,qLo,jLo,DLo,G1,Zfe,GLo,OLo,lG,VLo,XLo,zLo,O1,eme,WLo,QLo,iG,HLo,ULo,JLo,V1,ome,YLo,KLo,dG,ZLo,eyo,oyo,X1,rme,ryo,tyo,cG,ayo,nyo,syo,z1,tme,lyo,iyo,fG,dyo,cyo,fyo,W1,ame,myo,gyo,mG,hyo,pyo,_yo,Q1,nme,uyo,byo,gG,vyo,Fyo,Tyo,H1,sme,Myo,Eyo,hG,Cyo,wyo,Ayo,U1,lme,Lyo,yyo,pG,xyo,$yo,kyo,J1,ime,Syo,Ryo,_G,Pyo,Byo,Iyo,Y1,dme,Nyo,qyo,uG,jyo,Dyo,Gyo,K1,cme,Oyo,Vyo,bG,Xyo,zyo,Wyo,Z1,fme,Qyo,Hyo,vG,Uyo,Jyo,Yyo,e7,mme,Kyo,Zyo,FG,e8o,o8o,r8o,o7,gme,t8o,a8o,TG,n8o,s8o,l8o,r7,hme,i8o,d8o,MG,c8o,f8o,m8o,t7,pme,g8o,h8o,EG,p8o,_8o,u8o,a7,_me,b8o,v8o,CG,F8o,T8o,M8o,n7,ume,E8o,C8o,wG,w8o,A8o,L8o,s7,bme,y8o,x8o,AG,$8o,k8o,S8o,l7,vme,R8o,P8o,LG,B8o,I8o,N8o,i7,Fme,q8o,j8o,yG,D8o,G8o,O8o,d7,V8o,Tme,X8o,z8o,Mme,W8o,Q8o,c7,RGe,Vi,f7,Eme,cL,H8o,Cme,U8o,PGe,So,fL,J8o,Xi,Y8o,xG,K8o,Z8o,$G,exo,oxo,rxo,mL,txo,wme,axo,nxo,sxo,it,gL,lxo,Ame,ixo,dxo,zi,cxo,Lme,fxo,mxo,kG,gxo,hxo,pxo,m7,_xo,Ze,hL,uxo,yme,bxo,vxo,Ba,Fxo,xme,Txo,Mxo,$me,Exo,Cxo,kme,wxo,Axo,Lxo,Q,g7,Sme,yxo,xxo,SG,$xo,kxo,Sxo,h7,Rme,Rxo,Pxo,RG,Bxo,Ixo,Nxo,p7,Pme,qxo,jxo,PG,Dxo,Gxo,Oxo,_7,Bme,Vxo,Xxo,BG,zxo,Wxo,Qxo,u7,Ime,Hxo,Uxo,IG,Jxo,Yxo,Kxo,b7,Nme,Zxo,e$o,NG,o$o,r$o,t$o,v7,qme,a$o,n$o,qG,s$o,l$o,i$o,F7,jme,d$o,c$o,jG,f$o,m$o,g$o,T7,Dme,h$o,p$o,DG,_$o,u$o,b$o,M7,Gme,v$o,F$o,GG,T$o,M$o,E$o,E7,Ome,C$o,w$o,OG,A$o,L$o,y$o,C7,Vme,x$o,$$o,VG,k$o,S$o,R$o,w7,Xme,P$o,B$o,XG,I$o,N$o,q$o,A7,zme,j$o,D$o,zG,G$o,O$o,V$o,L7,Wme,X$o,z$o,WG,W$o,Q$o,H$o,y7,Qme,U$o,J$o,QG,Y$o,K$o,Z$o,x7,Hme,eko,oko,HG,rko,tko,ako,$7,Ume,nko,sko,UG,lko,iko,dko,k7,Jme,cko,fko,JG,mko,gko,hko,S7,Yme,pko,_ko,YG,uko,bko,vko,R7,Kme,Fko,Tko,KG,Mko,Eko,Cko,P7,Zme,wko,Ako,ZG,Lko,yko,xko,B7,ege,$ko,kko,eO,Sko,Rko,Pko,I7,oge,Bko,Iko,oO,Nko,qko,jko,N7,rge,Dko,Gko,rO,Oko,Vko,Xko,q7,tge,zko,Wko,tO,Qko,Hko,Uko,j7,age,Jko,Yko,aO,Kko,Zko,eSo,D7,nge,oSo,rSo,nO,tSo,aSo,nSo,G7,sge,sSo,lSo,sO,iSo,dSo,cSo,O7,lge,fSo,mSo,lO,gSo,hSo,pSo,V7,ige,_So,uSo,iO,bSo,vSo,FSo,X7,dge,TSo,MSo,cge,ESo,CSo,wSo,z7,fge,ASo,LSo,dO,ySo,xSo,$So,W7,mge,kSo,SSo,cO,RSo,PSo,BSo,Q7,gge,ISo,NSo,fO,qSo,jSo,DSo,H7,hge,GSo,OSo,mO,VSo,XSo,zSo,U7,WSo,pge,QSo,HSo,_ge,USo,JSo,J7,BGe,Wi,Y7,uge,pL,YSo,bge,KSo,IGe,Ro,_L,ZSo,Qi,eRo,gO,oRo,rRo,hO,tRo,aRo,nRo,uL,sRo,vge,lRo,iRo,dRo,dt,bL,cRo,Fge,fRo,mRo,Hi,gRo,Tge,hRo,pRo,pO,_Ro,uRo,bRo,K7,vRo,eo,vL,FRo,Mge,TRo,MRo,Ia,ERo,Ege,CRo,wRo,Cge,ARo,LRo,wge,yRo,xRo,$Ro,pe,Z7,Age,kRo,SRo,_O,RRo,PRo,BRo,e9,Lge,IRo,NRo,uO,qRo,jRo,DRo,o9,yge,GRo,ORo,bO,VRo,XRo,zRo,r9,xge,WRo,QRo,vO,HRo,URo,JRo,t9,$ge,YRo,KRo,FO,ZRo,ePo,oPo,a9,kge,rPo,tPo,TO,aPo,nPo,sPo,n9,Sge,lPo,iPo,MO,dPo,cPo,fPo,s9,Rge,mPo,gPo,EO,hPo,pPo,_Po,l9,Pge,uPo,bPo,CO,vPo,FPo,TPo,i9,Bge,MPo,EPo,wO,CPo,wPo,APo,d9,Ige,LPo,yPo,AO,xPo,$Po,kPo,c9,Nge,SPo,RPo,LO,PPo,BPo,IPo,f9,qge,NPo,qPo,yO,jPo,DPo,GPo,m9,jge,OPo,VPo,xO,XPo,zPo,WPo,g9,Dge,QPo,HPo,$O,UPo,JPo,YPo,h9,Gge,KPo,ZPo,kO,eBo,oBo,rBo,p9,Oge,tBo,aBo,SO,nBo,sBo,lBo,_9,iBo,Vge,dBo,cBo,Xge,fBo,mBo,u9,NGe,Ui,b9,zge,FL,gBo,Wge,hBo,qGe,Po,TL,pBo,Ji,_Bo,RO,uBo,bBo,PO,vBo,FBo,TBo,ML,MBo,Qge,EBo,CBo,wBo,ct,EL,ABo,Hge,LBo,yBo,Yi,xBo,Uge,$Bo,kBo,BO,SBo,RBo,PBo,v9,BBo,oo,CL,IBo,Jge,NBo,qBo,Na,jBo,Yge,DBo,GBo,Kge,OBo,VBo,Zge,XBo,zBo,WBo,N,F9,ehe,QBo,HBo,IO,UBo,JBo,YBo,T9,ohe,KBo,ZBo,NO,eIo,oIo,rIo,M9,rhe,tIo,aIo,qO,nIo,sIo,lIo,E9,the,iIo,dIo,jO,cIo,fIo,mIo,C9,ahe,gIo,hIo,DO,pIo,_Io,uIo,w9,nhe,bIo,vIo,GO,FIo,TIo,MIo,A9,she,EIo,CIo,OO,wIo,AIo,LIo,L9,lhe,yIo,xIo,VO,$Io,kIo,SIo,y9,ihe,RIo,PIo,XO,BIo,IIo,NIo,x9,dhe,qIo,jIo,zO,DIo,GIo,OIo,$9,che,VIo,XIo,WO,zIo,WIo,QIo,k9,fhe,HIo,UIo,QO,JIo,YIo,KIo,S9,mhe,ZIo,eNo,HO,oNo,rNo,tNo,R9,ghe,aNo,nNo,UO,sNo,lNo,iNo,P9,hhe,dNo,cNo,JO,fNo,mNo,gNo,B9,phe,hNo,pNo,YO,_No,uNo,bNo,I9,_he,vNo,FNo,KO,TNo,MNo,ENo,N9,uhe,CNo,wNo,ZO,ANo,LNo,yNo,q9,bhe,xNo,$No,eV,kNo,SNo,RNo,j9,vhe,PNo,BNo,oV,INo,NNo,qNo,D9,Fhe,jNo,DNo,rV,GNo,ONo,VNo,G9,The,XNo,zNo,tV,WNo,QNo,HNo,O9,Mhe,UNo,JNo,aV,YNo,KNo,ZNo,V9,Ehe,eqo,oqo,nV,rqo,tqo,aqo,X9,Che,nqo,sqo,sV,lqo,iqo,dqo,z9,whe,cqo,fqo,lV,mqo,gqo,hqo,W9,Ahe,pqo,_qo,iV,uqo,bqo,vqo,Q9,Lhe,Fqo,Tqo,dV,Mqo,Eqo,Cqo,H9,yhe,wqo,Aqo,cV,Lqo,yqo,xqo,U9,xhe,$qo,kqo,fV,Sqo,Rqo,Pqo,J9,$he,Bqo,Iqo,mV,Nqo,qqo,jqo,Y9,khe,Dqo,Gqo,gV,Oqo,Vqo,Xqo,K9,She,zqo,Wqo,hV,Qqo,Hqo,Uqo,Z9,Rhe,Jqo,Yqo,pV,Kqo,Zqo,ejo,eb,Phe,ojo,rjo,_V,tjo,ajo,njo,ob,Bhe,sjo,ljo,uV,ijo,djo,cjo,rb,Ihe,fjo,mjo,bV,gjo,hjo,pjo,tb,Nhe,_jo,ujo,vV,bjo,vjo,Fjo,ab,qhe,Tjo,Mjo,FV,Ejo,Cjo,wjo,nb,jhe,Ajo,Ljo,TV,yjo,xjo,$jo,sb,Dhe,kjo,Sjo,MV,Rjo,Pjo,Bjo,lb,Ghe,Ijo,Njo,EV,qjo,jjo,Djo,ib,Ohe,Gjo,Ojo,CV,Vjo,Xjo,zjo,db,Vhe,Wjo,Qjo,wV,Hjo,Ujo,Jjo,cb,Xhe,Yjo,Kjo,AV,Zjo,eDo,oDo,fb,zhe,rDo,tDo,LV,aDo,nDo,sDo,mb,Whe,lDo,iDo,yV,dDo,cDo,fDo,gb,Qhe,mDo,gDo,xV,hDo,pDo,_Do,hb,uDo,Hhe,bDo,vDo,Uhe,FDo,TDo,pb,jGe,Ki,_b,Jhe,wL,MDo,Yhe,EDo,DGe,Bo,AL,CDo,Zi,wDo,$V,ADo,LDo,kV,yDo,xDo,$Do,LL,kDo,Khe,SDo,RDo,PDo,ft,yL,BDo,Zhe,IDo,NDo,ed,qDo,epe,jDo,DDo,SV,GDo,ODo,VDo,ub,XDo,ro,xL,zDo,ope,WDo,QDo,qa,HDo,rpe,UDo,JDo,tpe,YDo,KDo,ape,ZDo,eGo,oGo,Z,bb,npe,rGo,tGo,RV,aGo,nGo,sGo,vb,spe,lGo,iGo,PV,dGo,cGo,fGo,Fb,lpe,mGo,gGo,BV,hGo,pGo,_Go,Tb,ipe,uGo,bGo,IV,vGo,FGo,TGo,Mb,dpe,MGo,EGo,NV,CGo,wGo,AGo,Eb,cpe,LGo,yGo,qV,xGo,$Go,kGo,Cb,fpe,SGo,RGo,jV,PGo,BGo,IGo,wb,mpe,NGo,qGo,DV,jGo,DGo,GGo,Ab,gpe,OGo,VGo,GV,XGo,zGo,WGo,Lb,hpe,QGo,HGo,OV,UGo,JGo,YGo,yb,ppe,KGo,ZGo,VV,eOo,oOo,rOo,xb,_pe,tOo,aOo,XV,nOo,sOo,lOo,$b,upe,iOo,dOo,zV,cOo,fOo,mOo,kb,bpe,gOo,hOo,WV,pOo,_Oo,uOo,Sb,vpe,bOo,vOo,QV,FOo,TOo,MOo,Rb,Fpe,EOo,COo,HV,wOo,AOo,LOo,Pb,Tpe,yOo,xOo,UV,$Oo,kOo,SOo,Bb,Mpe,ROo,POo,JV,BOo,IOo,NOo,Ib,Epe,qOo,jOo,YV,DOo,GOo,OOo,Nb,Cpe,VOo,XOo,KV,zOo,WOo,QOo,qb,wpe,HOo,UOo,ZV,JOo,YOo,KOo,jb,Ape,ZOo,eVo,eX,oVo,rVo,tVo,Db,Lpe,aVo,nVo,oX,sVo,lVo,iVo,Gb,ype,dVo,cVo,rX,fVo,mVo,gVo,Ob,xpe,hVo,pVo,tX,_Vo,uVo,bVo,Vb,$pe,vVo,FVo,aX,TVo,MVo,EVo,Xb,kpe,CVo,wVo,nX,AVo,LVo,yVo,zb,Spe,xVo,$Vo,sX,kVo,SVo,RVo,Wb,Rpe,PVo,BVo,lX,IVo,NVo,qVo,Qb,jVo,Ppe,DVo,GVo,Bpe,OVo,VVo,Hb,GGe,od,Ub,Ipe,$L,XVo,Npe,zVo,OGe,Io,kL,WVo,rd,QVo,iX,HVo,UVo,dX,JVo,YVo,KVo,SL,ZVo,qpe,eXo,oXo,rXo,mt,RL,tXo,jpe,aXo,nXo,td,sXo,Dpe,lXo,iXo,cX,dXo,cXo,fXo,Jb,mXo,to,PL,gXo,Gpe,hXo,pXo,ja,_Xo,Ope,uXo,bXo,Vpe,vXo,FXo,Xpe,TXo,MXo,EXo,Zr,Yb,zpe,CXo,wXo,fX,AXo,LXo,yXo,Kb,Wpe,xXo,$Xo,mX,kXo,SXo,RXo,Zb,Qpe,PXo,BXo,gX,IXo,NXo,qXo,e2,Hpe,jXo,DXo,hX,GXo,OXo,VXo,o2,Upe,XXo,zXo,pX,WXo,QXo,HXo,r2,UXo,Jpe,JXo,YXo,Ype,KXo,ZXo,t2,VGe,ad,a2,Kpe,BL,ezo,Zpe,ozo,XGe,No,IL,rzo,nd,tzo,_X,azo,nzo,uX,szo,lzo,izo,NL,dzo,e_e,czo,fzo,mzo,gt,qL,gzo,o_e,hzo,pzo,sd,_zo,r_e,uzo,bzo,bX,vzo,Fzo,Tzo,n2,Mzo,ao,jL,Ezo,t_e,Czo,wzo,Da,Azo,a_e,Lzo,yzo,n_e,xzo,$zo,s_e,kzo,Szo,Rzo,H,s2,l_e,Pzo,Bzo,vX,Izo,Nzo,qzo,l2,i_e,jzo,Dzo,FX,Gzo,Ozo,Vzo,i2,d_e,Xzo,zzo,TX,Wzo,Qzo,Hzo,d2,c_e,Uzo,Jzo,MX,Yzo,Kzo,Zzo,c2,f_e,eWo,oWo,EX,rWo,tWo,aWo,f2,m_e,nWo,sWo,CX,lWo,iWo,dWo,m2,g_e,cWo,fWo,wX,mWo,gWo,hWo,g2,h_e,pWo,_Wo,AX,uWo,bWo,vWo,h2,p_e,FWo,TWo,LX,MWo,EWo,CWo,p2,__e,wWo,AWo,yX,LWo,yWo,xWo,_2,u_e,$Wo,kWo,xX,SWo,RWo,PWo,u2,b_e,BWo,IWo,$X,NWo,qWo,jWo,b2,v_e,DWo,GWo,kX,OWo,VWo,XWo,v2,F_e,zWo,WWo,SX,QWo,HWo,UWo,F2,T_e,JWo,YWo,RX,KWo,ZWo,eQo,T2,M_e,oQo,rQo,PX,tQo,aQo,nQo,M2,E_e,sQo,lQo,BX,iQo,dQo,cQo,E2,C_e,fQo,mQo,IX,gQo,hQo,pQo,C2,w_e,_Qo,uQo,NX,bQo,vQo,FQo,w2,A_e,TQo,MQo,qX,EQo,CQo,wQo,A2,L_e,AQo,LQo,jX,yQo,xQo,$Qo,L2,y_e,kQo,SQo,DX,RQo,PQo,BQo,y2,x_e,IQo,NQo,GX,qQo,jQo,DQo,x2,$_e,GQo,OQo,OX,VQo,XQo,zQo,$2,k_e,WQo,QQo,VX,HQo,UQo,JQo,k2,S_e,YQo,KQo,XX,ZQo,eHo,oHo,S2,R_e,rHo,tHo,zX,aHo,nHo,sHo,R2,P_e,lHo,iHo,WX,dHo,cHo,fHo,P2,B_e,mHo,gHo,QX,hHo,pHo,_Ho,B2,I_e,uHo,bHo,HX,vHo,FHo,THo,I2,N_e,MHo,EHo,UX,CHo,wHo,AHo,N2,q_e,LHo,yHo,JX,xHo,$Ho,kHo,q2,j_e,SHo,RHo,YX,PHo,BHo,IHo,j2,D_e,NHo,qHo,KX,jHo,DHo,GHo,D2,G_e,OHo,VHo,ZX,XHo,zHo,WHo,G2,QHo,O_e,HHo,UHo,V_e,JHo,YHo,O2,zGe,ld,V2,X_e,DL,KHo,z_e,ZHo,WGe,qo,GL,eUo,id,oUo,ez,rUo,tUo,oz,aUo,nUo,sUo,OL,lUo,W_e,iUo,dUo,cUo,ht,VL,fUo,Q_e,mUo,gUo,dd,hUo,H_e,pUo,_Uo,rz,uUo,bUo,vUo,X2,FUo,no,XL,TUo,U_e,MUo,EUo,Ga,CUo,J_e,wUo,AUo,Y_e,LUo,yUo,K_e,xUo,$Uo,kUo,V,z2,Z_e,SUo,RUo,tz,PUo,BUo,IUo,W2,eue,NUo,qUo,az,jUo,DUo,GUo,Q2,oue,OUo,VUo,nz,XUo,zUo,WUo,H2,rue,QUo,HUo,sz,UUo,JUo,YUo,U2,tue,KUo,ZUo,lz,eJo,oJo,rJo,J2,aue,tJo,aJo,iz,nJo,sJo,lJo,Y2,nue,iJo,dJo,dz,cJo,fJo,mJo,K2,sue,gJo,hJo,cz,pJo,_Jo,uJo,Z2,lue,bJo,vJo,fz,FJo,TJo,MJo,ev,iue,EJo,CJo,mz,wJo,AJo,LJo,ov,due,yJo,xJo,gz,$Jo,kJo,SJo,rv,cue,RJo,PJo,hz,BJo,IJo,NJo,tv,fue,qJo,jJo,pz,DJo,GJo,OJo,av,mue,VJo,XJo,_z,zJo,WJo,QJo,nv,gue,HJo,UJo,uz,JJo,YJo,KJo,sv,hue,ZJo,eYo,bz,oYo,rYo,tYo,lv,pue,aYo,nYo,vz,sYo,lYo,iYo,iv,_ue,dYo,cYo,Fz,fYo,mYo,gYo,dv,uue,hYo,pYo,Tz,_Yo,uYo,bYo,cv,bue,vYo,FYo,Mz,TYo,MYo,EYo,fv,vue,CYo,wYo,Ez,AYo,LYo,yYo,mv,Fue,xYo,$Yo,Cz,kYo,SYo,RYo,gv,Tue,PYo,BYo,wz,IYo,NYo,qYo,hv,Mue,jYo,DYo,Az,GYo,OYo,VYo,pv,Eue,XYo,zYo,Lz,WYo,QYo,HYo,_v,Cue,UYo,JYo,yz,YYo,KYo,ZYo,uv,wue,eKo,oKo,xz,rKo,tKo,aKo,bv,Aue,nKo,sKo,$z,lKo,iKo,dKo,vv,Lue,cKo,fKo,kz,mKo,gKo,hKo,Fv,yue,pKo,_Ko,Sz,uKo,bKo,vKo,Tv,xue,FKo,TKo,Rz,MKo,EKo,CKo,Mv,$ue,wKo,AKo,Pz,LKo,yKo,xKo,Ev,kue,$Ko,kKo,Bz,SKo,RKo,PKo,Cv,Sue,BKo,IKo,Iz,NKo,qKo,jKo,wv,Rue,DKo,GKo,Nz,OKo,VKo,XKo,Av,Pue,zKo,WKo,qz,QKo,HKo,UKo,Lv,Bue,JKo,YKo,jz,KKo,ZKo,eZo,yv,Iue,oZo,rZo,Dz,tZo,aZo,nZo,xv,Nue,sZo,lZo,Gz,iZo,dZo,cZo,$v,que,fZo,mZo,Oz,gZo,hZo,pZo,kv,_Zo,jue,uZo,bZo,Due,vZo,FZo,Sv,QGe,cd,Rv,Gue,zL,TZo,Oue,MZo,HGe,jo,WL,EZo,fd,CZo,Vz,wZo,AZo,Xz,LZo,yZo,xZo,QL,$Zo,Vue,kZo,SZo,RZo,pt,HL,PZo,Xue,BZo,IZo,md,NZo,zue,qZo,jZo,zz,DZo,GZo,OZo,Pv,VZo,so,UL,XZo,Wue,zZo,WZo,Oa,QZo,Que,HZo,UZo,Hue,JZo,YZo,Uue,KZo,ZZo,eer,Jue,Bv,Yue,oer,rer,Wz,ter,aer,ner,Iv,ser,Kue,ler,ier,Zue,der,cer,Nv,UGe,gd,qv,e1e,JL,fer,o1e,mer,JGe,Do,YL,ger,hd,her,Qz,per,_er,Hz,uer,ber,ver,KL,Fer,r1e,Ter,Mer,Eer,_t,ZL,Cer,t1e,wer,Aer,pd,Ler,a1e,yer,xer,Uz,$er,ker,Ser,jv,Rer,lo,ey,Per,n1e,Ber,Ier,Va,Ner,s1e,qer,jer,l1e,Der,Ger,i1e,Oer,Ver,Xer,ue,Dv,d1e,zer,Wer,Jz,Qer,Her,Uer,Gv,c1e,Jer,Yer,Yz,Ker,Zer,eor,Ov,f1e,oor,ror,Kz,tor,aor,nor,Vv,m1e,sor,lor,Zz,ior,dor,cor,Os,g1e,mor,gor,eW,hor,por,oW,_or,uor,bor,Xv,h1e,vor,For,rW,Tor,Mor,Eor,Vs,p1e,Cor,wor,tW,Aor,Lor,aW,yor,xor,$or,zv,_1e,kor,Sor,nW,Ror,Por,Bor,ut,u1e,Ior,Nor,sW,qor,jor,lW,Dor,Gor,iW,Oor,Vor,Xor,Wv,b1e,zor,Wor,dW,Qor,Hor,Uor,Qv,v1e,Jor,Yor,cW,Kor,Zor,err,Hv,F1e,orr,rrr,fW,trr,arr,nrr,Uv,T1e,srr,lrr,mW,irr,drr,crr,Jv,M1e,frr,mrr,gW,grr,hrr,prr,Yv,E1e,_rr,urr,hW,brr,vrr,Frr,Kv,C1e,Trr,Mrr,pW,Err,Crr,wrr,Zv,Arr,w1e,Lrr,yrr,A1e,xrr,$rr,eF,YGe,_d,oF,L1e,oy,krr,y1e,Srr,KGe,Go,ry,Rrr,ud,Prr,_W,Brr,Irr,uW,Nrr,qrr,jrr,ty,Drr,x1e,Grr,Orr,Vrr,bt,ay,Xrr,$1e,zrr,Wrr,bd,Qrr,k1e,Hrr,Urr,bW,Jrr,Yrr,Krr,rF,Zrr,io,ny,etr,S1e,otr,rtr,Xa,ttr,R1e,atr,ntr,P1e,str,ltr,B1e,itr,dtr,ctr,I1e,tF,N1e,ftr,mtr,vW,gtr,htr,ptr,aF,_tr,q1e,utr,btr,j1e,vtr,Ftr,nF,ZGe,vd,sF,D1e,sy,Ttr,G1e,Mtr,eOe,Oo,ly,Etr,Fd,Ctr,FW,wtr,Atr,TW,Ltr,ytr,xtr,iy,$tr,O1e,ktr,Str,Rtr,vt,dy,Ptr,V1e,Btr,Itr,Td,Ntr,X1e,qtr,jtr,MW,Dtr,Gtr,Otr,lF,Vtr,co,cy,Xtr,z1e,ztr,Wtr,za,Qtr,W1e,Htr,Utr,Q1e,Jtr,Ytr,H1e,Ktr,Ztr,ear,U1e,iF,J1e,oar,rar,EW,tar,aar,nar,dF,sar,Y1e,lar,iar,K1e,dar,car,cF,oOe,Md,fF,Z1e,fy,far,e7e,mar,rOe,Vo,my,gar,Ed,har,CW,par,_ar,wW,uar,bar,Far,gy,Tar,o7e,Mar,Ear,Car,Ft,hy,war,r7e,Aar,Lar,Cd,yar,t7e,xar,$ar,AW,kar,Sar,Rar,mF,Par,fo,py,Bar,a7e,Iar,Nar,Wa,qar,n7e,jar,Dar,s7e,Gar,Oar,l7e,Var,Xar,zar,Pe,gF,i7e,War,Qar,LW,Har,Uar,Jar,hF,d7e,Yar,Kar,yW,Zar,enr,onr,pF,c7e,rnr,tnr,xW,anr,nnr,snr,_F,f7e,lnr,inr,$W,dnr,cnr,fnr,uF,m7e,mnr,gnr,kW,hnr,pnr,_nr,bF,g7e,unr,bnr,SW,vnr,Fnr,Tnr,vF,h7e,Mnr,Enr,RW,Cnr,wnr,Anr,FF,p7e,Lnr,ynr,PW,xnr,$nr,knr,TF,_7e,Snr,Rnr,BW,Pnr,Bnr,Inr,MF,Nnr,u7e,qnr,jnr,b7e,Dnr,Gnr,EF,tOe,wd,CF,v7e,_y,Onr,F7e,Vnr,aOe,Xo,uy,Xnr,Ad,znr,IW,Wnr,Qnr,NW,Hnr,Unr,Jnr,by,Ynr,T7e,Knr,Znr,esr,Tt,vy,osr,M7e,rsr,tsr,Ld,asr,E7e,nsr,ssr,qW,lsr,isr,dsr,wF,csr,mo,Fy,fsr,C7e,msr,gsr,Qa,hsr,w7e,psr,_sr,A7e,usr,bsr,L7e,vsr,Fsr,Tsr,et,AF,y7e,Msr,Esr,jW,Csr,wsr,Asr,LF,x7e,Lsr,ysr,DW,xsr,$sr,ksr,yF,$7e,Ssr,Rsr,GW,Psr,Bsr,Isr,xF,k7e,Nsr,qsr,OW,jsr,Dsr,Gsr,$F,S7e,Osr,Vsr,VW,Xsr,zsr,Wsr,kF,Qsr,R7e,Hsr,Usr,P7e,Jsr,Ysr,SF,nOe,yd,RF,B7e,Ty,Ksr,I7e,Zsr,sOe,zo,My,elr,xd,olr,XW,rlr,tlr,zW,alr,nlr,slr,Ey,llr,N7e,ilr,dlr,clr,Mt,Cy,flr,q7e,mlr,glr,$d,hlr,j7e,plr,_lr,WW,ulr,blr,vlr,PF,Flr,go,wy,Tlr,D7e,Mlr,Elr,Ha,Clr,G7e,wlr,Alr,O7e,Llr,ylr,V7e,xlr,$lr,klr,Le,BF,X7e,Slr,Rlr,QW,Plr,Blr,Ilr,IF,z7e,Nlr,qlr,HW,jlr,Dlr,Glr,NF,W7e,Olr,Vlr,UW,Xlr,zlr,Wlr,qF,Q7e,Qlr,Hlr,JW,Ulr,Jlr,Ylr,jF,H7e,Klr,Zlr,YW,eir,oir,rir,DF,U7e,tir,air,KW,nir,sir,lir,GF,J7e,iir,dir,ZW,cir,fir,mir,OF,Y7e,gir,hir,eQ,pir,_ir,uir,VF,K7e,bir,vir,oQ,Fir,Tir,Mir,XF,Z7e,Eir,Cir,rQ,wir,Air,Lir,zF,yir,e9e,xir,$ir,o9e,kir,Sir,WF,lOe,kd,QF,r9e,Ay,Rir,t9e,Pir,iOe,Wo,Ly,Bir,Sd,Iir,tQ,Nir,qir,aQ,jir,Dir,Gir,yy,Oir,a9e,Vir,Xir,zir,Et,xy,Wir,n9e,Qir,Hir,Rd,Uir,s9e,Jir,Yir,nQ,Kir,Zir,edr,HF,odr,ho,$y,rdr,l9e,tdr,adr,Ua,ndr,i9e,sdr,ldr,d9e,idr,ddr,c9e,cdr,fdr,mdr,ky,UF,f9e,gdr,hdr,sQ,pdr,_dr,udr,JF,m9e,bdr,vdr,lQ,Fdr,Tdr,Mdr,YF,Edr,g9e,Cdr,wdr,h9e,Adr,Ldr,KF,dOe,Pd,ZF,p9e,Sy,ydr,_9e,xdr,cOe,Qo,Ry,$dr,Bd,kdr,iQ,Sdr,Rdr,dQ,Pdr,Bdr,Idr,Py,Ndr,u9e,qdr,jdr,Ddr,Ct,By,Gdr,b9e,Odr,Vdr,Id,Xdr,v9e,zdr,Wdr,cQ,Qdr,Hdr,Udr,eT,Jdr,po,Iy,Ydr,F9e,Kdr,Zdr,Ja,ecr,T9e,ocr,rcr,M9e,tcr,acr,E9e,ncr,scr,lcr,ot,oT,C9e,icr,dcr,fQ,ccr,fcr,mcr,rT,w9e,gcr,hcr,mQ,pcr,_cr,ucr,tT,A9e,bcr,vcr,gQ,Fcr,Tcr,Mcr,aT,L9e,Ecr,Ccr,hQ,wcr,Acr,Lcr,nT,y9e,ycr,xcr,pQ,$cr,kcr,Scr,sT,Rcr,x9e,Pcr,Bcr,$9e,Icr,Ncr,lT,fOe,Nd,iT,k9e,Ny,qcr,S9e,jcr,mOe,Ho,qy,Dcr,qd,Gcr,_Q,Ocr,Vcr,uQ,Xcr,zcr,Wcr,jy,Qcr,R9e,Hcr,Ucr,Jcr,wt,Dy,Ycr,P9e,Kcr,Zcr,jd,efr,B9e,ofr,rfr,bQ,tfr,afr,nfr,dT,sfr,_o,Gy,lfr,I9e,ifr,dfr,Ya,cfr,N9e,ffr,mfr,q9e,gfr,hfr,j9e,pfr,_fr,ufr,Dd,cT,D9e,bfr,vfr,vQ,Ffr,Tfr,Mfr,fT,G9e,Efr,Cfr,FQ,wfr,Afr,Lfr,mT,O9e,yfr,xfr,TQ,$fr,kfr,Sfr,gT,Rfr,V9e,Pfr,Bfr,X9e,Ifr,Nfr,hT,gOe,Gd,pT,z9e,Oy,qfr,W9e,jfr,hOe,Uo,Vy,Dfr,Od,Gfr,MQ,Ofr,Vfr,EQ,Xfr,zfr,Wfr,Xy,Qfr,Q9e,Hfr,Ufr,Jfr,At,zy,Yfr,H9e,Kfr,Zfr,Vd,emr,U9e,omr,rmr,CQ,tmr,amr,nmr,_T,smr,uo,Wy,lmr,J9e,imr,dmr,Ka,cmr,Y9e,fmr,mmr,K9e,gmr,hmr,Z9e,pmr,_mr,umr,Qy,uT,ebe,bmr,vmr,wQ,Fmr,Tmr,Mmr,bT,obe,Emr,Cmr,AQ,wmr,Amr,Lmr,vT,ymr,rbe,xmr,$mr,tbe,kmr,Smr,FT,pOe,Xd,TT,abe,Hy,Rmr,nbe,Pmr,_Oe,Jo,Uy,Bmr,zd,Imr,LQ,Nmr,qmr,yQ,jmr,Dmr,Gmr,Jy,Omr,sbe,Vmr,Xmr,zmr,Lt,Yy,Wmr,lbe,Qmr,Hmr,Wd,Umr,ibe,Jmr,Ymr,xQ,Kmr,Zmr,egr,MT,ogr,bo,Ky,rgr,dbe,tgr,agr,Za,ngr,cbe,sgr,lgr,fbe,igr,dgr,mbe,cgr,fgr,mgr,gbe,ET,hbe,ggr,hgr,$Q,pgr,_gr,ugr,CT,bgr,pbe,vgr,Fgr,_be,Tgr,Mgr,wT,uOe,Qd,AT,ube,Zy,Egr,bbe,Cgr,bOe,Yo,e8,wgr,Hd,Agr,kQ,Lgr,ygr,SQ,xgr,$gr,kgr,o8,Sgr,vbe,Rgr,Pgr,Bgr,yt,r8,Igr,Fbe,Ngr,qgr,Ud,jgr,Tbe,Dgr,Ggr,RQ,Ogr,Vgr,Xgr,LT,zgr,vo,t8,Wgr,Mbe,Qgr,Hgr,en,Ugr,Ebe,Jgr,Ygr,Cbe,Kgr,Zgr,wbe,ehr,ohr,rhr,on,yT,Abe,thr,ahr,PQ,nhr,shr,lhr,xT,Lbe,ihr,dhr,BQ,chr,fhr,mhr,$T,ybe,ghr,hhr,IQ,phr,_hr,uhr,kT,xbe,bhr,vhr,NQ,Fhr,Thr,Mhr,ST,Ehr,$be,Chr,whr,kbe,Ahr,Lhr,RT,vOe,Jd,PT,Sbe,a8,yhr,Rbe,xhr,FOe,Ko,n8,$hr,Yd,khr,qQ,Shr,Rhr,jQ,Phr,Bhr,Ihr,s8,Nhr,Pbe,qhr,jhr,Dhr,xt,l8,Ghr,Bbe,Ohr,Vhr,Kd,Xhr,Ibe,zhr,Whr,DQ,Qhr,Hhr,Uhr,BT,Jhr,Fo,i8,Yhr,Nbe,Khr,Zhr,rn,epr,qbe,opr,rpr,jbe,tpr,apr,Dbe,npr,spr,lpr,Gbe,IT,Obe,ipr,dpr,GQ,cpr,fpr,mpr,NT,gpr,Vbe,hpr,ppr,Xbe,_pr,upr,qT,TOe,Zd,jT,zbe,d8,bpr,Wbe,vpr,MOe,Zo,c8,Fpr,ec,Tpr,OQ,Mpr,Epr,VQ,Cpr,wpr,Apr,f8,Lpr,Qbe,ypr,xpr,$pr,$t,m8,kpr,Hbe,Spr,Rpr,oc,Ppr,Ube,Bpr,Ipr,XQ,Npr,qpr,jpr,DT,Dpr,Lr,g8,Gpr,Jbe,Opr,Vpr,tn,Xpr,Ybe,zpr,Wpr,Kbe,Qpr,Hpr,Zbe,Upr,Jpr,Ypr,q,GT,e2e,Kpr,Zpr,zQ,e_r,o_r,r_r,OT,o2e,t_r,a_r,WQ,n_r,s_r,l_r,VT,r2e,i_r,d_r,QQ,c_r,f_r,m_r,XT,t2e,g_r,h_r,HQ,p_r,__r,u_r,zT,a2e,b_r,v_r,UQ,F_r,T_r,M_r,WT,n2e,E_r,C_r,JQ,w_r,A_r,L_r,QT,s2e,y_r,x_r,YQ,$_r,k_r,S_r,HT,l2e,R_r,P_r,KQ,B_r,I_r,N_r,UT,i2e,q_r,j_r,ZQ,D_r,G_r,O_r,JT,d2e,V_r,X_r,eH,z_r,W_r,Q_r,YT,c2e,H_r,U_r,oH,J_r,Y_r,K_r,KT,f2e,Z_r,eur,rH,our,rur,tur,ZT,m2e,aur,nur,tH,sur,lur,iur,eM,g2e,dur,cur,aH,fur,mur,gur,oM,h2e,hur,pur,nH,_ur,uur,bur,rM,p2e,vur,Fur,sH,Tur,Mur,Eur,tM,_2e,Cur,wur,lH,Aur,Lur,yur,Xs,u2e,xur,$ur,iH,kur,Sur,dH,Rur,Pur,Bur,aM,b2e,Iur,Nur,cH,qur,jur,Dur,nM,v2e,Gur,Our,fH,Vur,Xur,zur,sM,F2e,Wur,Qur,mH,Hur,Uur,Jur,lM,T2e,Yur,Kur,gH,Zur,e1r,o1r,iM,M2e,r1r,t1r,hH,a1r,n1r,s1r,dM,E2e,l1r,i1r,pH,d1r,c1r,f1r,cM,C2e,m1r,g1r,_H,h1r,p1r,_1r,fM,w2e,u1r,b1r,uH,v1r,F1r,T1r,mM,A2e,M1r,E1r,bH,C1r,w1r,A1r,gM,L2e,L1r,y1r,vH,x1r,$1r,k1r,hM,y2e,S1r,R1r,FH,P1r,B1r,I1r,pM,x2e,N1r,q1r,TH,j1r,D1r,G1r,_M,$2e,O1r,V1r,MH,X1r,z1r,W1r,uM,k2e,Q1r,H1r,EH,U1r,J1r,Y1r,bM,S2e,K1r,Z1r,CH,e7r,o7r,r7r,vM,R2e,t7r,a7r,wH,n7r,s7r,l7r,FM,P2e,i7r,d7r,AH,c7r,f7r,m7r,TM,B2e,g7r,h7r,LH,p7r,_7r,u7r,MM,I2e,b7r,v7r,yH,F7r,T7r,M7r,EM,N2e,E7r,C7r,xH,w7r,A7r,L7r,CM,q2e,y7r,x7r,$H,$7r,k7r,S7r,wM,j2e,R7r,P7r,kH,B7r,I7r,N7r,AM,D2e,q7r,j7r,SH,D7r,G7r,O7r,LM,G2e,V7r,X7r,RH,z7r,W7r,Q7r,yM,O2e,H7r,U7r,PH,J7r,Y7r,K7r,xM,V2e,Z7r,e9r,BH,o9r,r9r,t9r,$M,X2e,a9r,n9r,IH,s9r,l9r,i9r,kM,z2e,d9r,c9r,NH,f9r,m9r,g9r,SM,W2e,h9r,p9r,qH,_9r,u9r,b9r,RM,EOe,rc,PM,Q2e,h8,v9r,H2e,F9r,COe,er,p8,T9r,tc,M9r,jH,E9r,C9r,DH,w9r,A9r,L9r,_8,y9r,U2e,x9r,$9r,k9r,kt,u8,S9r,J2e,R9r,P9r,ac,B9r,Y2e,I9r,N9r,GH,q9r,j9r,D9r,BM,G9r,yr,b8,O9r,K2e,V9r,X9r,an,z9r,Z2e,W9r,Q9r,eve,H9r,U9r,ove,J9r,Y9r,K9r,se,IM,rve,Z9r,ebr,OH,obr,rbr,tbr,NM,tve,abr,nbr,VH,sbr,lbr,ibr,qM,ave,dbr,cbr,XH,fbr,mbr,gbr,jM,nve,hbr,pbr,zH,_br,ubr,bbr,DM,sve,vbr,Fbr,WH,Tbr,Mbr,Ebr,GM,lve,Cbr,wbr,QH,Abr,Lbr,ybr,OM,ive,xbr,$br,HH,kbr,Sbr,Rbr,VM,dve,Pbr,Bbr,UH,Ibr,Nbr,qbr,XM,cve,jbr,Dbr,JH,Gbr,Obr,Vbr,zM,fve,Xbr,zbr,YH,Wbr,Qbr,Hbr,WM,mve,Ubr,Jbr,KH,Ybr,Kbr,Zbr,QM,gve,e2r,o2r,ZH,r2r,t2r,a2r,HM,hve,n2r,s2r,eU,l2r,i2r,d2r,UM,pve,c2r,f2r,oU,m2r,g2r,h2r,JM,_ve,p2r,_2r,rU,u2r,b2r,v2r,YM,uve,F2r,T2r,tU,M2r,E2r,C2r,KM,bve,w2r,A2r,aU,L2r,y2r,x2r,ZM,vve,$2r,k2r,nU,S2r,R2r,P2r,eE,Fve,B2r,I2r,sU,N2r,q2r,j2r,oE,Tve,D2r,G2r,lU,O2r,V2r,X2r,rE,Mve,z2r,W2r,iU,Q2r,H2r,U2r,tE,Eve,J2r,Y2r,dU,K2r,Z2r,evr,aE,Cve,ovr,rvr,cU,tvr,avr,nvr,nE,wOe,nc,sE,wve,v8,svr,Ave,lvr,AOe,or,F8,ivr,sc,dvr,fU,cvr,fvr,mU,mvr,gvr,hvr,T8,pvr,Lve,_vr,uvr,bvr,St,M8,vvr,yve,Fvr,Tvr,lc,Mvr,xve,Evr,Cvr,gU,wvr,Avr,Lvr,lE,yvr,xr,E8,xvr,$ve,$vr,kvr,nn,Svr,kve,Rvr,Pvr,Sve,Bvr,Ivr,Rve,Nvr,qvr,jvr,Me,iE,Pve,Dvr,Gvr,hU,Ovr,Vvr,Xvr,dE,Bve,zvr,Wvr,pU,Qvr,Hvr,Uvr,cE,Ive,Jvr,Yvr,_U,Kvr,Zvr,eFr,fE,Nve,oFr,rFr,uU,tFr,aFr,nFr,mE,qve,sFr,lFr,bU,iFr,dFr,cFr,gE,jve,fFr,mFr,vU,gFr,hFr,pFr,hE,Dve,_Fr,uFr,FU,bFr,vFr,FFr,pE,Gve,TFr,MFr,TU,EFr,CFr,wFr,_E,Ove,AFr,LFr,MU,yFr,xFr,$Fr,uE,Vve,kFr,SFr,EU,RFr,PFr,BFr,bE,Xve,IFr,NFr,CU,qFr,jFr,DFr,vE,zve,GFr,OFr,wU,VFr,XFr,zFr,FE,Wve,WFr,QFr,AU,HFr,UFr,JFr,TE,LOe,ic,ME,Qve,C8,YFr,Hve,KFr,yOe,rr,w8,ZFr,dc,eTr,LU,oTr,rTr,yU,tTr,aTr,nTr,A8,sTr,Uve,lTr,iTr,dTr,Rt,L8,cTr,Jve,fTr,mTr,cc,gTr,Yve,hTr,pTr,xU,_Tr,uTr,bTr,EE,vTr,$r,y8,FTr,Kve,TTr,MTr,sn,ETr,Zve,CTr,wTr,eFe,ATr,LTr,oFe,yTr,xTr,$Tr,ln,CE,rFe,kTr,STr,$U,RTr,PTr,BTr,wE,tFe,ITr,NTr,kU,qTr,jTr,DTr,AE,aFe,GTr,OTr,SU,VTr,XTr,zTr,LE,nFe,WTr,QTr,RU,HTr,UTr,JTr,yE,xOe,fc,xE,sFe,x8,YTr,lFe,KTr,$Oe,tr,$8,ZTr,mc,eMr,PU,oMr,rMr,BU,tMr,aMr,nMr,k8,sMr,iFe,lMr,iMr,dMr,Pt,S8,cMr,dFe,fMr,mMr,gc,gMr,cFe,hMr,pMr,IU,_Mr,uMr,bMr,$E,vMr,kr,R8,FMr,fFe,TMr,MMr,dn,EMr,mFe,CMr,wMr,gFe,AMr,LMr,hFe,yMr,xMr,$Mr,ie,kE,pFe,kMr,SMr,NU,RMr,PMr,BMr,SE,_Fe,IMr,NMr,qU,qMr,jMr,DMr,RE,uFe,GMr,OMr,jU,VMr,XMr,zMr,PE,bFe,WMr,QMr,DU,HMr,UMr,JMr,BE,vFe,YMr,KMr,GU,ZMr,eEr,oEr,IE,FFe,rEr,tEr,OU,aEr,nEr,sEr,NE,TFe,lEr,iEr,VU,dEr,cEr,fEr,qE,MFe,mEr,gEr,XU,hEr,pEr,_Er,jE,EFe,uEr,bEr,zU,vEr,FEr,TEr,DE,CFe,MEr,EEr,WU,CEr,wEr,AEr,GE,wFe,LEr,yEr,QU,xEr,$Er,kEr,OE,AFe,SEr,REr,HU,PEr,BEr,IEr,VE,LFe,NEr,qEr,UU,jEr,DEr,GEr,XE,yFe,OEr,VEr,JU,XEr,zEr,WEr,zE,xFe,QEr,HEr,YU,UEr,JEr,YEr,WE,$Fe,KEr,ZEr,KU,e4r,o4r,r4r,QE,kFe,t4r,a4r,ZU,n4r,s4r,l4r,HE,SFe,i4r,d4r,eJ,c4r,f4r,m4r,UE,RFe,g4r,h4r,oJ,p4r,_4r,u4r,JE,PFe,b4r,v4r,rJ,F4r,T4r,M4r,YE,kOe,hc,KE,BFe,P8,E4r,IFe,C4r,SOe,ar,B8,w4r,pc,A4r,tJ,L4r,y4r,aJ,x4r,$4r,k4r,I8,S4r,NFe,R4r,P4r,B4r,Bt,N8,I4r,qFe,N4r,q4r,_c,j4r,jFe,D4r,G4r,nJ,O4r,V4r,X4r,ZE,z4r,Sr,q8,W4r,DFe,Q4r,H4r,cn,U4r,GFe,J4r,Y4r,OFe,K4r,Z4r,VFe,eCr,oCr,rCr,ye,e4,XFe,tCr,aCr,sJ,nCr,sCr,lCr,o4,zFe,iCr,dCr,lJ,cCr,fCr,mCr,r4,WFe,gCr,hCr,iJ,pCr,_Cr,uCr,t4,QFe,bCr,vCr,dJ,FCr,TCr,MCr,a4,HFe,ECr,CCr,cJ,wCr,ACr,LCr,n4,UFe,yCr,xCr,fJ,$Cr,kCr,SCr,s4,JFe,RCr,PCr,mJ,BCr,ICr,NCr,l4,YFe,qCr,jCr,gJ,DCr,GCr,OCr,i4,KFe,VCr,XCr,hJ,zCr,WCr,QCr,d4,ZFe,HCr,UCr,pJ,JCr,YCr,KCr,c4,ROe,uc,f4,eTe,j8,ZCr,oTe,e5r,POe,nr,D8,o5r,bc,r5r,_J,t5r,a5r,uJ,n5r,s5r,l5r,G8,i5r,rTe,d5r,c5r,f5r,It,O8,m5r,tTe,g5r,h5r,vc,p5r,aTe,_5r,u5r,bJ,b5r,v5r,F5r,m4,T5r,Rr,V8,M5r,nTe,E5r,C5r,fn,w5r,sTe,A5r,L5r,lTe,y5r,x5r,iTe,$5r,k5r,S5r,te,g4,dTe,R5r,P5r,vJ,B5r,I5r,N5r,h4,cTe,q5r,j5r,FJ,D5r,G5r,O5r,p4,fTe,V5r,X5r,TJ,z5r,W5r,Q5r,_4,mTe,H5r,U5r,MJ,J5r,Y5r,K5r,u4,gTe,Z5r,e3r,EJ,o3r,r3r,t3r,b4,hTe,a3r,n3r,CJ,s3r,l3r,i3r,v4,pTe,d3r,c3r,wJ,f3r,m3r,g3r,F4,_Te,h3r,p3r,AJ,_3r,u3r,b3r,T4,uTe,v3r,F3r,LJ,T3r,M3r,E3r,M4,bTe,C3r,w3r,yJ,A3r,L3r,y3r,E4,vTe,x3r,$3r,xJ,k3r,S3r,R3r,C4,FTe,P3r,B3r,$J,I3r,N3r,q3r,w4,TTe,j3r,D3r,kJ,G3r,O3r,V3r,A4,MTe,X3r,z3r,SJ,W3r,Q3r,H3r,L4,ETe,U3r,J3r,RJ,Y3r,K3r,Z3r,y4,CTe,e0r,o0r,PJ,r0r,t0r,a0r,x4,wTe,n0r,s0r,BJ,l0r,i0r,d0r,$4,ATe,c0r,f0r,IJ,m0r,g0r,h0r,k4,LTe,p0r,_0r,NJ,u0r,b0r,v0r,S4,yTe,F0r,T0r,qJ,M0r,E0r,C0r,R4,xTe,w0r,A0r,jJ,L0r,y0r,x0r,P4,$Te,$0r,k0r,DJ,S0r,R0r,P0r,B4,kTe,B0r,I0r,GJ,N0r,q0r,j0r,I4,STe,D0r,G0r,OJ,O0r,V0r,X0r,N4,RTe,z0r,W0r,VJ,Q0r,H0r,U0r,q4,PTe,J0r,Y0r,XJ,K0r,Z0r,ewr,j4,BOe,Fc,D4,BTe,X8,owr,ITe,rwr,IOe,sr,z8,twr,Tc,awr,zJ,nwr,swr,WJ,lwr,iwr,dwr,W8,cwr,NTe,fwr,mwr,gwr,Nt,Q8,hwr,qTe,pwr,_wr,Mc,uwr,jTe,bwr,vwr,QJ,Fwr,Twr,Mwr,G4,Ewr,Pr,H8,Cwr,DTe,wwr,Awr,mn,Lwr,GTe,ywr,xwr,OTe,$wr,kwr,VTe,Swr,Rwr,Pwr,_e,O4,XTe,Bwr,Iwr,HJ,Nwr,qwr,jwr,V4,zTe,Dwr,Gwr,UJ,Owr,Vwr,Xwr,X4,WTe,zwr,Wwr,JJ,Qwr,Hwr,Uwr,z4,QTe,Jwr,Ywr,YJ,Kwr,Zwr,eAr,W4,HTe,oAr,rAr,KJ,tAr,aAr,nAr,Q4,UTe,sAr,lAr,ZJ,iAr,dAr,cAr,H4,JTe,fAr,mAr,eY,gAr,hAr,pAr,U4,YTe,_Ar,uAr,oY,bAr,vAr,FAr,J4,KTe,TAr,MAr,rY,EAr,CAr,wAr,Y4,ZTe,AAr,LAr,tY,yAr,xAr,$Ar,K4,eMe,kAr,SAr,aY,RAr,PAr,BAr,Z4,oMe,IAr,NAr,nY,qAr,jAr,DAr,eC,rMe,GAr,OAr,sY,VAr,XAr,zAr,oC,tMe,WAr,QAr,lY,HAr,UAr,JAr,rC,aMe,YAr,KAr,iY,ZAr,e6r,o6r,tC,nMe,r6r,t6r,dY,a6r,n6r,s6r,aC,sMe,l6r,i6r,cY,d6r,c6r,f6r,nC,NOe,Ec,sC,lMe,U8,m6r,iMe,g6r,qOe,lr,J8,h6r,Cc,p6r,fY,_6r,u6r,mY,b6r,v6r,F6r,Y8,T6r,dMe,M6r,E6r,C6r,qt,K8,w6r,cMe,A6r,L6r,wc,y6r,fMe,x6r,$6r,gY,k6r,S6r,R6r,lC,P6r,Br,Z8,B6r,mMe,I6r,N6r,gn,q6r,gMe,j6r,D6r,hMe,G6r,O6r,pMe,V6r,X6r,z6r,ex,iC,_Me,W6r,Q6r,hY,H6r,U6r,J6r,dC,uMe,Y6r,K6r,pY,Z6r,eLr,oLr,cC,jOe,Ac,fC,bMe,ox,rLr,vMe,tLr,DOe,ir,rx,aLr,Lc,nLr,_Y,sLr,lLr,uY,iLr,dLr,cLr,tx,fLr,FMe,mLr,gLr,hLr,jt,ax,pLr,TMe,_Lr,uLr,yc,bLr,MMe,vLr,FLr,bY,TLr,MLr,ELr,mC,CLr,Ir,nx,wLr,EMe,ALr,LLr,hn,yLr,CMe,xLr,$Lr,wMe,kLr,SLr,AMe,RLr,PLr,BLr,LMe,gC,yMe,ILr,NLr,vY,qLr,jLr,DLr,hC,GOe,xc,pC,xMe,sx,GLr,$Me,OLr,OOe,dr,lx,VLr,$c,XLr,FY,zLr,WLr,TY,QLr,HLr,ULr,ix,JLr,kMe,YLr,KLr,ZLr,Dt,dx,eyr,SMe,oyr,ryr,kc,tyr,RMe,ayr,nyr,MY,syr,lyr,iyr,_C,dyr,Nr,cx,cyr,PMe,fyr,myr,pn,gyr,BMe,hyr,pyr,IMe,_yr,uyr,NMe,byr,vyr,Fyr,de,uC,qMe,Tyr,Myr,EY,Eyr,Cyr,wyr,bC,jMe,Ayr,Lyr,CY,yyr,xyr,$yr,vC,DMe,kyr,Syr,wY,Ryr,Pyr,Byr,FC,GMe,Iyr,Nyr,AY,qyr,jyr,Dyr,TC,OMe,Gyr,Oyr,LY,Vyr,Xyr,zyr,MC,VMe,Wyr,Qyr,yY,Hyr,Uyr,Jyr,EC,XMe,Yyr,Kyr,xY,Zyr,e8r,o8r,CC,zMe,r8r,t8r,$Y,a8r,n8r,s8r,wC,WMe,l8r,i8r,kY,d8r,c8r,f8r,AC,QMe,m8r,g8r,SY,h8r,p8r,_8r,LC,HMe,u8r,b8r,RY,v8r,F8r,T8r,yC,UMe,M8r,E8r,PY,C8r,w8r,A8r,xC,JMe,L8r,y8r,BY,x8r,$8r,k8r,$C,YMe,S8r,R8r,IY,P8r,B8r,I8r,kC,KMe,N8r,q8r,NY,j8r,D8r,G8r,SC,ZMe,O8r,V8r,qY,X8r,z8r,W8r,RC,eEe,Q8r,H8r,jY,U8r,J8r,Y8r,PC,oEe,K8r,Z8r,DY,exr,oxr,rxr,BC,rEe,txr,axr,GY,nxr,sxr,lxr,IC,tEe,ixr,dxr,OY,cxr,fxr,mxr,NC,VOe,Sc,qC,aEe,fx,gxr,nEe,hxr,XOe,cr,mx,pxr,Rc,_xr,VY,uxr,bxr,XY,vxr,Fxr,Txr,gx,Mxr,sEe,Exr,Cxr,wxr,Gt,hx,Axr,lEe,Lxr,yxr,Pc,xxr,iEe,$xr,kxr,zY,Sxr,Rxr,Pxr,jC,Bxr,qr,px,Ixr,dEe,Nxr,qxr,_n,jxr,cEe,Dxr,Gxr,fEe,Oxr,Vxr,mEe,Xxr,zxr,Wxr,ce,DC,gEe,Qxr,Hxr,WY,Uxr,Jxr,Yxr,GC,hEe,Kxr,Zxr,QY,e$r,o$r,r$r,OC,pEe,t$r,a$r,HY,n$r,s$r,l$r,VC,_Ee,i$r,d$r,UY,c$r,f$r,m$r,XC,uEe,g$r,h$r,JY,p$r,_$r,u$r,zC,bEe,b$r,v$r,YY,F$r,T$r,M$r,WC,vEe,E$r,C$r,KY,w$r,A$r,L$r,QC,FEe,y$r,x$r,ZY,$$r,k$r,S$r,HC,TEe,R$r,P$r,eK,B$r,I$r,N$r,UC,MEe,q$r,j$r,oK,D$r,G$r,O$r,JC,EEe,V$r,X$r,rK,z$r,W$r,Q$r,YC,CEe,H$r,U$r,tK,J$r,Y$r,K$r,KC,wEe,Z$r,ekr,aK,okr,rkr,tkr,ZC,AEe,akr,nkr,nK,skr,lkr,ikr,e5,LEe,dkr,ckr,sK,fkr,mkr,gkr,o5,yEe,hkr,pkr,lK,_kr,ukr,bkr,r5,xEe,vkr,Fkr,iK,Tkr,Mkr,Ekr,t5,$Ee,Ckr,wkr,dK,Akr,Lkr,ykr,a5,kEe,xkr,$kr,cK,kkr,Skr,Rkr,n5,SEe,Pkr,Bkr,fK,Ikr,Nkr,qkr,s5,zOe,Bc,l5,REe,_x,jkr,PEe,Dkr,WOe,fr,ux,Gkr,Ic,Okr,mK,Vkr,Xkr,gK,zkr,Wkr,Qkr,bx,Hkr,BEe,Ukr,Jkr,Ykr,Ot,vx,Kkr,IEe,Zkr,eSr,Nc,oSr,NEe,rSr,tSr,hK,aSr,nSr,sSr,i5,lSr,jr,Fx,iSr,qEe,dSr,cSr,un,fSr,jEe,mSr,gSr,DEe,hSr,pSr,GEe,_Sr,uSr,bSr,OEe,d5,VEe,vSr,FSr,pK,TSr,MSr,ESr,c5,QOe,qc,f5,XEe,Tx,CSr,zEe,wSr,HOe,mr,Mx,ASr,jc,LSr,_K,ySr,xSr,uK,$Sr,kSr,SSr,Ex,RSr,WEe,PSr,BSr,ISr,Vt,Cx,NSr,QEe,qSr,jSr,Dc,DSr,HEe,GSr,OSr,bK,VSr,XSr,zSr,m5,WSr,Dr,wx,QSr,UEe,HSr,USr,bn,JSr,JEe,YSr,KSr,YEe,ZSr,eRr,KEe,oRr,rRr,tRr,ZEe,g5,e4e,aRr,nRr,vK,sRr,lRr,iRr,h5,UOe,Gc,p5,o4e,Ax,dRr,r4e,cRr,JOe,gr,Lx,fRr,Oc,mRr,FK,gRr,hRr,TK,pRr,_Rr,uRr,yx,bRr,t4e,vRr,FRr,TRr,Xt,xx,MRr,a4e,ERr,CRr,Vc,wRr,n4e,ARr,LRr,MK,yRr,xRr,$Rr,_5,kRr,Gr,$x,SRr,s4e,RRr,PRr,vn,BRr,l4e,IRr,NRr,i4e,qRr,jRr,d4e,DRr,GRr,ORr,oe,u5,c4e,VRr,XRr,EK,zRr,WRr,QRr,b5,f4e,HRr,URr,CK,JRr,YRr,KRr,v5,m4e,ZRr,ePr,wK,oPr,rPr,tPr,F5,g4e,aPr,nPr,AK,sPr,lPr,iPr,T5,h4e,dPr,cPr,LK,fPr,mPr,gPr,M5,p4e,hPr,pPr,yK,_Pr,uPr,bPr,E5,_4e,vPr,FPr,xK,TPr,MPr,EPr,C5,u4e,CPr,wPr,$K,APr,LPr,yPr,w5,b4e,xPr,$Pr,kK,kPr,SPr,RPr,A5,v4e,PPr,BPr,SK,IPr,NPr,qPr,L5,F4e,jPr,DPr,RK,GPr,OPr,VPr,y5,T4e,XPr,zPr,PK,WPr,QPr,HPr,x5,M4e,UPr,JPr,BK,YPr,KPr,ZPr,$5,E4e,eBr,oBr,IK,rBr,tBr,aBr,k5,C4e,nBr,sBr,NK,lBr,iBr,dBr,S5,w4e,cBr,fBr,qK,mBr,gBr,hBr,R5,A4e,pBr,_Br,jK,uBr,bBr,vBr,P5,L4e,FBr,TBr,DK,MBr,EBr,CBr,B5,y4e,wBr,ABr,GK,LBr,yBr,xBr,I5,x4e,$Br,kBr,OK,SBr,RBr,PBr,N5,$4e,BBr,IBr,VK,NBr,qBr,jBr,q5,k4e,DBr,GBr,XK,OBr,VBr,XBr,j5,S4e,zBr,WBr,zK,QBr,HBr,UBr,D5,R4e,JBr,YBr,WK,KBr,ZBr,eIr,G5,P4e,oIr,rIr,QK,tIr,aIr,nIr,O5,B4e,sIr,lIr,HK,iIr,dIr,cIr,V5,I4e,fIr,mIr,UK,gIr,hIr,pIr,X5,YOe,Xc,z5,N4e,kx,_Ir,q4e,uIr,KOe,hr,Sx,bIr,zc,vIr,JK,FIr,TIr,YK,MIr,EIr,CIr,Rx,wIr,j4e,AIr,LIr,yIr,zt,Px,xIr,D4e,$Ir,kIr,Wc,SIr,G4e,RIr,PIr,KK,BIr,IIr,NIr,W5,qIr,Or,Bx,jIr,O4e,DIr,GIr,Fn,OIr,V4e,VIr,XIr,X4e,zIr,WIr,z4e,QIr,HIr,UIr,xe,Q5,W4e,JIr,YIr,ZK,KIr,ZIr,eNr,H5,Q4e,oNr,rNr,eZ,tNr,aNr,nNr,U5,H4e,sNr,lNr,oZ,iNr,dNr,cNr,J5,U4e,fNr,mNr,rZ,gNr,hNr,pNr,Y5,J4e,_Nr,uNr,tZ,bNr,vNr,FNr,K5,Y4e,TNr,MNr,aZ,ENr,CNr,wNr,Z5,K4e,ANr,LNr,nZ,yNr,xNr,$Nr,e3,Z4e,kNr,SNr,sZ,RNr,PNr,BNr,o3,eCe,INr,NNr,lZ,qNr,jNr,DNr,r3,oCe,GNr,ONr,iZ,VNr,XNr,zNr,t3,ZOe,Qc,a3,rCe,Ix,WNr,tCe,QNr,eVe,pr,Nx,HNr,Hc,UNr,dZ,JNr,YNr,cZ,KNr,ZNr,eqr,qx,oqr,aCe,rqr,tqr,aqr,Wt,jx,nqr,nCe,sqr,lqr,Uc,iqr,sCe,dqr,cqr,fZ,fqr,mqr,gqr,n3,hqr,Vr,Dx,pqr,lCe,_qr,uqr,Tn,bqr,iCe,vqr,Fqr,dCe,Tqr,Mqr,cCe,Eqr,Cqr,wqr,Ee,s3,fCe,Aqr,Lqr,mZ,yqr,xqr,$qr,l3,mCe,kqr,Sqr,gZ,Rqr,Pqr,Bqr,i3,gCe,Iqr,Nqr,hZ,qqr,jqr,Dqr,d3,hCe,Gqr,Oqr,pZ,Vqr,Xqr,zqr,c3,pCe,Wqr,Qqr,_Z,Hqr,Uqr,Jqr,f3,_Ce,Yqr,Kqr,uZ,Zqr,ejr,ojr,m3,uCe,rjr,tjr,bZ,ajr,njr,sjr,g3,bCe,ljr,ijr,vZ,djr,cjr,fjr,h3,vCe,mjr,gjr,FZ,hjr,pjr,_jr,p3,FCe,ujr,bjr,TZ,vjr,Fjr,Tjr,_3,TCe,Mjr,Ejr,MZ,Cjr,wjr,Ajr,u3,MCe,Ljr,yjr,EZ,xjr,$jr,kjr,b3,ECe,Sjr,Rjr,CZ,Pjr,Bjr,Ijr,v3,oVe,Jc,F3,CCe,Gx,Njr,wCe,qjr,rVe,_r,Ox,jjr,Yc,Djr,wZ,Gjr,Ojr,AZ,Vjr,Xjr,zjr,Vx,Wjr,ACe,Qjr,Hjr,Ujr,Qt,Xx,Jjr,LCe,Yjr,Kjr,Kc,Zjr,yCe,eDr,oDr,LZ,rDr,tDr,aDr,T3,nDr,Xr,zx,sDr,xCe,lDr,iDr,Mn,dDr,$Ce,cDr,fDr,kCe,mDr,gDr,SCe,hDr,pDr,_Dr,$e,M3,RCe,uDr,bDr,yZ,vDr,FDr,TDr,E3,PCe,MDr,EDr,xZ,CDr,wDr,ADr,C3,BCe,LDr,yDr,$Z,xDr,$Dr,kDr,w3,ICe,SDr,RDr,kZ,PDr,BDr,IDr,A3,NCe,NDr,qDr,SZ,jDr,DDr,GDr,L3,qCe,ODr,VDr,RZ,XDr,zDr,WDr,y3,jCe,QDr,HDr,PZ,UDr,JDr,YDr,x3,DCe,KDr,ZDr,BZ,eGr,oGr,rGr,$3,GCe,tGr,aGr,IZ,nGr,sGr,lGr,k3,OCe,iGr,dGr,NZ,cGr,fGr,mGr,S3,tVe,Zc,R3,VCe,Wx,gGr,XCe,hGr,aVe,ur,Qx,pGr,ef,_Gr,qZ,uGr,bGr,jZ,vGr,FGr,TGr,Hx,MGr,zCe,EGr,CGr,wGr,Ht,Ux,AGr,WCe,LGr,yGr,of,xGr,QCe,$Gr,kGr,DZ,SGr,RGr,PGr,P3,BGr,zr,Jx,IGr,HCe,NGr,qGr,En,jGr,UCe,DGr,GGr,JCe,OGr,VGr,YCe,XGr,zGr,WGr,ke,B3,KCe,QGr,HGr,GZ,UGr,JGr,YGr,I3,ZCe,KGr,ZGr,OZ,eOr,oOr,rOr,N3,e5e,tOr,aOr,VZ,nOr,sOr,lOr,q3,o5e,iOr,dOr,XZ,cOr,fOr,mOr,j3,r5e,gOr,hOr,zZ,pOr,_Or,uOr,D3,t5e,bOr,vOr,WZ,FOr,TOr,MOr,G3,a5e,EOr,COr,QZ,wOr,AOr,LOr,O3,n5e,yOr,xOr,HZ,$Or,kOr,SOr,V3,s5e,ROr,POr,UZ,BOr,IOr,NOr,X3,l5e,qOr,jOr,JZ,DOr,GOr,OOr,z3,nVe,rf,W3,i5e,Yx,VOr,d5e,XOr,sVe,br,Kx,zOr,tf,WOr,YZ,QOr,HOr,KZ,UOr,JOr,YOr,Zx,KOr,c5e,ZOr,eVr,oVr,Ut,e$,rVr,f5e,tVr,aVr,af,nVr,m5e,sVr,lVr,ZZ,iVr,dVr,cVr,Q3,fVr,Wr,o$,mVr,g5e,gVr,hVr,Cn,pVr,h5e,_Vr,uVr,p5e,bVr,vVr,_5e,FVr,TVr,MVr,Se,H3,u5e,EVr,CVr,eee,wVr,AVr,LVr,U3,b5e,yVr,xVr,oee,$Vr,kVr,SVr,J3,v5e,RVr,PVr,ree,BVr,IVr,NVr,Y3,F5e,qVr,jVr,tee,DVr,GVr,OVr,K3,T5e,VVr,XVr,aee,zVr,WVr,QVr,Z3,M5e,HVr,UVr,nee,JVr,YVr,KVr,e0,E5e,ZVr,eXr,see,oXr,rXr,tXr,o0,C5e,aXr,nXr,lee,sXr,lXr,iXr,r0,w5e,dXr,cXr,iee,fXr,mXr,gXr,t0,A5e,hXr,pXr,dee,_Xr,uXr,bXr,a0,lVe,nf,n0,L5e,r$,vXr,y5e,FXr,iVe,vr,t$,TXr,sf,MXr,cee,EXr,CXr,fee,wXr,AXr,LXr,a$,yXr,x5e,xXr,$Xr,kXr,Jt,n$,SXr,$5e,RXr,PXr,lf,BXr,k5e,IXr,NXr,mee,qXr,jXr,DXr,s0,GXr,Qr,s$,OXr,S5e,VXr,XXr,wn,zXr,R5e,WXr,QXr,P5e,HXr,UXr,B5e,JXr,YXr,KXr,Re,l0,I5e,ZXr,ezr,gee,ozr,rzr,tzr,i0,N5e,azr,nzr,hee,szr,lzr,izr,d0,q5e,dzr,czr,pee,fzr,mzr,gzr,c0,j5e,hzr,pzr,_ee,_zr,uzr,bzr,f0,D5e,vzr,Fzr,uee,Tzr,Mzr,Ezr,m0,G5e,Czr,wzr,bee,Azr,Lzr,yzr,g0,O5e,xzr,$zr,vee,kzr,Szr,Rzr,h0,V5e,Pzr,Bzr,Fee,Izr,Nzr,qzr,p0,X5e,jzr,Dzr,Tee,Gzr,Ozr,Vzr,_0,z5e,Xzr,zzr,Mee,Wzr,Qzr,Hzr,u0,dVe,df,b0,W5e,l$,Uzr,Q5e,Jzr,cVe,Fr,i$,Yzr,cf,Kzr,Eee,Zzr,eWr,Cee,oWr,rWr,tWr,d$,aWr,H5e,nWr,sWr,lWr,Yt,c$,iWr,U5e,dWr,cWr,ff,fWr,J5e,mWr,gWr,wee,hWr,pWr,_Wr,v0,uWr,Hr,f$,bWr,Y5e,vWr,FWr,An,TWr,K5e,MWr,EWr,Z5e,CWr,wWr,e3e,AWr,LWr,yWr,Ve,F0,o3e,xWr,$Wr,Aee,kWr,SWr,RWr,T0,r3e,PWr,BWr,Lee,IWr,NWr,qWr,M0,t3e,jWr,DWr,yee,GWr,OWr,VWr,E0,a3e,XWr,zWr,xee,WWr,QWr,HWr,C0,n3e,UWr,JWr,$ee,YWr,KWr,ZWr,w0,s3e,eQr,oQr,kee,rQr,tQr,aQr,A0,l3e,nQr,sQr,See,lQr,iQr,dQr,L0,i3e,cQr,fQr,Ree,mQr,gQr,hQr,y0,fVe,mf,x0,d3e,m$,pQr,c3e,_Qr,mVe,Tr,g$,uQr,gf,bQr,Pee,vQr,FQr,Bee,TQr,MQr,EQr,h$,CQr,f3e,wQr,AQr,LQr,Kt,p$,yQr,m3e,xQr,$Qr,hf,kQr,g3e,SQr,RQr,Iee,PQr,BQr,IQr,$0,NQr,Ur,_$,qQr,h3e,jQr,DQr,Ln,GQr,p3e,OQr,VQr,_3e,XQr,zQr,u3e,WQr,QQr,HQr,Xe,k0,b3e,UQr,JQr,Nee,YQr,KQr,ZQr,S0,v3e,eHr,oHr,qee,rHr,tHr,aHr,R0,F3e,nHr,sHr,jee,lHr,iHr,dHr,P0,T3e,cHr,fHr,Dee,mHr,gHr,hHr,B0,M3e,pHr,_Hr,Gee,uHr,bHr,vHr,I0,E3e,FHr,THr,Oee,MHr,EHr,CHr,N0,C3e,wHr,AHr,Vee,LHr,yHr,xHr,q0,w3e,$Hr,kHr,Xee,SHr,RHr,PHr,j0,gVe,pf,D0,A3e,u$,BHr,L3e,IHr,hVe,Mr,b$,NHr,_f,qHr,zee,jHr,DHr,Wee,GHr,OHr,VHr,v$,XHr,y3e,zHr,WHr,QHr,Zt,F$,HHr,x3e,UHr,JHr,uf,YHr,$3e,KHr,ZHr,Qee,eUr,oUr,rUr,G0,tUr,Jr,T$,aUr,k3e,nUr,sUr,yn,lUr,S3e,iUr,dUr,R3e,cUr,fUr,P3e,mUr,gUr,hUr,B3e,O0,I3e,pUr,_Ur,Hee,uUr,bUr,vUr,V0,pVe,bf,X0,N3e,M$,FUr,q3e,TUr,_Ve,Er,E$,MUr,vf,EUr,Uee,CUr,wUr,Jee,AUr,LUr,yUr,C$,xUr,j3e,$Ur,kUr,SUr,ea,w$,RUr,D3e,PUr,BUr,Ff,IUr,G3e,NUr,qUr,Yee,jUr,DUr,GUr,z0,OUr,Yr,A$,VUr,O3e,XUr,zUr,xn,WUr,V3e,QUr,HUr,X3e,UUr,JUr,z3e,YUr,KUr,ZUr,L$,W0,W3e,eJr,oJr,Kee,rJr,tJr,aJr,Q0,Q3e,nJr,sJr,Zee,lJr,iJr,dJr,H0,uVe,Tf,U0,H3e,y$,cJr,U3e,fJr,bVe,Cr,x$,mJr,Mf,gJr,eoe,hJr,pJr,ooe,_Jr,uJr,bJr,$$,vJr,J3e,FJr,TJr,MJr,oa,k$,EJr,Y3e,CJr,wJr,Ef,AJr,K3e,LJr,yJr,roe,xJr,$Jr,kJr,J0,SJr,Kr,S$,RJr,Z3e,PJr,BJr,$n,IJr,e0e,NJr,qJr,o0e,jJr,DJr,r0e,GJr,OJr,VJr,t0e,Y0,a0e,XJr,zJr,toe,WJr,QJr,HJr,K0,vVe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),E6=new re({}),C6=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new UJr({props:{warning:!0,$$slots:{default:[ijt]},$$scope:{ctx:x}}}),w6=new re({}),A6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/configuration_auto.py#L598"}}),x6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/configuration_auto.py#L621"}}),Dg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[djt]},$$scope:{ctx:x}}}),$6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/configuration_auto.py#L744"}}),k6=new re({}),S6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/tokenization_auto.py#L399"}}),B6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17799/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/tokenization_auto.py#L413"}}),Mh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:x}}}),I6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/tokenization_auto.py#L612"}}),N6=new re({}),q6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),G6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17799/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),ap=new UJr({props:{$$slots:{default:[fjt]},$$scope:{ctx:x}}}),np=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[mjt]},$$scope:{ctx:x}}}),O6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),V6=new re({}),X6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/processing_auto.py#L88"}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/processing_auto.py#L102"}}),wp=new UJr({props:{$$slots:{default:[gjt]},$$scope:{ctx:x}}}),Ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:x}}}),H6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/processing_auto.py#L255"}}),U6=new re({}),J6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L760"}}),K6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config">MobileNetV1Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Model">MobileNetV1Model</a> (MobileNetV1 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),xp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[pjt]},$$scope:{ctx:x}}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),xu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[_jt]},$$scope:{ctx:x}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L767"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ujt]},$$scope:{ctx:x}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),M1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:x}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L782"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),C1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:x}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:x}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L789"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:x}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:x}}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L796"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:x}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),u9=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:x}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L805"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),v9=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:x}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),pb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:x}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L850"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),ub=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:x}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:x}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L857"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),Jb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:x}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),t2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:x}}}),BL=new re({}),IL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L843"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),n2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:x}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:x}}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L814"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:x}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Sv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:x}}}),zL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L821"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:x}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:x}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L866"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config">MobileNetV1Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1ForImageClassification">MobileNetV1ForImageClassification</a> (MobileNetV1 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:x}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:x}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L905"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:x}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:x}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L832"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:x}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:x}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L912"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:x}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:x}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L935"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:x}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:x}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L919"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:x}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:x}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L926"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ujt]},$$scope:{ctx:x}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Jjt]},$$scope:{ctx:x}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L944"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Yjt]},$$scope:{ctx:x}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Kjt]},$$scope:{ctx:x}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L951"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Zjt]},$$scope:{ctx:x}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),hT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[eDt]},$$scope:{ctx:x}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L898"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[oDt]},$$scope:{ctx:x}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[rDt]},$$scope:{ctx:x}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L873"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[tDt]},$$scope:{ctx:x}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[aDt]},$$scope:{ctx:x}}}),Zy=new re({}),e8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L880"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[nDt]},$$scope:{ctx:x}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[sDt]},$$scope:{ctx:x}}}),a8=new re({}),n8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L889"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[lDt]},$$scope:{ctx:x}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[iDt]},$$scope:{ctx:x}}}),d8=new re({}),c8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[dDt]},$$scope:{ctx:x}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),h8=new re({}),p8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mDt]},$$scope:{ctx:x}}}),v8=new re({}),F8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),C8=new re({}),w8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),x8=new re({}),$8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),P8=new re({}),B8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),j8=new re({}),D8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),X8=new re({}),z8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),U8=new re({}),J8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),Wx=new re({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JDt]},$$scope:{ctx:x}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[eGt]},$$scope:{ctx:x}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[oGt]},$$scope:{ctx:x}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[rGt]},$$scope:{ctx:x}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[tGt]},$$scope:{ctx:x}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aGt]},$$scope:{ctx:x}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[nGt]},$$scope:{ctx:x}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sGt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),v6=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),F6=o("AutoConfig"),Rn=o(", "),Pn=a("a"),T6=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),M6=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Uk=o("will create a model that is an instance of "),Ai=a("a"),Jk=o("BertModel"),Yk=o("."),Co=l(),xa=a("p"),Kk=o("There is one class of "),$f=a("code"),Zk=o("AutoModel"),xze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hGe=l(),Li=a("h2"),kf=a("a"),Kre=a("span"),F(E6.$$.fragment),$ze=l(),Zre=a("span"),kze=o("Extending the Auto Classes"),pGe=l(),In=a("p"),Sze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ete=a("code"),Rze=o("NewModel"),Pze=o(", make sure you have a "),ote=a("code"),Bze=o("NewModelConfig"),Ize=o(` then you can add those to the auto
classes like this:`),_Ge=l(),F(C6.$$.fragment),uGe=l(),eS=a("p"),Nze=o("You will then be able to use the auto classes like you would usually do!"),bGe=l(),F(Sf.$$.fragment),vGe=l(),yi=a("h2"),Rf=a("a"),rte=a("span"),F(w6.$$.fragment),qze=l(),tte=a("span"),jze=o("AutoConfig"),FGe=l(),wo=a("div"),F(A6.$$.fragment),Dze=l(),L6=a("p"),Gze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),oS=a("a"),Oze=o("from_pretrained()"),Vze=o(" class method."),Xze=l(),y6=a("p"),zze=o("This class cannot be instantiated directly using "),ate=a("code"),Wze=o("__init__()"),Qze=o(" (throws an error)."),Hze=l(),wr=a("div"),F(x6.$$.fragment),Uze=l(),nte=a("p"),Jze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Yze=l(),xi=a("p"),Kze=o("The configuration class to instantiate is selected based on the "),ste=a("code"),Zze=o("model_type"),eWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lte=a("code"),oWe=o("pretrained_model_name_or_path"),rWe=o(":"),tWe=l(),A=a("ul"),Pf=a("li"),ite=a("strong"),aWe=o("albert"),nWe=o(" \u2014 "),rS=a("a"),sWe=o("AlbertConfig"),lWe=o(" (ALBERT model)"),iWe=l(),Bf=a("li"),dte=a("strong"),dWe=o("bart"),cWe=o(" \u2014 "),tS=a("a"),fWe=o("BartConfig"),mWe=o(" (BART model)"),gWe=l(),If=a("li"),cte=a("strong"),hWe=o("beit"),pWe=o(" \u2014 "),aS=a("a"),_We=o("BeitConfig"),uWe=o(" (BEiT model)"),bWe=l(),Nf=a("li"),fte=a("strong"),vWe=o("bert"),FWe=o(" \u2014 "),nS=a("a"),TWe=o("BertConfig"),MWe=o(" (BERT model)"),EWe=l(),qf=a("li"),mte=a("strong"),CWe=o("bert-generation"),wWe=o(" \u2014 "),sS=a("a"),AWe=o("BertGenerationConfig"),LWe=o(" (Bert Generation model)"),yWe=l(),jf=a("li"),gte=a("strong"),xWe=o("big_bird"),$We=o(" \u2014 "),lS=a("a"),kWe=o("BigBirdConfig"),SWe=o(" (BigBird model)"),RWe=l(),Df=a("li"),hte=a("strong"),PWe=o("bigbird_pegasus"),BWe=o(" \u2014 "),iS=a("a"),IWe=o("BigBirdPegasusConfig"),NWe=o(" (BigBird-Pegasus model)"),qWe=l(),Gf=a("li"),pte=a("strong"),jWe=o("blenderbot"),DWe=o(" \u2014 "),dS=a("a"),GWe=o("BlenderbotConfig"),OWe=o(" (Blenderbot model)"),VWe=l(),Of=a("li"),_te=a("strong"),XWe=o("blenderbot-small"),zWe=o(" \u2014 "),cS=a("a"),WWe=o("BlenderbotSmallConfig"),QWe=o(" (BlenderbotSmall model)"),HWe=l(),Vf=a("li"),ute=a("strong"),UWe=o("bloom"),JWe=o(" \u2014 "),fS=a("a"),YWe=o("BloomConfig"),KWe=o(" (BLOOM model)"),ZWe=l(),Xf=a("li"),bte=a("strong"),eQe=o("camembert"),oQe=o(" \u2014 "),mS=a("a"),rQe=o("CamembertConfig"),tQe=o(" (CamemBERT model)"),aQe=l(),zf=a("li"),vte=a("strong"),nQe=o("canine"),sQe=o(" \u2014 "),gS=a("a"),lQe=o("CanineConfig"),iQe=o(" (CANINE model)"),dQe=l(),Wf=a("li"),Fte=a("strong"),cQe=o("clip"),fQe=o(" \u2014 "),hS=a("a"),mQe=o("CLIPConfig"),gQe=o(" (CLIP model)"),hQe=l(),Qf=a("li"),Tte=a("strong"),pQe=o("convbert"),_Qe=o(" \u2014 "),pS=a("a"),uQe=o("ConvBertConfig"),bQe=o(" (ConvBERT model)"),vQe=l(),Hf=a("li"),Mte=a("strong"),FQe=o("convnext"),TQe=o(" \u2014 "),_S=a("a"),MQe=o("ConvNextConfig"),EQe=o(" (ConvNeXT model)"),CQe=l(),Uf=a("li"),Ete=a("strong"),wQe=o("ctrl"),AQe=o(" \u2014 "),uS=a("a"),LQe=o("CTRLConfig"),yQe=o(" (CTRL model)"),xQe=l(),Jf=a("li"),Cte=a("strong"),$Qe=o("cvt"),kQe=o(" \u2014 "),bS=a("a"),SQe=o("CvtConfig"),RQe=o(" (CvT model)"),PQe=l(),Yf=a("li"),wte=a("strong"),BQe=o("data2vec-audio"),IQe=o(" \u2014 "),vS=a("a"),NQe=o("Data2VecAudioConfig"),qQe=o(" (Data2VecAudio model)"),jQe=l(),Kf=a("li"),Ate=a("strong"),DQe=o("data2vec-text"),GQe=o(" \u2014 "),FS=a("a"),OQe=o("Data2VecTextConfig"),VQe=o(" (Data2VecText model)"),XQe=l(),Zf=a("li"),Lte=a("strong"),zQe=o("data2vec-vision"),WQe=o(" \u2014 "),TS=a("a"),QQe=o("Data2VecVisionConfig"),HQe=o(" (Data2VecVision model)"),UQe=l(),em=a("li"),yte=a("strong"),JQe=o("deberta"),YQe=o(" \u2014 "),MS=a("a"),KQe=o("DebertaConfig"),ZQe=o(" (DeBERTa model)"),eHe=l(),om=a("li"),xte=a("strong"),oHe=o("deberta-v2"),rHe=o(" \u2014 "),ES=a("a"),tHe=o("DebertaV2Config"),aHe=o(" (DeBERTa-v2 model)"),nHe=l(),rm=a("li"),$te=a("strong"),sHe=o("decision_transformer"),lHe=o(" \u2014 "),CS=a("a"),iHe=o("DecisionTransformerConfig"),dHe=o(" (Decision Transformer model)"),cHe=l(),tm=a("li"),kte=a("strong"),fHe=o("deit"),mHe=o(" \u2014 "),wS=a("a"),gHe=o("DeiTConfig"),hHe=o(" (DeiT model)"),pHe=l(),am=a("li"),Ste=a("strong"),_He=o("detr"),uHe=o(" \u2014 "),AS=a("a"),bHe=o("DetrConfig"),vHe=o(" (DETR model)"),FHe=l(),nm=a("li"),Rte=a("strong"),THe=o("distilbert"),MHe=o(" \u2014 "),LS=a("a"),EHe=o("DistilBertConfig"),CHe=o(" (DistilBERT model)"),wHe=l(),sm=a("li"),Pte=a("strong"),AHe=o("dpr"),LHe=o(" \u2014 "),yS=a("a"),yHe=o("DPRConfig"),xHe=o(" (DPR model)"),$He=l(),lm=a("li"),Bte=a("strong"),kHe=o("dpt"),SHe=o(" \u2014 "),xS=a("a"),RHe=o("DPTConfig"),PHe=o(" (DPT model)"),BHe=l(),im=a("li"),Ite=a("strong"),IHe=o("electra"),NHe=o(" \u2014 "),$S=a("a"),qHe=o("ElectraConfig"),jHe=o(" (ELECTRA model)"),DHe=l(),dm=a("li"),Nte=a("strong"),GHe=o("encoder-decoder"),OHe=o(" \u2014 "),kS=a("a"),VHe=o("EncoderDecoderConfig"),XHe=o(" (Encoder decoder model)"),zHe=l(),cm=a("li"),qte=a("strong"),WHe=o("flaubert"),QHe=o(" \u2014 "),SS=a("a"),HHe=o("FlaubertConfig"),UHe=o(" (FlauBERT model)"),JHe=l(),fm=a("li"),jte=a("strong"),YHe=o("flava"),KHe=o(" \u2014 "),RS=a("a"),ZHe=o("FlavaConfig"),eUe=o(" (FLAVA model)"),oUe=l(),mm=a("li"),Dte=a("strong"),rUe=o("fnet"),tUe=o(" \u2014 "),PS=a("a"),aUe=o("FNetConfig"),nUe=o(" (FNet model)"),sUe=l(),gm=a("li"),Gte=a("strong"),lUe=o("fsmt"),iUe=o(" \u2014 "),BS=a("a"),dUe=o("FSMTConfig"),cUe=o(" (FairSeq Machine-Translation model)"),fUe=l(),hm=a("li"),Ote=a("strong"),mUe=o("funnel"),gUe=o(" \u2014 "),IS=a("a"),hUe=o("FunnelConfig"),pUe=o(" (Funnel Transformer model)"),_Ue=l(),pm=a("li"),Vte=a("strong"),uUe=o("glpn"),bUe=o(" \u2014 "),NS=a("a"),vUe=o("GLPNConfig"),FUe=o(" (GLPN model)"),TUe=l(),_m=a("li"),Xte=a("strong"),MUe=o("gpt2"),EUe=o(" \u2014 "),qS=a("a"),CUe=o("GPT2Config"),wUe=o(" (OpenAI GPT-2 model)"),AUe=l(),um=a("li"),zte=a("strong"),LUe=o("gpt_neo"),yUe=o(" \u2014 "),jS=a("a"),xUe=o("GPTNeoConfig"),$Ue=o(" (GPT Neo model)"),kUe=l(),bm=a("li"),Wte=a("strong"),SUe=o("gpt_neox"),RUe=o(" \u2014 "),DS=a("a"),PUe=o("GPTNeoXConfig"),BUe=o(" (GPT NeoX model)"),IUe=l(),vm=a("li"),Qte=a("strong"),NUe=o("gptj"),qUe=o(" \u2014 "),GS=a("a"),jUe=o("GPTJConfig"),DUe=o(" (GPT-J model)"),GUe=l(),Fm=a("li"),Hte=a("strong"),OUe=o("hubert"),VUe=o(" \u2014 "),OS=a("a"),XUe=o("HubertConfig"),zUe=o(" (Hubert model)"),WUe=l(),Tm=a("li"),Ute=a("strong"),QUe=o("ibert"),HUe=o(" \u2014 "),VS=a("a"),UUe=o("IBertConfig"),JUe=o(" (I-BERT model)"),YUe=l(),Mm=a("li"),Jte=a("strong"),KUe=o("imagegpt"),ZUe=o(" \u2014 "),XS=a("a"),eJe=o("ImageGPTConfig"),oJe=o(" (ImageGPT model)"),rJe=l(),Em=a("li"),Yte=a("strong"),tJe=o("layoutlm"),aJe=o(" \u2014 "),zS=a("a"),nJe=o("LayoutLMConfig"),sJe=o(" (LayoutLM model)"),lJe=l(),Cm=a("li"),Kte=a("strong"),iJe=o("layoutlmv2"),dJe=o(" \u2014 "),WS=a("a"),cJe=o("LayoutLMv2Config"),fJe=o(" (LayoutLMv2 model)"),mJe=l(),wm=a("li"),Zte=a("strong"),gJe=o("layoutlmv3"),hJe=o(" \u2014 "),QS=a("a"),pJe=o("LayoutLMv3Config"),_Je=o(" (LayoutLMv3 model)"),uJe=l(),Am=a("li"),eae=a("strong"),bJe=o("led"),vJe=o(" \u2014 "),HS=a("a"),FJe=o("LEDConfig"),TJe=o(" (LED model)"),MJe=l(),Lm=a("li"),oae=a("strong"),EJe=o("levit"),CJe=o(" \u2014 "),US=a("a"),wJe=o("LevitConfig"),AJe=o(" (LeViT model)"),LJe=l(),ym=a("li"),rae=a("strong"),yJe=o("longformer"),xJe=o(" \u2014 "),JS=a("a"),$Je=o("LongformerConfig"),kJe=o(" (Longformer model)"),SJe=l(),xm=a("li"),tae=a("strong"),RJe=o("longt5"),PJe=o(" \u2014 "),YS=a("a"),BJe=o("LongT5Config"),IJe=o(" (LongT5 model)"),NJe=l(),$m=a("li"),aae=a("strong"),qJe=o("luke"),jJe=o(" \u2014 "),KS=a("a"),DJe=o("LukeConfig"),GJe=o(" (LUKE model)"),OJe=l(),km=a("li"),nae=a("strong"),VJe=o("lxmert"),XJe=o(" \u2014 "),ZS=a("a"),zJe=o("LxmertConfig"),WJe=o(" (LXMERT model)"),QJe=l(),Sm=a("li"),sae=a("strong"),HJe=o("m2m_100"),UJe=o(" \u2014 "),eR=a("a"),JJe=o("M2M100Config"),YJe=o(" (M2M100 model)"),KJe=l(),Rm=a("li"),lae=a("strong"),ZJe=o("marian"),eYe=o(" \u2014 "),oR=a("a"),oYe=o("MarianConfig"),rYe=o(" (Marian model)"),tYe=l(),Pm=a("li"),iae=a("strong"),aYe=o("maskformer"),nYe=o(" \u2014 "),rR=a("a"),sYe=o("MaskFormerConfig"),lYe=o(" (MaskFormer model)"),iYe=l(),Bm=a("li"),dae=a("strong"),dYe=o("mbart"),cYe=o(" \u2014 "),tR=a("a"),fYe=o("MBartConfig"),mYe=o(" (mBART model)"),gYe=l(),Im=a("li"),cae=a("strong"),hYe=o("mctct"),pYe=o(" \u2014 "),aR=a("a"),_Ye=o("MCTCTConfig"),uYe=o(" (M-CTC-T model)"),bYe=l(),Nm=a("li"),fae=a("strong"),vYe=o("megatron-bert"),FYe=o(" \u2014 "),nR=a("a"),TYe=o("MegatronBertConfig"),MYe=o(" (Megatron-BERT model)"),EYe=l(),qm=a("li"),mae=a("strong"),CYe=o("mobilebert"),wYe=o(" \u2014 "),sR=a("a"),AYe=o("MobileBertConfig"),LYe=o(" (MobileBERT model)"),yYe=l(),jm=a("li"),gae=a("strong"),xYe=o("mobilenet_v1"),$Ye=o(" \u2014 "),lR=a("a"),kYe=o("MobileNetV1Config"),SYe=o(" (MobileNetV1 model)"),RYe=l(),Dm=a("li"),hae=a("strong"),PYe=o("mpnet"),BYe=o(" \u2014 "),iR=a("a"),IYe=o("MPNetConfig"),NYe=o(" (MPNet model)"),qYe=l(),Gm=a("li"),pae=a("strong"),jYe=o("mt5"),DYe=o(" \u2014 "),dR=a("a"),GYe=o("MT5Config"),OYe=o(" (MT5 model)"),VYe=l(),Om=a("li"),_ae=a("strong"),XYe=o("nystromformer"),zYe=o(" \u2014 "),cR=a("a"),WYe=o("NystromformerConfig"),QYe=o(" (Nystr\xF6mformer model)"),HYe=l(),Vm=a("li"),uae=a("strong"),UYe=o("openai-gpt"),JYe=o(" \u2014 "),fR=a("a"),YYe=o("OpenAIGPTConfig"),KYe=o(" (OpenAI GPT model)"),ZYe=l(),Xm=a("li"),bae=a("strong"),eKe=o("opt"),oKe=o(" \u2014 "),mR=a("a"),rKe=o("OPTConfig"),tKe=o(" (OPT model)"),aKe=l(),zm=a("li"),vae=a("strong"),nKe=o("pegasus"),sKe=o(" \u2014 "),gR=a("a"),lKe=o("PegasusConfig"),iKe=o(" (Pegasus model)"),dKe=l(),Wm=a("li"),Fae=a("strong"),cKe=o("perceiver"),fKe=o(" \u2014 "),hR=a("a"),mKe=o("PerceiverConfig"),gKe=o(" (Perceiver model)"),hKe=l(),Qm=a("li"),Tae=a("strong"),pKe=o("plbart"),_Ke=o(" \u2014 "),pR=a("a"),uKe=o("PLBartConfig"),bKe=o(" (PLBart model)"),vKe=l(),Hm=a("li"),Mae=a("strong"),FKe=o("poolformer"),TKe=o(" \u2014 "),_R=a("a"),MKe=o("PoolFormerConfig"),EKe=o(" (PoolFormer model)"),CKe=l(),Um=a("li"),Eae=a("strong"),wKe=o("prophetnet"),AKe=o(" \u2014 "),uR=a("a"),LKe=o("ProphetNetConfig"),yKe=o(" (ProphetNet model)"),xKe=l(),Jm=a("li"),Cae=a("strong"),$Ke=o("qdqbert"),kKe=o(" \u2014 "),bR=a("a"),SKe=o("QDQBertConfig"),RKe=o(" (QDQBert model)"),PKe=l(),Ym=a("li"),wae=a("strong"),BKe=o("rag"),IKe=o(" \u2014 "),vR=a("a"),NKe=o("RagConfig"),qKe=o(" (RAG model)"),jKe=l(),Km=a("li"),Aae=a("strong"),DKe=o("realm"),GKe=o(" \u2014 "),FR=a("a"),OKe=o("RealmConfig"),VKe=o(" (REALM model)"),XKe=l(),Zm=a("li"),Lae=a("strong"),zKe=o("reformer"),WKe=o(" \u2014 "),TR=a("a"),QKe=o("ReformerConfig"),HKe=o(" (Reformer model)"),UKe=l(),eg=a("li"),yae=a("strong"),JKe=o("regnet"),YKe=o(" \u2014 "),MR=a("a"),KKe=o("RegNetConfig"),ZKe=o(" (RegNet model)"),eZe=l(),og=a("li"),xae=a("strong"),oZe=o("rembert"),rZe=o(" \u2014 "),ER=a("a"),tZe=o("RemBertConfig"),aZe=o(" (RemBERT model)"),nZe=l(),rg=a("li"),$ae=a("strong"),sZe=o("resnet"),lZe=o(" \u2014 "),CR=a("a"),iZe=o("ResNetConfig"),dZe=o(" (ResNet model)"),cZe=l(),tg=a("li"),kae=a("strong"),fZe=o("retribert"),mZe=o(" \u2014 "),wR=a("a"),gZe=o("RetriBertConfig"),hZe=o(" (RetriBERT model)"),pZe=l(),ag=a("li"),Sae=a("strong"),_Ze=o("roberta"),uZe=o(" \u2014 "),AR=a("a"),bZe=o("RobertaConfig"),vZe=o(" (RoBERTa model)"),FZe=l(),ng=a("li"),Rae=a("strong"),TZe=o("roformer"),MZe=o(" \u2014 "),LR=a("a"),EZe=o("RoFormerConfig"),CZe=o(" (RoFormer model)"),wZe=l(),sg=a("li"),Pae=a("strong"),AZe=o("segformer"),LZe=o(" \u2014 "),yR=a("a"),yZe=o("SegformerConfig"),xZe=o(" (SegFormer model)"),$Ze=l(),lg=a("li"),Bae=a("strong"),kZe=o("sew"),SZe=o(" \u2014 "),xR=a("a"),RZe=o("SEWConfig"),PZe=o(" (SEW model)"),BZe=l(),ig=a("li"),Iae=a("strong"),IZe=o("sew-d"),NZe=o(" \u2014 "),$R=a("a"),qZe=o("SEWDConfig"),jZe=o(" (SEW-D model)"),DZe=l(),dg=a("li"),Nae=a("strong"),GZe=o("speech-encoder-decoder"),OZe=o(" \u2014 "),kR=a("a"),VZe=o("SpeechEncoderDecoderConfig"),XZe=o(" (Speech Encoder decoder model)"),zZe=l(),cg=a("li"),qae=a("strong"),WZe=o("speech_to_text"),QZe=o(" \u2014 "),SR=a("a"),HZe=o("Speech2TextConfig"),UZe=o(" (Speech2Text model)"),JZe=l(),fg=a("li"),jae=a("strong"),YZe=o("speech_to_text_2"),KZe=o(" \u2014 "),RR=a("a"),ZZe=o("Speech2Text2Config"),eeo=o(" (Speech2Text2 model)"),oeo=l(),mg=a("li"),Dae=a("strong"),reo=o("splinter"),teo=o(" \u2014 "),PR=a("a"),aeo=o("SplinterConfig"),neo=o(" (Splinter model)"),seo=l(),gg=a("li"),Gae=a("strong"),leo=o("squeezebert"),ieo=o(" \u2014 "),BR=a("a"),deo=o("SqueezeBertConfig"),ceo=o(" (SqueezeBERT model)"),feo=l(),hg=a("li"),Oae=a("strong"),meo=o("swin"),geo=o(" \u2014 "),IR=a("a"),heo=o("SwinConfig"),peo=o(" (Swin Transformer model)"),_eo=l(),pg=a("li"),Vae=a("strong"),ueo=o("t5"),beo=o(" \u2014 "),NR=a("a"),veo=o("T5Config"),Feo=o(" (T5 model)"),Teo=l(),_g=a("li"),Xae=a("strong"),Meo=o("tapas"),Eeo=o(" \u2014 "),qR=a("a"),Ceo=o("TapasConfig"),weo=o(" (TAPAS model)"),Aeo=l(),ug=a("li"),zae=a("strong"),Leo=o("trajectory_transformer"),yeo=o(" \u2014 "),jR=a("a"),xeo=o("TrajectoryTransformerConfig"),$eo=o(" (Trajectory Transformer model)"),keo=l(),bg=a("li"),Wae=a("strong"),Seo=o("transfo-xl"),Reo=o(" \u2014 "),DR=a("a"),Peo=o("TransfoXLConfig"),Beo=o(" (Transformer-XL model)"),Ieo=l(),vg=a("li"),Qae=a("strong"),Neo=o("trocr"),qeo=o(" \u2014 "),GR=a("a"),jeo=o("TrOCRConfig"),Deo=o(" (TrOCR model)"),Geo=l(),Fg=a("li"),Hae=a("strong"),Oeo=o("unispeech"),Veo=o(" \u2014 "),OR=a("a"),Xeo=o("UniSpeechConfig"),zeo=o(" (UniSpeech model)"),Weo=l(),Tg=a("li"),Uae=a("strong"),Qeo=o("unispeech-sat"),Heo=o(" \u2014 "),VR=a("a"),Ueo=o("UniSpeechSatConfig"),Jeo=o(" (UniSpeechSat model)"),Yeo=l(),Mg=a("li"),Jae=a("strong"),Keo=o("van"),Zeo=o(" \u2014 "),XR=a("a"),eoo=o("VanConfig"),ooo=o(" (VAN model)"),roo=l(),Eg=a("li"),Yae=a("strong"),too=o("vilt"),aoo=o(" \u2014 "),zR=a("a"),noo=o("ViltConfig"),soo=o(" (ViLT model)"),loo=l(),Cg=a("li"),Kae=a("strong"),ioo=o("vision-encoder-decoder"),doo=o(" \u2014 "),WR=a("a"),coo=o("VisionEncoderDecoderConfig"),foo=o(" (Vision Encoder decoder model)"),moo=l(),wg=a("li"),Zae=a("strong"),goo=o("vision-text-dual-encoder"),hoo=o(" \u2014 "),QR=a("a"),poo=o("VisionTextDualEncoderConfig"),_oo=o(" (VisionTextDualEncoder model)"),uoo=l(),Ag=a("li"),ene=a("strong"),boo=o("visual_bert"),voo=o(" \u2014 "),HR=a("a"),Foo=o("VisualBertConfig"),Too=o(" (VisualBERT model)"),Moo=l(),Lg=a("li"),one=a("strong"),Eoo=o("vit"),Coo=o(" \u2014 "),UR=a("a"),woo=o("ViTConfig"),Aoo=o(" (ViT model)"),Loo=l(),yg=a("li"),rne=a("strong"),yoo=o("vit_mae"),xoo=o(" \u2014 "),JR=a("a"),$oo=o("ViTMAEConfig"),koo=o(" (ViTMAE model)"),Soo=l(),xg=a("li"),tne=a("strong"),Roo=o("wav2vec2"),Poo=o(" \u2014 "),YR=a("a"),Boo=o("Wav2Vec2Config"),Ioo=o(" (Wav2Vec2 model)"),Noo=l(),$g=a("li"),ane=a("strong"),qoo=o("wav2vec2-conformer"),joo=o(" \u2014 "),KR=a("a"),Doo=o("Wav2Vec2ConformerConfig"),Goo=o(" (Wav2Vec2-Conformer model)"),Ooo=l(),kg=a("li"),nne=a("strong"),Voo=o("wavlm"),Xoo=o(" \u2014 "),ZR=a("a"),zoo=o("WavLMConfig"),Woo=o(" (WavLM model)"),Qoo=l(),Sg=a("li"),sne=a("strong"),Hoo=o("xglm"),Uoo=o(" \u2014 "),eP=a("a"),Joo=o("XGLMConfig"),Yoo=o(" (XGLM model)"),Koo=l(),Rg=a("li"),lne=a("strong"),Zoo=o("xlm"),ero=o(" \u2014 "),oP=a("a"),oro=o("XLMConfig"),rro=o(" (XLM model)"),tro=l(),Pg=a("li"),ine=a("strong"),aro=o("xlm-prophetnet"),nro=o(" \u2014 "),rP=a("a"),sro=o("XLMProphetNetConfig"),lro=o(" (XLM-ProphetNet model)"),iro=l(),Bg=a("li"),dne=a("strong"),dro=o("xlm-roberta"),cro=o(" \u2014 "),tP=a("a"),fro=o("XLMRobertaConfig"),mro=o(" (XLM-RoBERTa model)"),gro=l(),Ig=a("li"),cne=a("strong"),hro=o("xlm-roberta-xl"),pro=o(" \u2014 "),aP=a("a"),_ro=o("XLMRobertaXLConfig"),uro=o(" (XLM-RoBERTa-XL model)"),bro=l(),Ng=a("li"),fne=a("strong"),vro=o("xlnet"),Fro=o(" \u2014 "),nP=a("a"),Tro=o("XLNetConfig"),Mro=o(" (XLNet model)"),Ero=l(),qg=a("li"),mne=a("strong"),Cro=o("yolos"),wro=o(" \u2014 "),sP=a("a"),Aro=o("YolosConfig"),Lro=o(" (YOLOS model)"),yro=l(),jg=a("li"),gne=a("strong"),xro=o("yoso"),$ro=o(" \u2014 "),lP=a("a"),kro=o("YosoConfig"),Sro=o(" (YOSO model)"),Rro=l(),F(Dg.$$.fragment),Pro=l(),Gg=a("div"),F($6.$$.fragment),Bro=l(),hne=a("p"),Iro=o("Register a new configuration for this class."),TGe=l(),$i=a("h2"),Og=a("a"),pne=a("span"),F(k6.$$.fragment),Nro=l(),_ne=a("span"),qro=o("AutoTokenizer"),MGe=l(),Ao=a("div"),F(S6.$$.fragment),jro=l(),R6=a("p"),Dro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iP=a("a"),Gro=o("AutoTokenizer.from_pretrained()"),Oro=o(" class method."),Vro=l(),P6=a("p"),Xro=o("This class cannot be instantiated directly using "),une=a("code"),zro=o("__init__()"),Wro=o(" (throws an error)."),Qro=l(),Ar=a("div"),F(B6.$$.fragment),Hro=l(),bne=a("p"),Uro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Jro=l(),$a=a("p"),Yro=o("The tokenizer class to instantiate is selected based on the "),vne=a("code"),Kro=o("model_type"),Zro=o(` property of the config object (either
passed as an argument or loaded from `),Fne=a("code"),eto=o("pretrained_model_name_or_path"),oto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tne=a("code"),rto=o("pretrained_model_name_or_path"),tto=o(":"),ato=l(),k=a("ul"),Nn=a("li"),Mne=a("strong"),nto=o("albert"),sto=o(" \u2014 "),dP=a("a"),lto=o("AlbertTokenizer"),ito=o(" or "),cP=a("a"),dto=o("AlbertTokenizerFast"),cto=o(" (ALBERT model)"),fto=l(),qn=a("li"),Ene=a("strong"),mto=o("bart"),gto=o(" \u2014 "),fP=a("a"),hto=o("BartTokenizer"),pto=o(" or "),mP=a("a"),_to=o("BartTokenizerFast"),uto=o(" (BART model)"),bto=l(),jn=a("li"),Cne=a("strong"),vto=o("barthez"),Fto=o(" \u2014 "),gP=a("a"),Tto=o("BarthezTokenizer"),Mto=o(" or "),hP=a("a"),Eto=o("BarthezTokenizerFast"),Cto=o(" (BARThez model)"),wto=l(),Vg=a("li"),wne=a("strong"),Ato=o("bartpho"),Lto=o(" \u2014 "),pP=a("a"),yto=o("BartphoTokenizer"),xto=o(" (BARTpho model)"),$to=l(),Dn=a("li"),Ane=a("strong"),kto=o("bert"),Sto=o(" \u2014 "),_P=a("a"),Rto=o("BertTokenizer"),Pto=o(" or "),uP=a("a"),Bto=o("BertTokenizerFast"),Ito=o(" (BERT model)"),Nto=l(),Xg=a("li"),Lne=a("strong"),qto=o("bert-generation"),jto=o(" \u2014 "),bP=a("a"),Dto=o("BertGenerationTokenizer"),Gto=o(" (Bert Generation model)"),Oto=l(),zg=a("li"),yne=a("strong"),Vto=o("bert-japanese"),Xto=o(" \u2014 "),vP=a("a"),zto=o("BertJapaneseTokenizer"),Wto=o(" (BertJapanese model)"),Qto=l(),Wg=a("li"),xne=a("strong"),Hto=o("bertweet"),Uto=o(" \u2014 "),FP=a("a"),Jto=o("BertweetTokenizer"),Yto=o(" (BERTweet model)"),Kto=l(),Gn=a("li"),$ne=a("strong"),Zto=o("big_bird"),eao=o(" \u2014 "),TP=a("a"),oao=o("BigBirdTokenizer"),rao=o(" or "),MP=a("a"),tao=o("BigBirdTokenizerFast"),aao=o(" (BigBird model)"),nao=l(),On=a("li"),kne=a("strong"),sao=o("bigbird_pegasus"),lao=o(" \u2014 "),EP=a("a"),iao=o("PegasusTokenizer"),dao=o(" or "),CP=a("a"),cao=o("PegasusTokenizerFast"),fao=o(" (BigBird-Pegasus model)"),mao=l(),Vn=a("li"),Sne=a("strong"),gao=o("blenderbot"),hao=o(" \u2014 "),wP=a("a"),pao=o("BlenderbotTokenizer"),_ao=o(" or "),AP=a("a"),uao=o("BlenderbotTokenizerFast"),bao=o(" (Blenderbot model)"),vao=l(),Qg=a("li"),Rne=a("strong"),Fao=o("blenderbot-small"),Tao=o(" \u2014 "),LP=a("a"),Mao=o("BlenderbotSmallTokenizer"),Eao=o(" (BlenderbotSmall model)"),Cao=l(),Hg=a("li"),Pne=a("strong"),wao=o("bloom"),Aao=o(" \u2014 "),yP=a("a"),Lao=o("BloomTokenizerFast"),yao=o(" (BLOOM model)"),xao=l(),Ug=a("li"),Bne=a("strong"),$ao=o("byt5"),kao=o(" \u2014 "),xP=a("a"),Sao=o("ByT5Tokenizer"),Rao=o(" (ByT5 model)"),Pao=l(),Xn=a("li"),Ine=a("strong"),Bao=o("camembert"),Iao=o(" \u2014 "),$P=a("a"),Nao=o("CamembertTokenizer"),qao=o(" or "),kP=a("a"),jao=o("CamembertTokenizerFast"),Dao=o(" (CamemBERT model)"),Gao=l(),Jg=a("li"),Nne=a("strong"),Oao=o("canine"),Vao=o(" \u2014 "),SP=a("a"),Xao=o("CanineTokenizer"),zao=o(" (CANINE model)"),Wao=l(),zn=a("li"),qne=a("strong"),Qao=o("clip"),Hao=o(" \u2014 "),RP=a("a"),Uao=o("CLIPTokenizer"),Jao=o(" or "),PP=a("a"),Yao=o("CLIPTokenizerFast"),Kao=o(" (CLIP model)"),Zao=l(),Wn=a("li"),jne=a("strong"),eno=o("convbert"),ono=o(" \u2014 "),BP=a("a"),rno=o("ConvBertTokenizer"),tno=o(" or "),IP=a("a"),ano=o("ConvBertTokenizerFast"),nno=o(" (ConvBERT model)"),sno=l(),Qn=a("li"),Dne=a("strong"),lno=o("cpm"),ino=o(" \u2014 "),NP=a("a"),dno=o("CpmTokenizer"),cno=o(" or "),qP=a("a"),fno=o("CpmTokenizerFast"),mno=o(" (CPM model)"),gno=l(),Yg=a("li"),Gne=a("strong"),hno=o("ctrl"),pno=o(" \u2014 "),jP=a("a"),_no=o("CTRLTokenizer"),uno=o(" (CTRL model)"),bno=l(),Hn=a("li"),One=a("strong"),vno=o("data2vec-text"),Fno=o(" \u2014 "),DP=a("a"),Tno=o("RobertaTokenizer"),Mno=o(" or "),GP=a("a"),Eno=o("RobertaTokenizerFast"),Cno=o(" (Data2VecText model)"),wno=l(),Un=a("li"),Vne=a("strong"),Ano=o("deberta"),Lno=o(" \u2014 "),OP=a("a"),yno=o("DebertaTokenizer"),xno=o(" or "),VP=a("a"),$no=o("DebertaTokenizerFast"),kno=o(" (DeBERTa model)"),Sno=l(),Jn=a("li"),Xne=a("strong"),Rno=o("deberta-v2"),Pno=o(" \u2014 "),XP=a("a"),Bno=o("DebertaV2Tokenizer"),Ino=o(" or "),zP=a("a"),Nno=o("DebertaV2TokenizerFast"),qno=o(" (DeBERTa-v2 model)"),jno=l(),Yn=a("li"),zne=a("strong"),Dno=o("distilbert"),Gno=o(" \u2014 "),WP=a("a"),Ono=o("DistilBertTokenizer"),Vno=o(" or "),QP=a("a"),Xno=o("DistilBertTokenizerFast"),zno=o(" (DistilBERT model)"),Wno=l(),Kn=a("li"),Wne=a("strong"),Qno=o("dpr"),Hno=o(" \u2014 "),HP=a("a"),Uno=o("DPRQuestionEncoderTokenizer"),Jno=o(" or "),UP=a("a"),Yno=o("DPRQuestionEncoderTokenizerFast"),Kno=o(" (DPR model)"),Zno=l(),Zn=a("li"),Qne=a("strong"),eso=o("electra"),oso=o(" \u2014 "),JP=a("a"),rso=o("ElectraTokenizer"),tso=o(" or "),YP=a("a"),aso=o("ElectraTokenizerFast"),nso=o(" (ELECTRA model)"),sso=l(),Kg=a("li"),Hne=a("strong"),lso=o("flaubert"),iso=o(" \u2014 "),KP=a("a"),dso=o("FlaubertTokenizer"),cso=o(" (FlauBERT model)"),fso=l(),es=a("li"),Une=a("strong"),mso=o("fnet"),gso=o(" \u2014 "),ZP=a("a"),hso=o("FNetTokenizer"),pso=o(" or "),eB=a("a"),_so=o("FNetTokenizerFast"),uso=o(" (FNet model)"),bso=l(),Zg=a("li"),Jne=a("strong"),vso=o("fsmt"),Fso=o(" \u2014 "),oB=a("a"),Tso=o("FSMTTokenizer"),Mso=o(" (FairSeq Machine-Translation model)"),Eso=l(),os=a("li"),Yne=a("strong"),Cso=o("funnel"),wso=o(" \u2014 "),rB=a("a"),Aso=o("FunnelTokenizer"),Lso=o(" or "),tB=a("a"),yso=o("FunnelTokenizerFast"),xso=o(" (Funnel Transformer model)"),$so=l(),rs=a("li"),Kne=a("strong"),kso=o("gpt2"),Sso=o(" \u2014 "),aB=a("a"),Rso=o("GPT2Tokenizer"),Pso=o(" or "),nB=a("a"),Bso=o("GPT2TokenizerFast"),Iso=o(" (OpenAI GPT-2 model)"),Nso=l(),ts=a("li"),Zne=a("strong"),qso=o("gpt_neo"),jso=o(" \u2014 "),sB=a("a"),Dso=o("GPT2Tokenizer"),Gso=o(" or "),lB=a("a"),Oso=o("GPT2TokenizerFast"),Vso=o(" (GPT Neo model)"),Xso=l(),eh=a("li"),ese=a("strong"),zso=o("gpt_neox"),Wso=o(" \u2014 "),iB=a("a"),Qso=o("GPTNeoXTokenizerFast"),Hso=o(" (GPT NeoX model)"),Uso=l(),as=a("li"),ose=a("strong"),Jso=o("gptj"),Yso=o(" \u2014 "),dB=a("a"),Kso=o("GPT2Tokenizer"),Zso=o(" or "),cB=a("a"),elo=o("GPT2TokenizerFast"),olo=o(" (GPT-J model)"),rlo=l(),ns=a("li"),rse=a("strong"),tlo=o("herbert"),alo=o(" \u2014 "),fB=a("a"),nlo=o("HerbertTokenizer"),slo=o(" or "),mB=a("a"),llo=o("HerbertTokenizerFast"),ilo=o(" (HerBERT model)"),dlo=l(),oh=a("li"),tse=a("strong"),clo=o("hubert"),flo=o(" \u2014 "),gB=a("a"),mlo=o("Wav2Vec2CTCTokenizer"),glo=o(" (Hubert model)"),hlo=l(),ss=a("li"),ase=a("strong"),plo=o("ibert"),_lo=o(" \u2014 "),hB=a("a"),ulo=o("RobertaTokenizer"),blo=o(" or "),pB=a("a"),vlo=o("RobertaTokenizerFast"),Flo=o(" (I-BERT model)"),Tlo=l(),ls=a("li"),nse=a("strong"),Mlo=o("layoutlm"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("LayoutLMTokenizer"),wlo=o(" or "),uB=a("a"),Alo=o("LayoutLMTokenizerFast"),Llo=o(" (LayoutLM model)"),ylo=l(),is=a("li"),sse=a("strong"),xlo=o("layoutlmv2"),$lo=o(" \u2014 "),bB=a("a"),klo=o("LayoutLMv2Tokenizer"),Slo=o(" or "),vB=a("a"),Rlo=o("LayoutLMv2TokenizerFast"),Plo=o(" (LayoutLMv2 model)"),Blo=l(),ds=a("li"),lse=a("strong"),Ilo=o("layoutlmv3"),Nlo=o(" \u2014 "),FB=a("a"),qlo=o("LayoutLMv3Tokenizer"),jlo=o(" or "),TB=a("a"),Dlo=o("LayoutLMv3TokenizerFast"),Glo=o(" (LayoutLMv3 model)"),Olo=l(),cs=a("li"),ise=a("strong"),Vlo=o("layoutxlm"),Xlo=o(" \u2014 "),MB=a("a"),zlo=o("LayoutXLMTokenizer"),Wlo=o(" or "),EB=a("a"),Qlo=o("LayoutXLMTokenizerFast"),Hlo=o(" (LayoutXLM model)"),Ulo=l(),fs=a("li"),dse=a("strong"),Jlo=o("led"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("LEDTokenizer"),Zlo=o(" or "),wB=a("a"),eio=o("LEDTokenizerFast"),oio=o(" (LED model)"),rio=l(),ms=a("li"),cse=a("strong"),tio=o("longformer"),aio=o(" \u2014 "),AB=a("a"),nio=o("LongformerTokenizer"),sio=o(" or "),LB=a("a"),lio=o("LongformerTokenizerFast"),iio=o(" (Longformer model)"),dio=l(),gs=a("li"),fse=a("strong"),cio=o("longt5"),fio=o(" \u2014 "),yB=a("a"),mio=o("T5Tokenizer"),gio=o(" or "),xB=a("a"),hio=o("T5TokenizerFast"),pio=o(" (LongT5 model)"),_io=l(),rh=a("li"),mse=a("strong"),uio=o("luke"),bio=o(" \u2014 "),$B=a("a"),vio=o("LukeTokenizer"),Fio=o(" (LUKE model)"),Tio=l(),hs=a("li"),gse=a("strong"),Mio=o("lxmert"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("LxmertTokenizer"),wio=o(" or "),SB=a("a"),Aio=o("LxmertTokenizerFast"),Lio=o(" (LXMERT model)"),yio=l(),th=a("li"),hse=a("strong"),xio=o("m2m_100"),$io=o(" \u2014 "),RB=a("a"),kio=o("M2M100Tokenizer"),Sio=o(" (M2M100 model)"),Rio=l(),ah=a("li"),pse=a("strong"),Pio=o("marian"),Bio=o(" \u2014 "),PB=a("a"),Iio=o("MarianTokenizer"),Nio=o(" (Marian model)"),qio=l(),ps=a("li"),_se=a("strong"),jio=o("mbart"),Dio=o(" \u2014 "),BB=a("a"),Gio=o("MBartTokenizer"),Oio=o(" or "),IB=a("a"),Vio=o("MBartTokenizerFast"),Xio=o(" (mBART model)"),zio=l(),_s=a("li"),use=a("strong"),Wio=o("mbart50"),Qio=o(" \u2014 "),NB=a("a"),Hio=o("MBart50Tokenizer"),Uio=o(" or "),qB=a("a"),Jio=o("MBart50TokenizerFast"),Yio=o(" (mBART-50 model)"),Kio=l(),us=a("li"),bse=a("strong"),Zio=o("megatron-bert"),edo=o(" \u2014 "),jB=a("a"),odo=o("BertTokenizer"),rdo=o(" or "),DB=a("a"),tdo=o("BertTokenizerFast"),ado=o(" (Megatron-BERT model)"),ndo=l(),nh=a("li"),vse=a("strong"),sdo=o("mluke"),ldo=o(" \u2014 "),GB=a("a"),ido=o("MLukeTokenizer"),ddo=o(" (mLUKE model)"),cdo=l(),bs=a("li"),Fse=a("strong"),fdo=o("mobilebert"),mdo=o(" \u2014 "),OB=a("a"),gdo=o("MobileBertTokenizer"),hdo=o(" or "),VB=a("a"),pdo=o("MobileBertTokenizerFast"),_do=o(" (MobileBERT model)"),udo=l(),vs=a("li"),Tse=a("strong"),bdo=o("mpnet"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("MPNetTokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("MPNetTokenizerFast"),Edo=o(" (MPNet model)"),Cdo=l(),Fs=a("li"),Mse=a("strong"),wdo=o("mt5"),Ado=o(" \u2014 "),WB=a("a"),Ldo=o("MT5Tokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("MT5TokenizerFast"),$do=o(" (MT5 model)"),kdo=l(),Ts=a("li"),Ese=a("strong"),Sdo=o("nystromformer"),Rdo=o(" \u2014 "),HB=a("a"),Pdo=o("AlbertTokenizer"),Bdo=o(" or "),UB=a("a"),Ido=o("AlbertTokenizerFast"),Ndo=o(" (Nystr\xF6mformer model)"),qdo=l(),Ms=a("li"),Cse=a("strong"),jdo=o("openai-gpt"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("OpenAIGPTTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("OpenAIGPTTokenizerFast"),Xdo=o(" (OpenAI GPT model)"),zdo=l(),sh=a("li"),wse=a("strong"),Wdo=o("opt"),Qdo=o(" \u2014 "),KB=a("a"),Hdo=o("GPT2Tokenizer"),Udo=o(" (OPT model)"),Jdo=l(),Es=a("li"),Ase=a("strong"),Ydo=o("pegasus"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("PegasusTokenizer"),eco=o(" or "),eI=a("a"),oco=o("PegasusTokenizerFast"),rco=o(" (Pegasus model)"),tco=l(),lh=a("li"),Lse=a("strong"),aco=o("perceiver"),nco=o(" \u2014 "),oI=a("a"),sco=o("PerceiverTokenizer"),lco=o(" (Perceiver model)"),ico=l(),ih=a("li"),yse=a("strong"),dco=o("phobert"),cco=o(" \u2014 "),rI=a("a"),fco=o("PhobertTokenizer"),mco=o(" (PhoBERT model)"),gco=l(),dh=a("li"),xse=a("strong"),hco=o("plbart"),pco=o(" \u2014 "),tI=a("a"),_co=o("PLBartTokenizer"),uco=o(" (PLBart model)"),bco=l(),ch=a("li"),$se=a("strong"),vco=o("prophetnet"),Fco=o(" \u2014 "),aI=a("a"),Tco=o("ProphetNetTokenizer"),Mco=o(" (ProphetNet model)"),Eco=l(),Cs=a("li"),kse=a("strong"),Cco=o("qdqbert"),wco=o(" \u2014 "),nI=a("a"),Aco=o("BertTokenizer"),Lco=o(" or "),sI=a("a"),yco=o("BertTokenizerFast"),xco=o(" (QDQBert model)"),$co=l(),fh=a("li"),Sse=a("strong"),kco=o("rag"),Sco=o(" \u2014 "),lI=a("a"),Rco=o("RagTokenizer"),Pco=o(" (RAG model)"),Bco=l(),ws=a("li"),Rse=a("strong"),Ico=o("realm"),Nco=o(" \u2014 "),iI=a("a"),qco=o("RealmTokenizer"),jco=o(" or "),dI=a("a"),Dco=o("RealmTokenizerFast"),Gco=o(" (REALM model)"),Oco=l(),As=a("li"),Pse=a("strong"),Vco=o("reformer"),Xco=o(" \u2014 "),cI=a("a"),zco=o("ReformerTokenizer"),Wco=o(" or "),fI=a("a"),Qco=o("ReformerTokenizerFast"),Hco=o(" (Reformer model)"),Uco=l(),Ls=a("li"),Bse=a("strong"),Jco=o("rembert"),Yco=o(" \u2014 "),mI=a("a"),Kco=o("RemBertTokenizer"),Zco=o(" or "),gI=a("a"),efo=o("RemBertTokenizerFast"),ofo=o(" (RemBERT model)"),rfo=l(),ys=a("li"),Ise=a("strong"),tfo=o("retribert"),afo=o(" \u2014 "),hI=a("a"),nfo=o("RetriBertTokenizer"),sfo=o(" or "),pI=a("a"),lfo=o("RetriBertTokenizerFast"),ifo=o(" (RetriBERT model)"),dfo=l(),xs=a("li"),Nse=a("strong"),cfo=o("roberta"),ffo=o(" \u2014 "),_I=a("a"),mfo=o("RobertaTokenizer"),gfo=o(" or "),uI=a("a"),hfo=o("RobertaTokenizerFast"),pfo=o(" (RoBERTa model)"),_fo=l(),$s=a("li"),qse=a("strong"),ufo=o("roformer"),bfo=o(" \u2014 "),bI=a("a"),vfo=o("RoFormerTokenizer"),Ffo=o(" or "),vI=a("a"),Tfo=o("RoFormerTokenizerFast"),Mfo=o(" (RoFormer model)"),Efo=l(),mh=a("li"),jse=a("strong"),Cfo=o("speech_to_text"),wfo=o(" \u2014 "),FI=a("a"),Afo=o("Speech2TextTokenizer"),Lfo=o(" (Speech2Text model)"),yfo=l(),gh=a("li"),Dse=a("strong"),xfo=o("speech_to_text_2"),$fo=o(" \u2014 "),TI=a("a"),kfo=o("Speech2Text2Tokenizer"),Sfo=o(" (Speech2Text2 model)"),Rfo=l(),ks=a("li"),Gse=a("strong"),Pfo=o("splinter"),Bfo=o(" \u2014 "),MI=a("a"),Ifo=o("SplinterTokenizer"),Nfo=o(" or "),EI=a("a"),qfo=o("SplinterTokenizerFast"),jfo=o(" (Splinter model)"),Dfo=l(),Ss=a("li"),Ose=a("strong"),Gfo=o("squeezebert"),Ofo=o(" \u2014 "),CI=a("a"),Vfo=o("SqueezeBertTokenizer"),Xfo=o(" or "),wI=a("a"),zfo=o("SqueezeBertTokenizerFast"),Wfo=o(" (SqueezeBERT model)"),Qfo=l(),Rs=a("li"),Vse=a("strong"),Hfo=o("t5"),Ufo=o(" \u2014 "),AI=a("a"),Jfo=o("T5Tokenizer"),Yfo=o(" or "),LI=a("a"),Kfo=o("T5TokenizerFast"),Zfo=o(" (T5 model)"),emo=l(),hh=a("li"),Xse=a("strong"),omo=o("tapas"),rmo=o(" \u2014 "),yI=a("a"),tmo=o("TapasTokenizer"),amo=o(" (TAPAS model)"),nmo=l(),ph=a("li"),zse=a("strong"),smo=o("tapex"),lmo=o(" \u2014 "),xI=a("a"),imo=o("TapexTokenizer"),dmo=o(" (TAPEX model)"),cmo=l(),_h=a("li"),Wse=a("strong"),fmo=o("transfo-xl"),mmo=o(" \u2014 "),$I=a("a"),gmo=o("TransfoXLTokenizer"),hmo=o(" (Transformer-XL model)"),pmo=l(),Ps=a("li"),Qse=a("strong"),_mo=o("vilt"),umo=o(" \u2014 "),kI=a("a"),bmo=o("BertTokenizer"),vmo=o(" or "),SI=a("a"),Fmo=o("BertTokenizerFast"),Tmo=o(" (ViLT model)"),Mmo=l(),Bs=a("li"),Hse=a("strong"),Emo=o("visual_bert"),Cmo=o(" \u2014 "),RI=a("a"),wmo=o("BertTokenizer"),Amo=o(" or "),PI=a("a"),Lmo=o("BertTokenizerFast"),ymo=o(" (VisualBERT model)"),xmo=l(),uh=a("li"),Use=a("strong"),$mo=o("wav2vec2"),kmo=o(" \u2014 "),BI=a("a"),Smo=o("Wav2Vec2CTCTokenizer"),Rmo=o(" (Wav2Vec2 model)"),Pmo=l(),bh=a("li"),Jse=a("strong"),Bmo=o("wav2vec2-conformer"),Imo=o(" \u2014 "),II=a("a"),Nmo=o("Wav2Vec2CTCTokenizer"),qmo=o(" (Wav2Vec2-Conformer model)"),jmo=l(),vh=a("li"),Yse=a("strong"),Dmo=o("wav2vec2_phoneme"),Gmo=o(" \u2014 "),NI=a("a"),Omo=o("Wav2Vec2PhonemeCTCTokenizer"),Vmo=o(" (Wav2Vec2Phoneme model)"),Xmo=l(),Is=a("li"),Kse=a("strong"),zmo=o("xglm"),Wmo=o(" \u2014 "),qI=a("a"),Qmo=o("XGLMTokenizer"),Hmo=o(" or "),jI=a("a"),Umo=o("XGLMTokenizerFast"),Jmo=o(" (XGLM model)"),Ymo=l(),Fh=a("li"),Zse=a("strong"),Kmo=o("xlm"),Zmo=o(" \u2014 "),DI=a("a"),ego=o("XLMTokenizer"),ogo=o(" (XLM model)"),rgo=l(),Th=a("li"),ele=a("strong"),tgo=o("xlm-prophetnet"),ago=o(" \u2014 "),GI=a("a"),ngo=o("XLMProphetNetTokenizer"),sgo=o(" (XLM-ProphetNet model)"),lgo=l(),Ns=a("li"),ole=a("strong"),igo=o("xlm-roberta"),dgo=o(" \u2014 "),OI=a("a"),cgo=o("XLMRobertaTokenizer"),fgo=o(" or "),VI=a("a"),mgo=o("XLMRobertaTokenizerFast"),ggo=o(" (XLM-RoBERTa model)"),hgo=l(),qs=a("li"),rle=a("strong"),pgo=o("xlm-roberta-xl"),_go=o(" \u2014 "),XI=a("a"),ugo=o("RobertaTokenizer"),bgo=o(" or "),zI=a("a"),vgo=o("RobertaTokenizerFast"),Fgo=o(" (XLM-RoBERTa-XL model)"),Tgo=l(),js=a("li"),tle=a("strong"),Mgo=o("xlnet"),Ego=o(" \u2014 "),WI=a("a"),Cgo=o("XLNetTokenizer"),wgo=o(" or "),QI=a("a"),Ago=o("XLNetTokenizerFast"),Lgo=o(" (XLNet model)"),ygo=l(),Ds=a("li"),ale=a("strong"),xgo=o("yoso"),$go=o(" \u2014 "),HI=a("a"),kgo=o("AlbertTokenizer"),Sgo=o(" or "),UI=a("a"),Rgo=o("AlbertTokenizerFast"),Pgo=o(" (YOSO model)"),Bgo=l(),F(Mh.$$.fragment),Igo=l(),Eh=a("div"),F(I6.$$.fragment),Ngo=l(),nle=a("p"),qgo=o("Register a new tokenizer in this mapping."),EGe=l(),ki=a("h2"),Ch=a("a"),sle=a("span"),F(N6.$$.fragment),jgo=l(),lle=a("span"),Dgo=o("AutoFeatureExtractor"),CGe=l(),Lo=a("div"),F(q6.$$.fragment),Ggo=l(),j6=a("p"),Ogo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JI=a("a"),Vgo=o("AutoFeatureExtractor.from_pretrained()"),Xgo=o(" class method."),zgo=l(),D6=a("p"),Wgo=o("This class cannot be instantiated directly using "),ile=a("code"),Qgo=o("__init__()"),Hgo=o(" (throws an error)."),Ugo=l(),He=a("div"),F(G6.$$.fragment),Jgo=l(),dle=a("p"),Ygo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Kgo=l(),ka=a("p"),Zgo=o("The feature extractor class to instantiate is selected based on the "),cle=a("code"),eho=o("model_type"),oho=o(` property of the config object
(either passed as an argument or loaded from `),fle=a("code"),rho=o("pretrained_model_name_or_path"),tho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mle=a("code"),aho=o("pretrained_model_name_or_path"),nho=o(":"),sho=l(),Y=a("ul"),wh=a("li"),gle=a("strong"),lho=o("beit"),iho=o(" \u2014 "),YI=a("a"),dho=o("BeitFeatureExtractor"),cho=o(" (BEiT model)"),fho=l(),Ah=a("li"),hle=a("strong"),mho=o("clip"),gho=o(" \u2014 "),KI=a("a"),hho=o("CLIPFeatureExtractor"),pho=o(" (CLIP model)"),_ho=l(),Lh=a("li"),ple=a("strong"),uho=o("convnext"),bho=o(" \u2014 "),ZI=a("a"),vho=o("ConvNextFeatureExtractor"),Fho=o(" (ConvNeXT model)"),Tho=l(),yh=a("li"),_le=a("strong"),Mho=o("cvt"),Eho=o(" \u2014 "),eN=a("a"),Cho=o("ConvNextFeatureExtractor"),who=o(" (CvT model)"),Aho=l(),xh=a("li"),ule=a("strong"),Lho=o("data2vec-audio"),yho=o(" \u2014 "),oN=a("a"),xho=o("Wav2Vec2FeatureExtractor"),$ho=o(" (Data2VecAudio model)"),kho=l(),$h=a("li"),ble=a("strong"),Sho=o("data2vec-vision"),Rho=o(" \u2014 "),rN=a("a"),Pho=o("BeitFeatureExtractor"),Bho=o(" (Data2VecVision model)"),Iho=l(),kh=a("li"),vle=a("strong"),Nho=o("deit"),qho=o(" \u2014 "),tN=a("a"),jho=o("DeiTFeatureExtractor"),Dho=o(" (DeiT model)"),Gho=l(),Sh=a("li"),Fle=a("strong"),Oho=o("detr"),Vho=o(" \u2014 "),aN=a("a"),Xho=o("DetrFeatureExtractor"),zho=o(" (DETR model)"),Who=l(),Rh=a("li"),Tle=a("strong"),Qho=o("dpt"),Hho=o(" \u2014 "),nN=a("a"),Uho=o("DPTFeatureExtractor"),Jho=o(" (DPT model)"),Yho=l(),Ph=a("li"),Mle=a("strong"),Kho=o("flava"),Zho=o(" \u2014 "),sN=a("a"),epo=o("FlavaFeatureExtractor"),opo=o(" (FLAVA model)"),rpo=l(),Bh=a("li"),Ele=a("strong"),tpo=o("glpn"),apo=o(" \u2014 "),lN=a("a"),npo=o("GLPNFeatureExtractor"),spo=o(" (GLPN model)"),lpo=l(),Ih=a("li"),Cle=a("strong"),ipo=o("hubert"),dpo=o(" \u2014 "),iN=a("a"),cpo=o("Wav2Vec2FeatureExtractor"),fpo=o(" (Hubert model)"),mpo=l(),Nh=a("li"),wle=a("strong"),gpo=o("imagegpt"),hpo=o(" \u2014 "),dN=a("a"),ppo=o("ImageGPTFeatureExtractor"),_po=o(" (ImageGPT model)"),upo=l(),qh=a("li"),Ale=a("strong"),bpo=o("layoutlmv2"),vpo=o(" \u2014 "),cN=a("a"),Fpo=o("LayoutLMv2FeatureExtractor"),Tpo=o(" (LayoutLMv2 model)"),Mpo=l(),jh=a("li"),Lle=a("strong"),Epo=o("layoutlmv3"),Cpo=o(" \u2014 "),fN=a("a"),wpo=o("LayoutLMv3FeatureExtractor"),Apo=o(" (LayoutLMv3 model)"),Lpo=l(),Dh=a("li"),yle=a("strong"),ypo=o("levit"),xpo=o(" \u2014 "),mN=a("a"),$po=o("LevitFeatureExtractor"),kpo=o(" (LeViT model)"),Spo=l(),Gh=a("li"),xle=a("strong"),Rpo=o("maskformer"),Ppo=o(" \u2014 "),gN=a("a"),Bpo=o("MaskFormerFeatureExtractor"),Ipo=o(" (MaskFormer model)"),Npo=l(),Oh=a("li"),$le=a("strong"),qpo=o("mctct"),jpo=o(" \u2014 "),hN=a("a"),Dpo=o("MCTCTFeatureExtractor"),Gpo=o(" (M-CTC-T model)"),Opo=l(),Vh=a("li"),kle=a("strong"),Vpo=o("mobilenet_v1"),Xpo=o(" \u2014 "),pN=a("a"),zpo=o("MobileNetV1FeatureExtractor"),Wpo=o(" (MobileNetV1 model)"),Qpo=l(),Xh=a("li"),Sle=a("strong"),Hpo=o("perceiver"),Upo=o(" \u2014 "),_N=a("a"),Jpo=o("PerceiverFeatureExtractor"),Ypo=o(" (Perceiver model)"),Kpo=l(),zh=a("li"),Rle=a("strong"),Zpo=o("poolformer"),e_o=o(" \u2014 "),uN=a("a"),o_o=o("PoolFormerFeatureExtractor"),r_o=o(" (PoolFormer model)"),t_o=l(),Wh=a("li"),Ple=a("strong"),a_o=o("regnet"),n_o=o(" \u2014 "),bN=a("a"),s_o=o("ConvNextFeatureExtractor"),l_o=o(" (RegNet model)"),i_o=l(),Qh=a("li"),Ble=a("strong"),d_o=o("resnet"),c_o=o(" \u2014 "),vN=a("a"),f_o=o("ConvNextFeatureExtractor"),m_o=o(" (ResNet model)"),g_o=l(),Hh=a("li"),Ile=a("strong"),h_o=o("segformer"),p_o=o(" \u2014 "),FN=a("a"),__o=o("SegformerFeatureExtractor"),u_o=o(" (SegFormer model)"),b_o=l(),Uh=a("li"),Nle=a("strong"),v_o=o("speech_to_text"),F_o=o(" \u2014 "),TN=a("a"),T_o=o("Speech2TextFeatureExtractor"),M_o=o(" (Speech2Text model)"),E_o=l(),Jh=a("li"),qle=a("strong"),C_o=o("swin"),w_o=o(" \u2014 "),MN=a("a"),A_o=o("ViTFeatureExtractor"),L_o=o(" (Swin Transformer model)"),y_o=l(),Yh=a("li"),jle=a("strong"),x_o=o("van"),$_o=o(" \u2014 "),EN=a("a"),k_o=o("ConvNextFeatureExtractor"),S_o=o(" (VAN model)"),R_o=l(),Kh=a("li"),Dle=a("strong"),P_o=o("vilt"),B_o=o(" \u2014 "),CN=a("a"),I_o=o("ViltFeatureExtractor"),N_o=o(" (ViLT model)"),q_o=l(),Zh=a("li"),Gle=a("strong"),j_o=o("vit"),D_o=o(" \u2014 "),wN=a("a"),G_o=o("ViTFeatureExtractor"),O_o=o(" (ViT model)"),V_o=l(),ep=a("li"),Ole=a("strong"),X_o=o("vit_mae"),z_o=o(" \u2014 "),AN=a("a"),W_o=o("ViTFeatureExtractor"),Q_o=o(" (ViTMAE model)"),H_o=l(),op=a("li"),Vle=a("strong"),U_o=o("wav2vec2"),J_o=o(" \u2014 "),LN=a("a"),Y_o=o("Wav2Vec2FeatureExtractor"),K_o=o(" (Wav2Vec2 model)"),Z_o=l(),rp=a("li"),Xle=a("strong"),euo=o("wav2vec2-conformer"),ouo=o(" \u2014 "),yN=a("a"),ruo=o("Wav2Vec2FeatureExtractor"),tuo=o(" (Wav2Vec2-Conformer model)"),auo=l(),tp=a("li"),zle=a("strong"),nuo=o("yolos"),suo=o(" \u2014 "),xN=a("a"),luo=o("YolosFeatureExtractor"),iuo=o(" (YOLOS model)"),duo=l(),F(ap.$$.fragment),cuo=l(),F(np.$$.fragment),fuo=l(),sp=a("div"),F(O6.$$.fragment),muo=l(),Wle=a("p"),guo=o("Register a new feature extractor for this class."),wGe=l(),Si=a("h2"),lp=a("a"),Qle=a("span"),F(V6.$$.fragment),huo=l(),Hle=a("span"),puo=o("AutoProcessor"),AGe=l(),yo=a("div"),F(X6.$$.fragment),_uo=l(),z6=a("p"),uuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$N=a("a"),buo=o("AutoProcessor.from_pretrained()"),vuo=o(" class method."),Fuo=l(),W6=a("p"),Tuo=o("This class cannot be instantiated directly using "),Ule=a("code"),Muo=o("__init__()"),Euo=o(" (throws an error)."),Cuo=l(),Ue=a("div"),F(Q6.$$.fragment),wuo=l(),Jle=a("p"),Auo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Luo=l(),Ri=a("p"),yuo=o("The processor class to instantiate is selected based on the "),Yle=a("code"),xuo=o("model_type"),$uo=o(` property of the config object (either
passed as an argument or loaded from `),Kle=a("code"),kuo=o("pretrained_model_name_or_path"),Suo=o(" if possible):"),Ruo=l(),he=a("ul"),ip=a("li"),Zle=a("strong"),Puo=o("clip"),Buo=o(" \u2014 "),kN=a("a"),Iuo=o("CLIPProcessor"),Nuo=o(" (CLIP model)"),quo=l(),dp=a("li"),eie=a("strong"),juo=o("flava"),Duo=o(" \u2014 "),oie=a("code"),Guo=o("FLAVAProcessor"),Ouo=o(" (FLAVA model)"),Vuo=l(),cp=a("li"),rie=a("strong"),Xuo=o("layoutlmv2"),zuo=o(" \u2014 "),SN=a("a"),Wuo=o("LayoutLMv2Processor"),Quo=o(" (LayoutLMv2 model)"),Huo=l(),fp=a("li"),tie=a("strong"),Uuo=o("layoutlmv3"),Juo=o(" \u2014 "),RN=a("a"),Yuo=o("LayoutLMv3Processor"),Kuo=o(" (LayoutLMv3 model)"),Zuo=l(),mp=a("li"),aie=a("strong"),e1o=o("layoutxlm"),o1o=o(" \u2014 "),PN=a("a"),r1o=o("LayoutXLMProcessor"),t1o=o(" (LayoutXLM model)"),a1o=l(),gp=a("li"),nie=a("strong"),n1o=o("sew"),s1o=o(" \u2014 "),BN=a("a"),l1o=o("Wav2Vec2Processor"),i1o=o(" (SEW model)"),d1o=l(),hp=a("li"),sie=a("strong"),c1o=o("sew-d"),f1o=o(" \u2014 "),IN=a("a"),m1o=o("Wav2Vec2Processor"),g1o=o(" (SEW-D model)"),h1o=l(),pp=a("li"),lie=a("strong"),p1o=o("speech_to_text"),_1o=o(" \u2014 "),NN=a("a"),u1o=o("Speech2TextProcessor"),b1o=o(" (Speech2Text model)"),v1o=l(),_p=a("li"),iie=a("strong"),F1o=o("speech_to_text_2"),T1o=o(" \u2014 "),qN=a("a"),M1o=o("Speech2Text2Processor"),E1o=o(" (Speech2Text2 model)"),C1o=l(),up=a("li"),die=a("strong"),w1o=o("trocr"),A1o=o(" \u2014 "),jN=a("a"),L1o=o("TrOCRProcessor"),y1o=o(" (TrOCR model)"),x1o=l(),bp=a("li"),cie=a("strong"),$1o=o("unispeech"),k1o=o(" \u2014 "),DN=a("a"),S1o=o("Wav2Vec2Processor"),R1o=o(" (UniSpeech model)"),P1o=l(),vp=a("li"),fie=a("strong"),B1o=o("unispeech-sat"),I1o=o(" \u2014 "),GN=a("a"),N1o=o("Wav2Vec2Processor"),q1o=o(" (UniSpeechSat model)"),j1o=l(),Fp=a("li"),mie=a("strong"),D1o=o("vilt"),G1o=o(" \u2014 "),ON=a("a"),O1o=o("ViltProcessor"),V1o=o(" (ViLT model)"),X1o=l(),Tp=a("li"),gie=a("strong"),z1o=o("vision-text-dual-encoder"),W1o=o(" \u2014 "),VN=a("a"),Q1o=o("VisionTextDualEncoderProcessor"),H1o=o(" (VisionTextDualEncoder model)"),U1o=l(),Mp=a("li"),hie=a("strong"),J1o=o("wav2vec2"),Y1o=o(" \u2014 "),XN=a("a"),K1o=o("Wav2Vec2Processor"),Z1o=o(" (Wav2Vec2 model)"),e7o=l(),Ep=a("li"),pie=a("strong"),o7o=o("wav2vec2-conformer"),r7o=o(" \u2014 "),zN=a("a"),t7o=o("Wav2Vec2Processor"),a7o=o(" (Wav2Vec2-Conformer model)"),n7o=l(),Cp=a("li"),_ie=a("strong"),s7o=o("wavlm"),l7o=o(" \u2014 "),WN=a("a"),i7o=o("Wav2Vec2Processor"),d7o=o(" (WavLM model)"),c7o=l(),F(wp.$$.fragment),f7o=l(),F(Ap.$$.fragment),m7o=l(),Lp=a("div"),F(H6.$$.fragment),g7o=l(),uie=a("p"),h7o=o("Register a new processor for this class."),LGe=l(),Pi=a("h2"),yp=a("a"),bie=a("span"),F(U6.$$.fragment),p7o=l(),vie=a("span"),_7o=o("AutoModel"),yGe=l(),xo=a("div"),F(J6.$$.fragment),u7o=l(),Bi=a("p"),b7o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QN=a("a"),v7o=o("from_pretrained()"),F7o=o(" class method or the "),HN=a("a"),T7o=o("from_config()"),M7o=o(` class
method.`),E7o=l(),Y6=a("p"),C7o=o("This class cannot be instantiated directly using "),Fie=a("code"),w7o=o("__init__()"),A7o=o(" (throws an error)."),L7o=l(),nt=a("div"),F(K6.$$.fragment),y7o=l(),Tie=a("p"),x7o=o("Instantiates one of the base model classes of the library from a configuration."),$7o=l(),Ii=a("p"),k7o=o(`Note:
Loading a model from its configuration file does `),Mie=a("strong"),S7o=o("not"),R7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UN=a("a"),P7o=o("from_pretrained()"),B7o=o(" to load the model weights."),I7o=l(),F(xp.$$.fragment),N7o=l(),Je=a("div"),F(Z6.$$.fragment),q7o=l(),Eie=a("p"),j7o=o("Instantiate one of the base model classes of the library from a pretrained model."),D7o=l(),Sa=a("p"),G7o=o("The model class to instantiate is selected based on the "),Cie=a("code"),O7o=o("model_type"),V7o=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),X7o=o("pretrained_model_name_or_path"),z7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),W7o=o("pretrained_model_name_or_path"),Q7o=o(":"),H7o=l(),y=a("ul"),$p=a("li"),Lie=a("strong"),U7o=o("albert"),J7o=o(" \u2014 "),JN=a("a"),Y7o=o("AlbertModel"),K7o=o(" (ALBERT model)"),Z7o=l(),kp=a("li"),yie=a("strong"),e9o=o("bart"),o9o=o(" \u2014 "),YN=a("a"),r9o=o("BartModel"),t9o=o(" (BART model)"),a9o=l(),Sp=a("li"),xie=a("strong"),n9o=o("beit"),s9o=o(" \u2014 "),KN=a("a"),l9o=o("BeitModel"),i9o=o(" (BEiT model)"),d9o=l(),Rp=a("li"),$ie=a("strong"),c9o=o("bert"),f9o=o(" \u2014 "),ZN=a("a"),m9o=o("BertModel"),g9o=o(" (BERT model)"),h9o=l(),Pp=a("li"),kie=a("strong"),p9o=o("bert-generation"),_9o=o(" \u2014 "),eq=a("a"),u9o=o("BertGenerationEncoder"),b9o=o(" (Bert Generation model)"),v9o=l(),Bp=a("li"),Sie=a("strong"),F9o=o("big_bird"),T9o=o(" \u2014 "),oq=a("a"),M9o=o("BigBirdModel"),E9o=o(" (BigBird model)"),C9o=l(),Ip=a("li"),Rie=a("strong"),w9o=o("bigbird_pegasus"),A9o=o(" \u2014 "),rq=a("a"),L9o=o("BigBirdPegasusModel"),y9o=o(" (BigBird-Pegasus model)"),x9o=l(),Np=a("li"),Pie=a("strong"),$9o=o("blenderbot"),k9o=o(" \u2014 "),tq=a("a"),S9o=o("BlenderbotModel"),R9o=o(" (Blenderbot model)"),P9o=l(),qp=a("li"),Bie=a("strong"),B9o=o("blenderbot-small"),I9o=o(" \u2014 "),aq=a("a"),N9o=o("BlenderbotSmallModel"),q9o=o(" (BlenderbotSmall model)"),j9o=l(),jp=a("li"),Iie=a("strong"),D9o=o("bloom"),G9o=o(" \u2014 "),nq=a("a"),O9o=o("BloomModel"),V9o=o(" (BLOOM model)"),X9o=l(),Dp=a("li"),Nie=a("strong"),z9o=o("camembert"),W9o=o(" \u2014 "),sq=a("a"),Q9o=o("CamembertModel"),H9o=o(" (CamemBERT model)"),U9o=l(),Gp=a("li"),qie=a("strong"),J9o=o("canine"),Y9o=o(" \u2014 "),lq=a("a"),K9o=o("CanineModel"),Z9o=o(" (CANINE model)"),ebo=l(),Op=a("li"),jie=a("strong"),obo=o("clip"),rbo=o(" \u2014 "),iq=a("a"),tbo=o("CLIPModel"),abo=o(" (CLIP model)"),nbo=l(),Vp=a("li"),Die=a("strong"),sbo=o("convbert"),lbo=o(" \u2014 "),dq=a("a"),ibo=o("ConvBertModel"),dbo=o(" (ConvBERT model)"),cbo=l(),Xp=a("li"),Gie=a("strong"),fbo=o("convnext"),mbo=o(" \u2014 "),cq=a("a"),gbo=o("ConvNextModel"),hbo=o(" (ConvNeXT model)"),pbo=l(),zp=a("li"),Oie=a("strong"),_bo=o("ctrl"),ubo=o(" \u2014 "),fq=a("a"),bbo=o("CTRLModel"),vbo=o(" (CTRL model)"),Fbo=l(),Wp=a("li"),Vie=a("strong"),Tbo=o("cvt"),Mbo=o(" \u2014 "),mq=a("a"),Ebo=o("CvtModel"),Cbo=o(" (CvT model)"),wbo=l(),Qp=a("li"),Xie=a("strong"),Abo=o("data2vec-audio"),Lbo=o(" \u2014 "),gq=a("a"),ybo=o("Data2VecAudioModel"),xbo=o(" (Data2VecAudio model)"),$bo=l(),Hp=a("li"),zie=a("strong"),kbo=o("data2vec-text"),Sbo=o(" \u2014 "),hq=a("a"),Rbo=o("Data2VecTextModel"),Pbo=o(" (Data2VecText model)"),Bbo=l(),Up=a("li"),Wie=a("strong"),Ibo=o("data2vec-vision"),Nbo=o(" \u2014 "),pq=a("a"),qbo=o("Data2VecVisionModel"),jbo=o(" (Data2VecVision model)"),Dbo=l(),Jp=a("li"),Qie=a("strong"),Gbo=o("deberta"),Obo=o(" \u2014 "),_q=a("a"),Vbo=o("DebertaModel"),Xbo=o(" (DeBERTa model)"),zbo=l(),Yp=a("li"),Hie=a("strong"),Wbo=o("deberta-v2"),Qbo=o(" \u2014 "),uq=a("a"),Hbo=o("DebertaV2Model"),Ubo=o(" (DeBERTa-v2 model)"),Jbo=l(),Kp=a("li"),Uie=a("strong"),Ybo=o("decision_transformer"),Kbo=o(" \u2014 "),bq=a("a"),Zbo=o("DecisionTransformerModel"),e2o=o(" (Decision Transformer model)"),o2o=l(),Zp=a("li"),Jie=a("strong"),r2o=o("deit"),t2o=o(" \u2014 "),vq=a("a"),a2o=o("DeiTModel"),n2o=o(" (DeiT model)"),s2o=l(),e_=a("li"),Yie=a("strong"),l2o=o("detr"),i2o=o(" \u2014 "),Fq=a("a"),d2o=o("DetrModel"),c2o=o(" (DETR model)"),f2o=l(),o_=a("li"),Kie=a("strong"),m2o=o("distilbert"),g2o=o(" \u2014 "),Tq=a("a"),h2o=o("DistilBertModel"),p2o=o(" (DistilBERT model)"),_2o=l(),r_=a("li"),Zie=a("strong"),u2o=o("dpr"),b2o=o(" \u2014 "),Mq=a("a"),v2o=o("DPRQuestionEncoder"),F2o=o(" (DPR model)"),T2o=l(),t_=a("li"),ede=a("strong"),M2o=o("dpt"),E2o=o(" \u2014 "),Eq=a("a"),C2o=o("DPTModel"),w2o=o(" (DPT model)"),A2o=l(),a_=a("li"),ode=a("strong"),L2o=o("electra"),y2o=o(" \u2014 "),Cq=a("a"),x2o=o("ElectraModel"),$2o=o(" (ELECTRA model)"),k2o=l(),n_=a("li"),rde=a("strong"),S2o=o("flaubert"),R2o=o(" \u2014 "),wq=a("a"),P2o=o("FlaubertModel"),B2o=o(" (FlauBERT model)"),I2o=l(),s_=a("li"),tde=a("strong"),N2o=o("flava"),q2o=o(" \u2014 "),Aq=a("a"),j2o=o("FlavaModel"),D2o=o(" (FLAVA model)"),G2o=l(),l_=a("li"),ade=a("strong"),O2o=o("fnet"),V2o=o(" \u2014 "),Lq=a("a"),X2o=o("FNetModel"),z2o=o(" (FNet model)"),W2o=l(),i_=a("li"),nde=a("strong"),Q2o=o("fsmt"),H2o=o(" \u2014 "),yq=a("a"),U2o=o("FSMTModel"),J2o=o(" (FairSeq Machine-Translation model)"),Y2o=l(),Gs=a("li"),sde=a("strong"),K2o=o("funnel"),Z2o=o(" \u2014 "),xq=a("a"),evo=o("FunnelModel"),ovo=o(" or "),$q=a("a"),rvo=o("FunnelBaseModel"),tvo=o(" (Funnel Transformer model)"),avo=l(),d_=a("li"),lde=a("strong"),nvo=o("glpn"),svo=o(" \u2014 "),kq=a("a"),lvo=o("GLPNModel"),ivo=o(" (GLPN model)"),dvo=l(),c_=a("li"),ide=a("strong"),cvo=o("gpt2"),fvo=o(" \u2014 "),Sq=a("a"),mvo=o("GPT2Model"),gvo=o(" (OpenAI GPT-2 model)"),hvo=l(),f_=a("li"),dde=a("strong"),pvo=o("gpt_neo"),_vo=o(" \u2014 "),Rq=a("a"),uvo=o("GPTNeoModel"),bvo=o(" (GPT Neo model)"),vvo=l(),m_=a("li"),cde=a("strong"),Fvo=o("gpt_neox"),Tvo=o(" \u2014 "),Pq=a("a"),Mvo=o("GPTNeoXModel"),Evo=o(" (GPT NeoX model)"),Cvo=l(),g_=a("li"),fde=a("strong"),wvo=o("gptj"),Avo=o(" \u2014 "),Bq=a("a"),Lvo=o("GPTJModel"),yvo=o(" (GPT-J model)"),xvo=l(),h_=a("li"),mde=a("strong"),$vo=o("hubert"),kvo=o(" \u2014 "),Iq=a("a"),Svo=o("HubertModel"),Rvo=o(" (Hubert model)"),Pvo=l(),p_=a("li"),gde=a("strong"),Bvo=o("ibert"),Ivo=o(" \u2014 "),Nq=a("a"),Nvo=o("IBertModel"),qvo=o(" (I-BERT model)"),jvo=l(),__=a("li"),hde=a("strong"),Dvo=o("imagegpt"),Gvo=o(" \u2014 "),qq=a("a"),Ovo=o("ImageGPTModel"),Vvo=o(" (ImageGPT model)"),Xvo=l(),u_=a("li"),pde=a("strong"),zvo=o("layoutlm"),Wvo=o(" \u2014 "),jq=a("a"),Qvo=o("LayoutLMModel"),Hvo=o(" (LayoutLM model)"),Uvo=l(),b_=a("li"),_de=a("strong"),Jvo=o("layoutlmv2"),Yvo=o(" \u2014 "),Dq=a("a"),Kvo=o("LayoutLMv2Model"),Zvo=o(" (LayoutLMv2 model)"),eFo=l(),v_=a("li"),ude=a("strong"),oFo=o("layoutlmv3"),rFo=o(" \u2014 "),Gq=a("a"),tFo=o("LayoutLMv3Model"),aFo=o(" (LayoutLMv3 model)"),nFo=l(),F_=a("li"),bde=a("strong"),sFo=o("led"),lFo=o(" \u2014 "),Oq=a("a"),iFo=o("LEDModel"),dFo=o(" (LED model)"),cFo=l(),T_=a("li"),vde=a("strong"),fFo=o("levit"),mFo=o(" \u2014 "),Vq=a("a"),gFo=o("LevitModel"),hFo=o(" (LeViT model)"),pFo=l(),M_=a("li"),Fde=a("strong"),_Fo=o("longformer"),uFo=o(" \u2014 "),Xq=a("a"),bFo=o("LongformerModel"),vFo=o(" (Longformer model)"),FFo=l(),E_=a("li"),Tde=a("strong"),TFo=o("longt5"),MFo=o(" \u2014 "),zq=a("a"),EFo=o("LongT5Model"),CFo=o(" (LongT5 model)"),wFo=l(),C_=a("li"),Mde=a("strong"),AFo=o("luke"),LFo=o(" \u2014 "),Wq=a("a"),yFo=o("LukeModel"),xFo=o(" (LUKE model)"),$Fo=l(),w_=a("li"),Ede=a("strong"),kFo=o("lxmert"),SFo=o(" \u2014 "),Qq=a("a"),RFo=o("LxmertModel"),PFo=o(" (LXMERT model)"),BFo=l(),A_=a("li"),Cde=a("strong"),IFo=o("m2m_100"),NFo=o(" \u2014 "),Hq=a("a"),qFo=o("M2M100Model"),jFo=o(" (M2M100 model)"),DFo=l(),L_=a("li"),wde=a("strong"),GFo=o("marian"),OFo=o(" \u2014 "),Uq=a("a"),VFo=o("MarianModel"),XFo=o(" (Marian model)"),zFo=l(),y_=a("li"),Ade=a("strong"),WFo=o("maskformer"),QFo=o(" \u2014 "),Jq=a("a"),HFo=o("MaskFormerModel"),UFo=o(" (MaskFormer model)"),JFo=l(),x_=a("li"),Lde=a("strong"),YFo=o("mbart"),KFo=o(" \u2014 "),Yq=a("a"),ZFo=o("MBartModel"),eTo=o(" (mBART model)"),oTo=l(),$_=a("li"),yde=a("strong"),rTo=o("mctct"),tTo=o(" \u2014 "),Kq=a("a"),aTo=o("MCTCTModel"),nTo=o(" (M-CTC-T model)"),sTo=l(),k_=a("li"),xde=a("strong"),lTo=o("megatron-bert"),iTo=o(" \u2014 "),Zq=a("a"),dTo=o("MegatronBertModel"),cTo=o(" (Megatron-BERT model)"),fTo=l(),S_=a("li"),$de=a("strong"),mTo=o("mobilebert"),gTo=o(" \u2014 "),ej=a("a"),hTo=o("MobileBertModel"),pTo=o(" (MobileBERT model)"),_To=l(),R_=a("li"),kde=a("strong"),uTo=o("mobilenet_v1"),bTo=o(" \u2014 "),oj=a("a"),vTo=o("MobileNetV1Model"),FTo=o(" (MobileNetV1 model)"),TTo=l(),P_=a("li"),Sde=a("strong"),MTo=o("mpnet"),ETo=o(" \u2014 "),rj=a("a"),CTo=o("MPNetModel"),wTo=o(" (MPNet model)"),ATo=l(),B_=a("li"),Rde=a("strong"),LTo=o("mt5"),yTo=o(" \u2014 "),tj=a("a"),xTo=o("MT5Model"),$To=o(" (MT5 model)"),kTo=l(),I_=a("li"),Pde=a("strong"),STo=o("nystromformer"),RTo=o(" \u2014 "),aj=a("a"),PTo=o("NystromformerModel"),BTo=o(" (Nystr\xF6mformer model)"),ITo=l(),N_=a("li"),Bde=a("strong"),NTo=o("openai-gpt"),qTo=o(" \u2014 "),nj=a("a"),jTo=o("OpenAIGPTModel"),DTo=o(" (OpenAI GPT model)"),GTo=l(),q_=a("li"),Ide=a("strong"),OTo=o("opt"),VTo=o(" \u2014 "),sj=a("a"),XTo=o("OPTModel"),zTo=o(" (OPT model)"),WTo=l(),j_=a("li"),Nde=a("strong"),QTo=o("pegasus"),HTo=o(" \u2014 "),lj=a("a"),UTo=o("PegasusModel"),JTo=o(" (Pegasus model)"),YTo=l(),D_=a("li"),qde=a("strong"),KTo=o("perceiver"),ZTo=o(" \u2014 "),ij=a("a"),eMo=o("PerceiverModel"),oMo=o(" (Perceiver model)"),rMo=l(),G_=a("li"),jde=a("strong"),tMo=o("plbart"),aMo=o(" \u2014 "),dj=a("a"),nMo=o("PLBartModel"),sMo=o(" (PLBart model)"),lMo=l(),O_=a("li"),Dde=a("strong"),iMo=o("poolformer"),dMo=o(" \u2014 "),cj=a("a"),cMo=o("PoolFormerModel"),fMo=o(" (PoolFormer model)"),mMo=l(),V_=a("li"),Gde=a("strong"),gMo=o("prophetnet"),hMo=o(" \u2014 "),fj=a("a"),pMo=o("ProphetNetModel"),_Mo=o(" (ProphetNet model)"),uMo=l(),X_=a("li"),Ode=a("strong"),bMo=o("qdqbert"),vMo=o(" \u2014 "),mj=a("a"),FMo=o("QDQBertModel"),TMo=o(" (QDQBert model)"),MMo=l(),z_=a("li"),Vde=a("strong"),EMo=o("reformer"),CMo=o(" \u2014 "),gj=a("a"),wMo=o("ReformerModel"),AMo=o(" (Reformer model)"),LMo=l(),W_=a("li"),Xde=a("strong"),yMo=o("regnet"),xMo=o(" \u2014 "),hj=a("a"),$Mo=o("RegNetModel"),kMo=o(" (RegNet model)"),SMo=l(),Q_=a("li"),zde=a("strong"),RMo=o("rembert"),PMo=o(" \u2014 "),pj=a("a"),BMo=o("RemBertModel"),IMo=o(" (RemBERT model)"),NMo=l(),H_=a("li"),Wde=a("strong"),qMo=o("resnet"),jMo=o(" \u2014 "),_j=a("a"),DMo=o("ResNetModel"),GMo=o(" (ResNet model)"),OMo=l(),U_=a("li"),Qde=a("strong"),VMo=o("retribert"),XMo=o(" \u2014 "),uj=a("a"),zMo=o("RetriBertModel"),WMo=o(" (RetriBERT model)"),QMo=l(),J_=a("li"),Hde=a("strong"),HMo=o("roberta"),UMo=o(" \u2014 "),bj=a("a"),JMo=o("RobertaModel"),YMo=o(" (RoBERTa model)"),KMo=l(),Y_=a("li"),Ude=a("strong"),ZMo=o("roformer"),eEo=o(" \u2014 "),vj=a("a"),oEo=o("RoFormerModel"),rEo=o(" (RoFormer model)"),tEo=l(),K_=a("li"),Jde=a("strong"),aEo=o("segformer"),nEo=o(" \u2014 "),Fj=a("a"),sEo=o("SegformerModel"),lEo=o(" (SegFormer model)"),iEo=l(),Z_=a("li"),Yde=a("strong"),dEo=o("sew"),cEo=o(" \u2014 "),Tj=a("a"),fEo=o("SEWModel"),mEo=o(" (SEW model)"),gEo=l(),eu=a("li"),Kde=a("strong"),hEo=o("sew-d"),pEo=o(" \u2014 "),Mj=a("a"),_Eo=o("SEWDModel"),uEo=o(" (SEW-D model)"),bEo=l(),ou=a("li"),Zde=a("strong"),vEo=o("speech_to_text"),FEo=o(" \u2014 "),Ej=a("a"),TEo=o("Speech2TextModel"),MEo=o(" (Speech2Text model)"),EEo=l(),ru=a("li"),ece=a("strong"),CEo=o("splinter"),wEo=o(" \u2014 "),Cj=a("a"),AEo=o("SplinterModel"),LEo=o(" (Splinter model)"),yEo=l(),tu=a("li"),oce=a("strong"),xEo=o("squeezebert"),$Eo=o(" \u2014 "),wj=a("a"),kEo=o("SqueezeBertModel"),SEo=o(" (SqueezeBERT model)"),REo=l(),au=a("li"),rce=a("strong"),PEo=o("swin"),BEo=o(" \u2014 "),Aj=a("a"),IEo=o("SwinModel"),NEo=o(" (Swin Transformer model)"),qEo=l(),nu=a("li"),tce=a("strong"),jEo=o("t5"),DEo=o(" \u2014 "),Lj=a("a"),GEo=o("T5Model"),OEo=o(" (T5 model)"),VEo=l(),su=a("li"),ace=a("strong"),XEo=o("tapas"),zEo=o(" \u2014 "),yj=a("a"),WEo=o("TapasModel"),QEo=o(" (TAPAS model)"),HEo=l(),lu=a("li"),nce=a("strong"),UEo=o("trajectory_transformer"),JEo=o(" \u2014 "),xj=a("a"),YEo=o("TrajectoryTransformerModel"),KEo=o(" (Trajectory Transformer model)"),ZEo=l(),iu=a("li"),sce=a("strong"),e4o=o("transfo-xl"),o4o=o(" \u2014 "),$j=a("a"),r4o=o("TransfoXLModel"),t4o=o(" (Transformer-XL model)"),a4o=l(),du=a("li"),lce=a("strong"),n4o=o("unispeech"),s4o=o(" \u2014 "),kj=a("a"),l4o=o("UniSpeechModel"),i4o=o(" (UniSpeech model)"),d4o=l(),cu=a("li"),ice=a("strong"),c4o=o("unispeech-sat"),f4o=o(" \u2014 "),Sj=a("a"),m4o=o("UniSpeechSatModel"),g4o=o(" (UniSpeechSat model)"),h4o=l(),fu=a("li"),dce=a("strong"),p4o=o("van"),_4o=o(" \u2014 "),Rj=a("a"),u4o=o("VanModel"),b4o=o(" (VAN model)"),v4o=l(),mu=a("li"),cce=a("strong"),F4o=o("vilt"),T4o=o(" \u2014 "),Pj=a("a"),M4o=o("ViltModel"),E4o=o(" (ViLT model)"),C4o=l(),gu=a("li"),fce=a("strong"),w4o=o("vision-text-dual-encoder"),A4o=o(" \u2014 "),Bj=a("a"),L4o=o("VisionTextDualEncoderModel"),y4o=o(" (VisionTextDualEncoder model)"),x4o=l(),hu=a("li"),mce=a("strong"),$4o=o("visual_bert"),k4o=o(" \u2014 "),Ij=a("a"),S4o=o("VisualBertModel"),R4o=o(" (VisualBERT model)"),P4o=l(),pu=a("li"),gce=a("strong"),B4o=o("vit"),I4o=o(" \u2014 "),Nj=a("a"),N4o=o("ViTModel"),q4o=o(" (ViT model)"),j4o=l(),_u=a("li"),hce=a("strong"),D4o=o("vit_mae"),G4o=o(" \u2014 "),qj=a("a"),O4o=o("ViTMAEModel"),V4o=o(" (ViTMAE model)"),X4o=l(),uu=a("li"),pce=a("strong"),z4o=o("wav2vec2"),W4o=o(" \u2014 "),jj=a("a"),Q4o=o("Wav2Vec2Model"),H4o=o(" (Wav2Vec2 model)"),U4o=l(),bu=a("li"),_ce=a("strong"),J4o=o("wav2vec2-conformer"),Y4o=o(" \u2014 "),Dj=a("a"),K4o=o("Wav2Vec2ConformerModel"),Z4o=o(" (Wav2Vec2-Conformer model)"),eCo=l(),vu=a("li"),uce=a("strong"),oCo=o("wavlm"),rCo=o(" \u2014 "),Gj=a("a"),tCo=o("WavLMModel"),aCo=o(" (WavLM model)"),nCo=l(),Fu=a("li"),bce=a("strong"),sCo=o("xglm"),lCo=o(" \u2014 "),Oj=a("a"),iCo=o("XGLMModel"),dCo=o(" (XGLM model)"),cCo=l(),Tu=a("li"),vce=a("strong"),fCo=o("xlm"),mCo=o(" \u2014 "),Vj=a("a"),gCo=o("XLMModel"),hCo=o(" (XLM model)"),pCo=l(),Mu=a("li"),Fce=a("strong"),_Co=o("xlm-prophetnet"),uCo=o(" \u2014 "),Xj=a("a"),bCo=o("XLMProphetNetModel"),vCo=o(" (XLM-ProphetNet model)"),FCo=l(),Eu=a("li"),Tce=a("strong"),TCo=o("xlm-roberta"),MCo=o(" \u2014 "),zj=a("a"),ECo=o("XLMRobertaModel"),CCo=o(" (XLM-RoBERTa model)"),wCo=l(),Cu=a("li"),Mce=a("strong"),ACo=o("xlm-roberta-xl"),LCo=o(" \u2014 "),Wj=a("a"),yCo=o("XLMRobertaXLModel"),xCo=o(" (XLM-RoBERTa-XL model)"),$Co=l(),wu=a("li"),Ece=a("strong"),kCo=o("xlnet"),SCo=o(" \u2014 "),Qj=a("a"),RCo=o("XLNetModel"),PCo=o(" (XLNet model)"),BCo=l(),Au=a("li"),Cce=a("strong"),ICo=o("yolos"),NCo=o(" \u2014 "),Hj=a("a"),qCo=o("YolosModel"),jCo=o(" (YOLOS model)"),DCo=l(),Lu=a("li"),wce=a("strong"),GCo=o("yoso"),OCo=o(" \u2014 "),Uj=a("a"),VCo=o("YosoModel"),XCo=o(" (YOSO model)"),zCo=l(),yu=a("p"),WCo=o("The model is set in evaluation mode by default using "),Ace=a("code"),QCo=o("model.eval()"),HCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),UCo=o("model.train()"),JCo=l(),F(xu.$$.fragment),xGe=l(),Ni=a("h2"),$u=a("a"),yce=a("span"),F(eL.$$.fragment),YCo=l(),xce=a("span"),KCo=o("AutoModelForPreTraining"),$Ge=l(),$o=a("div"),F(oL.$$.fragment),ZCo=l(),qi=a("p"),e5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jj=a("a"),o5o=o("from_pretrained()"),r5o=o(" class method or the "),Yj=a("a"),t5o=o("from_config()"),a5o=o(` class
method.`),n5o=l(),rL=a("p"),s5o=o("This class cannot be instantiated directly using "),$ce=a("code"),l5o=o("__init__()"),i5o=o(" (throws an error)."),d5o=l(),st=a("div"),F(tL.$$.fragment),c5o=l(),kce=a("p"),f5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m5o=l(),ji=a("p"),g5o=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),h5o=o("not"),p5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=a("a"),_5o=o("from_pretrained()"),u5o=o(" to load the model weights."),b5o=l(),F(ku.$$.fragment),v5o=l(),Ye=a("div"),F(aL.$$.fragment),F5o=l(),Rce=a("p"),T5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),M5o=l(),Ra=a("p"),E5o=o("The model class to instantiate is selected based on the "),Pce=a("code"),C5o=o("model_type"),w5o=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),A5o=o("pretrained_model_name_or_path"),L5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),y5o=o("pretrained_model_name_or_path"),x5o=o(":"),$5o=l(),G=a("ul"),Su=a("li"),Nce=a("strong"),k5o=o("albert"),S5o=o(" \u2014 "),Zj=a("a"),R5o=o("AlbertForPreTraining"),P5o=o(" (ALBERT model)"),B5o=l(),Ru=a("li"),qce=a("strong"),I5o=o("bart"),N5o=o(" \u2014 "),eD=a("a"),q5o=o("BartForConditionalGeneration"),j5o=o(" (BART model)"),D5o=l(),Pu=a("li"),jce=a("strong"),G5o=o("bert"),O5o=o(" \u2014 "),oD=a("a"),V5o=o("BertForPreTraining"),X5o=o(" (BERT model)"),z5o=l(),Bu=a("li"),Dce=a("strong"),W5o=o("big_bird"),Q5o=o(" \u2014 "),rD=a("a"),H5o=o("BigBirdForPreTraining"),U5o=o(" (BigBird model)"),J5o=l(),Iu=a("li"),Gce=a("strong"),Y5o=o("bloom"),K5o=o(" \u2014 "),tD=a("a"),Z5o=o("BloomForCausalLM"),e3o=o(" (BLOOM model)"),o3o=l(),Nu=a("li"),Oce=a("strong"),r3o=o("camembert"),t3o=o(" \u2014 "),aD=a("a"),a3o=o("CamembertForMaskedLM"),n3o=o(" (CamemBERT model)"),s3o=l(),qu=a("li"),Vce=a("strong"),l3o=o("ctrl"),i3o=o(" \u2014 "),nD=a("a"),d3o=o("CTRLLMHeadModel"),c3o=o(" (CTRL model)"),f3o=l(),ju=a("li"),Xce=a("strong"),m3o=o("data2vec-text"),g3o=o(" \u2014 "),sD=a("a"),h3o=o("Data2VecTextForMaskedLM"),p3o=o(" (Data2VecText model)"),_3o=l(),Du=a("li"),zce=a("strong"),u3o=o("deberta"),b3o=o(" \u2014 "),lD=a("a"),v3o=o("DebertaForMaskedLM"),F3o=o(" (DeBERTa model)"),T3o=l(),Gu=a("li"),Wce=a("strong"),M3o=o("deberta-v2"),E3o=o(" \u2014 "),iD=a("a"),C3o=o("DebertaV2ForMaskedLM"),w3o=o(" (DeBERTa-v2 model)"),A3o=l(),Ou=a("li"),Qce=a("strong"),L3o=o("distilbert"),y3o=o(" \u2014 "),dD=a("a"),x3o=o("DistilBertForMaskedLM"),$3o=o(" (DistilBERT model)"),k3o=l(),Vu=a("li"),Hce=a("strong"),S3o=o("electra"),R3o=o(" \u2014 "),cD=a("a"),P3o=o("ElectraForPreTraining"),B3o=o(" (ELECTRA model)"),I3o=l(),Xu=a("li"),Uce=a("strong"),N3o=o("flaubert"),q3o=o(" \u2014 "),fD=a("a"),j3o=o("FlaubertWithLMHeadModel"),D3o=o(" (FlauBERT model)"),G3o=l(),zu=a("li"),Jce=a("strong"),O3o=o("flava"),V3o=o(" \u2014 "),mD=a("a"),X3o=o("FlavaForPreTraining"),z3o=o(" (FLAVA model)"),W3o=l(),Wu=a("li"),Yce=a("strong"),Q3o=o("fnet"),H3o=o(" \u2014 "),gD=a("a"),U3o=o("FNetForPreTraining"),J3o=o(" (FNet model)"),Y3o=l(),Qu=a("li"),Kce=a("strong"),K3o=o("fsmt"),Z3o=o(" \u2014 "),hD=a("a"),e0o=o("FSMTForConditionalGeneration"),o0o=o(" (FairSeq Machine-Translation model)"),r0o=l(),Hu=a("li"),Zce=a("strong"),t0o=o("funnel"),a0o=o(" \u2014 "),pD=a("a"),n0o=o("FunnelForPreTraining"),s0o=o(" (Funnel Transformer model)"),l0o=l(),Uu=a("li"),efe=a("strong"),i0o=o("gpt2"),d0o=o(" \u2014 "),_D=a("a"),c0o=o("GPT2LMHeadModel"),f0o=o(" (OpenAI GPT-2 model)"),m0o=l(),Ju=a("li"),ofe=a("strong"),g0o=o("ibert"),h0o=o(" \u2014 "),uD=a("a"),p0o=o("IBertForMaskedLM"),_0o=o(" (I-BERT model)"),u0o=l(),Yu=a("li"),rfe=a("strong"),b0o=o("layoutlm"),v0o=o(" \u2014 "),bD=a("a"),F0o=o("LayoutLMForMaskedLM"),T0o=o(" (LayoutLM model)"),M0o=l(),Ku=a("li"),tfe=a("strong"),E0o=o("longformer"),C0o=o(" \u2014 "),vD=a("a"),w0o=o("LongformerForMaskedLM"),A0o=o(" (Longformer model)"),L0o=l(),Zu=a("li"),afe=a("strong"),y0o=o("lxmert"),x0o=o(" \u2014 "),FD=a("a"),$0o=o("LxmertForPreTraining"),k0o=o(" (LXMERT model)"),S0o=l(),e1=a("li"),nfe=a("strong"),R0o=o("megatron-bert"),P0o=o(" \u2014 "),TD=a("a"),B0o=o("MegatronBertForPreTraining"),I0o=o(" (Megatron-BERT model)"),N0o=l(),o1=a("li"),sfe=a("strong"),q0o=o("mobilebert"),j0o=o(" \u2014 "),MD=a("a"),D0o=o("MobileBertForPreTraining"),G0o=o(" (MobileBERT model)"),O0o=l(),r1=a("li"),lfe=a("strong"),V0o=o("mpnet"),X0o=o(" \u2014 "),ED=a("a"),z0o=o("MPNetForMaskedLM"),W0o=o(" (MPNet model)"),Q0o=l(),t1=a("li"),ife=a("strong"),H0o=o("openai-gpt"),U0o=o(" \u2014 "),CD=a("a"),J0o=o("OpenAIGPTLMHeadModel"),Y0o=o(" (OpenAI GPT model)"),K0o=l(),a1=a("li"),dfe=a("strong"),Z0o=o("retribert"),ewo=o(" \u2014 "),wD=a("a"),owo=o("RetriBertModel"),rwo=o(" (RetriBERT model)"),two=l(),n1=a("li"),cfe=a("strong"),awo=o("roberta"),nwo=o(" \u2014 "),AD=a("a"),swo=o("RobertaForMaskedLM"),lwo=o(" (RoBERTa model)"),iwo=l(),s1=a("li"),ffe=a("strong"),dwo=o("splinter"),cwo=o(" \u2014 "),LD=a("a"),fwo=o("SplinterForPreTraining"),mwo=o(" (Splinter model)"),gwo=l(),l1=a("li"),mfe=a("strong"),hwo=o("squeezebert"),pwo=o(" \u2014 "),yD=a("a"),_wo=o("SqueezeBertForMaskedLM"),uwo=o(" (SqueezeBERT model)"),bwo=l(),i1=a("li"),gfe=a("strong"),vwo=o("t5"),Fwo=o(" \u2014 "),xD=a("a"),Two=o("T5ForConditionalGeneration"),Mwo=o(" (T5 model)"),Ewo=l(),d1=a("li"),hfe=a("strong"),Cwo=o("tapas"),wwo=o(" \u2014 "),$D=a("a"),Awo=o("TapasForMaskedLM"),Lwo=o(" (TAPAS model)"),ywo=l(),c1=a("li"),pfe=a("strong"),xwo=o("transfo-xl"),$wo=o(" \u2014 "),kD=a("a"),kwo=o("TransfoXLLMHeadModel"),Swo=o(" (Transformer-XL model)"),Rwo=l(),f1=a("li"),_fe=a("strong"),Pwo=o("unispeech"),Bwo=o(" \u2014 "),SD=a("a"),Iwo=o("UniSpeechForPreTraining"),Nwo=o(" (UniSpeech model)"),qwo=l(),m1=a("li"),ufe=a("strong"),jwo=o("unispeech-sat"),Dwo=o(" \u2014 "),RD=a("a"),Gwo=o("UniSpeechSatForPreTraining"),Owo=o(" (UniSpeechSat model)"),Vwo=l(),g1=a("li"),bfe=a("strong"),Xwo=o("visual_bert"),zwo=o(" \u2014 "),PD=a("a"),Wwo=o("VisualBertForPreTraining"),Qwo=o(" (VisualBERT model)"),Hwo=l(),h1=a("li"),vfe=a("strong"),Uwo=o("vit_mae"),Jwo=o(" \u2014 "),BD=a("a"),Ywo=o("ViTMAEForPreTraining"),Kwo=o(" (ViTMAE model)"),Zwo=l(),p1=a("li"),Ffe=a("strong"),eAo=o("wav2vec2"),oAo=o(" \u2014 "),ID=a("a"),rAo=o("Wav2Vec2ForPreTraining"),tAo=o(" (Wav2Vec2 model)"),aAo=l(),_1=a("li"),Tfe=a("strong"),nAo=o("wav2vec2-conformer"),sAo=o(" \u2014 "),ND=a("a"),lAo=o("Wav2Vec2ConformerForPreTraining"),iAo=o(" (Wav2Vec2-Conformer model)"),dAo=l(),u1=a("li"),Mfe=a("strong"),cAo=o("xlm"),fAo=o(" \u2014 "),qD=a("a"),mAo=o("XLMWithLMHeadModel"),gAo=o(" (XLM model)"),hAo=l(),b1=a("li"),Efe=a("strong"),pAo=o("xlm-roberta"),_Ao=o(" \u2014 "),jD=a("a"),uAo=o("XLMRobertaForMaskedLM"),bAo=o(" (XLM-RoBERTa model)"),vAo=l(),v1=a("li"),Cfe=a("strong"),FAo=o("xlm-roberta-xl"),TAo=o(" \u2014 "),DD=a("a"),MAo=o("XLMRobertaXLForMaskedLM"),EAo=o(" (XLM-RoBERTa-XL model)"),CAo=l(),F1=a("li"),wfe=a("strong"),wAo=o("xlnet"),AAo=o(" \u2014 "),GD=a("a"),LAo=o("XLNetLMHeadModel"),yAo=o(" (XLNet model)"),xAo=l(),T1=a("p"),$Ao=o("The model is set in evaluation mode by default using "),Afe=a("code"),kAo=o("model.eval()"),SAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),RAo=o("model.train()"),PAo=l(),F(M1.$$.fragment),kGe=l(),Di=a("h2"),E1=a("a"),yfe=a("span"),F(nL.$$.fragment),BAo=l(),xfe=a("span"),IAo=o("AutoModelForCausalLM"),SGe=l(),ko=a("div"),F(sL.$$.fragment),NAo=l(),Gi=a("p"),qAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OD=a("a"),jAo=o("from_pretrained()"),DAo=o(" class method or the "),VD=a("a"),GAo=o("from_config()"),OAo=o(` class
method.`),VAo=l(),lL=a("p"),XAo=o("This class cannot be instantiated directly using "),$fe=a("code"),zAo=o("__init__()"),WAo=o(" (throws an error)."),QAo=l(),lt=a("div"),F(iL.$$.fragment),HAo=l(),kfe=a("p"),UAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JAo=l(),Oi=a("p"),YAo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),KAo=o("not"),ZAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),e6o=o("from_pretrained()"),o6o=o(" to load the model weights."),r6o=l(),F(C1.$$.fragment),t6o=l(),Ke=a("div"),F(dL.$$.fragment),a6o=l(),Rfe=a("p"),n6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s6o=l(),Pa=a("p"),l6o=o("The model class to instantiate is selected based on the "),Pfe=a("code"),i6o=o("model_type"),d6o=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),c6o=o("pretrained_model_name_or_path"),f6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),m6o=o("pretrained_model_name_or_path"),g6o=o(":"),h6o=l(),z=a("ul"),w1=a("li"),Nfe=a("strong"),p6o=o("bart"),_6o=o(" \u2014 "),zD=a("a"),u6o=o("BartForCausalLM"),b6o=o(" (BART model)"),v6o=l(),A1=a("li"),qfe=a("strong"),F6o=o("bert"),T6o=o(" \u2014 "),WD=a("a"),M6o=o("BertLMHeadModel"),E6o=o(" (BERT model)"),C6o=l(),L1=a("li"),jfe=a("strong"),w6o=o("bert-generation"),A6o=o(" \u2014 "),QD=a("a"),L6o=o("BertGenerationDecoder"),y6o=o(" (Bert Generation model)"),x6o=l(),y1=a("li"),Dfe=a("strong"),$6o=o("big_bird"),k6o=o(" \u2014 "),HD=a("a"),S6o=o("BigBirdForCausalLM"),R6o=o(" (BigBird model)"),P6o=l(),x1=a("li"),Gfe=a("strong"),B6o=o("bigbird_pegasus"),I6o=o(" \u2014 "),UD=a("a"),N6o=o("BigBirdPegasusForCausalLM"),q6o=o(" (BigBird-Pegasus model)"),j6o=l(),$1=a("li"),Ofe=a("strong"),D6o=o("blenderbot"),G6o=o(" \u2014 "),JD=a("a"),O6o=o("BlenderbotForCausalLM"),V6o=o(" (Blenderbot model)"),X6o=l(),k1=a("li"),Vfe=a("strong"),z6o=o("blenderbot-small"),W6o=o(" \u2014 "),YD=a("a"),Q6o=o("BlenderbotSmallForCausalLM"),H6o=o(" (BlenderbotSmall model)"),U6o=l(),S1=a("li"),Xfe=a("strong"),J6o=o("bloom"),Y6o=o(" \u2014 "),KD=a("a"),K6o=o("BloomForCausalLM"),Z6o=o(" (BLOOM model)"),eLo=l(),R1=a("li"),zfe=a("strong"),oLo=o("camembert"),rLo=o(" \u2014 "),ZD=a("a"),tLo=o("CamembertForCausalLM"),aLo=o(" (CamemBERT model)"),nLo=l(),P1=a("li"),Wfe=a("strong"),sLo=o("ctrl"),lLo=o(" \u2014 "),eG=a("a"),iLo=o("CTRLLMHeadModel"),dLo=o(" (CTRL model)"),cLo=l(),B1=a("li"),Qfe=a("strong"),fLo=o("data2vec-text"),mLo=o(" \u2014 "),oG=a("a"),gLo=o("Data2VecTextForCausalLM"),hLo=o(" (Data2VecText model)"),pLo=l(),I1=a("li"),Hfe=a("strong"),_Lo=o("electra"),uLo=o(" \u2014 "),rG=a("a"),bLo=o("ElectraForCausalLM"),vLo=o(" (ELECTRA model)"),FLo=l(),N1=a("li"),Ufe=a("strong"),TLo=o("gpt2"),MLo=o(" \u2014 "),tG=a("a"),ELo=o("GPT2LMHeadModel"),CLo=o(" (OpenAI GPT-2 model)"),wLo=l(),q1=a("li"),Jfe=a("strong"),ALo=o("gpt_neo"),LLo=o(" \u2014 "),aG=a("a"),yLo=o("GPTNeoForCausalLM"),xLo=o(" (GPT Neo model)"),$Lo=l(),j1=a("li"),Yfe=a("strong"),kLo=o("gpt_neox"),SLo=o(" \u2014 "),nG=a("a"),RLo=o("GPTNeoXForCausalLM"),PLo=o(" (GPT NeoX model)"),BLo=l(),D1=a("li"),Kfe=a("strong"),ILo=o("gptj"),NLo=o(" \u2014 "),sG=a("a"),qLo=o("GPTJForCausalLM"),jLo=o(" (GPT-J model)"),DLo=l(),G1=a("li"),Zfe=a("strong"),GLo=o("marian"),OLo=o(" \u2014 "),lG=a("a"),VLo=o("MarianForCausalLM"),XLo=o(" (Marian model)"),zLo=l(),O1=a("li"),eme=a("strong"),WLo=o("mbart"),QLo=o(" \u2014 "),iG=a("a"),HLo=o("MBartForCausalLM"),ULo=o(" (mBART model)"),JLo=l(),V1=a("li"),ome=a("strong"),YLo=o("megatron-bert"),KLo=o(" \u2014 "),dG=a("a"),ZLo=o("MegatronBertForCausalLM"),eyo=o(" (Megatron-BERT model)"),oyo=l(),X1=a("li"),rme=a("strong"),ryo=o("openai-gpt"),tyo=o(" \u2014 "),cG=a("a"),ayo=o("OpenAIGPTLMHeadModel"),nyo=o(" (OpenAI GPT model)"),syo=l(),z1=a("li"),tme=a("strong"),lyo=o("opt"),iyo=o(" \u2014 "),fG=a("a"),dyo=o("OPTForCausalLM"),cyo=o(" (OPT model)"),fyo=l(),W1=a("li"),ame=a("strong"),myo=o("pegasus"),gyo=o(" \u2014 "),mG=a("a"),hyo=o("PegasusForCausalLM"),pyo=o(" (Pegasus model)"),_yo=l(),Q1=a("li"),nme=a("strong"),uyo=o("plbart"),byo=o(" \u2014 "),gG=a("a"),vyo=o("PLBartForCausalLM"),Fyo=o(" (PLBart model)"),Tyo=l(),H1=a("li"),sme=a("strong"),Myo=o("prophetnet"),Eyo=o(" \u2014 "),hG=a("a"),Cyo=o("ProphetNetForCausalLM"),wyo=o(" (ProphetNet model)"),Ayo=l(),U1=a("li"),lme=a("strong"),Lyo=o("qdqbert"),yyo=o(" \u2014 "),pG=a("a"),xyo=o("QDQBertLMHeadModel"),$yo=o(" (QDQBert model)"),kyo=l(),J1=a("li"),ime=a("strong"),Syo=o("reformer"),Ryo=o(" \u2014 "),_G=a("a"),Pyo=o("ReformerModelWithLMHead"),Byo=o(" (Reformer model)"),Iyo=l(),Y1=a("li"),dme=a("strong"),Nyo=o("rembert"),qyo=o(" \u2014 "),uG=a("a"),jyo=o("RemBertForCausalLM"),Dyo=o(" (RemBERT model)"),Gyo=l(),K1=a("li"),cme=a("strong"),Oyo=o("roberta"),Vyo=o(" \u2014 "),bG=a("a"),Xyo=o("RobertaForCausalLM"),zyo=o(" (RoBERTa model)"),Wyo=l(),Z1=a("li"),fme=a("strong"),Qyo=o("roformer"),Hyo=o(" \u2014 "),vG=a("a"),Uyo=o("RoFormerForCausalLM"),Jyo=o(" (RoFormer model)"),Yyo=l(),e7=a("li"),mme=a("strong"),Kyo=o("speech_to_text_2"),Zyo=o(" \u2014 "),FG=a("a"),e8o=o("Speech2Text2ForCausalLM"),o8o=o(" (Speech2Text2 model)"),r8o=l(),o7=a("li"),gme=a("strong"),t8o=o("transfo-xl"),a8o=o(" \u2014 "),TG=a("a"),n8o=o("TransfoXLLMHeadModel"),s8o=o(" (Transformer-XL model)"),l8o=l(),r7=a("li"),hme=a("strong"),i8o=o("trocr"),d8o=o(" \u2014 "),MG=a("a"),c8o=o("TrOCRForCausalLM"),f8o=o(" (TrOCR model)"),m8o=l(),t7=a("li"),pme=a("strong"),g8o=o("xglm"),h8o=o(" \u2014 "),EG=a("a"),p8o=o("XGLMForCausalLM"),_8o=o(" (XGLM model)"),u8o=l(),a7=a("li"),_me=a("strong"),b8o=o("xlm"),v8o=o(" \u2014 "),CG=a("a"),F8o=o("XLMWithLMHeadModel"),T8o=o(" (XLM model)"),M8o=l(),n7=a("li"),ume=a("strong"),E8o=o("xlm-prophetnet"),C8o=o(" \u2014 "),wG=a("a"),w8o=o("XLMProphetNetForCausalLM"),A8o=o(" (XLM-ProphetNet model)"),L8o=l(),s7=a("li"),bme=a("strong"),y8o=o("xlm-roberta"),x8o=o(" \u2014 "),AG=a("a"),$8o=o("XLMRobertaForCausalLM"),k8o=o(" (XLM-RoBERTa model)"),S8o=l(),l7=a("li"),vme=a("strong"),R8o=o("xlm-roberta-xl"),P8o=o(" \u2014 "),LG=a("a"),B8o=o("XLMRobertaXLForCausalLM"),I8o=o(" (XLM-RoBERTa-XL model)"),N8o=l(),i7=a("li"),Fme=a("strong"),q8o=o("xlnet"),j8o=o(" \u2014 "),yG=a("a"),D8o=o("XLNetLMHeadModel"),G8o=o(" (XLNet model)"),O8o=l(),d7=a("p"),V8o=o("The model is set in evaluation mode by default using "),Tme=a("code"),X8o=o("model.eval()"),z8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),W8o=o("model.train()"),Q8o=l(),F(c7.$$.fragment),RGe=l(),Vi=a("h2"),f7=a("a"),Eme=a("span"),F(cL.$$.fragment),H8o=l(),Cme=a("span"),U8o=o("AutoModelForMaskedLM"),PGe=l(),So=a("div"),F(fL.$$.fragment),J8o=l(),Xi=a("p"),Y8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xG=a("a"),K8o=o("from_pretrained()"),Z8o=o(" class method or the "),$G=a("a"),exo=o("from_config()"),oxo=o(` class
method.`),rxo=l(),mL=a("p"),txo=o("This class cannot be instantiated directly using "),wme=a("code"),axo=o("__init__()"),nxo=o(" (throws an error)."),sxo=l(),it=a("div"),F(gL.$$.fragment),lxo=l(),Ame=a("p"),ixo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dxo=l(),zi=a("p"),cxo=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),fxo=o("not"),mxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=a("a"),gxo=o("from_pretrained()"),hxo=o(" to load the model weights."),pxo=l(),F(m7.$$.fragment),_xo=l(),Ze=a("div"),F(hL.$$.fragment),uxo=l(),yme=a("p"),bxo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vxo=l(),Ba=a("p"),Fxo=o("The model class to instantiate is selected based on the "),xme=a("code"),Txo=o("model_type"),Mxo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),Exo=o("pretrained_model_name_or_path"),Cxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),wxo=o("pretrained_model_name_or_path"),Axo=o(":"),Lxo=l(),Q=a("ul"),g7=a("li"),Sme=a("strong"),yxo=o("albert"),xxo=o(" \u2014 "),SG=a("a"),$xo=o("AlbertForMaskedLM"),kxo=o(" (ALBERT model)"),Sxo=l(),h7=a("li"),Rme=a("strong"),Rxo=o("bart"),Pxo=o(" \u2014 "),RG=a("a"),Bxo=o("BartForConditionalGeneration"),Ixo=o(" (BART model)"),Nxo=l(),p7=a("li"),Pme=a("strong"),qxo=o("bert"),jxo=o(" \u2014 "),PG=a("a"),Dxo=o("BertForMaskedLM"),Gxo=o(" (BERT model)"),Oxo=l(),_7=a("li"),Bme=a("strong"),Vxo=o("big_bird"),Xxo=o(" \u2014 "),BG=a("a"),zxo=o("BigBirdForMaskedLM"),Wxo=o(" (BigBird model)"),Qxo=l(),u7=a("li"),Ime=a("strong"),Hxo=o("camembert"),Uxo=o(" \u2014 "),IG=a("a"),Jxo=o("CamembertForMaskedLM"),Yxo=o(" (CamemBERT model)"),Kxo=l(),b7=a("li"),Nme=a("strong"),Zxo=o("convbert"),e$o=o(" \u2014 "),NG=a("a"),o$o=o("ConvBertForMaskedLM"),r$o=o(" (ConvBERT model)"),t$o=l(),v7=a("li"),qme=a("strong"),a$o=o("data2vec-text"),n$o=o(" \u2014 "),qG=a("a"),s$o=o("Data2VecTextForMaskedLM"),l$o=o(" (Data2VecText model)"),i$o=l(),F7=a("li"),jme=a("strong"),d$o=o("deberta"),c$o=o(" \u2014 "),jG=a("a"),f$o=o("DebertaForMaskedLM"),m$o=o(" (DeBERTa model)"),g$o=l(),T7=a("li"),Dme=a("strong"),h$o=o("deberta-v2"),p$o=o(" \u2014 "),DG=a("a"),_$o=o("DebertaV2ForMaskedLM"),u$o=o(" (DeBERTa-v2 model)"),b$o=l(),M7=a("li"),Gme=a("strong"),v$o=o("distilbert"),F$o=o(" \u2014 "),GG=a("a"),T$o=o("DistilBertForMaskedLM"),M$o=o(" (DistilBERT model)"),E$o=l(),E7=a("li"),Ome=a("strong"),C$o=o("electra"),w$o=o(" \u2014 "),OG=a("a"),A$o=o("ElectraForMaskedLM"),L$o=o(" (ELECTRA model)"),y$o=l(),C7=a("li"),Vme=a("strong"),x$o=o("flaubert"),$$o=o(" \u2014 "),VG=a("a"),k$o=o("FlaubertWithLMHeadModel"),S$o=o(" (FlauBERT model)"),R$o=l(),w7=a("li"),Xme=a("strong"),P$o=o("fnet"),B$o=o(" \u2014 "),XG=a("a"),I$o=o("FNetForMaskedLM"),N$o=o(" (FNet model)"),q$o=l(),A7=a("li"),zme=a("strong"),j$o=o("funnel"),D$o=o(" \u2014 "),zG=a("a"),G$o=o("FunnelForMaskedLM"),O$o=o(" (Funnel Transformer model)"),V$o=l(),L7=a("li"),Wme=a("strong"),X$o=o("ibert"),z$o=o(" \u2014 "),WG=a("a"),W$o=o("IBertForMaskedLM"),Q$o=o(" (I-BERT model)"),H$o=l(),y7=a("li"),Qme=a("strong"),U$o=o("layoutlm"),J$o=o(" \u2014 "),QG=a("a"),Y$o=o("LayoutLMForMaskedLM"),K$o=o(" (LayoutLM model)"),Z$o=l(),x7=a("li"),Hme=a("strong"),eko=o("longformer"),oko=o(" \u2014 "),HG=a("a"),rko=o("LongformerForMaskedLM"),tko=o(" (Longformer model)"),ako=l(),$7=a("li"),Ume=a("strong"),nko=o("luke"),sko=o(" \u2014 "),UG=a("a"),lko=o("LukeForMaskedLM"),iko=o(" (LUKE model)"),dko=l(),k7=a("li"),Jme=a("strong"),cko=o("mbart"),fko=o(" \u2014 "),JG=a("a"),mko=o("MBartForConditionalGeneration"),gko=o(" (mBART model)"),hko=l(),S7=a("li"),Yme=a("strong"),pko=o("megatron-bert"),_ko=o(" \u2014 "),YG=a("a"),uko=o("MegatronBertForMaskedLM"),bko=o(" (Megatron-BERT model)"),vko=l(),R7=a("li"),Kme=a("strong"),Fko=o("mobilebert"),Tko=o(" \u2014 "),KG=a("a"),Mko=o("MobileBertForMaskedLM"),Eko=o(" (MobileBERT model)"),Cko=l(),P7=a("li"),Zme=a("strong"),wko=o("mpnet"),Ako=o(" \u2014 "),ZG=a("a"),Lko=o("MPNetForMaskedLM"),yko=o(" (MPNet model)"),xko=l(),B7=a("li"),ege=a("strong"),$ko=o("nystromformer"),kko=o(" \u2014 "),eO=a("a"),Sko=o("NystromformerForMaskedLM"),Rko=o(" (Nystr\xF6mformer model)"),Pko=l(),I7=a("li"),oge=a("strong"),Bko=o("perceiver"),Iko=o(" \u2014 "),oO=a("a"),Nko=o("PerceiverForMaskedLM"),qko=o(" (Perceiver model)"),jko=l(),N7=a("li"),rge=a("strong"),Dko=o("qdqbert"),Gko=o(" \u2014 "),rO=a("a"),Oko=o("QDQBertForMaskedLM"),Vko=o(" (QDQBert model)"),Xko=l(),q7=a("li"),tge=a("strong"),zko=o("reformer"),Wko=o(" \u2014 "),tO=a("a"),Qko=o("ReformerForMaskedLM"),Hko=o(" (Reformer model)"),Uko=l(),j7=a("li"),age=a("strong"),Jko=o("rembert"),Yko=o(" \u2014 "),aO=a("a"),Kko=o("RemBertForMaskedLM"),Zko=o(" (RemBERT model)"),eSo=l(),D7=a("li"),nge=a("strong"),oSo=o("roberta"),rSo=o(" \u2014 "),nO=a("a"),tSo=o("RobertaForMaskedLM"),aSo=o(" (RoBERTa model)"),nSo=l(),G7=a("li"),sge=a("strong"),sSo=o("roformer"),lSo=o(" \u2014 "),sO=a("a"),iSo=o("RoFormerForMaskedLM"),dSo=o(" (RoFormer model)"),cSo=l(),O7=a("li"),lge=a("strong"),fSo=o("squeezebert"),mSo=o(" \u2014 "),lO=a("a"),gSo=o("SqueezeBertForMaskedLM"),hSo=o(" (SqueezeBERT model)"),pSo=l(),V7=a("li"),ige=a("strong"),_So=o("tapas"),uSo=o(" \u2014 "),iO=a("a"),bSo=o("TapasForMaskedLM"),vSo=o(" (TAPAS model)"),FSo=l(),X7=a("li"),dge=a("strong"),TSo=o("wav2vec2"),MSo=o(" \u2014 "),cge=a("code"),ESo=o("Wav2Vec2ForMaskedLM"),CSo=o(" (Wav2Vec2 model)"),wSo=l(),z7=a("li"),fge=a("strong"),ASo=o("xlm"),LSo=o(" \u2014 "),dO=a("a"),ySo=o("XLMWithLMHeadModel"),xSo=o(" (XLM model)"),$So=l(),W7=a("li"),mge=a("strong"),kSo=o("xlm-roberta"),SSo=o(" \u2014 "),cO=a("a"),RSo=o("XLMRobertaForMaskedLM"),PSo=o(" (XLM-RoBERTa model)"),BSo=l(),Q7=a("li"),gge=a("strong"),ISo=o("xlm-roberta-xl"),NSo=o(" \u2014 "),fO=a("a"),qSo=o("XLMRobertaXLForMaskedLM"),jSo=o(" (XLM-RoBERTa-XL model)"),DSo=l(),H7=a("li"),hge=a("strong"),GSo=o("yoso"),OSo=o(" \u2014 "),mO=a("a"),VSo=o("YosoForMaskedLM"),XSo=o(" (YOSO model)"),zSo=l(),U7=a("p"),WSo=o("The model is set in evaluation mode by default using "),pge=a("code"),QSo=o("model.eval()"),HSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=a("code"),USo=o("model.train()"),JSo=l(),F(J7.$$.fragment),BGe=l(),Wi=a("h2"),Y7=a("a"),uge=a("span"),F(pL.$$.fragment),YSo=l(),bge=a("span"),KSo=o("AutoModelForSeq2SeqLM"),IGe=l(),Ro=a("div"),F(_L.$$.fragment),ZSo=l(),Qi=a("p"),eRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gO=a("a"),oRo=o("from_pretrained()"),rRo=o(" class method or the "),hO=a("a"),tRo=o("from_config()"),aRo=o(` class
method.`),nRo=l(),uL=a("p"),sRo=o("This class cannot be instantiated directly using "),vge=a("code"),lRo=o("__init__()"),iRo=o(" (throws an error)."),dRo=l(),dt=a("div"),F(bL.$$.fragment),cRo=l(),Fge=a("p"),fRo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mRo=l(),Hi=a("p"),gRo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),hRo=o("not"),pRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),_Ro=o("from_pretrained()"),uRo=o(" to load the model weights."),bRo=l(),F(K7.$$.fragment),vRo=l(),eo=a("div"),F(vL.$$.fragment),FRo=l(),Mge=a("p"),TRo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MRo=l(),Ia=a("p"),ERo=o("The model class to instantiate is selected based on the "),Ege=a("code"),CRo=o("model_type"),wRo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),ARo=o("pretrained_model_name_or_path"),LRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),yRo=o("pretrained_model_name_or_path"),xRo=o(":"),$Ro=l(),pe=a("ul"),Z7=a("li"),Age=a("strong"),kRo=o("bart"),SRo=o(" \u2014 "),_O=a("a"),RRo=o("BartForConditionalGeneration"),PRo=o(" (BART model)"),BRo=l(),e9=a("li"),Lge=a("strong"),IRo=o("bigbird_pegasus"),NRo=o(" \u2014 "),uO=a("a"),qRo=o("BigBirdPegasusForConditionalGeneration"),jRo=o(" (BigBird-Pegasus model)"),DRo=l(),o9=a("li"),yge=a("strong"),GRo=o("blenderbot"),ORo=o(" \u2014 "),bO=a("a"),VRo=o("BlenderbotForConditionalGeneration"),XRo=o(" (Blenderbot model)"),zRo=l(),r9=a("li"),xge=a("strong"),WRo=o("blenderbot-small"),QRo=o(" \u2014 "),vO=a("a"),HRo=o("BlenderbotSmallForConditionalGeneration"),URo=o(" (BlenderbotSmall model)"),JRo=l(),t9=a("li"),$ge=a("strong"),YRo=o("encoder-decoder"),KRo=o(" \u2014 "),FO=a("a"),ZRo=o("EncoderDecoderModel"),ePo=o(" (Encoder decoder model)"),oPo=l(),a9=a("li"),kge=a("strong"),rPo=o("fsmt"),tPo=o(" \u2014 "),TO=a("a"),aPo=o("FSMTForConditionalGeneration"),nPo=o(" (FairSeq Machine-Translation model)"),sPo=l(),n9=a("li"),Sge=a("strong"),lPo=o("led"),iPo=o(" \u2014 "),MO=a("a"),dPo=o("LEDForConditionalGeneration"),cPo=o(" (LED model)"),fPo=l(),s9=a("li"),Rge=a("strong"),mPo=o("longt5"),gPo=o(" \u2014 "),EO=a("a"),hPo=o("LongT5ForConditionalGeneration"),pPo=o(" (LongT5 model)"),_Po=l(),l9=a("li"),Pge=a("strong"),uPo=o("m2m_100"),bPo=o(" \u2014 "),CO=a("a"),vPo=o("M2M100ForConditionalGeneration"),FPo=o(" (M2M100 model)"),TPo=l(),i9=a("li"),Bge=a("strong"),MPo=o("marian"),EPo=o(" \u2014 "),wO=a("a"),CPo=o("MarianMTModel"),wPo=o(" (Marian model)"),APo=l(),d9=a("li"),Ige=a("strong"),LPo=o("mbart"),yPo=o(" \u2014 "),AO=a("a"),xPo=o("MBartForConditionalGeneration"),$Po=o(" (mBART model)"),kPo=l(),c9=a("li"),Nge=a("strong"),SPo=o("mt5"),RPo=o(" \u2014 "),LO=a("a"),PPo=o("MT5ForConditionalGeneration"),BPo=o(" (MT5 model)"),IPo=l(),f9=a("li"),qge=a("strong"),NPo=o("pegasus"),qPo=o(" \u2014 "),yO=a("a"),jPo=o("PegasusForConditionalGeneration"),DPo=o(" (Pegasus model)"),GPo=l(),m9=a("li"),jge=a("strong"),OPo=o("plbart"),VPo=o(" \u2014 "),xO=a("a"),XPo=o("PLBartForConditionalGeneration"),zPo=o(" (PLBart model)"),WPo=l(),g9=a("li"),Dge=a("strong"),QPo=o("prophetnet"),HPo=o(" \u2014 "),$O=a("a"),UPo=o("ProphetNetForConditionalGeneration"),JPo=o(" (ProphetNet model)"),YPo=l(),h9=a("li"),Gge=a("strong"),KPo=o("t5"),ZPo=o(" \u2014 "),kO=a("a"),eBo=o("T5ForConditionalGeneration"),oBo=o(" (T5 model)"),rBo=l(),p9=a("li"),Oge=a("strong"),tBo=o("xlm-prophetnet"),aBo=o(" \u2014 "),SO=a("a"),nBo=o("XLMProphetNetForConditionalGeneration"),sBo=o(" (XLM-ProphetNet model)"),lBo=l(),_9=a("p"),iBo=o("The model is set in evaluation mode by default using "),Vge=a("code"),dBo=o("model.eval()"),cBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=a("code"),fBo=o("model.train()"),mBo=l(),F(u9.$$.fragment),NGe=l(),Ui=a("h2"),b9=a("a"),zge=a("span"),F(FL.$$.fragment),gBo=l(),Wge=a("span"),hBo=o("AutoModelForSequenceClassification"),qGe=l(),Po=a("div"),F(TL.$$.fragment),pBo=l(),Ji=a("p"),_Bo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RO=a("a"),uBo=o("from_pretrained()"),bBo=o(" class method or the "),PO=a("a"),vBo=o("from_config()"),FBo=o(` class
method.`),TBo=l(),ML=a("p"),MBo=o("This class cannot be instantiated directly using "),Qge=a("code"),EBo=o("__init__()"),CBo=o(" (throws an error)."),wBo=l(),ct=a("div"),F(EL.$$.fragment),ABo=l(),Hge=a("p"),LBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yBo=l(),Yi=a("p"),xBo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),$Bo=o("not"),kBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=a("a"),SBo=o("from_pretrained()"),RBo=o(" to load the model weights."),PBo=l(),F(v9.$$.fragment),BBo=l(),oo=a("div"),F(CL.$$.fragment),IBo=l(),Jge=a("p"),NBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qBo=l(),Na=a("p"),jBo=o("The model class to instantiate is selected based on the "),Yge=a("code"),DBo=o("model_type"),GBo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),OBo=o("pretrained_model_name_or_path"),VBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),XBo=o("pretrained_model_name_or_path"),zBo=o(":"),WBo=l(),N=a("ul"),F9=a("li"),ehe=a("strong"),QBo=o("albert"),HBo=o(" \u2014 "),IO=a("a"),UBo=o("AlbertForSequenceClassification"),JBo=o(" (ALBERT model)"),YBo=l(),T9=a("li"),ohe=a("strong"),KBo=o("bart"),ZBo=o(" \u2014 "),NO=a("a"),eIo=o("BartForSequenceClassification"),oIo=o(" (BART model)"),rIo=l(),M9=a("li"),rhe=a("strong"),tIo=o("bert"),aIo=o(" \u2014 "),qO=a("a"),nIo=o("BertForSequenceClassification"),sIo=o(" (BERT model)"),lIo=l(),E9=a("li"),the=a("strong"),iIo=o("big_bird"),dIo=o(" \u2014 "),jO=a("a"),cIo=o("BigBirdForSequenceClassification"),fIo=o(" (BigBird model)"),mIo=l(),C9=a("li"),ahe=a("strong"),gIo=o("bigbird_pegasus"),hIo=o(" \u2014 "),DO=a("a"),pIo=o("BigBirdPegasusForSequenceClassification"),_Io=o(" (BigBird-Pegasus model)"),uIo=l(),w9=a("li"),nhe=a("strong"),bIo=o("bloom"),vIo=o(" \u2014 "),GO=a("a"),FIo=o("BloomForSequenceClassification"),TIo=o(" (BLOOM model)"),MIo=l(),A9=a("li"),she=a("strong"),EIo=o("camembert"),CIo=o(" \u2014 "),OO=a("a"),wIo=o("CamembertForSequenceClassification"),AIo=o(" (CamemBERT model)"),LIo=l(),L9=a("li"),lhe=a("strong"),yIo=o("canine"),xIo=o(" \u2014 "),VO=a("a"),$Io=o("CanineForSequenceClassification"),kIo=o(" (CANINE model)"),SIo=l(),y9=a("li"),ihe=a("strong"),RIo=o("convbert"),PIo=o(" \u2014 "),XO=a("a"),BIo=o("ConvBertForSequenceClassification"),IIo=o(" (ConvBERT model)"),NIo=l(),x9=a("li"),dhe=a("strong"),qIo=o("ctrl"),jIo=o(" \u2014 "),zO=a("a"),DIo=o("CTRLForSequenceClassification"),GIo=o(" (CTRL model)"),OIo=l(),$9=a("li"),che=a("strong"),VIo=o("data2vec-text"),XIo=o(" \u2014 "),WO=a("a"),zIo=o("Data2VecTextForSequenceClassification"),WIo=o(" (Data2VecText model)"),QIo=l(),k9=a("li"),fhe=a("strong"),HIo=o("deberta"),UIo=o(" \u2014 "),QO=a("a"),JIo=o("DebertaForSequenceClassification"),YIo=o(" (DeBERTa model)"),KIo=l(),S9=a("li"),mhe=a("strong"),ZIo=o("deberta-v2"),eNo=o(" \u2014 "),HO=a("a"),oNo=o("DebertaV2ForSequenceClassification"),rNo=o(" (DeBERTa-v2 model)"),tNo=l(),R9=a("li"),ghe=a("strong"),aNo=o("distilbert"),nNo=o(" \u2014 "),UO=a("a"),sNo=o("DistilBertForSequenceClassification"),lNo=o(" (DistilBERT model)"),iNo=l(),P9=a("li"),hhe=a("strong"),dNo=o("electra"),cNo=o(" \u2014 "),JO=a("a"),fNo=o("ElectraForSequenceClassification"),mNo=o(" (ELECTRA model)"),gNo=l(),B9=a("li"),phe=a("strong"),hNo=o("flaubert"),pNo=o(" \u2014 "),YO=a("a"),_No=o("FlaubertForSequenceClassification"),uNo=o(" (FlauBERT model)"),bNo=l(),I9=a("li"),_he=a("strong"),vNo=o("fnet"),FNo=o(" \u2014 "),KO=a("a"),TNo=o("FNetForSequenceClassification"),MNo=o(" (FNet model)"),ENo=l(),N9=a("li"),uhe=a("strong"),CNo=o("funnel"),wNo=o(" \u2014 "),ZO=a("a"),ANo=o("FunnelForSequenceClassification"),LNo=o(" (Funnel Transformer model)"),yNo=l(),q9=a("li"),bhe=a("strong"),xNo=o("gpt2"),$No=o(" \u2014 "),eV=a("a"),kNo=o("GPT2ForSequenceClassification"),SNo=o(" (OpenAI GPT-2 model)"),RNo=l(),j9=a("li"),vhe=a("strong"),PNo=o("gpt_neo"),BNo=o(" \u2014 "),oV=a("a"),INo=o("GPTNeoForSequenceClassification"),NNo=o(" (GPT Neo model)"),qNo=l(),D9=a("li"),Fhe=a("strong"),jNo=o("gptj"),DNo=o(" \u2014 "),rV=a("a"),GNo=o("GPTJForSequenceClassification"),ONo=o(" (GPT-J model)"),VNo=l(),G9=a("li"),The=a("strong"),XNo=o("ibert"),zNo=o(" \u2014 "),tV=a("a"),WNo=o("IBertForSequenceClassification"),QNo=o(" (I-BERT model)"),HNo=l(),O9=a("li"),Mhe=a("strong"),UNo=o("layoutlm"),JNo=o(" \u2014 "),aV=a("a"),YNo=o("LayoutLMForSequenceClassification"),KNo=o(" (LayoutLM model)"),ZNo=l(),V9=a("li"),Ehe=a("strong"),eqo=o("layoutlmv2"),oqo=o(" \u2014 "),nV=a("a"),rqo=o("LayoutLMv2ForSequenceClassification"),tqo=o(" (LayoutLMv2 model)"),aqo=l(),X9=a("li"),Che=a("strong"),nqo=o("layoutlmv3"),sqo=o(" \u2014 "),sV=a("a"),lqo=o("LayoutLMv3ForSequenceClassification"),iqo=o(" (LayoutLMv3 model)"),dqo=l(),z9=a("li"),whe=a("strong"),cqo=o("led"),fqo=o(" \u2014 "),lV=a("a"),mqo=o("LEDForSequenceClassification"),gqo=o(" (LED model)"),hqo=l(),W9=a("li"),Ahe=a("strong"),pqo=o("longformer"),_qo=o(" \u2014 "),iV=a("a"),uqo=o("LongformerForSequenceClassification"),bqo=o(" (Longformer model)"),vqo=l(),Q9=a("li"),Lhe=a("strong"),Fqo=o("mbart"),Tqo=o(" \u2014 "),dV=a("a"),Mqo=o("MBartForSequenceClassification"),Eqo=o(" (mBART model)"),Cqo=l(),H9=a("li"),yhe=a("strong"),wqo=o("megatron-bert"),Aqo=o(" \u2014 "),cV=a("a"),Lqo=o("MegatronBertForSequenceClassification"),yqo=o(" (Megatron-BERT model)"),xqo=l(),U9=a("li"),xhe=a("strong"),$qo=o("mobilebert"),kqo=o(" \u2014 "),fV=a("a"),Sqo=o("MobileBertForSequenceClassification"),Rqo=o(" (MobileBERT model)"),Pqo=l(),J9=a("li"),$he=a("strong"),Bqo=o("mpnet"),Iqo=o(" \u2014 "),mV=a("a"),Nqo=o("MPNetForSequenceClassification"),qqo=o(" (MPNet model)"),jqo=l(),Y9=a("li"),khe=a("strong"),Dqo=o("nystromformer"),Gqo=o(" \u2014 "),gV=a("a"),Oqo=o("NystromformerForSequenceClassification"),Vqo=o(" (Nystr\xF6mformer model)"),Xqo=l(),K9=a("li"),She=a("strong"),zqo=o("openai-gpt"),Wqo=o(" \u2014 "),hV=a("a"),Qqo=o("OpenAIGPTForSequenceClassification"),Hqo=o(" (OpenAI GPT model)"),Uqo=l(),Z9=a("li"),Rhe=a("strong"),Jqo=o("perceiver"),Yqo=o(" \u2014 "),pV=a("a"),Kqo=o("PerceiverForSequenceClassification"),Zqo=o(" (Perceiver model)"),ejo=l(),eb=a("li"),Phe=a("strong"),ojo=o("plbart"),rjo=o(" \u2014 "),_V=a("a"),tjo=o("PLBartForSequenceClassification"),ajo=o(" (PLBart model)"),njo=l(),ob=a("li"),Bhe=a("strong"),sjo=o("qdqbert"),ljo=o(" \u2014 "),uV=a("a"),ijo=o("QDQBertForSequenceClassification"),djo=o(" (QDQBert model)"),cjo=l(),rb=a("li"),Ihe=a("strong"),fjo=o("reformer"),mjo=o(" \u2014 "),bV=a("a"),gjo=o("ReformerForSequenceClassification"),hjo=o(" (Reformer model)"),pjo=l(),tb=a("li"),Nhe=a("strong"),_jo=o("rembert"),ujo=o(" \u2014 "),vV=a("a"),bjo=o("RemBertForSequenceClassification"),vjo=o(" (RemBERT model)"),Fjo=l(),ab=a("li"),qhe=a("strong"),Tjo=o("roberta"),Mjo=o(" \u2014 "),FV=a("a"),Ejo=o("RobertaForSequenceClassification"),Cjo=o(" (RoBERTa model)"),wjo=l(),nb=a("li"),jhe=a("strong"),Ajo=o("roformer"),Ljo=o(" \u2014 "),TV=a("a"),yjo=o("RoFormerForSequenceClassification"),xjo=o(" (RoFormer model)"),$jo=l(),sb=a("li"),Dhe=a("strong"),kjo=o("squeezebert"),Sjo=o(" \u2014 "),MV=a("a"),Rjo=o("SqueezeBertForSequenceClassification"),Pjo=o(" (SqueezeBERT model)"),Bjo=l(),lb=a("li"),Ghe=a("strong"),Ijo=o("tapas"),Njo=o(" \u2014 "),EV=a("a"),qjo=o("TapasForSequenceClassification"),jjo=o(" (TAPAS model)"),Djo=l(),ib=a("li"),Ohe=a("strong"),Gjo=o("transfo-xl"),Ojo=o(" \u2014 "),CV=a("a"),Vjo=o("TransfoXLForSequenceClassification"),Xjo=o(" (Transformer-XL model)"),zjo=l(),db=a("li"),Vhe=a("strong"),Wjo=o("xlm"),Qjo=o(" \u2014 "),wV=a("a"),Hjo=o("XLMForSequenceClassification"),Ujo=o(" (XLM model)"),Jjo=l(),cb=a("li"),Xhe=a("strong"),Yjo=o("xlm-roberta"),Kjo=o(" \u2014 "),AV=a("a"),Zjo=o("XLMRobertaForSequenceClassification"),eDo=o(" (XLM-RoBERTa model)"),oDo=l(),fb=a("li"),zhe=a("strong"),rDo=o("xlm-roberta-xl"),tDo=o(" \u2014 "),LV=a("a"),aDo=o("XLMRobertaXLForSequenceClassification"),nDo=o(" (XLM-RoBERTa-XL model)"),sDo=l(),mb=a("li"),Whe=a("strong"),lDo=o("xlnet"),iDo=o(" \u2014 "),yV=a("a"),dDo=o("XLNetForSequenceClassification"),cDo=o(" (XLNet model)"),fDo=l(),gb=a("li"),Qhe=a("strong"),mDo=o("yoso"),gDo=o(" \u2014 "),xV=a("a"),hDo=o("YosoForSequenceClassification"),pDo=o(" (YOSO model)"),_Do=l(),hb=a("p"),uDo=o("The model is set in evaluation mode by default using "),Hhe=a("code"),bDo=o("model.eval()"),vDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),FDo=o("model.train()"),TDo=l(),F(pb.$$.fragment),jGe=l(),Ki=a("h2"),_b=a("a"),Jhe=a("span"),F(wL.$$.fragment),MDo=l(),Yhe=a("span"),EDo=o("AutoModelForMultipleChoice"),DGe=l(),Bo=a("div"),F(AL.$$.fragment),CDo=l(),Zi=a("p"),wDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$V=a("a"),ADo=o("from_pretrained()"),LDo=o(" class method or the "),kV=a("a"),yDo=o("from_config()"),xDo=o(` class
method.`),$Do=l(),LL=a("p"),kDo=o("This class cannot be instantiated directly using "),Khe=a("code"),SDo=o("__init__()"),RDo=o(" (throws an error)."),PDo=l(),ft=a("div"),F(yL.$$.fragment),BDo=l(),Zhe=a("p"),IDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),NDo=l(),ed=a("p"),qDo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),jDo=o("not"),DDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=a("a"),GDo=o("from_pretrained()"),ODo=o(" to load the model weights."),VDo=l(),F(ub.$$.fragment),XDo=l(),ro=a("div"),F(xL.$$.fragment),zDo=l(),ope=a("p"),WDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QDo=l(),qa=a("p"),HDo=o("The model class to instantiate is selected based on the "),rpe=a("code"),UDo=o("model_type"),JDo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),YDo=o("pretrained_model_name_or_path"),KDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),ZDo=o("pretrained_model_name_or_path"),eGo=o(":"),oGo=l(),Z=a("ul"),bb=a("li"),npe=a("strong"),rGo=o("albert"),tGo=o(" \u2014 "),RV=a("a"),aGo=o("AlbertForMultipleChoice"),nGo=o(" (ALBERT model)"),sGo=l(),vb=a("li"),spe=a("strong"),lGo=o("bert"),iGo=o(" \u2014 "),PV=a("a"),dGo=o("BertForMultipleChoice"),cGo=o(" (BERT model)"),fGo=l(),Fb=a("li"),lpe=a("strong"),mGo=o("big_bird"),gGo=o(" \u2014 "),BV=a("a"),hGo=o("BigBirdForMultipleChoice"),pGo=o(" (BigBird model)"),_Go=l(),Tb=a("li"),ipe=a("strong"),uGo=o("camembert"),bGo=o(" \u2014 "),IV=a("a"),vGo=o("CamembertForMultipleChoice"),FGo=o(" (CamemBERT model)"),TGo=l(),Mb=a("li"),dpe=a("strong"),MGo=o("canine"),EGo=o(" \u2014 "),NV=a("a"),CGo=o("CanineForMultipleChoice"),wGo=o(" (CANINE model)"),AGo=l(),Eb=a("li"),cpe=a("strong"),LGo=o("convbert"),yGo=o(" \u2014 "),qV=a("a"),xGo=o("ConvBertForMultipleChoice"),$Go=o(" (ConvBERT model)"),kGo=l(),Cb=a("li"),fpe=a("strong"),SGo=o("data2vec-text"),RGo=o(" \u2014 "),jV=a("a"),PGo=o("Data2VecTextForMultipleChoice"),BGo=o(" (Data2VecText model)"),IGo=l(),wb=a("li"),mpe=a("strong"),NGo=o("deberta-v2"),qGo=o(" \u2014 "),DV=a("a"),jGo=o("DebertaV2ForMultipleChoice"),DGo=o(" (DeBERTa-v2 model)"),GGo=l(),Ab=a("li"),gpe=a("strong"),OGo=o("distilbert"),VGo=o(" \u2014 "),GV=a("a"),XGo=o("DistilBertForMultipleChoice"),zGo=o(" (DistilBERT model)"),WGo=l(),Lb=a("li"),hpe=a("strong"),QGo=o("electra"),HGo=o(" \u2014 "),OV=a("a"),UGo=o("ElectraForMultipleChoice"),JGo=o(" (ELECTRA model)"),YGo=l(),yb=a("li"),ppe=a("strong"),KGo=o("flaubert"),ZGo=o(" \u2014 "),VV=a("a"),eOo=o("FlaubertForMultipleChoice"),oOo=o(" (FlauBERT model)"),rOo=l(),xb=a("li"),_pe=a("strong"),tOo=o("fnet"),aOo=o(" \u2014 "),XV=a("a"),nOo=o("FNetForMultipleChoice"),sOo=o(" (FNet model)"),lOo=l(),$b=a("li"),upe=a("strong"),iOo=o("funnel"),dOo=o(" \u2014 "),zV=a("a"),cOo=o("FunnelForMultipleChoice"),fOo=o(" (Funnel Transformer model)"),mOo=l(),kb=a("li"),bpe=a("strong"),gOo=o("ibert"),hOo=o(" \u2014 "),WV=a("a"),pOo=o("IBertForMultipleChoice"),_Oo=o(" (I-BERT model)"),uOo=l(),Sb=a("li"),vpe=a("strong"),bOo=o("longformer"),vOo=o(" \u2014 "),QV=a("a"),FOo=o("LongformerForMultipleChoice"),TOo=o(" (Longformer model)"),MOo=l(),Rb=a("li"),Fpe=a("strong"),EOo=o("megatron-bert"),COo=o(" \u2014 "),HV=a("a"),wOo=o("MegatronBertForMultipleChoice"),AOo=o(" (Megatron-BERT model)"),LOo=l(),Pb=a("li"),Tpe=a("strong"),yOo=o("mobilebert"),xOo=o(" \u2014 "),UV=a("a"),$Oo=o("MobileBertForMultipleChoice"),kOo=o(" (MobileBERT model)"),SOo=l(),Bb=a("li"),Mpe=a("strong"),ROo=o("mpnet"),POo=o(" \u2014 "),JV=a("a"),BOo=o("MPNetForMultipleChoice"),IOo=o(" (MPNet model)"),NOo=l(),Ib=a("li"),Epe=a("strong"),qOo=o("nystromformer"),jOo=o(" \u2014 "),YV=a("a"),DOo=o("NystromformerForMultipleChoice"),GOo=o(" (Nystr\xF6mformer model)"),OOo=l(),Nb=a("li"),Cpe=a("strong"),VOo=o("qdqbert"),XOo=o(" \u2014 "),KV=a("a"),zOo=o("QDQBertForMultipleChoice"),WOo=o(" (QDQBert model)"),QOo=l(),qb=a("li"),wpe=a("strong"),HOo=o("rembert"),UOo=o(" \u2014 "),ZV=a("a"),JOo=o("RemBertForMultipleChoice"),YOo=o(" (RemBERT model)"),KOo=l(),jb=a("li"),Ape=a("strong"),ZOo=o("roberta"),eVo=o(" \u2014 "),eX=a("a"),oVo=o("RobertaForMultipleChoice"),rVo=o(" (RoBERTa model)"),tVo=l(),Db=a("li"),Lpe=a("strong"),aVo=o("roformer"),nVo=o(" \u2014 "),oX=a("a"),sVo=o("RoFormerForMultipleChoice"),lVo=o(" (RoFormer model)"),iVo=l(),Gb=a("li"),ype=a("strong"),dVo=o("squeezebert"),cVo=o(" \u2014 "),rX=a("a"),fVo=o("SqueezeBertForMultipleChoice"),mVo=o(" (SqueezeBERT model)"),gVo=l(),Ob=a("li"),xpe=a("strong"),hVo=o("xlm"),pVo=o(" \u2014 "),tX=a("a"),_Vo=o("XLMForMultipleChoice"),uVo=o(" (XLM model)"),bVo=l(),Vb=a("li"),$pe=a("strong"),vVo=o("xlm-roberta"),FVo=o(" \u2014 "),aX=a("a"),TVo=o("XLMRobertaForMultipleChoice"),MVo=o(" (XLM-RoBERTa model)"),EVo=l(),Xb=a("li"),kpe=a("strong"),CVo=o("xlm-roberta-xl"),wVo=o(" \u2014 "),nX=a("a"),AVo=o("XLMRobertaXLForMultipleChoice"),LVo=o(" (XLM-RoBERTa-XL model)"),yVo=l(),zb=a("li"),Spe=a("strong"),xVo=o("xlnet"),$Vo=o(" \u2014 "),sX=a("a"),kVo=o("XLNetForMultipleChoice"),SVo=o(" (XLNet model)"),RVo=l(),Wb=a("li"),Rpe=a("strong"),PVo=o("yoso"),BVo=o(" \u2014 "),lX=a("a"),IVo=o("YosoForMultipleChoice"),NVo=o(" (YOSO model)"),qVo=l(),Qb=a("p"),jVo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),DVo=o("model.eval()"),GVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),OVo=o("model.train()"),VVo=l(),F(Hb.$$.fragment),GGe=l(),od=a("h2"),Ub=a("a"),Ipe=a("span"),F($L.$$.fragment),XVo=l(),Npe=a("span"),zVo=o("AutoModelForNextSentencePrediction"),OGe=l(),Io=a("div"),F(kL.$$.fragment),WVo=l(),rd=a("p"),QVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iX=a("a"),HVo=o("from_pretrained()"),UVo=o(" class method or the "),dX=a("a"),JVo=o("from_config()"),YVo=o(` class
method.`),KVo=l(),SL=a("p"),ZVo=o("This class cannot be instantiated directly using "),qpe=a("code"),eXo=o("__init__()"),oXo=o(" (throws an error)."),rXo=l(),mt=a("div"),F(RL.$$.fragment),tXo=l(),jpe=a("p"),aXo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nXo=l(),td=a("p"),sXo=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),lXo=o("not"),iXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),dXo=o("from_pretrained()"),cXo=o(" to load the model weights."),fXo=l(),F(Jb.$$.fragment),mXo=l(),to=a("div"),F(PL.$$.fragment),gXo=l(),Gpe=a("p"),hXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pXo=l(),ja=a("p"),_Xo=o("The model class to instantiate is selected based on the "),Ope=a("code"),uXo=o("model_type"),bXo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),vXo=o("pretrained_model_name_or_path"),FXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),TXo=o("pretrained_model_name_or_path"),MXo=o(":"),EXo=l(),Zr=a("ul"),Yb=a("li"),zpe=a("strong"),CXo=o("bert"),wXo=o(" \u2014 "),fX=a("a"),AXo=o("BertForNextSentencePrediction"),LXo=o(" (BERT model)"),yXo=l(),Kb=a("li"),Wpe=a("strong"),xXo=o("fnet"),$Xo=o(" \u2014 "),mX=a("a"),kXo=o("FNetForNextSentencePrediction"),SXo=o(" (FNet model)"),RXo=l(),Zb=a("li"),Qpe=a("strong"),PXo=o("megatron-bert"),BXo=o(" \u2014 "),gX=a("a"),IXo=o("MegatronBertForNextSentencePrediction"),NXo=o(" (Megatron-BERT model)"),qXo=l(),e2=a("li"),Hpe=a("strong"),jXo=o("mobilebert"),DXo=o(" \u2014 "),hX=a("a"),GXo=o("MobileBertForNextSentencePrediction"),OXo=o(" (MobileBERT model)"),VXo=l(),o2=a("li"),Upe=a("strong"),XXo=o("qdqbert"),zXo=o(" \u2014 "),pX=a("a"),WXo=o("QDQBertForNextSentencePrediction"),QXo=o(" (QDQBert model)"),HXo=l(),r2=a("p"),UXo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),JXo=o("model.eval()"),YXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),KXo=o("model.train()"),ZXo=l(),F(t2.$$.fragment),VGe=l(),ad=a("h2"),a2=a("a"),Kpe=a("span"),F(BL.$$.fragment),ezo=l(),Zpe=a("span"),ozo=o("AutoModelForTokenClassification"),XGe=l(),No=a("div"),F(IL.$$.fragment),rzo=l(),nd=a("p"),tzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_X=a("a"),azo=o("from_pretrained()"),nzo=o(" class method or the "),uX=a("a"),szo=o("from_config()"),lzo=o(` class
method.`),izo=l(),NL=a("p"),dzo=o("This class cannot be instantiated directly using "),e_e=a("code"),czo=o("__init__()"),fzo=o(" (throws an error)."),mzo=l(),gt=a("div"),F(qL.$$.fragment),gzo=l(),o_e=a("p"),hzo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pzo=l(),sd=a("p"),_zo=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),uzo=o("not"),bzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),vzo=o("from_pretrained()"),Fzo=o(" to load the model weights."),Tzo=l(),F(n2.$$.fragment),Mzo=l(),ao=a("div"),F(jL.$$.fragment),Ezo=l(),t_e=a("p"),Czo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wzo=l(),Da=a("p"),Azo=o("The model class to instantiate is selected based on the "),a_e=a("code"),Lzo=o("model_type"),yzo=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),xzo=o("pretrained_model_name_or_path"),$zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),kzo=o("pretrained_model_name_or_path"),Szo=o(":"),Rzo=l(),H=a("ul"),s2=a("li"),l_e=a("strong"),Pzo=o("albert"),Bzo=o(" \u2014 "),vX=a("a"),Izo=o("AlbertForTokenClassification"),Nzo=o(" (ALBERT model)"),qzo=l(),l2=a("li"),i_e=a("strong"),jzo=o("bert"),Dzo=o(" \u2014 "),FX=a("a"),Gzo=o("BertForTokenClassification"),Ozo=o(" (BERT model)"),Vzo=l(),i2=a("li"),d_e=a("strong"),Xzo=o("big_bird"),zzo=o(" \u2014 "),TX=a("a"),Wzo=o("BigBirdForTokenClassification"),Qzo=o(" (BigBird model)"),Hzo=l(),d2=a("li"),c_e=a("strong"),Uzo=o("bloom"),Jzo=o(" \u2014 "),MX=a("a"),Yzo=o("BloomForTokenClassification"),Kzo=o(" (BLOOM model)"),Zzo=l(),c2=a("li"),f_e=a("strong"),eWo=o("camembert"),oWo=o(" \u2014 "),EX=a("a"),rWo=o("CamembertForTokenClassification"),tWo=o(" (CamemBERT model)"),aWo=l(),f2=a("li"),m_e=a("strong"),nWo=o("canine"),sWo=o(" \u2014 "),CX=a("a"),lWo=o("CanineForTokenClassification"),iWo=o(" (CANINE model)"),dWo=l(),m2=a("li"),g_e=a("strong"),cWo=o("convbert"),fWo=o(" \u2014 "),wX=a("a"),mWo=o("ConvBertForTokenClassification"),gWo=o(" (ConvBERT model)"),hWo=l(),g2=a("li"),h_e=a("strong"),pWo=o("data2vec-text"),_Wo=o(" \u2014 "),AX=a("a"),uWo=o("Data2VecTextForTokenClassification"),bWo=o(" (Data2VecText model)"),vWo=l(),h2=a("li"),p_e=a("strong"),FWo=o("deberta"),TWo=o(" \u2014 "),LX=a("a"),MWo=o("DebertaForTokenClassification"),EWo=o(" (DeBERTa model)"),CWo=l(),p2=a("li"),__e=a("strong"),wWo=o("deberta-v2"),AWo=o(" \u2014 "),yX=a("a"),LWo=o("DebertaV2ForTokenClassification"),yWo=o(" (DeBERTa-v2 model)"),xWo=l(),_2=a("li"),u_e=a("strong"),$Wo=o("distilbert"),kWo=o(" \u2014 "),xX=a("a"),SWo=o("DistilBertForTokenClassification"),RWo=o(" (DistilBERT model)"),PWo=l(),u2=a("li"),b_e=a("strong"),BWo=o("electra"),IWo=o(" \u2014 "),$X=a("a"),NWo=o("ElectraForTokenClassification"),qWo=o(" (ELECTRA model)"),jWo=l(),b2=a("li"),v_e=a("strong"),DWo=o("flaubert"),GWo=o(" \u2014 "),kX=a("a"),OWo=o("FlaubertForTokenClassification"),VWo=o(" (FlauBERT model)"),XWo=l(),v2=a("li"),F_e=a("strong"),zWo=o("fnet"),WWo=o(" \u2014 "),SX=a("a"),QWo=o("FNetForTokenClassification"),HWo=o(" (FNet model)"),UWo=l(),F2=a("li"),T_e=a("strong"),JWo=o("funnel"),YWo=o(" \u2014 "),RX=a("a"),KWo=o("FunnelForTokenClassification"),ZWo=o(" (Funnel Transformer model)"),eQo=l(),T2=a("li"),M_e=a("strong"),oQo=o("gpt2"),rQo=o(" \u2014 "),PX=a("a"),tQo=o("GPT2ForTokenClassification"),aQo=o(" (OpenAI GPT-2 model)"),nQo=l(),M2=a("li"),E_e=a("strong"),sQo=o("ibert"),lQo=o(" \u2014 "),BX=a("a"),iQo=o("IBertForTokenClassification"),dQo=o(" (I-BERT model)"),cQo=l(),E2=a("li"),C_e=a("strong"),fQo=o("layoutlm"),mQo=o(" \u2014 "),IX=a("a"),gQo=o("LayoutLMForTokenClassification"),hQo=o(" (LayoutLM model)"),pQo=l(),C2=a("li"),w_e=a("strong"),_Qo=o("layoutlmv2"),uQo=o(" \u2014 "),NX=a("a"),bQo=o("LayoutLMv2ForTokenClassification"),vQo=o(" (LayoutLMv2 model)"),FQo=l(),w2=a("li"),A_e=a("strong"),TQo=o("layoutlmv3"),MQo=o(" \u2014 "),qX=a("a"),EQo=o("LayoutLMv3ForTokenClassification"),CQo=o(" (LayoutLMv3 model)"),wQo=l(),A2=a("li"),L_e=a("strong"),AQo=o("longformer"),LQo=o(" \u2014 "),jX=a("a"),yQo=o("LongformerForTokenClassification"),xQo=o(" (Longformer model)"),$Qo=l(),L2=a("li"),y_e=a("strong"),kQo=o("megatron-bert"),SQo=o(" \u2014 "),DX=a("a"),RQo=o("MegatronBertForTokenClassification"),PQo=o(" (Megatron-BERT model)"),BQo=l(),y2=a("li"),x_e=a("strong"),IQo=o("mobilebert"),NQo=o(" \u2014 "),GX=a("a"),qQo=o("MobileBertForTokenClassification"),jQo=o(" (MobileBERT model)"),DQo=l(),x2=a("li"),$_e=a("strong"),GQo=o("mpnet"),OQo=o(" \u2014 "),OX=a("a"),VQo=o("MPNetForTokenClassification"),XQo=o(" (MPNet model)"),zQo=l(),$2=a("li"),k_e=a("strong"),WQo=o("nystromformer"),QQo=o(" \u2014 "),VX=a("a"),HQo=o("NystromformerForTokenClassification"),UQo=o(" (Nystr\xF6mformer model)"),JQo=l(),k2=a("li"),S_e=a("strong"),YQo=o("qdqbert"),KQo=o(" \u2014 "),XX=a("a"),ZQo=o("QDQBertForTokenClassification"),eHo=o(" (QDQBert model)"),oHo=l(),S2=a("li"),R_e=a("strong"),rHo=o("rembert"),tHo=o(" \u2014 "),zX=a("a"),aHo=o("RemBertForTokenClassification"),nHo=o(" (RemBERT model)"),sHo=l(),R2=a("li"),P_e=a("strong"),lHo=o("roberta"),iHo=o(" \u2014 "),WX=a("a"),dHo=o("RobertaForTokenClassification"),cHo=o(" (RoBERTa model)"),fHo=l(),P2=a("li"),B_e=a("strong"),mHo=o("roformer"),gHo=o(" \u2014 "),QX=a("a"),hHo=o("RoFormerForTokenClassification"),pHo=o(" (RoFormer model)"),_Ho=l(),B2=a("li"),I_e=a("strong"),uHo=o("squeezebert"),bHo=o(" \u2014 "),HX=a("a"),vHo=o("SqueezeBertForTokenClassification"),FHo=o(" (SqueezeBERT model)"),THo=l(),I2=a("li"),N_e=a("strong"),MHo=o("xlm"),EHo=o(" \u2014 "),UX=a("a"),CHo=o("XLMForTokenClassification"),wHo=o(" (XLM model)"),AHo=l(),N2=a("li"),q_e=a("strong"),LHo=o("xlm-roberta"),yHo=o(" \u2014 "),JX=a("a"),xHo=o("XLMRobertaForTokenClassification"),$Ho=o(" (XLM-RoBERTa model)"),kHo=l(),q2=a("li"),j_e=a("strong"),SHo=o("xlm-roberta-xl"),RHo=o(" \u2014 "),YX=a("a"),PHo=o("XLMRobertaXLForTokenClassification"),BHo=o(" (XLM-RoBERTa-XL model)"),IHo=l(),j2=a("li"),D_e=a("strong"),NHo=o("xlnet"),qHo=o(" \u2014 "),KX=a("a"),jHo=o("XLNetForTokenClassification"),DHo=o(" (XLNet model)"),GHo=l(),D2=a("li"),G_e=a("strong"),OHo=o("yoso"),VHo=o(" \u2014 "),ZX=a("a"),XHo=o("YosoForTokenClassification"),zHo=o(" (YOSO model)"),WHo=l(),G2=a("p"),QHo=o("The model is set in evaluation mode by default using "),O_e=a("code"),HHo=o("model.eval()"),UHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=a("code"),JHo=o("model.train()"),YHo=l(),F(O2.$$.fragment),zGe=l(),ld=a("h2"),V2=a("a"),X_e=a("span"),F(DL.$$.fragment),KHo=l(),z_e=a("span"),ZHo=o("AutoModelForQuestionAnswering"),WGe=l(),qo=a("div"),F(GL.$$.fragment),eUo=l(),id=a("p"),oUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ez=a("a"),rUo=o("from_pretrained()"),tUo=o(" class method or the "),oz=a("a"),aUo=o("from_config()"),nUo=o(` class
method.`),sUo=l(),OL=a("p"),lUo=o("This class cannot be instantiated directly using "),W_e=a("code"),iUo=o("__init__()"),dUo=o(" (throws an error)."),cUo=l(),ht=a("div"),F(VL.$$.fragment),fUo=l(),Q_e=a("p"),mUo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gUo=l(),dd=a("p"),hUo=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),pUo=o("not"),_Uo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),uUo=o("from_pretrained()"),bUo=o(" to load the model weights."),vUo=l(),F(X2.$$.fragment),FUo=l(),no=a("div"),F(XL.$$.fragment),TUo=l(),U_e=a("p"),MUo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EUo=l(),Ga=a("p"),CUo=o("The model class to instantiate is selected based on the "),J_e=a("code"),wUo=o("model_type"),AUo=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),LUo=o("pretrained_model_name_or_path"),yUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),xUo=o("pretrained_model_name_or_path"),$Uo=o(":"),kUo=l(),V=a("ul"),z2=a("li"),Z_e=a("strong"),SUo=o("albert"),RUo=o(" \u2014 "),tz=a("a"),PUo=o("AlbertForQuestionAnswering"),BUo=o(" (ALBERT model)"),IUo=l(),W2=a("li"),eue=a("strong"),NUo=o("bart"),qUo=o(" \u2014 "),az=a("a"),jUo=o("BartForQuestionAnswering"),DUo=o(" (BART model)"),GUo=l(),Q2=a("li"),oue=a("strong"),OUo=o("bert"),VUo=o(" \u2014 "),nz=a("a"),XUo=o("BertForQuestionAnswering"),zUo=o(" (BERT model)"),WUo=l(),H2=a("li"),rue=a("strong"),QUo=o("big_bird"),HUo=o(" \u2014 "),sz=a("a"),UUo=o("BigBirdForQuestionAnswering"),JUo=o(" (BigBird model)"),YUo=l(),U2=a("li"),tue=a("strong"),KUo=o("bigbird_pegasus"),ZUo=o(" \u2014 "),lz=a("a"),eJo=o("BigBirdPegasusForQuestionAnswering"),oJo=o(" (BigBird-Pegasus model)"),rJo=l(),J2=a("li"),aue=a("strong"),tJo=o("camembert"),aJo=o(" \u2014 "),iz=a("a"),nJo=o("CamembertForQuestionAnswering"),sJo=o(" (CamemBERT model)"),lJo=l(),Y2=a("li"),nue=a("strong"),iJo=o("canine"),dJo=o(" \u2014 "),dz=a("a"),cJo=o("CanineForQuestionAnswering"),fJo=o(" (CANINE model)"),mJo=l(),K2=a("li"),sue=a("strong"),gJo=o("convbert"),hJo=o(" \u2014 "),cz=a("a"),pJo=o("ConvBertForQuestionAnswering"),_Jo=o(" (ConvBERT model)"),uJo=l(),Z2=a("li"),lue=a("strong"),bJo=o("data2vec-text"),vJo=o(" \u2014 "),fz=a("a"),FJo=o("Data2VecTextForQuestionAnswering"),TJo=o(" (Data2VecText model)"),MJo=l(),ev=a("li"),iue=a("strong"),EJo=o("deberta"),CJo=o(" \u2014 "),mz=a("a"),wJo=o("DebertaForQuestionAnswering"),AJo=o(" (DeBERTa model)"),LJo=l(),ov=a("li"),due=a("strong"),yJo=o("deberta-v2"),xJo=o(" \u2014 "),gz=a("a"),$Jo=o("DebertaV2ForQuestionAnswering"),kJo=o(" (DeBERTa-v2 model)"),SJo=l(),rv=a("li"),cue=a("strong"),RJo=o("distilbert"),PJo=o(" \u2014 "),hz=a("a"),BJo=o("DistilBertForQuestionAnswering"),IJo=o(" (DistilBERT model)"),NJo=l(),tv=a("li"),fue=a("strong"),qJo=o("electra"),jJo=o(" \u2014 "),pz=a("a"),DJo=o("ElectraForQuestionAnswering"),GJo=o(" (ELECTRA model)"),OJo=l(),av=a("li"),mue=a("strong"),VJo=o("flaubert"),XJo=o(" \u2014 "),_z=a("a"),zJo=o("FlaubertForQuestionAnsweringSimple"),WJo=o(" (FlauBERT model)"),QJo=l(),nv=a("li"),gue=a("strong"),HJo=o("fnet"),UJo=o(" \u2014 "),uz=a("a"),JJo=o("FNetForQuestionAnswering"),YJo=o(" (FNet model)"),KJo=l(),sv=a("li"),hue=a("strong"),ZJo=o("funnel"),eYo=o(" \u2014 "),bz=a("a"),oYo=o("FunnelForQuestionAnswering"),rYo=o(" (Funnel Transformer model)"),tYo=l(),lv=a("li"),pue=a("strong"),aYo=o("gptj"),nYo=o(" \u2014 "),vz=a("a"),sYo=o("GPTJForQuestionAnswering"),lYo=o(" (GPT-J model)"),iYo=l(),iv=a("li"),_ue=a("strong"),dYo=o("ibert"),cYo=o(" \u2014 "),Fz=a("a"),fYo=o("IBertForQuestionAnswering"),mYo=o(" (I-BERT model)"),gYo=l(),dv=a("li"),uue=a("strong"),hYo=o("layoutlmv2"),pYo=o(" \u2014 "),Tz=a("a"),_Yo=o("LayoutLMv2ForQuestionAnswering"),uYo=o(" (LayoutLMv2 model)"),bYo=l(),cv=a("li"),bue=a("strong"),vYo=o("layoutlmv3"),FYo=o(" \u2014 "),Mz=a("a"),TYo=o("LayoutLMv3ForQuestionAnswering"),MYo=o(" (LayoutLMv3 model)"),EYo=l(),fv=a("li"),vue=a("strong"),CYo=o("led"),wYo=o(" \u2014 "),Ez=a("a"),AYo=o("LEDForQuestionAnswering"),LYo=o(" (LED model)"),yYo=l(),mv=a("li"),Fue=a("strong"),xYo=o("longformer"),$Yo=o(" \u2014 "),Cz=a("a"),kYo=o("LongformerForQuestionAnswering"),SYo=o(" (Longformer model)"),RYo=l(),gv=a("li"),Tue=a("strong"),PYo=o("lxmert"),BYo=o(" \u2014 "),wz=a("a"),IYo=o("LxmertForQuestionAnswering"),NYo=o(" (LXMERT model)"),qYo=l(),hv=a("li"),Mue=a("strong"),jYo=o("mbart"),DYo=o(" \u2014 "),Az=a("a"),GYo=o("MBartForQuestionAnswering"),OYo=o(" (mBART model)"),VYo=l(),pv=a("li"),Eue=a("strong"),XYo=o("megatron-bert"),zYo=o(" \u2014 "),Lz=a("a"),WYo=o("MegatronBertForQuestionAnswering"),QYo=o(" (Megatron-BERT model)"),HYo=l(),_v=a("li"),Cue=a("strong"),UYo=o("mobilebert"),JYo=o(" \u2014 "),yz=a("a"),YYo=o("MobileBertForQuestionAnswering"),KYo=o(" (MobileBERT model)"),ZYo=l(),uv=a("li"),wue=a("strong"),eKo=o("mpnet"),oKo=o(" \u2014 "),xz=a("a"),rKo=o("MPNetForQuestionAnswering"),tKo=o(" (MPNet model)"),aKo=l(),bv=a("li"),Aue=a("strong"),nKo=o("nystromformer"),sKo=o(" \u2014 "),$z=a("a"),lKo=o("NystromformerForQuestionAnswering"),iKo=o(" (Nystr\xF6mformer model)"),dKo=l(),vv=a("li"),Lue=a("strong"),cKo=o("qdqbert"),fKo=o(" \u2014 "),kz=a("a"),mKo=o("QDQBertForQuestionAnswering"),gKo=o(" (QDQBert model)"),hKo=l(),Fv=a("li"),yue=a("strong"),pKo=o("reformer"),_Ko=o(" \u2014 "),Sz=a("a"),uKo=o("ReformerForQuestionAnswering"),bKo=o(" (Reformer model)"),vKo=l(),Tv=a("li"),xue=a("strong"),FKo=o("rembert"),TKo=o(" \u2014 "),Rz=a("a"),MKo=o("RemBertForQuestionAnswering"),EKo=o(" (RemBERT model)"),CKo=l(),Mv=a("li"),$ue=a("strong"),wKo=o("roberta"),AKo=o(" \u2014 "),Pz=a("a"),LKo=o("RobertaForQuestionAnswering"),yKo=o(" (RoBERTa model)"),xKo=l(),Ev=a("li"),kue=a("strong"),$Ko=o("roformer"),kKo=o(" \u2014 "),Bz=a("a"),SKo=o("RoFormerForQuestionAnswering"),RKo=o(" (RoFormer model)"),PKo=l(),Cv=a("li"),Sue=a("strong"),BKo=o("splinter"),IKo=o(" \u2014 "),Iz=a("a"),NKo=o("SplinterForQuestionAnswering"),qKo=o(" (Splinter model)"),jKo=l(),wv=a("li"),Rue=a("strong"),DKo=o("squeezebert"),GKo=o(" \u2014 "),Nz=a("a"),OKo=o("SqueezeBertForQuestionAnswering"),VKo=o(" (SqueezeBERT model)"),XKo=l(),Av=a("li"),Pue=a("strong"),zKo=o("xlm"),WKo=o(" \u2014 "),qz=a("a"),QKo=o("XLMForQuestionAnsweringSimple"),HKo=o(" (XLM model)"),UKo=l(),Lv=a("li"),Bue=a("strong"),JKo=o("xlm-roberta"),YKo=o(" \u2014 "),jz=a("a"),KKo=o("XLMRobertaForQuestionAnswering"),ZKo=o(" (XLM-RoBERTa model)"),eZo=l(),yv=a("li"),Iue=a("strong"),oZo=o("xlm-roberta-xl"),rZo=o(" \u2014 "),Dz=a("a"),tZo=o("XLMRobertaXLForQuestionAnswering"),aZo=o(" (XLM-RoBERTa-XL model)"),nZo=l(),xv=a("li"),Nue=a("strong"),sZo=o("xlnet"),lZo=o(" \u2014 "),Gz=a("a"),iZo=o("XLNetForQuestionAnsweringSimple"),dZo=o(" (XLNet model)"),cZo=l(),$v=a("li"),que=a("strong"),fZo=o("yoso"),mZo=o(" \u2014 "),Oz=a("a"),gZo=o("YosoForQuestionAnswering"),hZo=o(" (YOSO model)"),pZo=l(),kv=a("p"),_Zo=o("The model is set in evaluation mode by default using "),jue=a("code"),uZo=o("model.eval()"),bZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),vZo=o("model.train()"),FZo=l(),F(Sv.$$.fragment),QGe=l(),cd=a("h2"),Rv=a("a"),Gue=a("span"),F(zL.$$.fragment),TZo=l(),Oue=a("span"),MZo=o("AutoModelForTableQuestionAnswering"),HGe=l(),jo=a("div"),F(WL.$$.fragment),EZo=l(),fd=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vz=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),Xz=a("a"),LZo=o("from_config()"),yZo=o(` class
method.`),xZo=l(),QL=a("p"),$Zo=o("This class cannot be instantiated directly using "),Vue=a("code"),kZo=o("__init__()"),SZo=o(" (throws an error)."),RZo=l(),pt=a("div"),F(HL.$$.fragment),PZo=l(),Xue=a("p"),BZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),IZo=l(),md=a("p"),NZo=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),qZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),F(Pv.$$.fragment),VZo=l(),so=a("div"),F(UL.$$.fragment),XZo=l(),Wue=a("p"),zZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WZo=l(),Oa=a("p"),QZo=o("The model class to instantiate is selected based on the "),Que=a("code"),HZo=o("model_type"),UZo=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(":"),eer=l(),Jue=a("ul"),Bv=a("li"),Yue=a("strong"),oer=o("tapas"),rer=o(" \u2014 "),Wz=a("a"),ter=o("TapasForQuestionAnswering"),aer=o(" (TAPAS model)"),ner=l(),Iv=a("p"),ser=o("The model is set in evaluation mode by default using "),Kue=a("code"),ler=o("model.eval()"),ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),der=o("model.train()"),cer=l(),F(Nv.$$.fragment),UGe=l(),gd=a("h2"),qv=a("a"),e1e=a("span"),F(JL.$$.fragment),fer=l(),o1e=a("span"),mer=o("AutoModelForImageClassification"),JGe=l(),Do=a("div"),F(YL.$$.fragment),ger=l(),hd=a("p"),her=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qz=a("a"),per=o("from_pretrained()"),_er=o(" class method or the "),Hz=a("a"),uer=o("from_config()"),ber=o(` class
method.`),ver=l(),KL=a("p"),Fer=o("This class cannot be instantiated directly using "),r1e=a("code"),Ter=o("__init__()"),Mer=o(" (throws an error)."),Eer=l(),_t=a("div"),F(ZL.$$.fragment),Cer=l(),t1e=a("p"),wer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Aer=l(),pd=a("p"),Ler=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),yer=o("not"),xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),$er=o("from_pretrained()"),ker=o(" to load the model weights."),Ser=l(),F(jv.$$.fragment),Rer=l(),lo=a("div"),F(ey.$$.fragment),Per=l(),n1e=a("p"),Ber=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ier=l(),Va=a("p"),Ner=o("The model class to instantiate is selected based on the "),s1e=a("code"),qer=o("model_type"),jer=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),Oer=o("pretrained_model_name_or_path"),Ver=o(":"),Xer=l(),ue=a("ul"),Dv=a("li"),d1e=a("strong"),zer=o("beit"),Wer=o(" \u2014 "),Jz=a("a"),Qer=o("BeitForImageClassification"),Her=o(" (BEiT model)"),Uer=l(),Gv=a("li"),c1e=a("strong"),Jer=o("convnext"),Yer=o(" \u2014 "),Yz=a("a"),Ker=o("ConvNextForImageClassification"),Zer=o(" (ConvNeXT model)"),eor=l(),Ov=a("li"),f1e=a("strong"),oor=o("cvt"),ror=o(" \u2014 "),Kz=a("a"),tor=o("CvtForImageClassification"),aor=o(" (CvT model)"),nor=l(),Vv=a("li"),m1e=a("strong"),sor=o("data2vec-vision"),lor=o(" \u2014 "),Zz=a("a"),ior=o("Data2VecVisionForImageClassification"),dor=o(" (Data2VecVision model)"),cor=l(),Os=a("li"),g1e=a("strong"),mor=o("deit"),gor=o(" \u2014 "),eW=a("a"),hor=o("DeiTForImageClassification"),por=o(" or "),oW=a("a"),_or=o("DeiTForImageClassificationWithTeacher"),uor=o(" (DeiT model)"),bor=l(),Xv=a("li"),h1e=a("strong"),vor=o("imagegpt"),For=o(" \u2014 "),rW=a("a"),Tor=o("ImageGPTForImageClassification"),Mor=o(" (ImageGPT model)"),Eor=l(),Vs=a("li"),p1e=a("strong"),Cor=o("levit"),wor=o(" \u2014 "),tW=a("a"),Aor=o("LevitForImageClassification"),Lor=o(" or "),aW=a("a"),yor=o("LevitForImageClassificationWithTeacher"),xor=o(" (LeViT model)"),$or=l(),zv=a("li"),_1e=a("strong"),kor=o("mobilenet_v1"),Sor=o(" \u2014 "),nW=a("a"),Ror=o("MobileNetV1ForImageClassification"),Por=o(" (MobileNetV1 model)"),Bor=l(),ut=a("li"),u1e=a("strong"),Ior=o("perceiver"),Nor=o(" \u2014 "),sW=a("a"),qor=o("PerceiverForImageClassificationLearned"),jor=o(" or "),lW=a("a"),Dor=o("PerceiverForImageClassificationFourier"),Gor=o(" or "),iW=a("a"),Oor=o("PerceiverForImageClassificationConvProcessing"),Vor=o(" (Perceiver model)"),Xor=l(),Wv=a("li"),b1e=a("strong"),zor=o("poolformer"),Wor=o(" \u2014 "),dW=a("a"),Qor=o("PoolFormerForImageClassification"),Hor=o(" (PoolFormer model)"),Uor=l(),Qv=a("li"),v1e=a("strong"),Jor=o("regnet"),Yor=o(" \u2014 "),cW=a("a"),Kor=o("RegNetForImageClassification"),Zor=o(" (RegNet model)"),err=l(),Hv=a("li"),F1e=a("strong"),orr=o("resnet"),rrr=o(" \u2014 "),fW=a("a"),trr=o("ResNetForImageClassification"),arr=o(" (ResNet model)"),nrr=l(),Uv=a("li"),T1e=a("strong"),srr=o("segformer"),lrr=o(" \u2014 "),mW=a("a"),irr=o("SegformerForImageClassification"),drr=o(" (SegFormer model)"),crr=l(),Jv=a("li"),M1e=a("strong"),frr=o("swin"),mrr=o(" \u2014 "),gW=a("a"),grr=o("SwinForImageClassification"),hrr=o(" (Swin Transformer model)"),prr=l(),Yv=a("li"),E1e=a("strong"),_rr=o("van"),urr=o(" \u2014 "),hW=a("a"),brr=o("VanForImageClassification"),vrr=o(" (VAN model)"),Frr=l(),Kv=a("li"),C1e=a("strong"),Trr=o("vit"),Mrr=o(" \u2014 "),pW=a("a"),Err=o("ViTForImageClassification"),Crr=o(" (ViT model)"),wrr=l(),Zv=a("p"),Arr=o("The model is set in evaluation mode by default using "),w1e=a("code"),Lrr=o("model.eval()"),yrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=a("code"),xrr=o("model.train()"),$rr=l(),F(eF.$$.fragment),YGe=l(),_d=a("h2"),oF=a("a"),L1e=a("span"),F(oy.$$.fragment),krr=l(),y1e=a("span"),Srr=o("AutoModelForVision2Seq"),KGe=l(),Go=a("div"),F(ry.$$.fragment),Rrr=l(),ud=a("p"),Prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_W=a("a"),Brr=o("from_pretrained()"),Irr=o(" class method or the "),uW=a("a"),Nrr=o("from_config()"),qrr=o(` class
method.`),jrr=l(),ty=a("p"),Drr=o("This class cannot be instantiated directly using "),x1e=a("code"),Grr=o("__init__()"),Orr=o(" (throws an error)."),Vrr=l(),bt=a("div"),F(ay.$$.fragment),Xrr=l(),$1e=a("p"),zrr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wrr=l(),bd=a("p"),Qrr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),Hrr=o("not"),Urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),Jrr=o("from_pretrained()"),Yrr=o(" to load the model weights."),Krr=l(),F(rF.$$.fragment),Zrr=l(),io=a("div"),F(ny.$$.fragment),etr=l(),S1e=a("p"),otr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rtr=l(),Xa=a("p"),ttr=o("The model class to instantiate is selected based on the "),R1e=a("code"),atr=o("model_type"),ntr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),str=o("pretrained_model_name_or_path"),ltr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),itr=o("pretrained_model_name_or_path"),dtr=o(":"),ctr=l(),I1e=a("ul"),tF=a("li"),N1e=a("strong"),ftr=o("vision-encoder-decoder"),mtr=o(" \u2014 "),vW=a("a"),gtr=o("VisionEncoderDecoderModel"),htr=o(" (Vision Encoder decoder model)"),ptr=l(),aF=a("p"),_tr=o("The model is set in evaluation mode by default using "),q1e=a("code"),utr=o("model.eval()"),btr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=a("code"),vtr=o("model.train()"),Ftr=l(),F(nF.$$.fragment),ZGe=l(),vd=a("h2"),sF=a("a"),D1e=a("span"),F(sy.$$.fragment),Ttr=l(),G1e=a("span"),Mtr=o("AutoModelForVisualQuestionAnswering"),eOe=l(),Oo=a("div"),F(ly.$$.fragment),Etr=l(),Fd=a("p"),Ctr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),FW=a("a"),wtr=o("from_pretrained()"),Atr=o(" class method or the "),TW=a("a"),Ltr=o("from_config()"),ytr=o(` class
method.`),xtr=l(),iy=a("p"),$tr=o("This class cannot be instantiated directly using "),O1e=a("code"),ktr=o("__init__()"),Str=o(" (throws an error)."),Rtr=l(),vt=a("div"),F(dy.$$.fragment),Ptr=l(),V1e=a("p"),Btr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Itr=l(),Td=a("p"),Ntr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),qtr=o("not"),jtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),Dtr=o("from_pretrained()"),Gtr=o(" to load the model weights."),Otr=l(),F(lF.$$.fragment),Vtr=l(),co=a("div"),F(cy.$$.fragment),Xtr=l(),z1e=a("p"),ztr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Wtr=l(),za=a("p"),Qtr=o("The model class to instantiate is selected based on the "),W1e=a("code"),Htr=o("model_type"),Utr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),Jtr=o("pretrained_model_name_or_path"),Ytr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Ktr=o("pretrained_model_name_or_path"),Ztr=o(":"),ear=l(),U1e=a("ul"),iF=a("li"),J1e=a("strong"),oar=o("vilt"),rar=o(" \u2014 "),EW=a("a"),tar=o("ViltForQuestionAnswering"),aar=o(" (ViLT model)"),nar=l(),dF=a("p"),sar=o("The model is set in evaluation mode by default using "),Y1e=a("code"),lar=o("model.eval()"),iar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),dar=o("model.train()"),car=l(),F(cF.$$.fragment),oOe=l(),Md=a("h2"),fF=a("a"),Z1e=a("span"),F(fy.$$.fragment),far=l(),e7e=a("span"),mar=o("AutoModelForAudioClassification"),rOe=l(),Vo=a("div"),F(my.$$.fragment),gar=l(),Ed=a("p"),har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CW=a("a"),par=o("from_pretrained()"),_ar=o(" class method or the "),wW=a("a"),uar=o("from_config()"),bar=o(` class
method.`),Far=l(),gy=a("p"),Tar=o("This class cannot be instantiated directly using "),o7e=a("code"),Mar=o("__init__()"),Ear=o(" (throws an error)."),Car=l(),Ft=a("div"),F(hy.$$.fragment),war=l(),r7e=a("p"),Aar=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lar=l(),Cd=a("p"),yar=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),xar=o("not"),$ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),kar=o("from_pretrained()"),Sar=o(" to load the model weights."),Rar=l(),F(mF.$$.fragment),Par=l(),fo=a("div"),F(py.$$.fragment),Bar=l(),a7e=a("p"),Iar=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Nar=l(),Wa=a("p"),qar=o("The model class to instantiate is selected based on the "),n7e=a("code"),jar=o("model_type"),Dar=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),Gar=o("pretrained_model_name_or_path"),Oar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),Var=o("pretrained_model_name_or_path"),Xar=o(":"),zar=l(),Pe=a("ul"),gF=a("li"),i7e=a("strong"),War=o("data2vec-audio"),Qar=o(" \u2014 "),LW=a("a"),Har=o("Data2VecAudioForSequenceClassification"),Uar=o(" (Data2VecAudio model)"),Jar=l(),hF=a("li"),d7e=a("strong"),Yar=o("hubert"),Kar=o(" \u2014 "),yW=a("a"),Zar=o("HubertForSequenceClassification"),enr=o(" (Hubert model)"),onr=l(),pF=a("li"),c7e=a("strong"),rnr=o("sew"),tnr=o(" \u2014 "),xW=a("a"),anr=o("SEWForSequenceClassification"),nnr=o(" (SEW model)"),snr=l(),_F=a("li"),f7e=a("strong"),lnr=o("sew-d"),inr=o(" \u2014 "),$W=a("a"),dnr=o("SEWDForSequenceClassification"),cnr=o(" (SEW-D model)"),fnr=l(),uF=a("li"),m7e=a("strong"),mnr=o("unispeech"),gnr=o(" \u2014 "),kW=a("a"),hnr=o("UniSpeechForSequenceClassification"),pnr=o(" (UniSpeech model)"),_nr=l(),bF=a("li"),g7e=a("strong"),unr=o("unispeech-sat"),bnr=o(" \u2014 "),SW=a("a"),vnr=o("UniSpeechSatForSequenceClassification"),Fnr=o(" (UniSpeechSat model)"),Tnr=l(),vF=a("li"),h7e=a("strong"),Mnr=o("wav2vec2"),Enr=o(" \u2014 "),RW=a("a"),Cnr=o("Wav2Vec2ForSequenceClassification"),wnr=o(" (Wav2Vec2 model)"),Anr=l(),FF=a("li"),p7e=a("strong"),Lnr=o("wav2vec2-conformer"),ynr=o(" \u2014 "),PW=a("a"),xnr=o("Wav2Vec2ConformerForSequenceClassification"),$nr=o(" (Wav2Vec2-Conformer model)"),knr=l(),TF=a("li"),_7e=a("strong"),Snr=o("wavlm"),Rnr=o(" \u2014 "),BW=a("a"),Pnr=o("WavLMForSequenceClassification"),Bnr=o(" (WavLM model)"),Inr=l(),MF=a("p"),Nnr=o("The model is set in evaluation mode by default using "),u7e=a("code"),qnr=o("model.eval()"),jnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b7e=a("code"),Dnr=o("model.train()"),Gnr=l(),F(EF.$$.fragment),tOe=l(),wd=a("h2"),CF=a("a"),v7e=a("span"),F(_y.$$.fragment),Onr=l(),F7e=a("span"),Vnr=o("AutoModelForAudioFrameClassification"),aOe=l(),Xo=a("div"),F(uy.$$.fragment),Xnr=l(),Ad=a("p"),znr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IW=a("a"),Wnr=o("from_pretrained()"),Qnr=o(" class method or the "),NW=a("a"),Hnr=o("from_config()"),Unr=o(` class
method.`),Jnr=l(),by=a("p"),Ynr=o("This class cannot be instantiated directly using "),T7e=a("code"),Knr=o("__init__()"),Znr=o(" (throws an error)."),esr=l(),Tt=a("div"),F(vy.$$.fragment),osr=l(),M7e=a("p"),rsr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tsr=l(),Ld=a("p"),asr=o(`Note:
Loading a model from its configuration file does `),E7e=a("strong"),nsr=o("not"),ssr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),lsr=o("from_pretrained()"),isr=o(" to load the model weights."),dsr=l(),F(wF.$$.fragment),csr=l(),mo=a("div"),F(Fy.$$.fragment),fsr=l(),C7e=a("p"),msr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gsr=l(),Qa=a("p"),hsr=o("The model class to instantiate is selected based on the "),w7e=a("code"),psr=o("model_type"),_sr=o(` property of the config object (either
passed as an argument or loaded from `),A7e=a("code"),usr=o("pretrained_model_name_or_path"),bsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=a("code"),vsr=o("pretrained_model_name_or_path"),Fsr=o(":"),Tsr=l(),et=a("ul"),AF=a("li"),y7e=a("strong"),Msr=o("data2vec-audio"),Esr=o(" \u2014 "),jW=a("a"),Csr=o("Data2VecAudioForAudioFrameClassification"),wsr=o(" (Data2VecAudio model)"),Asr=l(),LF=a("li"),x7e=a("strong"),Lsr=o("unispeech-sat"),ysr=o(" \u2014 "),DW=a("a"),xsr=o("UniSpeechSatForAudioFrameClassification"),$sr=o(" (UniSpeechSat model)"),ksr=l(),yF=a("li"),$7e=a("strong"),Ssr=o("wav2vec2"),Rsr=o(" \u2014 "),GW=a("a"),Psr=o("Wav2Vec2ForAudioFrameClassification"),Bsr=o(" (Wav2Vec2 model)"),Isr=l(),xF=a("li"),k7e=a("strong"),Nsr=o("wav2vec2-conformer"),qsr=o(" \u2014 "),OW=a("a"),jsr=o("Wav2Vec2ConformerForAudioFrameClassification"),Dsr=o(" (Wav2Vec2-Conformer model)"),Gsr=l(),$F=a("li"),S7e=a("strong"),Osr=o("wavlm"),Vsr=o(" \u2014 "),VW=a("a"),Xsr=o("WavLMForAudioFrameClassification"),zsr=o(" (WavLM model)"),Wsr=l(),kF=a("p"),Qsr=o("The model is set in evaluation mode by default using "),R7e=a("code"),Hsr=o("model.eval()"),Usr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P7e=a("code"),Jsr=o("model.train()"),Ysr=l(),F(SF.$$.fragment),nOe=l(),yd=a("h2"),RF=a("a"),B7e=a("span"),F(Ty.$$.fragment),Ksr=l(),I7e=a("span"),Zsr=o("AutoModelForCTC"),sOe=l(),zo=a("div"),F(My.$$.fragment),elr=l(),xd=a("p"),olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XW=a("a"),rlr=o("from_pretrained()"),tlr=o(" class method or the "),zW=a("a"),alr=o("from_config()"),nlr=o(` class
method.`),slr=l(),Ey=a("p"),llr=o("This class cannot be instantiated directly using "),N7e=a("code"),ilr=o("__init__()"),dlr=o(" (throws an error)."),clr=l(),Mt=a("div"),F(Cy.$$.fragment),flr=l(),q7e=a("p"),mlr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),glr=l(),$d=a("p"),hlr=o(`Note:
Loading a model from its configuration file does `),j7e=a("strong"),plr=o("not"),_lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),ulr=o("from_pretrained()"),blr=o(" to load the model weights."),vlr=l(),F(PF.$$.fragment),Flr=l(),go=a("div"),F(wy.$$.fragment),Tlr=l(),D7e=a("p"),Mlr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Elr=l(),Ha=a("p"),Clr=o("The model class to instantiate is selected based on the "),G7e=a("code"),wlr=o("model_type"),Alr=o(` property of the config object (either
passed as an argument or loaded from `),O7e=a("code"),Llr=o("pretrained_model_name_or_path"),ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=a("code"),xlr=o("pretrained_model_name_or_path"),$lr=o(":"),klr=l(),Le=a("ul"),BF=a("li"),X7e=a("strong"),Slr=o("data2vec-audio"),Rlr=o(" \u2014 "),QW=a("a"),Plr=o("Data2VecAudioForCTC"),Blr=o(" (Data2VecAudio model)"),Ilr=l(),IF=a("li"),z7e=a("strong"),Nlr=o("hubert"),qlr=o(" \u2014 "),HW=a("a"),jlr=o("HubertForCTC"),Dlr=o(" (Hubert model)"),Glr=l(),NF=a("li"),W7e=a("strong"),Olr=o("mctct"),Vlr=o(" \u2014 "),UW=a("a"),Xlr=o("MCTCTForCTC"),zlr=o(" (M-CTC-T model)"),Wlr=l(),qF=a("li"),Q7e=a("strong"),Qlr=o("sew"),Hlr=o(" \u2014 "),JW=a("a"),Ulr=o("SEWForCTC"),Jlr=o(" (SEW model)"),Ylr=l(),jF=a("li"),H7e=a("strong"),Klr=o("sew-d"),Zlr=o(" \u2014 "),YW=a("a"),eir=o("SEWDForCTC"),oir=o(" (SEW-D model)"),rir=l(),DF=a("li"),U7e=a("strong"),tir=o("unispeech"),air=o(" \u2014 "),KW=a("a"),nir=o("UniSpeechForCTC"),sir=o(" (UniSpeech model)"),lir=l(),GF=a("li"),J7e=a("strong"),iir=o("unispeech-sat"),dir=o(" \u2014 "),ZW=a("a"),cir=o("UniSpeechSatForCTC"),fir=o(" (UniSpeechSat model)"),mir=l(),OF=a("li"),Y7e=a("strong"),gir=o("wav2vec2"),hir=o(" \u2014 "),eQ=a("a"),pir=o("Wav2Vec2ForCTC"),_ir=o(" (Wav2Vec2 model)"),uir=l(),VF=a("li"),K7e=a("strong"),bir=o("wav2vec2-conformer"),vir=o(" \u2014 "),oQ=a("a"),Fir=o("Wav2Vec2ConformerForCTC"),Tir=o(" (Wav2Vec2-Conformer model)"),Mir=l(),XF=a("li"),Z7e=a("strong"),Eir=o("wavlm"),Cir=o(" \u2014 "),rQ=a("a"),wir=o("WavLMForCTC"),Air=o(" (WavLM model)"),Lir=l(),zF=a("p"),yir=o("The model is set in evaluation mode by default using "),e9e=a("code"),xir=o("model.eval()"),$ir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o9e=a("code"),kir=o("model.train()"),Sir=l(),F(WF.$$.fragment),lOe=l(),kd=a("h2"),QF=a("a"),r9e=a("span"),F(Ay.$$.fragment),Rir=l(),t9e=a("span"),Pir=o("AutoModelForSpeechSeq2Seq"),iOe=l(),Wo=a("div"),F(Ly.$$.fragment),Bir=l(),Sd=a("p"),Iir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tQ=a("a"),Nir=o("from_pretrained()"),qir=o(" class method or the "),aQ=a("a"),jir=o("from_config()"),Dir=o(` class
method.`),Gir=l(),yy=a("p"),Oir=o("This class cannot be instantiated directly using "),a9e=a("code"),Vir=o("__init__()"),Xir=o(" (throws an error)."),zir=l(),Et=a("div"),F(xy.$$.fragment),Wir=l(),n9e=a("p"),Qir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hir=l(),Rd=a("p"),Uir=o(`Note:
Loading a model from its configuration file does `),s9e=a("strong"),Jir=o("not"),Yir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=a("a"),Kir=o("from_pretrained()"),Zir=o(" to load the model weights."),edr=l(),F(HF.$$.fragment),odr=l(),ho=a("div"),F($y.$$.fragment),rdr=l(),l9e=a("p"),tdr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),adr=l(),Ua=a("p"),ndr=o("The model class to instantiate is selected based on the "),i9e=a("code"),sdr=o("model_type"),ldr=o(` property of the config object (either
passed as an argument or loaded from `),d9e=a("code"),idr=o("pretrained_model_name_or_path"),ddr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=a("code"),cdr=o("pretrained_model_name_or_path"),fdr=o(":"),mdr=l(),ky=a("ul"),UF=a("li"),f9e=a("strong"),gdr=o("speech-encoder-decoder"),hdr=o(" \u2014 "),sQ=a("a"),pdr=o("SpeechEncoderDecoderModel"),_dr=o(" (Speech Encoder decoder model)"),udr=l(),JF=a("li"),m9e=a("strong"),bdr=o("speech_to_text"),vdr=o(" \u2014 "),lQ=a("a"),Fdr=o("Speech2TextForConditionalGeneration"),Tdr=o(" (Speech2Text model)"),Mdr=l(),YF=a("p"),Edr=o("The model is set in evaluation mode by default using "),g9e=a("code"),Cdr=o("model.eval()"),wdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h9e=a("code"),Adr=o("model.train()"),Ldr=l(),F(KF.$$.fragment),dOe=l(),Pd=a("h2"),ZF=a("a"),p9e=a("span"),F(Sy.$$.fragment),ydr=l(),_9e=a("span"),xdr=o("AutoModelForAudioXVector"),cOe=l(),Qo=a("div"),F(Ry.$$.fragment),$dr=l(),Bd=a("p"),kdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),iQ=a("a"),Sdr=o("from_pretrained()"),Rdr=o(" class method or the "),dQ=a("a"),Pdr=o("from_config()"),Bdr=o(` class
method.`),Idr=l(),Py=a("p"),Ndr=o("This class cannot be instantiated directly using "),u9e=a("code"),qdr=o("__init__()"),jdr=o(" (throws an error)."),Ddr=l(),Ct=a("div"),F(By.$$.fragment),Gdr=l(),b9e=a("p"),Odr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Vdr=l(),Id=a("p"),Xdr=o(`Note:
Loading a model from its configuration file does `),v9e=a("strong"),zdr=o("not"),Wdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Qdr=o("from_pretrained()"),Hdr=o(" to load the model weights."),Udr=l(),F(eT.$$.fragment),Jdr=l(),po=a("div"),F(Iy.$$.fragment),Ydr=l(),F9e=a("p"),Kdr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zdr=l(),Ja=a("p"),ecr=o("The model class to instantiate is selected based on the "),T9e=a("code"),ocr=o("model_type"),rcr=o(` property of the config object (either
passed as an argument or loaded from `),M9e=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(":"),lcr=l(),ot=a("ul"),oT=a("li"),C9e=a("strong"),icr=o("data2vec-audio"),dcr=o(" \u2014 "),fQ=a("a"),ccr=o("Data2VecAudioForXVector"),fcr=o(" (Data2VecAudio model)"),mcr=l(),rT=a("li"),w9e=a("strong"),gcr=o("unispeech-sat"),hcr=o(" \u2014 "),mQ=a("a"),pcr=o("UniSpeechSatForXVector"),_cr=o(" (UniSpeechSat model)"),ucr=l(),tT=a("li"),A9e=a("strong"),bcr=o("wav2vec2"),vcr=o(" \u2014 "),gQ=a("a"),Fcr=o("Wav2Vec2ForXVector"),Tcr=o(" (Wav2Vec2 model)"),Mcr=l(),aT=a("li"),L9e=a("strong"),Ecr=o("wav2vec2-conformer"),Ccr=o(" \u2014 "),hQ=a("a"),wcr=o("Wav2Vec2ConformerForXVector"),Acr=o(" (Wav2Vec2-Conformer model)"),Lcr=l(),nT=a("li"),y9e=a("strong"),ycr=o("wavlm"),xcr=o(" \u2014 "),pQ=a("a"),$cr=o("WavLMForXVector"),kcr=o(" (WavLM model)"),Scr=l(),sT=a("p"),Rcr=o("The model is set in evaluation mode by default using "),x9e=a("code"),Pcr=o("model.eval()"),Bcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$9e=a("code"),Icr=o("model.train()"),Ncr=l(),F(lT.$$.fragment),fOe=l(),Nd=a("h2"),iT=a("a"),k9e=a("span"),F(Ny.$$.fragment),qcr=l(),S9e=a("span"),jcr=o("AutoModelForMaskedImageModeling"),mOe=l(),Ho=a("div"),F(qy.$$.fragment),Dcr=l(),qd=a("p"),Gcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_Q=a("a"),Ocr=o("from_pretrained()"),Vcr=o(" class method or the "),uQ=a("a"),Xcr=o("from_config()"),zcr=o(` class
method.`),Wcr=l(),jy=a("p"),Qcr=o("This class cannot be instantiated directly using "),R9e=a("code"),Hcr=o("__init__()"),Ucr=o(" (throws an error)."),Jcr=l(),wt=a("div"),F(Dy.$$.fragment),Ycr=l(),P9e=a("p"),Kcr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zcr=l(),jd=a("p"),efr=o(`Note:
Loading a model from its configuration file does `),B9e=a("strong"),ofr=o("not"),rfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),tfr=o("from_pretrained()"),afr=o(" to load the model weights."),nfr=l(),F(dT.$$.fragment),sfr=l(),_o=a("div"),F(Gy.$$.fragment),lfr=l(),I9e=a("p"),ifr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dfr=l(),Ya=a("p"),cfr=o("The model class to instantiate is selected based on the "),N9e=a("code"),ffr=o("model_type"),mfr=o(` property of the config object (either
passed as an argument or loaded from `),q9e=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=a("code"),pfr=o("pretrained_model_name_or_path"),_fr=o(":"),ufr=l(),Dd=a("ul"),cT=a("li"),D9e=a("strong"),bfr=o("deit"),vfr=o(" \u2014 "),vQ=a("a"),Ffr=o("DeiTForMaskedImageModeling"),Tfr=o(" (DeiT model)"),Mfr=l(),fT=a("li"),G9e=a("strong"),Efr=o("swin"),Cfr=o(" \u2014 "),FQ=a("a"),wfr=o("SwinForMaskedImageModeling"),Afr=o(" (Swin Transformer model)"),Lfr=l(),mT=a("li"),O9e=a("strong"),yfr=o("vit"),xfr=o(" \u2014 "),TQ=a("a"),$fr=o("ViTForMaskedImageModeling"),kfr=o(" (ViT model)"),Sfr=l(),gT=a("p"),Rfr=o("The model is set in evaluation mode by default using "),V9e=a("code"),Pfr=o("model.eval()"),Bfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X9e=a("code"),Ifr=o("model.train()"),Nfr=l(),F(hT.$$.fragment),gOe=l(),Gd=a("h2"),pT=a("a"),z9e=a("span"),F(Oy.$$.fragment),qfr=l(),W9e=a("span"),jfr=o("AutoModelForObjectDetection"),hOe=l(),Uo=a("div"),F(Vy.$$.fragment),Dfr=l(),Od=a("p"),Gfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MQ=a("a"),Ofr=o("from_pretrained()"),Vfr=o(" class method or the "),EQ=a("a"),Xfr=o("from_config()"),zfr=o(` class
method.`),Wfr=l(),Xy=a("p"),Qfr=o("This class cannot be instantiated directly using "),Q9e=a("code"),Hfr=o("__init__()"),Ufr=o(" (throws an error)."),Jfr=l(),At=a("div"),F(zy.$$.fragment),Yfr=l(),H9e=a("p"),Kfr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Zfr=l(),Vd=a("p"),emr=o(`Note:
Loading a model from its configuration file does `),U9e=a("strong"),omr=o("not"),rmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),tmr=o("from_pretrained()"),amr=o(" to load the model weights."),nmr=l(),F(_T.$$.fragment),smr=l(),uo=a("div"),F(Wy.$$.fragment),lmr=l(),J9e=a("p"),imr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dmr=l(),Ka=a("p"),cmr=o("The model class to instantiate is selected based on the "),Y9e=a("code"),fmr=o("model_type"),mmr=o(` property of the config object (either
passed as an argument or loaded from `),K9e=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z9e=a("code"),pmr=o("pretrained_model_name_or_path"),_mr=o(":"),umr=l(),Qy=a("ul"),uT=a("li"),ebe=a("strong"),bmr=o("detr"),vmr=o(" \u2014 "),wQ=a("a"),Fmr=o("DetrForObjectDetection"),Tmr=o(" (DETR model)"),Mmr=l(),bT=a("li"),obe=a("strong"),Emr=o("yolos"),Cmr=o(" \u2014 "),AQ=a("a"),wmr=o("YolosForObjectDetection"),Amr=o(" (YOLOS model)"),Lmr=l(),vT=a("p"),ymr=o("The model is set in evaluation mode by default using "),rbe=a("code"),xmr=o("model.eval()"),$mr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),kmr=o("model.train()"),Smr=l(),F(FT.$$.fragment),pOe=l(),Xd=a("h2"),TT=a("a"),abe=a("span"),F(Hy.$$.fragment),Rmr=l(),nbe=a("span"),Pmr=o("AutoModelForImageSegmentation"),_Oe=l(),Jo=a("div"),F(Uy.$$.fragment),Bmr=l(),zd=a("p"),Imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LQ=a("a"),Nmr=o("from_pretrained()"),qmr=o(" class method or the "),yQ=a("a"),jmr=o("from_config()"),Dmr=o(` class
method.`),Gmr=l(),Jy=a("p"),Omr=o("This class cannot be instantiated directly using "),sbe=a("code"),Vmr=o("__init__()"),Xmr=o(" (throws an error)."),zmr=l(),Lt=a("div"),F(Yy.$$.fragment),Wmr=l(),lbe=a("p"),Qmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Hmr=l(),Wd=a("p"),Umr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),Jmr=o("not"),Ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Kmr=o("from_pretrained()"),Zmr=o(" to load the model weights."),egr=l(),F(MT.$$.fragment),ogr=l(),bo=a("div"),F(Ky.$$.fragment),rgr=l(),dbe=a("p"),tgr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),agr=l(),Za=a("p"),ngr=o("The model class to instantiate is selected based on the "),cbe=a("code"),sgr=o("model_type"),lgr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),igr=o("pretrained_model_name_or_path"),dgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),cgr=o("pretrained_model_name_or_path"),fgr=o(":"),mgr=l(),gbe=a("ul"),ET=a("li"),hbe=a("strong"),ggr=o("detr"),hgr=o(" \u2014 "),$Q=a("a"),pgr=o("DetrForSegmentation"),_gr=o(" (DETR model)"),ugr=l(),CT=a("p"),bgr=o("The model is set in evaluation mode by default using "),pbe=a("code"),vgr=o("model.eval()"),Fgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),Tgr=o("model.train()"),Mgr=l(),F(wT.$$.fragment),uOe=l(),Qd=a("h2"),AT=a("a"),ube=a("span"),F(Zy.$$.fragment),Egr=l(),bbe=a("span"),Cgr=o("AutoModelForSemanticSegmentation"),bOe=l(),Yo=a("div"),F(e8.$$.fragment),wgr=l(),Hd=a("p"),Agr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kQ=a("a"),Lgr=o("from_pretrained()"),ygr=o(" class method or the "),SQ=a("a"),xgr=o("from_config()"),$gr=o(` class
method.`),kgr=l(),o8=a("p"),Sgr=o("This class cannot be instantiated directly using "),vbe=a("code"),Rgr=o("__init__()"),Pgr=o(" (throws an error)."),Bgr=l(),yt=a("div"),F(r8.$$.fragment),Igr=l(),Fbe=a("p"),Ngr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qgr=l(),Ud=a("p"),jgr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),Dgr=o("not"),Ggr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Ogr=o("from_pretrained()"),Vgr=o(" to load the model weights."),Xgr=l(),F(LT.$$.fragment),zgr=l(),vo=a("div"),F(t8.$$.fragment),Wgr=l(),Mbe=a("p"),Qgr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hgr=l(),en=a("p"),Ugr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),Jgr=o("model_type"),Ygr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),ehr=o("pretrained_model_name_or_path"),ohr=o(":"),rhr=l(),on=a("ul"),yT=a("li"),Abe=a("strong"),thr=o("beit"),ahr=o(" \u2014 "),PQ=a("a"),nhr=o("BeitForSemanticSegmentation"),shr=o(" (BEiT model)"),lhr=l(),xT=a("li"),Lbe=a("strong"),ihr=o("data2vec-vision"),dhr=o(" \u2014 "),BQ=a("a"),chr=o("Data2VecVisionForSemanticSegmentation"),fhr=o(" (Data2VecVision model)"),mhr=l(),$T=a("li"),ybe=a("strong"),ghr=o("dpt"),hhr=o(" \u2014 "),IQ=a("a"),phr=o("DPTForSemanticSegmentation"),_hr=o(" (DPT model)"),uhr=l(),kT=a("li"),xbe=a("strong"),bhr=o("segformer"),vhr=o(" \u2014 "),NQ=a("a"),Fhr=o("SegformerForSemanticSegmentation"),Thr=o(" (SegFormer model)"),Mhr=l(),ST=a("p"),Ehr=o("The model is set in evaluation mode by default using "),$be=a("code"),Chr=o("model.eval()"),whr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=a("code"),Ahr=o("model.train()"),Lhr=l(),F(RT.$$.fragment),vOe=l(),Jd=a("h2"),PT=a("a"),Sbe=a("span"),F(a8.$$.fragment),yhr=l(),Rbe=a("span"),xhr=o("AutoModelForInstanceSegmentation"),FOe=l(),Ko=a("div"),F(n8.$$.fragment),$hr=l(),Yd=a("p"),khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qQ=a("a"),Shr=o("from_pretrained()"),Rhr=o(" class method or the "),jQ=a("a"),Phr=o("from_config()"),Bhr=o(` class
method.`),Ihr=l(),s8=a("p"),Nhr=o("This class cannot be instantiated directly using "),Pbe=a("code"),qhr=o("__init__()"),jhr=o(" (throws an error)."),Dhr=l(),xt=a("div"),F(l8.$$.fragment),Ghr=l(),Bbe=a("p"),Ohr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vhr=l(),Kd=a("p"),Xhr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),zhr=o("not"),Whr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),Qhr=o("from_pretrained()"),Hhr=o(" to load the model weights."),Uhr=l(),F(BT.$$.fragment),Jhr=l(),Fo=a("div"),F(i8.$$.fragment),Yhr=l(),Nbe=a("p"),Khr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zhr=l(),rn=a("p"),epr=o("The model class to instantiate is selected based on the "),qbe=a("code"),opr=o("model_type"),rpr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),npr=o("pretrained_model_name_or_path"),spr=o(":"),lpr=l(),Gbe=a("ul"),IT=a("li"),Obe=a("strong"),ipr=o("maskformer"),dpr=o(" \u2014 "),GQ=a("a"),cpr=o("MaskFormerForInstanceSegmentation"),fpr=o(" (MaskFormer model)"),mpr=l(),NT=a("p"),gpr=o("The model is set in evaluation mode by default using "),Vbe=a("code"),hpr=o("model.eval()"),ppr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=a("code"),_pr=o("model.train()"),upr=l(),F(qT.$$.fragment),TOe=l(),Zd=a("h2"),jT=a("a"),zbe=a("span"),F(d8.$$.fragment),bpr=l(),Wbe=a("span"),vpr=o("TFAutoModel"),MOe=l(),Zo=a("div"),F(c8.$$.fragment),Fpr=l(),ec=a("p"),Tpr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=a("a"),Mpr=o("from_pretrained()"),Epr=o(" class method or the "),VQ=a("a"),Cpr=o("from_config()"),wpr=o(` class
method.`),Apr=l(),f8=a("p"),Lpr=o("This class cannot be instantiated directly using "),Qbe=a("code"),ypr=o("__init__()"),xpr=o(" (throws an error)."),$pr=l(),$t=a("div"),F(m8.$$.fragment),kpr=l(),Hbe=a("p"),Spr=o("Instantiates one of the base model classes of the library from a configuration."),Rpr=l(),oc=a("p"),Ppr=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),Bpr=o("not"),Ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),Npr=o("from_pretrained()"),qpr=o(" to load the model weights."),jpr=l(),F(DT.$$.fragment),Dpr=l(),Lr=a("div"),F(g8.$$.fragment),Gpr=l(),Jbe=a("p"),Opr=o("Instantiate one of the base model classes of the library from a pretrained model."),Vpr=l(),tn=a("p"),Xpr=o("The model class to instantiate is selected based on the "),Ybe=a("code"),zpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),Qpr=o("pretrained_model_name_or_path"),Hpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(":"),Ypr=l(),q=a("ul"),GT=a("li"),e2e=a("strong"),Kpr=o("albert"),Zpr=o(" \u2014 "),zQ=a("a"),e_r=o("TFAlbertModel"),o_r=o(" (ALBERT model)"),r_r=l(),OT=a("li"),o2e=a("strong"),t_r=o("bart"),a_r=o(" \u2014 "),WQ=a("a"),n_r=o("TFBartModel"),s_r=o(" (BART model)"),l_r=l(),VT=a("li"),r2e=a("strong"),i_r=o("bert"),d_r=o(" \u2014 "),QQ=a("a"),c_r=o("TFBertModel"),f_r=o(" (BERT model)"),m_r=l(),XT=a("li"),t2e=a("strong"),g_r=o("blenderbot"),h_r=o(" \u2014 "),HQ=a("a"),p_r=o("TFBlenderbotModel"),__r=o(" (Blenderbot model)"),u_r=l(),zT=a("li"),a2e=a("strong"),b_r=o("blenderbot-small"),v_r=o(" \u2014 "),UQ=a("a"),F_r=o("TFBlenderbotSmallModel"),T_r=o(" (BlenderbotSmall model)"),M_r=l(),WT=a("li"),n2e=a("strong"),E_r=o("camembert"),C_r=o(" \u2014 "),JQ=a("a"),w_r=o("TFCamembertModel"),A_r=o(" (CamemBERT model)"),L_r=l(),QT=a("li"),s2e=a("strong"),y_r=o("clip"),x_r=o(" \u2014 "),YQ=a("a"),$_r=o("TFCLIPModel"),k_r=o(" (CLIP model)"),S_r=l(),HT=a("li"),l2e=a("strong"),R_r=o("convbert"),P_r=o(" \u2014 "),KQ=a("a"),B_r=o("TFConvBertModel"),I_r=o(" (ConvBERT model)"),N_r=l(),UT=a("li"),i2e=a("strong"),q_r=o("convnext"),j_r=o(" \u2014 "),ZQ=a("a"),D_r=o("TFConvNextModel"),G_r=o(" (ConvNeXT model)"),O_r=l(),JT=a("li"),d2e=a("strong"),V_r=o("ctrl"),X_r=o(" \u2014 "),eH=a("a"),z_r=o("TFCTRLModel"),W_r=o(" (CTRL model)"),Q_r=l(),YT=a("li"),c2e=a("strong"),H_r=o("data2vec-vision"),U_r=o(" \u2014 "),oH=a("a"),J_r=o("TFData2VecVisionModel"),Y_r=o(" (Data2VecVision model)"),K_r=l(),KT=a("li"),f2e=a("strong"),Z_r=o("deberta"),eur=o(" \u2014 "),rH=a("a"),our=o("TFDebertaModel"),rur=o(" (DeBERTa model)"),tur=l(),ZT=a("li"),m2e=a("strong"),aur=o("deberta-v2"),nur=o(" \u2014 "),tH=a("a"),sur=o("TFDebertaV2Model"),lur=o(" (DeBERTa-v2 model)"),iur=l(),eM=a("li"),g2e=a("strong"),dur=o("distilbert"),cur=o(" \u2014 "),aH=a("a"),fur=o("TFDistilBertModel"),mur=o(" (DistilBERT model)"),gur=l(),oM=a("li"),h2e=a("strong"),hur=o("dpr"),pur=o(" \u2014 "),nH=a("a"),_ur=o("TFDPRQuestionEncoder"),uur=o(" (DPR model)"),bur=l(),rM=a("li"),p2e=a("strong"),vur=o("electra"),Fur=o(" \u2014 "),sH=a("a"),Tur=o("TFElectraModel"),Mur=o(" (ELECTRA model)"),Eur=l(),tM=a("li"),_2e=a("strong"),Cur=o("flaubert"),wur=o(" \u2014 "),lH=a("a"),Aur=o("TFFlaubertModel"),Lur=o(" (FlauBERT model)"),yur=l(),Xs=a("li"),u2e=a("strong"),xur=o("funnel"),$ur=o(" \u2014 "),iH=a("a"),kur=o("TFFunnelModel"),Sur=o(" or "),dH=a("a"),Rur=o("TFFunnelBaseModel"),Pur=o(" (Funnel Transformer model)"),Bur=l(),aM=a("li"),b2e=a("strong"),Iur=o("gpt2"),Nur=o(" \u2014 "),cH=a("a"),qur=o("TFGPT2Model"),jur=o(" (OpenAI GPT-2 model)"),Dur=l(),nM=a("li"),v2e=a("strong"),Gur=o("gptj"),Our=o(" \u2014 "),fH=a("a"),Vur=o("TFGPTJModel"),Xur=o(" (GPT-J model)"),zur=l(),sM=a("li"),F2e=a("strong"),Wur=o("hubert"),Qur=o(" \u2014 "),mH=a("a"),Hur=o("TFHubertModel"),Uur=o(" (Hubert model)"),Jur=l(),lM=a("li"),T2e=a("strong"),Yur=o("layoutlm"),Kur=o(" \u2014 "),gH=a("a"),Zur=o("TFLayoutLMModel"),e1r=o(" (LayoutLM model)"),o1r=l(),iM=a("li"),M2e=a("strong"),r1r=o("led"),t1r=o(" \u2014 "),hH=a("a"),a1r=o("TFLEDModel"),n1r=o(" (LED model)"),s1r=l(),dM=a("li"),E2e=a("strong"),l1r=o("longformer"),i1r=o(" \u2014 "),pH=a("a"),d1r=o("TFLongformerModel"),c1r=o(" (Longformer model)"),f1r=l(),cM=a("li"),C2e=a("strong"),m1r=o("lxmert"),g1r=o(" \u2014 "),_H=a("a"),h1r=o("TFLxmertModel"),p1r=o(" (LXMERT model)"),_1r=l(),fM=a("li"),w2e=a("strong"),u1r=o("marian"),b1r=o(" \u2014 "),uH=a("a"),v1r=o("TFMarianModel"),F1r=o(" (Marian model)"),T1r=l(),mM=a("li"),A2e=a("strong"),M1r=o("mbart"),E1r=o(" \u2014 "),bH=a("a"),C1r=o("TFMBartModel"),w1r=o(" (mBART model)"),A1r=l(),gM=a("li"),L2e=a("strong"),L1r=o("mobilebert"),y1r=o(" \u2014 "),vH=a("a"),x1r=o("TFMobileBertModel"),$1r=o(" (MobileBERT model)"),k1r=l(),hM=a("li"),y2e=a("strong"),S1r=o("mpnet"),R1r=o(" \u2014 "),FH=a("a"),P1r=o("TFMPNetModel"),B1r=o(" (MPNet model)"),I1r=l(),pM=a("li"),x2e=a("strong"),N1r=o("mt5"),q1r=o(" \u2014 "),TH=a("a"),j1r=o("TFMT5Model"),D1r=o(" (MT5 model)"),G1r=l(),_M=a("li"),$2e=a("strong"),O1r=o("openai-gpt"),V1r=o(" \u2014 "),MH=a("a"),X1r=o("TFOpenAIGPTModel"),z1r=o(" (OpenAI GPT model)"),W1r=l(),uM=a("li"),k2e=a("strong"),Q1r=o("opt"),H1r=o(" \u2014 "),EH=a("a"),U1r=o("TFOPTModel"),J1r=o(" (OPT model)"),Y1r=l(),bM=a("li"),S2e=a("strong"),K1r=o("pegasus"),Z1r=o(" \u2014 "),CH=a("a"),e7r=o("TFPegasusModel"),o7r=o(" (Pegasus model)"),r7r=l(),vM=a("li"),R2e=a("strong"),t7r=o("rembert"),a7r=o(" \u2014 "),wH=a("a"),n7r=o("TFRemBertModel"),s7r=o(" (RemBERT model)"),l7r=l(),FM=a("li"),P2e=a("strong"),i7r=o("roberta"),d7r=o(" \u2014 "),AH=a("a"),c7r=o("TFRobertaModel"),f7r=o(" (RoBERTa model)"),m7r=l(),TM=a("li"),B2e=a("strong"),g7r=o("roformer"),h7r=o(" \u2014 "),LH=a("a"),p7r=o("TFRoFormerModel"),_7r=o(" (RoFormer model)"),u7r=l(),MM=a("li"),I2e=a("strong"),b7r=o("speech_to_text"),v7r=o(" \u2014 "),yH=a("a"),F7r=o("TFSpeech2TextModel"),T7r=o(" (Speech2Text model)"),M7r=l(),EM=a("li"),N2e=a("strong"),E7r=o("swin"),C7r=o(" \u2014 "),xH=a("a"),w7r=o("TFSwinModel"),A7r=o(" (Swin Transformer model)"),L7r=l(),CM=a("li"),q2e=a("strong"),y7r=o("t5"),x7r=o(" \u2014 "),$H=a("a"),$7r=o("TFT5Model"),k7r=o(" (T5 model)"),S7r=l(),wM=a("li"),j2e=a("strong"),R7r=o("tapas"),P7r=o(" \u2014 "),kH=a("a"),B7r=o("TFTapasModel"),I7r=o(" (TAPAS model)"),N7r=l(),AM=a("li"),D2e=a("strong"),q7r=o("transfo-xl"),j7r=o(" \u2014 "),SH=a("a"),D7r=o("TFTransfoXLModel"),G7r=o(" (Transformer-XL model)"),O7r=l(),LM=a("li"),G2e=a("strong"),V7r=o("vit"),X7r=o(" \u2014 "),RH=a("a"),z7r=o("TFViTModel"),W7r=o(" (ViT model)"),Q7r=l(),yM=a("li"),O2e=a("strong"),H7r=o("vit_mae"),U7r=o(" \u2014 "),PH=a("a"),J7r=o("TFViTMAEModel"),Y7r=o(" (ViTMAE model)"),K7r=l(),xM=a("li"),V2e=a("strong"),Z7r=o("wav2vec2"),e9r=o(" \u2014 "),BH=a("a"),o9r=o("TFWav2Vec2Model"),r9r=o(" (Wav2Vec2 model)"),t9r=l(),$M=a("li"),X2e=a("strong"),a9r=o("xlm"),n9r=o(" \u2014 "),IH=a("a"),s9r=o("TFXLMModel"),l9r=o(" (XLM model)"),i9r=l(),kM=a("li"),z2e=a("strong"),d9r=o("xlm-roberta"),c9r=o(" \u2014 "),NH=a("a"),f9r=o("TFXLMRobertaModel"),m9r=o(" (XLM-RoBERTa model)"),g9r=l(),SM=a("li"),W2e=a("strong"),h9r=o("xlnet"),p9r=o(" \u2014 "),qH=a("a"),_9r=o("TFXLNetModel"),u9r=o(" (XLNet model)"),b9r=l(),F(RM.$$.fragment),EOe=l(),rc=a("h2"),PM=a("a"),Q2e=a("span"),F(h8.$$.fragment),v9r=l(),H2e=a("span"),F9r=o("TFAutoModelForPreTraining"),COe=l(),er=a("div"),F(p8.$$.fragment),T9r=l(),tc=a("p"),M9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jH=a("a"),E9r=o("from_pretrained()"),C9r=o(" class method or the "),DH=a("a"),w9r=o("from_config()"),A9r=o(` class
method.`),L9r=l(),_8=a("p"),y9r=o("This class cannot be instantiated directly using "),U2e=a("code"),x9r=o("__init__()"),$9r=o(" (throws an error)."),k9r=l(),kt=a("div"),F(u8.$$.fragment),S9r=l(),J2e=a("p"),R9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P9r=l(),ac=a("p"),B9r=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),I9r=o("not"),N9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),q9r=o("from_pretrained()"),j9r=o(" to load the model weights."),D9r=l(),F(BM.$$.fragment),G9r=l(),yr=a("div"),F(b8.$$.fragment),O9r=l(),K2e=a("p"),V9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X9r=l(),an=a("p"),z9r=o("The model class to instantiate is selected based on the "),Z2e=a("code"),W9r=o("model_type"),Q9r=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),H9r=o("pretrained_model_name_or_path"),U9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(":"),K9r=l(),se=a("ul"),IM=a("li"),rve=a("strong"),Z9r=o("albert"),ebr=o(" \u2014 "),OH=a("a"),obr=o("TFAlbertForPreTraining"),rbr=o(" (ALBERT model)"),tbr=l(),NM=a("li"),tve=a("strong"),abr=o("bart"),nbr=o(" \u2014 "),VH=a("a"),sbr=o("TFBartForConditionalGeneration"),lbr=o(" (BART model)"),ibr=l(),qM=a("li"),ave=a("strong"),dbr=o("bert"),cbr=o(" \u2014 "),XH=a("a"),fbr=o("TFBertForPreTraining"),mbr=o(" (BERT model)"),gbr=l(),jM=a("li"),nve=a("strong"),hbr=o("camembert"),pbr=o(" \u2014 "),zH=a("a"),_br=o("TFCamembertForMaskedLM"),ubr=o(" (CamemBERT model)"),bbr=l(),DM=a("li"),sve=a("strong"),vbr=o("ctrl"),Fbr=o(" \u2014 "),WH=a("a"),Tbr=o("TFCTRLLMHeadModel"),Mbr=o(" (CTRL model)"),Ebr=l(),GM=a("li"),lve=a("strong"),Cbr=o("distilbert"),wbr=o(" \u2014 "),QH=a("a"),Abr=o("TFDistilBertForMaskedLM"),Lbr=o(" (DistilBERT model)"),ybr=l(),OM=a("li"),ive=a("strong"),xbr=o("electra"),$br=o(" \u2014 "),HH=a("a"),kbr=o("TFElectraForPreTraining"),Sbr=o(" (ELECTRA model)"),Rbr=l(),VM=a("li"),dve=a("strong"),Pbr=o("flaubert"),Bbr=o(" \u2014 "),UH=a("a"),Ibr=o("TFFlaubertWithLMHeadModel"),Nbr=o(" (FlauBERT model)"),qbr=l(),XM=a("li"),cve=a("strong"),jbr=o("funnel"),Dbr=o(" \u2014 "),JH=a("a"),Gbr=o("TFFunnelForPreTraining"),Obr=o(" (Funnel Transformer model)"),Vbr=l(),zM=a("li"),fve=a("strong"),Xbr=o("gpt2"),zbr=o(" \u2014 "),YH=a("a"),Wbr=o("TFGPT2LMHeadModel"),Qbr=o(" (OpenAI GPT-2 model)"),Hbr=l(),WM=a("li"),mve=a("strong"),Ubr=o("layoutlm"),Jbr=o(" \u2014 "),KH=a("a"),Ybr=o("TFLayoutLMForMaskedLM"),Kbr=o(" (LayoutLM model)"),Zbr=l(),QM=a("li"),gve=a("strong"),e2r=o("lxmert"),o2r=o(" \u2014 "),ZH=a("a"),r2r=o("TFLxmertForPreTraining"),t2r=o(" (LXMERT model)"),a2r=l(),HM=a("li"),hve=a("strong"),n2r=o("mobilebert"),s2r=o(" \u2014 "),eU=a("a"),l2r=o("TFMobileBertForPreTraining"),i2r=o(" (MobileBERT model)"),d2r=l(),UM=a("li"),pve=a("strong"),c2r=o("mpnet"),f2r=o(" \u2014 "),oU=a("a"),m2r=o("TFMPNetForMaskedLM"),g2r=o(" (MPNet model)"),h2r=l(),JM=a("li"),_ve=a("strong"),p2r=o("openai-gpt"),_2r=o(" \u2014 "),rU=a("a"),u2r=o("TFOpenAIGPTLMHeadModel"),b2r=o(" (OpenAI GPT model)"),v2r=l(),YM=a("li"),uve=a("strong"),F2r=o("roberta"),T2r=o(" \u2014 "),tU=a("a"),M2r=o("TFRobertaForMaskedLM"),E2r=o(" (RoBERTa model)"),C2r=l(),KM=a("li"),bve=a("strong"),w2r=o("t5"),A2r=o(" \u2014 "),aU=a("a"),L2r=o("TFT5ForConditionalGeneration"),y2r=o(" (T5 model)"),x2r=l(),ZM=a("li"),vve=a("strong"),$2r=o("tapas"),k2r=o(" \u2014 "),nU=a("a"),S2r=o("TFTapasForMaskedLM"),R2r=o(" (TAPAS model)"),P2r=l(),eE=a("li"),Fve=a("strong"),B2r=o("transfo-xl"),I2r=o(" \u2014 "),sU=a("a"),N2r=o("TFTransfoXLLMHeadModel"),q2r=o(" (Transformer-XL model)"),j2r=l(),oE=a("li"),Tve=a("strong"),D2r=o("vit_mae"),G2r=o(" \u2014 "),lU=a("a"),O2r=o("TFViTMAEForPreTraining"),V2r=o(" (ViTMAE model)"),X2r=l(),rE=a("li"),Mve=a("strong"),z2r=o("xlm"),W2r=o(" \u2014 "),iU=a("a"),Q2r=o("TFXLMWithLMHeadModel"),H2r=o(" (XLM model)"),U2r=l(),tE=a("li"),Eve=a("strong"),J2r=o("xlm-roberta"),Y2r=o(" \u2014 "),dU=a("a"),K2r=o("TFXLMRobertaForMaskedLM"),Z2r=o(" (XLM-RoBERTa model)"),evr=l(),aE=a("li"),Cve=a("strong"),ovr=o("xlnet"),rvr=o(" \u2014 "),cU=a("a"),tvr=o("TFXLNetLMHeadModel"),avr=o(" (XLNet model)"),nvr=l(),F(nE.$$.fragment),wOe=l(),nc=a("h2"),sE=a("a"),wve=a("span"),F(v8.$$.fragment),svr=l(),Ave=a("span"),lvr=o("TFAutoModelForCausalLM"),AOe=l(),or=a("div"),F(F8.$$.fragment),ivr=l(),sc=a("p"),dvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=a("a"),cvr=o("from_pretrained()"),fvr=o(" class method or the "),mU=a("a"),mvr=o("from_config()"),gvr=o(` class
method.`),hvr=l(),T8=a("p"),pvr=o("This class cannot be instantiated directly using "),Lve=a("code"),_vr=o("__init__()"),uvr=o(" (throws an error)."),bvr=l(),St=a("div"),F(M8.$$.fragment),vvr=l(),yve=a("p"),Fvr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Tvr=l(),lc=a("p"),Mvr=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Evr=o("not"),Cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),wvr=o("from_pretrained()"),Avr=o(" to load the model weights."),Lvr=l(),F(lE.$$.fragment),yvr=l(),xr=a("div"),F(E8.$$.fragment),xvr=l(),$ve=a("p"),$vr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kvr=l(),nn=a("p"),Svr=o("The model class to instantiate is selected based on the "),kve=a("code"),Rvr=o("model_type"),Pvr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),Bvr=o("pretrained_model_name_or_path"),Ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),Nvr=o("pretrained_model_name_or_path"),qvr=o(":"),jvr=l(),Me=a("ul"),iE=a("li"),Pve=a("strong"),Dvr=o("bert"),Gvr=o(" \u2014 "),hU=a("a"),Ovr=o("TFBertLMHeadModel"),Vvr=o(" (BERT model)"),Xvr=l(),dE=a("li"),Bve=a("strong"),zvr=o("camembert"),Wvr=o(" \u2014 "),pU=a("a"),Qvr=o("TFCamembertForCausalLM"),Hvr=o(" (CamemBERT model)"),Uvr=l(),cE=a("li"),Ive=a("strong"),Jvr=o("ctrl"),Yvr=o(" \u2014 "),_U=a("a"),Kvr=o("TFCTRLLMHeadModel"),Zvr=o(" (CTRL model)"),eFr=l(),fE=a("li"),Nve=a("strong"),oFr=o("gpt2"),rFr=o(" \u2014 "),uU=a("a"),tFr=o("TFGPT2LMHeadModel"),aFr=o(" (OpenAI GPT-2 model)"),nFr=l(),mE=a("li"),qve=a("strong"),sFr=o("gptj"),lFr=o(" \u2014 "),bU=a("a"),iFr=o("TFGPTJForCausalLM"),dFr=o(" (GPT-J model)"),cFr=l(),gE=a("li"),jve=a("strong"),fFr=o("openai-gpt"),mFr=o(" \u2014 "),vU=a("a"),gFr=o("TFOpenAIGPTLMHeadModel"),hFr=o(" (OpenAI GPT model)"),pFr=l(),hE=a("li"),Dve=a("strong"),_Fr=o("opt"),uFr=o(" \u2014 "),FU=a("a"),bFr=o("TFOPTForCausalLM"),vFr=o(" (OPT model)"),FFr=l(),pE=a("li"),Gve=a("strong"),TFr=o("rembert"),MFr=o(" \u2014 "),TU=a("a"),EFr=o("TFRemBertForCausalLM"),CFr=o(" (RemBERT model)"),wFr=l(),_E=a("li"),Ove=a("strong"),AFr=o("roberta"),LFr=o(" \u2014 "),MU=a("a"),yFr=o("TFRobertaForCausalLM"),xFr=o(" (RoBERTa model)"),$Fr=l(),uE=a("li"),Vve=a("strong"),kFr=o("roformer"),SFr=o(" \u2014 "),EU=a("a"),RFr=o("TFRoFormerForCausalLM"),PFr=o(" (RoFormer model)"),BFr=l(),bE=a("li"),Xve=a("strong"),IFr=o("transfo-xl"),NFr=o(" \u2014 "),CU=a("a"),qFr=o("TFTransfoXLLMHeadModel"),jFr=o(" (Transformer-XL model)"),DFr=l(),vE=a("li"),zve=a("strong"),GFr=o("xlm"),OFr=o(" \u2014 "),wU=a("a"),VFr=o("TFXLMWithLMHeadModel"),XFr=o(" (XLM model)"),zFr=l(),FE=a("li"),Wve=a("strong"),WFr=o("xlnet"),QFr=o(" \u2014 "),AU=a("a"),HFr=o("TFXLNetLMHeadModel"),UFr=o(" (XLNet model)"),JFr=l(),F(TE.$$.fragment),LOe=l(),ic=a("h2"),ME=a("a"),Qve=a("span"),F(C8.$$.fragment),YFr=l(),Hve=a("span"),KFr=o("TFAutoModelForImageClassification"),yOe=l(),rr=a("div"),F(w8.$$.fragment),ZFr=l(),dc=a("p"),eTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LU=a("a"),oTr=o("from_pretrained()"),rTr=o(" class method or the "),yU=a("a"),tTr=o("from_config()"),aTr=o(` class
method.`),nTr=l(),A8=a("p"),sTr=o("This class cannot be instantiated directly using "),Uve=a("code"),lTr=o("__init__()"),iTr=o(" (throws an error)."),dTr=l(),Rt=a("div"),F(L8.$$.fragment),cTr=l(),Jve=a("p"),fTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mTr=l(),cc=a("p"),gTr=o(`Note:
Loading a model from its configuration file does `),Yve=a("strong"),hTr=o("not"),pTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),_Tr=o("from_pretrained()"),uTr=o(" to load the model weights."),bTr=l(),F(EE.$$.fragment),vTr=l(),$r=a("div"),F(y8.$$.fragment),FTr=l(),Kve=a("p"),TTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MTr=l(),sn=a("p"),ETr=o("The model class to instantiate is selected based on the "),Zve=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),eFe=a("code"),ATr=o("pretrained_model_name_or_path"),LTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=a("code"),yTr=o("pretrained_model_name_or_path"),xTr=o(":"),$Tr=l(),ln=a("ul"),CE=a("li"),rFe=a("strong"),kTr=o("convnext"),STr=o(" \u2014 "),$U=a("a"),RTr=o("TFConvNextForImageClassification"),PTr=o(" (ConvNeXT model)"),BTr=l(),wE=a("li"),tFe=a("strong"),ITr=o("data2vec-vision"),NTr=o(" \u2014 "),kU=a("a"),qTr=o("TFData2VecVisionForImageClassification"),jTr=o(" (Data2VecVision model)"),DTr=l(),AE=a("li"),aFe=a("strong"),GTr=o("swin"),OTr=o(" \u2014 "),SU=a("a"),VTr=o("TFSwinForImageClassification"),XTr=o(" (Swin Transformer model)"),zTr=l(),LE=a("li"),nFe=a("strong"),WTr=o("vit"),QTr=o(" \u2014 "),RU=a("a"),HTr=o("TFViTForImageClassification"),UTr=o(" (ViT model)"),JTr=l(),F(yE.$$.fragment),xOe=l(),fc=a("h2"),xE=a("a"),sFe=a("span"),F(x8.$$.fragment),YTr=l(),lFe=a("span"),KTr=o("TFAutoModelForMaskedLM"),$Oe=l(),tr=a("div"),F($8.$$.fragment),ZTr=l(),mc=a("p"),eMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PU=a("a"),oMr=o("from_pretrained()"),rMr=o(" class method or the "),BU=a("a"),tMr=o("from_config()"),aMr=o(` class
method.`),nMr=l(),k8=a("p"),sMr=o("This class cannot be instantiated directly using "),iFe=a("code"),lMr=o("__init__()"),iMr=o(" (throws an error)."),dMr=l(),Pt=a("div"),F(S8.$$.fragment),cMr=l(),dFe=a("p"),fMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mMr=l(),gc=a("p"),gMr=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),hMr=o("not"),pMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),_Mr=o("from_pretrained()"),uMr=o(" to load the model weights."),bMr=l(),F($E.$$.fragment),vMr=l(),kr=a("div"),F(R8.$$.fragment),FMr=l(),fFe=a("p"),TMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MMr=l(),dn=a("p"),EMr=o("The model class to instantiate is selected based on the "),mFe=a("code"),CMr=o("model_type"),wMr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),AMr=o("pretrained_model_name_or_path"),LMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),yMr=o("pretrained_model_name_or_path"),xMr=o(":"),$Mr=l(),ie=a("ul"),kE=a("li"),pFe=a("strong"),kMr=o("albert"),SMr=o(" \u2014 "),NU=a("a"),RMr=o("TFAlbertForMaskedLM"),PMr=o(" (ALBERT model)"),BMr=l(),SE=a("li"),_Fe=a("strong"),IMr=o("bert"),NMr=o(" \u2014 "),qU=a("a"),qMr=o("TFBertForMaskedLM"),jMr=o(" (BERT model)"),DMr=l(),RE=a("li"),uFe=a("strong"),GMr=o("camembert"),OMr=o(" \u2014 "),jU=a("a"),VMr=o("TFCamembertForMaskedLM"),XMr=o(" (CamemBERT model)"),zMr=l(),PE=a("li"),bFe=a("strong"),WMr=o("convbert"),QMr=o(" \u2014 "),DU=a("a"),HMr=o("TFConvBertForMaskedLM"),UMr=o(" (ConvBERT model)"),JMr=l(),BE=a("li"),vFe=a("strong"),YMr=o("deberta"),KMr=o(" \u2014 "),GU=a("a"),ZMr=o("TFDebertaForMaskedLM"),eEr=o(" (DeBERTa model)"),oEr=l(),IE=a("li"),FFe=a("strong"),rEr=o("deberta-v2"),tEr=o(" \u2014 "),OU=a("a"),aEr=o("TFDebertaV2ForMaskedLM"),nEr=o(" (DeBERTa-v2 model)"),sEr=l(),NE=a("li"),TFe=a("strong"),lEr=o("distilbert"),iEr=o(" \u2014 "),VU=a("a"),dEr=o("TFDistilBertForMaskedLM"),cEr=o(" (DistilBERT model)"),fEr=l(),qE=a("li"),MFe=a("strong"),mEr=o("electra"),gEr=o(" \u2014 "),XU=a("a"),hEr=o("TFElectraForMaskedLM"),pEr=o(" (ELECTRA model)"),_Er=l(),jE=a("li"),EFe=a("strong"),uEr=o("flaubert"),bEr=o(" \u2014 "),zU=a("a"),vEr=o("TFFlaubertWithLMHeadModel"),FEr=o(" (FlauBERT model)"),TEr=l(),DE=a("li"),CFe=a("strong"),MEr=o("funnel"),EEr=o(" \u2014 "),WU=a("a"),CEr=o("TFFunnelForMaskedLM"),wEr=o(" (Funnel Transformer model)"),AEr=l(),GE=a("li"),wFe=a("strong"),LEr=o("layoutlm"),yEr=o(" \u2014 "),QU=a("a"),xEr=o("TFLayoutLMForMaskedLM"),$Er=o(" (LayoutLM model)"),kEr=l(),OE=a("li"),AFe=a("strong"),SEr=o("longformer"),REr=o(" \u2014 "),HU=a("a"),PEr=o("TFLongformerForMaskedLM"),BEr=o(" (Longformer model)"),IEr=l(),VE=a("li"),LFe=a("strong"),NEr=o("mobilebert"),qEr=o(" \u2014 "),UU=a("a"),jEr=o("TFMobileBertForMaskedLM"),DEr=o(" (MobileBERT model)"),GEr=l(),XE=a("li"),yFe=a("strong"),OEr=o("mpnet"),VEr=o(" \u2014 "),JU=a("a"),XEr=o("TFMPNetForMaskedLM"),zEr=o(" (MPNet model)"),WEr=l(),zE=a("li"),xFe=a("strong"),QEr=o("rembert"),HEr=o(" \u2014 "),YU=a("a"),UEr=o("TFRemBertForMaskedLM"),JEr=o(" (RemBERT model)"),YEr=l(),WE=a("li"),$Fe=a("strong"),KEr=o("roberta"),ZEr=o(" \u2014 "),KU=a("a"),e4r=o("TFRobertaForMaskedLM"),o4r=o(" (RoBERTa model)"),r4r=l(),QE=a("li"),kFe=a("strong"),t4r=o("roformer"),a4r=o(" \u2014 "),ZU=a("a"),n4r=o("TFRoFormerForMaskedLM"),s4r=o(" (RoFormer model)"),l4r=l(),HE=a("li"),SFe=a("strong"),i4r=o("tapas"),d4r=o(" \u2014 "),eJ=a("a"),c4r=o("TFTapasForMaskedLM"),f4r=o(" (TAPAS model)"),m4r=l(),UE=a("li"),RFe=a("strong"),g4r=o("xlm"),h4r=o(" \u2014 "),oJ=a("a"),p4r=o("TFXLMWithLMHeadModel"),_4r=o(" (XLM model)"),u4r=l(),JE=a("li"),PFe=a("strong"),b4r=o("xlm-roberta"),v4r=o(" \u2014 "),rJ=a("a"),F4r=o("TFXLMRobertaForMaskedLM"),T4r=o(" (XLM-RoBERTa model)"),M4r=l(),F(YE.$$.fragment),kOe=l(),hc=a("h2"),KE=a("a"),BFe=a("span"),F(P8.$$.fragment),E4r=l(),IFe=a("span"),C4r=o("TFAutoModelForSeq2SeqLM"),SOe=l(),ar=a("div"),F(B8.$$.fragment),w4r=l(),pc=a("p"),A4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=a("a"),L4r=o("from_pretrained()"),y4r=o(" class method or the "),aJ=a("a"),x4r=o("from_config()"),$4r=o(` class
method.`),k4r=l(),I8=a("p"),S4r=o("This class cannot be instantiated directly using "),NFe=a("code"),R4r=o("__init__()"),P4r=o(" (throws an error)."),B4r=l(),Bt=a("div"),F(N8.$$.fragment),I4r=l(),qFe=a("p"),N4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q4r=l(),_c=a("p"),j4r=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),D4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),O4r=o("from_pretrained()"),V4r=o(" to load the model weights."),X4r=l(),F(ZE.$$.fragment),z4r=l(),Sr=a("div"),F(q8.$$.fragment),W4r=l(),DFe=a("p"),Q4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H4r=l(),cn=a("p"),U4r=o("The model class to instantiate is selected based on the "),GFe=a("code"),J4r=o("model_type"),Y4r=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),eCr=o("pretrained_model_name_or_path"),oCr=o(":"),rCr=l(),ye=a("ul"),e4=a("li"),XFe=a("strong"),tCr=o("bart"),aCr=o(" \u2014 "),sJ=a("a"),nCr=o("TFBartForConditionalGeneration"),sCr=o(" (BART model)"),lCr=l(),o4=a("li"),zFe=a("strong"),iCr=o("blenderbot"),dCr=o(" \u2014 "),lJ=a("a"),cCr=o("TFBlenderbotForConditionalGeneration"),fCr=o(" (Blenderbot model)"),mCr=l(),r4=a("li"),WFe=a("strong"),gCr=o("blenderbot-small"),hCr=o(" \u2014 "),iJ=a("a"),pCr=o("TFBlenderbotSmallForConditionalGeneration"),_Cr=o(" (BlenderbotSmall model)"),uCr=l(),t4=a("li"),QFe=a("strong"),bCr=o("encoder-decoder"),vCr=o(" \u2014 "),dJ=a("a"),FCr=o("TFEncoderDecoderModel"),TCr=o(" (Encoder decoder model)"),MCr=l(),a4=a("li"),HFe=a("strong"),ECr=o("led"),CCr=o(" \u2014 "),cJ=a("a"),wCr=o("TFLEDForConditionalGeneration"),ACr=o(" (LED model)"),LCr=l(),n4=a("li"),UFe=a("strong"),yCr=o("marian"),xCr=o(" \u2014 "),fJ=a("a"),$Cr=o("TFMarianMTModel"),kCr=o(" (Marian model)"),SCr=l(),s4=a("li"),JFe=a("strong"),RCr=o("mbart"),PCr=o(" \u2014 "),mJ=a("a"),BCr=o("TFMBartForConditionalGeneration"),ICr=o(" (mBART model)"),NCr=l(),l4=a("li"),YFe=a("strong"),qCr=o("mt5"),jCr=o(" \u2014 "),gJ=a("a"),DCr=o("TFMT5ForConditionalGeneration"),GCr=o(" (MT5 model)"),OCr=l(),i4=a("li"),KFe=a("strong"),VCr=o("pegasus"),XCr=o(" \u2014 "),hJ=a("a"),zCr=o("TFPegasusForConditionalGeneration"),WCr=o(" (Pegasus model)"),QCr=l(),d4=a("li"),ZFe=a("strong"),HCr=o("t5"),UCr=o(" \u2014 "),pJ=a("a"),JCr=o("TFT5ForConditionalGeneration"),YCr=o(" (T5 model)"),KCr=l(),F(c4.$$.fragment),ROe=l(),uc=a("h2"),f4=a("a"),eTe=a("span"),F(j8.$$.fragment),ZCr=l(),oTe=a("span"),e5r=o("TFAutoModelForSequenceClassification"),POe=l(),nr=a("div"),F(D8.$$.fragment),o5r=l(),bc=a("p"),r5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_J=a("a"),t5r=o("from_pretrained()"),a5r=o(" class method or the "),uJ=a("a"),n5r=o("from_config()"),s5r=o(` class
method.`),l5r=l(),G8=a("p"),i5r=o("This class cannot be instantiated directly using "),rTe=a("code"),d5r=o("__init__()"),c5r=o(" (throws an error)."),f5r=l(),It=a("div"),F(O8.$$.fragment),m5r=l(),tTe=a("p"),g5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h5r=l(),vc=a("p"),p5r=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),_5r=o("not"),u5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),b5r=o("from_pretrained()"),v5r=o(" to load the model weights."),F5r=l(),F(m4.$$.fragment),T5r=l(),Rr=a("div"),F(V8.$$.fragment),M5r=l(),nTe=a("p"),E5r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C5r=l(),fn=a("p"),w5r=o("The model class to instantiate is selected based on the "),sTe=a("code"),A5r=o("model_type"),L5r=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),y5r=o("pretrained_model_name_or_path"),x5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),$5r=o("pretrained_model_name_or_path"),k5r=o(":"),S5r=l(),te=a("ul"),g4=a("li"),dTe=a("strong"),R5r=o("albert"),P5r=o(" \u2014 "),vJ=a("a"),B5r=o("TFAlbertForSequenceClassification"),I5r=o(" (ALBERT model)"),N5r=l(),h4=a("li"),cTe=a("strong"),q5r=o("bert"),j5r=o(" \u2014 "),FJ=a("a"),D5r=o("TFBertForSequenceClassification"),G5r=o(" (BERT model)"),O5r=l(),p4=a("li"),fTe=a("strong"),V5r=o("camembert"),X5r=o(" \u2014 "),TJ=a("a"),z5r=o("TFCamembertForSequenceClassification"),W5r=o(" (CamemBERT model)"),Q5r=l(),_4=a("li"),mTe=a("strong"),H5r=o("convbert"),U5r=o(" \u2014 "),MJ=a("a"),J5r=o("TFConvBertForSequenceClassification"),Y5r=o(" (ConvBERT model)"),K5r=l(),u4=a("li"),gTe=a("strong"),Z5r=o("ctrl"),e3r=o(" \u2014 "),EJ=a("a"),o3r=o("TFCTRLForSequenceClassification"),r3r=o(" (CTRL model)"),t3r=l(),b4=a("li"),hTe=a("strong"),a3r=o("deberta"),n3r=o(" \u2014 "),CJ=a("a"),s3r=o("TFDebertaForSequenceClassification"),l3r=o(" (DeBERTa model)"),i3r=l(),v4=a("li"),pTe=a("strong"),d3r=o("deberta-v2"),c3r=o(" \u2014 "),wJ=a("a"),f3r=o("TFDebertaV2ForSequenceClassification"),m3r=o(" (DeBERTa-v2 model)"),g3r=l(),F4=a("li"),_Te=a("strong"),h3r=o("distilbert"),p3r=o(" \u2014 "),AJ=a("a"),_3r=o("TFDistilBertForSequenceClassification"),u3r=o(" (DistilBERT model)"),b3r=l(),T4=a("li"),uTe=a("strong"),v3r=o("electra"),F3r=o(" \u2014 "),LJ=a("a"),T3r=o("TFElectraForSequenceClassification"),M3r=o(" (ELECTRA model)"),E3r=l(),M4=a("li"),bTe=a("strong"),C3r=o("flaubert"),w3r=o(" \u2014 "),yJ=a("a"),A3r=o("TFFlaubertForSequenceClassification"),L3r=o(" (FlauBERT model)"),y3r=l(),E4=a("li"),vTe=a("strong"),x3r=o("funnel"),$3r=o(" \u2014 "),xJ=a("a"),k3r=o("TFFunnelForSequenceClassification"),S3r=o(" (Funnel Transformer model)"),R3r=l(),C4=a("li"),FTe=a("strong"),P3r=o("gpt2"),B3r=o(" \u2014 "),$J=a("a"),I3r=o("TFGPT2ForSequenceClassification"),N3r=o(" (OpenAI GPT-2 model)"),q3r=l(),w4=a("li"),TTe=a("strong"),j3r=o("gptj"),D3r=o(" \u2014 "),kJ=a("a"),G3r=o("TFGPTJForSequenceClassification"),O3r=o(" (GPT-J model)"),V3r=l(),A4=a("li"),MTe=a("strong"),X3r=o("layoutlm"),z3r=o(" \u2014 "),SJ=a("a"),W3r=o("TFLayoutLMForSequenceClassification"),Q3r=o(" (LayoutLM model)"),H3r=l(),L4=a("li"),ETe=a("strong"),U3r=o("longformer"),J3r=o(" \u2014 "),RJ=a("a"),Y3r=o("TFLongformerForSequenceClassification"),K3r=o(" (Longformer model)"),Z3r=l(),y4=a("li"),CTe=a("strong"),e0r=o("mobilebert"),o0r=o(" \u2014 "),PJ=a("a"),r0r=o("TFMobileBertForSequenceClassification"),t0r=o(" (MobileBERT model)"),a0r=l(),x4=a("li"),wTe=a("strong"),n0r=o("mpnet"),s0r=o(" \u2014 "),BJ=a("a"),l0r=o("TFMPNetForSequenceClassification"),i0r=o(" (MPNet model)"),d0r=l(),$4=a("li"),ATe=a("strong"),c0r=o("openai-gpt"),f0r=o(" \u2014 "),IJ=a("a"),m0r=o("TFOpenAIGPTForSequenceClassification"),g0r=o(" (OpenAI GPT model)"),h0r=l(),k4=a("li"),LTe=a("strong"),p0r=o("rembert"),_0r=o(" \u2014 "),NJ=a("a"),u0r=o("TFRemBertForSequenceClassification"),b0r=o(" (RemBERT model)"),v0r=l(),S4=a("li"),yTe=a("strong"),F0r=o("roberta"),T0r=o(" \u2014 "),qJ=a("a"),M0r=o("TFRobertaForSequenceClassification"),E0r=o(" (RoBERTa model)"),C0r=l(),R4=a("li"),xTe=a("strong"),w0r=o("roformer"),A0r=o(" \u2014 "),jJ=a("a"),L0r=o("TFRoFormerForSequenceClassification"),y0r=o(" (RoFormer model)"),x0r=l(),P4=a("li"),$Te=a("strong"),$0r=o("tapas"),k0r=o(" \u2014 "),DJ=a("a"),S0r=o("TFTapasForSequenceClassification"),R0r=o(" (TAPAS model)"),P0r=l(),B4=a("li"),kTe=a("strong"),B0r=o("transfo-xl"),I0r=o(" \u2014 "),GJ=a("a"),N0r=o("TFTransfoXLForSequenceClassification"),q0r=o(" (Transformer-XL model)"),j0r=l(),I4=a("li"),STe=a("strong"),D0r=o("xlm"),G0r=o(" \u2014 "),OJ=a("a"),O0r=o("TFXLMForSequenceClassification"),V0r=o(" (XLM model)"),X0r=l(),N4=a("li"),RTe=a("strong"),z0r=o("xlm-roberta"),W0r=o(" \u2014 "),VJ=a("a"),Q0r=o("TFXLMRobertaForSequenceClassification"),H0r=o(" (XLM-RoBERTa model)"),U0r=l(),q4=a("li"),PTe=a("strong"),J0r=o("xlnet"),Y0r=o(" \u2014 "),XJ=a("a"),K0r=o("TFXLNetForSequenceClassification"),Z0r=o(" (XLNet model)"),ewr=l(),F(j4.$$.fragment),BOe=l(),Fc=a("h2"),D4=a("a"),BTe=a("span"),F(X8.$$.fragment),owr=l(),ITe=a("span"),rwr=o("TFAutoModelForMultipleChoice"),IOe=l(),sr=a("div"),F(z8.$$.fragment),twr=l(),Tc=a("p"),awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zJ=a("a"),nwr=o("from_pretrained()"),swr=o(" class method or the "),WJ=a("a"),lwr=o("from_config()"),iwr=o(` class
method.`),dwr=l(),W8=a("p"),cwr=o("This class cannot be instantiated directly using "),NTe=a("code"),fwr=o("__init__()"),mwr=o(" (throws an error)."),gwr=l(),Nt=a("div"),F(Q8.$$.fragment),hwr=l(),qTe=a("p"),pwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_wr=l(),Mc=a("p"),uwr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),bwr=o("not"),vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),Fwr=o("from_pretrained()"),Twr=o(" to load the model weights."),Mwr=l(),F(G4.$$.fragment),Ewr=l(),Pr=a("div"),F(H8.$$.fragment),Cwr=l(),DTe=a("p"),wwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Awr=l(),mn=a("p"),Lwr=o("The model class to instantiate is selected based on the "),GTe=a("code"),ywr=o("model_type"),xwr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),$wr=o("pretrained_model_name_or_path"),kwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),Swr=o("pretrained_model_name_or_path"),Rwr=o(":"),Pwr=l(),_e=a("ul"),O4=a("li"),XTe=a("strong"),Bwr=o("albert"),Iwr=o(" \u2014 "),HJ=a("a"),Nwr=o("TFAlbertForMultipleChoice"),qwr=o(" (ALBERT model)"),jwr=l(),V4=a("li"),zTe=a("strong"),Dwr=o("bert"),Gwr=o(" \u2014 "),UJ=a("a"),Owr=o("TFBertForMultipleChoice"),Vwr=o(" (BERT model)"),Xwr=l(),X4=a("li"),WTe=a("strong"),zwr=o("camembert"),Wwr=o(" \u2014 "),JJ=a("a"),Qwr=o("TFCamembertForMultipleChoice"),Hwr=o(" (CamemBERT model)"),Uwr=l(),z4=a("li"),QTe=a("strong"),Jwr=o("convbert"),Ywr=o(" \u2014 "),YJ=a("a"),Kwr=o("TFConvBertForMultipleChoice"),Zwr=o(" (ConvBERT model)"),eAr=l(),W4=a("li"),HTe=a("strong"),oAr=o("distilbert"),rAr=o(" \u2014 "),KJ=a("a"),tAr=o("TFDistilBertForMultipleChoice"),aAr=o(" (DistilBERT model)"),nAr=l(),Q4=a("li"),UTe=a("strong"),sAr=o("electra"),lAr=o(" \u2014 "),ZJ=a("a"),iAr=o("TFElectraForMultipleChoice"),dAr=o(" (ELECTRA model)"),cAr=l(),H4=a("li"),JTe=a("strong"),fAr=o("flaubert"),mAr=o(" \u2014 "),eY=a("a"),gAr=o("TFFlaubertForMultipleChoice"),hAr=o(" (FlauBERT model)"),pAr=l(),U4=a("li"),YTe=a("strong"),_Ar=o("funnel"),uAr=o(" \u2014 "),oY=a("a"),bAr=o("TFFunnelForMultipleChoice"),vAr=o(" (Funnel Transformer model)"),FAr=l(),J4=a("li"),KTe=a("strong"),TAr=o("longformer"),MAr=o(" \u2014 "),rY=a("a"),EAr=o("TFLongformerForMultipleChoice"),CAr=o(" (Longformer model)"),wAr=l(),Y4=a("li"),ZTe=a("strong"),AAr=o("mobilebert"),LAr=o(" \u2014 "),tY=a("a"),yAr=o("TFMobileBertForMultipleChoice"),xAr=o(" (MobileBERT model)"),$Ar=l(),K4=a("li"),eMe=a("strong"),kAr=o("mpnet"),SAr=o(" \u2014 "),aY=a("a"),RAr=o("TFMPNetForMultipleChoice"),PAr=o(" (MPNet model)"),BAr=l(),Z4=a("li"),oMe=a("strong"),IAr=o("rembert"),NAr=o(" \u2014 "),nY=a("a"),qAr=o("TFRemBertForMultipleChoice"),jAr=o(" (RemBERT model)"),DAr=l(),eC=a("li"),rMe=a("strong"),GAr=o("roberta"),OAr=o(" \u2014 "),sY=a("a"),VAr=o("TFRobertaForMultipleChoice"),XAr=o(" (RoBERTa model)"),zAr=l(),oC=a("li"),tMe=a("strong"),WAr=o("roformer"),QAr=o(" \u2014 "),lY=a("a"),HAr=o("TFRoFormerForMultipleChoice"),UAr=o(" (RoFormer model)"),JAr=l(),rC=a("li"),aMe=a("strong"),YAr=o("xlm"),KAr=o(" \u2014 "),iY=a("a"),ZAr=o("TFXLMForMultipleChoice"),e6r=o(" (XLM model)"),o6r=l(),tC=a("li"),nMe=a("strong"),r6r=o("xlm-roberta"),t6r=o(" \u2014 "),dY=a("a"),a6r=o("TFXLMRobertaForMultipleChoice"),n6r=o(" (XLM-RoBERTa model)"),s6r=l(),aC=a("li"),sMe=a("strong"),l6r=o("xlnet"),i6r=o(" \u2014 "),cY=a("a"),d6r=o("TFXLNetForMultipleChoice"),c6r=o(" (XLNet model)"),f6r=l(),F(nC.$$.fragment),NOe=l(),Ec=a("h2"),sC=a("a"),lMe=a("span"),F(U8.$$.fragment),m6r=l(),iMe=a("span"),g6r=o("TFAutoModelForNextSentencePrediction"),qOe=l(),lr=a("div"),F(J8.$$.fragment),h6r=l(),Cc=a("p"),p6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fY=a("a"),_6r=o("from_pretrained()"),u6r=o(" class method or the "),mY=a("a"),b6r=o("from_config()"),v6r=o(` class
method.`),F6r=l(),Y8=a("p"),T6r=o("This class cannot be instantiated directly using "),dMe=a("code"),M6r=o("__init__()"),E6r=o(" (throws an error)."),C6r=l(),qt=a("div"),F(K8.$$.fragment),w6r=l(),cMe=a("p"),A6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),L6r=l(),wc=a("p"),y6r=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),x6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),k6r=o("from_pretrained()"),S6r=o(" to load the model weights."),R6r=l(),F(lC.$$.fragment),P6r=l(),Br=a("div"),F(Z8.$$.fragment),B6r=l(),mMe=a("p"),I6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N6r=l(),gn=a("p"),q6r=o("The model class to instantiate is selected based on the "),gMe=a("code"),j6r=o("model_type"),D6r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),V6r=o("pretrained_model_name_or_path"),X6r=o(":"),z6r=l(),ex=a("ul"),iC=a("li"),_Me=a("strong"),W6r=o("bert"),Q6r=o(" \u2014 "),hY=a("a"),H6r=o("TFBertForNextSentencePrediction"),U6r=o(" (BERT model)"),J6r=l(),dC=a("li"),uMe=a("strong"),Y6r=o("mobilebert"),K6r=o(" \u2014 "),pY=a("a"),Z6r=o("TFMobileBertForNextSentencePrediction"),eLr=o(" (MobileBERT model)"),oLr=l(),F(cC.$$.fragment),jOe=l(),Ac=a("h2"),fC=a("a"),bMe=a("span"),F(ox.$$.fragment),rLr=l(),vMe=a("span"),tLr=o("TFAutoModelForTableQuestionAnswering"),DOe=l(),ir=a("div"),F(rx.$$.fragment),aLr=l(),Lc=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Y=a("a"),sLr=o("from_pretrained()"),lLr=o(" class method or the "),uY=a("a"),iLr=o("from_config()"),dLr=o(` class
method.`),cLr=l(),tx=a("p"),fLr=o("This class cannot be instantiated directly using "),FMe=a("code"),mLr=o("__init__()"),gLr=o(" (throws an error)."),hLr=l(),jt=a("div"),F(ax.$$.fragment),pLr=l(),TMe=a("p"),_Lr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uLr=l(),yc=a("p"),bLr=o(`Note:
Loading a model from its configuration file does `),MMe=a("strong"),vLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),TLr=o("from_pretrained()"),MLr=o(" to load the model weights."),ELr=l(),F(mC.$$.fragment),CLr=l(),Ir=a("div"),F(nx.$$.fragment),wLr=l(),EMe=a("p"),ALr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LLr=l(),hn=a("p"),yLr=o("The model class to instantiate is selected based on the "),CMe=a("code"),xLr=o("model_type"),$Lr=o(` property of the config object (either
passed as an argument or loaded from `),wMe=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=a("code"),RLr=o("pretrained_model_name_or_path"),PLr=o(":"),BLr=l(),LMe=a("ul"),gC=a("li"),yMe=a("strong"),ILr=o("tapas"),NLr=o(" \u2014 "),vY=a("a"),qLr=o("TFTapasForQuestionAnswering"),jLr=o(" (TAPAS model)"),DLr=l(),F(hC.$$.fragment),GOe=l(),xc=a("h2"),pC=a("a"),xMe=a("span"),F(sx.$$.fragment),GLr=l(),$Me=a("span"),OLr=o("TFAutoModelForTokenClassification"),OOe=l(),dr=a("div"),F(lx.$$.fragment),VLr=l(),$c=a("p"),XLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FY=a("a"),zLr=o("from_pretrained()"),WLr=o(" class method or the "),TY=a("a"),QLr=o("from_config()"),HLr=o(` class
method.`),ULr=l(),ix=a("p"),JLr=o("This class cannot be instantiated directly using "),kMe=a("code"),YLr=o("__init__()"),KLr=o(" (throws an error)."),ZLr=l(),Dt=a("div"),F(dx.$$.fragment),eyr=l(),SMe=a("p"),oyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ryr=l(),kc=a("p"),tyr=o(`Note:
Loading a model from its configuration file does `),RMe=a("strong"),ayr=o("not"),nyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),syr=o("from_pretrained()"),lyr=o(" to load the model weights."),iyr=l(),F(_C.$$.fragment),dyr=l(),Nr=a("div"),F(cx.$$.fragment),cyr=l(),PMe=a("p"),fyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),myr=l(),pn=a("p"),gyr=o("The model class to instantiate is selected based on the "),BMe=a("code"),hyr=o("model_type"),pyr=o(` property of the config object (either
passed as an argument or loaded from `),IMe=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),byr=o("pretrained_model_name_or_path"),vyr=o(":"),Fyr=l(),de=a("ul"),uC=a("li"),qMe=a("strong"),Tyr=o("albert"),Myr=o(" \u2014 "),EY=a("a"),Eyr=o("TFAlbertForTokenClassification"),Cyr=o(" (ALBERT model)"),wyr=l(),bC=a("li"),jMe=a("strong"),Ayr=o("bert"),Lyr=o(" \u2014 "),CY=a("a"),yyr=o("TFBertForTokenClassification"),xyr=o(" (BERT model)"),$yr=l(),vC=a("li"),DMe=a("strong"),kyr=o("camembert"),Syr=o(" \u2014 "),wY=a("a"),Ryr=o("TFCamembertForTokenClassification"),Pyr=o(" (CamemBERT model)"),Byr=l(),FC=a("li"),GMe=a("strong"),Iyr=o("convbert"),Nyr=o(" \u2014 "),AY=a("a"),qyr=o("TFConvBertForTokenClassification"),jyr=o(" (ConvBERT model)"),Dyr=l(),TC=a("li"),OMe=a("strong"),Gyr=o("deberta"),Oyr=o(" \u2014 "),LY=a("a"),Vyr=o("TFDebertaForTokenClassification"),Xyr=o(" (DeBERTa model)"),zyr=l(),MC=a("li"),VMe=a("strong"),Wyr=o("deberta-v2"),Qyr=o(" \u2014 "),yY=a("a"),Hyr=o("TFDebertaV2ForTokenClassification"),Uyr=o(" (DeBERTa-v2 model)"),Jyr=l(),EC=a("li"),XMe=a("strong"),Yyr=o("distilbert"),Kyr=o(" \u2014 "),xY=a("a"),Zyr=o("TFDistilBertForTokenClassification"),e8r=o(" (DistilBERT model)"),o8r=l(),CC=a("li"),zMe=a("strong"),r8r=o("electra"),t8r=o(" \u2014 "),$Y=a("a"),a8r=o("TFElectraForTokenClassification"),n8r=o(" (ELECTRA model)"),s8r=l(),wC=a("li"),WMe=a("strong"),l8r=o("flaubert"),i8r=o(" \u2014 "),kY=a("a"),d8r=o("TFFlaubertForTokenClassification"),c8r=o(" (FlauBERT model)"),f8r=l(),AC=a("li"),QMe=a("strong"),m8r=o("funnel"),g8r=o(" \u2014 "),SY=a("a"),h8r=o("TFFunnelForTokenClassification"),p8r=o(" (Funnel Transformer model)"),_8r=l(),LC=a("li"),HMe=a("strong"),u8r=o("layoutlm"),b8r=o(" \u2014 "),RY=a("a"),v8r=o("TFLayoutLMForTokenClassification"),F8r=o(" (LayoutLM model)"),T8r=l(),yC=a("li"),UMe=a("strong"),M8r=o("longformer"),E8r=o(" \u2014 "),PY=a("a"),C8r=o("TFLongformerForTokenClassification"),w8r=o(" (Longformer model)"),A8r=l(),xC=a("li"),JMe=a("strong"),L8r=o("mobilebert"),y8r=o(" \u2014 "),BY=a("a"),x8r=o("TFMobileBertForTokenClassification"),$8r=o(" (MobileBERT model)"),k8r=l(),$C=a("li"),YMe=a("strong"),S8r=o("mpnet"),R8r=o(" \u2014 "),IY=a("a"),P8r=o("TFMPNetForTokenClassification"),B8r=o(" (MPNet model)"),I8r=l(),kC=a("li"),KMe=a("strong"),N8r=o("rembert"),q8r=o(" \u2014 "),NY=a("a"),j8r=o("TFRemBertForTokenClassification"),D8r=o(" (RemBERT model)"),G8r=l(),SC=a("li"),ZMe=a("strong"),O8r=o("roberta"),V8r=o(" \u2014 "),qY=a("a"),X8r=o("TFRobertaForTokenClassification"),z8r=o(" (RoBERTa model)"),W8r=l(),RC=a("li"),eEe=a("strong"),Q8r=o("roformer"),H8r=o(" \u2014 "),jY=a("a"),U8r=o("TFRoFormerForTokenClassification"),J8r=o(" (RoFormer model)"),Y8r=l(),PC=a("li"),oEe=a("strong"),K8r=o("xlm"),Z8r=o(" \u2014 "),DY=a("a"),exr=o("TFXLMForTokenClassification"),oxr=o(" (XLM model)"),rxr=l(),BC=a("li"),rEe=a("strong"),txr=o("xlm-roberta"),axr=o(" \u2014 "),GY=a("a"),nxr=o("TFXLMRobertaForTokenClassification"),sxr=o(" (XLM-RoBERTa model)"),lxr=l(),IC=a("li"),tEe=a("strong"),ixr=o("xlnet"),dxr=o(" \u2014 "),OY=a("a"),cxr=o("TFXLNetForTokenClassification"),fxr=o(" (XLNet model)"),mxr=l(),F(NC.$$.fragment),VOe=l(),Sc=a("h2"),qC=a("a"),aEe=a("span"),F(fx.$$.fragment),gxr=l(),nEe=a("span"),hxr=o("TFAutoModelForQuestionAnswering"),XOe=l(),cr=a("div"),F(mx.$$.fragment),pxr=l(),Rc=a("p"),_xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VY=a("a"),uxr=o("from_pretrained()"),bxr=o(" class method or the "),XY=a("a"),vxr=o("from_config()"),Fxr=o(` class
method.`),Txr=l(),gx=a("p"),Mxr=o("This class cannot be instantiated directly using "),sEe=a("code"),Exr=o("__init__()"),Cxr=o(" (throws an error)."),wxr=l(),Gt=a("div"),F(hx.$$.fragment),Axr=l(),lEe=a("p"),Lxr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yxr=l(),Pc=a("p"),xxr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),$xr=o("not"),kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),Sxr=o("from_pretrained()"),Rxr=o(" to load the model weights."),Pxr=l(),F(jC.$$.fragment),Bxr=l(),qr=a("div"),F(px.$$.fragment),Ixr=l(),dEe=a("p"),Nxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qxr=l(),_n=a("p"),jxr=o("The model class to instantiate is selected based on the "),cEe=a("code"),Dxr=o("model_type"),Gxr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),Oxr=o("pretrained_model_name_or_path"),Vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),Xxr=o("pretrained_model_name_or_path"),zxr=o(":"),Wxr=l(),ce=a("ul"),DC=a("li"),gEe=a("strong"),Qxr=o("albert"),Hxr=o(" \u2014 "),WY=a("a"),Uxr=o("TFAlbertForQuestionAnswering"),Jxr=o(" (ALBERT model)"),Yxr=l(),GC=a("li"),hEe=a("strong"),Kxr=o("bert"),Zxr=o(" \u2014 "),QY=a("a"),e$r=o("TFBertForQuestionAnswering"),o$r=o(" (BERT model)"),r$r=l(),OC=a("li"),pEe=a("strong"),t$r=o("camembert"),a$r=o(" \u2014 "),HY=a("a"),n$r=o("TFCamembertForQuestionAnswering"),s$r=o(" (CamemBERT model)"),l$r=l(),VC=a("li"),_Ee=a("strong"),i$r=o("convbert"),d$r=o(" \u2014 "),UY=a("a"),c$r=o("TFConvBertForQuestionAnswering"),f$r=o(" (ConvBERT model)"),m$r=l(),XC=a("li"),uEe=a("strong"),g$r=o("deberta"),h$r=o(" \u2014 "),JY=a("a"),p$r=o("TFDebertaForQuestionAnswering"),_$r=o(" (DeBERTa model)"),u$r=l(),zC=a("li"),bEe=a("strong"),b$r=o("deberta-v2"),v$r=o(" \u2014 "),YY=a("a"),F$r=o("TFDebertaV2ForQuestionAnswering"),T$r=o(" (DeBERTa-v2 model)"),M$r=l(),WC=a("li"),vEe=a("strong"),E$r=o("distilbert"),C$r=o(" \u2014 "),KY=a("a"),w$r=o("TFDistilBertForQuestionAnswering"),A$r=o(" (DistilBERT model)"),L$r=l(),QC=a("li"),FEe=a("strong"),y$r=o("electra"),x$r=o(" \u2014 "),ZY=a("a"),$$r=o("TFElectraForQuestionAnswering"),k$r=o(" (ELECTRA model)"),S$r=l(),HC=a("li"),TEe=a("strong"),R$r=o("flaubert"),P$r=o(" \u2014 "),eK=a("a"),B$r=o("TFFlaubertForQuestionAnsweringSimple"),I$r=o(" (FlauBERT model)"),N$r=l(),UC=a("li"),MEe=a("strong"),q$r=o("funnel"),j$r=o(" \u2014 "),oK=a("a"),D$r=o("TFFunnelForQuestionAnswering"),G$r=o(" (Funnel Transformer model)"),O$r=l(),JC=a("li"),EEe=a("strong"),V$r=o("gptj"),X$r=o(" \u2014 "),rK=a("a"),z$r=o("TFGPTJForQuestionAnswering"),W$r=o(" (GPT-J model)"),Q$r=l(),YC=a("li"),CEe=a("strong"),H$r=o("longformer"),U$r=o(" \u2014 "),tK=a("a"),J$r=o("TFLongformerForQuestionAnswering"),Y$r=o(" (Longformer model)"),K$r=l(),KC=a("li"),wEe=a("strong"),Z$r=o("mobilebert"),ekr=o(" \u2014 "),aK=a("a"),okr=o("TFMobileBertForQuestionAnswering"),rkr=o(" (MobileBERT model)"),tkr=l(),ZC=a("li"),AEe=a("strong"),akr=o("mpnet"),nkr=o(" \u2014 "),nK=a("a"),skr=o("TFMPNetForQuestionAnswering"),lkr=o(" (MPNet model)"),ikr=l(),e5=a("li"),LEe=a("strong"),dkr=o("rembert"),ckr=o(" \u2014 "),sK=a("a"),fkr=o("TFRemBertForQuestionAnswering"),mkr=o(" (RemBERT model)"),gkr=l(),o5=a("li"),yEe=a("strong"),hkr=o("roberta"),pkr=o(" \u2014 "),lK=a("a"),_kr=o("TFRobertaForQuestionAnswering"),ukr=o(" (RoBERTa model)"),bkr=l(),r5=a("li"),xEe=a("strong"),vkr=o("roformer"),Fkr=o(" \u2014 "),iK=a("a"),Tkr=o("TFRoFormerForQuestionAnswering"),Mkr=o(" (RoFormer model)"),Ekr=l(),t5=a("li"),$Ee=a("strong"),Ckr=o("xlm"),wkr=o(" \u2014 "),dK=a("a"),Akr=o("TFXLMForQuestionAnsweringSimple"),Lkr=o(" (XLM model)"),ykr=l(),a5=a("li"),kEe=a("strong"),xkr=o("xlm-roberta"),$kr=o(" \u2014 "),cK=a("a"),kkr=o("TFXLMRobertaForQuestionAnswering"),Skr=o(" (XLM-RoBERTa model)"),Rkr=l(),n5=a("li"),SEe=a("strong"),Pkr=o("xlnet"),Bkr=o(" \u2014 "),fK=a("a"),Ikr=o("TFXLNetForQuestionAnsweringSimple"),Nkr=o(" (XLNet model)"),qkr=l(),F(s5.$$.fragment),zOe=l(),Bc=a("h2"),l5=a("a"),REe=a("span"),F(_x.$$.fragment),jkr=l(),PEe=a("span"),Dkr=o("TFAutoModelForVision2Seq"),WOe=l(),fr=a("div"),F(ux.$$.fragment),Gkr=l(),Ic=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mK=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),gK=a("a"),zkr=o("from_config()"),Wkr=o(` class
method.`),Qkr=l(),bx=a("p"),Hkr=o("This class cannot be instantiated directly using "),BEe=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Ot=a("div"),F(vx.$$.fragment),Kkr=l(),IEe=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eSr=l(),Nc=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),F(i5.$$.fragment),lSr=l(),jr=a("div"),F(Fx.$$.fragment),iSr=l(),qEe=a("p"),dSr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cSr=l(),un=a("p"),fSr=o("The model class to instantiate is selected based on the "),jEe=a("code"),mSr=o("model_type"),gSr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(":"),bSr=l(),OEe=a("ul"),d5=a("li"),VEe=a("strong"),vSr=o("vision-encoder-decoder"),FSr=o(" \u2014 "),pK=a("a"),TSr=o("TFVisionEncoderDecoderModel"),MSr=o(" (Vision Encoder decoder model)"),ESr=l(),F(c5.$$.fragment),QOe=l(),qc=a("h2"),f5=a("a"),XEe=a("span"),F(Tx.$$.fragment),CSr=l(),zEe=a("span"),wSr=o("TFAutoModelForSpeechSeq2Seq"),HOe=l(),mr=a("div"),F(Mx.$$.fragment),ASr=l(),jc=a("p"),LSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_K=a("a"),ySr=o("from_pretrained()"),xSr=o(" class method or the "),uK=a("a"),$Sr=o("from_config()"),kSr=o(` class
method.`),SSr=l(),Ex=a("p"),RSr=o("This class cannot be instantiated directly using "),WEe=a("code"),PSr=o("__init__()"),BSr=o(" (throws an error)."),ISr=l(),Vt=a("div"),F(Cx.$$.fragment),NSr=l(),QEe=a("p"),qSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jSr=l(),Dc=a("p"),DSr=o(`Note:
Loading a model from its configuration file does `),HEe=a("strong"),GSr=o("not"),OSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),VSr=o("from_pretrained()"),XSr=o(" to load the model weights."),zSr=l(),F(m5.$$.fragment),WSr=l(),Dr=a("div"),F(wx.$$.fragment),QSr=l(),UEe=a("p"),HSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),USr=l(),bn=a("p"),JSr=o("The model class to instantiate is selected based on the "),JEe=a("code"),YSr=o("model_type"),KSr=o(` property of the config object (either
passed as an argument or loaded from `),YEe=a("code"),ZSr=o("pretrained_model_name_or_path"),eRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(":"),tRr=l(),ZEe=a("ul"),g5=a("li"),e4e=a("strong"),aRr=o("speech_to_text"),nRr=o(" \u2014 "),vK=a("a"),sRr=o("TFSpeech2TextForConditionalGeneration"),lRr=o(" (Speech2Text model)"),iRr=l(),F(h5.$$.fragment),UOe=l(),Gc=a("h2"),p5=a("a"),o4e=a("span"),F(Ax.$$.fragment),dRr=l(),r4e=a("span"),cRr=o("FlaxAutoModel"),JOe=l(),gr=a("div"),F(Lx.$$.fragment),fRr=l(),Oc=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FK=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),TK=a("a"),pRr=o("from_config()"),_Rr=o(` class
method.`),uRr=l(),yx=a("p"),bRr=o("This class cannot be instantiated directly using "),t4e=a("code"),vRr=o("__init__()"),FRr=o(" (throws an error)."),TRr=l(),Xt=a("div"),F(xx.$$.fragment),MRr=l(),a4e=a("p"),ERr=o("Instantiates one of the base model classes of the library from a configuration."),CRr=l(),Vc=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),ARr=o("not"),LRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),yRr=o("from_pretrained()"),xRr=o(" to load the model weights."),$Rr=l(),F(_5.$$.fragment),kRr=l(),Gr=a("div"),F($x.$$.fragment),SRr=l(),s4e=a("p"),RRr=o("Instantiate one of the base model classes of the library from a pretrained model."),PRr=l(),vn=a("p"),BRr=o("The model class to instantiate is selected based on the "),l4e=a("code"),IRr=o("model_type"),NRr=o(` property of the config object (either
passed as an argument or loaded from `),i4e=a("code"),qRr=o("pretrained_model_name_or_path"),jRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(":"),ORr=l(),oe=a("ul"),u5=a("li"),c4e=a("strong"),VRr=o("albert"),XRr=o(" \u2014 "),EK=a("a"),zRr=o("FlaxAlbertModel"),WRr=o(" (ALBERT model)"),QRr=l(),b5=a("li"),f4e=a("strong"),HRr=o("bart"),URr=o(" \u2014 "),CK=a("a"),JRr=o("FlaxBartModel"),YRr=o(" (BART model)"),KRr=l(),v5=a("li"),m4e=a("strong"),ZRr=o("beit"),ePr=o(" \u2014 "),wK=a("a"),oPr=o("FlaxBeitModel"),rPr=o(" (BEiT model)"),tPr=l(),F5=a("li"),g4e=a("strong"),aPr=o("bert"),nPr=o(" \u2014 "),AK=a("a"),sPr=o("FlaxBertModel"),lPr=o(" (BERT model)"),iPr=l(),T5=a("li"),h4e=a("strong"),dPr=o("big_bird"),cPr=o(" \u2014 "),LK=a("a"),fPr=o("FlaxBigBirdModel"),mPr=o(" (BigBird model)"),gPr=l(),M5=a("li"),p4e=a("strong"),hPr=o("blenderbot"),pPr=o(" \u2014 "),yK=a("a"),_Pr=o("FlaxBlenderbotModel"),uPr=o(" (Blenderbot model)"),bPr=l(),E5=a("li"),_4e=a("strong"),vPr=o("blenderbot-small"),FPr=o(" \u2014 "),xK=a("a"),TPr=o("FlaxBlenderbotSmallModel"),MPr=o(" (BlenderbotSmall model)"),EPr=l(),C5=a("li"),u4e=a("strong"),CPr=o("clip"),wPr=o(" \u2014 "),$K=a("a"),APr=o("FlaxCLIPModel"),LPr=o(" (CLIP model)"),yPr=l(),w5=a("li"),b4e=a("strong"),xPr=o("distilbert"),$Pr=o(" \u2014 "),kK=a("a"),kPr=o("FlaxDistilBertModel"),SPr=o(" (DistilBERT model)"),RPr=l(),A5=a("li"),v4e=a("strong"),PPr=o("electra"),BPr=o(" \u2014 "),SK=a("a"),IPr=o("FlaxElectraModel"),NPr=o(" (ELECTRA model)"),qPr=l(),L5=a("li"),F4e=a("strong"),jPr=o("gpt2"),DPr=o(" \u2014 "),RK=a("a"),GPr=o("FlaxGPT2Model"),OPr=o(" (OpenAI GPT-2 model)"),VPr=l(),y5=a("li"),T4e=a("strong"),XPr=o("gpt_neo"),zPr=o(" \u2014 "),PK=a("a"),WPr=o("FlaxGPTNeoModel"),QPr=o(" (GPT Neo model)"),HPr=l(),x5=a("li"),M4e=a("strong"),UPr=o("gptj"),JPr=o(" \u2014 "),BK=a("a"),YPr=o("FlaxGPTJModel"),KPr=o(" (GPT-J model)"),ZPr=l(),$5=a("li"),E4e=a("strong"),eBr=o("longt5"),oBr=o(" \u2014 "),IK=a("a"),rBr=o("FlaxLongT5Model"),tBr=o(" (LongT5 model)"),aBr=l(),k5=a("li"),C4e=a("strong"),nBr=o("marian"),sBr=o(" \u2014 "),NK=a("a"),lBr=o("FlaxMarianModel"),iBr=o(" (Marian model)"),dBr=l(),S5=a("li"),w4e=a("strong"),cBr=o("mbart"),fBr=o(" \u2014 "),qK=a("a"),mBr=o("FlaxMBartModel"),gBr=o(" (mBART model)"),hBr=l(),R5=a("li"),A4e=a("strong"),pBr=o("mt5"),_Br=o(" \u2014 "),jK=a("a"),uBr=o("FlaxMT5Model"),bBr=o(" (MT5 model)"),vBr=l(),P5=a("li"),L4e=a("strong"),FBr=o("opt"),TBr=o(" \u2014 "),DK=a("a"),MBr=o("FlaxOPTModel"),EBr=o(" (OPT model)"),CBr=l(),B5=a("li"),y4e=a("strong"),wBr=o("pegasus"),ABr=o(" \u2014 "),GK=a("a"),LBr=o("FlaxPegasusModel"),yBr=o(" (Pegasus model)"),xBr=l(),I5=a("li"),x4e=a("strong"),$Br=o("roberta"),kBr=o(" \u2014 "),OK=a("a"),SBr=o("FlaxRobertaModel"),RBr=o(" (RoBERTa model)"),PBr=l(),N5=a("li"),$4e=a("strong"),BBr=o("roformer"),IBr=o(" \u2014 "),VK=a("a"),NBr=o("FlaxRoFormerModel"),qBr=o(" (RoFormer model)"),jBr=l(),q5=a("li"),k4e=a("strong"),DBr=o("t5"),GBr=o(" \u2014 "),XK=a("a"),OBr=o("FlaxT5Model"),VBr=o(" (T5 model)"),XBr=l(),j5=a("li"),S4e=a("strong"),zBr=o("vision-text-dual-encoder"),WBr=o(" \u2014 "),zK=a("a"),QBr=o("FlaxVisionTextDualEncoderModel"),HBr=o(" (VisionTextDualEncoder model)"),UBr=l(),D5=a("li"),R4e=a("strong"),JBr=o("vit"),YBr=o(" \u2014 "),WK=a("a"),KBr=o("FlaxViTModel"),ZBr=o(" (ViT model)"),eIr=l(),G5=a("li"),P4e=a("strong"),oIr=o("wav2vec2"),rIr=o(" \u2014 "),QK=a("a"),tIr=o("FlaxWav2Vec2Model"),aIr=o(" (Wav2Vec2 model)"),nIr=l(),O5=a("li"),B4e=a("strong"),sIr=o("xglm"),lIr=o(" \u2014 "),HK=a("a"),iIr=o("FlaxXGLMModel"),dIr=o(" (XGLM model)"),cIr=l(),V5=a("li"),I4e=a("strong"),fIr=o("xlm-roberta"),mIr=o(" \u2014 "),UK=a("a"),gIr=o("FlaxXLMRobertaModel"),hIr=o(" (XLM-RoBERTa model)"),pIr=l(),F(X5.$$.fragment),YOe=l(),Xc=a("h2"),z5=a("a"),N4e=a("span"),F(kx.$$.fragment),_Ir=l(),q4e=a("span"),uIr=o("FlaxAutoModelForCausalLM"),KOe=l(),hr=a("div"),F(Sx.$$.fragment),bIr=l(),zc=a("p"),vIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JK=a("a"),FIr=o("from_pretrained()"),TIr=o(" class method or the "),YK=a("a"),MIr=o("from_config()"),EIr=o(` class
method.`),CIr=l(),Rx=a("p"),wIr=o("This class cannot be instantiated directly using "),j4e=a("code"),AIr=o("__init__()"),LIr=o(" (throws an error)."),yIr=l(),zt=a("div"),F(Px.$$.fragment),xIr=l(),D4e=a("p"),$Ir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kIr=l(),Wc=a("p"),SIr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),RIr=o("not"),PIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),BIr=o("from_pretrained()"),IIr=o(" to load the model weights."),NIr=l(),F(W5.$$.fragment),qIr=l(),Or=a("div"),F(Bx.$$.fragment),jIr=l(),O4e=a("p"),DIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GIr=l(),Fn=a("p"),OIr=o("The model class to instantiate is selected based on the "),V4e=a("code"),VIr=o("model_type"),XIr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),zIr=o("pretrained_model_name_or_path"),WIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),QIr=o("pretrained_model_name_or_path"),HIr=o(":"),UIr=l(),xe=a("ul"),Q5=a("li"),W4e=a("strong"),JIr=o("bart"),YIr=o(" \u2014 "),ZK=a("a"),KIr=o("FlaxBartForCausalLM"),ZIr=o(" (BART model)"),eNr=l(),H5=a("li"),Q4e=a("strong"),oNr=o("bert"),rNr=o(" \u2014 "),eZ=a("a"),tNr=o("FlaxBertForCausalLM"),aNr=o(" (BERT model)"),nNr=l(),U5=a("li"),H4e=a("strong"),sNr=o("big_bird"),lNr=o(" \u2014 "),oZ=a("a"),iNr=o("FlaxBigBirdForCausalLM"),dNr=o(" (BigBird model)"),cNr=l(),J5=a("li"),U4e=a("strong"),fNr=o("electra"),mNr=o(" \u2014 "),rZ=a("a"),gNr=o("FlaxElectraForCausalLM"),hNr=o(" (ELECTRA model)"),pNr=l(),Y5=a("li"),J4e=a("strong"),_Nr=o("gpt2"),uNr=o(" \u2014 "),tZ=a("a"),bNr=o("FlaxGPT2LMHeadModel"),vNr=o(" (OpenAI GPT-2 model)"),FNr=l(),K5=a("li"),Y4e=a("strong"),TNr=o("gpt_neo"),MNr=o(" \u2014 "),aZ=a("a"),ENr=o("FlaxGPTNeoForCausalLM"),CNr=o(" (GPT Neo model)"),wNr=l(),Z5=a("li"),K4e=a("strong"),ANr=o("gptj"),LNr=o(" \u2014 "),nZ=a("a"),yNr=o("FlaxGPTJForCausalLM"),xNr=o(" (GPT-J model)"),$Nr=l(),e3=a("li"),Z4e=a("strong"),kNr=o("opt"),SNr=o(" \u2014 "),sZ=a("a"),RNr=o("FlaxOPTForCausalLM"),PNr=o(" (OPT model)"),BNr=l(),o3=a("li"),eCe=a("strong"),INr=o("roberta"),NNr=o(" \u2014 "),lZ=a("a"),qNr=o("FlaxRobertaForCausalLM"),jNr=o(" (RoBERTa model)"),DNr=l(),r3=a("li"),oCe=a("strong"),GNr=o("xglm"),ONr=o(" \u2014 "),iZ=a("a"),VNr=o("FlaxXGLMForCausalLM"),XNr=o(" (XGLM model)"),zNr=l(),F(t3.$$.fragment),ZOe=l(),Qc=a("h2"),a3=a("a"),rCe=a("span"),F(Ix.$$.fragment),WNr=l(),tCe=a("span"),QNr=o("FlaxAutoModelForPreTraining"),eVe=l(),pr=a("div"),F(Nx.$$.fragment),HNr=l(),Hc=a("p"),UNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dZ=a("a"),JNr=o("from_pretrained()"),YNr=o(" class method or the "),cZ=a("a"),KNr=o("from_config()"),ZNr=o(` class
method.`),eqr=l(),qx=a("p"),oqr=o("This class cannot be instantiated directly using "),aCe=a("code"),rqr=o("__init__()"),tqr=o(" (throws an error)."),aqr=l(),Wt=a("div"),F(jx.$$.fragment),nqr=l(),nCe=a("p"),sqr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lqr=l(),Uc=a("p"),iqr=o(`Note:
Loading a model from its configuration file does `),sCe=a("strong"),dqr=o("not"),cqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),fqr=o("from_pretrained()"),mqr=o(" to load the model weights."),gqr=l(),F(n3.$$.fragment),hqr=l(),Vr=a("div"),F(Dx.$$.fragment),pqr=l(),lCe=a("p"),_qr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uqr=l(),Tn=a("p"),bqr=o("The model class to instantiate is selected based on the "),iCe=a("code"),vqr=o("model_type"),Fqr=o(` property of the config object (either
passed as an argument or loaded from `),dCe=a("code"),Tqr=o("pretrained_model_name_or_path"),Mqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=a("code"),Eqr=o("pretrained_model_name_or_path"),Cqr=o(":"),wqr=l(),Ee=a("ul"),s3=a("li"),fCe=a("strong"),Aqr=o("albert"),Lqr=o(" \u2014 "),mZ=a("a"),yqr=o("FlaxAlbertForPreTraining"),xqr=o(" (ALBERT model)"),$qr=l(),l3=a("li"),mCe=a("strong"),kqr=o("bart"),Sqr=o(" \u2014 "),gZ=a("a"),Rqr=o("FlaxBartForConditionalGeneration"),Pqr=o(" (BART model)"),Bqr=l(),i3=a("li"),gCe=a("strong"),Iqr=o("bert"),Nqr=o(" \u2014 "),hZ=a("a"),qqr=o("FlaxBertForPreTraining"),jqr=o(" (BERT model)"),Dqr=l(),d3=a("li"),hCe=a("strong"),Gqr=o("big_bird"),Oqr=o(" \u2014 "),pZ=a("a"),Vqr=o("FlaxBigBirdForPreTraining"),Xqr=o(" (BigBird model)"),zqr=l(),c3=a("li"),pCe=a("strong"),Wqr=o("electra"),Qqr=o(" \u2014 "),_Z=a("a"),Hqr=o("FlaxElectraForPreTraining"),Uqr=o(" (ELECTRA model)"),Jqr=l(),f3=a("li"),_Ce=a("strong"),Yqr=o("longt5"),Kqr=o(" \u2014 "),uZ=a("a"),Zqr=o("FlaxLongT5ForConditionalGeneration"),ejr=o(" (LongT5 model)"),ojr=l(),m3=a("li"),uCe=a("strong"),rjr=o("mbart"),tjr=o(" \u2014 "),bZ=a("a"),ajr=o("FlaxMBartForConditionalGeneration"),njr=o(" (mBART model)"),sjr=l(),g3=a("li"),bCe=a("strong"),ljr=o("mt5"),ijr=o(" \u2014 "),vZ=a("a"),djr=o("FlaxMT5ForConditionalGeneration"),cjr=o(" (MT5 model)"),fjr=l(),h3=a("li"),vCe=a("strong"),mjr=o("roberta"),gjr=o(" \u2014 "),FZ=a("a"),hjr=o("FlaxRobertaForMaskedLM"),pjr=o(" (RoBERTa model)"),_jr=l(),p3=a("li"),FCe=a("strong"),ujr=o("roformer"),bjr=o(" \u2014 "),TZ=a("a"),vjr=o("FlaxRoFormerForMaskedLM"),Fjr=o(" (RoFormer model)"),Tjr=l(),_3=a("li"),TCe=a("strong"),Mjr=o("t5"),Ejr=o(" \u2014 "),MZ=a("a"),Cjr=o("FlaxT5ForConditionalGeneration"),wjr=o(" (T5 model)"),Ajr=l(),u3=a("li"),MCe=a("strong"),Ljr=o("wav2vec2"),yjr=o(" \u2014 "),EZ=a("a"),xjr=o("FlaxWav2Vec2ForPreTraining"),$jr=o(" (Wav2Vec2 model)"),kjr=l(),b3=a("li"),ECe=a("strong"),Sjr=o("xlm-roberta"),Rjr=o(" \u2014 "),CZ=a("a"),Pjr=o("FlaxXLMRobertaForMaskedLM"),Bjr=o(" (XLM-RoBERTa model)"),Ijr=l(),F(v3.$$.fragment),oVe=l(),Jc=a("h2"),F3=a("a"),CCe=a("span"),F(Gx.$$.fragment),Njr=l(),wCe=a("span"),qjr=o("FlaxAutoModelForMaskedLM"),rVe=l(),_r=a("div"),F(Ox.$$.fragment),jjr=l(),Yc=a("p"),Djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wZ=a("a"),Gjr=o("from_pretrained()"),Ojr=o(" class method or the "),AZ=a("a"),Vjr=o("from_config()"),Xjr=o(` class
method.`),zjr=l(),Vx=a("p"),Wjr=o("This class cannot be instantiated directly using "),ACe=a("code"),Qjr=o("__init__()"),Hjr=o(" (throws an error)."),Ujr=l(),Qt=a("div"),F(Xx.$$.fragment),Jjr=l(),LCe=a("p"),Yjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Kjr=l(),Kc=a("p"),Zjr=o(`Note:
Loading a model from its configuration file does `),yCe=a("strong"),eDr=o("not"),oDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=a("a"),rDr=o("from_pretrained()"),tDr=o(" to load the model weights."),aDr=l(),F(T3.$$.fragment),nDr=l(),Xr=a("div"),F(zx.$$.fragment),sDr=l(),xCe=a("p"),lDr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iDr=l(),Mn=a("p"),dDr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),cDr=o("model_type"),fDr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),mDr=o("pretrained_model_name_or_path"),gDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),hDr=o("pretrained_model_name_or_path"),pDr=o(":"),_Dr=l(),$e=a("ul"),M3=a("li"),RCe=a("strong"),uDr=o("albert"),bDr=o(" \u2014 "),yZ=a("a"),vDr=o("FlaxAlbertForMaskedLM"),FDr=o(" (ALBERT model)"),TDr=l(),E3=a("li"),PCe=a("strong"),MDr=o("bart"),EDr=o(" \u2014 "),xZ=a("a"),CDr=o("FlaxBartForConditionalGeneration"),wDr=o(" (BART model)"),ADr=l(),C3=a("li"),BCe=a("strong"),LDr=o("bert"),yDr=o(" \u2014 "),$Z=a("a"),xDr=o("FlaxBertForMaskedLM"),$Dr=o(" (BERT model)"),kDr=l(),w3=a("li"),ICe=a("strong"),SDr=o("big_bird"),RDr=o(" \u2014 "),kZ=a("a"),PDr=o("FlaxBigBirdForMaskedLM"),BDr=o(" (BigBird model)"),IDr=l(),A3=a("li"),NCe=a("strong"),NDr=o("distilbert"),qDr=o(" \u2014 "),SZ=a("a"),jDr=o("FlaxDistilBertForMaskedLM"),DDr=o(" (DistilBERT model)"),GDr=l(),L3=a("li"),qCe=a("strong"),ODr=o("electra"),VDr=o(" \u2014 "),RZ=a("a"),XDr=o("FlaxElectraForMaskedLM"),zDr=o(" (ELECTRA model)"),WDr=l(),y3=a("li"),jCe=a("strong"),QDr=o("mbart"),HDr=o(" \u2014 "),PZ=a("a"),UDr=o("FlaxMBartForConditionalGeneration"),JDr=o(" (mBART model)"),YDr=l(),x3=a("li"),DCe=a("strong"),KDr=o("roberta"),ZDr=o(" \u2014 "),BZ=a("a"),eGr=o("FlaxRobertaForMaskedLM"),oGr=o(" (RoBERTa model)"),rGr=l(),$3=a("li"),GCe=a("strong"),tGr=o("roformer"),aGr=o(" \u2014 "),IZ=a("a"),nGr=o("FlaxRoFormerForMaskedLM"),sGr=o(" (RoFormer model)"),lGr=l(),k3=a("li"),OCe=a("strong"),iGr=o("xlm-roberta"),dGr=o(" \u2014 "),NZ=a("a"),cGr=o("FlaxXLMRobertaForMaskedLM"),fGr=o(" (XLM-RoBERTa model)"),mGr=l(),F(S3.$$.fragment),tVe=l(),Zc=a("h2"),R3=a("a"),VCe=a("span"),F(Wx.$$.fragment),gGr=l(),XCe=a("span"),hGr=o("FlaxAutoModelForSeq2SeqLM"),aVe=l(),ur=a("div"),F(Qx.$$.fragment),pGr=l(),ef=a("p"),_Gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=a("a"),uGr=o("from_pretrained()"),bGr=o(" class method or the "),jZ=a("a"),vGr=o("from_config()"),FGr=o(` class
method.`),TGr=l(),Hx=a("p"),MGr=o("This class cannot be instantiated directly using "),zCe=a("code"),EGr=o("__init__()"),CGr=o(" (throws an error)."),wGr=l(),Ht=a("div"),F(Ux.$$.fragment),AGr=l(),WCe=a("p"),LGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yGr=l(),of=a("p"),xGr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),$Gr=o("not"),kGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),SGr=o("from_pretrained()"),RGr=o(" to load the model weights."),PGr=l(),F(P3.$$.fragment),BGr=l(),zr=a("div"),F(Jx.$$.fragment),IGr=l(),HCe=a("p"),NGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qGr=l(),En=a("p"),jGr=o("The model class to instantiate is selected based on the "),UCe=a("code"),DGr=o("model_type"),GGr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),OGr=o("pretrained_model_name_or_path"),VGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),XGr=o("pretrained_model_name_or_path"),zGr=o(":"),WGr=l(),ke=a("ul"),B3=a("li"),KCe=a("strong"),QGr=o("bart"),HGr=o(" \u2014 "),GZ=a("a"),UGr=o("FlaxBartForConditionalGeneration"),JGr=o(" (BART model)"),YGr=l(),I3=a("li"),ZCe=a("strong"),KGr=o("blenderbot"),ZGr=o(" \u2014 "),OZ=a("a"),eOr=o("FlaxBlenderbotForConditionalGeneration"),oOr=o(" (Blenderbot model)"),rOr=l(),N3=a("li"),e5e=a("strong"),tOr=o("blenderbot-small"),aOr=o(" \u2014 "),VZ=a("a"),nOr=o("FlaxBlenderbotSmallForConditionalGeneration"),sOr=o(" (BlenderbotSmall model)"),lOr=l(),q3=a("li"),o5e=a("strong"),iOr=o("encoder-decoder"),dOr=o(" \u2014 "),XZ=a("a"),cOr=o("FlaxEncoderDecoderModel"),fOr=o(" (Encoder decoder model)"),mOr=l(),j3=a("li"),r5e=a("strong"),gOr=o("longt5"),hOr=o(" \u2014 "),zZ=a("a"),pOr=o("FlaxLongT5ForConditionalGeneration"),_Or=o(" (LongT5 model)"),uOr=l(),D3=a("li"),t5e=a("strong"),bOr=o("marian"),vOr=o(" \u2014 "),WZ=a("a"),FOr=o("FlaxMarianMTModel"),TOr=o(" (Marian model)"),MOr=l(),G3=a("li"),a5e=a("strong"),EOr=o("mbart"),COr=o(" \u2014 "),QZ=a("a"),wOr=o("FlaxMBartForConditionalGeneration"),AOr=o(" (mBART model)"),LOr=l(),O3=a("li"),n5e=a("strong"),yOr=o("mt5"),xOr=o(" \u2014 "),HZ=a("a"),$Or=o("FlaxMT5ForConditionalGeneration"),kOr=o(" (MT5 model)"),SOr=l(),V3=a("li"),s5e=a("strong"),ROr=o("pegasus"),POr=o(" \u2014 "),UZ=a("a"),BOr=o("FlaxPegasusForConditionalGeneration"),IOr=o(" (Pegasus model)"),NOr=l(),X3=a("li"),l5e=a("strong"),qOr=o("t5"),jOr=o(" \u2014 "),JZ=a("a"),DOr=o("FlaxT5ForConditionalGeneration"),GOr=o(" (T5 model)"),OOr=l(),F(z3.$$.fragment),nVe=l(),rf=a("h2"),W3=a("a"),i5e=a("span"),F(Yx.$$.fragment),VOr=l(),d5e=a("span"),XOr=o("FlaxAutoModelForSequenceClassification"),sVe=l(),br=a("div"),F(Kx.$$.fragment),zOr=l(),tf=a("p"),WOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=a("a"),QOr=o("from_pretrained()"),HOr=o(" class method or the "),KZ=a("a"),UOr=o("from_config()"),JOr=o(` class
method.`),YOr=l(),Zx=a("p"),KOr=o("This class cannot be instantiated directly using "),c5e=a("code"),ZOr=o("__init__()"),eVr=o(" (throws an error)."),oVr=l(),Ut=a("div"),F(e$.$$.fragment),rVr=l(),f5e=a("p"),tVr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aVr=l(),af=a("p"),nVr=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),sVr=o("not"),lVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),iVr=o("from_pretrained()"),dVr=o(" to load the model weights."),cVr=l(),F(Q3.$$.fragment),fVr=l(),Wr=a("div"),F(o$.$$.fragment),mVr=l(),g5e=a("p"),gVr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hVr=l(),Cn=a("p"),pVr=o("The model class to instantiate is selected based on the "),h5e=a("code"),_Vr=o("model_type"),uVr=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),bVr=o("pretrained_model_name_or_path"),vVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(":"),MVr=l(),Se=a("ul"),H3=a("li"),u5e=a("strong"),EVr=o("albert"),CVr=o(" \u2014 "),eee=a("a"),wVr=o("FlaxAlbertForSequenceClassification"),AVr=o(" (ALBERT model)"),LVr=l(),U3=a("li"),b5e=a("strong"),yVr=o("bart"),xVr=o(" \u2014 "),oee=a("a"),$Vr=o("FlaxBartForSequenceClassification"),kVr=o(" (BART model)"),SVr=l(),J3=a("li"),v5e=a("strong"),RVr=o("bert"),PVr=o(" \u2014 "),ree=a("a"),BVr=o("FlaxBertForSequenceClassification"),IVr=o(" (BERT model)"),NVr=l(),Y3=a("li"),F5e=a("strong"),qVr=o("big_bird"),jVr=o(" \u2014 "),tee=a("a"),DVr=o("FlaxBigBirdForSequenceClassification"),GVr=o(" (BigBird model)"),OVr=l(),K3=a("li"),T5e=a("strong"),VVr=o("distilbert"),XVr=o(" \u2014 "),aee=a("a"),zVr=o("FlaxDistilBertForSequenceClassification"),WVr=o(" (DistilBERT model)"),QVr=l(),Z3=a("li"),M5e=a("strong"),HVr=o("electra"),UVr=o(" \u2014 "),nee=a("a"),JVr=o("FlaxElectraForSequenceClassification"),YVr=o(" (ELECTRA model)"),KVr=l(),e0=a("li"),E5e=a("strong"),ZVr=o("mbart"),eXr=o(" \u2014 "),see=a("a"),oXr=o("FlaxMBartForSequenceClassification"),rXr=o(" (mBART model)"),tXr=l(),o0=a("li"),C5e=a("strong"),aXr=o("roberta"),nXr=o(" \u2014 "),lee=a("a"),sXr=o("FlaxRobertaForSequenceClassification"),lXr=o(" (RoBERTa model)"),iXr=l(),r0=a("li"),w5e=a("strong"),dXr=o("roformer"),cXr=o(" \u2014 "),iee=a("a"),fXr=o("FlaxRoFormerForSequenceClassification"),mXr=o(" (RoFormer model)"),gXr=l(),t0=a("li"),A5e=a("strong"),hXr=o("xlm-roberta"),pXr=o(" \u2014 "),dee=a("a"),_Xr=o("FlaxXLMRobertaForSequenceClassification"),uXr=o(" (XLM-RoBERTa model)"),bXr=l(),F(a0.$$.fragment),lVe=l(),nf=a("h2"),n0=a("a"),L5e=a("span"),F(r$.$$.fragment),vXr=l(),y5e=a("span"),FXr=o("FlaxAutoModelForQuestionAnswering"),iVe=l(),vr=a("div"),F(t$.$$.fragment),TXr=l(),sf=a("p"),MXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cee=a("a"),EXr=o("from_pretrained()"),CXr=o(" class method or the "),fee=a("a"),wXr=o("from_config()"),AXr=o(` class
method.`),LXr=l(),a$=a("p"),yXr=o("This class cannot be instantiated directly using "),x5e=a("code"),xXr=o("__init__()"),$Xr=o(" (throws an error)."),kXr=l(),Jt=a("div"),F(n$.$$.fragment),SXr=l(),$5e=a("p"),RXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PXr=l(),lf=a("p"),BXr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),IXr=o("not"),NXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),qXr=o("from_pretrained()"),jXr=o(" to load the model weights."),DXr=l(),F(s0.$$.fragment),GXr=l(),Qr=a("div"),F(s$.$$.fragment),OXr=l(),S5e=a("p"),VXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XXr=l(),wn=a("p"),zXr=o("The model class to instantiate is selected based on the "),R5e=a("code"),WXr=o("model_type"),QXr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),HXr=o("pretrained_model_name_or_path"),UXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(":"),KXr=l(),Re=a("ul"),l0=a("li"),I5e=a("strong"),ZXr=o("albert"),ezr=o(" \u2014 "),gee=a("a"),ozr=o("FlaxAlbertForQuestionAnswering"),rzr=o(" (ALBERT model)"),tzr=l(),i0=a("li"),N5e=a("strong"),azr=o("bart"),nzr=o(" \u2014 "),hee=a("a"),szr=o("FlaxBartForQuestionAnswering"),lzr=o(" (BART model)"),izr=l(),d0=a("li"),q5e=a("strong"),dzr=o("bert"),czr=o(" \u2014 "),pee=a("a"),fzr=o("FlaxBertForQuestionAnswering"),mzr=o(" (BERT model)"),gzr=l(),c0=a("li"),j5e=a("strong"),hzr=o("big_bird"),pzr=o(" \u2014 "),_ee=a("a"),_zr=o("FlaxBigBirdForQuestionAnswering"),uzr=o(" (BigBird model)"),bzr=l(),f0=a("li"),D5e=a("strong"),vzr=o("distilbert"),Fzr=o(" \u2014 "),uee=a("a"),Tzr=o("FlaxDistilBertForQuestionAnswering"),Mzr=o(" (DistilBERT model)"),Ezr=l(),m0=a("li"),G5e=a("strong"),Czr=o("electra"),wzr=o(" \u2014 "),bee=a("a"),Azr=o("FlaxElectraForQuestionAnswering"),Lzr=o(" (ELECTRA model)"),yzr=l(),g0=a("li"),O5e=a("strong"),xzr=o("mbart"),$zr=o(" \u2014 "),vee=a("a"),kzr=o("FlaxMBartForQuestionAnswering"),Szr=o(" (mBART model)"),Rzr=l(),h0=a("li"),V5e=a("strong"),Pzr=o("roberta"),Bzr=o(" \u2014 "),Fee=a("a"),Izr=o("FlaxRobertaForQuestionAnswering"),Nzr=o(" (RoBERTa model)"),qzr=l(),p0=a("li"),X5e=a("strong"),jzr=o("roformer"),Dzr=o(" \u2014 "),Tee=a("a"),Gzr=o("FlaxRoFormerForQuestionAnswering"),Ozr=o(" (RoFormer model)"),Vzr=l(),_0=a("li"),z5e=a("strong"),Xzr=o("xlm-roberta"),zzr=o(" \u2014 "),Mee=a("a"),Wzr=o("FlaxXLMRobertaForQuestionAnswering"),Qzr=o(" (XLM-RoBERTa model)"),Hzr=l(),F(u0.$$.fragment),dVe=l(),df=a("h2"),b0=a("a"),W5e=a("span"),F(l$.$$.fragment),Uzr=l(),Q5e=a("span"),Jzr=o("FlaxAutoModelForTokenClassification"),cVe=l(),Fr=a("div"),F(i$.$$.fragment),Yzr=l(),cf=a("p"),Kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eee=a("a"),Zzr=o("from_pretrained()"),eWr=o(" class method or the "),Cee=a("a"),oWr=o("from_config()"),rWr=o(` class
method.`),tWr=l(),d$=a("p"),aWr=o("This class cannot be instantiated directly using "),H5e=a("code"),nWr=o("__init__()"),sWr=o(" (throws an error)."),lWr=l(),Yt=a("div"),F(c$.$$.fragment),iWr=l(),U5e=a("p"),dWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cWr=l(),ff=a("p"),fWr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),mWr=o("not"),gWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=a("a"),hWr=o("from_pretrained()"),pWr=o(" to load the model weights."),_Wr=l(),F(v0.$$.fragment),uWr=l(),Hr=a("div"),F(f$.$$.fragment),bWr=l(),Y5e=a("p"),vWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FWr=l(),An=a("p"),TWr=o("The model class to instantiate is selected based on the "),K5e=a("code"),MWr=o("model_type"),EWr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),CWr=o("pretrained_model_name_or_path"),wWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),AWr=o("pretrained_model_name_or_path"),LWr=o(":"),yWr=l(),Ve=a("ul"),F0=a("li"),o3e=a("strong"),xWr=o("albert"),$Wr=o(" \u2014 "),Aee=a("a"),kWr=o("FlaxAlbertForTokenClassification"),SWr=o(" (ALBERT model)"),RWr=l(),T0=a("li"),r3e=a("strong"),PWr=o("bert"),BWr=o(" \u2014 "),Lee=a("a"),IWr=o("FlaxBertForTokenClassification"),NWr=o(" (BERT model)"),qWr=l(),M0=a("li"),t3e=a("strong"),jWr=o("big_bird"),DWr=o(" \u2014 "),yee=a("a"),GWr=o("FlaxBigBirdForTokenClassification"),OWr=o(" (BigBird model)"),VWr=l(),E0=a("li"),a3e=a("strong"),XWr=o("distilbert"),zWr=o(" \u2014 "),xee=a("a"),WWr=o("FlaxDistilBertForTokenClassification"),QWr=o(" (DistilBERT model)"),HWr=l(),C0=a("li"),n3e=a("strong"),UWr=o("electra"),JWr=o(" \u2014 "),$ee=a("a"),YWr=o("FlaxElectraForTokenClassification"),KWr=o(" (ELECTRA model)"),ZWr=l(),w0=a("li"),s3e=a("strong"),eQr=o("roberta"),oQr=o(" \u2014 "),kee=a("a"),rQr=o("FlaxRobertaForTokenClassification"),tQr=o(" (RoBERTa model)"),aQr=l(),A0=a("li"),l3e=a("strong"),nQr=o("roformer"),sQr=o(" \u2014 "),See=a("a"),lQr=o("FlaxRoFormerForTokenClassification"),iQr=o(" (RoFormer model)"),dQr=l(),L0=a("li"),i3e=a("strong"),cQr=o("xlm-roberta"),fQr=o(" \u2014 "),Ree=a("a"),mQr=o("FlaxXLMRobertaForTokenClassification"),gQr=o(" (XLM-RoBERTa model)"),hQr=l(),F(y0.$$.fragment),fVe=l(),mf=a("h2"),x0=a("a"),d3e=a("span"),F(m$.$$.fragment),pQr=l(),c3e=a("span"),_Qr=o("FlaxAutoModelForMultipleChoice"),mVe=l(),Tr=a("div"),F(g$.$$.fragment),uQr=l(),gf=a("p"),bQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pee=a("a"),vQr=o("from_pretrained()"),FQr=o(" class method or the "),Bee=a("a"),TQr=o("from_config()"),MQr=o(` class
method.`),EQr=l(),h$=a("p"),CQr=o("This class cannot be instantiated directly using "),f3e=a("code"),wQr=o("__init__()"),AQr=o(" (throws an error)."),LQr=l(),Kt=a("div"),F(p$.$$.fragment),yQr=l(),m3e=a("p"),xQr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Qr=l(),hf=a("p"),kQr=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),SQr=o("not"),RQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("a"),PQr=o("from_pretrained()"),BQr=o(" to load the model weights."),IQr=l(),F($0.$$.fragment),NQr=l(),Ur=a("div"),F(_$.$$.fragment),qQr=l(),h3e=a("p"),jQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DQr=l(),Ln=a("p"),GQr=o("The model class to instantiate is selected based on the "),p3e=a("code"),OQr=o("model_type"),VQr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),XQr=o("pretrained_model_name_or_path"),zQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),WQr=o("pretrained_model_name_or_path"),QQr=o(":"),HQr=l(),Xe=a("ul"),k0=a("li"),b3e=a("strong"),UQr=o("albert"),JQr=o(" \u2014 "),Nee=a("a"),YQr=o("FlaxAlbertForMultipleChoice"),KQr=o(" (ALBERT model)"),ZQr=l(),S0=a("li"),v3e=a("strong"),eHr=o("bert"),oHr=o(" \u2014 "),qee=a("a"),rHr=o("FlaxBertForMultipleChoice"),tHr=o(" (BERT model)"),aHr=l(),R0=a("li"),F3e=a("strong"),nHr=o("big_bird"),sHr=o(" \u2014 "),jee=a("a"),lHr=o("FlaxBigBirdForMultipleChoice"),iHr=o(" (BigBird model)"),dHr=l(),P0=a("li"),T3e=a("strong"),cHr=o("distilbert"),fHr=o(" \u2014 "),Dee=a("a"),mHr=o("FlaxDistilBertForMultipleChoice"),gHr=o(" (DistilBERT model)"),hHr=l(),B0=a("li"),M3e=a("strong"),pHr=o("electra"),_Hr=o(" \u2014 "),Gee=a("a"),uHr=o("FlaxElectraForMultipleChoice"),bHr=o(" (ELECTRA model)"),vHr=l(),I0=a("li"),E3e=a("strong"),FHr=o("roberta"),THr=o(" \u2014 "),Oee=a("a"),MHr=o("FlaxRobertaForMultipleChoice"),EHr=o(" (RoBERTa model)"),CHr=l(),N0=a("li"),C3e=a("strong"),wHr=o("roformer"),AHr=o(" \u2014 "),Vee=a("a"),LHr=o("FlaxRoFormerForMultipleChoice"),yHr=o(" (RoFormer model)"),xHr=l(),q0=a("li"),w3e=a("strong"),$Hr=o("xlm-roberta"),kHr=o(" \u2014 "),Xee=a("a"),SHr=o("FlaxXLMRobertaForMultipleChoice"),RHr=o(" (XLM-RoBERTa model)"),PHr=l(),F(j0.$$.fragment),gVe=l(),pf=a("h2"),D0=a("a"),A3e=a("span"),F(u$.$$.fragment),BHr=l(),L3e=a("span"),IHr=o("FlaxAutoModelForNextSentencePrediction"),hVe=l(),Mr=a("div"),F(b$.$$.fragment),NHr=l(),_f=a("p"),qHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zee=a("a"),jHr=o("from_pretrained()"),DHr=o(" class method or the "),Wee=a("a"),GHr=o("from_config()"),OHr=o(` class
method.`),VHr=l(),v$=a("p"),XHr=o("This class cannot be instantiated directly using "),y3e=a("code"),zHr=o("__init__()"),WHr=o(" (throws an error)."),QHr=l(),Zt=a("div"),F(F$.$$.fragment),HHr=l(),x3e=a("p"),UHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JHr=l(),uf=a("p"),YHr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),KHr=o("not"),ZHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),eUr=o("from_pretrained()"),oUr=o(" to load the model weights."),rUr=l(),F(G0.$$.fragment),tUr=l(),Jr=a("div"),F(T$.$$.fragment),aUr=l(),k3e=a("p"),nUr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sUr=l(),yn=a("p"),lUr=o("The model class to instantiate is selected based on the "),S3e=a("code"),iUr=o("model_type"),dUr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),cUr=o("pretrained_model_name_or_path"),fUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),mUr=o("pretrained_model_name_or_path"),gUr=o(":"),hUr=l(),B3e=a("ul"),O0=a("li"),I3e=a("strong"),pUr=o("bert"),_Ur=o(" \u2014 "),Hee=a("a"),uUr=o("FlaxBertForNextSentencePrediction"),bUr=o(" (BERT model)"),vUr=l(),F(V0.$$.fragment),pVe=l(),bf=a("h2"),X0=a("a"),N3e=a("span"),F(M$.$$.fragment),FUr=l(),q3e=a("span"),TUr=o("FlaxAutoModelForImageClassification"),_Ve=l(),Er=a("div"),F(E$.$$.fragment),MUr=l(),vf=a("p"),EUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uee=a("a"),CUr=o("from_pretrained()"),wUr=o(" class method or the "),Jee=a("a"),AUr=o("from_config()"),LUr=o(` class
method.`),yUr=l(),C$=a("p"),xUr=o("This class cannot be instantiated directly using "),j3e=a("code"),$Ur=o("__init__()"),kUr=o(" (throws an error)."),SUr=l(),ea=a("div"),F(w$.$$.fragment),RUr=l(),D3e=a("p"),PUr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BUr=l(),Ff=a("p"),IUr=o(`Note:
Loading a model from its configuration file does `),G3e=a("strong"),NUr=o("not"),qUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),jUr=o("from_pretrained()"),DUr=o(" to load the model weights."),GUr=l(),F(z0.$$.fragment),OUr=l(),Yr=a("div"),F(A$.$$.fragment),VUr=l(),O3e=a("p"),XUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zUr=l(),xn=a("p"),WUr=o("The model class to instantiate is selected based on the "),V3e=a("code"),QUr=o("model_type"),HUr=o(` property of the config object (either
passed as an argument or loaded from `),X3e=a("code"),UUr=o("pretrained_model_name_or_path"),JUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),YUr=o("pretrained_model_name_or_path"),KUr=o(":"),ZUr=l(),L$=a("ul"),W0=a("li"),W3e=a("strong"),eJr=o("beit"),oJr=o(" \u2014 "),Kee=a("a"),rJr=o("FlaxBeitForImageClassification"),tJr=o(" (BEiT model)"),aJr=l(),Q0=a("li"),Q3e=a("strong"),nJr=o("vit"),sJr=o(" \u2014 "),Zee=a("a"),lJr=o("FlaxViTForImageClassification"),iJr=o(" (ViT model)"),dJr=l(),F(H0.$$.fragment),uVe=l(),Tf=a("h2"),U0=a("a"),H3e=a("span"),F(y$.$$.fragment),cJr=l(),U3e=a("span"),fJr=o("FlaxAutoModelForVision2Seq"),bVe=l(),Cr=a("div"),F(x$.$$.fragment),mJr=l(),Mf=a("p"),gJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eoe=a("a"),hJr=o("from_pretrained()"),pJr=o(" class method or the "),ooe=a("a"),_Jr=o("from_config()"),uJr=o(` class
method.`),bJr=l(),$$=a("p"),vJr=o("This class cannot be instantiated directly using "),J3e=a("code"),FJr=o("__init__()"),TJr=o(" (throws an error)."),MJr=l(),oa=a("div"),F(k$.$$.fragment),EJr=l(),Y3e=a("p"),CJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wJr=l(),Ef=a("p"),AJr=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),LJr=o("not"),yJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=a("a"),xJr=o("from_pretrained()"),$Jr=o(" to load the model weights."),kJr=l(),F(J0.$$.fragment),SJr=l(),Kr=a("div"),F(S$.$$.fragment),RJr=l(),Z3e=a("p"),PJr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BJr=l(),$n=a("p"),IJr=o("The model class to instantiate is selected based on the "),e0e=a("code"),NJr=o("model_type"),qJr=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),jJr=o("pretrained_model_name_or_path"),DJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),GJr=o("pretrained_model_name_or_path"),OJr=o(":"),VJr=l(),t0e=a("ul"),Y0=a("li"),a0e=a("strong"),XJr=o("vision-encoder-decoder"),zJr=o(" \u2014 "),toe=a("a"),WJr=o("FlaxVisionEncoderDecoderModel"),QJr=o(" (Vision Encoder decoder model)"),HJr=l(),F(K0.$$.fragment),this.h()},l(f){const u=sjt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var R$=s(p);m=n(R$,"A",{id:!0,class:!0,href:!0});var n0e=s(m);_=n(n0e,"SPAN",{});var s0e=s(_);T(d.$$.fragment,s0e),s0e.forEach(t),n0e.forEach(t),h=i(R$),Eo=n(R$,"SPAN",{});var l0e=s(Eo);Fi=r(l0e,"Auto Classes"),l0e.forEach(t),R$.forEach(t),Lf=i(f),at=n(f,"P",{});var P$=s(at);Ti=r(P$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(P$,"CODE",{});var i0e=s(Mi);v6=r(i0e,"from_pretrained()"),i0e.forEach(t),yf=r(P$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),P$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var d0e=s(Sn);F6=r(d0e,"AutoConfig"),d0e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var c0e=s(Pn);T6=r(c0e,"AutoModel"),c0e.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var f0e=s(Bn);M6=r(f0e,"AutoTokenizer"),f0e.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(ya.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var B$=s(Ae);Uk=r(B$,"will create a model that is an instance of "),Ai=n(B$,"A",{href:!0});var m0e=s(Ai);Jk=r(m0e,"BertModel"),m0e.forEach(t),Yk=r(B$,"."),B$.forEach(t),Co=i(f),xa=n(f,"P",{});var I$=s(xa);Kk=r(I$,"There is one class of "),$f=n(I$,"CODE",{});var g0e=s($f);Zk=r(g0e,"AutoModel"),g0e.forEach(t),xze=r(I$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),I$.forEach(t),hGe=i(f),Li=n(f,"H2",{class:!0});var N$=s(Li);kf=n(N$,"A",{id:!0,class:!0,href:!0});var h0e=s(kf);Kre=n(h0e,"SPAN",{});var p0e=s(Kre);T(E6.$$.fragment,p0e),p0e.forEach(t),h0e.forEach(t),$ze=i(N$),Zre=n(N$,"SPAN",{});var _0e=s(Zre);kze=r(_0e,"Extending the Auto Classes"),_0e.forEach(t),N$.forEach(t),pGe=i(f),In=n(f,"P",{});var Cf=s(In);Sze=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ete=n(Cf,"CODE",{});var u0e=s(ete);Rze=r(u0e,"NewModel"),u0e.forEach(t),Pze=r(Cf,", make sure you have a "),ote=n(Cf,"CODE",{});var b0e=s(ote);Bze=r(b0e,"NewModelConfig"),b0e.forEach(t),Ize=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),_Ge=i(f),T(C6.$$.fragment,f),uGe=i(f),eS=n(f,"P",{});var v0e=s(eS);Nze=r(v0e,"You will then be able to use the auto classes like you would usually do!"),v0e.forEach(t),bGe=i(f),T(Sf.$$.fragment,f),vGe=i(f),yi=n(f,"H2",{class:!0});var q$=s(yi);Rf=n(q$,"A",{id:!0,class:!0,href:!0});var F0e=s(Rf);rte=n(F0e,"SPAN",{});var T0e=s(rte);T(w6.$$.fragment,T0e),T0e.forEach(t),F0e.forEach(t),qze=i(q$),tte=n(q$,"SPAN",{});var M0e=s(tte);jze=r(M0e,"AutoConfig"),M0e.forEach(t),q$.forEach(t),FGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(A6.$$.fragment,rt),Dze=i(rt),L6=n(rt,"P",{});var j$=s(L6);Gze=r(j$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),oS=n(j$,"A",{href:!0});var E0e=s(oS);Oze=r(E0e,"from_pretrained()"),E0e.forEach(t),Vze=r(j$," class method."),j$.forEach(t),Xze=i(rt),y6=n(rt,"P",{});var D$=s(y6);zze=r(D$,"This class cannot be instantiated directly using "),ate=n(D$,"CODE",{});var C0e=s(ate);Wze=r(C0e,"__init__()"),C0e.forEach(t),Qze=r(D$," (throws an error)."),D$.forEach(t),Hze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(x6.$$.fragment,tt),Uze=i(tt),nte=n(tt,"P",{});var w0e=s(nte);Jze=r(w0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),w0e.forEach(t),Yze=i(tt),xi=n(tt,"P",{});var wf=s(xi);Kze=r(wf,"The configuration class to instantiate is selected based on the "),ste=n(wf,"CODE",{});var A0e=s(ste);Zze=r(A0e,"model_type"),A0e.forEach(t),eWe=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lte=n(wf,"CODE",{});var L0e=s(lte);oWe=r(L0e,"pretrained_model_name_or_path"),L0e.forEach(t),rWe=r(wf,":"),wf.forEach(t),tWe=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var Z0=s(Pf);ite=n(Z0,"STRONG",{});var y0e=s(ite);aWe=r(y0e,"albert"),y0e.forEach(t),nWe=r(Z0," \u2014 "),rS=n(Z0,"A",{href:!0});var x0e=s(rS);sWe=r(x0e,"AlbertConfig"),x0e.forEach(t),lWe=r(Z0," (ALBERT model)"),Z0.forEach(t),iWe=i(L),Bf=n(L,"LI",{});var ew=s(Bf);dte=n(ew,"STRONG",{});var $0e=s(dte);dWe=r($0e,"bart"),$0e.forEach(t),cWe=r(ew," \u2014 "),tS=n(ew,"A",{href:!0});var k0e=s(tS);fWe=r(k0e,"BartConfig"),k0e.forEach(t),mWe=r(ew," (BART model)"),ew.forEach(t),gWe=i(L),If=n(L,"LI",{});var ow=s(If);cte=n(ow,"STRONG",{});var S0e=s(cte);hWe=r(S0e,"beit"),S0e.forEach(t),pWe=r(ow," \u2014 "),aS=n(ow,"A",{href:!0});var R0e=s(aS);_We=r(R0e,"BeitConfig"),R0e.forEach(t),uWe=r(ow," (BEiT model)"),ow.forEach(t),bWe=i(L),Nf=n(L,"LI",{});var rw=s(Nf);fte=n(rw,"STRONG",{});var P0e=s(fte);vWe=r(P0e,"bert"),P0e.forEach(t),FWe=r(rw," \u2014 "),nS=n(rw,"A",{href:!0});var B0e=s(nS);TWe=r(B0e,"BertConfig"),B0e.forEach(t),MWe=r(rw," (BERT model)"),rw.forEach(t),EWe=i(L),qf=n(L,"LI",{});var tw=s(qf);mte=n(tw,"STRONG",{});var I0e=s(mte);CWe=r(I0e,"bert-generation"),I0e.forEach(t),wWe=r(tw," \u2014 "),sS=n(tw,"A",{href:!0});var N0e=s(sS);AWe=r(N0e,"BertGenerationConfig"),N0e.forEach(t),LWe=r(tw," (Bert Generation model)"),tw.forEach(t),yWe=i(L),jf=n(L,"LI",{});var aw=s(jf);gte=n(aw,"STRONG",{});var q0e=s(gte);xWe=r(q0e,"big_bird"),q0e.forEach(t),$We=r(aw," \u2014 "),lS=n(aw,"A",{href:!0});var j0e=s(lS);kWe=r(j0e,"BigBirdConfig"),j0e.forEach(t),SWe=r(aw," (BigBird model)"),aw.forEach(t),RWe=i(L),Df=n(L,"LI",{});var nw=s(Df);hte=n(nw,"STRONG",{});var D0e=s(hte);PWe=r(D0e,"bigbird_pegasus"),D0e.forEach(t),BWe=r(nw," \u2014 "),iS=n(nw,"A",{href:!0});var G0e=s(iS);IWe=r(G0e,"BigBirdPegasusConfig"),G0e.forEach(t),NWe=r(nw," (BigBird-Pegasus model)"),nw.forEach(t),qWe=i(L),Gf=n(L,"LI",{});var sw=s(Gf);pte=n(sw,"STRONG",{});var O0e=s(pte);jWe=r(O0e,"blenderbot"),O0e.forEach(t),DWe=r(sw," \u2014 "),dS=n(sw,"A",{href:!0});var V0e=s(dS);GWe=r(V0e,"BlenderbotConfig"),V0e.forEach(t),OWe=r(sw," (Blenderbot model)"),sw.forEach(t),VWe=i(L),Of=n(L,"LI",{});var lw=s(Of);_te=n(lw,"STRONG",{});var X0e=s(_te);XWe=r(X0e,"blenderbot-small"),X0e.forEach(t),zWe=r(lw," \u2014 "),cS=n(lw,"A",{href:!0});var z0e=s(cS);WWe=r(z0e,"BlenderbotSmallConfig"),z0e.forEach(t),QWe=r(lw," (BlenderbotSmall model)"),lw.forEach(t),HWe=i(L),Vf=n(L,"LI",{});var iw=s(Vf);ute=n(iw,"STRONG",{});var W0e=s(ute);UWe=r(W0e,"bloom"),W0e.forEach(t),JWe=r(iw," \u2014 "),fS=n(iw,"A",{href:!0});var Q0e=s(fS);YWe=r(Q0e,"BloomConfig"),Q0e.forEach(t),KWe=r(iw," (BLOOM model)"),iw.forEach(t),ZWe=i(L),Xf=n(L,"LI",{});var dw=s(Xf);bte=n(dw,"STRONG",{});var H0e=s(bte);eQe=r(H0e,"camembert"),H0e.forEach(t),oQe=r(dw," \u2014 "),mS=n(dw,"A",{href:!0});var U0e=s(mS);rQe=r(U0e,"CamembertConfig"),U0e.forEach(t),tQe=r(dw," (CamemBERT model)"),dw.forEach(t),aQe=i(L),zf=n(L,"LI",{});var cw=s(zf);vte=n(cw,"STRONG",{});var J0e=s(vte);nQe=r(J0e,"canine"),J0e.forEach(t),sQe=r(cw," \u2014 "),gS=n(cw,"A",{href:!0});var Y0e=s(gS);lQe=r(Y0e,"CanineConfig"),Y0e.forEach(t),iQe=r(cw," (CANINE model)"),cw.forEach(t),dQe=i(L),Wf=n(L,"LI",{});var fw=s(Wf);Fte=n(fw,"STRONG",{});var K0e=s(Fte);cQe=r(K0e,"clip"),K0e.forEach(t),fQe=r(fw," \u2014 "),hS=n(fw,"A",{href:!0});var Z0e=s(hS);mQe=r(Z0e,"CLIPConfig"),Z0e.forEach(t),gQe=r(fw," (CLIP model)"),fw.forEach(t),hQe=i(L),Qf=n(L,"LI",{});var mw=s(Qf);Tte=n(mw,"STRONG",{});var ewe=s(Tte);pQe=r(ewe,"convbert"),ewe.forEach(t),_Qe=r(mw," \u2014 "),pS=n(mw,"A",{href:!0});var owe=s(pS);uQe=r(owe,"ConvBertConfig"),owe.forEach(t),bQe=r(mw," (ConvBERT model)"),mw.forEach(t),vQe=i(L),Hf=n(L,"LI",{});var gw=s(Hf);Mte=n(gw,"STRONG",{});var rwe=s(Mte);FQe=r(rwe,"convnext"),rwe.forEach(t),TQe=r(gw," \u2014 "),_S=n(gw,"A",{href:!0});var twe=s(_S);MQe=r(twe,"ConvNextConfig"),twe.forEach(t),EQe=r(gw," (ConvNeXT model)"),gw.forEach(t),CQe=i(L),Uf=n(L,"LI",{});var hw=s(Uf);Ete=n(hw,"STRONG",{});var awe=s(Ete);wQe=r(awe,"ctrl"),awe.forEach(t),AQe=r(hw," \u2014 "),uS=n(hw,"A",{href:!0});var nwe=s(uS);LQe=r(nwe,"CTRLConfig"),nwe.forEach(t),yQe=r(hw," (CTRL model)"),hw.forEach(t),xQe=i(L),Jf=n(L,"LI",{});var pw=s(Jf);Cte=n(pw,"STRONG",{});var swe=s(Cte);$Qe=r(swe,"cvt"),swe.forEach(t),kQe=r(pw," \u2014 "),bS=n(pw,"A",{href:!0});var lwe=s(bS);SQe=r(lwe,"CvtConfig"),lwe.forEach(t),RQe=r(pw," (CvT model)"),pw.forEach(t),PQe=i(L),Yf=n(L,"LI",{});var _w=s(Yf);wte=n(_w,"STRONG",{});var iwe=s(wte);BQe=r(iwe,"data2vec-audio"),iwe.forEach(t),IQe=r(_w," \u2014 "),vS=n(_w,"A",{href:!0});var dwe=s(vS);NQe=r(dwe,"Data2VecAudioConfig"),dwe.forEach(t),qQe=r(_w," (Data2VecAudio model)"),_w.forEach(t),jQe=i(L),Kf=n(L,"LI",{});var uw=s(Kf);Ate=n(uw,"STRONG",{});var cwe=s(Ate);DQe=r(cwe,"data2vec-text"),cwe.forEach(t),GQe=r(uw," \u2014 "),FS=n(uw,"A",{href:!0});var fwe=s(FS);OQe=r(fwe,"Data2VecTextConfig"),fwe.forEach(t),VQe=r(uw," (Data2VecText model)"),uw.forEach(t),XQe=i(L),Zf=n(L,"LI",{});var bw=s(Zf);Lte=n(bw,"STRONG",{});var mwe=s(Lte);zQe=r(mwe,"data2vec-vision"),mwe.forEach(t),WQe=r(bw," \u2014 "),TS=n(bw,"A",{href:!0});var gwe=s(TS);QQe=r(gwe,"Data2VecVisionConfig"),gwe.forEach(t),HQe=r(bw," (Data2VecVision model)"),bw.forEach(t),UQe=i(L),em=n(L,"LI",{});var vw=s(em);yte=n(vw,"STRONG",{});var hwe=s(yte);JQe=r(hwe,"deberta"),hwe.forEach(t),YQe=r(vw," \u2014 "),MS=n(vw,"A",{href:!0});var pwe=s(MS);KQe=r(pwe,"DebertaConfig"),pwe.forEach(t),ZQe=r(vw," (DeBERTa model)"),vw.forEach(t),eHe=i(L),om=n(L,"LI",{});var Fw=s(om);xte=n(Fw,"STRONG",{});var _we=s(xte);oHe=r(_we,"deberta-v2"),_we.forEach(t),rHe=r(Fw," \u2014 "),ES=n(Fw,"A",{href:!0});var uwe=s(ES);tHe=r(uwe,"DebertaV2Config"),uwe.forEach(t),aHe=r(Fw," (DeBERTa-v2 model)"),Fw.forEach(t),nHe=i(L),rm=n(L,"LI",{});var Tw=s(rm);$te=n(Tw,"STRONG",{});var bwe=s($te);sHe=r(bwe,"decision_transformer"),bwe.forEach(t),lHe=r(Tw," \u2014 "),CS=n(Tw,"A",{href:!0});var vwe=s(CS);iHe=r(vwe,"DecisionTransformerConfig"),vwe.forEach(t),dHe=r(Tw," (Decision Transformer model)"),Tw.forEach(t),cHe=i(L),tm=n(L,"LI",{});var Mw=s(tm);kte=n(Mw,"STRONG",{});var JJr=s(kte);fHe=r(JJr,"deit"),JJr.forEach(t),mHe=r(Mw," \u2014 "),wS=n(Mw,"A",{href:!0});var YJr=s(wS);gHe=r(YJr,"DeiTConfig"),YJr.forEach(t),hHe=r(Mw," (DeiT model)"),Mw.forEach(t),pHe=i(L),am=n(L,"LI",{});var Fwe=s(am);Ste=n(Fwe,"STRONG",{});var KJr=s(Ste);_He=r(KJr,"detr"),KJr.forEach(t),uHe=r(Fwe," \u2014 "),AS=n(Fwe,"A",{href:!0});var ZJr=s(AS);bHe=r(ZJr,"DetrConfig"),ZJr.forEach(t),vHe=r(Fwe," (DETR model)"),Fwe.forEach(t),FHe=i(L),nm=n(L,"LI",{});var Twe=s(nm);Rte=n(Twe,"STRONG",{});var eYr=s(Rte);THe=r(eYr,"distilbert"),eYr.forEach(t),MHe=r(Twe," \u2014 "),LS=n(Twe,"A",{href:!0});var oYr=s(LS);EHe=r(oYr,"DistilBertConfig"),oYr.forEach(t),CHe=r(Twe," (DistilBERT model)"),Twe.forEach(t),wHe=i(L),sm=n(L,"LI",{});var Mwe=s(sm);Pte=n(Mwe,"STRONG",{});var rYr=s(Pte);AHe=r(rYr,"dpr"),rYr.forEach(t),LHe=r(Mwe," \u2014 "),yS=n(Mwe,"A",{href:!0});var tYr=s(yS);yHe=r(tYr,"DPRConfig"),tYr.forEach(t),xHe=r(Mwe," (DPR model)"),Mwe.forEach(t),$He=i(L),lm=n(L,"LI",{});var Ewe=s(lm);Bte=n(Ewe,"STRONG",{});var aYr=s(Bte);kHe=r(aYr,"dpt"),aYr.forEach(t),SHe=r(Ewe," \u2014 "),xS=n(Ewe,"A",{href:!0});var nYr=s(xS);RHe=r(nYr,"DPTConfig"),nYr.forEach(t),PHe=r(Ewe," (DPT model)"),Ewe.forEach(t),BHe=i(L),im=n(L,"LI",{});var Cwe=s(im);Ite=n(Cwe,"STRONG",{});var sYr=s(Ite);IHe=r(sYr,"electra"),sYr.forEach(t),NHe=r(Cwe," \u2014 "),$S=n(Cwe,"A",{href:!0});var lYr=s($S);qHe=r(lYr,"ElectraConfig"),lYr.forEach(t),jHe=r(Cwe," (ELECTRA model)"),Cwe.forEach(t),DHe=i(L),dm=n(L,"LI",{});var wwe=s(dm);Nte=n(wwe,"STRONG",{});var iYr=s(Nte);GHe=r(iYr,"encoder-decoder"),iYr.forEach(t),OHe=r(wwe," \u2014 "),kS=n(wwe,"A",{href:!0});var dYr=s(kS);VHe=r(dYr,"EncoderDecoderConfig"),dYr.forEach(t),XHe=r(wwe," (Encoder decoder model)"),wwe.forEach(t),zHe=i(L),cm=n(L,"LI",{});var Awe=s(cm);qte=n(Awe,"STRONG",{});var cYr=s(qte);WHe=r(cYr,"flaubert"),cYr.forEach(t),QHe=r(Awe," \u2014 "),SS=n(Awe,"A",{href:!0});var fYr=s(SS);HHe=r(fYr,"FlaubertConfig"),fYr.forEach(t),UHe=r(Awe," (FlauBERT model)"),Awe.forEach(t),JHe=i(L),fm=n(L,"LI",{});var Lwe=s(fm);jte=n(Lwe,"STRONG",{});var mYr=s(jte);YHe=r(mYr,"flava"),mYr.forEach(t),KHe=r(Lwe," \u2014 "),RS=n(Lwe,"A",{href:!0});var gYr=s(RS);ZHe=r(gYr,"FlavaConfig"),gYr.forEach(t),eUe=r(Lwe," (FLAVA model)"),Lwe.forEach(t),oUe=i(L),mm=n(L,"LI",{});var ywe=s(mm);Dte=n(ywe,"STRONG",{});var hYr=s(Dte);rUe=r(hYr,"fnet"),hYr.forEach(t),tUe=r(ywe," \u2014 "),PS=n(ywe,"A",{href:!0});var pYr=s(PS);aUe=r(pYr,"FNetConfig"),pYr.forEach(t),nUe=r(ywe," (FNet model)"),ywe.forEach(t),sUe=i(L),gm=n(L,"LI",{});var xwe=s(gm);Gte=n(xwe,"STRONG",{});var _Yr=s(Gte);lUe=r(_Yr,"fsmt"),_Yr.forEach(t),iUe=r(xwe," \u2014 "),BS=n(xwe,"A",{href:!0});var uYr=s(BS);dUe=r(uYr,"FSMTConfig"),uYr.forEach(t),cUe=r(xwe," (FairSeq Machine-Translation model)"),xwe.forEach(t),fUe=i(L),hm=n(L,"LI",{});var $we=s(hm);Ote=n($we,"STRONG",{});var bYr=s(Ote);mUe=r(bYr,"funnel"),bYr.forEach(t),gUe=r($we," \u2014 "),IS=n($we,"A",{href:!0});var vYr=s(IS);hUe=r(vYr,"FunnelConfig"),vYr.forEach(t),pUe=r($we," (Funnel Transformer model)"),$we.forEach(t),_Ue=i(L),pm=n(L,"LI",{});var kwe=s(pm);Vte=n(kwe,"STRONG",{});var FYr=s(Vte);uUe=r(FYr,"glpn"),FYr.forEach(t),bUe=r(kwe," \u2014 "),NS=n(kwe,"A",{href:!0});var TYr=s(NS);vUe=r(TYr,"GLPNConfig"),TYr.forEach(t),FUe=r(kwe," (GLPN model)"),kwe.forEach(t),TUe=i(L),_m=n(L,"LI",{});var Swe=s(_m);Xte=n(Swe,"STRONG",{});var MYr=s(Xte);MUe=r(MYr,"gpt2"),MYr.forEach(t),EUe=r(Swe," \u2014 "),qS=n(Swe,"A",{href:!0});var EYr=s(qS);CUe=r(EYr,"GPT2Config"),EYr.forEach(t),wUe=r(Swe," (OpenAI GPT-2 model)"),Swe.forEach(t),AUe=i(L),um=n(L,"LI",{});var Rwe=s(um);zte=n(Rwe,"STRONG",{});var CYr=s(zte);LUe=r(CYr,"gpt_neo"),CYr.forEach(t),yUe=r(Rwe," \u2014 "),jS=n(Rwe,"A",{href:!0});var wYr=s(jS);xUe=r(wYr,"GPTNeoConfig"),wYr.forEach(t),$Ue=r(Rwe," (GPT Neo model)"),Rwe.forEach(t),kUe=i(L),bm=n(L,"LI",{});var Pwe=s(bm);Wte=n(Pwe,"STRONG",{});var AYr=s(Wte);SUe=r(AYr,"gpt_neox"),AYr.forEach(t),RUe=r(Pwe," \u2014 "),DS=n(Pwe,"A",{href:!0});var LYr=s(DS);PUe=r(LYr,"GPTNeoXConfig"),LYr.forEach(t),BUe=r(Pwe," (GPT NeoX model)"),Pwe.forEach(t),IUe=i(L),vm=n(L,"LI",{});var Bwe=s(vm);Qte=n(Bwe,"STRONG",{});var yYr=s(Qte);NUe=r(yYr,"gptj"),yYr.forEach(t),qUe=r(Bwe," \u2014 "),GS=n(Bwe,"A",{href:!0});var xYr=s(GS);jUe=r(xYr,"GPTJConfig"),xYr.forEach(t),DUe=r(Bwe," (GPT-J model)"),Bwe.forEach(t),GUe=i(L),Fm=n(L,"LI",{});var Iwe=s(Fm);Hte=n(Iwe,"STRONG",{});var $Yr=s(Hte);OUe=r($Yr,"hubert"),$Yr.forEach(t),VUe=r(Iwe," \u2014 "),OS=n(Iwe,"A",{href:!0});var kYr=s(OS);XUe=r(kYr,"HubertConfig"),kYr.forEach(t),zUe=r(Iwe," (Hubert model)"),Iwe.forEach(t),WUe=i(L),Tm=n(L,"LI",{});var Nwe=s(Tm);Ute=n(Nwe,"STRONG",{});var SYr=s(Ute);QUe=r(SYr,"ibert"),SYr.forEach(t),HUe=r(Nwe," \u2014 "),VS=n(Nwe,"A",{href:!0});var RYr=s(VS);UUe=r(RYr,"IBertConfig"),RYr.forEach(t),JUe=r(Nwe," (I-BERT model)"),Nwe.forEach(t),YUe=i(L),Mm=n(L,"LI",{});var qwe=s(Mm);Jte=n(qwe,"STRONG",{});var PYr=s(Jte);KUe=r(PYr,"imagegpt"),PYr.forEach(t),ZUe=r(qwe," \u2014 "),XS=n(qwe,"A",{href:!0});var BYr=s(XS);eJe=r(BYr,"ImageGPTConfig"),BYr.forEach(t),oJe=r(qwe," (ImageGPT model)"),qwe.forEach(t),rJe=i(L),Em=n(L,"LI",{});var jwe=s(Em);Yte=n(jwe,"STRONG",{});var IYr=s(Yte);tJe=r(IYr,"layoutlm"),IYr.forEach(t),aJe=r(jwe," \u2014 "),zS=n(jwe,"A",{href:!0});var NYr=s(zS);nJe=r(NYr,"LayoutLMConfig"),NYr.forEach(t),sJe=r(jwe," (LayoutLM model)"),jwe.forEach(t),lJe=i(L),Cm=n(L,"LI",{});var Dwe=s(Cm);Kte=n(Dwe,"STRONG",{});var qYr=s(Kte);iJe=r(qYr,"layoutlmv2"),qYr.forEach(t),dJe=r(Dwe," \u2014 "),WS=n(Dwe,"A",{href:!0});var jYr=s(WS);cJe=r(jYr,"LayoutLMv2Config"),jYr.forEach(t),fJe=r(Dwe," (LayoutLMv2 model)"),Dwe.forEach(t),mJe=i(L),wm=n(L,"LI",{});var Gwe=s(wm);Zte=n(Gwe,"STRONG",{});var DYr=s(Zte);gJe=r(DYr,"layoutlmv3"),DYr.forEach(t),hJe=r(Gwe," \u2014 "),QS=n(Gwe,"A",{href:!0});var GYr=s(QS);pJe=r(GYr,"LayoutLMv3Config"),GYr.forEach(t),_Je=r(Gwe," (LayoutLMv3 model)"),Gwe.forEach(t),uJe=i(L),Am=n(L,"LI",{});var Owe=s(Am);eae=n(Owe,"STRONG",{});var OYr=s(eae);bJe=r(OYr,"led"),OYr.forEach(t),vJe=r(Owe," \u2014 "),HS=n(Owe,"A",{href:!0});var VYr=s(HS);FJe=r(VYr,"LEDConfig"),VYr.forEach(t),TJe=r(Owe," (LED model)"),Owe.forEach(t),MJe=i(L),Lm=n(L,"LI",{});var Vwe=s(Lm);oae=n(Vwe,"STRONG",{});var XYr=s(oae);EJe=r(XYr,"levit"),XYr.forEach(t),CJe=r(Vwe," \u2014 "),US=n(Vwe,"A",{href:!0});var zYr=s(US);wJe=r(zYr,"LevitConfig"),zYr.forEach(t),AJe=r(Vwe," (LeViT model)"),Vwe.forEach(t),LJe=i(L),ym=n(L,"LI",{});var Xwe=s(ym);rae=n(Xwe,"STRONG",{});var WYr=s(rae);yJe=r(WYr,"longformer"),WYr.forEach(t),xJe=r(Xwe," \u2014 "),JS=n(Xwe,"A",{href:!0});var QYr=s(JS);$Je=r(QYr,"LongformerConfig"),QYr.forEach(t),kJe=r(Xwe," (Longformer model)"),Xwe.forEach(t),SJe=i(L),xm=n(L,"LI",{});var zwe=s(xm);tae=n(zwe,"STRONG",{});var HYr=s(tae);RJe=r(HYr,"longt5"),HYr.forEach(t),PJe=r(zwe," \u2014 "),YS=n(zwe,"A",{href:!0});var UYr=s(YS);BJe=r(UYr,"LongT5Config"),UYr.forEach(t),IJe=r(zwe," (LongT5 model)"),zwe.forEach(t),NJe=i(L),$m=n(L,"LI",{});var Wwe=s($m);aae=n(Wwe,"STRONG",{});var JYr=s(aae);qJe=r(JYr,"luke"),JYr.forEach(t),jJe=r(Wwe," \u2014 "),KS=n(Wwe,"A",{href:!0});var YYr=s(KS);DJe=r(YYr,"LukeConfig"),YYr.forEach(t),GJe=r(Wwe," (LUKE model)"),Wwe.forEach(t),OJe=i(L),km=n(L,"LI",{});var Qwe=s(km);nae=n(Qwe,"STRONG",{});var KYr=s(nae);VJe=r(KYr,"lxmert"),KYr.forEach(t),XJe=r(Qwe," \u2014 "),ZS=n(Qwe,"A",{href:!0});var ZYr=s(ZS);zJe=r(ZYr,"LxmertConfig"),ZYr.forEach(t),WJe=r(Qwe," (LXMERT model)"),Qwe.forEach(t),QJe=i(L),Sm=n(L,"LI",{});var Hwe=s(Sm);sae=n(Hwe,"STRONG",{});var eKr=s(sae);HJe=r(eKr,"m2m_100"),eKr.forEach(t),UJe=r(Hwe," \u2014 "),eR=n(Hwe,"A",{href:!0});var oKr=s(eR);JJe=r(oKr,"M2M100Config"),oKr.forEach(t),YJe=r(Hwe," (M2M100 model)"),Hwe.forEach(t),KJe=i(L),Rm=n(L,"LI",{});var Uwe=s(Rm);lae=n(Uwe,"STRONG",{});var rKr=s(lae);ZJe=r(rKr,"marian"),rKr.forEach(t),eYe=r(Uwe," \u2014 "),oR=n(Uwe,"A",{href:!0});var tKr=s(oR);oYe=r(tKr,"MarianConfig"),tKr.forEach(t),rYe=r(Uwe," (Marian model)"),Uwe.forEach(t),tYe=i(L),Pm=n(L,"LI",{});var Jwe=s(Pm);iae=n(Jwe,"STRONG",{});var aKr=s(iae);aYe=r(aKr,"maskformer"),aKr.forEach(t),nYe=r(Jwe," \u2014 "),rR=n(Jwe,"A",{href:!0});var nKr=s(rR);sYe=r(nKr,"MaskFormerConfig"),nKr.forEach(t),lYe=r(Jwe," (MaskFormer model)"),Jwe.forEach(t),iYe=i(L),Bm=n(L,"LI",{});var Ywe=s(Bm);dae=n(Ywe,"STRONG",{});var sKr=s(dae);dYe=r(sKr,"mbart"),sKr.forEach(t),cYe=r(Ywe," \u2014 "),tR=n(Ywe,"A",{href:!0});var lKr=s(tR);fYe=r(lKr,"MBartConfig"),lKr.forEach(t),mYe=r(Ywe," (mBART model)"),Ywe.forEach(t),gYe=i(L),Im=n(L,"LI",{});var Kwe=s(Im);cae=n(Kwe,"STRONG",{});var iKr=s(cae);hYe=r(iKr,"mctct"),iKr.forEach(t),pYe=r(Kwe," \u2014 "),aR=n(Kwe,"A",{href:!0});var dKr=s(aR);_Ye=r(dKr,"MCTCTConfig"),dKr.forEach(t),uYe=r(Kwe," (M-CTC-T model)"),Kwe.forEach(t),bYe=i(L),Nm=n(L,"LI",{});var Zwe=s(Nm);fae=n(Zwe,"STRONG",{});var cKr=s(fae);vYe=r(cKr,"megatron-bert"),cKr.forEach(t),FYe=r(Zwe," \u2014 "),nR=n(Zwe,"A",{href:!0});var fKr=s(nR);TYe=r(fKr,"MegatronBertConfig"),fKr.forEach(t),MYe=r(Zwe," (Megatron-BERT model)"),Zwe.forEach(t),EYe=i(L),qm=n(L,"LI",{});var eAe=s(qm);mae=n(eAe,"STRONG",{});var mKr=s(mae);CYe=r(mKr,"mobilebert"),mKr.forEach(t),wYe=r(eAe," \u2014 "),sR=n(eAe,"A",{href:!0});var gKr=s(sR);AYe=r(gKr,"MobileBertConfig"),gKr.forEach(t),LYe=r(eAe," (MobileBERT model)"),eAe.forEach(t),yYe=i(L),jm=n(L,"LI",{});var oAe=s(jm);gae=n(oAe,"STRONG",{});var hKr=s(gae);xYe=r(hKr,"mobilenet_v1"),hKr.forEach(t),$Ye=r(oAe," \u2014 "),lR=n(oAe,"A",{href:!0});var pKr=s(lR);kYe=r(pKr,"MobileNetV1Config"),pKr.forEach(t),SYe=r(oAe," (MobileNetV1 model)"),oAe.forEach(t),RYe=i(L),Dm=n(L,"LI",{});var rAe=s(Dm);hae=n(rAe,"STRONG",{});var _Kr=s(hae);PYe=r(_Kr,"mpnet"),_Kr.forEach(t),BYe=r(rAe," \u2014 "),iR=n(rAe,"A",{href:!0});var uKr=s(iR);IYe=r(uKr,"MPNetConfig"),uKr.forEach(t),NYe=r(rAe," (MPNet model)"),rAe.forEach(t),qYe=i(L),Gm=n(L,"LI",{});var tAe=s(Gm);pae=n(tAe,"STRONG",{});var bKr=s(pae);jYe=r(bKr,"mt5"),bKr.forEach(t),DYe=r(tAe," \u2014 "),dR=n(tAe,"A",{href:!0});var vKr=s(dR);GYe=r(vKr,"MT5Config"),vKr.forEach(t),OYe=r(tAe," (MT5 model)"),tAe.forEach(t),VYe=i(L),Om=n(L,"LI",{});var aAe=s(Om);_ae=n(aAe,"STRONG",{});var FKr=s(_ae);XYe=r(FKr,"nystromformer"),FKr.forEach(t),zYe=r(aAe," \u2014 "),cR=n(aAe,"A",{href:!0});var TKr=s(cR);WYe=r(TKr,"NystromformerConfig"),TKr.forEach(t),QYe=r(aAe," (Nystr\xF6mformer model)"),aAe.forEach(t),HYe=i(L),Vm=n(L,"LI",{});var nAe=s(Vm);uae=n(nAe,"STRONG",{});var MKr=s(uae);UYe=r(MKr,"openai-gpt"),MKr.forEach(t),JYe=r(nAe," \u2014 "),fR=n(nAe,"A",{href:!0});var EKr=s(fR);YYe=r(EKr,"OpenAIGPTConfig"),EKr.forEach(t),KYe=r(nAe," (OpenAI GPT model)"),nAe.forEach(t),ZYe=i(L),Xm=n(L,"LI",{});var sAe=s(Xm);bae=n(sAe,"STRONG",{});var CKr=s(bae);eKe=r(CKr,"opt"),CKr.forEach(t),oKe=r(sAe," \u2014 "),mR=n(sAe,"A",{href:!0});var wKr=s(mR);rKe=r(wKr,"OPTConfig"),wKr.forEach(t),tKe=r(sAe," (OPT model)"),sAe.forEach(t),aKe=i(L),zm=n(L,"LI",{});var lAe=s(zm);vae=n(lAe,"STRONG",{});var AKr=s(vae);nKe=r(AKr,"pegasus"),AKr.forEach(t),sKe=r(lAe," \u2014 "),gR=n(lAe,"A",{href:!0});var LKr=s(gR);lKe=r(LKr,"PegasusConfig"),LKr.forEach(t),iKe=r(lAe," (Pegasus model)"),lAe.forEach(t),dKe=i(L),Wm=n(L,"LI",{});var iAe=s(Wm);Fae=n(iAe,"STRONG",{});var yKr=s(Fae);cKe=r(yKr,"perceiver"),yKr.forEach(t),fKe=r(iAe," \u2014 "),hR=n(iAe,"A",{href:!0});var xKr=s(hR);mKe=r(xKr,"PerceiverConfig"),xKr.forEach(t),gKe=r(iAe," (Perceiver model)"),iAe.forEach(t),hKe=i(L),Qm=n(L,"LI",{});var dAe=s(Qm);Tae=n(dAe,"STRONG",{});var $Kr=s(Tae);pKe=r($Kr,"plbart"),$Kr.forEach(t),_Ke=r(dAe," \u2014 "),pR=n(dAe,"A",{href:!0});var kKr=s(pR);uKe=r(kKr,"PLBartConfig"),kKr.forEach(t),bKe=r(dAe," (PLBart model)"),dAe.forEach(t),vKe=i(L),Hm=n(L,"LI",{});var cAe=s(Hm);Mae=n(cAe,"STRONG",{});var SKr=s(Mae);FKe=r(SKr,"poolformer"),SKr.forEach(t),TKe=r(cAe," \u2014 "),_R=n(cAe,"A",{href:!0});var RKr=s(_R);MKe=r(RKr,"PoolFormerConfig"),RKr.forEach(t),EKe=r(cAe," (PoolFormer model)"),cAe.forEach(t),CKe=i(L),Um=n(L,"LI",{});var fAe=s(Um);Eae=n(fAe,"STRONG",{});var PKr=s(Eae);wKe=r(PKr,"prophetnet"),PKr.forEach(t),AKe=r(fAe," \u2014 "),uR=n(fAe,"A",{href:!0});var BKr=s(uR);LKe=r(BKr,"ProphetNetConfig"),BKr.forEach(t),yKe=r(fAe," (ProphetNet model)"),fAe.forEach(t),xKe=i(L),Jm=n(L,"LI",{});var mAe=s(Jm);Cae=n(mAe,"STRONG",{});var IKr=s(Cae);$Ke=r(IKr,"qdqbert"),IKr.forEach(t),kKe=r(mAe," \u2014 "),bR=n(mAe,"A",{href:!0});var NKr=s(bR);SKe=r(NKr,"QDQBertConfig"),NKr.forEach(t),RKe=r(mAe," (QDQBert model)"),mAe.forEach(t),PKe=i(L),Ym=n(L,"LI",{});var gAe=s(Ym);wae=n(gAe,"STRONG",{});var qKr=s(wae);BKe=r(qKr,"rag"),qKr.forEach(t),IKe=r(gAe," \u2014 "),vR=n(gAe,"A",{href:!0});var jKr=s(vR);NKe=r(jKr,"RagConfig"),jKr.forEach(t),qKe=r(gAe," (RAG model)"),gAe.forEach(t),jKe=i(L),Km=n(L,"LI",{});var hAe=s(Km);Aae=n(hAe,"STRONG",{});var DKr=s(Aae);DKe=r(DKr,"realm"),DKr.forEach(t),GKe=r(hAe," \u2014 "),FR=n(hAe,"A",{href:!0});var GKr=s(FR);OKe=r(GKr,"RealmConfig"),GKr.forEach(t),VKe=r(hAe," (REALM model)"),hAe.forEach(t),XKe=i(L),Zm=n(L,"LI",{});var pAe=s(Zm);Lae=n(pAe,"STRONG",{});var OKr=s(Lae);zKe=r(OKr,"reformer"),OKr.forEach(t),WKe=r(pAe," \u2014 "),TR=n(pAe,"A",{href:!0});var VKr=s(TR);QKe=r(VKr,"ReformerConfig"),VKr.forEach(t),HKe=r(pAe," (Reformer model)"),pAe.forEach(t),UKe=i(L),eg=n(L,"LI",{});var _Ae=s(eg);yae=n(_Ae,"STRONG",{});var XKr=s(yae);JKe=r(XKr,"regnet"),XKr.forEach(t),YKe=r(_Ae," \u2014 "),MR=n(_Ae,"A",{href:!0});var zKr=s(MR);KKe=r(zKr,"RegNetConfig"),zKr.forEach(t),ZKe=r(_Ae," (RegNet model)"),_Ae.forEach(t),eZe=i(L),og=n(L,"LI",{});var uAe=s(og);xae=n(uAe,"STRONG",{});var WKr=s(xae);oZe=r(WKr,"rembert"),WKr.forEach(t),rZe=r(uAe," \u2014 "),ER=n(uAe,"A",{href:!0});var QKr=s(ER);tZe=r(QKr,"RemBertConfig"),QKr.forEach(t),aZe=r(uAe," (RemBERT model)"),uAe.forEach(t),nZe=i(L),rg=n(L,"LI",{});var bAe=s(rg);$ae=n(bAe,"STRONG",{});var HKr=s($ae);sZe=r(HKr,"resnet"),HKr.forEach(t),lZe=r(bAe," \u2014 "),CR=n(bAe,"A",{href:!0});var UKr=s(CR);iZe=r(UKr,"ResNetConfig"),UKr.forEach(t),dZe=r(bAe," (ResNet model)"),bAe.forEach(t),cZe=i(L),tg=n(L,"LI",{});var vAe=s(tg);kae=n(vAe,"STRONG",{});var JKr=s(kae);fZe=r(JKr,"retribert"),JKr.forEach(t),mZe=r(vAe," \u2014 "),wR=n(vAe,"A",{href:!0});var YKr=s(wR);gZe=r(YKr,"RetriBertConfig"),YKr.forEach(t),hZe=r(vAe," (RetriBERT model)"),vAe.forEach(t),pZe=i(L),ag=n(L,"LI",{});var FAe=s(ag);Sae=n(FAe,"STRONG",{});var KKr=s(Sae);_Ze=r(KKr,"roberta"),KKr.forEach(t),uZe=r(FAe," \u2014 "),AR=n(FAe,"A",{href:!0});var ZKr=s(AR);bZe=r(ZKr,"RobertaConfig"),ZKr.forEach(t),vZe=r(FAe," (RoBERTa model)"),FAe.forEach(t),FZe=i(L),ng=n(L,"LI",{});var TAe=s(ng);Rae=n(TAe,"STRONG",{});var eZr=s(Rae);TZe=r(eZr,"roformer"),eZr.forEach(t),MZe=r(TAe," \u2014 "),LR=n(TAe,"A",{href:!0});var oZr=s(LR);EZe=r(oZr,"RoFormerConfig"),oZr.forEach(t),CZe=r(TAe," (RoFormer model)"),TAe.forEach(t),wZe=i(L),sg=n(L,"LI",{});var MAe=s(sg);Pae=n(MAe,"STRONG",{});var rZr=s(Pae);AZe=r(rZr,"segformer"),rZr.forEach(t),LZe=r(MAe," \u2014 "),yR=n(MAe,"A",{href:!0});var tZr=s(yR);yZe=r(tZr,"SegformerConfig"),tZr.forEach(t),xZe=r(MAe," (SegFormer model)"),MAe.forEach(t),$Ze=i(L),lg=n(L,"LI",{});var EAe=s(lg);Bae=n(EAe,"STRONG",{});var aZr=s(Bae);kZe=r(aZr,"sew"),aZr.forEach(t),SZe=r(EAe," \u2014 "),xR=n(EAe,"A",{href:!0});var nZr=s(xR);RZe=r(nZr,"SEWConfig"),nZr.forEach(t),PZe=r(EAe," (SEW model)"),EAe.forEach(t),BZe=i(L),ig=n(L,"LI",{});var CAe=s(ig);Iae=n(CAe,"STRONG",{});var sZr=s(Iae);IZe=r(sZr,"sew-d"),sZr.forEach(t),NZe=r(CAe," \u2014 "),$R=n(CAe,"A",{href:!0});var lZr=s($R);qZe=r(lZr,"SEWDConfig"),lZr.forEach(t),jZe=r(CAe," (SEW-D model)"),CAe.forEach(t),DZe=i(L),dg=n(L,"LI",{});var wAe=s(dg);Nae=n(wAe,"STRONG",{});var iZr=s(Nae);GZe=r(iZr,"speech-encoder-decoder"),iZr.forEach(t),OZe=r(wAe," \u2014 "),kR=n(wAe,"A",{href:!0});var dZr=s(kR);VZe=r(dZr,"SpeechEncoderDecoderConfig"),dZr.forEach(t),XZe=r(wAe," (Speech Encoder decoder model)"),wAe.forEach(t),zZe=i(L),cg=n(L,"LI",{});var AAe=s(cg);qae=n(AAe,"STRONG",{});var cZr=s(qae);WZe=r(cZr,"speech_to_text"),cZr.forEach(t),QZe=r(AAe," \u2014 "),SR=n(AAe,"A",{href:!0});var fZr=s(SR);HZe=r(fZr,"Speech2TextConfig"),fZr.forEach(t),UZe=r(AAe," (Speech2Text model)"),AAe.forEach(t),JZe=i(L),fg=n(L,"LI",{});var LAe=s(fg);jae=n(LAe,"STRONG",{});var mZr=s(jae);YZe=r(mZr,"speech_to_text_2"),mZr.forEach(t),KZe=r(LAe," \u2014 "),RR=n(LAe,"A",{href:!0});var gZr=s(RR);ZZe=r(gZr,"Speech2Text2Config"),gZr.forEach(t),eeo=r(LAe," (Speech2Text2 model)"),LAe.forEach(t),oeo=i(L),mg=n(L,"LI",{});var yAe=s(mg);Dae=n(yAe,"STRONG",{});var hZr=s(Dae);reo=r(hZr,"splinter"),hZr.forEach(t),teo=r(yAe," \u2014 "),PR=n(yAe,"A",{href:!0});var pZr=s(PR);aeo=r(pZr,"SplinterConfig"),pZr.forEach(t),neo=r(yAe," (Splinter model)"),yAe.forEach(t),seo=i(L),gg=n(L,"LI",{});var xAe=s(gg);Gae=n(xAe,"STRONG",{});var _Zr=s(Gae);leo=r(_Zr,"squeezebert"),_Zr.forEach(t),ieo=r(xAe," \u2014 "),BR=n(xAe,"A",{href:!0});var uZr=s(BR);deo=r(uZr,"SqueezeBertConfig"),uZr.forEach(t),ceo=r(xAe," (SqueezeBERT model)"),xAe.forEach(t),feo=i(L),hg=n(L,"LI",{});var $Ae=s(hg);Oae=n($Ae,"STRONG",{});var bZr=s(Oae);meo=r(bZr,"swin"),bZr.forEach(t),geo=r($Ae," \u2014 "),IR=n($Ae,"A",{href:!0});var vZr=s(IR);heo=r(vZr,"SwinConfig"),vZr.forEach(t),peo=r($Ae," (Swin Transformer model)"),$Ae.forEach(t),_eo=i(L),pg=n(L,"LI",{});var kAe=s(pg);Vae=n(kAe,"STRONG",{});var FZr=s(Vae);ueo=r(FZr,"t5"),FZr.forEach(t),beo=r(kAe," \u2014 "),NR=n(kAe,"A",{href:!0});var TZr=s(NR);veo=r(TZr,"T5Config"),TZr.forEach(t),Feo=r(kAe," (T5 model)"),kAe.forEach(t),Teo=i(L),_g=n(L,"LI",{});var SAe=s(_g);Xae=n(SAe,"STRONG",{});var MZr=s(Xae);Meo=r(MZr,"tapas"),MZr.forEach(t),Eeo=r(SAe," \u2014 "),qR=n(SAe,"A",{href:!0});var EZr=s(qR);Ceo=r(EZr,"TapasConfig"),EZr.forEach(t),weo=r(SAe," (TAPAS model)"),SAe.forEach(t),Aeo=i(L),ug=n(L,"LI",{});var RAe=s(ug);zae=n(RAe,"STRONG",{});var CZr=s(zae);Leo=r(CZr,"trajectory_transformer"),CZr.forEach(t),yeo=r(RAe," \u2014 "),jR=n(RAe,"A",{href:!0});var wZr=s(jR);xeo=r(wZr,"TrajectoryTransformerConfig"),wZr.forEach(t),$eo=r(RAe," (Trajectory Transformer model)"),RAe.forEach(t),keo=i(L),bg=n(L,"LI",{});var PAe=s(bg);Wae=n(PAe,"STRONG",{});var AZr=s(Wae);Seo=r(AZr,"transfo-xl"),AZr.forEach(t),Reo=r(PAe," \u2014 "),DR=n(PAe,"A",{href:!0});var LZr=s(DR);Peo=r(LZr,"TransfoXLConfig"),LZr.forEach(t),Beo=r(PAe," (Transformer-XL model)"),PAe.forEach(t),Ieo=i(L),vg=n(L,"LI",{});var BAe=s(vg);Qae=n(BAe,"STRONG",{});var yZr=s(Qae);Neo=r(yZr,"trocr"),yZr.forEach(t),qeo=r(BAe," \u2014 "),GR=n(BAe,"A",{href:!0});var xZr=s(GR);jeo=r(xZr,"TrOCRConfig"),xZr.forEach(t),Deo=r(BAe," (TrOCR model)"),BAe.forEach(t),Geo=i(L),Fg=n(L,"LI",{});var IAe=s(Fg);Hae=n(IAe,"STRONG",{});var $Zr=s(Hae);Oeo=r($Zr,"unispeech"),$Zr.forEach(t),Veo=r(IAe," \u2014 "),OR=n(IAe,"A",{href:!0});var kZr=s(OR);Xeo=r(kZr,"UniSpeechConfig"),kZr.forEach(t),zeo=r(IAe," (UniSpeech model)"),IAe.forEach(t),Weo=i(L),Tg=n(L,"LI",{});var NAe=s(Tg);Uae=n(NAe,"STRONG",{});var SZr=s(Uae);Qeo=r(SZr,"unispeech-sat"),SZr.forEach(t),Heo=r(NAe," \u2014 "),VR=n(NAe,"A",{href:!0});var RZr=s(VR);Ueo=r(RZr,"UniSpeechSatConfig"),RZr.forEach(t),Jeo=r(NAe," (UniSpeechSat model)"),NAe.forEach(t),Yeo=i(L),Mg=n(L,"LI",{});var qAe=s(Mg);Jae=n(qAe,"STRONG",{});var PZr=s(Jae);Keo=r(PZr,"van"),PZr.forEach(t),Zeo=r(qAe," \u2014 "),XR=n(qAe,"A",{href:!0});var BZr=s(XR);eoo=r(BZr,"VanConfig"),BZr.forEach(t),ooo=r(qAe," (VAN model)"),qAe.forEach(t),roo=i(L),Eg=n(L,"LI",{});var jAe=s(Eg);Yae=n(jAe,"STRONG",{});var IZr=s(Yae);too=r(IZr,"vilt"),IZr.forEach(t),aoo=r(jAe," \u2014 "),zR=n(jAe,"A",{href:!0});var NZr=s(zR);noo=r(NZr,"ViltConfig"),NZr.forEach(t),soo=r(jAe," (ViLT model)"),jAe.forEach(t),loo=i(L),Cg=n(L,"LI",{});var DAe=s(Cg);Kae=n(DAe,"STRONG",{});var qZr=s(Kae);ioo=r(qZr,"vision-encoder-decoder"),qZr.forEach(t),doo=r(DAe," \u2014 "),WR=n(DAe,"A",{href:!0});var jZr=s(WR);coo=r(jZr,"VisionEncoderDecoderConfig"),jZr.forEach(t),foo=r(DAe," (Vision Encoder decoder model)"),DAe.forEach(t),moo=i(L),wg=n(L,"LI",{});var GAe=s(wg);Zae=n(GAe,"STRONG",{});var DZr=s(Zae);goo=r(DZr,"vision-text-dual-encoder"),DZr.forEach(t),hoo=r(GAe," \u2014 "),QR=n(GAe,"A",{href:!0});var GZr=s(QR);poo=r(GZr,"VisionTextDualEncoderConfig"),GZr.forEach(t),_oo=r(GAe," (VisionTextDualEncoder model)"),GAe.forEach(t),uoo=i(L),Ag=n(L,"LI",{});var OAe=s(Ag);ene=n(OAe,"STRONG",{});var OZr=s(ene);boo=r(OZr,"visual_bert"),OZr.forEach(t),voo=r(OAe," \u2014 "),HR=n(OAe,"A",{href:!0});var VZr=s(HR);Foo=r(VZr,"VisualBertConfig"),VZr.forEach(t),Too=r(OAe," (VisualBERT model)"),OAe.forEach(t),Moo=i(L),Lg=n(L,"LI",{});var VAe=s(Lg);one=n(VAe,"STRONG",{});var XZr=s(one);Eoo=r(XZr,"vit"),XZr.forEach(t),Coo=r(VAe," \u2014 "),UR=n(VAe,"A",{href:!0});var zZr=s(UR);woo=r(zZr,"ViTConfig"),zZr.forEach(t),Aoo=r(VAe," (ViT model)"),VAe.forEach(t),Loo=i(L),yg=n(L,"LI",{});var XAe=s(yg);rne=n(XAe,"STRONG",{});var WZr=s(rne);yoo=r(WZr,"vit_mae"),WZr.forEach(t),xoo=r(XAe," \u2014 "),JR=n(XAe,"A",{href:!0});var QZr=s(JR);$oo=r(QZr,"ViTMAEConfig"),QZr.forEach(t),koo=r(XAe," (ViTMAE model)"),XAe.forEach(t),Soo=i(L),xg=n(L,"LI",{});var zAe=s(xg);tne=n(zAe,"STRONG",{});var HZr=s(tne);Roo=r(HZr,"wav2vec2"),HZr.forEach(t),Poo=r(zAe," \u2014 "),YR=n(zAe,"A",{href:!0});var UZr=s(YR);Boo=r(UZr,"Wav2Vec2Config"),UZr.forEach(t),Ioo=r(zAe," (Wav2Vec2 model)"),zAe.forEach(t),Noo=i(L),$g=n(L,"LI",{});var WAe=s($g);ane=n(WAe,"STRONG",{});var JZr=s(ane);qoo=r(JZr,"wav2vec2-conformer"),JZr.forEach(t),joo=r(WAe," \u2014 "),KR=n(WAe,"A",{href:!0});var YZr=s(KR);Doo=r(YZr,"Wav2Vec2ConformerConfig"),YZr.forEach(t),Goo=r(WAe," (Wav2Vec2-Conformer model)"),WAe.forEach(t),Ooo=i(L),kg=n(L,"LI",{});var QAe=s(kg);nne=n(QAe,"STRONG",{});var KZr=s(nne);Voo=r(KZr,"wavlm"),KZr.forEach(t),Xoo=r(QAe," \u2014 "),ZR=n(QAe,"A",{href:!0});var ZZr=s(ZR);zoo=r(ZZr,"WavLMConfig"),ZZr.forEach(t),Woo=r(QAe," (WavLM model)"),QAe.forEach(t),Qoo=i(L),Sg=n(L,"LI",{});var HAe=s(Sg);sne=n(HAe,"STRONG",{});var eet=s(sne);Hoo=r(eet,"xglm"),eet.forEach(t),Uoo=r(HAe," \u2014 "),eP=n(HAe,"A",{href:!0});var oet=s(eP);Joo=r(oet,"XGLMConfig"),oet.forEach(t),Yoo=r(HAe," (XGLM model)"),HAe.forEach(t),Koo=i(L),Rg=n(L,"LI",{});var UAe=s(Rg);lne=n(UAe,"STRONG",{});var ret=s(lne);Zoo=r(ret,"xlm"),ret.forEach(t),ero=r(UAe," \u2014 "),oP=n(UAe,"A",{href:!0});var tet=s(oP);oro=r(tet,"XLMConfig"),tet.forEach(t),rro=r(UAe," (XLM model)"),UAe.forEach(t),tro=i(L),Pg=n(L,"LI",{});var JAe=s(Pg);ine=n(JAe,"STRONG",{});var aet=s(ine);aro=r(aet,"xlm-prophetnet"),aet.forEach(t),nro=r(JAe," \u2014 "),rP=n(JAe,"A",{href:!0});var net=s(rP);sro=r(net,"XLMProphetNetConfig"),net.forEach(t),lro=r(JAe," (XLM-ProphetNet model)"),JAe.forEach(t),iro=i(L),Bg=n(L,"LI",{});var YAe=s(Bg);dne=n(YAe,"STRONG",{});var set=s(dne);dro=r(set,"xlm-roberta"),set.forEach(t),cro=r(YAe," \u2014 "),tP=n(YAe,"A",{href:!0});var iet=s(tP);fro=r(iet,"XLMRobertaConfig"),iet.forEach(t),mro=r(YAe," (XLM-RoBERTa model)"),YAe.forEach(t),gro=i(L),Ig=n(L,"LI",{});var KAe=s(Ig);cne=n(KAe,"STRONG",{});var det=s(cne);hro=r(det,"xlm-roberta-xl"),det.forEach(t),pro=r(KAe," \u2014 "),aP=n(KAe,"A",{href:!0});var cet=s(aP);_ro=r(cet,"XLMRobertaXLConfig"),cet.forEach(t),uro=r(KAe," (XLM-RoBERTa-XL model)"),KAe.forEach(t),bro=i(L),Ng=n(L,"LI",{});var ZAe=s(Ng);fne=n(ZAe,"STRONG",{});var fet=s(fne);vro=r(fet,"xlnet"),fet.forEach(t),Fro=r(ZAe," \u2014 "),nP=n(ZAe,"A",{href:!0});var met=s(nP);Tro=r(met,"XLNetConfig"),met.forEach(t),Mro=r(ZAe," (XLNet model)"),ZAe.forEach(t),Ero=i(L),qg=n(L,"LI",{});var e6e=s(qg);mne=n(e6e,"STRONG",{});var get=s(mne);Cro=r(get,"yolos"),get.forEach(t),wro=r(e6e," \u2014 "),sP=n(e6e,"A",{href:!0});var het=s(sP);Aro=r(het,"YolosConfig"),het.forEach(t),Lro=r(e6e," (YOLOS model)"),e6e.forEach(t),yro=i(L),jg=n(L,"LI",{});var o6e=s(jg);gne=n(o6e,"STRONG",{});var pet=s(gne);xro=r(pet,"yoso"),pet.forEach(t),$ro=r(o6e," \u2014 "),lP=n(o6e,"A",{href:!0});var _et=s(lP);kro=r(_et,"YosoConfig"),_et.forEach(t),Sro=r(o6e," (YOSO model)"),o6e.forEach(t),L.forEach(t),Rro=i(tt),T(Dg.$$.fragment,tt),tt.forEach(t),Pro=i(rt),Gg=n(rt,"DIV",{class:!0});var FVe=s(Gg);T($6.$$.fragment,FVe),Bro=i(FVe),hne=n(FVe,"P",{});var uet=s(hne);Iro=r(uet,"Register a new configuration for this class."),uet.forEach(t),FVe.forEach(t),rt.forEach(t),TGe=i(f),$i=n(f,"H2",{class:!0});var TVe=s($i);Og=n(TVe,"A",{id:!0,class:!0,href:!0});var bet=s(Og);pne=n(bet,"SPAN",{});var vet=s(pne);T(k6.$$.fragment,vet),vet.forEach(t),bet.forEach(t),Nro=i(TVe),_ne=n(TVe,"SPAN",{});var Fet=s(_ne);qro=r(Fet,"AutoTokenizer"),Fet.forEach(t),TVe.forEach(t),MGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(S6.$$.fragment,zs),jro=i(zs),R6=n(zs,"P",{});var MVe=s(R6);Dro=r(MVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),iP=n(MVe,"A",{href:!0});var Tet=s(iP);Gro=r(Tet,"AutoTokenizer.from_pretrained()"),Tet.forEach(t),Oro=r(MVe," class method."),MVe.forEach(t),Vro=i(zs),P6=n(zs,"P",{});var EVe=s(P6);Xro=r(EVe,"This class cannot be instantiated directly using "),une=n(EVe,"CODE",{});var Met=s(une);zro=r(Met,"__init__()"),Met.forEach(t),Wro=r(EVe," (throws an error)."),EVe.forEach(t),Qro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(B6.$$.fragment,Ws),Hro=i(Ws),bne=n(Ws,"P",{});var Eet=s(bne);Uro=r(Eet,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eet.forEach(t),Jro=i(Ws),$a=n(Ws,"P",{});var Ew=s($a);Yro=r(Ew,"The tokenizer class to instantiate is selected based on the "),vne=n(Ew,"CODE",{});var Cet=s(vne);Kro=r(Cet,"model_type"),Cet.forEach(t),Zro=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Fne=n(Ew,"CODE",{});var wet=s(Fne);eto=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),oto=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tne=n(Ew,"CODE",{});var Aet=s(Tne);rto=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),tto=r(Ew,":"),Ew.forEach(t),ato=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var G$=s(Nn);Mne=n(G$,"STRONG",{});var Let=s(Mne);nto=r(Let,"albert"),Let.forEach(t),sto=r(G$," \u2014 "),dP=n(G$,"A",{href:!0});var yet=s(dP);lto=r(yet,"AlbertTokenizer"),yet.forEach(t),ito=r(G$," or "),cP=n(G$,"A",{href:!0});var xet=s(cP);dto=r(xet,"AlbertTokenizerFast"),xet.forEach(t),cto=r(G$," (ALBERT model)"),G$.forEach(t),fto=i(S),qn=n(S,"LI",{});var O$=s(qn);Ene=n(O$,"STRONG",{});var $et=s(Ene);mto=r($et,"bart"),$et.forEach(t),gto=r(O$," \u2014 "),fP=n(O$,"A",{href:!0});var ket=s(fP);hto=r(ket,"BartTokenizer"),ket.forEach(t),pto=r(O$," or "),mP=n(O$,"A",{href:!0});var Set=s(mP);_to=r(Set,"BartTokenizerFast"),Set.forEach(t),uto=r(O$," (BART model)"),O$.forEach(t),bto=i(S),jn=n(S,"LI",{});var V$=s(jn);Cne=n(V$,"STRONG",{});var Ret=s(Cne);vto=r(Ret,"barthez"),Ret.forEach(t),Fto=r(V$," \u2014 "),gP=n(V$,"A",{href:!0});var Pet=s(gP);Tto=r(Pet,"BarthezTokenizer"),Pet.forEach(t),Mto=r(V$," or "),hP=n(V$,"A",{href:!0});var Bet=s(hP);Eto=r(Bet,"BarthezTokenizerFast"),Bet.forEach(t),Cto=r(V$," (BARThez model)"),V$.forEach(t),wto=i(S),Vg=n(S,"LI",{});var r6e=s(Vg);wne=n(r6e,"STRONG",{});var Iet=s(wne);Ato=r(Iet,"bartpho"),Iet.forEach(t),Lto=r(r6e," \u2014 "),pP=n(r6e,"A",{href:!0});var Net=s(pP);yto=r(Net,"BartphoTokenizer"),Net.forEach(t),xto=r(r6e," (BARTpho model)"),r6e.forEach(t),$to=i(S),Dn=n(S,"LI",{});var X$=s(Dn);Ane=n(X$,"STRONG",{});var qet=s(Ane);kto=r(qet,"bert"),qet.forEach(t),Sto=r(X$," \u2014 "),_P=n(X$,"A",{href:!0});var jet=s(_P);Rto=r(jet,"BertTokenizer"),jet.forEach(t),Pto=r(X$," or "),uP=n(X$,"A",{href:!0});var Det=s(uP);Bto=r(Det,"BertTokenizerFast"),Det.forEach(t),Ito=r(X$," (BERT model)"),X$.forEach(t),Nto=i(S),Xg=n(S,"LI",{});var t6e=s(Xg);Lne=n(t6e,"STRONG",{});var Get=s(Lne);qto=r(Get,"bert-generation"),Get.forEach(t),jto=r(t6e," \u2014 "),bP=n(t6e,"A",{href:!0});var Oet=s(bP);Dto=r(Oet,"BertGenerationTokenizer"),Oet.forEach(t),Gto=r(t6e," (Bert Generation model)"),t6e.forEach(t),Oto=i(S),zg=n(S,"LI",{});var a6e=s(zg);yne=n(a6e,"STRONG",{});var Vet=s(yne);Vto=r(Vet,"bert-japanese"),Vet.forEach(t),Xto=r(a6e," \u2014 "),vP=n(a6e,"A",{href:!0});var Xet=s(vP);zto=r(Xet,"BertJapaneseTokenizer"),Xet.forEach(t),Wto=r(a6e," (BertJapanese model)"),a6e.forEach(t),Qto=i(S),Wg=n(S,"LI",{});var n6e=s(Wg);xne=n(n6e,"STRONG",{});var zet=s(xne);Hto=r(zet,"bertweet"),zet.forEach(t),Uto=r(n6e," \u2014 "),FP=n(n6e,"A",{href:!0});var Wet=s(FP);Jto=r(Wet,"BertweetTokenizer"),Wet.forEach(t),Yto=r(n6e," (BERTweet model)"),n6e.forEach(t),Kto=i(S),Gn=n(S,"LI",{});var z$=s(Gn);$ne=n(z$,"STRONG",{});var Qet=s($ne);Zto=r(Qet,"big_bird"),Qet.forEach(t),eao=r(z$," \u2014 "),TP=n(z$,"A",{href:!0});var Het=s(TP);oao=r(Het,"BigBirdTokenizer"),Het.forEach(t),rao=r(z$," or "),MP=n(z$,"A",{href:!0});var Uet=s(MP);tao=r(Uet,"BigBirdTokenizerFast"),Uet.forEach(t),aao=r(z$," (BigBird model)"),z$.forEach(t),nao=i(S),On=n(S,"LI",{});var W$=s(On);kne=n(W$,"STRONG",{});var Jet=s(kne);sao=r(Jet,"bigbird_pegasus"),Jet.forEach(t),lao=r(W$," \u2014 "),EP=n(W$,"A",{href:!0});var Yet=s(EP);iao=r(Yet,"PegasusTokenizer"),Yet.forEach(t),dao=r(W$," or "),CP=n(W$,"A",{href:!0});var Ket=s(CP);cao=r(Ket,"PegasusTokenizerFast"),Ket.forEach(t),fao=r(W$," (BigBird-Pegasus model)"),W$.forEach(t),mao=i(S),Vn=n(S,"LI",{});var Q$=s(Vn);Sne=n(Q$,"STRONG",{});var Zet=s(Sne);gao=r(Zet,"blenderbot"),Zet.forEach(t),hao=r(Q$," \u2014 "),wP=n(Q$,"A",{href:!0});var eot=s(wP);pao=r(eot,"BlenderbotTokenizer"),eot.forEach(t),_ao=r(Q$," or "),AP=n(Q$,"A",{href:!0});var oot=s(AP);uao=r(oot,"BlenderbotTokenizerFast"),oot.forEach(t),bao=r(Q$," (Blenderbot model)"),Q$.forEach(t),vao=i(S),Qg=n(S,"LI",{});var s6e=s(Qg);Rne=n(s6e,"STRONG",{});var rot=s(Rne);Fao=r(rot,"blenderbot-small"),rot.forEach(t),Tao=r(s6e," \u2014 "),LP=n(s6e,"A",{href:!0});var tot=s(LP);Mao=r(tot,"BlenderbotSmallTokenizer"),tot.forEach(t),Eao=r(s6e," (BlenderbotSmall model)"),s6e.forEach(t),Cao=i(S),Hg=n(S,"LI",{});var l6e=s(Hg);Pne=n(l6e,"STRONG",{});var aot=s(Pne);wao=r(aot,"bloom"),aot.forEach(t),Aao=r(l6e," \u2014 "),yP=n(l6e,"A",{href:!0});var not=s(yP);Lao=r(not,"BloomTokenizerFast"),not.forEach(t),yao=r(l6e," (BLOOM model)"),l6e.forEach(t),xao=i(S),Ug=n(S,"LI",{});var i6e=s(Ug);Bne=n(i6e,"STRONG",{});var sot=s(Bne);$ao=r(sot,"byt5"),sot.forEach(t),kao=r(i6e," \u2014 "),xP=n(i6e,"A",{href:!0});var lot=s(xP);Sao=r(lot,"ByT5Tokenizer"),lot.forEach(t),Rao=r(i6e," (ByT5 model)"),i6e.forEach(t),Pao=i(S),Xn=n(S,"LI",{});var H$=s(Xn);Ine=n(H$,"STRONG",{});var iot=s(Ine);Bao=r(iot,"camembert"),iot.forEach(t),Iao=r(H$," \u2014 "),$P=n(H$,"A",{href:!0});var dot=s($P);Nao=r(dot,"CamembertTokenizer"),dot.forEach(t),qao=r(H$," or "),kP=n(H$,"A",{href:!0});var cot=s(kP);jao=r(cot,"CamembertTokenizerFast"),cot.forEach(t),Dao=r(H$," (CamemBERT model)"),H$.forEach(t),Gao=i(S),Jg=n(S,"LI",{});var d6e=s(Jg);Nne=n(d6e,"STRONG",{});var fot=s(Nne);Oao=r(fot,"canine"),fot.forEach(t),Vao=r(d6e," \u2014 "),SP=n(d6e,"A",{href:!0});var mot=s(SP);Xao=r(mot,"CanineTokenizer"),mot.forEach(t),zao=r(d6e," (CANINE model)"),d6e.forEach(t),Wao=i(S),zn=n(S,"LI",{});var U$=s(zn);qne=n(U$,"STRONG",{});var got=s(qne);Qao=r(got,"clip"),got.forEach(t),Hao=r(U$," \u2014 "),RP=n(U$,"A",{href:!0});var hot=s(RP);Uao=r(hot,"CLIPTokenizer"),hot.forEach(t),Jao=r(U$," or "),PP=n(U$,"A",{href:!0});var pot=s(PP);Yao=r(pot,"CLIPTokenizerFast"),pot.forEach(t),Kao=r(U$," (CLIP model)"),U$.forEach(t),Zao=i(S),Wn=n(S,"LI",{});var J$=s(Wn);jne=n(J$,"STRONG",{});var _ot=s(jne);eno=r(_ot,"convbert"),_ot.forEach(t),ono=r(J$," \u2014 "),BP=n(J$,"A",{href:!0});var uot=s(BP);rno=r(uot,"ConvBertTokenizer"),uot.forEach(t),tno=r(J$," or "),IP=n(J$,"A",{href:!0});var bot=s(IP);ano=r(bot,"ConvBertTokenizerFast"),bot.forEach(t),nno=r(J$," (ConvBERT model)"),J$.forEach(t),sno=i(S),Qn=n(S,"LI",{});var Y$=s(Qn);Dne=n(Y$,"STRONG",{});var vot=s(Dne);lno=r(vot,"cpm"),vot.forEach(t),ino=r(Y$," \u2014 "),NP=n(Y$,"A",{href:!0});var Fot=s(NP);dno=r(Fot,"CpmTokenizer"),Fot.forEach(t),cno=r(Y$," or "),qP=n(Y$,"A",{href:!0});var Tot=s(qP);fno=r(Tot,"CpmTokenizerFast"),Tot.forEach(t),mno=r(Y$," (CPM model)"),Y$.forEach(t),gno=i(S),Yg=n(S,"LI",{});var c6e=s(Yg);Gne=n(c6e,"STRONG",{});var Mot=s(Gne);hno=r(Mot,"ctrl"),Mot.forEach(t),pno=r(c6e," \u2014 "),jP=n(c6e,"A",{href:!0});var Eot=s(jP);_no=r(Eot,"CTRLTokenizer"),Eot.forEach(t),uno=r(c6e," (CTRL model)"),c6e.forEach(t),bno=i(S),Hn=n(S,"LI",{});var K$=s(Hn);One=n(K$,"STRONG",{});var Cot=s(One);vno=r(Cot,"data2vec-text"),Cot.forEach(t),Fno=r(K$," \u2014 "),DP=n(K$,"A",{href:!0});var wot=s(DP);Tno=r(wot,"RobertaTokenizer"),wot.forEach(t),Mno=r(K$," or "),GP=n(K$,"A",{href:!0});var Aot=s(GP);Eno=r(Aot,"RobertaTokenizerFast"),Aot.forEach(t),Cno=r(K$," (Data2VecText model)"),K$.forEach(t),wno=i(S),Un=n(S,"LI",{});var Z$=s(Un);Vne=n(Z$,"STRONG",{});var Lot=s(Vne);Ano=r(Lot,"deberta"),Lot.forEach(t),Lno=r(Z$," \u2014 "),OP=n(Z$,"A",{href:!0});var yot=s(OP);yno=r(yot,"DebertaTokenizer"),yot.forEach(t),xno=r(Z$," or "),VP=n(Z$,"A",{href:!0});var xot=s(VP);$no=r(xot,"DebertaTokenizerFast"),xot.forEach(t),kno=r(Z$," (DeBERTa model)"),Z$.forEach(t),Sno=i(S),Jn=n(S,"LI",{});var ek=s(Jn);Xne=n(ek,"STRONG",{});var $ot=s(Xne);Rno=r($ot,"deberta-v2"),$ot.forEach(t),Pno=r(ek," \u2014 "),XP=n(ek,"A",{href:!0});var kot=s(XP);Bno=r(kot,"DebertaV2Tokenizer"),kot.forEach(t),Ino=r(ek," or "),zP=n(ek,"A",{href:!0});var Sot=s(zP);Nno=r(Sot,"DebertaV2TokenizerFast"),Sot.forEach(t),qno=r(ek," (DeBERTa-v2 model)"),ek.forEach(t),jno=i(S),Yn=n(S,"LI",{});var ok=s(Yn);zne=n(ok,"STRONG",{});var Rot=s(zne);Dno=r(Rot,"distilbert"),Rot.forEach(t),Gno=r(ok," \u2014 "),WP=n(ok,"A",{href:!0});var Pot=s(WP);Ono=r(Pot,"DistilBertTokenizer"),Pot.forEach(t),Vno=r(ok," or "),QP=n(ok,"A",{href:!0});var Bot=s(QP);Xno=r(Bot,"DistilBertTokenizerFast"),Bot.forEach(t),zno=r(ok," (DistilBERT model)"),ok.forEach(t),Wno=i(S),Kn=n(S,"LI",{});var rk=s(Kn);Wne=n(rk,"STRONG",{});var Iot=s(Wne);Qno=r(Iot,"dpr"),Iot.forEach(t),Hno=r(rk," \u2014 "),HP=n(rk,"A",{href:!0});var Not=s(HP);Uno=r(Not,"DPRQuestionEncoderTokenizer"),Not.forEach(t),Jno=r(rk," or "),UP=n(rk,"A",{href:!0});var qot=s(UP);Yno=r(qot,"DPRQuestionEncoderTokenizerFast"),qot.forEach(t),Kno=r(rk," (DPR model)"),rk.forEach(t),Zno=i(S),Zn=n(S,"LI",{});var tk=s(Zn);Qne=n(tk,"STRONG",{});var jot=s(Qne);eso=r(jot,"electra"),jot.forEach(t),oso=r(tk," \u2014 "),JP=n(tk,"A",{href:!0});var Dot=s(JP);rso=r(Dot,"ElectraTokenizer"),Dot.forEach(t),tso=r(tk," or "),YP=n(tk,"A",{href:!0});var Got=s(YP);aso=r(Got,"ElectraTokenizerFast"),Got.forEach(t),nso=r(tk," (ELECTRA model)"),tk.forEach(t),sso=i(S),Kg=n(S,"LI",{});var f6e=s(Kg);Hne=n(f6e,"STRONG",{});var Oot=s(Hne);lso=r(Oot,"flaubert"),Oot.forEach(t),iso=r(f6e," \u2014 "),KP=n(f6e,"A",{href:!0});var Vot=s(KP);dso=r(Vot,"FlaubertTokenizer"),Vot.forEach(t),cso=r(f6e," (FlauBERT model)"),f6e.forEach(t),fso=i(S),es=n(S,"LI",{});var ak=s(es);Une=n(ak,"STRONG",{});var Xot=s(Une);mso=r(Xot,"fnet"),Xot.forEach(t),gso=r(ak," \u2014 "),ZP=n(ak,"A",{href:!0});var zot=s(ZP);hso=r(zot,"FNetTokenizer"),zot.forEach(t),pso=r(ak," or "),eB=n(ak,"A",{href:!0});var Wot=s(eB);_so=r(Wot,"FNetTokenizerFast"),Wot.forEach(t),uso=r(ak," (FNet model)"),ak.forEach(t),bso=i(S),Zg=n(S,"LI",{});var m6e=s(Zg);Jne=n(m6e,"STRONG",{});var Qot=s(Jne);vso=r(Qot,"fsmt"),Qot.forEach(t),Fso=r(m6e," \u2014 "),oB=n(m6e,"A",{href:!0});var Hot=s(oB);Tso=r(Hot,"FSMTTokenizer"),Hot.forEach(t),Mso=r(m6e," (FairSeq Machine-Translation model)"),m6e.forEach(t),Eso=i(S),os=n(S,"LI",{});var nk=s(os);Yne=n(nk,"STRONG",{});var Uot=s(Yne);Cso=r(Uot,"funnel"),Uot.forEach(t),wso=r(nk," \u2014 "),rB=n(nk,"A",{href:!0});var Jot=s(rB);Aso=r(Jot,"FunnelTokenizer"),Jot.forEach(t),Lso=r(nk," or "),tB=n(nk,"A",{href:!0});var Yot=s(tB);yso=r(Yot,"FunnelTokenizerFast"),Yot.forEach(t),xso=r(nk," (Funnel Transformer model)"),nk.forEach(t),$so=i(S),rs=n(S,"LI",{});var sk=s(rs);Kne=n(sk,"STRONG",{});var Kot=s(Kne);kso=r(Kot,"gpt2"),Kot.forEach(t),Sso=r(sk," \u2014 "),aB=n(sk,"A",{href:!0});var Zot=s(aB);Rso=r(Zot,"GPT2Tokenizer"),Zot.forEach(t),Pso=r(sk," or "),nB=n(sk,"A",{href:!0});var ert=s(nB);Bso=r(ert,"GPT2TokenizerFast"),ert.forEach(t),Iso=r(sk," (OpenAI GPT-2 model)"),sk.forEach(t),Nso=i(S),ts=n(S,"LI",{});var lk=s(ts);Zne=n(lk,"STRONG",{});var ort=s(Zne);qso=r(ort,"gpt_neo"),ort.forEach(t),jso=r(lk," \u2014 "),sB=n(lk,"A",{href:!0});var rrt=s(sB);Dso=r(rrt,"GPT2Tokenizer"),rrt.forEach(t),Gso=r(lk," or "),lB=n(lk,"A",{href:!0});var trt=s(lB);Oso=r(trt,"GPT2TokenizerFast"),trt.forEach(t),Vso=r(lk," (GPT Neo model)"),lk.forEach(t),Xso=i(S),eh=n(S,"LI",{});var g6e=s(eh);ese=n(g6e,"STRONG",{});var art=s(ese);zso=r(art,"gpt_neox"),art.forEach(t),Wso=r(g6e," \u2014 "),iB=n(g6e,"A",{href:!0});var nrt=s(iB);Qso=r(nrt,"GPTNeoXTokenizerFast"),nrt.forEach(t),Hso=r(g6e," (GPT NeoX model)"),g6e.forEach(t),Uso=i(S),as=n(S,"LI",{});var ik=s(as);ose=n(ik,"STRONG",{});var srt=s(ose);Jso=r(srt,"gptj"),srt.forEach(t),Yso=r(ik," \u2014 "),dB=n(ik,"A",{href:!0});var lrt=s(dB);Kso=r(lrt,"GPT2Tokenizer"),lrt.forEach(t),Zso=r(ik," or "),cB=n(ik,"A",{href:!0});var irt=s(cB);elo=r(irt,"GPT2TokenizerFast"),irt.forEach(t),olo=r(ik," (GPT-J model)"),ik.forEach(t),rlo=i(S),ns=n(S,"LI",{});var dk=s(ns);rse=n(dk,"STRONG",{});var drt=s(rse);tlo=r(drt,"herbert"),drt.forEach(t),alo=r(dk," \u2014 "),fB=n(dk,"A",{href:!0});var crt=s(fB);nlo=r(crt,"HerbertTokenizer"),crt.forEach(t),slo=r(dk," or "),mB=n(dk,"A",{href:!0});var frt=s(mB);llo=r(frt,"HerbertTokenizerFast"),frt.forEach(t),ilo=r(dk," (HerBERT model)"),dk.forEach(t),dlo=i(S),oh=n(S,"LI",{});var h6e=s(oh);tse=n(h6e,"STRONG",{});var mrt=s(tse);clo=r(mrt,"hubert"),mrt.forEach(t),flo=r(h6e," \u2014 "),gB=n(h6e,"A",{href:!0});var grt=s(gB);mlo=r(grt,"Wav2Vec2CTCTokenizer"),grt.forEach(t),glo=r(h6e," (Hubert model)"),h6e.forEach(t),hlo=i(S),ss=n(S,"LI",{});var ck=s(ss);ase=n(ck,"STRONG",{});var hrt=s(ase);plo=r(hrt,"ibert"),hrt.forEach(t),_lo=r(ck," \u2014 "),hB=n(ck,"A",{href:!0});var prt=s(hB);ulo=r(prt,"RobertaTokenizer"),prt.forEach(t),blo=r(ck," or "),pB=n(ck,"A",{href:!0});var _rt=s(pB);vlo=r(_rt,"RobertaTokenizerFast"),_rt.forEach(t),Flo=r(ck," (I-BERT model)"),ck.forEach(t),Tlo=i(S),ls=n(S,"LI",{});var fk=s(ls);nse=n(fk,"STRONG",{});var urt=s(nse);Mlo=r(urt,"layoutlm"),urt.forEach(t),Elo=r(fk," \u2014 "),_B=n(fk,"A",{href:!0});var brt=s(_B);Clo=r(brt,"LayoutLMTokenizer"),brt.forEach(t),wlo=r(fk," or "),uB=n(fk,"A",{href:!0});var vrt=s(uB);Alo=r(vrt,"LayoutLMTokenizerFast"),vrt.forEach(t),Llo=r(fk," (LayoutLM model)"),fk.forEach(t),ylo=i(S),is=n(S,"LI",{});var mk=s(is);sse=n(mk,"STRONG",{});var Frt=s(sse);xlo=r(Frt,"layoutlmv2"),Frt.forEach(t),$lo=r(mk," \u2014 "),bB=n(mk,"A",{href:!0});var Trt=s(bB);klo=r(Trt,"LayoutLMv2Tokenizer"),Trt.forEach(t),Slo=r(mk," or "),vB=n(mk,"A",{href:!0});var Mrt=s(vB);Rlo=r(Mrt,"LayoutLMv2TokenizerFast"),Mrt.forEach(t),Plo=r(mk," (LayoutLMv2 model)"),mk.forEach(t),Blo=i(S),ds=n(S,"LI",{});var gk=s(ds);lse=n(gk,"STRONG",{});var Ert=s(lse);Ilo=r(Ert,"layoutlmv3"),Ert.forEach(t),Nlo=r(gk," \u2014 "),FB=n(gk,"A",{href:!0});var Crt=s(FB);qlo=r(Crt,"LayoutLMv3Tokenizer"),Crt.forEach(t),jlo=r(gk," or "),TB=n(gk,"A",{href:!0});var wrt=s(TB);Dlo=r(wrt,"LayoutLMv3TokenizerFast"),wrt.forEach(t),Glo=r(gk," (LayoutLMv3 model)"),gk.forEach(t),Olo=i(S),cs=n(S,"LI",{});var hk=s(cs);ise=n(hk,"STRONG",{});var Art=s(ise);Vlo=r(Art,"layoutxlm"),Art.forEach(t),Xlo=r(hk," \u2014 "),MB=n(hk,"A",{href:!0});var Lrt=s(MB);zlo=r(Lrt,"LayoutXLMTokenizer"),Lrt.forEach(t),Wlo=r(hk," or "),EB=n(hk,"A",{href:!0});var yrt=s(EB);Qlo=r(yrt,"LayoutXLMTokenizerFast"),yrt.forEach(t),Hlo=r(hk," (LayoutXLM model)"),hk.forEach(t),Ulo=i(S),fs=n(S,"LI",{});var pk=s(fs);dse=n(pk,"STRONG",{});var xrt=s(dse);Jlo=r(xrt,"led"),xrt.forEach(t),Ylo=r(pk," \u2014 "),CB=n(pk,"A",{href:!0});var $rt=s(CB);Klo=r($rt,"LEDTokenizer"),$rt.forEach(t),Zlo=r(pk," or "),wB=n(pk,"A",{href:!0});var krt=s(wB);eio=r(krt,"LEDTokenizerFast"),krt.forEach(t),oio=r(pk," (LED model)"),pk.forEach(t),rio=i(S),ms=n(S,"LI",{});var _k=s(ms);cse=n(_k,"STRONG",{});var Srt=s(cse);tio=r(Srt,"longformer"),Srt.forEach(t),aio=r(_k," \u2014 "),AB=n(_k,"A",{href:!0});var Rrt=s(AB);nio=r(Rrt,"LongformerTokenizer"),Rrt.forEach(t),sio=r(_k," or "),LB=n(_k,"A",{href:!0});var Prt=s(LB);lio=r(Prt,"LongformerTokenizerFast"),Prt.forEach(t),iio=r(_k," (Longformer model)"),_k.forEach(t),dio=i(S),gs=n(S,"LI",{});var uk=s(gs);fse=n(uk,"STRONG",{});var Brt=s(fse);cio=r(Brt,"longt5"),Brt.forEach(t),fio=r(uk," \u2014 "),yB=n(uk,"A",{href:!0});var Irt=s(yB);mio=r(Irt,"T5Tokenizer"),Irt.forEach(t),gio=r(uk," or "),xB=n(uk,"A",{href:!0});var Nrt=s(xB);hio=r(Nrt,"T5TokenizerFast"),Nrt.forEach(t),pio=r(uk," (LongT5 model)"),uk.forEach(t),_io=i(S),rh=n(S,"LI",{});var p6e=s(rh);mse=n(p6e,"STRONG",{});var qrt=s(mse);uio=r(qrt,"luke"),qrt.forEach(t),bio=r(p6e," \u2014 "),$B=n(p6e,"A",{href:!0});var jrt=s($B);vio=r(jrt,"LukeTokenizer"),jrt.forEach(t),Fio=r(p6e," (LUKE model)"),p6e.forEach(t),Tio=i(S),hs=n(S,"LI",{});var bk=s(hs);gse=n(bk,"STRONG",{});var Drt=s(gse);Mio=r(Drt,"lxmert"),Drt.forEach(t),Eio=r(bk," \u2014 "),kB=n(bk,"A",{href:!0});var Grt=s(kB);Cio=r(Grt,"LxmertTokenizer"),Grt.forEach(t),wio=r(bk," or "),SB=n(bk,"A",{href:!0});var Ort=s(SB);Aio=r(Ort,"LxmertTokenizerFast"),Ort.forEach(t),Lio=r(bk," (LXMERT model)"),bk.forEach(t),yio=i(S),th=n(S,"LI",{});var _6e=s(th);hse=n(_6e,"STRONG",{});var Vrt=s(hse);xio=r(Vrt,"m2m_100"),Vrt.forEach(t),$io=r(_6e," \u2014 "),RB=n(_6e,"A",{href:!0});var Xrt=s(RB);kio=r(Xrt,"M2M100Tokenizer"),Xrt.forEach(t),Sio=r(_6e," (M2M100 model)"),_6e.forEach(t),Rio=i(S),ah=n(S,"LI",{});var u6e=s(ah);pse=n(u6e,"STRONG",{});var zrt=s(pse);Pio=r(zrt,"marian"),zrt.forEach(t),Bio=r(u6e," \u2014 "),PB=n(u6e,"A",{href:!0});var Wrt=s(PB);Iio=r(Wrt,"MarianTokenizer"),Wrt.forEach(t),Nio=r(u6e," (Marian model)"),u6e.forEach(t),qio=i(S),ps=n(S,"LI",{});var vk=s(ps);_se=n(vk,"STRONG",{});var Qrt=s(_se);jio=r(Qrt,"mbart"),Qrt.forEach(t),Dio=r(vk," \u2014 "),BB=n(vk,"A",{href:!0});var Hrt=s(BB);Gio=r(Hrt,"MBartTokenizer"),Hrt.forEach(t),Oio=r(vk," or "),IB=n(vk,"A",{href:!0});var Urt=s(IB);Vio=r(Urt,"MBartTokenizerFast"),Urt.forEach(t),Xio=r(vk," (mBART model)"),vk.forEach(t),zio=i(S),_s=n(S,"LI",{});var Fk=s(_s);use=n(Fk,"STRONG",{});var Jrt=s(use);Wio=r(Jrt,"mbart50"),Jrt.forEach(t),Qio=r(Fk," \u2014 "),NB=n(Fk,"A",{href:!0});var Yrt=s(NB);Hio=r(Yrt,"MBart50Tokenizer"),Yrt.forEach(t),Uio=r(Fk," or "),qB=n(Fk,"A",{href:!0});var Krt=s(qB);Jio=r(Krt,"MBart50TokenizerFast"),Krt.forEach(t),Yio=r(Fk," (mBART-50 model)"),Fk.forEach(t),Kio=i(S),us=n(S,"LI",{});var Tk=s(us);bse=n(Tk,"STRONG",{});var Zrt=s(bse);Zio=r(Zrt,"megatron-bert"),Zrt.forEach(t),edo=r(Tk," \u2014 "),jB=n(Tk,"A",{href:!0});var ett=s(jB);odo=r(ett,"BertTokenizer"),ett.forEach(t),rdo=r(Tk," or "),DB=n(Tk,"A",{href:!0});var ott=s(DB);tdo=r(ott,"BertTokenizerFast"),ott.forEach(t),ado=r(Tk," (Megatron-BERT model)"),Tk.forEach(t),ndo=i(S),nh=n(S,"LI",{});var b6e=s(nh);vse=n(b6e,"STRONG",{});var rtt=s(vse);sdo=r(rtt,"mluke"),rtt.forEach(t),ldo=r(b6e," \u2014 "),GB=n(b6e,"A",{href:!0});var ttt=s(GB);ido=r(ttt,"MLukeTokenizer"),ttt.forEach(t),ddo=r(b6e," (mLUKE model)"),b6e.forEach(t),cdo=i(S),bs=n(S,"LI",{});var Mk=s(bs);Fse=n(Mk,"STRONG",{});var att=s(Fse);fdo=r(att,"mobilebert"),att.forEach(t),mdo=r(Mk," \u2014 "),OB=n(Mk,"A",{href:!0});var ntt=s(OB);gdo=r(ntt,"MobileBertTokenizer"),ntt.forEach(t),hdo=r(Mk," or "),VB=n(Mk,"A",{href:!0});var stt=s(VB);pdo=r(stt,"MobileBertTokenizerFast"),stt.forEach(t),_do=r(Mk," (MobileBERT model)"),Mk.forEach(t),udo=i(S),vs=n(S,"LI",{});var Ek=s(vs);Tse=n(Ek,"STRONG",{});var ltt=s(Tse);bdo=r(ltt,"mpnet"),ltt.forEach(t),vdo=r(Ek," \u2014 "),XB=n(Ek,"A",{href:!0});var itt=s(XB);Fdo=r(itt,"MPNetTokenizer"),itt.forEach(t),Tdo=r(Ek," or "),zB=n(Ek,"A",{href:!0});var dtt=s(zB);Mdo=r(dtt,"MPNetTokenizerFast"),dtt.forEach(t),Edo=r(Ek," (MPNet model)"),Ek.forEach(t),Cdo=i(S),Fs=n(S,"LI",{});var Ck=s(Fs);Mse=n(Ck,"STRONG",{});var ctt=s(Mse);wdo=r(ctt,"mt5"),ctt.forEach(t),Ado=r(Ck," \u2014 "),WB=n(Ck,"A",{href:!0});var ftt=s(WB);Ldo=r(ftt,"MT5Tokenizer"),ftt.forEach(t),ydo=r(Ck," or "),QB=n(Ck,"A",{href:!0});var mtt=s(QB);xdo=r(mtt,"MT5TokenizerFast"),mtt.forEach(t),$do=r(Ck," (MT5 model)"),Ck.forEach(t),kdo=i(S),Ts=n(S,"LI",{});var wk=s(Ts);Ese=n(wk,"STRONG",{});var gtt=s(Ese);Sdo=r(gtt,"nystromformer"),gtt.forEach(t),Rdo=r(wk," \u2014 "),HB=n(wk,"A",{href:!0});var htt=s(HB);Pdo=r(htt,"AlbertTokenizer"),htt.forEach(t),Bdo=r(wk," or "),UB=n(wk,"A",{href:!0});var ptt=s(UB);Ido=r(ptt,"AlbertTokenizerFast"),ptt.forEach(t),Ndo=r(wk," (Nystr\xF6mformer model)"),wk.forEach(t),qdo=i(S),Ms=n(S,"LI",{});var Ak=s(Ms);Cse=n(Ak,"STRONG",{});var _tt=s(Cse);jdo=r(_tt,"openai-gpt"),_tt.forEach(t),Ddo=r(Ak," \u2014 "),JB=n(Ak,"A",{href:!0});var utt=s(JB);Gdo=r(utt,"OpenAIGPTTokenizer"),utt.forEach(t),Odo=r(Ak," or "),YB=n(Ak,"A",{href:!0});var btt=s(YB);Vdo=r(btt,"OpenAIGPTTokenizerFast"),btt.forEach(t),Xdo=r(Ak," (OpenAI GPT model)"),Ak.forEach(t),zdo=i(S),sh=n(S,"LI",{});var v6e=s(sh);wse=n(v6e,"STRONG",{});var vtt=s(wse);Wdo=r(vtt,"opt"),vtt.forEach(t),Qdo=r(v6e," \u2014 "),KB=n(v6e,"A",{href:!0});var Ftt=s(KB);Hdo=r(Ftt,"GPT2Tokenizer"),Ftt.forEach(t),Udo=r(v6e," (OPT model)"),v6e.forEach(t),Jdo=i(S),Es=n(S,"LI",{});var Lk=s(Es);Ase=n(Lk,"STRONG",{});var Ttt=s(Ase);Ydo=r(Ttt,"pegasus"),Ttt.forEach(t),Kdo=r(Lk," \u2014 "),ZB=n(Lk,"A",{href:!0});var Mtt=s(ZB);Zdo=r(Mtt,"PegasusTokenizer"),Mtt.forEach(t),eco=r(Lk," or "),eI=n(Lk,"A",{href:!0});var Ett=s(eI);oco=r(Ett,"PegasusTokenizerFast"),Ett.forEach(t),rco=r(Lk," (Pegasus model)"),Lk.forEach(t),tco=i(S),lh=n(S,"LI",{});var F6e=s(lh);Lse=n(F6e,"STRONG",{});var Ctt=s(Lse);aco=r(Ctt,"perceiver"),Ctt.forEach(t),nco=r(F6e," \u2014 "),oI=n(F6e,"A",{href:!0});var wtt=s(oI);sco=r(wtt,"PerceiverTokenizer"),wtt.forEach(t),lco=r(F6e," (Perceiver model)"),F6e.forEach(t),ico=i(S),ih=n(S,"LI",{});var T6e=s(ih);yse=n(T6e,"STRONG",{});var Att=s(yse);dco=r(Att,"phobert"),Att.forEach(t),cco=r(T6e," \u2014 "),rI=n(T6e,"A",{href:!0});var Ltt=s(rI);fco=r(Ltt,"PhobertTokenizer"),Ltt.forEach(t),mco=r(T6e," (PhoBERT model)"),T6e.forEach(t),gco=i(S),dh=n(S,"LI",{});var M6e=s(dh);xse=n(M6e,"STRONG",{});var ytt=s(xse);hco=r(ytt,"plbart"),ytt.forEach(t),pco=r(M6e," \u2014 "),tI=n(M6e,"A",{href:!0});var xtt=s(tI);_co=r(xtt,"PLBartTokenizer"),xtt.forEach(t),uco=r(M6e," (PLBart model)"),M6e.forEach(t),bco=i(S),ch=n(S,"LI",{});var E6e=s(ch);$se=n(E6e,"STRONG",{});var $tt=s($se);vco=r($tt,"prophetnet"),$tt.forEach(t),Fco=r(E6e," \u2014 "),aI=n(E6e,"A",{href:!0});var ktt=s(aI);Tco=r(ktt,"ProphetNetTokenizer"),ktt.forEach(t),Mco=r(E6e," (ProphetNet model)"),E6e.forEach(t),Eco=i(S),Cs=n(S,"LI",{});var yk=s(Cs);kse=n(yk,"STRONG",{});var Stt=s(kse);Cco=r(Stt,"qdqbert"),Stt.forEach(t),wco=r(yk," \u2014 "),nI=n(yk,"A",{href:!0});var Rtt=s(nI);Aco=r(Rtt,"BertTokenizer"),Rtt.forEach(t),Lco=r(yk," or "),sI=n(yk,"A",{href:!0});var Ptt=s(sI);yco=r(Ptt,"BertTokenizerFast"),Ptt.forEach(t),xco=r(yk," (QDQBert model)"),yk.forEach(t),$co=i(S),fh=n(S,"LI",{});var C6e=s(fh);Sse=n(C6e,"STRONG",{});var Btt=s(Sse);kco=r(Btt,"rag"),Btt.forEach(t),Sco=r(C6e," \u2014 "),lI=n(C6e,"A",{href:!0});var Itt=s(lI);Rco=r(Itt,"RagTokenizer"),Itt.forEach(t),Pco=r(C6e," (RAG model)"),C6e.forEach(t),Bco=i(S),ws=n(S,"LI",{});var xk=s(ws);Rse=n(xk,"STRONG",{});var Ntt=s(Rse);Ico=r(Ntt,"realm"),Ntt.forEach(t),Nco=r(xk," \u2014 "),iI=n(xk,"A",{href:!0});var qtt=s(iI);qco=r(qtt,"RealmTokenizer"),qtt.forEach(t),jco=r(xk," or "),dI=n(xk,"A",{href:!0});var jtt=s(dI);Dco=r(jtt,"RealmTokenizerFast"),jtt.forEach(t),Gco=r(xk," (REALM model)"),xk.forEach(t),Oco=i(S),As=n(S,"LI",{});var $k=s(As);Pse=n($k,"STRONG",{});var Dtt=s(Pse);Vco=r(Dtt,"reformer"),Dtt.forEach(t),Xco=r($k," \u2014 "),cI=n($k,"A",{href:!0});var Gtt=s(cI);zco=r(Gtt,"ReformerTokenizer"),Gtt.forEach(t),Wco=r($k," or "),fI=n($k,"A",{href:!0});var Ott=s(fI);Qco=r(Ott,"ReformerTokenizerFast"),Ott.forEach(t),Hco=r($k," (Reformer model)"),$k.forEach(t),Uco=i(S),Ls=n(S,"LI",{});var kk=s(Ls);Bse=n(kk,"STRONG",{});var Vtt=s(Bse);Jco=r(Vtt,"rembert"),Vtt.forEach(t),Yco=r(kk," \u2014 "),mI=n(kk,"A",{href:!0});var Xtt=s(mI);Kco=r(Xtt,"RemBertTokenizer"),Xtt.forEach(t),Zco=r(kk," or "),gI=n(kk,"A",{href:!0});var ztt=s(gI);efo=r(ztt,"RemBertTokenizerFast"),ztt.forEach(t),ofo=r(kk," (RemBERT model)"),kk.forEach(t),rfo=i(S),ys=n(S,"LI",{});var Sk=s(ys);Ise=n(Sk,"STRONG",{});var Wtt=s(Ise);tfo=r(Wtt,"retribert"),Wtt.forEach(t),afo=r(Sk," \u2014 "),hI=n(Sk,"A",{href:!0});var Qtt=s(hI);nfo=r(Qtt,"RetriBertTokenizer"),Qtt.forEach(t),sfo=r(Sk," or "),pI=n(Sk,"A",{href:!0});var Htt=s(pI);lfo=r(Htt,"RetriBertTokenizerFast"),Htt.forEach(t),ifo=r(Sk," (RetriBERT model)"),Sk.forEach(t),dfo=i(S),xs=n(S,"LI",{});var Rk=s(xs);Nse=n(Rk,"STRONG",{});var Utt=s(Nse);cfo=r(Utt,"roberta"),Utt.forEach(t),ffo=r(Rk," \u2014 "),_I=n(Rk,"A",{href:!0});var Jtt=s(_I);mfo=r(Jtt,"RobertaTokenizer"),Jtt.forEach(t),gfo=r(Rk," or "),uI=n(Rk,"A",{href:!0});var Ytt=s(uI);hfo=r(Ytt,"RobertaTokenizerFast"),Ytt.forEach(t),pfo=r(Rk," (RoBERTa model)"),Rk.forEach(t),_fo=i(S),$s=n(S,"LI",{});var Pk=s($s);qse=n(Pk,"STRONG",{});var Ktt=s(qse);ufo=r(Ktt,"roformer"),Ktt.forEach(t),bfo=r(Pk," \u2014 "),bI=n(Pk,"A",{href:!0});var Ztt=s(bI);vfo=r(Ztt,"RoFormerTokenizer"),Ztt.forEach(t),Ffo=r(Pk," or "),vI=n(Pk,"A",{href:!0});var eat=s(vI);Tfo=r(eat,"RoFormerTokenizerFast"),eat.forEach(t),Mfo=r(Pk," (RoFormer model)"),Pk.forEach(t),Efo=i(S),mh=n(S,"LI",{});var w6e=s(mh);jse=n(w6e,"STRONG",{});var oat=s(jse);Cfo=r(oat,"speech_to_text"),oat.forEach(t),wfo=r(w6e," \u2014 "),FI=n(w6e,"A",{href:!0});var rat=s(FI);Afo=r(rat,"Speech2TextTokenizer"),rat.forEach(t),Lfo=r(w6e," (Speech2Text model)"),w6e.forEach(t),yfo=i(S),gh=n(S,"LI",{});var A6e=s(gh);Dse=n(A6e,"STRONG",{});var tat=s(Dse);xfo=r(tat,"speech_to_text_2"),tat.forEach(t),$fo=r(A6e," \u2014 "),TI=n(A6e,"A",{href:!0});var aat=s(TI);kfo=r(aat,"Speech2Text2Tokenizer"),aat.forEach(t),Sfo=r(A6e," (Speech2Text2 model)"),A6e.forEach(t),Rfo=i(S),ks=n(S,"LI",{});var Bk=s(ks);Gse=n(Bk,"STRONG",{});var nat=s(Gse);Pfo=r(nat,"splinter"),nat.forEach(t),Bfo=r(Bk," \u2014 "),MI=n(Bk,"A",{href:!0});var sat=s(MI);Ifo=r(sat,"SplinterTokenizer"),sat.forEach(t),Nfo=r(Bk," or "),EI=n(Bk,"A",{href:!0});var lat=s(EI);qfo=r(lat,"SplinterTokenizerFast"),lat.forEach(t),jfo=r(Bk," (Splinter model)"),Bk.forEach(t),Dfo=i(S),Ss=n(S,"LI",{});var Ik=s(Ss);Ose=n(Ik,"STRONG",{});var iat=s(Ose);Gfo=r(iat,"squeezebert"),iat.forEach(t),Ofo=r(Ik," \u2014 "),CI=n(Ik,"A",{href:!0});var dat=s(CI);Vfo=r(dat,"SqueezeBertTokenizer"),dat.forEach(t),Xfo=r(Ik," or "),wI=n(Ik,"A",{href:!0});var cat=s(wI);zfo=r(cat,"SqueezeBertTokenizerFast"),cat.forEach(t),Wfo=r(Ik," (SqueezeBERT model)"),Ik.forEach(t),Qfo=i(S),Rs=n(S,"LI",{});var Nk=s(Rs);Vse=n(Nk,"STRONG",{});var fat=s(Vse);Hfo=r(fat,"t5"),fat.forEach(t),Ufo=r(Nk," \u2014 "),AI=n(Nk,"A",{href:!0});var mat=s(AI);Jfo=r(mat,"T5Tokenizer"),mat.forEach(t),Yfo=r(Nk," or "),LI=n(Nk,"A",{href:!0});var gat=s(LI);Kfo=r(gat,"T5TokenizerFast"),gat.forEach(t),Zfo=r(Nk," (T5 model)"),Nk.forEach(t),emo=i(S),hh=n(S,"LI",{});var L6e=s(hh);Xse=n(L6e,"STRONG",{});var hat=s(Xse);omo=r(hat,"tapas"),hat.forEach(t),rmo=r(L6e," \u2014 "),yI=n(L6e,"A",{href:!0});var pat=s(yI);tmo=r(pat,"TapasTokenizer"),pat.forEach(t),amo=r(L6e," (TAPAS model)"),L6e.forEach(t),nmo=i(S),ph=n(S,"LI",{});var y6e=s(ph);zse=n(y6e,"STRONG",{});var _at=s(zse);smo=r(_at,"tapex"),_at.forEach(t),lmo=r(y6e," \u2014 "),xI=n(y6e,"A",{href:!0});var uat=s(xI);imo=r(uat,"TapexTokenizer"),uat.forEach(t),dmo=r(y6e," (TAPEX model)"),y6e.forEach(t),cmo=i(S),_h=n(S,"LI",{});var x6e=s(_h);Wse=n(x6e,"STRONG",{});var bat=s(Wse);fmo=r(bat,"transfo-xl"),bat.forEach(t),mmo=r(x6e," \u2014 "),$I=n(x6e,"A",{href:!0});var vat=s($I);gmo=r(vat,"TransfoXLTokenizer"),vat.forEach(t),hmo=r(x6e," (Transformer-XL model)"),x6e.forEach(t),pmo=i(S),Ps=n(S,"LI",{});var qk=s(Ps);Qse=n(qk,"STRONG",{});var Fat=s(Qse);_mo=r(Fat,"vilt"),Fat.forEach(t),umo=r(qk," \u2014 "),kI=n(qk,"A",{href:!0});var Tat=s(kI);bmo=r(Tat,"BertTokenizer"),Tat.forEach(t),vmo=r(qk," or "),SI=n(qk,"A",{href:!0});var Mat=s(SI);Fmo=r(Mat,"BertTokenizerFast"),Mat.forEach(t),Tmo=r(qk," (ViLT model)"),qk.forEach(t),Mmo=i(S),Bs=n(S,"LI",{});var jk=s(Bs);Hse=n(jk,"STRONG",{});var Eat=s(Hse);Emo=r(Eat,"visual_bert"),Eat.forEach(t),Cmo=r(jk," \u2014 "),RI=n(jk,"A",{href:!0});var Cat=s(RI);wmo=r(Cat,"BertTokenizer"),Cat.forEach(t),Amo=r(jk," or "),PI=n(jk,"A",{href:!0});var wat=s(PI);Lmo=r(wat,"BertTokenizerFast"),wat.forEach(t),ymo=r(jk," (VisualBERT model)"),jk.forEach(t),xmo=i(S),uh=n(S,"LI",{});var $6e=s(uh);Use=n($6e,"STRONG",{});var Aat=s(Use);$mo=r(Aat,"wav2vec2"),Aat.forEach(t),kmo=r($6e," \u2014 "),BI=n($6e,"A",{href:!0});var Lat=s(BI);Smo=r(Lat,"Wav2Vec2CTCTokenizer"),Lat.forEach(t),Rmo=r($6e," (Wav2Vec2 model)"),$6e.forEach(t),Pmo=i(S),bh=n(S,"LI",{});var k6e=s(bh);Jse=n(k6e,"STRONG",{});var yat=s(Jse);Bmo=r(yat,"wav2vec2-conformer"),yat.forEach(t),Imo=r(k6e," \u2014 "),II=n(k6e,"A",{href:!0});var xat=s(II);Nmo=r(xat,"Wav2Vec2CTCTokenizer"),xat.forEach(t),qmo=r(k6e," (Wav2Vec2-Conformer model)"),k6e.forEach(t),jmo=i(S),vh=n(S,"LI",{});var S6e=s(vh);Yse=n(S6e,"STRONG",{});var $at=s(Yse);Dmo=r($at,"wav2vec2_phoneme"),$at.forEach(t),Gmo=r(S6e," \u2014 "),NI=n(S6e,"A",{href:!0});var kat=s(NI);Omo=r(kat,"Wav2Vec2PhonemeCTCTokenizer"),kat.forEach(t),Vmo=r(S6e," (Wav2Vec2Phoneme model)"),S6e.forEach(t),Xmo=i(S),Is=n(S,"LI",{});var Dk=s(Is);Kse=n(Dk,"STRONG",{});var Sat=s(Kse);zmo=r(Sat,"xglm"),Sat.forEach(t),Wmo=r(Dk," \u2014 "),qI=n(Dk,"A",{href:!0});var Rat=s(qI);Qmo=r(Rat,"XGLMTokenizer"),Rat.forEach(t),Hmo=r(Dk," or "),jI=n(Dk,"A",{href:!0});var Pat=s(jI);Umo=r(Pat,"XGLMTokenizerFast"),Pat.forEach(t),Jmo=r(Dk," (XGLM model)"),Dk.forEach(t),Ymo=i(S),Fh=n(S,"LI",{});var R6e=s(Fh);Zse=n(R6e,"STRONG",{});var Bat=s(Zse);Kmo=r(Bat,"xlm"),Bat.forEach(t),Zmo=r(R6e," \u2014 "),DI=n(R6e,"A",{href:!0});var Iat=s(DI);ego=r(Iat,"XLMTokenizer"),Iat.forEach(t),ogo=r(R6e," (XLM model)"),R6e.forEach(t),rgo=i(S),Th=n(S,"LI",{});var P6e=s(Th);ele=n(P6e,"STRONG",{});var Nat=s(ele);tgo=r(Nat,"xlm-prophetnet"),Nat.forEach(t),ago=r(P6e," \u2014 "),GI=n(P6e,"A",{href:!0});var qat=s(GI);ngo=r(qat,"XLMProphetNetTokenizer"),qat.forEach(t),sgo=r(P6e," (XLM-ProphetNet model)"),P6e.forEach(t),lgo=i(S),Ns=n(S,"LI",{});var Gk=s(Ns);ole=n(Gk,"STRONG",{});var jat=s(ole);igo=r(jat,"xlm-roberta"),jat.forEach(t),dgo=r(Gk," \u2014 "),OI=n(Gk,"A",{href:!0});var Dat=s(OI);cgo=r(Dat,"XLMRobertaTokenizer"),Dat.forEach(t),fgo=r(Gk," or "),VI=n(Gk,"A",{href:!0});var Gat=s(VI);mgo=r(Gat,"XLMRobertaTokenizerFast"),Gat.forEach(t),ggo=r(Gk," (XLM-RoBERTa model)"),Gk.forEach(t),hgo=i(S),qs=n(S,"LI",{});var Ok=s(qs);rle=n(Ok,"STRONG",{});var Oat=s(rle);pgo=r(Oat,"xlm-roberta-xl"),Oat.forEach(t),_go=r(Ok," \u2014 "),XI=n(Ok,"A",{href:!0});var Vat=s(XI);ugo=r(Vat,"RobertaTokenizer"),Vat.forEach(t),bgo=r(Ok," or "),zI=n(Ok,"A",{href:!0});var Xat=s(zI);vgo=r(Xat,"RobertaTokenizerFast"),Xat.forEach(t),Fgo=r(Ok," (XLM-RoBERTa-XL model)"),Ok.forEach(t),Tgo=i(S),js=n(S,"LI",{});var Vk=s(js);tle=n(Vk,"STRONG",{});var zat=s(tle);Mgo=r(zat,"xlnet"),zat.forEach(t),Ego=r(Vk," \u2014 "),WI=n(Vk,"A",{href:!0});var Wat=s(WI);Cgo=r(Wat,"XLNetTokenizer"),Wat.forEach(t),wgo=r(Vk," or "),QI=n(Vk,"A",{href:!0});var Qat=s(QI);Ago=r(Qat,"XLNetTokenizerFast"),Qat.forEach(t),Lgo=r(Vk," (XLNet model)"),Vk.forEach(t),ygo=i(S),Ds=n(S,"LI",{});var Xk=s(Ds);ale=n(Xk,"STRONG",{});var Hat=s(ale);xgo=r(Hat,"yoso"),Hat.forEach(t),$go=r(Xk," \u2014 "),HI=n(Xk,"A",{href:!0});var Uat=s(HI);kgo=r(Uat,"AlbertTokenizer"),Uat.forEach(t),Sgo=r(Xk," or "),UI=n(Xk,"A",{href:!0});var Jat=s(UI);Rgo=r(Jat,"AlbertTokenizerFast"),Jat.forEach(t),Pgo=r(Xk," (YOSO model)"),Xk.forEach(t),S.forEach(t),Bgo=i(Ws),T(Mh.$$.fragment,Ws),Ws.forEach(t),Igo=i(zs),Eh=n(zs,"DIV",{class:!0});var CVe=s(Eh);T(I6.$$.fragment,CVe),Ngo=i(CVe),nle=n(CVe,"P",{});var Yat=s(nle);qgo=r(Yat,"Register a new tokenizer in this mapping."),Yat.forEach(t),CVe.forEach(t),zs.forEach(t),EGe=i(f),ki=n(f,"H2",{class:!0});var wVe=s(ki);Ch=n(wVe,"A",{id:!0,class:!0,href:!0});var Kat=s(Ch);sle=n(Kat,"SPAN",{});var Zat=s(sle);T(N6.$$.fragment,Zat),Zat.forEach(t),Kat.forEach(t),jgo=i(wVe),lle=n(wVe,"SPAN",{});var ent=s(lle);Dgo=r(ent,"AutoFeatureExtractor"),ent.forEach(t),wVe.forEach(t),CGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(q6.$$.fragment,Qs),Ggo=i(Qs),j6=n(Qs,"P",{});var AVe=s(j6);Ogo=r(AVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JI=n(AVe,"A",{href:!0});var ont=s(JI);Vgo=r(ont,"AutoFeatureExtractor.from_pretrained()"),ont.forEach(t),Xgo=r(AVe," class method."),AVe.forEach(t),zgo=i(Qs),D6=n(Qs,"P",{});var LVe=s(D6);Wgo=r(LVe,"This class cannot be instantiated directly using "),ile=n(LVe,"CODE",{});var rnt=s(ile);Qgo=r(rnt,"__init__()"),rnt.forEach(t),Hgo=r(LVe," (throws an error)."),LVe.forEach(t),Ugo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(G6.$$.fragment,ra),Jgo=i(ra),dle=n(ra,"P",{});var tnt=s(dle);Ygo=r(tnt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tnt.forEach(t),Kgo=i(ra),ka=n(ra,"P",{});var Cw=s(ka);Zgo=r(Cw,"The feature extractor class to instantiate is selected based on the "),cle=n(Cw,"CODE",{});var ant=s(cle);eho=r(ant,"model_type"),ant.forEach(t),oho=r(Cw,` property of the config object
(either passed as an argument or loaded from `),fle=n(Cw,"CODE",{});var nnt=s(fle);rho=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),tho=r(Cw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mle=n(Cw,"CODE",{});var snt=s(mle);aho=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),nho=r(Cw,":"),Cw.forEach(t),sho=i(ra),Y=n(ra,"UL",{});var K=s(Y);wh=n(K,"LI",{});var B6e=s(wh);gle=n(B6e,"STRONG",{});var lnt=s(gle);lho=r(lnt,"beit"),lnt.forEach(t),iho=r(B6e," \u2014 "),YI=n(B6e,"A",{href:!0});var int=s(YI);dho=r(int,"BeitFeatureExtractor"),int.forEach(t),cho=r(B6e," (BEiT model)"),B6e.forEach(t),fho=i(K),Ah=n(K,"LI",{});var I6e=s(Ah);hle=n(I6e,"STRONG",{});var dnt=s(hle);mho=r(dnt,"clip"),dnt.forEach(t),gho=r(I6e," \u2014 "),KI=n(I6e,"A",{href:!0});var cnt=s(KI);hho=r(cnt,"CLIPFeatureExtractor"),cnt.forEach(t),pho=r(I6e," (CLIP model)"),I6e.forEach(t),_ho=i(K),Lh=n(K,"LI",{});var N6e=s(Lh);ple=n(N6e,"STRONG",{});var fnt=s(ple);uho=r(fnt,"convnext"),fnt.forEach(t),bho=r(N6e," \u2014 "),ZI=n(N6e,"A",{href:!0});var mnt=s(ZI);vho=r(mnt,"ConvNextFeatureExtractor"),mnt.forEach(t),Fho=r(N6e," (ConvNeXT model)"),N6e.forEach(t),Tho=i(K),yh=n(K,"LI",{});var q6e=s(yh);_le=n(q6e,"STRONG",{});var gnt=s(_le);Mho=r(gnt,"cvt"),gnt.forEach(t),Eho=r(q6e," \u2014 "),eN=n(q6e,"A",{href:!0});var hnt=s(eN);Cho=r(hnt,"ConvNextFeatureExtractor"),hnt.forEach(t),who=r(q6e," (CvT model)"),q6e.forEach(t),Aho=i(K),xh=n(K,"LI",{});var j6e=s(xh);ule=n(j6e,"STRONG",{});var pnt=s(ule);Lho=r(pnt,"data2vec-audio"),pnt.forEach(t),yho=r(j6e," \u2014 "),oN=n(j6e,"A",{href:!0});var _nt=s(oN);xho=r(_nt,"Wav2Vec2FeatureExtractor"),_nt.forEach(t),$ho=r(j6e," (Data2VecAudio model)"),j6e.forEach(t),kho=i(K),$h=n(K,"LI",{});var D6e=s($h);ble=n(D6e,"STRONG",{});var unt=s(ble);Sho=r(unt,"data2vec-vision"),unt.forEach(t),Rho=r(D6e," \u2014 "),rN=n(D6e,"A",{href:!0});var bnt=s(rN);Pho=r(bnt,"BeitFeatureExtractor"),bnt.forEach(t),Bho=r(D6e," (Data2VecVision model)"),D6e.forEach(t),Iho=i(K),kh=n(K,"LI",{});var G6e=s(kh);vle=n(G6e,"STRONG",{});var vnt=s(vle);Nho=r(vnt,"deit"),vnt.forEach(t),qho=r(G6e," \u2014 "),tN=n(G6e,"A",{href:!0});var Fnt=s(tN);jho=r(Fnt,"DeiTFeatureExtractor"),Fnt.forEach(t),Dho=r(G6e," (DeiT model)"),G6e.forEach(t),Gho=i(K),Sh=n(K,"LI",{});var O6e=s(Sh);Fle=n(O6e,"STRONG",{});var Tnt=s(Fle);Oho=r(Tnt,"detr"),Tnt.forEach(t),Vho=r(O6e," \u2014 "),aN=n(O6e,"A",{href:!0});var Mnt=s(aN);Xho=r(Mnt,"DetrFeatureExtractor"),Mnt.forEach(t),zho=r(O6e," (DETR model)"),O6e.forEach(t),Who=i(K),Rh=n(K,"LI",{});var V6e=s(Rh);Tle=n(V6e,"STRONG",{});var Ent=s(Tle);Qho=r(Ent,"dpt"),Ent.forEach(t),Hho=r(V6e," \u2014 "),nN=n(V6e,"A",{href:!0});var Cnt=s(nN);Uho=r(Cnt,"DPTFeatureExtractor"),Cnt.forEach(t),Jho=r(V6e," (DPT model)"),V6e.forEach(t),Yho=i(K),Ph=n(K,"LI",{});var X6e=s(Ph);Mle=n(X6e,"STRONG",{});var wnt=s(Mle);Kho=r(wnt,"flava"),wnt.forEach(t),Zho=r(X6e," \u2014 "),sN=n(X6e,"A",{href:!0});var Ant=s(sN);epo=r(Ant,"FlavaFeatureExtractor"),Ant.forEach(t),opo=r(X6e," (FLAVA model)"),X6e.forEach(t),rpo=i(K),Bh=n(K,"LI",{});var z6e=s(Bh);Ele=n(z6e,"STRONG",{});var Lnt=s(Ele);tpo=r(Lnt,"glpn"),Lnt.forEach(t),apo=r(z6e," \u2014 "),lN=n(z6e,"A",{href:!0});var ynt=s(lN);npo=r(ynt,"GLPNFeatureExtractor"),ynt.forEach(t),spo=r(z6e," (GLPN model)"),z6e.forEach(t),lpo=i(K),Ih=n(K,"LI",{});var W6e=s(Ih);Cle=n(W6e,"STRONG",{});var xnt=s(Cle);ipo=r(xnt,"hubert"),xnt.forEach(t),dpo=r(W6e," \u2014 "),iN=n(W6e,"A",{href:!0});var $nt=s(iN);cpo=r($nt,"Wav2Vec2FeatureExtractor"),$nt.forEach(t),fpo=r(W6e," (Hubert model)"),W6e.forEach(t),mpo=i(K),Nh=n(K,"LI",{});var Q6e=s(Nh);wle=n(Q6e,"STRONG",{});var knt=s(wle);gpo=r(knt,"imagegpt"),knt.forEach(t),hpo=r(Q6e," \u2014 "),dN=n(Q6e,"A",{href:!0});var Snt=s(dN);ppo=r(Snt,"ImageGPTFeatureExtractor"),Snt.forEach(t),_po=r(Q6e," (ImageGPT model)"),Q6e.forEach(t),upo=i(K),qh=n(K,"LI",{});var H6e=s(qh);Ale=n(H6e,"STRONG",{});var Rnt=s(Ale);bpo=r(Rnt,"layoutlmv2"),Rnt.forEach(t),vpo=r(H6e," \u2014 "),cN=n(H6e,"A",{href:!0});var Pnt=s(cN);Fpo=r(Pnt,"LayoutLMv2FeatureExtractor"),Pnt.forEach(t),Tpo=r(H6e," (LayoutLMv2 model)"),H6e.forEach(t),Mpo=i(K),jh=n(K,"LI",{});var U6e=s(jh);Lle=n(U6e,"STRONG",{});var Bnt=s(Lle);Epo=r(Bnt,"layoutlmv3"),Bnt.forEach(t),Cpo=r(U6e," \u2014 "),fN=n(U6e,"A",{href:!0});var Int=s(fN);wpo=r(Int,"LayoutLMv3FeatureExtractor"),Int.forEach(t),Apo=r(U6e," (LayoutLMv3 model)"),U6e.forEach(t),Lpo=i(K),Dh=n(K,"LI",{});var J6e=s(Dh);yle=n(J6e,"STRONG",{});var Nnt=s(yle);ypo=r(Nnt,"levit"),Nnt.forEach(t),xpo=r(J6e," \u2014 "),mN=n(J6e,"A",{href:!0});var qnt=s(mN);$po=r(qnt,"LevitFeatureExtractor"),qnt.forEach(t),kpo=r(J6e," (LeViT model)"),J6e.forEach(t),Spo=i(K),Gh=n(K,"LI",{});var Y6e=s(Gh);xle=n(Y6e,"STRONG",{});var jnt=s(xle);Rpo=r(jnt,"maskformer"),jnt.forEach(t),Ppo=r(Y6e," \u2014 "),gN=n(Y6e,"A",{href:!0});var Dnt=s(gN);Bpo=r(Dnt,"MaskFormerFeatureExtractor"),Dnt.forEach(t),Ipo=r(Y6e," (MaskFormer model)"),Y6e.forEach(t),Npo=i(K),Oh=n(K,"LI",{});var K6e=s(Oh);$le=n(K6e,"STRONG",{});var Gnt=s($le);qpo=r(Gnt,"mctct"),Gnt.forEach(t),jpo=r(K6e," \u2014 "),hN=n(K6e,"A",{href:!0});var Ont=s(hN);Dpo=r(Ont,"MCTCTFeatureExtractor"),Ont.forEach(t),Gpo=r(K6e," (M-CTC-T model)"),K6e.forEach(t),Opo=i(K),Vh=n(K,"LI",{});var Z6e=s(Vh);kle=n(Z6e,"STRONG",{});var Vnt=s(kle);Vpo=r(Vnt,"mobilenet_v1"),Vnt.forEach(t),Xpo=r(Z6e," \u2014 "),pN=n(Z6e,"A",{href:!0});var Xnt=s(pN);zpo=r(Xnt,"MobileNetV1FeatureExtractor"),Xnt.forEach(t),Wpo=r(Z6e," (MobileNetV1 model)"),Z6e.forEach(t),Qpo=i(K),Xh=n(K,"LI",{});var eLe=s(Xh);Sle=n(eLe,"STRONG",{});var znt=s(Sle);Hpo=r(znt,"perceiver"),znt.forEach(t),Upo=r(eLe," \u2014 "),_N=n(eLe,"A",{href:!0});var Wnt=s(_N);Jpo=r(Wnt,"PerceiverFeatureExtractor"),Wnt.forEach(t),Ypo=r(eLe," (Perceiver model)"),eLe.forEach(t),Kpo=i(K),zh=n(K,"LI",{});var oLe=s(zh);Rle=n(oLe,"STRONG",{});var Qnt=s(Rle);Zpo=r(Qnt,"poolformer"),Qnt.forEach(t),e_o=r(oLe," \u2014 "),uN=n(oLe,"A",{href:!0});var Hnt=s(uN);o_o=r(Hnt,"PoolFormerFeatureExtractor"),Hnt.forEach(t),r_o=r(oLe," (PoolFormer model)"),oLe.forEach(t),t_o=i(K),Wh=n(K,"LI",{});var rLe=s(Wh);Ple=n(rLe,"STRONG",{});var Unt=s(Ple);a_o=r(Unt,"regnet"),Unt.forEach(t),n_o=r(rLe," \u2014 "),bN=n(rLe,"A",{href:!0});var Jnt=s(bN);s_o=r(Jnt,"ConvNextFeatureExtractor"),Jnt.forEach(t),l_o=r(rLe," (RegNet model)"),rLe.forEach(t),i_o=i(K),Qh=n(K,"LI",{});var tLe=s(Qh);Ble=n(tLe,"STRONG",{});var Ynt=s(Ble);d_o=r(Ynt,"resnet"),Ynt.forEach(t),c_o=r(tLe," \u2014 "),vN=n(tLe,"A",{href:!0});var Knt=s(vN);f_o=r(Knt,"ConvNextFeatureExtractor"),Knt.forEach(t),m_o=r(tLe," (ResNet model)"),tLe.forEach(t),g_o=i(K),Hh=n(K,"LI",{});var aLe=s(Hh);Ile=n(aLe,"STRONG",{});var Znt=s(Ile);h_o=r(Znt,"segformer"),Znt.forEach(t),p_o=r(aLe," \u2014 "),FN=n(aLe,"A",{href:!0});var est=s(FN);__o=r(est,"SegformerFeatureExtractor"),est.forEach(t),u_o=r(aLe," (SegFormer model)"),aLe.forEach(t),b_o=i(K),Uh=n(K,"LI",{});var nLe=s(Uh);Nle=n(nLe,"STRONG",{});var ost=s(Nle);v_o=r(ost,"speech_to_text"),ost.forEach(t),F_o=r(nLe," \u2014 "),TN=n(nLe,"A",{href:!0});var rst=s(TN);T_o=r(rst,"Speech2TextFeatureExtractor"),rst.forEach(t),M_o=r(nLe," (Speech2Text model)"),nLe.forEach(t),E_o=i(K),Jh=n(K,"LI",{});var sLe=s(Jh);qle=n(sLe,"STRONG",{});var tst=s(qle);C_o=r(tst,"swin"),tst.forEach(t),w_o=r(sLe," \u2014 "),MN=n(sLe,"A",{href:!0});var ast=s(MN);A_o=r(ast,"ViTFeatureExtractor"),ast.forEach(t),L_o=r(sLe," (Swin Transformer model)"),sLe.forEach(t),y_o=i(K),Yh=n(K,"LI",{});var lLe=s(Yh);jle=n(lLe,"STRONG",{});var nst=s(jle);x_o=r(nst,"van"),nst.forEach(t),$_o=r(lLe," \u2014 "),EN=n(lLe,"A",{href:!0});var sst=s(EN);k_o=r(sst,"ConvNextFeatureExtractor"),sst.forEach(t),S_o=r(lLe," (VAN model)"),lLe.forEach(t),R_o=i(K),Kh=n(K,"LI",{});var iLe=s(Kh);Dle=n(iLe,"STRONG",{});var lst=s(Dle);P_o=r(lst,"vilt"),lst.forEach(t),B_o=r(iLe," \u2014 "),CN=n(iLe,"A",{href:!0});var ist=s(CN);I_o=r(ist,"ViltFeatureExtractor"),ist.forEach(t),N_o=r(iLe," (ViLT model)"),iLe.forEach(t),q_o=i(K),Zh=n(K,"LI",{});var dLe=s(Zh);Gle=n(dLe,"STRONG",{});var dst=s(Gle);j_o=r(dst,"vit"),dst.forEach(t),D_o=r(dLe," \u2014 "),wN=n(dLe,"A",{href:!0});var cst=s(wN);G_o=r(cst,"ViTFeatureExtractor"),cst.forEach(t),O_o=r(dLe," (ViT model)"),dLe.forEach(t),V_o=i(K),ep=n(K,"LI",{});var cLe=s(ep);Ole=n(cLe,"STRONG",{});var fst=s(Ole);X_o=r(fst,"vit_mae"),fst.forEach(t),z_o=r(cLe," \u2014 "),AN=n(cLe,"A",{href:!0});var mst=s(AN);W_o=r(mst,"ViTFeatureExtractor"),mst.forEach(t),Q_o=r(cLe," (ViTMAE model)"),cLe.forEach(t),H_o=i(K),op=n(K,"LI",{});var fLe=s(op);Vle=n(fLe,"STRONG",{});var gst=s(Vle);U_o=r(gst,"wav2vec2"),gst.forEach(t),J_o=r(fLe," \u2014 "),LN=n(fLe,"A",{href:!0});var hst=s(LN);Y_o=r(hst,"Wav2Vec2FeatureExtractor"),hst.forEach(t),K_o=r(fLe," (Wav2Vec2 model)"),fLe.forEach(t),Z_o=i(K),rp=n(K,"LI",{});var mLe=s(rp);Xle=n(mLe,"STRONG",{});var pst=s(Xle);euo=r(pst,"wav2vec2-conformer"),pst.forEach(t),ouo=r(mLe," \u2014 "),yN=n(mLe,"A",{href:!0});var _st=s(yN);ruo=r(_st,"Wav2Vec2FeatureExtractor"),_st.forEach(t),tuo=r(mLe," (Wav2Vec2-Conformer model)"),mLe.forEach(t),auo=i(K),tp=n(K,"LI",{});var gLe=s(tp);zle=n(gLe,"STRONG",{});var ust=s(zle);nuo=r(ust,"yolos"),ust.forEach(t),suo=r(gLe," \u2014 "),xN=n(gLe,"A",{href:!0});var bst=s(xN);luo=r(bst,"YolosFeatureExtractor"),bst.forEach(t),iuo=r(gLe," (YOLOS model)"),gLe.forEach(t),K.forEach(t),duo=i(ra),T(ap.$$.fragment,ra),cuo=i(ra),T(np.$$.fragment,ra),ra.forEach(t),fuo=i(Qs),sp=n(Qs,"DIV",{class:!0});var yVe=s(sp);T(O6.$$.fragment,yVe),muo=i(yVe),Wle=n(yVe,"P",{});var vst=s(Wle);guo=r(vst,"Register a new feature extractor for this class."),vst.forEach(t),yVe.forEach(t),Qs.forEach(t),wGe=i(f),Si=n(f,"H2",{class:!0});var xVe=s(Si);lp=n(xVe,"A",{id:!0,class:!0,href:!0});var Fst=s(lp);Qle=n(Fst,"SPAN",{});var Tst=s(Qle);T(V6.$$.fragment,Tst),Tst.forEach(t),Fst.forEach(t),huo=i(xVe),Hle=n(xVe,"SPAN",{});var Mst=s(Hle);puo=r(Mst,"AutoProcessor"),Mst.forEach(t),xVe.forEach(t),AGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(X6.$$.fragment,Hs),_uo=i(Hs),z6=n(Hs,"P",{});var $Ve=s(z6);uuo=r($Ve,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$N=n($Ve,"A",{href:!0});var Est=s($N);buo=r(Est,"AutoProcessor.from_pretrained()"),Est.forEach(t),vuo=r($Ve," class method."),$Ve.forEach(t),Fuo=i(Hs),W6=n(Hs,"P",{});var kVe=s(W6);Tuo=r(kVe,"This class cannot be instantiated directly using "),Ule=n(kVe,"CODE",{});var Cst=s(Ule);Muo=r(Cst,"__init__()"),Cst.forEach(t),Euo=r(kVe," (throws an error)."),kVe.forEach(t),Cuo=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(Q6.$$.fragment,ta),wuo=i(ta),Jle=n(ta,"P",{});var wst=s(Jle);Auo=r(wst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wst.forEach(t),Luo=i(ta),Ri=n(ta,"P",{});var aoe=s(Ri);yuo=r(aoe,"The processor class to instantiate is selected based on the "),Yle=n(aoe,"CODE",{});var Ast=s(Yle);xuo=r(Ast,"model_type"),Ast.forEach(t),$uo=r(aoe,` property of the config object (either
passed as an argument or loaded from `),Kle=n(aoe,"CODE",{});var Lst=s(Kle);kuo=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),Suo=r(aoe," if possible):"),aoe.forEach(t),Ruo=i(ta),he=n(ta,"UL",{});var be=s(he);ip=n(be,"LI",{});var hLe=s(ip);Zle=n(hLe,"STRONG",{});var yst=s(Zle);Puo=r(yst,"clip"),yst.forEach(t),Buo=r(hLe," \u2014 "),kN=n(hLe,"A",{href:!0});var xst=s(kN);Iuo=r(xst,"CLIPProcessor"),xst.forEach(t),Nuo=r(hLe," (CLIP model)"),hLe.forEach(t),quo=i(be),dp=n(be,"LI",{});var pLe=s(dp);eie=n(pLe,"STRONG",{});var $st=s(eie);juo=r($st,"flava"),$st.forEach(t),Duo=r(pLe," \u2014 "),oie=n(pLe,"CODE",{});var kst=s(oie);Guo=r(kst,"FLAVAProcessor"),kst.forEach(t),Ouo=r(pLe," (FLAVA model)"),pLe.forEach(t),Vuo=i(be),cp=n(be,"LI",{});var _Le=s(cp);rie=n(_Le,"STRONG",{});var Sst=s(rie);Xuo=r(Sst,"layoutlmv2"),Sst.forEach(t),zuo=r(_Le," \u2014 "),SN=n(_Le,"A",{href:!0});var Rst=s(SN);Wuo=r(Rst,"LayoutLMv2Processor"),Rst.forEach(t),Quo=r(_Le," (LayoutLMv2 model)"),_Le.forEach(t),Huo=i(be),fp=n(be,"LI",{});var uLe=s(fp);tie=n(uLe,"STRONG",{});var Pst=s(tie);Uuo=r(Pst,"layoutlmv3"),Pst.forEach(t),Juo=r(uLe," \u2014 "),RN=n(uLe,"A",{href:!0});var Bst=s(RN);Yuo=r(Bst,"LayoutLMv3Processor"),Bst.forEach(t),Kuo=r(uLe," (LayoutLMv3 model)"),uLe.forEach(t),Zuo=i(be),mp=n(be,"LI",{});var bLe=s(mp);aie=n(bLe,"STRONG",{});var Ist=s(aie);e1o=r(Ist,"layoutxlm"),Ist.forEach(t),o1o=r(bLe," \u2014 "),PN=n(bLe,"A",{href:!0});var Nst=s(PN);r1o=r(Nst,"LayoutXLMProcessor"),Nst.forEach(t),t1o=r(bLe," (LayoutXLM model)"),bLe.forEach(t),a1o=i(be),gp=n(be,"LI",{});var vLe=s(gp);nie=n(vLe,"STRONG",{});var qst=s(nie);n1o=r(qst,"sew"),qst.forEach(t),s1o=r(vLe," \u2014 "),BN=n(vLe,"A",{href:!0});var jst=s(BN);l1o=r(jst,"Wav2Vec2Processor"),jst.forEach(t),i1o=r(vLe," (SEW model)"),vLe.forEach(t),d1o=i(be),hp=n(be,"LI",{});var FLe=s(hp);sie=n(FLe,"STRONG",{});var Dst=s(sie);c1o=r(Dst,"sew-d"),Dst.forEach(t),f1o=r(FLe," \u2014 "),IN=n(FLe,"A",{href:!0});var Gst=s(IN);m1o=r(Gst,"Wav2Vec2Processor"),Gst.forEach(t),g1o=r(FLe," (SEW-D model)"),FLe.forEach(t),h1o=i(be),pp=n(be,"LI",{});var TLe=s(pp);lie=n(TLe,"STRONG",{});var Ost=s(lie);p1o=r(Ost,"speech_to_text"),Ost.forEach(t),_1o=r(TLe," \u2014 "),NN=n(TLe,"A",{href:!0});var Vst=s(NN);u1o=r(Vst,"Speech2TextProcessor"),Vst.forEach(t),b1o=r(TLe," (Speech2Text model)"),TLe.forEach(t),v1o=i(be),_p=n(be,"LI",{});var MLe=s(_p);iie=n(MLe,"STRONG",{});var Xst=s(iie);F1o=r(Xst,"speech_to_text_2"),Xst.forEach(t),T1o=r(MLe," \u2014 "),qN=n(MLe,"A",{href:!0});var zst=s(qN);M1o=r(zst,"Speech2Text2Processor"),zst.forEach(t),E1o=r(MLe," (Speech2Text2 model)"),MLe.forEach(t),C1o=i(be),up=n(be,"LI",{});var ELe=s(up);die=n(ELe,"STRONG",{});var Wst=s(die);w1o=r(Wst,"trocr"),Wst.forEach(t),A1o=r(ELe," \u2014 "),jN=n(ELe,"A",{href:!0});var Qst=s(jN);L1o=r(Qst,"TrOCRProcessor"),Qst.forEach(t),y1o=r(ELe," (TrOCR model)"),ELe.forEach(t),x1o=i(be),bp=n(be,"LI",{});var CLe=s(bp);cie=n(CLe,"STRONG",{});var Hst=s(cie);$1o=r(Hst,"unispeech"),Hst.forEach(t),k1o=r(CLe," \u2014 "),DN=n(CLe,"A",{href:!0});var Ust=s(DN);S1o=r(Ust,"Wav2Vec2Processor"),Ust.forEach(t),R1o=r(CLe," (UniSpeech model)"),CLe.forEach(t),P1o=i(be),vp=n(be,"LI",{});var wLe=s(vp);fie=n(wLe,"STRONG",{});var Jst=s(fie);B1o=r(Jst,"unispeech-sat"),Jst.forEach(t),I1o=r(wLe," \u2014 "),GN=n(wLe,"A",{href:!0});var Yst=s(GN);N1o=r(Yst,"Wav2Vec2Processor"),Yst.forEach(t),q1o=r(wLe," (UniSpeechSat model)"),wLe.forEach(t),j1o=i(be),Fp=n(be,"LI",{});var ALe=s(Fp);mie=n(ALe,"STRONG",{});var Kst=s(mie);D1o=r(Kst,"vilt"),Kst.forEach(t),G1o=r(ALe," \u2014 "),ON=n(ALe,"A",{href:!0});var Zst=s(ON);O1o=r(Zst,"ViltProcessor"),Zst.forEach(t),V1o=r(ALe," (ViLT model)"),ALe.forEach(t),X1o=i(be),Tp=n(be,"LI",{});var LLe=s(Tp);gie=n(LLe,"STRONG",{});var elt=s(gie);z1o=r(elt,"vision-text-dual-encoder"),elt.forEach(t),W1o=r(LLe," \u2014 "),VN=n(LLe,"A",{href:!0});var olt=s(VN);Q1o=r(olt,"VisionTextDualEncoderProcessor"),olt.forEach(t),H1o=r(LLe," (VisionTextDualEncoder model)"),LLe.forEach(t),U1o=i(be),Mp=n(be,"LI",{});var yLe=s(Mp);hie=n(yLe,"STRONG",{});var rlt=s(hie);J1o=r(rlt,"wav2vec2"),rlt.forEach(t),Y1o=r(yLe," \u2014 "),XN=n(yLe,"A",{href:!0});var tlt=s(XN);K1o=r(tlt,"Wav2Vec2Processor"),tlt.forEach(t),Z1o=r(yLe," (Wav2Vec2 model)"),yLe.forEach(t),e7o=i(be),Ep=n(be,"LI",{});var xLe=s(Ep);pie=n(xLe,"STRONG",{});var alt=s(pie);o7o=r(alt,"wav2vec2-conformer"),alt.forEach(t),r7o=r(xLe," \u2014 "),zN=n(xLe,"A",{href:!0});var nlt=s(zN);t7o=r(nlt,"Wav2Vec2Processor"),nlt.forEach(t),a7o=r(xLe," (Wav2Vec2-Conformer model)"),xLe.forEach(t),n7o=i(be),Cp=n(be,"LI",{});var $Le=s(Cp);_ie=n($Le,"STRONG",{});var slt=s(_ie);s7o=r(slt,"wavlm"),slt.forEach(t),l7o=r($Le," \u2014 "),WN=n($Le,"A",{href:!0});var llt=s(WN);i7o=r(llt,"Wav2Vec2Processor"),llt.forEach(t),d7o=r($Le," (WavLM model)"),$Le.forEach(t),be.forEach(t),c7o=i(ta),T(wp.$$.fragment,ta),f7o=i(ta),T(Ap.$$.fragment,ta),ta.forEach(t),m7o=i(Hs),Lp=n(Hs,"DIV",{class:!0});var SVe=s(Lp);T(H6.$$.fragment,SVe),g7o=i(SVe),uie=n(SVe,"P",{});var ilt=s(uie);h7o=r(ilt,"Register a new processor for this class."),ilt.forEach(t),SVe.forEach(t),Hs.forEach(t),LGe=i(f),Pi=n(f,"H2",{class:!0});var RVe=s(Pi);yp=n(RVe,"A",{id:!0,class:!0,href:!0});var dlt=s(yp);bie=n(dlt,"SPAN",{});var clt=s(bie);T(U6.$$.fragment,clt),clt.forEach(t),dlt.forEach(t),p7o=i(RVe),vie=n(RVe,"SPAN",{});var flt=s(vie);_7o=r(flt,"AutoModel"),flt.forEach(t),RVe.forEach(t),yGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(J6.$$.fragment,Us),u7o=i(Us),Bi=n(Us,"P",{});var noe=s(Bi);b7o=r(noe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QN=n(noe,"A",{href:!0});var mlt=s(QN);v7o=r(mlt,"from_pretrained()"),mlt.forEach(t),F7o=r(noe," class method or the "),HN=n(noe,"A",{href:!0});var glt=s(HN);T7o=r(glt,"from_config()"),glt.forEach(t),M7o=r(noe,` class
method.`),noe.forEach(t),E7o=i(Us),Y6=n(Us,"P",{});var PVe=s(Y6);C7o=r(PVe,"This class cannot be instantiated directly using "),Fie=n(PVe,"CODE",{});var hlt=s(Fie);w7o=r(hlt,"__init__()"),hlt.forEach(t),A7o=r(PVe," (throws an error)."),PVe.forEach(t),L7o=i(Us),nt=n(Us,"DIV",{class:!0});var ww=s(nt);T(K6.$$.fragment,ww),y7o=i(ww),Tie=n(ww,"P",{});var plt=s(Tie);x7o=r(plt,"Instantiates one of the base model classes of the library from a configuration."),plt.forEach(t),$7o=i(ww),Ii=n(ww,"P",{});var soe=s(Ii);k7o=r(soe,`Note:
Loading a model from its configuration file does `),Mie=n(soe,"STRONG",{});var _lt=s(Mie);S7o=r(_lt,"not"),_lt.forEach(t),R7o=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UN=n(soe,"A",{href:!0});var ult=s(UN);P7o=r(ult,"from_pretrained()"),ult.forEach(t),B7o=r(soe," to load the model weights."),soe.forEach(t),I7o=i(ww),T(xp.$$.fragment,ww),ww.forEach(t),N7o=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(Z6.$$.fragment,aa),q7o=i(aa),Eie=n(aa,"P",{});var blt=s(Eie);j7o=r(blt,"Instantiate one of the base model classes of the library from a pretrained model."),blt.forEach(t),D7o=i(aa),Sa=n(aa,"P",{});var Aw=s(Sa);G7o=r(Aw,"The model class to instantiate is selected based on the "),Cie=n(Aw,"CODE",{});var vlt=s(Cie);O7o=r(vlt,"model_type"),vlt.forEach(t),V7o=r(Aw,` property of the config object (either
passed as an argument or loaded from `),wie=n(Aw,"CODE",{});var Flt=s(wie);X7o=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),z7o=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(Aw,"CODE",{});var Tlt=s(Aie);W7o=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),Q7o=r(Aw,":"),Aw.forEach(t),H7o=i(aa),y=n(aa,"UL",{});var $=s(y);$p=n($,"LI",{});var kLe=s($p);Lie=n(kLe,"STRONG",{});var Mlt=s(Lie);U7o=r(Mlt,"albert"),Mlt.forEach(t),J7o=r(kLe," \u2014 "),JN=n(kLe,"A",{href:!0});var Elt=s(JN);Y7o=r(Elt,"AlbertModel"),Elt.forEach(t),K7o=r(kLe," (ALBERT model)"),kLe.forEach(t),Z7o=i($),kp=n($,"LI",{});var SLe=s(kp);yie=n(SLe,"STRONG",{});var Clt=s(yie);e9o=r(Clt,"bart"),Clt.forEach(t),o9o=r(SLe," \u2014 "),YN=n(SLe,"A",{href:!0});var wlt=s(YN);r9o=r(wlt,"BartModel"),wlt.forEach(t),t9o=r(SLe," (BART model)"),SLe.forEach(t),a9o=i($),Sp=n($,"LI",{});var RLe=s(Sp);xie=n(RLe,"STRONG",{});var Alt=s(xie);n9o=r(Alt,"beit"),Alt.forEach(t),s9o=r(RLe," \u2014 "),KN=n(RLe,"A",{href:!0});var Llt=s(KN);l9o=r(Llt,"BeitModel"),Llt.forEach(t),i9o=r(RLe," (BEiT model)"),RLe.forEach(t),d9o=i($),Rp=n($,"LI",{});var PLe=s(Rp);$ie=n(PLe,"STRONG",{});var ylt=s($ie);c9o=r(ylt,"bert"),ylt.forEach(t),f9o=r(PLe," \u2014 "),ZN=n(PLe,"A",{href:!0});var xlt=s(ZN);m9o=r(xlt,"BertModel"),xlt.forEach(t),g9o=r(PLe," (BERT model)"),PLe.forEach(t),h9o=i($),Pp=n($,"LI",{});var BLe=s(Pp);kie=n(BLe,"STRONG",{});var $lt=s(kie);p9o=r($lt,"bert-generation"),$lt.forEach(t),_9o=r(BLe," \u2014 "),eq=n(BLe,"A",{href:!0});var klt=s(eq);u9o=r(klt,"BertGenerationEncoder"),klt.forEach(t),b9o=r(BLe," (Bert Generation model)"),BLe.forEach(t),v9o=i($),Bp=n($,"LI",{});var ILe=s(Bp);Sie=n(ILe,"STRONG",{});var Slt=s(Sie);F9o=r(Slt,"big_bird"),Slt.forEach(t),T9o=r(ILe," \u2014 "),oq=n(ILe,"A",{href:!0});var Rlt=s(oq);M9o=r(Rlt,"BigBirdModel"),Rlt.forEach(t),E9o=r(ILe," (BigBird model)"),ILe.forEach(t),C9o=i($),Ip=n($,"LI",{});var NLe=s(Ip);Rie=n(NLe,"STRONG",{});var Plt=s(Rie);w9o=r(Plt,"bigbird_pegasus"),Plt.forEach(t),A9o=r(NLe," \u2014 "),rq=n(NLe,"A",{href:!0});var Blt=s(rq);L9o=r(Blt,"BigBirdPegasusModel"),Blt.forEach(t),y9o=r(NLe," (BigBird-Pegasus model)"),NLe.forEach(t),x9o=i($),Np=n($,"LI",{});var qLe=s(Np);Pie=n(qLe,"STRONG",{});var Ilt=s(Pie);$9o=r(Ilt,"blenderbot"),Ilt.forEach(t),k9o=r(qLe," \u2014 "),tq=n(qLe,"A",{href:!0});var Nlt=s(tq);S9o=r(Nlt,"BlenderbotModel"),Nlt.forEach(t),R9o=r(qLe," (Blenderbot model)"),qLe.forEach(t),P9o=i($),qp=n($,"LI",{});var jLe=s(qp);Bie=n(jLe,"STRONG",{});var qlt=s(Bie);B9o=r(qlt,"blenderbot-small"),qlt.forEach(t),I9o=r(jLe," \u2014 "),aq=n(jLe,"A",{href:!0});var jlt=s(aq);N9o=r(jlt,"BlenderbotSmallModel"),jlt.forEach(t),q9o=r(jLe," (BlenderbotSmall model)"),jLe.forEach(t),j9o=i($),jp=n($,"LI",{});var DLe=s(jp);Iie=n(DLe,"STRONG",{});var Dlt=s(Iie);D9o=r(Dlt,"bloom"),Dlt.forEach(t),G9o=r(DLe," \u2014 "),nq=n(DLe,"A",{href:!0});var Glt=s(nq);O9o=r(Glt,"BloomModel"),Glt.forEach(t),V9o=r(DLe," (BLOOM model)"),DLe.forEach(t),X9o=i($),Dp=n($,"LI",{});var GLe=s(Dp);Nie=n(GLe,"STRONG",{});var Olt=s(Nie);z9o=r(Olt,"camembert"),Olt.forEach(t),W9o=r(GLe," \u2014 "),sq=n(GLe,"A",{href:!0});var Vlt=s(sq);Q9o=r(Vlt,"CamembertModel"),Vlt.forEach(t),H9o=r(GLe," (CamemBERT model)"),GLe.forEach(t),U9o=i($),Gp=n($,"LI",{});var OLe=s(Gp);qie=n(OLe,"STRONG",{});var Xlt=s(qie);J9o=r(Xlt,"canine"),Xlt.forEach(t),Y9o=r(OLe," \u2014 "),lq=n(OLe,"A",{href:!0});var zlt=s(lq);K9o=r(zlt,"CanineModel"),zlt.forEach(t),Z9o=r(OLe," (CANINE model)"),OLe.forEach(t),ebo=i($),Op=n($,"LI",{});var VLe=s(Op);jie=n(VLe,"STRONG",{});var Wlt=s(jie);obo=r(Wlt,"clip"),Wlt.forEach(t),rbo=r(VLe," \u2014 "),iq=n(VLe,"A",{href:!0});var Qlt=s(iq);tbo=r(Qlt,"CLIPModel"),Qlt.forEach(t),abo=r(VLe," (CLIP model)"),VLe.forEach(t),nbo=i($),Vp=n($,"LI",{});var XLe=s(Vp);Die=n(XLe,"STRONG",{});var Hlt=s(Die);sbo=r(Hlt,"convbert"),Hlt.forEach(t),lbo=r(XLe," \u2014 "),dq=n(XLe,"A",{href:!0});var Ult=s(dq);ibo=r(Ult,"ConvBertModel"),Ult.forEach(t),dbo=r(XLe," (ConvBERT model)"),XLe.forEach(t),cbo=i($),Xp=n($,"LI",{});var zLe=s(Xp);Gie=n(zLe,"STRONG",{});var Jlt=s(Gie);fbo=r(Jlt,"convnext"),Jlt.forEach(t),mbo=r(zLe," \u2014 "),cq=n(zLe,"A",{href:!0});var Ylt=s(cq);gbo=r(Ylt,"ConvNextModel"),Ylt.forEach(t),hbo=r(zLe," (ConvNeXT model)"),zLe.forEach(t),pbo=i($),zp=n($,"LI",{});var WLe=s(zp);Oie=n(WLe,"STRONG",{});var Klt=s(Oie);_bo=r(Klt,"ctrl"),Klt.forEach(t),ubo=r(WLe," \u2014 "),fq=n(WLe,"A",{href:!0});var Zlt=s(fq);bbo=r(Zlt,"CTRLModel"),Zlt.forEach(t),vbo=r(WLe," (CTRL model)"),WLe.forEach(t),Fbo=i($),Wp=n($,"LI",{});var QLe=s(Wp);Vie=n(QLe,"STRONG",{});var eit=s(Vie);Tbo=r(eit,"cvt"),eit.forEach(t),Mbo=r(QLe," \u2014 "),mq=n(QLe,"A",{href:!0});var oit=s(mq);Ebo=r(oit,"CvtModel"),oit.forEach(t),Cbo=r(QLe," (CvT model)"),QLe.forEach(t),wbo=i($),Qp=n($,"LI",{});var HLe=s(Qp);Xie=n(HLe,"STRONG",{});var rit=s(Xie);Abo=r(rit,"data2vec-audio"),rit.forEach(t),Lbo=r(HLe," \u2014 "),gq=n(HLe,"A",{href:!0});var tit=s(gq);ybo=r(tit,"Data2VecAudioModel"),tit.forEach(t),xbo=r(HLe," (Data2VecAudio model)"),HLe.forEach(t),$bo=i($),Hp=n($,"LI",{});var ULe=s(Hp);zie=n(ULe,"STRONG",{});var ait=s(zie);kbo=r(ait,"data2vec-text"),ait.forEach(t),Sbo=r(ULe," \u2014 "),hq=n(ULe,"A",{href:!0});var nit=s(hq);Rbo=r(nit,"Data2VecTextModel"),nit.forEach(t),Pbo=r(ULe," (Data2VecText model)"),ULe.forEach(t),Bbo=i($),Up=n($,"LI",{});var JLe=s(Up);Wie=n(JLe,"STRONG",{});var sit=s(Wie);Ibo=r(sit,"data2vec-vision"),sit.forEach(t),Nbo=r(JLe," \u2014 "),pq=n(JLe,"A",{href:!0});var lit=s(pq);qbo=r(lit,"Data2VecVisionModel"),lit.forEach(t),jbo=r(JLe," (Data2VecVision model)"),JLe.forEach(t),Dbo=i($),Jp=n($,"LI",{});var YLe=s(Jp);Qie=n(YLe,"STRONG",{});var iit=s(Qie);Gbo=r(iit,"deberta"),iit.forEach(t),Obo=r(YLe," \u2014 "),_q=n(YLe,"A",{href:!0});var dit=s(_q);Vbo=r(dit,"DebertaModel"),dit.forEach(t),Xbo=r(YLe," (DeBERTa model)"),YLe.forEach(t),zbo=i($),Yp=n($,"LI",{});var KLe=s(Yp);Hie=n(KLe,"STRONG",{});var cit=s(Hie);Wbo=r(cit,"deberta-v2"),cit.forEach(t),Qbo=r(KLe," \u2014 "),uq=n(KLe,"A",{href:!0});var fit=s(uq);Hbo=r(fit,"DebertaV2Model"),fit.forEach(t),Ubo=r(KLe," (DeBERTa-v2 model)"),KLe.forEach(t),Jbo=i($),Kp=n($,"LI",{});var ZLe=s(Kp);Uie=n(ZLe,"STRONG",{});var mit=s(Uie);Ybo=r(mit,"decision_transformer"),mit.forEach(t),Kbo=r(ZLe," \u2014 "),bq=n(ZLe,"A",{href:!0});var git=s(bq);Zbo=r(git,"DecisionTransformerModel"),git.forEach(t),e2o=r(ZLe," (Decision Transformer model)"),ZLe.forEach(t),o2o=i($),Zp=n($,"LI",{});var eye=s(Zp);Jie=n(eye,"STRONG",{});var hit=s(Jie);r2o=r(hit,"deit"),hit.forEach(t),t2o=r(eye," \u2014 "),vq=n(eye,"A",{href:!0});var pit=s(vq);a2o=r(pit,"DeiTModel"),pit.forEach(t),n2o=r(eye," (DeiT model)"),eye.forEach(t),s2o=i($),e_=n($,"LI",{});var oye=s(e_);Yie=n(oye,"STRONG",{});var _it=s(Yie);l2o=r(_it,"detr"),_it.forEach(t),i2o=r(oye," \u2014 "),Fq=n(oye,"A",{href:!0});var uit=s(Fq);d2o=r(uit,"DetrModel"),uit.forEach(t),c2o=r(oye," (DETR model)"),oye.forEach(t),f2o=i($),o_=n($,"LI",{});var rye=s(o_);Kie=n(rye,"STRONG",{});var bit=s(Kie);m2o=r(bit,"distilbert"),bit.forEach(t),g2o=r(rye," \u2014 "),Tq=n(rye,"A",{href:!0});var vit=s(Tq);h2o=r(vit,"DistilBertModel"),vit.forEach(t),p2o=r(rye," (DistilBERT model)"),rye.forEach(t),_2o=i($),r_=n($,"LI",{});var tye=s(r_);Zie=n(tye,"STRONG",{});var Fit=s(Zie);u2o=r(Fit,"dpr"),Fit.forEach(t),b2o=r(tye," \u2014 "),Mq=n(tye,"A",{href:!0});var Tit=s(Mq);v2o=r(Tit,"DPRQuestionEncoder"),Tit.forEach(t),F2o=r(tye," (DPR model)"),tye.forEach(t),T2o=i($),t_=n($,"LI",{});var aye=s(t_);ede=n(aye,"STRONG",{});var Mit=s(ede);M2o=r(Mit,"dpt"),Mit.forEach(t),E2o=r(aye," \u2014 "),Eq=n(aye,"A",{href:!0});var Eit=s(Eq);C2o=r(Eit,"DPTModel"),Eit.forEach(t),w2o=r(aye," (DPT model)"),aye.forEach(t),A2o=i($),a_=n($,"LI",{});var nye=s(a_);ode=n(nye,"STRONG",{});var Cit=s(ode);L2o=r(Cit,"electra"),Cit.forEach(t),y2o=r(nye," \u2014 "),Cq=n(nye,"A",{href:!0});var wit=s(Cq);x2o=r(wit,"ElectraModel"),wit.forEach(t),$2o=r(nye," (ELECTRA model)"),nye.forEach(t),k2o=i($),n_=n($,"LI",{});var sye=s(n_);rde=n(sye,"STRONG",{});var Ait=s(rde);S2o=r(Ait,"flaubert"),Ait.forEach(t),R2o=r(sye," \u2014 "),wq=n(sye,"A",{href:!0});var Lit=s(wq);P2o=r(Lit,"FlaubertModel"),Lit.forEach(t),B2o=r(sye," (FlauBERT model)"),sye.forEach(t),I2o=i($),s_=n($,"LI",{});var lye=s(s_);tde=n(lye,"STRONG",{});var yit=s(tde);N2o=r(yit,"flava"),yit.forEach(t),q2o=r(lye," \u2014 "),Aq=n(lye,"A",{href:!0});var xit=s(Aq);j2o=r(xit,"FlavaModel"),xit.forEach(t),D2o=r(lye," (FLAVA model)"),lye.forEach(t),G2o=i($),l_=n($,"LI",{});var iye=s(l_);ade=n(iye,"STRONG",{});var $it=s(ade);O2o=r($it,"fnet"),$it.forEach(t),V2o=r(iye," \u2014 "),Lq=n(iye,"A",{href:!0});var kit=s(Lq);X2o=r(kit,"FNetModel"),kit.forEach(t),z2o=r(iye," (FNet model)"),iye.forEach(t),W2o=i($),i_=n($,"LI",{});var dye=s(i_);nde=n(dye,"STRONG",{});var Sit=s(nde);Q2o=r(Sit,"fsmt"),Sit.forEach(t),H2o=r(dye," \u2014 "),yq=n(dye,"A",{href:!0});var Rit=s(yq);U2o=r(Rit,"FSMTModel"),Rit.forEach(t),J2o=r(dye," (FairSeq Machine-Translation model)"),dye.forEach(t),Y2o=i($),Gs=n($,"LI",{});var zk=s(Gs);sde=n(zk,"STRONG",{});var Pit=s(sde);K2o=r(Pit,"funnel"),Pit.forEach(t),Z2o=r(zk," \u2014 "),xq=n(zk,"A",{href:!0});var Bit=s(xq);evo=r(Bit,"FunnelModel"),Bit.forEach(t),ovo=r(zk," or "),$q=n(zk,"A",{href:!0});var Iit=s($q);rvo=r(Iit,"FunnelBaseModel"),Iit.forEach(t),tvo=r(zk," (Funnel Transformer model)"),zk.forEach(t),avo=i($),d_=n($,"LI",{});var cye=s(d_);lde=n(cye,"STRONG",{});var Nit=s(lde);nvo=r(Nit,"glpn"),Nit.forEach(t),svo=r(cye," \u2014 "),kq=n(cye,"A",{href:!0});var qit=s(kq);lvo=r(qit,"GLPNModel"),qit.forEach(t),ivo=r(cye," (GLPN model)"),cye.forEach(t),dvo=i($),c_=n($,"LI",{});var fye=s(c_);ide=n(fye,"STRONG",{});var jit=s(ide);cvo=r(jit,"gpt2"),jit.forEach(t),fvo=r(fye," \u2014 "),Sq=n(fye,"A",{href:!0});var Dit=s(Sq);mvo=r(Dit,"GPT2Model"),Dit.forEach(t),gvo=r(fye," (OpenAI GPT-2 model)"),fye.forEach(t),hvo=i($),f_=n($,"LI",{});var mye=s(f_);dde=n(mye,"STRONG",{});var Git=s(dde);pvo=r(Git,"gpt_neo"),Git.forEach(t),_vo=r(mye," \u2014 "),Rq=n(mye,"A",{href:!0});var Oit=s(Rq);uvo=r(Oit,"GPTNeoModel"),Oit.forEach(t),bvo=r(mye," (GPT Neo model)"),mye.forEach(t),vvo=i($),m_=n($,"LI",{});var gye=s(m_);cde=n(gye,"STRONG",{});var Vit=s(cde);Fvo=r(Vit,"gpt_neox"),Vit.forEach(t),Tvo=r(gye," \u2014 "),Pq=n(gye,"A",{href:!0});var Xit=s(Pq);Mvo=r(Xit,"GPTNeoXModel"),Xit.forEach(t),Evo=r(gye," (GPT NeoX model)"),gye.forEach(t),Cvo=i($),g_=n($,"LI",{});var hye=s(g_);fde=n(hye,"STRONG",{});var zit=s(fde);wvo=r(zit,"gptj"),zit.forEach(t),Avo=r(hye," \u2014 "),Bq=n(hye,"A",{href:!0});var Wit=s(Bq);Lvo=r(Wit,"GPTJModel"),Wit.forEach(t),yvo=r(hye," (GPT-J model)"),hye.forEach(t),xvo=i($),h_=n($,"LI",{});var pye=s(h_);mde=n(pye,"STRONG",{});var Qit=s(mde);$vo=r(Qit,"hubert"),Qit.forEach(t),kvo=r(pye," \u2014 "),Iq=n(pye,"A",{href:!0});var Hit=s(Iq);Svo=r(Hit,"HubertModel"),Hit.forEach(t),Rvo=r(pye," (Hubert model)"),pye.forEach(t),Pvo=i($),p_=n($,"LI",{});var _ye=s(p_);gde=n(_ye,"STRONG",{});var Uit=s(gde);Bvo=r(Uit,"ibert"),Uit.forEach(t),Ivo=r(_ye," \u2014 "),Nq=n(_ye,"A",{href:!0});var Jit=s(Nq);Nvo=r(Jit,"IBertModel"),Jit.forEach(t),qvo=r(_ye," (I-BERT model)"),_ye.forEach(t),jvo=i($),__=n($,"LI",{});var uye=s(__);hde=n(uye,"STRONG",{});var Yit=s(hde);Dvo=r(Yit,"imagegpt"),Yit.forEach(t),Gvo=r(uye," \u2014 "),qq=n(uye,"A",{href:!0});var Kit=s(qq);Ovo=r(Kit,"ImageGPTModel"),Kit.forEach(t),Vvo=r(uye," (ImageGPT model)"),uye.forEach(t),Xvo=i($),u_=n($,"LI",{});var bye=s(u_);pde=n(bye,"STRONG",{});var Zit=s(pde);zvo=r(Zit,"layoutlm"),Zit.forEach(t),Wvo=r(bye," \u2014 "),jq=n(bye,"A",{href:!0});var edt=s(jq);Qvo=r(edt,"LayoutLMModel"),edt.forEach(t),Hvo=r(bye," (LayoutLM model)"),bye.forEach(t),Uvo=i($),b_=n($,"LI",{});var vye=s(b_);_de=n(vye,"STRONG",{});var odt=s(_de);Jvo=r(odt,"layoutlmv2"),odt.forEach(t),Yvo=r(vye," \u2014 "),Dq=n(vye,"A",{href:!0});var rdt=s(Dq);Kvo=r(rdt,"LayoutLMv2Model"),rdt.forEach(t),Zvo=r(vye," (LayoutLMv2 model)"),vye.forEach(t),eFo=i($),v_=n($,"LI",{});var Fye=s(v_);ude=n(Fye,"STRONG",{});var tdt=s(ude);oFo=r(tdt,"layoutlmv3"),tdt.forEach(t),rFo=r(Fye," \u2014 "),Gq=n(Fye,"A",{href:!0});var adt=s(Gq);tFo=r(adt,"LayoutLMv3Model"),adt.forEach(t),aFo=r(Fye," (LayoutLMv3 model)"),Fye.forEach(t),nFo=i($),F_=n($,"LI",{});var Tye=s(F_);bde=n(Tye,"STRONG",{});var ndt=s(bde);sFo=r(ndt,"led"),ndt.forEach(t),lFo=r(Tye," \u2014 "),Oq=n(Tye,"A",{href:!0});var sdt=s(Oq);iFo=r(sdt,"LEDModel"),sdt.forEach(t),dFo=r(Tye," (LED model)"),Tye.forEach(t),cFo=i($),T_=n($,"LI",{});var Mye=s(T_);vde=n(Mye,"STRONG",{});var ldt=s(vde);fFo=r(ldt,"levit"),ldt.forEach(t),mFo=r(Mye," \u2014 "),Vq=n(Mye,"A",{href:!0});var idt=s(Vq);gFo=r(idt,"LevitModel"),idt.forEach(t),hFo=r(Mye," (LeViT model)"),Mye.forEach(t),pFo=i($),M_=n($,"LI",{});var Eye=s(M_);Fde=n(Eye,"STRONG",{});var ddt=s(Fde);_Fo=r(ddt,"longformer"),ddt.forEach(t),uFo=r(Eye," \u2014 "),Xq=n(Eye,"A",{href:!0});var cdt=s(Xq);bFo=r(cdt,"LongformerModel"),cdt.forEach(t),vFo=r(Eye," (Longformer model)"),Eye.forEach(t),FFo=i($),E_=n($,"LI",{});var Cye=s(E_);Tde=n(Cye,"STRONG",{});var fdt=s(Tde);TFo=r(fdt,"longt5"),fdt.forEach(t),MFo=r(Cye," \u2014 "),zq=n(Cye,"A",{href:!0});var mdt=s(zq);EFo=r(mdt,"LongT5Model"),mdt.forEach(t),CFo=r(Cye," (LongT5 model)"),Cye.forEach(t),wFo=i($),C_=n($,"LI",{});var wye=s(C_);Mde=n(wye,"STRONG",{});var gdt=s(Mde);AFo=r(gdt,"luke"),gdt.forEach(t),LFo=r(wye," \u2014 "),Wq=n(wye,"A",{href:!0});var hdt=s(Wq);yFo=r(hdt,"LukeModel"),hdt.forEach(t),xFo=r(wye," (LUKE model)"),wye.forEach(t),$Fo=i($),w_=n($,"LI",{});var Aye=s(w_);Ede=n(Aye,"STRONG",{});var pdt=s(Ede);kFo=r(pdt,"lxmert"),pdt.forEach(t),SFo=r(Aye," \u2014 "),Qq=n(Aye,"A",{href:!0});var _dt=s(Qq);RFo=r(_dt,"LxmertModel"),_dt.forEach(t),PFo=r(Aye," (LXMERT model)"),Aye.forEach(t),BFo=i($),A_=n($,"LI",{});var Lye=s(A_);Cde=n(Lye,"STRONG",{});var udt=s(Cde);IFo=r(udt,"m2m_100"),udt.forEach(t),NFo=r(Lye," \u2014 "),Hq=n(Lye,"A",{href:!0});var bdt=s(Hq);qFo=r(bdt,"M2M100Model"),bdt.forEach(t),jFo=r(Lye," (M2M100 model)"),Lye.forEach(t),DFo=i($),L_=n($,"LI",{});var yye=s(L_);wde=n(yye,"STRONG",{});var vdt=s(wde);GFo=r(vdt,"marian"),vdt.forEach(t),OFo=r(yye," \u2014 "),Uq=n(yye,"A",{href:!0});var Fdt=s(Uq);VFo=r(Fdt,"MarianModel"),Fdt.forEach(t),XFo=r(yye," (Marian model)"),yye.forEach(t),zFo=i($),y_=n($,"LI",{});var xye=s(y_);Ade=n(xye,"STRONG",{});var Tdt=s(Ade);WFo=r(Tdt,"maskformer"),Tdt.forEach(t),QFo=r(xye," \u2014 "),Jq=n(xye,"A",{href:!0});var Mdt=s(Jq);HFo=r(Mdt,"MaskFormerModel"),Mdt.forEach(t),UFo=r(xye," (MaskFormer model)"),xye.forEach(t),JFo=i($),x_=n($,"LI",{});var $ye=s(x_);Lde=n($ye,"STRONG",{});var Edt=s(Lde);YFo=r(Edt,"mbart"),Edt.forEach(t),KFo=r($ye," \u2014 "),Yq=n($ye,"A",{href:!0});var Cdt=s(Yq);ZFo=r(Cdt,"MBartModel"),Cdt.forEach(t),eTo=r($ye," (mBART model)"),$ye.forEach(t),oTo=i($),$_=n($,"LI",{});var kye=s($_);yde=n(kye,"STRONG",{});var wdt=s(yde);rTo=r(wdt,"mctct"),wdt.forEach(t),tTo=r(kye," \u2014 "),Kq=n(kye,"A",{href:!0});var Adt=s(Kq);aTo=r(Adt,"MCTCTModel"),Adt.forEach(t),nTo=r(kye," (M-CTC-T model)"),kye.forEach(t),sTo=i($),k_=n($,"LI",{});var Sye=s(k_);xde=n(Sye,"STRONG",{});var Ldt=s(xde);lTo=r(Ldt,"megatron-bert"),Ldt.forEach(t),iTo=r(Sye," \u2014 "),Zq=n(Sye,"A",{href:!0});var ydt=s(Zq);dTo=r(ydt,"MegatronBertModel"),ydt.forEach(t),cTo=r(Sye," (Megatron-BERT model)"),Sye.forEach(t),fTo=i($),S_=n($,"LI",{});var Rye=s(S_);$de=n(Rye,"STRONG",{});var xdt=s($de);mTo=r(xdt,"mobilebert"),xdt.forEach(t),gTo=r(Rye," \u2014 "),ej=n(Rye,"A",{href:!0});var $dt=s(ej);hTo=r($dt,"MobileBertModel"),$dt.forEach(t),pTo=r(Rye," (MobileBERT model)"),Rye.forEach(t),_To=i($),R_=n($,"LI",{});var Pye=s(R_);kde=n(Pye,"STRONG",{});var kdt=s(kde);uTo=r(kdt,"mobilenet_v1"),kdt.forEach(t),bTo=r(Pye," \u2014 "),oj=n(Pye,"A",{href:!0});var Sdt=s(oj);vTo=r(Sdt,"MobileNetV1Model"),Sdt.forEach(t),FTo=r(Pye," (MobileNetV1 model)"),Pye.forEach(t),TTo=i($),P_=n($,"LI",{});var Bye=s(P_);Sde=n(Bye,"STRONG",{});var Rdt=s(Sde);MTo=r(Rdt,"mpnet"),Rdt.forEach(t),ETo=r(Bye," \u2014 "),rj=n(Bye,"A",{href:!0});var Pdt=s(rj);CTo=r(Pdt,"MPNetModel"),Pdt.forEach(t),wTo=r(Bye," (MPNet model)"),Bye.forEach(t),ATo=i($),B_=n($,"LI",{});var Iye=s(B_);Rde=n(Iye,"STRONG",{});var Bdt=s(Rde);LTo=r(Bdt,"mt5"),Bdt.forEach(t),yTo=r(Iye," \u2014 "),tj=n(Iye,"A",{href:!0});var Idt=s(tj);xTo=r(Idt,"MT5Model"),Idt.forEach(t),$To=r(Iye," (MT5 model)"),Iye.forEach(t),kTo=i($),I_=n($,"LI",{});var Nye=s(I_);Pde=n(Nye,"STRONG",{});var Ndt=s(Pde);STo=r(Ndt,"nystromformer"),Ndt.forEach(t),RTo=r(Nye," \u2014 "),aj=n(Nye,"A",{href:!0});var qdt=s(aj);PTo=r(qdt,"NystromformerModel"),qdt.forEach(t),BTo=r(Nye," (Nystr\xF6mformer model)"),Nye.forEach(t),ITo=i($),N_=n($,"LI",{});var qye=s(N_);Bde=n(qye,"STRONG",{});var jdt=s(Bde);NTo=r(jdt,"openai-gpt"),jdt.forEach(t),qTo=r(qye," \u2014 "),nj=n(qye,"A",{href:!0});var Ddt=s(nj);jTo=r(Ddt,"OpenAIGPTModel"),Ddt.forEach(t),DTo=r(qye," (OpenAI GPT model)"),qye.forEach(t),GTo=i($),q_=n($,"LI",{});var jye=s(q_);Ide=n(jye,"STRONG",{});var Gdt=s(Ide);OTo=r(Gdt,"opt"),Gdt.forEach(t),VTo=r(jye," \u2014 "),sj=n(jye,"A",{href:!0});var Odt=s(sj);XTo=r(Odt,"OPTModel"),Odt.forEach(t),zTo=r(jye," (OPT model)"),jye.forEach(t),WTo=i($),j_=n($,"LI",{});var Dye=s(j_);Nde=n(Dye,"STRONG",{});var Vdt=s(Nde);QTo=r(Vdt,"pegasus"),Vdt.forEach(t),HTo=r(Dye," \u2014 "),lj=n(Dye,"A",{href:!0});var Xdt=s(lj);UTo=r(Xdt,"PegasusModel"),Xdt.forEach(t),JTo=r(Dye," (Pegasus model)"),Dye.forEach(t),YTo=i($),D_=n($,"LI",{});var Gye=s(D_);qde=n(Gye,"STRONG",{});var zdt=s(qde);KTo=r(zdt,"perceiver"),zdt.forEach(t),ZTo=r(Gye," \u2014 "),ij=n(Gye,"A",{href:!0});var Wdt=s(ij);eMo=r(Wdt,"PerceiverModel"),Wdt.forEach(t),oMo=r(Gye," (Perceiver model)"),Gye.forEach(t),rMo=i($),G_=n($,"LI",{});var Oye=s(G_);jde=n(Oye,"STRONG",{});var Qdt=s(jde);tMo=r(Qdt,"plbart"),Qdt.forEach(t),aMo=r(Oye," \u2014 "),dj=n(Oye,"A",{href:!0});var Hdt=s(dj);nMo=r(Hdt,"PLBartModel"),Hdt.forEach(t),sMo=r(Oye," (PLBart model)"),Oye.forEach(t),lMo=i($),O_=n($,"LI",{});var Vye=s(O_);Dde=n(Vye,"STRONG",{});var Udt=s(Dde);iMo=r(Udt,"poolformer"),Udt.forEach(t),dMo=r(Vye," \u2014 "),cj=n(Vye,"A",{href:!0});var Jdt=s(cj);cMo=r(Jdt,"PoolFormerModel"),Jdt.forEach(t),fMo=r(Vye," (PoolFormer model)"),Vye.forEach(t),mMo=i($),V_=n($,"LI",{});var Xye=s(V_);Gde=n(Xye,"STRONG",{});var Ydt=s(Gde);gMo=r(Ydt,"prophetnet"),Ydt.forEach(t),hMo=r(Xye," \u2014 "),fj=n(Xye,"A",{href:!0});var Kdt=s(fj);pMo=r(Kdt,"ProphetNetModel"),Kdt.forEach(t),_Mo=r(Xye," (ProphetNet model)"),Xye.forEach(t),uMo=i($),X_=n($,"LI",{});var zye=s(X_);Ode=n(zye,"STRONG",{});var Zdt=s(Ode);bMo=r(Zdt,"qdqbert"),Zdt.forEach(t),vMo=r(zye," \u2014 "),mj=n(zye,"A",{href:!0});var ect=s(mj);FMo=r(ect,"QDQBertModel"),ect.forEach(t),TMo=r(zye," (QDQBert model)"),zye.forEach(t),MMo=i($),z_=n($,"LI",{});var Wye=s(z_);Vde=n(Wye,"STRONG",{});var oct=s(Vde);EMo=r(oct,"reformer"),oct.forEach(t),CMo=r(Wye," \u2014 "),gj=n(Wye,"A",{href:!0});var rct=s(gj);wMo=r(rct,"ReformerModel"),rct.forEach(t),AMo=r(Wye," (Reformer model)"),Wye.forEach(t),LMo=i($),W_=n($,"LI",{});var Qye=s(W_);Xde=n(Qye,"STRONG",{});var tct=s(Xde);yMo=r(tct,"regnet"),tct.forEach(t),xMo=r(Qye," \u2014 "),hj=n(Qye,"A",{href:!0});var act=s(hj);$Mo=r(act,"RegNetModel"),act.forEach(t),kMo=r(Qye," (RegNet model)"),Qye.forEach(t),SMo=i($),Q_=n($,"LI",{});var Hye=s(Q_);zde=n(Hye,"STRONG",{});var nct=s(zde);RMo=r(nct,"rembert"),nct.forEach(t),PMo=r(Hye," \u2014 "),pj=n(Hye,"A",{href:!0});var sct=s(pj);BMo=r(sct,"RemBertModel"),sct.forEach(t),IMo=r(Hye," (RemBERT model)"),Hye.forEach(t),NMo=i($),H_=n($,"LI",{});var Uye=s(H_);Wde=n(Uye,"STRONG",{});var lct=s(Wde);qMo=r(lct,"resnet"),lct.forEach(t),jMo=r(Uye," \u2014 "),_j=n(Uye,"A",{href:!0});var ict=s(_j);DMo=r(ict,"ResNetModel"),ict.forEach(t),GMo=r(Uye," (ResNet model)"),Uye.forEach(t),OMo=i($),U_=n($,"LI",{});var Jye=s(U_);Qde=n(Jye,"STRONG",{});var dct=s(Qde);VMo=r(dct,"retribert"),dct.forEach(t),XMo=r(Jye," \u2014 "),uj=n(Jye,"A",{href:!0});var cct=s(uj);zMo=r(cct,"RetriBertModel"),cct.forEach(t),WMo=r(Jye," (RetriBERT model)"),Jye.forEach(t),QMo=i($),J_=n($,"LI",{});var Yye=s(J_);Hde=n(Yye,"STRONG",{});var fct=s(Hde);HMo=r(fct,"roberta"),fct.forEach(t),UMo=r(Yye," \u2014 "),bj=n(Yye,"A",{href:!0});var mct=s(bj);JMo=r(mct,"RobertaModel"),mct.forEach(t),YMo=r(Yye," (RoBERTa model)"),Yye.forEach(t),KMo=i($),Y_=n($,"LI",{});var Kye=s(Y_);Ude=n(Kye,"STRONG",{});var gct=s(Ude);ZMo=r(gct,"roformer"),gct.forEach(t),eEo=r(Kye," \u2014 "),vj=n(Kye,"A",{href:!0});var hct=s(vj);oEo=r(hct,"RoFormerModel"),hct.forEach(t),rEo=r(Kye," (RoFormer model)"),Kye.forEach(t),tEo=i($),K_=n($,"LI",{});var Zye=s(K_);Jde=n(Zye,"STRONG",{});var pct=s(Jde);aEo=r(pct,"segformer"),pct.forEach(t),nEo=r(Zye," \u2014 "),Fj=n(Zye,"A",{href:!0});var _ct=s(Fj);sEo=r(_ct,"SegformerModel"),_ct.forEach(t),lEo=r(Zye," (SegFormer model)"),Zye.forEach(t),iEo=i($),Z_=n($,"LI",{});var e8e=s(Z_);Yde=n(e8e,"STRONG",{});var uct=s(Yde);dEo=r(uct,"sew"),uct.forEach(t),cEo=r(e8e," \u2014 "),Tj=n(e8e,"A",{href:!0});var bct=s(Tj);fEo=r(bct,"SEWModel"),bct.forEach(t),mEo=r(e8e," (SEW model)"),e8e.forEach(t),gEo=i($),eu=n($,"LI",{});var o8e=s(eu);Kde=n(o8e,"STRONG",{});var vct=s(Kde);hEo=r(vct,"sew-d"),vct.forEach(t),pEo=r(o8e," \u2014 "),Mj=n(o8e,"A",{href:!0});var Fct=s(Mj);_Eo=r(Fct,"SEWDModel"),Fct.forEach(t),uEo=r(o8e," (SEW-D model)"),o8e.forEach(t),bEo=i($),ou=n($,"LI",{});var r8e=s(ou);Zde=n(r8e,"STRONG",{});var Tct=s(Zde);vEo=r(Tct,"speech_to_text"),Tct.forEach(t),FEo=r(r8e," \u2014 "),Ej=n(r8e,"A",{href:!0});var Mct=s(Ej);TEo=r(Mct,"Speech2TextModel"),Mct.forEach(t),MEo=r(r8e," (Speech2Text model)"),r8e.forEach(t),EEo=i($),ru=n($,"LI",{});var t8e=s(ru);ece=n(t8e,"STRONG",{});var Ect=s(ece);CEo=r(Ect,"splinter"),Ect.forEach(t),wEo=r(t8e," \u2014 "),Cj=n(t8e,"A",{href:!0});var Cct=s(Cj);AEo=r(Cct,"SplinterModel"),Cct.forEach(t),LEo=r(t8e," (Splinter model)"),t8e.forEach(t),yEo=i($),tu=n($,"LI",{});var a8e=s(tu);oce=n(a8e,"STRONG",{});var wct=s(oce);xEo=r(wct,"squeezebert"),wct.forEach(t),$Eo=r(a8e," \u2014 "),wj=n(a8e,"A",{href:!0});var Act=s(wj);kEo=r(Act,"SqueezeBertModel"),Act.forEach(t),SEo=r(a8e," (SqueezeBERT model)"),a8e.forEach(t),REo=i($),au=n($,"LI",{});var n8e=s(au);rce=n(n8e,"STRONG",{});var Lct=s(rce);PEo=r(Lct,"swin"),Lct.forEach(t),BEo=r(n8e," \u2014 "),Aj=n(n8e,"A",{href:!0});var yct=s(Aj);IEo=r(yct,"SwinModel"),yct.forEach(t),NEo=r(n8e," (Swin Transformer model)"),n8e.forEach(t),qEo=i($),nu=n($,"LI",{});var s8e=s(nu);tce=n(s8e,"STRONG",{});var xct=s(tce);jEo=r(xct,"t5"),xct.forEach(t),DEo=r(s8e," \u2014 "),Lj=n(s8e,"A",{href:!0});var $ct=s(Lj);GEo=r($ct,"T5Model"),$ct.forEach(t),OEo=r(s8e," (T5 model)"),s8e.forEach(t),VEo=i($),su=n($,"LI",{});var l8e=s(su);ace=n(l8e,"STRONG",{});var kct=s(ace);XEo=r(kct,"tapas"),kct.forEach(t),zEo=r(l8e," \u2014 "),yj=n(l8e,"A",{href:!0});var Sct=s(yj);WEo=r(Sct,"TapasModel"),Sct.forEach(t),QEo=r(l8e," (TAPAS model)"),l8e.forEach(t),HEo=i($),lu=n($,"LI",{});var i8e=s(lu);nce=n(i8e,"STRONG",{});var Rct=s(nce);UEo=r(Rct,"trajectory_transformer"),Rct.forEach(t),JEo=r(i8e," \u2014 "),xj=n(i8e,"A",{href:!0});var Pct=s(xj);YEo=r(Pct,"TrajectoryTransformerModel"),Pct.forEach(t),KEo=r(i8e," (Trajectory Transformer model)"),i8e.forEach(t),ZEo=i($),iu=n($,"LI",{});var d8e=s(iu);sce=n(d8e,"STRONG",{});var Bct=s(sce);e4o=r(Bct,"transfo-xl"),Bct.forEach(t),o4o=r(d8e," \u2014 "),$j=n(d8e,"A",{href:!0});var Ict=s($j);r4o=r(Ict,"TransfoXLModel"),Ict.forEach(t),t4o=r(d8e," (Transformer-XL model)"),d8e.forEach(t),a4o=i($),du=n($,"LI",{});var c8e=s(du);lce=n(c8e,"STRONG",{});var Nct=s(lce);n4o=r(Nct,"unispeech"),Nct.forEach(t),s4o=r(c8e," \u2014 "),kj=n(c8e,"A",{href:!0});var qct=s(kj);l4o=r(qct,"UniSpeechModel"),qct.forEach(t),i4o=r(c8e," (UniSpeech model)"),c8e.forEach(t),d4o=i($),cu=n($,"LI",{});var f8e=s(cu);ice=n(f8e,"STRONG",{});var jct=s(ice);c4o=r(jct,"unispeech-sat"),jct.forEach(t),f4o=r(f8e," \u2014 "),Sj=n(f8e,"A",{href:!0});var Dct=s(Sj);m4o=r(Dct,"UniSpeechSatModel"),Dct.forEach(t),g4o=r(f8e," (UniSpeechSat model)"),f8e.forEach(t),h4o=i($),fu=n($,"LI",{});var m8e=s(fu);dce=n(m8e,"STRONG",{});var Gct=s(dce);p4o=r(Gct,"van"),Gct.forEach(t),_4o=r(m8e," \u2014 "),Rj=n(m8e,"A",{href:!0});var Oct=s(Rj);u4o=r(Oct,"VanModel"),Oct.forEach(t),b4o=r(m8e," (VAN model)"),m8e.forEach(t),v4o=i($),mu=n($,"LI",{});var g8e=s(mu);cce=n(g8e,"STRONG",{});var Vct=s(cce);F4o=r(Vct,"vilt"),Vct.forEach(t),T4o=r(g8e," \u2014 "),Pj=n(g8e,"A",{href:!0});var Xct=s(Pj);M4o=r(Xct,"ViltModel"),Xct.forEach(t),E4o=r(g8e," (ViLT model)"),g8e.forEach(t),C4o=i($),gu=n($,"LI",{});var h8e=s(gu);fce=n(h8e,"STRONG",{});var zct=s(fce);w4o=r(zct,"vision-text-dual-encoder"),zct.forEach(t),A4o=r(h8e," \u2014 "),Bj=n(h8e,"A",{href:!0});var Wct=s(Bj);L4o=r(Wct,"VisionTextDualEncoderModel"),Wct.forEach(t),y4o=r(h8e," (VisionTextDualEncoder model)"),h8e.forEach(t),x4o=i($),hu=n($,"LI",{});var p8e=s(hu);mce=n(p8e,"STRONG",{});var Qct=s(mce);$4o=r(Qct,"visual_bert"),Qct.forEach(t),k4o=r(p8e," \u2014 "),Ij=n(p8e,"A",{href:!0});var Hct=s(Ij);S4o=r(Hct,"VisualBertModel"),Hct.forEach(t),R4o=r(p8e," (VisualBERT model)"),p8e.forEach(t),P4o=i($),pu=n($,"LI",{});var _8e=s(pu);gce=n(_8e,"STRONG",{});var Uct=s(gce);B4o=r(Uct,"vit"),Uct.forEach(t),I4o=r(_8e," \u2014 "),Nj=n(_8e,"A",{href:!0});var Jct=s(Nj);N4o=r(Jct,"ViTModel"),Jct.forEach(t),q4o=r(_8e," (ViT model)"),_8e.forEach(t),j4o=i($),_u=n($,"LI",{});var u8e=s(_u);hce=n(u8e,"STRONG",{});var Yct=s(hce);D4o=r(Yct,"vit_mae"),Yct.forEach(t),G4o=r(u8e," \u2014 "),qj=n(u8e,"A",{href:!0});var Kct=s(qj);O4o=r(Kct,"ViTMAEModel"),Kct.forEach(t),V4o=r(u8e," (ViTMAE model)"),u8e.forEach(t),X4o=i($),uu=n($,"LI",{});var b8e=s(uu);pce=n(b8e,"STRONG",{});var Zct=s(pce);z4o=r(Zct,"wav2vec2"),Zct.forEach(t),W4o=r(b8e," \u2014 "),jj=n(b8e,"A",{href:!0});var eft=s(jj);Q4o=r(eft,"Wav2Vec2Model"),eft.forEach(t),H4o=r(b8e," (Wav2Vec2 model)"),b8e.forEach(t),U4o=i($),bu=n($,"LI",{});var v8e=s(bu);_ce=n(v8e,"STRONG",{});var oft=s(_ce);J4o=r(oft,"wav2vec2-conformer"),oft.forEach(t),Y4o=r(v8e," \u2014 "),Dj=n(v8e,"A",{href:!0});var rft=s(Dj);K4o=r(rft,"Wav2Vec2ConformerModel"),rft.forEach(t),Z4o=r(v8e," (Wav2Vec2-Conformer model)"),v8e.forEach(t),eCo=i($),vu=n($,"LI",{});var F8e=s(vu);uce=n(F8e,"STRONG",{});var tft=s(uce);oCo=r(tft,"wavlm"),tft.forEach(t),rCo=r(F8e," \u2014 "),Gj=n(F8e,"A",{href:!0});var aft=s(Gj);tCo=r(aft,"WavLMModel"),aft.forEach(t),aCo=r(F8e," (WavLM model)"),F8e.forEach(t),nCo=i($),Fu=n($,"LI",{});var T8e=s(Fu);bce=n(T8e,"STRONG",{});var nft=s(bce);sCo=r(nft,"xglm"),nft.forEach(t),lCo=r(T8e," \u2014 "),Oj=n(T8e,"A",{href:!0});var sft=s(Oj);iCo=r(sft,"XGLMModel"),sft.forEach(t),dCo=r(T8e," (XGLM model)"),T8e.forEach(t),cCo=i($),Tu=n($,"LI",{});var M8e=s(Tu);vce=n(M8e,"STRONG",{});var lft=s(vce);fCo=r(lft,"xlm"),lft.forEach(t),mCo=r(M8e," \u2014 "),Vj=n(M8e,"A",{href:!0});var ift=s(Vj);gCo=r(ift,"XLMModel"),ift.forEach(t),hCo=r(M8e," (XLM model)"),M8e.forEach(t),pCo=i($),Mu=n($,"LI",{});var E8e=s(Mu);Fce=n(E8e,"STRONG",{});var dft=s(Fce);_Co=r(dft,"xlm-prophetnet"),dft.forEach(t),uCo=r(E8e," \u2014 "),Xj=n(E8e,"A",{href:!0});var cft=s(Xj);bCo=r(cft,"XLMProphetNetModel"),cft.forEach(t),vCo=r(E8e," (XLM-ProphetNet model)"),E8e.forEach(t),FCo=i($),Eu=n($,"LI",{});var C8e=s(Eu);Tce=n(C8e,"STRONG",{});var fft=s(Tce);TCo=r(fft,"xlm-roberta"),fft.forEach(t),MCo=r(C8e," \u2014 "),zj=n(C8e,"A",{href:!0});var mft=s(zj);ECo=r(mft,"XLMRobertaModel"),mft.forEach(t),CCo=r(C8e," (XLM-RoBERTa model)"),C8e.forEach(t),wCo=i($),Cu=n($,"LI",{});var w8e=s(Cu);Mce=n(w8e,"STRONG",{});var gft=s(Mce);ACo=r(gft,"xlm-roberta-xl"),gft.forEach(t),LCo=r(w8e," \u2014 "),Wj=n(w8e,"A",{href:!0});var hft=s(Wj);yCo=r(hft,"XLMRobertaXLModel"),hft.forEach(t),xCo=r(w8e," (XLM-RoBERTa-XL model)"),w8e.forEach(t),$Co=i($),wu=n($,"LI",{});var A8e=s(wu);Ece=n(A8e,"STRONG",{});var pft=s(Ece);kCo=r(pft,"xlnet"),pft.forEach(t),SCo=r(A8e," \u2014 "),Qj=n(A8e,"A",{href:!0});var _ft=s(Qj);RCo=r(_ft,"XLNetModel"),_ft.forEach(t),PCo=r(A8e," (XLNet model)"),A8e.forEach(t),BCo=i($),Au=n($,"LI",{});var L8e=s(Au);Cce=n(L8e,"STRONG",{});var uft=s(Cce);ICo=r(uft,"yolos"),uft.forEach(t),NCo=r(L8e," \u2014 "),Hj=n(L8e,"A",{href:!0});var bft=s(Hj);qCo=r(bft,"YolosModel"),bft.forEach(t),jCo=r(L8e," (YOLOS model)"),L8e.forEach(t),DCo=i($),Lu=n($,"LI",{});var y8e=s(Lu);wce=n(y8e,"STRONG",{});var vft=s(wce);GCo=r(vft,"yoso"),vft.forEach(t),OCo=r(y8e," \u2014 "),Uj=n(y8e,"A",{href:!0});var Fft=s(Uj);VCo=r(Fft,"YosoModel"),Fft.forEach(t),XCo=r(y8e," (YOSO model)"),y8e.forEach(t),$.forEach(t),zCo=i(aa),yu=n(aa,"P",{});var x8e=s(yu);WCo=r(x8e,"The model is set in evaluation mode by default using "),Ace=n(x8e,"CODE",{});var Tft=s(Ace);QCo=r(Tft,"model.eval()"),Tft.forEach(t),HCo=r(x8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(x8e,"CODE",{});var Mft=s(Lce);UCo=r(Mft,"model.train()"),Mft.forEach(t),x8e.forEach(t),JCo=i(aa),T(xu.$$.fragment,aa),aa.forEach(t),Us.forEach(t),xGe=i(f),Ni=n(f,"H2",{class:!0});var BVe=s(Ni);$u=n(BVe,"A",{id:!0,class:!0,href:!0});var Eft=s($u);yce=n(Eft,"SPAN",{});var Cft=s(yce);T(eL.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),YCo=i(BVe),xce=n(BVe,"SPAN",{});var wft=s(xce);KCo=r(wft,"AutoModelForPreTraining"),wft.forEach(t),BVe.forEach(t),$Ge=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(oL.$$.fragment,Js),ZCo=i(Js),qi=n(Js,"P",{});var loe=s(qi);e5o=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jj=n(loe,"A",{href:!0});var Aft=s(Jj);o5o=r(Aft,"from_pretrained()"),Aft.forEach(t),r5o=r(loe," class method or the "),Yj=n(loe,"A",{href:!0});var Lft=s(Yj);t5o=r(Lft,"from_config()"),Lft.forEach(t),a5o=r(loe,` class
method.`),loe.forEach(t),n5o=i(Js),rL=n(Js,"P",{});var IVe=s(rL);s5o=r(IVe,"This class cannot be instantiated directly using "),$ce=n(IVe,"CODE",{});var yft=s($ce);l5o=r(yft,"__init__()"),yft.forEach(t),i5o=r(IVe," (throws an error)."),IVe.forEach(t),d5o=i(Js),st=n(Js,"DIV",{class:!0});var Lw=s(st);T(tL.$$.fragment,Lw),c5o=i(Lw),kce=n(Lw,"P",{});var xft=s(kce);f5o=r(xft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xft.forEach(t),m5o=i(Lw),ji=n(Lw,"P",{});var ioe=s(ji);g5o=r(ioe,`Note:
Loading a model from its configuration file does `),Sce=n(ioe,"STRONG",{});var $ft=s(Sce);h5o=r($ft,"not"),$ft.forEach(t),p5o=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=n(ioe,"A",{href:!0});var kft=s(Kj);_5o=r(kft,"from_pretrained()"),kft.forEach(t),u5o=r(ioe," to load the model weights."),ioe.forEach(t),b5o=i(Lw),T(ku.$$.fragment,Lw),Lw.forEach(t),v5o=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(aL.$$.fragment,na),F5o=i(na),Rce=n(na,"P",{});var Sft=s(Rce);T5o=r(Sft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sft.forEach(t),M5o=i(na),Ra=n(na,"P",{});var yw=s(Ra);E5o=r(yw,"The model class to instantiate is selected based on the "),Pce=n(yw,"CODE",{});var Rft=s(Pce);C5o=r(Rft,"model_type"),Rft.forEach(t),w5o=r(yw,` property of the config object (either
passed as an argument or loaded from `),Bce=n(yw,"CODE",{});var Pft=s(Bce);A5o=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),L5o=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(yw,"CODE",{});var Bft=s(Ice);y5o=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),x5o=r(yw,":"),yw.forEach(t),$5o=i(na),G=n(na,"UL",{});var O=s(G);Su=n(O,"LI",{});var $8e=s(Su);Nce=n($8e,"STRONG",{});var Ift=s(Nce);k5o=r(Ift,"albert"),Ift.forEach(t),S5o=r($8e," \u2014 "),Zj=n($8e,"A",{href:!0});var Nft=s(Zj);R5o=r(Nft,"AlbertForPreTraining"),Nft.forEach(t),P5o=r($8e," (ALBERT model)"),$8e.forEach(t),B5o=i(O),Ru=n(O,"LI",{});var k8e=s(Ru);qce=n(k8e,"STRONG",{});var qft=s(qce);I5o=r(qft,"bart"),qft.forEach(t),N5o=r(k8e," \u2014 "),eD=n(k8e,"A",{href:!0});var jft=s(eD);q5o=r(jft,"BartForConditionalGeneration"),jft.forEach(t),j5o=r(k8e," (BART model)"),k8e.forEach(t),D5o=i(O),Pu=n(O,"LI",{});var S8e=s(Pu);jce=n(S8e,"STRONG",{});var Dft=s(jce);G5o=r(Dft,"bert"),Dft.forEach(t),O5o=r(S8e," \u2014 "),oD=n(S8e,"A",{href:!0});var Gft=s(oD);V5o=r(Gft,"BertForPreTraining"),Gft.forEach(t),X5o=r(S8e," (BERT model)"),S8e.forEach(t),z5o=i(O),Bu=n(O,"LI",{});var R8e=s(Bu);Dce=n(R8e,"STRONG",{});var Oft=s(Dce);W5o=r(Oft,"big_bird"),Oft.forEach(t),Q5o=r(R8e," \u2014 "),rD=n(R8e,"A",{href:!0});var Vft=s(rD);H5o=r(Vft,"BigBirdForPreTraining"),Vft.forEach(t),U5o=r(R8e," (BigBird model)"),R8e.forEach(t),J5o=i(O),Iu=n(O,"LI",{});var P8e=s(Iu);Gce=n(P8e,"STRONG",{});var Xft=s(Gce);Y5o=r(Xft,"bloom"),Xft.forEach(t),K5o=r(P8e," \u2014 "),tD=n(P8e,"A",{href:!0});var zft=s(tD);Z5o=r(zft,"BloomForCausalLM"),zft.forEach(t),e3o=r(P8e," (BLOOM model)"),P8e.forEach(t),o3o=i(O),Nu=n(O,"LI",{});var B8e=s(Nu);Oce=n(B8e,"STRONG",{});var Wft=s(Oce);r3o=r(Wft,"camembert"),Wft.forEach(t),t3o=r(B8e," \u2014 "),aD=n(B8e,"A",{href:!0});var Qft=s(aD);a3o=r(Qft,"CamembertForMaskedLM"),Qft.forEach(t),n3o=r(B8e," (CamemBERT model)"),B8e.forEach(t),s3o=i(O),qu=n(O,"LI",{});var I8e=s(qu);Vce=n(I8e,"STRONG",{});var Hft=s(Vce);l3o=r(Hft,"ctrl"),Hft.forEach(t),i3o=r(I8e," \u2014 "),nD=n(I8e,"A",{href:!0});var Uft=s(nD);d3o=r(Uft,"CTRLLMHeadModel"),Uft.forEach(t),c3o=r(I8e," (CTRL model)"),I8e.forEach(t),f3o=i(O),ju=n(O,"LI",{});var N8e=s(ju);Xce=n(N8e,"STRONG",{});var Jft=s(Xce);m3o=r(Jft,"data2vec-text"),Jft.forEach(t),g3o=r(N8e," \u2014 "),sD=n(N8e,"A",{href:!0});var Yft=s(sD);h3o=r(Yft,"Data2VecTextForMaskedLM"),Yft.forEach(t),p3o=r(N8e," (Data2VecText model)"),N8e.forEach(t),_3o=i(O),Du=n(O,"LI",{});var q8e=s(Du);zce=n(q8e,"STRONG",{});var Kft=s(zce);u3o=r(Kft,"deberta"),Kft.forEach(t),b3o=r(q8e," \u2014 "),lD=n(q8e,"A",{href:!0});var Zft=s(lD);v3o=r(Zft,"DebertaForMaskedLM"),Zft.forEach(t),F3o=r(q8e," (DeBERTa model)"),q8e.forEach(t),T3o=i(O),Gu=n(O,"LI",{});var j8e=s(Gu);Wce=n(j8e,"STRONG",{});var emt=s(Wce);M3o=r(emt,"deberta-v2"),emt.forEach(t),E3o=r(j8e," \u2014 "),iD=n(j8e,"A",{href:!0});var omt=s(iD);C3o=r(omt,"DebertaV2ForMaskedLM"),omt.forEach(t),w3o=r(j8e," (DeBERTa-v2 model)"),j8e.forEach(t),A3o=i(O),Ou=n(O,"LI",{});var D8e=s(Ou);Qce=n(D8e,"STRONG",{});var rmt=s(Qce);L3o=r(rmt,"distilbert"),rmt.forEach(t),y3o=r(D8e," \u2014 "),dD=n(D8e,"A",{href:!0});var tmt=s(dD);x3o=r(tmt,"DistilBertForMaskedLM"),tmt.forEach(t),$3o=r(D8e," (DistilBERT model)"),D8e.forEach(t),k3o=i(O),Vu=n(O,"LI",{});var G8e=s(Vu);Hce=n(G8e,"STRONG",{});var amt=s(Hce);S3o=r(amt,"electra"),amt.forEach(t),R3o=r(G8e," \u2014 "),cD=n(G8e,"A",{href:!0});var nmt=s(cD);P3o=r(nmt,"ElectraForPreTraining"),nmt.forEach(t),B3o=r(G8e," (ELECTRA model)"),G8e.forEach(t),I3o=i(O),Xu=n(O,"LI",{});var O8e=s(Xu);Uce=n(O8e,"STRONG",{});var smt=s(Uce);N3o=r(smt,"flaubert"),smt.forEach(t),q3o=r(O8e," \u2014 "),fD=n(O8e,"A",{href:!0});var lmt=s(fD);j3o=r(lmt,"FlaubertWithLMHeadModel"),lmt.forEach(t),D3o=r(O8e," (FlauBERT model)"),O8e.forEach(t),G3o=i(O),zu=n(O,"LI",{});var V8e=s(zu);Jce=n(V8e,"STRONG",{});var imt=s(Jce);O3o=r(imt,"flava"),imt.forEach(t),V3o=r(V8e," \u2014 "),mD=n(V8e,"A",{href:!0});var dmt=s(mD);X3o=r(dmt,"FlavaForPreTraining"),dmt.forEach(t),z3o=r(V8e," (FLAVA model)"),V8e.forEach(t),W3o=i(O),Wu=n(O,"LI",{});var X8e=s(Wu);Yce=n(X8e,"STRONG",{});var cmt=s(Yce);Q3o=r(cmt,"fnet"),cmt.forEach(t),H3o=r(X8e," \u2014 "),gD=n(X8e,"A",{href:!0});var fmt=s(gD);U3o=r(fmt,"FNetForPreTraining"),fmt.forEach(t),J3o=r(X8e," (FNet model)"),X8e.forEach(t),Y3o=i(O),Qu=n(O,"LI",{});var z8e=s(Qu);Kce=n(z8e,"STRONG",{});var mmt=s(Kce);K3o=r(mmt,"fsmt"),mmt.forEach(t),Z3o=r(z8e," \u2014 "),hD=n(z8e,"A",{href:!0});var gmt=s(hD);e0o=r(gmt,"FSMTForConditionalGeneration"),gmt.forEach(t),o0o=r(z8e," (FairSeq Machine-Translation model)"),z8e.forEach(t),r0o=i(O),Hu=n(O,"LI",{});var W8e=s(Hu);Zce=n(W8e,"STRONG",{});var hmt=s(Zce);t0o=r(hmt,"funnel"),hmt.forEach(t),a0o=r(W8e," \u2014 "),pD=n(W8e,"A",{href:!0});var pmt=s(pD);n0o=r(pmt,"FunnelForPreTraining"),pmt.forEach(t),s0o=r(W8e," (Funnel Transformer model)"),W8e.forEach(t),l0o=i(O),Uu=n(O,"LI",{});var Q8e=s(Uu);efe=n(Q8e,"STRONG",{});var _mt=s(efe);i0o=r(_mt,"gpt2"),_mt.forEach(t),d0o=r(Q8e," \u2014 "),_D=n(Q8e,"A",{href:!0});var umt=s(_D);c0o=r(umt,"GPT2LMHeadModel"),umt.forEach(t),f0o=r(Q8e," (OpenAI GPT-2 model)"),Q8e.forEach(t),m0o=i(O),Ju=n(O,"LI",{});var H8e=s(Ju);ofe=n(H8e,"STRONG",{});var bmt=s(ofe);g0o=r(bmt,"ibert"),bmt.forEach(t),h0o=r(H8e," \u2014 "),uD=n(H8e,"A",{href:!0});var vmt=s(uD);p0o=r(vmt,"IBertForMaskedLM"),vmt.forEach(t),_0o=r(H8e," (I-BERT model)"),H8e.forEach(t),u0o=i(O),Yu=n(O,"LI",{});var U8e=s(Yu);rfe=n(U8e,"STRONG",{});var Fmt=s(rfe);b0o=r(Fmt,"layoutlm"),Fmt.forEach(t),v0o=r(U8e," \u2014 "),bD=n(U8e,"A",{href:!0});var Tmt=s(bD);F0o=r(Tmt,"LayoutLMForMaskedLM"),Tmt.forEach(t),T0o=r(U8e," (LayoutLM model)"),U8e.forEach(t),M0o=i(O),Ku=n(O,"LI",{});var J8e=s(Ku);tfe=n(J8e,"STRONG",{});var Mmt=s(tfe);E0o=r(Mmt,"longformer"),Mmt.forEach(t),C0o=r(J8e," \u2014 "),vD=n(J8e,"A",{href:!0});var Emt=s(vD);w0o=r(Emt,"LongformerForMaskedLM"),Emt.forEach(t),A0o=r(J8e," (Longformer model)"),J8e.forEach(t),L0o=i(O),Zu=n(O,"LI",{});var Y8e=s(Zu);afe=n(Y8e,"STRONG",{});var Cmt=s(afe);y0o=r(Cmt,"lxmert"),Cmt.forEach(t),x0o=r(Y8e," \u2014 "),FD=n(Y8e,"A",{href:!0});var wmt=s(FD);$0o=r(wmt,"LxmertForPreTraining"),wmt.forEach(t),k0o=r(Y8e," (LXMERT model)"),Y8e.forEach(t),S0o=i(O),e1=n(O,"LI",{});var K8e=s(e1);nfe=n(K8e,"STRONG",{});var Amt=s(nfe);R0o=r(Amt,"megatron-bert"),Amt.forEach(t),P0o=r(K8e," \u2014 "),TD=n(K8e,"A",{href:!0});var Lmt=s(TD);B0o=r(Lmt,"MegatronBertForPreTraining"),Lmt.forEach(t),I0o=r(K8e," (Megatron-BERT model)"),K8e.forEach(t),N0o=i(O),o1=n(O,"LI",{});var Z8e=s(o1);sfe=n(Z8e,"STRONG",{});var ymt=s(sfe);q0o=r(ymt,"mobilebert"),ymt.forEach(t),j0o=r(Z8e," \u2014 "),MD=n(Z8e,"A",{href:!0});var xmt=s(MD);D0o=r(xmt,"MobileBertForPreTraining"),xmt.forEach(t),G0o=r(Z8e," (MobileBERT model)"),Z8e.forEach(t),O0o=i(O),r1=n(O,"LI",{});var exe=s(r1);lfe=n(exe,"STRONG",{});var $mt=s(lfe);V0o=r($mt,"mpnet"),$mt.forEach(t),X0o=r(exe," \u2014 "),ED=n(exe,"A",{href:!0});var kmt=s(ED);z0o=r(kmt,"MPNetForMaskedLM"),kmt.forEach(t),W0o=r(exe," (MPNet model)"),exe.forEach(t),Q0o=i(O),t1=n(O,"LI",{});var oxe=s(t1);ife=n(oxe,"STRONG",{});var Smt=s(ife);H0o=r(Smt,"openai-gpt"),Smt.forEach(t),U0o=r(oxe," \u2014 "),CD=n(oxe,"A",{href:!0});var Rmt=s(CD);J0o=r(Rmt,"OpenAIGPTLMHeadModel"),Rmt.forEach(t),Y0o=r(oxe," (OpenAI GPT model)"),oxe.forEach(t),K0o=i(O),a1=n(O,"LI",{});var rxe=s(a1);dfe=n(rxe,"STRONG",{});var Pmt=s(dfe);Z0o=r(Pmt,"retribert"),Pmt.forEach(t),ewo=r(rxe," \u2014 "),wD=n(rxe,"A",{href:!0});var Bmt=s(wD);owo=r(Bmt,"RetriBertModel"),Bmt.forEach(t),rwo=r(rxe," (RetriBERT model)"),rxe.forEach(t),two=i(O),n1=n(O,"LI",{});var txe=s(n1);cfe=n(txe,"STRONG",{});var Imt=s(cfe);awo=r(Imt,"roberta"),Imt.forEach(t),nwo=r(txe," \u2014 "),AD=n(txe,"A",{href:!0});var Nmt=s(AD);swo=r(Nmt,"RobertaForMaskedLM"),Nmt.forEach(t),lwo=r(txe," (RoBERTa model)"),txe.forEach(t),iwo=i(O),s1=n(O,"LI",{});var axe=s(s1);ffe=n(axe,"STRONG",{});var qmt=s(ffe);dwo=r(qmt,"splinter"),qmt.forEach(t),cwo=r(axe," \u2014 "),LD=n(axe,"A",{href:!0});var jmt=s(LD);fwo=r(jmt,"SplinterForPreTraining"),jmt.forEach(t),mwo=r(axe," (Splinter model)"),axe.forEach(t),gwo=i(O),l1=n(O,"LI",{});var nxe=s(l1);mfe=n(nxe,"STRONG",{});var Dmt=s(mfe);hwo=r(Dmt,"squeezebert"),Dmt.forEach(t),pwo=r(nxe," \u2014 "),yD=n(nxe,"A",{href:!0});var Gmt=s(yD);_wo=r(Gmt,"SqueezeBertForMaskedLM"),Gmt.forEach(t),uwo=r(nxe," (SqueezeBERT model)"),nxe.forEach(t),bwo=i(O),i1=n(O,"LI",{});var sxe=s(i1);gfe=n(sxe,"STRONG",{});var Omt=s(gfe);vwo=r(Omt,"t5"),Omt.forEach(t),Fwo=r(sxe," \u2014 "),xD=n(sxe,"A",{href:!0});var Vmt=s(xD);Two=r(Vmt,"T5ForConditionalGeneration"),Vmt.forEach(t),Mwo=r(sxe," (T5 model)"),sxe.forEach(t),Ewo=i(O),d1=n(O,"LI",{});var lxe=s(d1);hfe=n(lxe,"STRONG",{});var Xmt=s(hfe);Cwo=r(Xmt,"tapas"),Xmt.forEach(t),wwo=r(lxe," \u2014 "),$D=n(lxe,"A",{href:!0});var zmt=s($D);Awo=r(zmt,"TapasForMaskedLM"),zmt.forEach(t),Lwo=r(lxe," (TAPAS model)"),lxe.forEach(t),ywo=i(O),c1=n(O,"LI",{});var ixe=s(c1);pfe=n(ixe,"STRONG",{});var Wmt=s(pfe);xwo=r(Wmt,"transfo-xl"),Wmt.forEach(t),$wo=r(ixe," \u2014 "),kD=n(ixe,"A",{href:!0});var Qmt=s(kD);kwo=r(Qmt,"TransfoXLLMHeadModel"),Qmt.forEach(t),Swo=r(ixe," (Transformer-XL model)"),ixe.forEach(t),Rwo=i(O),f1=n(O,"LI",{});var dxe=s(f1);_fe=n(dxe,"STRONG",{});var Hmt=s(_fe);Pwo=r(Hmt,"unispeech"),Hmt.forEach(t),Bwo=r(dxe," \u2014 "),SD=n(dxe,"A",{href:!0});var Umt=s(SD);Iwo=r(Umt,"UniSpeechForPreTraining"),Umt.forEach(t),Nwo=r(dxe," (UniSpeech model)"),dxe.forEach(t),qwo=i(O),m1=n(O,"LI",{});var cxe=s(m1);ufe=n(cxe,"STRONG",{});var Jmt=s(ufe);jwo=r(Jmt,"unispeech-sat"),Jmt.forEach(t),Dwo=r(cxe," \u2014 "),RD=n(cxe,"A",{href:!0});var Ymt=s(RD);Gwo=r(Ymt,"UniSpeechSatForPreTraining"),Ymt.forEach(t),Owo=r(cxe," (UniSpeechSat model)"),cxe.forEach(t),Vwo=i(O),g1=n(O,"LI",{});var fxe=s(g1);bfe=n(fxe,"STRONG",{});var Kmt=s(bfe);Xwo=r(Kmt,"visual_bert"),Kmt.forEach(t),zwo=r(fxe," \u2014 "),PD=n(fxe,"A",{href:!0});var Zmt=s(PD);Wwo=r(Zmt,"VisualBertForPreTraining"),Zmt.forEach(t),Qwo=r(fxe," (VisualBERT model)"),fxe.forEach(t),Hwo=i(O),h1=n(O,"LI",{});var mxe=s(h1);vfe=n(mxe,"STRONG",{});var egt=s(vfe);Uwo=r(egt,"vit_mae"),egt.forEach(t),Jwo=r(mxe," \u2014 "),BD=n(mxe,"A",{href:!0});var ogt=s(BD);Ywo=r(ogt,"ViTMAEForPreTraining"),ogt.forEach(t),Kwo=r(mxe," (ViTMAE model)"),mxe.forEach(t),Zwo=i(O),p1=n(O,"LI",{});var gxe=s(p1);Ffe=n(gxe,"STRONG",{});var rgt=s(Ffe);eAo=r(rgt,"wav2vec2"),rgt.forEach(t),oAo=r(gxe," \u2014 "),ID=n(gxe,"A",{href:!0});var tgt=s(ID);rAo=r(tgt,"Wav2Vec2ForPreTraining"),tgt.forEach(t),tAo=r(gxe," (Wav2Vec2 model)"),gxe.forEach(t),aAo=i(O),_1=n(O,"LI",{});var hxe=s(_1);Tfe=n(hxe,"STRONG",{});var agt=s(Tfe);nAo=r(agt,"wav2vec2-conformer"),agt.forEach(t),sAo=r(hxe," \u2014 "),ND=n(hxe,"A",{href:!0});var ngt=s(ND);lAo=r(ngt,"Wav2Vec2ConformerForPreTraining"),ngt.forEach(t),iAo=r(hxe," (Wav2Vec2-Conformer model)"),hxe.forEach(t),dAo=i(O),u1=n(O,"LI",{});var pxe=s(u1);Mfe=n(pxe,"STRONG",{});var sgt=s(Mfe);cAo=r(sgt,"xlm"),sgt.forEach(t),fAo=r(pxe," \u2014 "),qD=n(pxe,"A",{href:!0});var lgt=s(qD);mAo=r(lgt,"XLMWithLMHeadModel"),lgt.forEach(t),gAo=r(pxe," (XLM model)"),pxe.forEach(t),hAo=i(O),b1=n(O,"LI",{});var _xe=s(b1);Efe=n(_xe,"STRONG",{});var igt=s(Efe);pAo=r(igt,"xlm-roberta"),igt.forEach(t),_Ao=r(_xe," \u2014 "),jD=n(_xe,"A",{href:!0});var dgt=s(jD);uAo=r(dgt,"XLMRobertaForMaskedLM"),dgt.forEach(t),bAo=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),vAo=i(O),v1=n(O,"LI",{});var uxe=s(v1);Cfe=n(uxe,"STRONG",{});var cgt=s(Cfe);FAo=r(cgt,"xlm-roberta-xl"),cgt.forEach(t),TAo=r(uxe," \u2014 "),DD=n(uxe,"A",{href:!0});var fgt=s(DD);MAo=r(fgt,"XLMRobertaXLForMaskedLM"),fgt.forEach(t),EAo=r(uxe," (XLM-RoBERTa-XL model)"),uxe.forEach(t),CAo=i(O),F1=n(O,"LI",{});var bxe=s(F1);wfe=n(bxe,"STRONG",{});var mgt=s(wfe);wAo=r(mgt,"xlnet"),mgt.forEach(t),AAo=r(bxe," \u2014 "),GD=n(bxe,"A",{href:!0});var ggt=s(GD);LAo=r(ggt,"XLNetLMHeadModel"),ggt.forEach(t),yAo=r(bxe," (XLNet model)"),bxe.forEach(t),O.forEach(t),xAo=i(na),T1=n(na,"P",{});var vxe=s(T1);$Ao=r(vxe,"The model is set in evaluation mode by default using "),Afe=n(vxe,"CODE",{});var hgt=s(Afe);kAo=r(hgt,"model.eval()"),hgt.forEach(t),SAo=r(vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n(vxe,"CODE",{});var pgt=s(Lfe);RAo=r(pgt,"model.train()"),pgt.forEach(t),vxe.forEach(t),PAo=i(na),T(M1.$$.fragment,na),na.forEach(t),Js.forEach(t),kGe=i(f),Di=n(f,"H2",{class:!0});var NVe=s(Di);E1=n(NVe,"A",{id:!0,class:!0,href:!0});var _gt=s(E1);yfe=n(_gt,"SPAN",{});var ugt=s(yfe);T(nL.$$.fragment,ugt),ugt.forEach(t),_gt.forEach(t),BAo=i(NVe),xfe=n(NVe,"SPAN",{});var bgt=s(xfe);IAo=r(bgt,"AutoModelForCausalLM"),bgt.forEach(t),NVe.forEach(t),SGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(sL.$$.fragment,Ys),NAo=i(Ys),Gi=n(Ys,"P",{});var doe=s(Gi);qAo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OD=n(doe,"A",{href:!0});var vgt=s(OD);jAo=r(vgt,"from_pretrained()"),vgt.forEach(t),DAo=r(doe," class method or the "),VD=n(doe,"A",{href:!0});var Fgt=s(VD);GAo=r(Fgt,"from_config()"),Fgt.forEach(t),OAo=r(doe,` class
method.`),doe.forEach(t),VAo=i(Ys),lL=n(Ys,"P",{});var qVe=s(lL);XAo=r(qVe,"This class cannot be instantiated directly using "),$fe=n(qVe,"CODE",{});var Tgt=s($fe);zAo=r(Tgt,"__init__()"),Tgt.forEach(t),WAo=r(qVe," (throws an error)."),qVe.forEach(t),QAo=i(Ys),lt=n(Ys,"DIV",{class:!0});var xw=s(lt);T(iL.$$.fragment,xw),HAo=i(xw),kfe=n(xw,"P",{});var Mgt=s(kfe);UAo=r(Mgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mgt.forEach(t),JAo=i(xw),Oi=n(xw,"P",{});var coe=s(Oi);YAo=r(coe,`Note:
Loading a model from its configuration file does `),Sfe=n(coe,"STRONG",{});var Egt=s(Sfe);KAo=r(Egt,"not"),Egt.forEach(t),ZAo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(coe,"A",{href:!0});var Cgt=s(XD);e6o=r(Cgt,"from_pretrained()"),Cgt.forEach(t),o6o=r(coe," to load the model weights."),coe.forEach(t),r6o=i(xw),T(C1.$$.fragment,xw),xw.forEach(t),t6o=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(dL.$$.fragment,sa),a6o=i(sa),Rfe=n(sa,"P",{});var wgt=s(Rfe);n6o=r(wgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wgt.forEach(t),s6o=i(sa),Pa=n(sa,"P",{});var $w=s(Pa);l6o=r($w,"The model class to instantiate is selected based on the "),Pfe=n($w,"CODE",{});var Agt=s(Pfe);i6o=r(Agt,"model_type"),Agt.forEach(t),d6o=r($w,` property of the config object (either
passed as an argument or loaded from `),Bfe=n($w,"CODE",{});var Lgt=s(Bfe);c6o=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),f6o=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n($w,"CODE",{});var ygt=s(Ife);m6o=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),g6o=r($w,":"),$w.forEach(t),h6o=i(sa),z=n(sa,"UL",{});var W=s(z);w1=n(W,"LI",{});var Fxe=s(w1);Nfe=n(Fxe,"STRONG",{});var xgt=s(Nfe);p6o=r(xgt,"bart"),xgt.forEach(t),_6o=r(Fxe," \u2014 "),zD=n(Fxe,"A",{href:!0});var $gt=s(zD);u6o=r($gt,"BartForCausalLM"),$gt.forEach(t),b6o=r(Fxe," (BART model)"),Fxe.forEach(t),v6o=i(W),A1=n(W,"LI",{});var Txe=s(A1);qfe=n(Txe,"STRONG",{});var kgt=s(qfe);F6o=r(kgt,"bert"),kgt.forEach(t),T6o=r(Txe," \u2014 "),WD=n(Txe,"A",{href:!0});var Sgt=s(WD);M6o=r(Sgt,"BertLMHeadModel"),Sgt.forEach(t),E6o=r(Txe," (BERT model)"),Txe.forEach(t),C6o=i(W),L1=n(W,"LI",{});var Mxe=s(L1);jfe=n(Mxe,"STRONG",{});var Rgt=s(jfe);w6o=r(Rgt,"bert-generation"),Rgt.forEach(t),A6o=r(Mxe," \u2014 "),QD=n(Mxe,"A",{href:!0});var Pgt=s(QD);L6o=r(Pgt,"BertGenerationDecoder"),Pgt.forEach(t),y6o=r(Mxe," (Bert Generation model)"),Mxe.forEach(t),x6o=i(W),y1=n(W,"LI",{});var Exe=s(y1);Dfe=n(Exe,"STRONG",{});var Bgt=s(Dfe);$6o=r(Bgt,"big_bird"),Bgt.forEach(t),k6o=r(Exe," \u2014 "),HD=n(Exe,"A",{href:!0});var Igt=s(HD);S6o=r(Igt,"BigBirdForCausalLM"),Igt.forEach(t),R6o=r(Exe," (BigBird model)"),Exe.forEach(t),P6o=i(W),x1=n(W,"LI",{});var Cxe=s(x1);Gfe=n(Cxe,"STRONG",{});var Ngt=s(Gfe);B6o=r(Ngt,"bigbird_pegasus"),Ngt.forEach(t),I6o=r(Cxe," \u2014 "),UD=n(Cxe,"A",{href:!0});var qgt=s(UD);N6o=r(qgt,"BigBirdPegasusForCausalLM"),qgt.forEach(t),q6o=r(Cxe," (BigBird-Pegasus model)"),Cxe.forEach(t),j6o=i(W),$1=n(W,"LI",{});var wxe=s($1);Ofe=n(wxe,"STRONG",{});var jgt=s(Ofe);D6o=r(jgt,"blenderbot"),jgt.forEach(t),G6o=r(wxe," \u2014 "),JD=n(wxe,"A",{href:!0});var Dgt=s(JD);O6o=r(Dgt,"BlenderbotForCausalLM"),Dgt.forEach(t),V6o=r(wxe," (Blenderbot model)"),wxe.forEach(t),X6o=i(W),k1=n(W,"LI",{});var Axe=s(k1);Vfe=n(Axe,"STRONG",{});var Ggt=s(Vfe);z6o=r(Ggt,"blenderbot-small"),Ggt.forEach(t),W6o=r(Axe," \u2014 "),YD=n(Axe,"A",{href:!0});var Ogt=s(YD);Q6o=r(Ogt,"BlenderbotSmallForCausalLM"),Ogt.forEach(t),H6o=r(Axe," (BlenderbotSmall model)"),Axe.forEach(t),U6o=i(W),S1=n(W,"LI",{});var Lxe=s(S1);Xfe=n(Lxe,"STRONG",{});var Vgt=s(Xfe);J6o=r(Vgt,"bloom"),Vgt.forEach(t),Y6o=r(Lxe," \u2014 "),KD=n(Lxe,"A",{href:!0});var Xgt=s(KD);K6o=r(Xgt,"BloomForCausalLM"),Xgt.forEach(t),Z6o=r(Lxe," (BLOOM model)"),Lxe.forEach(t),eLo=i(W),R1=n(W,"LI",{});var yxe=s(R1);zfe=n(yxe,"STRONG",{});var zgt=s(zfe);oLo=r(zgt,"camembert"),zgt.forEach(t),rLo=r(yxe," \u2014 "),ZD=n(yxe,"A",{href:!0});var Wgt=s(ZD);tLo=r(Wgt,"CamembertForCausalLM"),Wgt.forEach(t),aLo=r(yxe," (CamemBERT model)"),yxe.forEach(t),nLo=i(W),P1=n(W,"LI",{});var xxe=s(P1);Wfe=n(xxe,"STRONG",{});var Qgt=s(Wfe);sLo=r(Qgt,"ctrl"),Qgt.forEach(t),lLo=r(xxe," \u2014 "),eG=n(xxe,"A",{href:!0});var Hgt=s(eG);iLo=r(Hgt,"CTRLLMHeadModel"),Hgt.forEach(t),dLo=r(xxe," (CTRL model)"),xxe.forEach(t),cLo=i(W),B1=n(W,"LI",{});var $xe=s(B1);Qfe=n($xe,"STRONG",{});var Ugt=s(Qfe);fLo=r(Ugt,"data2vec-text"),Ugt.forEach(t),mLo=r($xe," \u2014 "),oG=n($xe,"A",{href:!0});var Jgt=s(oG);gLo=r(Jgt,"Data2VecTextForCausalLM"),Jgt.forEach(t),hLo=r($xe," (Data2VecText model)"),$xe.forEach(t),pLo=i(W),I1=n(W,"LI",{});var kxe=s(I1);Hfe=n(kxe,"STRONG",{});var Ygt=s(Hfe);_Lo=r(Ygt,"electra"),Ygt.forEach(t),uLo=r(kxe," \u2014 "),rG=n(kxe,"A",{href:!0});var Kgt=s(rG);bLo=r(Kgt,"ElectraForCausalLM"),Kgt.forEach(t),vLo=r(kxe," (ELECTRA model)"),kxe.forEach(t),FLo=i(W),N1=n(W,"LI",{});var Sxe=s(N1);Ufe=n(Sxe,"STRONG",{});var Zgt=s(Ufe);TLo=r(Zgt,"gpt2"),Zgt.forEach(t),MLo=r(Sxe," \u2014 "),tG=n(Sxe,"A",{href:!0});var eht=s(tG);ELo=r(eht,"GPT2LMHeadModel"),eht.forEach(t),CLo=r(Sxe," (OpenAI GPT-2 model)"),Sxe.forEach(t),wLo=i(W),q1=n(W,"LI",{});var Rxe=s(q1);Jfe=n(Rxe,"STRONG",{});var oht=s(Jfe);ALo=r(oht,"gpt_neo"),oht.forEach(t),LLo=r(Rxe," \u2014 "),aG=n(Rxe,"A",{href:!0});var rht=s(aG);yLo=r(rht,"GPTNeoForCausalLM"),rht.forEach(t),xLo=r(Rxe," (GPT Neo model)"),Rxe.forEach(t),$Lo=i(W),j1=n(W,"LI",{});var Pxe=s(j1);Yfe=n(Pxe,"STRONG",{});var tht=s(Yfe);kLo=r(tht,"gpt_neox"),tht.forEach(t),SLo=r(Pxe," \u2014 "),nG=n(Pxe,"A",{href:!0});var aht=s(nG);RLo=r(aht,"GPTNeoXForCausalLM"),aht.forEach(t),PLo=r(Pxe," (GPT NeoX model)"),Pxe.forEach(t),BLo=i(W),D1=n(W,"LI",{});var Bxe=s(D1);Kfe=n(Bxe,"STRONG",{});var nht=s(Kfe);ILo=r(nht,"gptj"),nht.forEach(t),NLo=r(Bxe," \u2014 "),sG=n(Bxe,"A",{href:!0});var sht=s(sG);qLo=r(sht,"GPTJForCausalLM"),sht.forEach(t),jLo=r(Bxe," (GPT-J model)"),Bxe.forEach(t),DLo=i(W),G1=n(W,"LI",{});var Ixe=s(G1);Zfe=n(Ixe,"STRONG",{});var lht=s(Zfe);GLo=r(lht,"marian"),lht.forEach(t),OLo=r(Ixe," \u2014 "),lG=n(Ixe,"A",{href:!0});var iht=s(lG);VLo=r(iht,"MarianForCausalLM"),iht.forEach(t),XLo=r(Ixe," (Marian model)"),Ixe.forEach(t),zLo=i(W),O1=n(W,"LI",{});var Nxe=s(O1);eme=n(Nxe,"STRONG",{});var dht=s(eme);WLo=r(dht,"mbart"),dht.forEach(t),QLo=r(Nxe," \u2014 "),iG=n(Nxe,"A",{href:!0});var cht=s(iG);HLo=r(cht,"MBartForCausalLM"),cht.forEach(t),ULo=r(Nxe," (mBART model)"),Nxe.forEach(t),JLo=i(W),V1=n(W,"LI",{});var qxe=s(V1);ome=n(qxe,"STRONG",{});var fht=s(ome);YLo=r(fht,"megatron-bert"),fht.forEach(t),KLo=r(qxe," \u2014 "),dG=n(qxe,"A",{href:!0});var mht=s(dG);ZLo=r(mht,"MegatronBertForCausalLM"),mht.forEach(t),eyo=r(qxe," (Megatron-BERT model)"),qxe.forEach(t),oyo=i(W),X1=n(W,"LI",{});var jxe=s(X1);rme=n(jxe,"STRONG",{});var ght=s(rme);ryo=r(ght,"openai-gpt"),ght.forEach(t),tyo=r(jxe," \u2014 "),cG=n(jxe,"A",{href:!0});var hht=s(cG);ayo=r(hht,"OpenAIGPTLMHeadModel"),hht.forEach(t),nyo=r(jxe," (OpenAI GPT model)"),jxe.forEach(t),syo=i(W),z1=n(W,"LI",{});var Dxe=s(z1);tme=n(Dxe,"STRONG",{});var pht=s(tme);lyo=r(pht,"opt"),pht.forEach(t),iyo=r(Dxe," \u2014 "),fG=n(Dxe,"A",{href:!0});var _ht=s(fG);dyo=r(_ht,"OPTForCausalLM"),_ht.forEach(t),cyo=r(Dxe," (OPT model)"),Dxe.forEach(t),fyo=i(W),W1=n(W,"LI",{});var Gxe=s(W1);ame=n(Gxe,"STRONG",{});var uht=s(ame);myo=r(uht,"pegasus"),uht.forEach(t),gyo=r(Gxe," \u2014 "),mG=n(Gxe,"A",{href:!0});var bht=s(mG);hyo=r(bht,"PegasusForCausalLM"),bht.forEach(t),pyo=r(Gxe," (Pegasus model)"),Gxe.forEach(t),_yo=i(W),Q1=n(W,"LI",{});var Oxe=s(Q1);nme=n(Oxe,"STRONG",{});var vht=s(nme);uyo=r(vht,"plbart"),vht.forEach(t),byo=r(Oxe," \u2014 "),gG=n(Oxe,"A",{href:!0});var Fht=s(gG);vyo=r(Fht,"PLBartForCausalLM"),Fht.forEach(t),Fyo=r(Oxe," (PLBart model)"),Oxe.forEach(t),Tyo=i(W),H1=n(W,"LI",{});var Vxe=s(H1);sme=n(Vxe,"STRONG",{});var Tht=s(sme);Myo=r(Tht,"prophetnet"),Tht.forEach(t),Eyo=r(Vxe," \u2014 "),hG=n(Vxe,"A",{href:!0});var Mht=s(hG);Cyo=r(Mht,"ProphetNetForCausalLM"),Mht.forEach(t),wyo=r(Vxe," (ProphetNet model)"),Vxe.forEach(t),Ayo=i(W),U1=n(W,"LI",{});var Xxe=s(U1);lme=n(Xxe,"STRONG",{});var Eht=s(lme);Lyo=r(Eht,"qdqbert"),Eht.forEach(t),yyo=r(Xxe," \u2014 "),pG=n(Xxe,"A",{href:!0});var Cht=s(pG);xyo=r(Cht,"QDQBertLMHeadModel"),Cht.forEach(t),$yo=r(Xxe," (QDQBert model)"),Xxe.forEach(t),kyo=i(W),J1=n(W,"LI",{});var zxe=s(J1);ime=n(zxe,"STRONG",{});var wht=s(ime);Syo=r(wht,"reformer"),wht.forEach(t),Ryo=r(zxe," \u2014 "),_G=n(zxe,"A",{href:!0});var Aht=s(_G);Pyo=r(Aht,"ReformerModelWithLMHead"),Aht.forEach(t),Byo=r(zxe," (Reformer model)"),zxe.forEach(t),Iyo=i(W),Y1=n(W,"LI",{});var Wxe=s(Y1);dme=n(Wxe,"STRONG",{});var Lht=s(dme);Nyo=r(Lht,"rembert"),Lht.forEach(t),qyo=r(Wxe," \u2014 "),uG=n(Wxe,"A",{href:!0});var yht=s(uG);jyo=r(yht,"RemBertForCausalLM"),yht.forEach(t),Dyo=r(Wxe," (RemBERT model)"),Wxe.forEach(t),Gyo=i(W),K1=n(W,"LI",{});var Qxe=s(K1);cme=n(Qxe,"STRONG",{});var xht=s(cme);Oyo=r(xht,"roberta"),xht.forEach(t),Vyo=r(Qxe," \u2014 "),bG=n(Qxe,"A",{href:!0});var $ht=s(bG);Xyo=r($ht,"RobertaForCausalLM"),$ht.forEach(t),zyo=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),Wyo=i(W),Z1=n(W,"LI",{});var Hxe=s(Z1);fme=n(Hxe,"STRONG",{});var kht=s(fme);Qyo=r(kht,"roformer"),kht.forEach(t),Hyo=r(Hxe," \u2014 "),vG=n(Hxe,"A",{href:!0});var Sht=s(vG);Uyo=r(Sht,"RoFormerForCausalLM"),Sht.forEach(t),Jyo=r(Hxe," (RoFormer model)"),Hxe.forEach(t),Yyo=i(W),e7=n(W,"LI",{});var Uxe=s(e7);mme=n(Uxe,"STRONG",{});var Rht=s(mme);Kyo=r(Rht,"speech_to_text_2"),Rht.forEach(t),Zyo=r(Uxe," \u2014 "),FG=n(Uxe,"A",{href:!0});var Pht=s(FG);e8o=r(Pht,"Speech2Text2ForCausalLM"),Pht.forEach(t),o8o=r(Uxe," (Speech2Text2 model)"),Uxe.forEach(t),r8o=i(W),o7=n(W,"LI",{});var Jxe=s(o7);gme=n(Jxe,"STRONG",{});var Bht=s(gme);t8o=r(Bht,"transfo-xl"),Bht.forEach(t),a8o=r(Jxe," \u2014 "),TG=n(Jxe,"A",{href:!0});var Iht=s(TG);n8o=r(Iht,"TransfoXLLMHeadModel"),Iht.forEach(t),s8o=r(Jxe," (Transformer-XL model)"),Jxe.forEach(t),l8o=i(W),r7=n(W,"LI",{});var Yxe=s(r7);hme=n(Yxe,"STRONG",{});var Nht=s(hme);i8o=r(Nht,"trocr"),Nht.forEach(t),d8o=r(Yxe," \u2014 "),MG=n(Yxe,"A",{href:!0});var qht=s(MG);c8o=r(qht,"TrOCRForCausalLM"),qht.forEach(t),f8o=r(Yxe," (TrOCR model)"),Yxe.forEach(t),m8o=i(W),t7=n(W,"LI",{});var Kxe=s(t7);pme=n(Kxe,"STRONG",{});var jht=s(pme);g8o=r(jht,"xglm"),jht.forEach(t),h8o=r(Kxe," \u2014 "),EG=n(Kxe,"A",{href:!0});var Dht=s(EG);p8o=r(Dht,"XGLMForCausalLM"),Dht.forEach(t),_8o=r(Kxe," (XGLM model)"),Kxe.forEach(t),u8o=i(W),a7=n(W,"LI",{});var Zxe=s(a7);_me=n(Zxe,"STRONG",{});var Ght=s(_me);b8o=r(Ght,"xlm"),Ght.forEach(t),v8o=r(Zxe," \u2014 "),CG=n(Zxe,"A",{href:!0});var Oht=s(CG);F8o=r(Oht,"XLMWithLMHeadModel"),Oht.forEach(t),T8o=r(Zxe," (XLM model)"),Zxe.forEach(t),M8o=i(W),n7=n(W,"LI",{});var e$e=s(n7);ume=n(e$e,"STRONG",{});var Vht=s(ume);E8o=r(Vht,"xlm-prophetnet"),Vht.forEach(t),C8o=r(e$e," \u2014 "),wG=n(e$e,"A",{href:!0});var Xht=s(wG);w8o=r(Xht,"XLMProphetNetForCausalLM"),Xht.forEach(t),A8o=r(e$e," (XLM-ProphetNet model)"),e$e.forEach(t),L8o=i(W),s7=n(W,"LI",{});var o$e=s(s7);bme=n(o$e,"STRONG",{});var zht=s(bme);y8o=r(zht,"xlm-roberta"),zht.forEach(t),x8o=r(o$e," \u2014 "),AG=n(o$e,"A",{href:!0});var Wht=s(AG);$8o=r(Wht,"XLMRobertaForCausalLM"),Wht.forEach(t),k8o=r(o$e," (XLM-RoBERTa model)"),o$e.forEach(t),S8o=i(W),l7=n(W,"LI",{});var r$e=s(l7);vme=n(r$e,"STRONG",{});var Qht=s(vme);R8o=r(Qht,"xlm-roberta-xl"),Qht.forEach(t),P8o=r(r$e," \u2014 "),LG=n(r$e,"A",{href:!0});var Hht=s(LG);B8o=r(Hht,"XLMRobertaXLForCausalLM"),Hht.forEach(t),I8o=r(r$e," (XLM-RoBERTa-XL model)"),r$e.forEach(t),N8o=i(W),i7=n(W,"LI",{});var t$e=s(i7);Fme=n(t$e,"STRONG",{});var Uht=s(Fme);q8o=r(Uht,"xlnet"),Uht.forEach(t),j8o=r(t$e," \u2014 "),yG=n(t$e,"A",{href:!0});var Jht=s(yG);D8o=r(Jht,"XLNetLMHeadModel"),Jht.forEach(t),G8o=r(t$e," (XLNet model)"),t$e.forEach(t),W.forEach(t),O8o=i(sa),d7=n(sa,"P",{});var a$e=s(d7);V8o=r(a$e,"The model is set in evaluation mode by default using "),Tme=n(a$e,"CODE",{});var Yht=s(Tme);X8o=r(Yht,"model.eval()"),Yht.forEach(t),z8o=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(a$e,"CODE",{});var Kht=s(Mme);W8o=r(Kht,"model.train()"),Kht.forEach(t),a$e.forEach(t),Q8o=i(sa),T(c7.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),RGe=i(f),Vi=n(f,"H2",{class:!0});var jVe=s(Vi);f7=n(jVe,"A",{id:!0,class:!0,href:!0});var Zht=s(f7);Eme=n(Zht,"SPAN",{});var ept=s(Eme);T(cL.$$.fragment,ept),ept.forEach(t),Zht.forEach(t),H8o=i(jVe),Cme=n(jVe,"SPAN",{});var opt=s(Cme);U8o=r(opt,"AutoModelForMaskedLM"),opt.forEach(t),jVe.forEach(t),PGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(fL.$$.fragment,Ks),J8o=i(Ks),Xi=n(Ks,"P",{});var foe=s(Xi);Y8o=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xG=n(foe,"A",{href:!0});var rpt=s(xG);K8o=r(rpt,"from_pretrained()"),rpt.forEach(t),Z8o=r(foe," class method or the "),$G=n(foe,"A",{href:!0});var tpt=s($G);exo=r(tpt,"from_config()"),tpt.forEach(t),oxo=r(foe,` class
method.`),foe.forEach(t),rxo=i(Ks),mL=n(Ks,"P",{});var DVe=s(mL);txo=r(DVe,"This class cannot be instantiated directly using "),wme=n(DVe,"CODE",{});var apt=s(wme);axo=r(apt,"__init__()"),apt.forEach(t),nxo=r(DVe," (throws an error)."),DVe.forEach(t),sxo=i(Ks),it=n(Ks,"DIV",{class:!0});var kw=s(it);T(gL.$$.fragment,kw),lxo=i(kw),Ame=n(kw,"P",{});var npt=s(Ame);ixo=r(npt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),npt.forEach(t),dxo=i(kw),zi=n(kw,"P",{});var moe=s(zi);cxo=r(moe,`Note:
Loading a model from its configuration file does `),Lme=n(moe,"STRONG",{});var spt=s(Lme);fxo=r(spt,"not"),spt.forEach(t),mxo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=n(moe,"A",{href:!0});var lpt=s(kG);gxo=r(lpt,"from_pretrained()"),lpt.forEach(t),hxo=r(moe," to load the model weights."),moe.forEach(t),pxo=i(kw),T(m7.$$.fragment,kw),kw.forEach(t),_xo=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(hL.$$.fragment,la),uxo=i(la),yme=n(la,"P",{});var ipt=s(yme);bxo=r(ipt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ipt.forEach(t),vxo=i(la),Ba=n(la,"P",{});var Sw=s(Ba);Fxo=r(Sw,"The model class to instantiate is selected based on the "),xme=n(Sw,"CODE",{});var dpt=s(xme);Txo=r(dpt,"model_type"),dpt.forEach(t),Mxo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),$me=n(Sw,"CODE",{});var cpt=s($me);Exo=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),Cxo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(Sw,"CODE",{});var fpt=s(kme);wxo=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),Axo=r(Sw,":"),Sw.forEach(t),Lxo=i(la),Q=n(la,"UL",{});var U=s(Q);g7=n(U,"LI",{});var n$e=s(g7);Sme=n(n$e,"STRONG",{});var mpt=s(Sme);yxo=r(mpt,"albert"),mpt.forEach(t),xxo=r(n$e," \u2014 "),SG=n(n$e,"A",{href:!0});var gpt=s(SG);$xo=r(gpt,"AlbertForMaskedLM"),gpt.forEach(t),kxo=r(n$e," (ALBERT model)"),n$e.forEach(t),Sxo=i(U),h7=n(U,"LI",{});var s$e=s(h7);Rme=n(s$e,"STRONG",{});var hpt=s(Rme);Rxo=r(hpt,"bart"),hpt.forEach(t),Pxo=r(s$e," \u2014 "),RG=n(s$e,"A",{href:!0});var ppt=s(RG);Bxo=r(ppt,"BartForConditionalGeneration"),ppt.forEach(t),Ixo=r(s$e," (BART model)"),s$e.forEach(t),Nxo=i(U),p7=n(U,"LI",{});var l$e=s(p7);Pme=n(l$e,"STRONG",{});var _pt=s(Pme);qxo=r(_pt,"bert"),_pt.forEach(t),jxo=r(l$e," \u2014 "),PG=n(l$e,"A",{href:!0});var upt=s(PG);Dxo=r(upt,"BertForMaskedLM"),upt.forEach(t),Gxo=r(l$e," (BERT model)"),l$e.forEach(t),Oxo=i(U),_7=n(U,"LI",{});var i$e=s(_7);Bme=n(i$e,"STRONG",{});var bpt=s(Bme);Vxo=r(bpt,"big_bird"),bpt.forEach(t),Xxo=r(i$e," \u2014 "),BG=n(i$e,"A",{href:!0});var vpt=s(BG);zxo=r(vpt,"BigBirdForMaskedLM"),vpt.forEach(t),Wxo=r(i$e," (BigBird model)"),i$e.forEach(t),Qxo=i(U),u7=n(U,"LI",{});var d$e=s(u7);Ime=n(d$e,"STRONG",{});var Fpt=s(Ime);Hxo=r(Fpt,"camembert"),Fpt.forEach(t),Uxo=r(d$e," \u2014 "),IG=n(d$e,"A",{href:!0});var Tpt=s(IG);Jxo=r(Tpt,"CamembertForMaskedLM"),Tpt.forEach(t),Yxo=r(d$e," (CamemBERT model)"),d$e.forEach(t),Kxo=i(U),b7=n(U,"LI",{});var c$e=s(b7);Nme=n(c$e,"STRONG",{});var Mpt=s(Nme);Zxo=r(Mpt,"convbert"),Mpt.forEach(t),e$o=r(c$e," \u2014 "),NG=n(c$e,"A",{href:!0});var Ept=s(NG);o$o=r(Ept,"ConvBertForMaskedLM"),Ept.forEach(t),r$o=r(c$e," (ConvBERT model)"),c$e.forEach(t),t$o=i(U),v7=n(U,"LI",{});var f$e=s(v7);qme=n(f$e,"STRONG",{});var Cpt=s(qme);a$o=r(Cpt,"data2vec-text"),Cpt.forEach(t),n$o=r(f$e," \u2014 "),qG=n(f$e,"A",{href:!0});var wpt=s(qG);s$o=r(wpt,"Data2VecTextForMaskedLM"),wpt.forEach(t),l$o=r(f$e," (Data2VecText model)"),f$e.forEach(t),i$o=i(U),F7=n(U,"LI",{});var m$e=s(F7);jme=n(m$e,"STRONG",{});var Apt=s(jme);d$o=r(Apt,"deberta"),Apt.forEach(t),c$o=r(m$e," \u2014 "),jG=n(m$e,"A",{href:!0});var Lpt=s(jG);f$o=r(Lpt,"DebertaForMaskedLM"),Lpt.forEach(t),m$o=r(m$e," (DeBERTa model)"),m$e.forEach(t),g$o=i(U),T7=n(U,"LI",{});var g$e=s(T7);Dme=n(g$e,"STRONG",{});var ypt=s(Dme);h$o=r(ypt,"deberta-v2"),ypt.forEach(t),p$o=r(g$e," \u2014 "),DG=n(g$e,"A",{href:!0});var xpt=s(DG);_$o=r(xpt,"DebertaV2ForMaskedLM"),xpt.forEach(t),u$o=r(g$e," (DeBERTa-v2 model)"),g$e.forEach(t),b$o=i(U),M7=n(U,"LI",{});var h$e=s(M7);Gme=n(h$e,"STRONG",{});var $pt=s(Gme);v$o=r($pt,"distilbert"),$pt.forEach(t),F$o=r(h$e," \u2014 "),GG=n(h$e,"A",{href:!0});var kpt=s(GG);T$o=r(kpt,"DistilBertForMaskedLM"),kpt.forEach(t),M$o=r(h$e," (DistilBERT model)"),h$e.forEach(t),E$o=i(U),E7=n(U,"LI",{});var p$e=s(E7);Ome=n(p$e,"STRONG",{});var Spt=s(Ome);C$o=r(Spt,"electra"),Spt.forEach(t),w$o=r(p$e," \u2014 "),OG=n(p$e,"A",{href:!0});var Rpt=s(OG);A$o=r(Rpt,"ElectraForMaskedLM"),Rpt.forEach(t),L$o=r(p$e," (ELECTRA model)"),p$e.forEach(t),y$o=i(U),C7=n(U,"LI",{});var _$e=s(C7);Vme=n(_$e,"STRONG",{});var Ppt=s(Vme);x$o=r(Ppt,"flaubert"),Ppt.forEach(t),$$o=r(_$e," \u2014 "),VG=n(_$e,"A",{href:!0});var Bpt=s(VG);k$o=r(Bpt,"FlaubertWithLMHeadModel"),Bpt.forEach(t),S$o=r(_$e," (FlauBERT model)"),_$e.forEach(t),R$o=i(U),w7=n(U,"LI",{});var u$e=s(w7);Xme=n(u$e,"STRONG",{});var Ipt=s(Xme);P$o=r(Ipt,"fnet"),Ipt.forEach(t),B$o=r(u$e," \u2014 "),XG=n(u$e,"A",{href:!0});var Npt=s(XG);I$o=r(Npt,"FNetForMaskedLM"),Npt.forEach(t),N$o=r(u$e," (FNet model)"),u$e.forEach(t),q$o=i(U),A7=n(U,"LI",{});var b$e=s(A7);zme=n(b$e,"STRONG",{});var qpt=s(zme);j$o=r(qpt,"funnel"),qpt.forEach(t),D$o=r(b$e," \u2014 "),zG=n(b$e,"A",{href:!0});var jpt=s(zG);G$o=r(jpt,"FunnelForMaskedLM"),jpt.forEach(t),O$o=r(b$e," (Funnel Transformer model)"),b$e.forEach(t),V$o=i(U),L7=n(U,"LI",{});var v$e=s(L7);Wme=n(v$e,"STRONG",{});var Dpt=s(Wme);X$o=r(Dpt,"ibert"),Dpt.forEach(t),z$o=r(v$e," \u2014 "),WG=n(v$e,"A",{href:!0});var Gpt=s(WG);W$o=r(Gpt,"IBertForMaskedLM"),Gpt.forEach(t),Q$o=r(v$e," (I-BERT model)"),v$e.forEach(t),H$o=i(U),y7=n(U,"LI",{});var F$e=s(y7);Qme=n(F$e,"STRONG",{});var Opt=s(Qme);U$o=r(Opt,"layoutlm"),Opt.forEach(t),J$o=r(F$e," \u2014 "),QG=n(F$e,"A",{href:!0});var Vpt=s(QG);Y$o=r(Vpt,"LayoutLMForMaskedLM"),Vpt.forEach(t),K$o=r(F$e," (LayoutLM model)"),F$e.forEach(t),Z$o=i(U),x7=n(U,"LI",{});var T$e=s(x7);Hme=n(T$e,"STRONG",{});var Xpt=s(Hme);eko=r(Xpt,"longformer"),Xpt.forEach(t),oko=r(T$e," \u2014 "),HG=n(T$e,"A",{href:!0});var zpt=s(HG);rko=r(zpt,"LongformerForMaskedLM"),zpt.forEach(t),tko=r(T$e," (Longformer model)"),T$e.forEach(t),ako=i(U),$7=n(U,"LI",{});var M$e=s($7);Ume=n(M$e,"STRONG",{});var Wpt=s(Ume);nko=r(Wpt,"luke"),Wpt.forEach(t),sko=r(M$e," \u2014 "),UG=n(M$e,"A",{href:!0});var Qpt=s(UG);lko=r(Qpt,"LukeForMaskedLM"),Qpt.forEach(t),iko=r(M$e," (LUKE model)"),M$e.forEach(t),dko=i(U),k7=n(U,"LI",{});var E$e=s(k7);Jme=n(E$e,"STRONG",{});var Hpt=s(Jme);cko=r(Hpt,"mbart"),Hpt.forEach(t),fko=r(E$e," \u2014 "),JG=n(E$e,"A",{href:!0});var Upt=s(JG);mko=r(Upt,"MBartForConditionalGeneration"),Upt.forEach(t),gko=r(E$e," (mBART model)"),E$e.forEach(t),hko=i(U),S7=n(U,"LI",{});var C$e=s(S7);Yme=n(C$e,"STRONG",{});var Jpt=s(Yme);pko=r(Jpt,"megatron-bert"),Jpt.forEach(t),_ko=r(C$e," \u2014 "),YG=n(C$e,"A",{href:!0});var Ypt=s(YG);uko=r(Ypt,"MegatronBertForMaskedLM"),Ypt.forEach(t),bko=r(C$e," (Megatron-BERT model)"),C$e.forEach(t),vko=i(U),R7=n(U,"LI",{});var w$e=s(R7);Kme=n(w$e,"STRONG",{});var Kpt=s(Kme);Fko=r(Kpt,"mobilebert"),Kpt.forEach(t),Tko=r(w$e," \u2014 "),KG=n(w$e,"A",{href:!0});var Zpt=s(KG);Mko=r(Zpt,"MobileBertForMaskedLM"),Zpt.forEach(t),Eko=r(w$e," (MobileBERT model)"),w$e.forEach(t),Cko=i(U),P7=n(U,"LI",{});var A$e=s(P7);Zme=n(A$e,"STRONG",{});var e_t=s(Zme);wko=r(e_t,"mpnet"),e_t.forEach(t),Ako=r(A$e," \u2014 "),ZG=n(A$e,"A",{href:!0});var o_t=s(ZG);Lko=r(o_t,"MPNetForMaskedLM"),o_t.forEach(t),yko=r(A$e," (MPNet model)"),A$e.forEach(t),xko=i(U),B7=n(U,"LI",{});var L$e=s(B7);ege=n(L$e,"STRONG",{});var r_t=s(ege);$ko=r(r_t,"nystromformer"),r_t.forEach(t),kko=r(L$e," \u2014 "),eO=n(L$e,"A",{href:!0});var t_t=s(eO);Sko=r(t_t,"NystromformerForMaskedLM"),t_t.forEach(t),Rko=r(L$e," (Nystr\xF6mformer model)"),L$e.forEach(t),Pko=i(U),I7=n(U,"LI",{});var y$e=s(I7);oge=n(y$e,"STRONG",{});var a_t=s(oge);Bko=r(a_t,"perceiver"),a_t.forEach(t),Iko=r(y$e," \u2014 "),oO=n(y$e,"A",{href:!0});var n_t=s(oO);Nko=r(n_t,"PerceiverForMaskedLM"),n_t.forEach(t),qko=r(y$e," (Perceiver model)"),y$e.forEach(t),jko=i(U),N7=n(U,"LI",{});var x$e=s(N7);rge=n(x$e,"STRONG",{});var s_t=s(rge);Dko=r(s_t,"qdqbert"),s_t.forEach(t),Gko=r(x$e," \u2014 "),rO=n(x$e,"A",{href:!0});var l_t=s(rO);Oko=r(l_t,"QDQBertForMaskedLM"),l_t.forEach(t),Vko=r(x$e," (QDQBert model)"),x$e.forEach(t),Xko=i(U),q7=n(U,"LI",{});var $$e=s(q7);tge=n($$e,"STRONG",{});var i_t=s(tge);zko=r(i_t,"reformer"),i_t.forEach(t),Wko=r($$e," \u2014 "),tO=n($$e,"A",{href:!0});var d_t=s(tO);Qko=r(d_t,"ReformerForMaskedLM"),d_t.forEach(t),Hko=r($$e," (Reformer model)"),$$e.forEach(t),Uko=i(U),j7=n(U,"LI",{});var k$e=s(j7);age=n(k$e,"STRONG",{});var c_t=s(age);Jko=r(c_t,"rembert"),c_t.forEach(t),Yko=r(k$e," \u2014 "),aO=n(k$e,"A",{href:!0});var f_t=s(aO);Kko=r(f_t,"RemBertForMaskedLM"),f_t.forEach(t),Zko=r(k$e," (RemBERT model)"),k$e.forEach(t),eSo=i(U),D7=n(U,"LI",{});var S$e=s(D7);nge=n(S$e,"STRONG",{});var m_t=s(nge);oSo=r(m_t,"roberta"),m_t.forEach(t),rSo=r(S$e," \u2014 "),nO=n(S$e,"A",{href:!0});var g_t=s(nO);tSo=r(g_t,"RobertaForMaskedLM"),g_t.forEach(t),aSo=r(S$e," (RoBERTa model)"),S$e.forEach(t),nSo=i(U),G7=n(U,"LI",{});var R$e=s(G7);sge=n(R$e,"STRONG",{});var h_t=s(sge);sSo=r(h_t,"roformer"),h_t.forEach(t),lSo=r(R$e," \u2014 "),sO=n(R$e,"A",{href:!0});var p_t=s(sO);iSo=r(p_t,"RoFormerForMaskedLM"),p_t.forEach(t),dSo=r(R$e," (RoFormer model)"),R$e.forEach(t),cSo=i(U),O7=n(U,"LI",{});var P$e=s(O7);lge=n(P$e,"STRONG",{});var __t=s(lge);fSo=r(__t,"squeezebert"),__t.forEach(t),mSo=r(P$e," \u2014 "),lO=n(P$e,"A",{href:!0});var u_t=s(lO);gSo=r(u_t,"SqueezeBertForMaskedLM"),u_t.forEach(t),hSo=r(P$e," (SqueezeBERT model)"),P$e.forEach(t),pSo=i(U),V7=n(U,"LI",{});var B$e=s(V7);ige=n(B$e,"STRONG",{});var b_t=s(ige);_So=r(b_t,"tapas"),b_t.forEach(t),uSo=r(B$e," \u2014 "),iO=n(B$e,"A",{href:!0});var v_t=s(iO);bSo=r(v_t,"TapasForMaskedLM"),v_t.forEach(t),vSo=r(B$e," (TAPAS model)"),B$e.forEach(t),FSo=i(U),X7=n(U,"LI",{});var I$e=s(X7);dge=n(I$e,"STRONG",{});var F_t=s(dge);TSo=r(F_t,"wav2vec2"),F_t.forEach(t),MSo=r(I$e," \u2014 "),cge=n(I$e,"CODE",{});var T_t=s(cge);ESo=r(T_t,"Wav2Vec2ForMaskedLM"),T_t.forEach(t),CSo=r(I$e," (Wav2Vec2 model)"),I$e.forEach(t),wSo=i(U),z7=n(U,"LI",{});var N$e=s(z7);fge=n(N$e,"STRONG",{});var M_t=s(fge);ASo=r(M_t,"xlm"),M_t.forEach(t),LSo=r(N$e," \u2014 "),dO=n(N$e,"A",{href:!0});var E_t=s(dO);ySo=r(E_t,"XLMWithLMHeadModel"),E_t.forEach(t),xSo=r(N$e," (XLM model)"),N$e.forEach(t),$So=i(U),W7=n(U,"LI",{});var q$e=s(W7);mge=n(q$e,"STRONG",{});var C_t=s(mge);kSo=r(C_t,"xlm-roberta"),C_t.forEach(t),SSo=r(q$e," \u2014 "),cO=n(q$e,"A",{href:!0});var w_t=s(cO);RSo=r(w_t,"XLMRobertaForMaskedLM"),w_t.forEach(t),PSo=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),BSo=i(U),Q7=n(U,"LI",{});var j$e=s(Q7);gge=n(j$e,"STRONG",{});var A_t=s(gge);ISo=r(A_t,"xlm-roberta-xl"),A_t.forEach(t),NSo=r(j$e," \u2014 "),fO=n(j$e,"A",{href:!0});var L_t=s(fO);qSo=r(L_t,"XLMRobertaXLForMaskedLM"),L_t.forEach(t),jSo=r(j$e," (XLM-RoBERTa-XL model)"),j$e.forEach(t),DSo=i(U),H7=n(U,"LI",{});var D$e=s(H7);hge=n(D$e,"STRONG",{});var y_t=s(hge);GSo=r(y_t,"yoso"),y_t.forEach(t),OSo=r(D$e," \u2014 "),mO=n(D$e,"A",{href:!0});var x_t=s(mO);VSo=r(x_t,"YosoForMaskedLM"),x_t.forEach(t),XSo=r(D$e," (YOSO model)"),D$e.forEach(t),U.forEach(t),zSo=i(la),U7=n(la,"P",{});var G$e=s(U7);WSo=r(G$e,"The model is set in evaluation mode by default using "),pge=n(G$e,"CODE",{});var $_t=s(pge);QSo=r($_t,"model.eval()"),$_t.forEach(t),HSo=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=n(G$e,"CODE",{});var k_t=s(_ge);USo=r(k_t,"model.train()"),k_t.forEach(t),G$e.forEach(t),JSo=i(la),T(J7.$$.fragment,la),la.forEach(t),Ks.forEach(t),BGe=i(f),Wi=n(f,"H2",{class:!0});var GVe=s(Wi);Y7=n(GVe,"A",{id:!0,class:!0,href:!0});var S_t=s(Y7);uge=n(S_t,"SPAN",{});var R_t=s(uge);T(pL.$$.fragment,R_t),R_t.forEach(t),S_t.forEach(t),YSo=i(GVe),bge=n(GVe,"SPAN",{});var P_t=s(bge);KSo=r(P_t,"AutoModelForSeq2SeqLM"),P_t.forEach(t),GVe.forEach(t),IGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(_L.$$.fragment,Zs),ZSo=i(Zs),Qi=n(Zs,"P",{});var goe=s(Qi);eRo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gO=n(goe,"A",{href:!0});var B_t=s(gO);oRo=r(B_t,"from_pretrained()"),B_t.forEach(t),rRo=r(goe," class method or the "),hO=n(goe,"A",{href:!0});var I_t=s(hO);tRo=r(I_t,"from_config()"),I_t.forEach(t),aRo=r(goe,` class
method.`),goe.forEach(t),nRo=i(Zs),uL=n(Zs,"P",{});var OVe=s(uL);sRo=r(OVe,"This class cannot be instantiated directly using "),vge=n(OVe,"CODE",{});var N_t=s(vge);lRo=r(N_t,"__init__()"),N_t.forEach(t),iRo=r(OVe," (throws an error)."),OVe.forEach(t),dRo=i(Zs),dt=n(Zs,"DIV",{class:!0});var Rw=s(dt);T(bL.$$.fragment,Rw),cRo=i(Rw),Fge=n(Rw,"P",{});var q_t=s(Fge);fRo=r(q_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q_t.forEach(t),mRo=i(Rw),Hi=n(Rw,"P",{});var hoe=s(Hi);gRo=r(hoe,`Note:
Loading a model from its configuration file does `),Tge=n(hoe,"STRONG",{});var j_t=s(Tge);hRo=r(j_t,"not"),j_t.forEach(t),pRo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(hoe,"A",{href:!0});var D_t=s(pO);_Ro=r(D_t,"from_pretrained()"),D_t.forEach(t),uRo=r(hoe," to load the model weights."),hoe.forEach(t),bRo=i(Rw),T(K7.$$.fragment,Rw),Rw.forEach(t),vRo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(vL.$$.fragment,ia),FRo=i(ia),Mge=n(ia,"P",{});var G_t=s(Mge);TRo=r(G_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),G_t.forEach(t),MRo=i(ia),Ia=n(ia,"P",{});var Pw=s(Ia);ERo=r(Pw,"The model class to instantiate is selected based on the "),Ege=n(Pw,"CODE",{});var O_t=s(Ege);CRo=r(O_t,"model_type"),O_t.forEach(t),wRo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Cge=n(Pw,"CODE",{});var V_t=s(Cge);ARo=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),LRo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(Pw,"CODE",{});var X_t=s(wge);yRo=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),xRo=r(Pw,":"),Pw.forEach(t),$Ro=i(ia),pe=n(ia,"UL",{});var ve=s(pe);Z7=n(ve,"LI",{});var O$e=s(Z7);Age=n(O$e,"STRONG",{});var z_t=s(Age);kRo=r(z_t,"bart"),z_t.forEach(t),SRo=r(O$e," \u2014 "),_O=n(O$e,"A",{href:!0});var W_t=s(_O);RRo=r(W_t,"BartForConditionalGeneration"),W_t.forEach(t),PRo=r(O$e," (BART model)"),O$e.forEach(t),BRo=i(ve),e9=n(ve,"LI",{});var V$e=s(e9);Lge=n(V$e,"STRONG",{});var Q_t=s(Lge);IRo=r(Q_t,"bigbird_pegasus"),Q_t.forEach(t),NRo=r(V$e," \u2014 "),uO=n(V$e,"A",{href:!0});var H_t=s(uO);qRo=r(H_t,"BigBirdPegasusForConditionalGeneration"),H_t.forEach(t),jRo=r(V$e," (BigBird-Pegasus model)"),V$e.forEach(t),DRo=i(ve),o9=n(ve,"LI",{});var X$e=s(o9);yge=n(X$e,"STRONG",{});var U_t=s(yge);GRo=r(U_t,"blenderbot"),U_t.forEach(t),ORo=r(X$e," \u2014 "),bO=n(X$e,"A",{href:!0});var J_t=s(bO);VRo=r(J_t,"BlenderbotForConditionalGeneration"),J_t.forEach(t),XRo=r(X$e," (Blenderbot model)"),X$e.forEach(t),zRo=i(ve),r9=n(ve,"LI",{});var z$e=s(r9);xge=n(z$e,"STRONG",{});var Y_t=s(xge);WRo=r(Y_t,"blenderbot-small"),Y_t.forEach(t),QRo=r(z$e," \u2014 "),vO=n(z$e,"A",{href:!0});var K_t=s(vO);HRo=r(K_t,"BlenderbotSmallForConditionalGeneration"),K_t.forEach(t),URo=r(z$e," (BlenderbotSmall model)"),z$e.forEach(t),JRo=i(ve),t9=n(ve,"LI",{});var W$e=s(t9);$ge=n(W$e,"STRONG",{});var Z_t=s($ge);YRo=r(Z_t,"encoder-decoder"),Z_t.forEach(t),KRo=r(W$e," \u2014 "),FO=n(W$e,"A",{href:!0});var eut=s(FO);ZRo=r(eut,"EncoderDecoderModel"),eut.forEach(t),ePo=r(W$e," (Encoder decoder model)"),W$e.forEach(t),oPo=i(ve),a9=n(ve,"LI",{});var Q$e=s(a9);kge=n(Q$e,"STRONG",{});var out=s(kge);rPo=r(out,"fsmt"),out.forEach(t),tPo=r(Q$e," \u2014 "),TO=n(Q$e,"A",{href:!0});var rut=s(TO);aPo=r(rut,"FSMTForConditionalGeneration"),rut.forEach(t),nPo=r(Q$e," (FairSeq Machine-Translation model)"),Q$e.forEach(t),sPo=i(ve),n9=n(ve,"LI",{});var H$e=s(n9);Sge=n(H$e,"STRONG",{});var tut=s(Sge);lPo=r(tut,"led"),tut.forEach(t),iPo=r(H$e," \u2014 "),MO=n(H$e,"A",{href:!0});var aut=s(MO);dPo=r(aut,"LEDForConditionalGeneration"),aut.forEach(t),cPo=r(H$e," (LED model)"),H$e.forEach(t),fPo=i(ve),s9=n(ve,"LI",{});var U$e=s(s9);Rge=n(U$e,"STRONG",{});var nut=s(Rge);mPo=r(nut,"longt5"),nut.forEach(t),gPo=r(U$e," \u2014 "),EO=n(U$e,"A",{href:!0});var sut=s(EO);hPo=r(sut,"LongT5ForConditionalGeneration"),sut.forEach(t),pPo=r(U$e," (LongT5 model)"),U$e.forEach(t),_Po=i(ve),l9=n(ve,"LI",{});var J$e=s(l9);Pge=n(J$e,"STRONG",{});var lut=s(Pge);uPo=r(lut,"m2m_100"),lut.forEach(t),bPo=r(J$e," \u2014 "),CO=n(J$e,"A",{href:!0});var iut=s(CO);vPo=r(iut,"M2M100ForConditionalGeneration"),iut.forEach(t),FPo=r(J$e," (M2M100 model)"),J$e.forEach(t),TPo=i(ve),i9=n(ve,"LI",{});var Y$e=s(i9);Bge=n(Y$e,"STRONG",{});var dut=s(Bge);MPo=r(dut,"marian"),dut.forEach(t),EPo=r(Y$e," \u2014 "),wO=n(Y$e,"A",{href:!0});var cut=s(wO);CPo=r(cut,"MarianMTModel"),cut.forEach(t),wPo=r(Y$e," (Marian model)"),Y$e.forEach(t),APo=i(ve),d9=n(ve,"LI",{});var K$e=s(d9);Ige=n(K$e,"STRONG",{});var fut=s(Ige);LPo=r(fut,"mbart"),fut.forEach(t),yPo=r(K$e," \u2014 "),AO=n(K$e,"A",{href:!0});var mut=s(AO);xPo=r(mut,"MBartForConditionalGeneration"),mut.forEach(t),$Po=r(K$e," (mBART model)"),K$e.forEach(t),kPo=i(ve),c9=n(ve,"LI",{});var Z$e=s(c9);Nge=n(Z$e,"STRONG",{});var gut=s(Nge);SPo=r(gut,"mt5"),gut.forEach(t),RPo=r(Z$e," \u2014 "),LO=n(Z$e,"A",{href:!0});var hut=s(LO);PPo=r(hut,"MT5ForConditionalGeneration"),hut.forEach(t),BPo=r(Z$e," (MT5 model)"),Z$e.forEach(t),IPo=i(ve),f9=n(ve,"LI",{});var eke=s(f9);qge=n(eke,"STRONG",{});var put=s(qge);NPo=r(put,"pegasus"),put.forEach(t),qPo=r(eke," \u2014 "),yO=n(eke,"A",{href:!0});var _ut=s(yO);jPo=r(_ut,"PegasusForConditionalGeneration"),_ut.forEach(t),DPo=r(eke," (Pegasus model)"),eke.forEach(t),GPo=i(ve),m9=n(ve,"LI",{});var oke=s(m9);jge=n(oke,"STRONG",{});var uut=s(jge);OPo=r(uut,"plbart"),uut.forEach(t),VPo=r(oke," \u2014 "),xO=n(oke,"A",{href:!0});var but=s(xO);XPo=r(but,"PLBartForConditionalGeneration"),but.forEach(t),zPo=r(oke," (PLBart model)"),oke.forEach(t),WPo=i(ve),g9=n(ve,"LI",{});var rke=s(g9);Dge=n(rke,"STRONG",{});var vut=s(Dge);QPo=r(vut,"prophetnet"),vut.forEach(t),HPo=r(rke," \u2014 "),$O=n(rke,"A",{href:!0});var Fut=s($O);UPo=r(Fut,"ProphetNetForConditionalGeneration"),Fut.forEach(t),JPo=r(rke," (ProphetNet model)"),rke.forEach(t),YPo=i(ve),h9=n(ve,"LI",{});var tke=s(h9);Gge=n(tke,"STRONG",{});var Tut=s(Gge);KPo=r(Tut,"t5"),Tut.forEach(t),ZPo=r(tke," \u2014 "),kO=n(tke,"A",{href:!0});var Mut=s(kO);eBo=r(Mut,"T5ForConditionalGeneration"),Mut.forEach(t),oBo=r(tke," (T5 model)"),tke.forEach(t),rBo=i(ve),p9=n(ve,"LI",{});var ake=s(p9);Oge=n(ake,"STRONG",{});var Eut=s(Oge);tBo=r(Eut,"xlm-prophetnet"),Eut.forEach(t),aBo=r(ake," \u2014 "),SO=n(ake,"A",{href:!0});var Cut=s(SO);nBo=r(Cut,"XLMProphetNetForConditionalGeneration"),Cut.forEach(t),sBo=r(ake," (XLM-ProphetNet model)"),ake.forEach(t),ve.forEach(t),lBo=i(ia),_9=n(ia,"P",{});var nke=s(_9);iBo=r(nke,"The model is set in evaluation mode by default using "),Vge=n(nke,"CODE",{});var wut=s(Vge);dBo=r(wut,"model.eval()"),wut.forEach(t),cBo=r(nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xge=n(nke,"CODE",{});var Aut=s(Xge);fBo=r(Aut,"model.train()"),Aut.forEach(t),nke.forEach(t),mBo=i(ia),T(u9.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),NGe=i(f),Ui=n(f,"H2",{class:!0});var VVe=s(Ui);b9=n(VVe,"A",{id:!0,class:!0,href:!0});var Lut=s(b9);zge=n(Lut,"SPAN",{});var yut=s(zge);T(FL.$$.fragment,yut),yut.forEach(t),Lut.forEach(t),gBo=i(VVe),Wge=n(VVe,"SPAN",{});var xut=s(Wge);hBo=r(xut,"AutoModelForSequenceClassification"),xut.forEach(t),VVe.forEach(t),qGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(TL.$$.fragment,el),pBo=i(el),Ji=n(el,"P",{});var poe=s(Ji);_Bo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RO=n(poe,"A",{href:!0});var $ut=s(RO);uBo=r($ut,"from_pretrained()"),$ut.forEach(t),bBo=r(poe," class method or the "),PO=n(poe,"A",{href:!0});var kut=s(PO);vBo=r(kut,"from_config()"),kut.forEach(t),FBo=r(poe,` class
method.`),poe.forEach(t),TBo=i(el),ML=n(el,"P",{});var XVe=s(ML);MBo=r(XVe,"This class cannot be instantiated directly using "),Qge=n(XVe,"CODE",{});var Sut=s(Qge);EBo=r(Sut,"__init__()"),Sut.forEach(t),CBo=r(XVe," (throws an error)."),XVe.forEach(t),wBo=i(el),ct=n(el,"DIV",{class:!0});var Bw=s(ct);T(EL.$$.fragment,Bw),ABo=i(Bw),Hge=n(Bw,"P",{});var Rut=s(Hge);LBo=r(Rut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rut.forEach(t),yBo=i(Bw),Yi=n(Bw,"P",{});var _oe=s(Yi);xBo=r(_oe,`Note:
Loading a model from its configuration file does `),Uge=n(_oe,"STRONG",{});var Put=s(Uge);$Bo=r(Put,"not"),Put.forEach(t),kBo=r(_oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=n(_oe,"A",{href:!0});var But=s(BO);SBo=r(But,"from_pretrained()"),But.forEach(t),RBo=r(_oe," to load the model weights."),_oe.forEach(t),PBo=i(Bw),T(v9.$$.fragment,Bw),Bw.forEach(t),BBo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(CL.$$.fragment,da),IBo=i(da),Jge=n(da,"P",{});var Iut=s(Jge);NBo=r(Iut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Iut.forEach(t),qBo=i(da),Na=n(da,"P",{});var Iw=s(Na);jBo=r(Iw,"The model class to instantiate is selected based on the "),Yge=n(Iw,"CODE",{});var Nut=s(Yge);DBo=r(Nut,"model_type"),Nut.forEach(t),GBo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Kge=n(Iw,"CODE",{});var qut=s(Kge);OBo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),VBo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(Iw,"CODE",{});var jut=s(Zge);XBo=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),zBo=r(Iw,":"),Iw.forEach(t),WBo=i(da),N=n(da,"UL",{});var j=s(N);F9=n(j,"LI",{});var ske=s(F9);ehe=n(ske,"STRONG",{});var Dut=s(ehe);QBo=r(Dut,"albert"),Dut.forEach(t),HBo=r(ske," \u2014 "),IO=n(ske,"A",{href:!0});var Gut=s(IO);UBo=r(Gut,"AlbertForSequenceClassification"),Gut.forEach(t),JBo=r(ske," (ALBERT model)"),ske.forEach(t),YBo=i(j),T9=n(j,"LI",{});var lke=s(T9);ohe=n(lke,"STRONG",{});var Out=s(ohe);KBo=r(Out,"bart"),Out.forEach(t),ZBo=r(lke," \u2014 "),NO=n(lke,"A",{href:!0});var Vut=s(NO);eIo=r(Vut,"BartForSequenceClassification"),Vut.forEach(t),oIo=r(lke," (BART model)"),lke.forEach(t),rIo=i(j),M9=n(j,"LI",{});var ike=s(M9);rhe=n(ike,"STRONG",{});var Xut=s(rhe);tIo=r(Xut,"bert"),Xut.forEach(t),aIo=r(ike," \u2014 "),qO=n(ike,"A",{href:!0});var zut=s(qO);nIo=r(zut,"BertForSequenceClassification"),zut.forEach(t),sIo=r(ike," (BERT model)"),ike.forEach(t),lIo=i(j),E9=n(j,"LI",{});var dke=s(E9);the=n(dke,"STRONG",{});var Wut=s(the);iIo=r(Wut,"big_bird"),Wut.forEach(t),dIo=r(dke," \u2014 "),jO=n(dke,"A",{href:!0});var Qut=s(jO);cIo=r(Qut,"BigBirdForSequenceClassification"),Qut.forEach(t),fIo=r(dke," (BigBird model)"),dke.forEach(t),mIo=i(j),C9=n(j,"LI",{});var cke=s(C9);ahe=n(cke,"STRONG",{});var Hut=s(ahe);gIo=r(Hut,"bigbird_pegasus"),Hut.forEach(t),hIo=r(cke," \u2014 "),DO=n(cke,"A",{href:!0});var Uut=s(DO);pIo=r(Uut,"BigBirdPegasusForSequenceClassification"),Uut.forEach(t),_Io=r(cke," (BigBird-Pegasus model)"),cke.forEach(t),uIo=i(j),w9=n(j,"LI",{});var fke=s(w9);nhe=n(fke,"STRONG",{});var Jut=s(nhe);bIo=r(Jut,"bloom"),Jut.forEach(t),vIo=r(fke," \u2014 "),GO=n(fke,"A",{href:!0});var Yut=s(GO);FIo=r(Yut,"BloomForSequenceClassification"),Yut.forEach(t),TIo=r(fke," (BLOOM model)"),fke.forEach(t),MIo=i(j),A9=n(j,"LI",{});var mke=s(A9);she=n(mke,"STRONG",{});var Kut=s(she);EIo=r(Kut,"camembert"),Kut.forEach(t),CIo=r(mke," \u2014 "),OO=n(mke,"A",{href:!0});var Zut=s(OO);wIo=r(Zut,"CamembertForSequenceClassification"),Zut.forEach(t),AIo=r(mke," (CamemBERT model)"),mke.forEach(t),LIo=i(j),L9=n(j,"LI",{});var gke=s(L9);lhe=n(gke,"STRONG",{});var e1t=s(lhe);yIo=r(e1t,"canine"),e1t.forEach(t),xIo=r(gke," \u2014 "),VO=n(gke,"A",{href:!0});var o1t=s(VO);$Io=r(o1t,"CanineForSequenceClassification"),o1t.forEach(t),kIo=r(gke," (CANINE model)"),gke.forEach(t),SIo=i(j),y9=n(j,"LI",{});var hke=s(y9);ihe=n(hke,"STRONG",{});var r1t=s(ihe);RIo=r(r1t,"convbert"),r1t.forEach(t),PIo=r(hke," \u2014 "),XO=n(hke,"A",{href:!0});var t1t=s(XO);BIo=r(t1t,"ConvBertForSequenceClassification"),t1t.forEach(t),IIo=r(hke," (ConvBERT model)"),hke.forEach(t),NIo=i(j),x9=n(j,"LI",{});var pke=s(x9);dhe=n(pke,"STRONG",{});var a1t=s(dhe);qIo=r(a1t,"ctrl"),a1t.forEach(t),jIo=r(pke," \u2014 "),zO=n(pke,"A",{href:!0});var n1t=s(zO);DIo=r(n1t,"CTRLForSequenceClassification"),n1t.forEach(t),GIo=r(pke," (CTRL model)"),pke.forEach(t),OIo=i(j),$9=n(j,"LI",{});var _ke=s($9);che=n(_ke,"STRONG",{});var s1t=s(che);VIo=r(s1t,"data2vec-text"),s1t.forEach(t),XIo=r(_ke," \u2014 "),WO=n(_ke,"A",{href:!0});var l1t=s(WO);zIo=r(l1t,"Data2VecTextForSequenceClassification"),l1t.forEach(t),WIo=r(_ke," (Data2VecText model)"),_ke.forEach(t),QIo=i(j),k9=n(j,"LI",{});var uke=s(k9);fhe=n(uke,"STRONG",{});var i1t=s(fhe);HIo=r(i1t,"deberta"),i1t.forEach(t),UIo=r(uke," \u2014 "),QO=n(uke,"A",{href:!0});var d1t=s(QO);JIo=r(d1t,"DebertaForSequenceClassification"),d1t.forEach(t),YIo=r(uke," (DeBERTa model)"),uke.forEach(t),KIo=i(j),S9=n(j,"LI",{});var bke=s(S9);mhe=n(bke,"STRONG",{});var c1t=s(mhe);ZIo=r(c1t,"deberta-v2"),c1t.forEach(t),eNo=r(bke," \u2014 "),HO=n(bke,"A",{href:!0});var f1t=s(HO);oNo=r(f1t,"DebertaV2ForSequenceClassification"),f1t.forEach(t),rNo=r(bke," (DeBERTa-v2 model)"),bke.forEach(t),tNo=i(j),R9=n(j,"LI",{});var vke=s(R9);ghe=n(vke,"STRONG",{});var m1t=s(ghe);aNo=r(m1t,"distilbert"),m1t.forEach(t),nNo=r(vke," \u2014 "),UO=n(vke,"A",{href:!0});var g1t=s(UO);sNo=r(g1t,"DistilBertForSequenceClassification"),g1t.forEach(t),lNo=r(vke," (DistilBERT model)"),vke.forEach(t),iNo=i(j),P9=n(j,"LI",{});var Fke=s(P9);hhe=n(Fke,"STRONG",{});var h1t=s(hhe);dNo=r(h1t,"electra"),h1t.forEach(t),cNo=r(Fke," \u2014 "),JO=n(Fke,"A",{href:!0});var p1t=s(JO);fNo=r(p1t,"ElectraForSequenceClassification"),p1t.forEach(t),mNo=r(Fke," (ELECTRA model)"),Fke.forEach(t),gNo=i(j),B9=n(j,"LI",{});var Tke=s(B9);phe=n(Tke,"STRONG",{});var _1t=s(phe);hNo=r(_1t,"flaubert"),_1t.forEach(t),pNo=r(Tke," \u2014 "),YO=n(Tke,"A",{href:!0});var u1t=s(YO);_No=r(u1t,"FlaubertForSequenceClassification"),u1t.forEach(t),uNo=r(Tke," (FlauBERT model)"),Tke.forEach(t),bNo=i(j),I9=n(j,"LI",{});var Mke=s(I9);_he=n(Mke,"STRONG",{});var b1t=s(_he);vNo=r(b1t,"fnet"),b1t.forEach(t),FNo=r(Mke," \u2014 "),KO=n(Mke,"A",{href:!0});var v1t=s(KO);TNo=r(v1t,"FNetForSequenceClassification"),v1t.forEach(t),MNo=r(Mke," (FNet model)"),Mke.forEach(t),ENo=i(j),N9=n(j,"LI",{});var Eke=s(N9);uhe=n(Eke,"STRONG",{});var F1t=s(uhe);CNo=r(F1t,"funnel"),F1t.forEach(t),wNo=r(Eke," \u2014 "),ZO=n(Eke,"A",{href:!0});var T1t=s(ZO);ANo=r(T1t,"FunnelForSequenceClassification"),T1t.forEach(t),LNo=r(Eke," (Funnel Transformer model)"),Eke.forEach(t),yNo=i(j),q9=n(j,"LI",{});var Cke=s(q9);bhe=n(Cke,"STRONG",{});var M1t=s(bhe);xNo=r(M1t,"gpt2"),M1t.forEach(t),$No=r(Cke," \u2014 "),eV=n(Cke,"A",{href:!0});var E1t=s(eV);kNo=r(E1t,"GPT2ForSequenceClassification"),E1t.forEach(t),SNo=r(Cke," (OpenAI GPT-2 model)"),Cke.forEach(t),RNo=i(j),j9=n(j,"LI",{});var wke=s(j9);vhe=n(wke,"STRONG",{});var C1t=s(vhe);PNo=r(C1t,"gpt_neo"),C1t.forEach(t),BNo=r(wke," \u2014 "),oV=n(wke,"A",{href:!0});var w1t=s(oV);INo=r(w1t,"GPTNeoForSequenceClassification"),w1t.forEach(t),NNo=r(wke," (GPT Neo model)"),wke.forEach(t),qNo=i(j),D9=n(j,"LI",{});var Ake=s(D9);Fhe=n(Ake,"STRONG",{});var A1t=s(Fhe);jNo=r(A1t,"gptj"),A1t.forEach(t),DNo=r(Ake," \u2014 "),rV=n(Ake,"A",{href:!0});var L1t=s(rV);GNo=r(L1t,"GPTJForSequenceClassification"),L1t.forEach(t),ONo=r(Ake," (GPT-J model)"),Ake.forEach(t),VNo=i(j),G9=n(j,"LI",{});var Lke=s(G9);The=n(Lke,"STRONG",{});var y1t=s(The);XNo=r(y1t,"ibert"),y1t.forEach(t),zNo=r(Lke," \u2014 "),tV=n(Lke,"A",{href:!0});var x1t=s(tV);WNo=r(x1t,"IBertForSequenceClassification"),x1t.forEach(t),QNo=r(Lke," (I-BERT model)"),Lke.forEach(t),HNo=i(j),O9=n(j,"LI",{});var yke=s(O9);Mhe=n(yke,"STRONG",{});var $1t=s(Mhe);UNo=r($1t,"layoutlm"),$1t.forEach(t),JNo=r(yke," \u2014 "),aV=n(yke,"A",{href:!0});var k1t=s(aV);YNo=r(k1t,"LayoutLMForSequenceClassification"),k1t.forEach(t),KNo=r(yke," (LayoutLM model)"),yke.forEach(t),ZNo=i(j),V9=n(j,"LI",{});var xke=s(V9);Ehe=n(xke,"STRONG",{});var S1t=s(Ehe);eqo=r(S1t,"layoutlmv2"),S1t.forEach(t),oqo=r(xke," \u2014 "),nV=n(xke,"A",{href:!0});var R1t=s(nV);rqo=r(R1t,"LayoutLMv2ForSequenceClassification"),R1t.forEach(t),tqo=r(xke," (LayoutLMv2 model)"),xke.forEach(t),aqo=i(j),X9=n(j,"LI",{});var $ke=s(X9);Che=n($ke,"STRONG",{});var P1t=s(Che);nqo=r(P1t,"layoutlmv3"),P1t.forEach(t),sqo=r($ke," \u2014 "),sV=n($ke,"A",{href:!0});var B1t=s(sV);lqo=r(B1t,"LayoutLMv3ForSequenceClassification"),B1t.forEach(t),iqo=r($ke," (LayoutLMv3 model)"),$ke.forEach(t),dqo=i(j),z9=n(j,"LI",{});var kke=s(z9);whe=n(kke,"STRONG",{});var I1t=s(whe);cqo=r(I1t,"led"),I1t.forEach(t),fqo=r(kke," \u2014 "),lV=n(kke,"A",{href:!0});var N1t=s(lV);mqo=r(N1t,"LEDForSequenceClassification"),N1t.forEach(t),gqo=r(kke," (LED model)"),kke.forEach(t),hqo=i(j),W9=n(j,"LI",{});var Ske=s(W9);Ahe=n(Ske,"STRONG",{});var q1t=s(Ahe);pqo=r(q1t,"longformer"),q1t.forEach(t),_qo=r(Ske," \u2014 "),iV=n(Ske,"A",{href:!0});var j1t=s(iV);uqo=r(j1t,"LongformerForSequenceClassification"),j1t.forEach(t),bqo=r(Ske," (Longformer model)"),Ske.forEach(t),vqo=i(j),Q9=n(j,"LI",{});var Rke=s(Q9);Lhe=n(Rke,"STRONG",{});var D1t=s(Lhe);Fqo=r(D1t,"mbart"),D1t.forEach(t),Tqo=r(Rke," \u2014 "),dV=n(Rke,"A",{href:!0});var G1t=s(dV);Mqo=r(G1t,"MBartForSequenceClassification"),G1t.forEach(t),Eqo=r(Rke," (mBART model)"),Rke.forEach(t),Cqo=i(j),H9=n(j,"LI",{});var Pke=s(H9);yhe=n(Pke,"STRONG",{});var O1t=s(yhe);wqo=r(O1t,"megatron-bert"),O1t.forEach(t),Aqo=r(Pke," \u2014 "),cV=n(Pke,"A",{href:!0});var V1t=s(cV);Lqo=r(V1t,"MegatronBertForSequenceClassification"),V1t.forEach(t),yqo=r(Pke," (Megatron-BERT model)"),Pke.forEach(t),xqo=i(j),U9=n(j,"LI",{});var Bke=s(U9);xhe=n(Bke,"STRONG",{});var X1t=s(xhe);$qo=r(X1t,"mobilebert"),X1t.forEach(t),kqo=r(Bke," \u2014 "),fV=n(Bke,"A",{href:!0});var z1t=s(fV);Sqo=r(z1t,"MobileBertForSequenceClassification"),z1t.forEach(t),Rqo=r(Bke," (MobileBERT model)"),Bke.forEach(t),Pqo=i(j),J9=n(j,"LI",{});var Ike=s(J9);$he=n(Ike,"STRONG",{});var W1t=s($he);Bqo=r(W1t,"mpnet"),W1t.forEach(t),Iqo=r(Ike," \u2014 "),mV=n(Ike,"A",{href:!0});var Q1t=s(mV);Nqo=r(Q1t,"MPNetForSequenceClassification"),Q1t.forEach(t),qqo=r(Ike," (MPNet model)"),Ike.forEach(t),jqo=i(j),Y9=n(j,"LI",{});var Nke=s(Y9);khe=n(Nke,"STRONG",{});var H1t=s(khe);Dqo=r(H1t,"nystromformer"),H1t.forEach(t),Gqo=r(Nke," \u2014 "),gV=n(Nke,"A",{href:!0});var U1t=s(gV);Oqo=r(U1t,"NystromformerForSequenceClassification"),U1t.forEach(t),Vqo=r(Nke," (Nystr\xF6mformer model)"),Nke.forEach(t),Xqo=i(j),K9=n(j,"LI",{});var qke=s(K9);She=n(qke,"STRONG",{});var J1t=s(She);zqo=r(J1t,"openai-gpt"),J1t.forEach(t),Wqo=r(qke," \u2014 "),hV=n(qke,"A",{href:!0});var Y1t=s(hV);Qqo=r(Y1t,"OpenAIGPTForSequenceClassification"),Y1t.forEach(t),Hqo=r(qke," (OpenAI GPT model)"),qke.forEach(t),Uqo=i(j),Z9=n(j,"LI",{});var jke=s(Z9);Rhe=n(jke,"STRONG",{});var K1t=s(Rhe);Jqo=r(K1t,"perceiver"),K1t.forEach(t),Yqo=r(jke," \u2014 "),pV=n(jke,"A",{href:!0});var Z1t=s(pV);Kqo=r(Z1t,"PerceiverForSequenceClassification"),Z1t.forEach(t),Zqo=r(jke," (Perceiver model)"),jke.forEach(t),ejo=i(j),eb=n(j,"LI",{});var Dke=s(eb);Phe=n(Dke,"STRONG",{});var e7t=s(Phe);ojo=r(e7t,"plbart"),e7t.forEach(t),rjo=r(Dke," \u2014 "),_V=n(Dke,"A",{href:!0});var o7t=s(_V);tjo=r(o7t,"PLBartForSequenceClassification"),o7t.forEach(t),ajo=r(Dke," (PLBart model)"),Dke.forEach(t),njo=i(j),ob=n(j,"LI",{});var Gke=s(ob);Bhe=n(Gke,"STRONG",{});var r7t=s(Bhe);sjo=r(r7t,"qdqbert"),r7t.forEach(t),ljo=r(Gke," \u2014 "),uV=n(Gke,"A",{href:!0});var t7t=s(uV);ijo=r(t7t,"QDQBertForSequenceClassification"),t7t.forEach(t),djo=r(Gke," (QDQBert model)"),Gke.forEach(t),cjo=i(j),rb=n(j,"LI",{});var Oke=s(rb);Ihe=n(Oke,"STRONG",{});var a7t=s(Ihe);fjo=r(a7t,"reformer"),a7t.forEach(t),mjo=r(Oke," \u2014 "),bV=n(Oke,"A",{href:!0});var n7t=s(bV);gjo=r(n7t,"ReformerForSequenceClassification"),n7t.forEach(t),hjo=r(Oke," (Reformer model)"),Oke.forEach(t),pjo=i(j),tb=n(j,"LI",{});var Vke=s(tb);Nhe=n(Vke,"STRONG",{});var s7t=s(Nhe);_jo=r(s7t,"rembert"),s7t.forEach(t),ujo=r(Vke," \u2014 "),vV=n(Vke,"A",{href:!0});var l7t=s(vV);bjo=r(l7t,"RemBertForSequenceClassification"),l7t.forEach(t),vjo=r(Vke," (RemBERT model)"),Vke.forEach(t),Fjo=i(j),ab=n(j,"LI",{});var Xke=s(ab);qhe=n(Xke,"STRONG",{});var i7t=s(qhe);Tjo=r(i7t,"roberta"),i7t.forEach(t),Mjo=r(Xke," \u2014 "),FV=n(Xke,"A",{href:!0});var d7t=s(FV);Ejo=r(d7t,"RobertaForSequenceClassification"),d7t.forEach(t),Cjo=r(Xke," (RoBERTa model)"),Xke.forEach(t),wjo=i(j),nb=n(j,"LI",{});var zke=s(nb);jhe=n(zke,"STRONG",{});var c7t=s(jhe);Ajo=r(c7t,"roformer"),c7t.forEach(t),Ljo=r(zke," \u2014 "),TV=n(zke,"A",{href:!0});var f7t=s(TV);yjo=r(f7t,"RoFormerForSequenceClassification"),f7t.forEach(t),xjo=r(zke," (RoFormer model)"),zke.forEach(t),$jo=i(j),sb=n(j,"LI",{});var Wke=s(sb);Dhe=n(Wke,"STRONG",{});var m7t=s(Dhe);kjo=r(m7t,"squeezebert"),m7t.forEach(t),Sjo=r(Wke," \u2014 "),MV=n(Wke,"A",{href:!0});var g7t=s(MV);Rjo=r(g7t,"SqueezeBertForSequenceClassification"),g7t.forEach(t),Pjo=r(Wke," (SqueezeBERT model)"),Wke.forEach(t),Bjo=i(j),lb=n(j,"LI",{});var Qke=s(lb);Ghe=n(Qke,"STRONG",{});var h7t=s(Ghe);Ijo=r(h7t,"tapas"),h7t.forEach(t),Njo=r(Qke," \u2014 "),EV=n(Qke,"A",{href:!0});var p7t=s(EV);qjo=r(p7t,"TapasForSequenceClassification"),p7t.forEach(t),jjo=r(Qke," (TAPAS model)"),Qke.forEach(t),Djo=i(j),ib=n(j,"LI",{});var Hke=s(ib);Ohe=n(Hke,"STRONG",{});var _7t=s(Ohe);Gjo=r(_7t,"transfo-xl"),_7t.forEach(t),Ojo=r(Hke," \u2014 "),CV=n(Hke,"A",{href:!0});var u7t=s(CV);Vjo=r(u7t,"TransfoXLForSequenceClassification"),u7t.forEach(t),Xjo=r(Hke," (Transformer-XL model)"),Hke.forEach(t),zjo=i(j),db=n(j,"LI",{});var Uke=s(db);Vhe=n(Uke,"STRONG",{});var b7t=s(Vhe);Wjo=r(b7t,"xlm"),b7t.forEach(t),Qjo=r(Uke," \u2014 "),wV=n(Uke,"A",{href:!0});var v7t=s(wV);Hjo=r(v7t,"XLMForSequenceClassification"),v7t.forEach(t),Ujo=r(Uke," (XLM model)"),Uke.forEach(t),Jjo=i(j),cb=n(j,"LI",{});var Jke=s(cb);Xhe=n(Jke,"STRONG",{});var F7t=s(Xhe);Yjo=r(F7t,"xlm-roberta"),F7t.forEach(t),Kjo=r(Jke," \u2014 "),AV=n(Jke,"A",{href:!0});var T7t=s(AV);Zjo=r(T7t,"XLMRobertaForSequenceClassification"),T7t.forEach(t),eDo=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),oDo=i(j),fb=n(j,"LI",{});var Yke=s(fb);zhe=n(Yke,"STRONG",{});var M7t=s(zhe);rDo=r(M7t,"xlm-roberta-xl"),M7t.forEach(t),tDo=r(Yke," \u2014 "),LV=n(Yke,"A",{href:!0});var E7t=s(LV);aDo=r(E7t,"XLMRobertaXLForSequenceClassification"),E7t.forEach(t),nDo=r(Yke," (XLM-RoBERTa-XL model)"),Yke.forEach(t),sDo=i(j),mb=n(j,"LI",{});var Kke=s(mb);Whe=n(Kke,"STRONG",{});var C7t=s(Whe);lDo=r(C7t,"xlnet"),C7t.forEach(t),iDo=r(Kke," \u2014 "),yV=n(Kke,"A",{href:!0});var w7t=s(yV);dDo=r(w7t,"XLNetForSequenceClassification"),w7t.forEach(t),cDo=r(Kke," (XLNet model)"),Kke.forEach(t),fDo=i(j),gb=n(j,"LI",{});var Zke=s(gb);Qhe=n(Zke,"STRONG",{});var A7t=s(Qhe);mDo=r(A7t,"yoso"),A7t.forEach(t),gDo=r(Zke," \u2014 "),xV=n(Zke,"A",{href:!0});var L7t=s(xV);hDo=r(L7t,"YosoForSequenceClassification"),L7t.forEach(t),pDo=r(Zke," (YOSO model)"),Zke.forEach(t),j.forEach(t),_Do=i(da),hb=n(da,"P",{});var eSe=s(hb);uDo=r(eSe,"The model is set in evaluation mode by default using "),Hhe=n(eSe,"CODE",{});var y7t=s(Hhe);bDo=r(y7t,"model.eval()"),y7t.forEach(t),vDo=r(eSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(eSe,"CODE",{});var x7t=s(Uhe);FDo=r(x7t,"model.train()"),x7t.forEach(t),eSe.forEach(t),TDo=i(da),T(pb.$$.fragment,da),da.forEach(t),el.forEach(t),jGe=i(f),Ki=n(f,"H2",{class:!0});var zVe=s(Ki);_b=n(zVe,"A",{id:!0,class:!0,href:!0});var $7t=s(_b);Jhe=n($7t,"SPAN",{});var k7t=s(Jhe);T(wL.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),MDo=i(zVe),Yhe=n(zVe,"SPAN",{});var S7t=s(Yhe);EDo=r(S7t,"AutoModelForMultipleChoice"),S7t.forEach(t),zVe.forEach(t),DGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(AL.$$.fragment,ol),CDo=i(ol),Zi=n(ol,"P",{});var uoe=s(Zi);wDo=r(uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$V=n(uoe,"A",{href:!0});var R7t=s($V);ADo=r(R7t,"from_pretrained()"),R7t.forEach(t),LDo=r(uoe," class method or the "),kV=n(uoe,"A",{href:!0});var P7t=s(kV);yDo=r(P7t,"from_config()"),P7t.forEach(t),xDo=r(uoe,` class
method.`),uoe.forEach(t),$Do=i(ol),LL=n(ol,"P",{});var WVe=s(LL);kDo=r(WVe,"This class cannot be instantiated directly using "),Khe=n(WVe,"CODE",{});var B7t=s(Khe);SDo=r(B7t,"__init__()"),B7t.forEach(t),RDo=r(WVe," (throws an error)."),WVe.forEach(t),PDo=i(ol),ft=n(ol,"DIV",{class:!0});var Nw=s(ft);T(yL.$$.fragment,Nw),BDo=i(Nw),Zhe=n(Nw,"P",{});var I7t=s(Zhe);IDo=r(I7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I7t.forEach(t),NDo=i(Nw),ed=n(Nw,"P",{});var boe=s(ed);qDo=r(boe,`Note:
Loading a model from its configuration file does `),epe=n(boe,"STRONG",{});var N7t=s(epe);jDo=r(N7t,"not"),N7t.forEach(t),DDo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SV=n(boe,"A",{href:!0});var q7t=s(SV);GDo=r(q7t,"from_pretrained()"),q7t.forEach(t),ODo=r(boe," to load the model weights."),boe.forEach(t),VDo=i(Nw),T(ub.$$.fragment,Nw),Nw.forEach(t),XDo=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(xL.$$.fragment,ca),zDo=i(ca),ope=n(ca,"P",{});var j7t=s(ope);WDo=r(j7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j7t.forEach(t),QDo=i(ca),qa=n(ca,"P",{});var qw=s(qa);HDo=r(qw,"The model class to instantiate is selected based on the "),rpe=n(qw,"CODE",{});var D7t=s(rpe);UDo=r(D7t,"model_type"),D7t.forEach(t),JDo=r(qw,` property of the config object (either
passed as an argument or loaded from `),tpe=n(qw,"CODE",{});var G7t=s(tpe);YDo=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),KDo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(qw,"CODE",{});var O7t=s(ape);ZDo=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),eGo=r(qw,":"),qw.forEach(t),oGo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);bb=n(ee,"LI",{});var oSe=s(bb);npe=n(oSe,"STRONG",{});var V7t=s(npe);rGo=r(V7t,"albert"),V7t.forEach(t),tGo=r(oSe," \u2014 "),RV=n(oSe,"A",{href:!0});var X7t=s(RV);aGo=r(X7t,"AlbertForMultipleChoice"),X7t.forEach(t),nGo=r(oSe," (ALBERT model)"),oSe.forEach(t),sGo=i(ee),vb=n(ee,"LI",{});var rSe=s(vb);spe=n(rSe,"STRONG",{});var z7t=s(spe);lGo=r(z7t,"bert"),z7t.forEach(t),iGo=r(rSe," \u2014 "),PV=n(rSe,"A",{href:!0});var W7t=s(PV);dGo=r(W7t,"BertForMultipleChoice"),W7t.forEach(t),cGo=r(rSe," (BERT model)"),rSe.forEach(t),fGo=i(ee),Fb=n(ee,"LI",{});var tSe=s(Fb);lpe=n(tSe,"STRONG",{});var Q7t=s(lpe);mGo=r(Q7t,"big_bird"),Q7t.forEach(t),gGo=r(tSe," \u2014 "),BV=n(tSe,"A",{href:!0});var H7t=s(BV);hGo=r(H7t,"BigBirdForMultipleChoice"),H7t.forEach(t),pGo=r(tSe," (BigBird model)"),tSe.forEach(t),_Go=i(ee),Tb=n(ee,"LI",{});var aSe=s(Tb);ipe=n(aSe,"STRONG",{});var U7t=s(ipe);uGo=r(U7t,"camembert"),U7t.forEach(t),bGo=r(aSe," \u2014 "),IV=n(aSe,"A",{href:!0});var J7t=s(IV);vGo=r(J7t,"CamembertForMultipleChoice"),J7t.forEach(t),FGo=r(aSe," (CamemBERT model)"),aSe.forEach(t),TGo=i(ee),Mb=n(ee,"LI",{});var nSe=s(Mb);dpe=n(nSe,"STRONG",{});var Y7t=s(dpe);MGo=r(Y7t,"canine"),Y7t.forEach(t),EGo=r(nSe," \u2014 "),NV=n(nSe,"A",{href:!0});var K7t=s(NV);CGo=r(K7t,"CanineForMultipleChoice"),K7t.forEach(t),wGo=r(nSe," (CANINE model)"),nSe.forEach(t),AGo=i(ee),Eb=n(ee,"LI",{});var sSe=s(Eb);cpe=n(sSe,"STRONG",{});var Z7t=s(cpe);LGo=r(Z7t,"convbert"),Z7t.forEach(t),yGo=r(sSe," \u2014 "),qV=n(sSe,"A",{href:!0});var e9t=s(qV);xGo=r(e9t,"ConvBertForMultipleChoice"),e9t.forEach(t),$Go=r(sSe," (ConvBERT model)"),sSe.forEach(t),kGo=i(ee),Cb=n(ee,"LI",{});var lSe=s(Cb);fpe=n(lSe,"STRONG",{});var o9t=s(fpe);SGo=r(o9t,"data2vec-text"),o9t.forEach(t),RGo=r(lSe," \u2014 "),jV=n(lSe,"A",{href:!0});var r9t=s(jV);PGo=r(r9t,"Data2VecTextForMultipleChoice"),r9t.forEach(t),BGo=r(lSe," (Data2VecText model)"),lSe.forEach(t),IGo=i(ee),wb=n(ee,"LI",{});var iSe=s(wb);mpe=n(iSe,"STRONG",{});var t9t=s(mpe);NGo=r(t9t,"deberta-v2"),t9t.forEach(t),qGo=r(iSe," \u2014 "),DV=n(iSe,"A",{href:!0});var a9t=s(DV);jGo=r(a9t,"DebertaV2ForMultipleChoice"),a9t.forEach(t),DGo=r(iSe," (DeBERTa-v2 model)"),iSe.forEach(t),GGo=i(ee),Ab=n(ee,"LI",{});var dSe=s(Ab);gpe=n(dSe,"STRONG",{});var n9t=s(gpe);OGo=r(n9t,"distilbert"),n9t.forEach(t),VGo=r(dSe," \u2014 "),GV=n(dSe,"A",{href:!0});var s9t=s(GV);XGo=r(s9t,"DistilBertForMultipleChoice"),s9t.forEach(t),zGo=r(dSe," (DistilBERT model)"),dSe.forEach(t),WGo=i(ee),Lb=n(ee,"LI",{});var cSe=s(Lb);hpe=n(cSe,"STRONG",{});var l9t=s(hpe);QGo=r(l9t,"electra"),l9t.forEach(t),HGo=r(cSe," \u2014 "),OV=n(cSe,"A",{href:!0});var i9t=s(OV);UGo=r(i9t,"ElectraForMultipleChoice"),i9t.forEach(t),JGo=r(cSe," (ELECTRA model)"),cSe.forEach(t),YGo=i(ee),yb=n(ee,"LI",{});var fSe=s(yb);ppe=n(fSe,"STRONG",{});var d9t=s(ppe);KGo=r(d9t,"flaubert"),d9t.forEach(t),ZGo=r(fSe," \u2014 "),VV=n(fSe,"A",{href:!0});var c9t=s(VV);eOo=r(c9t,"FlaubertForMultipleChoice"),c9t.forEach(t),oOo=r(fSe," (FlauBERT model)"),fSe.forEach(t),rOo=i(ee),xb=n(ee,"LI",{});var mSe=s(xb);_pe=n(mSe,"STRONG",{});var f9t=s(_pe);tOo=r(f9t,"fnet"),f9t.forEach(t),aOo=r(mSe," \u2014 "),XV=n(mSe,"A",{href:!0});var m9t=s(XV);nOo=r(m9t,"FNetForMultipleChoice"),m9t.forEach(t),sOo=r(mSe," (FNet model)"),mSe.forEach(t),lOo=i(ee),$b=n(ee,"LI",{});var gSe=s($b);upe=n(gSe,"STRONG",{});var g9t=s(upe);iOo=r(g9t,"funnel"),g9t.forEach(t),dOo=r(gSe," \u2014 "),zV=n(gSe,"A",{href:!0});var h9t=s(zV);cOo=r(h9t,"FunnelForMultipleChoice"),h9t.forEach(t),fOo=r(gSe," (Funnel Transformer model)"),gSe.forEach(t),mOo=i(ee),kb=n(ee,"LI",{});var hSe=s(kb);bpe=n(hSe,"STRONG",{});var p9t=s(bpe);gOo=r(p9t,"ibert"),p9t.forEach(t),hOo=r(hSe," \u2014 "),WV=n(hSe,"A",{href:!0});var _9t=s(WV);pOo=r(_9t,"IBertForMultipleChoice"),_9t.forEach(t),_Oo=r(hSe," (I-BERT model)"),hSe.forEach(t),uOo=i(ee),Sb=n(ee,"LI",{});var pSe=s(Sb);vpe=n(pSe,"STRONG",{});var u9t=s(vpe);bOo=r(u9t,"longformer"),u9t.forEach(t),vOo=r(pSe," \u2014 "),QV=n(pSe,"A",{href:!0});var b9t=s(QV);FOo=r(b9t,"LongformerForMultipleChoice"),b9t.forEach(t),TOo=r(pSe," (Longformer model)"),pSe.forEach(t),MOo=i(ee),Rb=n(ee,"LI",{});var _Se=s(Rb);Fpe=n(_Se,"STRONG",{});var v9t=s(Fpe);EOo=r(v9t,"megatron-bert"),v9t.forEach(t),COo=r(_Se," \u2014 "),HV=n(_Se,"A",{href:!0});var F9t=s(HV);wOo=r(F9t,"MegatronBertForMultipleChoice"),F9t.forEach(t),AOo=r(_Se," (Megatron-BERT model)"),_Se.forEach(t),LOo=i(ee),Pb=n(ee,"LI",{});var uSe=s(Pb);Tpe=n(uSe,"STRONG",{});var T9t=s(Tpe);yOo=r(T9t,"mobilebert"),T9t.forEach(t),xOo=r(uSe," \u2014 "),UV=n(uSe,"A",{href:!0});var M9t=s(UV);$Oo=r(M9t,"MobileBertForMultipleChoice"),M9t.forEach(t),kOo=r(uSe," (MobileBERT model)"),uSe.forEach(t),SOo=i(ee),Bb=n(ee,"LI",{});var bSe=s(Bb);Mpe=n(bSe,"STRONG",{});var E9t=s(Mpe);ROo=r(E9t,"mpnet"),E9t.forEach(t),POo=r(bSe," \u2014 "),JV=n(bSe,"A",{href:!0});var C9t=s(JV);BOo=r(C9t,"MPNetForMultipleChoice"),C9t.forEach(t),IOo=r(bSe," (MPNet model)"),bSe.forEach(t),NOo=i(ee),Ib=n(ee,"LI",{});var vSe=s(Ib);Epe=n(vSe,"STRONG",{});var w9t=s(Epe);qOo=r(w9t,"nystromformer"),w9t.forEach(t),jOo=r(vSe," \u2014 "),YV=n(vSe,"A",{href:!0});var A9t=s(YV);DOo=r(A9t,"NystromformerForMultipleChoice"),A9t.forEach(t),GOo=r(vSe," (Nystr\xF6mformer model)"),vSe.forEach(t),OOo=i(ee),Nb=n(ee,"LI",{});var FSe=s(Nb);Cpe=n(FSe,"STRONG",{});var L9t=s(Cpe);VOo=r(L9t,"qdqbert"),L9t.forEach(t),XOo=r(FSe," \u2014 "),KV=n(FSe,"A",{href:!0});var y9t=s(KV);zOo=r(y9t,"QDQBertForMultipleChoice"),y9t.forEach(t),WOo=r(FSe," (QDQBert model)"),FSe.forEach(t),QOo=i(ee),qb=n(ee,"LI",{});var TSe=s(qb);wpe=n(TSe,"STRONG",{});var x9t=s(wpe);HOo=r(x9t,"rembert"),x9t.forEach(t),UOo=r(TSe," \u2014 "),ZV=n(TSe,"A",{href:!0});var $9t=s(ZV);JOo=r($9t,"RemBertForMultipleChoice"),$9t.forEach(t),YOo=r(TSe," (RemBERT model)"),TSe.forEach(t),KOo=i(ee),jb=n(ee,"LI",{});var MSe=s(jb);Ape=n(MSe,"STRONG",{});var k9t=s(Ape);ZOo=r(k9t,"roberta"),k9t.forEach(t),eVo=r(MSe," \u2014 "),eX=n(MSe,"A",{href:!0});var S9t=s(eX);oVo=r(S9t,"RobertaForMultipleChoice"),S9t.forEach(t),rVo=r(MSe," (RoBERTa model)"),MSe.forEach(t),tVo=i(ee),Db=n(ee,"LI",{});var ESe=s(Db);Lpe=n(ESe,"STRONG",{});var R9t=s(Lpe);aVo=r(R9t,"roformer"),R9t.forEach(t),nVo=r(ESe," \u2014 "),oX=n(ESe,"A",{href:!0});var P9t=s(oX);sVo=r(P9t,"RoFormerForMultipleChoice"),P9t.forEach(t),lVo=r(ESe," (RoFormer model)"),ESe.forEach(t),iVo=i(ee),Gb=n(ee,"LI",{});var CSe=s(Gb);ype=n(CSe,"STRONG",{});var B9t=s(ype);dVo=r(B9t,"squeezebert"),B9t.forEach(t),cVo=r(CSe," \u2014 "),rX=n(CSe,"A",{href:!0});var I9t=s(rX);fVo=r(I9t,"SqueezeBertForMultipleChoice"),I9t.forEach(t),mVo=r(CSe," (SqueezeBERT model)"),CSe.forEach(t),gVo=i(ee),Ob=n(ee,"LI",{});var wSe=s(Ob);xpe=n(wSe,"STRONG",{});var N9t=s(xpe);hVo=r(N9t,"xlm"),N9t.forEach(t),pVo=r(wSe," \u2014 "),tX=n(wSe,"A",{href:!0});var q9t=s(tX);_Vo=r(q9t,"XLMForMultipleChoice"),q9t.forEach(t),uVo=r(wSe," (XLM model)"),wSe.forEach(t),bVo=i(ee),Vb=n(ee,"LI",{});var ASe=s(Vb);$pe=n(ASe,"STRONG",{});var j9t=s($pe);vVo=r(j9t,"xlm-roberta"),j9t.forEach(t),FVo=r(ASe," \u2014 "),aX=n(ASe,"A",{href:!0});var D9t=s(aX);TVo=r(D9t,"XLMRobertaForMultipleChoice"),D9t.forEach(t),MVo=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),EVo=i(ee),Xb=n(ee,"LI",{});var LSe=s(Xb);kpe=n(LSe,"STRONG",{});var G9t=s(kpe);CVo=r(G9t,"xlm-roberta-xl"),G9t.forEach(t),wVo=r(LSe," \u2014 "),nX=n(LSe,"A",{href:!0});var O9t=s(nX);AVo=r(O9t,"XLMRobertaXLForMultipleChoice"),O9t.forEach(t),LVo=r(LSe," (XLM-RoBERTa-XL model)"),LSe.forEach(t),yVo=i(ee),zb=n(ee,"LI",{});var ySe=s(zb);Spe=n(ySe,"STRONG",{});var V9t=s(Spe);xVo=r(V9t,"xlnet"),V9t.forEach(t),$Vo=r(ySe," \u2014 "),sX=n(ySe,"A",{href:!0});var X9t=s(sX);kVo=r(X9t,"XLNetForMultipleChoice"),X9t.forEach(t),SVo=r(ySe," (XLNet model)"),ySe.forEach(t),RVo=i(ee),Wb=n(ee,"LI",{});var xSe=s(Wb);Rpe=n(xSe,"STRONG",{});var z9t=s(Rpe);PVo=r(z9t,"yoso"),z9t.forEach(t),BVo=r(xSe," \u2014 "),lX=n(xSe,"A",{href:!0});var W9t=s(lX);IVo=r(W9t,"YosoForMultipleChoice"),W9t.forEach(t),NVo=r(xSe," (YOSO model)"),xSe.forEach(t),ee.forEach(t),qVo=i(ca),Qb=n(ca,"P",{});var $Se=s(Qb);jVo=r($Se,"The model is set in evaluation mode by default using "),Ppe=n($Se,"CODE",{});var Q9t=s(Ppe);DVo=r(Q9t,"model.eval()"),Q9t.forEach(t),GVo=r($Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n($Se,"CODE",{});var H9t=s(Bpe);OVo=r(H9t,"model.train()"),H9t.forEach(t),$Se.forEach(t),VVo=i(ca),T(Hb.$$.fragment,ca),ca.forEach(t),ol.forEach(t),GGe=i(f),od=n(f,"H2",{class:!0});var QVe=s(od);Ub=n(QVe,"A",{id:!0,class:!0,href:!0});var U9t=s(Ub);Ipe=n(U9t,"SPAN",{});var J9t=s(Ipe);T($L.$$.fragment,J9t),J9t.forEach(t),U9t.forEach(t),XVo=i(QVe),Npe=n(QVe,"SPAN",{});var Y9t=s(Npe);zVo=r(Y9t,"AutoModelForNextSentencePrediction"),Y9t.forEach(t),QVe.forEach(t),OGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(kL.$$.fragment,rl),WVo=i(rl),rd=n(rl,"P",{});var voe=s(rd);QVo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iX=n(voe,"A",{href:!0});var K9t=s(iX);HVo=r(K9t,"from_pretrained()"),K9t.forEach(t),UVo=r(voe," class method or the "),dX=n(voe,"A",{href:!0});var Z9t=s(dX);JVo=r(Z9t,"from_config()"),Z9t.forEach(t),YVo=r(voe,` class
method.`),voe.forEach(t),KVo=i(rl),SL=n(rl,"P",{});var HVe=s(SL);ZVo=r(HVe,"This class cannot be instantiated directly using "),qpe=n(HVe,"CODE",{});var ebt=s(qpe);eXo=r(ebt,"__init__()"),ebt.forEach(t),oXo=r(HVe," (throws an error)."),HVe.forEach(t),rXo=i(rl),mt=n(rl,"DIV",{class:!0});var jw=s(mt);T(RL.$$.fragment,jw),tXo=i(jw),jpe=n(jw,"P",{});var obt=s(jpe);aXo=r(obt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),obt.forEach(t),nXo=i(jw),td=n(jw,"P",{});var Foe=s(td);sXo=r(Foe,`Note:
Loading a model from its configuration file does `),Dpe=n(Foe,"STRONG",{});var rbt=s(Dpe);lXo=r(rbt,"not"),rbt.forEach(t),iXo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(Foe,"A",{href:!0});var tbt=s(cX);dXo=r(tbt,"from_pretrained()"),tbt.forEach(t),cXo=r(Foe," to load the model weights."),Foe.forEach(t),fXo=i(jw),T(Jb.$$.fragment,jw),jw.forEach(t),mXo=i(rl),to=n(rl,"DIV",{class:!0});var fa=s(to);T(PL.$$.fragment,fa),gXo=i(fa),Gpe=n(fa,"P",{});var abt=s(Gpe);hXo=r(abt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),abt.forEach(t),pXo=i(fa),ja=n(fa,"P",{});var Dw=s(ja);_Xo=r(Dw,"The model class to instantiate is selected based on the "),Ope=n(Dw,"CODE",{});var nbt=s(Ope);uXo=r(nbt,"model_type"),nbt.forEach(t),bXo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(Dw,"CODE",{});var sbt=s(Vpe);vXo=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),FXo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(Dw,"CODE",{});var lbt=s(Xpe);TXo=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),MXo=r(Dw,":"),Dw.forEach(t),EXo=i(fa),Zr=n(fa,"UL",{});var tl=s(Zr);Yb=n(tl,"LI",{});var kSe=s(Yb);zpe=n(kSe,"STRONG",{});var ibt=s(zpe);CXo=r(ibt,"bert"),ibt.forEach(t),wXo=r(kSe," \u2014 "),fX=n(kSe,"A",{href:!0});var dbt=s(fX);AXo=r(dbt,"BertForNextSentencePrediction"),dbt.forEach(t),LXo=r(kSe," (BERT model)"),kSe.forEach(t),yXo=i(tl),Kb=n(tl,"LI",{});var SSe=s(Kb);Wpe=n(SSe,"STRONG",{});var cbt=s(Wpe);xXo=r(cbt,"fnet"),cbt.forEach(t),$Xo=r(SSe," \u2014 "),mX=n(SSe,"A",{href:!0});var fbt=s(mX);kXo=r(fbt,"FNetForNextSentencePrediction"),fbt.forEach(t),SXo=r(SSe," (FNet model)"),SSe.forEach(t),RXo=i(tl),Zb=n(tl,"LI",{});var RSe=s(Zb);Qpe=n(RSe,"STRONG",{});var mbt=s(Qpe);PXo=r(mbt,"megatron-bert"),mbt.forEach(t),BXo=r(RSe," \u2014 "),gX=n(RSe,"A",{href:!0});var gbt=s(gX);IXo=r(gbt,"MegatronBertForNextSentencePrediction"),gbt.forEach(t),NXo=r(RSe," (Megatron-BERT model)"),RSe.forEach(t),qXo=i(tl),e2=n(tl,"LI",{});var PSe=s(e2);Hpe=n(PSe,"STRONG",{});var hbt=s(Hpe);jXo=r(hbt,"mobilebert"),hbt.forEach(t),DXo=r(PSe," \u2014 "),hX=n(PSe,"A",{href:!0});var pbt=s(hX);GXo=r(pbt,"MobileBertForNextSentencePrediction"),pbt.forEach(t),OXo=r(PSe," (MobileBERT model)"),PSe.forEach(t),VXo=i(tl),o2=n(tl,"LI",{});var BSe=s(o2);Upe=n(BSe,"STRONG",{});var _bt=s(Upe);XXo=r(_bt,"qdqbert"),_bt.forEach(t),zXo=r(BSe," \u2014 "),pX=n(BSe,"A",{href:!0});var ubt=s(pX);WXo=r(ubt,"QDQBertForNextSentencePrediction"),ubt.forEach(t),QXo=r(BSe," (QDQBert model)"),BSe.forEach(t),tl.forEach(t),HXo=i(fa),r2=n(fa,"P",{});var ISe=s(r2);UXo=r(ISe,"The model is set in evaluation mode by default using "),Jpe=n(ISe,"CODE",{});var bbt=s(Jpe);JXo=r(bbt,"model.eval()"),bbt.forEach(t),YXo=r(ISe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(ISe,"CODE",{});var vbt=s(Ype);KXo=r(vbt,"model.train()"),vbt.forEach(t),ISe.forEach(t),ZXo=i(fa),T(t2.$$.fragment,fa),fa.forEach(t),rl.forEach(t),VGe=i(f),ad=n(f,"H2",{class:!0});var UVe=s(ad);a2=n(UVe,"A",{id:!0,class:!0,href:!0});var Fbt=s(a2);Kpe=n(Fbt,"SPAN",{});var Tbt=s(Kpe);T(BL.$$.fragment,Tbt),Tbt.forEach(t),Fbt.forEach(t),ezo=i(UVe),Zpe=n(UVe,"SPAN",{});var Mbt=s(Zpe);ozo=r(Mbt,"AutoModelForTokenClassification"),Mbt.forEach(t),UVe.forEach(t),XGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(IL.$$.fragment,al),rzo=i(al),nd=n(al,"P",{});var Toe=s(nd);tzo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_X=n(Toe,"A",{href:!0});var Ebt=s(_X);azo=r(Ebt,"from_pretrained()"),Ebt.forEach(t),nzo=r(Toe," class method or the "),uX=n(Toe,"A",{href:!0});var Cbt=s(uX);szo=r(Cbt,"from_config()"),Cbt.forEach(t),lzo=r(Toe,` class
method.`),Toe.forEach(t),izo=i(al),NL=n(al,"P",{});var JVe=s(NL);dzo=r(JVe,"This class cannot be instantiated directly using "),e_e=n(JVe,"CODE",{});var wbt=s(e_e);czo=r(wbt,"__init__()"),wbt.forEach(t),fzo=r(JVe," (throws an error)."),JVe.forEach(t),mzo=i(al),gt=n(al,"DIV",{class:!0});var Gw=s(gt);T(qL.$$.fragment,Gw),gzo=i(Gw),o_e=n(Gw,"P",{});var Abt=s(o_e);hzo=r(Abt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Abt.forEach(t),pzo=i(Gw),sd=n(Gw,"P",{});var Moe=s(sd);_zo=r(Moe,`Note:
Loading a model from its configuration file does `),r_e=n(Moe,"STRONG",{});var Lbt=s(r_e);uzo=r(Lbt,"not"),Lbt.forEach(t),bzo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(Moe,"A",{href:!0});var ybt=s(bX);vzo=r(ybt,"from_pretrained()"),ybt.forEach(t),Fzo=r(Moe," to load the model weights."),Moe.forEach(t),Tzo=i(Gw),T(n2.$$.fragment,Gw),Gw.forEach(t),Mzo=i(al),ao=n(al,"DIV",{class:!0});var ma=s(ao);T(jL.$$.fragment,ma),Ezo=i(ma),t_e=n(ma,"P",{});var xbt=s(t_e);Czo=r(xbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xbt.forEach(t),wzo=i(ma),Da=n(ma,"P",{});var Ow=s(Da);Azo=r(Ow,"The model class to instantiate is selected based on the "),a_e=n(Ow,"CODE",{});var $bt=s(a_e);Lzo=r($bt,"model_type"),$bt.forEach(t),yzo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),n_e=n(Ow,"CODE",{});var kbt=s(n_e);xzo=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),$zo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(Ow,"CODE",{});var Sbt=s(s_e);kzo=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),Szo=r(Ow,":"),Ow.forEach(t),Rzo=i(ma),H=n(ma,"UL",{});var J=s(H);s2=n(J,"LI",{});var NSe=s(s2);l_e=n(NSe,"STRONG",{});var Rbt=s(l_e);Pzo=r(Rbt,"albert"),Rbt.forEach(t),Bzo=r(NSe," \u2014 "),vX=n(NSe,"A",{href:!0});var Pbt=s(vX);Izo=r(Pbt,"AlbertForTokenClassification"),Pbt.forEach(t),Nzo=r(NSe," (ALBERT model)"),NSe.forEach(t),qzo=i(J),l2=n(J,"LI",{});var qSe=s(l2);i_e=n(qSe,"STRONG",{});var Bbt=s(i_e);jzo=r(Bbt,"bert"),Bbt.forEach(t),Dzo=r(qSe," \u2014 "),FX=n(qSe,"A",{href:!0});var Ibt=s(FX);Gzo=r(Ibt,"BertForTokenClassification"),Ibt.forEach(t),Ozo=r(qSe," (BERT model)"),qSe.forEach(t),Vzo=i(J),i2=n(J,"LI",{});var jSe=s(i2);d_e=n(jSe,"STRONG",{});var Nbt=s(d_e);Xzo=r(Nbt,"big_bird"),Nbt.forEach(t),zzo=r(jSe," \u2014 "),TX=n(jSe,"A",{href:!0});var qbt=s(TX);Wzo=r(qbt,"BigBirdForTokenClassification"),qbt.forEach(t),Qzo=r(jSe," (BigBird model)"),jSe.forEach(t),Hzo=i(J),d2=n(J,"LI",{});var DSe=s(d2);c_e=n(DSe,"STRONG",{});var jbt=s(c_e);Uzo=r(jbt,"bloom"),jbt.forEach(t),Jzo=r(DSe," \u2014 "),MX=n(DSe,"A",{href:!0});var Dbt=s(MX);Yzo=r(Dbt,"BloomForTokenClassification"),Dbt.forEach(t),Kzo=r(DSe," (BLOOM model)"),DSe.forEach(t),Zzo=i(J),c2=n(J,"LI",{});var GSe=s(c2);f_e=n(GSe,"STRONG",{});var Gbt=s(f_e);eWo=r(Gbt,"camembert"),Gbt.forEach(t),oWo=r(GSe," \u2014 "),EX=n(GSe,"A",{href:!0});var Obt=s(EX);rWo=r(Obt,"CamembertForTokenClassification"),Obt.forEach(t),tWo=r(GSe," (CamemBERT model)"),GSe.forEach(t),aWo=i(J),f2=n(J,"LI",{});var OSe=s(f2);m_e=n(OSe,"STRONG",{});var Vbt=s(m_e);nWo=r(Vbt,"canine"),Vbt.forEach(t),sWo=r(OSe," \u2014 "),CX=n(OSe,"A",{href:!0});var Xbt=s(CX);lWo=r(Xbt,"CanineForTokenClassification"),Xbt.forEach(t),iWo=r(OSe," (CANINE model)"),OSe.forEach(t),dWo=i(J),m2=n(J,"LI",{});var VSe=s(m2);g_e=n(VSe,"STRONG",{});var zbt=s(g_e);cWo=r(zbt,"convbert"),zbt.forEach(t),fWo=r(VSe," \u2014 "),wX=n(VSe,"A",{href:!0});var Wbt=s(wX);mWo=r(Wbt,"ConvBertForTokenClassification"),Wbt.forEach(t),gWo=r(VSe," (ConvBERT model)"),VSe.forEach(t),hWo=i(J),g2=n(J,"LI",{});var XSe=s(g2);h_e=n(XSe,"STRONG",{});var Qbt=s(h_e);pWo=r(Qbt,"data2vec-text"),Qbt.forEach(t),_Wo=r(XSe," \u2014 "),AX=n(XSe,"A",{href:!0});var Hbt=s(AX);uWo=r(Hbt,"Data2VecTextForTokenClassification"),Hbt.forEach(t),bWo=r(XSe," (Data2VecText model)"),XSe.forEach(t),vWo=i(J),h2=n(J,"LI",{});var zSe=s(h2);p_e=n(zSe,"STRONG",{});var Ubt=s(p_e);FWo=r(Ubt,"deberta"),Ubt.forEach(t),TWo=r(zSe," \u2014 "),LX=n(zSe,"A",{href:!0});var Jbt=s(LX);MWo=r(Jbt,"DebertaForTokenClassification"),Jbt.forEach(t),EWo=r(zSe," (DeBERTa model)"),zSe.forEach(t),CWo=i(J),p2=n(J,"LI",{});var WSe=s(p2);__e=n(WSe,"STRONG",{});var Ybt=s(__e);wWo=r(Ybt,"deberta-v2"),Ybt.forEach(t),AWo=r(WSe," \u2014 "),yX=n(WSe,"A",{href:!0});var Kbt=s(yX);LWo=r(Kbt,"DebertaV2ForTokenClassification"),Kbt.forEach(t),yWo=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),xWo=i(J),_2=n(J,"LI",{});var QSe=s(_2);u_e=n(QSe,"STRONG",{});var Zbt=s(u_e);$Wo=r(Zbt,"distilbert"),Zbt.forEach(t),kWo=r(QSe," \u2014 "),xX=n(QSe,"A",{href:!0});var e2t=s(xX);SWo=r(e2t,"DistilBertForTokenClassification"),e2t.forEach(t),RWo=r(QSe," (DistilBERT model)"),QSe.forEach(t),PWo=i(J),u2=n(J,"LI",{});var HSe=s(u2);b_e=n(HSe,"STRONG",{});var o2t=s(b_e);BWo=r(o2t,"electra"),o2t.forEach(t),IWo=r(HSe," \u2014 "),$X=n(HSe,"A",{href:!0});var r2t=s($X);NWo=r(r2t,"ElectraForTokenClassification"),r2t.forEach(t),qWo=r(HSe," (ELECTRA model)"),HSe.forEach(t),jWo=i(J),b2=n(J,"LI",{});var USe=s(b2);v_e=n(USe,"STRONG",{});var t2t=s(v_e);DWo=r(t2t,"flaubert"),t2t.forEach(t),GWo=r(USe," \u2014 "),kX=n(USe,"A",{href:!0});var a2t=s(kX);OWo=r(a2t,"FlaubertForTokenClassification"),a2t.forEach(t),VWo=r(USe," (FlauBERT model)"),USe.forEach(t),XWo=i(J),v2=n(J,"LI",{});var JSe=s(v2);F_e=n(JSe,"STRONG",{});var n2t=s(F_e);zWo=r(n2t,"fnet"),n2t.forEach(t),WWo=r(JSe," \u2014 "),SX=n(JSe,"A",{href:!0});var s2t=s(SX);QWo=r(s2t,"FNetForTokenClassification"),s2t.forEach(t),HWo=r(JSe," (FNet model)"),JSe.forEach(t),UWo=i(J),F2=n(J,"LI",{});var YSe=s(F2);T_e=n(YSe,"STRONG",{});var l2t=s(T_e);JWo=r(l2t,"funnel"),l2t.forEach(t),YWo=r(YSe," \u2014 "),RX=n(YSe,"A",{href:!0});var i2t=s(RX);KWo=r(i2t,"FunnelForTokenClassification"),i2t.forEach(t),ZWo=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),eQo=i(J),T2=n(J,"LI",{});var KSe=s(T2);M_e=n(KSe,"STRONG",{});var d2t=s(M_e);oQo=r(d2t,"gpt2"),d2t.forEach(t),rQo=r(KSe," \u2014 "),PX=n(KSe,"A",{href:!0});var c2t=s(PX);tQo=r(c2t,"GPT2ForTokenClassification"),c2t.forEach(t),aQo=r(KSe," (OpenAI GPT-2 model)"),KSe.forEach(t),nQo=i(J),M2=n(J,"LI",{});var ZSe=s(M2);E_e=n(ZSe,"STRONG",{});var f2t=s(E_e);sQo=r(f2t,"ibert"),f2t.forEach(t),lQo=r(ZSe," \u2014 "),BX=n(ZSe,"A",{href:!0});var m2t=s(BX);iQo=r(m2t,"IBertForTokenClassification"),m2t.forEach(t),dQo=r(ZSe," (I-BERT model)"),ZSe.forEach(t),cQo=i(J),E2=n(J,"LI",{});var eRe=s(E2);C_e=n(eRe,"STRONG",{});var g2t=s(C_e);fQo=r(g2t,"layoutlm"),g2t.forEach(t),mQo=r(eRe," \u2014 "),IX=n(eRe,"A",{href:!0});var h2t=s(IX);gQo=r(h2t,"LayoutLMForTokenClassification"),h2t.forEach(t),hQo=r(eRe," (LayoutLM model)"),eRe.forEach(t),pQo=i(J),C2=n(J,"LI",{});var oRe=s(C2);w_e=n(oRe,"STRONG",{});var p2t=s(w_e);_Qo=r(p2t,"layoutlmv2"),p2t.forEach(t),uQo=r(oRe," \u2014 "),NX=n(oRe,"A",{href:!0});var _2t=s(NX);bQo=r(_2t,"LayoutLMv2ForTokenClassification"),_2t.forEach(t),vQo=r(oRe," (LayoutLMv2 model)"),oRe.forEach(t),FQo=i(J),w2=n(J,"LI",{});var rRe=s(w2);A_e=n(rRe,"STRONG",{});var u2t=s(A_e);TQo=r(u2t,"layoutlmv3"),u2t.forEach(t),MQo=r(rRe," \u2014 "),qX=n(rRe,"A",{href:!0});var b2t=s(qX);EQo=r(b2t,"LayoutLMv3ForTokenClassification"),b2t.forEach(t),CQo=r(rRe," (LayoutLMv3 model)"),rRe.forEach(t),wQo=i(J),A2=n(J,"LI",{});var tRe=s(A2);L_e=n(tRe,"STRONG",{});var v2t=s(L_e);AQo=r(v2t,"longformer"),v2t.forEach(t),LQo=r(tRe," \u2014 "),jX=n(tRe,"A",{href:!0});var F2t=s(jX);yQo=r(F2t,"LongformerForTokenClassification"),F2t.forEach(t),xQo=r(tRe," (Longformer model)"),tRe.forEach(t),$Qo=i(J),L2=n(J,"LI",{});var aRe=s(L2);y_e=n(aRe,"STRONG",{});var T2t=s(y_e);kQo=r(T2t,"megatron-bert"),T2t.forEach(t),SQo=r(aRe," \u2014 "),DX=n(aRe,"A",{href:!0});var M2t=s(DX);RQo=r(M2t,"MegatronBertForTokenClassification"),M2t.forEach(t),PQo=r(aRe," (Megatron-BERT model)"),aRe.forEach(t),BQo=i(J),y2=n(J,"LI",{});var nRe=s(y2);x_e=n(nRe,"STRONG",{});var E2t=s(x_e);IQo=r(E2t,"mobilebert"),E2t.forEach(t),NQo=r(nRe," \u2014 "),GX=n(nRe,"A",{href:!0});var C2t=s(GX);qQo=r(C2t,"MobileBertForTokenClassification"),C2t.forEach(t),jQo=r(nRe," (MobileBERT model)"),nRe.forEach(t),DQo=i(J),x2=n(J,"LI",{});var sRe=s(x2);$_e=n(sRe,"STRONG",{});var w2t=s($_e);GQo=r(w2t,"mpnet"),w2t.forEach(t),OQo=r(sRe," \u2014 "),OX=n(sRe,"A",{href:!0});var A2t=s(OX);VQo=r(A2t,"MPNetForTokenClassification"),A2t.forEach(t),XQo=r(sRe," (MPNet model)"),sRe.forEach(t),zQo=i(J),$2=n(J,"LI",{});var lRe=s($2);k_e=n(lRe,"STRONG",{});var L2t=s(k_e);WQo=r(L2t,"nystromformer"),L2t.forEach(t),QQo=r(lRe," \u2014 "),VX=n(lRe,"A",{href:!0});var y2t=s(VX);HQo=r(y2t,"NystromformerForTokenClassification"),y2t.forEach(t),UQo=r(lRe," (Nystr\xF6mformer model)"),lRe.forEach(t),JQo=i(J),k2=n(J,"LI",{});var iRe=s(k2);S_e=n(iRe,"STRONG",{});var x2t=s(S_e);YQo=r(x2t,"qdqbert"),x2t.forEach(t),KQo=r(iRe," \u2014 "),XX=n(iRe,"A",{href:!0});var $2t=s(XX);ZQo=r($2t,"QDQBertForTokenClassification"),$2t.forEach(t),eHo=r(iRe," (QDQBert model)"),iRe.forEach(t),oHo=i(J),S2=n(J,"LI",{});var dRe=s(S2);R_e=n(dRe,"STRONG",{});var k2t=s(R_e);rHo=r(k2t,"rembert"),k2t.forEach(t),tHo=r(dRe," \u2014 "),zX=n(dRe,"A",{href:!0});var S2t=s(zX);aHo=r(S2t,"RemBertForTokenClassification"),S2t.forEach(t),nHo=r(dRe," (RemBERT model)"),dRe.forEach(t),sHo=i(J),R2=n(J,"LI",{});var cRe=s(R2);P_e=n(cRe,"STRONG",{});var R2t=s(P_e);lHo=r(R2t,"roberta"),R2t.forEach(t),iHo=r(cRe," \u2014 "),WX=n(cRe,"A",{href:!0});var P2t=s(WX);dHo=r(P2t,"RobertaForTokenClassification"),P2t.forEach(t),cHo=r(cRe," (RoBERTa model)"),cRe.forEach(t),fHo=i(J),P2=n(J,"LI",{});var fRe=s(P2);B_e=n(fRe,"STRONG",{});var B2t=s(B_e);mHo=r(B2t,"roformer"),B2t.forEach(t),gHo=r(fRe," \u2014 "),QX=n(fRe,"A",{href:!0});var I2t=s(QX);hHo=r(I2t,"RoFormerForTokenClassification"),I2t.forEach(t),pHo=r(fRe," (RoFormer model)"),fRe.forEach(t),_Ho=i(J),B2=n(J,"LI",{});var mRe=s(B2);I_e=n(mRe,"STRONG",{});var N2t=s(I_e);uHo=r(N2t,"squeezebert"),N2t.forEach(t),bHo=r(mRe," \u2014 "),HX=n(mRe,"A",{href:!0});var q2t=s(HX);vHo=r(q2t,"SqueezeBertForTokenClassification"),q2t.forEach(t),FHo=r(mRe," (SqueezeBERT model)"),mRe.forEach(t),THo=i(J),I2=n(J,"LI",{});var gRe=s(I2);N_e=n(gRe,"STRONG",{});var j2t=s(N_e);MHo=r(j2t,"xlm"),j2t.forEach(t),EHo=r(gRe," \u2014 "),UX=n(gRe,"A",{href:!0});var D2t=s(UX);CHo=r(D2t,"XLMForTokenClassification"),D2t.forEach(t),wHo=r(gRe," (XLM model)"),gRe.forEach(t),AHo=i(J),N2=n(J,"LI",{});var hRe=s(N2);q_e=n(hRe,"STRONG",{});var G2t=s(q_e);LHo=r(G2t,"xlm-roberta"),G2t.forEach(t),yHo=r(hRe," \u2014 "),JX=n(hRe,"A",{href:!0});var O2t=s(JX);xHo=r(O2t,"XLMRobertaForTokenClassification"),O2t.forEach(t),$Ho=r(hRe," (XLM-RoBERTa model)"),hRe.forEach(t),kHo=i(J),q2=n(J,"LI",{});var pRe=s(q2);j_e=n(pRe,"STRONG",{});var V2t=s(j_e);SHo=r(V2t,"xlm-roberta-xl"),V2t.forEach(t),RHo=r(pRe," \u2014 "),YX=n(pRe,"A",{href:!0});var X2t=s(YX);PHo=r(X2t,"XLMRobertaXLForTokenClassification"),X2t.forEach(t),BHo=r(pRe," (XLM-RoBERTa-XL model)"),pRe.forEach(t),IHo=i(J),j2=n(J,"LI",{});var _Re=s(j2);D_e=n(_Re,"STRONG",{});var z2t=s(D_e);NHo=r(z2t,"xlnet"),z2t.forEach(t),qHo=r(_Re," \u2014 "),KX=n(_Re,"A",{href:!0});var W2t=s(KX);jHo=r(W2t,"XLNetForTokenClassification"),W2t.forEach(t),DHo=r(_Re," (XLNet model)"),_Re.forEach(t),GHo=i(J),D2=n(J,"LI",{});var uRe=s(D2);G_e=n(uRe,"STRONG",{});var Q2t=s(G_e);OHo=r(Q2t,"yoso"),Q2t.forEach(t),VHo=r(uRe," \u2014 "),ZX=n(uRe,"A",{href:!0});var H2t=s(ZX);XHo=r(H2t,"YosoForTokenClassification"),H2t.forEach(t),zHo=r(uRe," (YOSO model)"),uRe.forEach(t),J.forEach(t),WHo=i(ma),G2=n(ma,"P",{});var bRe=s(G2);QHo=r(bRe,"The model is set in evaluation mode by default using "),O_e=n(bRe,"CODE",{});var U2t=s(O_e);HHo=r(U2t,"model.eval()"),U2t.forEach(t),UHo=r(bRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=n(bRe,"CODE",{});var J2t=s(V_e);JHo=r(J2t,"model.train()"),J2t.forEach(t),bRe.forEach(t),YHo=i(ma),T(O2.$$.fragment,ma),ma.forEach(t),al.forEach(t),zGe=i(f),ld=n(f,"H2",{class:!0});var YVe=s(ld);V2=n(YVe,"A",{id:!0,class:!0,href:!0});var Y2t=s(V2);X_e=n(Y2t,"SPAN",{});var K2t=s(X_e);T(DL.$$.fragment,K2t),K2t.forEach(t),Y2t.forEach(t),KHo=i(YVe),z_e=n(YVe,"SPAN",{});var Z2t=s(z_e);ZHo=r(Z2t,"AutoModelForQuestionAnswering"),Z2t.forEach(t),YVe.forEach(t),WGe=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(GL.$$.fragment,nl),eUo=i(nl),id=n(nl,"P",{});var Eoe=s(id);oUo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ez=n(Eoe,"A",{href:!0});var evt=s(ez);rUo=r(evt,"from_pretrained()"),evt.forEach(t),tUo=r(Eoe," class method or the "),oz=n(Eoe,"A",{href:!0});var ovt=s(oz);aUo=r(ovt,"from_config()"),ovt.forEach(t),nUo=r(Eoe,` class
method.`),Eoe.forEach(t),sUo=i(nl),OL=n(nl,"P",{});var KVe=s(OL);lUo=r(KVe,"This class cannot be instantiated directly using "),W_e=n(KVe,"CODE",{});var rvt=s(W_e);iUo=r(rvt,"__init__()"),rvt.forEach(t),dUo=r(KVe," (throws an error)."),KVe.forEach(t),cUo=i(nl),ht=n(nl,"DIV",{class:!0});var Vw=s(ht);T(VL.$$.fragment,Vw),fUo=i(Vw),Q_e=n(Vw,"P",{});var tvt=s(Q_e);mUo=r(tvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tvt.forEach(t),gUo=i(Vw),dd=n(Vw,"P",{});var Coe=s(dd);hUo=r(Coe,`Note:
Loading a model from its configuration file does `),H_e=n(Coe,"STRONG",{});var avt=s(H_e);pUo=r(avt,"not"),avt.forEach(t),_Uo=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(Coe,"A",{href:!0});var nvt=s(rz);uUo=r(nvt,"from_pretrained()"),nvt.forEach(t),bUo=r(Coe," to load the model weights."),Coe.forEach(t),vUo=i(Vw),T(X2.$$.fragment,Vw),Vw.forEach(t),FUo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(XL.$$.fragment,ga),TUo=i(ga),U_e=n(ga,"P",{});var svt=s(U_e);MUo=r(svt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),svt.forEach(t),EUo=i(ga),Ga=n(ga,"P",{});var Xw=s(Ga);CUo=r(Xw,"The model class to instantiate is selected based on the "),J_e=n(Xw,"CODE",{});var lvt=s(J_e);wUo=r(lvt,"model_type"),lvt.forEach(t),AUo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(Xw,"CODE",{});var ivt=s(Y_e);LUo=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),yUo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(Xw,"CODE",{});var dvt=s(K_e);xUo=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),$Uo=r(Xw,":"),Xw.forEach(t),kUo=i(ga),V=n(ga,"UL",{});var X=s(V);z2=n(X,"LI",{});var vRe=s(z2);Z_e=n(vRe,"STRONG",{});var cvt=s(Z_e);SUo=r(cvt,"albert"),cvt.forEach(t),RUo=r(vRe," \u2014 "),tz=n(vRe,"A",{href:!0});var fvt=s(tz);PUo=r(fvt,"AlbertForQuestionAnswering"),fvt.forEach(t),BUo=r(vRe," (ALBERT model)"),vRe.forEach(t),IUo=i(X),W2=n(X,"LI",{});var FRe=s(W2);eue=n(FRe,"STRONG",{});var mvt=s(eue);NUo=r(mvt,"bart"),mvt.forEach(t),qUo=r(FRe," \u2014 "),az=n(FRe,"A",{href:!0});var gvt=s(az);jUo=r(gvt,"BartForQuestionAnswering"),gvt.forEach(t),DUo=r(FRe," (BART model)"),FRe.forEach(t),GUo=i(X),Q2=n(X,"LI",{});var TRe=s(Q2);oue=n(TRe,"STRONG",{});var hvt=s(oue);OUo=r(hvt,"bert"),hvt.forEach(t),VUo=r(TRe," \u2014 "),nz=n(TRe,"A",{href:!0});var pvt=s(nz);XUo=r(pvt,"BertForQuestionAnswering"),pvt.forEach(t),zUo=r(TRe," (BERT model)"),TRe.forEach(t),WUo=i(X),H2=n(X,"LI",{});var MRe=s(H2);rue=n(MRe,"STRONG",{});var _vt=s(rue);QUo=r(_vt,"big_bird"),_vt.forEach(t),HUo=r(MRe," \u2014 "),sz=n(MRe,"A",{href:!0});var uvt=s(sz);UUo=r(uvt,"BigBirdForQuestionAnswering"),uvt.forEach(t),JUo=r(MRe," (BigBird model)"),MRe.forEach(t),YUo=i(X),U2=n(X,"LI",{});var ERe=s(U2);tue=n(ERe,"STRONG",{});var bvt=s(tue);KUo=r(bvt,"bigbird_pegasus"),bvt.forEach(t),ZUo=r(ERe," \u2014 "),lz=n(ERe,"A",{href:!0});var vvt=s(lz);eJo=r(vvt,"BigBirdPegasusForQuestionAnswering"),vvt.forEach(t),oJo=r(ERe," (BigBird-Pegasus model)"),ERe.forEach(t),rJo=i(X),J2=n(X,"LI",{});var CRe=s(J2);aue=n(CRe,"STRONG",{});var Fvt=s(aue);tJo=r(Fvt,"camembert"),Fvt.forEach(t),aJo=r(CRe," \u2014 "),iz=n(CRe,"A",{href:!0});var Tvt=s(iz);nJo=r(Tvt,"CamembertForQuestionAnswering"),Tvt.forEach(t),sJo=r(CRe," (CamemBERT model)"),CRe.forEach(t),lJo=i(X),Y2=n(X,"LI",{});var wRe=s(Y2);nue=n(wRe,"STRONG",{});var Mvt=s(nue);iJo=r(Mvt,"canine"),Mvt.forEach(t),dJo=r(wRe," \u2014 "),dz=n(wRe,"A",{href:!0});var Evt=s(dz);cJo=r(Evt,"CanineForQuestionAnswering"),Evt.forEach(t),fJo=r(wRe," (CANINE model)"),wRe.forEach(t),mJo=i(X),K2=n(X,"LI",{});var ARe=s(K2);sue=n(ARe,"STRONG",{});var Cvt=s(sue);gJo=r(Cvt,"convbert"),Cvt.forEach(t),hJo=r(ARe," \u2014 "),cz=n(ARe,"A",{href:!0});var wvt=s(cz);pJo=r(wvt,"ConvBertForQuestionAnswering"),wvt.forEach(t),_Jo=r(ARe," (ConvBERT model)"),ARe.forEach(t),uJo=i(X),Z2=n(X,"LI",{});var LRe=s(Z2);lue=n(LRe,"STRONG",{});var Avt=s(lue);bJo=r(Avt,"data2vec-text"),Avt.forEach(t),vJo=r(LRe," \u2014 "),fz=n(LRe,"A",{href:!0});var Lvt=s(fz);FJo=r(Lvt,"Data2VecTextForQuestionAnswering"),Lvt.forEach(t),TJo=r(LRe," (Data2VecText model)"),LRe.forEach(t),MJo=i(X),ev=n(X,"LI",{});var yRe=s(ev);iue=n(yRe,"STRONG",{});var yvt=s(iue);EJo=r(yvt,"deberta"),yvt.forEach(t),CJo=r(yRe," \u2014 "),mz=n(yRe,"A",{href:!0});var xvt=s(mz);wJo=r(xvt,"DebertaForQuestionAnswering"),xvt.forEach(t),AJo=r(yRe," (DeBERTa model)"),yRe.forEach(t),LJo=i(X),ov=n(X,"LI",{});var xRe=s(ov);due=n(xRe,"STRONG",{});var $vt=s(due);yJo=r($vt,"deberta-v2"),$vt.forEach(t),xJo=r(xRe," \u2014 "),gz=n(xRe,"A",{href:!0});var kvt=s(gz);$Jo=r(kvt,"DebertaV2ForQuestionAnswering"),kvt.forEach(t),kJo=r(xRe," (DeBERTa-v2 model)"),xRe.forEach(t),SJo=i(X),rv=n(X,"LI",{});var $Re=s(rv);cue=n($Re,"STRONG",{});var Svt=s(cue);RJo=r(Svt,"distilbert"),Svt.forEach(t),PJo=r($Re," \u2014 "),hz=n($Re,"A",{href:!0});var Rvt=s(hz);BJo=r(Rvt,"DistilBertForQuestionAnswering"),Rvt.forEach(t),IJo=r($Re," (DistilBERT model)"),$Re.forEach(t),NJo=i(X),tv=n(X,"LI",{});var kRe=s(tv);fue=n(kRe,"STRONG",{});var Pvt=s(fue);qJo=r(Pvt,"electra"),Pvt.forEach(t),jJo=r(kRe," \u2014 "),pz=n(kRe,"A",{href:!0});var Bvt=s(pz);DJo=r(Bvt,"ElectraForQuestionAnswering"),Bvt.forEach(t),GJo=r(kRe," (ELECTRA model)"),kRe.forEach(t),OJo=i(X),av=n(X,"LI",{});var SRe=s(av);mue=n(SRe,"STRONG",{});var Ivt=s(mue);VJo=r(Ivt,"flaubert"),Ivt.forEach(t),XJo=r(SRe," \u2014 "),_z=n(SRe,"A",{href:!0});var Nvt=s(_z);zJo=r(Nvt,"FlaubertForQuestionAnsweringSimple"),Nvt.forEach(t),WJo=r(SRe," (FlauBERT model)"),SRe.forEach(t),QJo=i(X),nv=n(X,"LI",{});var RRe=s(nv);gue=n(RRe,"STRONG",{});var qvt=s(gue);HJo=r(qvt,"fnet"),qvt.forEach(t),UJo=r(RRe," \u2014 "),uz=n(RRe,"A",{href:!0});var jvt=s(uz);JJo=r(jvt,"FNetForQuestionAnswering"),jvt.forEach(t),YJo=r(RRe," (FNet model)"),RRe.forEach(t),KJo=i(X),sv=n(X,"LI",{});var PRe=s(sv);hue=n(PRe,"STRONG",{});var Dvt=s(hue);ZJo=r(Dvt,"funnel"),Dvt.forEach(t),eYo=r(PRe," \u2014 "),bz=n(PRe,"A",{href:!0});var Gvt=s(bz);oYo=r(Gvt,"FunnelForQuestionAnswering"),Gvt.forEach(t),rYo=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),tYo=i(X),lv=n(X,"LI",{});var BRe=s(lv);pue=n(BRe,"STRONG",{});var Ovt=s(pue);aYo=r(Ovt,"gptj"),Ovt.forEach(t),nYo=r(BRe," \u2014 "),vz=n(BRe,"A",{href:!0});var Vvt=s(vz);sYo=r(Vvt,"GPTJForQuestionAnswering"),Vvt.forEach(t),lYo=r(BRe," (GPT-J model)"),BRe.forEach(t),iYo=i(X),iv=n(X,"LI",{});var IRe=s(iv);_ue=n(IRe,"STRONG",{});var Xvt=s(_ue);dYo=r(Xvt,"ibert"),Xvt.forEach(t),cYo=r(IRe," \u2014 "),Fz=n(IRe,"A",{href:!0});var zvt=s(Fz);fYo=r(zvt,"IBertForQuestionAnswering"),zvt.forEach(t),mYo=r(IRe," (I-BERT model)"),IRe.forEach(t),gYo=i(X),dv=n(X,"LI",{});var NRe=s(dv);uue=n(NRe,"STRONG",{});var Wvt=s(uue);hYo=r(Wvt,"layoutlmv2"),Wvt.forEach(t),pYo=r(NRe," \u2014 "),Tz=n(NRe,"A",{href:!0});var Qvt=s(Tz);_Yo=r(Qvt,"LayoutLMv2ForQuestionAnswering"),Qvt.forEach(t),uYo=r(NRe," (LayoutLMv2 model)"),NRe.forEach(t),bYo=i(X),cv=n(X,"LI",{});var qRe=s(cv);bue=n(qRe,"STRONG",{});var Hvt=s(bue);vYo=r(Hvt,"layoutlmv3"),Hvt.forEach(t),FYo=r(qRe," \u2014 "),Mz=n(qRe,"A",{href:!0});var Uvt=s(Mz);TYo=r(Uvt,"LayoutLMv3ForQuestionAnswering"),Uvt.forEach(t),MYo=r(qRe," (LayoutLMv3 model)"),qRe.forEach(t),EYo=i(X),fv=n(X,"LI",{});var jRe=s(fv);vue=n(jRe,"STRONG",{});var Jvt=s(vue);CYo=r(Jvt,"led"),Jvt.forEach(t),wYo=r(jRe," \u2014 "),Ez=n(jRe,"A",{href:!0});var Yvt=s(Ez);AYo=r(Yvt,"LEDForQuestionAnswering"),Yvt.forEach(t),LYo=r(jRe," (LED model)"),jRe.forEach(t),yYo=i(X),mv=n(X,"LI",{});var DRe=s(mv);Fue=n(DRe,"STRONG",{});var Kvt=s(Fue);xYo=r(Kvt,"longformer"),Kvt.forEach(t),$Yo=r(DRe," \u2014 "),Cz=n(DRe,"A",{href:!0});var Zvt=s(Cz);kYo=r(Zvt,"LongformerForQuestionAnswering"),Zvt.forEach(t),SYo=r(DRe," (Longformer model)"),DRe.forEach(t),RYo=i(X),gv=n(X,"LI",{});var GRe=s(gv);Tue=n(GRe,"STRONG",{});var eFt=s(Tue);PYo=r(eFt,"lxmert"),eFt.forEach(t),BYo=r(GRe," \u2014 "),wz=n(GRe,"A",{href:!0});var oFt=s(wz);IYo=r(oFt,"LxmertForQuestionAnswering"),oFt.forEach(t),NYo=r(GRe," (LXMERT model)"),GRe.forEach(t),qYo=i(X),hv=n(X,"LI",{});var ORe=s(hv);Mue=n(ORe,"STRONG",{});var rFt=s(Mue);jYo=r(rFt,"mbart"),rFt.forEach(t),DYo=r(ORe," \u2014 "),Az=n(ORe,"A",{href:!0});var tFt=s(Az);GYo=r(tFt,"MBartForQuestionAnswering"),tFt.forEach(t),OYo=r(ORe," (mBART model)"),ORe.forEach(t),VYo=i(X),pv=n(X,"LI",{});var VRe=s(pv);Eue=n(VRe,"STRONG",{});var aFt=s(Eue);XYo=r(aFt,"megatron-bert"),aFt.forEach(t),zYo=r(VRe," \u2014 "),Lz=n(VRe,"A",{href:!0});var nFt=s(Lz);WYo=r(nFt,"MegatronBertForQuestionAnswering"),nFt.forEach(t),QYo=r(VRe," (Megatron-BERT model)"),VRe.forEach(t),HYo=i(X),_v=n(X,"LI",{});var XRe=s(_v);Cue=n(XRe,"STRONG",{});var sFt=s(Cue);UYo=r(sFt,"mobilebert"),sFt.forEach(t),JYo=r(XRe," \u2014 "),yz=n(XRe,"A",{href:!0});var lFt=s(yz);YYo=r(lFt,"MobileBertForQuestionAnswering"),lFt.forEach(t),KYo=r(XRe," (MobileBERT model)"),XRe.forEach(t),ZYo=i(X),uv=n(X,"LI",{});var zRe=s(uv);wue=n(zRe,"STRONG",{});var iFt=s(wue);eKo=r(iFt,"mpnet"),iFt.forEach(t),oKo=r(zRe," \u2014 "),xz=n(zRe,"A",{href:!0});var dFt=s(xz);rKo=r(dFt,"MPNetForQuestionAnswering"),dFt.forEach(t),tKo=r(zRe," (MPNet model)"),zRe.forEach(t),aKo=i(X),bv=n(X,"LI",{});var WRe=s(bv);Aue=n(WRe,"STRONG",{});var cFt=s(Aue);nKo=r(cFt,"nystromformer"),cFt.forEach(t),sKo=r(WRe," \u2014 "),$z=n(WRe,"A",{href:!0});var fFt=s($z);lKo=r(fFt,"NystromformerForQuestionAnswering"),fFt.forEach(t),iKo=r(WRe," (Nystr\xF6mformer model)"),WRe.forEach(t),dKo=i(X),vv=n(X,"LI",{});var QRe=s(vv);Lue=n(QRe,"STRONG",{});var mFt=s(Lue);cKo=r(mFt,"qdqbert"),mFt.forEach(t),fKo=r(QRe," \u2014 "),kz=n(QRe,"A",{href:!0});var gFt=s(kz);mKo=r(gFt,"QDQBertForQuestionAnswering"),gFt.forEach(t),gKo=r(QRe," (QDQBert model)"),QRe.forEach(t),hKo=i(X),Fv=n(X,"LI",{});var HRe=s(Fv);yue=n(HRe,"STRONG",{});var hFt=s(yue);pKo=r(hFt,"reformer"),hFt.forEach(t),_Ko=r(HRe," \u2014 "),Sz=n(HRe,"A",{href:!0});var pFt=s(Sz);uKo=r(pFt,"ReformerForQuestionAnswering"),pFt.forEach(t),bKo=r(HRe," (Reformer model)"),HRe.forEach(t),vKo=i(X),Tv=n(X,"LI",{});var URe=s(Tv);xue=n(URe,"STRONG",{});var _Ft=s(xue);FKo=r(_Ft,"rembert"),_Ft.forEach(t),TKo=r(URe," \u2014 "),Rz=n(URe,"A",{href:!0});var uFt=s(Rz);MKo=r(uFt,"RemBertForQuestionAnswering"),uFt.forEach(t),EKo=r(URe," (RemBERT model)"),URe.forEach(t),CKo=i(X),Mv=n(X,"LI",{});var JRe=s(Mv);$ue=n(JRe,"STRONG",{});var bFt=s($ue);wKo=r(bFt,"roberta"),bFt.forEach(t),AKo=r(JRe," \u2014 "),Pz=n(JRe,"A",{href:!0});var vFt=s(Pz);LKo=r(vFt,"RobertaForQuestionAnswering"),vFt.forEach(t),yKo=r(JRe," (RoBERTa model)"),JRe.forEach(t),xKo=i(X),Ev=n(X,"LI",{});var YRe=s(Ev);kue=n(YRe,"STRONG",{});var FFt=s(kue);$Ko=r(FFt,"roformer"),FFt.forEach(t),kKo=r(YRe," \u2014 "),Bz=n(YRe,"A",{href:!0});var TFt=s(Bz);SKo=r(TFt,"RoFormerForQuestionAnswering"),TFt.forEach(t),RKo=r(YRe," (RoFormer model)"),YRe.forEach(t),PKo=i(X),Cv=n(X,"LI",{});var KRe=s(Cv);Sue=n(KRe,"STRONG",{});var MFt=s(Sue);BKo=r(MFt,"splinter"),MFt.forEach(t),IKo=r(KRe," \u2014 "),Iz=n(KRe,"A",{href:!0});var EFt=s(Iz);NKo=r(EFt,"SplinterForQuestionAnswering"),EFt.forEach(t),qKo=r(KRe," (Splinter model)"),KRe.forEach(t),jKo=i(X),wv=n(X,"LI",{});var ZRe=s(wv);Rue=n(ZRe,"STRONG",{});var CFt=s(Rue);DKo=r(CFt,"squeezebert"),CFt.forEach(t),GKo=r(ZRe," \u2014 "),Nz=n(ZRe,"A",{href:!0});var wFt=s(Nz);OKo=r(wFt,"SqueezeBertForQuestionAnswering"),wFt.forEach(t),VKo=r(ZRe," (SqueezeBERT model)"),ZRe.forEach(t),XKo=i(X),Av=n(X,"LI",{});var ePe=s(Av);Pue=n(ePe,"STRONG",{});var AFt=s(Pue);zKo=r(AFt,"xlm"),AFt.forEach(t),WKo=r(ePe," \u2014 "),qz=n(ePe,"A",{href:!0});var LFt=s(qz);QKo=r(LFt,"XLMForQuestionAnsweringSimple"),LFt.forEach(t),HKo=r(ePe," (XLM model)"),ePe.forEach(t),UKo=i(X),Lv=n(X,"LI",{});var oPe=s(Lv);Bue=n(oPe,"STRONG",{});var yFt=s(Bue);JKo=r(yFt,"xlm-roberta"),yFt.forEach(t),YKo=r(oPe," \u2014 "),jz=n(oPe,"A",{href:!0});var xFt=s(jz);KKo=r(xFt,"XLMRobertaForQuestionAnswering"),xFt.forEach(t),ZKo=r(oPe," (XLM-RoBERTa model)"),oPe.forEach(t),eZo=i(X),yv=n(X,"LI",{});var rPe=s(yv);Iue=n(rPe,"STRONG",{});var $Ft=s(Iue);oZo=r($Ft,"xlm-roberta-xl"),$Ft.forEach(t),rZo=r(rPe," \u2014 "),Dz=n(rPe,"A",{href:!0});var kFt=s(Dz);tZo=r(kFt,"XLMRobertaXLForQuestionAnswering"),kFt.forEach(t),aZo=r(rPe," (XLM-RoBERTa-XL model)"),rPe.forEach(t),nZo=i(X),xv=n(X,"LI",{});var tPe=s(xv);Nue=n(tPe,"STRONG",{});var SFt=s(Nue);sZo=r(SFt,"xlnet"),SFt.forEach(t),lZo=r(tPe," \u2014 "),Gz=n(tPe,"A",{href:!0});var RFt=s(Gz);iZo=r(RFt,"XLNetForQuestionAnsweringSimple"),RFt.forEach(t),dZo=r(tPe," (XLNet model)"),tPe.forEach(t),cZo=i(X),$v=n(X,"LI",{});var aPe=s($v);que=n(aPe,"STRONG",{});var PFt=s(que);fZo=r(PFt,"yoso"),PFt.forEach(t),mZo=r(aPe," \u2014 "),Oz=n(aPe,"A",{href:!0});var BFt=s(Oz);gZo=r(BFt,"YosoForQuestionAnswering"),BFt.forEach(t),hZo=r(aPe," (YOSO model)"),aPe.forEach(t),X.forEach(t),pZo=i(ga),kv=n(ga,"P",{});var nPe=s(kv);_Zo=r(nPe,"The model is set in evaluation mode by default using "),jue=n(nPe,"CODE",{});var IFt=s(jue);uZo=r(IFt,"model.eval()"),IFt.forEach(t),bZo=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(nPe,"CODE",{});var NFt=s(Due);vZo=r(NFt,"model.train()"),NFt.forEach(t),nPe.forEach(t),FZo=i(ga),T(Sv.$$.fragment,ga),ga.forEach(t),nl.forEach(t),QGe=i(f),cd=n(f,"H2",{class:!0});var ZVe=s(cd);Rv=n(ZVe,"A",{id:!0,class:!0,href:!0});var qFt=s(Rv);Gue=n(qFt,"SPAN",{});var jFt=s(Gue);T(zL.$$.fragment,jFt),jFt.forEach(t),qFt.forEach(t),TZo=i(ZVe),Oue=n(ZVe,"SPAN",{});var DFt=s(Oue);MZo=r(DFt,"AutoModelForTableQuestionAnswering"),DFt.forEach(t),ZVe.forEach(t),HGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(WL.$$.fragment,sl),EZo=i(sl),fd=n(sl,"P",{});var woe=s(fd);CZo=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Vz=n(woe,"A",{href:!0});var GFt=s(Vz);wZo=r(GFt,"from_pretrained()"),GFt.forEach(t),AZo=r(woe," class method or the "),Xz=n(woe,"A",{href:!0});var OFt=s(Xz);LZo=r(OFt,"from_config()"),OFt.forEach(t),yZo=r(woe,` class
method.`),woe.forEach(t),xZo=i(sl),QL=n(sl,"P",{});var eXe=s(QL);$Zo=r(eXe,"This class cannot be instantiated directly using "),Vue=n(eXe,"CODE",{});var VFt=s(Vue);kZo=r(VFt,"__init__()"),VFt.forEach(t),SZo=r(eXe," (throws an error)."),eXe.forEach(t),RZo=i(sl),pt=n(sl,"DIV",{class:!0});var zw=s(pt);T(HL.$$.fragment,zw),PZo=i(zw),Xue=n(zw,"P",{});var XFt=s(Xue);BZo=r(XFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XFt.forEach(t),IZo=i(zw),md=n(zw,"P",{});var Aoe=s(md);NZo=r(Aoe,`Note:
Loading a model from its configuration file does `),zue=n(Aoe,"STRONG",{});var zFt=s(zue);qZo=r(zFt,"not"),zFt.forEach(t),jZo=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(Aoe,"A",{href:!0});var WFt=s(zz);DZo=r(WFt,"from_pretrained()"),WFt.forEach(t),GZo=r(Aoe," to load the model weights."),Aoe.forEach(t),OZo=i(zw),T(Pv.$$.fragment,zw),zw.forEach(t),VZo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(UL.$$.fragment,ha),XZo=i(ha),Wue=n(ha,"P",{});var QFt=s(Wue);zZo=r(QFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),QFt.forEach(t),WZo=i(ha),Oa=n(ha,"P",{});var Ww=s(Oa);QZo=r(Ww,"The model class to instantiate is selected based on the "),Que=n(Ww,"CODE",{});var HFt=s(Que);HZo=r(HFt,"model_type"),HFt.forEach(t),UZo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Hue=n(Ww,"CODE",{});var UFt=s(Hue);JZo=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),YZo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(Ww,"CODE",{});var JFt=s(Uue);KZo=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),ZZo=r(Ww,":"),Ww.forEach(t),eer=i(ha),Jue=n(ha,"UL",{});var YFt=s(Jue);Bv=n(YFt,"LI",{});var sPe=s(Bv);Yue=n(sPe,"STRONG",{});var KFt=s(Yue);oer=r(KFt,"tapas"),KFt.forEach(t),rer=r(sPe," \u2014 "),Wz=n(sPe,"A",{href:!0});var ZFt=s(Wz);ter=r(ZFt,"TapasForQuestionAnswering"),ZFt.forEach(t),aer=r(sPe," (TAPAS model)"),sPe.forEach(t),YFt.forEach(t),ner=i(ha),Iv=n(ha,"P",{});var lPe=s(Iv);ser=r(lPe,"The model is set in evaluation mode by default using "),Kue=n(lPe,"CODE",{});var eTt=s(Kue);ler=r(eTt,"model.eval()"),eTt.forEach(t),ier=r(lPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(lPe,"CODE",{});var oTt=s(Zue);der=r(oTt,"model.train()"),oTt.forEach(t),lPe.forEach(t),cer=i(ha),T(Nv.$$.fragment,ha),ha.forEach(t),sl.forEach(t),UGe=i(f),gd=n(f,"H2",{class:!0});var oXe=s(gd);qv=n(oXe,"A",{id:!0,class:!0,href:!0});var rTt=s(qv);e1e=n(rTt,"SPAN",{});var tTt=s(e1e);T(JL.$$.fragment,tTt),tTt.forEach(t),rTt.forEach(t),fer=i(oXe),o1e=n(oXe,"SPAN",{});var aTt=s(o1e);mer=r(aTt,"AutoModelForImageClassification"),aTt.forEach(t),oXe.forEach(t),JGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(YL.$$.fragment,ll),ger=i(ll),hd=n(ll,"P",{});var Loe=s(hd);her=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Qz=n(Loe,"A",{href:!0});var nTt=s(Qz);per=r(nTt,"from_pretrained()"),nTt.forEach(t),_er=r(Loe," class method or the "),Hz=n(Loe,"A",{href:!0});var sTt=s(Hz);uer=r(sTt,"from_config()"),sTt.forEach(t),ber=r(Loe,` class
method.`),Loe.forEach(t),ver=i(ll),KL=n(ll,"P",{});var rXe=s(KL);Fer=r(rXe,"This class cannot be instantiated directly using "),r1e=n(rXe,"CODE",{});var lTt=s(r1e);Ter=r(lTt,"__init__()"),lTt.forEach(t),Mer=r(rXe," (throws an error)."),rXe.forEach(t),Eer=i(ll),_t=n(ll,"DIV",{class:!0});var Qw=s(_t);T(ZL.$$.fragment,Qw),Cer=i(Qw),t1e=n(Qw,"P",{});var iTt=s(t1e);wer=r(iTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iTt.forEach(t),Aer=i(Qw),pd=n(Qw,"P",{});var yoe=s(pd);Ler=r(yoe,`Note:
Loading a model from its configuration file does `),a1e=n(yoe,"STRONG",{});var dTt=s(a1e);yer=r(dTt,"not"),dTt.forEach(t),xer=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(yoe,"A",{href:!0});var cTt=s(Uz);$er=r(cTt,"from_pretrained()"),cTt.forEach(t),ker=r(yoe," to load the model weights."),yoe.forEach(t),Ser=i(Qw),T(jv.$$.fragment,Qw),Qw.forEach(t),Rer=i(ll),lo=n(ll,"DIV",{class:!0});var pa=s(lo);T(ey.$$.fragment,pa),Per=i(pa),n1e=n(pa,"P",{});var fTt=s(n1e);Ber=r(fTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fTt.forEach(t),Ier=i(pa),Va=n(pa,"P",{});var Hw=s(Va);Ner=r(Hw,"The model class to instantiate is selected based on the "),s1e=n(Hw,"CODE",{});var mTt=s(s1e);qer=r(mTt,"model_type"),mTt.forEach(t),jer=r(Hw,` property of the config object (either
passed as an argument or loaded from `),l1e=n(Hw,"CODE",{});var gTt=s(l1e);Der=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),Ger=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(Hw,"CODE",{});var hTt=s(i1e);Oer=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),Ver=r(Hw,":"),Hw.forEach(t),Xer=i(pa),ue=n(pa,"UL",{});var Te=s(ue);Dv=n(Te,"LI",{});var iPe=s(Dv);d1e=n(iPe,"STRONG",{});var pTt=s(d1e);zer=r(pTt,"beit"),pTt.forEach(t),Wer=r(iPe," \u2014 "),Jz=n(iPe,"A",{href:!0});var _Tt=s(Jz);Qer=r(_Tt,"BeitForImageClassification"),_Tt.forEach(t),Her=r(iPe," (BEiT model)"),iPe.forEach(t),Uer=i(Te),Gv=n(Te,"LI",{});var dPe=s(Gv);c1e=n(dPe,"STRONG",{});var uTt=s(c1e);Jer=r(uTt,"convnext"),uTt.forEach(t),Yer=r(dPe," \u2014 "),Yz=n(dPe,"A",{href:!0});var bTt=s(Yz);Ker=r(bTt,"ConvNextForImageClassification"),bTt.forEach(t),Zer=r(dPe," (ConvNeXT model)"),dPe.forEach(t),eor=i(Te),Ov=n(Te,"LI",{});var cPe=s(Ov);f1e=n(cPe,"STRONG",{});var vTt=s(f1e);oor=r(vTt,"cvt"),vTt.forEach(t),ror=r(cPe," \u2014 "),Kz=n(cPe,"A",{href:!0});var FTt=s(Kz);tor=r(FTt,"CvtForImageClassification"),FTt.forEach(t),aor=r(cPe," (CvT model)"),cPe.forEach(t),nor=i(Te),Vv=n(Te,"LI",{});var fPe=s(Vv);m1e=n(fPe,"STRONG",{});var TTt=s(m1e);sor=r(TTt,"data2vec-vision"),TTt.forEach(t),lor=r(fPe," \u2014 "),Zz=n(fPe,"A",{href:!0});var MTt=s(Zz);ior=r(MTt,"Data2VecVisionForImageClassification"),MTt.forEach(t),dor=r(fPe," (Data2VecVision model)"),fPe.forEach(t),cor=i(Te),Os=n(Te,"LI",{});var Wk=s(Os);g1e=n(Wk,"STRONG",{});var ETt=s(g1e);mor=r(ETt,"deit"),ETt.forEach(t),gor=r(Wk," \u2014 "),eW=n(Wk,"A",{href:!0});var CTt=s(eW);hor=r(CTt,"DeiTForImageClassification"),CTt.forEach(t),por=r(Wk," or "),oW=n(Wk,"A",{href:!0});var wTt=s(oW);_or=r(wTt,"DeiTForImageClassificationWithTeacher"),wTt.forEach(t),uor=r(Wk," (DeiT model)"),Wk.forEach(t),bor=i(Te),Xv=n(Te,"LI",{});var mPe=s(Xv);h1e=n(mPe,"STRONG",{});var ATt=s(h1e);vor=r(ATt,"imagegpt"),ATt.forEach(t),For=r(mPe," \u2014 "),rW=n(mPe,"A",{href:!0});var LTt=s(rW);Tor=r(LTt,"ImageGPTForImageClassification"),LTt.forEach(t),Mor=r(mPe," (ImageGPT model)"),mPe.forEach(t),Eor=i(Te),Vs=n(Te,"LI",{});var Qk=s(Vs);p1e=n(Qk,"STRONG",{});var yTt=s(p1e);Cor=r(yTt,"levit"),yTt.forEach(t),wor=r(Qk," \u2014 "),tW=n(Qk,"A",{href:!0});var xTt=s(tW);Aor=r(xTt,"LevitForImageClassification"),xTt.forEach(t),Lor=r(Qk," or "),aW=n(Qk,"A",{href:!0});var $Tt=s(aW);yor=r($Tt,"LevitForImageClassificationWithTeacher"),$Tt.forEach(t),xor=r(Qk," (LeViT model)"),Qk.forEach(t),$or=i(Te),zv=n(Te,"LI",{});var gPe=s(zv);_1e=n(gPe,"STRONG",{});var kTt=s(_1e);kor=r(kTt,"mobilenet_v1"),kTt.forEach(t),Sor=r(gPe," \u2014 "),nW=n(gPe,"A",{href:!0});var STt=s(nW);Ror=r(STt,"MobileNetV1ForImageClassification"),STt.forEach(t),Por=r(gPe," (MobileNetV1 model)"),gPe.forEach(t),Bor=i(Te),ut=n(Te,"LI",{});var Af=s(ut);u1e=n(Af,"STRONG",{});var RTt=s(u1e);Ior=r(RTt,"perceiver"),RTt.forEach(t),Nor=r(Af," \u2014 "),sW=n(Af,"A",{href:!0});var PTt=s(sW);qor=r(PTt,"PerceiverForImageClassificationLearned"),PTt.forEach(t),jor=r(Af," or "),lW=n(Af,"A",{href:!0});var BTt=s(lW);Dor=r(BTt,"PerceiverForImageClassificationFourier"),BTt.forEach(t),Gor=r(Af," or "),iW=n(Af,"A",{href:!0});var ITt=s(iW);Oor=r(ITt,"PerceiverForImageClassificationConvProcessing"),ITt.forEach(t),Vor=r(Af," (Perceiver model)"),Af.forEach(t),Xor=i(Te),Wv=n(Te,"LI",{});var hPe=s(Wv);b1e=n(hPe,"STRONG",{});var NTt=s(b1e);zor=r(NTt,"poolformer"),NTt.forEach(t),Wor=r(hPe," \u2014 "),dW=n(hPe,"A",{href:!0});var qTt=s(dW);Qor=r(qTt,"PoolFormerForImageClassification"),qTt.forEach(t),Hor=r(hPe," (PoolFormer model)"),hPe.forEach(t),Uor=i(Te),Qv=n(Te,"LI",{});var pPe=s(Qv);v1e=n(pPe,"STRONG",{});var jTt=s(v1e);Jor=r(jTt,"regnet"),jTt.forEach(t),Yor=r(pPe," \u2014 "),cW=n(pPe,"A",{href:!0});var DTt=s(cW);Kor=r(DTt,"RegNetForImageClassification"),DTt.forEach(t),Zor=r(pPe," (RegNet model)"),pPe.forEach(t),err=i(Te),Hv=n(Te,"LI",{});var _Pe=s(Hv);F1e=n(_Pe,"STRONG",{});var GTt=s(F1e);orr=r(GTt,"resnet"),GTt.forEach(t),rrr=r(_Pe," \u2014 "),fW=n(_Pe,"A",{href:!0});var OTt=s(fW);trr=r(OTt,"ResNetForImageClassification"),OTt.forEach(t),arr=r(_Pe," (ResNet model)"),_Pe.forEach(t),nrr=i(Te),Uv=n(Te,"LI",{});var uPe=s(Uv);T1e=n(uPe,"STRONG",{});var VTt=s(T1e);srr=r(VTt,"segformer"),VTt.forEach(t),lrr=r(uPe," \u2014 "),mW=n(uPe,"A",{href:!0});var XTt=s(mW);irr=r(XTt,"SegformerForImageClassification"),XTt.forEach(t),drr=r(uPe," (SegFormer model)"),uPe.forEach(t),crr=i(Te),Jv=n(Te,"LI",{});var bPe=s(Jv);M1e=n(bPe,"STRONG",{});var zTt=s(M1e);frr=r(zTt,"swin"),zTt.forEach(t),mrr=r(bPe," \u2014 "),gW=n(bPe,"A",{href:!0});var WTt=s(gW);grr=r(WTt,"SwinForImageClassification"),WTt.forEach(t),hrr=r(bPe," (Swin Transformer model)"),bPe.forEach(t),prr=i(Te),Yv=n(Te,"LI",{});var vPe=s(Yv);E1e=n(vPe,"STRONG",{});var QTt=s(E1e);_rr=r(QTt,"van"),QTt.forEach(t),urr=r(vPe," \u2014 "),hW=n(vPe,"A",{href:!0});var HTt=s(hW);brr=r(HTt,"VanForImageClassification"),HTt.forEach(t),vrr=r(vPe," (VAN model)"),vPe.forEach(t),Frr=i(Te),Kv=n(Te,"LI",{});var FPe=s(Kv);C1e=n(FPe,"STRONG",{});var UTt=s(C1e);Trr=r(UTt,"vit"),UTt.forEach(t),Mrr=r(FPe," \u2014 "),pW=n(FPe,"A",{href:!0});var JTt=s(pW);Err=r(JTt,"ViTForImageClassification"),JTt.forEach(t),Crr=r(FPe," (ViT model)"),FPe.forEach(t),Te.forEach(t),wrr=i(pa),Zv=n(pa,"P",{});var TPe=s(Zv);Arr=r(TPe,"The model is set in evaluation mode by default using "),w1e=n(TPe,"CODE",{});var YTt=s(w1e);Lrr=r(YTt,"model.eval()"),YTt.forEach(t),yrr=r(TPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=n(TPe,"CODE",{});var KTt=s(A1e);xrr=r(KTt,"model.train()"),KTt.forEach(t),TPe.forEach(t),$rr=i(pa),T(eF.$$.fragment,pa),pa.forEach(t),ll.forEach(t),YGe=i(f),_d=n(f,"H2",{class:!0});var tXe=s(_d);oF=n(tXe,"A",{id:!0,class:!0,href:!0});var ZTt=s(oF);L1e=n(ZTt,"SPAN",{});var eMt=s(L1e);T(oy.$$.fragment,eMt),eMt.forEach(t),ZTt.forEach(t),krr=i(tXe),y1e=n(tXe,"SPAN",{});var oMt=s(y1e);Srr=r(oMt,"AutoModelForVision2Seq"),oMt.forEach(t),tXe.forEach(t),KGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(ry.$$.fragment,il),Rrr=i(il),ud=n(il,"P",{});var xoe=s(ud);Prr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_W=n(xoe,"A",{href:!0});var rMt=s(_W);Brr=r(rMt,"from_pretrained()"),rMt.forEach(t),Irr=r(xoe," class method or the "),uW=n(xoe,"A",{href:!0});var tMt=s(uW);Nrr=r(tMt,"from_config()"),tMt.forEach(t),qrr=r(xoe,` class
method.`),xoe.forEach(t),jrr=i(il),ty=n(il,"P",{});var aXe=s(ty);Drr=r(aXe,"This class cannot be instantiated directly using "),x1e=n(aXe,"CODE",{});var aMt=s(x1e);Grr=r(aMt,"__init__()"),aMt.forEach(t),Orr=r(aXe," (throws an error)."),aXe.forEach(t),Vrr=i(il),bt=n(il,"DIV",{class:!0});var Uw=s(bt);T(ay.$$.fragment,Uw),Xrr=i(Uw),$1e=n(Uw,"P",{});var nMt=s($1e);zrr=r(nMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nMt.forEach(t),Wrr=i(Uw),bd=n(Uw,"P",{});var $oe=s(bd);Qrr=r($oe,`Note:
Loading a model from its configuration file does `),k1e=n($oe,"STRONG",{});var sMt=s(k1e);Hrr=r(sMt,"not"),sMt.forEach(t),Urr=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n($oe,"A",{href:!0});var lMt=s(bW);Jrr=r(lMt,"from_pretrained()"),lMt.forEach(t),Yrr=r($oe," to load the model weights."),$oe.forEach(t),Krr=i(Uw),T(rF.$$.fragment,Uw),Uw.forEach(t),Zrr=i(il),io=n(il,"DIV",{class:!0});var _a=s(io);T(ny.$$.fragment,_a),etr=i(_a),S1e=n(_a,"P",{});var iMt=s(S1e);otr=r(iMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iMt.forEach(t),rtr=i(_a),Xa=n(_a,"P",{});var Jw=s(Xa);ttr=r(Jw,"The model class to instantiate is selected based on the "),R1e=n(Jw,"CODE",{});var dMt=s(R1e);atr=r(dMt,"model_type"),dMt.forEach(t),ntr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),P1e=n(Jw,"CODE",{});var cMt=s(P1e);str=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),ltr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=n(Jw,"CODE",{});var fMt=s(B1e);itr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),dtr=r(Jw,":"),Jw.forEach(t),ctr=i(_a),I1e=n(_a,"UL",{});var mMt=s(I1e);tF=n(mMt,"LI",{});var MPe=s(tF);N1e=n(MPe,"STRONG",{});var gMt=s(N1e);ftr=r(gMt,"vision-encoder-decoder"),gMt.forEach(t),mtr=r(MPe," \u2014 "),vW=n(MPe,"A",{href:!0});var hMt=s(vW);gtr=r(hMt,"VisionEncoderDecoderModel"),hMt.forEach(t),htr=r(MPe," (Vision Encoder decoder model)"),MPe.forEach(t),mMt.forEach(t),ptr=i(_a),aF=n(_a,"P",{});var EPe=s(aF);_tr=r(EPe,"The model is set in evaluation mode by default using "),q1e=n(EPe,"CODE",{});var pMt=s(q1e);utr=r(pMt,"model.eval()"),pMt.forEach(t),btr=r(EPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=n(EPe,"CODE",{});var _Mt=s(j1e);vtr=r(_Mt,"model.train()"),_Mt.forEach(t),EPe.forEach(t),Ftr=i(_a),T(nF.$$.fragment,_a),_a.forEach(t),il.forEach(t),ZGe=i(f),vd=n(f,"H2",{class:!0});var nXe=s(vd);sF=n(nXe,"A",{id:!0,class:!0,href:!0});var uMt=s(sF);D1e=n(uMt,"SPAN",{});var bMt=s(D1e);T(sy.$$.fragment,bMt),bMt.forEach(t),uMt.forEach(t),Ttr=i(nXe),G1e=n(nXe,"SPAN",{});var vMt=s(G1e);Mtr=r(vMt,"AutoModelForVisualQuestionAnswering"),vMt.forEach(t),nXe.forEach(t),eOe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(ly.$$.fragment,dl),Etr=i(dl),Fd=n(dl,"P",{});var koe=s(Fd);Ctr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),FW=n(koe,"A",{href:!0});var FMt=s(FW);wtr=r(FMt,"from_pretrained()"),FMt.forEach(t),Atr=r(koe," class method or the "),TW=n(koe,"A",{href:!0});var TMt=s(TW);Ltr=r(TMt,"from_config()"),TMt.forEach(t),ytr=r(koe,` class
method.`),koe.forEach(t),xtr=i(dl),iy=n(dl,"P",{});var sXe=s(iy);$tr=r(sXe,"This class cannot be instantiated directly using "),O1e=n(sXe,"CODE",{});var MMt=s(O1e);ktr=r(MMt,"__init__()"),MMt.forEach(t),Str=r(sXe," (throws an error)."),sXe.forEach(t),Rtr=i(dl),vt=n(dl,"DIV",{class:!0});var Yw=s(vt);T(dy.$$.fragment,Yw),Ptr=i(Yw),V1e=n(Yw,"P",{});var EMt=s(V1e);Btr=r(EMt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),EMt.forEach(t),Itr=i(Yw),Td=n(Yw,"P",{});var Soe=s(Td);Ntr=r(Soe,`Note:
Loading a model from its configuration file does `),X1e=n(Soe,"STRONG",{});var CMt=s(X1e);qtr=r(CMt,"not"),CMt.forEach(t),jtr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Soe,"A",{href:!0});var wMt=s(MW);Dtr=r(wMt,"from_pretrained()"),wMt.forEach(t),Gtr=r(Soe," to load the model weights."),Soe.forEach(t),Otr=i(Yw),T(lF.$$.fragment,Yw),Yw.forEach(t),Vtr=i(dl),co=n(dl,"DIV",{class:!0});var ua=s(co);T(cy.$$.fragment,ua),Xtr=i(ua),z1e=n(ua,"P",{});var AMt=s(z1e);ztr=r(AMt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),AMt.forEach(t),Wtr=i(ua),za=n(ua,"P",{});var Kw=s(za);Qtr=r(Kw,"The model class to instantiate is selected based on the "),W1e=n(Kw,"CODE",{});var LMt=s(W1e);Htr=r(LMt,"model_type"),LMt.forEach(t),Utr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(Kw,"CODE",{});var yMt=s(Q1e);Jtr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),Ytr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(Kw,"CODE",{});var xMt=s(H1e);Ktr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),Ztr=r(Kw,":"),Kw.forEach(t),ear=i(ua),U1e=n(ua,"UL",{});var $Mt=s(U1e);iF=n($Mt,"LI",{});var CPe=s(iF);J1e=n(CPe,"STRONG",{});var kMt=s(J1e);oar=r(kMt,"vilt"),kMt.forEach(t),rar=r(CPe," \u2014 "),EW=n(CPe,"A",{href:!0});var SMt=s(EW);tar=r(SMt,"ViltForQuestionAnswering"),SMt.forEach(t),aar=r(CPe," (ViLT model)"),CPe.forEach(t),$Mt.forEach(t),nar=i(ua),dF=n(ua,"P",{});var wPe=s(dF);sar=r(wPe,"The model is set in evaluation mode by default using "),Y1e=n(wPe,"CODE",{});var RMt=s(Y1e);lar=r(RMt,"model.eval()"),RMt.forEach(t),iar=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(wPe,"CODE",{});var PMt=s(K1e);dar=r(PMt,"model.train()"),PMt.forEach(t),wPe.forEach(t),car=i(ua),T(cF.$$.fragment,ua),ua.forEach(t),dl.forEach(t),oOe=i(f),Md=n(f,"H2",{class:!0});var lXe=s(Md);fF=n(lXe,"A",{id:!0,class:!0,href:!0});var BMt=s(fF);Z1e=n(BMt,"SPAN",{});var IMt=s(Z1e);T(fy.$$.fragment,IMt),IMt.forEach(t),BMt.forEach(t),far=i(lXe),e7e=n(lXe,"SPAN",{});var NMt=s(e7e);mar=r(NMt,"AutoModelForAudioClassification"),NMt.forEach(t),lXe.forEach(t),rOe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(my.$$.fragment,cl),gar=i(cl),Ed=n(cl,"P",{});var Roe=s(Ed);har=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CW=n(Roe,"A",{href:!0});var qMt=s(CW);par=r(qMt,"from_pretrained()"),qMt.forEach(t),_ar=r(Roe," class method or the "),wW=n(Roe,"A",{href:!0});var jMt=s(wW);uar=r(jMt,"from_config()"),jMt.forEach(t),bar=r(Roe,` class
method.`),Roe.forEach(t),Far=i(cl),gy=n(cl,"P",{});var iXe=s(gy);Tar=r(iXe,"This class cannot be instantiated directly using "),o7e=n(iXe,"CODE",{});var DMt=s(o7e);Mar=r(DMt,"__init__()"),DMt.forEach(t),Ear=r(iXe," (throws an error)."),iXe.forEach(t),Car=i(cl),Ft=n(cl,"DIV",{class:!0});var Zw=s(Ft);T(hy.$$.fragment,Zw),war=i(Zw),r7e=n(Zw,"P",{});var GMt=s(r7e);Aar=r(GMt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),GMt.forEach(t),Lar=i(Zw),Cd=n(Zw,"P",{});var Poe=s(Cd);yar=r(Poe,`Note:
Loading a model from its configuration file does `),t7e=n(Poe,"STRONG",{});var OMt=s(t7e);xar=r(OMt,"not"),OMt.forEach(t),$ar=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(Poe,"A",{href:!0});var VMt=s(AW);kar=r(VMt,"from_pretrained()"),VMt.forEach(t),Sar=r(Poe," to load the model weights."),Poe.forEach(t),Rar=i(Zw),T(mF.$$.fragment,Zw),Zw.forEach(t),Par=i(cl),fo=n(cl,"DIV",{class:!0});var ba=s(fo);T(py.$$.fragment,ba),Bar=i(ba),a7e=n(ba,"P",{});var XMt=s(a7e);Iar=r(XMt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XMt.forEach(t),Nar=i(ba),Wa=n(ba,"P",{});var eA=s(Wa);qar=r(eA,"The model class to instantiate is selected based on the "),n7e=n(eA,"CODE",{});var zMt=s(n7e);jar=r(zMt,"model_type"),zMt.forEach(t),Dar=r(eA,` property of the config object (either
passed as an argument or loaded from `),s7e=n(eA,"CODE",{});var WMt=s(s7e);Gar=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),Oar=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(eA,"CODE",{});var QMt=s(l7e);Var=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),Xar=r(eA,":"),eA.forEach(t),zar=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);gF=n(ze,"LI",{});var APe=s(gF);i7e=n(APe,"STRONG",{});var HMt=s(i7e);War=r(HMt,"data2vec-audio"),HMt.forEach(t),Qar=r(APe," \u2014 "),LW=n(APe,"A",{href:!0});var UMt=s(LW);Har=r(UMt,"Data2VecAudioForSequenceClassification"),UMt.forEach(t),Uar=r(APe," (Data2VecAudio model)"),APe.forEach(t),Jar=i(ze),hF=n(ze,"LI",{});var LPe=s(hF);d7e=n(LPe,"STRONG",{});var JMt=s(d7e);Yar=r(JMt,"hubert"),JMt.forEach(t),Kar=r(LPe," \u2014 "),yW=n(LPe,"A",{href:!0});var YMt=s(yW);Zar=r(YMt,"HubertForSequenceClassification"),YMt.forEach(t),enr=r(LPe," (Hubert model)"),LPe.forEach(t),onr=i(ze),pF=n(ze,"LI",{});var yPe=s(pF);c7e=n(yPe,"STRONG",{});var KMt=s(c7e);rnr=r(KMt,"sew"),KMt.forEach(t),tnr=r(yPe," \u2014 "),xW=n(yPe,"A",{href:!0});var ZMt=s(xW);anr=r(ZMt,"SEWForSequenceClassification"),ZMt.forEach(t),nnr=r(yPe," (SEW model)"),yPe.forEach(t),snr=i(ze),_F=n(ze,"LI",{});var xPe=s(_F);f7e=n(xPe,"STRONG",{});var eEt=s(f7e);lnr=r(eEt,"sew-d"),eEt.forEach(t),inr=r(xPe," \u2014 "),$W=n(xPe,"A",{href:!0});var oEt=s($W);dnr=r(oEt,"SEWDForSequenceClassification"),oEt.forEach(t),cnr=r(xPe," (SEW-D model)"),xPe.forEach(t),fnr=i(ze),uF=n(ze,"LI",{});var $Pe=s(uF);m7e=n($Pe,"STRONG",{});var rEt=s(m7e);mnr=r(rEt,"unispeech"),rEt.forEach(t),gnr=r($Pe," \u2014 "),kW=n($Pe,"A",{href:!0});var tEt=s(kW);hnr=r(tEt,"UniSpeechForSequenceClassification"),tEt.forEach(t),pnr=r($Pe," (UniSpeech model)"),$Pe.forEach(t),_nr=i(ze),bF=n(ze,"LI",{});var kPe=s(bF);g7e=n(kPe,"STRONG",{});var aEt=s(g7e);unr=r(aEt,"unispeech-sat"),aEt.forEach(t),bnr=r(kPe," \u2014 "),SW=n(kPe,"A",{href:!0});var nEt=s(SW);vnr=r(nEt,"UniSpeechSatForSequenceClassification"),nEt.forEach(t),Fnr=r(kPe," (UniSpeechSat model)"),kPe.forEach(t),Tnr=i(ze),vF=n(ze,"LI",{});var SPe=s(vF);h7e=n(SPe,"STRONG",{});var sEt=s(h7e);Mnr=r(sEt,"wav2vec2"),sEt.forEach(t),Enr=r(SPe," \u2014 "),RW=n(SPe,"A",{href:!0});var lEt=s(RW);Cnr=r(lEt,"Wav2Vec2ForSequenceClassification"),lEt.forEach(t),wnr=r(SPe," (Wav2Vec2 model)"),SPe.forEach(t),Anr=i(ze),FF=n(ze,"LI",{});var RPe=s(FF);p7e=n(RPe,"STRONG",{});var iEt=s(p7e);Lnr=r(iEt,"wav2vec2-conformer"),iEt.forEach(t),ynr=r(RPe," \u2014 "),PW=n(RPe,"A",{href:!0});var dEt=s(PW);xnr=r(dEt,"Wav2Vec2ConformerForSequenceClassification"),dEt.forEach(t),$nr=r(RPe," (Wav2Vec2-Conformer model)"),RPe.forEach(t),knr=i(ze),TF=n(ze,"LI",{});var PPe=s(TF);_7e=n(PPe,"STRONG",{});var cEt=s(_7e);Snr=r(cEt,"wavlm"),cEt.forEach(t),Rnr=r(PPe," \u2014 "),BW=n(PPe,"A",{href:!0});var fEt=s(BW);Pnr=r(fEt,"WavLMForSequenceClassification"),fEt.forEach(t),Bnr=r(PPe," (WavLM model)"),PPe.forEach(t),ze.forEach(t),Inr=i(ba),MF=n(ba,"P",{});var BPe=s(MF);Nnr=r(BPe,"The model is set in evaluation mode by default using "),u7e=n(BPe,"CODE",{});var mEt=s(u7e);qnr=r(mEt,"model.eval()"),mEt.forEach(t),jnr=r(BPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b7e=n(BPe,"CODE",{});var gEt=s(b7e);Dnr=r(gEt,"model.train()"),gEt.forEach(t),BPe.forEach(t),Gnr=i(ba),T(EF.$$.fragment,ba),ba.forEach(t),cl.forEach(t),tOe=i(f),wd=n(f,"H2",{class:!0});var dXe=s(wd);CF=n(dXe,"A",{id:!0,class:!0,href:!0});var hEt=s(CF);v7e=n(hEt,"SPAN",{});var pEt=s(v7e);T(_y.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),Onr=i(dXe),F7e=n(dXe,"SPAN",{});var _Et=s(F7e);Vnr=r(_Et,"AutoModelForAudioFrameClassification"),_Et.forEach(t),dXe.forEach(t),aOe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(uy.$$.fragment,fl),Xnr=i(fl),Ad=n(fl,"P",{});var Boe=s(Ad);znr=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IW=n(Boe,"A",{href:!0});var uEt=s(IW);Wnr=r(uEt,"from_pretrained()"),uEt.forEach(t),Qnr=r(Boe," class method or the "),NW=n(Boe,"A",{href:!0});var bEt=s(NW);Hnr=r(bEt,"from_config()"),bEt.forEach(t),Unr=r(Boe,` class
method.`),Boe.forEach(t),Jnr=i(fl),by=n(fl,"P",{});var cXe=s(by);Ynr=r(cXe,"This class cannot be instantiated directly using "),T7e=n(cXe,"CODE",{});var vEt=s(T7e);Knr=r(vEt,"__init__()"),vEt.forEach(t),Znr=r(cXe," (throws an error)."),cXe.forEach(t),esr=i(fl),Tt=n(fl,"DIV",{class:!0});var oA=s(Tt);T(vy.$$.fragment,oA),osr=i(oA),M7e=n(oA,"P",{});var FEt=s(M7e);rsr=r(FEt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),FEt.forEach(t),tsr=i(oA),Ld=n(oA,"P",{});var Ioe=s(Ld);asr=r(Ioe,`Note:
Loading a model from its configuration file does `),E7e=n(Ioe,"STRONG",{});var TEt=s(E7e);nsr=r(TEt,"not"),TEt.forEach(t),ssr=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(Ioe,"A",{href:!0});var MEt=s(qW);lsr=r(MEt,"from_pretrained()"),MEt.forEach(t),isr=r(Ioe," to load the model weights."),Ioe.forEach(t),dsr=i(oA),T(wF.$$.fragment,oA),oA.forEach(t),csr=i(fl),mo=n(fl,"DIV",{class:!0});var va=s(mo);T(Fy.$$.fragment,va),fsr=i(va),C7e=n(va,"P",{});var EEt=s(C7e);msr=r(EEt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),EEt.forEach(t),gsr=i(va),Qa=n(va,"P",{});var rA=s(Qa);hsr=r(rA,"The model class to instantiate is selected based on the "),w7e=n(rA,"CODE",{});var CEt=s(w7e);psr=r(CEt,"model_type"),CEt.forEach(t),_sr=r(rA,` property of the config object (either
passed as an argument or loaded from `),A7e=n(rA,"CODE",{});var wEt=s(A7e);usr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),bsr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=n(rA,"CODE",{});var AEt=s(L7e);vsr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),Fsr=r(rA,":"),rA.forEach(t),Tsr=i(va),et=n(va,"UL",{});var ml=s(et);AF=n(ml,"LI",{});var IPe=s(AF);y7e=n(IPe,"STRONG",{});var LEt=s(y7e);Msr=r(LEt,"data2vec-audio"),LEt.forEach(t),Esr=r(IPe," \u2014 "),jW=n(IPe,"A",{href:!0});var yEt=s(jW);Csr=r(yEt,"Data2VecAudioForAudioFrameClassification"),yEt.forEach(t),wsr=r(IPe," (Data2VecAudio model)"),IPe.forEach(t),Asr=i(ml),LF=n(ml,"LI",{});var NPe=s(LF);x7e=n(NPe,"STRONG",{});var xEt=s(x7e);Lsr=r(xEt,"unispeech-sat"),xEt.forEach(t),ysr=r(NPe," \u2014 "),DW=n(NPe,"A",{href:!0});var $Et=s(DW);xsr=r($Et,"UniSpeechSatForAudioFrameClassification"),$Et.forEach(t),$sr=r(NPe," (UniSpeechSat model)"),NPe.forEach(t),ksr=i(ml),yF=n(ml,"LI",{});var qPe=s(yF);$7e=n(qPe,"STRONG",{});var kEt=s($7e);Ssr=r(kEt,"wav2vec2"),kEt.forEach(t),Rsr=r(qPe," \u2014 "),GW=n(qPe,"A",{href:!0});var SEt=s(GW);Psr=r(SEt,"Wav2Vec2ForAudioFrameClassification"),SEt.forEach(t),Bsr=r(qPe," (Wav2Vec2 model)"),qPe.forEach(t),Isr=i(ml),xF=n(ml,"LI",{});var jPe=s(xF);k7e=n(jPe,"STRONG",{});var REt=s(k7e);Nsr=r(REt,"wav2vec2-conformer"),REt.forEach(t),qsr=r(jPe," \u2014 "),OW=n(jPe,"A",{href:!0});var PEt=s(OW);jsr=r(PEt,"Wav2Vec2ConformerForAudioFrameClassification"),PEt.forEach(t),Dsr=r(jPe," (Wav2Vec2-Conformer model)"),jPe.forEach(t),Gsr=i(ml),$F=n(ml,"LI",{});var DPe=s($F);S7e=n(DPe,"STRONG",{});var BEt=s(S7e);Osr=r(BEt,"wavlm"),BEt.forEach(t),Vsr=r(DPe," \u2014 "),VW=n(DPe,"A",{href:!0});var IEt=s(VW);Xsr=r(IEt,"WavLMForAudioFrameClassification"),IEt.forEach(t),zsr=r(DPe," (WavLM model)"),DPe.forEach(t),ml.forEach(t),Wsr=i(va),kF=n(va,"P",{});var GPe=s(kF);Qsr=r(GPe,"The model is set in evaluation mode by default using "),R7e=n(GPe,"CODE",{});var NEt=s(R7e);Hsr=r(NEt,"model.eval()"),NEt.forEach(t),Usr=r(GPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P7e=n(GPe,"CODE",{});var qEt=s(P7e);Jsr=r(qEt,"model.train()"),qEt.forEach(t),GPe.forEach(t),Ysr=i(va),T(SF.$$.fragment,va),va.forEach(t),fl.forEach(t),nOe=i(f),yd=n(f,"H2",{class:!0});var fXe=s(yd);RF=n(fXe,"A",{id:!0,class:!0,href:!0});var jEt=s(RF);B7e=n(jEt,"SPAN",{});var DEt=s(B7e);T(Ty.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),Ksr=i(fXe),I7e=n(fXe,"SPAN",{});var GEt=s(I7e);Zsr=r(GEt,"AutoModelForCTC"),GEt.forEach(t),fXe.forEach(t),sOe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(My.$$.fragment,gl),elr=i(gl),xd=n(gl,"P",{});var Noe=s(xd);olr=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XW=n(Noe,"A",{href:!0});var OEt=s(XW);rlr=r(OEt,"from_pretrained()"),OEt.forEach(t),tlr=r(Noe," class method or the "),zW=n(Noe,"A",{href:!0});var VEt=s(zW);alr=r(VEt,"from_config()"),VEt.forEach(t),nlr=r(Noe,` class
method.`),Noe.forEach(t),slr=i(gl),Ey=n(gl,"P",{});var mXe=s(Ey);llr=r(mXe,"This class cannot be instantiated directly using "),N7e=n(mXe,"CODE",{});var XEt=s(N7e);ilr=r(XEt,"__init__()"),XEt.forEach(t),dlr=r(mXe," (throws an error)."),mXe.forEach(t),clr=i(gl),Mt=n(gl,"DIV",{class:!0});var tA=s(Mt);T(Cy.$$.fragment,tA),flr=i(tA),q7e=n(tA,"P",{});var zEt=s(q7e);mlr=r(zEt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zEt.forEach(t),glr=i(tA),$d=n(tA,"P",{});var qoe=s($d);hlr=r(qoe,`Note:
Loading a model from its configuration file does `),j7e=n(qoe,"STRONG",{});var WEt=s(j7e);plr=r(WEt,"not"),WEt.forEach(t),_lr=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(qoe,"A",{href:!0});var QEt=s(WW);ulr=r(QEt,"from_pretrained()"),QEt.forEach(t),blr=r(qoe," to load the model weights."),qoe.forEach(t),vlr=i(tA),T(PF.$$.fragment,tA),tA.forEach(t),Flr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(wy.$$.fragment,Fa),Tlr=i(Fa),D7e=n(Fa,"P",{});var HEt=s(D7e);Mlr=r(HEt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),HEt.forEach(t),Elr=i(Fa),Ha=n(Fa,"P",{});var aA=s(Ha);Clr=r(aA,"The model class to instantiate is selected based on the "),G7e=n(aA,"CODE",{});var UEt=s(G7e);wlr=r(UEt,"model_type"),UEt.forEach(t),Alr=r(aA,` property of the config object (either
passed as an argument or loaded from `),O7e=n(aA,"CODE",{});var JEt=s(O7e);Llr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),ylr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V7e=n(aA,"CODE",{});var YEt=s(V7e);xlr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),$lr=r(aA,":"),aA.forEach(t),klr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);BF=n(Be,"LI",{});var OPe=s(BF);X7e=n(OPe,"STRONG",{});var KEt=s(X7e);Slr=r(KEt,"data2vec-audio"),KEt.forEach(t),Rlr=r(OPe," \u2014 "),QW=n(OPe,"A",{href:!0});var ZEt=s(QW);Plr=r(ZEt,"Data2VecAudioForCTC"),ZEt.forEach(t),Blr=r(OPe," (Data2VecAudio model)"),OPe.forEach(t),Ilr=i(Be),IF=n(Be,"LI",{});var VPe=s(IF);z7e=n(VPe,"STRONG",{});var e4t=s(z7e);Nlr=r(e4t,"hubert"),e4t.forEach(t),qlr=r(VPe," \u2014 "),HW=n(VPe,"A",{href:!0});var o4t=s(HW);jlr=r(o4t,"HubertForCTC"),o4t.forEach(t),Dlr=r(VPe," (Hubert model)"),VPe.forEach(t),Glr=i(Be),NF=n(Be,"LI",{});var XPe=s(NF);W7e=n(XPe,"STRONG",{});var r4t=s(W7e);Olr=r(r4t,"mctct"),r4t.forEach(t),Vlr=r(XPe," \u2014 "),UW=n(XPe,"A",{href:!0});var t4t=s(UW);Xlr=r(t4t,"MCTCTForCTC"),t4t.forEach(t),zlr=r(XPe," (M-CTC-T model)"),XPe.forEach(t),Wlr=i(Be),qF=n(Be,"LI",{});var zPe=s(qF);Q7e=n(zPe,"STRONG",{});var a4t=s(Q7e);Qlr=r(a4t,"sew"),a4t.forEach(t),Hlr=r(zPe," \u2014 "),JW=n(zPe,"A",{href:!0});var n4t=s(JW);Ulr=r(n4t,"SEWForCTC"),n4t.forEach(t),Jlr=r(zPe," (SEW model)"),zPe.forEach(t),Ylr=i(Be),jF=n(Be,"LI",{});var WPe=s(jF);H7e=n(WPe,"STRONG",{});var s4t=s(H7e);Klr=r(s4t,"sew-d"),s4t.forEach(t),Zlr=r(WPe," \u2014 "),YW=n(WPe,"A",{href:!0});var l4t=s(YW);eir=r(l4t,"SEWDForCTC"),l4t.forEach(t),oir=r(WPe," (SEW-D model)"),WPe.forEach(t),rir=i(Be),DF=n(Be,"LI",{});var QPe=s(DF);U7e=n(QPe,"STRONG",{});var i4t=s(U7e);tir=r(i4t,"unispeech"),i4t.forEach(t),air=r(QPe," \u2014 "),KW=n(QPe,"A",{href:!0});var d4t=s(KW);nir=r(d4t,"UniSpeechForCTC"),d4t.forEach(t),sir=r(QPe," (UniSpeech model)"),QPe.forEach(t),lir=i(Be),GF=n(Be,"LI",{});var HPe=s(GF);J7e=n(HPe,"STRONG",{});var c4t=s(J7e);iir=r(c4t,"unispeech-sat"),c4t.forEach(t),dir=r(HPe," \u2014 "),ZW=n(HPe,"A",{href:!0});var f4t=s(ZW);cir=r(f4t,"UniSpeechSatForCTC"),f4t.forEach(t),fir=r(HPe," (UniSpeechSat model)"),HPe.forEach(t),mir=i(Be),OF=n(Be,"LI",{});var UPe=s(OF);Y7e=n(UPe,"STRONG",{});var m4t=s(Y7e);gir=r(m4t,"wav2vec2"),m4t.forEach(t),hir=r(UPe," \u2014 "),eQ=n(UPe,"A",{href:!0});var g4t=s(eQ);pir=r(g4t,"Wav2Vec2ForCTC"),g4t.forEach(t),_ir=r(UPe," (Wav2Vec2 model)"),UPe.forEach(t),uir=i(Be),VF=n(Be,"LI",{});var JPe=s(VF);K7e=n(JPe,"STRONG",{});var h4t=s(K7e);bir=r(h4t,"wav2vec2-conformer"),h4t.forEach(t),vir=r(JPe," \u2014 "),oQ=n(JPe,"A",{href:!0});var p4t=s(oQ);Fir=r(p4t,"Wav2Vec2ConformerForCTC"),p4t.forEach(t),Tir=r(JPe," (Wav2Vec2-Conformer model)"),JPe.forEach(t),Mir=i(Be),XF=n(Be,"LI",{});var YPe=s(XF);Z7e=n(YPe,"STRONG",{});var _4t=s(Z7e);Eir=r(_4t,"wavlm"),_4t.forEach(t),Cir=r(YPe," \u2014 "),rQ=n(YPe,"A",{href:!0});var u4t=s(rQ);wir=r(u4t,"WavLMForCTC"),u4t.forEach(t),Air=r(YPe," (WavLM model)"),YPe.forEach(t),Be.forEach(t),Lir=i(Fa),zF=n(Fa,"P",{});var KPe=s(zF);yir=r(KPe,"The model is set in evaluation mode by default using "),e9e=n(KPe,"CODE",{});var b4t=s(e9e);xir=r(b4t,"model.eval()"),b4t.forEach(t),$ir=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o9e=n(KPe,"CODE",{});var v4t=s(o9e);kir=r(v4t,"model.train()"),v4t.forEach(t),KPe.forEach(t),Sir=i(Fa),T(WF.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),lOe=i(f),kd=n(f,"H2",{class:!0});var gXe=s(kd);QF=n(gXe,"A",{id:!0,class:!0,href:!0});var F4t=s(QF);r9e=n(F4t,"SPAN",{});var T4t=s(r9e);T(Ay.$$.fragment,T4t),T4t.forEach(t),F4t.forEach(t),Rir=i(gXe),t9e=n(gXe,"SPAN",{});var M4t=s(t9e);Pir=r(M4t,"AutoModelForSpeechSeq2Seq"),M4t.forEach(t),gXe.forEach(t),iOe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(Ly.$$.fragment,hl),Bir=i(hl),Sd=n(hl,"P",{});var joe=s(Sd);Iir=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tQ=n(joe,"A",{href:!0});var E4t=s(tQ);Nir=r(E4t,"from_pretrained()"),E4t.forEach(t),qir=r(joe," class method or the "),aQ=n(joe,"A",{href:!0});var C4t=s(aQ);jir=r(C4t,"from_config()"),C4t.forEach(t),Dir=r(joe,` class
method.`),joe.forEach(t),Gir=i(hl),yy=n(hl,"P",{});var hXe=s(yy);Oir=r(hXe,"This class cannot be instantiated directly using "),a9e=n(hXe,"CODE",{});var w4t=s(a9e);Vir=r(w4t,"__init__()"),w4t.forEach(t),Xir=r(hXe," (throws an error)."),hXe.forEach(t),zir=i(hl),Et=n(hl,"DIV",{class:!0});var nA=s(Et);T(xy.$$.fragment,nA),Wir=i(nA),n9e=n(nA,"P",{});var A4t=s(n9e);Qir=r(A4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A4t.forEach(t),Hir=i(nA),Rd=n(nA,"P",{});var Doe=s(Rd);Uir=r(Doe,`Note:
Loading a model from its configuration file does `),s9e=n(Doe,"STRONG",{});var L4t=s(s9e);Jir=r(L4t,"not"),L4t.forEach(t),Yir=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nQ=n(Doe,"A",{href:!0});var y4t=s(nQ);Kir=r(y4t,"from_pretrained()"),y4t.forEach(t),Zir=r(Doe," to load the model weights."),Doe.forEach(t),edr=i(nA),T(HF.$$.fragment,nA),nA.forEach(t),odr=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T($y.$$.fragment,Ta),rdr=i(Ta),l9e=n(Ta,"P",{});var x4t=s(l9e);tdr=r(x4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),x4t.forEach(t),adr=i(Ta),Ua=n(Ta,"P",{});var sA=s(Ua);ndr=r(sA,"The model class to instantiate is selected based on the "),i9e=n(sA,"CODE",{});var $4t=s(i9e);sdr=r($4t,"model_type"),$4t.forEach(t),ldr=r(sA,` property of the config object (either
passed as an argument or loaded from `),d9e=n(sA,"CODE",{});var k4t=s(d9e);idr=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),ddr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=n(sA,"CODE",{});var S4t=s(c9e);cdr=r(S4t,"pretrained_model_name_or_path"),S4t.forEach(t),fdr=r(sA,":"),sA.forEach(t),mdr=i(Ta),ky=n(Ta,"UL",{});var pXe=s(ky);UF=n(pXe,"LI",{});var ZPe=s(UF);f9e=n(ZPe,"STRONG",{});var R4t=s(f9e);gdr=r(R4t,"speech-encoder-decoder"),R4t.forEach(t),hdr=r(ZPe," \u2014 "),sQ=n(ZPe,"A",{href:!0});var P4t=s(sQ);pdr=r(P4t,"SpeechEncoderDecoderModel"),P4t.forEach(t),_dr=r(ZPe," (Speech Encoder decoder model)"),ZPe.forEach(t),udr=i(pXe),JF=n(pXe,"LI",{});var eBe=s(JF);m9e=n(eBe,"STRONG",{});var B4t=s(m9e);bdr=r(B4t,"speech_to_text"),B4t.forEach(t),vdr=r(eBe," \u2014 "),lQ=n(eBe,"A",{href:!0});var I4t=s(lQ);Fdr=r(I4t,"Speech2TextForConditionalGeneration"),I4t.forEach(t),Tdr=r(eBe," (Speech2Text model)"),eBe.forEach(t),pXe.forEach(t),Mdr=i(Ta),YF=n(Ta,"P",{});var oBe=s(YF);Edr=r(oBe,"The model is set in evaluation mode by default using "),g9e=n(oBe,"CODE",{});var N4t=s(g9e);Cdr=r(N4t,"model.eval()"),N4t.forEach(t),wdr=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h9e=n(oBe,"CODE",{});var q4t=s(h9e);Adr=r(q4t,"model.train()"),q4t.forEach(t),oBe.forEach(t),Ldr=i(Ta),T(KF.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),dOe=i(f),Pd=n(f,"H2",{class:!0});var _Xe=s(Pd);ZF=n(_Xe,"A",{id:!0,class:!0,href:!0});var j4t=s(ZF);p9e=n(j4t,"SPAN",{});var D4t=s(p9e);T(Sy.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),ydr=i(_Xe),_9e=n(_Xe,"SPAN",{});var G4t=s(_9e);xdr=r(G4t,"AutoModelForAudioXVector"),G4t.forEach(t),_Xe.forEach(t),cOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(Ry.$$.fragment,pl),$dr=i(pl),Bd=n(pl,"P",{});var Goe=s(Bd);kdr=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),iQ=n(Goe,"A",{href:!0});var O4t=s(iQ);Sdr=r(O4t,"from_pretrained()"),O4t.forEach(t),Rdr=r(Goe," class method or the "),dQ=n(Goe,"A",{href:!0});var V4t=s(dQ);Pdr=r(V4t,"from_config()"),V4t.forEach(t),Bdr=r(Goe,` class
method.`),Goe.forEach(t),Idr=i(pl),Py=n(pl,"P",{});var uXe=s(Py);Ndr=r(uXe,"This class cannot be instantiated directly using "),u9e=n(uXe,"CODE",{});var X4t=s(u9e);qdr=r(X4t,"__init__()"),X4t.forEach(t),jdr=r(uXe," (throws an error)."),uXe.forEach(t),Ddr=i(pl),Ct=n(pl,"DIV",{class:!0});var lA=s(Ct);T(By.$$.fragment,lA),Gdr=i(lA),b9e=n(lA,"P",{});var z4t=s(b9e);Odr=r(z4t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),z4t.forEach(t),Vdr=i(lA),Id=n(lA,"P",{});var Ooe=s(Id);Xdr=r(Ooe,`Note:
Loading a model from its configuration file does `),v9e=n(Ooe,"STRONG",{});var W4t=s(v9e);zdr=r(W4t,"not"),W4t.forEach(t),Wdr=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(Ooe,"A",{href:!0});var Q4t=s(cQ);Qdr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),Hdr=r(Ooe," to load the model weights."),Ooe.forEach(t),Udr=i(lA),T(eT.$$.fragment,lA),lA.forEach(t),Jdr=i(pl),po=n(pl,"DIV",{class:!0});var Ma=s(po);T(Iy.$$.fragment,Ma),Ydr=i(Ma),F9e=n(Ma,"P",{});var H4t=s(F9e);Kdr=r(H4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),H4t.forEach(t),Zdr=i(Ma),Ja=n(Ma,"P",{});var iA=s(Ja);ecr=r(iA,"The model class to instantiate is selected based on the "),T9e=n(iA,"CODE",{});var U4t=s(T9e);ocr=r(U4t,"model_type"),U4t.forEach(t),rcr=r(iA,` property of the config object (either
passed as an argument or loaded from `),M9e=n(iA,"CODE",{});var J4t=s(M9e);tcr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),acr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E9e=n(iA,"CODE",{});var Y4t=s(E9e);ncr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),scr=r(iA,":"),iA.forEach(t),lcr=i(Ma),ot=n(Ma,"UL",{});var _l=s(ot);oT=n(_l,"LI",{});var rBe=s(oT);C9e=n(rBe,"STRONG",{});var K4t=s(C9e);icr=r(K4t,"data2vec-audio"),K4t.forEach(t),dcr=r(rBe," \u2014 "),fQ=n(rBe,"A",{href:!0});var Z4t=s(fQ);ccr=r(Z4t,"Data2VecAudioForXVector"),Z4t.forEach(t),fcr=r(rBe," (Data2VecAudio model)"),rBe.forEach(t),mcr=i(_l),rT=n(_l,"LI",{});var tBe=s(rT);w9e=n(tBe,"STRONG",{});var eCt=s(w9e);gcr=r(eCt,"unispeech-sat"),eCt.forEach(t),hcr=r(tBe," \u2014 "),mQ=n(tBe,"A",{href:!0});var oCt=s(mQ);pcr=r(oCt,"UniSpeechSatForXVector"),oCt.forEach(t),_cr=r(tBe," (UniSpeechSat model)"),tBe.forEach(t),ucr=i(_l),tT=n(_l,"LI",{});var aBe=s(tT);A9e=n(aBe,"STRONG",{});var rCt=s(A9e);bcr=r(rCt,"wav2vec2"),rCt.forEach(t),vcr=r(aBe," \u2014 "),gQ=n(aBe,"A",{href:!0});var tCt=s(gQ);Fcr=r(tCt,"Wav2Vec2ForXVector"),tCt.forEach(t),Tcr=r(aBe," (Wav2Vec2 model)"),aBe.forEach(t),Mcr=i(_l),aT=n(_l,"LI",{});var nBe=s(aT);L9e=n(nBe,"STRONG",{});var aCt=s(L9e);Ecr=r(aCt,"wav2vec2-conformer"),aCt.forEach(t),Ccr=r(nBe," \u2014 "),hQ=n(nBe,"A",{href:!0});var nCt=s(hQ);wcr=r(nCt,"Wav2Vec2ConformerForXVector"),nCt.forEach(t),Acr=r(nBe," (Wav2Vec2-Conformer model)"),nBe.forEach(t),Lcr=i(_l),nT=n(_l,"LI",{});var sBe=s(nT);y9e=n(sBe,"STRONG",{});var sCt=s(y9e);ycr=r(sCt,"wavlm"),sCt.forEach(t),xcr=r(sBe," \u2014 "),pQ=n(sBe,"A",{href:!0});var lCt=s(pQ);$cr=r(lCt,"WavLMForXVector"),lCt.forEach(t),kcr=r(sBe," (WavLM model)"),sBe.forEach(t),_l.forEach(t),Scr=i(Ma),sT=n(Ma,"P",{});var lBe=s(sT);Rcr=r(lBe,"The model is set in evaluation mode by default using "),x9e=n(lBe,"CODE",{});var iCt=s(x9e);Pcr=r(iCt,"model.eval()"),iCt.forEach(t),Bcr=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$9e=n(lBe,"CODE",{});var dCt=s($9e);Icr=r(dCt,"model.train()"),dCt.forEach(t),lBe.forEach(t),Ncr=i(Ma),T(lT.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),fOe=i(f),Nd=n(f,"H2",{class:!0});var bXe=s(Nd);iT=n(bXe,"A",{id:!0,class:!0,href:!0});var cCt=s(iT);k9e=n(cCt,"SPAN",{});var fCt=s(k9e);T(Ny.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),qcr=i(bXe),S9e=n(bXe,"SPAN",{});var mCt=s(S9e);jcr=r(mCt,"AutoModelForMaskedImageModeling"),mCt.forEach(t),bXe.forEach(t),mOe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(qy.$$.fragment,ul),Dcr=i(ul),qd=n(ul,"P",{});var Voe=s(qd);Gcr=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),_Q=n(Voe,"A",{href:!0});var gCt=s(_Q);Ocr=r(gCt,"from_pretrained()"),gCt.forEach(t),Vcr=r(Voe," class method or the "),uQ=n(Voe,"A",{href:!0});var hCt=s(uQ);Xcr=r(hCt,"from_config()"),hCt.forEach(t),zcr=r(Voe,` class
method.`),Voe.forEach(t),Wcr=i(ul),jy=n(ul,"P",{});var vXe=s(jy);Qcr=r(vXe,"This class cannot be instantiated directly using "),R9e=n(vXe,"CODE",{});var pCt=s(R9e);Hcr=r(pCt,"__init__()"),pCt.forEach(t),Ucr=r(vXe," (throws an error)."),vXe.forEach(t),Jcr=i(ul),wt=n(ul,"DIV",{class:!0});var dA=s(wt);T(Dy.$$.fragment,dA),Ycr=i(dA),P9e=n(dA,"P",{});var _Ct=s(P9e);Kcr=r(_Ct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_Ct.forEach(t),Zcr=i(dA),jd=n(dA,"P",{});var Xoe=s(jd);efr=r(Xoe,`Note:
Loading a model from its configuration file does `),B9e=n(Xoe,"STRONG",{});var uCt=s(B9e);ofr=r(uCt,"not"),uCt.forEach(t),rfr=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(Xoe,"A",{href:!0});var bCt=s(bQ);tfr=r(bCt,"from_pretrained()"),bCt.forEach(t),afr=r(Xoe," to load the model weights."),Xoe.forEach(t),nfr=i(dA),T(dT.$$.fragment,dA),dA.forEach(t),sfr=i(ul),_o=n(ul,"DIV",{class:!0});var Ea=s(_o);T(Gy.$$.fragment,Ea),lfr=i(Ea),I9e=n(Ea,"P",{});var vCt=s(I9e);ifr=r(vCt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),vCt.forEach(t),dfr=i(Ea),Ya=n(Ea,"P",{});var cA=s(Ya);cfr=r(cA,"The model class to instantiate is selected based on the "),N9e=n(cA,"CODE",{});var FCt=s(N9e);ffr=r(FCt,"model_type"),FCt.forEach(t),mfr=r(cA,` property of the config object (either
passed as an argument or loaded from `),q9e=n(cA,"CODE",{});var TCt=s(q9e);gfr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),hfr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=n(cA,"CODE",{});var MCt=s(j9e);pfr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),_fr=r(cA,":"),cA.forEach(t),ufr=i(Ea),Dd=n(Ea,"UL",{});var zoe=s(Dd);cT=n(zoe,"LI",{});var iBe=s(cT);D9e=n(iBe,"STRONG",{});var ECt=s(D9e);bfr=r(ECt,"deit"),ECt.forEach(t),vfr=r(iBe," \u2014 "),vQ=n(iBe,"A",{href:!0});var CCt=s(vQ);Ffr=r(CCt,"DeiTForMaskedImageModeling"),CCt.forEach(t),Tfr=r(iBe," (DeiT model)"),iBe.forEach(t),Mfr=i(zoe),fT=n(zoe,"LI",{});var dBe=s(fT);G9e=n(dBe,"STRONG",{});var wCt=s(G9e);Efr=r(wCt,"swin"),wCt.forEach(t),Cfr=r(dBe," \u2014 "),FQ=n(dBe,"A",{href:!0});var ACt=s(FQ);wfr=r(ACt,"SwinForMaskedImageModeling"),ACt.forEach(t),Afr=r(dBe," (Swin Transformer model)"),dBe.forEach(t),Lfr=i(zoe),mT=n(zoe,"LI",{});var cBe=s(mT);O9e=n(cBe,"STRONG",{});var LCt=s(O9e);yfr=r(LCt,"vit"),LCt.forEach(t),xfr=r(cBe," \u2014 "),TQ=n(cBe,"A",{href:!0});var yCt=s(TQ);$fr=r(yCt,"ViTForMaskedImageModeling"),yCt.forEach(t),kfr=r(cBe," (ViT model)"),cBe.forEach(t),zoe.forEach(t),Sfr=i(Ea),gT=n(Ea,"P",{});var fBe=s(gT);Rfr=r(fBe,"The model is set in evaluation mode by default using "),V9e=n(fBe,"CODE",{});var xCt=s(V9e);Pfr=r(xCt,"model.eval()"),xCt.forEach(t),Bfr=r(fBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X9e=n(fBe,"CODE",{});var $Ct=s(X9e);Ifr=r($Ct,"model.train()"),$Ct.forEach(t),fBe.forEach(t),Nfr=i(Ea),T(hT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),gOe=i(f),Gd=n(f,"H2",{class:!0});var FXe=s(Gd);pT=n(FXe,"A",{id:!0,class:!0,href:!0});var kCt=s(pT);z9e=n(kCt,"SPAN",{});var SCt=s(z9e);T(Oy.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),qfr=i(FXe),W9e=n(FXe,"SPAN",{});var RCt=s(W9e);jfr=r(RCt,"AutoModelForObjectDetection"),RCt.forEach(t),FXe.forEach(t),hOe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(Vy.$$.fragment,bl),Dfr=i(bl),Od=n(bl,"P",{});var Woe=s(Od);Gfr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MQ=n(Woe,"A",{href:!0});var PCt=s(MQ);Ofr=r(PCt,"from_pretrained()"),PCt.forEach(t),Vfr=r(Woe," class method or the "),EQ=n(Woe,"A",{href:!0});var BCt=s(EQ);Xfr=r(BCt,"from_config()"),BCt.forEach(t),zfr=r(Woe,` class
method.`),Woe.forEach(t),Wfr=i(bl),Xy=n(bl,"P",{});var TXe=s(Xy);Qfr=r(TXe,"This class cannot be instantiated directly using "),Q9e=n(TXe,"CODE",{});var ICt=s(Q9e);Hfr=r(ICt,"__init__()"),ICt.forEach(t),Ufr=r(TXe," (throws an error)."),TXe.forEach(t),Jfr=i(bl),At=n(bl,"DIV",{class:!0});var fA=s(At);T(zy.$$.fragment,fA),Yfr=i(fA),H9e=n(fA,"P",{});var NCt=s(H9e);Kfr=r(NCt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),NCt.forEach(t),Zfr=i(fA),Vd=n(fA,"P",{});var Qoe=s(Vd);emr=r(Qoe,`Note:
Loading a model from its configuration file does `),U9e=n(Qoe,"STRONG",{});var qCt=s(U9e);omr=r(qCt,"not"),qCt.forEach(t),rmr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(Qoe,"A",{href:!0});var jCt=s(CQ);tmr=r(jCt,"from_pretrained()"),jCt.forEach(t),amr=r(Qoe," to load the model weights."),Qoe.forEach(t),nmr=i(fA),T(_T.$$.fragment,fA),fA.forEach(t),smr=i(bl),uo=n(bl,"DIV",{class:!0});var Ca=s(uo);T(Wy.$$.fragment,Ca),lmr=i(Ca),J9e=n(Ca,"P",{});var DCt=s(J9e);imr=r(DCt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),DCt.forEach(t),dmr=i(Ca),Ka=n(Ca,"P",{});var mA=s(Ka);cmr=r(mA,"The model class to instantiate is selected based on the "),Y9e=n(mA,"CODE",{});var GCt=s(Y9e);fmr=r(GCt,"model_type"),GCt.forEach(t),mmr=r(mA,` property of the config object (either
passed as an argument or loaded from `),K9e=n(mA,"CODE",{});var OCt=s(K9e);gmr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),hmr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z9e=n(mA,"CODE",{});var VCt=s(Z9e);pmr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),_mr=r(mA,":"),mA.forEach(t),umr=i(Ca),Qy=n(Ca,"UL",{});var MXe=s(Qy);uT=n(MXe,"LI",{});var mBe=s(uT);ebe=n(mBe,"STRONG",{});var XCt=s(ebe);bmr=r(XCt,"detr"),XCt.forEach(t),vmr=r(mBe," \u2014 "),wQ=n(mBe,"A",{href:!0});var zCt=s(wQ);Fmr=r(zCt,"DetrForObjectDetection"),zCt.forEach(t),Tmr=r(mBe," (DETR model)"),mBe.forEach(t),Mmr=i(MXe),bT=n(MXe,"LI",{});var gBe=s(bT);obe=n(gBe,"STRONG",{});var WCt=s(obe);Emr=r(WCt,"yolos"),WCt.forEach(t),Cmr=r(gBe," \u2014 "),AQ=n(gBe,"A",{href:!0});var QCt=s(AQ);wmr=r(QCt,"YolosForObjectDetection"),QCt.forEach(t),Amr=r(gBe," (YOLOS model)"),gBe.forEach(t),MXe.forEach(t),Lmr=i(Ca),vT=n(Ca,"P",{});var hBe=s(vT);ymr=r(hBe,"The model is set in evaluation mode by default using "),rbe=n(hBe,"CODE",{});var HCt=s(rbe);xmr=r(HCt,"model.eval()"),HCt.forEach(t),$mr=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(hBe,"CODE",{});var UCt=s(tbe);kmr=r(UCt,"model.train()"),UCt.forEach(t),hBe.forEach(t),Smr=i(Ca),T(FT.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),pOe=i(f),Xd=n(f,"H2",{class:!0});var EXe=s(Xd);TT=n(EXe,"A",{id:!0,class:!0,href:!0});var JCt=s(TT);abe=n(JCt,"SPAN",{});var YCt=s(abe);T(Hy.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),Rmr=i(EXe),nbe=n(EXe,"SPAN",{});var KCt=s(nbe);Pmr=r(KCt,"AutoModelForImageSegmentation"),KCt.forEach(t),EXe.forEach(t),_Oe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(Uy.$$.fragment,vl),Bmr=i(vl),zd=n(vl,"P",{});var Hoe=s(zd);Imr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LQ=n(Hoe,"A",{href:!0});var ZCt=s(LQ);Nmr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),qmr=r(Hoe," class method or the "),yQ=n(Hoe,"A",{href:!0});var e5t=s(yQ);jmr=r(e5t,"from_config()"),e5t.forEach(t),Dmr=r(Hoe,` class
method.`),Hoe.forEach(t),Gmr=i(vl),Jy=n(vl,"P",{});var CXe=s(Jy);Omr=r(CXe,"This class cannot be instantiated directly using "),sbe=n(CXe,"CODE",{});var o5t=s(sbe);Vmr=r(o5t,"__init__()"),o5t.forEach(t),Xmr=r(CXe," (throws an error)."),CXe.forEach(t),zmr=i(vl),Lt=n(vl,"DIV",{class:!0});var gA=s(Lt);T(Yy.$$.fragment,gA),Wmr=i(gA),lbe=n(gA,"P",{});var r5t=s(lbe);Qmr=r(r5t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),r5t.forEach(t),Hmr=i(gA),Wd=n(gA,"P",{});var Uoe=s(Wd);Umr=r(Uoe,`Note:
Loading a model from its configuration file does `),ibe=n(Uoe,"STRONG",{});var t5t=s(ibe);Jmr=r(t5t,"not"),t5t.forEach(t),Ymr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(Uoe,"A",{href:!0});var a5t=s(xQ);Kmr=r(a5t,"from_pretrained()"),a5t.forEach(t),Zmr=r(Uoe," to load the model weights."),Uoe.forEach(t),egr=i(gA),T(MT.$$.fragment,gA),gA.forEach(t),ogr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(Ky.$$.fragment,wa),rgr=i(wa),dbe=n(wa,"P",{});var n5t=s(dbe);tgr=r(n5t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),n5t.forEach(t),agr=i(wa),Za=n(wa,"P",{});var hA=s(Za);ngr=r(hA,"The model class to instantiate is selected based on the "),cbe=n(hA,"CODE",{});var s5t=s(cbe);sgr=r(s5t,"model_type"),s5t.forEach(t),lgr=r(hA,` property of the config object (either
passed as an argument or loaded from `),fbe=n(hA,"CODE",{});var l5t=s(fbe);igr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),dgr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(hA,"CODE",{});var i5t=s(mbe);cgr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),fgr=r(hA,":"),hA.forEach(t),mgr=i(wa),gbe=n(wa,"UL",{});var d5t=s(gbe);ET=n(d5t,"LI",{});var pBe=s(ET);hbe=n(pBe,"STRONG",{});var c5t=s(hbe);ggr=r(c5t,"detr"),c5t.forEach(t),hgr=r(pBe," \u2014 "),$Q=n(pBe,"A",{href:!0});var f5t=s($Q);pgr=r(f5t,"DetrForSegmentation"),f5t.forEach(t),_gr=r(pBe," (DETR model)"),pBe.forEach(t),d5t.forEach(t),ugr=i(wa),CT=n(wa,"P",{});var _Be=s(CT);bgr=r(_Be,"The model is set in evaluation mode by default using "),pbe=n(_Be,"CODE",{});var m5t=s(pbe);vgr=r(m5t,"model.eval()"),m5t.forEach(t),Fgr=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(_Be,"CODE",{});var g5t=s(_be);Tgr=r(g5t,"model.train()"),g5t.forEach(t),_Be.forEach(t),Mgr=i(wa),T(wT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),uOe=i(f),Qd=n(f,"H2",{class:!0});var wXe=s(Qd);AT=n(wXe,"A",{id:!0,class:!0,href:!0});var h5t=s(AT);ube=n(h5t,"SPAN",{});var p5t=s(ube);T(Zy.$$.fragment,p5t),p5t.forEach(t),h5t.forEach(t),Egr=i(wXe),bbe=n(wXe,"SPAN",{});var _5t=s(bbe);Cgr=r(_5t,"AutoModelForSemanticSegmentation"),_5t.forEach(t),wXe.forEach(t),bOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(e8.$$.fragment,Fl),wgr=i(Fl),Hd=n(Fl,"P",{});var Joe=s(Hd);Agr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kQ=n(Joe,"A",{href:!0});var u5t=s(kQ);Lgr=r(u5t,"from_pretrained()"),u5t.forEach(t),ygr=r(Joe," class method or the "),SQ=n(Joe,"A",{href:!0});var b5t=s(SQ);xgr=r(b5t,"from_config()"),b5t.forEach(t),$gr=r(Joe,` class
method.`),Joe.forEach(t),kgr=i(Fl),o8=n(Fl,"P",{});var AXe=s(o8);Sgr=r(AXe,"This class cannot be instantiated directly using "),vbe=n(AXe,"CODE",{});var v5t=s(vbe);Rgr=r(v5t,"__init__()"),v5t.forEach(t),Pgr=r(AXe," (throws an error)."),AXe.forEach(t),Bgr=i(Fl),yt=n(Fl,"DIV",{class:!0});var pA=s(yt);T(r8.$$.fragment,pA),Igr=i(pA),Fbe=n(pA,"P",{});var F5t=s(Fbe);Ngr=r(F5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),F5t.forEach(t),qgr=i(pA),Ud=n(pA,"P",{});var Yoe=s(Ud);jgr=r(Yoe,`Note:
Loading a model from its configuration file does `),Tbe=n(Yoe,"STRONG",{});var T5t=s(Tbe);Dgr=r(T5t,"not"),T5t.forEach(t),Ggr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(Yoe,"A",{href:!0});var M5t=s(RQ);Ogr=r(M5t,"from_pretrained()"),M5t.forEach(t),Vgr=r(Yoe," to load the model weights."),Yoe.forEach(t),Xgr=i(pA),T(LT.$$.fragment,pA),pA.forEach(t),zgr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(t8.$$.fragment,Aa),Wgr=i(Aa),Mbe=n(Aa,"P",{});var E5t=s(Mbe);Qgr=r(E5t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),E5t.forEach(t),Hgr=i(Aa),en=n(Aa,"P",{});var _A=s(en);Ugr=r(_A,"The model class to instantiate is selected based on the "),Ebe=n(_A,"CODE",{});var C5t=s(Ebe);Jgr=r(C5t,"model_type"),C5t.forEach(t),Ygr=r(_A,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(_A,"CODE",{});var w5t=s(Cbe);Kgr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),Zgr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(_A,"CODE",{});var A5t=s(wbe);ehr=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),ohr=r(_A,":"),_A.forEach(t),rhr=i(Aa),on=n(Aa,"UL",{});var uA=s(on);yT=n(uA,"LI",{});var uBe=s(yT);Abe=n(uBe,"STRONG",{});var L5t=s(Abe);thr=r(L5t,"beit"),L5t.forEach(t),ahr=r(uBe," \u2014 "),PQ=n(uBe,"A",{href:!0});var y5t=s(PQ);nhr=r(y5t,"BeitForSemanticSegmentation"),y5t.forEach(t),shr=r(uBe," (BEiT model)"),uBe.forEach(t),lhr=i(uA),xT=n(uA,"LI",{});var bBe=s(xT);Lbe=n(bBe,"STRONG",{});var x5t=s(Lbe);ihr=r(x5t,"data2vec-vision"),x5t.forEach(t),dhr=r(bBe," \u2014 "),BQ=n(bBe,"A",{href:!0});var $5t=s(BQ);chr=r($5t,"Data2VecVisionForSemanticSegmentation"),$5t.forEach(t),fhr=r(bBe," (Data2VecVision model)"),bBe.forEach(t),mhr=i(uA),$T=n(uA,"LI",{});var vBe=s($T);ybe=n(vBe,"STRONG",{});var k5t=s(ybe);ghr=r(k5t,"dpt"),k5t.forEach(t),hhr=r(vBe," \u2014 "),IQ=n(vBe,"A",{href:!0});var S5t=s(IQ);phr=r(S5t,"DPTForSemanticSegmentation"),S5t.forEach(t),_hr=r(vBe," (DPT model)"),vBe.forEach(t),uhr=i(uA),kT=n(uA,"LI",{});var FBe=s(kT);xbe=n(FBe,"STRONG",{});var R5t=s(xbe);bhr=r(R5t,"segformer"),R5t.forEach(t),vhr=r(FBe," \u2014 "),NQ=n(FBe,"A",{href:!0});var P5t=s(NQ);Fhr=r(P5t,"SegformerForSemanticSegmentation"),P5t.forEach(t),Thr=r(FBe," (SegFormer model)"),FBe.forEach(t),uA.forEach(t),Mhr=i(Aa),ST=n(Aa,"P",{});var TBe=s(ST);Ehr=r(TBe,"The model is set in evaluation mode by default using "),$be=n(TBe,"CODE",{});var B5t=s($be);Chr=r(B5t,"model.eval()"),B5t.forEach(t),whr=r(TBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=n(TBe,"CODE",{});var I5t=s(kbe);Ahr=r(I5t,"model.train()"),I5t.forEach(t),TBe.forEach(t),Lhr=i(Aa),T(RT.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),vOe=i(f),Jd=n(f,"H2",{class:!0});var LXe=s(Jd);PT=n(LXe,"A",{id:!0,class:!0,href:!0});var N5t=s(PT);Sbe=n(N5t,"SPAN",{});var q5t=s(Sbe);T(a8.$$.fragment,q5t),q5t.forEach(t),N5t.forEach(t),yhr=i(LXe),Rbe=n(LXe,"SPAN",{});var j5t=s(Rbe);xhr=r(j5t,"AutoModelForInstanceSegmentation"),j5t.forEach(t),LXe.forEach(t),FOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(n8.$$.fragment,Tl),$hr=i(Tl),Yd=n(Tl,"P",{});var Koe=s(Yd);khr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qQ=n(Koe,"A",{href:!0});var D5t=s(qQ);Shr=r(D5t,"from_pretrained()"),D5t.forEach(t),Rhr=r(Koe," class method or the "),jQ=n(Koe,"A",{href:!0});var G5t=s(jQ);Phr=r(G5t,"from_config()"),G5t.forEach(t),Bhr=r(Koe,` class
method.`),Koe.forEach(t),Ihr=i(Tl),s8=n(Tl,"P",{});var yXe=s(s8);Nhr=r(yXe,"This class cannot be instantiated directly using "),Pbe=n(yXe,"CODE",{});var O5t=s(Pbe);qhr=r(O5t,"__init__()"),O5t.forEach(t),jhr=r(yXe," (throws an error)."),yXe.forEach(t),Dhr=i(Tl),xt=n(Tl,"DIV",{class:!0});var bA=s(xt);T(l8.$$.fragment,bA),Ghr=i(bA),Bbe=n(bA,"P",{});var V5t=s(Bbe);Ohr=r(V5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),V5t.forEach(t),Vhr=i(bA),Kd=n(bA,"P",{});var Zoe=s(Kd);Xhr=r(Zoe,`Note:
Loading a model from its configuration file does `),Ibe=n(Zoe,"STRONG",{});var X5t=s(Ibe);zhr=r(X5t,"not"),X5t.forEach(t),Whr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(Zoe,"A",{href:!0});var z5t=s(DQ);Qhr=r(z5t,"from_pretrained()"),z5t.forEach(t),Hhr=r(Zoe," to load the model weights."),Zoe.forEach(t),Uhr=i(bA),T(BT.$$.fragment,bA),bA.forEach(t),Jhr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(i8.$$.fragment,La),Yhr=i(La),Nbe=n(La,"P",{});var W5t=s(Nbe);Khr=r(W5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),W5t.forEach(t),Zhr=i(La),rn=n(La,"P",{});var vA=s(rn);epr=r(vA,"The model class to instantiate is selected based on the "),qbe=n(vA,"CODE",{});var Q5t=s(qbe);opr=r(Q5t,"model_type"),Q5t.forEach(t),rpr=r(vA,` property of the config object (either
passed as an argument or loaded from `),jbe=n(vA,"CODE",{});var H5t=s(jbe);tpr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),apr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(vA,"CODE",{});var U5t=s(Dbe);npr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),spr=r(vA,":"),vA.forEach(t),lpr=i(La),Gbe=n(La,"UL",{});var J5t=s(Gbe);IT=n(J5t,"LI",{});var MBe=s(IT);Obe=n(MBe,"STRONG",{});var Y5t=s(Obe);ipr=r(Y5t,"maskformer"),Y5t.forEach(t),dpr=r(MBe," \u2014 "),GQ=n(MBe,"A",{href:!0});var K5t=s(GQ);cpr=r(K5t,"MaskFormerForInstanceSegmentation"),K5t.forEach(t),fpr=r(MBe," (MaskFormer model)"),MBe.forEach(t),J5t.forEach(t),mpr=i(La),NT=n(La,"P",{});var EBe=s(NT);gpr=r(EBe,"The model is set in evaluation mode by default using "),Vbe=n(EBe,"CODE",{});var Z5t=s(Vbe);hpr=r(Z5t,"model.eval()"),Z5t.forEach(t),ppr=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xbe=n(EBe,"CODE",{});var e3t=s(Xbe);_pr=r(e3t,"model.train()"),e3t.forEach(t),EBe.forEach(t),upr=i(La),T(qT.$$.fragment,La),La.forEach(t),Tl.forEach(t),TOe=i(f),Zd=n(f,"H2",{class:!0});var xXe=s(Zd);jT=n(xXe,"A",{id:!0,class:!0,href:!0});var o3t=s(jT);zbe=n(o3t,"SPAN",{});var r3t=s(zbe);T(d8.$$.fragment,r3t),r3t.forEach(t),o3t.forEach(t),bpr=i(xXe),Wbe=n(xXe,"SPAN",{});var t3t=s(Wbe);vpr=r(t3t,"TFAutoModel"),t3t.forEach(t),xXe.forEach(t),MOe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(c8.$$.fragment,Ml),Fpr=i(Ml),ec=n(Ml,"P",{});var ere=s(ec);Tpr=r(ere,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=n(ere,"A",{href:!0});var a3t=s(OQ);Mpr=r(a3t,"from_pretrained()"),a3t.forEach(t),Epr=r(ere," class method or the "),VQ=n(ere,"A",{href:!0});var n3t=s(VQ);Cpr=r(n3t,"from_config()"),n3t.forEach(t),wpr=r(ere,` class
method.`),ere.forEach(t),Apr=i(Ml),f8=n(Ml,"P",{});var $Xe=s(f8);Lpr=r($Xe,"This class cannot be instantiated directly using "),Qbe=n($Xe,"CODE",{});var s3t=s(Qbe);ypr=r(s3t,"__init__()"),s3t.forEach(t),xpr=r($Xe," (throws an error)."),$Xe.forEach(t),$pr=i(Ml),$t=n(Ml,"DIV",{class:!0});var FA=s($t);T(m8.$$.fragment,FA),kpr=i(FA),Hbe=n(FA,"P",{});var l3t=s(Hbe);Spr=r(l3t,"Instantiates one of the base model classes of the library from a configuration."),l3t.forEach(t),Rpr=i(FA),oc=n(FA,"P",{});var ore=s(oc);Ppr=r(ore,`Note:
Loading a model from its configuration file does `),Ube=n(ore,"STRONG",{});var i3t=s(Ube);Bpr=r(i3t,"not"),i3t.forEach(t),Ipr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(ore,"A",{href:!0});var d3t=s(XQ);Npr=r(d3t,"from_pretrained()"),d3t.forEach(t),qpr=r(ore," to load the model weights."),ore.forEach(t),jpr=i(FA),T(DT.$$.fragment,FA),FA.forEach(t),Dpr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(g8.$$.fragment,El),Gpr=i(El),Jbe=n(El,"P",{});var c3t=s(Jbe);Opr=r(c3t,"Instantiate one of the base model classes of the library from a pretrained model."),c3t.forEach(t),Vpr=i(El),tn=n(El,"P",{});var TA=s(tn);Xpr=r(TA,"The model class to instantiate is selected based on the "),Ybe=n(TA,"CODE",{});var f3t=s(Ybe);zpr=r(f3t,"model_type"),f3t.forEach(t),Wpr=r(TA,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(TA,"CODE",{});var m3t=s(Kbe);Qpr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),Hpr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(TA,"CODE",{});var g3t=s(Zbe);Upr=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),Jpr=r(TA,":"),TA.forEach(t),Ypr=i(El),q=n(El,"UL",{});var D=s(q);GT=n(D,"LI",{});var CBe=s(GT);e2e=n(CBe,"STRONG",{});var h3t=s(e2e);Kpr=r(h3t,"albert"),h3t.forEach(t),Zpr=r(CBe," \u2014 "),zQ=n(CBe,"A",{href:!0});var p3t=s(zQ);e_r=r(p3t,"TFAlbertModel"),p3t.forEach(t),o_r=r(CBe," (ALBERT model)"),CBe.forEach(t),r_r=i(D),OT=n(D,"LI",{});var wBe=s(OT);o2e=n(wBe,"STRONG",{});var _3t=s(o2e);t_r=r(_3t,"bart"),_3t.forEach(t),a_r=r(wBe," \u2014 "),WQ=n(wBe,"A",{href:!0});var u3t=s(WQ);n_r=r(u3t,"TFBartModel"),u3t.forEach(t),s_r=r(wBe," (BART model)"),wBe.forEach(t),l_r=i(D),VT=n(D,"LI",{});var ABe=s(VT);r2e=n(ABe,"STRONG",{});var b3t=s(r2e);i_r=r(b3t,"bert"),b3t.forEach(t),d_r=r(ABe," \u2014 "),QQ=n(ABe,"A",{href:!0});var v3t=s(QQ);c_r=r(v3t,"TFBertModel"),v3t.forEach(t),f_r=r(ABe," (BERT model)"),ABe.forEach(t),m_r=i(D),XT=n(D,"LI",{});var LBe=s(XT);t2e=n(LBe,"STRONG",{});var F3t=s(t2e);g_r=r(F3t,"blenderbot"),F3t.forEach(t),h_r=r(LBe," \u2014 "),HQ=n(LBe,"A",{href:!0});var T3t=s(HQ);p_r=r(T3t,"TFBlenderbotModel"),T3t.forEach(t),__r=r(LBe," (Blenderbot model)"),LBe.forEach(t),u_r=i(D),zT=n(D,"LI",{});var yBe=s(zT);a2e=n(yBe,"STRONG",{});var M3t=s(a2e);b_r=r(M3t,"blenderbot-small"),M3t.forEach(t),v_r=r(yBe," \u2014 "),UQ=n(yBe,"A",{href:!0});var E3t=s(UQ);F_r=r(E3t,"TFBlenderbotSmallModel"),E3t.forEach(t),T_r=r(yBe," (BlenderbotSmall model)"),yBe.forEach(t),M_r=i(D),WT=n(D,"LI",{});var xBe=s(WT);n2e=n(xBe,"STRONG",{});var C3t=s(n2e);E_r=r(C3t,"camembert"),C3t.forEach(t),C_r=r(xBe," \u2014 "),JQ=n(xBe,"A",{href:!0});var w3t=s(JQ);w_r=r(w3t,"TFCamembertModel"),w3t.forEach(t),A_r=r(xBe," (CamemBERT model)"),xBe.forEach(t),L_r=i(D),QT=n(D,"LI",{});var $Be=s(QT);s2e=n($Be,"STRONG",{});var A3t=s(s2e);y_r=r(A3t,"clip"),A3t.forEach(t),x_r=r($Be," \u2014 "),YQ=n($Be,"A",{href:!0});var L3t=s(YQ);$_r=r(L3t,"TFCLIPModel"),L3t.forEach(t),k_r=r($Be," (CLIP model)"),$Be.forEach(t),S_r=i(D),HT=n(D,"LI",{});var kBe=s(HT);l2e=n(kBe,"STRONG",{});var y3t=s(l2e);R_r=r(y3t,"convbert"),y3t.forEach(t),P_r=r(kBe," \u2014 "),KQ=n(kBe,"A",{href:!0});var x3t=s(KQ);B_r=r(x3t,"TFConvBertModel"),x3t.forEach(t),I_r=r(kBe," (ConvBERT model)"),kBe.forEach(t),N_r=i(D),UT=n(D,"LI",{});var SBe=s(UT);i2e=n(SBe,"STRONG",{});var $3t=s(i2e);q_r=r($3t,"convnext"),$3t.forEach(t),j_r=r(SBe," \u2014 "),ZQ=n(SBe,"A",{href:!0});var k3t=s(ZQ);D_r=r(k3t,"TFConvNextModel"),k3t.forEach(t),G_r=r(SBe," (ConvNeXT model)"),SBe.forEach(t),O_r=i(D),JT=n(D,"LI",{});var RBe=s(JT);d2e=n(RBe,"STRONG",{});var S3t=s(d2e);V_r=r(S3t,"ctrl"),S3t.forEach(t),X_r=r(RBe," \u2014 "),eH=n(RBe,"A",{href:!0});var R3t=s(eH);z_r=r(R3t,"TFCTRLModel"),R3t.forEach(t),W_r=r(RBe," (CTRL model)"),RBe.forEach(t),Q_r=i(D),YT=n(D,"LI",{});var PBe=s(YT);c2e=n(PBe,"STRONG",{});var P3t=s(c2e);H_r=r(P3t,"data2vec-vision"),P3t.forEach(t),U_r=r(PBe," \u2014 "),oH=n(PBe,"A",{href:!0});var B3t=s(oH);J_r=r(B3t,"TFData2VecVisionModel"),B3t.forEach(t),Y_r=r(PBe," (Data2VecVision model)"),PBe.forEach(t),K_r=i(D),KT=n(D,"LI",{});var BBe=s(KT);f2e=n(BBe,"STRONG",{});var I3t=s(f2e);Z_r=r(I3t,"deberta"),I3t.forEach(t),eur=r(BBe," \u2014 "),rH=n(BBe,"A",{href:!0});var N3t=s(rH);our=r(N3t,"TFDebertaModel"),N3t.forEach(t),rur=r(BBe," (DeBERTa model)"),BBe.forEach(t),tur=i(D),ZT=n(D,"LI",{});var IBe=s(ZT);m2e=n(IBe,"STRONG",{});var q3t=s(m2e);aur=r(q3t,"deberta-v2"),q3t.forEach(t),nur=r(IBe," \u2014 "),tH=n(IBe,"A",{href:!0});var j3t=s(tH);sur=r(j3t,"TFDebertaV2Model"),j3t.forEach(t),lur=r(IBe," (DeBERTa-v2 model)"),IBe.forEach(t),iur=i(D),eM=n(D,"LI",{});var NBe=s(eM);g2e=n(NBe,"STRONG",{});var D3t=s(g2e);dur=r(D3t,"distilbert"),D3t.forEach(t),cur=r(NBe," \u2014 "),aH=n(NBe,"A",{href:!0});var G3t=s(aH);fur=r(G3t,"TFDistilBertModel"),G3t.forEach(t),mur=r(NBe," (DistilBERT model)"),NBe.forEach(t),gur=i(D),oM=n(D,"LI",{});var qBe=s(oM);h2e=n(qBe,"STRONG",{});var O3t=s(h2e);hur=r(O3t,"dpr"),O3t.forEach(t),pur=r(qBe," \u2014 "),nH=n(qBe,"A",{href:!0});var V3t=s(nH);_ur=r(V3t,"TFDPRQuestionEncoder"),V3t.forEach(t),uur=r(qBe," (DPR model)"),qBe.forEach(t),bur=i(D),rM=n(D,"LI",{});var jBe=s(rM);p2e=n(jBe,"STRONG",{});var X3t=s(p2e);vur=r(X3t,"electra"),X3t.forEach(t),Fur=r(jBe," \u2014 "),sH=n(jBe,"A",{href:!0});var z3t=s(sH);Tur=r(z3t,"TFElectraModel"),z3t.forEach(t),Mur=r(jBe," (ELECTRA model)"),jBe.forEach(t),Eur=i(D),tM=n(D,"LI",{});var DBe=s(tM);_2e=n(DBe,"STRONG",{});var W3t=s(_2e);Cur=r(W3t,"flaubert"),W3t.forEach(t),wur=r(DBe," \u2014 "),lH=n(DBe,"A",{href:!0});var Q3t=s(lH);Aur=r(Q3t,"TFFlaubertModel"),Q3t.forEach(t),Lur=r(DBe," (FlauBERT model)"),DBe.forEach(t),yur=i(D),Xs=n(D,"LI",{});var Hk=s(Xs);u2e=n(Hk,"STRONG",{});var H3t=s(u2e);xur=r(H3t,"funnel"),H3t.forEach(t),$ur=r(Hk," \u2014 "),iH=n(Hk,"A",{href:!0});var U3t=s(iH);kur=r(U3t,"TFFunnelModel"),U3t.forEach(t),Sur=r(Hk," or "),dH=n(Hk,"A",{href:!0});var J3t=s(dH);Rur=r(J3t,"TFFunnelBaseModel"),J3t.forEach(t),Pur=r(Hk," (Funnel Transformer model)"),Hk.forEach(t),Bur=i(D),aM=n(D,"LI",{});var GBe=s(aM);b2e=n(GBe,"STRONG",{});var Y3t=s(b2e);Iur=r(Y3t,"gpt2"),Y3t.forEach(t),Nur=r(GBe," \u2014 "),cH=n(GBe,"A",{href:!0});var K3t=s(cH);qur=r(K3t,"TFGPT2Model"),K3t.forEach(t),jur=r(GBe," (OpenAI GPT-2 model)"),GBe.forEach(t),Dur=i(D),nM=n(D,"LI",{});var OBe=s(nM);v2e=n(OBe,"STRONG",{});var Z3t=s(v2e);Gur=r(Z3t,"gptj"),Z3t.forEach(t),Our=r(OBe," \u2014 "),fH=n(OBe,"A",{href:!0});var e0t=s(fH);Vur=r(e0t,"TFGPTJModel"),e0t.forEach(t),Xur=r(OBe," (GPT-J model)"),OBe.forEach(t),zur=i(D),sM=n(D,"LI",{});var VBe=s(sM);F2e=n(VBe,"STRONG",{});var o0t=s(F2e);Wur=r(o0t,"hubert"),o0t.forEach(t),Qur=r(VBe," \u2014 "),mH=n(VBe,"A",{href:!0});var r0t=s(mH);Hur=r(r0t,"TFHubertModel"),r0t.forEach(t),Uur=r(VBe," (Hubert model)"),VBe.forEach(t),Jur=i(D),lM=n(D,"LI",{});var XBe=s(lM);T2e=n(XBe,"STRONG",{});var t0t=s(T2e);Yur=r(t0t,"layoutlm"),t0t.forEach(t),Kur=r(XBe," \u2014 "),gH=n(XBe,"A",{href:!0});var a0t=s(gH);Zur=r(a0t,"TFLayoutLMModel"),a0t.forEach(t),e1r=r(XBe," (LayoutLM model)"),XBe.forEach(t),o1r=i(D),iM=n(D,"LI",{});var zBe=s(iM);M2e=n(zBe,"STRONG",{});var n0t=s(M2e);r1r=r(n0t,"led"),n0t.forEach(t),t1r=r(zBe," \u2014 "),hH=n(zBe,"A",{href:!0});var s0t=s(hH);a1r=r(s0t,"TFLEDModel"),s0t.forEach(t),n1r=r(zBe," (LED model)"),zBe.forEach(t),s1r=i(D),dM=n(D,"LI",{});var WBe=s(dM);E2e=n(WBe,"STRONG",{});var l0t=s(E2e);l1r=r(l0t,"longformer"),l0t.forEach(t),i1r=r(WBe," \u2014 "),pH=n(WBe,"A",{href:!0});var i0t=s(pH);d1r=r(i0t,"TFLongformerModel"),i0t.forEach(t),c1r=r(WBe," (Longformer model)"),WBe.forEach(t),f1r=i(D),cM=n(D,"LI",{});var QBe=s(cM);C2e=n(QBe,"STRONG",{});var d0t=s(C2e);m1r=r(d0t,"lxmert"),d0t.forEach(t),g1r=r(QBe," \u2014 "),_H=n(QBe,"A",{href:!0});var c0t=s(_H);h1r=r(c0t,"TFLxmertModel"),c0t.forEach(t),p1r=r(QBe," (LXMERT model)"),QBe.forEach(t),_1r=i(D),fM=n(D,"LI",{});var HBe=s(fM);w2e=n(HBe,"STRONG",{});var f0t=s(w2e);u1r=r(f0t,"marian"),f0t.forEach(t),b1r=r(HBe," \u2014 "),uH=n(HBe,"A",{href:!0});var m0t=s(uH);v1r=r(m0t,"TFMarianModel"),m0t.forEach(t),F1r=r(HBe," (Marian model)"),HBe.forEach(t),T1r=i(D),mM=n(D,"LI",{});var UBe=s(mM);A2e=n(UBe,"STRONG",{});var g0t=s(A2e);M1r=r(g0t,"mbart"),g0t.forEach(t),E1r=r(UBe," \u2014 "),bH=n(UBe,"A",{href:!0});var h0t=s(bH);C1r=r(h0t,"TFMBartModel"),h0t.forEach(t),w1r=r(UBe," (mBART model)"),UBe.forEach(t),A1r=i(D),gM=n(D,"LI",{});var JBe=s(gM);L2e=n(JBe,"STRONG",{});var p0t=s(L2e);L1r=r(p0t,"mobilebert"),p0t.forEach(t),y1r=r(JBe," \u2014 "),vH=n(JBe,"A",{href:!0});var _0t=s(vH);x1r=r(_0t,"TFMobileBertModel"),_0t.forEach(t),$1r=r(JBe," (MobileBERT model)"),JBe.forEach(t),k1r=i(D),hM=n(D,"LI",{});var YBe=s(hM);y2e=n(YBe,"STRONG",{});var u0t=s(y2e);S1r=r(u0t,"mpnet"),u0t.forEach(t),R1r=r(YBe," \u2014 "),FH=n(YBe,"A",{href:!0});var b0t=s(FH);P1r=r(b0t,"TFMPNetModel"),b0t.forEach(t),B1r=r(YBe," (MPNet model)"),YBe.forEach(t),I1r=i(D),pM=n(D,"LI",{});var KBe=s(pM);x2e=n(KBe,"STRONG",{});var v0t=s(x2e);N1r=r(v0t,"mt5"),v0t.forEach(t),q1r=r(KBe," \u2014 "),TH=n(KBe,"A",{href:!0});var F0t=s(TH);j1r=r(F0t,"TFMT5Model"),F0t.forEach(t),D1r=r(KBe," (MT5 model)"),KBe.forEach(t),G1r=i(D),_M=n(D,"LI",{});var ZBe=s(_M);$2e=n(ZBe,"STRONG",{});var T0t=s($2e);O1r=r(T0t,"openai-gpt"),T0t.forEach(t),V1r=r(ZBe," \u2014 "),MH=n(ZBe,"A",{href:!0});var M0t=s(MH);X1r=r(M0t,"TFOpenAIGPTModel"),M0t.forEach(t),z1r=r(ZBe," (OpenAI GPT model)"),ZBe.forEach(t),W1r=i(D),uM=n(D,"LI",{});var eIe=s(uM);k2e=n(eIe,"STRONG",{});var E0t=s(k2e);Q1r=r(E0t,"opt"),E0t.forEach(t),H1r=r(eIe," \u2014 "),EH=n(eIe,"A",{href:!0});var C0t=s(EH);U1r=r(C0t,"TFOPTModel"),C0t.forEach(t),J1r=r(eIe," (OPT model)"),eIe.forEach(t),Y1r=i(D),bM=n(D,"LI",{});var oIe=s(bM);S2e=n(oIe,"STRONG",{});var w0t=s(S2e);K1r=r(w0t,"pegasus"),w0t.forEach(t),Z1r=r(oIe," \u2014 "),CH=n(oIe,"A",{href:!0});var A0t=s(CH);e7r=r(A0t,"TFPegasusModel"),A0t.forEach(t),o7r=r(oIe," (Pegasus model)"),oIe.forEach(t),r7r=i(D),vM=n(D,"LI",{});var rIe=s(vM);R2e=n(rIe,"STRONG",{});var L0t=s(R2e);t7r=r(L0t,"rembert"),L0t.forEach(t),a7r=r(rIe," \u2014 "),wH=n(rIe,"A",{href:!0});var y0t=s(wH);n7r=r(y0t,"TFRemBertModel"),y0t.forEach(t),s7r=r(rIe," (RemBERT model)"),rIe.forEach(t),l7r=i(D),FM=n(D,"LI",{});var tIe=s(FM);P2e=n(tIe,"STRONG",{});var x0t=s(P2e);i7r=r(x0t,"roberta"),x0t.forEach(t),d7r=r(tIe," \u2014 "),AH=n(tIe,"A",{href:!0});var $0t=s(AH);c7r=r($0t,"TFRobertaModel"),$0t.forEach(t),f7r=r(tIe," (RoBERTa model)"),tIe.forEach(t),m7r=i(D),TM=n(D,"LI",{});var aIe=s(TM);B2e=n(aIe,"STRONG",{});var k0t=s(B2e);g7r=r(k0t,"roformer"),k0t.forEach(t),h7r=r(aIe," \u2014 "),LH=n(aIe,"A",{href:!0});var S0t=s(LH);p7r=r(S0t,"TFRoFormerModel"),S0t.forEach(t),_7r=r(aIe," (RoFormer model)"),aIe.forEach(t),u7r=i(D),MM=n(D,"LI",{});var nIe=s(MM);I2e=n(nIe,"STRONG",{});var R0t=s(I2e);b7r=r(R0t,"speech_to_text"),R0t.forEach(t),v7r=r(nIe," \u2014 "),yH=n(nIe,"A",{href:!0});var P0t=s(yH);F7r=r(P0t,"TFSpeech2TextModel"),P0t.forEach(t),T7r=r(nIe," (Speech2Text model)"),nIe.forEach(t),M7r=i(D),EM=n(D,"LI",{});var sIe=s(EM);N2e=n(sIe,"STRONG",{});var B0t=s(N2e);E7r=r(B0t,"swin"),B0t.forEach(t),C7r=r(sIe," \u2014 "),xH=n(sIe,"A",{href:!0});var I0t=s(xH);w7r=r(I0t,"TFSwinModel"),I0t.forEach(t),A7r=r(sIe," (Swin Transformer model)"),sIe.forEach(t),L7r=i(D),CM=n(D,"LI",{});var lIe=s(CM);q2e=n(lIe,"STRONG",{});var N0t=s(q2e);y7r=r(N0t,"t5"),N0t.forEach(t),x7r=r(lIe," \u2014 "),$H=n(lIe,"A",{href:!0});var q0t=s($H);$7r=r(q0t,"TFT5Model"),q0t.forEach(t),k7r=r(lIe," (T5 model)"),lIe.forEach(t),S7r=i(D),wM=n(D,"LI",{});var iIe=s(wM);j2e=n(iIe,"STRONG",{});var j0t=s(j2e);R7r=r(j0t,"tapas"),j0t.forEach(t),P7r=r(iIe," \u2014 "),kH=n(iIe,"A",{href:!0});var D0t=s(kH);B7r=r(D0t,"TFTapasModel"),D0t.forEach(t),I7r=r(iIe," (TAPAS model)"),iIe.forEach(t),N7r=i(D),AM=n(D,"LI",{});var dIe=s(AM);D2e=n(dIe,"STRONG",{});var G0t=s(D2e);q7r=r(G0t,"transfo-xl"),G0t.forEach(t),j7r=r(dIe," \u2014 "),SH=n(dIe,"A",{href:!0});var O0t=s(SH);D7r=r(O0t,"TFTransfoXLModel"),O0t.forEach(t),G7r=r(dIe," (Transformer-XL model)"),dIe.forEach(t),O7r=i(D),LM=n(D,"LI",{});var cIe=s(LM);G2e=n(cIe,"STRONG",{});var V0t=s(G2e);V7r=r(V0t,"vit"),V0t.forEach(t),X7r=r(cIe," \u2014 "),RH=n(cIe,"A",{href:!0});var X0t=s(RH);z7r=r(X0t,"TFViTModel"),X0t.forEach(t),W7r=r(cIe," (ViT model)"),cIe.forEach(t),Q7r=i(D),yM=n(D,"LI",{});var fIe=s(yM);O2e=n(fIe,"STRONG",{});var z0t=s(O2e);H7r=r(z0t,"vit_mae"),z0t.forEach(t),U7r=r(fIe," \u2014 "),PH=n(fIe,"A",{href:!0});var W0t=s(PH);J7r=r(W0t,"TFViTMAEModel"),W0t.forEach(t),Y7r=r(fIe," (ViTMAE model)"),fIe.forEach(t),K7r=i(D),xM=n(D,"LI",{});var mIe=s(xM);V2e=n(mIe,"STRONG",{});var Q0t=s(V2e);Z7r=r(Q0t,"wav2vec2"),Q0t.forEach(t),e9r=r(mIe," \u2014 "),BH=n(mIe,"A",{href:!0});var H0t=s(BH);o9r=r(H0t,"TFWav2Vec2Model"),H0t.forEach(t),r9r=r(mIe," (Wav2Vec2 model)"),mIe.forEach(t),t9r=i(D),$M=n(D,"LI",{});var gIe=s($M);X2e=n(gIe,"STRONG",{});var U0t=s(X2e);a9r=r(U0t,"xlm"),U0t.forEach(t),n9r=r(gIe," \u2014 "),IH=n(gIe,"A",{href:!0});var J0t=s(IH);s9r=r(J0t,"TFXLMModel"),J0t.forEach(t),l9r=r(gIe," (XLM model)"),gIe.forEach(t),i9r=i(D),kM=n(D,"LI",{});var hIe=s(kM);z2e=n(hIe,"STRONG",{});var Y0t=s(z2e);d9r=r(Y0t,"xlm-roberta"),Y0t.forEach(t),c9r=r(hIe," \u2014 "),NH=n(hIe,"A",{href:!0});var K0t=s(NH);f9r=r(K0t,"TFXLMRobertaModel"),K0t.forEach(t),m9r=r(hIe," (XLM-RoBERTa model)"),hIe.forEach(t),g9r=i(D),SM=n(D,"LI",{});var pIe=s(SM);W2e=n(pIe,"STRONG",{});var Z0t=s(W2e);h9r=r(Z0t,"xlnet"),Z0t.forEach(t),p9r=r(pIe," \u2014 "),qH=n(pIe,"A",{href:!0});var ewt=s(qH);_9r=r(ewt,"TFXLNetModel"),ewt.forEach(t),u9r=r(pIe," (XLNet model)"),pIe.forEach(t),D.forEach(t),b9r=i(El),T(RM.$$.fragment,El),El.forEach(t),Ml.forEach(t),EOe=i(f),rc=n(f,"H2",{class:!0});var kXe=s(rc);PM=n(kXe,"A",{id:!0,class:!0,href:!0});var owt=s(PM);Q2e=n(owt,"SPAN",{});var rwt=s(Q2e);T(h8.$$.fragment,rwt),rwt.forEach(t),owt.forEach(t),v9r=i(kXe),H2e=n(kXe,"SPAN",{});var twt=s(H2e);F9r=r(twt,"TFAutoModelForPreTraining"),twt.forEach(t),kXe.forEach(t),COe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(p8.$$.fragment,Cl),T9r=i(Cl),tc=n(Cl,"P",{});var rre=s(tc);M9r=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jH=n(rre,"A",{href:!0});var awt=s(jH);E9r=r(awt,"from_pretrained()"),awt.forEach(t),C9r=r(rre," class method or the "),DH=n(rre,"A",{href:!0});var nwt=s(DH);w9r=r(nwt,"from_config()"),nwt.forEach(t),A9r=r(rre,` class
method.`),rre.forEach(t),L9r=i(Cl),_8=n(Cl,"P",{});var SXe=s(_8);y9r=r(SXe,"This class cannot be instantiated directly using "),U2e=n(SXe,"CODE",{});var swt=s(U2e);x9r=r(swt,"__init__()"),swt.forEach(t),$9r=r(SXe," (throws an error)."),SXe.forEach(t),k9r=i(Cl),kt=n(Cl,"DIV",{class:!0});var MA=s(kt);T(u8.$$.fragment,MA),S9r=i(MA),J2e=n(MA,"P",{});var lwt=s(J2e);R9r=r(lwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lwt.forEach(t),P9r=i(MA),ac=n(MA,"P",{});var tre=s(ac);B9r=r(tre,`Note:
Loading a model from its configuration file does `),Y2e=n(tre,"STRONG",{});var iwt=s(Y2e);I9r=r(iwt,"not"),iwt.forEach(t),N9r=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(tre,"A",{href:!0});var dwt=s(GH);q9r=r(dwt,"from_pretrained()"),dwt.forEach(t),j9r=r(tre," to load the model weights."),tre.forEach(t),D9r=i(MA),T(BM.$$.fragment,MA),MA.forEach(t),G9r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(b8.$$.fragment,wl),O9r=i(wl),K2e=n(wl,"P",{});var cwt=s(K2e);V9r=r(cwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cwt.forEach(t),X9r=i(wl),an=n(wl,"P",{});var EA=s(an);z9r=r(EA,"The model class to instantiate is selected based on the "),Z2e=n(EA,"CODE",{});var fwt=s(Z2e);W9r=r(fwt,"model_type"),fwt.forEach(t),Q9r=r(EA,` property of the config object (either
passed as an argument or loaded from `),eve=n(EA,"CODE",{});var mwt=s(eve);H9r=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),U9r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(EA,"CODE",{});var gwt=s(ove);J9r=r(gwt,"pretrained_model_name_or_path"),gwt.forEach(t),Y9r=r(EA,":"),EA.forEach(t),K9r=i(wl),se=n(wl,"UL",{});var le=s(se);IM=n(le,"LI",{});var _Ie=s(IM);rve=n(_Ie,"STRONG",{});var hwt=s(rve);Z9r=r(hwt,"albert"),hwt.forEach(t),ebr=r(_Ie," \u2014 "),OH=n(_Ie,"A",{href:!0});var pwt=s(OH);obr=r(pwt,"TFAlbertForPreTraining"),pwt.forEach(t),rbr=r(_Ie," (ALBERT model)"),_Ie.forEach(t),tbr=i(le),NM=n(le,"LI",{});var uIe=s(NM);tve=n(uIe,"STRONG",{});var _wt=s(tve);abr=r(_wt,"bart"),_wt.forEach(t),nbr=r(uIe," \u2014 "),VH=n(uIe,"A",{href:!0});var uwt=s(VH);sbr=r(uwt,"TFBartForConditionalGeneration"),uwt.forEach(t),lbr=r(uIe," (BART model)"),uIe.forEach(t),ibr=i(le),qM=n(le,"LI",{});var bIe=s(qM);ave=n(bIe,"STRONG",{});var bwt=s(ave);dbr=r(bwt,"bert"),bwt.forEach(t),cbr=r(bIe," \u2014 "),XH=n(bIe,"A",{href:!0});var vwt=s(XH);fbr=r(vwt,"TFBertForPreTraining"),vwt.forEach(t),mbr=r(bIe," (BERT model)"),bIe.forEach(t),gbr=i(le),jM=n(le,"LI",{});var vIe=s(jM);nve=n(vIe,"STRONG",{});var Fwt=s(nve);hbr=r(Fwt,"camembert"),Fwt.forEach(t),pbr=r(vIe," \u2014 "),zH=n(vIe,"A",{href:!0});var Twt=s(zH);_br=r(Twt,"TFCamembertForMaskedLM"),Twt.forEach(t),ubr=r(vIe," (CamemBERT model)"),vIe.forEach(t),bbr=i(le),DM=n(le,"LI",{});var FIe=s(DM);sve=n(FIe,"STRONG",{});var Mwt=s(sve);vbr=r(Mwt,"ctrl"),Mwt.forEach(t),Fbr=r(FIe," \u2014 "),WH=n(FIe,"A",{href:!0});var Ewt=s(WH);Tbr=r(Ewt,"TFCTRLLMHeadModel"),Ewt.forEach(t),Mbr=r(FIe," (CTRL model)"),FIe.forEach(t),Ebr=i(le),GM=n(le,"LI",{});var TIe=s(GM);lve=n(TIe,"STRONG",{});var Cwt=s(lve);Cbr=r(Cwt,"distilbert"),Cwt.forEach(t),wbr=r(TIe," \u2014 "),QH=n(TIe,"A",{href:!0});var wwt=s(QH);Abr=r(wwt,"TFDistilBertForMaskedLM"),wwt.forEach(t),Lbr=r(TIe," (DistilBERT model)"),TIe.forEach(t),ybr=i(le),OM=n(le,"LI",{});var MIe=s(OM);ive=n(MIe,"STRONG",{});var Awt=s(ive);xbr=r(Awt,"electra"),Awt.forEach(t),$br=r(MIe," \u2014 "),HH=n(MIe,"A",{href:!0});var Lwt=s(HH);kbr=r(Lwt,"TFElectraForPreTraining"),Lwt.forEach(t),Sbr=r(MIe," (ELECTRA model)"),MIe.forEach(t),Rbr=i(le),VM=n(le,"LI",{});var EIe=s(VM);dve=n(EIe,"STRONG",{});var ywt=s(dve);Pbr=r(ywt,"flaubert"),ywt.forEach(t),Bbr=r(EIe," \u2014 "),UH=n(EIe,"A",{href:!0});var xwt=s(UH);Ibr=r(xwt,"TFFlaubertWithLMHeadModel"),xwt.forEach(t),Nbr=r(EIe," (FlauBERT model)"),EIe.forEach(t),qbr=i(le),XM=n(le,"LI",{});var CIe=s(XM);cve=n(CIe,"STRONG",{});var $wt=s(cve);jbr=r($wt,"funnel"),$wt.forEach(t),Dbr=r(CIe," \u2014 "),JH=n(CIe,"A",{href:!0});var kwt=s(JH);Gbr=r(kwt,"TFFunnelForPreTraining"),kwt.forEach(t),Obr=r(CIe," (Funnel Transformer model)"),CIe.forEach(t),Vbr=i(le),zM=n(le,"LI",{});var wIe=s(zM);fve=n(wIe,"STRONG",{});var Swt=s(fve);Xbr=r(Swt,"gpt2"),Swt.forEach(t),zbr=r(wIe," \u2014 "),YH=n(wIe,"A",{href:!0});var Rwt=s(YH);Wbr=r(Rwt,"TFGPT2LMHeadModel"),Rwt.forEach(t),Qbr=r(wIe," (OpenAI GPT-2 model)"),wIe.forEach(t),Hbr=i(le),WM=n(le,"LI",{});var AIe=s(WM);mve=n(AIe,"STRONG",{});var Pwt=s(mve);Ubr=r(Pwt,"layoutlm"),Pwt.forEach(t),Jbr=r(AIe," \u2014 "),KH=n(AIe,"A",{href:!0});var Bwt=s(KH);Ybr=r(Bwt,"TFLayoutLMForMaskedLM"),Bwt.forEach(t),Kbr=r(AIe," (LayoutLM model)"),AIe.forEach(t),Zbr=i(le),QM=n(le,"LI",{});var LIe=s(QM);gve=n(LIe,"STRONG",{});var Iwt=s(gve);e2r=r(Iwt,"lxmert"),Iwt.forEach(t),o2r=r(LIe," \u2014 "),ZH=n(LIe,"A",{href:!0});var Nwt=s(ZH);r2r=r(Nwt,"TFLxmertForPreTraining"),Nwt.forEach(t),t2r=r(LIe," (LXMERT model)"),LIe.forEach(t),a2r=i(le),HM=n(le,"LI",{});var yIe=s(HM);hve=n(yIe,"STRONG",{});var qwt=s(hve);n2r=r(qwt,"mobilebert"),qwt.forEach(t),s2r=r(yIe," \u2014 "),eU=n(yIe,"A",{href:!0});var jwt=s(eU);l2r=r(jwt,"TFMobileBertForPreTraining"),jwt.forEach(t),i2r=r(yIe," (MobileBERT model)"),yIe.forEach(t),d2r=i(le),UM=n(le,"LI",{});var xIe=s(UM);pve=n(xIe,"STRONG",{});var Dwt=s(pve);c2r=r(Dwt,"mpnet"),Dwt.forEach(t),f2r=r(xIe," \u2014 "),oU=n(xIe,"A",{href:!0});var Gwt=s(oU);m2r=r(Gwt,"TFMPNetForMaskedLM"),Gwt.forEach(t),g2r=r(xIe," (MPNet model)"),xIe.forEach(t),h2r=i(le),JM=n(le,"LI",{});var $Ie=s(JM);_ve=n($Ie,"STRONG",{});var Owt=s(_ve);p2r=r(Owt,"openai-gpt"),Owt.forEach(t),_2r=r($Ie," \u2014 "),rU=n($Ie,"A",{href:!0});var Vwt=s(rU);u2r=r(Vwt,"TFOpenAIGPTLMHeadModel"),Vwt.forEach(t),b2r=r($Ie," (OpenAI GPT model)"),$Ie.forEach(t),v2r=i(le),YM=n(le,"LI",{});var kIe=s(YM);uve=n(kIe,"STRONG",{});var Xwt=s(uve);F2r=r(Xwt,"roberta"),Xwt.forEach(t),T2r=r(kIe," \u2014 "),tU=n(kIe,"A",{href:!0});var zwt=s(tU);M2r=r(zwt,"TFRobertaForMaskedLM"),zwt.forEach(t),E2r=r(kIe," (RoBERTa model)"),kIe.forEach(t),C2r=i(le),KM=n(le,"LI",{});var SIe=s(KM);bve=n(SIe,"STRONG",{});var Wwt=s(bve);w2r=r(Wwt,"t5"),Wwt.forEach(t),A2r=r(SIe," \u2014 "),aU=n(SIe,"A",{href:!0});var Qwt=s(aU);L2r=r(Qwt,"TFT5ForConditionalGeneration"),Qwt.forEach(t),y2r=r(SIe," (T5 model)"),SIe.forEach(t),x2r=i(le),ZM=n(le,"LI",{});var RIe=s(ZM);vve=n(RIe,"STRONG",{});var Hwt=s(vve);$2r=r(Hwt,"tapas"),Hwt.forEach(t),k2r=r(RIe," \u2014 "),nU=n(RIe,"A",{href:!0});var Uwt=s(nU);S2r=r(Uwt,"TFTapasForMaskedLM"),Uwt.forEach(t),R2r=r(RIe," (TAPAS model)"),RIe.forEach(t),P2r=i(le),eE=n(le,"LI",{});var PIe=s(eE);Fve=n(PIe,"STRONG",{});var Jwt=s(Fve);B2r=r(Jwt,"transfo-xl"),Jwt.forEach(t),I2r=r(PIe," \u2014 "),sU=n(PIe,"A",{href:!0});var Ywt=s(sU);N2r=r(Ywt,"TFTransfoXLLMHeadModel"),Ywt.forEach(t),q2r=r(PIe," (Transformer-XL model)"),PIe.forEach(t),j2r=i(le),oE=n(le,"LI",{});var BIe=s(oE);Tve=n(BIe,"STRONG",{});var Kwt=s(Tve);D2r=r(Kwt,"vit_mae"),Kwt.forEach(t),G2r=r(BIe," \u2014 "),lU=n(BIe,"A",{href:!0});var Zwt=s(lU);O2r=r(Zwt,"TFViTMAEForPreTraining"),Zwt.forEach(t),V2r=r(BIe," (ViTMAE model)"),BIe.forEach(t),X2r=i(le),rE=n(le,"LI",{});var IIe=s(rE);Mve=n(IIe,"STRONG",{});var eAt=s(Mve);z2r=r(eAt,"xlm"),eAt.forEach(t),W2r=r(IIe," \u2014 "),iU=n(IIe,"A",{href:!0});var oAt=s(iU);Q2r=r(oAt,"TFXLMWithLMHeadModel"),oAt.forEach(t),H2r=r(IIe," (XLM model)"),IIe.forEach(t),U2r=i(le),tE=n(le,"LI",{});var NIe=s(tE);Eve=n(NIe,"STRONG",{});var rAt=s(Eve);J2r=r(rAt,"xlm-roberta"),rAt.forEach(t),Y2r=r(NIe," \u2014 "),dU=n(NIe,"A",{href:!0});var tAt=s(dU);K2r=r(tAt,"TFXLMRobertaForMaskedLM"),tAt.forEach(t),Z2r=r(NIe," (XLM-RoBERTa model)"),NIe.forEach(t),evr=i(le),aE=n(le,"LI",{});var qIe=s(aE);Cve=n(qIe,"STRONG",{});var aAt=s(Cve);ovr=r(aAt,"xlnet"),aAt.forEach(t),rvr=r(qIe," \u2014 "),cU=n(qIe,"A",{href:!0});var nAt=s(cU);tvr=r(nAt,"TFXLNetLMHeadModel"),nAt.forEach(t),avr=r(qIe," (XLNet model)"),qIe.forEach(t),le.forEach(t),nvr=i(wl),T(nE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),wOe=i(f),nc=n(f,"H2",{class:!0});var RXe=s(nc);sE=n(RXe,"A",{id:!0,class:!0,href:!0});var sAt=s(sE);wve=n(sAt,"SPAN",{});var lAt=s(wve);T(v8.$$.fragment,lAt),lAt.forEach(t),sAt.forEach(t),svr=i(RXe),Ave=n(RXe,"SPAN",{});var iAt=s(Ave);lvr=r(iAt,"TFAutoModelForCausalLM"),iAt.forEach(t),RXe.forEach(t),AOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(F8.$$.fragment,Al),ivr=i(Al),sc=n(Al,"P",{});var are=s(sc);dvr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fU=n(are,"A",{href:!0});var dAt=s(fU);cvr=r(dAt,"from_pretrained()"),dAt.forEach(t),fvr=r(are," class method or the "),mU=n(are,"A",{href:!0});var cAt=s(mU);mvr=r(cAt,"from_config()"),cAt.forEach(t),gvr=r(are,` class
method.`),are.forEach(t),hvr=i(Al),T8=n(Al,"P",{});var PXe=s(T8);pvr=r(PXe,"This class cannot be instantiated directly using "),Lve=n(PXe,"CODE",{});var fAt=s(Lve);_vr=r(fAt,"__init__()"),fAt.forEach(t),uvr=r(PXe," (throws an error)."),PXe.forEach(t),bvr=i(Al),St=n(Al,"DIV",{class:!0});var CA=s(St);T(M8.$$.fragment,CA),vvr=i(CA),yve=n(CA,"P",{});var mAt=s(yve);Fvr=r(mAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mAt.forEach(t),Tvr=i(CA),lc=n(CA,"P",{});var nre=s(lc);Mvr=r(nre,`Note:
Loading a model from its configuration file does `),xve=n(nre,"STRONG",{});var gAt=s(xve);Evr=r(gAt,"not"),gAt.forEach(t),Cvr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(nre,"A",{href:!0});var hAt=s(gU);wvr=r(hAt,"from_pretrained()"),hAt.forEach(t),Avr=r(nre," to load the model weights."),nre.forEach(t),Lvr=i(CA),T(lE.$$.fragment,CA),CA.forEach(t),yvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(E8.$$.fragment,Ll),xvr=i(Ll),$ve=n(Ll,"P",{});var pAt=s($ve);$vr=r(pAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pAt.forEach(t),kvr=i(Ll),nn=n(Ll,"P",{});var wA=s(nn);Svr=r(wA,"The model class to instantiate is selected based on the "),kve=n(wA,"CODE",{});var _At=s(kve);Rvr=r(_At,"model_type"),_At.forEach(t),Pvr=r(wA,` property of the config object (either
passed as an argument or loaded from `),Sve=n(wA,"CODE",{});var uAt=s(Sve);Bvr=r(uAt,"pretrained_model_name_or_path"),uAt.forEach(t),Ivr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(wA,"CODE",{});var bAt=s(Rve);Nvr=r(bAt,"pretrained_model_name_or_path"),bAt.forEach(t),qvr=r(wA,":"),wA.forEach(t),jvr=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);iE=n(Ce,"LI",{});var jIe=s(iE);Pve=n(jIe,"STRONG",{});var vAt=s(Pve);Dvr=r(vAt,"bert"),vAt.forEach(t),Gvr=r(jIe," \u2014 "),hU=n(jIe,"A",{href:!0});var FAt=s(hU);Ovr=r(FAt,"TFBertLMHeadModel"),FAt.forEach(t),Vvr=r(jIe," (BERT model)"),jIe.forEach(t),Xvr=i(Ce),dE=n(Ce,"LI",{});var DIe=s(dE);Bve=n(DIe,"STRONG",{});var TAt=s(Bve);zvr=r(TAt,"camembert"),TAt.forEach(t),Wvr=r(DIe," \u2014 "),pU=n(DIe,"A",{href:!0});var MAt=s(pU);Qvr=r(MAt,"TFCamembertForCausalLM"),MAt.forEach(t),Hvr=r(DIe," (CamemBERT model)"),DIe.forEach(t),Uvr=i(Ce),cE=n(Ce,"LI",{});var GIe=s(cE);Ive=n(GIe,"STRONG",{});var EAt=s(Ive);Jvr=r(EAt,"ctrl"),EAt.forEach(t),Yvr=r(GIe," \u2014 "),_U=n(GIe,"A",{href:!0});var CAt=s(_U);Kvr=r(CAt,"TFCTRLLMHeadModel"),CAt.forEach(t),Zvr=r(GIe," (CTRL model)"),GIe.forEach(t),eFr=i(Ce),fE=n(Ce,"LI",{});var OIe=s(fE);Nve=n(OIe,"STRONG",{});var wAt=s(Nve);oFr=r(wAt,"gpt2"),wAt.forEach(t),rFr=r(OIe," \u2014 "),uU=n(OIe,"A",{href:!0});var AAt=s(uU);tFr=r(AAt,"TFGPT2LMHeadModel"),AAt.forEach(t),aFr=r(OIe," (OpenAI GPT-2 model)"),OIe.forEach(t),nFr=i(Ce),mE=n(Ce,"LI",{});var VIe=s(mE);qve=n(VIe,"STRONG",{});var LAt=s(qve);sFr=r(LAt,"gptj"),LAt.forEach(t),lFr=r(VIe," \u2014 "),bU=n(VIe,"A",{href:!0});var yAt=s(bU);iFr=r(yAt,"TFGPTJForCausalLM"),yAt.forEach(t),dFr=r(VIe," (GPT-J model)"),VIe.forEach(t),cFr=i(Ce),gE=n(Ce,"LI",{});var XIe=s(gE);jve=n(XIe,"STRONG",{});var xAt=s(jve);fFr=r(xAt,"openai-gpt"),xAt.forEach(t),mFr=r(XIe," \u2014 "),vU=n(XIe,"A",{href:!0});var $At=s(vU);gFr=r($At,"TFOpenAIGPTLMHeadModel"),$At.forEach(t),hFr=r(XIe," (OpenAI GPT model)"),XIe.forEach(t),pFr=i(Ce),hE=n(Ce,"LI",{});var zIe=s(hE);Dve=n(zIe,"STRONG",{});var kAt=s(Dve);_Fr=r(kAt,"opt"),kAt.forEach(t),uFr=r(zIe," \u2014 "),FU=n(zIe,"A",{href:!0});var SAt=s(FU);bFr=r(SAt,"TFOPTForCausalLM"),SAt.forEach(t),vFr=r(zIe," (OPT model)"),zIe.forEach(t),FFr=i(Ce),pE=n(Ce,"LI",{});var WIe=s(pE);Gve=n(WIe,"STRONG",{});var RAt=s(Gve);TFr=r(RAt,"rembert"),RAt.forEach(t),MFr=r(WIe," \u2014 "),TU=n(WIe,"A",{href:!0});var PAt=s(TU);EFr=r(PAt,"TFRemBertForCausalLM"),PAt.forEach(t),CFr=r(WIe," (RemBERT model)"),WIe.forEach(t),wFr=i(Ce),_E=n(Ce,"LI",{});var QIe=s(_E);Ove=n(QIe,"STRONG",{});var BAt=s(Ove);AFr=r(BAt,"roberta"),BAt.forEach(t),LFr=r(QIe," \u2014 "),MU=n(QIe,"A",{href:!0});var IAt=s(MU);yFr=r(IAt,"TFRobertaForCausalLM"),IAt.forEach(t),xFr=r(QIe," (RoBERTa model)"),QIe.forEach(t),$Fr=i(Ce),uE=n(Ce,"LI",{});var HIe=s(uE);Vve=n(HIe,"STRONG",{});var NAt=s(Vve);kFr=r(NAt,"roformer"),NAt.forEach(t),SFr=r(HIe," \u2014 "),EU=n(HIe,"A",{href:!0});var qAt=s(EU);RFr=r(qAt,"TFRoFormerForCausalLM"),qAt.forEach(t),PFr=r(HIe," (RoFormer model)"),HIe.forEach(t),BFr=i(Ce),bE=n(Ce,"LI",{});var UIe=s(bE);Xve=n(UIe,"STRONG",{});var jAt=s(Xve);IFr=r(jAt,"transfo-xl"),jAt.forEach(t),NFr=r(UIe," \u2014 "),CU=n(UIe,"A",{href:!0});var DAt=s(CU);qFr=r(DAt,"TFTransfoXLLMHeadModel"),DAt.forEach(t),jFr=r(UIe," (Transformer-XL model)"),UIe.forEach(t),DFr=i(Ce),vE=n(Ce,"LI",{});var JIe=s(vE);zve=n(JIe,"STRONG",{});var GAt=s(zve);GFr=r(GAt,"xlm"),GAt.forEach(t),OFr=r(JIe," \u2014 "),wU=n(JIe,"A",{href:!0});var OAt=s(wU);VFr=r(OAt,"TFXLMWithLMHeadModel"),OAt.forEach(t),XFr=r(JIe," (XLM model)"),JIe.forEach(t),zFr=i(Ce),FE=n(Ce,"LI",{});var YIe=s(FE);Wve=n(YIe,"STRONG",{});var VAt=s(Wve);WFr=r(VAt,"xlnet"),VAt.forEach(t),QFr=r(YIe," \u2014 "),AU=n(YIe,"A",{href:!0});var XAt=s(AU);HFr=r(XAt,"TFXLNetLMHeadModel"),XAt.forEach(t),UFr=r(YIe," (XLNet model)"),YIe.forEach(t),Ce.forEach(t),JFr=i(Ll),T(TE.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),LOe=i(f),ic=n(f,"H2",{class:!0});var BXe=s(ic);ME=n(BXe,"A",{id:!0,class:!0,href:!0});var zAt=s(ME);Qve=n(zAt,"SPAN",{});var WAt=s(Qve);T(C8.$$.fragment,WAt),WAt.forEach(t),zAt.forEach(t),YFr=i(BXe),Hve=n(BXe,"SPAN",{});var QAt=s(Hve);KFr=r(QAt,"TFAutoModelForImageClassification"),QAt.forEach(t),BXe.forEach(t),yOe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(w8.$$.fragment,yl),ZFr=i(yl),dc=n(yl,"P",{});var sre=s(dc);eTr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LU=n(sre,"A",{href:!0});var HAt=s(LU);oTr=r(HAt,"from_pretrained()"),HAt.forEach(t),rTr=r(sre," class method or the "),yU=n(sre,"A",{href:!0});var UAt=s(yU);tTr=r(UAt,"from_config()"),UAt.forEach(t),aTr=r(sre,` class
method.`),sre.forEach(t),nTr=i(yl),A8=n(yl,"P",{});var IXe=s(A8);sTr=r(IXe,"This class cannot be instantiated directly using "),Uve=n(IXe,"CODE",{});var JAt=s(Uve);lTr=r(JAt,"__init__()"),JAt.forEach(t),iTr=r(IXe," (throws an error)."),IXe.forEach(t),dTr=i(yl),Rt=n(yl,"DIV",{class:!0});var AA=s(Rt);T(L8.$$.fragment,AA),cTr=i(AA),Jve=n(AA,"P",{});var YAt=s(Jve);fTr=r(YAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YAt.forEach(t),mTr=i(AA),cc=n(AA,"P",{});var lre=s(cc);gTr=r(lre,`Note:
Loading a model from its configuration file does `),Yve=n(lre,"STRONG",{});var KAt=s(Yve);hTr=r(KAt,"not"),KAt.forEach(t),pTr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(lre,"A",{href:!0});var ZAt=s(xU);_Tr=r(ZAt,"from_pretrained()"),ZAt.forEach(t),uTr=r(lre," to load the model weights."),lre.forEach(t),bTr=i(AA),T(EE.$$.fragment,AA),AA.forEach(t),vTr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(y8.$$.fragment,xl),FTr=i(xl),Kve=n(xl,"P",{});var e6t=s(Kve);TTr=r(e6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e6t.forEach(t),MTr=i(xl),sn=n(xl,"P",{});var LA=s(sn);ETr=r(LA,"The model class to instantiate is selected based on the "),Zve=n(LA,"CODE",{});var o6t=s(Zve);CTr=r(o6t,"model_type"),o6t.forEach(t),wTr=r(LA,` property of the config object (either
passed as an argument or loaded from `),eFe=n(LA,"CODE",{});var r6t=s(eFe);ATr=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),LTr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oFe=n(LA,"CODE",{});var t6t=s(oFe);yTr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),xTr=r(LA,":"),LA.forEach(t),$Tr=i(xl),ln=n(xl,"UL",{});var yA=s(ln);CE=n(yA,"LI",{});var KIe=s(CE);rFe=n(KIe,"STRONG",{});var a6t=s(rFe);kTr=r(a6t,"convnext"),a6t.forEach(t),STr=r(KIe," \u2014 "),$U=n(KIe,"A",{href:!0});var n6t=s($U);RTr=r(n6t,"TFConvNextForImageClassification"),n6t.forEach(t),PTr=r(KIe," (ConvNeXT model)"),KIe.forEach(t),BTr=i(yA),wE=n(yA,"LI",{});var ZIe=s(wE);tFe=n(ZIe,"STRONG",{});var s6t=s(tFe);ITr=r(s6t,"data2vec-vision"),s6t.forEach(t),NTr=r(ZIe," \u2014 "),kU=n(ZIe,"A",{href:!0});var l6t=s(kU);qTr=r(l6t,"TFData2VecVisionForImageClassification"),l6t.forEach(t),jTr=r(ZIe," (Data2VecVision model)"),ZIe.forEach(t),DTr=i(yA),AE=n(yA,"LI",{});var eNe=s(AE);aFe=n(eNe,"STRONG",{});var i6t=s(aFe);GTr=r(i6t,"swin"),i6t.forEach(t),OTr=r(eNe," \u2014 "),SU=n(eNe,"A",{href:!0});var d6t=s(SU);VTr=r(d6t,"TFSwinForImageClassification"),d6t.forEach(t),XTr=r(eNe," (Swin Transformer model)"),eNe.forEach(t),zTr=i(yA),LE=n(yA,"LI",{});var oNe=s(LE);nFe=n(oNe,"STRONG",{});var c6t=s(nFe);WTr=r(c6t,"vit"),c6t.forEach(t),QTr=r(oNe," \u2014 "),RU=n(oNe,"A",{href:!0});var f6t=s(RU);HTr=r(f6t,"TFViTForImageClassification"),f6t.forEach(t),UTr=r(oNe," (ViT model)"),oNe.forEach(t),yA.forEach(t),JTr=i(xl),T(yE.$$.fragment,xl),xl.forEach(t),yl.forEach(t),xOe=i(f),fc=n(f,"H2",{class:!0});var NXe=s(fc);xE=n(NXe,"A",{id:!0,class:!0,href:!0});var m6t=s(xE);sFe=n(m6t,"SPAN",{});var g6t=s(sFe);T(x8.$$.fragment,g6t),g6t.forEach(t),m6t.forEach(t),YTr=i(NXe),lFe=n(NXe,"SPAN",{});var h6t=s(lFe);KTr=r(h6t,"TFAutoModelForMaskedLM"),h6t.forEach(t),NXe.forEach(t),$Oe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T($8.$$.fragment,$l),ZTr=i($l),mc=n($l,"P",{});var ire=s(mc);eMr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PU=n(ire,"A",{href:!0});var p6t=s(PU);oMr=r(p6t,"from_pretrained()"),p6t.forEach(t),rMr=r(ire," class method or the "),BU=n(ire,"A",{href:!0});var _6t=s(BU);tMr=r(_6t,"from_config()"),_6t.forEach(t),aMr=r(ire,` class
method.`),ire.forEach(t),nMr=i($l),k8=n($l,"P",{});var qXe=s(k8);sMr=r(qXe,"This class cannot be instantiated directly using "),iFe=n(qXe,"CODE",{});var u6t=s(iFe);lMr=r(u6t,"__init__()"),u6t.forEach(t),iMr=r(qXe," (throws an error)."),qXe.forEach(t),dMr=i($l),Pt=n($l,"DIV",{class:!0});var xA=s(Pt);T(S8.$$.fragment,xA),cMr=i(xA),dFe=n(xA,"P",{});var b6t=s(dFe);fMr=r(b6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b6t.forEach(t),mMr=i(xA),gc=n(xA,"P",{});var dre=s(gc);gMr=r(dre,`Note:
Loading a model from its configuration file does `),cFe=n(dre,"STRONG",{});var v6t=s(cFe);hMr=r(v6t,"not"),v6t.forEach(t),pMr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(dre,"A",{href:!0});var F6t=s(IU);_Mr=r(F6t,"from_pretrained()"),F6t.forEach(t),uMr=r(dre," to load the model weights."),dre.forEach(t),bMr=i(xA),T($E.$$.fragment,xA),xA.forEach(t),vMr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(R8.$$.fragment,kl),FMr=i(kl),fFe=n(kl,"P",{});var T6t=s(fFe);TMr=r(T6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T6t.forEach(t),MMr=i(kl),dn=n(kl,"P",{});var $A=s(dn);EMr=r($A,"The model class to instantiate is selected based on the "),mFe=n($A,"CODE",{});var M6t=s(mFe);CMr=r(M6t,"model_type"),M6t.forEach(t),wMr=r($A,` property of the config object (either
passed as an argument or loaded from `),gFe=n($A,"CODE",{});var E6t=s(gFe);AMr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),LMr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n($A,"CODE",{});var C6t=s(hFe);yMr=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),xMr=r($A,":"),$A.forEach(t),$Mr=i(kl),ie=n(kl,"UL",{});var fe=s(ie);kE=n(fe,"LI",{});var rNe=s(kE);pFe=n(rNe,"STRONG",{});var w6t=s(pFe);kMr=r(w6t,"albert"),w6t.forEach(t),SMr=r(rNe," \u2014 "),NU=n(rNe,"A",{href:!0});var A6t=s(NU);RMr=r(A6t,"TFAlbertForMaskedLM"),A6t.forEach(t),PMr=r(rNe," (ALBERT model)"),rNe.forEach(t),BMr=i(fe),SE=n(fe,"LI",{});var tNe=s(SE);_Fe=n(tNe,"STRONG",{});var L6t=s(_Fe);IMr=r(L6t,"bert"),L6t.forEach(t),NMr=r(tNe," \u2014 "),qU=n(tNe,"A",{href:!0});var y6t=s(qU);qMr=r(y6t,"TFBertForMaskedLM"),y6t.forEach(t),jMr=r(tNe," (BERT model)"),tNe.forEach(t),DMr=i(fe),RE=n(fe,"LI",{});var aNe=s(RE);uFe=n(aNe,"STRONG",{});var x6t=s(uFe);GMr=r(x6t,"camembert"),x6t.forEach(t),OMr=r(aNe," \u2014 "),jU=n(aNe,"A",{href:!0});var $6t=s(jU);VMr=r($6t,"TFCamembertForMaskedLM"),$6t.forEach(t),XMr=r(aNe," (CamemBERT model)"),aNe.forEach(t),zMr=i(fe),PE=n(fe,"LI",{});var nNe=s(PE);bFe=n(nNe,"STRONG",{});var k6t=s(bFe);WMr=r(k6t,"convbert"),k6t.forEach(t),QMr=r(nNe," \u2014 "),DU=n(nNe,"A",{href:!0});var S6t=s(DU);HMr=r(S6t,"TFConvBertForMaskedLM"),S6t.forEach(t),UMr=r(nNe," (ConvBERT model)"),nNe.forEach(t),JMr=i(fe),BE=n(fe,"LI",{});var sNe=s(BE);vFe=n(sNe,"STRONG",{});var R6t=s(vFe);YMr=r(R6t,"deberta"),R6t.forEach(t),KMr=r(sNe," \u2014 "),GU=n(sNe,"A",{href:!0});var P6t=s(GU);ZMr=r(P6t,"TFDebertaForMaskedLM"),P6t.forEach(t),eEr=r(sNe," (DeBERTa model)"),sNe.forEach(t),oEr=i(fe),IE=n(fe,"LI",{});var lNe=s(IE);FFe=n(lNe,"STRONG",{});var B6t=s(FFe);rEr=r(B6t,"deberta-v2"),B6t.forEach(t),tEr=r(lNe," \u2014 "),OU=n(lNe,"A",{href:!0});var I6t=s(OU);aEr=r(I6t,"TFDebertaV2ForMaskedLM"),I6t.forEach(t),nEr=r(lNe," (DeBERTa-v2 model)"),lNe.forEach(t),sEr=i(fe),NE=n(fe,"LI",{});var iNe=s(NE);TFe=n(iNe,"STRONG",{});var N6t=s(TFe);lEr=r(N6t,"distilbert"),N6t.forEach(t),iEr=r(iNe," \u2014 "),VU=n(iNe,"A",{href:!0});var q6t=s(VU);dEr=r(q6t,"TFDistilBertForMaskedLM"),q6t.forEach(t),cEr=r(iNe," (DistilBERT model)"),iNe.forEach(t),fEr=i(fe),qE=n(fe,"LI",{});var dNe=s(qE);MFe=n(dNe,"STRONG",{});var j6t=s(MFe);mEr=r(j6t,"electra"),j6t.forEach(t),gEr=r(dNe," \u2014 "),XU=n(dNe,"A",{href:!0});var D6t=s(XU);hEr=r(D6t,"TFElectraForMaskedLM"),D6t.forEach(t),pEr=r(dNe," (ELECTRA model)"),dNe.forEach(t),_Er=i(fe),jE=n(fe,"LI",{});var cNe=s(jE);EFe=n(cNe,"STRONG",{});var G6t=s(EFe);uEr=r(G6t,"flaubert"),G6t.forEach(t),bEr=r(cNe," \u2014 "),zU=n(cNe,"A",{href:!0});var O6t=s(zU);vEr=r(O6t,"TFFlaubertWithLMHeadModel"),O6t.forEach(t),FEr=r(cNe," (FlauBERT model)"),cNe.forEach(t),TEr=i(fe),DE=n(fe,"LI",{});var fNe=s(DE);CFe=n(fNe,"STRONG",{});var V6t=s(CFe);MEr=r(V6t,"funnel"),V6t.forEach(t),EEr=r(fNe," \u2014 "),WU=n(fNe,"A",{href:!0});var X6t=s(WU);CEr=r(X6t,"TFFunnelForMaskedLM"),X6t.forEach(t),wEr=r(fNe," (Funnel Transformer model)"),fNe.forEach(t),AEr=i(fe),GE=n(fe,"LI",{});var mNe=s(GE);wFe=n(mNe,"STRONG",{});var z6t=s(wFe);LEr=r(z6t,"layoutlm"),z6t.forEach(t),yEr=r(mNe," \u2014 "),QU=n(mNe,"A",{href:!0});var W6t=s(QU);xEr=r(W6t,"TFLayoutLMForMaskedLM"),W6t.forEach(t),$Er=r(mNe," (LayoutLM model)"),mNe.forEach(t),kEr=i(fe),OE=n(fe,"LI",{});var gNe=s(OE);AFe=n(gNe,"STRONG",{});var Q6t=s(AFe);SEr=r(Q6t,"longformer"),Q6t.forEach(t),REr=r(gNe," \u2014 "),HU=n(gNe,"A",{href:!0});var H6t=s(HU);PEr=r(H6t,"TFLongformerForMaskedLM"),H6t.forEach(t),BEr=r(gNe," (Longformer model)"),gNe.forEach(t),IEr=i(fe),VE=n(fe,"LI",{});var hNe=s(VE);LFe=n(hNe,"STRONG",{});var U6t=s(LFe);NEr=r(U6t,"mobilebert"),U6t.forEach(t),qEr=r(hNe," \u2014 "),UU=n(hNe,"A",{href:!0});var J6t=s(UU);jEr=r(J6t,"TFMobileBertForMaskedLM"),J6t.forEach(t),DEr=r(hNe," (MobileBERT model)"),hNe.forEach(t),GEr=i(fe),XE=n(fe,"LI",{});var pNe=s(XE);yFe=n(pNe,"STRONG",{});var Y6t=s(yFe);OEr=r(Y6t,"mpnet"),Y6t.forEach(t),VEr=r(pNe," \u2014 "),JU=n(pNe,"A",{href:!0});var K6t=s(JU);XEr=r(K6t,"TFMPNetForMaskedLM"),K6t.forEach(t),zEr=r(pNe," (MPNet model)"),pNe.forEach(t),WEr=i(fe),zE=n(fe,"LI",{});var _Ne=s(zE);xFe=n(_Ne,"STRONG",{});var Z6t=s(xFe);QEr=r(Z6t,"rembert"),Z6t.forEach(t),HEr=r(_Ne," \u2014 "),YU=n(_Ne,"A",{href:!0});var eLt=s(YU);UEr=r(eLt,"TFRemBertForMaskedLM"),eLt.forEach(t),JEr=r(_Ne," (RemBERT model)"),_Ne.forEach(t),YEr=i(fe),WE=n(fe,"LI",{});var uNe=s(WE);$Fe=n(uNe,"STRONG",{});var oLt=s($Fe);KEr=r(oLt,"roberta"),oLt.forEach(t),ZEr=r(uNe," \u2014 "),KU=n(uNe,"A",{href:!0});var rLt=s(KU);e4r=r(rLt,"TFRobertaForMaskedLM"),rLt.forEach(t),o4r=r(uNe," (RoBERTa model)"),uNe.forEach(t),r4r=i(fe),QE=n(fe,"LI",{});var bNe=s(QE);kFe=n(bNe,"STRONG",{});var tLt=s(kFe);t4r=r(tLt,"roformer"),tLt.forEach(t),a4r=r(bNe," \u2014 "),ZU=n(bNe,"A",{href:!0});var aLt=s(ZU);n4r=r(aLt,"TFRoFormerForMaskedLM"),aLt.forEach(t),s4r=r(bNe," (RoFormer model)"),bNe.forEach(t),l4r=i(fe),HE=n(fe,"LI",{});var vNe=s(HE);SFe=n(vNe,"STRONG",{});var nLt=s(SFe);i4r=r(nLt,"tapas"),nLt.forEach(t),d4r=r(vNe," \u2014 "),eJ=n(vNe,"A",{href:!0});var sLt=s(eJ);c4r=r(sLt,"TFTapasForMaskedLM"),sLt.forEach(t),f4r=r(vNe," (TAPAS model)"),vNe.forEach(t),m4r=i(fe),UE=n(fe,"LI",{});var FNe=s(UE);RFe=n(FNe,"STRONG",{});var lLt=s(RFe);g4r=r(lLt,"xlm"),lLt.forEach(t),h4r=r(FNe," \u2014 "),oJ=n(FNe,"A",{href:!0});var iLt=s(oJ);p4r=r(iLt,"TFXLMWithLMHeadModel"),iLt.forEach(t),_4r=r(FNe," (XLM model)"),FNe.forEach(t),u4r=i(fe),JE=n(fe,"LI",{});var TNe=s(JE);PFe=n(TNe,"STRONG",{});var dLt=s(PFe);b4r=r(dLt,"xlm-roberta"),dLt.forEach(t),v4r=r(TNe," \u2014 "),rJ=n(TNe,"A",{href:!0});var cLt=s(rJ);F4r=r(cLt,"TFXLMRobertaForMaskedLM"),cLt.forEach(t),T4r=r(TNe," (XLM-RoBERTa model)"),TNe.forEach(t),fe.forEach(t),M4r=i(kl),T(YE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),kOe=i(f),hc=n(f,"H2",{class:!0});var jXe=s(hc);KE=n(jXe,"A",{id:!0,class:!0,href:!0});var fLt=s(KE);BFe=n(fLt,"SPAN",{});var mLt=s(BFe);T(P8.$$.fragment,mLt),mLt.forEach(t),fLt.forEach(t),E4r=i(jXe),IFe=n(jXe,"SPAN",{});var gLt=s(IFe);C4r=r(gLt,"TFAutoModelForSeq2SeqLM"),gLt.forEach(t),jXe.forEach(t),SOe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(B8.$$.fragment,Sl),w4r=i(Sl),pc=n(Sl,"P",{});var cre=s(pc);A4r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=n(cre,"A",{href:!0});var hLt=s(tJ);L4r=r(hLt,"from_pretrained()"),hLt.forEach(t),y4r=r(cre," class method or the "),aJ=n(cre,"A",{href:!0});var pLt=s(aJ);x4r=r(pLt,"from_config()"),pLt.forEach(t),$4r=r(cre,` class
method.`),cre.forEach(t),k4r=i(Sl),I8=n(Sl,"P",{});var DXe=s(I8);S4r=r(DXe,"This class cannot be instantiated directly using "),NFe=n(DXe,"CODE",{});var _Lt=s(NFe);R4r=r(_Lt,"__init__()"),_Lt.forEach(t),P4r=r(DXe," (throws an error)."),DXe.forEach(t),B4r=i(Sl),Bt=n(Sl,"DIV",{class:!0});var kA=s(Bt);T(N8.$$.fragment,kA),I4r=i(kA),qFe=n(kA,"P",{});var uLt=s(qFe);N4r=r(uLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uLt.forEach(t),q4r=i(kA),_c=n(kA,"P",{});var fre=s(_c);j4r=r(fre,`Note:
Loading a model from its configuration file does `),jFe=n(fre,"STRONG",{});var bLt=s(jFe);D4r=r(bLt,"not"),bLt.forEach(t),G4r=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(fre,"A",{href:!0});var vLt=s(nJ);O4r=r(vLt,"from_pretrained()"),vLt.forEach(t),V4r=r(fre," to load the model weights."),fre.forEach(t),X4r=i(kA),T(ZE.$$.fragment,kA),kA.forEach(t),z4r=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(q8.$$.fragment,Rl),W4r=i(Rl),DFe=n(Rl,"P",{});var FLt=s(DFe);Q4r=r(FLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FLt.forEach(t),H4r=i(Rl),cn=n(Rl,"P",{});var SA=s(cn);U4r=r(SA,"The model class to instantiate is selected based on the "),GFe=n(SA,"CODE",{});var TLt=s(GFe);J4r=r(TLt,"model_type"),TLt.forEach(t),Y4r=r(SA,` property of the config object (either
passed as an argument or loaded from `),OFe=n(SA,"CODE",{});var MLt=s(OFe);K4r=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),Z4r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(SA,"CODE",{});var ELt=s(VFe);eCr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),oCr=r(SA,":"),SA.forEach(t),rCr=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);e4=n(Ie,"LI",{});var MNe=s(e4);XFe=n(MNe,"STRONG",{});var CLt=s(XFe);tCr=r(CLt,"bart"),CLt.forEach(t),aCr=r(MNe," \u2014 "),sJ=n(MNe,"A",{href:!0});var wLt=s(sJ);nCr=r(wLt,"TFBartForConditionalGeneration"),wLt.forEach(t),sCr=r(MNe," (BART model)"),MNe.forEach(t),lCr=i(Ie),o4=n(Ie,"LI",{});var ENe=s(o4);zFe=n(ENe,"STRONG",{});var ALt=s(zFe);iCr=r(ALt,"blenderbot"),ALt.forEach(t),dCr=r(ENe," \u2014 "),lJ=n(ENe,"A",{href:!0});var LLt=s(lJ);cCr=r(LLt,"TFBlenderbotForConditionalGeneration"),LLt.forEach(t),fCr=r(ENe," (Blenderbot model)"),ENe.forEach(t),mCr=i(Ie),r4=n(Ie,"LI",{});var CNe=s(r4);WFe=n(CNe,"STRONG",{});var yLt=s(WFe);gCr=r(yLt,"blenderbot-small"),yLt.forEach(t),hCr=r(CNe," \u2014 "),iJ=n(CNe,"A",{href:!0});var xLt=s(iJ);pCr=r(xLt,"TFBlenderbotSmallForConditionalGeneration"),xLt.forEach(t),_Cr=r(CNe," (BlenderbotSmall model)"),CNe.forEach(t),uCr=i(Ie),t4=n(Ie,"LI",{});var wNe=s(t4);QFe=n(wNe,"STRONG",{});var $Lt=s(QFe);bCr=r($Lt,"encoder-decoder"),$Lt.forEach(t),vCr=r(wNe," \u2014 "),dJ=n(wNe,"A",{href:!0});var kLt=s(dJ);FCr=r(kLt,"TFEncoderDecoderModel"),kLt.forEach(t),TCr=r(wNe," (Encoder decoder model)"),wNe.forEach(t),MCr=i(Ie),a4=n(Ie,"LI",{});var ANe=s(a4);HFe=n(ANe,"STRONG",{});var SLt=s(HFe);ECr=r(SLt,"led"),SLt.forEach(t),CCr=r(ANe," \u2014 "),cJ=n(ANe,"A",{href:!0});var RLt=s(cJ);wCr=r(RLt,"TFLEDForConditionalGeneration"),RLt.forEach(t),ACr=r(ANe," (LED model)"),ANe.forEach(t),LCr=i(Ie),n4=n(Ie,"LI",{});var LNe=s(n4);UFe=n(LNe,"STRONG",{});var PLt=s(UFe);yCr=r(PLt,"marian"),PLt.forEach(t),xCr=r(LNe," \u2014 "),fJ=n(LNe,"A",{href:!0});var BLt=s(fJ);$Cr=r(BLt,"TFMarianMTModel"),BLt.forEach(t),kCr=r(LNe," (Marian model)"),LNe.forEach(t),SCr=i(Ie),s4=n(Ie,"LI",{});var yNe=s(s4);JFe=n(yNe,"STRONG",{});var ILt=s(JFe);RCr=r(ILt,"mbart"),ILt.forEach(t),PCr=r(yNe," \u2014 "),mJ=n(yNe,"A",{href:!0});var NLt=s(mJ);BCr=r(NLt,"TFMBartForConditionalGeneration"),NLt.forEach(t),ICr=r(yNe," (mBART model)"),yNe.forEach(t),NCr=i(Ie),l4=n(Ie,"LI",{});var xNe=s(l4);YFe=n(xNe,"STRONG",{});var qLt=s(YFe);qCr=r(qLt,"mt5"),qLt.forEach(t),jCr=r(xNe," \u2014 "),gJ=n(xNe,"A",{href:!0});var jLt=s(gJ);DCr=r(jLt,"TFMT5ForConditionalGeneration"),jLt.forEach(t),GCr=r(xNe," (MT5 model)"),xNe.forEach(t),OCr=i(Ie),i4=n(Ie,"LI",{});var $Ne=s(i4);KFe=n($Ne,"STRONG",{});var DLt=s(KFe);VCr=r(DLt,"pegasus"),DLt.forEach(t),XCr=r($Ne," \u2014 "),hJ=n($Ne,"A",{href:!0});var GLt=s(hJ);zCr=r(GLt,"TFPegasusForConditionalGeneration"),GLt.forEach(t),WCr=r($Ne," (Pegasus model)"),$Ne.forEach(t),QCr=i(Ie),d4=n(Ie,"LI",{});var kNe=s(d4);ZFe=n(kNe,"STRONG",{});var OLt=s(ZFe);HCr=r(OLt,"t5"),OLt.forEach(t),UCr=r(kNe," \u2014 "),pJ=n(kNe,"A",{href:!0});var VLt=s(pJ);JCr=r(VLt,"TFT5ForConditionalGeneration"),VLt.forEach(t),YCr=r(kNe," (T5 model)"),kNe.forEach(t),Ie.forEach(t),KCr=i(Rl),T(c4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ROe=i(f),uc=n(f,"H2",{class:!0});var GXe=s(uc);f4=n(GXe,"A",{id:!0,class:!0,href:!0});var XLt=s(f4);eTe=n(XLt,"SPAN",{});var zLt=s(eTe);T(j8.$$.fragment,zLt),zLt.forEach(t),XLt.forEach(t),ZCr=i(GXe),oTe=n(GXe,"SPAN",{});var WLt=s(oTe);e5r=r(WLt,"TFAutoModelForSequenceClassification"),WLt.forEach(t),GXe.forEach(t),POe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(D8.$$.fragment,Pl),o5r=i(Pl),bc=n(Pl,"P",{});var mre=s(bc);r5r=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_J=n(mre,"A",{href:!0});var QLt=s(_J);t5r=r(QLt,"from_pretrained()"),QLt.forEach(t),a5r=r(mre," class method or the "),uJ=n(mre,"A",{href:!0});var HLt=s(uJ);n5r=r(HLt,"from_config()"),HLt.forEach(t),s5r=r(mre,` class
method.`),mre.forEach(t),l5r=i(Pl),G8=n(Pl,"P",{});var OXe=s(G8);i5r=r(OXe,"This class cannot be instantiated directly using "),rTe=n(OXe,"CODE",{});var ULt=s(rTe);d5r=r(ULt,"__init__()"),ULt.forEach(t),c5r=r(OXe," (throws an error)."),OXe.forEach(t),f5r=i(Pl),It=n(Pl,"DIV",{class:!0});var RA=s(It);T(O8.$$.fragment,RA),m5r=i(RA),tTe=n(RA,"P",{});var JLt=s(tTe);g5r=r(JLt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JLt.forEach(t),h5r=i(RA),vc=n(RA,"P",{});var gre=s(vc);p5r=r(gre,`Note:
Loading a model from its configuration file does `),aTe=n(gre,"STRONG",{});var YLt=s(aTe);_5r=r(YLt,"not"),YLt.forEach(t),u5r=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(gre,"A",{href:!0});var KLt=s(bJ);b5r=r(KLt,"from_pretrained()"),KLt.forEach(t),v5r=r(gre," to load the model weights."),gre.forEach(t),F5r=i(RA),T(m4.$$.fragment,RA),RA.forEach(t),T5r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(V8.$$.fragment,Bl),M5r=i(Bl),nTe=n(Bl,"P",{});var ZLt=s(nTe);E5r=r(ZLt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZLt.forEach(t),C5r=i(Bl),fn=n(Bl,"P",{});var PA=s(fn);w5r=r(PA,"The model class to instantiate is selected based on the "),sTe=n(PA,"CODE",{});var eyt=s(sTe);A5r=r(eyt,"model_type"),eyt.forEach(t),L5r=r(PA,` property of the config object (either
passed as an argument or loaded from `),lTe=n(PA,"CODE",{});var oyt=s(lTe);y5r=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),x5r=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(PA,"CODE",{});var ryt=s(iTe);$5r=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),k5r=r(PA,":"),PA.forEach(t),S5r=i(Bl),te=n(Bl,"UL",{});var ne=s(te);g4=n(ne,"LI",{});var SNe=s(g4);dTe=n(SNe,"STRONG",{});var tyt=s(dTe);R5r=r(tyt,"albert"),tyt.forEach(t),P5r=r(SNe," \u2014 "),vJ=n(SNe,"A",{href:!0});var ayt=s(vJ);B5r=r(ayt,"TFAlbertForSequenceClassification"),ayt.forEach(t),I5r=r(SNe," (ALBERT model)"),SNe.forEach(t),N5r=i(ne),h4=n(ne,"LI",{});var RNe=s(h4);cTe=n(RNe,"STRONG",{});var nyt=s(cTe);q5r=r(nyt,"bert"),nyt.forEach(t),j5r=r(RNe," \u2014 "),FJ=n(RNe,"A",{href:!0});var syt=s(FJ);D5r=r(syt,"TFBertForSequenceClassification"),syt.forEach(t),G5r=r(RNe," (BERT model)"),RNe.forEach(t),O5r=i(ne),p4=n(ne,"LI",{});var PNe=s(p4);fTe=n(PNe,"STRONG",{});var lyt=s(fTe);V5r=r(lyt,"camembert"),lyt.forEach(t),X5r=r(PNe," \u2014 "),TJ=n(PNe,"A",{href:!0});var iyt=s(TJ);z5r=r(iyt,"TFCamembertForSequenceClassification"),iyt.forEach(t),W5r=r(PNe," (CamemBERT model)"),PNe.forEach(t),Q5r=i(ne),_4=n(ne,"LI",{});var BNe=s(_4);mTe=n(BNe,"STRONG",{});var dyt=s(mTe);H5r=r(dyt,"convbert"),dyt.forEach(t),U5r=r(BNe," \u2014 "),MJ=n(BNe,"A",{href:!0});var cyt=s(MJ);J5r=r(cyt,"TFConvBertForSequenceClassification"),cyt.forEach(t),Y5r=r(BNe," (ConvBERT model)"),BNe.forEach(t),K5r=i(ne),u4=n(ne,"LI",{});var INe=s(u4);gTe=n(INe,"STRONG",{});var fyt=s(gTe);Z5r=r(fyt,"ctrl"),fyt.forEach(t),e3r=r(INe," \u2014 "),EJ=n(INe,"A",{href:!0});var myt=s(EJ);o3r=r(myt,"TFCTRLForSequenceClassification"),myt.forEach(t),r3r=r(INe," (CTRL model)"),INe.forEach(t),t3r=i(ne),b4=n(ne,"LI",{});var NNe=s(b4);hTe=n(NNe,"STRONG",{});var gyt=s(hTe);a3r=r(gyt,"deberta"),gyt.forEach(t),n3r=r(NNe," \u2014 "),CJ=n(NNe,"A",{href:!0});var hyt=s(CJ);s3r=r(hyt,"TFDebertaForSequenceClassification"),hyt.forEach(t),l3r=r(NNe," (DeBERTa model)"),NNe.forEach(t),i3r=i(ne),v4=n(ne,"LI",{});var qNe=s(v4);pTe=n(qNe,"STRONG",{});var pyt=s(pTe);d3r=r(pyt,"deberta-v2"),pyt.forEach(t),c3r=r(qNe," \u2014 "),wJ=n(qNe,"A",{href:!0});var _yt=s(wJ);f3r=r(_yt,"TFDebertaV2ForSequenceClassification"),_yt.forEach(t),m3r=r(qNe," (DeBERTa-v2 model)"),qNe.forEach(t),g3r=i(ne),F4=n(ne,"LI",{});var jNe=s(F4);_Te=n(jNe,"STRONG",{});var uyt=s(_Te);h3r=r(uyt,"distilbert"),uyt.forEach(t),p3r=r(jNe," \u2014 "),AJ=n(jNe,"A",{href:!0});var byt=s(AJ);_3r=r(byt,"TFDistilBertForSequenceClassification"),byt.forEach(t),u3r=r(jNe," (DistilBERT model)"),jNe.forEach(t),b3r=i(ne),T4=n(ne,"LI",{});var DNe=s(T4);uTe=n(DNe,"STRONG",{});var vyt=s(uTe);v3r=r(vyt,"electra"),vyt.forEach(t),F3r=r(DNe," \u2014 "),LJ=n(DNe,"A",{href:!0});var Fyt=s(LJ);T3r=r(Fyt,"TFElectraForSequenceClassification"),Fyt.forEach(t),M3r=r(DNe," (ELECTRA model)"),DNe.forEach(t),E3r=i(ne),M4=n(ne,"LI",{});var GNe=s(M4);bTe=n(GNe,"STRONG",{});var Tyt=s(bTe);C3r=r(Tyt,"flaubert"),Tyt.forEach(t),w3r=r(GNe," \u2014 "),yJ=n(GNe,"A",{href:!0});var Myt=s(yJ);A3r=r(Myt,"TFFlaubertForSequenceClassification"),Myt.forEach(t),L3r=r(GNe," (FlauBERT model)"),GNe.forEach(t),y3r=i(ne),E4=n(ne,"LI",{});var ONe=s(E4);vTe=n(ONe,"STRONG",{});var Eyt=s(vTe);x3r=r(Eyt,"funnel"),Eyt.forEach(t),$3r=r(ONe," \u2014 "),xJ=n(ONe,"A",{href:!0});var Cyt=s(xJ);k3r=r(Cyt,"TFFunnelForSequenceClassification"),Cyt.forEach(t),S3r=r(ONe," (Funnel Transformer model)"),ONe.forEach(t),R3r=i(ne),C4=n(ne,"LI",{});var VNe=s(C4);FTe=n(VNe,"STRONG",{});var wyt=s(FTe);P3r=r(wyt,"gpt2"),wyt.forEach(t),B3r=r(VNe," \u2014 "),$J=n(VNe,"A",{href:!0});var Ayt=s($J);I3r=r(Ayt,"TFGPT2ForSequenceClassification"),Ayt.forEach(t),N3r=r(VNe," (OpenAI GPT-2 model)"),VNe.forEach(t),q3r=i(ne),w4=n(ne,"LI",{});var XNe=s(w4);TTe=n(XNe,"STRONG",{});var Lyt=s(TTe);j3r=r(Lyt,"gptj"),Lyt.forEach(t),D3r=r(XNe," \u2014 "),kJ=n(XNe,"A",{href:!0});var yyt=s(kJ);G3r=r(yyt,"TFGPTJForSequenceClassification"),yyt.forEach(t),O3r=r(XNe," (GPT-J model)"),XNe.forEach(t),V3r=i(ne),A4=n(ne,"LI",{});var zNe=s(A4);MTe=n(zNe,"STRONG",{});var xyt=s(MTe);X3r=r(xyt,"layoutlm"),xyt.forEach(t),z3r=r(zNe," \u2014 "),SJ=n(zNe,"A",{href:!0});var $yt=s(SJ);W3r=r($yt,"TFLayoutLMForSequenceClassification"),$yt.forEach(t),Q3r=r(zNe," (LayoutLM model)"),zNe.forEach(t),H3r=i(ne),L4=n(ne,"LI",{});var WNe=s(L4);ETe=n(WNe,"STRONG",{});var kyt=s(ETe);U3r=r(kyt,"longformer"),kyt.forEach(t),J3r=r(WNe," \u2014 "),RJ=n(WNe,"A",{href:!0});var Syt=s(RJ);Y3r=r(Syt,"TFLongformerForSequenceClassification"),Syt.forEach(t),K3r=r(WNe," (Longformer model)"),WNe.forEach(t),Z3r=i(ne),y4=n(ne,"LI",{});var QNe=s(y4);CTe=n(QNe,"STRONG",{});var Ryt=s(CTe);e0r=r(Ryt,"mobilebert"),Ryt.forEach(t),o0r=r(QNe," \u2014 "),PJ=n(QNe,"A",{href:!0});var Pyt=s(PJ);r0r=r(Pyt,"TFMobileBertForSequenceClassification"),Pyt.forEach(t),t0r=r(QNe," (MobileBERT model)"),QNe.forEach(t),a0r=i(ne),x4=n(ne,"LI",{});var HNe=s(x4);wTe=n(HNe,"STRONG",{});var Byt=s(wTe);n0r=r(Byt,"mpnet"),Byt.forEach(t),s0r=r(HNe," \u2014 "),BJ=n(HNe,"A",{href:!0});var Iyt=s(BJ);l0r=r(Iyt,"TFMPNetForSequenceClassification"),Iyt.forEach(t),i0r=r(HNe," (MPNet model)"),HNe.forEach(t),d0r=i(ne),$4=n(ne,"LI",{});var UNe=s($4);ATe=n(UNe,"STRONG",{});var Nyt=s(ATe);c0r=r(Nyt,"openai-gpt"),Nyt.forEach(t),f0r=r(UNe," \u2014 "),IJ=n(UNe,"A",{href:!0});var qyt=s(IJ);m0r=r(qyt,"TFOpenAIGPTForSequenceClassification"),qyt.forEach(t),g0r=r(UNe," (OpenAI GPT model)"),UNe.forEach(t),h0r=i(ne),k4=n(ne,"LI",{});var JNe=s(k4);LTe=n(JNe,"STRONG",{});var jyt=s(LTe);p0r=r(jyt,"rembert"),jyt.forEach(t),_0r=r(JNe," \u2014 "),NJ=n(JNe,"A",{href:!0});var Dyt=s(NJ);u0r=r(Dyt,"TFRemBertForSequenceClassification"),Dyt.forEach(t),b0r=r(JNe," (RemBERT model)"),JNe.forEach(t),v0r=i(ne),S4=n(ne,"LI",{});var YNe=s(S4);yTe=n(YNe,"STRONG",{});var Gyt=s(yTe);F0r=r(Gyt,"roberta"),Gyt.forEach(t),T0r=r(YNe," \u2014 "),qJ=n(YNe,"A",{href:!0});var Oyt=s(qJ);M0r=r(Oyt,"TFRobertaForSequenceClassification"),Oyt.forEach(t),E0r=r(YNe," (RoBERTa model)"),YNe.forEach(t),C0r=i(ne),R4=n(ne,"LI",{});var KNe=s(R4);xTe=n(KNe,"STRONG",{});var Vyt=s(xTe);w0r=r(Vyt,"roformer"),Vyt.forEach(t),A0r=r(KNe," \u2014 "),jJ=n(KNe,"A",{href:!0});var Xyt=s(jJ);L0r=r(Xyt,"TFRoFormerForSequenceClassification"),Xyt.forEach(t),y0r=r(KNe," (RoFormer model)"),KNe.forEach(t),x0r=i(ne),P4=n(ne,"LI",{});var ZNe=s(P4);$Te=n(ZNe,"STRONG",{});var zyt=s($Te);$0r=r(zyt,"tapas"),zyt.forEach(t),k0r=r(ZNe," \u2014 "),DJ=n(ZNe,"A",{href:!0});var Wyt=s(DJ);S0r=r(Wyt,"TFTapasForSequenceClassification"),Wyt.forEach(t),R0r=r(ZNe," (TAPAS model)"),ZNe.forEach(t),P0r=i(ne),B4=n(ne,"LI",{});var eqe=s(B4);kTe=n(eqe,"STRONG",{});var Qyt=s(kTe);B0r=r(Qyt,"transfo-xl"),Qyt.forEach(t),I0r=r(eqe," \u2014 "),GJ=n(eqe,"A",{href:!0});var Hyt=s(GJ);N0r=r(Hyt,"TFTransfoXLForSequenceClassification"),Hyt.forEach(t),q0r=r(eqe," (Transformer-XL model)"),eqe.forEach(t),j0r=i(ne),I4=n(ne,"LI",{});var oqe=s(I4);STe=n(oqe,"STRONG",{});var Uyt=s(STe);D0r=r(Uyt,"xlm"),Uyt.forEach(t),G0r=r(oqe," \u2014 "),OJ=n(oqe,"A",{href:!0});var Jyt=s(OJ);O0r=r(Jyt,"TFXLMForSequenceClassification"),Jyt.forEach(t),V0r=r(oqe," (XLM model)"),oqe.forEach(t),X0r=i(ne),N4=n(ne,"LI",{});var rqe=s(N4);RTe=n(rqe,"STRONG",{});var Yyt=s(RTe);z0r=r(Yyt,"xlm-roberta"),Yyt.forEach(t),W0r=r(rqe," \u2014 "),VJ=n(rqe,"A",{href:!0});var Kyt=s(VJ);Q0r=r(Kyt,"TFXLMRobertaForSequenceClassification"),Kyt.forEach(t),H0r=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),U0r=i(ne),q4=n(ne,"LI",{});var tqe=s(q4);PTe=n(tqe,"STRONG",{});var Zyt=s(PTe);J0r=r(Zyt,"xlnet"),Zyt.forEach(t),Y0r=r(tqe," \u2014 "),XJ=n(tqe,"A",{href:!0});var e8t=s(XJ);K0r=r(e8t,"TFXLNetForSequenceClassification"),e8t.forEach(t),Z0r=r(tqe," (XLNet model)"),tqe.forEach(t),ne.forEach(t),ewr=i(Bl),T(j4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),BOe=i(f),Fc=n(f,"H2",{class:!0});var VXe=s(Fc);D4=n(VXe,"A",{id:!0,class:!0,href:!0});var o8t=s(D4);BTe=n(o8t,"SPAN",{});var r8t=s(BTe);T(X8.$$.fragment,r8t),r8t.forEach(t),o8t.forEach(t),owr=i(VXe),ITe=n(VXe,"SPAN",{});var t8t=s(ITe);rwr=r(t8t,"TFAutoModelForMultipleChoice"),t8t.forEach(t),VXe.forEach(t),IOe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(z8.$$.fragment,Il),twr=i(Il),Tc=n(Il,"P",{});var hre=s(Tc);awr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zJ=n(hre,"A",{href:!0});var a8t=s(zJ);nwr=r(a8t,"from_pretrained()"),a8t.forEach(t),swr=r(hre," class method or the "),WJ=n(hre,"A",{href:!0});var n8t=s(WJ);lwr=r(n8t,"from_config()"),n8t.forEach(t),iwr=r(hre,` class
method.`),hre.forEach(t),dwr=i(Il),W8=n(Il,"P",{});var XXe=s(W8);cwr=r(XXe,"This class cannot be instantiated directly using "),NTe=n(XXe,"CODE",{});var s8t=s(NTe);fwr=r(s8t,"__init__()"),s8t.forEach(t),mwr=r(XXe," (throws an error)."),XXe.forEach(t),gwr=i(Il),Nt=n(Il,"DIV",{class:!0});var BA=s(Nt);T(Q8.$$.fragment,BA),hwr=i(BA),qTe=n(BA,"P",{});var l8t=s(qTe);pwr=r(l8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l8t.forEach(t),_wr=i(BA),Mc=n(BA,"P",{});var pre=s(Mc);uwr=r(pre,`Note:
Loading a model from its configuration file does `),jTe=n(pre,"STRONG",{});var i8t=s(jTe);bwr=r(i8t,"not"),i8t.forEach(t),vwr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(pre,"A",{href:!0});var d8t=s(QJ);Fwr=r(d8t,"from_pretrained()"),d8t.forEach(t),Twr=r(pre," to load the model weights."),pre.forEach(t),Mwr=i(BA),T(G4.$$.fragment,BA),BA.forEach(t),Ewr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(H8.$$.fragment,Nl),Cwr=i(Nl),DTe=n(Nl,"P",{});var c8t=s(DTe);wwr=r(c8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),c8t.forEach(t),Awr=i(Nl),mn=n(Nl,"P",{});var IA=s(mn);Lwr=r(IA,"The model class to instantiate is selected based on the "),GTe=n(IA,"CODE",{});var f8t=s(GTe);ywr=r(f8t,"model_type"),f8t.forEach(t),xwr=r(IA,` property of the config object (either
passed as an argument or loaded from `),OTe=n(IA,"CODE",{});var m8t=s(OTe);$wr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),kwr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(IA,"CODE",{});var g8t=s(VTe);Swr=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),Rwr=r(IA,":"),IA.forEach(t),Pwr=i(Nl),_e=n(Nl,"UL",{});var Fe=s(_e);O4=n(Fe,"LI",{});var aqe=s(O4);XTe=n(aqe,"STRONG",{});var h8t=s(XTe);Bwr=r(h8t,"albert"),h8t.forEach(t),Iwr=r(aqe," \u2014 "),HJ=n(aqe,"A",{href:!0});var p8t=s(HJ);Nwr=r(p8t,"TFAlbertForMultipleChoice"),p8t.forEach(t),qwr=r(aqe," (ALBERT model)"),aqe.forEach(t),jwr=i(Fe),V4=n(Fe,"LI",{});var nqe=s(V4);zTe=n(nqe,"STRONG",{});var _8t=s(zTe);Dwr=r(_8t,"bert"),_8t.forEach(t),Gwr=r(nqe," \u2014 "),UJ=n(nqe,"A",{href:!0});var u8t=s(UJ);Owr=r(u8t,"TFBertForMultipleChoice"),u8t.forEach(t),Vwr=r(nqe," (BERT model)"),nqe.forEach(t),Xwr=i(Fe),X4=n(Fe,"LI",{});var sqe=s(X4);WTe=n(sqe,"STRONG",{});var b8t=s(WTe);zwr=r(b8t,"camembert"),b8t.forEach(t),Wwr=r(sqe," \u2014 "),JJ=n(sqe,"A",{href:!0});var v8t=s(JJ);Qwr=r(v8t,"TFCamembertForMultipleChoice"),v8t.forEach(t),Hwr=r(sqe," (CamemBERT model)"),sqe.forEach(t),Uwr=i(Fe),z4=n(Fe,"LI",{});var lqe=s(z4);QTe=n(lqe,"STRONG",{});var F8t=s(QTe);Jwr=r(F8t,"convbert"),F8t.forEach(t),Ywr=r(lqe," \u2014 "),YJ=n(lqe,"A",{href:!0});var T8t=s(YJ);Kwr=r(T8t,"TFConvBertForMultipleChoice"),T8t.forEach(t),Zwr=r(lqe," (ConvBERT model)"),lqe.forEach(t),eAr=i(Fe),W4=n(Fe,"LI",{});var iqe=s(W4);HTe=n(iqe,"STRONG",{});var M8t=s(HTe);oAr=r(M8t,"distilbert"),M8t.forEach(t),rAr=r(iqe," \u2014 "),KJ=n(iqe,"A",{href:!0});var E8t=s(KJ);tAr=r(E8t,"TFDistilBertForMultipleChoice"),E8t.forEach(t),aAr=r(iqe," (DistilBERT model)"),iqe.forEach(t),nAr=i(Fe),Q4=n(Fe,"LI",{});var dqe=s(Q4);UTe=n(dqe,"STRONG",{});var C8t=s(UTe);sAr=r(C8t,"electra"),C8t.forEach(t),lAr=r(dqe," \u2014 "),ZJ=n(dqe,"A",{href:!0});var w8t=s(ZJ);iAr=r(w8t,"TFElectraForMultipleChoice"),w8t.forEach(t),dAr=r(dqe," (ELECTRA model)"),dqe.forEach(t),cAr=i(Fe),H4=n(Fe,"LI",{});var cqe=s(H4);JTe=n(cqe,"STRONG",{});var A8t=s(JTe);fAr=r(A8t,"flaubert"),A8t.forEach(t),mAr=r(cqe," \u2014 "),eY=n(cqe,"A",{href:!0});var L8t=s(eY);gAr=r(L8t,"TFFlaubertForMultipleChoice"),L8t.forEach(t),hAr=r(cqe," (FlauBERT model)"),cqe.forEach(t),pAr=i(Fe),U4=n(Fe,"LI",{});var fqe=s(U4);YTe=n(fqe,"STRONG",{});var y8t=s(YTe);_Ar=r(y8t,"funnel"),y8t.forEach(t),uAr=r(fqe," \u2014 "),oY=n(fqe,"A",{href:!0});var x8t=s(oY);bAr=r(x8t,"TFFunnelForMultipleChoice"),x8t.forEach(t),vAr=r(fqe," (Funnel Transformer model)"),fqe.forEach(t),FAr=i(Fe),J4=n(Fe,"LI",{});var mqe=s(J4);KTe=n(mqe,"STRONG",{});var $8t=s(KTe);TAr=r($8t,"longformer"),$8t.forEach(t),MAr=r(mqe," \u2014 "),rY=n(mqe,"A",{href:!0});var k8t=s(rY);EAr=r(k8t,"TFLongformerForMultipleChoice"),k8t.forEach(t),CAr=r(mqe," (Longformer model)"),mqe.forEach(t),wAr=i(Fe),Y4=n(Fe,"LI",{});var gqe=s(Y4);ZTe=n(gqe,"STRONG",{});var S8t=s(ZTe);AAr=r(S8t,"mobilebert"),S8t.forEach(t),LAr=r(gqe," \u2014 "),tY=n(gqe,"A",{href:!0});var R8t=s(tY);yAr=r(R8t,"TFMobileBertForMultipleChoice"),R8t.forEach(t),xAr=r(gqe," (MobileBERT model)"),gqe.forEach(t),$Ar=i(Fe),K4=n(Fe,"LI",{});var hqe=s(K4);eMe=n(hqe,"STRONG",{});var P8t=s(eMe);kAr=r(P8t,"mpnet"),P8t.forEach(t),SAr=r(hqe," \u2014 "),aY=n(hqe,"A",{href:!0});var B8t=s(aY);RAr=r(B8t,"TFMPNetForMultipleChoice"),B8t.forEach(t),PAr=r(hqe," (MPNet model)"),hqe.forEach(t),BAr=i(Fe),Z4=n(Fe,"LI",{});var pqe=s(Z4);oMe=n(pqe,"STRONG",{});var I8t=s(oMe);IAr=r(I8t,"rembert"),I8t.forEach(t),NAr=r(pqe," \u2014 "),nY=n(pqe,"A",{href:!0});var N8t=s(nY);qAr=r(N8t,"TFRemBertForMultipleChoice"),N8t.forEach(t),jAr=r(pqe," (RemBERT model)"),pqe.forEach(t),DAr=i(Fe),eC=n(Fe,"LI",{});var _qe=s(eC);rMe=n(_qe,"STRONG",{});var q8t=s(rMe);GAr=r(q8t,"roberta"),q8t.forEach(t),OAr=r(_qe," \u2014 "),sY=n(_qe,"A",{href:!0});var j8t=s(sY);VAr=r(j8t,"TFRobertaForMultipleChoice"),j8t.forEach(t),XAr=r(_qe," (RoBERTa model)"),_qe.forEach(t),zAr=i(Fe),oC=n(Fe,"LI",{});var uqe=s(oC);tMe=n(uqe,"STRONG",{});var D8t=s(tMe);WAr=r(D8t,"roformer"),D8t.forEach(t),QAr=r(uqe," \u2014 "),lY=n(uqe,"A",{href:!0});var G8t=s(lY);HAr=r(G8t,"TFRoFormerForMultipleChoice"),G8t.forEach(t),UAr=r(uqe," (RoFormer model)"),uqe.forEach(t),JAr=i(Fe),rC=n(Fe,"LI",{});var bqe=s(rC);aMe=n(bqe,"STRONG",{});var O8t=s(aMe);YAr=r(O8t,"xlm"),O8t.forEach(t),KAr=r(bqe," \u2014 "),iY=n(bqe,"A",{href:!0});var V8t=s(iY);ZAr=r(V8t,"TFXLMForMultipleChoice"),V8t.forEach(t),e6r=r(bqe," (XLM model)"),bqe.forEach(t),o6r=i(Fe),tC=n(Fe,"LI",{});var vqe=s(tC);nMe=n(vqe,"STRONG",{});var X8t=s(nMe);r6r=r(X8t,"xlm-roberta"),X8t.forEach(t),t6r=r(vqe," \u2014 "),dY=n(vqe,"A",{href:!0});var z8t=s(dY);a6r=r(z8t,"TFXLMRobertaForMultipleChoice"),z8t.forEach(t),n6r=r(vqe," (XLM-RoBERTa model)"),vqe.forEach(t),s6r=i(Fe),aC=n(Fe,"LI",{});var Fqe=s(aC);sMe=n(Fqe,"STRONG",{});var W8t=s(sMe);l6r=r(W8t,"xlnet"),W8t.forEach(t),i6r=r(Fqe," \u2014 "),cY=n(Fqe,"A",{href:!0});var Q8t=s(cY);d6r=r(Q8t,"TFXLNetForMultipleChoice"),Q8t.forEach(t),c6r=r(Fqe," (XLNet model)"),Fqe.forEach(t),Fe.forEach(t),f6r=i(Nl),T(nC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),NOe=i(f),Ec=n(f,"H2",{class:!0});var zXe=s(Ec);sC=n(zXe,"A",{id:!0,class:!0,href:!0});var H8t=s(sC);lMe=n(H8t,"SPAN",{});var U8t=s(lMe);T(U8.$$.fragment,U8t),U8t.forEach(t),H8t.forEach(t),m6r=i(zXe),iMe=n(zXe,"SPAN",{});var J8t=s(iMe);g6r=r(J8t,"TFAutoModelForNextSentencePrediction"),J8t.forEach(t),zXe.forEach(t),qOe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(J8.$$.fragment,ql),h6r=i(ql),Cc=n(ql,"P",{});var _re=s(Cc);p6r=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fY=n(_re,"A",{href:!0});var Y8t=s(fY);_6r=r(Y8t,"from_pretrained()"),Y8t.forEach(t),u6r=r(_re," class method or the "),mY=n(_re,"A",{href:!0});var K8t=s(mY);b6r=r(K8t,"from_config()"),K8t.forEach(t),v6r=r(_re,` class
method.`),_re.forEach(t),F6r=i(ql),Y8=n(ql,"P",{});var WXe=s(Y8);T6r=r(WXe,"This class cannot be instantiated directly using "),dMe=n(WXe,"CODE",{});var Z8t=s(dMe);M6r=r(Z8t,"__init__()"),Z8t.forEach(t),E6r=r(WXe," (throws an error)."),WXe.forEach(t),C6r=i(ql),qt=n(ql,"DIV",{class:!0});var NA=s(qt);T(K8.$$.fragment,NA),w6r=i(NA),cMe=n(NA,"P",{});var ext=s(cMe);A6r=r(ext,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ext.forEach(t),L6r=i(NA),wc=n(NA,"P",{});var ure=s(wc);y6r=r(ure,`Note:
Loading a model from its configuration file does `),fMe=n(ure,"STRONG",{});var oxt=s(fMe);x6r=r(oxt,"not"),oxt.forEach(t),$6r=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(ure,"A",{href:!0});var rxt=s(gY);k6r=r(rxt,"from_pretrained()"),rxt.forEach(t),S6r=r(ure," to load the model weights."),ure.forEach(t),R6r=i(NA),T(lC.$$.fragment,NA),NA.forEach(t),P6r=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(Z8.$$.fragment,jl),B6r=i(jl),mMe=n(jl,"P",{});var txt=s(mMe);I6r=r(txt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),txt.forEach(t),N6r=i(jl),gn=n(jl,"P",{});var qA=s(gn);q6r=r(qA,"The model class to instantiate is selected based on the "),gMe=n(qA,"CODE",{});var axt=s(gMe);j6r=r(axt,"model_type"),axt.forEach(t),D6r=r(qA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(qA,"CODE",{});var nxt=s(hMe);G6r=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),O6r=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(qA,"CODE",{});var sxt=s(pMe);V6r=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),X6r=r(qA,":"),qA.forEach(t),z6r=i(jl),ex=n(jl,"UL",{});var QXe=s(ex);iC=n(QXe,"LI",{});var Tqe=s(iC);_Me=n(Tqe,"STRONG",{});var lxt=s(_Me);W6r=r(lxt,"bert"),lxt.forEach(t),Q6r=r(Tqe," \u2014 "),hY=n(Tqe,"A",{href:!0});var ixt=s(hY);H6r=r(ixt,"TFBertForNextSentencePrediction"),ixt.forEach(t),U6r=r(Tqe," (BERT model)"),Tqe.forEach(t),J6r=i(QXe),dC=n(QXe,"LI",{});var Mqe=s(dC);uMe=n(Mqe,"STRONG",{});var dxt=s(uMe);Y6r=r(dxt,"mobilebert"),dxt.forEach(t),K6r=r(Mqe," \u2014 "),pY=n(Mqe,"A",{href:!0});var cxt=s(pY);Z6r=r(cxt,"TFMobileBertForNextSentencePrediction"),cxt.forEach(t),eLr=r(Mqe," (MobileBERT model)"),Mqe.forEach(t),QXe.forEach(t),oLr=i(jl),T(cC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),jOe=i(f),Ac=n(f,"H2",{class:!0});var HXe=s(Ac);fC=n(HXe,"A",{id:!0,class:!0,href:!0});var fxt=s(fC);bMe=n(fxt,"SPAN",{});var mxt=s(bMe);T(ox.$$.fragment,mxt),mxt.forEach(t),fxt.forEach(t),rLr=i(HXe),vMe=n(HXe,"SPAN",{});var gxt=s(vMe);tLr=r(gxt,"TFAutoModelForTableQuestionAnswering"),gxt.forEach(t),HXe.forEach(t),DOe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(rx.$$.fragment,Dl),aLr=i(Dl),Lc=n(Dl,"P",{});var bre=s(Lc);nLr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_Y=n(bre,"A",{href:!0});var hxt=s(_Y);sLr=r(hxt,"from_pretrained()"),hxt.forEach(t),lLr=r(bre," class method or the "),uY=n(bre,"A",{href:!0});var pxt=s(uY);iLr=r(pxt,"from_config()"),pxt.forEach(t),dLr=r(bre,` class
method.`),bre.forEach(t),cLr=i(Dl),tx=n(Dl,"P",{});var UXe=s(tx);fLr=r(UXe,"This class cannot be instantiated directly using "),FMe=n(UXe,"CODE",{});var _xt=s(FMe);mLr=r(_xt,"__init__()"),_xt.forEach(t),gLr=r(UXe," (throws an error)."),UXe.forEach(t),hLr=i(Dl),jt=n(Dl,"DIV",{class:!0});var jA=s(jt);T(ax.$$.fragment,jA),pLr=i(jA),TMe=n(jA,"P",{});var uxt=s(TMe);_Lr=r(uxt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uxt.forEach(t),uLr=i(jA),yc=n(jA,"P",{});var vre=s(yc);bLr=r(vre,`Note:
Loading a model from its configuration file does `),MMe=n(vre,"STRONG",{});var bxt=s(MMe);vLr=r(bxt,"not"),bxt.forEach(t),FLr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(vre,"A",{href:!0});var vxt=s(bY);TLr=r(vxt,"from_pretrained()"),vxt.forEach(t),MLr=r(vre," to load the model weights."),vre.forEach(t),ELr=i(jA),T(mC.$$.fragment,jA),jA.forEach(t),CLr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(nx.$$.fragment,Gl),wLr=i(Gl),EMe=n(Gl,"P",{});var Fxt=s(EMe);ALr=r(Fxt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fxt.forEach(t),LLr=i(Gl),hn=n(Gl,"P",{});var DA=s(hn);yLr=r(DA,"The model class to instantiate is selected based on the "),CMe=n(DA,"CODE",{});var Txt=s(CMe);xLr=r(Txt,"model_type"),Txt.forEach(t),$Lr=r(DA,` property of the config object (either
passed as an argument or loaded from `),wMe=n(DA,"CODE",{});var Mxt=s(wMe);kLr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),SLr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AMe=n(DA,"CODE",{});var Ext=s(AMe);RLr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),PLr=r(DA,":"),DA.forEach(t),BLr=i(Gl),LMe=n(Gl,"UL",{});var Cxt=s(LMe);gC=n(Cxt,"LI",{});var Eqe=s(gC);yMe=n(Eqe,"STRONG",{});var wxt=s(yMe);ILr=r(wxt,"tapas"),wxt.forEach(t),NLr=r(Eqe," \u2014 "),vY=n(Eqe,"A",{href:!0});var Axt=s(vY);qLr=r(Axt,"TFTapasForQuestionAnswering"),Axt.forEach(t),jLr=r(Eqe," (TAPAS model)"),Eqe.forEach(t),Cxt.forEach(t),DLr=i(Gl),T(hC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),GOe=i(f),xc=n(f,"H2",{class:!0});var JXe=s(xc);pC=n(JXe,"A",{id:!0,class:!0,href:!0});var Lxt=s(pC);xMe=n(Lxt,"SPAN",{});var yxt=s(xMe);T(sx.$$.fragment,yxt),yxt.forEach(t),Lxt.forEach(t),GLr=i(JXe),$Me=n(JXe,"SPAN",{});var xxt=s($Me);OLr=r(xxt,"TFAutoModelForTokenClassification"),xxt.forEach(t),JXe.forEach(t),OOe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(lx.$$.fragment,Ol),VLr=i(Ol),$c=n(Ol,"P",{});var Fre=s($c);XLr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FY=n(Fre,"A",{href:!0});var $xt=s(FY);zLr=r($xt,"from_pretrained()"),$xt.forEach(t),WLr=r(Fre," class method or the "),TY=n(Fre,"A",{href:!0});var kxt=s(TY);QLr=r(kxt,"from_config()"),kxt.forEach(t),HLr=r(Fre,` class
method.`),Fre.forEach(t),ULr=i(Ol),ix=n(Ol,"P",{});var YXe=s(ix);JLr=r(YXe,"This class cannot be instantiated directly using "),kMe=n(YXe,"CODE",{});var Sxt=s(kMe);YLr=r(Sxt,"__init__()"),Sxt.forEach(t),KLr=r(YXe," (throws an error)."),YXe.forEach(t),ZLr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var GA=s(Dt);T(dx.$$.fragment,GA),eyr=i(GA),SMe=n(GA,"P",{});var Rxt=s(SMe);oyr=r(Rxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rxt.forEach(t),ryr=i(GA),kc=n(GA,"P",{});var Tre=s(kc);tyr=r(Tre,`Note:
Loading a model from its configuration file does `),RMe=n(Tre,"STRONG",{});var Pxt=s(RMe);ayr=r(Pxt,"not"),Pxt.forEach(t),nyr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n(Tre,"A",{href:!0});var Bxt=s(MY);syr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),lyr=r(Tre," to load the model weights."),Tre.forEach(t),iyr=i(GA),T(_C.$$.fragment,GA),GA.forEach(t),dyr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(cx.$$.fragment,Vl),cyr=i(Vl),PMe=n(Vl,"P",{});var Ixt=s(PMe);fyr=r(Ixt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ixt.forEach(t),myr=i(Vl),pn=n(Vl,"P",{});var OA=s(pn);gyr=r(OA,"The model class to instantiate is selected based on the "),BMe=n(OA,"CODE",{});var Nxt=s(BMe);hyr=r(Nxt,"model_type"),Nxt.forEach(t),pyr=r(OA,` property of the config object (either
passed as an argument or loaded from `),IMe=n(OA,"CODE",{});var qxt=s(IMe);_yr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),uyr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(OA,"CODE",{});var jxt=s(NMe);byr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),vyr=r(OA,":"),OA.forEach(t),Fyr=i(Vl),de=n(Vl,"UL",{});var me=s(de);uC=n(me,"LI",{});var Cqe=s(uC);qMe=n(Cqe,"STRONG",{});var Dxt=s(qMe);Tyr=r(Dxt,"albert"),Dxt.forEach(t),Myr=r(Cqe," \u2014 "),EY=n(Cqe,"A",{href:!0});var Gxt=s(EY);Eyr=r(Gxt,"TFAlbertForTokenClassification"),Gxt.forEach(t),Cyr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),wyr=i(me),bC=n(me,"LI",{});var wqe=s(bC);jMe=n(wqe,"STRONG",{});var Oxt=s(jMe);Ayr=r(Oxt,"bert"),Oxt.forEach(t),Lyr=r(wqe," \u2014 "),CY=n(wqe,"A",{href:!0});var Vxt=s(CY);yyr=r(Vxt,"TFBertForTokenClassification"),Vxt.forEach(t),xyr=r(wqe," (BERT model)"),wqe.forEach(t),$yr=i(me),vC=n(me,"LI",{});var Aqe=s(vC);DMe=n(Aqe,"STRONG",{});var Xxt=s(DMe);kyr=r(Xxt,"camembert"),Xxt.forEach(t),Syr=r(Aqe," \u2014 "),wY=n(Aqe,"A",{href:!0});var zxt=s(wY);Ryr=r(zxt,"TFCamembertForTokenClassification"),zxt.forEach(t),Pyr=r(Aqe," (CamemBERT model)"),Aqe.forEach(t),Byr=i(me),FC=n(me,"LI",{});var Lqe=s(FC);GMe=n(Lqe,"STRONG",{});var Wxt=s(GMe);Iyr=r(Wxt,"convbert"),Wxt.forEach(t),Nyr=r(Lqe," \u2014 "),AY=n(Lqe,"A",{href:!0});var Qxt=s(AY);qyr=r(Qxt,"TFConvBertForTokenClassification"),Qxt.forEach(t),jyr=r(Lqe," (ConvBERT model)"),Lqe.forEach(t),Dyr=i(me),TC=n(me,"LI",{});var yqe=s(TC);OMe=n(yqe,"STRONG",{});var Hxt=s(OMe);Gyr=r(Hxt,"deberta"),Hxt.forEach(t),Oyr=r(yqe," \u2014 "),LY=n(yqe,"A",{href:!0});var Uxt=s(LY);Vyr=r(Uxt,"TFDebertaForTokenClassification"),Uxt.forEach(t),Xyr=r(yqe," (DeBERTa model)"),yqe.forEach(t),zyr=i(me),MC=n(me,"LI",{});var xqe=s(MC);VMe=n(xqe,"STRONG",{});var Jxt=s(VMe);Wyr=r(Jxt,"deberta-v2"),Jxt.forEach(t),Qyr=r(xqe," \u2014 "),yY=n(xqe,"A",{href:!0});var Yxt=s(yY);Hyr=r(Yxt,"TFDebertaV2ForTokenClassification"),Yxt.forEach(t),Uyr=r(xqe," (DeBERTa-v2 model)"),xqe.forEach(t),Jyr=i(me),EC=n(me,"LI",{});var $qe=s(EC);XMe=n($qe,"STRONG",{});var Kxt=s(XMe);Yyr=r(Kxt,"distilbert"),Kxt.forEach(t),Kyr=r($qe," \u2014 "),xY=n($qe,"A",{href:!0});var Zxt=s(xY);Zyr=r(Zxt,"TFDistilBertForTokenClassification"),Zxt.forEach(t),e8r=r($qe," (DistilBERT model)"),$qe.forEach(t),o8r=i(me),CC=n(me,"LI",{});var kqe=s(CC);zMe=n(kqe,"STRONG",{});var e$t=s(zMe);r8r=r(e$t,"electra"),e$t.forEach(t),t8r=r(kqe," \u2014 "),$Y=n(kqe,"A",{href:!0});var o$t=s($Y);a8r=r(o$t,"TFElectraForTokenClassification"),o$t.forEach(t),n8r=r(kqe," (ELECTRA model)"),kqe.forEach(t),s8r=i(me),wC=n(me,"LI",{});var Sqe=s(wC);WMe=n(Sqe,"STRONG",{});var r$t=s(WMe);l8r=r(r$t,"flaubert"),r$t.forEach(t),i8r=r(Sqe," \u2014 "),kY=n(Sqe,"A",{href:!0});var t$t=s(kY);d8r=r(t$t,"TFFlaubertForTokenClassification"),t$t.forEach(t),c8r=r(Sqe," (FlauBERT model)"),Sqe.forEach(t),f8r=i(me),AC=n(me,"LI",{});var Rqe=s(AC);QMe=n(Rqe,"STRONG",{});var a$t=s(QMe);m8r=r(a$t,"funnel"),a$t.forEach(t),g8r=r(Rqe," \u2014 "),SY=n(Rqe,"A",{href:!0});var n$t=s(SY);h8r=r(n$t,"TFFunnelForTokenClassification"),n$t.forEach(t),p8r=r(Rqe," (Funnel Transformer model)"),Rqe.forEach(t),_8r=i(me),LC=n(me,"LI",{});var Pqe=s(LC);HMe=n(Pqe,"STRONG",{});var s$t=s(HMe);u8r=r(s$t,"layoutlm"),s$t.forEach(t),b8r=r(Pqe," \u2014 "),RY=n(Pqe,"A",{href:!0});var l$t=s(RY);v8r=r(l$t,"TFLayoutLMForTokenClassification"),l$t.forEach(t),F8r=r(Pqe," (LayoutLM model)"),Pqe.forEach(t),T8r=i(me),yC=n(me,"LI",{});var Bqe=s(yC);UMe=n(Bqe,"STRONG",{});var i$t=s(UMe);M8r=r(i$t,"longformer"),i$t.forEach(t),E8r=r(Bqe," \u2014 "),PY=n(Bqe,"A",{href:!0});var d$t=s(PY);C8r=r(d$t,"TFLongformerForTokenClassification"),d$t.forEach(t),w8r=r(Bqe," (Longformer model)"),Bqe.forEach(t),A8r=i(me),xC=n(me,"LI",{});var Iqe=s(xC);JMe=n(Iqe,"STRONG",{});var c$t=s(JMe);L8r=r(c$t,"mobilebert"),c$t.forEach(t),y8r=r(Iqe," \u2014 "),BY=n(Iqe,"A",{href:!0});var f$t=s(BY);x8r=r(f$t,"TFMobileBertForTokenClassification"),f$t.forEach(t),$8r=r(Iqe," (MobileBERT model)"),Iqe.forEach(t),k8r=i(me),$C=n(me,"LI",{});var Nqe=s($C);YMe=n(Nqe,"STRONG",{});var m$t=s(YMe);S8r=r(m$t,"mpnet"),m$t.forEach(t),R8r=r(Nqe," \u2014 "),IY=n(Nqe,"A",{href:!0});var g$t=s(IY);P8r=r(g$t,"TFMPNetForTokenClassification"),g$t.forEach(t),B8r=r(Nqe," (MPNet model)"),Nqe.forEach(t),I8r=i(me),kC=n(me,"LI",{});var qqe=s(kC);KMe=n(qqe,"STRONG",{});var h$t=s(KMe);N8r=r(h$t,"rembert"),h$t.forEach(t),q8r=r(qqe," \u2014 "),NY=n(qqe,"A",{href:!0});var p$t=s(NY);j8r=r(p$t,"TFRemBertForTokenClassification"),p$t.forEach(t),D8r=r(qqe," (RemBERT model)"),qqe.forEach(t),G8r=i(me),SC=n(me,"LI",{});var jqe=s(SC);ZMe=n(jqe,"STRONG",{});var _$t=s(ZMe);O8r=r(_$t,"roberta"),_$t.forEach(t),V8r=r(jqe," \u2014 "),qY=n(jqe,"A",{href:!0});var u$t=s(qY);X8r=r(u$t,"TFRobertaForTokenClassification"),u$t.forEach(t),z8r=r(jqe," (RoBERTa model)"),jqe.forEach(t),W8r=i(me),RC=n(me,"LI",{});var Dqe=s(RC);eEe=n(Dqe,"STRONG",{});var b$t=s(eEe);Q8r=r(b$t,"roformer"),b$t.forEach(t),H8r=r(Dqe," \u2014 "),jY=n(Dqe,"A",{href:!0});var v$t=s(jY);U8r=r(v$t,"TFRoFormerForTokenClassification"),v$t.forEach(t),J8r=r(Dqe," (RoFormer model)"),Dqe.forEach(t),Y8r=i(me),PC=n(me,"LI",{});var Gqe=s(PC);oEe=n(Gqe,"STRONG",{});var F$t=s(oEe);K8r=r(F$t,"xlm"),F$t.forEach(t),Z8r=r(Gqe," \u2014 "),DY=n(Gqe,"A",{href:!0});var T$t=s(DY);exr=r(T$t,"TFXLMForTokenClassification"),T$t.forEach(t),oxr=r(Gqe," (XLM model)"),Gqe.forEach(t),rxr=i(me),BC=n(me,"LI",{});var Oqe=s(BC);rEe=n(Oqe,"STRONG",{});var M$t=s(rEe);txr=r(M$t,"xlm-roberta"),M$t.forEach(t),axr=r(Oqe," \u2014 "),GY=n(Oqe,"A",{href:!0});var E$t=s(GY);nxr=r(E$t,"TFXLMRobertaForTokenClassification"),E$t.forEach(t),sxr=r(Oqe," (XLM-RoBERTa model)"),Oqe.forEach(t),lxr=i(me),IC=n(me,"LI",{});var Vqe=s(IC);tEe=n(Vqe,"STRONG",{});var C$t=s(tEe);ixr=r(C$t,"xlnet"),C$t.forEach(t),dxr=r(Vqe," \u2014 "),OY=n(Vqe,"A",{href:!0});var w$t=s(OY);cxr=r(w$t,"TFXLNetForTokenClassification"),w$t.forEach(t),fxr=r(Vqe," (XLNet model)"),Vqe.forEach(t),me.forEach(t),mxr=i(Vl),T(NC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),VOe=i(f),Sc=n(f,"H2",{class:!0});var KXe=s(Sc);qC=n(KXe,"A",{id:!0,class:!0,href:!0});var A$t=s(qC);aEe=n(A$t,"SPAN",{});var L$t=s(aEe);T(fx.$$.fragment,L$t),L$t.forEach(t),A$t.forEach(t),gxr=i(KXe),nEe=n(KXe,"SPAN",{});var y$t=s(nEe);hxr=r(y$t,"TFAutoModelForQuestionAnswering"),y$t.forEach(t),KXe.forEach(t),XOe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(mx.$$.fragment,Xl),pxr=i(Xl),Rc=n(Xl,"P",{});var Mre=s(Rc);_xr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VY=n(Mre,"A",{href:!0});var x$t=s(VY);uxr=r(x$t,"from_pretrained()"),x$t.forEach(t),bxr=r(Mre," class method or the "),XY=n(Mre,"A",{href:!0});var $$t=s(XY);vxr=r($$t,"from_config()"),$$t.forEach(t),Fxr=r(Mre,` class
method.`),Mre.forEach(t),Txr=i(Xl),gx=n(Xl,"P",{});var ZXe=s(gx);Mxr=r(ZXe,"This class cannot be instantiated directly using "),sEe=n(ZXe,"CODE",{});var k$t=s(sEe);Exr=r(k$t,"__init__()"),k$t.forEach(t),Cxr=r(ZXe," (throws an error)."),ZXe.forEach(t),wxr=i(Xl),Gt=n(Xl,"DIV",{class:!0});var VA=s(Gt);T(hx.$$.fragment,VA),Axr=i(VA),lEe=n(VA,"P",{});var S$t=s(lEe);Lxr=r(S$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),S$t.forEach(t),yxr=i(VA),Pc=n(VA,"P",{});var Ere=s(Pc);xxr=r(Ere,`Note:
Loading a model from its configuration file does `),iEe=n(Ere,"STRONG",{});var R$t=s(iEe);$xr=r(R$t,"not"),R$t.forEach(t),kxr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(Ere,"A",{href:!0});var P$t=s(zY);Sxr=r(P$t,"from_pretrained()"),P$t.forEach(t),Rxr=r(Ere," to load the model weights."),Ere.forEach(t),Pxr=i(VA),T(jC.$$.fragment,VA),VA.forEach(t),Bxr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(px.$$.fragment,zl),Ixr=i(zl),dEe=n(zl,"P",{});var B$t=s(dEe);Nxr=r(B$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B$t.forEach(t),qxr=i(zl),_n=n(zl,"P",{});var XA=s(_n);jxr=r(XA,"The model class to instantiate is selected based on the "),cEe=n(XA,"CODE",{});var I$t=s(cEe);Dxr=r(I$t,"model_type"),I$t.forEach(t),Gxr=r(XA,` property of the config object (either
passed as an argument or loaded from `),fEe=n(XA,"CODE",{});var N$t=s(fEe);Oxr=r(N$t,"pretrained_model_name_or_path"),N$t.forEach(t),Vxr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(XA,"CODE",{});var q$t=s(mEe);Xxr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),zxr=r(XA,":"),XA.forEach(t),Wxr=i(zl),ce=n(zl,"UL",{});var ge=s(ce);DC=n(ge,"LI",{});var Xqe=s(DC);gEe=n(Xqe,"STRONG",{});var j$t=s(gEe);Qxr=r(j$t,"albert"),j$t.forEach(t),Hxr=r(Xqe," \u2014 "),WY=n(Xqe,"A",{href:!0});var D$t=s(WY);Uxr=r(D$t,"TFAlbertForQuestionAnswering"),D$t.forEach(t),Jxr=r(Xqe," (ALBERT model)"),Xqe.forEach(t),Yxr=i(ge),GC=n(ge,"LI",{});var zqe=s(GC);hEe=n(zqe,"STRONG",{});var G$t=s(hEe);Kxr=r(G$t,"bert"),G$t.forEach(t),Zxr=r(zqe," \u2014 "),QY=n(zqe,"A",{href:!0});var O$t=s(QY);e$r=r(O$t,"TFBertForQuestionAnswering"),O$t.forEach(t),o$r=r(zqe," (BERT model)"),zqe.forEach(t),r$r=i(ge),OC=n(ge,"LI",{});var Wqe=s(OC);pEe=n(Wqe,"STRONG",{});var V$t=s(pEe);t$r=r(V$t,"camembert"),V$t.forEach(t),a$r=r(Wqe," \u2014 "),HY=n(Wqe,"A",{href:!0});var X$t=s(HY);n$r=r(X$t,"TFCamembertForQuestionAnswering"),X$t.forEach(t),s$r=r(Wqe," (CamemBERT model)"),Wqe.forEach(t),l$r=i(ge),VC=n(ge,"LI",{});var Qqe=s(VC);_Ee=n(Qqe,"STRONG",{});var z$t=s(_Ee);i$r=r(z$t,"convbert"),z$t.forEach(t),d$r=r(Qqe," \u2014 "),UY=n(Qqe,"A",{href:!0});var W$t=s(UY);c$r=r(W$t,"TFConvBertForQuestionAnswering"),W$t.forEach(t),f$r=r(Qqe," (ConvBERT model)"),Qqe.forEach(t),m$r=i(ge),XC=n(ge,"LI",{});var Hqe=s(XC);uEe=n(Hqe,"STRONG",{});var Q$t=s(uEe);g$r=r(Q$t,"deberta"),Q$t.forEach(t),h$r=r(Hqe," \u2014 "),JY=n(Hqe,"A",{href:!0});var H$t=s(JY);p$r=r(H$t,"TFDebertaForQuestionAnswering"),H$t.forEach(t),_$r=r(Hqe," (DeBERTa model)"),Hqe.forEach(t),u$r=i(ge),zC=n(ge,"LI",{});var Uqe=s(zC);bEe=n(Uqe,"STRONG",{});var U$t=s(bEe);b$r=r(U$t,"deberta-v2"),U$t.forEach(t),v$r=r(Uqe," \u2014 "),YY=n(Uqe,"A",{href:!0});var J$t=s(YY);F$r=r(J$t,"TFDebertaV2ForQuestionAnswering"),J$t.forEach(t),T$r=r(Uqe," (DeBERTa-v2 model)"),Uqe.forEach(t),M$r=i(ge),WC=n(ge,"LI",{});var Jqe=s(WC);vEe=n(Jqe,"STRONG",{});var Y$t=s(vEe);E$r=r(Y$t,"distilbert"),Y$t.forEach(t),C$r=r(Jqe," \u2014 "),KY=n(Jqe,"A",{href:!0});var K$t=s(KY);w$r=r(K$t,"TFDistilBertForQuestionAnswering"),K$t.forEach(t),A$r=r(Jqe," (DistilBERT model)"),Jqe.forEach(t),L$r=i(ge),QC=n(ge,"LI",{});var Yqe=s(QC);FEe=n(Yqe,"STRONG",{});var Z$t=s(FEe);y$r=r(Z$t,"electra"),Z$t.forEach(t),x$r=r(Yqe," \u2014 "),ZY=n(Yqe,"A",{href:!0});var ekt=s(ZY);$$r=r(ekt,"TFElectraForQuestionAnswering"),ekt.forEach(t),k$r=r(Yqe," (ELECTRA model)"),Yqe.forEach(t),S$r=i(ge),HC=n(ge,"LI",{});var Kqe=s(HC);TEe=n(Kqe,"STRONG",{});var okt=s(TEe);R$r=r(okt,"flaubert"),okt.forEach(t),P$r=r(Kqe," \u2014 "),eK=n(Kqe,"A",{href:!0});var rkt=s(eK);B$r=r(rkt,"TFFlaubertForQuestionAnsweringSimple"),rkt.forEach(t),I$r=r(Kqe," (FlauBERT model)"),Kqe.forEach(t),N$r=i(ge),UC=n(ge,"LI",{});var Zqe=s(UC);MEe=n(Zqe,"STRONG",{});var tkt=s(MEe);q$r=r(tkt,"funnel"),tkt.forEach(t),j$r=r(Zqe," \u2014 "),oK=n(Zqe,"A",{href:!0});var akt=s(oK);D$r=r(akt,"TFFunnelForQuestionAnswering"),akt.forEach(t),G$r=r(Zqe," (Funnel Transformer model)"),Zqe.forEach(t),O$r=i(ge),JC=n(ge,"LI",{});var eje=s(JC);EEe=n(eje,"STRONG",{});var nkt=s(EEe);V$r=r(nkt,"gptj"),nkt.forEach(t),X$r=r(eje," \u2014 "),rK=n(eje,"A",{href:!0});var skt=s(rK);z$r=r(skt,"TFGPTJForQuestionAnswering"),skt.forEach(t),W$r=r(eje," (GPT-J model)"),eje.forEach(t),Q$r=i(ge),YC=n(ge,"LI",{});var oje=s(YC);CEe=n(oje,"STRONG",{});var lkt=s(CEe);H$r=r(lkt,"longformer"),lkt.forEach(t),U$r=r(oje," \u2014 "),tK=n(oje,"A",{href:!0});var ikt=s(tK);J$r=r(ikt,"TFLongformerForQuestionAnswering"),ikt.forEach(t),Y$r=r(oje," (Longformer model)"),oje.forEach(t),K$r=i(ge),KC=n(ge,"LI",{});var rje=s(KC);wEe=n(rje,"STRONG",{});var dkt=s(wEe);Z$r=r(dkt,"mobilebert"),dkt.forEach(t),ekr=r(rje," \u2014 "),aK=n(rje,"A",{href:!0});var ckt=s(aK);okr=r(ckt,"TFMobileBertForQuestionAnswering"),ckt.forEach(t),rkr=r(rje," (MobileBERT model)"),rje.forEach(t),tkr=i(ge),ZC=n(ge,"LI",{});var tje=s(ZC);AEe=n(tje,"STRONG",{});var fkt=s(AEe);akr=r(fkt,"mpnet"),fkt.forEach(t),nkr=r(tje," \u2014 "),nK=n(tje,"A",{href:!0});var mkt=s(nK);skr=r(mkt,"TFMPNetForQuestionAnswering"),mkt.forEach(t),lkr=r(tje," (MPNet model)"),tje.forEach(t),ikr=i(ge),e5=n(ge,"LI",{});var aje=s(e5);LEe=n(aje,"STRONG",{});var gkt=s(LEe);dkr=r(gkt,"rembert"),gkt.forEach(t),ckr=r(aje," \u2014 "),sK=n(aje,"A",{href:!0});var hkt=s(sK);fkr=r(hkt,"TFRemBertForQuestionAnswering"),hkt.forEach(t),mkr=r(aje," (RemBERT model)"),aje.forEach(t),gkr=i(ge),o5=n(ge,"LI",{});var nje=s(o5);yEe=n(nje,"STRONG",{});var pkt=s(yEe);hkr=r(pkt,"roberta"),pkt.forEach(t),pkr=r(nje," \u2014 "),lK=n(nje,"A",{href:!0});var _kt=s(lK);_kr=r(_kt,"TFRobertaForQuestionAnswering"),_kt.forEach(t),ukr=r(nje," (RoBERTa model)"),nje.forEach(t),bkr=i(ge),r5=n(ge,"LI",{});var sje=s(r5);xEe=n(sje,"STRONG",{});var ukt=s(xEe);vkr=r(ukt,"roformer"),ukt.forEach(t),Fkr=r(sje," \u2014 "),iK=n(sje,"A",{href:!0});var bkt=s(iK);Tkr=r(bkt,"TFRoFormerForQuestionAnswering"),bkt.forEach(t),Mkr=r(sje," (RoFormer model)"),sje.forEach(t),Ekr=i(ge),t5=n(ge,"LI",{});var lje=s(t5);$Ee=n(lje,"STRONG",{});var vkt=s($Ee);Ckr=r(vkt,"xlm"),vkt.forEach(t),wkr=r(lje," \u2014 "),dK=n(lje,"A",{href:!0});var Fkt=s(dK);Akr=r(Fkt,"TFXLMForQuestionAnsweringSimple"),Fkt.forEach(t),Lkr=r(lje," (XLM model)"),lje.forEach(t),ykr=i(ge),a5=n(ge,"LI",{});var ije=s(a5);kEe=n(ije,"STRONG",{});var Tkt=s(kEe);xkr=r(Tkt,"xlm-roberta"),Tkt.forEach(t),$kr=r(ije," \u2014 "),cK=n(ije,"A",{href:!0});var Mkt=s(cK);kkr=r(Mkt,"TFXLMRobertaForQuestionAnswering"),Mkt.forEach(t),Skr=r(ije," (XLM-RoBERTa model)"),ije.forEach(t),Rkr=i(ge),n5=n(ge,"LI",{});var dje=s(n5);SEe=n(dje,"STRONG",{});var Ekt=s(SEe);Pkr=r(Ekt,"xlnet"),Ekt.forEach(t),Bkr=r(dje," \u2014 "),fK=n(dje,"A",{href:!0});var Ckt=s(fK);Ikr=r(Ckt,"TFXLNetForQuestionAnsweringSimple"),Ckt.forEach(t),Nkr=r(dje," (XLNet model)"),dje.forEach(t),ge.forEach(t),qkr=i(zl),T(s5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),zOe=i(f),Bc=n(f,"H2",{class:!0});var eze=s(Bc);l5=n(eze,"A",{id:!0,class:!0,href:!0});var wkt=s(l5);REe=n(wkt,"SPAN",{});var Akt=s(REe);T(_x.$$.fragment,Akt),Akt.forEach(t),wkt.forEach(t),jkr=i(eze),PEe=n(eze,"SPAN",{});var Lkt=s(PEe);Dkr=r(Lkt,"TFAutoModelForVision2Seq"),Lkt.forEach(t),eze.forEach(t),WOe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(ux.$$.fragment,Wl),Gkr=i(Wl),Ic=n(Wl,"P",{});var Cre=s(Ic);Okr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mK=n(Cre,"A",{href:!0});var ykt=s(mK);Vkr=r(ykt,"from_pretrained()"),ykt.forEach(t),Xkr=r(Cre," class method or the "),gK=n(Cre,"A",{href:!0});var xkt=s(gK);zkr=r(xkt,"from_config()"),xkt.forEach(t),Wkr=r(Cre,` class
method.`),Cre.forEach(t),Qkr=i(Wl),bx=n(Wl,"P",{});var oze=s(bx);Hkr=r(oze,"This class cannot be instantiated directly using "),BEe=n(oze,"CODE",{});var $kt=s(BEe);Ukr=r($kt,"__init__()"),$kt.forEach(t),Jkr=r(oze," (throws an error)."),oze.forEach(t),Ykr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var zA=s(Ot);T(vx.$$.fragment,zA),Kkr=i(zA),IEe=n(zA,"P",{});var kkt=s(IEe);Zkr=r(kkt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kkt.forEach(t),eSr=i(zA),Nc=n(zA,"P",{});var wre=s(Nc);oSr=r(wre,`Note:
Loading a model from its configuration file does `),NEe=n(wre,"STRONG",{});var Skt=s(NEe);rSr=r(Skt,"not"),Skt.forEach(t),tSr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(wre,"A",{href:!0});var Rkt=s(hK);aSr=r(Rkt,"from_pretrained()"),Rkt.forEach(t),nSr=r(wre," to load the model weights."),wre.forEach(t),sSr=i(zA),T(i5.$$.fragment,zA),zA.forEach(t),lSr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(Fx.$$.fragment,Ql),iSr=i(Ql),qEe=n(Ql,"P",{});var Pkt=s(qEe);dSr=r(Pkt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pkt.forEach(t),cSr=i(Ql),un=n(Ql,"P",{});var WA=s(un);fSr=r(WA,"The model class to instantiate is selected based on the "),jEe=n(WA,"CODE",{});var Bkt=s(jEe);mSr=r(Bkt,"model_type"),Bkt.forEach(t),gSr=r(WA,` property of the config object (either
passed as an argument or loaded from `),DEe=n(WA,"CODE",{});var Ikt=s(DEe);hSr=r(Ikt,"pretrained_model_name_or_path"),Ikt.forEach(t),pSr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(WA,"CODE",{});var Nkt=s(GEe);_Sr=r(Nkt,"pretrained_model_name_or_path"),Nkt.forEach(t),uSr=r(WA,":"),WA.forEach(t),bSr=i(Ql),OEe=n(Ql,"UL",{});var qkt=s(OEe);d5=n(qkt,"LI",{});var cje=s(d5);VEe=n(cje,"STRONG",{});var jkt=s(VEe);vSr=r(jkt,"vision-encoder-decoder"),jkt.forEach(t),FSr=r(cje," \u2014 "),pK=n(cje,"A",{href:!0});var Dkt=s(pK);TSr=r(Dkt,"TFVisionEncoderDecoderModel"),Dkt.forEach(t),MSr=r(cje," (Vision Encoder decoder model)"),cje.forEach(t),qkt.forEach(t),ESr=i(Ql),T(c5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),QOe=i(f),qc=n(f,"H2",{class:!0});var rze=s(qc);f5=n(rze,"A",{id:!0,class:!0,href:!0});var Gkt=s(f5);XEe=n(Gkt,"SPAN",{});var Okt=s(XEe);T(Tx.$$.fragment,Okt),Okt.forEach(t),Gkt.forEach(t),CSr=i(rze),zEe=n(rze,"SPAN",{});var Vkt=s(zEe);wSr=r(Vkt,"TFAutoModelForSpeechSeq2Seq"),Vkt.forEach(t),rze.forEach(t),HOe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(Mx.$$.fragment,Hl),ASr=i(Hl),jc=n(Hl,"P",{});var Are=s(jc);LSr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_K=n(Are,"A",{href:!0});var Xkt=s(_K);ySr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),xSr=r(Are," class method or the "),uK=n(Are,"A",{href:!0});var zkt=s(uK);$Sr=r(zkt,"from_config()"),zkt.forEach(t),kSr=r(Are,` class
method.`),Are.forEach(t),SSr=i(Hl),Ex=n(Hl,"P",{});var tze=s(Ex);RSr=r(tze,"This class cannot be instantiated directly using "),WEe=n(tze,"CODE",{});var Wkt=s(WEe);PSr=r(Wkt,"__init__()"),Wkt.forEach(t),BSr=r(tze," (throws an error)."),tze.forEach(t),ISr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var QA=s(Vt);T(Cx.$$.fragment,QA),NSr=i(QA),QEe=n(QA,"P",{});var Qkt=s(QEe);qSr=r(Qkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Qkt.forEach(t),jSr=i(QA),Dc=n(QA,"P",{});var Lre=s(Dc);DSr=r(Lre,`Note:
Loading a model from its configuration file does `),HEe=n(Lre,"STRONG",{});var Hkt=s(HEe);GSr=r(Hkt,"not"),Hkt.forEach(t),OSr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(Lre,"A",{href:!0});var Ukt=s(bK);VSr=r(Ukt,"from_pretrained()"),Ukt.forEach(t),XSr=r(Lre," to load the model weights."),Lre.forEach(t),zSr=i(QA),T(m5.$$.fragment,QA),QA.forEach(t),WSr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(wx.$$.fragment,Ul),QSr=i(Ul),UEe=n(Ul,"P",{});var Jkt=s(UEe);HSr=r(Jkt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jkt.forEach(t),USr=i(Ul),bn=n(Ul,"P",{});var HA=s(bn);JSr=r(HA,"The model class to instantiate is selected based on the "),JEe=n(HA,"CODE",{});var Ykt=s(JEe);YSr=r(Ykt,"model_type"),Ykt.forEach(t),KSr=r(HA,` property of the config object (either
passed as an argument or loaded from `),YEe=n(HA,"CODE",{});var Kkt=s(YEe);ZSr=r(Kkt,"pretrained_model_name_or_path"),Kkt.forEach(t),eRr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KEe=n(HA,"CODE",{});var Zkt=s(KEe);oRr=r(Zkt,"pretrained_model_name_or_path"),Zkt.forEach(t),rRr=r(HA,":"),HA.forEach(t),tRr=i(Ul),ZEe=n(Ul,"UL",{});var eSt=s(ZEe);g5=n(eSt,"LI",{});var fje=s(g5);e4e=n(fje,"STRONG",{});var oSt=s(e4e);aRr=r(oSt,"speech_to_text"),oSt.forEach(t),nRr=r(fje," \u2014 "),vK=n(fje,"A",{href:!0});var rSt=s(vK);sRr=r(rSt,"TFSpeech2TextForConditionalGeneration"),rSt.forEach(t),lRr=r(fje," (Speech2Text model)"),fje.forEach(t),eSt.forEach(t),iRr=i(Ul),T(h5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),UOe=i(f),Gc=n(f,"H2",{class:!0});var aze=s(Gc);p5=n(aze,"A",{id:!0,class:!0,href:!0});var tSt=s(p5);o4e=n(tSt,"SPAN",{});var aSt=s(o4e);T(Ax.$$.fragment,aSt),aSt.forEach(t),tSt.forEach(t),dRr=i(aze),r4e=n(aze,"SPAN",{});var nSt=s(r4e);cRr=r(nSt,"FlaxAutoModel"),nSt.forEach(t),aze.forEach(t),JOe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Lx.$$.fragment,Jl),fRr=i(Jl),Oc=n(Jl,"P",{});var yre=s(Oc);mRr=r(yre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FK=n(yre,"A",{href:!0});var sSt=s(FK);gRr=r(sSt,"from_pretrained()"),sSt.forEach(t),hRr=r(yre," class method or the "),TK=n(yre,"A",{href:!0});var lSt=s(TK);pRr=r(lSt,"from_config()"),lSt.forEach(t),_Rr=r(yre,` class
method.`),yre.forEach(t),uRr=i(Jl),yx=n(Jl,"P",{});var nze=s(yx);bRr=r(nze,"This class cannot be instantiated directly using "),t4e=n(nze,"CODE",{});var iSt=s(t4e);vRr=r(iSt,"__init__()"),iSt.forEach(t),FRr=r(nze," (throws an error)."),nze.forEach(t),TRr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var UA=s(Xt);T(xx.$$.fragment,UA),MRr=i(UA),a4e=n(UA,"P",{});var dSt=s(a4e);ERr=r(dSt,"Instantiates one of the base model classes of the library from a configuration."),dSt.forEach(t),CRr=i(UA),Vc=n(UA,"P",{});var xre=s(Vc);wRr=r(xre,`Note:
Loading a model from its configuration file does `),n4e=n(xre,"STRONG",{});var cSt=s(n4e);ARr=r(cSt,"not"),cSt.forEach(t),LRr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(xre,"A",{href:!0});var fSt=s(MK);yRr=r(fSt,"from_pretrained()"),fSt.forEach(t),xRr=r(xre," to load the model weights."),xre.forEach(t),$Rr=i(UA),T(_5.$$.fragment,UA),UA.forEach(t),kRr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T($x.$$.fragment,Yl),SRr=i(Yl),s4e=n(Yl,"P",{});var mSt=s(s4e);RRr=r(mSt,"Instantiate one of the base model classes of the library from a pretrained model."),mSt.forEach(t),PRr=i(Yl),vn=n(Yl,"P",{});var JA=s(vn);BRr=r(JA,"The model class to instantiate is selected based on the "),l4e=n(JA,"CODE",{});var gSt=s(l4e);IRr=r(gSt,"model_type"),gSt.forEach(t),NRr=r(JA,` property of the config object (either
passed as an argument or loaded from `),i4e=n(JA,"CODE",{});var hSt=s(i4e);qRr=r(hSt,"pretrained_model_name_or_path"),hSt.forEach(t),jRr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=n(JA,"CODE",{});var pSt=s(d4e);DRr=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),GRr=r(JA,":"),JA.forEach(t),ORr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);u5=n(ae,"LI",{});var mje=s(u5);c4e=n(mje,"STRONG",{});var _St=s(c4e);VRr=r(_St,"albert"),_St.forEach(t),XRr=r(mje," \u2014 "),EK=n(mje,"A",{href:!0});var uSt=s(EK);zRr=r(uSt,"FlaxAlbertModel"),uSt.forEach(t),WRr=r(mje," (ALBERT model)"),mje.forEach(t),QRr=i(ae),b5=n(ae,"LI",{});var gje=s(b5);f4e=n(gje,"STRONG",{});var bSt=s(f4e);HRr=r(bSt,"bart"),bSt.forEach(t),URr=r(gje," \u2014 "),CK=n(gje,"A",{href:!0});var vSt=s(CK);JRr=r(vSt,"FlaxBartModel"),vSt.forEach(t),YRr=r(gje," (BART model)"),gje.forEach(t),KRr=i(ae),v5=n(ae,"LI",{});var hje=s(v5);m4e=n(hje,"STRONG",{});var FSt=s(m4e);ZRr=r(FSt,"beit"),FSt.forEach(t),ePr=r(hje," \u2014 "),wK=n(hje,"A",{href:!0});var TSt=s(wK);oPr=r(TSt,"FlaxBeitModel"),TSt.forEach(t),rPr=r(hje," (BEiT model)"),hje.forEach(t),tPr=i(ae),F5=n(ae,"LI",{});var pje=s(F5);g4e=n(pje,"STRONG",{});var MSt=s(g4e);aPr=r(MSt,"bert"),MSt.forEach(t),nPr=r(pje," \u2014 "),AK=n(pje,"A",{href:!0});var ESt=s(AK);sPr=r(ESt,"FlaxBertModel"),ESt.forEach(t),lPr=r(pje," (BERT model)"),pje.forEach(t),iPr=i(ae),T5=n(ae,"LI",{});var _je=s(T5);h4e=n(_je,"STRONG",{});var CSt=s(h4e);dPr=r(CSt,"big_bird"),CSt.forEach(t),cPr=r(_je," \u2014 "),LK=n(_je,"A",{href:!0});var wSt=s(LK);fPr=r(wSt,"FlaxBigBirdModel"),wSt.forEach(t),mPr=r(_je," (BigBird model)"),_je.forEach(t),gPr=i(ae),M5=n(ae,"LI",{});var uje=s(M5);p4e=n(uje,"STRONG",{});var ASt=s(p4e);hPr=r(ASt,"blenderbot"),ASt.forEach(t),pPr=r(uje," \u2014 "),yK=n(uje,"A",{href:!0});var LSt=s(yK);_Pr=r(LSt,"FlaxBlenderbotModel"),LSt.forEach(t),uPr=r(uje," (Blenderbot model)"),uje.forEach(t),bPr=i(ae),E5=n(ae,"LI",{});var bje=s(E5);_4e=n(bje,"STRONG",{});var ySt=s(_4e);vPr=r(ySt,"blenderbot-small"),ySt.forEach(t),FPr=r(bje," \u2014 "),xK=n(bje,"A",{href:!0});var xSt=s(xK);TPr=r(xSt,"FlaxBlenderbotSmallModel"),xSt.forEach(t),MPr=r(bje," (BlenderbotSmall model)"),bje.forEach(t),EPr=i(ae),C5=n(ae,"LI",{});var vje=s(C5);u4e=n(vje,"STRONG",{});var $St=s(u4e);CPr=r($St,"clip"),$St.forEach(t),wPr=r(vje," \u2014 "),$K=n(vje,"A",{href:!0});var kSt=s($K);APr=r(kSt,"FlaxCLIPModel"),kSt.forEach(t),LPr=r(vje," (CLIP model)"),vje.forEach(t),yPr=i(ae),w5=n(ae,"LI",{});var Fje=s(w5);b4e=n(Fje,"STRONG",{});var SSt=s(b4e);xPr=r(SSt,"distilbert"),SSt.forEach(t),$Pr=r(Fje," \u2014 "),kK=n(Fje,"A",{href:!0});var RSt=s(kK);kPr=r(RSt,"FlaxDistilBertModel"),RSt.forEach(t),SPr=r(Fje," (DistilBERT model)"),Fje.forEach(t),RPr=i(ae),A5=n(ae,"LI",{});var Tje=s(A5);v4e=n(Tje,"STRONG",{});var PSt=s(v4e);PPr=r(PSt,"electra"),PSt.forEach(t),BPr=r(Tje," \u2014 "),SK=n(Tje,"A",{href:!0});var BSt=s(SK);IPr=r(BSt,"FlaxElectraModel"),BSt.forEach(t),NPr=r(Tje," (ELECTRA model)"),Tje.forEach(t),qPr=i(ae),L5=n(ae,"LI",{});var Mje=s(L5);F4e=n(Mje,"STRONG",{});var ISt=s(F4e);jPr=r(ISt,"gpt2"),ISt.forEach(t),DPr=r(Mje," \u2014 "),RK=n(Mje,"A",{href:!0});var NSt=s(RK);GPr=r(NSt,"FlaxGPT2Model"),NSt.forEach(t),OPr=r(Mje," (OpenAI GPT-2 model)"),Mje.forEach(t),VPr=i(ae),y5=n(ae,"LI",{});var Eje=s(y5);T4e=n(Eje,"STRONG",{});var qSt=s(T4e);XPr=r(qSt,"gpt_neo"),qSt.forEach(t),zPr=r(Eje," \u2014 "),PK=n(Eje,"A",{href:!0});var jSt=s(PK);WPr=r(jSt,"FlaxGPTNeoModel"),jSt.forEach(t),QPr=r(Eje," (GPT Neo model)"),Eje.forEach(t),HPr=i(ae),x5=n(ae,"LI",{});var Cje=s(x5);M4e=n(Cje,"STRONG",{});var DSt=s(M4e);UPr=r(DSt,"gptj"),DSt.forEach(t),JPr=r(Cje," \u2014 "),BK=n(Cje,"A",{href:!0});var GSt=s(BK);YPr=r(GSt,"FlaxGPTJModel"),GSt.forEach(t),KPr=r(Cje," (GPT-J model)"),Cje.forEach(t),ZPr=i(ae),$5=n(ae,"LI",{});var wje=s($5);E4e=n(wje,"STRONG",{});var OSt=s(E4e);eBr=r(OSt,"longt5"),OSt.forEach(t),oBr=r(wje," \u2014 "),IK=n(wje,"A",{href:!0});var VSt=s(IK);rBr=r(VSt,"FlaxLongT5Model"),VSt.forEach(t),tBr=r(wje," (LongT5 model)"),wje.forEach(t),aBr=i(ae),k5=n(ae,"LI",{});var Aje=s(k5);C4e=n(Aje,"STRONG",{});var XSt=s(C4e);nBr=r(XSt,"marian"),XSt.forEach(t),sBr=r(Aje," \u2014 "),NK=n(Aje,"A",{href:!0});var zSt=s(NK);lBr=r(zSt,"FlaxMarianModel"),zSt.forEach(t),iBr=r(Aje," (Marian model)"),Aje.forEach(t),dBr=i(ae),S5=n(ae,"LI",{});var Lje=s(S5);w4e=n(Lje,"STRONG",{});var WSt=s(w4e);cBr=r(WSt,"mbart"),WSt.forEach(t),fBr=r(Lje," \u2014 "),qK=n(Lje,"A",{href:!0});var QSt=s(qK);mBr=r(QSt,"FlaxMBartModel"),QSt.forEach(t),gBr=r(Lje," (mBART model)"),Lje.forEach(t),hBr=i(ae),R5=n(ae,"LI",{});var yje=s(R5);A4e=n(yje,"STRONG",{});var HSt=s(A4e);pBr=r(HSt,"mt5"),HSt.forEach(t),_Br=r(yje," \u2014 "),jK=n(yje,"A",{href:!0});var USt=s(jK);uBr=r(USt,"FlaxMT5Model"),USt.forEach(t),bBr=r(yje," (MT5 model)"),yje.forEach(t),vBr=i(ae),P5=n(ae,"LI",{});var xje=s(P5);L4e=n(xje,"STRONG",{});var JSt=s(L4e);FBr=r(JSt,"opt"),JSt.forEach(t),TBr=r(xje," \u2014 "),DK=n(xje,"A",{href:!0});var YSt=s(DK);MBr=r(YSt,"FlaxOPTModel"),YSt.forEach(t),EBr=r(xje," (OPT model)"),xje.forEach(t),CBr=i(ae),B5=n(ae,"LI",{});var $je=s(B5);y4e=n($je,"STRONG",{});var KSt=s(y4e);wBr=r(KSt,"pegasus"),KSt.forEach(t),ABr=r($je," \u2014 "),GK=n($je,"A",{href:!0});var ZSt=s(GK);LBr=r(ZSt,"FlaxPegasusModel"),ZSt.forEach(t),yBr=r($je," (Pegasus model)"),$je.forEach(t),xBr=i(ae),I5=n(ae,"LI",{});var kje=s(I5);x4e=n(kje,"STRONG",{});var eRt=s(x4e);$Br=r(eRt,"roberta"),eRt.forEach(t),kBr=r(kje," \u2014 "),OK=n(kje,"A",{href:!0});var oRt=s(OK);SBr=r(oRt,"FlaxRobertaModel"),oRt.forEach(t),RBr=r(kje," (RoBERTa model)"),kje.forEach(t),PBr=i(ae),N5=n(ae,"LI",{});var Sje=s(N5);$4e=n(Sje,"STRONG",{});var rRt=s($4e);BBr=r(rRt,"roformer"),rRt.forEach(t),IBr=r(Sje," \u2014 "),VK=n(Sje,"A",{href:!0});var tRt=s(VK);NBr=r(tRt,"FlaxRoFormerModel"),tRt.forEach(t),qBr=r(Sje," (RoFormer model)"),Sje.forEach(t),jBr=i(ae),q5=n(ae,"LI",{});var Rje=s(q5);k4e=n(Rje,"STRONG",{});var aRt=s(k4e);DBr=r(aRt,"t5"),aRt.forEach(t),GBr=r(Rje," \u2014 "),XK=n(Rje,"A",{href:!0});var nRt=s(XK);OBr=r(nRt,"FlaxT5Model"),nRt.forEach(t),VBr=r(Rje," (T5 model)"),Rje.forEach(t),XBr=i(ae),j5=n(ae,"LI",{});var Pje=s(j5);S4e=n(Pje,"STRONG",{});var sRt=s(S4e);zBr=r(sRt,"vision-text-dual-encoder"),sRt.forEach(t),WBr=r(Pje," \u2014 "),zK=n(Pje,"A",{href:!0});var lRt=s(zK);QBr=r(lRt,"FlaxVisionTextDualEncoderModel"),lRt.forEach(t),HBr=r(Pje," (VisionTextDualEncoder model)"),Pje.forEach(t),UBr=i(ae),D5=n(ae,"LI",{});var Bje=s(D5);R4e=n(Bje,"STRONG",{});var iRt=s(R4e);JBr=r(iRt,"vit"),iRt.forEach(t),YBr=r(Bje," \u2014 "),WK=n(Bje,"A",{href:!0});var dRt=s(WK);KBr=r(dRt,"FlaxViTModel"),dRt.forEach(t),ZBr=r(Bje," (ViT model)"),Bje.forEach(t),eIr=i(ae),G5=n(ae,"LI",{});var Ije=s(G5);P4e=n(Ije,"STRONG",{});var cRt=s(P4e);oIr=r(cRt,"wav2vec2"),cRt.forEach(t),rIr=r(Ije," \u2014 "),QK=n(Ije,"A",{href:!0});var fRt=s(QK);tIr=r(fRt,"FlaxWav2Vec2Model"),fRt.forEach(t),aIr=r(Ije," (Wav2Vec2 model)"),Ije.forEach(t),nIr=i(ae),O5=n(ae,"LI",{});var Nje=s(O5);B4e=n(Nje,"STRONG",{});var mRt=s(B4e);sIr=r(mRt,"xglm"),mRt.forEach(t),lIr=r(Nje," \u2014 "),HK=n(Nje,"A",{href:!0});var gRt=s(HK);iIr=r(gRt,"FlaxXGLMModel"),gRt.forEach(t),dIr=r(Nje," (XGLM model)"),Nje.forEach(t),cIr=i(ae),V5=n(ae,"LI",{});var qje=s(V5);I4e=n(qje,"STRONG",{});var hRt=s(I4e);fIr=r(hRt,"xlm-roberta"),hRt.forEach(t),mIr=r(qje," \u2014 "),UK=n(qje,"A",{href:!0});var pRt=s(UK);gIr=r(pRt,"FlaxXLMRobertaModel"),pRt.forEach(t),hIr=r(qje," (XLM-RoBERTa model)"),qje.forEach(t),ae.forEach(t),pIr=i(Yl),T(X5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),YOe=i(f),Xc=n(f,"H2",{class:!0});var sze=s(Xc);z5=n(sze,"A",{id:!0,class:!0,href:!0});var _Rt=s(z5);N4e=n(_Rt,"SPAN",{});var uRt=s(N4e);T(kx.$$.fragment,uRt),uRt.forEach(t),_Rt.forEach(t),_Ir=i(sze),q4e=n(sze,"SPAN",{});var bRt=s(q4e);uIr=r(bRt,"FlaxAutoModelForCausalLM"),bRt.forEach(t),sze.forEach(t),KOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(Sx.$$.fragment,Kl),bIr=i(Kl),zc=n(Kl,"P",{});var $re=s(zc);vIr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JK=n($re,"A",{href:!0});var vRt=s(JK);FIr=r(vRt,"from_pretrained()"),vRt.forEach(t),TIr=r($re," class method or the "),YK=n($re,"A",{href:!0});var FRt=s(YK);MIr=r(FRt,"from_config()"),FRt.forEach(t),EIr=r($re,` class
method.`),$re.forEach(t),CIr=i(Kl),Rx=n(Kl,"P",{});var lze=s(Rx);wIr=r(lze,"This class cannot be instantiated directly using "),j4e=n(lze,"CODE",{});var TRt=s(j4e);AIr=r(TRt,"__init__()"),TRt.forEach(t),LIr=r(lze," (throws an error)."),lze.forEach(t),yIr=i(Kl),zt=n(Kl,"DIV",{class:!0});var YA=s(zt);T(Px.$$.fragment,YA),xIr=i(YA),D4e=n(YA,"P",{});var MRt=s(D4e);$Ir=r(MRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MRt.forEach(t),kIr=i(YA),Wc=n(YA,"P",{});var kre=s(Wc);SIr=r(kre,`Note:
Loading a model from its configuration file does `),G4e=n(kre,"STRONG",{});var ERt=s(G4e);RIr=r(ERt,"not"),ERt.forEach(t),PIr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(kre,"A",{href:!0});var CRt=s(KK);BIr=r(CRt,"from_pretrained()"),CRt.forEach(t),IIr=r(kre," to load the model weights."),kre.forEach(t),NIr=i(YA),T(W5.$$.fragment,YA),YA.forEach(t),qIr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Bx.$$.fragment,Zl),jIr=i(Zl),O4e=n(Zl,"P",{});var wRt=s(O4e);DIr=r(wRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wRt.forEach(t),GIr=i(Zl),Fn=n(Zl,"P",{});var KA=s(Fn);OIr=r(KA,"The model class to instantiate is selected based on the "),V4e=n(KA,"CODE",{});var ARt=s(V4e);VIr=r(ARt,"model_type"),ARt.forEach(t),XIr=r(KA,` property of the config object (either
passed as an argument or loaded from `),X4e=n(KA,"CODE",{});var LRt=s(X4e);zIr=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),WIr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(KA,"CODE",{});var yRt=s(z4e);QIr=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),HIr=r(KA,":"),KA.forEach(t),UIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);Q5=n(Ne,"LI",{});var jje=s(Q5);W4e=n(jje,"STRONG",{});var xRt=s(W4e);JIr=r(xRt,"bart"),xRt.forEach(t),YIr=r(jje," \u2014 "),ZK=n(jje,"A",{href:!0});var $Rt=s(ZK);KIr=r($Rt,"FlaxBartForCausalLM"),$Rt.forEach(t),ZIr=r(jje," (BART model)"),jje.forEach(t),eNr=i(Ne),H5=n(Ne,"LI",{});var Dje=s(H5);Q4e=n(Dje,"STRONG",{});var kRt=s(Q4e);oNr=r(kRt,"bert"),kRt.forEach(t),rNr=r(Dje," \u2014 "),eZ=n(Dje,"A",{href:!0});var SRt=s(eZ);tNr=r(SRt,"FlaxBertForCausalLM"),SRt.forEach(t),aNr=r(Dje," (BERT model)"),Dje.forEach(t),nNr=i(Ne),U5=n(Ne,"LI",{});var Gje=s(U5);H4e=n(Gje,"STRONG",{});var RRt=s(H4e);sNr=r(RRt,"big_bird"),RRt.forEach(t),lNr=r(Gje," \u2014 "),oZ=n(Gje,"A",{href:!0});var PRt=s(oZ);iNr=r(PRt,"FlaxBigBirdForCausalLM"),PRt.forEach(t),dNr=r(Gje," (BigBird model)"),Gje.forEach(t),cNr=i(Ne),J5=n(Ne,"LI",{});var Oje=s(J5);U4e=n(Oje,"STRONG",{});var BRt=s(U4e);fNr=r(BRt,"electra"),BRt.forEach(t),mNr=r(Oje," \u2014 "),rZ=n(Oje,"A",{href:!0});var IRt=s(rZ);gNr=r(IRt,"FlaxElectraForCausalLM"),IRt.forEach(t),hNr=r(Oje," (ELECTRA model)"),Oje.forEach(t),pNr=i(Ne),Y5=n(Ne,"LI",{});var Vje=s(Y5);J4e=n(Vje,"STRONG",{});var NRt=s(J4e);_Nr=r(NRt,"gpt2"),NRt.forEach(t),uNr=r(Vje," \u2014 "),tZ=n(Vje,"A",{href:!0});var qRt=s(tZ);bNr=r(qRt,"FlaxGPT2LMHeadModel"),qRt.forEach(t),vNr=r(Vje," (OpenAI GPT-2 model)"),Vje.forEach(t),FNr=i(Ne),K5=n(Ne,"LI",{});var Xje=s(K5);Y4e=n(Xje,"STRONG",{});var jRt=s(Y4e);TNr=r(jRt,"gpt_neo"),jRt.forEach(t),MNr=r(Xje," \u2014 "),aZ=n(Xje,"A",{href:!0});var DRt=s(aZ);ENr=r(DRt,"FlaxGPTNeoForCausalLM"),DRt.forEach(t),CNr=r(Xje," (GPT Neo model)"),Xje.forEach(t),wNr=i(Ne),Z5=n(Ne,"LI",{});var zje=s(Z5);K4e=n(zje,"STRONG",{});var GRt=s(K4e);ANr=r(GRt,"gptj"),GRt.forEach(t),LNr=r(zje," \u2014 "),nZ=n(zje,"A",{href:!0});var ORt=s(nZ);yNr=r(ORt,"FlaxGPTJForCausalLM"),ORt.forEach(t),xNr=r(zje," (GPT-J model)"),zje.forEach(t),$Nr=i(Ne),e3=n(Ne,"LI",{});var Wje=s(e3);Z4e=n(Wje,"STRONG",{});var VRt=s(Z4e);kNr=r(VRt,"opt"),VRt.forEach(t),SNr=r(Wje," \u2014 "),sZ=n(Wje,"A",{href:!0});var XRt=s(sZ);RNr=r(XRt,"FlaxOPTForCausalLM"),XRt.forEach(t),PNr=r(Wje," (OPT model)"),Wje.forEach(t),BNr=i(Ne),o3=n(Ne,"LI",{});var Qje=s(o3);eCe=n(Qje,"STRONG",{});var zRt=s(eCe);INr=r(zRt,"roberta"),zRt.forEach(t),NNr=r(Qje," \u2014 "),lZ=n(Qje,"A",{href:!0});var WRt=s(lZ);qNr=r(WRt,"FlaxRobertaForCausalLM"),WRt.forEach(t),jNr=r(Qje," (RoBERTa model)"),Qje.forEach(t),DNr=i(Ne),r3=n(Ne,"LI",{});var Hje=s(r3);oCe=n(Hje,"STRONG",{});var QRt=s(oCe);GNr=r(QRt,"xglm"),QRt.forEach(t),ONr=r(Hje," \u2014 "),iZ=n(Hje,"A",{href:!0});var HRt=s(iZ);VNr=r(HRt,"FlaxXGLMForCausalLM"),HRt.forEach(t),XNr=r(Hje," (XGLM model)"),Hje.forEach(t),Ne.forEach(t),zNr=i(Zl),T(t3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),ZOe=i(f),Qc=n(f,"H2",{class:!0});var ize=s(Qc);a3=n(ize,"A",{id:!0,class:!0,href:!0});var URt=s(a3);rCe=n(URt,"SPAN",{});var JRt=s(rCe);T(Ix.$$.fragment,JRt),JRt.forEach(t),URt.forEach(t),WNr=i(ize),tCe=n(ize,"SPAN",{});var YRt=s(tCe);QNr=r(YRt,"FlaxAutoModelForPreTraining"),YRt.forEach(t),ize.forEach(t),eVe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Nx.$$.fragment,ei),HNr=i(ei),Hc=n(ei,"P",{});var Sre=s(Hc);UNr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dZ=n(Sre,"A",{href:!0});var KRt=s(dZ);JNr=r(KRt,"from_pretrained()"),KRt.forEach(t),YNr=r(Sre," class method or the "),cZ=n(Sre,"A",{href:!0});var ZRt=s(cZ);KNr=r(ZRt,"from_config()"),ZRt.forEach(t),ZNr=r(Sre,` class
method.`),Sre.forEach(t),eqr=i(ei),qx=n(ei,"P",{});var dze=s(qx);oqr=r(dze,"This class cannot be instantiated directly using "),aCe=n(dze,"CODE",{});var ePt=s(aCe);rqr=r(ePt,"__init__()"),ePt.forEach(t),tqr=r(dze," (throws an error)."),dze.forEach(t),aqr=i(ei),Wt=n(ei,"DIV",{class:!0});var ZA=s(Wt);T(jx.$$.fragment,ZA),nqr=i(ZA),nCe=n(ZA,"P",{});var oPt=s(nCe);sqr=r(oPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oPt.forEach(t),lqr=i(ZA),Uc=n(ZA,"P",{});var Rre=s(Uc);iqr=r(Rre,`Note:
Loading a model from its configuration file does `),sCe=n(Rre,"STRONG",{});var rPt=s(sCe);dqr=r(rPt,"not"),rPt.forEach(t),cqr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Rre,"A",{href:!0});var tPt=s(fZ);fqr=r(tPt,"from_pretrained()"),tPt.forEach(t),mqr=r(Rre," to load the model weights."),Rre.forEach(t),gqr=i(ZA),T(n3.$$.fragment,ZA),ZA.forEach(t),hqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Dx.$$.fragment,oi),pqr=i(oi),lCe=n(oi,"P",{});var aPt=s(lCe);_qr=r(aPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aPt.forEach(t),uqr=i(oi),Tn=n(oi,"P",{});var e6=s(Tn);bqr=r(e6,"The model class to instantiate is selected based on the "),iCe=n(e6,"CODE",{});var nPt=s(iCe);vqr=r(nPt,"model_type"),nPt.forEach(t),Fqr=r(e6,` property of the config object (either
passed as an argument or loaded from `),dCe=n(e6,"CODE",{});var sPt=s(dCe);Tqr=r(sPt,"pretrained_model_name_or_path"),sPt.forEach(t),Mqr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cCe=n(e6,"CODE",{});var lPt=s(cCe);Eqr=r(lPt,"pretrained_model_name_or_path"),lPt.forEach(t),Cqr=r(e6,":"),e6.forEach(t),wqr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);s3=n(we,"LI",{});var Uje=s(s3);fCe=n(Uje,"STRONG",{});var iPt=s(fCe);Aqr=r(iPt,"albert"),iPt.forEach(t),Lqr=r(Uje," \u2014 "),mZ=n(Uje,"A",{href:!0});var dPt=s(mZ);yqr=r(dPt,"FlaxAlbertForPreTraining"),dPt.forEach(t),xqr=r(Uje," (ALBERT model)"),Uje.forEach(t),$qr=i(we),l3=n(we,"LI",{});var Jje=s(l3);mCe=n(Jje,"STRONG",{});var cPt=s(mCe);kqr=r(cPt,"bart"),cPt.forEach(t),Sqr=r(Jje," \u2014 "),gZ=n(Jje,"A",{href:!0});var fPt=s(gZ);Rqr=r(fPt,"FlaxBartForConditionalGeneration"),fPt.forEach(t),Pqr=r(Jje," (BART model)"),Jje.forEach(t),Bqr=i(we),i3=n(we,"LI",{});var Yje=s(i3);gCe=n(Yje,"STRONG",{});var mPt=s(gCe);Iqr=r(mPt,"bert"),mPt.forEach(t),Nqr=r(Yje," \u2014 "),hZ=n(Yje,"A",{href:!0});var gPt=s(hZ);qqr=r(gPt,"FlaxBertForPreTraining"),gPt.forEach(t),jqr=r(Yje," (BERT model)"),Yje.forEach(t),Dqr=i(we),d3=n(we,"LI",{});var Kje=s(d3);hCe=n(Kje,"STRONG",{});var hPt=s(hCe);Gqr=r(hPt,"big_bird"),hPt.forEach(t),Oqr=r(Kje," \u2014 "),pZ=n(Kje,"A",{href:!0});var pPt=s(pZ);Vqr=r(pPt,"FlaxBigBirdForPreTraining"),pPt.forEach(t),Xqr=r(Kje," (BigBird model)"),Kje.forEach(t),zqr=i(we),c3=n(we,"LI",{});var Zje=s(c3);pCe=n(Zje,"STRONG",{});var _Pt=s(pCe);Wqr=r(_Pt,"electra"),_Pt.forEach(t),Qqr=r(Zje," \u2014 "),_Z=n(Zje,"A",{href:!0});var uPt=s(_Z);Hqr=r(uPt,"FlaxElectraForPreTraining"),uPt.forEach(t),Uqr=r(Zje," (ELECTRA model)"),Zje.forEach(t),Jqr=i(we),f3=n(we,"LI",{});var eDe=s(f3);_Ce=n(eDe,"STRONG",{});var bPt=s(_Ce);Yqr=r(bPt,"longt5"),bPt.forEach(t),Kqr=r(eDe," \u2014 "),uZ=n(eDe,"A",{href:!0});var vPt=s(uZ);Zqr=r(vPt,"FlaxLongT5ForConditionalGeneration"),vPt.forEach(t),ejr=r(eDe," (LongT5 model)"),eDe.forEach(t),ojr=i(we),m3=n(we,"LI",{});var oDe=s(m3);uCe=n(oDe,"STRONG",{});var FPt=s(uCe);rjr=r(FPt,"mbart"),FPt.forEach(t),tjr=r(oDe," \u2014 "),bZ=n(oDe,"A",{href:!0});var TPt=s(bZ);ajr=r(TPt,"FlaxMBartForConditionalGeneration"),TPt.forEach(t),njr=r(oDe," (mBART model)"),oDe.forEach(t),sjr=i(we),g3=n(we,"LI",{});var rDe=s(g3);bCe=n(rDe,"STRONG",{});var MPt=s(bCe);ljr=r(MPt,"mt5"),MPt.forEach(t),ijr=r(rDe," \u2014 "),vZ=n(rDe,"A",{href:!0});var EPt=s(vZ);djr=r(EPt,"FlaxMT5ForConditionalGeneration"),EPt.forEach(t),cjr=r(rDe," (MT5 model)"),rDe.forEach(t),fjr=i(we),h3=n(we,"LI",{});var tDe=s(h3);vCe=n(tDe,"STRONG",{});var CPt=s(vCe);mjr=r(CPt,"roberta"),CPt.forEach(t),gjr=r(tDe," \u2014 "),FZ=n(tDe,"A",{href:!0});var wPt=s(FZ);hjr=r(wPt,"FlaxRobertaForMaskedLM"),wPt.forEach(t),pjr=r(tDe," (RoBERTa model)"),tDe.forEach(t),_jr=i(we),p3=n(we,"LI",{});var aDe=s(p3);FCe=n(aDe,"STRONG",{});var APt=s(FCe);ujr=r(APt,"roformer"),APt.forEach(t),bjr=r(aDe," \u2014 "),TZ=n(aDe,"A",{href:!0});var LPt=s(TZ);vjr=r(LPt,"FlaxRoFormerForMaskedLM"),LPt.forEach(t),Fjr=r(aDe," (RoFormer model)"),aDe.forEach(t),Tjr=i(we),_3=n(we,"LI",{});var nDe=s(_3);TCe=n(nDe,"STRONG",{});var yPt=s(TCe);Mjr=r(yPt,"t5"),yPt.forEach(t),Ejr=r(nDe," \u2014 "),MZ=n(nDe,"A",{href:!0});var xPt=s(MZ);Cjr=r(xPt,"FlaxT5ForConditionalGeneration"),xPt.forEach(t),wjr=r(nDe," (T5 model)"),nDe.forEach(t),Ajr=i(we),u3=n(we,"LI",{});var sDe=s(u3);MCe=n(sDe,"STRONG",{});var $Pt=s(MCe);Ljr=r($Pt,"wav2vec2"),$Pt.forEach(t),yjr=r(sDe," \u2014 "),EZ=n(sDe,"A",{href:!0});var kPt=s(EZ);xjr=r(kPt,"FlaxWav2Vec2ForPreTraining"),kPt.forEach(t),$jr=r(sDe," (Wav2Vec2 model)"),sDe.forEach(t),kjr=i(we),b3=n(we,"LI",{});var lDe=s(b3);ECe=n(lDe,"STRONG",{});var SPt=s(ECe);Sjr=r(SPt,"xlm-roberta"),SPt.forEach(t),Rjr=r(lDe," \u2014 "),CZ=n(lDe,"A",{href:!0});var RPt=s(CZ);Pjr=r(RPt,"FlaxXLMRobertaForMaskedLM"),RPt.forEach(t),Bjr=r(lDe," (XLM-RoBERTa model)"),lDe.forEach(t),we.forEach(t),Ijr=i(oi),T(v3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),oVe=i(f),Jc=n(f,"H2",{class:!0});var cze=s(Jc);F3=n(cze,"A",{id:!0,class:!0,href:!0});var PPt=s(F3);CCe=n(PPt,"SPAN",{});var BPt=s(CCe);T(Gx.$$.fragment,BPt),BPt.forEach(t),PPt.forEach(t),Njr=i(cze),wCe=n(cze,"SPAN",{});var IPt=s(wCe);qjr=r(IPt,"FlaxAutoModelForMaskedLM"),IPt.forEach(t),cze.forEach(t),rVe=i(f),_r=n(f,"DIV",{class:!0});var ri=s(_r);T(Ox.$$.fragment,ri),jjr=i(ri),Yc=n(ri,"P",{});var Pre=s(Yc);Djr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wZ=n(Pre,"A",{href:!0});var NPt=s(wZ);Gjr=r(NPt,"from_pretrained()"),NPt.forEach(t),Ojr=r(Pre," class method or the "),AZ=n(Pre,"A",{href:!0});var qPt=s(AZ);Vjr=r(qPt,"from_config()"),qPt.forEach(t),Xjr=r(Pre,` class
method.`),Pre.forEach(t),zjr=i(ri),Vx=n(ri,"P",{});var fze=s(Vx);Wjr=r(fze,"This class cannot be instantiated directly using "),ACe=n(fze,"CODE",{});var jPt=s(ACe);Qjr=r(jPt,"__init__()"),jPt.forEach(t),Hjr=r(fze," (throws an error)."),fze.forEach(t),Ujr=i(ri),Qt=n(ri,"DIV",{class:!0});var o6=s(Qt);T(Xx.$$.fragment,o6),Jjr=i(o6),LCe=n(o6,"P",{});var DPt=s(LCe);Yjr=r(DPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DPt.forEach(t),Kjr=i(o6),Kc=n(o6,"P",{});var Bre=s(Kc);Zjr=r(Bre,`Note:
Loading a model from its configuration file does `),yCe=n(Bre,"STRONG",{});var GPt=s(yCe);eDr=r(GPt,"not"),GPt.forEach(t),oDr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LZ=n(Bre,"A",{href:!0});var OPt=s(LZ);rDr=r(OPt,"from_pretrained()"),OPt.forEach(t),tDr=r(Bre," to load the model weights."),Bre.forEach(t),aDr=i(o6),T(T3.$$.fragment,o6),o6.forEach(t),nDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(zx.$$.fragment,ti),sDr=i(ti),xCe=n(ti,"P",{});var VPt=s(xCe);lDr=r(VPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VPt.forEach(t),iDr=i(ti),Mn=n(ti,"P",{});var r6=s(Mn);dDr=r(r6,"The model class to instantiate is selected based on the "),$Ce=n(r6,"CODE",{});var XPt=s($Ce);cDr=r(XPt,"model_type"),XPt.forEach(t),fDr=r(r6,` property of the config object (either
passed as an argument or loaded from `),kCe=n(r6,"CODE",{});var zPt=s(kCe);mDr=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),gDr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(r6,"CODE",{});var WPt=s(SCe);hDr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),pDr=r(r6,":"),r6.forEach(t),_Dr=i(ti),$e=n(ti,"UL",{});var qe=s($e);M3=n(qe,"LI",{});var iDe=s(M3);RCe=n(iDe,"STRONG",{});var QPt=s(RCe);uDr=r(QPt,"albert"),QPt.forEach(t),bDr=r(iDe," \u2014 "),yZ=n(iDe,"A",{href:!0});var HPt=s(yZ);vDr=r(HPt,"FlaxAlbertForMaskedLM"),HPt.forEach(t),FDr=r(iDe," (ALBERT model)"),iDe.forEach(t),TDr=i(qe),E3=n(qe,"LI",{});var dDe=s(E3);PCe=n(dDe,"STRONG",{});var UPt=s(PCe);MDr=r(UPt,"bart"),UPt.forEach(t),EDr=r(dDe," \u2014 "),xZ=n(dDe,"A",{href:!0});var JPt=s(xZ);CDr=r(JPt,"FlaxBartForConditionalGeneration"),JPt.forEach(t),wDr=r(dDe," (BART model)"),dDe.forEach(t),ADr=i(qe),C3=n(qe,"LI",{});var cDe=s(C3);BCe=n(cDe,"STRONG",{});var YPt=s(BCe);LDr=r(YPt,"bert"),YPt.forEach(t),yDr=r(cDe," \u2014 "),$Z=n(cDe,"A",{href:!0});var KPt=s($Z);xDr=r(KPt,"FlaxBertForMaskedLM"),KPt.forEach(t),$Dr=r(cDe," (BERT model)"),cDe.forEach(t),kDr=i(qe),w3=n(qe,"LI",{});var fDe=s(w3);ICe=n(fDe,"STRONG",{});var ZPt=s(ICe);SDr=r(ZPt,"big_bird"),ZPt.forEach(t),RDr=r(fDe," \u2014 "),kZ=n(fDe,"A",{href:!0});var eBt=s(kZ);PDr=r(eBt,"FlaxBigBirdForMaskedLM"),eBt.forEach(t),BDr=r(fDe," (BigBird model)"),fDe.forEach(t),IDr=i(qe),A3=n(qe,"LI",{});var mDe=s(A3);NCe=n(mDe,"STRONG",{});var oBt=s(NCe);NDr=r(oBt,"distilbert"),oBt.forEach(t),qDr=r(mDe," \u2014 "),SZ=n(mDe,"A",{href:!0});var rBt=s(SZ);jDr=r(rBt,"FlaxDistilBertForMaskedLM"),rBt.forEach(t),DDr=r(mDe," (DistilBERT model)"),mDe.forEach(t),GDr=i(qe),L3=n(qe,"LI",{});var gDe=s(L3);qCe=n(gDe,"STRONG",{});var tBt=s(qCe);ODr=r(tBt,"electra"),tBt.forEach(t),VDr=r(gDe," \u2014 "),RZ=n(gDe,"A",{href:!0});var aBt=s(RZ);XDr=r(aBt,"FlaxElectraForMaskedLM"),aBt.forEach(t),zDr=r(gDe," (ELECTRA model)"),gDe.forEach(t),WDr=i(qe),y3=n(qe,"LI",{});var hDe=s(y3);jCe=n(hDe,"STRONG",{});var nBt=s(jCe);QDr=r(nBt,"mbart"),nBt.forEach(t),HDr=r(hDe," \u2014 "),PZ=n(hDe,"A",{href:!0});var sBt=s(PZ);UDr=r(sBt,"FlaxMBartForConditionalGeneration"),sBt.forEach(t),JDr=r(hDe," (mBART model)"),hDe.forEach(t),YDr=i(qe),x3=n(qe,"LI",{});var pDe=s(x3);DCe=n(pDe,"STRONG",{});var lBt=s(DCe);KDr=r(lBt,"roberta"),lBt.forEach(t),ZDr=r(pDe," \u2014 "),BZ=n(pDe,"A",{href:!0});var iBt=s(BZ);eGr=r(iBt,"FlaxRobertaForMaskedLM"),iBt.forEach(t),oGr=r(pDe," (RoBERTa model)"),pDe.forEach(t),rGr=i(qe),$3=n(qe,"LI",{});var _De=s($3);GCe=n(_De,"STRONG",{});var dBt=s(GCe);tGr=r(dBt,"roformer"),dBt.forEach(t),aGr=r(_De," \u2014 "),IZ=n(_De,"A",{href:!0});var cBt=s(IZ);nGr=r(cBt,"FlaxRoFormerForMaskedLM"),cBt.forEach(t),sGr=r(_De," (RoFormer model)"),_De.forEach(t),lGr=i(qe),k3=n(qe,"LI",{});var uDe=s(k3);OCe=n(uDe,"STRONG",{});var fBt=s(OCe);iGr=r(fBt,"xlm-roberta"),fBt.forEach(t),dGr=r(uDe," \u2014 "),NZ=n(uDe,"A",{href:!0});var mBt=s(NZ);cGr=r(mBt,"FlaxXLMRobertaForMaskedLM"),mBt.forEach(t),fGr=r(uDe," (XLM-RoBERTa model)"),uDe.forEach(t),qe.forEach(t),mGr=i(ti),T(S3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),tVe=i(f),Zc=n(f,"H2",{class:!0});var mze=s(Zc);R3=n(mze,"A",{id:!0,class:!0,href:!0});var gBt=s(R3);VCe=n(gBt,"SPAN",{});var hBt=s(VCe);T(Wx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),gGr=i(mze),XCe=n(mze,"SPAN",{});var pBt=s(XCe);hGr=r(pBt,"FlaxAutoModelForSeq2SeqLM"),pBt.forEach(t),mze.forEach(t),aVe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(Qx.$$.fragment,ai),pGr=i(ai),ef=n(ai,"P",{});var Ire=s(ef);_Gr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qZ=n(Ire,"A",{href:!0});var _Bt=s(qZ);uGr=r(_Bt,"from_pretrained()"),_Bt.forEach(t),bGr=r(Ire," class method or the "),jZ=n(Ire,"A",{href:!0});var uBt=s(jZ);vGr=r(uBt,"from_config()"),uBt.forEach(t),FGr=r(Ire,` class
method.`),Ire.forEach(t),TGr=i(ai),Hx=n(ai,"P",{});var gze=s(Hx);MGr=r(gze,"This class cannot be instantiated directly using "),zCe=n(gze,"CODE",{});var bBt=s(zCe);EGr=r(bBt,"__init__()"),bBt.forEach(t),CGr=r(gze," (throws an error)."),gze.forEach(t),wGr=i(ai),Ht=n(ai,"DIV",{class:!0});var t6=s(Ht);T(Ux.$$.fragment,t6),AGr=i(t6),WCe=n(t6,"P",{});var vBt=s(WCe);LGr=r(vBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vBt.forEach(t),yGr=i(t6),of=n(t6,"P",{});var Nre=s(of);xGr=r(Nre,`Note:
Loading a model from its configuration file does `),QCe=n(Nre,"STRONG",{});var FBt=s(QCe);$Gr=r(FBt,"not"),FBt.forEach(t),kGr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Nre,"A",{href:!0});var TBt=s(DZ);SGr=r(TBt,"from_pretrained()"),TBt.forEach(t),RGr=r(Nre," to load the model weights."),Nre.forEach(t),PGr=i(t6),T(P3.$$.fragment,t6),t6.forEach(t),BGr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Jx.$$.fragment,ni),IGr=i(ni),HCe=n(ni,"P",{});var MBt=s(HCe);NGr=r(MBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),MBt.forEach(t),qGr=i(ni),En=n(ni,"P",{});var a6=s(En);jGr=r(a6,"The model class to instantiate is selected based on the "),UCe=n(a6,"CODE",{});var EBt=s(UCe);DGr=r(EBt,"model_type"),EBt.forEach(t),GGr=r(a6,` property of the config object (either
passed as an argument or loaded from `),JCe=n(a6,"CODE",{});var CBt=s(JCe);OGr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),VGr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(a6,"CODE",{});var wBt=s(YCe);XGr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),zGr=r(a6,":"),a6.forEach(t),WGr=i(ni),ke=n(ni,"UL",{});var je=s(ke);B3=n(je,"LI",{});var bDe=s(B3);KCe=n(bDe,"STRONG",{});var ABt=s(KCe);QGr=r(ABt,"bart"),ABt.forEach(t),HGr=r(bDe," \u2014 "),GZ=n(bDe,"A",{href:!0});var LBt=s(GZ);UGr=r(LBt,"FlaxBartForConditionalGeneration"),LBt.forEach(t),JGr=r(bDe," (BART model)"),bDe.forEach(t),YGr=i(je),I3=n(je,"LI",{});var vDe=s(I3);ZCe=n(vDe,"STRONG",{});var yBt=s(ZCe);KGr=r(yBt,"blenderbot"),yBt.forEach(t),ZGr=r(vDe," \u2014 "),OZ=n(vDe,"A",{href:!0});var xBt=s(OZ);eOr=r(xBt,"FlaxBlenderbotForConditionalGeneration"),xBt.forEach(t),oOr=r(vDe," (Blenderbot model)"),vDe.forEach(t),rOr=i(je),N3=n(je,"LI",{});var FDe=s(N3);e5e=n(FDe,"STRONG",{});var $Bt=s(e5e);tOr=r($Bt,"blenderbot-small"),$Bt.forEach(t),aOr=r(FDe," \u2014 "),VZ=n(FDe,"A",{href:!0});var kBt=s(VZ);nOr=r(kBt,"FlaxBlenderbotSmallForConditionalGeneration"),kBt.forEach(t),sOr=r(FDe," (BlenderbotSmall model)"),FDe.forEach(t),lOr=i(je),q3=n(je,"LI",{});var TDe=s(q3);o5e=n(TDe,"STRONG",{});var SBt=s(o5e);iOr=r(SBt,"encoder-decoder"),SBt.forEach(t),dOr=r(TDe," \u2014 "),XZ=n(TDe,"A",{href:!0});var RBt=s(XZ);cOr=r(RBt,"FlaxEncoderDecoderModel"),RBt.forEach(t),fOr=r(TDe," (Encoder decoder model)"),TDe.forEach(t),mOr=i(je),j3=n(je,"LI",{});var MDe=s(j3);r5e=n(MDe,"STRONG",{});var PBt=s(r5e);gOr=r(PBt,"longt5"),PBt.forEach(t),hOr=r(MDe," \u2014 "),zZ=n(MDe,"A",{href:!0});var BBt=s(zZ);pOr=r(BBt,"FlaxLongT5ForConditionalGeneration"),BBt.forEach(t),_Or=r(MDe," (LongT5 model)"),MDe.forEach(t),uOr=i(je),D3=n(je,"LI",{});var EDe=s(D3);t5e=n(EDe,"STRONG",{});var IBt=s(t5e);bOr=r(IBt,"marian"),IBt.forEach(t),vOr=r(EDe," \u2014 "),WZ=n(EDe,"A",{href:!0});var NBt=s(WZ);FOr=r(NBt,"FlaxMarianMTModel"),NBt.forEach(t),TOr=r(EDe," (Marian model)"),EDe.forEach(t),MOr=i(je),G3=n(je,"LI",{});var CDe=s(G3);a5e=n(CDe,"STRONG",{});var qBt=s(a5e);EOr=r(qBt,"mbart"),qBt.forEach(t),COr=r(CDe," \u2014 "),QZ=n(CDe,"A",{href:!0});var jBt=s(QZ);wOr=r(jBt,"FlaxMBartForConditionalGeneration"),jBt.forEach(t),AOr=r(CDe," (mBART model)"),CDe.forEach(t),LOr=i(je),O3=n(je,"LI",{});var wDe=s(O3);n5e=n(wDe,"STRONG",{});var DBt=s(n5e);yOr=r(DBt,"mt5"),DBt.forEach(t),xOr=r(wDe," \u2014 "),HZ=n(wDe,"A",{href:!0});var GBt=s(HZ);$Or=r(GBt,"FlaxMT5ForConditionalGeneration"),GBt.forEach(t),kOr=r(wDe," (MT5 model)"),wDe.forEach(t),SOr=i(je),V3=n(je,"LI",{});var ADe=s(V3);s5e=n(ADe,"STRONG",{});var OBt=s(s5e);ROr=r(OBt,"pegasus"),OBt.forEach(t),POr=r(ADe," \u2014 "),UZ=n(ADe,"A",{href:!0});var VBt=s(UZ);BOr=r(VBt,"FlaxPegasusForConditionalGeneration"),VBt.forEach(t),IOr=r(ADe," (Pegasus model)"),ADe.forEach(t),NOr=i(je),X3=n(je,"LI",{});var LDe=s(X3);l5e=n(LDe,"STRONG",{});var XBt=s(l5e);qOr=r(XBt,"t5"),XBt.forEach(t),jOr=r(LDe," \u2014 "),JZ=n(LDe,"A",{href:!0});var zBt=s(JZ);DOr=r(zBt,"FlaxT5ForConditionalGeneration"),zBt.forEach(t),GOr=r(LDe," (T5 model)"),LDe.forEach(t),je.forEach(t),OOr=i(ni),T(z3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),nVe=i(f),rf=n(f,"H2",{class:!0});var hze=s(rf);W3=n(hze,"A",{id:!0,class:!0,href:!0});var WBt=s(W3);i5e=n(WBt,"SPAN",{});var QBt=s(i5e);T(Yx.$$.fragment,QBt),QBt.forEach(t),WBt.forEach(t),VOr=i(hze),d5e=n(hze,"SPAN",{});var HBt=s(d5e);XOr=r(HBt,"FlaxAutoModelForSequenceClassification"),HBt.forEach(t),hze.forEach(t),sVe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Kx.$$.fragment,si),zOr=i(si),tf=n(si,"P",{});var qre=s(tf);WOr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YZ=n(qre,"A",{href:!0});var UBt=s(YZ);QOr=r(UBt,"from_pretrained()"),UBt.forEach(t),HOr=r(qre," class method or the "),KZ=n(qre,"A",{href:!0});var JBt=s(KZ);UOr=r(JBt,"from_config()"),JBt.forEach(t),JOr=r(qre,` class
method.`),qre.forEach(t),YOr=i(si),Zx=n(si,"P",{});var pze=s(Zx);KOr=r(pze,"This class cannot be instantiated directly using "),c5e=n(pze,"CODE",{});var YBt=s(c5e);ZOr=r(YBt,"__init__()"),YBt.forEach(t),eVr=r(pze," (throws an error)."),pze.forEach(t),oVr=i(si),Ut=n(si,"DIV",{class:!0});var n6=s(Ut);T(e$.$$.fragment,n6),rVr=i(n6),f5e=n(n6,"P",{});var KBt=s(f5e);tVr=r(KBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KBt.forEach(t),aVr=i(n6),af=n(n6,"P",{});var jre=s(af);nVr=r(jre,`Note:
Loading a model from its configuration file does `),m5e=n(jre,"STRONG",{});var ZBt=s(m5e);sVr=r(ZBt,"not"),ZBt.forEach(t),lVr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(jre,"A",{href:!0});var eIt=s(ZZ);iVr=r(eIt,"from_pretrained()"),eIt.forEach(t),dVr=r(jre," to load the model weights."),jre.forEach(t),cVr=i(n6),T(Q3.$$.fragment,n6),n6.forEach(t),fVr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(o$.$$.fragment,li),mVr=i(li),g5e=n(li,"P",{});var oIt=s(g5e);gVr=r(oIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oIt.forEach(t),hVr=i(li),Cn=n(li,"P",{});var s6=s(Cn);pVr=r(s6,"The model class to instantiate is selected based on the "),h5e=n(s6,"CODE",{});var rIt=s(h5e);_Vr=r(rIt,"model_type"),rIt.forEach(t),uVr=r(s6,` property of the config object (either
passed as an argument or loaded from `),p5e=n(s6,"CODE",{});var tIt=s(p5e);bVr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),vVr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(s6,"CODE",{});var aIt=s(_5e);FVr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),TVr=r(s6,":"),s6.forEach(t),MVr=i(li),Se=n(li,"UL",{});var De=s(Se);H3=n(De,"LI",{});var yDe=s(H3);u5e=n(yDe,"STRONG",{});var nIt=s(u5e);EVr=r(nIt,"albert"),nIt.forEach(t),CVr=r(yDe," \u2014 "),eee=n(yDe,"A",{href:!0});var sIt=s(eee);wVr=r(sIt,"FlaxAlbertForSequenceClassification"),sIt.forEach(t),AVr=r(yDe," (ALBERT model)"),yDe.forEach(t),LVr=i(De),U3=n(De,"LI",{});var xDe=s(U3);b5e=n(xDe,"STRONG",{});var lIt=s(b5e);yVr=r(lIt,"bart"),lIt.forEach(t),xVr=r(xDe," \u2014 "),oee=n(xDe,"A",{href:!0});var iIt=s(oee);$Vr=r(iIt,"FlaxBartForSequenceClassification"),iIt.forEach(t),kVr=r(xDe," (BART model)"),xDe.forEach(t),SVr=i(De),J3=n(De,"LI",{});var $De=s(J3);v5e=n($De,"STRONG",{});var dIt=s(v5e);RVr=r(dIt,"bert"),dIt.forEach(t),PVr=r($De," \u2014 "),ree=n($De,"A",{href:!0});var cIt=s(ree);BVr=r(cIt,"FlaxBertForSequenceClassification"),cIt.forEach(t),IVr=r($De," (BERT model)"),$De.forEach(t),NVr=i(De),Y3=n(De,"LI",{});var kDe=s(Y3);F5e=n(kDe,"STRONG",{});var fIt=s(F5e);qVr=r(fIt,"big_bird"),fIt.forEach(t),jVr=r(kDe," \u2014 "),tee=n(kDe,"A",{href:!0});var mIt=s(tee);DVr=r(mIt,"FlaxBigBirdForSequenceClassification"),mIt.forEach(t),GVr=r(kDe," (BigBird model)"),kDe.forEach(t),OVr=i(De),K3=n(De,"LI",{});var SDe=s(K3);T5e=n(SDe,"STRONG",{});var gIt=s(T5e);VVr=r(gIt,"distilbert"),gIt.forEach(t),XVr=r(SDe," \u2014 "),aee=n(SDe,"A",{href:!0});var hIt=s(aee);zVr=r(hIt,"FlaxDistilBertForSequenceClassification"),hIt.forEach(t),WVr=r(SDe," (DistilBERT model)"),SDe.forEach(t),QVr=i(De),Z3=n(De,"LI",{});var RDe=s(Z3);M5e=n(RDe,"STRONG",{});var pIt=s(M5e);HVr=r(pIt,"electra"),pIt.forEach(t),UVr=r(RDe," \u2014 "),nee=n(RDe,"A",{href:!0});var _It=s(nee);JVr=r(_It,"FlaxElectraForSequenceClassification"),_It.forEach(t),YVr=r(RDe," (ELECTRA model)"),RDe.forEach(t),KVr=i(De),e0=n(De,"LI",{});var PDe=s(e0);E5e=n(PDe,"STRONG",{});var uIt=s(E5e);ZVr=r(uIt,"mbart"),uIt.forEach(t),eXr=r(PDe," \u2014 "),see=n(PDe,"A",{href:!0});var bIt=s(see);oXr=r(bIt,"FlaxMBartForSequenceClassification"),bIt.forEach(t),rXr=r(PDe," (mBART model)"),PDe.forEach(t),tXr=i(De),o0=n(De,"LI",{});var BDe=s(o0);C5e=n(BDe,"STRONG",{});var vIt=s(C5e);aXr=r(vIt,"roberta"),vIt.forEach(t),nXr=r(BDe," \u2014 "),lee=n(BDe,"A",{href:!0});var FIt=s(lee);sXr=r(FIt,"FlaxRobertaForSequenceClassification"),FIt.forEach(t),lXr=r(BDe," (RoBERTa model)"),BDe.forEach(t),iXr=i(De),r0=n(De,"LI",{});var IDe=s(r0);w5e=n(IDe,"STRONG",{});var TIt=s(w5e);dXr=r(TIt,"roformer"),TIt.forEach(t),cXr=r(IDe," \u2014 "),iee=n(IDe,"A",{href:!0});var MIt=s(iee);fXr=r(MIt,"FlaxRoFormerForSequenceClassification"),MIt.forEach(t),mXr=r(IDe," (RoFormer model)"),IDe.forEach(t),gXr=i(De),t0=n(De,"LI",{});var NDe=s(t0);A5e=n(NDe,"STRONG",{});var EIt=s(A5e);hXr=r(EIt,"xlm-roberta"),EIt.forEach(t),pXr=r(NDe," \u2014 "),dee=n(NDe,"A",{href:!0});var CIt=s(dee);_Xr=r(CIt,"FlaxXLMRobertaForSequenceClassification"),CIt.forEach(t),uXr=r(NDe," (XLM-RoBERTa model)"),NDe.forEach(t),De.forEach(t),bXr=i(li),T(a0.$$.fragment,li),li.forEach(t),si.forEach(t),lVe=i(f),nf=n(f,"H2",{class:!0});var _ze=s(nf);n0=n(_ze,"A",{id:!0,class:!0,href:!0});var wIt=s(n0);L5e=n(wIt,"SPAN",{});var AIt=s(L5e);T(r$.$$.fragment,AIt),AIt.forEach(t),wIt.forEach(t),vXr=i(_ze),y5e=n(_ze,"SPAN",{});var LIt=s(y5e);FXr=r(LIt,"FlaxAutoModelForQuestionAnswering"),LIt.forEach(t),_ze.forEach(t),iVe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(t$.$$.fragment,ii),TXr=i(ii),sf=n(ii,"P",{});var Dre=s(sf);MXr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cee=n(Dre,"A",{href:!0});var yIt=s(cee);EXr=r(yIt,"from_pretrained()"),yIt.forEach(t),CXr=r(Dre," class method or the "),fee=n(Dre,"A",{href:!0});var xIt=s(fee);wXr=r(xIt,"from_config()"),xIt.forEach(t),AXr=r(Dre,` class
method.`),Dre.forEach(t),LXr=i(ii),a$=n(ii,"P",{});var uze=s(a$);yXr=r(uze,"This class cannot be instantiated directly using "),x5e=n(uze,"CODE",{});var $It=s(x5e);xXr=r($It,"__init__()"),$It.forEach(t),$Xr=r(uze," (throws an error)."),uze.forEach(t),kXr=i(ii),Jt=n(ii,"DIV",{class:!0});var l6=s(Jt);T(n$.$$.fragment,l6),SXr=i(l6),$5e=n(l6,"P",{});var kIt=s($5e);RXr=r(kIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kIt.forEach(t),PXr=i(l6),lf=n(l6,"P",{});var Gre=s(lf);BXr=r(Gre,`Note:
Loading a model from its configuration file does `),k5e=n(Gre,"STRONG",{});var SIt=s(k5e);IXr=r(SIt,"not"),SIt.forEach(t),NXr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(Gre,"A",{href:!0});var RIt=s(mee);qXr=r(RIt,"from_pretrained()"),RIt.forEach(t),jXr=r(Gre," to load the model weights."),Gre.forEach(t),DXr=i(l6),T(s0.$$.fragment,l6),l6.forEach(t),GXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(s$.$$.fragment,di),OXr=i(di),S5e=n(di,"P",{});var PIt=s(S5e);VXr=r(PIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PIt.forEach(t),XXr=i(di),wn=n(di,"P",{});var i6=s(wn);zXr=r(i6,"The model class to instantiate is selected based on the "),R5e=n(i6,"CODE",{});var BIt=s(R5e);WXr=r(BIt,"model_type"),BIt.forEach(t),QXr=r(i6,` property of the config object (either
passed as an argument or loaded from `),P5e=n(i6,"CODE",{});var IIt=s(P5e);HXr=r(IIt,"pretrained_model_name_or_path"),IIt.forEach(t),UXr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(i6,"CODE",{});var NIt=s(B5e);JXr=r(NIt,"pretrained_model_name_or_path"),NIt.forEach(t),YXr=r(i6,":"),i6.forEach(t),KXr=i(di),Re=n(di,"UL",{});var Ge=s(Re);l0=n(Ge,"LI",{});var qDe=s(l0);I5e=n(qDe,"STRONG",{});var qIt=s(I5e);ZXr=r(qIt,"albert"),qIt.forEach(t),ezr=r(qDe," \u2014 "),gee=n(qDe,"A",{href:!0});var jIt=s(gee);ozr=r(jIt,"FlaxAlbertForQuestionAnswering"),jIt.forEach(t),rzr=r(qDe," (ALBERT model)"),qDe.forEach(t),tzr=i(Ge),i0=n(Ge,"LI",{});var jDe=s(i0);N5e=n(jDe,"STRONG",{});var DIt=s(N5e);azr=r(DIt,"bart"),DIt.forEach(t),nzr=r(jDe," \u2014 "),hee=n(jDe,"A",{href:!0});var GIt=s(hee);szr=r(GIt,"FlaxBartForQuestionAnswering"),GIt.forEach(t),lzr=r(jDe," (BART model)"),jDe.forEach(t),izr=i(Ge),d0=n(Ge,"LI",{});var DDe=s(d0);q5e=n(DDe,"STRONG",{});var OIt=s(q5e);dzr=r(OIt,"bert"),OIt.forEach(t),czr=r(DDe," \u2014 "),pee=n(DDe,"A",{href:!0});var VIt=s(pee);fzr=r(VIt,"FlaxBertForQuestionAnswering"),VIt.forEach(t),mzr=r(DDe," (BERT model)"),DDe.forEach(t),gzr=i(Ge),c0=n(Ge,"LI",{});var GDe=s(c0);j5e=n(GDe,"STRONG",{});var XIt=s(j5e);hzr=r(XIt,"big_bird"),XIt.forEach(t),pzr=r(GDe," \u2014 "),_ee=n(GDe,"A",{href:!0});var zIt=s(_ee);_zr=r(zIt,"FlaxBigBirdForQuestionAnswering"),zIt.forEach(t),uzr=r(GDe," (BigBird model)"),GDe.forEach(t),bzr=i(Ge),f0=n(Ge,"LI",{});var ODe=s(f0);D5e=n(ODe,"STRONG",{});var WIt=s(D5e);vzr=r(WIt,"distilbert"),WIt.forEach(t),Fzr=r(ODe," \u2014 "),uee=n(ODe,"A",{href:!0});var QIt=s(uee);Tzr=r(QIt,"FlaxDistilBertForQuestionAnswering"),QIt.forEach(t),Mzr=r(ODe," (DistilBERT model)"),ODe.forEach(t),Ezr=i(Ge),m0=n(Ge,"LI",{});var VDe=s(m0);G5e=n(VDe,"STRONG",{});var HIt=s(G5e);Czr=r(HIt,"electra"),HIt.forEach(t),wzr=r(VDe," \u2014 "),bee=n(VDe,"A",{href:!0});var UIt=s(bee);Azr=r(UIt,"FlaxElectraForQuestionAnswering"),UIt.forEach(t),Lzr=r(VDe," (ELECTRA model)"),VDe.forEach(t),yzr=i(Ge),g0=n(Ge,"LI",{});var XDe=s(g0);O5e=n(XDe,"STRONG",{});var JIt=s(O5e);xzr=r(JIt,"mbart"),JIt.forEach(t),$zr=r(XDe," \u2014 "),vee=n(XDe,"A",{href:!0});var YIt=s(vee);kzr=r(YIt,"FlaxMBartForQuestionAnswering"),YIt.forEach(t),Szr=r(XDe," (mBART model)"),XDe.forEach(t),Rzr=i(Ge),h0=n(Ge,"LI",{});var zDe=s(h0);V5e=n(zDe,"STRONG",{});var KIt=s(V5e);Pzr=r(KIt,"roberta"),KIt.forEach(t),Bzr=r(zDe," \u2014 "),Fee=n(zDe,"A",{href:!0});var ZIt=s(Fee);Izr=r(ZIt,"FlaxRobertaForQuestionAnswering"),ZIt.forEach(t),Nzr=r(zDe," (RoBERTa model)"),zDe.forEach(t),qzr=i(Ge),p0=n(Ge,"LI",{});var WDe=s(p0);X5e=n(WDe,"STRONG",{});var eNt=s(X5e);jzr=r(eNt,"roformer"),eNt.forEach(t),Dzr=r(WDe," \u2014 "),Tee=n(WDe,"A",{href:!0});var oNt=s(Tee);Gzr=r(oNt,"FlaxRoFormerForQuestionAnswering"),oNt.forEach(t),Ozr=r(WDe," (RoFormer model)"),WDe.forEach(t),Vzr=i(Ge),_0=n(Ge,"LI",{});var QDe=s(_0);z5e=n(QDe,"STRONG",{});var rNt=s(z5e);Xzr=r(rNt,"xlm-roberta"),rNt.forEach(t),zzr=r(QDe," \u2014 "),Mee=n(QDe,"A",{href:!0});var tNt=s(Mee);Wzr=r(tNt,"FlaxXLMRobertaForQuestionAnswering"),tNt.forEach(t),Qzr=r(QDe," (XLM-RoBERTa model)"),QDe.forEach(t),Ge.forEach(t),Hzr=i(di),T(u0.$$.fragment,di),di.forEach(t),ii.forEach(t),dVe=i(f),df=n(f,"H2",{class:!0});var bze=s(df);b0=n(bze,"A",{id:!0,class:!0,href:!0});var aNt=s(b0);W5e=n(aNt,"SPAN",{});var nNt=s(W5e);T(l$.$$.fragment,nNt),nNt.forEach(t),aNt.forEach(t),Uzr=i(bze),Q5e=n(bze,"SPAN",{});var sNt=s(Q5e);Jzr=r(sNt,"FlaxAutoModelForTokenClassification"),sNt.forEach(t),bze.forEach(t),cVe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(i$.$$.fragment,ci),Yzr=i(ci),cf=n(ci,"P",{});var Ore=s(cf);Kzr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Eee=n(Ore,"A",{href:!0});var lNt=s(Eee);Zzr=r(lNt,"from_pretrained()"),lNt.forEach(t),eWr=r(Ore," class method or the "),Cee=n(Ore,"A",{href:!0});var iNt=s(Cee);oWr=r(iNt,"from_config()"),iNt.forEach(t),rWr=r(Ore,` class
method.`),Ore.forEach(t),tWr=i(ci),d$=n(ci,"P",{});var vze=s(d$);aWr=r(vze,"This class cannot be instantiated directly using "),H5e=n(vze,"CODE",{});var dNt=s(H5e);nWr=r(dNt,"__init__()"),dNt.forEach(t),sWr=r(vze," (throws an error)."),vze.forEach(t),lWr=i(ci),Yt=n(ci,"DIV",{class:!0});var d6=s(Yt);T(c$.$$.fragment,d6),iWr=i(d6),U5e=n(d6,"P",{});var cNt=s(U5e);dWr=r(cNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cNt.forEach(t),cWr=i(d6),ff=n(d6,"P",{});var Vre=s(ff);fWr=r(Vre,`Note:
Loading a model from its configuration file does `),J5e=n(Vre,"STRONG",{});var fNt=s(J5e);mWr=r(fNt,"not"),fNt.forEach(t),gWr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wee=n(Vre,"A",{href:!0});var mNt=s(wee);hWr=r(mNt,"from_pretrained()"),mNt.forEach(t),pWr=r(Vre," to load the model weights."),Vre.forEach(t),_Wr=i(d6),T(v0.$$.fragment,d6),d6.forEach(t),uWr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(f$.$$.fragment,fi),bWr=i(fi),Y5e=n(fi,"P",{});var gNt=s(Y5e);vWr=r(gNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gNt.forEach(t),FWr=i(fi),An=n(fi,"P",{});var c6=s(An);TWr=r(c6,"The model class to instantiate is selected based on the "),K5e=n(c6,"CODE",{});var hNt=s(K5e);MWr=r(hNt,"model_type"),hNt.forEach(t),EWr=r(c6,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(c6,"CODE",{});var pNt=s(Z5e);CWr=r(pNt,"pretrained_model_name_or_path"),pNt.forEach(t),wWr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(c6,"CODE",{});var _Nt=s(e3e);AWr=r(_Nt,"pretrained_model_name_or_path"),_Nt.forEach(t),LWr=r(c6,":"),c6.forEach(t),yWr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);F0=n(To,"LI",{});var HDe=s(F0);o3e=n(HDe,"STRONG",{});var uNt=s(o3e);xWr=r(uNt,"albert"),uNt.forEach(t),$Wr=r(HDe," \u2014 "),Aee=n(HDe,"A",{href:!0});var bNt=s(Aee);kWr=r(bNt,"FlaxAlbertForTokenClassification"),bNt.forEach(t),SWr=r(HDe," (ALBERT model)"),HDe.forEach(t),RWr=i(To),T0=n(To,"LI",{});var UDe=s(T0);r3e=n(UDe,"STRONG",{});var vNt=s(r3e);PWr=r(vNt,"bert"),vNt.forEach(t),BWr=r(UDe," \u2014 "),Lee=n(UDe,"A",{href:!0});var FNt=s(Lee);IWr=r(FNt,"FlaxBertForTokenClassification"),FNt.forEach(t),NWr=r(UDe," (BERT model)"),UDe.forEach(t),qWr=i(To),M0=n(To,"LI",{});var JDe=s(M0);t3e=n(JDe,"STRONG",{});var TNt=s(t3e);jWr=r(TNt,"big_bird"),TNt.forEach(t),DWr=r(JDe," \u2014 "),yee=n(JDe,"A",{href:!0});var MNt=s(yee);GWr=r(MNt,"FlaxBigBirdForTokenClassification"),MNt.forEach(t),OWr=r(JDe," (BigBird model)"),JDe.forEach(t),VWr=i(To),E0=n(To,"LI",{});var YDe=s(E0);a3e=n(YDe,"STRONG",{});var ENt=s(a3e);XWr=r(ENt,"distilbert"),ENt.forEach(t),zWr=r(YDe," \u2014 "),xee=n(YDe,"A",{href:!0});var CNt=s(xee);WWr=r(CNt,"FlaxDistilBertForTokenClassification"),CNt.forEach(t),QWr=r(YDe," (DistilBERT model)"),YDe.forEach(t),HWr=i(To),C0=n(To,"LI",{});var KDe=s(C0);n3e=n(KDe,"STRONG",{});var wNt=s(n3e);UWr=r(wNt,"electra"),wNt.forEach(t),JWr=r(KDe," \u2014 "),$ee=n(KDe,"A",{href:!0});var ANt=s($ee);YWr=r(ANt,"FlaxElectraForTokenClassification"),ANt.forEach(t),KWr=r(KDe," (ELECTRA model)"),KDe.forEach(t),ZWr=i(To),w0=n(To,"LI",{});var ZDe=s(w0);s3e=n(ZDe,"STRONG",{});var LNt=s(s3e);eQr=r(LNt,"roberta"),LNt.forEach(t),oQr=r(ZDe," \u2014 "),kee=n(ZDe,"A",{href:!0});var yNt=s(kee);rQr=r(yNt,"FlaxRobertaForTokenClassification"),yNt.forEach(t),tQr=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),aQr=i(To),A0=n(To,"LI",{});var eGe=s(A0);l3e=n(eGe,"STRONG",{});var xNt=s(l3e);nQr=r(xNt,"roformer"),xNt.forEach(t),sQr=r(eGe," \u2014 "),See=n(eGe,"A",{href:!0});var $Nt=s(See);lQr=r($Nt,"FlaxRoFormerForTokenClassification"),$Nt.forEach(t),iQr=r(eGe," (RoFormer model)"),eGe.forEach(t),dQr=i(To),L0=n(To,"LI",{});var oGe=s(L0);i3e=n(oGe,"STRONG",{});var kNt=s(i3e);cQr=r(kNt,"xlm-roberta"),kNt.forEach(t),fQr=r(oGe," \u2014 "),Ree=n(oGe,"A",{href:!0});var SNt=s(Ree);mQr=r(SNt,"FlaxXLMRobertaForTokenClassification"),SNt.forEach(t),gQr=r(oGe," (XLM-RoBERTa model)"),oGe.forEach(t),To.forEach(t),hQr=i(fi),T(y0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),fVe=i(f),mf=n(f,"H2",{class:!0});var Fze=s(mf);x0=n(Fze,"A",{id:!0,class:!0,href:!0});var RNt=s(x0);d3e=n(RNt,"SPAN",{});var PNt=s(d3e);T(m$.$$.fragment,PNt),PNt.forEach(t),RNt.forEach(t),pQr=i(Fze),c3e=n(Fze,"SPAN",{});var BNt=s(c3e);_Qr=r(BNt,"FlaxAutoModelForMultipleChoice"),BNt.forEach(t),Fze.forEach(t),mVe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(g$.$$.fragment,mi),uQr=i(mi),gf=n(mi,"P",{});var Xre=s(gf);bQr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pee=n(Xre,"A",{href:!0});var INt=s(Pee);vQr=r(INt,"from_pretrained()"),INt.forEach(t),FQr=r(Xre," class method or the "),Bee=n(Xre,"A",{href:!0});var NNt=s(Bee);TQr=r(NNt,"from_config()"),NNt.forEach(t),MQr=r(Xre,` class
method.`),Xre.forEach(t),EQr=i(mi),h$=n(mi,"P",{});var Tze=s(h$);CQr=r(Tze,"This class cannot be instantiated directly using "),f3e=n(Tze,"CODE",{});var qNt=s(f3e);wQr=r(qNt,"__init__()"),qNt.forEach(t),AQr=r(Tze," (throws an error)."),Tze.forEach(t),LQr=i(mi),Kt=n(mi,"DIV",{class:!0});var f6=s(Kt);T(p$.$$.fragment,f6),yQr=i(f6),m3e=n(f6,"P",{});var jNt=s(m3e);xQr=r(jNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jNt.forEach(t),$Qr=i(f6),hf=n(f6,"P",{});var zre=s(hf);kQr=r(zre,`Note:
Loading a model from its configuration file does `),g3e=n(zre,"STRONG",{});var DNt=s(g3e);SQr=r(DNt,"not"),DNt.forEach(t),RQr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(zre,"A",{href:!0});var GNt=s(Iee);PQr=r(GNt,"from_pretrained()"),GNt.forEach(t),BQr=r(zre," to load the model weights."),zre.forEach(t),IQr=i(f6),T($0.$$.fragment,f6),f6.forEach(t),NQr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(_$.$$.fragment,gi),qQr=i(gi),h3e=n(gi,"P",{});var ONt=s(h3e);jQr=r(ONt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ONt.forEach(t),DQr=i(gi),Ln=n(gi,"P",{});var m6=s(Ln);GQr=r(m6,"The model class to instantiate is selected based on the "),p3e=n(m6,"CODE",{});var VNt=s(p3e);OQr=r(VNt,"model_type"),VNt.forEach(t),VQr=r(m6,` property of the config object (either
passed as an argument or loaded from `),_3e=n(m6,"CODE",{});var XNt=s(_3e);XQr=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),zQr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(m6,"CODE",{});var zNt=s(u3e);WQr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),QQr=r(m6,":"),m6.forEach(t),HQr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);k0=n(Mo,"LI",{});var rGe=s(k0);b3e=n(rGe,"STRONG",{});var WNt=s(b3e);UQr=r(WNt,"albert"),WNt.forEach(t),JQr=r(rGe," \u2014 "),Nee=n(rGe,"A",{href:!0});var QNt=s(Nee);YQr=r(QNt,"FlaxAlbertForMultipleChoice"),QNt.forEach(t),KQr=r(rGe," (ALBERT model)"),rGe.forEach(t),ZQr=i(Mo),S0=n(Mo,"LI",{});var tGe=s(S0);v3e=n(tGe,"STRONG",{});var HNt=s(v3e);eHr=r(HNt,"bert"),HNt.forEach(t),oHr=r(tGe," \u2014 "),qee=n(tGe,"A",{href:!0});var UNt=s(qee);rHr=r(UNt,"FlaxBertForMultipleChoice"),UNt.forEach(t),tHr=r(tGe," (BERT model)"),tGe.forEach(t),aHr=i(Mo),R0=n(Mo,"LI",{});var aGe=s(R0);F3e=n(aGe,"STRONG",{});var JNt=s(F3e);nHr=r(JNt,"big_bird"),JNt.forEach(t),sHr=r(aGe," \u2014 "),jee=n(aGe,"A",{href:!0});var YNt=s(jee);lHr=r(YNt,"FlaxBigBirdForMultipleChoice"),YNt.forEach(t),iHr=r(aGe," (BigBird model)"),aGe.forEach(t),dHr=i(Mo),P0=n(Mo,"LI",{});var nGe=s(P0);T3e=n(nGe,"STRONG",{});var KNt=s(T3e);cHr=r(KNt,"distilbert"),KNt.forEach(t),fHr=r(nGe," \u2014 "),Dee=n(nGe,"A",{href:!0});var ZNt=s(Dee);mHr=r(ZNt,"FlaxDistilBertForMultipleChoice"),ZNt.forEach(t),gHr=r(nGe," (DistilBERT model)"),nGe.forEach(t),hHr=i(Mo),B0=n(Mo,"LI",{});var sGe=s(B0);M3e=n(sGe,"STRONG",{});var eqt=s(M3e);pHr=r(eqt,"electra"),eqt.forEach(t),_Hr=r(sGe," \u2014 "),Gee=n(sGe,"A",{href:!0});var oqt=s(Gee);uHr=r(oqt,"FlaxElectraForMultipleChoice"),oqt.forEach(t),bHr=r(sGe," (ELECTRA model)"),sGe.forEach(t),vHr=i(Mo),I0=n(Mo,"LI",{});var lGe=s(I0);E3e=n(lGe,"STRONG",{});var rqt=s(E3e);FHr=r(rqt,"roberta"),rqt.forEach(t),THr=r(lGe," \u2014 "),Oee=n(lGe,"A",{href:!0});var tqt=s(Oee);MHr=r(tqt,"FlaxRobertaForMultipleChoice"),tqt.forEach(t),EHr=r(lGe," (RoBERTa model)"),lGe.forEach(t),CHr=i(Mo),N0=n(Mo,"LI",{});var iGe=s(N0);C3e=n(iGe,"STRONG",{});var aqt=s(C3e);wHr=r(aqt,"roformer"),aqt.forEach(t),AHr=r(iGe," \u2014 "),Vee=n(iGe,"A",{href:!0});var nqt=s(Vee);LHr=r(nqt,"FlaxRoFormerForMultipleChoice"),nqt.forEach(t),yHr=r(iGe," (RoFormer model)"),iGe.forEach(t),xHr=i(Mo),q0=n(Mo,"LI",{});var dGe=s(q0);w3e=n(dGe,"STRONG",{});var sqt=s(w3e);$Hr=r(sqt,"xlm-roberta"),sqt.forEach(t),kHr=r(dGe," \u2014 "),Xee=n(dGe,"A",{href:!0});var lqt=s(Xee);SHr=r(lqt,"FlaxXLMRobertaForMultipleChoice"),lqt.forEach(t),RHr=r(dGe," (XLM-RoBERTa model)"),dGe.forEach(t),Mo.forEach(t),PHr=i(gi),T(j0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),gVe=i(f),pf=n(f,"H2",{class:!0});var Mze=s(pf);D0=n(Mze,"A",{id:!0,class:!0,href:!0});var iqt=s(D0);A3e=n(iqt,"SPAN",{});var dqt=s(A3e);T(u$.$$.fragment,dqt),dqt.forEach(t),iqt.forEach(t),BHr=i(Mze),L3e=n(Mze,"SPAN",{});var cqt=s(L3e);IHr=r(cqt,"FlaxAutoModelForNextSentencePrediction"),cqt.forEach(t),Mze.forEach(t),hVe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(b$.$$.fragment,hi),NHr=i(hi),_f=n(hi,"P",{});var Wre=s(_f);qHr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zee=n(Wre,"A",{href:!0});var fqt=s(zee);jHr=r(fqt,"from_pretrained()"),fqt.forEach(t),DHr=r(Wre," class method or the "),Wee=n(Wre,"A",{href:!0});var mqt=s(Wee);GHr=r(mqt,"from_config()"),mqt.forEach(t),OHr=r(Wre,` class
method.`),Wre.forEach(t),VHr=i(hi),v$=n(hi,"P",{});var Eze=s(v$);XHr=r(Eze,"This class cannot be instantiated directly using "),y3e=n(Eze,"CODE",{});var gqt=s(y3e);zHr=r(gqt,"__init__()"),gqt.forEach(t),WHr=r(Eze," (throws an error)."),Eze.forEach(t),QHr=i(hi),Zt=n(hi,"DIV",{class:!0});var g6=s(Zt);T(F$.$$.fragment,g6),HHr=i(g6),x3e=n(g6,"P",{});var hqt=s(x3e);UHr=r(hqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hqt.forEach(t),JHr=i(g6),uf=n(g6,"P",{});var Qre=s(uf);YHr=r(Qre,`Note:
Loading a model from its configuration file does `),$3e=n(Qre,"STRONG",{});var pqt=s($3e);KHr=r(pqt,"not"),pqt.forEach(t),ZHr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Qre,"A",{href:!0});var _qt=s(Qee);eUr=r(_qt,"from_pretrained()"),_qt.forEach(t),oUr=r(Qre," to load the model weights."),Qre.forEach(t),rUr=i(g6),T(G0.$$.fragment,g6),g6.forEach(t),tUr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(T$.$$.fragment,pi),aUr=i(pi),k3e=n(pi,"P",{});var uqt=s(k3e);nUr=r(uqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uqt.forEach(t),sUr=i(pi),yn=n(pi,"P",{});var h6=s(yn);lUr=r(h6,"The model class to instantiate is selected based on the "),S3e=n(h6,"CODE",{});var bqt=s(S3e);iUr=r(bqt,"model_type"),bqt.forEach(t),dUr=r(h6,` property of the config object (either
passed as an argument or loaded from `),R3e=n(h6,"CODE",{});var vqt=s(R3e);cUr=r(vqt,"pretrained_model_name_or_path"),vqt.forEach(t),fUr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(h6,"CODE",{});var Fqt=s(P3e);mUr=r(Fqt,"pretrained_model_name_or_path"),Fqt.forEach(t),gUr=r(h6,":"),h6.forEach(t),hUr=i(pi),B3e=n(pi,"UL",{});var Tqt=s(B3e);O0=n(Tqt,"LI",{});var cGe=s(O0);I3e=n(cGe,"STRONG",{});var Mqt=s(I3e);pUr=r(Mqt,"bert"),Mqt.forEach(t),_Ur=r(cGe," \u2014 "),Hee=n(cGe,"A",{href:!0});var Eqt=s(Hee);uUr=r(Eqt,"FlaxBertForNextSentencePrediction"),Eqt.forEach(t),bUr=r(cGe," (BERT model)"),cGe.forEach(t),Tqt.forEach(t),vUr=i(pi),T(V0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),pVe=i(f),bf=n(f,"H2",{class:!0});var Cze=s(bf);X0=n(Cze,"A",{id:!0,class:!0,href:!0});var Cqt=s(X0);N3e=n(Cqt,"SPAN",{});var wqt=s(N3e);T(M$.$$.fragment,wqt),wqt.forEach(t),Cqt.forEach(t),FUr=i(Cze),q3e=n(Cze,"SPAN",{});var Aqt=s(q3e);TUr=r(Aqt,"FlaxAutoModelForImageClassification"),Aqt.forEach(t),Cze.forEach(t),_Ve=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(E$.$$.fragment,_i),MUr=i(_i),vf=n(_i,"P",{});var Hre=s(vf);EUr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Uee=n(Hre,"A",{href:!0});var Lqt=s(Uee);CUr=r(Lqt,"from_pretrained()"),Lqt.forEach(t),wUr=r(Hre," class method or the "),Jee=n(Hre,"A",{href:!0});var yqt=s(Jee);AUr=r(yqt,"from_config()"),yqt.forEach(t),LUr=r(Hre,` class
method.`),Hre.forEach(t),yUr=i(_i),C$=n(_i,"P",{});var wze=s(C$);xUr=r(wze,"This class cannot be instantiated directly using "),j3e=n(wze,"CODE",{});var xqt=s(j3e);$Ur=r(xqt,"__init__()"),xqt.forEach(t),kUr=r(wze," (throws an error)."),wze.forEach(t),SUr=i(_i),ea=n(_i,"DIV",{class:!0});var p6=s(ea);T(w$.$$.fragment,p6),RUr=i(p6),D3e=n(p6,"P",{});var $qt=s(D3e);PUr=r($qt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$qt.forEach(t),BUr=i(p6),Ff=n(p6,"P",{});var Ure=s(Ff);IUr=r(Ure,`Note:
Loading a model from its configuration file does `),G3e=n(Ure,"STRONG",{});var kqt=s(G3e);NUr=r(kqt,"not"),kqt.forEach(t),qUr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(Ure,"A",{href:!0});var Sqt=s(Yee);jUr=r(Sqt,"from_pretrained()"),Sqt.forEach(t),DUr=r(Ure," to load the model weights."),Ure.forEach(t),GUr=i(p6),T(z0.$$.fragment,p6),p6.forEach(t),OUr=i(_i),Yr=n(_i,"DIV",{class:!0});var ui=s(Yr);T(A$.$$.fragment,ui),VUr=i(ui),O3e=n(ui,"P",{});var Rqt=s(O3e);XUr=r(Rqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rqt.forEach(t),zUr=i(ui),xn=n(ui,"P",{});var _6=s(xn);WUr=r(_6,"The model class to instantiate is selected based on the "),V3e=n(_6,"CODE",{});var Pqt=s(V3e);QUr=r(Pqt,"model_type"),Pqt.forEach(t),HUr=r(_6,` property of the config object (either
passed as an argument or loaded from `),X3e=n(_6,"CODE",{});var Bqt=s(X3e);UUr=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),JUr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(_6,"CODE",{});var Iqt=s(z3e);YUr=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),KUr=r(_6,":"),_6.forEach(t),ZUr=i(ui),L$=n(ui,"UL",{});var Aze=s(L$);W0=n(Aze,"LI",{});var fGe=s(W0);W3e=n(fGe,"STRONG",{});var Nqt=s(W3e);eJr=r(Nqt,"beit"),Nqt.forEach(t),oJr=r(fGe," \u2014 "),Kee=n(fGe,"A",{href:!0});var qqt=s(Kee);rJr=r(qqt,"FlaxBeitForImageClassification"),qqt.forEach(t),tJr=r(fGe," (BEiT model)"),fGe.forEach(t),aJr=i(Aze),Q0=n(Aze,"LI",{});var mGe=s(Q0);Q3e=n(mGe,"STRONG",{});var jqt=s(Q3e);nJr=r(jqt,"vit"),jqt.forEach(t),sJr=r(mGe," \u2014 "),Zee=n(mGe,"A",{href:!0});var Dqt=s(Zee);lJr=r(Dqt,"FlaxViTForImageClassification"),Dqt.forEach(t),iJr=r(mGe," (ViT model)"),mGe.forEach(t),Aze.forEach(t),dJr=i(ui),T(H0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),uVe=i(f),Tf=n(f,"H2",{class:!0});var Lze=s(Tf);U0=n(Lze,"A",{id:!0,class:!0,href:!0});var Gqt=s(U0);H3e=n(Gqt,"SPAN",{});var Oqt=s(H3e);T(y$.$$.fragment,Oqt),Oqt.forEach(t),Gqt.forEach(t),cJr=i(Lze),U3e=n(Lze,"SPAN",{});var Vqt=s(U3e);fJr=r(Vqt,"FlaxAutoModelForVision2Seq"),Vqt.forEach(t),Lze.forEach(t),bVe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(x$.$$.fragment,bi),mJr=i(bi),Mf=n(bi,"P",{});var Jre=s(Mf);gJr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eoe=n(Jre,"A",{href:!0});var Xqt=s(eoe);hJr=r(Xqt,"from_pretrained()"),Xqt.forEach(t),pJr=r(Jre," class method or the "),ooe=n(Jre,"A",{href:!0});var zqt=s(ooe);_Jr=r(zqt,"from_config()"),zqt.forEach(t),uJr=r(Jre,` class
method.`),Jre.forEach(t),bJr=i(bi),$$=n(bi,"P",{});var yze=s($$);vJr=r(yze,"This class cannot be instantiated directly using "),J3e=n(yze,"CODE",{});var Wqt=s(J3e);FJr=r(Wqt,"__init__()"),Wqt.forEach(t),TJr=r(yze," (throws an error)."),yze.forEach(t),MJr=i(bi),oa=n(bi,"DIV",{class:!0});var u6=s(oa);T(k$.$$.fragment,u6),EJr=i(u6),Y3e=n(u6,"P",{});var Qqt=s(Y3e);CJr=r(Qqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qqt.forEach(t),wJr=i(u6),Ef=n(u6,"P",{});var Yre=s(Ef);AJr=r(Yre,`Note:
Loading a model from its configuration file does `),K3e=n(Yre,"STRONG",{});var Hqt=s(K3e);LJr=r(Hqt,"not"),Hqt.forEach(t),yJr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),roe=n(Yre,"A",{href:!0});var Uqt=s(roe);xJr=r(Uqt,"from_pretrained()"),Uqt.forEach(t),$Jr=r(Yre," to load the model weights."),Yre.forEach(t),kJr=i(u6),T(J0.$$.fragment,u6),u6.forEach(t),SJr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(S$.$$.fragment,vi),RJr=i(vi),Z3e=n(vi,"P",{});var Jqt=s(Z3e);PJr=r(Jqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jqt.forEach(t),BJr=i(vi),$n=n(vi,"P",{});var b6=s($n);IJr=r(b6,"The model class to instantiate is selected based on the "),e0e=n(b6,"CODE",{});var Yqt=s(e0e);NJr=r(Yqt,"model_type"),Yqt.forEach(t),qJr=r(b6,` property of the config object (either
passed as an argument or loaded from `),o0e=n(b6,"CODE",{});var Kqt=s(o0e);jJr=r(Kqt,"pretrained_model_name_or_path"),Kqt.forEach(t),DJr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(b6,"CODE",{});var Zqt=s(r0e);GJr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),OJr=r(b6,":"),b6.forEach(t),VJr=i(vi),t0e=n(vi,"UL",{});var ejt=s(t0e);Y0=n(ejt,"LI",{});var gGe=s(Y0);a0e=n(gGe,"STRONG",{});var ojt=s(a0e);XJr=r(ojt,"vision-encoder-decoder"),ojt.forEach(t),zJr=r(gGe," \u2014 "),toe=n(gGe,"A",{href:!0});var rjt=s(toe);WJr=r(rjt,"FlaxVisionEncoderDecoderModel"),rjt.forEach(t),QJr=r(gGe," (Vision Encoder decoder model)"),gGe.forEach(t),ejt.forEach(t),HJr=i(vi),T(K0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(iGt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(oS,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(rS,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig"),c(tS,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig"),c(aS,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig"),c(nS,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig"),c(sS,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(lS,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig"),c(iS,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(dS,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(cS,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(fS,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig"),c(mS,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig"),c(gS,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig"),c(hS,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig"),c(pS,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig"),c(_S,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig"),c(uS,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig"),c(bS,"href","/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtConfig"),c(vS,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(FS,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(TS,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(MS,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig"),c(ES,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(CS,"href","/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(wS,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig"),c(AS,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig"),c(LS,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig"),c(yS,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRConfig"),c(xS,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTConfig"),c($S,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig"),c(kS,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(SS,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig"),c(RS,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaConfig"),c(PS,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig"),c(BS,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig"),c(IS,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig"),c(NS,"href","/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNConfig"),c(qS,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config"),c(jS,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(DS,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(GS,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig"),c(OS,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig"),c(VS,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig"),c(XS,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(zS,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(WS,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(QS,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(HS,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig"),c(US,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitConfig"),c(JS,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig"),c(YS,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config"),c(KS,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeConfig"),c(ZS,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig"),c(eR,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Config"),c(oR,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig"),c(rR,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(tR,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig"),c(aR,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTConfig"),c(nR,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(sR,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(lR,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config"),c(iR,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig"),c(dR,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config"),c(cR,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(fR,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(mR,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig"),c(gR,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig"),c(hR,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig"),c(pR,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig"),c(_R,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(uR,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(bR,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(vR,"href","/docs/transformers/pr_17799/en/model_doc/rag#transformers.RagConfig"),c(FR,"href","/docs/transformers/pr_17799/en/model_doc/realm#transformers.RealmConfig"),c(TR,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig"),c(MR,"href","/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetConfig"),c(ER,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig"),c(CR,"href","/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetConfig"),c(wR,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertConfig"),c(AR,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig"),c(LR,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig"),c(yR,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig"),c(xR,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig"),c($R,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig"),c(kR,"href","/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(SR,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(RR,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(PR,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig"),c(BR,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(IR,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig"),c(NR,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config"),c(qR,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig"),c(jR,"href","/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(DR,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(GR,"href","/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRConfig"),c(OR,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(VR,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(XR,"href","/docs/transformers/pr_17799/en/model_doc/van#transformers.VanConfig"),c(zR,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltConfig"),c(WR,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(QR,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(HR,"href","/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(UR,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig"),c(JR,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(YR,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(KR,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(ZR,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig"),c(eP,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig"),c(oP,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig"),c(rP,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(tP,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(aP,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(nP,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig"),c(sP,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosConfig"),c(lP,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"id","transformers.AutoTokenizer"),c(Og,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Og,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(iP,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(dP,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizer"),c(cP,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fP,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartTokenizer"),c(mP,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartTokenizerFast"),c(gP,"href","/docs/transformers/pr_17799/en/model_doc/barthez#transformers.BarthezTokenizer"),c(hP,"href","/docs/transformers/pr_17799/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(pP,"href","/docs/transformers/pr_17799/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(_P,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(uP,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(vP,"href","/docs/transformers/pr_17799/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(FP,"href","/docs/transformers/pr_17799/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(TP,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(MP,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(EP,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(CP,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(wP,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(AP,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(LP,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(yP,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(xP,"href","/docs/transformers/pr_17799/en/model_doc/byt5#transformers.ByT5Tokenizer"),c($P,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertTokenizer"),c(kP,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineTokenizer"),c(RP,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPTokenizer"),c(PP,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BP,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(IP,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17799/en/model_doc/cpm#transformers.CpmTokenizer"),c(qP,"href","/docs/transformers/pr_17799/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(jP,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(DP,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GP,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OP,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaTokenizer"),c(VP,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(XP,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(zP,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(WP,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(QP,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(HP,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(UP,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(JP,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraTokenizer"),c(YP,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(KP,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ZP,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetTokenizer"),c(eB,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(oB,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(rB,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelTokenizer"),c(tB,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(aB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iB,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(dB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fB,"href","/docs/transformers/pr_17799/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mB,"href","/docs/transformers/pr_17799/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(gB,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hB,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_B,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(bB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(vB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(FB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(TB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(MB,"href","/docs/transformers/pr_17799/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(EB,"href","/docs/transformers/pr_17799/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CB,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDTokenizer"),c(wB,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDTokenizerFast"),c(AB,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LB,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yB,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Tokenizer"),c(xB,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5TokenizerFast"),c($B,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeTokenizer"),c(kB,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SB,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(PB,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianTokenizer"),c(BB,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartTokenizer"),c(IB,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NB,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qB,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jB,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(DB,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17799/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OB,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VB,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zB,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Tokenizer"),c(QB,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5TokenizerFast"),c(HB,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizer"),c(UB,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JB,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(YB,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(KB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eI,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oI,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rI,"href","/docs/transformers/pr_17799/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tI,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aI,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(sI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(lI,"href","/docs/transformers/pr_17799/en/model_doc/rag#transformers.RagTokenizer"),c(iI,"href","/docs/transformers/pr_17799/en/model_doc/realm#transformers.RealmTokenizer"),c(dI,"href","/docs/transformers/pr_17799/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cI,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fI,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mI,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gI,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hI,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pI,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uI,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bI,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vI,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(FI,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(TI,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(MI,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterTokenizer"),c(EI,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(CI,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wI,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(AI,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Tokenizer"),c(LI,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5TokenizerFast"),c(yI,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasTokenizer"),c(xI,"href","/docs/transformers/pr_17799/en/model_doc/tapex#transformers.TapexTokenizer"),c($I,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(SI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(RI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(II,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qI,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jI,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DI,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMTokenizer"),c(GI,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(OI,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VI,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XI,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zI,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WI,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QI,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HI,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizer"),c(UI,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoFeatureExtractor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(JI,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YI,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rN,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dN,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fN,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mN,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1FeatureExtractor"),c(_N,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xN,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoProcessor"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c($N,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kN,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPProcessor"),c(SN,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(RN,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(PN,"href","/docs/transformers/pr_17799/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(BN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NN,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(qN,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(jN,"href","/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRProcessor"),c(DN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ON,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltProcessor"),c(VN,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(XN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WN,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"id","transformers.AutoModel"),c(yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yp,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(QN,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HN,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UN,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JN,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertModel"),c(YN,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartModel"),c(KN,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitModel"),c(ZN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertModel"),c(eq,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(oq,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdModel"),c(rq,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(tq,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(aq,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(nq,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomModel"),c(sq,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertModel"),c(lq,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineModel"),c(iq,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPModel"),c(dq,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertModel"),c(cq,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextModel"),c(fq,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLModel"),c(mq,"href","/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtModel"),c(gq,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hq,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pq,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(_q,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaModel"),c(uq,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bq,"href","/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(vq,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTModel"),c(Fq,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrModel"),c(Tq,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertModel"),c(Mq,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Eq,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTModel"),c(Cq,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraModel"),c(wq,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertModel"),c(Aq,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaModel"),c(Lq,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetModel"),c(yq,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTModel"),c(xq,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelModel"),c($q,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelBaseModel"),c(kq,"href","/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNModel"),c(Sq,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Model"),c(Rq,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Pq,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Bq,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJModel"),c(Iq,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertModel"),c(Nq,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertModel"),c(qq,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(jq,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Dq,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Gq,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Oq,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDModel"),c(Vq,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitModel"),c(Xq,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerModel"),c(zq,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Model"),c(Wq,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeModel"),c(Qq,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertModel"),c(Hq,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Model"),c(Uq,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianModel"),c(Jq,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Yq,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartModel"),c(Kq,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTModel"),c(Zq,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(ej,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertModel"),c(oj,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Model"),c(rj,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetModel"),c(tj,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Model"),c(aj,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerModel"),c(nj,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(sj,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTModel"),c(lj,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusModel"),c(ij,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverModel"),c(dj,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartModel"),c(cj,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerModel"),c(fj,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(mj,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertModel"),c(gj,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModel"),c(hj,"href","/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetModel"),c(pj,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertModel"),c(_j,"href","/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetModel"),c(uj,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel"),c(bj,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaModel"),c(vj,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerModel"),c(Fj,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerModel"),c(Tj,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWModel"),c(Mj,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDModel"),c(Ej,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Cj,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterModel"),c(wj,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Aj,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinModel"),c(Lj,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Model"),c(yj,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasModel"),c(xj,"href","/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c($j,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kj,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Sj,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Rj,"href","/docs/transformers/pr_17799/en/model_doc/van#transformers.VanModel"),c(Pj,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltModel"),c(Bj,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Ij,"href","/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Nj,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTModel"),c(qj,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(jj,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Dj,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Gj,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMModel"),c(Oj,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMModel"),c(Vj,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMModel"),c(Xj,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(zj,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Wj,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Qj,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetModel"),c(Hj,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosModel"),c(Uj,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($u,"id","transformers.AutoModelForPreTraining"),c($u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($u,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(Jj,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yj,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kj,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zj,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForPreTraining"),c(eD,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForPreTraining"),c(rD,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(tD,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aD,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sD,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lD,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iD,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dD,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForPreTraining"),c(fD,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mD,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaForPreTraining"),c(gD,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForPreTraining"),c(hD,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_D,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uD,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(vD,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(FD,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(TD,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(MD,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(ED,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(CD,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(wD,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel"),c(AD,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(yD,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kD,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SD,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(RD,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(PD,"href","/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(BD,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ID,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(ND,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(qD,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jD,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(DD,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(GD,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E1,"id","transformers.AutoModelForCausalLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(OD,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VD,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XD,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zD,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForCausalLM"),c(WD,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertLMHeadModel"),c(QD,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(HD,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(UD,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(JD,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(YD,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(KD,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM"),c(ZD,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(eG,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oG,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(rG,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForCausalLM"),c(tG,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aG,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(nG,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(sG,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(lG,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianForCausalLM"),c(iG,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForCausalLM"),c(dG,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(cG,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fG,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTForCausalLM"),c(mG,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(gG,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(hG,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(pG,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(_G,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(uG,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(bG,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(vG,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(FG,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(TG,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(MG,"href","/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(EG,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(CG,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(AG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(LG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(yG,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f7,"id","transformers.AutoModelForMaskedLM"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(xG,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($G,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kG,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SG,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(RG,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PG,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMaskedLM"),c(BG,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(IG,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(NG,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jG,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(DG,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(GG,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(OG,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(VG,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(XG,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(zG,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(WG,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(QG,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(HG,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(UG,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeForMaskedLM"),c(JG,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(YG,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(KG,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eO,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(oO,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(rO,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(tO,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(aO,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(nO,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sO,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(lO,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iO,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dO,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cO,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fO,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mO,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.AutoModelForSeq2SeqLM"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(gO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(vO,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(TO,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianMTModel"),c(AO,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b9,"id","transformers.AutoModelForSequenceClassification"),c(b9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b9,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(RO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_b,"id","transformers.AutoModelForMultipleChoice"),c(_b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_b,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c($V,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kV,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SV,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RV,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ub,"id","transformers.AutoModelForNextSentencePrediction"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(iX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(mX,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(gX,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(hX,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(pX,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a2,"id","transformers.AutoModelForTokenClassification"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(_X,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(FX,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForTokenClassification"),c(TX,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(MX,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(EX,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(CX,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForTokenClassification"),c(wX,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(AX,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(LX,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(yX,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(xX,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c($X,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(kX,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(SX,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(RX,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(PX,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(BX,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(IX,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(NX,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(qX,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(jX,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(DX,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(GX,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(OX,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(VX,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(XX,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(zX,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(QX,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(HX,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(UX,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(JX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(YX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(KX,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForQuestionAnswering"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(ez,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uz,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(jz,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Oz,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qv,"id","transformers.AutoModelForImageClassification"),c(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qv,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForImageClassification"),c(Yz,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Kz,"href","/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Zz,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(eW,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassification"),c(oW,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(rW,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(tW,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassification"),c(aW,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(nW,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1ForImageClassification"),c(sW,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(lW,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(iW,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(dW,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(cW,"href","/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(fW,"href","/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(mW,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(gW,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForImageClassification"),c(hW,"href","/docs/transformers/pr_17799/en/model_doc/van#transformers.VanForImageClassification"),c(pW,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForVision2Seq"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForVision2Seq"),c(_d,"class","relative group"),c(_W,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(FW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForAudioClassification"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(CW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForSequenceClassification"),c($W,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForAudioFrameClassification"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(IW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(DW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(GW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(OW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(VW,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForCTC"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(XW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(HW,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForCTC"),c(UW,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTForCTC"),c(JW,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForCTC"),c(YW,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForCTC"),c(KW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(ZW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(eQ,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(oQ,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(rQ,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(tQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sQ,"href","/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(lQ,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForAudioXVector"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(mQ,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(gQ,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(hQ,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(pQ,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForMaskedImageModeling"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vQ,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(FQ,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(TQ,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForObjectDetection"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForObjectDetection"),c(AQ,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForImageSegmentation"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.AutoModelForSemanticSegmentation"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(BQ,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(IQ,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(NQ,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForInstanceSegmentation"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(qQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.TFAutoModel"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertModel"),c(WQ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartModel"),c(QQ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertModel"),c(HQ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(UQ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(JQ,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertModel"),c(YQ,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.TFCLIPModel"),c(KQ,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertModel"),c(ZQ,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextModel"),c(eH,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLModel"),c(oH,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(rH,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaModel"),c(tH,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(aH,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(nH,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(sH,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraModel"),c(lH,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(iH,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelModel"),c(dH,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(cH,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2Model"),c(fH,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJModel"),c(mH,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.TFHubertModel"),c(gH,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(hH,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDModel"),c(pH,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerModel"),c(_H,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertModel"),c(uH,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianModel"),c(bH,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartModel"),c(vH,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(FH,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetModel"),c(TH,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5Model"),c(MH,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(EH,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTModel"),c(CH,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusModel"),c(wH,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertModel"),c(AH,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaModel"),c(LH,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerModel"),c(yH,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(xH,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinModel"),c($H,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5Model"),c(kH,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasModel"),c(SH,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(RH,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTModel"),c(PH,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(BH,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(IH,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMModel"),c(NH,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(qH,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForPreTraining"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(jH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(VH,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zH,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(WH,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QH,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(HH,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(UH,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(JH,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(YH,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KH,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZH,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eU,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oU,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rU,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tU,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aU,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nU,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sU,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lU,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(iU,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dU,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(cU,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForCausalLM"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(fU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(pU,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(_U,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uU,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bU,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(vU,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FU,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(TU,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(MU,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(EU,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(CU,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wU,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AU,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForImageClassification"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(LU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(kU,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(SU,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(RU,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForMaskedLM"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c(PU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(qU,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(jU,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(DU,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(GU,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(OU,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(VU,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(XU,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(zU,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(WU,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(QU,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(HU,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(UU,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(JU,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(YU,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(KU,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rJ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(cJ,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianMTModel"),c(mJ,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForSequenceClassification"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForSequenceClassification"),c(uc,"class","relative group"),c(_J,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c($J,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForMultipleChoice"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(fY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(pY,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForTokenClassification"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(FY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(wY,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(AY,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(LY,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(yY,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(xY,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(kY,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RY,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(PY,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(BY,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(IY,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(NY,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(qY,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(jY,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DY,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(GY,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(OY,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.TFAutoModelForQuestionAnswering"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(oK,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(cK,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.TFAutoModelForVision2Seq"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(_K,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.FlaxAutoModel"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(FK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertModel"),c(CK,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartModel"),c(wK,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitModel"),c(AK,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertModel"),c(LK,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(yK,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(xK,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c($K,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.FlaxCLIPModel"),c(kK,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(SK,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraModel"),c(RK,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(PK,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(BK,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(IK,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(NK,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianModel"),c(qK,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartModel"),c(jK,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5Model"),c(DK,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTModel"),c(GK,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(OK,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(VK,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(XK,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5Model"),c(zK,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(WK,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTModel"),c(QK,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(HK,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(UK,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForCausalLM"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(JK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(eZ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(oZ,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(rZ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(tZ,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aZ,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nZ,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sZ,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(lZ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(iZ,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForPreTraining"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(gZ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hZ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(pZ,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(_Z,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(uZ,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(bZ,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(vZ,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(FZ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TZ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MZ,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(EZ,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(CZ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.FlaxAutoModelForMaskedLM"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(wZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yZ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Z,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(SZ,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(RZ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(PZ,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BZ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IZ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NZ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(qZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(VZ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(zZ,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(QZ,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(YZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ree,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tee,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(aee,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nee,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(see,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lee,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iee,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dee,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(cee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(pee,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(_ee,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(uee,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(bee,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(vee,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Fee,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Tee,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Mee,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.FlaxAutoModelForTokenClassification"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(Eee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aee,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Lee,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(yee,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(xee,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c($ee,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kee,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(See,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Ree,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(Pee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(zee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.FlaxAutoModelForImageClassification"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(Uee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Zee,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.FlaxAutoModelForVision2Seq"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(eoe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ooe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(roe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(toe,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,u),b(f,at,u),e(at,Ti),e(at,Mi),e(Mi,v6),e(at,yf),b(f,Oe,u),b(f,We,u),e(We,Ei),e(We,Sn),e(Sn,F6),e(We,Rn),e(We,Pn),e(Pn,T6),e(We,Ci),e(We,Bn),e(Bn,M6),e(We,wi),b(f,xf,u),M(ya,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,Uk),e(Ae,Ai),e(Ai,Jk),e(Ae,Yk),b(f,Co,u),b(f,xa,u),e(xa,Kk),e(xa,$f),e($f,Zk),e(xa,xze),b(f,hGe,u),b(f,Li,u),e(Li,kf),e(kf,Kre),M(E6,Kre,null),e(Li,$ze),e(Li,Zre),e(Zre,kze),b(f,pGe,u),b(f,In,u),e(In,Sze),e(In,ete),e(ete,Rze),e(In,Pze),e(In,ote),e(ote,Bze),e(In,Ize),b(f,_Ge,u),M(C6,f,u),b(f,uGe,u),b(f,eS,u),e(eS,Nze),b(f,bGe,u),M(Sf,f,u),b(f,vGe,u),b(f,yi,u),e(yi,Rf),e(Rf,rte),M(w6,rte,null),e(yi,qze),e(yi,tte),e(tte,jze),b(f,FGe,u),b(f,wo,u),M(A6,wo,null),e(wo,Dze),e(wo,L6),e(L6,Gze),e(L6,oS),e(oS,Oze),e(L6,Vze),e(wo,Xze),e(wo,y6),e(y6,zze),e(y6,ate),e(ate,Wze),e(y6,Qze),e(wo,Hze),e(wo,wr),M(x6,wr,null),e(wr,Uze),e(wr,nte),e(nte,Jze),e(wr,Yze),e(wr,xi),e(xi,Kze),e(xi,ste),e(ste,Zze),e(xi,eWe),e(xi,lte),e(lte,oWe),e(xi,rWe),e(wr,tWe),e(wr,A),e(A,Pf),e(Pf,ite),e(ite,aWe),e(Pf,nWe),e(Pf,rS),e(rS,sWe),e(Pf,lWe),e(A,iWe),e(A,Bf),e(Bf,dte),e(dte,dWe),e(Bf,cWe),e(Bf,tS),e(tS,fWe),e(Bf,mWe),e(A,gWe),e(A,If),e(If,cte),e(cte,hWe),e(If,pWe),e(If,aS),e(aS,_We),e(If,uWe),e(A,bWe),e(A,Nf),e(Nf,fte),e(fte,vWe),e(Nf,FWe),e(Nf,nS),e(nS,TWe),e(Nf,MWe),e(A,EWe),e(A,qf),e(qf,mte),e(mte,CWe),e(qf,wWe),e(qf,sS),e(sS,AWe),e(qf,LWe),e(A,yWe),e(A,jf),e(jf,gte),e(gte,xWe),e(jf,$We),e(jf,lS),e(lS,kWe),e(jf,SWe),e(A,RWe),e(A,Df),e(Df,hte),e(hte,PWe),e(Df,BWe),e(Df,iS),e(iS,IWe),e(Df,NWe),e(A,qWe),e(A,Gf),e(Gf,pte),e(pte,jWe),e(Gf,DWe),e(Gf,dS),e(dS,GWe),e(Gf,OWe),e(A,VWe),e(A,Of),e(Of,_te),e(_te,XWe),e(Of,zWe),e(Of,cS),e(cS,WWe),e(Of,QWe),e(A,HWe),e(A,Vf),e(Vf,ute),e(ute,UWe),e(Vf,JWe),e(Vf,fS),e(fS,YWe),e(Vf,KWe),e(A,ZWe),e(A,Xf),e(Xf,bte),e(bte,eQe),e(Xf,oQe),e(Xf,mS),e(mS,rQe),e(Xf,tQe),e(A,aQe),e(A,zf),e(zf,vte),e(vte,nQe),e(zf,sQe),e(zf,gS),e(gS,lQe),e(zf,iQe),e(A,dQe),e(A,Wf),e(Wf,Fte),e(Fte,cQe),e(Wf,fQe),e(Wf,hS),e(hS,mQe),e(Wf,gQe),e(A,hQe),e(A,Qf),e(Qf,Tte),e(Tte,pQe),e(Qf,_Qe),e(Qf,pS),e(pS,uQe),e(Qf,bQe),e(A,vQe),e(A,Hf),e(Hf,Mte),e(Mte,FQe),e(Hf,TQe),e(Hf,_S),e(_S,MQe),e(Hf,EQe),e(A,CQe),e(A,Uf),e(Uf,Ete),e(Ete,wQe),e(Uf,AQe),e(Uf,uS),e(uS,LQe),e(Uf,yQe),e(A,xQe),e(A,Jf),e(Jf,Cte),e(Cte,$Qe),e(Jf,kQe),e(Jf,bS),e(bS,SQe),e(Jf,RQe),e(A,PQe),e(A,Yf),e(Yf,wte),e(wte,BQe),e(Yf,IQe),e(Yf,vS),e(vS,NQe),e(Yf,qQe),e(A,jQe),e(A,Kf),e(Kf,Ate),e(Ate,DQe),e(Kf,GQe),e(Kf,FS),e(FS,OQe),e(Kf,VQe),e(A,XQe),e(A,Zf),e(Zf,Lte),e(Lte,zQe),e(Zf,WQe),e(Zf,TS),e(TS,QQe),e(Zf,HQe),e(A,UQe),e(A,em),e(em,yte),e(yte,JQe),e(em,YQe),e(em,MS),e(MS,KQe),e(em,ZQe),e(A,eHe),e(A,om),e(om,xte),e(xte,oHe),e(om,rHe),e(om,ES),e(ES,tHe),e(om,aHe),e(A,nHe),e(A,rm),e(rm,$te),e($te,sHe),e(rm,lHe),e(rm,CS),e(CS,iHe),e(rm,dHe),e(A,cHe),e(A,tm),e(tm,kte),e(kte,fHe),e(tm,mHe),e(tm,wS),e(wS,gHe),e(tm,hHe),e(A,pHe),e(A,am),e(am,Ste),e(Ste,_He),e(am,uHe),e(am,AS),e(AS,bHe),e(am,vHe),e(A,FHe),e(A,nm),e(nm,Rte),e(Rte,THe),e(nm,MHe),e(nm,LS),e(LS,EHe),e(nm,CHe),e(A,wHe),e(A,sm),e(sm,Pte),e(Pte,AHe),e(sm,LHe),e(sm,yS),e(yS,yHe),e(sm,xHe),e(A,$He),e(A,lm),e(lm,Bte),e(Bte,kHe),e(lm,SHe),e(lm,xS),e(xS,RHe),e(lm,PHe),e(A,BHe),e(A,im),e(im,Ite),e(Ite,IHe),e(im,NHe),e(im,$S),e($S,qHe),e(im,jHe),e(A,DHe),e(A,dm),e(dm,Nte),e(Nte,GHe),e(dm,OHe),e(dm,kS),e(kS,VHe),e(dm,XHe),e(A,zHe),e(A,cm),e(cm,qte),e(qte,WHe),e(cm,QHe),e(cm,SS),e(SS,HHe),e(cm,UHe),e(A,JHe),e(A,fm),e(fm,jte),e(jte,YHe),e(fm,KHe),e(fm,RS),e(RS,ZHe),e(fm,eUe),e(A,oUe),e(A,mm),e(mm,Dte),e(Dte,rUe),e(mm,tUe),e(mm,PS),e(PS,aUe),e(mm,nUe),e(A,sUe),e(A,gm),e(gm,Gte),e(Gte,lUe),e(gm,iUe),e(gm,BS),e(BS,dUe),e(gm,cUe),e(A,fUe),e(A,hm),e(hm,Ote),e(Ote,mUe),e(hm,gUe),e(hm,IS),e(IS,hUe),e(hm,pUe),e(A,_Ue),e(A,pm),e(pm,Vte),e(Vte,uUe),e(pm,bUe),e(pm,NS),e(NS,vUe),e(pm,FUe),e(A,TUe),e(A,_m),e(_m,Xte),e(Xte,MUe),e(_m,EUe),e(_m,qS),e(qS,CUe),e(_m,wUe),e(A,AUe),e(A,um),e(um,zte),e(zte,LUe),e(um,yUe),e(um,jS),e(jS,xUe),e(um,$Ue),e(A,kUe),e(A,bm),e(bm,Wte),e(Wte,SUe),e(bm,RUe),e(bm,DS),e(DS,PUe),e(bm,BUe),e(A,IUe),e(A,vm),e(vm,Qte),e(Qte,NUe),e(vm,qUe),e(vm,GS),e(GS,jUe),e(vm,DUe),e(A,GUe),e(A,Fm),e(Fm,Hte),e(Hte,OUe),e(Fm,VUe),e(Fm,OS),e(OS,XUe),e(Fm,zUe),e(A,WUe),e(A,Tm),e(Tm,Ute),e(Ute,QUe),e(Tm,HUe),e(Tm,VS),e(VS,UUe),e(Tm,JUe),e(A,YUe),e(A,Mm),e(Mm,Jte),e(Jte,KUe),e(Mm,ZUe),e(Mm,XS),e(XS,eJe),e(Mm,oJe),e(A,rJe),e(A,Em),e(Em,Yte),e(Yte,tJe),e(Em,aJe),e(Em,zS),e(zS,nJe),e(Em,sJe),e(A,lJe),e(A,Cm),e(Cm,Kte),e(Kte,iJe),e(Cm,dJe),e(Cm,WS),e(WS,cJe),e(Cm,fJe),e(A,mJe),e(A,wm),e(wm,Zte),e(Zte,gJe),e(wm,hJe),e(wm,QS),e(QS,pJe),e(wm,_Je),e(A,uJe),e(A,Am),e(Am,eae),e(eae,bJe),e(Am,vJe),e(Am,HS),e(HS,FJe),e(Am,TJe),e(A,MJe),e(A,Lm),e(Lm,oae),e(oae,EJe),e(Lm,CJe),e(Lm,US),e(US,wJe),e(Lm,AJe),e(A,LJe),e(A,ym),e(ym,rae),e(rae,yJe),e(ym,xJe),e(ym,JS),e(JS,$Je),e(ym,kJe),e(A,SJe),e(A,xm),e(xm,tae),e(tae,RJe),e(xm,PJe),e(xm,YS),e(YS,BJe),e(xm,IJe),e(A,NJe),e(A,$m),e($m,aae),e(aae,qJe),e($m,jJe),e($m,KS),e(KS,DJe),e($m,GJe),e(A,OJe),e(A,km),e(km,nae),e(nae,VJe),e(km,XJe),e(km,ZS),e(ZS,zJe),e(km,WJe),e(A,QJe),e(A,Sm),e(Sm,sae),e(sae,HJe),e(Sm,UJe),e(Sm,eR),e(eR,JJe),e(Sm,YJe),e(A,KJe),e(A,Rm),e(Rm,lae),e(lae,ZJe),e(Rm,eYe),e(Rm,oR),e(oR,oYe),e(Rm,rYe),e(A,tYe),e(A,Pm),e(Pm,iae),e(iae,aYe),e(Pm,nYe),e(Pm,rR),e(rR,sYe),e(Pm,lYe),e(A,iYe),e(A,Bm),e(Bm,dae),e(dae,dYe),e(Bm,cYe),e(Bm,tR),e(tR,fYe),e(Bm,mYe),e(A,gYe),e(A,Im),e(Im,cae),e(cae,hYe),e(Im,pYe),e(Im,aR),e(aR,_Ye),e(Im,uYe),e(A,bYe),e(A,Nm),e(Nm,fae),e(fae,vYe),e(Nm,FYe),e(Nm,nR),e(nR,TYe),e(Nm,MYe),e(A,EYe),e(A,qm),e(qm,mae),e(mae,CYe),e(qm,wYe),e(qm,sR),e(sR,AYe),e(qm,LYe),e(A,yYe),e(A,jm),e(jm,gae),e(gae,xYe),e(jm,$Ye),e(jm,lR),e(lR,kYe),e(jm,SYe),e(A,RYe),e(A,Dm),e(Dm,hae),e(hae,PYe),e(Dm,BYe),e(Dm,iR),e(iR,IYe),e(Dm,NYe),e(A,qYe),e(A,Gm),e(Gm,pae),e(pae,jYe),e(Gm,DYe),e(Gm,dR),e(dR,GYe),e(Gm,OYe),e(A,VYe),e(A,Om),e(Om,_ae),e(_ae,XYe),e(Om,zYe),e(Om,cR),e(cR,WYe),e(Om,QYe),e(A,HYe),e(A,Vm),e(Vm,uae),e(uae,UYe),e(Vm,JYe),e(Vm,fR),e(fR,YYe),e(Vm,KYe),e(A,ZYe),e(A,Xm),e(Xm,bae),e(bae,eKe),e(Xm,oKe),e(Xm,mR),e(mR,rKe),e(Xm,tKe),e(A,aKe),e(A,zm),e(zm,vae),e(vae,nKe),e(zm,sKe),e(zm,gR),e(gR,lKe),e(zm,iKe),e(A,dKe),e(A,Wm),e(Wm,Fae),e(Fae,cKe),e(Wm,fKe),e(Wm,hR),e(hR,mKe),e(Wm,gKe),e(A,hKe),e(A,Qm),e(Qm,Tae),e(Tae,pKe),e(Qm,_Ke),e(Qm,pR),e(pR,uKe),e(Qm,bKe),e(A,vKe),e(A,Hm),e(Hm,Mae),e(Mae,FKe),e(Hm,TKe),e(Hm,_R),e(_R,MKe),e(Hm,EKe),e(A,CKe),e(A,Um),e(Um,Eae),e(Eae,wKe),e(Um,AKe),e(Um,uR),e(uR,LKe),e(Um,yKe),e(A,xKe),e(A,Jm),e(Jm,Cae),e(Cae,$Ke),e(Jm,kKe),e(Jm,bR),e(bR,SKe),e(Jm,RKe),e(A,PKe),e(A,Ym),e(Ym,wae),e(wae,BKe),e(Ym,IKe),e(Ym,vR),e(vR,NKe),e(Ym,qKe),e(A,jKe),e(A,Km),e(Km,Aae),e(Aae,DKe),e(Km,GKe),e(Km,FR),e(FR,OKe),e(Km,VKe),e(A,XKe),e(A,Zm),e(Zm,Lae),e(Lae,zKe),e(Zm,WKe),e(Zm,TR),e(TR,QKe),e(Zm,HKe),e(A,UKe),e(A,eg),e(eg,yae),e(yae,JKe),e(eg,YKe),e(eg,MR),e(MR,KKe),e(eg,ZKe),e(A,eZe),e(A,og),e(og,xae),e(xae,oZe),e(og,rZe),e(og,ER),e(ER,tZe),e(og,aZe),e(A,nZe),e(A,rg),e(rg,$ae),e($ae,sZe),e(rg,lZe),e(rg,CR),e(CR,iZe),e(rg,dZe),e(A,cZe),e(A,tg),e(tg,kae),e(kae,fZe),e(tg,mZe),e(tg,wR),e(wR,gZe),e(tg,hZe),e(A,pZe),e(A,ag),e(ag,Sae),e(Sae,_Ze),e(ag,uZe),e(ag,AR),e(AR,bZe),e(ag,vZe),e(A,FZe),e(A,ng),e(ng,Rae),e(Rae,TZe),e(ng,MZe),e(ng,LR),e(LR,EZe),e(ng,CZe),e(A,wZe),e(A,sg),e(sg,Pae),e(Pae,AZe),e(sg,LZe),e(sg,yR),e(yR,yZe),e(sg,xZe),e(A,$Ze),e(A,lg),e(lg,Bae),e(Bae,kZe),e(lg,SZe),e(lg,xR),e(xR,RZe),e(lg,PZe),e(A,BZe),e(A,ig),e(ig,Iae),e(Iae,IZe),e(ig,NZe),e(ig,$R),e($R,qZe),e(ig,jZe),e(A,DZe),e(A,dg),e(dg,Nae),e(Nae,GZe),e(dg,OZe),e(dg,kR),e(kR,VZe),e(dg,XZe),e(A,zZe),e(A,cg),e(cg,qae),e(qae,WZe),e(cg,QZe),e(cg,SR),e(SR,HZe),e(cg,UZe),e(A,JZe),e(A,fg),e(fg,jae),e(jae,YZe),e(fg,KZe),e(fg,RR),e(RR,ZZe),e(fg,eeo),e(A,oeo),e(A,mg),e(mg,Dae),e(Dae,reo),e(mg,teo),e(mg,PR),e(PR,aeo),e(mg,neo),e(A,seo),e(A,gg),e(gg,Gae),e(Gae,leo),e(gg,ieo),e(gg,BR),e(BR,deo),e(gg,ceo),e(A,feo),e(A,hg),e(hg,Oae),e(Oae,meo),e(hg,geo),e(hg,IR),e(IR,heo),e(hg,peo),e(A,_eo),e(A,pg),e(pg,Vae),e(Vae,ueo),e(pg,beo),e(pg,NR),e(NR,veo),e(pg,Feo),e(A,Teo),e(A,_g),e(_g,Xae),e(Xae,Meo),e(_g,Eeo),e(_g,qR),e(qR,Ceo),e(_g,weo),e(A,Aeo),e(A,ug),e(ug,zae),e(zae,Leo),e(ug,yeo),e(ug,jR),e(jR,xeo),e(ug,$eo),e(A,keo),e(A,bg),e(bg,Wae),e(Wae,Seo),e(bg,Reo),e(bg,DR),e(DR,Peo),e(bg,Beo),e(A,Ieo),e(A,vg),e(vg,Qae),e(Qae,Neo),e(vg,qeo),e(vg,GR),e(GR,jeo),e(vg,Deo),e(A,Geo),e(A,Fg),e(Fg,Hae),e(Hae,Oeo),e(Fg,Veo),e(Fg,OR),e(OR,Xeo),e(Fg,zeo),e(A,Weo),e(A,Tg),e(Tg,Uae),e(Uae,Qeo),e(Tg,Heo),e(Tg,VR),e(VR,Ueo),e(Tg,Jeo),e(A,Yeo),e(A,Mg),e(Mg,Jae),e(Jae,Keo),e(Mg,Zeo),e(Mg,XR),e(XR,eoo),e(Mg,ooo),e(A,roo),e(A,Eg),e(Eg,Yae),e(Yae,too),e(Eg,aoo),e(Eg,zR),e(zR,noo),e(Eg,soo),e(A,loo),e(A,Cg),e(Cg,Kae),e(Kae,ioo),e(Cg,doo),e(Cg,WR),e(WR,coo),e(Cg,foo),e(A,moo),e(A,wg),e(wg,Zae),e(Zae,goo),e(wg,hoo),e(wg,QR),e(QR,poo),e(wg,_oo),e(A,uoo),e(A,Ag),e(Ag,ene),e(ene,boo),e(Ag,voo),e(Ag,HR),e(HR,Foo),e(Ag,Too),e(A,Moo),e(A,Lg),e(Lg,one),e(one,Eoo),e(Lg,Coo),e(Lg,UR),e(UR,woo),e(Lg,Aoo),e(A,Loo),e(A,yg),e(yg,rne),e(rne,yoo),e(yg,xoo),e(yg,JR),e(JR,$oo),e(yg,koo),e(A,Soo),e(A,xg),e(xg,tne),e(tne,Roo),e(xg,Poo),e(xg,YR),e(YR,Boo),e(xg,Ioo),e(A,Noo),e(A,$g),e($g,ane),e(ane,qoo),e($g,joo),e($g,KR),e(KR,Doo),e($g,Goo),e(A,Ooo),e(A,kg),e(kg,nne),e(nne,Voo),e(kg,Xoo),e(kg,ZR),e(ZR,zoo),e(kg,Woo),e(A,Qoo),e(A,Sg),e(Sg,sne),e(sne,Hoo),e(Sg,Uoo),e(Sg,eP),e(eP,Joo),e(Sg,Yoo),e(A,Koo),e(A,Rg),e(Rg,lne),e(lne,Zoo),e(Rg,ero),e(Rg,oP),e(oP,oro),e(Rg,rro),e(A,tro),e(A,Pg),e(Pg,ine),e(ine,aro),e(Pg,nro),e(Pg,rP),e(rP,sro),e(Pg,lro),e(A,iro),e(A,Bg),e(Bg,dne),e(dne,dro),e(Bg,cro),e(Bg,tP),e(tP,fro),e(Bg,mro),e(A,gro),e(A,Ig),e(Ig,cne),e(cne,hro),e(Ig,pro),e(Ig,aP),e(aP,_ro),e(Ig,uro),e(A,bro),e(A,Ng),e(Ng,fne),e(fne,vro),e(Ng,Fro),e(Ng,nP),e(nP,Tro),e(Ng,Mro),e(A,Ero),e(A,qg),e(qg,mne),e(mne,Cro),e(qg,wro),e(qg,sP),e(sP,Aro),e(qg,Lro),e(A,yro),e(A,jg),e(jg,gne),e(gne,xro),e(jg,$ro),e(jg,lP),e(lP,kro),e(jg,Sro),e(wr,Rro),M(Dg,wr,null),e(wo,Pro),e(wo,Gg),M($6,Gg,null),e(Gg,Bro),e(Gg,hne),e(hne,Iro),b(f,TGe,u),b(f,$i,u),e($i,Og),e(Og,pne),M(k6,pne,null),e($i,Nro),e($i,_ne),e(_ne,qro),b(f,MGe,u),b(f,Ao,u),M(S6,Ao,null),e(Ao,jro),e(Ao,R6),e(R6,Dro),e(R6,iP),e(iP,Gro),e(R6,Oro),e(Ao,Vro),e(Ao,P6),e(P6,Xro),e(P6,une),e(une,zro),e(P6,Wro),e(Ao,Qro),e(Ao,Ar),M(B6,Ar,null),e(Ar,Hro),e(Ar,bne),e(bne,Uro),e(Ar,Jro),e(Ar,$a),e($a,Yro),e($a,vne),e(vne,Kro),e($a,Zro),e($a,Fne),e(Fne,eto),e($a,oto),e($a,Tne),e(Tne,rto),e($a,tto),e(Ar,ato),e(Ar,k),e(k,Nn),e(Nn,Mne),e(Mne,nto),e(Nn,sto),e(Nn,dP),e(dP,lto),e(Nn,ito),e(Nn,cP),e(cP,dto),e(Nn,cto),e(k,fto),e(k,qn),e(qn,Ene),e(Ene,mto),e(qn,gto),e(qn,fP),e(fP,hto),e(qn,pto),e(qn,mP),e(mP,_to),e(qn,uto),e(k,bto),e(k,jn),e(jn,Cne),e(Cne,vto),e(jn,Fto),e(jn,gP),e(gP,Tto),e(jn,Mto),e(jn,hP),e(hP,Eto),e(jn,Cto),e(k,wto),e(k,Vg),e(Vg,wne),e(wne,Ato),e(Vg,Lto),e(Vg,pP),e(pP,yto),e(Vg,xto),e(k,$to),e(k,Dn),e(Dn,Ane),e(Ane,kto),e(Dn,Sto),e(Dn,_P),e(_P,Rto),e(Dn,Pto),e(Dn,uP),e(uP,Bto),e(Dn,Ito),e(k,Nto),e(k,Xg),e(Xg,Lne),e(Lne,qto),e(Xg,jto),e(Xg,bP),e(bP,Dto),e(Xg,Gto),e(k,Oto),e(k,zg),e(zg,yne),e(yne,Vto),e(zg,Xto),e(zg,vP),e(vP,zto),e(zg,Wto),e(k,Qto),e(k,Wg),e(Wg,xne),e(xne,Hto),e(Wg,Uto),e(Wg,FP),e(FP,Jto),e(Wg,Yto),e(k,Kto),e(k,Gn),e(Gn,$ne),e($ne,Zto),e(Gn,eao),e(Gn,TP),e(TP,oao),e(Gn,rao),e(Gn,MP),e(MP,tao),e(Gn,aao),e(k,nao),e(k,On),e(On,kne),e(kne,sao),e(On,lao),e(On,EP),e(EP,iao),e(On,dao),e(On,CP),e(CP,cao),e(On,fao),e(k,mao),e(k,Vn),e(Vn,Sne),e(Sne,gao),e(Vn,hao),e(Vn,wP),e(wP,pao),e(Vn,_ao),e(Vn,AP),e(AP,uao),e(Vn,bao),e(k,vao),e(k,Qg),e(Qg,Rne),e(Rne,Fao),e(Qg,Tao),e(Qg,LP),e(LP,Mao),e(Qg,Eao),e(k,Cao),e(k,Hg),e(Hg,Pne),e(Pne,wao),e(Hg,Aao),e(Hg,yP),e(yP,Lao),e(Hg,yao),e(k,xao),e(k,Ug),e(Ug,Bne),e(Bne,$ao),e(Ug,kao),e(Ug,xP),e(xP,Sao),e(Ug,Rao),e(k,Pao),e(k,Xn),e(Xn,Ine),e(Ine,Bao),e(Xn,Iao),e(Xn,$P),e($P,Nao),e(Xn,qao),e(Xn,kP),e(kP,jao),e(Xn,Dao),e(k,Gao),e(k,Jg),e(Jg,Nne),e(Nne,Oao),e(Jg,Vao),e(Jg,SP),e(SP,Xao),e(Jg,zao),e(k,Wao),e(k,zn),e(zn,qne),e(qne,Qao),e(zn,Hao),e(zn,RP),e(RP,Uao),e(zn,Jao),e(zn,PP),e(PP,Yao),e(zn,Kao),e(k,Zao),e(k,Wn),e(Wn,jne),e(jne,eno),e(Wn,ono),e(Wn,BP),e(BP,rno),e(Wn,tno),e(Wn,IP),e(IP,ano),e(Wn,nno),e(k,sno),e(k,Qn),e(Qn,Dne),e(Dne,lno),e(Qn,ino),e(Qn,NP),e(NP,dno),e(Qn,cno),e(Qn,qP),e(qP,fno),e(Qn,mno),e(k,gno),e(k,Yg),e(Yg,Gne),e(Gne,hno),e(Yg,pno),e(Yg,jP),e(jP,_no),e(Yg,uno),e(k,bno),e(k,Hn),e(Hn,One),e(One,vno),e(Hn,Fno),e(Hn,DP),e(DP,Tno),e(Hn,Mno),e(Hn,GP),e(GP,Eno),e(Hn,Cno),e(k,wno),e(k,Un),e(Un,Vne),e(Vne,Ano),e(Un,Lno),e(Un,OP),e(OP,yno),e(Un,xno),e(Un,VP),e(VP,$no),e(Un,kno),e(k,Sno),e(k,Jn),e(Jn,Xne),e(Xne,Rno),e(Jn,Pno),e(Jn,XP),e(XP,Bno),e(Jn,Ino),e(Jn,zP),e(zP,Nno),e(Jn,qno),e(k,jno),e(k,Yn),e(Yn,zne),e(zne,Dno),e(Yn,Gno),e(Yn,WP),e(WP,Ono),e(Yn,Vno),e(Yn,QP),e(QP,Xno),e(Yn,zno),e(k,Wno),e(k,Kn),e(Kn,Wne),e(Wne,Qno),e(Kn,Hno),e(Kn,HP),e(HP,Uno),e(Kn,Jno),e(Kn,UP),e(UP,Yno),e(Kn,Kno),e(k,Zno),e(k,Zn),e(Zn,Qne),e(Qne,eso),e(Zn,oso),e(Zn,JP),e(JP,rso),e(Zn,tso),e(Zn,YP),e(YP,aso),e(Zn,nso),e(k,sso),e(k,Kg),e(Kg,Hne),e(Hne,lso),e(Kg,iso),e(Kg,KP),e(KP,dso),e(Kg,cso),e(k,fso),e(k,es),e(es,Une),e(Une,mso),e(es,gso),e(es,ZP),e(ZP,hso),e(es,pso),e(es,eB),e(eB,_so),e(es,uso),e(k,bso),e(k,Zg),e(Zg,Jne),e(Jne,vso),e(Zg,Fso),e(Zg,oB),e(oB,Tso),e(Zg,Mso),e(k,Eso),e(k,os),e(os,Yne),e(Yne,Cso),e(os,wso),e(os,rB),e(rB,Aso),e(os,Lso),e(os,tB),e(tB,yso),e(os,xso),e(k,$so),e(k,rs),e(rs,Kne),e(Kne,kso),e(rs,Sso),e(rs,aB),e(aB,Rso),e(rs,Pso),e(rs,nB),e(nB,Bso),e(rs,Iso),e(k,Nso),e(k,ts),e(ts,Zne),e(Zne,qso),e(ts,jso),e(ts,sB),e(sB,Dso),e(ts,Gso),e(ts,lB),e(lB,Oso),e(ts,Vso),e(k,Xso),e(k,eh),e(eh,ese),e(ese,zso),e(eh,Wso),e(eh,iB),e(iB,Qso),e(eh,Hso),e(k,Uso),e(k,as),e(as,ose),e(ose,Jso),e(as,Yso),e(as,dB),e(dB,Kso),e(as,Zso),e(as,cB),e(cB,elo),e(as,olo),e(k,rlo),e(k,ns),e(ns,rse),e(rse,tlo),e(ns,alo),e(ns,fB),e(fB,nlo),e(ns,slo),e(ns,mB),e(mB,llo),e(ns,ilo),e(k,dlo),e(k,oh),e(oh,tse),e(tse,clo),e(oh,flo),e(oh,gB),e(gB,mlo),e(oh,glo),e(k,hlo),e(k,ss),e(ss,ase),e(ase,plo),e(ss,_lo),e(ss,hB),e(hB,ulo),e(ss,blo),e(ss,pB),e(pB,vlo),e(ss,Flo),e(k,Tlo),e(k,ls),e(ls,nse),e(nse,Mlo),e(ls,Elo),e(ls,_B),e(_B,Clo),e(ls,wlo),e(ls,uB),e(uB,Alo),e(ls,Llo),e(k,ylo),e(k,is),e(is,sse),e(sse,xlo),e(is,$lo),e(is,bB),e(bB,klo),e(is,Slo),e(is,vB),e(vB,Rlo),e(is,Plo),e(k,Blo),e(k,ds),e(ds,lse),e(lse,Ilo),e(ds,Nlo),e(ds,FB),e(FB,qlo),e(ds,jlo),e(ds,TB),e(TB,Dlo),e(ds,Glo),e(k,Olo),e(k,cs),e(cs,ise),e(ise,Vlo),e(cs,Xlo),e(cs,MB),e(MB,zlo),e(cs,Wlo),e(cs,EB),e(EB,Qlo),e(cs,Hlo),e(k,Ulo),e(k,fs),e(fs,dse),e(dse,Jlo),e(fs,Ylo),e(fs,CB),e(CB,Klo),e(fs,Zlo),e(fs,wB),e(wB,eio),e(fs,oio),e(k,rio),e(k,ms),e(ms,cse),e(cse,tio),e(ms,aio),e(ms,AB),e(AB,nio),e(ms,sio),e(ms,LB),e(LB,lio),e(ms,iio),e(k,dio),e(k,gs),e(gs,fse),e(fse,cio),e(gs,fio),e(gs,yB),e(yB,mio),e(gs,gio),e(gs,xB),e(xB,hio),e(gs,pio),e(k,_io),e(k,rh),e(rh,mse),e(mse,uio),e(rh,bio),e(rh,$B),e($B,vio),e(rh,Fio),e(k,Tio),e(k,hs),e(hs,gse),e(gse,Mio),e(hs,Eio),e(hs,kB),e(kB,Cio),e(hs,wio),e(hs,SB),e(SB,Aio),e(hs,Lio),e(k,yio),e(k,th),e(th,hse),e(hse,xio),e(th,$io),e(th,RB),e(RB,kio),e(th,Sio),e(k,Rio),e(k,ah),e(ah,pse),e(pse,Pio),e(ah,Bio),e(ah,PB),e(PB,Iio),e(ah,Nio),e(k,qio),e(k,ps),e(ps,_se),e(_se,jio),e(ps,Dio),e(ps,BB),e(BB,Gio),e(ps,Oio),e(ps,IB),e(IB,Vio),e(ps,Xio),e(k,zio),e(k,_s),e(_s,use),e(use,Wio),e(_s,Qio),e(_s,NB),e(NB,Hio),e(_s,Uio),e(_s,qB),e(qB,Jio),e(_s,Yio),e(k,Kio),e(k,us),e(us,bse),e(bse,Zio),e(us,edo),e(us,jB),e(jB,odo),e(us,rdo),e(us,DB),e(DB,tdo),e(us,ado),e(k,ndo),e(k,nh),e(nh,vse),e(vse,sdo),e(nh,ldo),e(nh,GB),e(GB,ido),e(nh,ddo),e(k,cdo),e(k,bs),e(bs,Fse),e(Fse,fdo),e(bs,mdo),e(bs,OB),e(OB,gdo),e(bs,hdo),e(bs,VB),e(VB,pdo),e(bs,_do),e(k,udo),e(k,vs),e(vs,Tse),e(Tse,bdo),e(vs,vdo),e(vs,XB),e(XB,Fdo),e(vs,Tdo),e(vs,zB),e(zB,Mdo),e(vs,Edo),e(k,Cdo),e(k,Fs),e(Fs,Mse),e(Mse,wdo),e(Fs,Ado),e(Fs,WB),e(WB,Ldo),e(Fs,ydo),e(Fs,QB),e(QB,xdo),e(Fs,$do),e(k,kdo),e(k,Ts),e(Ts,Ese),e(Ese,Sdo),e(Ts,Rdo),e(Ts,HB),e(HB,Pdo),e(Ts,Bdo),e(Ts,UB),e(UB,Ido),e(Ts,Ndo),e(k,qdo),e(k,Ms),e(Ms,Cse),e(Cse,jdo),e(Ms,Ddo),e(Ms,JB),e(JB,Gdo),e(Ms,Odo),e(Ms,YB),e(YB,Vdo),e(Ms,Xdo),e(k,zdo),e(k,sh),e(sh,wse),e(wse,Wdo),e(sh,Qdo),e(sh,KB),e(KB,Hdo),e(sh,Udo),e(k,Jdo),e(k,Es),e(Es,Ase),e(Ase,Ydo),e(Es,Kdo),e(Es,ZB),e(ZB,Zdo),e(Es,eco),e(Es,eI),e(eI,oco),e(Es,rco),e(k,tco),e(k,lh),e(lh,Lse),e(Lse,aco),e(lh,nco),e(lh,oI),e(oI,sco),e(lh,lco),e(k,ico),e(k,ih),e(ih,yse),e(yse,dco),e(ih,cco),e(ih,rI),e(rI,fco),e(ih,mco),e(k,gco),e(k,dh),e(dh,xse),e(xse,hco),e(dh,pco),e(dh,tI),e(tI,_co),e(dh,uco),e(k,bco),e(k,ch),e(ch,$se),e($se,vco),e(ch,Fco),e(ch,aI),e(aI,Tco),e(ch,Mco),e(k,Eco),e(k,Cs),e(Cs,kse),e(kse,Cco),e(Cs,wco),e(Cs,nI),e(nI,Aco),e(Cs,Lco),e(Cs,sI),e(sI,yco),e(Cs,xco),e(k,$co),e(k,fh),e(fh,Sse),e(Sse,kco),e(fh,Sco),e(fh,lI),e(lI,Rco),e(fh,Pco),e(k,Bco),e(k,ws),e(ws,Rse),e(Rse,Ico),e(ws,Nco),e(ws,iI),e(iI,qco),e(ws,jco),e(ws,dI),e(dI,Dco),e(ws,Gco),e(k,Oco),e(k,As),e(As,Pse),e(Pse,Vco),e(As,Xco),e(As,cI),e(cI,zco),e(As,Wco),e(As,fI),e(fI,Qco),e(As,Hco),e(k,Uco),e(k,Ls),e(Ls,Bse),e(Bse,Jco),e(Ls,Yco),e(Ls,mI),e(mI,Kco),e(Ls,Zco),e(Ls,gI),e(gI,efo),e(Ls,ofo),e(k,rfo),e(k,ys),e(ys,Ise),e(Ise,tfo),e(ys,afo),e(ys,hI),e(hI,nfo),e(ys,sfo),e(ys,pI),e(pI,lfo),e(ys,ifo),e(k,dfo),e(k,xs),e(xs,Nse),e(Nse,cfo),e(xs,ffo),e(xs,_I),e(_I,mfo),e(xs,gfo),e(xs,uI),e(uI,hfo),e(xs,pfo),e(k,_fo),e(k,$s),e($s,qse),e(qse,ufo),e($s,bfo),e($s,bI),e(bI,vfo),e($s,Ffo),e($s,vI),e(vI,Tfo),e($s,Mfo),e(k,Efo),e(k,mh),e(mh,jse),e(jse,Cfo),e(mh,wfo),e(mh,FI),e(FI,Afo),e(mh,Lfo),e(k,yfo),e(k,gh),e(gh,Dse),e(Dse,xfo),e(gh,$fo),e(gh,TI),e(TI,kfo),e(gh,Sfo),e(k,Rfo),e(k,ks),e(ks,Gse),e(Gse,Pfo),e(ks,Bfo),e(ks,MI),e(MI,Ifo),e(ks,Nfo),e(ks,EI),e(EI,qfo),e(ks,jfo),e(k,Dfo),e(k,Ss),e(Ss,Ose),e(Ose,Gfo),e(Ss,Ofo),e(Ss,CI),e(CI,Vfo),e(Ss,Xfo),e(Ss,wI),e(wI,zfo),e(Ss,Wfo),e(k,Qfo),e(k,Rs),e(Rs,Vse),e(Vse,Hfo),e(Rs,Ufo),e(Rs,AI),e(AI,Jfo),e(Rs,Yfo),e(Rs,LI),e(LI,Kfo),e(Rs,Zfo),e(k,emo),e(k,hh),e(hh,Xse),e(Xse,omo),e(hh,rmo),e(hh,yI),e(yI,tmo),e(hh,amo),e(k,nmo),e(k,ph),e(ph,zse),e(zse,smo),e(ph,lmo),e(ph,xI),e(xI,imo),e(ph,dmo),e(k,cmo),e(k,_h),e(_h,Wse),e(Wse,fmo),e(_h,mmo),e(_h,$I),e($I,gmo),e(_h,hmo),e(k,pmo),e(k,Ps),e(Ps,Qse),e(Qse,_mo),e(Ps,umo),e(Ps,kI),e(kI,bmo),e(Ps,vmo),e(Ps,SI),e(SI,Fmo),e(Ps,Tmo),e(k,Mmo),e(k,Bs),e(Bs,Hse),e(Hse,Emo),e(Bs,Cmo),e(Bs,RI),e(RI,wmo),e(Bs,Amo),e(Bs,PI),e(PI,Lmo),e(Bs,ymo),e(k,xmo),e(k,uh),e(uh,Use),e(Use,$mo),e(uh,kmo),e(uh,BI),e(BI,Smo),e(uh,Rmo),e(k,Pmo),e(k,bh),e(bh,Jse),e(Jse,Bmo),e(bh,Imo),e(bh,II),e(II,Nmo),e(bh,qmo),e(k,jmo),e(k,vh),e(vh,Yse),e(Yse,Dmo),e(vh,Gmo),e(vh,NI),e(NI,Omo),e(vh,Vmo),e(k,Xmo),e(k,Is),e(Is,Kse),e(Kse,zmo),e(Is,Wmo),e(Is,qI),e(qI,Qmo),e(Is,Hmo),e(Is,jI),e(jI,Umo),e(Is,Jmo),e(k,Ymo),e(k,Fh),e(Fh,Zse),e(Zse,Kmo),e(Fh,Zmo),e(Fh,DI),e(DI,ego),e(Fh,ogo),e(k,rgo),e(k,Th),e(Th,ele),e(ele,tgo),e(Th,ago),e(Th,GI),e(GI,ngo),e(Th,sgo),e(k,lgo),e(k,Ns),e(Ns,ole),e(ole,igo),e(Ns,dgo),e(Ns,OI),e(OI,cgo),e(Ns,fgo),e(Ns,VI),e(VI,mgo),e(Ns,ggo),e(k,hgo),e(k,qs),e(qs,rle),e(rle,pgo),e(qs,_go),e(qs,XI),e(XI,ugo),e(qs,bgo),e(qs,zI),e(zI,vgo),e(qs,Fgo),e(k,Tgo),e(k,js),e(js,tle),e(tle,Mgo),e(js,Ego),e(js,WI),e(WI,Cgo),e(js,wgo),e(js,QI),e(QI,Ago),e(js,Lgo),e(k,ygo),e(k,Ds),e(Ds,ale),e(ale,xgo),e(Ds,$go),e(Ds,HI),e(HI,kgo),e(Ds,Sgo),e(Ds,UI),e(UI,Rgo),e(Ds,Pgo),e(Ar,Bgo),M(Mh,Ar,null),e(Ao,Igo),e(Ao,Eh),M(I6,Eh,null),e(Eh,Ngo),e(Eh,nle),e(nle,qgo),b(f,EGe,u),b(f,ki,u),e(ki,Ch),e(Ch,sle),M(N6,sle,null),e(ki,jgo),e(ki,lle),e(lle,Dgo),b(f,CGe,u),b(f,Lo,u),M(q6,Lo,null),e(Lo,Ggo),e(Lo,j6),e(j6,Ogo),e(j6,JI),e(JI,Vgo),e(j6,Xgo),e(Lo,zgo),e(Lo,D6),e(D6,Wgo),e(D6,ile),e(ile,Qgo),e(D6,Hgo),e(Lo,Ugo),e(Lo,He),M(G6,He,null),e(He,Jgo),e(He,dle),e(dle,Ygo),e(He,Kgo),e(He,ka),e(ka,Zgo),e(ka,cle),e(cle,eho),e(ka,oho),e(ka,fle),e(fle,rho),e(ka,tho),e(ka,mle),e(mle,aho),e(ka,nho),e(He,sho),e(He,Y),e(Y,wh),e(wh,gle),e(gle,lho),e(wh,iho),e(wh,YI),e(YI,dho),e(wh,cho),e(Y,fho),e(Y,Ah),e(Ah,hle),e(hle,mho),e(Ah,gho),e(Ah,KI),e(KI,hho),e(Ah,pho),e(Y,_ho),e(Y,Lh),e(Lh,ple),e(ple,uho),e(Lh,bho),e(Lh,ZI),e(ZI,vho),e(Lh,Fho),e(Y,Tho),e(Y,yh),e(yh,_le),e(_le,Mho),e(yh,Eho),e(yh,eN),e(eN,Cho),e(yh,who),e(Y,Aho),e(Y,xh),e(xh,ule),e(ule,Lho),e(xh,yho),e(xh,oN),e(oN,xho),e(xh,$ho),e(Y,kho),e(Y,$h),e($h,ble),e(ble,Sho),e($h,Rho),e($h,rN),e(rN,Pho),e($h,Bho),e(Y,Iho),e(Y,kh),e(kh,vle),e(vle,Nho),e(kh,qho),e(kh,tN),e(tN,jho),e(kh,Dho),e(Y,Gho),e(Y,Sh),e(Sh,Fle),e(Fle,Oho),e(Sh,Vho),e(Sh,aN),e(aN,Xho),e(Sh,zho),e(Y,Who),e(Y,Rh),e(Rh,Tle),e(Tle,Qho),e(Rh,Hho),e(Rh,nN),e(nN,Uho),e(Rh,Jho),e(Y,Yho),e(Y,Ph),e(Ph,Mle),e(Mle,Kho),e(Ph,Zho),e(Ph,sN),e(sN,epo),e(Ph,opo),e(Y,rpo),e(Y,Bh),e(Bh,Ele),e(Ele,tpo),e(Bh,apo),e(Bh,lN),e(lN,npo),e(Bh,spo),e(Y,lpo),e(Y,Ih),e(Ih,Cle),e(Cle,ipo),e(Ih,dpo),e(Ih,iN),e(iN,cpo),e(Ih,fpo),e(Y,mpo),e(Y,Nh),e(Nh,wle),e(wle,gpo),e(Nh,hpo),e(Nh,dN),e(dN,ppo),e(Nh,_po),e(Y,upo),e(Y,qh),e(qh,Ale),e(Ale,bpo),e(qh,vpo),e(qh,cN),e(cN,Fpo),e(qh,Tpo),e(Y,Mpo),e(Y,jh),e(jh,Lle),e(Lle,Epo),e(jh,Cpo),e(jh,fN),e(fN,wpo),e(jh,Apo),e(Y,Lpo),e(Y,Dh),e(Dh,yle),e(yle,ypo),e(Dh,xpo),e(Dh,mN),e(mN,$po),e(Dh,kpo),e(Y,Spo),e(Y,Gh),e(Gh,xle),e(xle,Rpo),e(Gh,Ppo),e(Gh,gN),e(gN,Bpo),e(Gh,Ipo),e(Y,Npo),e(Y,Oh),e(Oh,$le),e($le,qpo),e(Oh,jpo),e(Oh,hN),e(hN,Dpo),e(Oh,Gpo),e(Y,Opo),e(Y,Vh),e(Vh,kle),e(kle,Vpo),e(Vh,Xpo),e(Vh,pN),e(pN,zpo),e(Vh,Wpo),e(Y,Qpo),e(Y,Xh),e(Xh,Sle),e(Sle,Hpo),e(Xh,Upo),e(Xh,_N),e(_N,Jpo),e(Xh,Ypo),e(Y,Kpo),e(Y,zh),e(zh,Rle),e(Rle,Zpo),e(zh,e_o),e(zh,uN),e(uN,o_o),e(zh,r_o),e(Y,t_o),e(Y,Wh),e(Wh,Ple),e(Ple,a_o),e(Wh,n_o),e(Wh,bN),e(bN,s_o),e(Wh,l_o),e(Y,i_o),e(Y,Qh),e(Qh,Ble),e(Ble,d_o),e(Qh,c_o),e(Qh,vN),e(vN,f_o),e(Qh,m_o),e(Y,g_o),e(Y,Hh),e(Hh,Ile),e(Ile,h_o),e(Hh,p_o),e(Hh,FN),e(FN,__o),e(Hh,u_o),e(Y,b_o),e(Y,Uh),e(Uh,Nle),e(Nle,v_o),e(Uh,F_o),e(Uh,TN),e(TN,T_o),e(Uh,M_o),e(Y,E_o),e(Y,Jh),e(Jh,qle),e(qle,C_o),e(Jh,w_o),e(Jh,MN),e(MN,A_o),e(Jh,L_o),e(Y,y_o),e(Y,Yh),e(Yh,jle),e(jle,x_o),e(Yh,$_o),e(Yh,EN),e(EN,k_o),e(Yh,S_o),e(Y,R_o),e(Y,Kh),e(Kh,Dle),e(Dle,P_o),e(Kh,B_o),e(Kh,CN),e(CN,I_o),e(Kh,N_o),e(Y,q_o),e(Y,Zh),e(Zh,Gle),e(Gle,j_o),e(Zh,D_o),e(Zh,wN),e(wN,G_o),e(Zh,O_o),e(Y,V_o),e(Y,ep),e(ep,Ole),e(Ole,X_o),e(ep,z_o),e(ep,AN),e(AN,W_o),e(ep,Q_o),e(Y,H_o),e(Y,op),e(op,Vle),e(Vle,U_o),e(op,J_o),e(op,LN),e(LN,Y_o),e(op,K_o),e(Y,Z_o),e(Y,rp),e(rp,Xle),e(Xle,euo),e(rp,ouo),e(rp,yN),e(yN,ruo),e(rp,tuo),e(Y,auo),e(Y,tp),e(tp,zle),e(zle,nuo),e(tp,suo),e(tp,xN),e(xN,luo),e(tp,iuo),e(He,duo),M(ap,He,null),e(He,cuo),M(np,He,null),e(Lo,fuo),e(Lo,sp),M(O6,sp,null),e(sp,muo),e(sp,Wle),e(Wle,guo),b(f,wGe,u),b(f,Si,u),e(Si,lp),e(lp,Qle),M(V6,Qle,null),e(Si,huo),e(Si,Hle),e(Hle,puo),b(f,AGe,u),b(f,yo,u),M(X6,yo,null),e(yo,_uo),e(yo,z6),e(z6,uuo),e(z6,$N),e($N,buo),e(z6,vuo),e(yo,Fuo),e(yo,W6),e(W6,Tuo),e(W6,Ule),e(Ule,Muo),e(W6,Euo),e(yo,Cuo),e(yo,Ue),M(Q6,Ue,null),e(Ue,wuo),e(Ue,Jle),e(Jle,Auo),e(Ue,Luo),e(Ue,Ri),e(Ri,yuo),e(Ri,Yle),e(Yle,xuo),e(Ri,$uo),e(Ri,Kle),e(Kle,kuo),e(Ri,Suo),e(Ue,Ruo),e(Ue,he),e(he,ip),e(ip,Zle),e(Zle,Puo),e(ip,Buo),e(ip,kN),e(kN,Iuo),e(ip,Nuo),e(he,quo),e(he,dp),e(dp,eie),e(eie,juo),e(dp,Duo),e(dp,oie),e(oie,Guo),e(dp,Ouo),e(he,Vuo),e(he,cp),e(cp,rie),e(rie,Xuo),e(cp,zuo),e(cp,SN),e(SN,Wuo),e(cp,Quo),e(he,Huo),e(he,fp),e(fp,tie),e(tie,Uuo),e(fp,Juo),e(fp,RN),e(RN,Yuo),e(fp,Kuo),e(he,Zuo),e(he,mp),e(mp,aie),e(aie,e1o),e(mp,o1o),e(mp,PN),e(PN,r1o),e(mp,t1o),e(he,a1o),e(he,gp),e(gp,nie),e(nie,n1o),e(gp,s1o),e(gp,BN),e(BN,l1o),e(gp,i1o),e(he,d1o),e(he,hp),e(hp,sie),e(sie,c1o),e(hp,f1o),e(hp,IN),e(IN,m1o),e(hp,g1o),e(he,h1o),e(he,pp),e(pp,lie),e(lie,p1o),e(pp,_1o),e(pp,NN),e(NN,u1o),e(pp,b1o),e(he,v1o),e(he,_p),e(_p,iie),e(iie,F1o),e(_p,T1o),e(_p,qN),e(qN,M1o),e(_p,E1o),e(he,C1o),e(he,up),e(up,die),e(die,w1o),e(up,A1o),e(up,jN),e(jN,L1o),e(up,y1o),e(he,x1o),e(he,bp),e(bp,cie),e(cie,$1o),e(bp,k1o),e(bp,DN),e(DN,S1o),e(bp,R1o),e(he,P1o),e(he,vp),e(vp,fie),e(fie,B1o),e(vp,I1o),e(vp,GN),e(GN,N1o),e(vp,q1o),e(he,j1o),e(he,Fp),e(Fp,mie),e(mie,D1o),e(Fp,G1o),e(Fp,ON),e(ON,O1o),e(Fp,V1o),e(he,X1o),e(he,Tp),e(Tp,gie),e(gie,z1o),e(Tp,W1o),e(Tp,VN),e(VN,Q1o),e(Tp,H1o),e(he,U1o),e(he,Mp),e(Mp,hie),e(hie,J1o),e(Mp,Y1o),e(Mp,XN),e(XN,K1o),e(Mp,Z1o),e(he,e7o),e(he,Ep),e(Ep,pie),e(pie,o7o),e(Ep,r7o),e(Ep,zN),e(zN,t7o),e(Ep,a7o),e(he,n7o),e(he,Cp),e(Cp,_ie),e(_ie,s7o),e(Cp,l7o),e(Cp,WN),e(WN,i7o),e(Cp,d7o),e(Ue,c7o),M(wp,Ue,null),e(Ue,f7o),M(Ap,Ue,null),e(yo,m7o),e(yo,Lp),M(H6,Lp,null),e(Lp,g7o),e(Lp,uie),e(uie,h7o),b(f,LGe,u),b(f,Pi,u),e(Pi,yp),e(yp,bie),M(U6,bie,null),e(Pi,p7o),e(Pi,vie),e(vie,_7o),b(f,yGe,u),b(f,xo,u),M(J6,xo,null),e(xo,u7o),e(xo,Bi),e(Bi,b7o),e(Bi,QN),e(QN,v7o),e(Bi,F7o),e(Bi,HN),e(HN,T7o),e(Bi,M7o),e(xo,E7o),e(xo,Y6),e(Y6,C7o),e(Y6,Fie),e(Fie,w7o),e(Y6,A7o),e(xo,L7o),e(xo,nt),M(K6,nt,null),e(nt,y7o),e(nt,Tie),e(Tie,x7o),e(nt,$7o),e(nt,Ii),e(Ii,k7o),e(Ii,Mie),e(Mie,S7o),e(Ii,R7o),e(Ii,UN),e(UN,P7o),e(Ii,B7o),e(nt,I7o),M(xp,nt,null),e(xo,N7o),e(xo,Je),M(Z6,Je,null),e(Je,q7o),e(Je,Eie),e(Eie,j7o),e(Je,D7o),e(Je,Sa),e(Sa,G7o),e(Sa,Cie),e(Cie,O7o),e(Sa,V7o),e(Sa,wie),e(wie,X7o),e(Sa,z7o),e(Sa,Aie),e(Aie,W7o),e(Sa,Q7o),e(Je,H7o),e(Je,y),e(y,$p),e($p,Lie),e(Lie,U7o),e($p,J7o),e($p,JN),e(JN,Y7o),e($p,K7o),e(y,Z7o),e(y,kp),e(kp,yie),e(yie,e9o),e(kp,o9o),e(kp,YN),e(YN,r9o),e(kp,t9o),e(y,a9o),e(y,Sp),e(Sp,xie),e(xie,n9o),e(Sp,s9o),e(Sp,KN),e(KN,l9o),e(Sp,i9o),e(y,d9o),e(y,Rp),e(Rp,$ie),e($ie,c9o),e(Rp,f9o),e(Rp,ZN),e(ZN,m9o),e(Rp,g9o),e(y,h9o),e(y,Pp),e(Pp,kie),e(kie,p9o),e(Pp,_9o),e(Pp,eq),e(eq,u9o),e(Pp,b9o),e(y,v9o),e(y,Bp),e(Bp,Sie),e(Sie,F9o),e(Bp,T9o),e(Bp,oq),e(oq,M9o),e(Bp,E9o),e(y,C9o),e(y,Ip),e(Ip,Rie),e(Rie,w9o),e(Ip,A9o),e(Ip,rq),e(rq,L9o),e(Ip,y9o),e(y,x9o),e(y,Np),e(Np,Pie),e(Pie,$9o),e(Np,k9o),e(Np,tq),e(tq,S9o),e(Np,R9o),e(y,P9o),e(y,qp),e(qp,Bie),e(Bie,B9o),e(qp,I9o),e(qp,aq),e(aq,N9o),e(qp,q9o),e(y,j9o),e(y,jp),e(jp,Iie),e(Iie,D9o),e(jp,G9o),e(jp,nq),e(nq,O9o),e(jp,V9o),e(y,X9o),e(y,Dp),e(Dp,Nie),e(Nie,z9o),e(Dp,W9o),e(Dp,sq),e(sq,Q9o),e(Dp,H9o),e(y,U9o),e(y,Gp),e(Gp,qie),e(qie,J9o),e(Gp,Y9o),e(Gp,lq),e(lq,K9o),e(Gp,Z9o),e(y,ebo),e(y,Op),e(Op,jie),e(jie,obo),e(Op,rbo),e(Op,iq),e(iq,tbo),e(Op,abo),e(y,nbo),e(y,Vp),e(Vp,Die),e(Die,sbo),e(Vp,lbo),e(Vp,dq),e(dq,ibo),e(Vp,dbo),e(y,cbo),e(y,Xp),e(Xp,Gie),e(Gie,fbo),e(Xp,mbo),e(Xp,cq),e(cq,gbo),e(Xp,hbo),e(y,pbo),e(y,zp),e(zp,Oie),e(Oie,_bo),e(zp,ubo),e(zp,fq),e(fq,bbo),e(zp,vbo),e(y,Fbo),e(y,Wp),e(Wp,Vie),e(Vie,Tbo),e(Wp,Mbo),e(Wp,mq),e(mq,Ebo),e(Wp,Cbo),e(y,wbo),e(y,Qp),e(Qp,Xie),e(Xie,Abo),e(Qp,Lbo),e(Qp,gq),e(gq,ybo),e(Qp,xbo),e(y,$bo),e(y,Hp),e(Hp,zie),e(zie,kbo),e(Hp,Sbo),e(Hp,hq),e(hq,Rbo),e(Hp,Pbo),e(y,Bbo),e(y,Up),e(Up,Wie),e(Wie,Ibo),e(Up,Nbo),e(Up,pq),e(pq,qbo),e(Up,jbo),e(y,Dbo),e(y,Jp),e(Jp,Qie),e(Qie,Gbo),e(Jp,Obo),e(Jp,_q),e(_q,Vbo),e(Jp,Xbo),e(y,zbo),e(y,Yp),e(Yp,Hie),e(Hie,Wbo),e(Yp,Qbo),e(Yp,uq),e(uq,Hbo),e(Yp,Ubo),e(y,Jbo),e(y,Kp),e(Kp,Uie),e(Uie,Ybo),e(Kp,Kbo),e(Kp,bq),e(bq,Zbo),e(Kp,e2o),e(y,o2o),e(y,Zp),e(Zp,Jie),e(Jie,r2o),e(Zp,t2o),e(Zp,vq),e(vq,a2o),e(Zp,n2o),e(y,s2o),e(y,e_),e(e_,Yie),e(Yie,l2o),e(e_,i2o),e(e_,Fq),e(Fq,d2o),e(e_,c2o),e(y,f2o),e(y,o_),e(o_,Kie),e(Kie,m2o),e(o_,g2o),e(o_,Tq),e(Tq,h2o),e(o_,p2o),e(y,_2o),e(y,r_),e(r_,Zie),e(Zie,u2o),e(r_,b2o),e(r_,Mq),e(Mq,v2o),e(r_,F2o),e(y,T2o),e(y,t_),e(t_,ede),e(ede,M2o),e(t_,E2o),e(t_,Eq),e(Eq,C2o),e(t_,w2o),e(y,A2o),e(y,a_),e(a_,ode),e(ode,L2o),e(a_,y2o),e(a_,Cq),e(Cq,x2o),e(a_,$2o),e(y,k2o),e(y,n_),e(n_,rde),e(rde,S2o),e(n_,R2o),e(n_,wq),e(wq,P2o),e(n_,B2o),e(y,I2o),e(y,s_),e(s_,tde),e(tde,N2o),e(s_,q2o),e(s_,Aq),e(Aq,j2o),e(s_,D2o),e(y,G2o),e(y,l_),e(l_,ade),e(ade,O2o),e(l_,V2o),e(l_,Lq),e(Lq,X2o),e(l_,z2o),e(y,W2o),e(y,i_),e(i_,nde),e(nde,Q2o),e(i_,H2o),e(i_,yq),e(yq,U2o),e(i_,J2o),e(y,Y2o),e(y,Gs),e(Gs,sde),e(sde,K2o),e(Gs,Z2o),e(Gs,xq),e(xq,evo),e(Gs,ovo),e(Gs,$q),e($q,rvo),e(Gs,tvo),e(y,avo),e(y,d_),e(d_,lde),e(lde,nvo),e(d_,svo),e(d_,kq),e(kq,lvo),e(d_,ivo),e(y,dvo),e(y,c_),e(c_,ide),e(ide,cvo),e(c_,fvo),e(c_,Sq),e(Sq,mvo),e(c_,gvo),e(y,hvo),e(y,f_),e(f_,dde),e(dde,pvo),e(f_,_vo),e(f_,Rq),e(Rq,uvo),e(f_,bvo),e(y,vvo),e(y,m_),e(m_,cde),e(cde,Fvo),e(m_,Tvo),e(m_,Pq),e(Pq,Mvo),e(m_,Evo),e(y,Cvo),e(y,g_),e(g_,fde),e(fde,wvo),e(g_,Avo),e(g_,Bq),e(Bq,Lvo),e(g_,yvo),e(y,xvo),e(y,h_),e(h_,mde),e(mde,$vo),e(h_,kvo),e(h_,Iq),e(Iq,Svo),e(h_,Rvo),e(y,Pvo),e(y,p_),e(p_,gde),e(gde,Bvo),e(p_,Ivo),e(p_,Nq),e(Nq,Nvo),e(p_,qvo),e(y,jvo),e(y,__),e(__,hde),e(hde,Dvo),e(__,Gvo),e(__,qq),e(qq,Ovo),e(__,Vvo),e(y,Xvo),e(y,u_),e(u_,pde),e(pde,zvo),e(u_,Wvo),e(u_,jq),e(jq,Qvo),e(u_,Hvo),e(y,Uvo),e(y,b_),e(b_,_de),e(_de,Jvo),e(b_,Yvo),e(b_,Dq),e(Dq,Kvo),e(b_,Zvo),e(y,eFo),e(y,v_),e(v_,ude),e(ude,oFo),e(v_,rFo),e(v_,Gq),e(Gq,tFo),e(v_,aFo),e(y,nFo),e(y,F_),e(F_,bde),e(bde,sFo),e(F_,lFo),e(F_,Oq),e(Oq,iFo),e(F_,dFo),e(y,cFo),e(y,T_),e(T_,vde),e(vde,fFo),e(T_,mFo),e(T_,Vq),e(Vq,gFo),e(T_,hFo),e(y,pFo),e(y,M_),e(M_,Fde),e(Fde,_Fo),e(M_,uFo),e(M_,Xq),e(Xq,bFo),e(M_,vFo),e(y,FFo),e(y,E_),e(E_,Tde),e(Tde,TFo),e(E_,MFo),e(E_,zq),e(zq,EFo),e(E_,CFo),e(y,wFo),e(y,C_),e(C_,Mde),e(Mde,AFo),e(C_,LFo),e(C_,Wq),e(Wq,yFo),e(C_,xFo),e(y,$Fo),e(y,w_),e(w_,Ede),e(Ede,kFo),e(w_,SFo),e(w_,Qq),e(Qq,RFo),e(w_,PFo),e(y,BFo),e(y,A_),e(A_,Cde),e(Cde,IFo),e(A_,NFo),e(A_,Hq),e(Hq,qFo),e(A_,jFo),e(y,DFo),e(y,L_),e(L_,wde),e(wde,GFo),e(L_,OFo),e(L_,Uq),e(Uq,VFo),e(L_,XFo),e(y,zFo),e(y,y_),e(y_,Ade),e(Ade,WFo),e(y_,QFo),e(y_,Jq),e(Jq,HFo),e(y_,UFo),e(y,JFo),e(y,x_),e(x_,Lde),e(Lde,YFo),e(x_,KFo),e(x_,Yq),e(Yq,ZFo),e(x_,eTo),e(y,oTo),e(y,$_),e($_,yde),e(yde,rTo),e($_,tTo),e($_,Kq),e(Kq,aTo),e($_,nTo),e(y,sTo),e(y,k_),e(k_,xde),e(xde,lTo),e(k_,iTo),e(k_,Zq),e(Zq,dTo),e(k_,cTo),e(y,fTo),e(y,S_),e(S_,$de),e($de,mTo),e(S_,gTo),e(S_,ej),e(ej,hTo),e(S_,pTo),e(y,_To),e(y,R_),e(R_,kde),e(kde,uTo),e(R_,bTo),e(R_,oj),e(oj,vTo),e(R_,FTo),e(y,TTo),e(y,P_),e(P_,Sde),e(Sde,MTo),e(P_,ETo),e(P_,rj),e(rj,CTo),e(P_,wTo),e(y,ATo),e(y,B_),e(B_,Rde),e(Rde,LTo),e(B_,yTo),e(B_,tj),e(tj,xTo),e(B_,$To),e(y,kTo),e(y,I_),e(I_,Pde),e(Pde,STo),e(I_,RTo),e(I_,aj),e(aj,PTo),e(I_,BTo),e(y,ITo),e(y,N_),e(N_,Bde),e(Bde,NTo),e(N_,qTo),e(N_,nj),e(nj,jTo),e(N_,DTo),e(y,GTo),e(y,q_),e(q_,Ide),e(Ide,OTo),e(q_,VTo),e(q_,sj),e(sj,XTo),e(q_,zTo),e(y,WTo),e(y,j_),e(j_,Nde),e(Nde,QTo),e(j_,HTo),e(j_,lj),e(lj,UTo),e(j_,JTo),e(y,YTo),e(y,D_),e(D_,qde),e(qde,KTo),e(D_,ZTo),e(D_,ij),e(ij,eMo),e(D_,oMo),e(y,rMo),e(y,G_),e(G_,jde),e(jde,tMo),e(G_,aMo),e(G_,dj),e(dj,nMo),e(G_,sMo),e(y,lMo),e(y,O_),e(O_,Dde),e(Dde,iMo),e(O_,dMo),e(O_,cj),e(cj,cMo),e(O_,fMo),e(y,mMo),e(y,V_),e(V_,Gde),e(Gde,gMo),e(V_,hMo),e(V_,fj),e(fj,pMo),e(V_,_Mo),e(y,uMo),e(y,X_),e(X_,Ode),e(Ode,bMo),e(X_,vMo),e(X_,mj),e(mj,FMo),e(X_,TMo),e(y,MMo),e(y,z_),e(z_,Vde),e(Vde,EMo),e(z_,CMo),e(z_,gj),e(gj,wMo),e(z_,AMo),e(y,LMo),e(y,W_),e(W_,Xde),e(Xde,yMo),e(W_,xMo),e(W_,hj),e(hj,$Mo),e(W_,kMo),e(y,SMo),e(y,Q_),e(Q_,zde),e(zde,RMo),e(Q_,PMo),e(Q_,pj),e(pj,BMo),e(Q_,IMo),e(y,NMo),e(y,H_),e(H_,Wde),e(Wde,qMo),e(H_,jMo),e(H_,_j),e(_j,DMo),e(H_,GMo),e(y,OMo),e(y,U_),e(U_,Qde),e(Qde,VMo),e(U_,XMo),e(U_,uj),e(uj,zMo),e(U_,WMo),e(y,QMo),e(y,J_),e(J_,Hde),e(Hde,HMo),e(J_,UMo),e(J_,bj),e(bj,JMo),e(J_,YMo),e(y,KMo),e(y,Y_),e(Y_,Ude),e(Ude,ZMo),e(Y_,eEo),e(Y_,vj),e(vj,oEo),e(Y_,rEo),e(y,tEo),e(y,K_),e(K_,Jde),e(Jde,aEo),e(K_,nEo),e(K_,Fj),e(Fj,sEo),e(K_,lEo),e(y,iEo),e(y,Z_),e(Z_,Yde),e(Yde,dEo),e(Z_,cEo),e(Z_,Tj),e(Tj,fEo),e(Z_,mEo),e(y,gEo),e(y,eu),e(eu,Kde),e(Kde,hEo),e(eu,pEo),e(eu,Mj),e(Mj,_Eo),e(eu,uEo),e(y,bEo),e(y,ou),e(ou,Zde),e(Zde,vEo),e(ou,FEo),e(ou,Ej),e(Ej,TEo),e(ou,MEo),e(y,EEo),e(y,ru),e(ru,ece),e(ece,CEo),e(ru,wEo),e(ru,Cj),e(Cj,AEo),e(ru,LEo),e(y,yEo),e(y,tu),e(tu,oce),e(oce,xEo),e(tu,$Eo),e(tu,wj),e(wj,kEo),e(tu,SEo),e(y,REo),e(y,au),e(au,rce),e(rce,PEo),e(au,BEo),e(au,Aj),e(Aj,IEo),e(au,NEo),e(y,qEo),e(y,nu),e(nu,tce),e(tce,jEo),e(nu,DEo),e(nu,Lj),e(Lj,GEo),e(nu,OEo),e(y,VEo),e(y,su),e(su,ace),e(ace,XEo),e(su,zEo),e(su,yj),e(yj,WEo),e(su,QEo),e(y,HEo),e(y,lu),e(lu,nce),e(nce,UEo),e(lu,JEo),e(lu,xj),e(xj,YEo),e(lu,KEo),e(y,ZEo),e(y,iu),e(iu,sce),e(sce,e4o),e(iu,o4o),e(iu,$j),e($j,r4o),e(iu,t4o),e(y,a4o),e(y,du),e(du,lce),e(lce,n4o),e(du,s4o),e(du,kj),e(kj,l4o),e(du,i4o),e(y,d4o),e(y,cu),e(cu,ice),e(ice,c4o),e(cu,f4o),e(cu,Sj),e(Sj,m4o),e(cu,g4o),e(y,h4o),e(y,fu),e(fu,dce),e(dce,p4o),e(fu,_4o),e(fu,Rj),e(Rj,u4o),e(fu,b4o),e(y,v4o),e(y,mu),e(mu,cce),e(cce,F4o),e(mu,T4o),e(mu,Pj),e(Pj,M4o),e(mu,E4o),e(y,C4o),e(y,gu),e(gu,fce),e(fce,w4o),e(gu,A4o),e(gu,Bj),e(Bj,L4o),e(gu,y4o),e(y,x4o),e(y,hu),e(hu,mce),e(mce,$4o),e(hu,k4o),e(hu,Ij),e(Ij,S4o),e(hu,R4o),e(y,P4o),e(y,pu),e(pu,gce),e(gce,B4o),e(pu,I4o),e(pu,Nj),e(Nj,N4o),e(pu,q4o),e(y,j4o),e(y,_u),e(_u,hce),e(hce,D4o),e(_u,G4o),e(_u,qj),e(qj,O4o),e(_u,V4o),e(y,X4o),e(y,uu),e(uu,pce),e(pce,z4o),e(uu,W4o),e(uu,jj),e(jj,Q4o),e(uu,H4o),e(y,U4o),e(y,bu),e(bu,_ce),e(_ce,J4o),e(bu,Y4o),e(bu,Dj),e(Dj,K4o),e(bu,Z4o),e(y,eCo),e(y,vu),e(vu,uce),e(uce,oCo),e(vu,rCo),e(vu,Gj),e(Gj,tCo),e(vu,aCo),e(y,nCo),e(y,Fu),e(Fu,bce),e(bce,sCo),e(Fu,lCo),e(Fu,Oj),e(Oj,iCo),e(Fu,dCo),e(y,cCo),e(y,Tu),e(Tu,vce),e(vce,fCo),e(Tu,mCo),e(Tu,Vj),e(Vj,gCo),e(Tu,hCo),e(y,pCo),e(y,Mu),e(Mu,Fce),e(Fce,_Co),e(Mu,uCo),e(Mu,Xj),e(Xj,bCo),e(Mu,vCo),e(y,FCo),e(y,Eu),e(Eu,Tce),e(Tce,TCo),e(Eu,MCo),e(Eu,zj),e(zj,ECo),e(Eu,CCo),e(y,wCo),e(y,Cu),e(Cu,Mce),e(Mce,ACo),e(Cu,LCo),e(Cu,Wj),e(Wj,yCo),e(Cu,xCo),e(y,$Co),e(y,wu),e(wu,Ece),e(Ece,kCo),e(wu,SCo),e(wu,Qj),e(Qj,RCo),e(wu,PCo),e(y,BCo),e(y,Au),e(Au,Cce),e(Cce,ICo),e(Au,NCo),e(Au,Hj),e(Hj,qCo),e(Au,jCo),e(y,DCo),e(y,Lu),e(Lu,wce),e(wce,GCo),e(Lu,OCo),e(Lu,Uj),e(Uj,VCo),e(Lu,XCo),e(Je,zCo),e(Je,yu),e(yu,WCo),e(yu,Ace),e(Ace,QCo),e(yu,HCo),e(yu,Lce),e(Lce,UCo),e(Je,JCo),M(xu,Je,null),b(f,xGe,u),b(f,Ni,u),e(Ni,$u),e($u,yce),M(eL,yce,null),e(Ni,YCo),e(Ni,xce),e(xce,KCo),b(f,$Ge,u),b(f,$o,u),M(oL,$o,null),e($o,ZCo),e($o,qi),e(qi,e5o),e(qi,Jj),e(Jj,o5o),e(qi,r5o),e(qi,Yj),e(Yj,t5o),e(qi,a5o),e($o,n5o),e($o,rL),e(rL,s5o),e(rL,$ce),e($ce,l5o),e(rL,i5o),e($o,d5o),e($o,st),M(tL,st,null),e(st,c5o),e(st,kce),e(kce,f5o),e(st,m5o),e(st,ji),e(ji,g5o),e(ji,Sce),e(Sce,h5o),e(ji,p5o),e(ji,Kj),e(Kj,_5o),e(ji,u5o),e(st,b5o),M(ku,st,null),e($o,v5o),e($o,Ye),M(aL,Ye,null),e(Ye,F5o),e(Ye,Rce),e(Rce,T5o),e(Ye,M5o),e(Ye,Ra),e(Ra,E5o),e(Ra,Pce),e(Pce,C5o),e(Ra,w5o),e(Ra,Bce),e(Bce,A5o),e(Ra,L5o),e(Ra,Ice),e(Ice,y5o),e(Ra,x5o),e(Ye,$5o),e(Ye,G),e(G,Su),e(Su,Nce),e(Nce,k5o),e(Su,S5o),e(Su,Zj),e(Zj,R5o),e(Su,P5o),e(G,B5o),e(G,Ru),e(Ru,qce),e(qce,I5o),e(Ru,N5o),e(Ru,eD),e(eD,q5o),e(Ru,j5o),e(G,D5o),e(G,Pu),e(Pu,jce),e(jce,G5o),e(Pu,O5o),e(Pu,oD),e(oD,V5o),e(Pu,X5o),e(G,z5o),e(G,Bu),e(Bu,Dce),e(Dce,W5o),e(Bu,Q5o),e(Bu,rD),e(rD,H5o),e(Bu,U5o),e(G,J5o),e(G,Iu),e(Iu,Gce),e(Gce,Y5o),e(Iu,K5o),e(Iu,tD),e(tD,Z5o),e(Iu,e3o),e(G,o3o),e(G,Nu),e(Nu,Oce),e(Oce,r3o),e(Nu,t3o),e(Nu,aD),e(aD,a3o),e(Nu,n3o),e(G,s3o),e(G,qu),e(qu,Vce),e(Vce,l3o),e(qu,i3o),e(qu,nD),e(nD,d3o),e(qu,c3o),e(G,f3o),e(G,ju),e(ju,Xce),e(Xce,m3o),e(ju,g3o),e(ju,sD),e(sD,h3o),e(ju,p3o),e(G,_3o),e(G,Du),e(Du,zce),e(zce,u3o),e(Du,b3o),e(Du,lD),e(lD,v3o),e(Du,F3o),e(G,T3o),e(G,Gu),e(Gu,Wce),e(Wce,M3o),e(Gu,E3o),e(Gu,iD),e(iD,C3o),e(Gu,w3o),e(G,A3o),e(G,Ou),e(Ou,Qce),e(Qce,L3o),e(Ou,y3o),e(Ou,dD),e(dD,x3o),e(Ou,$3o),e(G,k3o),e(G,Vu),e(Vu,Hce),e(Hce,S3o),e(Vu,R3o),e(Vu,cD),e(cD,P3o),e(Vu,B3o),e(G,I3o),e(G,Xu),e(Xu,Uce),e(Uce,N3o),e(Xu,q3o),e(Xu,fD),e(fD,j3o),e(Xu,D3o),e(G,G3o),e(G,zu),e(zu,Jce),e(Jce,O3o),e(zu,V3o),e(zu,mD),e(mD,X3o),e(zu,z3o),e(G,W3o),e(G,Wu),e(Wu,Yce),e(Yce,Q3o),e(Wu,H3o),e(Wu,gD),e(gD,U3o),e(Wu,J3o),e(G,Y3o),e(G,Qu),e(Qu,Kce),e(Kce,K3o),e(Qu,Z3o),e(Qu,hD),e(hD,e0o),e(Qu,o0o),e(G,r0o),e(G,Hu),e(Hu,Zce),e(Zce,t0o),e(Hu,a0o),e(Hu,pD),e(pD,n0o),e(Hu,s0o),e(G,l0o),e(G,Uu),e(Uu,efe),e(efe,i0o),e(Uu,d0o),e(Uu,_D),e(_D,c0o),e(Uu,f0o),e(G,m0o),e(G,Ju),e(Ju,ofe),e(ofe,g0o),e(Ju,h0o),e(Ju,uD),e(uD,p0o),e(Ju,_0o),e(G,u0o),e(G,Yu),e(Yu,rfe),e(rfe,b0o),e(Yu,v0o),e(Yu,bD),e(bD,F0o),e(Yu,T0o),e(G,M0o),e(G,Ku),e(Ku,tfe),e(tfe,E0o),e(Ku,C0o),e(Ku,vD),e(vD,w0o),e(Ku,A0o),e(G,L0o),e(G,Zu),e(Zu,afe),e(afe,y0o),e(Zu,x0o),e(Zu,FD),e(FD,$0o),e(Zu,k0o),e(G,S0o),e(G,e1),e(e1,nfe),e(nfe,R0o),e(e1,P0o),e(e1,TD),e(TD,B0o),e(e1,I0o),e(G,N0o),e(G,o1),e(o1,sfe),e(sfe,q0o),e(o1,j0o),e(o1,MD),e(MD,D0o),e(o1,G0o),e(G,O0o),e(G,r1),e(r1,lfe),e(lfe,V0o),e(r1,X0o),e(r1,ED),e(ED,z0o),e(r1,W0o),e(G,Q0o),e(G,t1),e(t1,ife),e(ife,H0o),e(t1,U0o),e(t1,CD),e(CD,J0o),e(t1,Y0o),e(G,K0o),e(G,a1),e(a1,dfe),e(dfe,Z0o),e(a1,ewo),e(a1,wD),e(wD,owo),e(a1,rwo),e(G,two),e(G,n1),e(n1,cfe),e(cfe,awo),e(n1,nwo),e(n1,AD),e(AD,swo),e(n1,lwo),e(G,iwo),e(G,s1),e(s1,ffe),e(ffe,dwo),e(s1,cwo),e(s1,LD),e(LD,fwo),e(s1,mwo),e(G,gwo),e(G,l1),e(l1,mfe),e(mfe,hwo),e(l1,pwo),e(l1,yD),e(yD,_wo),e(l1,uwo),e(G,bwo),e(G,i1),e(i1,gfe),e(gfe,vwo),e(i1,Fwo),e(i1,xD),e(xD,Two),e(i1,Mwo),e(G,Ewo),e(G,d1),e(d1,hfe),e(hfe,Cwo),e(d1,wwo),e(d1,$D),e($D,Awo),e(d1,Lwo),e(G,ywo),e(G,c1),e(c1,pfe),e(pfe,xwo),e(c1,$wo),e(c1,kD),e(kD,kwo),e(c1,Swo),e(G,Rwo),e(G,f1),e(f1,_fe),e(_fe,Pwo),e(f1,Bwo),e(f1,SD),e(SD,Iwo),e(f1,Nwo),e(G,qwo),e(G,m1),e(m1,ufe),e(ufe,jwo),e(m1,Dwo),e(m1,RD),e(RD,Gwo),e(m1,Owo),e(G,Vwo),e(G,g1),e(g1,bfe),e(bfe,Xwo),e(g1,zwo),e(g1,PD),e(PD,Wwo),e(g1,Qwo),e(G,Hwo),e(G,h1),e(h1,vfe),e(vfe,Uwo),e(h1,Jwo),e(h1,BD),e(BD,Ywo),e(h1,Kwo),e(G,Zwo),e(G,p1),e(p1,Ffe),e(Ffe,eAo),e(p1,oAo),e(p1,ID),e(ID,rAo),e(p1,tAo),e(G,aAo),e(G,_1),e(_1,Tfe),e(Tfe,nAo),e(_1,sAo),e(_1,ND),e(ND,lAo),e(_1,iAo),e(G,dAo),e(G,u1),e(u1,Mfe),e(Mfe,cAo),e(u1,fAo),e(u1,qD),e(qD,mAo),e(u1,gAo),e(G,hAo),e(G,b1),e(b1,Efe),e(Efe,pAo),e(b1,_Ao),e(b1,jD),e(jD,uAo),e(b1,bAo),e(G,vAo),e(G,v1),e(v1,Cfe),e(Cfe,FAo),e(v1,TAo),e(v1,DD),e(DD,MAo),e(v1,EAo),e(G,CAo),e(G,F1),e(F1,wfe),e(wfe,wAo),e(F1,AAo),e(F1,GD),e(GD,LAo),e(F1,yAo),e(Ye,xAo),e(Ye,T1),e(T1,$Ao),e(T1,Afe),e(Afe,kAo),e(T1,SAo),e(T1,Lfe),e(Lfe,RAo),e(Ye,PAo),M(M1,Ye,null),b(f,kGe,u),b(f,Di,u),e(Di,E1),e(E1,yfe),M(nL,yfe,null),e(Di,BAo),e(Di,xfe),e(xfe,IAo),b(f,SGe,u),b(f,ko,u),M(sL,ko,null),e(ko,NAo),e(ko,Gi),e(Gi,qAo),e(Gi,OD),e(OD,jAo),e(Gi,DAo),e(Gi,VD),e(VD,GAo),e(Gi,OAo),e(ko,VAo),e(ko,lL),e(lL,XAo),e(lL,$fe),e($fe,zAo),e(lL,WAo),e(ko,QAo),e(ko,lt),M(iL,lt,null),e(lt,HAo),e(lt,kfe),e(kfe,UAo),e(lt,JAo),e(lt,Oi),e(Oi,YAo),e(Oi,Sfe),e(Sfe,KAo),e(Oi,ZAo),e(Oi,XD),e(XD,e6o),e(Oi,o6o),e(lt,r6o),M(C1,lt,null),e(ko,t6o),e(ko,Ke),M(dL,Ke,null),e(Ke,a6o),e(Ke,Rfe),e(Rfe,n6o),e(Ke,s6o),e(Ke,Pa),e(Pa,l6o),e(Pa,Pfe),e(Pfe,i6o),e(Pa,d6o),e(Pa,Bfe),e(Bfe,c6o),e(Pa,f6o),e(Pa,Ife),e(Ife,m6o),e(Pa,g6o),e(Ke,h6o),e(Ke,z),e(z,w1),e(w1,Nfe),e(Nfe,p6o),e(w1,_6o),e(w1,zD),e(zD,u6o),e(w1,b6o),e(z,v6o),e(z,A1),e(A1,qfe),e(qfe,F6o),e(A1,T6o),e(A1,WD),e(WD,M6o),e(A1,E6o),e(z,C6o),e(z,L1),e(L1,jfe),e(jfe,w6o),e(L1,A6o),e(L1,QD),e(QD,L6o),e(L1,y6o),e(z,x6o),e(z,y1),e(y1,Dfe),e(Dfe,$6o),e(y1,k6o),e(y1,HD),e(HD,S6o),e(y1,R6o),e(z,P6o),e(z,x1),e(x1,Gfe),e(Gfe,B6o),e(x1,I6o),e(x1,UD),e(UD,N6o),e(x1,q6o),e(z,j6o),e(z,$1),e($1,Ofe),e(Ofe,D6o),e($1,G6o),e($1,JD),e(JD,O6o),e($1,V6o),e(z,X6o),e(z,k1),e(k1,Vfe),e(Vfe,z6o),e(k1,W6o),e(k1,YD),e(YD,Q6o),e(k1,H6o),e(z,U6o),e(z,S1),e(S1,Xfe),e(Xfe,J6o),e(S1,Y6o),e(S1,KD),e(KD,K6o),e(S1,Z6o),e(z,eLo),e(z,R1),e(R1,zfe),e(zfe,oLo),e(R1,rLo),e(R1,ZD),e(ZD,tLo),e(R1,aLo),e(z,nLo),e(z,P1),e(P1,Wfe),e(Wfe,sLo),e(P1,lLo),e(P1,eG),e(eG,iLo),e(P1,dLo),e(z,cLo),e(z,B1),e(B1,Qfe),e(Qfe,fLo),e(B1,mLo),e(B1,oG),e(oG,gLo),e(B1,hLo),e(z,pLo),e(z,I1),e(I1,Hfe),e(Hfe,_Lo),e(I1,uLo),e(I1,rG),e(rG,bLo),e(I1,vLo),e(z,FLo),e(z,N1),e(N1,Ufe),e(Ufe,TLo),e(N1,MLo),e(N1,tG),e(tG,ELo),e(N1,CLo),e(z,wLo),e(z,q1),e(q1,Jfe),e(Jfe,ALo),e(q1,LLo),e(q1,aG),e(aG,yLo),e(q1,xLo),e(z,$Lo),e(z,j1),e(j1,Yfe),e(Yfe,kLo),e(j1,SLo),e(j1,nG),e(nG,RLo),e(j1,PLo),e(z,BLo),e(z,D1),e(D1,Kfe),e(Kfe,ILo),e(D1,NLo),e(D1,sG),e(sG,qLo),e(D1,jLo),e(z,DLo),e(z,G1),e(G1,Zfe),e(Zfe,GLo),e(G1,OLo),e(G1,lG),e(lG,VLo),e(G1,XLo),e(z,zLo),e(z,O1),e(O1,eme),e(eme,WLo),e(O1,QLo),e(O1,iG),e(iG,HLo),e(O1,ULo),e(z,JLo),e(z,V1),e(V1,ome),e(ome,YLo),e(V1,KLo),e(V1,dG),e(dG,ZLo),e(V1,eyo),e(z,oyo),e(z,X1),e(X1,rme),e(rme,ryo),e(X1,tyo),e(X1,cG),e(cG,ayo),e(X1,nyo),e(z,syo),e(z,z1),e(z1,tme),e(tme,lyo),e(z1,iyo),e(z1,fG),e(fG,dyo),e(z1,cyo),e(z,fyo),e(z,W1),e(W1,ame),e(ame,myo),e(W1,gyo),e(W1,mG),e(mG,hyo),e(W1,pyo),e(z,_yo),e(z,Q1),e(Q1,nme),e(nme,uyo),e(Q1,byo),e(Q1,gG),e(gG,vyo),e(Q1,Fyo),e(z,Tyo),e(z,H1),e(H1,sme),e(sme,Myo),e(H1,Eyo),e(H1,hG),e(hG,Cyo),e(H1,wyo),e(z,Ayo),e(z,U1),e(U1,lme),e(lme,Lyo),e(U1,yyo),e(U1,pG),e(pG,xyo),e(U1,$yo),e(z,kyo),e(z,J1),e(J1,ime),e(ime,Syo),e(J1,Ryo),e(J1,_G),e(_G,Pyo),e(J1,Byo),e(z,Iyo),e(z,Y1),e(Y1,dme),e(dme,Nyo),e(Y1,qyo),e(Y1,uG),e(uG,jyo),e(Y1,Dyo),e(z,Gyo),e(z,K1),e(K1,cme),e(cme,Oyo),e(K1,Vyo),e(K1,bG),e(bG,Xyo),e(K1,zyo),e(z,Wyo),e(z,Z1),e(Z1,fme),e(fme,Qyo),e(Z1,Hyo),e(Z1,vG),e(vG,Uyo),e(Z1,Jyo),e(z,Yyo),e(z,e7),e(e7,mme),e(mme,Kyo),e(e7,Zyo),e(e7,FG),e(FG,e8o),e(e7,o8o),e(z,r8o),e(z,o7),e(o7,gme),e(gme,t8o),e(o7,a8o),e(o7,TG),e(TG,n8o),e(o7,s8o),e(z,l8o),e(z,r7),e(r7,hme),e(hme,i8o),e(r7,d8o),e(r7,MG),e(MG,c8o),e(r7,f8o),e(z,m8o),e(z,t7),e(t7,pme),e(pme,g8o),e(t7,h8o),e(t7,EG),e(EG,p8o),e(t7,_8o),e(z,u8o),e(z,a7),e(a7,_me),e(_me,b8o),e(a7,v8o),e(a7,CG),e(CG,F8o),e(a7,T8o),e(z,M8o),e(z,n7),e(n7,ume),e(ume,E8o),e(n7,C8o),e(n7,wG),e(wG,w8o),e(n7,A8o),e(z,L8o),e(z,s7),e(s7,bme),e(bme,y8o),e(s7,x8o),e(s7,AG),e(AG,$8o),e(s7,k8o),e(z,S8o),e(z,l7),e(l7,vme),e(vme,R8o),e(l7,P8o),e(l7,LG),e(LG,B8o),e(l7,I8o),e(z,N8o),e(z,i7),e(i7,Fme),e(Fme,q8o),e(i7,j8o),e(i7,yG),e(yG,D8o),e(i7,G8o),e(Ke,O8o),e(Ke,d7),e(d7,V8o),e(d7,Tme),e(Tme,X8o),e(d7,z8o),e(d7,Mme),e(Mme,W8o),e(Ke,Q8o),M(c7,Ke,null),b(f,RGe,u),b(f,Vi,u),e(Vi,f7),e(f7,Eme),M(cL,Eme,null),e(Vi,H8o),e(Vi,Cme),e(Cme,U8o),b(f,PGe,u),b(f,So,u),M(fL,So,null),e(So,J8o),e(So,Xi),e(Xi,Y8o),e(Xi,xG),e(xG,K8o),e(Xi,Z8o),e(Xi,$G),e($G,exo),e(Xi,oxo),e(So,rxo),e(So,mL),e(mL,txo),e(mL,wme),e(wme,axo),e(mL,nxo),e(So,sxo),e(So,it),M(gL,it,null),e(it,lxo),e(it,Ame),e(Ame,ixo),e(it,dxo),e(it,zi),e(zi,cxo),e(zi,Lme),e(Lme,fxo),e(zi,mxo),e(zi,kG),e(kG,gxo),e(zi,hxo),e(it,pxo),M(m7,it,null),e(So,_xo),e(So,Ze),M(hL,Ze,null),e(Ze,uxo),e(Ze,yme),e(yme,bxo),e(Ze,vxo),e(Ze,Ba),e(Ba,Fxo),e(Ba,xme),e(xme,Txo),e(Ba,Mxo),e(Ba,$me),e($me,Exo),e(Ba,Cxo),e(Ba,kme),e(kme,wxo),e(Ba,Axo),e(Ze,Lxo),e(Ze,Q),e(Q,g7),e(g7,Sme),e(Sme,yxo),e(g7,xxo),e(g7,SG),e(SG,$xo),e(g7,kxo),e(Q,Sxo),e(Q,h7),e(h7,Rme),e(Rme,Rxo),e(h7,Pxo),e(h7,RG),e(RG,Bxo),e(h7,Ixo),e(Q,Nxo),e(Q,p7),e(p7,Pme),e(Pme,qxo),e(p7,jxo),e(p7,PG),e(PG,Dxo),e(p7,Gxo),e(Q,Oxo),e(Q,_7),e(_7,Bme),e(Bme,Vxo),e(_7,Xxo),e(_7,BG),e(BG,zxo),e(_7,Wxo),e(Q,Qxo),e(Q,u7),e(u7,Ime),e(Ime,Hxo),e(u7,Uxo),e(u7,IG),e(IG,Jxo),e(u7,Yxo),e(Q,Kxo),e(Q,b7),e(b7,Nme),e(Nme,Zxo),e(b7,e$o),e(b7,NG),e(NG,o$o),e(b7,r$o),e(Q,t$o),e(Q,v7),e(v7,qme),e(qme,a$o),e(v7,n$o),e(v7,qG),e(qG,s$o),e(v7,l$o),e(Q,i$o),e(Q,F7),e(F7,jme),e(jme,d$o),e(F7,c$o),e(F7,jG),e(jG,f$o),e(F7,m$o),e(Q,g$o),e(Q,T7),e(T7,Dme),e(Dme,h$o),e(T7,p$o),e(T7,DG),e(DG,_$o),e(T7,u$o),e(Q,b$o),e(Q,M7),e(M7,Gme),e(Gme,v$o),e(M7,F$o),e(M7,GG),e(GG,T$o),e(M7,M$o),e(Q,E$o),e(Q,E7),e(E7,Ome),e(Ome,C$o),e(E7,w$o),e(E7,OG),e(OG,A$o),e(E7,L$o),e(Q,y$o),e(Q,C7),e(C7,Vme),e(Vme,x$o),e(C7,$$o),e(C7,VG),e(VG,k$o),e(C7,S$o),e(Q,R$o),e(Q,w7),e(w7,Xme),e(Xme,P$o),e(w7,B$o),e(w7,XG),e(XG,I$o),e(w7,N$o),e(Q,q$o),e(Q,A7),e(A7,zme),e(zme,j$o),e(A7,D$o),e(A7,zG),e(zG,G$o),e(A7,O$o),e(Q,V$o),e(Q,L7),e(L7,Wme),e(Wme,X$o),e(L7,z$o),e(L7,WG),e(WG,W$o),e(L7,Q$o),e(Q,H$o),e(Q,y7),e(y7,Qme),e(Qme,U$o),e(y7,J$o),e(y7,QG),e(QG,Y$o),e(y7,K$o),e(Q,Z$o),e(Q,x7),e(x7,Hme),e(Hme,eko),e(x7,oko),e(x7,HG),e(HG,rko),e(x7,tko),e(Q,ako),e(Q,$7),e($7,Ume),e(Ume,nko),e($7,sko),e($7,UG),e(UG,lko),e($7,iko),e(Q,dko),e(Q,k7),e(k7,Jme),e(Jme,cko),e(k7,fko),e(k7,JG),e(JG,mko),e(k7,gko),e(Q,hko),e(Q,S7),e(S7,Yme),e(Yme,pko),e(S7,_ko),e(S7,YG),e(YG,uko),e(S7,bko),e(Q,vko),e(Q,R7),e(R7,Kme),e(Kme,Fko),e(R7,Tko),e(R7,KG),e(KG,Mko),e(R7,Eko),e(Q,Cko),e(Q,P7),e(P7,Zme),e(Zme,wko),e(P7,Ako),e(P7,ZG),e(ZG,Lko),e(P7,yko),e(Q,xko),e(Q,B7),e(B7,ege),e(ege,$ko),e(B7,kko),e(B7,eO),e(eO,Sko),e(B7,Rko),e(Q,Pko),e(Q,I7),e(I7,oge),e(oge,Bko),e(I7,Iko),e(I7,oO),e(oO,Nko),e(I7,qko),e(Q,jko),e(Q,N7),e(N7,rge),e(rge,Dko),e(N7,Gko),e(N7,rO),e(rO,Oko),e(N7,Vko),e(Q,Xko),e(Q,q7),e(q7,tge),e(tge,zko),e(q7,Wko),e(q7,tO),e(tO,Qko),e(q7,Hko),e(Q,Uko),e(Q,j7),e(j7,age),e(age,Jko),e(j7,Yko),e(j7,aO),e(aO,Kko),e(j7,Zko),e(Q,eSo),e(Q,D7),e(D7,nge),e(nge,oSo),e(D7,rSo),e(D7,nO),e(nO,tSo),e(D7,aSo),e(Q,nSo),e(Q,G7),e(G7,sge),e(sge,sSo),e(G7,lSo),e(G7,sO),e(sO,iSo),e(G7,dSo),e(Q,cSo),e(Q,O7),e(O7,lge),e(lge,fSo),e(O7,mSo),e(O7,lO),e(lO,gSo),e(O7,hSo),e(Q,pSo),e(Q,V7),e(V7,ige),e(ige,_So),e(V7,uSo),e(V7,iO),e(iO,bSo),e(V7,vSo),e(Q,FSo),e(Q,X7),e(X7,dge),e(dge,TSo),e(X7,MSo),e(X7,cge),e(cge,ESo),e(X7,CSo),e(Q,wSo),e(Q,z7),e(z7,fge),e(fge,ASo),e(z7,LSo),e(z7,dO),e(dO,ySo),e(z7,xSo),e(Q,$So),e(Q,W7),e(W7,mge),e(mge,kSo),e(W7,SSo),e(W7,cO),e(cO,RSo),e(W7,PSo),e(Q,BSo),e(Q,Q7),e(Q7,gge),e(gge,ISo),e(Q7,NSo),e(Q7,fO),e(fO,qSo),e(Q7,jSo),e(Q,DSo),e(Q,H7),e(H7,hge),e(hge,GSo),e(H7,OSo),e(H7,mO),e(mO,VSo),e(H7,XSo),e(Ze,zSo),e(Ze,U7),e(U7,WSo),e(U7,pge),e(pge,QSo),e(U7,HSo),e(U7,_ge),e(_ge,USo),e(Ze,JSo),M(J7,Ze,null),b(f,BGe,u),b(f,Wi,u),e(Wi,Y7),e(Y7,uge),M(pL,uge,null),e(Wi,YSo),e(Wi,bge),e(bge,KSo),b(f,IGe,u),b(f,Ro,u),M(_L,Ro,null),e(Ro,ZSo),e(Ro,Qi),e(Qi,eRo),e(Qi,gO),e(gO,oRo),e(Qi,rRo),e(Qi,hO),e(hO,tRo),e(Qi,aRo),e(Ro,nRo),e(Ro,uL),e(uL,sRo),e(uL,vge),e(vge,lRo),e(uL,iRo),e(Ro,dRo),e(Ro,dt),M(bL,dt,null),e(dt,cRo),e(dt,Fge),e(Fge,fRo),e(dt,mRo),e(dt,Hi),e(Hi,gRo),e(Hi,Tge),e(Tge,hRo),e(Hi,pRo),e(Hi,pO),e(pO,_Ro),e(Hi,uRo),e(dt,bRo),M(K7,dt,null),e(Ro,vRo),e(Ro,eo),M(vL,eo,null),e(eo,FRo),e(eo,Mge),e(Mge,TRo),e(eo,MRo),e(eo,Ia),e(Ia,ERo),e(Ia,Ege),e(Ege,CRo),e(Ia,wRo),e(Ia,Cge),e(Cge,ARo),e(Ia,LRo),e(Ia,wge),e(wge,yRo),e(Ia,xRo),e(eo,$Ro),e(eo,pe),e(pe,Z7),e(Z7,Age),e(Age,kRo),e(Z7,SRo),e(Z7,_O),e(_O,RRo),e(Z7,PRo),e(pe,BRo),e(pe,e9),e(e9,Lge),e(Lge,IRo),e(e9,NRo),e(e9,uO),e(uO,qRo),e(e9,jRo),e(pe,DRo),e(pe,o9),e(o9,yge),e(yge,GRo),e(o9,ORo),e(o9,bO),e(bO,VRo),e(o9,XRo),e(pe,zRo),e(pe,r9),e(r9,xge),e(xge,WRo),e(r9,QRo),e(r9,vO),e(vO,HRo),e(r9,URo),e(pe,JRo),e(pe,t9),e(t9,$ge),e($ge,YRo),e(t9,KRo),e(t9,FO),e(FO,ZRo),e(t9,ePo),e(pe,oPo),e(pe,a9),e(a9,kge),e(kge,rPo),e(a9,tPo),e(a9,TO),e(TO,aPo),e(a9,nPo),e(pe,sPo),e(pe,n9),e(n9,Sge),e(Sge,lPo),e(n9,iPo),e(n9,MO),e(MO,dPo),e(n9,cPo),e(pe,fPo),e(pe,s9),e(s9,Rge),e(Rge,mPo),e(s9,gPo),e(s9,EO),e(EO,hPo),e(s9,pPo),e(pe,_Po),e(pe,l9),e(l9,Pge),e(Pge,uPo),e(l9,bPo),e(l9,CO),e(CO,vPo),e(l9,FPo),e(pe,TPo),e(pe,i9),e(i9,Bge),e(Bge,MPo),e(i9,EPo),e(i9,wO),e(wO,CPo),e(i9,wPo),e(pe,APo),e(pe,d9),e(d9,Ige),e(Ige,LPo),e(d9,yPo),e(d9,AO),e(AO,xPo),e(d9,$Po),e(pe,kPo),e(pe,c9),e(c9,Nge),e(Nge,SPo),e(c9,RPo),e(c9,LO),e(LO,PPo),e(c9,BPo),e(pe,IPo),e(pe,f9),e(f9,qge),e(qge,NPo),e(f9,qPo),e(f9,yO),e(yO,jPo),e(f9,DPo),e(pe,GPo),e(pe,m9),e(m9,jge),e(jge,OPo),e(m9,VPo),e(m9,xO),e(xO,XPo),e(m9,zPo),e(pe,WPo),e(pe,g9),e(g9,Dge),e(Dge,QPo),e(g9,HPo),e(g9,$O),e($O,UPo),e(g9,JPo),e(pe,YPo),e(pe,h9),e(h9,Gge),e(Gge,KPo),e(h9,ZPo),e(h9,kO),e(kO,eBo),e(h9,oBo),e(pe,rBo),e(pe,p9),e(p9,Oge),e(Oge,tBo),e(p9,aBo),e(p9,SO),e(SO,nBo),e(p9,sBo),e(eo,lBo),e(eo,_9),e(_9,iBo),e(_9,Vge),e(Vge,dBo),e(_9,cBo),e(_9,Xge),e(Xge,fBo),e(eo,mBo),M(u9,eo,null),b(f,NGe,u),b(f,Ui,u),e(Ui,b9),e(b9,zge),M(FL,zge,null),e(Ui,gBo),e(Ui,Wge),e(Wge,hBo),b(f,qGe,u),b(f,Po,u),M(TL,Po,null),e(Po,pBo),e(Po,Ji),e(Ji,_Bo),e(Ji,RO),e(RO,uBo),e(Ji,bBo),e(Ji,PO),e(PO,vBo),e(Ji,FBo),e(Po,TBo),e(Po,ML),e(ML,MBo),e(ML,Qge),e(Qge,EBo),e(ML,CBo),e(Po,wBo),e(Po,ct),M(EL,ct,null),e(ct,ABo),e(ct,Hge),e(Hge,LBo),e(ct,yBo),e(ct,Yi),e(Yi,xBo),e(Yi,Uge),e(Uge,$Bo),e(Yi,kBo),e(Yi,BO),e(BO,SBo),e(Yi,RBo),e(ct,PBo),M(v9,ct,null),e(Po,BBo),e(Po,oo),M(CL,oo,null),e(oo,IBo),e(oo,Jge),e(Jge,NBo),e(oo,qBo),e(oo,Na),e(Na,jBo),e(Na,Yge),e(Yge,DBo),e(Na,GBo),e(Na,Kge),e(Kge,OBo),e(Na,VBo),e(Na,Zge),e(Zge,XBo),e(Na,zBo),e(oo,WBo),e(oo,N),e(N,F9),e(F9,ehe),e(ehe,QBo),e(F9,HBo),e(F9,IO),e(IO,UBo),e(F9,JBo),e(N,YBo),e(N,T9),e(T9,ohe),e(ohe,KBo),e(T9,ZBo),e(T9,NO),e(NO,eIo),e(T9,oIo),e(N,rIo),e(N,M9),e(M9,rhe),e(rhe,tIo),e(M9,aIo),e(M9,qO),e(qO,nIo),e(M9,sIo),e(N,lIo),e(N,E9),e(E9,the),e(the,iIo),e(E9,dIo),e(E9,jO),e(jO,cIo),e(E9,fIo),e(N,mIo),e(N,C9),e(C9,ahe),e(ahe,gIo),e(C9,hIo),e(C9,DO),e(DO,pIo),e(C9,_Io),e(N,uIo),e(N,w9),e(w9,nhe),e(nhe,bIo),e(w9,vIo),e(w9,GO),e(GO,FIo),e(w9,TIo),e(N,MIo),e(N,A9),e(A9,she),e(she,EIo),e(A9,CIo),e(A9,OO),e(OO,wIo),e(A9,AIo),e(N,LIo),e(N,L9),e(L9,lhe),e(lhe,yIo),e(L9,xIo),e(L9,VO),e(VO,$Io),e(L9,kIo),e(N,SIo),e(N,y9),e(y9,ihe),e(ihe,RIo),e(y9,PIo),e(y9,XO),e(XO,BIo),e(y9,IIo),e(N,NIo),e(N,x9),e(x9,dhe),e(dhe,qIo),e(x9,jIo),e(x9,zO),e(zO,DIo),e(x9,GIo),e(N,OIo),e(N,$9),e($9,che),e(che,VIo),e($9,XIo),e($9,WO),e(WO,zIo),e($9,WIo),e(N,QIo),e(N,k9),e(k9,fhe),e(fhe,HIo),e(k9,UIo),e(k9,QO),e(QO,JIo),e(k9,YIo),e(N,KIo),e(N,S9),e(S9,mhe),e(mhe,ZIo),e(S9,eNo),e(S9,HO),e(HO,oNo),e(S9,rNo),e(N,tNo),e(N,R9),e(R9,ghe),e(ghe,aNo),e(R9,nNo),e(R9,UO),e(UO,sNo),e(R9,lNo),e(N,iNo),e(N,P9),e(P9,hhe),e(hhe,dNo),e(P9,cNo),e(P9,JO),e(JO,fNo),e(P9,mNo),e(N,gNo),e(N,B9),e(B9,phe),e(phe,hNo),e(B9,pNo),e(B9,YO),e(YO,_No),e(B9,uNo),e(N,bNo),e(N,I9),e(I9,_he),e(_he,vNo),e(I9,FNo),e(I9,KO),e(KO,TNo),e(I9,MNo),e(N,ENo),e(N,N9),e(N9,uhe),e(uhe,CNo),e(N9,wNo),e(N9,ZO),e(ZO,ANo),e(N9,LNo),e(N,yNo),e(N,q9),e(q9,bhe),e(bhe,xNo),e(q9,$No),e(q9,eV),e(eV,kNo),e(q9,SNo),e(N,RNo),e(N,j9),e(j9,vhe),e(vhe,PNo),e(j9,BNo),e(j9,oV),e(oV,INo),e(j9,NNo),e(N,qNo),e(N,D9),e(D9,Fhe),e(Fhe,jNo),e(D9,DNo),e(D9,rV),e(rV,GNo),e(D9,ONo),e(N,VNo),e(N,G9),e(G9,The),e(The,XNo),e(G9,zNo),e(G9,tV),e(tV,WNo),e(G9,QNo),e(N,HNo),e(N,O9),e(O9,Mhe),e(Mhe,UNo),e(O9,JNo),e(O9,aV),e(aV,YNo),e(O9,KNo),e(N,ZNo),e(N,V9),e(V9,Ehe),e(Ehe,eqo),e(V9,oqo),e(V9,nV),e(nV,rqo),e(V9,tqo),e(N,aqo),e(N,X9),e(X9,Che),e(Che,nqo),e(X9,sqo),e(X9,sV),e(sV,lqo),e(X9,iqo),e(N,dqo),e(N,z9),e(z9,whe),e(whe,cqo),e(z9,fqo),e(z9,lV),e(lV,mqo),e(z9,gqo),e(N,hqo),e(N,W9),e(W9,Ahe),e(Ahe,pqo),e(W9,_qo),e(W9,iV),e(iV,uqo),e(W9,bqo),e(N,vqo),e(N,Q9),e(Q9,Lhe),e(Lhe,Fqo),e(Q9,Tqo),e(Q9,dV),e(dV,Mqo),e(Q9,Eqo),e(N,Cqo),e(N,H9),e(H9,yhe),e(yhe,wqo),e(H9,Aqo),e(H9,cV),e(cV,Lqo),e(H9,yqo),e(N,xqo),e(N,U9),e(U9,xhe),e(xhe,$qo),e(U9,kqo),e(U9,fV),e(fV,Sqo),e(U9,Rqo),e(N,Pqo),e(N,J9),e(J9,$he),e($he,Bqo),e(J9,Iqo),e(J9,mV),e(mV,Nqo),e(J9,qqo),e(N,jqo),e(N,Y9),e(Y9,khe),e(khe,Dqo),e(Y9,Gqo),e(Y9,gV),e(gV,Oqo),e(Y9,Vqo),e(N,Xqo),e(N,K9),e(K9,She),e(She,zqo),e(K9,Wqo),e(K9,hV),e(hV,Qqo),e(K9,Hqo),e(N,Uqo),e(N,Z9),e(Z9,Rhe),e(Rhe,Jqo),e(Z9,Yqo),e(Z9,pV),e(pV,Kqo),e(Z9,Zqo),e(N,ejo),e(N,eb),e(eb,Phe),e(Phe,ojo),e(eb,rjo),e(eb,_V),e(_V,tjo),e(eb,ajo),e(N,njo),e(N,ob),e(ob,Bhe),e(Bhe,sjo),e(ob,ljo),e(ob,uV),e(uV,ijo),e(ob,djo),e(N,cjo),e(N,rb),e(rb,Ihe),e(Ihe,fjo),e(rb,mjo),e(rb,bV),e(bV,gjo),e(rb,hjo),e(N,pjo),e(N,tb),e(tb,Nhe),e(Nhe,_jo),e(tb,ujo),e(tb,vV),e(vV,bjo),e(tb,vjo),e(N,Fjo),e(N,ab),e(ab,qhe),e(qhe,Tjo),e(ab,Mjo),e(ab,FV),e(FV,Ejo),e(ab,Cjo),e(N,wjo),e(N,nb),e(nb,jhe),e(jhe,Ajo),e(nb,Ljo),e(nb,TV),e(TV,yjo),e(nb,xjo),e(N,$jo),e(N,sb),e(sb,Dhe),e(Dhe,kjo),e(sb,Sjo),e(sb,MV),e(MV,Rjo),e(sb,Pjo),e(N,Bjo),e(N,lb),e(lb,Ghe),e(Ghe,Ijo),e(lb,Njo),e(lb,EV),e(EV,qjo),e(lb,jjo),e(N,Djo),e(N,ib),e(ib,Ohe),e(Ohe,Gjo),e(ib,Ojo),e(ib,CV),e(CV,Vjo),e(ib,Xjo),e(N,zjo),e(N,db),e(db,Vhe),e(Vhe,Wjo),e(db,Qjo),e(db,wV),e(wV,Hjo),e(db,Ujo),e(N,Jjo),e(N,cb),e(cb,Xhe),e(Xhe,Yjo),e(cb,Kjo),e(cb,AV),e(AV,Zjo),e(cb,eDo),e(N,oDo),e(N,fb),e(fb,zhe),e(zhe,rDo),e(fb,tDo),e(fb,LV),e(LV,aDo),e(fb,nDo),e(N,sDo),e(N,mb),e(mb,Whe),e(Whe,lDo),e(mb,iDo),e(mb,yV),e(yV,dDo),e(mb,cDo),e(N,fDo),e(N,gb),e(gb,Qhe),e(Qhe,mDo),e(gb,gDo),e(gb,xV),e(xV,hDo),e(gb,pDo),e(oo,_Do),e(oo,hb),e(hb,uDo),e(hb,Hhe),e(Hhe,bDo),e(hb,vDo),e(hb,Uhe),e(Uhe,FDo),e(oo,TDo),M(pb,oo,null),b(f,jGe,u),b(f,Ki,u),e(Ki,_b),e(_b,Jhe),M(wL,Jhe,null),e(Ki,MDo),e(Ki,Yhe),e(Yhe,EDo),b(f,DGe,u),b(f,Bo,u),M(AL,Bo,null),e(Bo,CDo),e(Bo,Zi),e(Zi,wDo),e(Zi,$V),e($V,ADo),e(Zi,LDo),e(Zi,kV),e(kV,yDo),e(Zi,xDo),e(Bo,$Do),e(Bo,LL),e(LL,kDo),e(LL,Khe),e(Khe,SDo),e(LL,RDo),e(Bo,PDo),e(Bo,ft),M(yL,ft,null),e(ft,BDo),e(ft,Zhe),e(Zhe,IDo),e(ft,NDo),e(ft,ed),e(ed,qDo),e(ed,epe),e(epe,jDo),e(ed,DDo),e(ed,SV),e(SV,GDo),e(ed,ODo),e(ft,VDo),M(ub,ft,null),e(Bo,XDo),e(Bo,ro),M(xL,ro,null),e(ro,zDo),e(ro,ope),e(ope,WDo),e(ro,QDo),e(ro,qa),e(qa,HDo),e(qa,rpe),e(rpe,UDo),e(qa,JDo),e(qa,tpe),e(tpe,YDo),e(qa,KDo),e(qa,ape),e(ape,ZDo),e(qa,eGo),e(ro,oGo),e(ro,Z),e(Z,bb),e(bb,npe),e(npe,rGo),e(bb,tGo),e(bb,RV),e(RV,aGo),e(bb,nGo),e(Z,sGo),e(Z,vb),e(vb,spe),e(spe,lGo),e(vb,iGo),e(vb,PV),e(PV,dGo),e(vb,cGo),e(Z,fGo),e(Z,Fb),e(Fb,lpe),e(lpe,mGo),e(Fb,gGo),e(Fb,BV),e(BV,hGo),e(Fb,pGo),e(Z,_Go),e(Z,Tb),e(Tb,ipe),e(ipe,uGo),e(Tb,bGo),e(Tb,IV),e(IV,vGo),e(Tb,FGo),e(Z,TGo),e(Z,Mb),e(Mb,dpe),e(dpe,MGo),e(Mb,EGo),e(Mb,NV),e(NV,CGo),e(Mb,wGo),e(Z,AGo),e(Z,Eb),e(Eb,cpe),e(cpe,LGo),e(Eb,yGo),e(Eb,qV),e(qV,xGo),e(Eb,$Go),e(Z,kGo),e(Z,Cb),e(Cb,fpe),e(fpe,SGo),e(Cb,RGo),e(Cb,jV),e(jV,PGo),e(Cb,BGo),e(Z,IGo),e(Z,wb),e(wb,mpe),e(mpe,NGo),e(wb,qGo),e(wb,DV),e(DV,jGo),e(wb,DGo),e(Z,GGo),e(Z,Ab),e(Ab,gpe),e(gpe,OGo),e(Ab,VGo),e(Ab,GV),e(GV,XGo),e(Ab,zGo),e(Z,WGo),e(Z,Lb),e(Lb,hpe),e(hpe,QGo),e(Lb,HGo),e(Lb,OV),e(OV,UGo),e(Lb,JGo),e(Z,YGo),e(Z,yb),e(yb,ppe),e(ppe,KGo),e(yb,ZGo),e(yb,VV),e(VV,eOo),e(yb,oOo),e(Z,rOo),e(Z,xb),e(xb,_pe),e(_pe,tOo),e(xb,aOo),e(xb,XV),e(XV,nOo),e(xb,sOo),e(Z,lOo),e(Z,$b),e($b,upe),e(upe,iOo),e($b,dOo),e($b,zV),e(zV,cOo),e($b,fOo),e(Z,mOo),e(Z,kb),e(kb,bpe),e(bpe,gOo),e(kb,hOo),e(kb,WV),e(WV,pOo),e(kb,_Oo),e(Z,uOo),e(Z,Sb),e(Sb,vpe),e(vpe,bOo),e(Sb,vOo),e(Sb,QV),e(QV,FOo),e(Sb,TOo),e(Z,MOo),e(Z,Rb),e(Rb,Fpe),e(Fpe,EOo),e(Rb,COo),e(Rb,HV),e(HV,wOo),e(Rb,AOo),e(Z,LOo),e(Z,Pb),e(Pb,Tpe),e(Tpe,yOo),e(Pb,xOo),e(Pb,UV),e(UV,$Oo),e(Pb,kOo),e(Z,SOo),e(Z,Bb),e(Bb,Mpe),e(Mpe,ROo),e(Bb,POo),e(Bb,JV),e(JV,BOo),e(Bb,IOo),e(Z,NOo),e(Z,Ib),e(Ib,Epe),e(Epe,qOo),e(Ib,jOo),e(Ib,YV),e(YV,DOo),e(Ib,GOo),e(Z,OOo),e(Z,Nb),e(Nb,Cpe),e(Cpe,VOo),e(Nb,XOo),e(Nb,KV),e(KV,zOo),e(Nb,WOo),e(Z,QOo),e(Z,qb),e(qb,wpe),e(wpe,HOo),e(qb,UOo),e(qb,ZV),e(ZV,JOo),e(qb,YOo),e(Z,KOo),e(Z,jb),e(jb,Ape),e(Ape,ZOo),e(jb,eVo),e(jb,eX),e(eX,oVo),e(jb,rVo),e(Z,tVo),e(Z,Db),e(Db,Lpe),e(Lpe,aVo),e(Db,nVo),e(Db,oX),e(oX,sVo),e(Db,lVo),e(Z,iVo),e(Z,Gb),e(Gb,ype),e(ype,dVo),e(Gb,cVo),e(Gb,rX),e(rX,fVo),e(Gb,mVo),e(Z,gVo),e(Z,Ob),e(Ob,xpe),e(xpe,hVo),e(Ob,pVo),e(Ob,tX),e(tX,_Vo),e(Ob,uVo),e(Z,bVo),e(Z,Vb),e(Vb,$pe),e($pe,vVo),e(Vb,FVo),e(Vb,aX),e(aX,TVo),e(Vb,MVo),e(Z,EVo),e(Z,Xb),e(Xb,kpe),e(kpe,CVo),e(Xb,wVo),e(Xb,nX),e(nX,AVo),e(Xb,LVo),e(Z,yVo),e(Z,zb),e(zb,Spe),e(Spe,xVo),e(zb,$Vo),e(zb,sX),e(sX,kVo),e(zb,SVo),e(Z,RVo),e(Z,Wb),e(Wb,Rpe),e(Rpe,PVo),e(Wb,BVo),e(Wb,lX),e(lX,IVo),e(Wb,NVo),e(ro,qVo),e(ro,Qb),e(Qb,jVo),e(Qb,Ppe),e(Ppe,DVo),e(Qb,GVo),e(Qb,Bpe),e(Bpe,OVo),e(ro,VVo),M(Hb,ro,null),b(f,GGe,u),b(f,od,u),e(od,Ub),e(Ub,Ipe),M($L,Ipe,null),e(od,XVo),e(od,Npe),e(Npe,zVo),b(f,OGe,u),b(f,Io,u),M(kL,Io,null),e(Io,WVo),e(Io,rd),e(rd,QVo),e(rd,iX),e(iX,HVo),e(rd,UVo),e(rd,dX),e(dX,JVo),e(rd,YVo),e(Io,KVo),e(Io,SL),e(SL,ZVo),e(SL,qpe),e(qpe,eXo),e(SL,oXo),e(Io,rXo),e(Io,mt),M(RL,mt,null),e(mt,tXo),e(mt,jpe),e(jpe,aXo),e(mt,nXo),e(mt,td),e(td,sXo),e(td,Dpe),e(Dpe,lXo),e(td,iXo),e(td,cX),e(cX,dXo),e(td,cXo),e(mt,fXo),M(Jb,mt,null),e(Io,mXo),e(Io,to),M(PL,to,null),e(to,gXo),e(to,Gpe),e(Gpe,hXo),e(to,pXo),e(to,ja),e(ja,_Xo),e(ja,Ope),e(Ope,uXo),e(ja,bXo),e(ja,Vpe),e(Vpe,vXo),e(ja,FXo),e(ja,Xpe),e(Xpe,TXo),e(ja,MXo),e(to,EXo),e(to,Zr),e(Zr,Yb),e(Yb,zpe),e(zpe,CXo),e(Yb,wXo),e(Yb,fX),e(fX,AXo),e(Yb,LXo),e(Zr,yXo),e(Zr,Kb),e(Kb,Wpe),e(Wpe,xXo),e(Kb,$Xo),e(Kb,mX),e(mX,kXo),e(Kb,SXo),e(Zr,RXo),e(Zr,Zb),e(Zb,Qpe),e(Qpe,PXo),e(Zb,BXo),e(Zb,gX),e(gX,IXo),e(Zb,NXo),e(Zr,qXo),e(Zr,e2),e(e2,Hpe),e(Hpe,jXo),e(e2,DXo),e(e2,hX),e(hX,GXo),e(e2,OXo),e(Zr,VXo),e(Zr,o2),e(o2,Upe),e(Upe,XXo),e(o2,zXo),e(o2,pX),e(pX,WXo),e(o2,QXo),e(to,HXo),e(to,r2),e(r2,UXo),e(r2,Jpe),e(Jpe,JXo),e(r2,YXo),e(r2,Ype),e(Ype,KXo),e(to,ZXo),M(t2,to,null),b(f,VGe,u),b(f,ad,u),e(ad,a2),e(a2,Kpe),M(BL,Kpe,null),e(ad,ezo),e(ad,Zpe),e(Zpe,ozo),b(f,XGe,u),b(f,No,u),M(IL,No,null),e(No,rzo),e(No,nd),e(nd,tzo),e(nd,_X),e(_X,azo),e(nd,nzo),e(nd,uX),e(uX,szo),e(nd,lzo),e(No,izo),e(No,NL),e(NL,dzo),e(NL,e_e),e(e_e,czo),e(NL,fzo),e(No,mzo),e(No,gt),M(qL,gt,null),e(gt,gzo),e(gt,o_e),e(o_e,hzo),e(gt,pzo),e(gt,sd),e(sd,_zo),e(sd,r_e),e(r_e,uzo),e(sd,bzo),e(sd,bX),e(bX,vzo),e(sd,Fzo),e(gt,Tzo),M(n2,gt,null),e(No,Mzo),e(No,ao),M(jL,ao,null),e(ao,Ezo),e(ao,t_e),e(t_e,Czo),e(ao,wzo),e(ao,Da),e(Da,Azo),e(Da,a_e),e(a_e,Lzo),e(Da,yzo),e(Da,n_e),e(n_e,xzo),e(Da,$zo),e(Da,s_e),e(s_e,kzo),e(Da,Szo),e(ao,Rzo),e(ao,H),e(H,s2),e(s2,l_e),e(l_e,Pzo),e(s2,Bzo),e(s2,vX),e(vX,Izo),e(s2,Nzo),e(H,qzo),e(H,l2),e(l2,i_e),e(i_e,jzo),e(l2,Dzo),e(l2,FX),e(FX,Gzo),e(l2,Ozo),e(H,Vzo),e(H,i2),e(i2,d_e),e(d_e,Xzo),e(i2,zzo),e(i2,TX),e(TX,Wzo),e(i2,Qzo),e(H,Hzo),e(H,d2),e(d2,c_e),e(c_e,Uzo),e(d2,Jzo),e(d2,MX),e(MX,Yzo),e(d2,Kzo),e(H,Zzo),e(H,c2),e(c2,f_e),e(f_e,eWo),e(c2,oWo),e(c2,EX),e(EX,rWo),e(c2,tWo),e(H,aWo),e(H,f2),e(f2,m_e),e(m_e,nWo),e(f2,sWo),e(f2,CX),e(CX,lWo),e(f2,iWo),e(H,dWo),e(H,m2),e(m2,g_e),e(g_e,cWo),e(m2,fWo),e(m2,wX),e(wX,mWo),e(m2,gWo),e(H,hWo),e(H,g2),e(g2,h_e),e(h_e,pWo),e(g2,_Wo),e(g2,AX),e(AX,uWo),e(g2,bWo),e(H,vWo),e(H,h2),e(h2,p_e),e(p_e,FWo),e(h2,TWo),e(h2,LX),e(LX,MWo),e(h2,EWo),e(H,CWo),e(H,p2),e(p2,__e),e(__e,wWo),e(p2,AWo),e(p2,yX),e(yX,LWo),e(p2,yWo),e(H,xWo),e(H,_2),e(_2,u_e),e(u_e,$Wo),e(_2,kWo),e(_2,xX),e(xX,SWo),e(_2,RWo),e(H,PWo),e(H,u2),e(u2,b_e),e(b_e,BWo),e(u2,IWo),e(u2,$X),e($X,NWo),e(u2,qWo),e(H,jWo),e(H,b2),e(b2,v_e),e(v_e,DWo),e(b2,GWo),e(b2,kX),e(kX,OWo),e(b2,VWo),e(H,XWo),e(H,v2),e(v2,F_e),e(F_e,zWo),e(v2,WWo),e(v2,SX),e(SX,QWo),e(v2,HWo),e(H,UWo),e(H,F2),e(F2,T_e),e(T_e,JWo),e(F2,YWo),e(F2,RX),e(RX,KWo),e(F2,ZWo),e(H,eQo),e(H,T2),e(T2,M_e),e(M_e,oQo),e(T2,rQo),e(T2,PX),e(PX,tQo),e(T2,aQo),e(H,nQo),e(H,M2),e(M2,E_e),e(E_e,sQo),e(M2,lQo),e(M2,BX),e(BX,iQo),e(M2,dQo),e(H,cQo),e(H,E2),e(E2,C_e),e(C_e,fQo),e(E2,mQo),e(E2,IX),e(IX,gQo),e(E2,hQo),e(H,pQo),e(H,C2),e(C2,w_e),e(w_e,_Qo),e(C2,uQo),e(C2,NX),e(NX,bQo),e(C2,vQo),e(H,FQo),e(H,w2),e(w2,A_e),e(A_e,TQo),e(w2,MQo),e(w2,qX),e(qX,EQo),e(w2,CQo),e(H,wQo),e(H,A2),e(A2,L_e),e(L_e,AQo),e(A2,LQo),e(A2,jX),e(jX,yQo),e(A2,xQo),e(H,$Qo),e(H,L2),e(L2,y_e),e(y_e,kQo),e(L2,SQo),e(L2,DX),e(DX,RQo),e(L2,PQo),e(H,BQo),e(H,y2),e(y2,x_e),e(x_e,IQo),e(y2,NQo),e(y2,GX),e(GX,qQo),e(y2,jQo),e(H,DQo),e(H,x2),e(x2,$_e),e($_e,GQo),e(x2,OQo),e(x2,OX),e(OX,VQo),e(x2,XQo),e(H,zQo),e(H,$2),e($2,k_e),e(k_e,WQo),e($2,QQo),e($2,VX),e(VX,HQo),e($2,UQo),e(H,JQo),e(H,k2),e(k2,S_e),e(S_e,YQo),e(k2,KQo),e(k2,XX),e(XX,ZQo),e(k2,eHo),e(H,oHo),e(H,S2),e(S2,R_e),e(R_e,rHo),e(S2,tHo),e(S2,zX),e(zX,aHo),e(S2,nHo),e(H,sHo),e(H,R2),e(R2,P_e),e(P_e,lHo),e(R2,iHo),e(R2,WX),e(WX,dHo),e(R2,cHo),e(H,fHo),e(H,P2),e(P2,B_e),e(B_e,mHo),e(P2,gHo),e(P2,QX),e(QX,hHo),e(P2,pHo),e(H,_Ho),e(H,B2),e(B2,I_e),e(I_e,uHo),e(B2,bHo),e(B2,HX),e(HX,vHo),e(B2,FHo),e(H,THo),e(H,I2),e(I2,N_e),e(N_e,MHo),e(I2,EHo),e(I2,UX),e(UX,CHo),e(I2,wHo),e(H,AHo),e(H,N2),e(N2,q_e),e(q_e,LHo),e(N2,yHo),e(N2,JX),e(JX,xHo),e(N2,$Ho),e(H,kHo),e(H,q2),e(q2,j_e),e(j_e,SHo),e(q2,RHo),e(q2,YX),e(YX,PHo),e(q2,BHo),e(H,IHo),e(H,j2),e(j2,D_e),e(D_e,NHo),e(j2,qHo),e(j2,KX),e(KX,jHo),e(j2,DHo),e(H,GHo),e(H,D2),e(D2,G_e),e(G_e,OHo),e(D2,VHo),e(D2,ZX),e(ZX,XHo),e(D2,zHo),e(ao,WHo),e(ao,G2),e(G2,QHo),e(G2,O_e),e(O_e,HHo),e(G2,UHo),e(G2,V_e),e(V_e,JHo),e(ao,YHo),M(O2,ao,null),b(f,zGe,u),b(f,ld,u),e(ld,V2),e(V2,X_e),M(DL,X_e,null),e(ld,KHo),e(ld,z_e),e(z_e,ZHo),b(f,WGe,u),b(f,qo,u),M(GL,qo,null),e(qo,eUo),e(qo,id),e(id,oUo),e(id,ez),e(ez,rUo),e(id,tUo),e(id,oz),e(oz,aUo),e(id,nUo),e(qo,sUo),e(qo,OL),e(OL,lUo),e(OL,W_e),e(W_e,iUo),e(OL,dUo),e(qo,cUo),e(qo,ht),M(VL,ht,null),e(ht,fUo),e(ht,Q_e),e(Q_e,mUo),e(ht,gUo),e(ht,dd),e(dd,hUo),e(dd,H_e),e(H_e,pUo),e(dd,_Uo),e(dd,rz),e(rz,uUo),e(dd,bUo),e(ht,vUo),M(X2,ht,null),e(qo,FUo),e(qo,no),M(XL,no,null),e(no,TUo),e(no,U_e),e(U_e,MUo),e(no,EUo),e(no,Ga),e(Ga,CUo),e(Ga,J_e),e(J_e,wUo),e(Ga,AUo),e(Ga,Y_e),e(Y_e,LUo),e(Ga,yUo),e(Ga,K_e),e(K_e,xUo),e(Ga,$Uo),e(no,kUo),e(no,V),e(V,z2),e(z2,Z_e),e(Z_e,SUo),e(z2,RUo),e(z2,tz),e(tz,PUo),e(z2,BUo),e(V,IUo),e(V,W2),e(W2,eue),e(eue,NUo),e(W2,qUo),e(W2,az),e(az,jUo),e(W2,DUo),e(V,GUo),e(V,Q2),e(Q2,oue),e(oue,OUo),e(Q2,VUo),e(Q2,nz),e(nz,XUo),e(Q2,zUo),e(V,WUo),e(V,H2),e(H2,rue),e(rue,QUo),e(H2,HUo),e(H2,sz),e(sz,UUo),e(H2,JUo),e(V,YUo),e(V,U2),e(U2,tue),e(tue,KUo),e(U2,ZUo),e(U2,lz),e(lz,eJo),e(U2,oJo),e(V,rJo),e(V,J2),e(J2,aue),e(aue,tJo),e(J2,aJo),e(J2,iz),e(iz,nJo),e(J2,sJo),e(V,lJo),e(V,Y2),e(Y2,nue),e(nue,iJo),e(Y2,dJo),e(Y2,dz),e(dz,cJo),e(Y2,fJo),e(V,mJo),e(V,K2),e(K2,sue),e(sue,gJo),e(K2,hJo),e(K2,cz),e(cz,pJo),e(K2,_Jo),e(V,uJo),e(V,Z2),e(Z2,lue),e(lue,bJo),e(Z2,vJo),e(Z2,fz),e(fz,FJo),e(Z2,TJo),e(V,MJo),e(V,ev),e(ev,iue),e(iue,EJo),e(ev,CJo),e(ev,mz),e(mz,wJo),e(ev,AJo),e(V,LJo),e(V,ov),e(ov,due),e(due,yJo),e(ov,xJo),e(ov,gz),e(gz,$Jo),e(ov,kJo),e(V,SJo),e(V,rv),e(rv,cue),e(cue,RJo),e(rv,PJo),e(rv,hz),e(hz,BJo),e(rv,IJo),e(V,NJo),e(V,tv),e(tv,fue),e(fue,qJo),e(tv,jJo),e(tv,pz),e(pz,DJo),e(tv,GJo),e(V,OJo),e(V,av),e(av,mue),e(mue,VJo),e(av,XJo),e(av,_z),e(_z,zJo),e(av,WJo),e(V,QJo),e(V,nv),e(nv,gue),e(gue,HJo),e(nv,UJo),e(nv,uz),e(uz,JJo),e(nv,YJo),e(V,KJo),e(V,sv),e(sv,hue),e(hue,ZJo),e(sv,eYo),e(sv,bz),e(bz,oYo),e(sv,rYo),e(V,tYo),e(V,lv),e(lv,pue),e(pue,aYo),e(lv,nYo),e(lv,vz),e(vz,sYo),e(lv,lYo),e(V,iYo),e(V,iv),e(iv,_ue),e(_ue,dYo),e(iv,cYo),e(iv,Fz),e(Fz,fYo),e(iv,mYo),e(V,gYo),e(V,dv),e(dv,uue),e(uue,hYo),e(dv,pYo),e(dv,Tz),e(Tz,_Yo),e(dv,uYo),e(V,bYo),e(V,cv),e(cv,bue),e(bue,vYo),e(cv,FYo),e(cv,Mz),e(Mz,TYo),e(cv,MYo),e(V,EYo),e(V,fv),e(fv,vue),e(vue,CYo),e(fv,wYo),e(fv,Ez),e(Ez,AYo),e(fv,LYo),e(V,yYo),e(V,mv),e(mv,Fue),e(Fue,xYo),e(mv,$Yo),e(mv,Cz),e(Cz,kYo),e(mv,SYo),e(V,RYo),e(V,gv),e(gv,Tue),e(Tue,PYo),e(gv,BYo),e(gv,wz),e(wz,IYo),e(gv,NYo),e(V,qYo),e(V,hv),e(hv,Mue),e(Mue,jYo),e(hv,DYo),e(hv,Az),e(Az,GYo),e(hv,OYo),e(V,VYo),e(V,pv),e(pv,Eue),e(Eue,XYo),e(pv,zYo),e(pv,Lz),e(Lz,WYo),e(pv,QYo),e(V,HYo),e(V,_v),e(_v,Cue),e(Cue,UYo),e(_v,JYo),e(_v,yz),e(yz,YYo),e(_v,KYo),e(V,ZYo),e(V,uv),e(uv,wue),e(wue,eKo),e(uv,oKo),e(uv,xz),e(xz,rKo),e(uv,tKo),e(V,aKo),e(V,bv),e(bv,Aue),e(Aue,nKo),e(bv,sKo),e(bv,$z),e($z,lKo),e(bv,iKo),e(V,dKo),e(V,vv),e(vv,Lue),e(Lue,cKo),e(vv,fKo),e(vv,kz),e(kz,mKo),e(vv,gKo),e(V,hKo),e(V,Fv),e(Fv,yue),e(yue,pKo),e(Fv,_Ko),e(Fv,Sz),e(Sz,uKo),e(Fv,bKo),e(V,vKo),e(V,Tv),e(Tv,xue),e(xue,FKo),e(Tv,TKo),e(Tv,Rz),e(Rz,MKo),e(Tv,EKo),e(V,CKo),e(V,Mv),e(Mv,$ue),e($ue,wKo),e(Mv,AKo),e(Mv,Pz),e(Pz,LKo),e(Mv,yKo),e(V,xKo),e(V,Ev),e(Ev,kue),e(kue,$Ko),e(Ev,kKo),e(Ev,Bz),e(Bz,SKo),e(Ev,RKo),e(V,PKo),e(V,Cv),e(Cv,Sue),e(Sue,BKo),e(Cv,IKo),e(Cv,Iz),e(Iz,NKo),e(Cv,qKo),e(V,jKo),e(V,wv),e(wv,Rue),e(Rue,DKo),e(wv,GKo),e(wv,Nz),e(Nz,OKo),e(wv,VKo),e(V,XKo),e(V,Av),e(Av,Pue),e(Pue,zKo),e(Av,WKo),e(Av,qz),e(qz,QKo),e(Av,HKo),e(V,UKo),e(V,Lv),e(Lv,Bue),e(Bue,JKo),e(Lv,YKo),e(Lv,jz),e(jz,KKo),e(Lv,ZKo),e(V,eZo),e(V,yv),e(yv,Iue),e(Iue,oZo),e(yv,rZo),e(yv,Dz),e(Dz,tZo),e(yv,aZo),e(V,nZo),e(V,xv),e(xv,Nue),e(Nue,sZo),e(xv,lZo),e(xv,Gz),e(Gz,iZo),e(xv,dZo),e(V,cZo),e(V,$v),e($v,que),e(que,fZo),e($v,mZo),e($v,Oz),e(Oz,gZo),e($v,hZo),e(no,pZo),e(no,kv),e(kv,_Zo),e(kv,jue),e(jue,uZo),e(kv,bZo),e(kv,Due),e(Due,vZo),e(no,FZo),M(Sv,no,null),b(f,QGe,u),b(f,cd,u),e(cd,Rv),e(Rv,Gue),M(zL,Gue,null),e(cd,TZo),e(cd,Oue),e(Oue,MZo),b(f,HGe,u),b(f,jo,u),M(WL,jo,null),e(jo,EZo),e(jo,fd),e(fd,CZo),e(fd,Vz),e(Vz,wZo),e(fd,AZo),e(fd,Xz),e(Xz,LZo),e(fd,yZo),e(jo,xZo),e(jo,QL),e(QL,$Zo),e(QL,Vue),e(Vue,kZo),e(QL,SZo),e(jo,RZo),e(jo,pt),M(HL,pt,null),e(pt,PZo),e(pt,Xue),e(Xue,BZo),e(pt,IZo),e(pt,md),e(md,NZo),e(md,zue),e(zue,qZo),e(md,jZo),e(md,zz),e(zz,DZo),e(md,GZo),e(pt,OZo),M(Pv,pt,null),e(jo,VZo),e(jo,so),M(UL,so,null),e(so,XZo),e(so,Wue),e(Wue,zZo),e(so,WZo),e(so,Oa),e(Oa,QZo),e(Oa,Que),e(Que,HZo),e(Oa,UZo),e(Oa,Hue),e(Hue,JZo),e(Oa,YZo),e(Oa,Uue),e(Uue,KZo),e(Oa,ZZo),e(so,eer),e(so,Jue),e(Jue,Bv),e(Bv,Yue),e(Yue,oer),e(Bv,rer),e(Bv,Wz),e(Wz,ter),e(Bv,aer),e(so,ner),e(so,Iv),e(Iv,ser),e(Iv,Kue),e(Kue,ler),e(Iv,ier),e(Iv,Zue),e(Zue,der),e(so,cer),M(Nv,so,null),b(f,UGe,u),b(f,gd,u),e(gd,qv),e(qv,e1e),M(JL,e1e,null),e(gd,fer),e(gd,o1e),e(o1e,mer),b(f,JGe,u),b(f,Do,u),M(YL,Do,null),e(Do,ger),e(Do,hd),e(hd,her),e(hd,Qz),e(Qz,per),e(hd,_er),e(hd,Hz),e(Hz,uer),e(hd,ber),e(Do,ver),e(Do,KL),e(KL,Fer),e(KL,r1e),e(r1e,Ter),e(KL,Mer),e(Do,Eer),e(Do,_t),M(ZL,_t,null),e(_t,Cer),e(_t,t1e),e(t1e,wer),e(_t,Aer),e(_t,pd),e(pd,Ler),e(pd,a1e),e(a1e,yer),e(pd,xer),e(pd,Uz),e(Uz,$er),e(pd,ker),e(_t,Ser),M(jv,_t,null),e(Do,Rer),e(Do,lo),M(ey,lo,null),e(lo,Per),e(lo,n1e),e(n1e,Ber),e(lo,Ier),e(lo,Va),e(Va,Ner),e(Va,s1e),e(s1e,qer),e(Va,jer),e(Va,l1e),e(l1e,Der),e(Va,Ger),e(Va,i1e),e(i1e,Oer),e(Va,Ver),e(lo,Xer),e(lo,ue),e(ue,Dv),e(Dv,d1e),e(d1e,zer),e(Dv,Wer),e(Dv,Jz),e(Jz,Qer),e(Dv,Her),e(ue,Uer),e(ue,Gv),e(Gv,c1e),e(c1e,Jer),e(Gv,Yer),e(Gv,Yz),e(Yz,Ker),e(Gv,Zer),e(ue,eor),e(ue,Ov),e(Ov,f1e),e(f1e,oor),e(Ov,ror),e(Ov,Kz),e(Kz,tor),e(Ov,aor),e(ue,nor),e(ue,Vv),e(Vv,m1e),e(m1e,sor),e(Vv,lor),e(Vv,Zz),e(Zz,ior),e(Vv,dor),e(ue,cor),e(ue,Os),e(Os,g1e),e(g1e,mor),e(Os,gor),e(Os,eW),e(eW,hor),e(Os,por),e(Os,oW),e(oW,_or),e(Os,uor),e(ue,bor),e(ue,Xv),e(Xv,h1e),e(h1e,vor),e(Xv,For),e(Xv,rW),e(rW,Tor),e(Xv,Mor),e(ue,Eor),e(ue,Vs),e(Vs,p1e),e(p1e,Cor),e(Vs,wor),e(Vs,tW),e(tW,Aor),e(Vs,Lor),e(Vs,aW),e(aW,yor),e(Vs,xor),e(ue,$or),e(ue,zv),e(zv,_1e),e(_1e,kor),e(zv,Sor),e(zv,nW),e(nW,Ror),e(zv,Por),e(ue,Bor),e(ue,ut),e(ut,u1e),e(u1e,Ior),e(ut,Nor),e(ut,sW),e(sW,qor),e(ut,jor),e(ut,lW),e(lW,Dor),e(ut,Gor),e(ut,iW),e(iW,Oor),e(ut,Vor),e(ue,Xor),e(ue,Wv),e(Wv,b1e),e(b1e,zor),e(Wv,Wor),e(Wv,dW),e(dW,Qor),e(Wv,Hor),e(ue,Uor),e(ue,Qv),e(Qv,v1e),e(v1e,Jor),e(Qv,Yor),e(Qv,cW),e(cW,Kor),e(Qv,Zor),e(ue,err),e(ue,Hv),e(Hv,F1e),e(F1e,orr),e(Hv,rrr),e(Hv,fW),e(fW,trr),e(Hv,arr),e(ue,nrr),e(ue,Uv),e(Uv,T1e),e(T1e,srr),e(Uv,lrr),e(Uv,mW),e(mW,irr),e(Uv,drr),e(ue,crr),e(ue,Jv),e(Jv,M1e),e(M1e,frr),e(Jv,mrr),e(Jv,gW),e(gW,grr),e(Jv,hrr),e(ue,prr),e(ue,Yv),e(Yv,E1e),e(E1e,_rr),e(Yv,urr),e(Yv,hW),e(hW,brr),e(Yv,vrr),e(ue,Frr),e(ue,Kv),e(Kv,C1e),e(C1e,Trr),e(Kv,Mrr),e(Kv,pW),e(pW,Err),e(Kv,Crr),e(lo,wrr),e(lo,Zv),e(Zv,Arr),e(Zv,w1e),e(w1e,Lrr),e(Zv,yrr),e(Zv,A1e),e(A1e,xrr),e(lo,$rr),M(eF,lo,null),b(f,YGe,u),b(f,_d,u),e(_d,oF),e(oF,L1e),M(oy,L1e,null),e(_d,krr),e(_d,y1e),e(y1e,Srr),b(f,KGe,u),b(f,Go,u),M(ry,Go,null),e(Go,Rrr),e(Go,ud),e(ud,Prr),e(ud,_W),e(_W,Brr),e(ud,Irr),e(ud,uW),e(uW,Nrr),e(ud,qrr),e(Go,jrr),e(Go,ty),e(ty,Drr),e(ty,x1e),e(x1e,Grr),e(ty,Orr),e(Go,Vrr),e(Go,bt),M(ay,bt,null),e(bt,Xrr),e(bt,$1e),e($1e,zrr),e(bt,Wrr),e(bt,bd),e(bd,Qrr),e(bd,k1e),e(k1e,Hrr),e(bd,Urr),e(bd,bW),e(bW,Jrr),e(bd,Yrr),e(bt,Krr),M(rF,bt,null),e(Go,Zrr),e(Go,io),M(ny,io,null),e(io,etr),e(io,S1e),e(S1e,otr),e(io,rtr),e(io,Xa),e(Xa,ttr),e(Xa,R1e),e(R1e,atr),e(Xa,ntr),e(Xa,P1e),e(P1e,str),e(Xa,ltr),e(Xa,B1e),e(B1e,itr),e(Xa,dtr),e(io,ctr),e(io,I1e),e(I1e,tF),e(tF,N1e),e(N1e,ftr),e(tF,mtr),e(tF,vW),e(vW,gtr),e(tF,htr),e(io,ptr),e(io,aF),e(aF,_tr),e(aF,q1e),e(q1e,utr),e(aF,btr),e(aF,j1e),e(j1e,vtr),e(io,Ftr),M(nF,io,null),b(f,ZGe,u),b(f,vd,u),e(vd,sF),e(sF,D1e),M(sy,D1e,null),e(vd,Ttr),e(vd,G1e),e(G1e,Mtr),b(f,eOe,u),b(f,Oo,u),M(ly,Oo,null),e(Oo,Etr),e(Oo,Fd),e(Fd,Ctr),e(Fd,FW),e(FW,wtr),e(Fd,Atr),e(Fd,TW),e(TW,Ltr),e(Fd,ytr),e(Oo,xtr),e(Oo,iy),e(iy,$tr),e(iy,O1e),e(O1e,ktr),e(iy,Str),e(Oo,Rtr),e(Oo,vt),M(dy,vt,null),e(vt,Ptr),e(vt,V1e),e(V1e,Btr),e(vt,Itr),e(vt,Td),e(Td,Ntr),e(Td,X1e),e(X1e,qtr),e(Td,jtr),e(Td,MW),e(MW,Dtr),e(Td,Gtr),e(vt,Otr),M(lF,vt,null),e(Oo,Vtr),e(Oo,co),M(cy,co,null),e(co,Xtr),e(co,z1e),e(z1e,ztr),e(co,Wtr),e(co,za),e(za,Qtr),e(za,W1e),e(W1e,Htr),e(za,Utr),e(za,Q1e),e(Q1e,Jtr),e(za,Ytr),e(za,H1e),e(H1e,Ktr),e(za,Ztr),e(co,ear),e(co,U1e),e(U1e,iF),e(iF,J1e),e(J1e,oar),e(iF,rar),e(iF,EW),e(EW,tar),e(iF,aar),e(co,nar),e(co,dF),e(dF,sar),e(dF,Y1e),e(Y1e,lar),e(dF,iar),e(dF,K1e),e(K1e,dar),e(co,car),M(cF,co,null),b(f,oOe,u),b(f,Md,u),e(Md,fF),e(fF,Z1e),M(fy,Z1e,null),e(Md,far),e(Md,e7e),e(e7e,mar),b(f,rOe,u),b(f,Vo,u),M(my,Vo,null),e(Vo,gar),e(Vo,Ed),e(Ed,har),e(Ed,CW),e(CW,par),e(Ed,_ar),e(Ed,wW),e(wW,uar),e(Ed,bar),e(Vo,Far),e(Vo,gy),e(gy,Tar),e(gy,o7e),e(o7e,Mar),e(gy,Ear),e(Vo,Car),e(Vo,Ft),M(hy,Ft,null),e(Ft,war),e(Ft,r7e),e(r7e,Aar),e(Ft,Lar),e(Ft,Cd),e(Cd,yar),e(Cd,t7e),e(t7e,xar),e(Cd,$ar),e(Cd,AW),e(AW,kar),e(Cd,Sar),e(Ft,Rar),M(mF,Ft,null),e(Vo,Par),e(Vo,fo),M(py,fo,null),e(fo,Bar),e(fo,a7e),e(a7e,Iar),e(fo,Nar),e(fo,Wa),e(Wa,qar),e(Wa,n7e),e(n7e,jar),e(Wa,Dar),e(Wa,s7e),e(s7e,Gar),e(Wa,Oar),e(Wa,l7e),e(l7e,Var),e(Wa,Xar),e(fo,zar),e(fo,Pe),e(Pe,gF),e(gF,i7e),e(i7e,War),e(gF,Qar),e(gF,LW),e(LW,Har),e(gF,Uar),e(Pe,Jar),e(Pe,hF),e(hF,d7e),e(d7e,Yar),e(hF,Kar),e(hF,yW),e(yW,Zar),e(hF,enr),e(Pe,onr),e(Pe,pF),e(pF,c7e),e(c7e,rnr),e(pF,tnr),e(pF,xW),e(xW,anr),e(pF,nnr),e(Pe,snr),e(Pe,_F),e(_F,f7e),e(f7e,lnr),e(_F,inr),e(_F,$W),e($W,dnr),e(_F,cnr),e(Pe,fnr),e(Pe,uF),e(uF,m7e),e(m7e,mnr),e(uF,gnr),e(uF,kW),e(kW,hnr),e(uF,pnr),e(Pe,_nr),e(Pe,bF),e(bF,g7e),e(g7e,unr),e(bF,bnr),e(bF,SW),e(SW,vnr),e(bF,Fnr),e(Pe,Tnr),e(Pe,vF),e(vF,h7e),e(h7e,Mnr),e(vF,Enr),e(vF,RW),e(RW,Cnr),e(vF,wnr),e(Pe,Anr),e(Pe,FF),e(FF,p7e),e(p7e,Lnr),e(FF,ynr),e(FF,PW),e(PW,xnr),e(FF,$nr),e(Pe,knr),e(Pe,TF),e(TF,_7e),e(_7e,Snr),e(TF,Rnr),e(TF,BW),e(BW,Pnr),e(TF,Bnr),e(fo,Inr),e(fo,MF),e(MF,Nnr),e(MF,u7e),e(u7e,qnr),e(MF,jnr),e(MF,b7e),e(b7e,Dnr),e(fo,Gnr),M(EF,fo,null),b(f,tOe,u),b(f,wd,u),e(wd,CF),e(CF,v7e),M(_y,v7e,null),e(wd,Onr),e(wd,F7e),e(F7e,Vnr),b(f,aOe,u),b(f,Xo,u),M(uy,Xo,null),e(Xo,Xnr),e(Xo,Ad),e(Ad,znr),e(Ad,IW),e(IW,Wnr),e(Ad,Qnr),e(Ad,NW),e(NW,Hnr),e(Ad,Unr),e(Xo,Jnr),e(Xo,by),e(by,Ynr),e(by,T7e),e(T7e,Knr),e(by,Znr),e(Xo,esr),e(Xo,Tt),M(vy,Tt,null),e(Tt,osr),e(Tt,M7e),e(M7e,rsr),e(Tt,tsr),e(Tt,Ld),e(Ld,asr),e(Ld,E7e),e(E7e,nsr),e(Ld,ssr),e(Ld,qW),e(qW,lsr),e(Ld,isr),e(Tt,dsr),M(wF,Tt,null),e(Xo,csr),e(Xo,mo),M(Fy,mo,null),e(mo,fsr),e(mo,C7e),e(C7e,msr),e(mo,gsr),e(mo,Qa),e(Qa,hsr),e(Qa,w7e),e(w7e,psr),e(Qa,_sr),e(Qa,A7e),e(A7e,usr),e(Qa,bsr),e(Qa,L7e),e(L7e,vsr),e(Qa,Fsr),e(mo,Tsr),e(mo,et),e(et,AF),e(AF,y7e),e(y7e,Msr),e(AF,Esr),e(AF,jW),e(jW,Csr),e(AF,wsr),e(et,Asr),e(et,LF),e(LF,x7e),e(x7e,Lsr),e(LF,ysr),e(LF,DW),e(DW,xsr),e(LF,$sr),e(et,ksr),e(et,yF),e(yF,$7e),e($7e,Ssr),e(yF,Rsr),e(yF,GW),e(GW,Psr),e(yF,Bsr),e(et,Isr),e(et,xF),e(xF,k7e),e(k7e,Nsr),e(xF,qsr),e(xF,OW),e(OW,jsr),e(xF,Dsr),e(et,Gsr),e(et,$F),e($F,S7e),e(S7e,Osr),e($F,Vsr),e($F,VW),e(VW,Xsr),e($F,zsr),e(mo,Wsr),e(mo,kF),e(kF,Qsr),e(kF,R7e),e(R7e,Hsr),e(kF,Usr),e(kF,P7e),e(P7e,Jsr),e(mo,Ysr),M(SF,mo,null),b(f,nOe,u),b(f,yd,u),e(yd,RF),e(RF,B7e),M(Ty,B7e,null),e(yd,Ksr),e(yd,I7e),e(I7e,Zsr),b(f,sOe,u),b(f,zo,u),M(My,zo,null),e(zo,elr),e(zo,xd),e(xd,olr),e(xd,XW),e(XW,rlr),e(xd,tlr),e(xd,zW),e(zW,alr),e(xd,nlr),e(zo,slr),e(zo,Ey),e(Ey,llr),e(Ey,N7e),e(N7e,ilr),e(Ey,dlr),e(zo,clr),e(zo,Mt),M(Cy,Mt,null),e(Mt,flr),e(Mt,q7e),e(q7e,mlr),e(Mt,glr),e(Mt,$d),e($d,hlr),e($d,j7e),e(j7e,plr),e($d,_lr),e($d,WW),e(WW,ulr),e($d,blr),e(Mt,vlr),M(PF,Mt,null),e(zo,Flr),e(zo,go),M(wy,go,null),e(go,Tlr),e(go,D7e),e(D7e,Mlr),e(go,Elr),e(go,Ha),e(Ha,Clr),e(Ha,G7e),e(G7e,wlr),e(Ha,Alr),e(Ha,O7e),e(O7e,Llr),e(Ha,ylr),e(Ha,V7e),e(V7e,xlr),e(Ha,$lr),e(go,klr),e(go,Le),e(Le,BF),e(BF,X7e),e(X7e,Slr),e(BF,Rlr),e(BF,QW),e(QW,Plr),e(BF,Blr),e(Le,Ilr),e(Le,IF),e(IF,z7e),e(z7e,Nlr),e(IF,qlr),e(IF,HW),e(HW,jlr),e(IF,Dlr),e(Le,Glr),e(Le,NF),e(NF,W7e),e(W7e,Olr),e(NF,Vlr),e(NF,UW),e(UW,Xlr),e(NF,zlr),e(Le,Wlr),e(Le,qF),e(qF,Q7e),e(Q7e,Qlr),e(qF,Hlr),e(qF,JW),e(JW,Ulr),e(qF,Jlr),e(Le,Ylr),e(Le,jF),e(jF,H7e),e(H7e,Klr),e(jF,Zlr),e(jF,YW),e(YW,eir),e(jF,oir),e(Le,rir),e(Le,DF),e(DF,U7e),e(U7e,tir),e(DF,air),e(DF,KW),e(KW,nir),e(DF,sir),e(Le,lir),e(Le,GF),e(GF,J7e),e(J7e,iir),e(GF,dir),e(GF,ZW),e(ZW,cir),e(GF,fir),e(Le,mir),e(Le,OF),e(OF,Y7e),e(Y7e,gir),e(OF,hir),e(OF,eQ),e(eQ,pir),e(OF,_ir),e(Le,uir),e(Le,VF),e(VF,K7e),e(K7e,bir),e(VF,vir),e(VF,oQ),e(oQ,Fir),e(VF,Tir),e(Le,Mir),e(Le,XF),e(XF,Z7e),e(Z7e,Eir),e(XF,Cir),e(XF,rQ),e(rQ,wir),e(XF,Air),e(go,Lir),e(go,zF),e(zF,yir),e(zF,e9e),e(e9e,xir),e(zF,$ir),e(zF,o9e),e(o9e,kir),e(go,Sir),M(WF,go,null),b(f,lOe,u),b(f,kd,u),e(kd,QF),e(QF,r9e),M(Ay,r9e,null),e(kd,Rir),e(kd,t9e),e(t9e,Pir),b(f,iOe,u),b(f,Wo,u),M(Ly,Wo,null),e(Wo,Bir),e(Wo,Sd),e(Sd,Iir),e(Sd,tQ),e(tQ,Nir),e(Sd,qir),e(Sd,aQ),e(aQ,jir),e(Sd,Dir),e(Wo,Gir),e(Wo,yy),e(yy,Oir),e(yy,a9e),e(a9e,Vir),e(yy,Xir),e(Wo,zir),e(Wo,Et),M(xy,Et,null),e(Et,Wir),e(Et,n9e),e(n9e,Qir),e(Et,Hir),e(Et,Rd),e(Rd,Uir),e(Rd,s9e),e(s9e,Jir),e(Rd,Yir),e(Rd,nQ),e(nQ,Kir),e(Rd,Zir),e(Et,edr),M(HF,Et,null),e(Wo,odr),e(Wo,ho),M($y,ho,null),e(ho,rdr),e(ho,l9e),e(l9e,tdr),e(ho,adr),e(ho,Ua),e(Ua,ndr),e(Ua,i9e),e(i9e,sdr),e(Ua,ldr),e(Ua,d9e),e(d9e,idr),e(Ua,ddr),e(Ua,c9e),e(c9e,cdr),e(Ua,fdr),e(ho,mdr),e(ho,ky),e(ky,UF),e(UF,f9e),e(f9e,gdr),e(UF,hdr),e(UF,sQ),e(sQ,pdr),e(UF,_dr),e(ky,udr),e(ky,JF),e(JF,m9e),e(m9e,bdr),e(JF,vdr),e(JF,lQ),e(lQ,Fdr),e(JF,Tdr),e(ho,Mdr),e(ho,YF),e(YF,Edr),e(YF,g9e),e(g9e,Cdr),e(YF,wdr),e(YF,h9e),e(h9e,Adr),e(ho,Ldr),M(KF,ho,null),b(f,dOe,u),b(f,Pd,u),e(Pd,ZF),e(ZF,p9e),M(Sy,p9e,null),e(Pd,ydr),e(Pd,_9e),e(_9e,xdr),b(f,cOe,u),b(f,Qo,u),M(Ry,Qo,null),e(Qo,$dr),e(Qo,Bd),e(Bd,kdr),e(Bd,iQ),e(iQ,Sdr),e(Bd,Rdr),e(Bd,dQ),e(dQ,Pdr),e(Bd,Bdr),e(Qo,Idr),e(Qo,Py),e(Py,Ndr),e(Py,u9e),e(u9e,qdr),e(Py,jdr),e(Qo,Ddr),e(Qo,Ct),M(By,Ct,null),e(Ct,Gdr),e(Ct,b9e),e(b9e,Odr),e(Ct,Vdr),e(Ct,Id),e(Id,Xdr),e(Id,v9e),e(v9e,zdr),e(Id,Wdr),e(Id,cQ),e(cQ,Qdr),e(Id,Hdr),e(Ct,Udr),M(eT,Ct,null),e(Qo,Jdr),e(Qo,po),M(Iy,po,null),e(po,Ydr),e(po,F9e),e(F9e,Kdr),e(po,Zdr),e(po,Ja),e(Ja,ecr),e(Ja,T9e),e(T9e,ocr),e(Ja,rcr),e(Ja,M9e),e(M9e,tcr),e(Ja,acr),e(Ja,E9e),e(E9e,ncr),e(Ja,scr),e(po,lcr),e(po,ot),e(ot,oT),e(oT,C9e),e(C9e,icr),e(oT,dcr),e(oT,fQ),e(fQ,ccr),e(oT,fcr),e(ot,mcr),e(ot,rT),e(rT,w9e),e(w9e,gcr),e(rT,hcr),e(rT,mQ),e(mQ,pcr),e(rT,_cr),e(ot,ucr),e(ot,tT),e(tT,A9e),e(A9e,bcr),e(tT,vcr),e(tT,gQ),e(gQ,Fcr),e(tT,Tcr),e(ot,Mcr),e(ot,aT),e(aT,L9e),e(L9e,Ecr),e(aT,Ccr),e(aT,hQ),e(hQ,wcr),e(aT,Acr),e(ot,Lcr),e(ot,nT),e(nT,y9e),e(y9e,ycr),e(nT,xcr),e(nT,pQ),e(pQ,$cr),e(nT,kcr),e(po,Scr),e(po,sT),e(sT,Rcr),e(sT,x9e),e(x9e,Pcr),e(sT,Bcr),e(sT,$9e),e($9e,Icr),e(po,Ncr),M(lT,po,null),b(f,fOe,u),b(f,Nd,u),e(Nd,iT),e(iT,k9e),M(Ny,k9e,null),e(Nd,qcr),e(Nd,S9e),e(S9e,jcr),b(f,mOe,u),b(f,Ho,u),M(qy,Ho,null),e(Ho,Dcr),e(Ho,qd),e(qd,Gcr),e(qd,_Q),e(_Q,Ocr),e(qd,Vcr),e(qd,uQ),e(uQ,Xcr),e(qd,zcr),e(Ho,Wcr),e(Ho,jy),e(jy,Qcr),e(jy,R9e),e(R9e,Hcr),e(jy,Ucr),e(Ho,Jcr),e(Ho,wt),M(Dy,wt,null),e(wt,Ycr),e(wt,P9e),e(P9e,Kcr),e(wt,Zcr),e(wt,jd),e(jd,efr),e(jd,B9e),e(B9e,ofr),e(jd,rfr),e(jd,bQ),e(bQ,tfr),e(jd,afr),e(wt,nfr),M(dT,wt,null),e(Ho,sfr),e(Ho,_o),M(Gy,_o,null),e(_o,lfr),e(_o,I9e),e(I9e,ifr),e(_o,dfr),e(_o,Ya),e(Ya,cfr),e(Ya,N9e),e(N9e,ffr),e(Ya,mfr),e(Ya,q9e),e(q9e,gfr),e(Ya,hfr),e(Ya,j9e),e(j9e,pfr),e(Ya,_fr),e(_o,ufr),e(_o,Dd),e(Dd,cT),e(cT,D9e),e(D9e,bfr),e(cT,vfr),e(cT,vQ),e(vQ,Ffr),e(cT,Tfr),e(Dd,Mfr),e(Dd,fT),e(fT,G9e),e(G9e,Efr),e(fT,Cfr),e(fT,FQ),e(FQ,wfr),e(fT,Afr),e(Dd,Lfr),e(Dd,mT),e(mT,O9e),e(O9e,yfr),e(mT,xfr),e(mT,TQ),e(TQ,$fr),e(mT,kfr),e(_o,Sfr),e(_o,gT),e(gT,Rfr),e(gT,V9e),e(V9e,Pfr),e(gT,Bfr),e(gT,X9e),e(X9e,Ifr),e(_o,Nfr),M(hT,_o,null),b(f,gOe,u),b(f,Gd,u),e(Gd,pT),e(pT,z9e),M(Oy,z9e,null),e(Gd,qfr),e(Gd,W9e),e(W9e,jfr),b(f,hOe,u),b(f,Uo,u),M(Vy,Uo,null),e(Uo,Dfr),e(Uo,Od),e(Od,Gfr),e(Od,MQ),e(MQ,Ofr),e(Od,Vfr),e(Od,EQ),e(EQ,Xfr),e(Od,zfr),e(Uo,Wfr),e(Uo,Xy),e(Xy,Qfr),e(Xy,Q9e),e(Q9e,Hfr),e(Xy,Ufr),e(Uo,Jfr),e(Uo,At),M(zy,At,null),e(At,Yfr),e(At,H9e),e(H9e,Kfr),e(At,Zfr),e(At,Vd),e(Vd,emr),e(Vd,U9e),e(U9e,omr),e(Vd,rmr),e(Vd,CQ),e(CQ,tmr),e(Vd,amr),e(At,nmr),M(_T,At,null),e(Uo,smr),e(Uo,uo),M(Wy,uo,null),e(uo,lmr),e(uo,J9e),e(J9e,imr),e(uo,dmr),e(uo,Ka),e(Ka,cmr),e(Ka,Y9e),e(Y9e,fmr),e(Ka,mmr),e(Ka,K9e),e(K9e,gmr),e(Ka,hmr),e(Ka,Z9e),e(Z9e,pmr),e(Ka,_mr),e(uo,umr),e(uo,Qy),e(Qy,uT),e(uT,ebe),e(ebe,bmr),e(uT,vmr),e(uT,wQ),e(wQ,Fmr),e(uT,Tmr),e(Qy,Mmr),e(Qy,bT),e(bT,obe),e(obe,Emr),e(bT,Cmr),e(bT,AQ),e(AQ,wmr),e(bT,Amr),e(uo,Lmr),e(uo,vT),e(vT,ymr),e(vT,rbe),e(rbe,xmr),e(vT,$mr),e(vT,tbe),e(tbe,kmr),e(uo,Smr),M(FT,uo,null),b(f,pOe,u),b(f,Xd,u),e(Xd,TT),e(TT,abe),M(Hy,abe,null),e(Xd,Rmr),e(Xd,nbe),e(nbe,Pmr),b(f,_Oe,u),b(f,Jo,u),M(Uy,Jo,null),e(Jo,Bmr),e(Jo,zd),e(zd,Imr),e(zd,LQ),e(LQ,Nmr),e(zd,qmr),e(zd,yQ),e(yQ,jmr),e(zd,Dmr),e(Jo,Gmr),e(Jo,Jy),e(Jy,Omr),e(Jy,sbe),e(sbe,Vmr),e(Jy,Xmr),e(Jo,zmr),e(Jo,Lt),M(Yy,Lt,null),e(Lt,Wmr),e(Lt,lbe),e(lbe,Qmr),e(Lt,Hmr),e(Lt,Wd),e(Wd,Umr),e(Wd,ibe),e(ibe,Jmr),e(Wd,Ymr),e(Wd,xQ),e(xQ,Kmr),e(Wd,Zmr),e(Lt,egr),M(MT,Lt,null),e(Jo,ogr),e(Jo,bo),M(Ky,bo,null),e(bo,rgr),e(bo,dbe),e(dbe,tgr),e(bo,agr),e(bo,Za),e(Za,ngr),e(Za,cbe),e(cbe,sgr),e(Za,lgr),e(Za,fbe),e(fbe,igr),e(Za,dgr),e(Za,mbe),e(mbe,cgr),e(Za,fgr),e(bo,mgr),e(bo,gbe),e(gbe,ET),e(ET,hbe),e(hbe,ggr),e(ET,hgr),e(ET,$Q),e($Q,pgr),e(ET,_gr),e(bo,ugr),e(bo,CT),e(CT,bgr),e(CT,pbe),e(pbe,vgr),e(CT,Fgr),e(CT,_be),e(_be,Tgr),e(bo,Mgr),M(wT,bo,null),b(f,uOe,u),b(f,Qd,u),e(Qd,AT),e(AT,ube),M(Zy,ube,null),e(Qd,Egr),e(Qd,bbe),e(bbe,Cgr),b(f,bOe,u),b(f,Yo,u),M(e8,Yo,null),e(Yo,wgr),e(Yo,Hd),e(Hd,Agr),e(Hd,kQ),e(kQ,Lgr),e(Hd,ygr),e(Hd,SQ),e(SQ,xgr),e(Hd,$gr),e(Yo,kgr),e(Yo,o8),e(o8,Sgr),e(o8,vbe),e(vbe,Rgr),e(o8,Pgr),e(Yo,Bgr),e(Yo,yt),M(r8,yt,null),e(yt,Igr),e(yt,Fbe),e(Fbe,Ngr),e(yt,qgr),e(yt,Ud),e(Ud,jgr),e(Ud,Tbe),e(Tbe,Dgr),e(Ud,Ggr),e(Ud,RQ),e(RQ,Ogr),e(Ud,Vgr),e(yt,Xgr),M(LT,yt,null),e(Yo,zgr),e(Yo,vo),M(t8,vo,null),e(vo,Wgr),e(vo,Mbe),e(Mbe,Qgr),e(vo,Hgr),e(vo,en),e(en,Ugr),e(en,Ebe),e(Ebe,Jgr),e(en,Ygr),e(en,Cbe),e(Cbe,Kgr),e(en,Zgr),e(en,wbe),e(wbe,ehr),e(en,ohr),e(vo,rhr),e(vo,on),e(on,yT),e(yT,Abe),e(Abe,thr),e(yT,ahr),e(yT,PQ),e(PQ,nhr),e(yT,shr),e(on,lhr),e(on,xT),e(xT,Lbe),e(Lbe,ihr),e(xT,dhr),e(xT,BQ),e(BQ,chr),e(xT,fhr),e(on,mhr),e(on,$T),e($T,ybe),e(ybe,ghr),e($T,hhr),e($T,IQ),e(IQ,phr),e($T,_hr),e(on,uhr),e(on,kT),e(kT,xbe),e(xbe,bhr),e(kT,vhr),e(kT,NQ),e(NQ,Fhr),e(kT,Thr),e(vo,Mhr),e(vo,ST),e(ST,Ehr),e(ST,$be),e($be,Chr),e(ST,whr),e(ST,kbe),e(kbe,Ahr),e(vo,Lhr),M(RT,vo,null),b(f,vOe,u),b(f,Jd,u),e(Jd,PT),e(PT,Sbe),M(a8,Sbe,null),e(Jd,yhr),e(Jd,Rbe),e(Rbe,xhr),b(f,FOe,u),b(f,Ko,u),M(n8,Ko,null),e(Ko,$hr),e(Ko,Yd),e(Yd,khr),e(Yd,qQ),e(qQ,Shr),e(Yd,Rhr),e(Yd,jQ),e(jQ,Phr),e(Yd,Bhr),e(Ko,Ihr),e(Ko,s8),e(s8,Nhr),e(s8,Pbe),e(Pbe,qhr),e(s8,jhr),e(Ko,Dhr),e(Ko,xt),M(l8,xt,null),e(xt,Ghr),e(xt,Bbe),e(Bbe,Ohr),e(xt,Vhr),e(xt,Kd),e(Kd,Xhr),e(Kd,Ibe),e(Ibe,zhr),e(Kd,Whr),e(Kd,DQ),e(DQ,Qhr),e(Kd,Hhr),e(xt,Uhr),M(BT,xt,null),e(Ko,Jhr),e(Ko,Fo),M(i8,Fo,null),e(Fo,Yhr),e(Fo,Nbe),e(Nbe,Khr),e(Fo,Zhr),e(Fo,rn),e(rn,epr),e(rn,qbe),e(qbe,opr),e(rn,rpr),e(rn,jbe),e(jbe,tpr),e(rn,apr),e(rn,Dbe),e(Dbe,npr),e(rn,spr),e(Fo,lpr),e(Fo,Gbe),e(Gbe,IT),e(IT,Obe),e(Obe,ipr),e(IT,dpr),e(IT,GQ),e(GQ,cpr),e(IT,fpr),e(Fo,mpr),e(Fo,NT),e(NT,gpr),e(NT,Vbe),e(Vbe,hpr),e(NT,ppr),e(NT,Xbe),e(Xbe,_pr),e(Fo,upr),M(qT,Fo,null),b(f,TOe,u),b(f,Zd,u),e(Zd,jT),e(jT,zbe),M(d8,zbe,null),e(Zd,bpr),e(Zd,Wbe),e(Wbe,vpr),b(f,MOe,u),b(f,Zo,u),M(c8,Zo,null),e(Zo,Fpr),e(Zo,ec),e(ec,Tpr),e(ec,OQ),e(OQ,Mpr),e(ec,Epr),e(ec,VQ),e(VQ,Cpr),e(ec,wpr),e(Zo,Apr),e(Zo,f8),e(f8,Lpr),e(f8,Qbe),e(Qbe,ypr),e(f8,xpr),e(Zo,$pr),e(Zo,$t),M(m8,$t,null),e($t,kpr),e($t,Hbe),e(Hbe,Spr),e($t,Rpr),e($t,oc),e(oc,Ppr),e(oc,Ube),e(Ube,Bpr),e(oc,Ipr),e(oc,XQ),e(XQ,Npr),e(oc,qpr),e($t,jpr),M(DT,$t,null),e(Zo,Dpr),e(Zo,Lr),M(g8,Lr,null),e(Lr,Gpr),e(Lr,Jbe),e(Jbe,Opr),e(Lr,Vpr),e(Lr,tn),e(tn,Xpr),e(tn,Ybe),e(Ybe,zpr),e(tn,Wpr),e(tn,Kbe),e(Kbe,Qpr),e(tn,Hpr),e(tn,Zbe),e(Zbe,Upr),e(tn,Jpr),e(Lr,Ypr),e(Lr,q),e(q,GT),e(GT,e2e),e(e2e,Kpr),e(GT,Zpr),e(GT,zQ),e(zQ,e_r),e(GT,o_r),e(q,r_r),e(q,OT),e(OT,o2e),e(o2e,t_r),e(OT,a_r),e(OT,WQ),e(WQ,n_r),e(OT,s_r),e(q,l_r),e(q,VT),e(VT,r2e),e(r2e,i_r),e(VT,d_r),e(VT,QQ),e(QQ,c_r),e(VT,f_r),e(q,m_r),e(q,XT),e(XT,t2e),e(t2e,g_r),e(XT,h_r),e(XT,HQ),e(HQ,p_r),e(XT,__r),e(q,u_r),e(q,zT),e(zT,a2e),e(a2e,b_r),e(zT,v_r),e(zT,UQ),e(UQ,F_r),e(zT,T_r),e(q,M_r),e(q,WT),e(WT,n2e),e(n2e,E_r),e(WT,C_r),e(WT,JQ),e(JQ,w_r),e(WT,A_r),e(q,L_r),e(q,QT),e(QT,s2e),e(s2e,y_r),e(QT,x_r),e(QT,YQ),e(YQ,$_r),e(QT,k_r),e(q,S_r),e(q,HT),e(HT,l2e),e(l2e,R_r),e(HT,P_r),e(HT,KQ),e(KQ,B_r),e(HT,I_r),e(q,N_r),e(q,UT),e(UT,i2e),e(i2e,q_r),e(UT,j_r),e(UT,ZQ),e(ZQ,D_r),e(UT,G_r),e(q,O_r),e(q,JT),e(JT,d2e),e(d2e,V_r),e(JT,X_r),e(JT,eH),e(eH,z_r),e(JT,W_r),e(q,Q_r),e(q,YT),e(YT,c2e),e(c2e,H_r),e(YT,U_r),e(YT,oH),e(oH,J_r),e(YT,Y_r),e(q,K_r),e(q,KT),e(KT,f2e),e(f2e,Z_r),e(KT,eur),e(KT,rH),e(rH,our),e(KT,rur),e(q,tur),e(q,ZT),e(ZT,m2e),e(m2e,aur),e(ZT,nur),e(ZT,tH),e(tH,sur),e(ZT,lur),e(q,iur),e(q,eM),e(eM,g2e),e(g2e,dur),e(eM,cur),e(eM,aH),e(aH,fur),e(eM,mur),e(q,gur),e(q,oM),e(oM,h2e),e(h2e,hur),e(oM,pur),e(oM,nH),e(nH,_ur),e(oM,uur),e(q,bur),e(q,rM),e(rM,p2e),e(p2e,vur),e(rM,Fur),e(rM,sH),e(sH,Tur),e(rM,Mur),e(q,Eur),e(q,tM),e(tM,_2e),e(_2e,Cur),e(tM,wur),e(tM,lH),e(lH,Aur),e(tM,Lur),e(q,yur),e(q,Xs),e(Xs,u2e),e(u2e,xur),e(Xs,$ur),e(Xs,iH),e(iH,kur),e(Xs,Sur),e(Xs,dH),e(dH,Rur),e(Xs,Pur),e(q,Bur),e(q,aM),e(aM,b2e),e(b2e,Iur),e(aM,Nur),e(aM,cH),e(cH,qur),e(aM,jur),e(q,Dur),e(q,nM),e(nM,v2e),e(v2e,Gur),e(nM,Our),e(nM,fH),e(fH,Vur),e(nM,Xur),e(q,zur),e(q,sM),e(sM,F2e),e(F2e,Wur),e(sM,Qur),e(sM,mH),e(mH,Hur),e(sM,Uur),e(q,Jur),e(q,lM),e(lM,T2e),e(T2e,Yur),e(lM,Kur),e(lM,gH),e(gH,Zur),e(lM,e1r),e(q,o1r),e(q,iM),e(iM,M2e),e(M2e,r1r),e(iM,t1r),e(iM,hH),e(hH,a1r),e(iM,n1r),e(q,s1r),e(q,dM),e(dM,E2e),e(E2e,l1r),e(dM,i1r),e(dM,pH),e(pH,d1r),e(dM,c1r),e(q,f1r),e(q,cM),e(cM,C2e),e(C2e,m1r),e(cM,g1r),e(cM,_H),e(_H,h1r),e(cM,p1r),e(q,_1r),e(q,fM),e(fM,w2e),e(w2e,u1r),e(fM,b1r),e(fM,uH),e(uH,v1r),e(fM,F1r),e(q,T1r),e(q,mM),e(mM,A2e),e(A2e,M1r),e(mM,E1r),e(mM,bH),e(bH,C1r),e(mM,w1r),e(q,A1r),e(q,gM),e(gM,L2e),e(L2e,L1r),e(gM,y1r),e(gM,vH),e(vH,x1r),e(gM,$1r),e(q,k1r),e(q,hM),e(hM,y2e),e(y2e,S1r),e(hM,R1r),e(hM,FH),e(FH,P1r),e(hM,B1r),e(q,I1r),e(q,pM),e(pM,x2e),e(x2e,N1r),e(pM,q1r),e(pM,TH),e(TH,j1r),e(pM,D1r),e(q,G1r),e(q,_M),e(_M,$2e),e($2e,O1r),e(_M,V1r),e(_M,MH),e(MH,X1r),e(_M,z1r),e(q,W1r),e(q,uM),e(uM,k2e),e(k2e,Q1r),e(uM,H1r),e(uM,EH),e(EH,U1r),e(uM,J1r),e(q,Y1r),e(q,bM),e(bM,S2e),e(S2e,K1r),e(bM,Z1r),e(bM,CH),e(CH,e7r),e(bM,o7r),e(q,r7r),e(q,vM),e(vM,R2e),e(R2e,t7r),e(vM,a7r),e(vM,wH),e(wH,n7r),e(vM,s7r),e(q,l7r),e(q,FM),e(FM,P2e),e(P2e,i7r),e(FM,d7r),e(FM,AH),e(AH,c7r),e(FM,f7r),e(q,m7r),e(q,TM),e(TM,B2e),e(B2e,g7r),e(TM,h7r),e(TM,LH),e(LH,p7r),e(TM,_7r),e(q,u7r),e(q,MM),e(MM,I2e),e(I2e,b7r),e(MM,v7r),e(MM,yH),e(yH,F7r),e(MM,T7r),e(q,M7r),e(q,EM),e(EM,N2e),e(N2e,E7r),e(EM,C7r),e(EM,xH),e(xH,w7r),e(EM,A7r),e(q,L7r),e(q,CM),e(CM,q2e),e(q2e,y7r),e(CM,x7r),e(CM,$H),e($H,$7r),e(CM,k7r),e(q,S7r),e(q,wM),e(wM,j2e),e(j2e,R7r),e(wM,P7r),e(wM,kH),e(kH,B7r),e(wM,I7r),e(q,N7r),e(q,AM),e(AM,D2e),e(D2e,q7r),e(AM,j7r),e(AM,SH),e(SH,D7r),e(AM,G7r),e(q,O7r),e(q,LM),e(LM,G2e),e(G2e,V7r),e(LM,X7r),e(LM,RH),e(RH,z7r),e(LM,W7r),e(q,Q7r),e(q,yM),e(yM,O2e),e(O2e,H7r),e(yM,U7r),e(yM,PH),e(PH,J7r),e(yM,Y7r),e(q,K7r),e(q,xM),e(xM,V2e),e(V2e,Z7r),e(xM,e9r),e(xM,BH),e(BH,o9r),e(xM,r9r),e(q,t9r),e(q,$M),e($M,X2e),e(X2e,a9r),e($M,n9r),e($M,IH),e(IH,s9r),e($M,l9r),e(q,i9r),e(q,kM),e(kM,z2e),e(z2e,d9r),e(kM,c9r),e(kM,NH),e(NH,f9r),e(kM,m9r),e(q,g9r),e(q,SM),e(SM,W2e),e(W2e,h9r),e(SM,p9r),e(SM,qH),e(qH,_9r),e(SM,u9r),e(Lr,b9r),M(RM,Lr,null),b(f,EOe,u),b(f,rc,u),e(rc,PM),e(PM,Q2e),M(h8,Q2e,null),e(rc,v9r),e(rc,H2e),e(H2e,F9r),b(f,COe,u),b(f,er,u),M(p8,er,null),e(er,T9r),e(er,tc),e(tc,M9r),e(tc,jH),e(jH,E9r),e(tc,C9r),e(tc,DH),e(DH,w9r),e(tc,A9r),e(er,L9r),e(er,_8),e(_8,y9r),e(_8,U2e),e(U2e,x9r),e(_8,$9r),e(er,k9r),e(er,kt),M(u8,kt,null),e(kt,S9r),e(kt,J2e),e(J2e,R9r),e(kt,P9r),e(kt,ac),e(ac,B9r),e(ac,Y2e),e(Y2e,I9r),e(ac,N9r),e(ac,GH),e(GH,q9r),e(ac,j9r),e(kt,D9r),M(BM,kt,null),e(er,G9r),e(er,yr),M(b8,yr,null),e(yr,O9r),e(yr,K2e),e(K2e,V9r),e(yr,X9r),e(yr,an),e(an,z9r),e(an,Z2e),e(Z2e,W9r),e(an,Q9r),e(an,eve),e(eve,H9r),e(an,U9r),e(an,ove),e(ove,J9r),e(an,Y9r),e(yr,K9r),e(yr,se),e(se,IM),e(IM,rve),e(rve,Z9r),e(IM,ebr),e(IM,OH),e(OH,obr),e(IM,rbr),e(se,tbr),e(se,NM),e(NM,tve),e(tve,abr),e(NM,nbr),e(NM,VH),e(VH,sbr),e(NM,lbr),e(se,ibr),e(se,qM),e(qM,ave),e(ave,dbr),e(qM,cbr),e(qM,XH),e(XH,fbr),e(qM,mbr),e(se,gbr),e(se,jM),e(jM,nve),e(nve,hbr),e(jM,pbr),e(jM,zH),e(zH,_br),e(jM,ubr),e(se,bbr),e(se,DM),e(DM,sve),e(sve,vbr),e(DM,Fbr),e(DM,WH),e(WH,Tbr),e(DM,Mbr),e(se,Ebr),e(se,GM),e(GM,lve),e(lve,Cbr),e(GM,wbr),e(GM,QH),e(QH,Abr),e(GM,Lbr),e(se,ybr),e(se,OM),e(OM,ive),e(ive,xbr),e(OM,$br),e(OM,HH),e(HH,kbr),e(OM,Sbr),e(se,Rbr),e(se,VM),e(VM,dve),e(dve,Pbr),e(VM,Bbr),e(VM,UH),e(UH,Ibr),e(VM,Nbr),e(se,qbr),e(se,XM),e(XM,cve),e(cve,jbr),e(XM,Dbr),e(XM,JH),e(JH,Gbr),e(XM,Obr),e(se,Vbr),e(se,zM),e(zM,fve),e(fve,Xbr),e(zM,zbr),e(zM,YH),e(YH,Wbr),e(zM,Qbr),e(se,Hbr),e(se,WM),e(WM,mve),e(mve,Ubr),e(WM,Jbr),e(WM,KH),e(KH,Ybr),e(WM,Kbr),e(se,Zbr),e(se,QM),e(QM,gve),e(gve,e2r),e(QM,o2r),e(QM,ZH),e(ZH,r2r),e(QM,t2r),e(se,a2r),e(se,HM),e(HM,hve),e(hve,n2r),e(HM,s2r),e(HM,eU),e(eU,l2r),e(HM,i2r),e(se,d2r),e(se,UM),e(UM,pve),e(pve,c2r),e(UM,f2r),e(UM,oU),e(oU,m2r),e(UM,g2r),e(se,h2r),e(se,JM),e(JM,_ve),e(_ve,p2r),e(JM,_2r),e(JM,rU),e(rU,u2r),e(JM,b2r),e(se,v2r),e(se,YM),e(YM,uve),e(uve,F2r),e(YM,T2r),e(YM,tU),e(tU,M2r),e(YM,E2r),e(se,C2r),e(se,KM),e(KM,bve),e(bve,w2r),e(KM,A2r),e(KM,aU),e(aU,L2r),e(KM,y2r),e(se,x2r),e(se,ZM),e(ZM,vve),e(vve,$2r),e(ZM,k2r),e(ZM,nU),e(nU,S2r),e(ZM,R2r),e(se,P2r),e(se,eE),e(eE,Fve),e(Fve,B2r),e(eE,I2r),e(eE,sU),e(sU,N2r),e(eE,q2r),e(se,j2r),e(se,oE),e(oE,Tve),e(Tve,D2r),e(oE,G2r),e(oE,lU),e(lU,O2r),e(oE,V2r),e(se,X2r),e(se,rE),e(rE,Mve),e(Mve,z2r),e(rE,W2r),e(rE,iU),e(iU,Q2r),e(rE,H2r),e(se,U2r),e(se,tE),e(tE,Eve),e(Eve,J2r),e(tE,Y2r),e(tE,dU),e(dU,K2r),e(tE,Z2r),e(se,evr),e(se,aE),e(aE,Cve),e(Cve,ovr),e(aE,rvr),e(aE,cU),e(cU,tvr),e(aE,avr),e(yr,nvr),M(nE,yr,null),b(f,wOe,u),b(f,nc,u),e(nc,sE),e(sE,wve),M(v8,wve,null),e(nc,svr),e(nc,Ave),e(Ave,lvr),b(f,AOe,u),b(f,or,u),M(F8,or,null),e(or,ivr),e(or,sc),e(sc,dvr),e(sc,fU),e(fU,cvr),e(sc,fvr),e(sc,mU),e(mU,mvr),e(sc,gvr),e(or,hvr),e(or,T8),e(T8,pvr),e(T8,Lve),e(Lve,_vr),e(T8,uvr),e(or,bvr),e(or,St),M(M8,St,null),e(St,vvr),e(St,yve),e(yve,Fvr),e(St,Tvr),e(St,lc),e(lc,Mvr),e(lc,xve),e(xve,Evr),e(lc,Cvr),e(lc,gU),e(gU,wvr),e(lc,Avr),e(St,Lvr),M(lE,St,null),e(or,yvr),e(or,xr),M(E8,xr,null),e(xr,xvr),e(xr,$ve),e($ve,$vr),e(xr,kvr),e(xr,nn),e(nn,Svr),e(nn,kve),e(kve,Rvr),e(nn,Pvr),e(nn,Sve),e(Sve,Bvr),e(nn,Ivr),e(nn,Rve),e(Rve,Nvr),e(nn,qvr),e(xr,jvr),e(xr,Me),e(Me,iE),e(iE,Pve),e(Pve,Dvr),e(iE,Gvr),e(iE,hU),e(hU,Ovr),e(iE,Vvr),e(Me,Xvr),e(Me,dE),e(dE,Bve),e(Bve,zvr),e(dE,Wvr),e(dE,pU),e(pU,Qvr),e(dE,Hvr),e(Me,Uvr),e(Me,cE),e(cE,Ive),e(Ive,Jvr),e(cE,Yvr),e(cE,_U),e(_U,Kvr),e(cE,Zvr),e(Me,eFr),e(Me,fE),e(fE,Nve),e(Nve,oFr),e(fE,rFr),e(fE,uU),e(uU,tFr),e(fE,aFr),e(Me,nFr),e(Me,mE),e(mE,qve),e(qve,sFr),e(mE,lFr),e(mE,bU),e(bU,iFr),e(mE,dFr),e(Me,cFr),e(Me,gE),e(gE,jve),e(jve,fFr),e(gE,mFr),e(gE,vU),e(vU,gFr),e(gE,hFr),e(Me,pFr),e(Me,hE),e(hE,Dve),e(Dve,_Fr),e(hE,uFr),e(hE,FU),e(FU,bFr),e(hE,vFr),e(Me,FFr),e(Me,pE),e(pE,Gve),e(Gve,TFr),e(pE,MFr),e(pE,TU),e(TU,EFr),e(pE,CFr),e(Me,wFr),e(Me,_E),e(_E,Ove),e(Ove,AFr),e(_E,LFr),e(_E,MU),e(MU,yFr),e(_E,xFr),e(Me,$Fr),e(Me,uE),e(uE,Vve),e(Vve,kFr),e(uE,SFr),e(uE,EU),e(EU,RFr),e(uE,PFr),e(Me,BFr),e(Me,bE),e(bE,Xve),e(Xve,IFr),e(bE,NFr),e(bE,CU),e(CU,qFr),e(bE,jFr),e(Me,DFr),e(Me,vE),e(vE,zve),e(zve,GFr),e(vE,OFr),e(vE,wU),e(wU,VFr),e(vE,XFr),e(Me,zFr),e(Me,FE),e(FE,Wve),e(Wve,WFr),e(FE,QFr),e(FE,AU),e(AU,HFr),e(FE,UFr),e(xr,JFr),M(TE,xr,null),b(f,LOe,u),b(f,ic,u),e(ic,ME),e(ME,Qve),M(C8,Qve,null),e(ic,YFr),e(ic,Hve),e(Hve,KFr),b(f,yOe,u),b(f,rr,u),M(w8,rr,null),e(rr,ZFr),e(rr,dc),e(dc,eTr),e(dc,LU),e(LU,oTr),e(dc,rTr),e(dc,yU),e(yU,tTr),e(dc,aTr),e(rr,nTr),e(rr,A8),e(A8,sTr),e(A8,Uve),e(Uve,lTr),e(A8,iTr),e(rr,dTr),e(rr,Rt),M(L8,Rt,null),e(Rt,cTr),e(Rt,Jve),e(Jve,fTr),e(Rt,mTr),e(Rt,cc),e(cc,gTr),e(cc,Yve),e(Yve,hTr),e(cc,pTr),e(cc,xU),e(xU,_Tr),e(cc,uTr),e(Rt,bTr),M(EE,Rt,null),e(rr,vTr),e(rr,$r),M(y8,$r,null),e($r,FTr),e($r,Kve),e(Kve,TTr),e($r,MTr),e($r,sn),e(sn,ETr),e(sn,Zve),e(Zve,CTr),e(sn,wTr),e(sn,eFe),e(eFe,ATr),e(sn,LTr),e(sn,oFe),e(oFe,yTr),e(sn,xTr),e($r,$Tr),e($r,ln),e(ln,CE),e(CE,rFe),e(rFe,kTr),e(CE,STr),e(CE,$U),e($U,RTr),e(CE,PTr),e(ln,BTr),e(ln,wE),e(wE,tFe),e(tFe,ITr),e(wE,NTr),e(wE,kU),e(kU,qTr),e(wE,jTr),e(ln,DTr),e(ln,AE),e(AE,aFe),e(aFe,GTr),e(AE,OTr),e(AE,SU),e(SU,VTr),e(AE,XTr),e(ln,zTr),e(ln,LE),e(LE,nFe),e(nFe,WTr),e(LE,QTr),e(LE,RU),e(RU,HTr),e(LE,UTr),e($r,JTr),M(yE,$r,null),b(f,xOe,u),b(f,fc,u),e(fc,xE),e(xE,sFe),M(x8,sFe,null),e(fc,YTr),e(fc,lFe),e(lFe,KTr),b(f,$Oe,u),b(f,tr,u),M($8,tr,null),e(tr,ZTr),e(tr,mc),e(mc,eMr),e(mc,PU),e(PU,oMr),e(mc,rMr),e(mc,BU),e(BU,tMr),e(mc,aMr),e(tr,nMr),e(tr,k8),e(k8,sMr),e(k8,iFe),e(iFe,lMr),e(k8,iMr),e(tr,dMr),e(tr,Pt),M(S8,Pt,null),e(Pt,cMr),e(Pt,dFe),e(dFe,fMr),e(Pt,mMr),e(Pt,gc),e(gc,gMr),e(gc,cFe),e(cFe,hMr),e(gc,pMr),e(gc,IU),e(IU,_Mr),e(gc,uMr),e(Pt,bMr),M($E,Pt,null),e(tr,vMr),e(tr,kr),M(R8,kr,null),e(kr,FMr),e(kr,fFe),e(fFe,TMr),e(kr,MMr),e(kr,dn),e(dn,EMr),e(dn,mFe),e(mFe,CMr),e(dn,wMr),e(dn,gFe),e(gFe,AMr),e(dn,LMr),e(dn,hFe),e(hFe,yMr),e(dn,xMr),e(kr,$Mr),e(kr,ie),e(ie,kE),e(kE,pFe),e(pFe,kMr),e(kE,SMr),e(kE,NU),e(NU,RMr),e(kE,PMr),e(ie,BMr),e(ie,SE),e(SE,_Fe),e(_Fe,IMr),e(SE,NMr),e(SE,qU),e(qU,qMr),e(SE,jMr),e(ie,DMr),e(ie,RE),e(RE,uFe),e(uFe,GMr),e(RE,OMr),e(RE,jU),e(jU,VMr),e(RE,XMr),e(ie,zMr),e(ie,PE),e(PE,bFe),e(bFe,WMr),e(PE,QMr),e(PE,DU),e(DU,HMr),e(PE,UMr),e(ie,JMr),e(ie,BE),e(BE,vFe),e(vFe,YMr),e(BE,KMr),e(BE,GU),e(GU,ZMr),e(BE,eEr),e(ie,oEr),e(ie,IE),e(IE,FFe),e(FFe,rEr),e(IE,tEr),e(IE,OU),e(OU,aEr),e(IE,nEr),e(ie,sEr),e(ie,NE),e(NE,TFe),e(TFe,lEr),e(NE,iEr),e(NE,VU),e(VU,dEr),e(NE,cEr),e(ie,fEr),e(ie,qE),e(qE,MFe),e(MFe,mEr),e(qE,gEr),e(qE,XU),e(XU,hEr),e(qE,pEr),e(ie,_Er),e(ie,jE),e(jE,EFe),e(EFe,uEr),e(jE,bEr),e(jE,zU),e(zU,vEr),e(jE,FEr),e(ie,TEr),e(ie,DE),e(DE,CFe),e(CFe,MEr),e(DE,EEr),e(DE,WU),e(WU,CEr),e(DE,wEr),e(ie,AEr),e(ie,GE),e(GE,wFe),e(wFe,LEr),e(GE,yEr),e(GE,QU),e(QU,xEr),e(GE,$Er),e(ie,kEr),e(ie,OE),e(OE,AFe),e(AFe,SEr),e(OE,REr),e(OE,HU),e(HU,PEr),e(OE,BEr),e(ie,IEr),e(ie,VE),e(VE,LFe),e(LFe,NEr),e(VE,qEr),e(VE,UU),e(UU,jEr),e(VE,DEr),e(ie,GEr),e(ie,XE),e(XE,yFe),e(yFe,OEr),e(XE,VEr),e(XE,JU),e(JU,XEr),e(XE,zEr),e(ie,WEr),e(ie,zE),e(zE,xFe),e(xFe,QEr),e(zE,HEr),e(zE,YU),e(YU,UEr),e(zE,JEr),e(ie,YEr),e(ie,WE),e(WE,$Fe),e($Fe,KEr),e(WE,ZEr),e(WE,KU),e(KU,e4r),e(WE,o4r),e(ie,r4r),e(ie,QE),e(QE,kFe),e(kFe,t4r),e(QE,a4r),e(QE,ZU),e(ZU,n4r),e(QE,s4r),e(ie,l4r),e(ie,HE),e(HE,SFe),e(SFe,i4r),e(HE,d4r),e(HE,eJ),e(eJ,c4r),e(HE,f4r),e(ie,m4r),e(ie,UE),e(UE,RFe),e(RFe,g4r),e(UE,h4r),e(UE,oJ),e(oJ,p4r),e(UE,_4r),e(ie,u4r),e(ie,JE),e(JE,PFe),e(PFe,b4r),e(JE,v4r),e(JE,rJ),e(rJ,F4r),e(JE,T4r),e(kr,M4r),M(YE,kr,null),b(f,kOe,u),b(f,hc,u),e(hc,KE),e(KE,BFe),M(P8,BFe,null),e(hc,E4r),e(hc,IFe),e(IFe,C4r),b(f,SOe,u),b(f,ar,u),M(B8,ar,null),e(ar,w4r),e(ar,pc),e(pc,A4r),e(pc,tJ),e(tJ,L4r),e(pc,y4r),e(pc,aJ),e(aJ,x4r),e(pc,$4r),e(ar,k4r),e(ar,I8),e(I8,S4r),e(I8,NFe),e(NFe,R4r),e(I8,P4r),e(ar,B4r),e(ar,Bt),M(N8,Bt,null),e(Bt,I4r),e(Bt,qFe),e(qFe,N4r),e(Bt,q4r),e(Bt,_c),e(_c,j4r),e(_c,jFe),e(jFe,D4r),e(_c,G4r),e(_c,nJ),e(nJ,O4r),e(_c,V4r),e(Bt,X4r),M(ZE,Bt,null),e(ar,z4r),e(ar,Sr),M(q8,Sr,null),e(Sr,W4r),e(Sr,DFe),e(DFe,Q4r),e(Sr,H4r),e(Sr,cn),e(cn,U4r),e(cn,GFe),e(GFe,J4r),e(cn,Y4r),e(cn,OFe),e(OFe,K4r),e(cn,Z4r),e(cn,VFe),e(VFe,eCr),e(cn,oCr),e(Sr,rCr),e(Sr,ye),e(ye,e4),e(e4,XFe),e(XFe,tCr),e(e4,aCr),e(e4,sJ),e(sJ,nCr),e(e4,sCr),e(ye,lCr),e(ye,o4),e(o4,zFe),e(zFe,iCr),e(o4,dCr),e(o4,lJ),e(lJ,cCr),e(o4,fCr),e(ye,mCr),e(ye,r4),e(r4,WFe),e(WFe,gCr),e(r4,hCr),e(r4,iJ),e(iJ,pCr),e(r4,_Cr),e(ye,uCr),e(ye,t4),e(t4,QFe),e(QFe,bCr),e(t4,vCr),e(t4,dJ),e(dJ,FCr),e(t4,TCr),e(ye,MCr),e(ye,a4),e(a4,HFe),e(HFe,ECr),e(a4,CCr),e(a4,cJ),e(cJ,wCr),e(a4,ACr),e(ye,LCr),e(ye,n4),e(n4,UFe),e(UFe,yCr),e(n4,xCr),e(n4,fJ),e(fJ,$Cr),e(n4,kCr),e(ye,SCr),e(ye,s4),e(s4,JFe),e(JFe,RCr),e(s4,PCr),e(s4,mJ),e(mJ,BCr),e(s4,ICr),e(ye,NCr),e(ye,l4),e(l4,YFe),e(YFe,qCr),e(l4,jCr),e(l4,gJ),e(gJ,DCr),e(l4,GCr),e(ye,OCr),e(ye,i4),e(i4,KFe),e(KFe,VCr),e(i4,XCr),e(i4,hJ),e(hJ,zCr),e(i4,WCr),e(ye,QCr),e(ye,d4),e(d4,ZFe),e(ZFe,HCr),e(d4,UCr),e(d4,pJ),e(pJ,JCr),e(d4,YCr),e(Sr,KCr),M(c4,Sr,null),b(f,ROe,u),b(f,uc,u),e(uc,f4),e(f4,eTe),M(j8,eTe,null),e(uc,ZCr),e(uc,oTe),e(oTe,e5r),b(f,POe,u),b(f,nr,u),M(D8,nr,null),e(nr,o5r),e(nr,bc),e(bc,r5r),e(bc,_J),e(_J,t5r),e(bc,a5r),e(bc,uJ),e(uJ,n5r),e(bc,s5r),e(nr,l5r),e(nr,G8),e(G8,i5r),e(G8,rTe),e(rTe,d5r),e(G8,c5r),e(nr,f5r),e(nr,It),M(O8,It,null),e(It,m5r),e(It,tTe),e(tTe,g5r),e(It,h5r),e(It,vc),e(vc,p5r),e(vc,aTe),e(aTe,_5r),e(vc,u5r),e(vc,bJ),e(bJ,b5r),e(vc,v5r),e(It,F5r),M(m4,It,null),e(nr,T5r),e(nr,Rr),M(V8,Rr,null),e(Rr,M5r),e(Rr,nTe),e(nTe,E5r),e(Rr,C5r),e(Rr,fn),e(fn,w5r),e(fn,sTe),e(sTe,A5r),e(fn,L5r),e(fn,lTe),e(lTe,y5r),e(fn,x5r),e(fn,iTe),e(iTe,$5r),e(fn,k5r),e(Rr,S5r),e(Rr,te),e(te,g4),e(g4,dTe),e(dTe,R5r),e(g4,P5r),e(g4,vJ),e(vJ,B5r),e(g4,I5r),e(te,N5r),e(te,h4),e(h4,cTe),e(cTe,q5r),e(h4,j5r),e(h4,FJ),e(FJ,D5r),e(h4,G5r),e(te,O5r),e(te,p4),e(p4,fTe),e(fTe,V5r),e(p4,X5r),e(p4,TJ),e(TJ,z5r),e(p4,W5r),e(te,Q5r),e(te,_4),e(_4,mTe),e(mTe,H5r),e(_4,U5r),e(_4,MJ),e(MJ,J5r),e(_4,Y5r),e(te,K5r),e(te,u4),e(u4,gTe),e(gTe,Z5r),e(u4,e3r),e(u4,EJ),e(EJ,o3r),e(u4,r3r),e(te,t3r),e(te,b4),e(b4,hTe),e(hTe,a3r),e(b4,n3r),e(b4,CJ),e(CJ,s3r),e(b4,l3r),e(te,i3r),e(te,v4),e(v4,pTe),e(pTe,d3r),e(v4,c3r),e(v4,wJ),e(wJ,f3r),e(v4,m3r),e(te,g3r),e(te,F4),e(F4,_Te),e(_Te,h3r),e(F4,p3r),e(F4,AJ),e(AJ,_3r),e(F4,u3r),e(te,b3r),e(te,T4),e(T4,uTe),e(uTe,v3r),e(T4,F3r),e(T4,LJ),e(LJ,T3r),e(T4,M3r),e(te,E3r),e(te,M4),e(M4,bTe),e(bTe,C3r),e(M4,w3r),e(M4,yJ),e(yJ,A3r),e(M4,L3r),e(te,y3r),e(te,E4),e(E4,vTe),e(vTe,x3r),e(E4,$3r),e(E4,xJ),e(xJ,k3r),e(E4,S3r),e(te,R3r),e(te,C4),e(C4,FTe),e(FTe,P3r),e(C4,B3r),e(C4,$J),e($J,I3r),e(C4,N3r),e(te,q3r),e(te,w4),e(w4,TTe),e(TTe,j3r),e(w4,D3r),e(w4,kJ),e(kJ,G3r),e(w4,O3r),e(te,V3r),e(te,A4),e(A4,MTe),e(MTe,X3r),e(A4,z3r),e(A4,SJ),e(SJ,W3r),e(A4,Q3r),e(te,H3r),e(te,L4),e(L4,ETe),e(ETe,U3r),e(L4,J3r),e(L4,RJ),e(RJ,Y3r),e(L4,K3r),e(te,Z3r),e(te,y4),e(y4,CTe),e(CTe,e0r),e(y4,o0r),e(y4,PJ),e(PJ,r0r),e(y4,t0r),e(te,a0r),e(te,x4),e(x4,wTe),e(wTe,n0r),e(x4,s0r),e(x4,BJ),e(BJ,l0r),e(x4,i0r),e(te,d0r),e(te,$4),e($4,ATe),e(ATe,c0r),e($4,f0r),e($4,IJ),e(IJ,m0r),e($4,g0r),e(te,h0r),e(te,k4),e(k4,LTe),e(LTe,p0r),e(k4,_0r),e(k4,NJ),e(NJ,u0r),e(k4,b0r),e(te,v0r),e(te,S4),e(S4,yTe),e(yTe,F0r),e(S4,T0r),e(S4,qJ),e(qJ,M0r),e(S4,E0r),e(te,C0r),e(te,R4),e(R4,xTe),e(xTe,w0r),e(R4,A0r),e(R4,jJ),e(jJ,L0r),e(R4,y0r),e(te,x0r),e(te,P4),e(P4,$Te),e($Te,$0r),e(P4,k0r),e(P4,DJ),e(DJ,S0r),e(P4,R0r),e(te,P0r),e(te,B4),e(B4,kTe),e(kTe,B0r),e(B4,I0r),e(B4,GJ),e(GJ,N0r),e(B4,q0r),e(te,j0r),e(te,I4),e(I4,STe),e(STe,D0r),e(I4,G0r),e(I4,OJ),e(OJ,O0r),e(I4,V0r),e(te,X0r),e(te,N4),e(N4,RTe),e(RTe,z0r),e(N4,W0r),e(N4,VJ),e(VJ,Q0r),e(N4,H0r),e(te,U0r),e(te,q4),e(q4,PTe),e(PTe,J0r),e(q4,Y0r),e(q4,XJ),e(XJ,K0r),e(q4,Z0r),e(Rr,ewr),M(j4,Rr,null),b(f,BOe,u),b(f,Fc,u),e(Fc,D4),e(D4,BTe),M(X8,BTe,null),e(Fc,owr),e(Fc,ITe),e(ITe,rwr),b(f,IOe,u),b(f,sr,u),M(z8,sr,null),e(sr,twr),e(sr,Tc),e(Tc,awr),e(Tc,zJ),e(zJ,nwr),e(Tc,swr),e(Tc,WJ),e(WJ,lwr),e(Tc,iwr),e(sr,dwr),e(sr,W8),e(W8,cwr),e(W8,NTe),e(NTe,fwr),e(W8,mwr),e(sr,gwr),e(sr,Nt),M(Q8,Nt,null),e(Nt,hwr),e(Nt,qTe),e(qTe,pwr),e(Nt,_wr),e(Nt,Mc),e(Mc,uwr),e(Mc,jTe),e(jTe,bwr),e(Mc,vwr),e(Mc,QJ),e(QJ,Fwr),e(Mc,Twr),e(Nt,Mwr),M(G4,Nt,null),e(sr,Ewr),e(sr,Pr),M(H8,Pr,null),e(Pr,Cwr),e(Pr,DTe),e(DTe,wwr),e(Pr,Awr),e(Pr,mn),e(mn,Lwr),e(mn,GTe),e(GTe,ywr),e(mn,xwr),e(mn,OTe),e(OTe,$wr),e(mn,kwr),e(mn,VTe),e(VTe,Swr),e(mn,Rwr),e(Pr,Pwr),e(Pr,_e),e(_e,O4),e(O4,XTe),e(XTe,Bwr),e(O4,Iwr),e(O4,HJ),e(HJ,Nwr),e(O4,qwr),e(_e,jwr),e(_e,V4),e(V4,zTe),e(zTe,Dwr),e(V4,Gwr),e(V4,UJ),e(UJ,Owr),e(V4,Vwr),e(_e,Xwr),e(_e,X4),e(X4,WTe),e(WTe,zwr),e(X4,Wwr),e(X4,JJ),e(JJ,Qwr),e(X4,Hwr),e(_e,Uwr),e(_e,z4),e(z4,QTe),e(QTe,Jwr),e(z4,Ywr),e(z4,YJ),e(YJ,Kwr),e(z4,Zwr),e(_e,eAr),e(_e,W4),e(W4,HTe),e(HTe,oAr),e(W4,rAr),e(W4,KJ),e(KJ,tAr),e(W4,aAr),e(_e,nAr),e(_e,Q4),e(Q4,UTe),e(UTe,sAr),e(Q4,lAr),e(Q4,ZJ),e(ZJ,iAr),e(Q4,dAr),e(_e,cAr),e(_e,H4),e(H4,JTe),e(JTe,fAr),e(H4,mAr),e(H4,eY),e(eY,gAr),e(H4,hAr),e(_e,pAr),e(_e,U4),e(U4,YTe),e(YTe,_Ar),e(U4,uAr),e(U4,oY),e(oY,bAr),e(U4,vAr),e(_e,FAr),e(_e,J4),e(J4,KTe),e(KTe,TAr),e(J4,MAr),e(J4,rY),e(rY,EAr),e(J4,CAr),e(_e,wAr),e(_e,Y4),e(Y4,ZTe),e(ZTe,AAr),e(Y4,LAr),e(Y4,tY),e(tY,yAr),e(Y4,xAr),e(_e,$Ar),e(_e,K4),e(K4,eMe),e(eMe,kAr),e(K4,SAr),e(K4,aY),e(aY,RAr),e(K4,PAr),e(_e,BAr),e(_e,Z4),e(Z4,oMe),e(oMe,IAr),e(Z4,NAr),e(Z4,nY),e(nY,qAr),e(Z4,jAr),e(_e,DAr),e(_e,eC),e(eC,rMe),e(rMe,GAr),e(eC,OAr),e(eC,sY),e(sY,VAr),e(eC,XAr),e(_e,zAr),e(_e,oC),e(oC,tMe),e(tMe,WAr),e(oC,QAr),e(oC,lY),e(lY,HAr),e(oC,UAr),e(_e,JAr),e(_e,rC),e(rC,aMe),e(aMe,YAr),e(rC,KAr),e(rC,iY),e(iY,ZAr),e(rC,e6r),e(_e,o6r),e(_e,tC),e(tC,nMe),e(nMe,r6r),e(tC,t6r),e(tC,dY),e(dY,a6r),e(tC,n6r),e(_e,s6r),e(_e,aC),e(aC,sMe),e(sMe,l6r),e(aC,i6r),e(aC,cY),e(cY,d6r),e(aC,c6r),e(Pr,f6r),M(nC,Pr,null),b(f,NOe,u),b(f,Ec,u),e(Ec,sC),e(sC,lMe),M(U8,lMe,null),e(Ec,m6r),e(Ec,iMe),e(iMe,g6r),b(f,qOe,u),b(f,lr,u),M(J8,lr,null),e(lr,h6r),e(lr,Cc),e(Cc,p6r),e(Cc,fY),e(fY,_6r),e(Cc,u6r),e(Cc,mY),e(mY,b6r),e(Cc,v6r),e(lr,F6r),e(lr,Y8),e(Y8,T6r),e(Y8,dMe),e(dMe,M6r),e(Y8,E6r),e(lr,C6r),e(lr,qt),M(K8,qt,null),e(qt,w6r),e(qt,cMe),e(cMe,A6r),e(qt,L6r),e(qt,wc),e(wc,y6r),e(wc,fMe),e(fMe,x6r),e(wc,$6r),e(wc,gY),e(gY,k6r),e(wc,S6r),e(qt,R6r),M(lC,qt,null),e(lr,P6r),e(lr,Br),M(Z8,Br,null),e(Br,B6r),e(Br,mMe),e(mMe,I6r),e(Br,N6r),e(Br,gn),e(gn,q6r),e(gn,gMe),e(gMe,j6r),e(gn,D6r),e(gn,hMe),e(hMe,G6r),e(gn,O6r),e(gn,pMe),e(pMe,V6r),e(gn,X6r),e(Br,z6r),e(Br,ex),e(ex,iC),e(iC,_Me),e(_Me,W6r),e(iC,Q6r),e(iC,hY),e(hY,H6r),e(iC,U6r),e(ex,J6r),e(ex,dC),e(dC,uMe),e(uMe,Y6r),e(dC,K6r),e(dC,pY),e(pY,Z6r),e(dC,eLr),e(Br,oLr),M(cC,Br,null),b(f,jOe,u),b(f,Ac,u),e(Ac,fC),e(fC,bMe),M(ox,bMe,null),e(Ac,rLr),e(Ac,vMe),e(vMe,tLr),b(f,DOe,u),b(f,ir,u),M(rx,ir,null),e(ir,aLr),e(ir,Lc),e(Lc,nLr),e(Lc,_Y),e(_Y,sLr),e(Lc,lLr),e(Lc,uY),e(uY,iLr),e(Lc,dLr),e(ir,cLr),e(ir,tx),e(tx,fLr),e(tx,FMe),e(FMe,mLr),e(tx,gLr),e(ir,hLr),e(ir,jt),M(ax,jt,null),e(jt,pLr),e(jt,TMe),e(TMe,_Lr),e(jt,uLr),e(jt,yc),e(yc,bLr),e(yc,MMe),e(MMe,vLr),e(yc,FLr),e(yc,bY),e(bY,TLr),e(yc,MLr),e(jt,ELr),M(mC,jt,null),e(ir,CLr),e(ir,Ir),M(nx,Ir,null),e(Ir,wLr),e(Ir,EMe),e(EMe,ALr),e(Ir,LLr),e(Ir,hn),e(hn,yLr),e(hn,CMe),e(CMe,xLr),e(hn,$Lr),e(hn,wMe),e(wMe,kLr),e(hn,SLr),e(hn,AMe),e(AMe,RLr),e(hn,PLr),e(Ir,BLr),e(Ir,LMe),e(LMe,gC),e(gC,yMe),e(yMe,ILr),e(gC,NLr),e(gC,vY),e(vY,qLr),e(gC,jLr),e(Ir,DLr),M(hC,Ir,null),b(f,GOe,u),b(f,xc,u),e(xc,pC),e(pC,xMe),M(sx,xMe,null),e(xc,GLr),e(xc,$Me),e($Me,OLr),b(f,OOe,u),b(f,dr,u),M(lx,dr,null),e(dr,VLr),e(dr,$c),e($c,XLr),e($c,FY),e(FY,zLr),e($c,WLr),e($c,TY),e(TY,QLr),e($c,HLr),e(dr,ULr),e(dr,ix),e(ix,JLr),e(ix,kMe),e(kMe,YLr),e(ix,KLr),e(dr,ZLr),e(dr,Dt),M(dx,Dt,null),e(Dt,eyr),e(Dt,SMe),e(SMe,oyr),e(Dt,ryr),e(Dt,kc),e(kc,tyr),e(kc,RMe),e(RMe,ayr),e(kc,nyr),e(kc,MY),e(MY,syr),e(kc,lyr),e(Dt,iyr),M(_C,Dt,null),e(dr,dyr),e(dr,Nr),M(cx,Nr,null),e(Nr,cyr),e(Nr,PMe),e(PMe,fyr),e(Nr,myr),e(Nr,pn),e(pn,gyr),e(pn,BMe),e(BMe,hyr),e(pn,pyr),e(pn,IMe),e(IMe,_yr),e(pn,uyr),e(pn,NMe),e(NMe,byr),e(pn,vyr),e(Nr,Fyr),e(Nr,de),e(de,uC),e(uC,qMe),e(qMe,Tyr),e(uC,Myr),e(uC,EY),e(EY,Eyr),e(uC,Cyr),e(de,wyr),e(de,bC),e(bC,jMe),e(jMe,Ayr),e(bC,Lyr),e(bC,CY),e(CY,yyr),e(bC,xyr),e(de,$yr),e(de,vC),e(vC,DMe),e(DMe,kyr),e(vC,Syr),e(vC,wY),e(wY,Ryr),e(vC,Pyr),e(de,Byr),e(de,FC),e(FC,GMe),e(GMe,Iyr),e(FC,Nyr),e(FC,AY),e(AY,qyr),e(FC,jyr),e(de,Dyr),e(de,TC),e(TC,OMe),e(OMe,Gyr),e(TC,Oyr),e(TC,LY),e(LY,Vyr),e(TC,Xyr),e(de,zyr),e(de,MC),e(MC,VMe),e(VMe,Wyr),e(MC,Qyr),e(MC,yY),e(yY,Hyr),e(MC,Uyr),e(de,Jyr),e(de,EC),e(EC,XMe),e(XMe,Yyr),e(EC,Kyr),e(EC,xY),e(xY,Zyr),e(EC,e8r),e(de,o8r),e(de,CC),e(CC,zMe),e(zMe,r8r),e(CC,t8r),e(CC,$Y),e($Y,a8r),e(CC,n8r),e(de,s8r),e(de,wC),e(wC,WMe),e(WMe,l8r),e(wC,i8r),e(wC,kY),e(kY,d8r),e(wC,c8r),e(de,f8r),e(de,AC),e(AC,QMe),e(QMe,m8r),e(AC,g8r),e(AC,SY),e(SY,h8r),e(AC,p8r),e(de,_8r),e(de,LC),e(LC,HMe),e(HMe,u8r),e(LC,b8r),e(LC,RY),e(RY,v8r),e(LC,F8r),e(de,T8r),e(de,yC),e(yC,UMe),e(UMe,M8r),e(yC,E8r),e(yC,PY),e(PY,C8r),e(yC,w8r),e(de,A8r),e(de,xC),e(xC,JMe),e(JMe,L8r),e(xC,y8r),e(xC,BY),e(BY,x8r),e(xC,$8r),e(de,k8r),e(de,$C),e($C,YMe),e(YMe,S8r),e($C,R8r),e($C,IY),e(IY,P8r),e($C,B8r),e(de,I8r),e(de,kC),e(kC,KMe),e(KMe,N8r),e(kC,q8r),e(kC,NY),e(NY,j8r),e(kC,D8r),e(de,G8r),e(de,SC),e(SC,ZMe),e(ZMe,O8r),e(SC,V8r),e(SC,qY),e(qY,X8r),e(SC,z8r),e(de,W8r),e(de,RC),e(RC,eEe),e(eEe,Q8r),e(RC,H8r),e(RC,jY),e(jY,U8r),e(RC,J8r),e(de,Y8r),e(de,PC),e(PC,oEe),e(oEe,K8r),e(PC,Z8r),e(PC,DY),e(DY,exr),e(PC,oxr),e(de,rxr),e(de,BC),e(BC,rEe),e(rEe,txr),e(BC,axr),e(BC,GY),e(GY,nxr),e(BC,sxr),e(de,lxr),e(de,IC),e(IC,tEe),e(tEe,ixr),e(IC,dxr),e(IC,OY),e(OY,cxr),e(IC,fxr),e(Nr,mxr),M(NC,Nr,null),b(f,VOe,u),b(f,Sc,u),e(Sc,qC),e(qC,aEe),M(fx,aEe,null),e(Sc,gxr),e(Sc,nEe),e(nEe,hxr),b(f,XOe,u),b(f,cr,u),M(mx,cr,null),e(cr,pxr),e(cr,Rc),e(Rc,_xr),e(Rc,VY),e(VY,uxr),e(Rc,bxr),e(Rc,XY),e(XY,vxr),e(Rc,Fxr),e(cr,Txr),e(cr,gx),e(gx,Mxr),e(gx,sEe),e(sEe,Exr),e(gx,Cxr),e(cr,wxr),e(cr,Gt),M(hx,Gt,null),e(Gt,Axr),e(Gt,lEe),e(lEe,Lxr),e(Gt,yxr),e(Gt,Pc),e(Pc,xxr),e(Pc,iEe),e(iEe,$xr),e(Pc,kxr),e(Pc,zY),e(zY,Sxr),e(Pc,Rxr),e(Gt,Pxr),M(jC,Gt,null),e(cr,Bxr),e(cr,qr),M(px,qr,null),e(qr,Ixr),e(qr,dEe),e(dEe,Nxr),e(qr,qxr),e(qr,_n),e(_n,jxr),e(_n,cEe),e(cEe,Dxr),e(_n,Gxr),e(_n,fEe),e(fEe,Oxr),e(_n,Vxr),e(_n,mEe),e(mEe,Xxr),e(_n,zxr),e(qr,Wxr),e(qr,ce),e(ce,DC),e(DC,gEe),e(gEe,Qxr),e(DC,Hxr),e(DC,WY),e(WY,Uxr),e(DC,Jxr),e(ce,Yxr),e(ce,GC),e(GC,hEe),e(hEe,Kxr),e(GC,Zxr),e(GC,QY),e(QY,e$r),e(GC,o$r),e(ce,r$r),e(ce,OC),e(OC,pEe),e(pEe,t$r),e(OC,a$r),e(OC,HY),e(HY,n$r),e(OC,s$r),e(ce,l$r),e(ce,VC),e(VC,_Ee),e(_Ee,i$r),e(VC,d$r),e(VC,UY),e(UY,c$r),e(VC,f$r),e(ce,m$r),e(ce,XC),e(XC,uEe),e(uEe,g$r),e(XC,h$r),e(XC,JY),e(JY,p$r),e(XC,_$r),e(ce,u$r),e(ce,zC),e(zC,bEe),e(bEe,b$r),e(zC,v$r),e(zC,YY),e(YY,F$r),e(zC,T$r),e(ce,M$r),e(ce,WC),e(WC,vEe),e(vEe,E$r),e(WC,C$r),e(WC,KY),e(KY,w$r),e(WC,A$r),e(ce,L$r),e(ce,QC),e(QC,FEe),e(FEe,y$r),e(QC,x$r),e(QC,ZY),e(ZY,$$r),e(QC,k$r),e(ce,S$r),e(ce,HC),e(HC,TEe),e(TEe,R$r),e(HC,P$r),e(HC,eK),e(eK,B$r),e(HC,I$r),e(ce,N$r),e(ce,UC),e(UC,MEe),e(MEe,q$r),e(UC,j$r),e(UC,oK),e(oK,D$r),e(UC,G$r),e(ce,O$r),e(ce,JC),e(JC,EEe),e(EEe,V$r),e(JC,X$r),e(JC,rK),e(rK,z$r),e(JC,W$r),e(ce,Q$r),e(ce,YC),e(YC,CEe),e(CEe,H$r),e(YC,U$r),e(YC,tK),e(tK,J$r),e(YC,Y$r),e(ce,K$r),e(ce,KC),e(KC,wEe),e(wEe,Z$r),e(KC,ekr),e(KC,aK),e(aK,okr),e(KC,rkr),e(ce,tkr),e(ce,ZC),e(ZC,AEe),e(AEe,akr),e(ZC,nkr),e(ZC,nK),e(nK,skr),e(ZC,lkr),e(ce,ikr),e(ce,e5),e(e5,LEe),e(LEe,dkr),e(e5,ckr),e(e5,sK),e(sK,fkr),e(e5,mkr),e(ce,gkr),e(ce,o5),e(o5,yEe),e(yEe,hkr),e(o5,pkr),e(o5,lK),e(lK,_kr),e(o5,ukr),e(ce,bkr),e(ce,r5),e(r5,xEe),e(xEe,vkr),e(r5,Fkr),e(r5,iK),e(iK,Tkr),e(r5,Mkr),e(ce,Ekr),e(ce,t5),e(t5,$Ee),e($Ee,Ckr),e(t5,wkr),e(t5,dK),e(dK,Akr),e(t5,Lkr),e(ce,ykr),e(ce,a5),e(a5,kEe),e(kEe,xkr),e(a5,$kr),e(a5,cK),e(cK,kkr),e(a5,Skr),e(ce,Rkr),e(ce,n5),e(n5,SEe),e(SEe,Pkr),e(n5,Bkr),e(n5,fK),e(fK,Ikr),e(n5,Nkr),e(qr,qkr),M(s5,qr,null),b(f,zOe,u),b(f,Bc,u),e(Bc,l5),e(l5,REe),M(_x,REe,null),e(Bc,jkr),e(Bc,PEe),e(PEe,Dkr),b(f,WOe,u),b(f,fr,u),M(ux,fr,null),e(fr,Gkr),e(fr,Ic),e(Ic,Okr),e(Ic,mK),e(mK,Vkr),e(Ic,Xkr),e(Ic,gK),e(gK,zkr),e(Ic,Wkr),e(fr,Qkr),e(fr,bx),e(bx,Hkr),e(bx,BEe),e(BEe,Ukr),e(bx,Jkr),e(fr,Ykr),e(fr,Ot),M(vx,Ot,null),e(Ot,Kkr),e(Ot,IEe),e(IEe,Zkr),e(Ot,eSr),e(Ot,Nc),e(Nc,oSr),e(Nc,NEe),e(NEe,rSr),e(Nc,tSr),e(Nc,hK),e(hK,aSr),e(Nc,nSr),e(Ot,sSr),M(i5,Ot,null),e(fr,lSr),e(fr,jr),M(Fx,jr,null),e(jr,iSr),e(jr,qEe),e(qEe,dSr),e(jr,cSr),e(jr,un),e(un,fSr),e(un,jEe),e(jEe,mSr),e(un,gSr),e(un,DEe),e(DEe,hSr),e(un,pSr),e(un,GEe),e(GEe,_Sr),e(un,uSr),e(jr,bSr),e(jr,OEe),e(OEe,d5),e(d5,VEe),e(VEe,vSr),e(d5,FSr),e(d5,pK),e(pK,TSr),e(d5,MSr),e(jr,ESr),M(c5,jr,null),b(f,QOe,u),b(f,qc,u),e(qc,f5),e(f5,XEe),M(Tx,XEe,null),e(qc,CSr),e(qc,zEe),e(zEe,wSr),b(f,HOe,u),b(f,mr,u),M(Mx,mr,null),e(mr,ASr),e(mr,jc),e(jc,LSr),e(jc,_K),e(_K,ySr),e(jc,xSr),e(jc,uK),e(uK,$Sr),e(jc,kSr),e(mr,SSr),e(mr,Ex),e(Ex,RSr),e(Ex,WEe),e(WEe,PSr),e(Ex,BSr),e(mr,ISr),e(mr,Vt),M(Cx,Vt,null),e(Vt,NSr),e(Vt,QEe),e(QEe,qSr),e(Vt,jSr),e(Vt,Dc),e(Dc,DSr),e(Dc,HEe),e(HEe,GSr),e(Dc,OSr),e(Dc,bK),e(bK,VSr),e(Dc,XSr),e(Vt,zSr),M(m5,Vt,null),e(mr,WSr),e(mr,Dr),M(wx,Dr,null),e(Dr,QSr),e(Dr,UEe),e(UEe,HSr),e(Dr,USr),e(Dr,bn),e(bn,JSr),e(bn,JEe),e(JEe,YSr),e(bn,KSr),e(bn,YEe),e(YEe,ZSr),e(bn,eRr),e(bn,KEe),e(KEe,oRr),e(bn,rRr),e(Dr,tRr),e(Dr,ZEe),e(ZEe,g5),e(g5,e4e),e(e4e,aRr),e(g5,nRr),e(g5,vK),e(vK,sRr),e(g5,lRr),e(Dr,iRr),M(h5,Dr,null),b(f,UOe,u),b(f,Gc,u),e(Gc,p5),e(p5,o4e),M(Ax,o4e,null),e(Gc,dRr),e(Gc,r4e),e(r4e,cRr),b(f,JOe,u),b(f,gr,u),M(Lx,gr,null),e(gr,fRr),e(gr,Oc),e(Oc,mRr),e(Oc,FK),e(FK,gRr),e(Oc,hRr),e(Oc,TK),e(TK,pRr),e(Oc,_Rr),e(gr,uRr),e(gr,yx),e(yx,bRr),e(yx,t4e),e(t4e,vRr),e(yx,FRr),e(gr,TRr),e(gr,Xt),M(xx,Xt,null),e(Xt,MRr),e(Xt,a4e),e(a4e,ERr),e(Xt,CRr),e(Xt,Vc),e(Vc,wRr),e(Vc,n4e),e(n4e,ARr),e(Vc,LRr),e(Vc,MK),e(MK,yRr),e(Vc,xRr),e(Xt,$Rr),M(_5,Xt,null),e(gr,kRr),e(gr,Gr),M($x,Gr,null),e(Gr,SRr),e(Gr,s4e),e(s4e,RRr),e(Gr,PRr),e(Gr,vn),e(vn,BRr),e(vn,l4e),e(l4e,IRr),e(vn,NRr),e(vn,i4e),e(i4e,qRr),e(vn,jRr),e(vn,d4e),e(d4e,DRr),e(vn,GRr),e(Gr,ORr),e(Gr,oe),e(oe,u5),e(u5,c4e),e(c4e,VRr),e(u5,XRr),e(u5,EK),e(EK,zRr),e(u5,WRr),e(oe,QRr),e(oe,b5),e(b5,f4e),e(f4e,HRr),e(b5,URr),e(b5,CK),e(CK,JRr),e(b5,YRr),e(oe,KRr),e(oe,v5),e(v5,m4e),e(m4e,ZRr),e(v5,ePr),e(v5,wK),e(wK,oPr),e(v5,rPr),e(oe,tPr),e(oe,F5),e(F5,g4e),e(g4e,aPr),e(F5,nPr),e(F5,AK),e(AK,sPr),e(F5,lPr),e(oe,iPr),e(oe,T5),e(T5,h4e),e(h4e,dPr),e(T5,cPr),e(T5,LK),e(LK,fPr),e(T5,mPr),e(oe,gPr),e(oe,M5),e(M5,p4e),e(p4e,hPr),e(M5,pPr),e(M5,yK),e(yK,_Pr),e(M5,uPr),e(oe,bPr),e(oe,E5),e(E5,_4e),e(_4e,vPr),e(E5,FPr),e(E5,xK),e(xK,TPr),e(E5,MPr),e(oe,EPr),e(oe,C5),e(C5,u4e),e(u4e,CPr),e(C5,wPr),e(C5,$K),e($K,APr),e(C5,LPr),e(oe,yPr),e(oe,w5),e(w5,b4e),e(b4e,xPr),e(w5,$Pr),e(w5,kK),e(kK,kPr),e(w5,SPr),e(oe,RPr),e(oe,A5),e(A5,v4e),e(v4e,PPr),e(A5,BPr),e(A5,SK),e(SK,IPr),e(A5,NPr),e(oe,qPr),e(oe,L5),e(L5,F4e),e(F4e,jPr),e(L5,DPr),e(L5,RK),e(RK,GPr),e(L5,OPr),e(oe,VPr),e(oe,y5),e(y5,T4e),e(T4e,XPr),e(y5,zPr),e(y5,PK),e(PK,WPr),e(y5,QPr),e(oe,HPr),e(oe,x5),e(x5,M4e),e(M4e,UPr),e(x5,JPr),e(x5,BK),e(BK,YPr),e(x5,KPr),e(oe,ZPr),e(oe,$5),e($5,E4e),e(E4e,eBr),e($5,oBr),e($5,IK),e(IK,rBr),e($5,tBr),e(oe,aBr),e(oe,k5),e(k5,C4e),e(C4e,nBr),e(k5,sBr),e(k5,NK),e(NK,lBr),e(k5,iBr),e(oe,dBr),e(oe,S5),e(S5,w4e),e(w4e,cBr),e(S5,fBr),e(S5,qK),e(qK,mBr),e(S5,gBr),e(oe,hBr),e(oe,R5),e(R5,A4e),e(A4e,pBr),e(R5,_Br),e(R5,jK),e(jK,uBr),e(R5,bBr),e(oe,vBr),e(oe,P5),e(P5,L4e),e(L4e,FBr),e(P5,TBr),e(P5,DK),e(DK,MBr),e(P5,EBr),e(oe,CBr),e(oe,B5),e(B5,y4e),e(y4e,wBr),e(B5,ABr),e(B5,GK),e(GK,LBr),e(B5,yBr),e(oe,xBr),e(oe,I5),e(I5,x4e),e(x4e,$Br),e(I5,kBr),e(I5,OK),e(OK,SBr),e(I5,RBr),e(oe,PBr),e(oe,N5),e(N5,$4e),e($4e,BBr),e(N5,IBr),e(N5,VK),e(VK,NBr),e(N5,qBr),e(oe,jBr),e(oe,q5),e(q5,k4e),e(k4e,DBr),e(q5,GBr),e(q5,XK),e(XK,OBr),e(q5,VBr),e(oe,XBr),e(oe,j5),e(j5,S4e),e(S4e,zBr),e(j5,WBr),e(j5,zK),e(zK,QBr),e(j5,HBr),e(oe,UBr),e(oe,D5),e(D5,R4e),e(R4e,JBr),e(D5,YBr),e(D5,WK),e(WK,KBr),e(D5,ZBr),e(oe,eIr),e(oe,G5),e(G5,P4e),e(P4e,oIr),e(G5,rIr),e(G5,QK),e(QK,tIr),e(G5,aIr),e(oe,nIr),e(oe,O5),e(O5,B4e),e(B4e,sIr),e(O5,lIr),e(O5,HK),e(HK,iIr),e(O5,dIr),e(oe,cIr),e(oe,V5),e(V5,I4e),e(I4e,fIr),e(V5,mIr),e(V5,UK),e(UK,gIr),e(V5,hIr),e(Gr,pIr),M(X5,Gr,null),b(f,YOe,u),b(f,Xc,u),e(Xc,z5),e(z5,N4e),M(kx,N4e,null),e(Xc,_Ir),e(Xc,q4e),e(q4e,uIr),b(f,KOe,u),b(f,hr,u),M(Sx,hr,null),e(hr,bIr),e(hr,zc),e(zc,vIr),e(zc,JK),e(JK,FIr),e(zc,TIr),e(zc,YK),e(YK,MIr),e(zc,EIr),e(hr,CIr),e(hr,Rx),e(Rx,wIr),e(Rx,j4e),e(j4e,AIr),e(Rx,LIr),e(hr,yIr),e(hr,zt),M(Px,zt,null),e(zt,xIr),e(zt,D4e),e(D4e,$Ir),e(zt,kIr),e(zt,Wc),e(Wc,SIr),e(Wc,G4e),e(G4e,RIr),e(Wc,PIr),e(Wc,KK),e(KK,BIr),e(Wc,IIr),e(zt,NIr),M(W5,zt,null),e(hr,qIr),e(hr,Or),M(Bx,Or,null),e(Or,jIr),e(Or,O4e),e(O4e,DIr),e(Or,GIr),e(Or,Fn),e(Fn,OIr),e(Fn,V4e),e(V4e,VIr),e(Fn,XIr),e(Fn,X4e),e(X4e,zIr),e(Fn,WIr),e(Fn,z4e),e(z4e,QIr),e(Fn,HIr),e(Or,UIr),e(Or,xe),e(xe,Q5),e(Q5,W4e),e(W4e,JIr),e(Q5,YIr),e(Q5,ZK),e(ZK,KIr),e(Q5,ZIr),e(xe,eNr),e(xe,H5),e(H5,Q4e),e(Q4e,oNr),e(H5,rNr),e(H5,eZ),e(eZ,tNr),e(H5,aNr),e(xe,nNr),e(xe,U5),e(U5,H4e),e(H4e,sNr),e(U5,lNr),e(U5,oZ),e(oZ,iNr),e(U5,dNr),e(xe,cNr),e(xe,J5),e(J5,U4e),e(U4e,fNr),e(J5,mNr),e(J5,rZ),e(rZ,gNr),e(J5,hNr),e(xe,pNr),e(xe,Y5),e(Y5,J4e),e(J4e,_Nr),e(Y5,uNr),e(Y5,tZ),e(tZ,bNr),e(Y5,vNr),e(xe,FNr),e(xe,K5),e(K5,Y4e),e(Y4e,TNr),e(K5,MNr),e(K5,aZ),e(aZ,ENr),e(K5,CNr),e(xe,wNr),e(xe,Z5),e(Z5,K4e),e(K4e,ANr),e(Z5,LNr),e(Z5,nZ),e(nZ,yNr),e(Z5,xNr),e(xe,$Nr),e(xe,e3),e(e3,Z4e),e(Z4e,kNr),e(e3,SNr),e(e3,sZ),e(sZ,RNr),e(e3,PNr),e(xe,BNr),e(xe,o3),e(o3,eCe),e(eCe,INr),e(o3,NNr),e(o3,lZ),e(lZ,qNr),e(o3,jNr),e(xe,DNr),e(xe,r3),e(r3,oCe),e(oCe,GNr),e(r3,ONr),e(r3,iZ),e(iZ,VNr),e(r3,XNr),e(Or,zNr),M(t3,Or,null),b(f,ZOe,u),b(f,Qc,u),e(Qc,a3),e(a3,rCe),M(Ix,rCe,null),e(Qc,WNr),e(Qc,tCe),e(tCe,QNr),b(f,eVe,u),b(f,pr,u),M(Nx,pr,null),e(pr,HNr),e(pr,Hc),e(Hc,UNr),e(Hc,dZ),e(dZ,JNr),e(Hc,YNr),e(Hc,cZ),e(cZ,KNr),e(Hc,ZNr),e(pr,eqr),e(pr,qx),e(qx,oqr),e(qx,aCe),e(aCe,rqr),e(qx,tqr),e(pr,aqr),e(pr,Wt),M(jx,Wt,null),e(Wt,nqr),e(Wt,nCe),e(nCe,sqr),e(Wt,lqr),e(Wt,Uc),e(Uc,iqr),e(Uc,sCe),e(sCe,dqr),e(Uc,cqr),e(Uc,fZ),e(fZ,fqr),e(Uc,mqr),e(Wt,gqr),M(n3,Wt,null),e(pr,hqr),e(pr,Vr),M(Dx,Vr,null),e(Vr,pqr),e(Vr,lCe),e(lCe,_qr),e(Vr,uqr),e(Vr,Tn),e(Tn,bqr),e(Tn,iCe),e(iCe,vqr),e(Tn,Fqr),e(Tn,dCe),e(dCe,Tqr),e(Tn,Mqr),e(Tn,cCe),e(cCe,Eqr),e(Tn,Cqr),e(Vr,wqr),e(Vr,Ee),e(Ee,s3),e(s3,fCe),e(fCe,Aqr),e(s3,Lqr),e(s3,mZ),e(mZ,yqr),e(s3,xqr),e(Ee,$qr),e(Ee,l3),e(l3,mCe),e(mCe,kqr),e(l3,Sqr),e(l3,gZ),e(gZ,Rqr),e(l3,Pqr),e(Ee,Bqr),e(Ee,i3),e(i3,gCe),e(gCe,Iqr),e(i3,Nqr),e(i3,hZ),e(hZ,qqr),e(i3,jqr),e(Ee,Dqr),e(Ee,d3),e(d3,hCe),e(hCe,Gqr),e(d3,Oqr),e(d3,pZ),e(pZ,Vqr),e(d3,Xqr),e(Ee,zqr),e(Ee,c3),e(c3,pCe),e(pCe,Wqr),e(c3,Qqr),e(c3,_Z),e(_Z,Hqr),e(c3,Uqr),e(Ee,Jqr),e(Ee,f3),e(f3,_Ce),e(_Ce,Yqr),e(f3,Kqr),e(f3,uZ),e(uZ,Zqr),e(f3,ejr),e(Ee,ojr),e(Ee,m3),e(m3,uCe),e(uCe,rjr),e(m3,tjr),e(m3,bZ),e(bZ,ajr),e(m3,njr),e(Ee,sjr),e(Ee,g3),e(g3,bCe),e(bCe,ljr),e(g3,ijr),e(g3,vZ),e(vZ,djr),e(g3,cjr),e(Ee,fjr),e(Ee,h3),e(h3,vCe),e(vCe,mjr),e(h3,gjr),e(h3,FZ),e(FZ,hjr),e(h3,pjr),e(Ee,_jr),e(Ee,p3),e(p3,FCe),e(FCe,ujr),e(p3,bjr),e(p3,TZ),e(TZ,vjr),e(p3,Fjr),e(Ee,Tjr),e(Ee,_3),e(_3,TCe),e(TCe,Mjr),e(_3,Ejr),e(_3,MZ),e(MZ,Cjr),e(_3,wjr),e(Ee,Ajr),e(Ee,u3),e(u3,MCe),e(MCe,Ljr),e(u3,yjr),e(u3,EZ),e(EZ,xjr),e(u3,$jr),e(Ee,kjr),e(Ee,b3),e(b3,ECe),e(ECe,Sjr),e(b3,Rjr),e(b3,CZ),e(CZ,Pjr),e(b3,Bjr),e(Vr,Ijr),M(v3,Vr,null),b(f,oVe,u),b(f,Jc,u),e(Jc,F3),e(F3,CCe),M(Gx,CCe,null),e(Jc,Njr),e(Jc,wCe),e(wCe,qjr),b(f,rVe,u),b(f,_r,u),M(Ox,_r,null),e(_r,jjr),e(_r,Yc),e(Yc,Djr),e(Yc,wZ),e(wZ,Gjr),e(Yc,Ojr),e(Yc,AZ),e(AZ,Vjr),e(Yc,Xjr),e(_r,zjr),e(_r,Vx),e(Vx,Wjr),e(Vx,ACe),e(ACe,Qjr),e(Vx,Hjr),e(_r,Ujr),e(_r,Qt),M(Xx,Qt,null),e(Qt,Jjr),e(Qt,LCe),e(LCe,Yjr),e(Qt,Kjr),e(Qt,Kc),e(Kc,Zjr),e(Kc,yCe),e(yCe,eDr),e(Kc,oDr),e(Kc,LZ),e(LZ,rDr),e(Kc,tDr),e(Qt,aDr),M(T3,Qt,null),e(_r,nDr),e(_r,Xr),M(zx,Xr,null),e(Xr,sDr),e(Xr,xCe),e(xCe,lDr),e(Xr,iDr),e(Xr,Mn),e(Mn,dDr),e(Mn,$Ce),e($Ce,cDr),e(Mn,fDr),e(Mn,kCe),e(kCe,mDr),e(Mn,gDr),e(Mn,SCe),e(SCe,hDr),e(Mn,pDr),e(Xr,_Dr),e(Xr,$e),e($e,M3),e(M3,RCe),e(RCe,uDr),e(M3,bDr),e(M3,yZ),e(yZ,vDr),e(M3,FDr),e($e,TDr),e($e,E3),e(E3,PCe),e(PCe,MDr),e(E3,EDr),e(E3,xZ),e(xZ,CDr),e(E3,wDr),e($e,ADr),e($e,C3),e(C3,BCe),e(BCe,LDr),e(C3,yDr),e(C3,$Z),e($Z,xDr),e(C3,$Dr),e($e,kDr),e($e,w3),e(w3,ICe),e(ICe,SDr),e(w3,RDr),e(w3,kZ),e(kZ,PDr),e(w3,BDr),e($e,IDr),e($e,A3),e(A3,NCe),e(NCe,NDr),e(A3,qDr),e(A3,SZ),e(SZ,jDr),e(A3,DDr),e($e,GDr),e($e,L3),e(L3,qCe),e(qCe,ODr),e(L3,VDr),e(L3,RZ),e(RZ,XDr),e(L3,zDr),e($e,WDr),e($e,y3),e(y3,jCe),e(jCe,QDr),e(y3,HDr),e(y3,PZ),e(PZ,UDr),e(y3,JDr),e($e,YDr),e($e,x3),e(x3,DCe),e(DCe,KDr),e(x3,ZDr),e(x3,BZ),e(BZ,eGr),e(x3,oGr),e($e,rGr),e($e,$3),e($3,GCe),e(GCe,tGr),e($3,aGr),e($3,IZ),e(IZ,nGr),e($3,sGr),e($e,lGr),e($e,k3),e(k3,OCe),e(OCe,iGr),e(k3,dGr),e(k3,NZ),e(NZ,cGr),e(k3,fGr),e(Xr,mGr),M(S3,Xr,null),b(f,tVe,u),b(f,Zc,u),e(Zc,R3),e(R3,VCe),M(Wx,VCe,null),e(Zc,gGr),e(Zc,XCe),e(XCe,hGr),b(f,aVe,u),b(f,ur,u),M(Qx,ur,null),e(ur,pGr),e(ur,ef),e(ef,_Gr),e(ef,qZ),e(qZ,uGr),e(ef,bGr),e(ef,jZ),e(jZ,vGr),e(ef,FGr),e(ur,TGr),e(ur,Hx),e(Hx,MGr),e(Hx,zCe),e(zCe,EGr),e(Hx,CGr),e(ur,wGr),e(ur,Ht),M(Ux,Ht,null),e(Ht,AGr),e(Ht,WCe),e(WCe,LGr),e(Ht,yGr),e(Ht,of),e(of,xGr),e(of,QCe),e(QCe,$Gr),e(of,kGr),e(of,DZ),e(DZ,SGr),e(of,RGr),e(Ht,PGr),M(P3,Ht,null),e(ur,BGr),e(ur,zr),M(Jx,zr,null),e(zr,IGr),e(zr,HCe),e(HCe,NGr),e(zr,qGr),e(zr,En),e(En,jGr),e(En,UCe),e(UCe,DGr),e(En,GGr),e(En,JCe),e(JCe,OGr),e(En,VGr),e(En,YCe),e(YCe,XGr),e(En,zGr),e(zr,WGr),e(zr,ke),e(ke,B3),e(B3,KCe),e(KCe,QGr),e(B3,HGr),e(B3,GZ),e(GZ,UGr),e(B3,JGr),e(ke,YGr),e(ke,I3),e(I3,ZCe),e(ZCe,KGr),e(I3,ZGr),e(I3,OZ),e(OZ,eOr),e(I3,oOr),e(ke,rOr),e(ke,N3),e(N3,e5e),e(e5e,tOr),e(N3,aOr),e(N3,VZ),e(VZ,nOr),e(N3,sOr),e(ke,lOr),e(ke,q3),e(q3,o5e),e(o5e,iOr),e(q3,dOr),e(q3,XZ),e(XZ,cOr),e(q3,fOr),e(ke,mOr),e(ke,j3),e(j3,r5e),e(r5e,gOr),e(j3,hOr),e(j3,zZ),e(zZ,pOr),e(j3,_Or),e(ke,uOr),e(ke,D3),e(D3,t5e),e(t5e,bOr),e(D3,vOr),e(D3,WZ),e(WZ,FOr),e(D3,TOr),e(ke,MOr),e(ke,G3),e(G3,a5e),e(a5e,EOr),e(G3,COr),e(G3,QZ),e(QZ,wOr),e(G3,AOr),e(ke,LOr),e(ke,O3),e(O3,n5e),e(n5e,yOr),e(O3,xOr),e(O3,HZ),e(HZ,$Or),e(O3,kOr),e(ke,SOr),e(ke,V3),e(V3,s5e),e(s5e,ROr),e(V3,POr),e(V3,UZ),e(UZ,BOr),e(V3,IOr),e(ke,NOr),e(ke,X3),e(X3,l5e),e(l5e,qOr),e(X3,jOr),e(X3,JZ),e(JZ,DOr),e(X3,GOr),e(zr,OOr),M(z3,zr,null),b(f,nVe,u),b(f,rf,u),e(rf,W3),e(W3,i5e),M(Yx,i5e,null),e(rf,VOr),e(rf,d5e),e(d5e,XOr),b(f,sVe,u),b(f,br,u),M(Kx,br,null),e(br,zOr),e(br,tf),e(tf,WOr),e(tf,YZ),e(YZ,QOr),e(tf,HOr),e(tf,KZ),e(KZ,UOr),e(tf,JOr),e(br,YOr),e(br,Zx),e(Zx,KOr),e(Zx,c5e),e(c5e,ZOr),e(Zx,eVr),e(br,oVr),e(br,Ut),M(e$,Ut,null),e(Ut,rVr),e(Ut,f5e),e(f5e,tVr),e(Ut,aVr),e(Ut,af),e(af,nVr),e(af,m5e),e(m5e,sVr),e(af,lVr),e(af,ZZ),e(ZZ,iVr),e(af,dVr),e(Ut,cVr),M(Q3,Ut,null),e(br,fVr),e(br,Wr),M(o$,Wr,null),e(Wr,mVr),e(Wr,g5e),e(g5e,gVr),e(Wr,hVr),e(Wr,Cn),e(Cn,pVr),e(Cn,h5e),e(h5e,_Vr),e(Cn,uVr),e(Cn,p5e),e(p5e,bVr),e(Cn,vVr),e(Cn,_5e),e(_5e,FVr),e(Cn,TVr),e(Wr,MVr),e(Wr,Se),e(Se,H3),e(H3,u5e),e(u5e,EVr),e(H3,CVr),e(H3,eee),e(eee,wVr),e(H3,AVr),e(Se,LVr),e(Se,U3),e(U3,b5e),e(b5e,yVr),e(U3,xVr),e(U3,oee),e(oee,$Vr),e(U3,kVr),e(Se,SVr),e(Se,J3),e(J3,v5e),e(v5e,RVr),e(J3,PVr),e(J3,ree),e(ree,BVr),e(J3,IVr),e(Se,NVr),e(Se,Y3),e(Y3,F5e),e(F5e,qVr),e(Y3,jVr),e(Y3,tee),e(tee,DVr),e(Y3,GVr),e(Se,OVr),e(Se,K3),e(K3,T5e),e(T5e,VVr),e(K3,XVr),e(K3,aee),e(aee,zVr),e(K3,WVr),e(Se,QVr),e(Se,Z3),e(Z3,M5e),e(M5e,HVr),e(Z3,UVr),e(Z3,nee),e(nee,JVr),e(Z3,YVr),e(Se,KVr),e(Se,e0),e(e0,E5e),e(E5e,ZVr),e(e0,eXr),e(e0,see),e(see,oXr),e(e0,rXr),e(Se,tXr),e(Se,o0),e(o0,C5e),e(C5e,aXr),e(o0,nXr),e(o0,lee),e(lee,sXr),e(o0,lXr),e(Se,iXr),e(Se,r0),e(r0,w5e),e(w5e,dXr),e(r0,cXr),e(r0,iee),e(iee,fXr),e(r0,mXr),e(Se,gXr),e(Se,t0),e(t0,A5e),e(A5e,hXr),e(t0,pXr),e(t0,dee),e(dee,_Xr),e(t0,uXr),e(Wr,bXr),M(a0,Wr,null),b(f,lVe,u),b(f,nf,u),e(nf,n0),e(n0,L5e),M(r$,L5e,null),e(nf,vXr),e(nf,y5e),e(y5e,FXr),b(f,iVe,u),b(f,vr,u),M(t$,vr,null),e(vr,TXr),e(vr,sf),e(sf,MXr),e(sf,cee),e(cee,EXr),e(sf,CXr),e(sf,fee),e(fee,wXr),e(sf,AXr),e(vr,LXr),e(vr,a$),e(a$,yXr),e(a$,x5e),e(x5e,xXr),e(a$,$Xr),e(vr,kXr),e(vr,Jt),M(n$,Jt,null),e(Jt,SXr),e(Jt,$5e),e($5e,RXr),e(Jt,PXr),e(Jt,lf),e(lf,BXr),e(lf,k5e),e(k5e,IXr),e(lf,NXr),e(lf,mee),e(mee,qXr),e(lf,jXr),e(Jt,DXr),M(s0,Jt,null),e(vr,GXr),e(vr,Qr),M(s$,Qr,null),e(Qr,OXr),e(Qr,S5e),e(S5e,VXr),e(Qr,XXr),e(Qr,wn),e(wn,zXr),e(wn,R5e),e(R5e,WXr),e(wn,QXr),e(wn,P5e),e(P5e,HXr),e(wn,UXr),e(wn,B5e),e(B5e,JXr),e(wn,YXr),e(Qr,KXr),e(Qr,Re),e(Re,l0),e(l0,I5e),e(I5e,ZXr),e(l0,ezr),e(l0,gee),e(gee,ozr),e(l0,rzr),e(Re,tzr),e(Re,i0),e(i0,N5e),e(N5e,azr),e(i0,nzr),e(i0,hee),e(hee,szr),e(i0,lzr),e(Re,izr),e(Re,d0),e(d0,q5e),e(q5e,dzr),e(d0,czr),e(d0,pee),e(pee,fzr),e(d0,mzr),e(Re,gzr),e(Re,c0),e(c0,j5e),e(j5e,hzr),e(c0,pzr),e(c0,_ee),e(_ee,_zr),e(c0,uzr),e(Re,bzr),e(Re,f0),e(f0,D5e),e(D5e,vzr),e(f0,Fzr),e(f0,uee),e(uee,Tzr),e(f0,Mzr),e(Re,Ezr),e(Re,m0),e(m0,G5e),e(G5e,Czr),e(m0,wzr),e(m0,bee),e(bee,Azr),e(m0,Lzr),e(Re,yzr),e(Re,g0),e(g0,O5e),e(O5e,xzr),e(g0,$zr),e(g0,vee),e(vee,kzr),e(g0,Szr),e(Re,Rzr),e(Re,h0),e(h0,V5e),e(V5e,Pzr),e(h0,Bzr),e(h0,Fee),e(Fee,Izr),e(h0,Nzr),e(Re,qzr),e(Re,p0),e(p0,X5e),e(X5e,jzr),e(p0,Dzr),e(p0,Tee),e(Tee,Gzr),e(p0,Ozr),e(Re,Vzr),e(Re,_0),e(_0,z5e),e(z5e,Xzr),e(_0,zzr),e(_0,Mee),e(Mee,Wzr),e(_0,Qzr),e(Qr,Hzr),M(u0,Qr,null),b(f,dVe,u),b(f,df,u),e(df,b0),e(b0,W5e),M(l$,W5e,null),e(df,Uzr),e(df,Q5e),e(Q5e,Jzr),b(f,cVe,u),b(f,Fr,u),M(i$,Fr,null),e(Fr,Yzr),e(Fr,cf),e(cf,Kzr),e(cf,Eee),e(Eee,Zzr),e(cf,eWr),e(cf,Cee),e(Cee,oWr),e(cf,rWr),e(Fr,tWr),e(Fr,d$),e(d$,aWr),e(d$,H5e),e(H5e,nWr),e(d$,sWr),e(Fr,lWr),e(Fr,Yt),M(c$,Yt,null),e(Yt,iWr),e(Yt,U5e),e(U5e,dWr),e(Yt,cWr),e(Yt,ff),e(ff,fWr),e(ff,J5e),e(J5e,mWr),e(ff,gWr),e(ff,wee),e(wee,hWr),e(ff,pWr),e(Yt,_Wr),M(v0,Yt,null),e(Fr,uWr),e(Fr,Hr),M(f$,Hr,null),e(Hr,bWr),e(Hr,Y5e),e(Y5e,vWr),e(Hr,FWr),e(Hr,An),e(An,TWr),e(An,K5e),e(K5e,MWr),e(An,EWr),e(An,Z5e),e(Z5e,CWr),e(An,wWr),e(An,e3e),e(e3e,AWr),e(An,LWr),e(Hr,yWr),e(Hr,Ve),e(Ve,F0),e(F0,o3e),e(o3e,xWr),e(F0,$Wr),e(F0,Aee),e(Aee,kWr),e(F0,SWr),e(Ve,RWr),e(Ve,T0),e(T0,r3e),e(r3e,PWr),e(T0,BWr),e(T0,Lee),e(Lee,IWr),e(T0,NWr),e(Ve,qWr),e(Ve,M0),e(M0,t3e),e(t3e,jWr),e(M0,DWr),e(M0,yee),e(yee,GWr),e(M0,OWr),e(Ve,VWr),e(Ve,E0),e(E0,a3e),e(a3e,XWr),e(E0,zWr),e(E0,xee),e(xee,WWr),e(E0,QWr),e(Ve,HWr),e(Ve,C0),e(C0,n3e),e(n3e,UWr),e(C0,JWr),e(C0,$ee),e($ee,YWr),e(C0,KWr),e(Ve,ZWr),e(Ve,w0),e(w0,s3e),e(s3e,eQr),e(w0,oQr),e(w0,kee),e(kee,rQr),e(w0,tQr),e(Ve,aQr),e(Ve,A0),e(A0,l3e),e(l3e,nQr),e(A0,sQr),e(A0,See),e(See,lQr),e(A0,iQr),e(Ve,dQr),e(Ve,L0),e(L0,i3e),e(i3e,cQr),e(L0,fQr),e(L0,Ree),e(Ree,mQr),e(L0,gQr),e(Hr,hQr),M(y0,Hr,null),b(f,fVe,u),b(f,mf,u),e(mf,x0),e(x0,d3e),M(m$,d3e,null),e(mf,pQr),e(mf,c3e),e(c3e,_Qr),b(f,mVe,u),b(f,Tr,u),M(g$,Tr,null),e(Tr,uQr),e(Tr,gf),e(gf,bQr),e(gf,Pee),e(Pee,vQr),e(gf,FQr),e(gf,Bee),e(Bee,TQr),e(gf,MQr),e(Tr,EQr),e(Tr,h$),e(h$,CQr),e(h$,f3e),e(f3e,wQr),e(h$,AQr),e(Tr,LQr),e(Tr,Kt),M(p$,Kt,null),e(Kt,yQr),e(Kt,m3e),e(m3e,xQr),e(Kt,$Qr),e(Kt,hf),e(hf,kQr),e(hf,g3e),e(g3e,SQr),e(hf,RQr),e(hf,Iee),e(Iee,PQr),e(hf,BQr),e(Kt,IQr),M($0,Kt,null),e(Tr,NQr),e(Tr,Ur),M(_$,Ur,null),e(Ur,qQr),e(Ur,h3e),e(h3e,jQr),e(Ur,DQr),e(Ur,Ln),e(Ln,GQr),e(Ln,p3e),e(p3e,OQr),e(Ln,VQr),e(Ln,_3e),e(_3e,XQr),e(Ln,zQr),e(Ln,u3e),e(u3e,WQr),e(Ln,QQr),e(Ur,HQr),e(Ur,Xe),e(Xe,k0),e(k0,b3e),e(b3e,UQr),e(k0,JQr),e(k0,Nee),e(Nee,YQr),e(k0,KQr),e(Xe,ZQr),e(Xe,S0),e(S0,v3e),e(v3e,eHr),e(S0,oHr),e(S0,qee),e(qee,rHr),e(S0,tHr),e(Xe,aHr),e(Xe,R0),e(R0,F3e),e(F3e,nHr),e(R0,sHr),e(R0,jee),e(jee,lHr),e(R0,iHr),e(Xe,dHr),e(Xe,P0),e(P0,T3e),e(T3e,cHr),e(P0,fHr),e(P0,Dee),e(Dee,mHr),e(P0,gHr),e(Xe,hHr),e(Xe,B0),e(B0,M3e),e(M3e,pHr),e(B0,_Hr),e(B0,Gee),e(Gee,uHr),e(B0,bHr),e(Xe,vHr),e(Xe,I0),e(I0,E3e),e(E3e,FHr),e(I0,THr),e(I0,Oee),e(Oee,MHr),e(I0,EHr),e(Xe,CHr),e(Xe,N0),e(N0,C3e),e(C3e,wHr),e(N0,AHr),e(N0,Vee),e(Vee,LHr),e(N0,yHr),e(Xe,xHr),e(Xe,q0),e(q0,w3e),e(w3e,$Hr),e(q0,kHr),e(q0,Xee),e(Xee,SHr),e(q0,RHr),e(Ur,PHr),M(j0,Ur,null),b(f,gVe,u),b(f,pf,u),e(pf,D0),e(D0,A3e),M(u$,A3e,null),e(pf,BHr),e(pf,L3e),e(L3e,IHr),b(f,hVe,u),b(f,Mr,u),M(b$,Mr,null),e(Mr,NHr),e(Mr,_f),e(_f,qHr),e(_f,zee),e(zee,jHr),e(_f,DHr),e(_f,Wee),e(Wee,GHr),e(_f,OHr),e(Mr,VHr),e(Mr,v$),e(v$,XHr),e(v$,y3e),e(y3e,zHr),e(v$,WHr),e(Mr,QHr),e(Mr,Zt),M(F$,Zt,null),e(Zt,HHr),e(Zt,x3e),e(x3e,UHr),e(Zt,JHr),e(Zt,uf),e(uf,YHr),e(uf,$3e),e($3e,KHr),e(uf,ZHr),e(uf,Qee),e(Qee,eUr),e(uf,oUr),e(Zt,rUr),M(G0,Zt,null),e(Mr,tUr),e(Mr,Jr),M(T$,Jr,null),e(Jr,aUr),e(Jr,k3e),e(k3e,nUr),e(Jr,sUr),e(Jr,yn),e(yn,lUr),e(yn,S3e),e(S3e,iUr),e(yn,dUr),e(yn,R3e),e(R3e,cUr),e(yn,fUr),e(yn,P3e),e(P3e,mUr),e(yn,gUr),e(Jr,hUr),e(Jr,B3e),e(B3e,O0),e(O0,I3e),e(I3e,pUr),e(O0,_Ur),e(O0,Hee),e(Hee,uUr),e(O0,bUr),e(Jr,vUr),M(V0,Jr,null),b(f,pVe,u),b(f,bf,u),e(bf,X0),e(X0,N3e),M(M$,N3e,null),e(bf,FUr),e(bf,q3e),e(q3e,TUr),b(f,_Ve,u),b(f,Er,u),M(E$,Er,null),e(Er,MUr),e(Er,vf),e(vf,EUr),e(vf,Uee),e(Uee,CUr),e(vf,wUr),e(vf,Jee),e(Jee,AUr),e(vf,LUr),e(Er,yUr),e(Er,C$),e(C$,xUr),e(C$,j3e),e(j3e,$Ur),e(C$,kUr),e(Er,SUr),e(Er,ea),M(w$,ea,null),e(ea,RUr),e(ea,D3e),e(D3e,PUr),e(ea,BUr),e(ea,Ff),e(Ff,IUr),e(Ff,G3e),e(G3e,NUr),e(Ff,qUr),e(Ff,Yee),e(Yee,jUr),e(Ff,DUr),e(ea,GUr),M(z0,ea,null),e(Er,OUr),e(Er,Yr),M(A$,Yr,null),e(Yr,VUr),e(Yr,O3e),e(O3e,XUr),e(Yr,zUr),e(Yr,xn),e(xn,WUr),e(xn,V3e),e(V3e,QUr),e(xn,HUr),e(xn,X3e),e(X3e,UUr),e(xn,JUr),e(xn,z3e),e(z3e,YUr),e(xn,KUr),e(Yr,ZUr),e(Yr,L$),e(L$,W0),e(W0,W3e),e(W3e,eJr),e(W0,oJr),e(W0,Kee),e(Kee,rJr),e(W0,tJr),e(L$,aJr),e(L$,Q0),e(Q0,Q3e),e(Q3e,nJr),e(Q0,sJr),e(Q0,Zee),e(Zee,lJr),e(Q0,iJr),e(Yr,dJr),M(H0,Yr,null),b(f,uVe,u),b(f,Tf,u),e(Tf,U0),e(U0,H3e),M(y$,H3e,null),e(Tf,cJr),e(Tf,U3e),e(U3e,fJr),b(f,bVe,u),b(f,Cr,u),M(x$,Cr,null),e(Cr,mJr),e(Cr,Mf),e(Mf,gJr),e(Mf,eoe),e(eoe,hJr),e(Mf,pJr),e(Mf,ooe),e(ooe,_Jr),e(Mf,uJr),e(Cr,bJr),e(Cr,$$),e($$,vJr),e($$,J3e),e(J3e,FJr),e($$,TJr),e(Cr,MJr),e(Cr,oa),M(k$,oa,null),e(oa,EJr),e(oa,Y3e),e(Y3e,CJr),e(oa,wJr),e(oa,Ef),e(Ef,AJr),e(Ef,K3e),e(K3e,LJr),e(Ef,yJr),e(Ef,roe),e(roe,xJr),e(Ef,$Jr),e(oa,kJr),M(J0,oa,null),e(Cr,SJr),e(Cr,Kr),M(S$,Kr,null),e(Kr,RJr),e(Kr,Z3e),e(Z3e,PJr),e(Kr,BJr),e(Kr,$n),e($n,IJr),e($n,e0e),e(e0e,NJr),e($n,qJr),e($n,o0e),e(o0e,jJr),e($n,DJr),e($n,r0e),e(r0e,GJr),e($n,OJr),e(Kr,VJr),e(Kr,t0e),e(t0e,Y0),e(Y0,a0e),e(a0e,XJr),e(Y0,zJr),e(Y0,toe),e(toe,WJr),e(Y0,QJr),e(Kr,HJr),M(K0,Kr,null),vVe=!0},p(f,[u]){const R$={};u&2&&(R$.$$scope={dirty:u,ctx:f}),Sf.$set(R$);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),Dg.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),Mh.$set(s0e);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),ap.$set(l0e);const P$={};u&2&&(P$.$$scope={dirty:u,ctx:f}),np.$set(P$);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),wp.$set(i0e);const kn={};u&2&&(kn.$$scope={dirty:u,ctx:f}),Ap.$set(kn);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),xp.$set(d0e);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),xu.$set(c0e);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),ku.$set(f0e);const B$={};u&2&&(B$.$$scope={dirty:u,ctx:f}),M1.$set(B$);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),C1.$set(m0e);const I$={};u&2&&(I$.$$scope={dirty:u,ctx:f}),c7.$set(I$);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),m7.$set(g0e);const N$={};u&2&&(N$.$$scope={dirty:u,ctx:f}),J7.$set(N$);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),K7.$set(h0e);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),u9.$set(p0e);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),v9.$set(_0e);const Cf={};u&2&&(Cf.$$scope={dirty:u,ctx:f}),pb.$set(Cf);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),ub.$set(u0e);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),Hb.$set(b0e);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),Jb.$set(v0e);const q$={};u&2&&(q$.$$scope={dirty:u,ctx:f}),t2.$set(q$);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),n2.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),O2.$set(T0e);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),X2.$set(M0e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),Sv.$set(rt);const j$={};u&2&&(j$.$$scope={dirty:u,ctx:f}),Pv.$set(j$);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),Nv.$set(E0e);const D$={};u&2&&(D$.$$scope={dirty:u,ctx:f}),jv.$set(D$);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),eF.$set(C0e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),rF.$set(tt);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),nF.$set(w0e);const wf={};u&2&&(wf.$$scope={dirty:u,ctx:f}),lF.$set(wf);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),cF.$set(A0e);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),mF.$set(L0e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),EF.$set(L);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),wF.$set(Z0);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),SF.$set(y0e);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),PF.$set(x0e);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),WF.$set(ew);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),HF.$set($0e);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),KF.$set(k0e);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),eT.$set(ow);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),lT.$set(S0e);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),dT.$set(R0e);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),hT.$set(rw);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),_T.$set(P0e);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),FT.$set(B0e);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),MT.$set(tw);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),wT.$set(I0e);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:f}),LT.$set(N0e);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),RT.$set(aw);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:f}),BT.$set(q0e);const j0e={};u&2&&(j0e.$$scope={dirty:u,ctx:f}),qT.$set(j0e);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),DT.$set(nw);const D0e={};u&2&&(D0e.$$scope={dirty:u,ctx:f}),RM.$set(D0e);const G0e={};u&2&&(G0e.$$scope={dirty:u,ctx:f}),BM.$set(G0e);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),nE.$set(sw);const O0e={};u&2&&(O0e.$$scope={dirty:u,ctx:f}),lE.$set(O0e);const V0e={};u&2&&(V0e.$$scope={dirty:u,ctx:f}),TE.$set(V0e);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),EE.$set(lw);const X0e={};u&2&&(X0e.$$scope={dirty:u,ctx:f}),yE.$set(X0e);const z0e={};u&2&&(z0e.$$scope={dirty:u,ctx:f}),$E.$set(z0e);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),YE.$set(iw);const W0e={};u&2&&(W0e.$$scope={dirty:u,ctx:f}),ZE.$set(W0e);const Q0e={};u&2&&(Q0e.$$scope={dirty:u,ctx:f}),c4.$set(Q0e);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),m4.$set(dw);const H0e={};u&2&&(H0e.$$scope={dirty:u,ctx:f}),j4.$set(H0e);const U0e={};u&2&&(U0e.$$scope={dirty:u,ctx:f}),G4.$set(U0e);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),nC.$set(cw);const J0e={};u&2&&(J0e.$$scope={dirty:u,ctx:f}),lC.$set(J0e);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:f}),cC.$set(Y0e);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),mC.$set(fw);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:f}),hC.$set(K0e);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:f}),_C.$set(Z0e);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),NC.$set(mw);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),jC.$set(ewe);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),s5.$set(owe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),i5.$set(gw);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),c5.$set(rwe);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),m5.$set(twe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),h5.$set(hw);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),_5.$set(awe);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),X5.$set(nwe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),W5.$set(pw);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),t3.$set(swe);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),n3.$set(lwe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),v3.$set(_w);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),T3.$set(iwe);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),S3.$set(dwe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),P3.$set(uw);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),z3.$set(cwe);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),Q3.$set(fwe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),a0.$set(bw);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),s0.$set(mwe);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),u0.$set(gwe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),v0.$set(vw);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),y0.$set(hwe);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),$0.$set(pwe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),j0.$set(Fw);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),G0.$set(_we);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),V0.$set(uwe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),z0.$set(Tw);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),H0.$set(bwe);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),J0.$set(vwe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),K0.$set(Mw)},i(f){vVe||(E(d.$$.fragment,f),E(ya.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(Sf.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(x6.$$.fragment,f),E(Dg.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(B6.$$.fragment,f),E(Mh.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(q6.$$.fragment,f),E(G6.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(O6.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(wp.$$.fragment,f),E(Ap.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(K6.$$.fragment,f),E(xp.$$.fragment,f),E(Z6.$$.fragment,f),E(xu.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(ku.$$.fragment,f),E(aL.$$.fragment,f),E(M1.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(C1.$$.fragment,f),E(dL.$$.fragment,f),E(c7.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(m7.$$.fragment,f),E(hL.$$.fragment,f),E(J7.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(K7.$$.fragment,f),E(vL.$$.fragment,f),E(u9.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(v9.$$.fragment,f),E(CL.$$.fragment,f),E(pb.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(ub.$$.fragment,f),E(xL.$$.fragment,f),E(Hb.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(Jb.$$.fragment,f),E(PL.$$.fragment,f),E(t2.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(n2.$$.fragment,f),E(jL.$$.fragment,f),E(O2.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(X2.$$.fragment,f),E(XL.$$.fragment,f),E(Sv.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(Pv.$$.fragment,f),E(UL.$$.fragment,f),E(Nv.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(jv.$$.fragment,f),E(ey.$$.fragment,f),E(eF.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(rF.$$.fragment,f),E(ny.$$.fragment,f),E(nF.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(lF.$$.fragment,f),E(cy.$$.fragment,f),E(cF.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(mF.$$.fragment,f),E(py.$$.fragment,f),E(EF.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(wF.$$.fragment,f),E(Fy.$$.fragment,f),E(SF.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(PF.$$.fragment,f),E(wy.$$.fragment,f),E(WF.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(HF.$$.fragment,f),E($y.$$.fragment,f),E(KF.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(eT.$$.fragment,f),E(Iy.$$.fragment,f),E(lT.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(dT.$$.fragment,f),E(Gy.$$.fragment,f),E(hT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(_T.$$.fragment,f),E(Wy.$$.fragment,f),E(FT.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(MT.$$.fragment,f),E(Ky.$$.fragment,f),E(wT.$$.fragment,f),E(Zy.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(LT.$$.fragment,f),E(t8.$$.fragment,f),E(RT.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(BT.$$.fragment,f),E(i8.$$.fragment,f),E(qT.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(DT.$$.fragment,f),E(g8.$$.fragment,f),E(RM.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(BM.$$.fragment,f),E(b8.$$.fragment,f),E(nE.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(lE.$$.fragment,f),E(E8.$$.fragment,f),E(TE.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(L8.$$.fragment,f),E(EE.$$.fragment,f),E(y8.$$.fragment,f),E(yE.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E($E.$$.fragment,f),E(R8.$$.fragment,f),E(YE.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(ZE.$$.fragment,f),E(q8.$$.fragment,f),E(c4.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(m4.$$.fragment,f),E(V8.$$.fragment,f),E(j4.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(G4.$$.fragment,f),E(H8.$$.fragment,f),E(nC.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(lC.$$.fragment,f),E(Z8.$$.fragment,f),E(cC.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(mC.$$.fragment,f),E(nx.$$.fragment,f),E(hC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(_C.$$.fragment,f),E(cx.$$.fragment,f),E(NC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(jC.$$.fragment,f),E(px.$$.fragment,f),E(s5.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(i5.$$.fragment,f),E(Fx.$$.fragment,f),E(c5.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(m5.$$.fragment,f),E(wx.$$.fragment,f),E(h5.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(_5.$$.fragment,f),E($x.$$.fragment,f),E(X5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(W5.$$.fragment,f),E(Bx.$$.fragment,f),E(t3.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(n3.$$.fragment,f),E(Dx.$$.fragment,f),E(v3.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(T3.$$.fragment,f),E(zx.$$.fragment,f),E(S3.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(P3.$$.fragment,f),E(Jx.$$.fragment,f),E(z3.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(Q3.$$.fragment,f),E(o$.$$.fragment,f),E(a0.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(s0.$$.fragment,f),E(s$.$$.fragment,f),E(u0.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(v0.$$.fragment,f),E(f$.$$.fragment,f),E(y0.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E($0.$$.fragment,f),E(_$.$$.fragment,f),E(j0.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(G0.$$.fragment,f),E(T$.$$.fragment,f),E(V0.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(z0.$$.fragment,f),E(A$.$$.fragment,f),E(H0.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(J0.$$.fragment,f),E(S$.$$.fragment,f),E(K0.$$.fragment,f),vVe=!0)},o(f){C(d.$$.fragment,f),C(ya.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(Sf.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(x6.$$.fragment,f),C(Dg.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(B6.$$.fragment,f),C(Mh.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(q6.$$.fragment,f),C(G6.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(O6.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(wp.$$.fragment,f),C(Ap.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(K6.$$.fragment,f),C(xp.$$.fragment,f),C(Z6.$$.fragment,f),C(xu.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(ku.$$.fragment,f),C(aL.$$.fragment,f),C(M1.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(C1.$$.fragment,f),C(dL.$$.fragment,f),C(c7.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(m7.$$.fragment,f),C(hL.$$.fragment,f),C(J7.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(K7.$$.fragment,f),C(vL.$$.fragment,f),C(u9.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(v9.$$.fragment,f),C(CL.$$.fragment,f),C(pb.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(ub.$$.fragment,f),C(xL.$$.fragment,f),C(Hb.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(Jb.$$.fragment,f),C(PL.$$.fragment,f),C(t2.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(n2.$$.fragment,f),C(jL.$$.fragment,f),C(O2.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(X2.$$.fragment,f),C(XL.$$.fragment,f),C(Sv.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(Pv.$$.fragment,f),C(UL.$$.fragment,f),C(Nv.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(jv.$$.fragment,f),C(ey.$$.fragment,f),C(eF.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(rF.$$.fragment,f),C(ny.$$.fragment,f),C(nF.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(lF.$$.fragment,f),C(cy.$$.fragment,f),C(cF.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(mF.$$.fragment,f),C(py.$$.fragment,f),C(EF.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(wF.$$.fragment,f),C(Fy.$$.fragment,f),C(SF.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(PF.$$.fragment,f),C(wy.$$.fragment,f),C(WF.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(HF.$$.fragment,f),C($y.$$.fragment,f),C(KF.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(eT.$$.fragment,f),C(Iy.$$.fragment,f),C(lT.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(dT.$$.fragment,f),C(Gy.$$.fragment,f),C(hT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(_T.$$.fragment,f),C(Wy.$$.fragment,f),C(FT.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(MT.$$.fragment,f),C(Ky.$$.fragment,f),C(wT.$$.fragment,f),C(Zy.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(LT.$$.fragment,f),C(t8.$$.fragment,f),C(RT.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(BT.$$.fragment,f),C(i8.$$.fragment,f),C(qT.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(DT.$$.fragment,f),C(g8.$$.fragment,f),C(RM.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(BM.$$.fragment,f),C(b8.$$.fragment,f),C(nE.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(lE.$$.fragment,f),C(E8.$$.fragment,f),C(TE.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(L8.$$.fragment,f),C(EE.$$.fragment,f),C(y8.$$.fragment,f),C(yE.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C($E.$$.fragment,f),C(R8.$$.fragment,f),C(YE.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(ZE.$$.fragment,f),C(q8.$$.fragment,f),C(c4.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(m4.$$.fragment,f),C(V8.$$.fragment,f),C(j4.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(G4.$$.fragment,f),C(H8.$$.fragment,f),C(nC.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(lC.$$.fragment,f),C(Z8.$$.fragment,f),C(cC.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(mC.$$.fragment,f),C(nx.$$.fragment,f),C(hC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(_C.$$.fragment,f),C(cx.$$.fragment,f),C(NC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(jC.$$.fragment,f),C(px.$$.fragment,f),C(s5.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(i5.$$.fragment,f),C(Fx.$$.fragment,f),C(c5.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(m5.$$.fragment,f),C(wx.$$.fragment,f),C(h5.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(_5.$$.fragment,f),C($x.$$.fragment,f),C(X5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(W5.$$.fragment,f),C(Bx.$$.fragment,f),C(t3.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(n3.$$.fragment,f),C(Dx.$$.fragment,f),C(v3.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(T3.$$.fragment,f),C(zx.$$.fragment,f),C(S3.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(P3.$$.fragment,f),C(Jx.$$.fragment,f),C(z3.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(Q3.$$.fragment,f),C(o$.$$.fragment,f),C(a0.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(s0.$$.fragment,f),C(s$.$$.fragment,f),C(u0.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(v0.$$.fragment,f),C(f$.$$.fragment,f),C(y0.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C($0.$$.fragment,f),C(_$.$$.fragment,f),C(j0.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(G0.$$.fragment,f),C(T$.$$.fragment,f),C(V0.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(z0.$$.fragment,f),C(A$.$$.fragment,f),C(H0.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(J0.$$.fragment,f),C(S$.$$.fragment,f),C(K0.$$.fragment,f),vVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(We),f&&t(xf),w(ya,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t(xa),f&&t(hGe),f&&t(Li),w(E6),f&&t(pGe),f&&t(In),f&&t(_Ge),w(C6,f),f&&t(uGe),f&&t(eS),f&&t(bGe),w(Sf,f),f&&t(vGe),f&&t(yi),w(w6),f&&t(FGe),f&&t(wo),w(A6),w(x6),w(Dg),w($6),f&&t(TGe),f&&t($i),w(k6),f&&t(MGe),f&&t(Ao),w(S6),w(B6),w(Mh),w(I6),f&&t(EGe),f&&t(ki),w(N6),f&&t(CGe),f&&t(Lo),w(q6),w(G6),w(ap),w(np),w(O6),f&&t(wGe),f&&t(Si),w(V6),f&&t(AGe),f&&t(yo),w(X6),w(Q6),w(wp),w(Ap),w(H6),f&&t(LGe),f&&t(Pi),w(U6),f&&t(yGe),f&&t(xo),w(J6),w(K6),w(xp),w(Z6),w(xu),f&&t(xGe),f&&t(Ni),w(eL),f&&t($Ge),f&&t($o),w(oL),w(tL),w(ku),w(aL),w(M1),f&&t(kGe),f&&t(Di),w(nL),f&&t(SGe),f&&t(ko),w(sL),w(iL),w(C1),w(dL),w(c7),f&&t(RGe),f&&t(Vi),w(cL),f&&t(PGe),f&&t(So),w(fL),w(gL),w(m7),w(hL),w(J7),f&&t(BGe),f&&t(Wi),w(pL),f&&t(IGe),f&&t(Ro),w(_L),w(bL),w(K7),w(vL),w(u9),f&&t(NGe),f&&t(Ui),w(FL),f&&t(qGe),f&&t(Po),w(TL),w(EL),w(v9),w(CL),w(pb),f&&t(jGe),f&&t(Ki),w(wL),f&&t(DGe),f&&t(Bo),w(AL),w(yL),w(ub),w(xL),w(Hb),f&&t(GGe),f&&t(od),w($L),f&&t(OGe),f&&t(Io),w(kL),w(RL),w(Jb),w(PL),w(t2),f&&t(VGe),f&&t(ad),w(BL),f&&t(XGe),f&&t(No),w(IL),w(qL),w(n2),w(jL),w(O2),f&&t(zGe),f&&t(ld),w(DL),f&&t(WGe),f&&t(qo),w(GL),w(VL),w(X2),w(XL),w(Sv),f&&t(QGe),f&&t(cd),w(zL),f&&t(HGe),f&&t(jo),w(WL),w(HL),w(Pv),w(UL),w(Nv),f&&t(UGe),f&&t(gd),w(JL),f&&t(JGe),f&&t(Do),w(YL),w(ZL),w(jv),w(ey),w(eF),f&&t(YGe),f&&t(_d),w(oy),f&&t(KGe),f&&t(Go),w(ry),w(ay),w(rF),w(ny),w(nF),f&&t(ZGe),f&&t(vd),w(sy),f&&t(eOe),f&&t(Oo),w(ly),w(dy),w(lF),w(cy),w(cF),f&&t(oOe),f&&t(Md),w(fy),f&&t(rOe),f&&t(Vo),w(my),w(hy),w(mF),w(py),w(EF),f&&t(tOe),f&&t(wd),w(_y),f&&t(aOe),f&&t(Xo),w(uy),w(vy),w(wF),w(Fy),w(SF),f&&t(nOe),f&&t(yd),w(Ty),f&&t(sOe),f&&t(zo),w(My),w(Cy),w(PF),w(wy),w(WF),f&&t(lOe),f&&t(kd),w(Ay),f&&t(iOe),f&&t(Wo),w(Ly),w(xy),w(HF),w($y),w(KF),f&&t(dOe),f&&t(Pd),w(Sy),f&&t(cOe),f&&t(Qo),w(Ry),w(By),w(eT),w(Iy),w(lT),f&&t(fOe),f&&t(Nd),w(Ny),f&&t(mOe),f&&t(Ho),w(qy),w(Dy),w(dT),w(Gy),w(hT),f&&t(gOe),f&&t(Gd),w(Oy),f&&t(hOe),f&&t(Uo),w(Vy),w(zy),w(_T),w(Wy),w(FT),f&&t(pOe),f&&t(Xd),w(Hy),f&&t(_Oe),f&&t(Jo),w(Uy),w(Yy),w(MT),w(Ky),w(wT),f&&t(uOe),f&&t(Qd),w(Zy),f&&t(bOe),f&&t(Yo),w(e8),w(r8),w(LT),w(t8),w(RT),f&&t(vOe),f&&t(Jd),w(a8),f&&t(FOe),f&&t(Ko),w(n8),w(l8),w(BT),w(i8),w(qT),f&&t(TOe),f&&t(Zd),w(d8),f&&t(MOe),f&&t(Zo),w(c8),w(m8),w(DT),w(g8),w(RM),f&&t(EOe),f&&t(rc),w(h8),f&&t(COe),f&&t(er),w(p8),w(u8),w(BM),w(b8),w(nE),f&&t(wOe),f&&t(nc),w(v8),f&&t(AOe),f&&t(or),w(F8),w(M8),w(lE),w(E8),w(TE),f&&t(LOe),f&&t(ic),w(C8),f&&t(yOe),f&&t(rr),w(w8),w(L8),w(EE),w(y8),w(yE),f&&t(xOe),f&&t(fc),w(x8),f&&t($Oe),f&&t(tr),w($8),w(S8),w($E),w(R8),w(YE),f&&t(kOe),f&&t(hc),w(P8),f&&t(SOe),f&&t(ar),w(B8),w(N8),w(ZE),w(q8),w(c4),f&&t(ROe),f&&t(uc),w(j8),f&&t(POe),f&&t(nr),w(D8),w(O8),w(m4),w(V8),w(j4),f&&t(BOe),f&&t(Fc),w(X8),f&&t(IOe),f&&t(sr),w(z8),w(Q8),w(G4),w(H8),w(nC),f&&t(NOe),f&&t(Ec),w(U8),f&&t(qOe),f&&t(lr),w(J8),w(K8),w(lC),w(Z8),w(cC),f&&t(jOe),f&&t(Ac),w(ox),f&&t(DOe),f&&t(ir),w(rx),w(ax),w(mC),w(nx),w(hC),f&&t(GOe),f&&t(xc),w(sx),f&&t(OOe),f&&t(dr),w(lx),w(dx),w(_C),w(cx),w(NC),f&&t(VOe),f&&t(Sc),w(fx),f&&t(XOe),f&&t(cr),w(mx),w(hx),w(jC),w(px),w(s5),f&&t(zOe),f&&t(Bc),w(_x),f&&t(WOe),f&&t(fr),w(ux),w(vx),w(i5),w(Fx),w(c5),f&&t(QOe),f&&t(qc),w(Tx),f&&t(HOe),f&&t(mr),w(Mx),w(Cx),w(m5),w(wx),w(h5),f&&t(UOe),f&&t(Gc),w(Ax),f&&t(JOe),f&&t(gr),w(Lx),w(xx),w(_5),w($x),w(X5),f&&t(YOe),f&&t(Xc),w(kx),f&&t(KOe),f&&t(hr),w(Sx),w(Px),w(W5),w(Bx),w(t3),f&&t(ZOe),f&&t(Qc),w(Ix),f&&t(eVe),f&&t(pr),w(Nx),w(jx),w(n3),w(Dx),w(v3),f&&t(oVe),f&&t(Jc),w(Gx),f&&t(rVe),f&&t(_r),w(Ox),w(Xx),w(T3),w(zx),w(S3),f&&t(tVe),f&&t(Zc),w(Wx),f&&t(aVe),f&&t(ur),w(Qx),w(Ux),w(P3),w(Jx),w(z3),f&&t(nVe),f&&t(rf),w(Yx),f&&t(sVe),f&&t(br),w(Kx),w(e$),w(Q3),w(o$),w(a0),f&&t(lVe),f&&t(nf),w(r$),f&&t(iVe),f&&t(vr),w(t$),w(n$),w(s0),w(s$),w(u0),f&&t(dVe),f&&t(df),w(l$),f&&t(cVe),f&&t(Fr),w(i$),w(c$),w(v0),w(f$),w(y0),f&&t(fVe),f&&t(mf),w(m$),f&&t(mVe),f&&t(Tr),w(g$),w(p$),w($0),w(_$),w(j0),f&&t(gVe),f&&t(pf),w(u$),f&&t(hVe),f&&t(Mr),w(b$),w(F$),w(G0),w(T$),w(V0),f&&t(pVe),f&&t(bf),w(M$),f&&t(_Ve),f&&t(Er),w(E$),w(w$),w(z0),w(A$),w(H0),f&&t(uVe),f&&t(Tf),w(y$),f&&t(bVe),f&&t(Cr),w(x$),w(k$),w(J0),w(S$),w(K0)}}}const iGt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function dGt(x){return ljt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _Gt extends tjt{constructor(g){super();ajt(this,g,dGt,lGt,njt,{})}}export{_Gt as default,iGt as metadata};
