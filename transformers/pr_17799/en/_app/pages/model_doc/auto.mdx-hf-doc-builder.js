import{S as tOt,i as aOt,s as nOt,e as a,k as l,w as F,t as o,M as sOt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as lOt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as vZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function iOt($){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,R6,$f,Oe,Qe,wi,Rn,P6,Pn,Bn,B6,Ai,Nn,N6,Li,kf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),xf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),R6=o(")."),$f=l(),Oe=a("p"),Qe=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),P6=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),B6=o(`, make sure its
`),Ai=a("code"),Nn=o("config_class"),N6=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),kf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var fS=s(p);m=r(fS,"NewModelConfig"),fS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var mS=s(Mi);xf=r(mS,"model_type"),mS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var gS=s(Ei);Ci=r(gS,'"new-model"'),gS.forEach(t),R6=r(Ae,")."),Ae.forEach(t),$f=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),P6=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var hS=s(Pn);Bn=r(hS,"PreTrainedModel"),hS.forEach(t),B6=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var Sf=s(Ai);Nn=r(Sf,"config_class"),Sf.forEach(t),N6=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var pS=s(Li);kf=r(pS,"NewModelConfig"),pS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,xf),e(g,at),e(g,Ei),e(Ei,Ci),e(g,R6),b(We,$f,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,wi),e(wi,Rn),e(Oe,P6),e(Oe,Pn),e(Pn,Bn),e(Oe,B6),e(Oe,Ai),e(Ai,Nn),e(Oe,N6),e(Oe,Li),e(Li,kf),e(Oe,xa)},d(We){We&&t(g),We&&t($f),We&&t(Oe)}}}function dOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function mOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function hOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lXt($){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,R6,$f,Oe,Qe,wi,Rn,P6,Pn,Bn,B6,Ai,Nn,N6,Li,kf,xa,We,Ae,fS,yi,mS,gS,Co,$a,hS,Sf,pS,RQe,bOe,xi,Rf,$te,I6,PQe,kte,BQe,vOe,In,NQe,Ste,IQe,qQe,Rte,jQe,DQe,FOe,q6,TOe,_S,GQe,MOe,Pf,EOe,$i,Bf,Pte,j6,OQe,Bte,VQe,COe,wo,D6,XQe,G6,zQe,uS,QQe,WQe,HQe,O6,UQe,Nte,JQe,YQe,KQe,Ar,V6,ZQe,Ite,eWe,oWe,ki,rWe,qte,tWe,aWe,jte,nWe,sWe,lWe,A,Nf,Dte,iWe,dWe,bS,cWe,fWe,mWe,If,Gte,gWe,hWe,vS,pWe,_We,uWe,qf,Ote,bWe,vWe,FS,FWe,TWe,MWe,jf,Vte,EWe,CWe,TS,wWe,AWe,LWe,Df,Xte,yWe,xWe,MS,$We,kWe,SWe,Gf,zte,RWe,PWe,ES,BWe,NWe,IWe,Of,Qte,qWe,jWe,CS,DWe,GWe,OWe,Vf,Wte,VWe,XWe,wS,zWe,QWe,WWe,Xf,Hte,HWe,UWe,AS,JWe,YWe,KWe,zf,Ute,ZWe,eHe,LS,oHe,rHe,tHe,Qf,Jte,aHe,nHe,yS,sHe,lHe,iHe,Wf,Yte,dHe,cHe,xS,fHe,mHe,gHe,Hf,Kte,hHe,pHe,$S,_He,uHe,bHe,Uf,Zte,vHe,FHe,kS,THe,MHe,EHe,Jf,eae,CHe,wHe,SS,AHe,LHe,yHe,Yf,oae,xHe,$He,RS,kHe,SHe,RHe,Kf,rae,PHe,BHe,PS,NHe,IHe,qHe,Zf,tae,jHe,DHe,BS,GHe,OHe,VHe,em,aae,XHe,zHe,NS,QHe,WHe,HHe,om,nae,UHe,JHe,IS,YHe,KHe,ZHe,rm,sae,eUe,oUe,qS,rUe,tUe,aUe,tm,lae,nUe,sUe,jS,lUe,iUe,dUe,am,iae,cUe,fUe,DS,mUe,gUe,hUe,nm,dae,pUe,_Ue,GS,uUe,bUe,vUe,sm,cae,FUe,TUe,OS,MUe,EUe,CUe,lm,fae,wUe,AUe,VS,LUe,yUe,xUe,im,mae,$Ue,kUe,XS,SUe,RUe,PUe,dm,gae,BUe,NUe,zS,IUe,qUe,jUe,cm,hae,DUe,GUe,QS,OUe,VUe,XUe,fm,pae,zUe,QUe,WS,WUe,HUe,UUe,mm,_ae,JUe,YUe,HS,KUe,ZUe,eJe,gm,uae,oJe,rJe,US,tJe,aJe,nJe,hm,bae,sJe,lJe,JS,iJe,dJe,cJe,pm,vae,fJe,mJe,YS,gJe,hJe,pJe,_m,Fae,_Je,uJe,KS,bJe,vJe,FJe,um,Tae,TJe,MJe,ZS,EJe,CJe,wJe,bm,Mae,AJe,LJe,eR,yJe,xJe,$Je,vm,Eae,kJe,SJe,oR,RJe,PJe,BJe,Fm,Cae,NJe,IJe,rR,qJe,jJe,DJe,Tm,wae,GJe,OJe,tR,VJe,XJe,zJe,Mm,Aae,QJe,WJe,aR,HJe,UJe,JJe,Em,Lae,YJe,KJe,nR,ZJe,eYe,oYe,Cm,yae,rYe,tYe,sR,aYe,nYe,sYe,wm,xae,lYe,iYe,lR,dYe,cYe,fYe,Am,$ae,mYe,gYe,iR,hYe,pYe,_Ye,Lm,kae,uYe,bYe,dR,vYe,FYe,TYe,ym,Sae,MYe,EYe,cR,CYe,wYe,AYe,xm,Rae,LYe,yYe,fR,xYe,$Ye,kYe,$m,Pae,SYe,RYe,mR,PYe,BYe,NYe,km,Bae,IYe,qYe,gR,jYe,DYe,GYe,Sm,Nae,OYe,VYe,hR,XYe,zYe,QYe,Rm,Iae,WYe,HYe,pR,UYe,JYe,YYe,Pm,qae,KYe,ZYe,_R,eKe,oKe,rKe,Bm,jae,tKe,aKe,uR,nKe,sKe,lKe,Nm,Dae,iKe,dKe,bR,cKe,fKe,mKe,Im,Gae,gKe,hKe,vR,pKe,_Ke,uKe,qm,Oae,bKe,vKe,FR,FKe,TKe,MKe,jm,Vae,EKe,CKe,TR,wKe,AKe,LKe,Dm,Xae,yKe,xKe,MR,$Ke,kKe,SKe,Gm,zae,RKe,PKe,ER,BKe,NKe,IKe,Om,Qae,qKe,jKe,CR,DKe,GKe,OKe,Vm,Wae,VKe,XKe,wR,zKe,QKe,WKe,Xm,Hae,HKe,UKe,AR,JKe,YKe,KKe,zm,Uae,ZKe,eZe,LR,oZe,rZe,tZe,Qm,Jae,aZe,nZe,yR,sZe,lZe,iZe,Wm,Yae,dZe,cZe,xR,fZe,mZe,gZe,Hm,Kae,hZe,pZe,$R,_Ze,uZe,bZe,Um,Zae,vZe,FZe,kR,TZe,MZe,EZe,Jm,ene,CZe,wZe,SR,AZe,LZe,yZe,Ym,one,xZe,$Ze,RR,kZe,SZe,RZe,Km,rne,PZe,BZe,PR,NZe,IZe,qZe,Zm,tne,jZe,DZe,BR,GZe,OZe,VZe,eg,ane,XZe,zZe,NR,QZe,WZe,HZe,og,nne,UZe,JZe,IR,YZe,KZe,ZZe,rg,sne,eeo,oeo,qR,reo,teo,aeo,tg,lne,neo,seo,jR,leo,ieo,deo,ag,ine,ceo,feo,DR,meo,geo,heo,ng,dne,peo,_eo,GR,ueo,beo,veo,sg,cne,Feo,Teo,OR,Meo,Eeo,Ceo,lg,fne,weo,Aeo,VR,Leo,yeo,xeo,ig,mne,$eo,keo,XR,Seo,Reo,Peo,dg,gne,Beo,Neo,zR,Ieo,qeo,jeo,cg,hne,Deo,Geo,QR,Oeo,Veo,Xeo,fg,pne,zeo,Qeo,WR,Weo,Heo,Ueo,mg,_ne,Jeo,Yeo,HR,Keo,Zeo,eoo,gg,une,ooo,roo,UR,too,aoo,noo,hg,bne,soo,loo,JR,ioo,doo,coo,pg,vne,foo,moo,YR,goo,hoo,poo,_g,Fne,_oo,uoo,KR,boo,voo,Foo,ug,Tne,Too,Moo,ZR,Eoo,Coo,woo,bg,Mne,Aoo,Loo,eP,yoo,xoo,$oo,vg,Ene,koo,Soo,oP,Roo,Poo,Boo,Fg,Cne,Noo,Ioo,rP,qoo,joo,Doo,Tg,wne,Goo,Ooo,tP,Voo,Xoo,zoo,Mg,Ane,Qoo,Woo,aP,Hoo,Uoo,Joo,Eg,Lne,Yoo,Koo,nP,Zoo,ero,oro,Cg,yne,rro,tro,sP,aro,nro,sro,wg,xne,lro,iro,lP,dro,cro,fro,Ag,$ne,mro,gro,iP,hro,pro,_ro,Lg,kne,uro,bro,dP,vro,Fro,Tro,yg,Sne,Mro,Ero,cP,Cro,wro,Aro,xg,Rne,Lro,yro,fP,xro,$ro,kro,$g,Pne,Sro,Rro,mP,Pro,Bro,Nro,kg,Bne,Iro,qro,gP,jro,Dro,Gro,Sg,Nne,Oro,Vro,hP,Xro,zro,Qro,Rg,Ine,Wro,Hro,pP,Uro,Jro,Yro,Pg,qne,Kro,Zro,_P,eto,oto,rto,Bg,jne,tto,ato,uP,nto,sto,lto,Ng,Dne,ito,dto,bP,cto,fto,mto,Ig,Gne,gto,hto,vP,pto,_to,uto,qg,One,bto,vto,FP,Fto,Tto,Mto,jg,Vne,Eto,Cto,TP,wto,Ato,Lto,Dg,Xne,yto,xto,MP,$to,kto,Sto,Gg,zne,Rto,Pto,EP,Bto,Nto,Ito,Og,Qne,qto,jto,CP,Dto,Gto,Oto,Vg,Wne,Vto,Xto,wP,zto,Qto,Wto,Xg,Hto,zg,X6,Uto,Hne,Jto,wOe,Si,Qg,Une,z6,Yto,Jne,Kto,AOe,Ao,Q6,Zto,W6,eao,AP,oao,rao,tao,H6,aao,Yne,nao,sao,lao,Lr,U6,iao,Kne,dao,cao,ka,fao,Zne,mao,gao,ese,hao,pao,ose,_ao,uao,bao,k,qn,rse,vao,Fao,LP,Tao,Mao,yP,Eao,Cao,wao,jn,tse,Aao,Lao,xP,yao,xao,$P,$ao,kao,Sao,Dn,ase,Rao,Pao,kP,Bao,Nao,SP,Iao,qao,jao,Wg,nse,Dao,Gao,RP,Oao,Vao,Xao,Gn,sse,zao,Qao,PP,Wao,Hao,BP,Uao,Jao,Yao,Hg,lse,Kao,Zao,NP,eno,ono,rno,Ug,ise,tno,ano,IP,nno,sno,lno,Jg,dse,ino,dno,qP,cno,fno,mno,On,cse,gno,hno,jP,pno,_no,DP,uno,bno,vno,Vn,fse,Fno,Tno,GP,Mno,Eno,OP,Cno,wno,Ano,Xn,mse,Lno,yno,VP,xno,$no,XP,kno,Sno,Rno,Yg,gse,Pno,Bno,zP,Nno,Ino,qno,Kg,hse,jno,Dno,QP,Gno,Ono,Vno,Zg,pse,Xno,zno,WP,Qno,Wno,Hno,zn,_se,Uno,Jno,HP,Yno,Kno,UP,Zno,eso,oso,eh,use,rso,tso,JP,aso,nso,sso,Qn,bse,lso,iso,YP,dso,cso,KP,fso,mso,gso,Wn,vse,hso,pso,ZP,_so,uso,eB,bso,vso,Fso,Hn,Fse,Tso,Mso,oB,Eso,Cso,rB,wso,Aso,Lso,Un,Tse,yso,xso,tB,$so,kso,aB,Sso,Rso,Pso,oh,Mse,Bso,Nso,nB,Iso,qso,jso,Jn,Ese,Dso,Gso,sB,Oso,Vso,lB,Xso,zso,Qso,Yn,Cse,Wso,Hso,iB,Uso,Jso,dB,Yso,Kso,Zso,Kn,wse,elo,olo,cB,rlo,tlo,fB,alo,nlo,slo,Zn,Ase,llo,ilo,mB,dlo,clo,gB,flo,mlo,glo,es,Lse,hlo,plo,hB,_lo,ulo,pB,blo,vlo,Flo,os,yse,Tlo,Mlo,_B,Elo,Clo,uB,wlo,Alo,Llo,rh,xse,ylo,xlo,bB,$lo,klo,Slo,rs,$se,Rlo,Plo,vB,Blo,Nlo,FB,Ilo,qlo,jlo,th,kse,Dlo,Glo,TB,Olo,Vlo,Xlo,ts,Sse,zlo,Qlo,MB,Wlo,Hlo,EB,Ulo,Jlo,Ylo,as,Rse,Klo,Zlo,CB,eio,oio,wB,rio,tio,aio,ns,Pse,nio,sio,AB,lio,iio,LB,dio,cio,fio,ah,Bse,mio,gio,yB,hio,pio,_io,ss,Nse,uio,bio,xB,vio,Fio,$B,Tio,Mio,Eio,ls,Ise,Cio,wio,kB,Aio,Lio,SB,yio,xio,$io,nh,qse,kio,Sio,RB,Rio,Pio,Bio,is,jse,Nio,Iio,PB,qio,jio,BB,Dio,Gio,Oio,ds,Dse,Vio,Xio,NB,zio,Qio,IB,Wio,Hio,Uio,cs,Gse,Jio,Yio,qB,Kio,Zio,jB,edo,odo,rdo,fs,Ose,tdo,ado,DB,ndo,sdo,GB,ldo,ido,ddo,ms,Vse,cdo,fdo,OB,mdo,gdo,VB,hdo,pdo,_do,gs,Xse,udo,bdo,XB,vdo,Fdo,zB,Tdo,Mdo,Edo,hs,zse,Cdo,wdo,QB,Ado,Ldo,WB,ydo,xdo,$do,ps,Qse,kdo,Sdo,HB,Rdo,Pdo,UB,Bdo,Ndo,Ido,sh,Wse,qdo,jdo,JB,Ddo,Gdo,Odo,_s,Hse,Vdo,Xdo,YB,zdo,Qdo,KB,Wdo,Hdo,Udo,lh,Use,Jdo,Ydo,ZB,Kdo,Zdo,eco,ih,Jse,oco,rco,eN,tco,aco,nco,us,Yse,sco,lco,oN,ico,dco,rN,cco,fco,mco,bs,Kse,gco,hco,tN,pco,_co,aN,uco,bco,vco,vs,Zse,Fco,Tco,nN,Mco,Eco,sN,Cco,wco,Aco,dh,ele,Lco,yco,lN,xco,$co,kco,Fs,ole,Sco,Rco,iN,Pco,Bco,dN,Nco,Ico,qco,Ts,rle,jco,Dco,cN,Gco,Oco,fN,Vco,Xco,zco,Ms,tle,Qco,Wco,mN,Hco,Uco,gN,Jco,Yco,Kco,Es,ale,Zco,efo,hN,ofo,rfo,pN,tfo,afo,nfo,Cs,nle,sfo,lfo,_N,ifo,dfo,uN,cfo,ffo,mfo,ws,sle,gfo,hfo,bN,pfo,_fo,vN,ufo,bfo,vfo,ch,lle,Ffo,Tfo,FN,Mfo,Efo,Cfo,As,ile,wfo,Afo,TN,Lfo,yfo,MN,xfo,$fo,kfo,fh,dle,Sfo,Rfo,EN,Pfo,Bfo,Nfo,mh,cle,Ifo,qfo,CN,jfo,Dfo,Gfo,gh,fle,Ofo,Vfo,wN,Xfo,zfo,Qfo,hh,mle,Wfo,Hfo,AN,Ufo,Jfo,Yfo,Ls,gle,Kfo,Zfo,LN,emo,omo,yN,rmo,tmo,amo,ph,hle,nmo,smo,xN,lmo,imo,dmo,ys,ple,cmo,fmo,$N,mmo,gmo,kN,hmo,pmo,_mo,xs,_le,umo,bmo,SN,vmo,Fmo,RN,Tmo,Mmo,Emo,$s,ule,Cmo,wmo,PN,Amo,Lmo,BN,ymo,xmo,$mo,ks,ble,kmo,Smo,NN,Rmo,Pmo,IN,Bmo,Nmo,Imo,Ss,vle,qmo,jmo,qN,Dmo,Gmo,jN,Omo,Vmo,Xmo,Rs,Fle,zmo,Qmo,DN,Wmo,Hmo,GN,Umo,Jmo,Ymo,_h,Tle,Kmo,Zmo,ON,ego,ogo,rgo,uh,Mle,tgo,ago,VN,ngo,sgo,lgo,Ps,Ele,igo,dgo,XN,cgo,fgo,zN,mgo,ggo,hgo,Bs,Cle,pgo,_go,QN,ugo,bgo,WN,vgo,Fgo,Tgo,Ns,wle,Mgo,Ego,HN,Cgo,wgo,UN,Ago,Lgo,ygo,bh,Ale,xgo,$go,JN,kgo,Sgo,Rgo,vh,Lle,Pgo,Bgo,YN,Ngo,Igo,qgo,Fh,yle,jgo,Dgo,KN,Ggo,Ogo,Vgo,Is,xle,Xgo,zgo,ZN,Qgo,Wgo,eI,Hgo,Ugo,Jgo,qs,$le,Ygo,Kgo,oI,Zgo,eho,rI,oho,rho,tho,Th,kle,aho,nho,tI,sho,lho,iho,Mh,Sle,dho,cho,aI,fho,mho,gho,Eh,Rle,hho,pho,nI,_ho,uho,bho,js,Ple,vho,Fho,sI,Tho,Mho,lI,Eho,Cho,who,Ch,Ble,Aho,Lho,iI,yho,xho,$ho,wh,Nle,kho,Sho,dI,Rho,Pho,Bho,Ds,Ile,Nho,Iho,cI,qho,jho,fI,Dho,Gho,Oho,Gs,qle,Vho,Xho,mI,zho,Qho,gI,Who,Hho,Uho,Os,jle,Jho,Yho,hI,Kho,Zho,pI,epo,opo,rpo,Vs,Dle,tpo,apo,_I,npo,spo,uI,lpo,ipo,dpo,Ah,cpo,Lh,J6,fpo,Gle,mpo,LOe,Ri,yh,Ole,Y6,gpo,Vle,hpo,yOe,Lo,K6,ppo,Z6,_po,bI,upo,bpo,vpo,eL,Fpo,Xle,Tpo,Mpo,Epo,He,oL,Cpo,zle,wpo,Apo,Sa,Lpo,Qle,ypo,xpo,Wle,$po,kpo,Hle,Spo,Rpo,Ppo,Y,xh,Ule,Bpo,Npo,vI,Ipo,qpo,jpo,$h,Jle,Dpo,Gpo,FI,Opo,Vpo,Xpo,kh,Yle,zpo,Qpo,TI,Wpo,Hpo,Upo,Sh,Kle,Jpo,Ypo,MI,Kpo,Zpo,e_o,Rh,Zle,o_o,r_o,EI,t_o,a_o,n_o,Ph,eie,s_o,l_o,CI,i_o,d_o,c_o,Bh,oie,f_o,m_o,wI,g_o,h_o,p_o,Nh,rie,__o,u_o,AI,b_o,v_o,F_o,Ih,tie,T_o,M_o,LI,E_o,C_o,w_o,qh,aie,A_o,L_o,yI,y_o,x_o,$_o,jh,nie,k_o,S_o,xI,R_o,P_o,B_o,Dh,sie,N_o,I_o,$I,q_o,j_o,D_o,Gh,lie,G_o,O_o,kI,V_o,X_o,z_o,Oh,iie,Q_o,W_o,SI,H_o,U_o,J_o,Vh,die,Y_o,K_o,RI,Z_o,euo,ouo,Xh,cie,ruo,tuo,PI,auo,nuo,suo,zh,fie,luo,iuo,BI,duo,cuo,fuo,Qh,mie,muo,guo,NI,huo,puo,_uo,Wh,gie,uuo,buo,II,vuo,Fuo,Tuo,Hh,hie,Muo,Euo,qI,Cuo,wuo,Auo,Uh,pie,Luo,yuo,jI,xuo,$uo,kuo,Jh,_ie,Suo,Ruo,DI,Puo,Buo,Nuo,Yh,uie,Iuo,quo,GI,juo,Duo,Guo,Kh,bie,Ouo,Vuo,OI,Xuo,zuo,Quo,Zh,vie,Wuo,Huo,VI,Uuo,Juo,Yuo,ep,Fie,Kuo,Zuo,XI,e1o,o1o,r1o,op,Tie,t1o,a1o,zI,n1o,s1o,l1o,rp,Mie,i1o,d1o,QI,c1o,f1o,m1o,tp,Eie,g1o,h1o,WI,p1o,_1o,u1o,ap,Cie,b1o,v1o,HI,F1o,T1o,M1o,np,wie,E1o,C1o,UI,w1o,A1o,L1o,sp,Aie,y1o,x1o,JI,$1o,k1o,S1o,lp,Lie,R1o,P1o,YI,B1o,N1o,I1o,ip,q1o,dp,j1o,cp,rL,D1o,yie,G1o,xOe,Pi,fp,xie,tL,O1o,$ie,V1o,$Oe,yo,aL,X1o,nL,z1o,KI,Q1o,W1o,H1o,sL,U1o,kie,J1o,Y1o,K1o,Ue,lL,Z1o,Sie,e7o,o7o,Bi,r7o,Rie,t7o,a7o,Pie,n7o,s7o,l7o,he,mp,Bie,i7o,d7o,ZI,c7o,f7o,m7o,gp,Nie,g7o,h7o,Iie,p7o,_7o,u7o,hp,qie,b7o,v7o,eq,F7o,T7o,M7o,pp,jie,E7o,C7o,oq,w7o,A7o,L7o,_p,Die,y7o,x7o,rq,$7o,k7o,S7o,up,Gie,R7o,P7o,tq,B7o,N7o,I7o,bp,Oie,q7o,j7o,aq,D7o,G7o,O7o,vp,Vie,V7o,X7o,nq,z7o,Q7o,W7o,Fp,Xie,H7o,U7o,sq,J7o,Y7o,K7o,Tp,zie,Z7o,e9o,lq,o9o,r9o,t9o,Mp,Qie,a9o,n9o,iq,s9o,l9o,i9o,Ep,Wie,d9o,c9o,dq,f9o,m9o,g9o,Cp,Hie,h9o,p9o,cq,_9o,u9o,b9o,wp,Uie,v9o,F9o,fq,T9o,M9o,E9o,Ap,Jie,C9o,w9o,mq,A9o,L9o,y9o,Lp,Yie,x9o,$9o,gq,k9o,S9o,R9o,yp,Kie,P9o,B9o,hq,N9o,I9o,q9o,xp,j9o,$p,D9o,kp,iL,G9o,Zie,O9o,kOe,Ni,Sp,ede,dL,V9o,ode,X9o,SOe,xo,cL,z9o,Ii,Q9o,pq,W9o,H9o,_q,U9o,J9o,Y9o,fL,K9o,rde,Z9o,e2o,o2o,nt,mL,r2o,tde,t2o,a2o,qi,n2o,ade,s2o,l2o,uq,i2o,d2o,c2o,Rp,f2o,Je,gL,m2o,nde,g2o,h2o,Ra,p2o,sde,_2o,u2o,lde,b2o,v2o,ide,F2o,T2o,M2o,y,Pp,dde,E2o,C2o,bq,w2o,A2o,L2o,Bp,cde,y2o,x2o,vq,$2o,k2o,S2o,Np,fde,R2o,P2o,Fq,B2o,N2o,I2o,Ip,mde,q2o,j2o,Tq,D2o,G2o,O2o,qp,gde,V2o,X2o,Mq,z2o,Q2o,W2o,jp,hde,H2o,U2o,Eq,J2o,Y2o,K2o,Dp,pde,Z2o,ebo,Cq,obo,rbo,tbo,Gp,_de,abo,nbo,wq,sbo,lbo,ibo,Op,ude,dbo,cbo,Aq,fbo,mbo,gbo,Vp,bde,hbo,pbo,Lq,_bo,ubo,bbo,Xp,vde,vbo,Fbo,yq,Tbo,Mbo,Ebo,zp,Fde,Cbo,wbo,xq,Abo,Lbo,ybo,Qp,Tde,xbo,$bo,$q,kbo,Sbo,Rbo,Wp,Mde,Pbo,Bbo,kq,Nbo,Ibo,qbo,Hp,Ede,jbo,Dbo,Sq,Gbo,Obo,Vbo,Up,Cde,Xbo,zbo,Rq,Qbo,Wbo,Hbo,Jp,wde,Ubo,Jbo,Pq,Ybo,Kbo,Zbo,Yp,Ade,evo,ovo,Bq,rvo,tvo,avo,Kp,Lde,nvo,svo,Nq,lvo,ivo,dvo,Zp,yde,cvo,fvo,Iq,mvo,gvo,hvo,e_,xde,pvo,_vo,qq,uvo,bvo,vvo,o_,$de,Fvo,Tvo,jq,Mvo,Evo,Cvo,r_,kde,wvo,Avo,Dq,Lvo,yvo,xvo,t_,Sde,$vo,kvo,Gq,Svo,Rvo,Pvo,a_,Rde,Bvo,Nvo,Oq,Ivo,qvo,jvo,n_,Pde,Dvo,Gvo,Vq,Ovo,Vvo,Xvo,s_,Bde,zvo,Qvo,Xq,Wvo,Hvo,Uvo,l_,Nde,Jvo,Yvo,zq,Kvo,Zvo,eFo,i_,Ide,oFo,rFo,Qq,tFo,aFo,nFo,d_,qde,sFo,lFo,Wq,iFo,dFo,cFo,c_,jde,fFo,mFo,Hq,gFo,hFo,pFo,f_,Dde,_Fo,uFo,Uq,bFo,vFo,FFo,m_,Gde,TFo,MFo,Jq,EFo,CFo,wFo,g_,Ode,AFo,LFo,Yq,yFo,xFo,$Fo,Xs,Vde,kFo,SFo,Kq,RFo,PFo,Zq,BFo,NFo,IFo,h_,Xde,qFo,jFo,ej,DFo,GFo,OFo,p_,zde,VFo,XFo,oj,zFo,QFo,WFo,__,Qde,HFo,UFo,rj,JFo,YFo,KFo,u_,Wde,ZFo,eTo,tj,oTo,rTo,tTo,b_,Hde,aTo,nTo,aj,sTo,lTo,iTo,v_,Ude,dTo,cTo,nj,fTo,mTo,gTo,F_,Jde,hTo,pTo,sj,_To,uTo,bTo,T_,Yde,vTo,FTo,lj,TTo,MTo,ETo,M_,Kde,CTo,wTo,ij,ATo,LTo,yTo,E_,Zde,xTo,$To,dj,kTo,STo,RTo,C_,ece,PTo,BTo,cj,NTo,ITo,qTo,w_,oce,jTo,DTo,fj,GTo,OTo,VTo,A_,rce,XTo,zTo,mj,QTo,WTo,HTo,L_,tce,UTo,JTo,gj,YTo,KTo,ZTo,y_,ace,eMo,oMo,hj,rMo,tMo,aMo,x_,nce,nMo,sMo,pj,lMo,iMo,dMo,$_,sce,cMo,fMo,_j,mMo,gMo,hMo,k_,lce,pMo,_Mo,uj,uMo,bMo,vMo,S_,ice,FMo,TMo,bj,MMo,EMo,CMo,R_,dce,wMo,AMo,vj,LMo,yMo,xMo,P_,cce,$Mo,kMo,Fj,SMo,RMo,PMo,B_,fce,BMo,NMo,Tj,IMo,qMo,jMo,N_,mce,DMo,GMo,Mj,OMo,VMo,XMo,I_,gce,zMo,QMo,Ej,WMo,HMo,UMo,q_,hce,JMo,YMo,Cj,KMo,ZMo,eEo,j_,pce,oEo,rEo,wj,tEo,aEo,nEo,D_,_ce,sEo,lEo,Aj,iEo,dEo,cEo,G_,uce,fEo,mEo,Lj,gEo,hEo,pEo,O_,bce,_Eo,uEo,yj,bEo,vEo,FEo,V_,vce,TEo,MEo,xj,EEo,CEo,wEo,X_,Fce,AEo,LEo,$j,yEo,xEo,$Eo,z_,Tce,kEo,SEo,kj,REo,PEo,BEo,Q_,Mce,NEo,IEo,Sj,qEo,jEo,DEo,W_,Ece,GEo,OEo,Rj,VEo,XEo,zEo,H_,Cce,QEo,WEo,Pj,HEo,UEo,JEo,U_,wce,YEo,KEo,Bj,ZEo,e4o,o4o,J_,Ace,r4o,t4o,Nj,a4o,n4o,s4o,Y_,Lce,l4o,i4o,Ij,d4o,c4o,f4o,K_,yce,m4o,g4o,qj,h4o,p4o,_4o,Z_,xce,u4o,b4o,jj,v4o,F4o,T4o,eu,$ce,M4o,E4o,Dj,C4o,w4o,A4o,ou,kce,L4o,y4o,Gj,x4o,$4o,k4o,ru,Sce,S4o,R4o,Oj,P4o,B4o,N4o,tu,Rce,I4o,q4o,Vj,j4o,D4o,G4o,au,Pce,O4o,V4o,Xj,X4o,z4o,Q4o,nu,Bce,W4o,H4o,zj,U4o,J4o,Y4o,su,Nce,K4o,Z4o,Qj,eCo,oCo,rCo,lu,Ice,tCo,aCo,Wj,nCo,sCo,lCo,iu,qce,iCo,dCo,Hj,cCo,fCo,mCo,du,jce,gCo,hCo,Uj,pCo,_Co,uCo,cu,Dce,bCo,vCo,Jj,FCo,TCo,MCo,fu,Gce,ECo,CCo,Yj,wCo,ACo,LCo,mu,Oce,yCo,xCo,Kj,$Co,kCo,SCo,gu,Vce,RCo,PCo,Zj,BCo,NCo,ICo,hu,Xce,qCo,jCo,eD,DCo,GCo,OCo,pu,zce,VCo,XCo,oD,zCo,QCo,WCo,_u,Qce,HCo,UCo,rD,JCo,YCo,KCo,uu,Wce,ZCo,e5o,tD,o5o,r5o,t5o,bu,Hce,a5o,n5o,aD,s5o,l5o,i5o,vu,Uce,d5o,c5o,nD,f5o,m5o,g5o,Fu,Jce,h5o,p5o,sD,_5o,u5o,b5o,Tu,Yce,v5o,F5o,lD,T5o,M5o,E5o,Mu,Kce,C5o,w5o,iD,A5o,L5o,y5o,Eu,Zce,x5o,$5o,dD,k5o,S5o,R5o,Cu,efe,P5o,B5o,cD,N5o,I5o,q5o,wu,ofe,j5o,D5o,fD,G5o,O5o,V5o,Au,rfe,X5o,z5o,mD,Q5o,W5o,H5o,Lu,tfe,U5o,J5o,gD,Y5o,K5o,Z5o,yu,afe,e3o,o3o,hD,r3o,t3o,a3o,xu,nfe,n3o,s3o,pD,l3o,i3o,d3o,$u,sfe,c3o,f3o,_D,m3o,g3o,h3o,ku,lfe,p3o,_3o,uD,u3o,b3o,v3o,Su,ife,F3o,T3o,bD,M3o,E3o,C3o,Ru,dfe,w3o,A3o,vD,L3o,y3o,x3o,Pu,$3o,cfe,k3o,S3o,ffe,R3o,P3o,Bu,ROe,ji,Nu,mfe,hL,B3o,gfe,N3o,POe,$o,pL,I3o,Di,q3o,FD,j3o,D3o,TD,G3o,O3o,V3o,_L,X3o,hfe,z3o,Q3o,W3o,st,uL,H3o,pfe,U3o,J3o,Gi,Y3o,_fe,K3o,Z3o,MD,e0o,o0o,r0o,Iu,t0o,Ye,bL,a0o,ufe,n0o,s0o,Pa,l0o,bfe,i0o,d0o,vfe,c0o,f0o,Ffe,m0o,g0o,h0o,G,qu,Tfe,p0o,_0o,ED,u0o,b0o,v0o,ju,Mfe,F0o,T0o,CD,M0o,E0o,C0o,Du,Efe,w0o,A0o,wD,L0o,y0o,x0o,Gu,Cfe,$0o,k0o,AD,S0o,R0o,P0o,Ou,wfe,B0o,N0o,LD,I0o,q0o,j0o,Vu,Afe,D0o,G0o,yD,O0o,V0o,X0o,Xu,Lfe,z0o,Q0o,xD,W0o,H0o,U0o,zu,yfe,J0o,Y0o,$D,K0o,Z0o,ewo,Qu,xfe,owo,rwo,kD,two,awo,nwo,Wu,$fe,swo,lwo,SD,iwo,dwo,cwo,Hu,kfe,fwo,mwo,RD,gwo,hwo,pwo,Uu,Sfe,_wo,uwo,PD,bwo,vwo,Fwo,Ju,Rfe,Two,Mwo,BD,Ewo,Cwo,wwo,Yu,Pfe,Awo,Lwo,ND,ywo,xwo,$wo,Ku,Bfe,kwo,Swo,ID,Rwo,Pwo,Bwo,Zu,Nfe,Nwo,Iwo,qD,qwo,jwo,Dwo,e1,Ife,Gwo,Owo,jD,Vwo,Xwo,zwo,o1,qfe,Qwo,Wwo,DD,Hwo,Uwo,Jwo,r1,jfe,Ywo,Kwo,GD,Zwo,eAo,oAo,t1,Dfe,rAo,tAo,OD,aAo,nAo,sAo,a1,Gfe,lAo,iAo,VD,dAo,cAo,fAo,n1,Ofe,mAo,gAo,XD,hAo,pAo,_Ao,s1,Vfe,uAo,bAo,zD,vAo,FAo,TAo,l1,Xfe,MAo,EAo,QD,CAo,wAo,AAo,i1,zfe,LAo,yAo,WD,xAo,$Ao,kAo,d1,Qfe,SAo,RAo,HD,PAo,BAo,NAo,c1,Wfe,IAo,qAo,UD,jAo,DAo,GAo,f1,Hfe,OAo,VAo,JD,XAo,zAo,QAo,m1,Ufe,WAo,HAo,YD,UAo,JAo,YAo,g1,Jfe,KAo,ZAo,KD,e6o,o6o,r6o,h1,Yfe,t6o,a6o,ZD,n6o,s6o,l6o,p1,Kfe,i6o,d6o,eG,c6o,f6o,m6o,_1,Zfe,g6o,h6o,oG,p6o,_6o,u6o,u1,eme,b6o,v6o,rG,F6o,T6o,M6o,b1,ome,E6o,C6o,tG,w6o,A6o,L6o,v1,rme,y6o,x6o,aG,$6o,k6o,S6o,F1,tme,R6o,P6o,nG,B6o,N6o,I6o,T1,ame,q6o,j6o,sG,D6o,G6o,O6o,M1,nme,V6o,X6o,lG,z6o,Q6o,W6o,E1,sme,H6o,U6o,iG,J6o,Y6o,K6o,C1,lme,Z6o,eLo,dG,oLo,rLo,tLo,w1,ime,aLo,nLo,cG,sLo,lLo,iLo,A1,dme,dLo,cLo,fG,fLo,mLo,gLo,L1,cme,hLo,pLo,mG,_Lo,uLo,bLo,y1,vLo,fme,FLo,TLo,mme,MLo,ELo,x1,BOe,Oi,$1,gme,vL,CLo,hme,wLo,NOe,ko,FL,ALo,Vi,LLo,gG,yLo,xLo,hG,$Lo,kLo,SLo,TL,RLo,pme,PLo,BLo,NLo,lt,ML,ILo,_me,qLo,jLo,Xi,DLo,ume,GLo,OLo,pG,VLo,XLo,zLo,k1,QLo,Ke,EL,WLo,bme,HLo,ULo,Ba,JLo,vme,YLo,KLo,Fme,ZLo,eyo,Tme,oyo,ryo,tyo,z,S1,Mme,ayo,nyo,_G,syo,lyo,iyo,R1,Eme,dyo,cyo,uG,fyo,myo,gyo,P1,Cme,hyo,pyo,bG,_yo,uyo,byo,B1,wme,vyo,Fyo,vG,Tyo,Myo,Eyo,N1,Ame,Cyo,wyo,FG,Ayo,Lyo,yyo,I1,Lme,xyo,$yo,TG,kyo,Syo,Ryo,q1,yme,Pyo,Byo,MG,Nyo,Iyo,qyo,j1,xme,jyo,Dyo,EG,Gyo,Oyo,Vyo,D1,$me,Xyo,zyo,CG,Qyo,Wyo,Hyo,G1,kme,Uyo,Jyo,wG,Yyo,Kyo,Zyo,O1,Sme,e8o,o8o,AG,r8o,t8o,a8o,V1,Rme,n8o,s8o,LG,l8o,i8o,d8o,X1,Pme,c8o,f8o,yG,m8o,g8o,h8o,z1,Bme,p8o,_8o,xG,u8o,b8o,v8o,Q1,Nme,F8o,T8o,$G,M8o,E8o,C8o,W1,Ime,w8o,A8o,kG,L8o,y8o,x8o,H1,qme,$8o,k8o,SG,S8o,R8o,P8o,U1,jme,B8o,N8o,RG,I8o,q8o,j8o,J1,Dme,D8o,G8o,PG,O8o,V8o,X8o,Y1,Gme,z8o,Q8o,BG,W8o,H8o,U8o,K1,Ome,J8o,Y8o,NG,K8o,Z8o,exo,Z1,Vme,oxo,rxo,IG,txo,axo,nxo,e7,Xme,sxo,lxo,qG,ixo,dxo,cxo,o7,zme,fxo,mxo,jG,gxo,hxo,pxo,r7,Qme,_xo,uxo,DG,bxo,vxo,Fxo,t7,Wme,Txo,Mxo,GG,Exo,Cxo,wxo,a7,Hme,Axo,Lxo,OG,yxo,xxo,$xo,n7,Ume,kxo,Sxo,VG,Rxo,Pxo,Bxo,s7,Jme,Nxo,Ixo,XG,qxo,jxo,Dxo,l7,Yme,Gxo,Oxo,zG,Vxo,Xxo,zxo,i7,Kme,Qxo,Wxo,QG,Hxo,Uxo,Jxo,d7,Zme,Yxo,Kxo,WG,Zxo,e$o,o$o,c7,ege,r$o,t$o,HG,a$o,n$o,s$o,f7,oge,l$o,i$o,UG,d$o,c$o,f$o,m7,rge,m$o,g$o,JG,h$o,p$o,_$o,g7,tge,u$o,b$o,YG,v$o,F$o,T$o,h7,age,M$o,E$o,KG,C$o,w$o,A$o,p7,nge,L$o,y$o,ZG,x$o,$$o,k$o,_7,sge,S$o,R$o,eO,P$o,B$o,N$o,u7,I$o,lge,q$o,j$o,ige,D$o,G$o,b7,IOe,zi,v7,dge,CL,O$o,cge,V$o,qOe,So,wL,X$o,Qi,z$o,oO,Q$o,W$o,rO,H$o,U$o,J$o,AL,Y$o,fge,K$o,Z$o,eko,it,LL,oko,mge,rko,tko,Wi,ako,gge,nko,sko,tO,lko,iko,dko,F7,cko,Ze,yL,fko,hge,mko,gko,Na,hko,pge,pko,_ko,_ge,uko,bko,uge,vko,Fko,Tko,W,T7,bge,Mko,Eko,aO,Cko,wko,Ako,M7,vge,Lko,yko,nO,xko,$ko,kko,E7,Fge,Sko,Rko,sO,Pko,Bko,Nko,C7,Tge,Iko,qko,lO,jko,Dko,Gko,w7,Mge,Oko,Vko,iO,Xko,zko,Qko,A7,Ege,Wko,Hko,dO,Uko,Jko,Yko,L7,Cge,Kko,Zko,cO,eSo,oSo,rSo,y7,wge,tSo,aSo,fO,nSo,sSo,lSo,x7,Age,iSo,dSo,mO,cSo,fSo,mSo,$7,Lge,gSo,hSo,gO,pSo,_So,uSo,k7,yge,bSo,vSo,hO,FSo,TSo,MSo,S7,xge,ESo,CSo,pO,wSo,ASo,LSo,R7,$ge,ySo,xSo,_O,$So,kSo,SSo,P7,kge,RSo,PSo,uO,BSo,NSo,ISo,B7,Sge,qSo,jSo,bO,DSo,GSo,OSo,N7,Rge,VSo,XSo,vO,zSo,QSo,WSo,I7,Pge,HSo,USo,FO,JSo,YSo,KSo,q7,Bge,ZSo,eRo,TO,oRo,rRo,tRo,j7,Nge,aRo,nRo,MO,sRo,lRo,iRo,D7,Ige,dRo,cRo,EO,fRo,mRo,gRo,G7,qge,hRo,pRo,CO,_Ro,uRo,bRo,O7,jge,vRo,FRo,wO,TRo,MRo,ERo,V7,Dge,CRo,wRo,AO,ARo,LRo,yRo,X7,Gge,xRo,$Ro,LO,kRo,SRo,RRo,z7,Oge,PRo,BRo,yO,NRo,IRo,qRo,Q7,Vge,jRo,DRo,xO,GRo,ORo,VRo,W7,Xge,XRo,zRo,$O,QRo,WRo,HRo,H7,zge,URo,JRo,kO,YRo,KRo,ZRo,U7,Qge,ePo,oPo,SO,rPo,tPo,aPo,J7,Wge,nPo,sPo,RO,lPo,iPo,dPo,Y7,Hge,cPo,fPo,PO,mPo,gPo,hPo,K7,Uge,pPo,_Po,BO,uPo,bPo,vPo,Z7,Jge,FPo,TPo,Yge,MPo,EPo,CPo,e9,Kge,wPo,APo,NO,LPo,yPo,xPo,o9,Zge,$Po,kPo,IO,SPo,RPo,PPo,r9,ehe,BPo,NPo,qO,IPo,qPo,jPo,t9,ohe,DPo,GPo,jO,OPo,VPo,XPo,a9,zPo,rhe,QPo,WPo,the,HPo,UPo,n9,jOe,Hi,s9,ahe,xL,JPo,nhe,YPo,DOe,Ro,$L,KPo,Ui,ZPo,DO,eBo,oBo,GO,rBo,tBo,aBo,kL,nBo,she,sBo,lBo,iBo,dt,SL,dBo,lhe,cBo,fBo,Ji,mBo,ihe,gBo,hBo,OO,pBo,_Bo,uBo,l9,bBo,eo,RL,vBo,dhe,FBo,TBo,Ia,MBo,che,EBo,CBo,fhe,wBo,ABo,mhe,LBo,yBo,xBo,pe,i9,ghe,$Bo,kBo,VO,SBo,RBo,PBo,d9,hhe,BBo,NBo,XO,IBo,qBo,jBo,c9,phe,DBo,GBo,zO,OBo,VBo,XBo,f9,_he,zBo,QBo,QO,WBo,HBo,UBo,m9,uhe,JBo,YBo,WO,KBo,ZBo,eNo,g9,bhe,oNo,rNo,HO,tNo,aNo,nNo,h9,vhe,sNo,lNo,UO,iNo,dNo,cNo,p9,Fhe,fNo,mNo,JO,gNo,hNo,pNo,_9,The,_No,uNo,YO,bNo,vNo,FNo,u9,Mhe,TNo,MNo,KO,ENo,CNo,wNo,b9,Ehe,ANo,LNo,ZO,yNo,xNo,$No,v9,Che,kNo,SNo,eV,RNo,PNo,BNo,F9,whe,NNo,INo,oV,qNo,jNo,DNo,T9,Ahe,GNo,ONo,rV,VNo,XNo,zNo,M9,Lhe,QNo,WNo,tV,HNo,UNo,JNo,E9,yhe,YNo,KNo,aV,ZNo,eIo,oIo,C9,xhe,rIo,tIo,nV,aIo,nIo,sIo,w9,lIo,$he,iIo,dIo,khe,cIo,fIo,A9,GOe,Yi,L9,She,PL,mIo,Rhe,gIo,OOe,Po,BL,hIo,Ki,pIo,sV,_Io,uIo,lV,bIo,vIo,FIo,NL,TIo,Phe,MIo,EIo,CIo,ct,IL,wIo,Bhe,AIo,LIo,Zi,yIo,Nhe,xIo,$Io,iV,kIo,SIo,RIo,y9,PIo,oo,qL,BIo,Ihe,NIo,IIo,qa,qIo,qhe,jIo,DIo,jhe,GIo,OIo,Dhe,VIo,XIo,zIo,I,x9,Ghe,QIo,WIo,dV,HIo,UIo,JIo,$9,Ohe,YIo,KIo,cV,ZIo,eqo,oqo,k9,Vhe,rqo,tqo,fV,aqo,nqo,sqo,S9,Xhe,lqo,iqo,mV,dqo,cqo,fqo,R9,zhe,mqo,gqo,gV,hqo,pqo,_qo,P9,Qhe,uqo,bqo,hV,vqo,Fqo,Tqo,B9,Whe,Mqo,Eqo,pV,Cqo,wqo,Aqo,N9,Hhe,Lqo,yqo,_V,xqo,$qo,kqo,I9,Uhe,Sqo,Rqo,uV,Pqo,Bqo,Nqo,q9,Jhe,Iqo,qqo,bV,jqo,Dqo,Gqo,j9,Yhe,Oqo,Vqo,vV,Xqo,zqo,Qqo,D9,Khe,Wqo,Hqo,FV,Uqo,Jqo,Yqo,G9,Zhe,Kqo,Zqo,TV,ejo,ojo,rjo,O9,epe,tjo,ajo,MV,njo,sjo,ljo,V9,ope,ijo,djo,EV,cjo,fjo,mjo,X9,rpe,gjo,hjo,CV,pjo,_jo,ujo,z9,tpe,bjo,vjo,wV,Fjo,Tjo,Mjo,Q9,ape,Ejo,Cjo,AV,wjo,Ajo,Ljo,W9,npe,yjo,xjo,LV,$jo,kjo,Sjo,H9,spe,Rjo,Pjo,yV,Bjo,Njo,Ijo,U9,lpe,qjo,jjo,xV,Djo,Gjo,Ojo,J9,ipe,Vjo,Xjo,$V,zjo,Qjo,Wjo,Y9,dpe,Hjo,Ujo,kV,Jjo,Yjo,Kjo,K9,cpe,Zjo,eDo,SV,oDo,rDo,tDo,Z9,fpe,aDo,nDo,RV,sDo,lDo,iDo,e2,mpe,dDo,cDo,PV,fDo,mDo,gDo,o2,gpe,hDo,pDo,BV,_Do,uDo,bDo,r2,hpe,vDo,FDo,NV,TDo,MDo,EDo,t2,ppe,CDo,wDo,IV,ADo,LDo,yDo,a2,_pe,xDo,$Do,qV,kDo,SDo,RDo,n2,upe,PDo,BDo,jV,NDo,IDo,qDo,s2,bpe,jDo,DDo,DV,GDo,ODo,VDo,l2,vpe,XDo,zDo,GV,QDo,WDo,HDo,i2,Fpe,UDo,JDo,OV,YDo,KDo,ZDo,d2,Tpe,eGo,oGo,VV,rGo,tGo,aGo,c2,Mpe,nGo,sGo,XV,lGo,iGo,dGo,f2,Epe,cGo,fGo,zV,mGo,gGo,hGo,m2,Cpe,pGo,_Go,QV,uGo,bGo,vGo,g2,wpe,FGo,TGo,WV,MGo,EGo,CGo,h2,Ape,wGo,AGo,HV,LGo,yGo,xGo,p2,Lpe,$Go,kGo,UV,SGo,RGo,PGo,_2,ype,BGo,NGo,JV,IGo,qGo,jGo,u2,xpe,DGo,GGo,YV,OGo,VGo,XGo,b2,$pe,zGo,QGo,KV,WGo,HGo,UGo,v2,kpe,JGo,YGo,ZV,KGo,ZGo,eOo,F2,Spe,oOo,rOo,eX,tOo,aOo,nOo,T2,Rpe,sOo,lOo,oX,iOo,dOo,cOo,M2,Ppe,fOo,mOo,rX,gOo,hOo,pOo,E2,Bpe,_Oo,uOo,tX,bOo,vOo,FOo,C2,TOo,Npe,MOo,EOo,Ipe,COo,wOo,w2,VOe,ed,A2,qpe,jL,AOo,jpe,LOo,XOe,Bo,DL,yOo,od,xOo,aX,$Oo,kOo,nX,SOo,ROo,POo,GL,BOo,Dpe,NOo,IOo,qOo,ft,OL,jOo,Gpe,DOo,GOo,rd,OOo,Ope,VOo,XOo,sX,zOo,QOo,WOo,L2,HOo,ro,VL,UOo,Vpe,JOo,YOo,ja,KOo,Xpe,ZOo,eVo,zpe,oVo,rVo,Qpe,tVo,aVo,nVo,Z,y2,Wpe,sVo,lVo,lX,iVo,dVo,cVo,x2,Hpe,fVo,mVo,iX,gVo,hVo,pVo,$2,Upe,_Vo,uVo,dX,bVo,vVo,FVo,k2,Jpe,TVo,MVo,cX,EVo,CVo,wVo,S2,Ype,AVo,LVo,fX,yVo,xVo,$Vo,R2,Kpe,kVo,SVo,mX,RVo,PVo,BVo,P2,Zpe,NVo,IVo,gX,qVo,jVo,DVo,B2,e_e,GVo,OVo,hX,VVo,XVo,zVo,N2,o_e,QVo,WVo,pX,HVo,UVo,JVo,I2,r_e,YVo,KVo,_X,ZVo,eXo,oXo,q2,t_e,rXo,tXo,uX,aXo,nXo,sXo,j2,a_e,lXo,iXo,bX,dXo,cXo,fXo,D2,n_e,mXo,gXo,vX,hXo,pXo,_Xo,G2,s_e,uXo,bXo,FX,vXo,FXo,TXo,O2,l_e,MXo,EXo,TX,CXo,wXo,AXo,V2,i_e,LXo,yXo,MX,xXo,$Xo,kXo,X2,d_e,SXo,RXo,EX,PXo,BXo,NXo,z2,c_e,IXo,qXo,CX,jXo,DXo,GXo,Q2,f_e,OXo,VXo,wX,XXo,zXo,QXo,W2,m_e,WXo,HXo,AX,UXo,JXo,YXo,H2,g_e,KXo,ZXo,LX,ezo,ozo,rzo,U2,h_e,tzo,azo,yX,nzo,szo,lzo,J2,p_e,izo,dzo,xX,czo,fzo,mzo,Y2,__e,gzo,hzo,$X,pzo,_zo,uzo,K2,u_e,bzo,vzo,kX,Fzo,Tzo,Mzo,Z2,b_e,Ezo,Czo,SX,wzo,Azo,Lzo,eb,v_e,yzo,xzo,RX,$zo,kzo,Szo,ob,F_e,Rzo,Pzo,PX,Bzo,Nzo,Izo,rb,T_e,qzo,jzo,BX,Dzo,Gzo,Ozo,tb,M_e,Vzo,Xzo,NX,zzo,Qzo,Wzo,ab,Hzo,E_e,Uzo,Jzo,C_e,Yzo,Kzo,nb,zOe,td,sb,w_e,XL,Zzo,A_e,eQo,QOe,No,zL,oQo,ad,rQo,IX,tQo,aQo,qX,nQo,sQo,lQo,QL,iQo,L_e,dQo,cQo,fQo,mt,WL,mQo,y_e,gQo,hQo,nd,pQo,x_e,_Qo,uQo,jX,bQo,vQo,FQo,lb,TQo,to,HL,MQo,$_e,EQo,CQo,Da,wQo,k_e,AQo,LQo,S_e,yQo,xQo,R_e,$Qo,kQo,SQo,Io,ib,P_e,RQo,PQo,DX,BQo,NQo,IQo,db,B_e,qQo,jQo,GX,DQo,GQo,OQo,cb,N_e,VQo,XQo,OX,zQo,QQo,WQo,fb,I_e,HQo,UQo,VX,JQo,YQo,KQo,mb,q_e,ZQo,eWo,XX,oWo,rWo,tWo,gb,j_e,aWo,nWo,zX,sWo,lWo,iWo,hb,dWo,D_e,cWo,fWo,G_e,mWo,gWo,pb,WOe,sd,_b,O_e,UL,hWo,V_e,pWo,HOe,qo,JL,_Wo,ld,uWo,QX,bWo,vWo,WX,FWo,TWo,MWo,YL,EWo,X_e,CWo,wWo,AWo,gt,KL,LWo,z_e,yWo,xWo,id,$Wo,Q_e,kWo,SWo,HX,RWo,PWo,BWo,ub,NWo,ao,ZL,IWo,W_e,qWo,jWo,Ga,DWo,H_e,GWo,OWo,U_e,VWo,XWo,J_e,zWo,QWo,WWo,H,bb,Y_e,HWo,UWo,UX,JWo,YWo,KWo,vb,K_e,ZWo,eHo,JX,oHo,rHo,tHo,Fb,Z_e,aHo,nHo,YX,sHo,lHo,iHo,Tb,eue,dHo,cHo,KX,fHo,mHo,gHo,Mb,oue,hHo,pHo,ZX,_Ho,uHo,bHo,Eb,rue,vHo,FHo,ez,THo,MHo,EHo,Cb,tue,CHo,wHo,oz,AHo,LHo,yHo,wb,aue,xHo,$Ho,rz,kHo,SHo,RHo,Ab,nue,PHo,BHo,tz,NHo,IHo,qHo,Lb,sue,jHo,DHo,az,GHo,OHo,VHo,yb,lue,XHo,zHo,nz,QHo,WHo,HHo,xb,iue,UHo,JHo,sz,YHo,KHo,ZHo,$b,due,eUo,oUo,lz,rUo,tUo,aUo,kb,cue,nUo,sUo,iz,lUo,iUo,dUo,Sb,fue,cUo,fUo,dz,mUo,gUo,hUo,Rb,mue,pUo,_Uo,cz,uUo,bUo,vUo,Pb,gue,FUo,TUo,fz,MUo,EUo,CUo,Bb,hue,wUo,AUo,mz,LUo,yUo,xUo,Nb,pue,$Uo,kUo,gz,SUo,RUo,PUo,Ib,_ue,BUo,NUo,hz,IUo,qUo,jUo,qb,uue,DUo,GUo,pz,OUo,VUo,XUo,jb,bue,zUo,QUo,_z,WUo,HUo,UUo,Db,vue,JUo,YUo,uz,KUo,ZUo,eJo,Gb,Fue,oJo,rJo,bz,tJo,aJo,nJo,Ob,Tue,sJo,lJo,vz,iJo,dJo,cJo,Vb,Mue,fJo,mJo,Fz,gJo,hJo,pJo,Xb,Eue,_Jo,uJo,Tz,bJo,vJo,FJo,zb,Cue,TJo,MJo,Mz,EJo,CJo,wJo,Qb,wue,AJo,LJo,Ez,yJo,xJo,$Jo,Wb,Aue,kJo,SJo,Cz,RJo,PJo,BJo,Hb,Lue,NJo,IJo,wz,qJo,jJo,DJo,Ub,yue,GJo,OJo,Az,VJo,XJo,zJo,Jb,xue,QJo,WJo,Lz,HJo,UJo,JJo,Yb,$ue,YJo,KJo,yz,ZJo,eYo,oYo,Kb,kue,rYo,tYo,xz,aYo,nYo,sYo,Zb,Sue,lYo,iYo,$z,dYo,cYo,fYo,ev,mYo,Rue,gYo,hYo,Pue,pYo,_Yo,ov,UOe,dd,rv,Bue,ey,uYo,Nue,bYo,JOe,jo,oy,vYo,cd,FYo,kz,TYo,MYo,Sz,EYo,CYo,wYo,ry,AYo,Iue,LYo,yYo,xYo,ht,ty,$Yo,que,kYo,SYo,fd,RYo,jue,PYo,BYo,Rz,NYo,IYo,qYo,tv,jYo,no,ay,DYo,Due,GYo,OYo,Oa,VYo,Gue,XYo,zYo,Oue,QYo,WYo,Vue,HYo,UYo,JYo,V,av,Xue,YYo,KYo,Pz,ZYo,eKo,oKo,nv,zue,rKo,tKo,Bz,aKo,nKo,sKo,sv,Que,lKo,iKo,Nz,dKo,cKo,fKo,lv,Wue,mKo,gKo,Iz,hKo,pKo,_Ko,iv,Hue,uKo,bKo,qz,vKo,FKo,TKo,dv,Uue,MKo,EKo,jz,CKo,wKo,AKo,cv,Jue,LKo,yKo,Dz,xKo,$Ko,kKo,fv,Yue,SKo,RKo,Gz,PKo,BKo,NKo,mv,Kue,IKo,qKo,Oz,jKo,DKo,GKo,gv,Zue,OKo,VKo,Vz,XKo,zKo,QKo,hv,e1e,WKo,HKo,Xz,UKo,JKo,YKo,pv,o1e,KKo,ZKo,zz,eZo,oZo,rZo,_v,r1e,tZo,aZo,Qz,nZo,sZo,lZo,uv,t1e,iZo,dZo,Wz,cZo,fZo,mZo,bv,a1e,gZo,hZo,Hz,pZo,_Zo,uZo,vv,n1e,bZo,vZo,Uz,FZo,TZo,MZo,Fv,s1e,EZo,CZo,Jz,wZo,AZo,LZo,Tv,l1e,yZo,xZo,Yz,$Zo,kZo,SZo,Mv,i1e,RZo,PZo,Kz,BZo,NZo,IZo,Ev,d1e,qZo,jZo,Zz,DZo,GZo,OZo,Cv,c1e,VZo,XZo,eQ,zZo,QZo,WZo,wv,f1e,HZo,UZo,oQ,JZo,YZo,KZo,Av,m1e,ZZo,eer,rQ,oer,rer,ter,Lv,g1e,aer,ner,tQ,ser,ler,ier,yv,h1e,der,cer,aQ,fer,mer,ger,xv,p1e,her,per,nQ,_er,uer,ber,$v,_1e,ver,Fer,sQ,Ter,Mer,Eer,kv,u1e,Cer,wer,lQ,Aer,Ler,yer,Sv,b1e,xer,$er,iQ,ker,Ser,Rer,Rv,v1e,Per,Ber,dQ,Ner,Ier,qer,Pv,F1e,jer,Der,cQ,Ger,Oer,Ver,Bv,T1e,Xer,zer,fQ,Qer,Wer,Her,Nv,M1e,Uer,Jer,mQ,Yer,Ker,Zer,Iv,E1e,eor,oor,gQ,ror,tor,aor,qv,C1e,nor,sor,hQ,lor,ior,dor,jv,w1e,cor,mor,pQ,gor,hor,por,Dv,A1e,_or,uor,_Q,bor,vor,For,Gv,L1e,Tor,Mor,uQ,Eor,Cor,wor,Ov,y1e,Aor,Lor,bQ,yor,xor,$or,Vv,x1e,kor,Sor,vQ,Ror,Por,Bor,Xv,$1e,Nor,Ior,FQ,qor,jor,Dor,zv,Gor,k1e,Oor,Vor,S1e,Xor,zor,Qv,YOe,md,Wv,R1e,ny,Qor,P1e,Wor,KOe,Do,sy,Hor,gd,Uor,TQ,Jor,Yor,MQ,Kor,Zor,err,ly,orr,B1e,rrr,trr,arr,pt,iy,nrr,N1e,srr,lrr,hd,irr,I1e,drr,crr,EQ,frr,mrr,grr,Hv,hrr,so,dy,prr,q1e,_rr,urr,Va,brr,j1e,vrr,Frr,D1e,Trr,Mrr,G1e,Err,Crr,wrr,O1e,Uv,V1e,Arr,Lrr,CQ,yrr,xrr,$rr,Jv,krr,X1e,Srr,Rrr,z1e,Prr,Brr,Yv,ZOe,pd,Kv,Q1e,cy,Nrr,W1e,Irr,eVe,Go,fy,qrr,_d,jrr,wQ,Drr,Grr,AQ,Orr,Vrr,Xrr,my,zrr,H1e,Qrr,Wrr,Hrr,_t,gy,Urr,U1e,Jrr,Yrr,ud,Krr,J1e,Zrr,etr,LQ,otr,rtr,ttr,Zv,atr,lo,hy,ntr,Y1e,str,ltr,Xa,itr,K1e,dtr,ctr,Z1e,ftr,mtr,e7e,gtr,htr,ptr,ue,eF,o7e,_tr,utr,yQ,btr,vtr,Ftr,oF,r7e,Ttr,Mtr,xQ,Etr,Ctr,wtr,rF,t7e,Atr,Ltr,$Q,ytr,xtr,$tr,tF,a7e,ktr,Str,kQ,Rtr,Ptr,Btr,zs,n7e,Ntr,Itr,SQ,qtr,jtr,RQ,Dtr,Gtr,Otr,aF,s7e,Vtr,Xtr,PQ,ztr,Qtr,Wtr,Qs,l7e,Htr,Utr,BQ,Jtr,Ytr,NQ,Ktr,Ztr,ear,nF,i7e,oar,rar,IQ,tar,aar,nar,ut,d7e,sar,lar,qQ,iar,dar,jQ,car,far,DQ,mar,gar,har,sF,c7e,par,_ar,GQ,uar,bar,Far,lF,f7e,Tar,Mar,OQ,Ear,Car,war,iF,m7e,Aar,Lar,VQ,yar,xar,$ar,dF,g7e,kar,Sar,XQ,Rar,Par,Bar,cF,h7e,Nar,Iar,zQ,qar,jar,Dar,fF,p7e,Gar,Oar,QQ,Var,Xar,zar,mF,_7e,Qar,War,WQ,Har,Uar,Jar,gF,Yar,u7e,Kar,Zar,b7e,enr,onr,hF,oVe,bd,pF,v7e,py,rnr,F7e,tnr,rVe,Oo,_y,anr,vd,nnr,HQ,snr,lnr,UQ,inr,dnr,cnr,uy,fnr,T7e,mnr,gnr,hnr,bt,by,pnr,M7e,_nr,unr,Fd,bnr,E7e,vnr,Fnr,JQ,Tnr,Mnr,Enr,_F,Cnr,io,vy,wnr,C7e,Anr,Lnr,za,ynr,w7e,xnr,$nr,A7e,knr,Snr,L7e,Rnr,Pnr,Bnr,y7e,uF,x7e,Nnr,Inr,YQ,qnr,jnr,Dnr,bF,Gnr,$7e,Onr,Vnr,k7e,Xnr,znr,vF,tVe,Td,FF,S7e,Fy,Qnr,R7e,Wnr,aVe,Vo,Ty,Hnr,Md,Unr,KQ,Jnr,Ynr,ZQ,Knr,Znr,esr,My,osr,P7e,rsr,tsr,asr,vt,Ey,nsr,B7e,ssr,lsr,Ed,isr,N7e,dsr,csr,eW,fsr,msr,gsr,TF,hsr,co,Cy,psr,I7e,_sr,usr,Qa,bsr,q7e,vsr,Fsr,j7e,Tsr,Msr,D7e,Esr,Csr,wsr,G7e,MF,O7e,Asr,Lsr,oW,ysr,xsr,$sr,EF,ksr,V7e,Ssr,Rsr,X7e,Psr,Bsr,CF,nVe,Cd,wF,z7e,wy,Nsr,Q7e,Isr,sVe,Xo,Ay,qsr,wd,jsr,rW,Dsr,Gsr,tW,Osr,Vsr,Xsr,Ly,zsr,W7e,Qsr,Wsr,Hsr,Ft,yy,Usr,H7e,Jsr,Ysr,Ad,Ksr,U7e,Zsr,elr,aW,olr,rlr,tlr,AF,alr,fo,xy,nlr,J7e,slr,llr,Wa,ilr,Y7e,dlr,clr,K7e,flr,mlr,Z7e,glr,hlr,plr,Pe,LF,e9e,_lr,ulr,nW,blr,vlr,Flr,yF,o9e,Tlr,Mlr,sW,Elr,Clr,wlr,xF,r9e,Alr,Llr,lW,ylr,xlr,$lr,$F,t9e,klr,Slr,iW,Rlr,Plr,Blr,kF,a9e,Nlr,Ilr,dW,qlr,jlr,Dlr,SF,n9e,Glr,Olr,cW,Vlr,Xlr,zlr,RF,s9e,Qlr,Wlr,fW,Hlr,Ulr,Jlr,PF,l9e,Ylr,Klr,mW,Zlr,eir,oir,BF,i9e,rir,tir,gW,air,nir,sir,NF,lir,d9e,iir,dir,c9e,cir,fir,IF,lVe,Ld,qF,f9e,$y,mir,m9e,gir,iVe,zo,ky,hir,yd,pir,hW,_ir,uir,pW,bir,vir,Fir,Sy,Tir,g9e,Mir,Eir,Cir,Tt,Ry,wir,h9e,Air,Lir,xd,yir,p9e,xir,$ir,_W,kir,Sir,Rir,jF,Pir,mo,Py,Bir,_9e,Nir,Iir,Ha,qir,u9e,jir,Dir,b9e,Gir,Oir,v9e,Vir,Xir,zir,et,DF,F9e,Qir,Wir,uW,Hir,Uir,Jir,GF,T9e,Yir,Kir,bW,Zir,edr,odr,OF,M9e,rdr,tdr,vW,adr,ndr,sdr,VF,E9e,ldr,idr,FW,ddr,cdr,fdr,XF,C9e,mdr,gdr,TW,hdr,pdr,_dr,zF,udr,w9e,bdr,vdr,A9e,Fdr,Tdr,QF,dVe,$d,WF,L9e,By,Mdr,y9e,Edr,cVe,Qo,Ny,Cdr,kd,wdr,MW,Adr,Ldr,EW,ydr,xdr,$dr,Iy,kdr,x9e,Sdr,Rdr,Pdr,Mt,qy,Bdr,$9e,Ndr,Idr,Sd,qdr,k9e,jdr,Ddr,CW,Gdr,Odr,Vdr,HF,Xdr,go,jy,zdr,S9e,Qdr,Wdr,Ua,Hdr,R9e,Udr,Jdr,P9e,Ydr,Kdr,B9e,Zdr,ecr,ocr,Le,UF,N9e,rcr,tcr,wW,acr,ncr,scr,JF,I9e,lcr,icr,AW,dcr,ccr,fcr,YF,q9e,mcr,gcr,LW,hcr,pcr,_cr,KF,j9e,ucr,bcr,yW,vcr,Fcr,Tcr,ZF,D9e,Mcr,Ecr,xW,Ccr,wcr,Acr,eT,G9e,Lcr,ycr,$W,xcr,$cr,kcr,oT,O9e,Scr,Rcr,kW,Pcr,Bcr,Ncr,rT,V9e,Icr,qcr,SW,jcr,Dcr,Gcr,tT,X9e,Ocr,Vcr,RW,Xcr,zcr,Qcr,aT,z9e,Wcr,Hcr,PW,Ucr,Jcr,Ycr,nT,Kcr,Q9e,Zcr,efr,W9e,ofr,rfr,sT,fVe,Rd,lT,H9e,Dy,tfr,U9e,afr,mVe,Wo,Gy,nfr,Pd,sfr,BW,lfr,ifr,NW,dfr,cfr,ffr,Oy,mfr,J9e,gfr,hfr,pfr,Et,Vy,_fr,Y9e,ufr,bfr,Bd,vfr,K9e,Ffr,Tfr,IW,Mfr,Efr,Cfr,iT,wfr,ho,Xy,Afr,Z9e,Lfr,yfr,Ja,xfr,e2e,$fr,kfr,o2e,Sfr,Rfr,r2e,Pfr,Bfr,Nfr,zy,dT,t2e,Ifr,qfr,qW,jfr,Dfr,Gfr,cT,a2e,Ofr,Vfr,jW,Xfr,zfr,Qfr,fT,Wfr,n2e,Hfr,Ufr,s2e,Jfr,Yfr,mT,gVe,Nd,gT,l2e,Qy,Kfr,i2e,Zfr,hVe,Ho,Wy,emr,Id,omr,DW,rmr,tmr,GW,amr,nmr,smr,Hy,lmr,d2e,imr,dmr,cmr,Ct,Uy,fmr,c2e,mmr,gmr,qd,hmr,f2e,pmr,_mr,OW,umr,bmr,vmr,hT,Fmr,po,Jy,Tmr,m2e,Mmr,Emr,Ya,Cmr,g2e,wmr,Amr,h2e,Lmr,ymr,p2e,xmr,$mr,kmr,ot,pT,_2e,Smr,Rmr,VW,Pmr,Bmr,Nmr,_T,u2e,Imr,qmr,XW,jmr,Dmr,Gmr,uT,b2e,Omr,Vmr,zW,Xmr,zmr,Qmr,bT,v2e,Wmr,Hmr,QW,Umr,Jmr,Ymr,vT,F2e,Kmr,Zmr,WW,egr,ogr,rgr,FT,tgr,T2e,agr,ngr,M2e,sgr,lgr,TT,pVe,jd,MT,E2e,Yy,igr,C2e,dgr,_Ve,Uo,Ky,cgr,Dd,fgr,HW,mgr,ggr,UW,hgr,pgr,_gr,Zy,ugr,w2e,bgr,vgr,Fgr,wt,e8,Tgr,A2e,Mgr,Egr,Gd,Cgr,L2e,wgr,Agr,JW,Lgr,ygr,xgr,ET,$gr,_o,o8,kgr,y2e,Sgr,Rgr,Ka,Pgr,x2e,Bgr,Ngr,$2e,Igr,qgr,k2e,jgr,Dgr,Ggr,Od,CT,S2e,Ogr,Vgr,YW,Xgr,zgr,Qgr,wT,R2e,Wgr,Hgr,KW,Ugr,Jgr,Ygr,AT,P2e,Kgr,Zgr,ZW,ehr,ohr,rhr,LT,thr,B2e,ahr,nhr,N2e,shr,lhr,yT,uVe,Vd,xT,I2e,r8,ihr,q2e,dhr,bVe,Jo,t8,chr,Xd,fhr,eH,mhr,ghr,oH,hhr,phr,_hr,a8,uhr,j2e,bhr,vhr,Fhr,At,n8,Thr,D2e,Mhr,Ehr,zd,Chr,G2e,whr,Ahr,rH,Lhr,yhr,xhr,$T,$hr,uo,s8,khr,O2e,Shr,Rhr,Za,Phr,V2e,Bhr,Nhr,X2e,Ihr,qhr,z2e,jhr,Dhr,Ghr,l8,kT,Q2e,Ohr,Vhr,tH,Xhr,zhr,Qhr,ST,W2e,Whr,Hhr,aH,Uhr,Jhr,Yhr,RT,Khr,H2e,Zhr,epr,U2e,opr,rpr,PT,vVe,Qd,BT,J2e,i8,tpr,Y2e,apr,FVe,Yo,d8,npr,Wd,spr,nH,lpr,ipr,sH,dpr,cpr,fpr,c8,mpr,K2e,gpr,hpr,ppr,Lt,f8,_pr,Z2e,upr,bpr,Hd,vpr,ebe,Fpr,Tpr,lH,Mpr,Epr,Cpr,NT,wpr,bo,m8,Apr,obe,Lpr,ypr,en,xpr,rbe,$pr,kpr,tbe,Spr,Rpr,abe,Ppr,Bpr,Npr,nbe,IT,sbe,Ipr,qpr,iH,jpr,Dpr,Gpr,qT,Opr,lbe,Vpr,Xpr,ibe,zpr,Qpr,jT,TVe,Ud,DT,dbe,g8,Wpr,cbe,Hpr,MVe,Ko,h8,Upr,Jd,Jpr,dH,Ypr,Kpr,cH,Zpr,e_r,o_r,p8,r_r,fbe,t_r,a_r,n_r,yt,_8,s_r,mbe,l_r,i_r,Yd,d_r,gbe,c_r,f_r,fH,m_r,g_r,h_r,GT,p_r,vo,u8,__r,hbe,u_r,b_r,on,v_r,pbe,F_r,T_r,_be,M_r,E_r,ube,C_r,w_r,A_r,rn,OT,bbe,L_r,y_r,mH,x_r,$_r,k_r,VT,vbe,S_r,R_r,gH,P_r,B_r,N_r,XT,Fbe,I_r,q_r,hH,j_r,D_r,G_r,zT,Tbe,O_r,V_r,pH,X_r,z_r,Q_r,QT,W_r,Mbe,H_r,U_r,Ebe,J_r,Y_r,WT,EVe,Kd,HT,Cbe,b8,K_r,wbe,Z_r,CVe,Zo,v8,eur,Zd,our,_H,rur,tur,uH,aur,nur,sur,F8,lur,Abe,iur,dur,cur,xt,T8,fur,Lbe,mur,gur,ec,hur,ybe,pur,_ur,bH,uur,bur,vur,UT,Fur,Fo,M8,Tur,xbe,Mur,Eur,tn,Cur,$be,wur,Aur,kbe,Lur,yur,Sbe,xur,$ur,kur,Rbe,JT,Pbe,Sur,Rur,vH,Pur,Bur,Nur,YT,Iur,Bbe,qur,jur,Nbe,Dur,Gur,KT,wVe,oc,ZT,Ibe,E8,Our,qbe,Vur,AVe,er,C8,Xur,rc,zur,FH,Qur,Wur,TH,Hur,Uur,Jur,w8,Yur,jbe,Kur,Zur,e1r,$t,A8,o1r,Dbe,r1r,t1r,tc,a1r,Gbe,n1r,s1r,MH,l1r,i1r,d1r,eM,c1r,yr,L8,f1r,Obe,m1r,g1r,an,h1r,Vbe,p1r,_1r,Xbe,u1r,b1r,zbe,v1r,F1r,T1r,j,oM,Qbe,M1r,E1r,EH,C1r,w1r,A1r,rM,Wbe,L1r,y1r,CH,x1r,$1r,k1r,tM,Hbe,S1r,R1r,wH,P1r,B1r,N1r,aM,Ube,I1r,q1r,AH,j1r,D1r,G1r,nM,Jbe,O1r,V1r,LH,X1r,z1r,Q1r,sM,Ybe,W1r,H1r,yH,U1r,J1r,Y1r,lM,Kbe,K1r,Z1r,xH,e7r,o7r,r7r,iM,Zbe,t7r,a7r,$H,n7r,s7r,l7r,dM,eve,i7r,d7r,kH,c7r,f7r,m7r,cM,ove,g7r,h7r,SH,p7r,_7r,u7r,fM,rve,b7r,v7r,RH,F7r,T7r,M7r,mM,tve,E7r,C7r,PH,w7r,A7r,L7r,gM,ave,y7r,x7r,BH,$7r,k7r,S7r,hM,nve,R7r,P7r,NH,B7r,N7r,I7r,pM,sve,q7r,j7r,IH,D7r,G7r,O7r,_M,lve,V7r,X7r,qH,z7r,Q7r,W7r,uM,ive,H7r,U7r,jH,J7r,Y7r,K7r,Ws,dve,Z7r,e9r,DH,o9r,r9r,GH,t9r,a9r,n9r,bM,cve,s9r,l9r,OH,i9r,d9r,c9r,vM,fve,f9r,m9r,VH,g9r,h9r,p9r,FM,mve,_9r,u9r,XH,b9r,v9r,F9r,TM,gve,T9r,M9r,zH,E9r,C9r,w9r,MM,hve,A9r,L9r,QH,y9r,x9r,$9r,EM,pve,k9r,S9r,WH,R9r,P9r,B9r,CM,_ve,N9r,I9r,HH,q9r,j9r,D9r,wM,uve,G9r,O9r,UH,V9r,X9r,z9r,AM,bve,Q9r,W9r,JH,H9r,U9r,J9r,LM,vve,Y9r,K9r,YH,Z9r,e2r,o2r,yM,Fve,r2r,t2r,KH,a2r,n2r,s2r,xM,Tve,l2r,i2r,ZH,d2r,c2r,f2r,$M,Mve,m2r,g2r,eU,h2r,p2r,_2r,kM,Eve,u2r,b2r,oU,v2r,F2r,T2r,SM,Cve,M2r,E2r,rU,C2r,w2r,A2r,RM,wve,L2r,y2r,tU,x2r,$2r,k2r,PM,Ave,S2r,R2r,aU,P2r,B2r,N2r,BM,Lve,I2r,q2r,nU,j2r,D2r,G2r,NM,yve,O2r,V2r,sU,X2r,z2r,Q2r,IM,xve,W2r,H2r,lU,U2r,J2r,Y2r,qM,$ve,K2r,Z2r,iU,ebr,obr,rbr,jM,kve,tbr,abr,dU,nbr,sbr,lbr,DM,Sve,ibr,dbr,cU,cbr,fbr,mbr,GM,Rve,gbr,hbr,fU,pbr,_br,ubr,OM,Pve,bbr,vbr,mU,Fbr,Tbr,Mbr,VM,Bve,Ebr,Cbr,gU,wbr,Abr,Lbr,XM,Nve,ybr,xbr,hU,$br,kbr,Sbr,zM,Ive,Rbr,Pbr,pU,Bbr,Nbr,Ibr,QM,qve,qbr,jbr,_U,Dbr,Gbr,Obr,WM,LVe,ac,HM,jve,y8,Vbr,Dve,Xbr,yVe,or,x8,zbr,nc,Qbr,uU,Wbr,Hbr,bU,Ubr,Jbr,Ybr,$8,Kbr,Gve,Zbr,evr,ovr,kt,k8,rvr,Ove,tvr,avr,sc,nvr,Vve,svr,lvr,vU,ivr,dvr,cvr,UM,fvr,xr,S8,mvr,Xve,gvr,hvr,nn,pvr,zve,_vr,uvr,Qve,bvr,vvr,Wve,Fvr,Tvr,Mvr,se,JM,Hve,Evr,Cvr,FU,wvr,Avr,Lvr,YM,Uve,yvr,xvr,TU,$vr,kvr,Svr,KM,Jve,Rvr,Pvr,MU,Bvr,Nvr,Ivr,ZM,Yve,qvr,jvr,EU,Dvr,Gvr,Ovr,eE,Kve,Vvr,Xvr,CU,zvr,Qvr,Wvr,oE,Zve,Hvr,Uvr,wU,Jvr,Yvr,Kvr,rE,eFe,Zvr,eFr,AU,oFr,rFr,tFr,tE,oFe,aFr,nFr,LU,sFr,lFr,iFr,aE,rFe,dFr,cFr,yU,fFr,mFr,gFr,nE,tFe,hFr,pFr,xU,_Fr,uFr,bFr,sE,aFe,vFr,FFr,$U,TFr,MFr,EFr,lE,nFe,CFr,wFr,kU,AFr,LFr,yFr,iE,sFe,xFr,$Fr,SU,kFr,SFr,RFr,dE,lFe,PFr,BFr,RU,NFr,IFr,qFr,cE,iFe,jFr,DFr,PU,GFr,OFr,VFr,fE,dFe,XFr,zFr,BU,QFr,WFr,HFr,mE,cFe,UFr,JFr,NU,YFr,KFr,ZFr,gE,fFe,eTr,oTr,IU,rTr,tTr,aTr,hE,mFe,nTr,sTr,qU,lTr,iTr,dTr,pE,gFe,cTr,fTr,jU,mTr,gTr,hTr,_E,hFe,pTr,_Tr,DU,uTr,bTr,vTr,uE,pFe,FTr,TTr,GU,MTr,ETr,CTr,bE,_Fe,wTr,ATr,OU,LTr,yTr,xTr,vE,xVe,lc,FE,uFe,R8,$Tr,bFe,kTr,$Ve,rr,P8,STr,ic,RTr,VU,PTr,BTr,XU,NTr,ITr,qTr,B8,jTr,vFe,DTr,GTr,OTr,St,N8,VTr,FFe,XTr,zTr,dc,QTr,TFe,WTr,HTr,zU,UTr,JTr,YTr,TE,KTr,$r,I8,ZTr,MFe,eMr,oMr,sn,rMr,EFe,tMr,aMr,CFe,nMr,sMr,wFe,lMr,iMr,dMr,Me,ME,AFe,cMr,fMr,QU,mMr,gMr,hMr,EE,LFe,pMr,_Mr,WU,uMr,bMr,vMr,CE,yFe,FMr,TMr,HU,MMr,EMr,CMr,wE,xFe,wMr,AMr,UU,LMr,yMr,xMr,AE,$Fe,$Mr,kMr,JU,SMr,RMr,PMr,LE,kFe,BMr,NMr,YU,IMr,qMr,jMr,yE,SFe,DMr,GMr,KU,OMr,VMr,XMr,xE,RFe,zMr,QMr,ZU,WMr,HMr,UMr,$E,PFe,JMr,YMr,eJ,KMr,ZMr,eEr,kE,BFe,oEr,rEr,oJ,tEr,aEr,nEr,SE,NFe,sEr,lEr,rJ,iEr,dEr,cEr,RE,IFe,fEr,mEr,tJ,gEr,hEr,pEr,PE,qFe,_Er,uEr,aJ,bEr,vEr,FEr,BE,kVe,cc,NE,jFe,q8,TEr,DFe,MEr,SVe,tr,j8,EEr,fc,CEr,nJ,wEr,AEr,sJ,LEr,yEr,xEr,D8,$Er,GFe,kEr,SEr,REr,Rt,G8,PEr,OFe,BEr,NEr,mc,IEr,VFe,qEr,jEr,lJ,DEr,GEr,OEr,IE,VEr,kr,O8,XEr,XFe,zEr,QEr,ln,WEr,zFe,HEr,UEr,QFe,JEr,YEr,WFe,KEr,ZEr,e4r,dn,qE,HFe,o4r,r4r,iJ,t4r,a4r,n4r,jE,UFe,s4r,l4r,dJ,i4r,d4r,c4r,DE,JFe,f4r,m4r,cJ,g4r,h4r,p4r,GE,YFe,_4r,u4r,fJ,b4r,v4r,F4r,OE,RVe,gc,VE,KFe,V8,T4r,ZFe,M4r,PVe,ar,X8,E4r,hc,C4r,mJ,w4r,A4r,gJ,L4r,y4r,x4r,z8,$4r,eTe,k4r,S4r,R4r,Pt,Q8,P4r,oTe,B4r,N4r,pc,I4r,rTe,q4r,j4r,hJ,D4r,G4r,O4r,XE,V4r,Sr,W8,X4r,tTe,z4r,Q4r,cn,W4r,aTe,H4r,U4r,nTe,J4r,Y4r,sTe,K4r,Z4r,eCr,ie,zE,lTe,oCr,rCr,pJ,tCr,aCr,nCr,QE,iTe,sCr,lCr,_J,iCr,dCr,cCr,WE,dTe,fCr,mCr,uJ,gCr,hCr,pCr,HE,cTe,_Cr,uCr,bJ,bCr,vCr,FCr,UE,fTe,TCr,MCr,vJ,ECr,CCr,wCr,JE,mTe,ACr,LCr,FJ,yCr,xCr,$Cr,YE,gTe,kCr,SCr,TJ,RCr,PCr,BCr,KE,hTe,NCr,ICr,MJ,qCr,jCr,DCr,ZE,pTe,GCr,OCr,EJ,VCr,XCr,zCr,e4,_Te,QCr,WCr,CJ,HCr,UCr,JCr,o4,uTe,YCr,KCr,wJ,ZCr,e5r,o5r,r4,bTe,r5r,t5r,AJ,a5r,n5r,s5r,t4,vTe,l5r,i5r,LJ,d5r,c5r,f5r,a4,FTe,m5r,g5r,yJ,h5r,p5r,_5r,n4,TTe,u5r,b5r,xJ,v5r,F5r,T5r,s4,MTe,M5r,E5r,$J,C5r,w5r,A5r,l4,ETe,L5r,y5r,kJ,x5r,$5r,k5r,i4,CTe,S5r,R5r,SJ,P5r,B5r,N5r,d4,wTe,I5r,q5r,RJ,j5r,D5r,G5r,c4,ATe,O5r,V5r,PJ,X5r,z5r,Q5r,f4,BVe,_c,m4,LTe,H8,W5r,yTe,H5r,NVe,nr,U8,U5r,uc,J5r,BJ,Y5r,K5r,NJ,Z5r,e3r,o3r,J8,r3r,xTe,t3r,a3r,n3r,Bt,Y8,s3r,$Te,l3r,i3r,bc,d3r,kTe,c3r,f3r,IJ,m3r,g3r,h3r,g4,p3r,Rr,K8,_3r,STe,u3r,b3r,fn,v3r,RTe,F3r,T3r,PTe,M3r,E3r,BTe,C3r,w3r,A3r,ye,h4,NTe,L3r,y3r,qJ,x3r,$3r,k3r,p4,ITe,S3r,R3r,jJ,P3r,B3r,N3r,_4,qTe,I3r,q3r,DJ,j3r,D3r,G3r,u4,jTe,O3r,V3r,GJ,X3r,z3r,Q3r,b4,DTe,W3r,H3r,OJ,U3r,J3r,Y3r,v4,GTe,K3r,Z3r,VJ,e0r,o0r,r0r,F4,OTe,t0r,a0r,XJ,n0r,s0r,l0r,T4,VTe,i0r,d0r,zJ,c0r,f0r,m0r,M4,XTe,g0r,h0r,QJ,p0r,_0r,u0r,E4,zTe,b0r,v0r,WJ,F0r,T0r,M0r,C4,IVe,vc,w4,QTe,Z8,E0r,WTe,C0r,qVe,sr,ex,w0r,Fc,A0r,HJ,L0r,y0r,UJ,x0r,$0r,k0r,ox,S0r,HTe,R0r,P0r,B0r,Nt,rx,N0r,UTe,I0r,q0r,Tc,j0r,JTe,D0r,G0r,JJ,O0r,V0r,X0r,A4,z0r,Pr,tx,Q0r,YTe,W0r,H0r,mn,U0r,KTe,J0r,Y0r,ZTe,K0r,Z0r,eMe,ewr,owr,rwr,te,L4,oMe,twr,awr,YJ,nwr,swr,lwr,y4,rMe,iwr,dwr,KJ,cwr,fwr,mwr,x4,tMe,gwr,hwr,ZJ,pwr,_wr,uwr,$4,aMe,bwr,vwr,eY,Fwr,Twr,Mwr,k4,nMe,Ewr,Cwr,oY,wwr,Awr,Lwr,S4,sMe,ywr,xwr,rY,$wr,kwr,Swr,R4,lMe,Rwr,Pwr,tY,Bwr,Nwr,Iwr,P4,iMe,qwr,jwr,aY,Dwr,Gwr,Owr,B4,dMe,Vwr,Xwr,nY,zwr,Qwr,Wwr,N4,cMe,Hwr,Uwr,sY,Jwr,Ywr,Kwr,I4,fMe,Zwr,eAr,lY,oAr,rAr,tAr,q4,mMe,aAr,nAr,iY,sAr,lAr,iAr,j4,gMe,dAr,cAr,dY,fAr,mAr,gAr,D4,hMe,hAr,pAr,cY,_Ar,uAr,bAr,G4,pMe,vAr,FAr,fY,TAr,MAr,EAr,O4,_Me,CAr,wAr,mY,AAr,LAr,yAr,V4,uMe,xAr,$Ar,gY,kAr,SAr,RAr,X4,bMe,PAr,BAr,hY,NAr,IAr,qAr,z4,vMe,jAr,DAr,pY,GAr,OAr,VAr,Q4,FMe,XAr,zAr,_Y,QAr,WAr,HAr,W4,TMe,UAr,JAr,uY,YAr,KAr,ZAr,H4,MMe,e6r,o6r,bY,r6r,t6r,a6r,U4,EMe,n6r,s6r,vY,l6r,i6r,d6r,J4,CMe,c6r,f6r,FY,m6r,g6r,h6r,Y4,wMe,p6r,_6r,TY,u6r,b6r,v6r,K4,AMe,F6r,T6r,MY,M6r,E6r,C6r,Z4,jVe,Mc,eC,LMe,ax,w6r,yMe,A6r,DVe,lr,nx,L6r,Ec,y6r,EY,x6r,$6r,CY,k6r,S6r,R6r,sx,P6r,xMe,B6r,N6r,I6r,It,lx,q6r,$Me,j6r,D6r,Cc,G6r,kMe,O6r,V6r,wY,X6r,z6r,Q6r,oC,W6r,Br,ix,H6r,SMe,U6r,J6r,gn,Y6r,RMe,K6r,Z6r,PMe,eLr,oLr,BMe,rLr,tLr,aLr,_e,rC,NMe,nLr,sLr,AY,lLr,iLr,dLr,tC,IMe,cLr,fLr,LY,mLr,gLr,hLr,aC,qMe,pLr,_Lr,yY,uLr,bLr,vLr,nC,jMe,FLr,TLr,xY,MLr,ELr,CLr,sC,DMe,wLr,ALr,$Y,LLr,yLr,xLr,lC,GMe,$Lr,kLr,kY,SLr,RLr,PLr,iC,OMe,BLr,NLr,SY,ILr,qLr,jLr,dC,VMe,DLr,GLr,RY,OLr,VLr,XLr,cC,XMe,zLr,QLr,PY,WLr,HLr,ULr,fC,zMe,JLr,YLr,BY,KLr,ZLr,eyr,mC,QMe,oyr,ryr,NY,tyr,ayr,nyr,gC,WMe,syr,lyr,IY,iyr,dyr,cyr,hC,HMe,fyr,myr,qY,gyr,hyr,pyr,pC,UMe,_yr,uyr,jY,byr,vyr,Fyr,_C,JMe,Tyr,Myr,DY,Eyr,Cyr,wyr,uC,YMe,Ayr,Lyr,GY,yyr,xyr,$yr,bC,KMe,kyr,Syr,OY,Ryr,Pyr,Byr,vC,GVe,wc,FC,ZMe,dx,Nyr,eEe,Iyr,OVe,ir,cx,qyr,Ac,jyr,VY,Dyr,Gyr,XY,Oyr,Vyr,Xyr,fx,zyr,oEe,Qyr,Wyr,Hyr,qt,mx,Uyr,rEe,Jyr,Yyr,Lc,Kyr,tEe,Zyr,e8r,zY,o8r,r8r,t8r,TC,a8r,Nr,gx,n8r,aEe,s8r,l8r,hn,i8r,nEe,d8r,c8r,sEe,f8r,m8r,lEe,g8r,h8r,p8r,hx,MC,iEe,_8r,u8r,QY,b8r,v8r,F8r,EC,dEe,T8r,M8r,WY,E8r,C8r,w8r,CC,VVe,yc,wC,cEe,px,A8r,fEe,L8r,XVe,dr,_x,y8r,xc,x8r,HY,$8r,k8r,UY,S8r,R8r,P8r,ux,B8r,mEe,N8r,I8r,q8r,jt,bx,j8r,gEe,D8r,G8r,$c,O8r,hEe,V8r,X8r,JY,z8r,Q8r,W8r,AC,H8r,Ir,vx,U8r,pEe,J8r,Y8r,pn,K8r,_Ee,Z8r,exr,uEe,oxr,rxr,bEe,txr,axr,nxr,vEe,LC,FEe,sxr,lxr,YY,ixr,dxr,cxr,yC,zVe,kc,xC,TEe,Fx,fxr,MEe,mxr,QVe,cr,Tx,gxr,Sc,hxr,KY,pxr,_xr,ZY,uxr,bxr,vxr,Mx,Fxr,EEe,Txr,Mxr,Exr,Dt,Ex,Cxr,CEe,wxr,Axr,Rc,Lxr,wEe,yxr,xxr,eK,$xr,kxr,Sxr,$C,Rxr,qr,Cx,Pxr,AEe,Bxr,Nxr,_n,Ixr,LEe,qxr,jxr,yEe,Dxr,Gxr,xEe,Oxr,Vxr,Xxr,de,kC,$Ee,zxr,Qxr,oK,Wxr,Hxr,Uxr,SC,kEe,Jxr,Yxr,rK,Kxr,Zxr,e$r,RC,SEe,o$r,r$r,tK,t$r,a$r,n$r,PC,REe,s$r,l$r,aK,i$r,d$r,c$r,BC,PEe,f$r,m$r,nK,g$r,h$r,p$r,NC,BEe,_$r,u$r,sK,b$r,v$r,F$r,IC,NEe,T$r,M$r,lK,E$r,C$r,w$r,qC,IEe,A$r,L$r,iK,y$r,x$r,$$r,jC,qEe,k$r,S$r,dK,R$r,P$r,B$r,DC,jEe,N$r,I$r,cK,q$r,j$r,D$r,GC,DEe,G$r,O$r,fK,V$r,X$r,z$r,OC,GEe,Q$r,W$r,mK,H$r,U$r,J$r,VC,OEe,Y$r,K$r,gK,Z$r,ekr,okr,XC,VEe,rkr,tkr,hK,akr,nkr,skr,zC,XEe,lkr,ikr,pK,dkr,ckr,fkr,QC,zEe,mkr,gkr,_K,hkr,pkr,_kr,WC,QEe,ukr,bkr,uK,vkr,Fkr,Tkr,HC,WEe,Mkr,Ekr,bK,Ckr,wkr,Akr,UC,HEe,Lkr,ykr,vK,xkr,$kr,kkr,JC,UEe,Skr,Rkr,FK,Pkr,Bkr,Nkr,YC,WVe,Pc,KC,JEe,wx,Ikr,YEe,qkr,HVe,fr,Ax,jkr,Bc,Dkr,TK,Gkr,Okr,MK,Vkr,Xkr,zkr,Lx,Qkr,KEe,Wkr,Hkr,Ukr,Gt,yx,Jkr,ZEe,Ykr,Kkr,Nc,Zkr,e4e,eSr,oSr,EK,rSr,tSr,aSr,ZC,nSr,jr,xx,sSr,o4e,lSr,iSr,un,dSr,r4e,cSr,fSr,t4e,mSr,gSr,a4e,hSr,pSr,_Sr,ce,e5,n4e,uSr,bSr,CK,vSr,FSr,TSr,o5,s4e,MSr,ESr,wK,CSr,wSr,ASr,r5,l4e,LSr,ySr,AK,xSr,$Sr,kSr,t5,i4e,SSr,RSr,LK,PSr,BSr,NSr,a5,d4e,ISr,qSr,yK,jSr,DSr,GSr,n5,c4e,OSr,VSr,xK,XSr,zSr,QSr,s5,f4e,WSr,HSr,$K,USr,JSr,YSr,l5,m4e,KSr,ZSr,kK,eRr,oRr,rRr,i5,g4e,tRr,aRr,SK,nRr,sRr,lRr,d5,h4e,iRr,dRr,RK,cRr,fRr,mRr,c5,p4e,gRr,hRr,PK,pRr,_Rr,uRr,f5,_4e,bRr,vRr,BK,FRr,TRr,MRr,m5,u4e,ERr,CRr,NK,wRr,ARr,LRr,g5,b4e,yRr,xRr,IK,$Rr,kRr,SRr,h5,v4e,RRr,PRr,qK,BRr,NRr,IRr,p5,F4e,qRr,jRr,jK,DRr,GRr,ORr,_5,T4e,VRr,XRr,DK,zRr,QRr,WRr,u5,M4e,HRr,URr,GK,JRr,YRr,KRr,b5,E4e,ZRr,ePr,OK,oPr,rPr,tPr,v5,C4e,aPr,nPr,VK,sPr,lPr,iPr,F5,UVe,Ic,T5,w4e,$x,dPr,A4e,cPr,JVe,mr,kx,fPr,qc,mPr,XK,gPr,hPr,zK,pPr,_Pr,uPr,Sx,bPr,L4e,vPr,FPr,TPr,Ot,Rx,MPr,y4e,EPr,CPr,jc,wPr,x4e,APr,LPr,QK,yPr,xPr,$Pr,M5,kPr,Dr,Px,SPr,$4e,RPr,PPr,bn,BPr,k4e,NPr,IPr,S4e,qPr,jPr,R4e,DPr,GPr,OPr,P4e,E5,B4e,VPr,XPr,WK,zPr,QPr,WPr,C5,YVe,Dc,w5,N4e,Bx,HPr,I4e,UPr,KVe,gr,Nx,JPr,Gc,YPr,HK,KPr,ZPr,UK,eBr,oBr,rBr,Ix,tBr,q4e,aBr,nBr,sBr,Vt,qx,lBr,j4e,iBr,dBr,Oc,cBr,D4e,fBr,mBr,JK,gBr,hBr,pBr,A5,_Br,Gr,jx,uBr,G4e,bBr,vBr,vn,FBr,O4e,TBr,MBr,V4e,EBr,CBr,X4e,wBr,ABr,LBr,z4e,L5,Q4e,yBr,xBr,YK,$Br,kBr,SBr,y5,ZVe,Vc,x5,W4e,Dx,RBr,H4e,PBr,eXe,hr,Gx,BBr,Xc,NBr,KK,IBr,qBr,ZK,jBr,DBr,GBr,Ox,OBr,U4e,VBr,XBr,zBr,Xt,Vx,QBr,J4e,WBr,HBr,zc,UBr,Y4e,JBr,YBr,eZ,KBr,ZBr,eNr,$5,oNr,Or,Xx,rNr,K4e,tNr,aNr,Fn,nNr,Z4e,sNr,lNr,eCe,iNr,dNr,oCe,cNr,fNr,mNr,oe,k5,rCe,gNr,hNr,oZ,pNr,_Nr,uNr,S5,tCe,bNr,vNr,rZ,FNr,TNr,MNr,R5,aCe,ENr,CNr,tZ,wNr,ANr,LNr,P5,nCe,yNr,xNr,aZ,$Nr,kNr,SNr,B5,sCe,RNr,PNr,nZ,BNr,NNr,INr,N5,lCe,qNr,jNr,sZ,DNr,GNr,ONr,I5,iCe,VNr,XNr,lZ,zNr,QNr,WNr,q5,dCe,HNr,UNr,iZ,JNr,YNr,KNr,j5,cCe,ZNr,eIr,dZ,oIr,rIr,tIr,D5,fCe,aIr,nIr,cZ,sIr,lIr,iIr,G5,mCe,dIr,cIr,fZ,fIr,mIr,gIr,O5,gCe,hIr,pIr,mZ,_Ir,uIr,bIr,V5,hCe,vIr,FIr,gZ,TIr,MIr,EIr,X5,pCe,CIr,wIr,hZ,AIr,LIr,yIr,z5,_Ce,xIr,$Ir,pZ,kIr,SIr,RIr,Q5,uCe,PIr,BIr,_Z,NIr,IIr,qIr,W5,bCe,jIr,DIr,uZ,GIr,OIr,VIr,H5,vCe,XIr,zIr,bZ,QIr,WIr,HIr,U5,FCe,UIr,JIr,vZ,YIr,KIr,ZIr,J5,TCe,eqr,oqr,FZ,rqr,tqr,aqr,Y5,MCe,nqr,sqr,TZ,lqr,iqr,dqr,K5,ECe,cqr,fqr,MZ,mqr,gqr,hqr,Z5,CCe,pqr,_qr,EZ,uqr,bqr,vqr,e3,wCe,Fqr,Tqr,CZ,Mqr,Eqr,Cqr,o3,ACe,wqr,Aqr,wZ,Lqr,yqr,xqr,r3,LCe,$qr,kqr,AZ,Sqr,Rqr,Pqr,t3,yCe,Bqr,Nqr,LZ,Iqr,qqr,jqr,a3,oXe,Qc,n3,xCe,zx,Dqr,$Ce,Gqr,rXe,pr,Qx,Oqr,Wc,Vqr,yZ,Xqr,zqr,xZ,Qqr,Wqr,Hqr,Wx,Uqr,kCe,Jqr,Yqr,Kqr,zt,Hx,Zqr,SCe,ejr,ojr,Hc,rjr,RCe,tjr,ajr,$Z,njr,sjr,ljr,s3,ijr,Vr,Ux,djr,PCe,cjr,fjr,Tn,mjr,BCe,gjr,hjr,NCe,pjr,_jr,ICe,ujr,bjr,vjr,xe,l3,qCe,Fjr,Tjr,kZ,Mjr,Ejr,Cjr,i3,jCe,wjr,Ajr,SZ,Ljr,yjr,xjr,d3,DCe,$jr,kjr,RZ,Sjr,Rjr,Pjr,c3,GCe,Bjr,Njr,PZ,Ijr,qjr,jjr,f3,OCe,Djr,Gjr,BZ,Ojr,Vjr,Xjr,m3,VCe,zjr,Qjr,NZ,Wjr,Hjr,Ujr,g3,XCe,Jjr,Yjr,IZ,Kjr,Zjr,eDr,h3,zCe,oDr,rDr,qZ,tDr,aDr,nDr,p3,QCe,sDr,lDr,jZ,iDr,dDr,cDr,_3,WCe,fDr,mDr,DZ,gDr,hDr,pDr,u3,tXe,Uc,b3,HCe,Jx,_Dr,UCe,uDr,aXe,_r,Yx,bDr,Jc,vDr,GZ,FDr,TDr,OZ,MDr,EDr,CDr,Kx,wDr,JCe,ADr,LDr,yDr,Qt,Zx,xDr,YCe,$Dr,kDr,Yc,SDr,KCe,RDr,PDr,VZ,BDr,NDr,IDr,v3,qDr,Xr,e$,jDr,ZCe,DDr,GDr,Mn,ODr,e5e,VDr,XDr,o5e,zDr,QDr,r5e,WDr,HDr,UDr,Ee,F3,t5e,JDr,YDr,XZ,KDr,ZDr,eGr,T3,a5e,oGr,rGr,zZ,tGr,aGr,nGr,M3,n5e,sGr,lGr,QZ,iGr,dGr,cGr,E3,s5e,fGr,mGr,WZ,gGr,hGr,pGr,C3,l5e,_Gr,uGr,HZ,bGr,vGr,FGr,w3,i5e,TGr,MGr,UZ,EGr,CGr,wGr,A3,d5e,AGr,LGr,JZ,yGr,xGr,$Gr,L3,c5e,kGr,SGr,YZ,RGr,PGr,BGr,y3,f5e,NGr,IGr,KZ,qGr,jGr,DGr,x3,m5e,GGr,OGr,ZZ,VGr,XGr,zGr,$3,g5e,QGr,WGr,eee,HGr,UGr,JGr,k3,h5e,YGr,KGr,oee,ZGr,eOr,oOr,S3,p5e,rOr,tOr,ree,aOr,nOr,sOr,R3,nXe,Kc,P3,_5e,o$,lOr,u5e,iOr,sXe,ur,r$,dOr,Zc,cOr,tee,fOr,mOr,aee,gOr,hOr,pOr,t$,_Or,b5e,uOr,bOr,vOr,Wt,a$,FOr,v5e,TOr,MOr,ef,EOr,F5e,COr,wOr,nee,AOr,LOr,yOr,B3,xOr,zr,n$,$Or,T5e,kOr,SOr,En,ROr,M5e,POr,BOr,E5e,NOr,IOr,C5e,qOr,jOr,DOr,$e,N3,w5e,GOr,OOr,see,VOr,XOr,zOr,I3,A5e,QOr,WOr,lee,HOr,UOr,JOr,q3,L5e,YOr,KOr,iee,ZOr,eVr,oVr,j3,y5e,rVr,tVr,dee,aVr,nVr,sVr,D3,x5e,lVr,iVr,cee,dVr,cVr,fVr,G3,$5e,mVr,gVr,fee,hVr,pVr,_Vr,O3,k5e,uVr,bVr,mee,vVr,FVr,TVr,V3,S5e,MVr,EVr,gee,CVr,wVr,AVr,X3,R5e,LVr,yVr,hee,xVr,$Vr,kVr,z3,P5e,SVr,RVr,pee,PVr,BVr,NVr,Q3,lXe,of,W3,B5e,s$,IVr,N5e,qVr,iXe,br,l$,jVr,rf,DVr,_ee,GVr,OVr,uee,VVr,XVr,zVr,i$,QVr,I5e,WVr,HVr,UVr,Ht,d$,JVr,q5e,YVr,KVr,tf,ZVr,j5e,eXr,oXr,bee,rXr,tXr,aXr,H3,nXr,Qr,c$,sXr,D5e,lXr,iXr,Cn,dXr,G5e,cXr,fXr,O5e,mXr,gXr,V5e,hXr,pXr,_Xr,ke,U3,X5e,uXr,bXr,vee,vXr,FXr,TXr,J3,z5e,MXr,EXr,Fee,CXr,wXr,AXr,Y3,Q5e,LXr,yXr,Tee,xXr,$Xr,kXr,K3,W5e,SXr,RXr,Mee,PXr,BXr,NXr,Z3,H5e,IXr,qXr,Eee,jXr,DXr,GXr,e0,U5e,OXr,VXr,Cee,XXr,zXr,QXr,o0,J5e,WXr,HXr,wee,UXr,JXr,YXr,r0,Y5e,KXr,ZXr,Aee,ezr,ozr,rzr,t0,K5e,tzr,azr,Lee,nzr,szr,lzr,a0,Z5e,izr,dzr,yee,czr,fzr,mzr,n0,dXe,af,s0,e3e,f$,gzr,o3e,hzr,cXe,vr,m$,pzr,nf,_zr,xee,uzr,bzr,$ee,vzr,Fzr,Tzr,g$,Mzr,r3e,Ezr,Czr,wzr,Ut,h$,Azr,t3e,Lzr,yzr,sf,xzr,a3e,$zr,kzr,kee,Szr,Rzr,Pzr,l0,Bzr,Wr,p$,Nzr,n3e,Izr,qzr,wn,jzr,s3e,Dzr,Gzr,l3e,Ozr,Vzr,i3e,Xzr,zzr,Qzr,Se,i0,d3e,Wzr,Hzr,See,Uzr,Jzr,Yzr,d0,c3e,Kzr,Zzr,Ree,eQr,oQr,rQr,c0,f3e,tQr,aQr,Pee,nQr,sQr,lQr,f0,m3e,iQr,dQr,Bee,cQr,fQr,mQr,m0,g3e,gQr,hQr,Nee,pQr,_Qr,uQr,g0,h3e,bQr,vQr,Iee,FQr,TQr,MQr,h0,p3e,EQr,CQr,qee,wQr,AQr,LQr,p0,_3e,yQr,xQr,jee,$Qr,kQr,SQr,_0,u3e,RQr,PQr,Dee,BQr,NQr,IQr,u0,b3e,qQr,jQr,Gee,DQr,GQr,OQr,b0,fXe,lf,v0,v3e,_$,VQr,F3e,XQr,mXe,Fr,u$,zQr,df,QQr,Oee,WQr,HQr,Vee,UQr,JQr,YQr,b$,KQr,T3e,ZQr,eWr,oWr,Jt,v$,rWr,M3e,tWr,aWr,cf,nWr,E3e,sWr,lWr,Xee,iWr,dWr,cWr,F0,fWr,Hr,F$,mWr,C3e,gWr,hWr,An,pWr,w3e,_Wr,uWr,A3e,bWr,vWr,L3e,FWr,TWr,MWr,Re,T0,y3e,EWr,CWr,zee,wWr,AWr,LWr,M0,x3e,yWr,xWr,Qee,$Wr,kWr,SWr,E0,$3e,RWr,PWr,Wee,BWr,NWr,IWr,C0,k3e,qWr,jWr,Hee,DWr,GWr,OWr,w0,S3e,VWr,XWr,Uee,zWr,QWr,WWr,A0,R3e,HWr,UWr,Jee,JWr,YWr,KWr,L0,P3e,ZWr,eHr,Yee,oHr,rHr,tHr,y0,B3e,aHr,nHr,Kee,sHr,lHr,iHr,x0,N3e,dHr,cHr,Zee,fHr,mHr,gHr,$0,I3e,hHr,pHr,eoe,_Hr,uHr,bHr,k0,gXe,ff,S0,q3e,T$,vHr,j3e,FHr,hXe,Tr,M$,THr,mf,MHr,ooe,EHr,CHr,roe,wHr,AHr,LHr,E$,yHr,D3e,xHr,$Hr,kHr,Yt,C$,SHr,G3e,RHr,PHr,gf,BHr,O3e,NHr,IHr,toe,qHr,jHr,DHr,R0,GHr,Ur,w$,OHr,V3e,VHr,XHr,Ln,zHr,X3e,QHr,WHr,z3e,HHr,UHr,Q3e,JHr,YHr,KHr,Ve,P0,W3e,ZHr,eUr,aoe,oUr,rUr,tUr,B0,H3e,aUr,nUr,noe,sUr,lUr,iUr,N0,U3e,dUr,cUr,soe,fUr,mUr,gUr,I0,J3e,hUr,pUr,loe,_Ur,uUr,bUr,q0,Y3e,vUr,FUr,ioe,TUr,MUr,EUr,j0,K3e,CUr,wUr,doe,AUr,LUr,yUr,D0,Z3e,xUr,$Ur,coe,kUr,SUr,RUr,G0,e0e,PUr,BUr,foe,NUr,IUr,qUr,O0,pXe,hf,V0,o0e,A$,jUr,r0e,DUr,_Xe,Mr,L$,GUr,pf,OUr,moe,VUr,XUr,goe,zUr,QUr,WUr,y$,HUr,t0e,UUr,JUr,YUr,Kt,x$,KUr,a0e,ZUr,eJr,_f,oJr,n0e,rJr,tJr,hoe,aJr,nJr,sJr,X0,lJr,Jr,$$,iJr,s0e,dJr,cJr,yn,fJr,l0e,mJr,gJr,i0e,hJr,pJr,d0e,_Jr,uJr,bJr,Xe,z0,c0e,vJr,FJr,poe,TJr,MJr,EJr,Q0,f0e,CJr,wJr,_oe,AJr,LJr,yJr,W0,m0e,xJr,$Jr,uoe,kJr,SJr,RJr,H0,g0e,PJr,BJr,boe,NJr,IJr,qJr,U0,h0e,jJr,DJr,voe,GJr,OJr,VJr,J0,p0e,XJr,zJr,Foe,QJr,WJr,HJr,Y0,_0e,UJr,JJr,Toe,YJr,KJr,ZJr,K0,u0e,eYr,oYr,Moe,rYr,tYr,aYr,Z0,uXe,uf,ew,b0e,k$,nYr,v0e,sYr,bXe,Er,S$,lYr,bf,iYr,Eoe,dYr,cYr,Coe,fYr,mYr,gYr,R$,hYr,F0e,pYr,_Yr,uYr,Zt,P$,bYr,T0e,vYr,FYr,vf,TYr,M0e,MYr,EYr,woe,CYr,wYr,AYr,ow,LYr,Yr,B$,yYr,E0e,xYr,$Yr,xn,kYr,C0e,SYr,RYr,w0e,PYr,BYr,A0e,NYr,IYr,qYr,L0e,rw,y0e,jYr,DYr,Aoe,GYr,OYr,VYr,tw,vXe,Ff,aw,x0e,N$,XYr,$0e,zYr,FXe,Cr,I$,QYr,Tf,WYr,Loe,HYr,UYr,yoe,JYr,YYr,KYr,q$,ZYr,k0e,eKr,oKr,rKr,ea,j$,tKr,S0e,aKr,nKr,Mf,sKr,R0e,lKr,iKr,xoe,dKr,cKr,fKr,nw,mKr,Kr,D$,gKr,P0e,hKr,pKr,$n,_Kr,B0e,uKr,bKr,N0e,vKr,FKr,I0e,TKr,MKr,EKr,G$,sw,q0e,CKr,wKr,$oe,AKr,LKr,yKr,lw,j0e,xKr,$Kr,koe,kKr,SKr,RKr,iw,TXe,Ef,dw,D0e,O$,PKr,G0e,BKr,MXe,wr,V$,NKr,Cf,IKr,Soe,qKr,jKr,Roe,DKr,GKr,OKr,X$,VKr,O0e,XKr,zKr,QKr,oa,z$,WKr,V0e,HKr,UKr,wf,JKr,X0e,YKr,KKr,Poe,ZKr,eZr,oZr,cw,rZr,Zr,Q$,tZr,z0e,aZr,nZr,kn,sZr,Q0e,lZr,iZr,W0e,dZr,cZr,H0e,fZr,mZr,gZr,U0e,fw,J0e,hZr,pZr,Boe,_Zr,uZr,bZr,mw,EXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),I6=new re({}),q6=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pf=new vZr({props:{warning:!0,$$slots:{default:[iOt]},$$scope:{ctx:$}}}),j6=new re({}),D6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/configuration_auto.py#L604"}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/configuration_auto.py#L627"}}),Xg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[dOt]},$$scope:{ctx:$}}}),X6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/configuration_auto.py#L750"}}),z6=new re({}),Q6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/tokenization_auto.py#L401"}}),U6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17799/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/tokenization_auto.py#L415"}}),Ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[cOt]},$$scope:{ctx:$}}}),J6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/tokenization_auto.py#L614"}}),Y6=new re({}),K6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17799/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),ip=new vZr({props:{$$slots:{default:[fOt]},$$scope:{ctx:$}}}),dp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[mOt]},$$scope:{ctx:$}}}),rL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),tL=new re({}),aL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/processing_auto.py#L88"}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/processing_auto.py#L102"}}),xp=new vZr({props:{$$slots:{default:[gOt]},$$scope:{ctx:$}}}),$p=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[hOt]},$$scope:{ctx:$}}}),iL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/processing_auto.py#L255"}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L772"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config">MobileNetV1Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Model">MobileNetV1Model</a> (MobileNetV1 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),Rp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[pOt]},$$scope:{ctx:$}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Bu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[_Ot]},$$scope:{ctx:$}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L779"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[uOt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bOt]},$$scope:{ctx:$}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L794"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[vOt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FOt]},$$scope:{ctx:$}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L801"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[TOt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),n9=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MOt]},$$scope:{ctx:$}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L808"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),l9=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EOt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),A9=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:$}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L817"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),y9=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[wOt]},$$scope:{ctx:$}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AOt]},$$scope:{ctx:$}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L862"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),L2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[LOt]},$$scope:{ctx:$}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yOt]},$$scope:{ctx:$}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L869"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xOt]},$$scope:{ctx:$}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),pb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$Ot]},$$scope:{ctx:$}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L855"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),ub=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[kOt]},$$scope:{ctx:$}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),ov=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SOt]},$$scope:{ctx:$}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L826"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),tv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ROt]},$$scope:{ctx:$}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[POt]},$$scope:{ctx:$}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L833"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[BOt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NOt]},$$scope:{ctx:$}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L878"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config">MobileNetV1Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1ForImageClassification">MobileNetV1ForImageClassification</a> (MobileNetV1 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[IOt]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qOt]},$$scope:{ctx:$}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L917"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[jOt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DOt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L844"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[GOt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[OOt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L924"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[VOt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[XOt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L947"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zOt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),By=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L931"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[HOt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L938"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[JOt]},$$scope:{ctx:$}}}),Qy=new re({}),Wy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L956"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L963"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L910"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L885"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L892"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_auto.py#L901"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),Z8=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),ax=new re({}),nx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),dx=new re({}),cx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),Bx=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),zx=new re({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),o$=new re({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),k$=new re({}),S$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),P$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),N$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),j$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),O$=new re({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),xf=l(),at=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),R6=o("from_pretrained()"),$f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),wi=o("Instantiating one of "),Rn=a("a"),P6=o("AutoConfig"),Pn=o(", "),Bn=a("a"),B6=o("AutoModel"),Ai=o(`, and
`),Nn=a("a"),N6=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),kf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),fS=o("will create a model that is an instance of "),yi=a("a"),mS=o("BertModel"),gS=o("."),Co=l(),$a=a("p"),hS=o("There is one class of "),Sf=a("code"),pS=o("AutoModel"),RQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bOe=l(),xi=a("h2"),Rf=a("a"),$te=a("span"),F(I6.$$.fragment),PQe=l(),kte=a("span"),BQe=o("Extending the Auto Classes"),vOe=l(),In=a("p"),NQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ste=a("code"),IQe=o("NewModel"),qQe=o(", make sure you have a "),Rte=a("code"),jQe=o("NewModelConfig"),DQe=o(` then you can add those to the auto
classes like this:`),FOe=l(),F(q6.$$.fragment),TOe=l(),_S=a("p"),GQe=o("You will then be able to use the auto classes like you would usually do!"),MOe=l(),F(Pf.$$.fragment),EOe=l(),$i=a("h2"),Bf=a("a"),Pte=a("span"),F(j6.$$.fragment),OQe=l(),Bte=a("span"),VQe=o("AutoConfig"),COe=l(),wo=a("div"),F(D6.$$.fragment),XQe=l(),G6=a("p"),zQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),uS=a("a"),QQe=o("from_pretrained()"),WQe=o(" class method."),HQe=l(),O6=a("p"),UQe=o("This class cannot be instantiated directly using "),Nte=a("code"),JQe=o("__init__()"),YQe=o(" (throws an error)."),KQe=l(),Ar=a("div"),F(V6.$$.fragment),ZQe=l(),Ite=a("p"),eWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),oWe=l(),ki=a("p"),rWe=o("The configuration class to instantiate is selected based on the "),qte=a("code"),tWe=o("model_type"),aWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jte=a("code"),nWe=o("pretrained_model_name_or_path"),sWe=o(":"),lWe=l(),A=a("ul"),Nf=a("li"),Dte=a("strong"),iWe=o("albert"),dWe=o(" \u2014 "),bS=a("a"),cWe=o("AlbertConfig"),fWe=o(" (ALBERT model)"),mWe=l(),If=a("li"),Gte=a("strong"),gWe=o("bart"),hWe=o(" \u2014 "),vS=a("a"),pWe=o("BartConfig"),_We=o(" (BART model)"),uWe=l(),qf=a("li"),Ote=a("strong"),bWe=o("beit"),vWe=o(" \u2014 "),FS=a("a"),FWe=o("BeitConfig"),TWe=o(" (BEiT model)"),MWe=l(),jf=a("li"),Vte=a("strong"),EWe=o("bert"),CWe=o(" \u2014 "),TS=a("a"),wWe=o("BertConfig"),AWe=o(" (BERT model)"),LWe=l(),Df=a("li"),Xte=a("strong"),yWe=o("bert-generation"),xWe=o(" \u2014 "),MS=a("a"),$We=o("BertGenerationConfig"),kWe=o(" (Bert Generation model)"),SWe=l(),Gf=a("li"),zte=a("strong"),RWe=o("big_bird"),PWe=o(" \u2014 "),ES=a("a"),BWe=o("BigBirdConfig"),NWe=o(" (BigBird model)"),IWe=l(),Of=a("li"),Qte=a("strong"),qWe=o("bigbird_pegasus"),jWe=o(" \u2014 "),CS=a("a"),DWe=o("BigBirdPegasusConfig"),GWe=o(" (BigBird-Pegasus model)"),OWe=l(),Vf=a("li"),Wte=a("strong"),VWe=o("blenderbot"),XWe=o(" \u2014 "),wS=a("a"),zWe=o("BlenderbotConfig"),QWe=o(" (Blenderbot model)"),WWe=l(),Xf=a("li"),Hte=a("strong"),HWe=o("blenderbot-small"),UWe=o(" \u2014 "),AS=a("a"),JWe=o("BlenderbotSmallConfig"),YWe=o(" (BlenderbotSmall model)"),KWe=l(),zf=a("li"),Ute=a("strong"),ZWe=o("bloom"),eHe=o(" \u2014 "),LS=a("a"),oHe=o("BloomConfig"),rHe=o(" (BLOOM model)"),tHe=l(),Qf=a("li"),Jte=a("strong"),aHe=o("camembert"),nHe=o(" \u2014 "),yS=a("a"),sHe=o("CamembertConfig"),lHe=o(" (CamemBERT model)"),iHe=l(),Wf=a("li"),Yte=a("strong"),dHe=o("canine"),cHe=o(" \u2014 "),xS=a("a"),fHe=o("CanineConfig"),mHe=o(" (CANINE model)"),gHe=l(),Hf=a("li"),Kte=a("strong"),hHe=o("clip"),pHe=o(" \u2014 "),$S=a("a"),_He=o("CLIPConfig"),uHe=o(" (CLIP model)"),bHe=l(),Uf=a("li"),Zte=a("strong"),vHe=o("codegen"),FHe=o(" \u2014 "),kS=a("a"),THe=o("CodeGenConfig"),MHe=o(" (CodeGen model)"),EHe=l(),Jf=a("li"),eae=a("strong"),CHe=o("convbert"),wHe=o(" \u2014 "),SS=a("a"),AHe=o("ConvBertConfig"),LHe=o(" (ConvBERT model)"),yHe=l(),Yf=a("li"),oae=a("strong"),xHe=o("convnext"),$He=o(" \u2014 "),RS=a("a"),kHe=o("ConvNextConfig"),SHe=o(" (ConvNeXT model)"),RHe=l(),Kf=a("li"),rae=a("strong"),PHe=o("ctrl"),BHe=o(" \u2014 "),PS=a("a"),NHe=o("CTRLConfig"),IHe=o(" (CTRL model)"),qHe=l(),Zf=a("li"),tae=a("strong"),jHe=o("cvt"),DHe=o(" \u2014 "),BS=a("a"),GHe=o("CvtConfig"),OHe=o(" (CvT model)"),VHe=l(),em=a("li"),aae=a("strong"),XHe=o("data2vec-audio"),zHe=o(" \u2014 "),NS=a("a"),QHe=o("Data2VecAudioConfig"),WHe=o(" (Data2VecAudio model)"),HHe=l(),om=a("li"),nae=a("strong"),UHe=o("data2vec-text"),JHe=o(" \u2014 "),IS=a("a"),YHe=o("Data2VecTextConfig"),KHe=o(" (Data2VecText model)"),ZHe=l(),rm=a("li"),sae=a("strong"),eUe=o("data2vec-vision"),oUe=o(" \u2014 "),qS=a("a"),rUe=o("Data2VecVisionConfig"),tUe=o(" (Data2VecVision model)"),aUe=l(),tm=a("li"),lae=a("strong"),nUe=o("deberta"),sUe=o(" \u2014 "),jS=a("a"),lUe=o("DebertaConfig"),iUe=o(" (DeBERTa model)"),dUe=l(),am=a("li"),iae=a("strong"),cUe=o("deberta-v2"),fUe=o(" \u2014 "),DS=a("a"),mUe=o("DebertaV2Config"),gUe=o(" (DeBERTa-v2 model)"),hUe=l(),nm=a("li"),dae=a("strong"),pUe=o("decision_transformer"),_Ue=o(" \u2014 "),GS=a("a"),uUe=o("DecisionTransformerConfig"),bUe=o(" (Decision Transformer model)"),vUe=l(),sm=a("li"),cae=a("strong"),FUe=o("deit"),TUe=o(" \u2014 "),OS=a("a"),MUe=o("DeiTConfig"),EUe=o(" (DeiT model)"),CUe=l(),lm=a("li"),fae=a("strong"),wUe=o("detr"),AUe=o(" \u2014 "),VS=a("a"),LUe=o("DetrConfig"),yUe=o(" (DETR model)"),xUe=l(),im=a("li"),mae=a("strong"),$Ue=o("distilbert"),kUe=o(" \u2014 "),XS=a("a"),SUe=o("DistilBertConfig"),RUe=o(" (DistilBERT model)"),PUe=l(),dm=a("li"),gae=a("strong"),BUe=o("dpr"),NUe=o(" \u2014 "),zS=a("a"),IUe=o("DPRConfig"),qUe=o(" (DPR model)"),jUe=l(),cm=a("li"),hae=a("strong"),DUe=o("dpt"),GUe=o(" \u2014 "),QS=a("a"),OUe=o("DPTConfig"),VUe=o(" (DPT model)"),XUe=l(),fm=a("li"),pae=a("strong"),zUe=o("electra"),QUe=o(" \u2014 "),WS=a("a"),WUe=o("ElectraConfig"),HUe=o(" (ELECTRA model)"),UUe=l(),mm=a("li"),_ae=a("strong"),JUe=o("encoder-decoder"),YUe=o(" \u2014 "),HS=a("a"),KUe=o("EncoderDecoderConfig"),ZUe=o(" (Encoder decoder model)"),eJe=l(),gm=a("li"),uae=a("strong"),oJe=o("flaubert"),rJe=o(" \u2014 "),US=a("a"),tJe=o("FlaubertConfig"),aJe=o(" (FlauBERT model)"),nJe=l(),hm=a("li"),bae=a("strong"),sJe=o("flava"),lJe=o(" \u2014 "),JS=a("a"),iJe=o("FlavaConfig"),dJe=o(" (FLAVA model)"),cJe=l(),pm=a("li"),vae=a("strong"),fJe=o("fnet"),mJe=o(" \u2014 "),YS=a("a"),gJe=o("FNetConfig"),hJe=o(" (FNet model)"),pJe=l(),_m=a("li"),Fae=a("strong"),_Je=o("fsmt"),uJe=o(" \u2014 "),KS=a("a"),bJe=o("FSMTConfig"),vJe=o(" (FairSeq Machine-Translation model)"),FJe=l(),um=a("li"),Tae=a("strong"),TJe=o("funnel"),MJe=o(" \u2014 "),ZS=a("a"),EJe=o("FunnelConfig"),CJe=o(" (Funnel Transformer model)"),wJe=l(),bm=a("li"),Mae=a("strong"),AJe=o("glpn"),LJe=o(" \u2014 "),eR=a("a"),yJe=o("GLPNConfig"),xJe=o(" (GLPN model)"),$Je=l(),vm=a("li"),Eae=a("strong"),kJe=o("gpt2"),SJe=o(" \u2014 "),oR=a("a"),RJe=o("GPT2Config"),PJe=o(" (OpenAI GPT-2 model)"),BJe=l(),Fm=a("li"),Cae=a("strong"),NJe=o("gpt_neo"),IJe=o(" \u2014 "),rR=a("a"),qJe=o("GPTNeoConfig"),jJe=o(" (GPT Neo model)"),DJe=l(),Tm=a("li"),wae=a("strong"),GJe=o("gpt_neox"),OJe=o(" \u2014 "),tR=a("a"),VJe=o("GPTNeoXConfig"),XJe=o(" (GPT NeoX model)"),zJe=l(),Mm=a("li"),Aae=a("strong"),QJe=o("gptj"),WJe=o(" \u2014 "),aR=a("a"),HJe=o("GPTJConfig"),UJe=o(" (GPT-J model)"),JJe=l(),Em=a("li"),Lae=a("strong"),YJe=o("hubert"),KJe=o(" \u2014 "),nR=a("a"),ZJe=o("HubertConfig"),eYe=o(" (Hubert model)"),oYe=l(),Cm=a("li"),yae=a("strong"),rYe=o("ibert"),tYe=o(" \u2014 "),sR=a("a"),aYe=o("IBertConfig"),nYe=o(" (I-BERT model)"),sYe=l(),wm=a("li"),xae=a("strong"),lYe=o("imagegpt"),iYe=o(" \u2014 "),lR=a("a"),dYe=o("ImageGPTConfig"),cYe=o(" (ImageGPT model)"),fYe=l(),Am=a("li"),$ae=a("strong"),mYe=o("layoutlm"),gYe=o(" \u2014 "),iR=a("a"),hYe=o("LayoutLMConfig"),pYe=o(" (LayoutLM model)"),_Ye=l(),Lm=a("li"),kae=a("strong"),uYe=o("layoutlmv2"),bYe=o(" \u2014 "),dR=a("a"),vYe=o("LayoutLMv2Config"),FYe=o(" (LayoutLMv2 model)"),TYe=l(),ym=a("li"),Sae=a("strong"),MYe=o("layoutlmv3"),EYe=o(" \u2014 "),cR=a("a"),CYe=o("LayoutLMv3Config"),wYe=o(" (LayoutLMv3 model)"),AYe=l(),xm=a("li"),Rae=a("strong"),LYe=o("led"),yYe=o(" \u2014 "),fR=a("a"),xYe=o("LEDConfig"),$Ye=o(" (LED model)"),kYe=l(),$m=a("li"),Pae=a("strong"),SYe=o("levit"),RYe=o(" \u2014 "),mR=a("a"),PYe=o("LevitConfig"),BYe=o(" (LeViT model)"),NYe=l(),km=a("li"),Bae=a("strong"),IYe=o("longformer"),qYe=o(" \u2014 "),gR=a("a"),jYe=o("LongformerConfig"),DYe=o(" (Longformer model)"),GYe=l(),Sm=a("li"),Nae=a("strong"),OYe=o("longt5"),VYe=o(" \u2014 "),hR=a("a"),XYe=o("LongT5Config"),zYe=o(" (LongT5 model)"),QYe=l(),Rm=a("li"),Iae=a("strong"),WYe=o("luke"),HYe=o(" \u2014 "),pR=a("a"),UYe=o("LukeConfig"),JYe=o(" (LUKE model)"),YYe=l(),Pm=a("li"),qae=a("strong"),KYe=o("lxmert"),ZYe=o(" \u2014 "),_R=a("a"),eKe=o("LxmertConfig"),oKe=o(" (LXMERT model)"),rKe=l(),Bm=a("li"),jae=a("strong"),tKe=o("m2m_100"),aKe=o(" \u2014 "),uR=a("a"),nKe=o("M2M100Config"),sKe=o(" (M2M100 model)"),lKe=l(),Nm=a("li"),Dae=a("strong"),iKe=o("marian"),dKe=o(" \u2014 "),bR=a("a"),cKe=o("MarianConfig"),fKe=o(" (Marian model)"),mKe=l(),Im=a("li"),Gae=a("strong"),gKe=o("maskformer"),hKe=o(" \u2014 "),vR=a("a"),pKe=o("MaskFormerConfig"),_Ke=o(" (MaskFormer model)"),uKe=l(),qm=a("li"),Oae=a("strong"),bKe=o("mbart"),vKe=o(" \u2014 "),FR=a("a"),FKe=o("MBartConfig"),TKe=o(" (mBART model)"),MKe=l(),jm=a("li"),Vae=a("strong"),EKe=o("mctct"),CKe=o(" \u2014 "),TR=a("a"),wKe=o("MCTCTConfig"),AKe=o(" (M-CTC-T model)"),LKe=l(),Dm=a("li"),Xae=a("strong"),yKe=o("megatron-bert"),xKe=o(" \u2014 "),MR=a("a"),$Ke=o("MegatronBertConfig"),kKe=o(" (Megatron-BERT model)"),SKe=l(),Gm=a("li"),zae=a("strong"),RKe=o("mobilebert"),PKe=o(" \u2014 "),ER=a("a"),BKe=o("MobileBertConfig"),NKe=o(" (MobileBERT model)"),IKe=l(),Om=a("li"),Qae=a("strong"),qKe=o("mobilenet_v1"),jKe=o(" \u2014 "),CR=a("a"),DKe=o("MobileNetV1Config"),GKe=o(" (MobileNetV1 model)"),OKe=l(),Vm=a("li"),Wae=a("strong"),VKe=o("mpnet"),XKe=o(" \u2014 "),wR=a("a"),zKe=o("MPNetConfig"),QKe=o(" (MPNet model)"),WKe=l(),Xm=a("li"),Hae=a("strong"),HKe=o("mt5"),UKe=o(" \u2014 "),AR=a("a"),JKe=o("MT5Config"),YKe=o(" (MT5 model)"),KKe=l(),zm=a("li"),Uae=a("strong"),ZKe=o("nezha"),eZe=o(" \u2014 "),LR=a("a"),oZe=o("NezhaConfig"),rZe=o(" (Nezha model)"),tZe=l(),Qm=a("li"),Jae=a("strong"),aZe=o("nystromformer"),nZe=o(" \u2014 "),yR=a("a"),sZe=o("NystromformerConfig"),lZe=o(" (Nystr\xF6mformer model)"),iZe=l(),Wm=a("li"),Yae=a("strong"),dZe=o("openai-gpt"),cZe=o(" \u2014 "),xR=a("a"),fZe=o("OpenAIGPTConfig"),mZe=o(" (OpenAI GPT model)"),gZe=l(),Hm=a("li"),Kae=a("strong"),hZe=o("opt"),pZe=o(" \u2014 "),$R=a("a"),_Ze=o("OPTConfig"),uZe=o(" (OPT model)"),bZe=l(),Um=a("li"),Zae=a("strong"),vZe=o("pegasus"),FZe=o(" \u2014 "),kR=a("a"),TZe=o("PegasusConfig"),MZe=o(" (Pegasus model)"),EZe=l(),Jm=a("li"),ene=a("strong"),CZe=o("perceiver"),wZe=o(" \u2014 "),SR=a("a"),AZe=o("PerceiverConfig"),LZe=o(" (Perceiver model)"),yZe=l(),Ym=a("li"),one=a("strong"),xZe=o("plbart"),$Ze=o(" \u2014 "),RR=a("a"),kZe=o("PLBartConfig"),SZe=o(" (PLBart model)"),RZe=l(),Km=a("li"),rne=a("strong"),PZe=o("poolformer"),BZe=o(" \u2014 "),PR=a("a"),NZe=o("PoolFormerConfig"),IZe=o(" (PoolFormer model)"),qZe=l(),Zm=a("li"),tne=a("strong"),jZe=o("prophetnet"),DZe=o(" \u2014 "),BR=a("a"),GZe=o("ProphetNetConfig"),OZe=o(" (ProphetNet model)"),VZe=l(),eg=a("li"),ane=a("strong"),XZe=o("qdqbert"),zZe=o(" \u2014 "),NR=a("a"),QZe=o("QDQBertConfig"),WZe=o(" (QDQBert model)"),HZe=l(),og=a("li"),nne=a("strong"),UZe=o("rag"),JZe=o(" \u2014 "),IR=a("a"),YZe=o("RagConfig"),KZe=o(" (RAG model)"),ZZe=l(),rg=a("li"),sne=a("strong"),eeo=o("realm"),oeo=o(" \u2014 "),qR=a("a"),reo=o("RealmConfig"),teo=o(" (REALM model)"),aeo=l(),tg=a("li"),lne=a("strong"),neo=o("reformer"),seo=o(" \u2014 "),jR=a("a"),leo=o("ReformerConfig"),ieo=o(" (Reformer model)"),deo=l(),ag=a("li"),ine=a("strong"),ceo=o("regnet"),feo=o(" \u2014 "),DR=a("a"),meo=o("RegNetConfig"),geo=o(" (RegNet model)"),heo=l(),ng=a("li"),dne=a("strong"),peo=o("rembert"),_eo=o(" \u2014 "),GR=a("a"),ueo=o("RemBertConfig"),beo=o(" (RemBERT model)"),veo=l(),sg=a("li"),cne=a("strong"),Feo=o("resnet"),Teo=o(" \u2014 "),OR=a("a"),Meo=o("ResNetConfig"),Eeo=o(" (ResNet model)"),Ceo=l(),lg=a("li"),fne=a("strong"),weo=o("retribert"),Aeo=o(" \u2014 "),VR=a("a"),Leo=o("RetriBertConfig"),yeo=o(" (RetriBERT model)"),xeo=l(),ig=a("li"),mne=a("strong"),$eo=o("roberta"),keo=o(" \u2014 "),XR=a("a"),Seo=o("RobertaConfig"),Reo=o(" (RoBERTa model)"),Peo=l(),dg=a("li"),gne=a("strong"),Beo=o("roformer"),Neo=o(" \u2014 "),zR=a("a"),Ieo=o("RoFormerConfig"),qeo=o(" (RoFormer model)"),jeo=l(),cg=a("li"),hne=a("strong"),Deo=o("segformer"),Geo=o(" \u2014 "),QR=a("a"),Oeo=o("SegformerConfig"),Veo=o(" (SegFormer model)"),Xeo=l(),fg=a("li"),pne=a("strong"),zeo=o("sew"),Qeo=o(" \u2014 "),WR=a("a"),Weo=o("SEWConfig"),Heo=o(" (SEW model)"),Ueo=l(),mg=a("li"),_ne=a("strong"),Jeo=o("sew-d"),Yeo=o(" \u2014 "),HR=a("a"),Keo=o("SEWDConfig"),Zeo=o(" (SEW-D model)"),eoo=l(),gg=a("li"),une=a("strong"),ooo=o("speech-encoder-decoder"),roo=o(" \u2014 "),UR=a("a"),too=o("SpeechEncoderDecoderConfig"),aoo=o(" (Speech Encoder decoder model)"),noo=l(),hg=a("li"),bne=a("strong"),soo=o("speech_to_text"),loo=o(" \u2014 "),JR=a("a"),ioo=o("Speech2TextConfig"),doo=o(" (Speech2Text model)"),coo=l(),pg=a("li"),vne=a("strong"),foo=o("speech_to_text_2"),moo=o(" \u2014 "),YR=a("a"),goo=o("Speech2Text2Config"),hoo=o(" (Speech2Text2 model)"),poo=l(),_g=a("li"),Fne=a("strong"),_oo=o("splinter"),uoo=o(" \u2014 "),KR=a("a"),boo=o("SplinterConfig"),voo=o(" (Splinter model)"),Foo=l(),ug=a("li"),Tne=a("strong"),Too=o("squeezebert"),Moo=o(" \u2014 "),ZR=a("a"),Eoo=o("SqueezeBertConfig"),Coo=o(" (SqueezeBERT model)"),woo=l(),bg=a("li"),Mne=a("strong"),Aoo=o("swin"),Loo=o(" \u2014 "),eP=a("a"),yoo=o("SwinConfig"),xoo=o(" (Swin Transformer model)"),$oo=l(),vg=a("li"),Ene=a("strong"),koo=o("t5"),Soo=o(" \u2014 "),oP=a("a"),Roo=o("T5Config"),Poo=o(" (T5 model)"),Boo=l(),Fg=a("li"),Cne=a("strong"),Noo=o("tapas"),Ioo=o(" \u2014 "),rP=a("a"),qoo=o("TapasConfig"),joo=o(" (TAPAS model)"),Doo=l(),Tg=a("li"),wne=a("strong"),Goo=o("trajectory_transformer"),Ooo=o(" \u2014 "),tP=a("a"),Voo=o("TrajectoryTransformerConfig"),Xoo=o(" (Trajectory Transformer model)"),zoo=l(),Mg=a("li"),Ane=a("strong"),Qoo=o("transfo-xl"),Woo=o(" \u2014 "),aP=a("a"),Hoo=o("TransfoXLConfig"),Uoo=o(" (Transformer-XL model)"),Joo=l(),Eg=a("li"),Lne=a("strong"),Yoo=o("trocr"),Koo=o(" \u2014 "),nP=a("a"),Zoo=o("TrOCRConfig"),ero=o(" (TrOCR model)"),oro=l(),Cg=a("li"),yne=a("strong"),rro=o("unispeech"),tro=o(" \u2014 "),sP=a("a"),aro=o("UniSpeechConfig"),nro=o(" (UniSpeech model)"),sro=l(),wg=a("li"),xne=a("strong"),lro=o("unispeech-sat"),iro=o(" \u2014 "),lP=a("a"),dro=o("UniSpeechSatConfig"),cro=o(" (UniSpeechSat model)"),fro=l(),Ag=a("li"),$ne=a("strong"),mro=o("van"),gro=o(" \u2014 "),iP=a("a"),hro=o("VanConfig"),pro=o(" (VAN model)"),_ro=l(),Lg=a("li"),kne=a("strong"),uro=o("vilt"),bro=o(" \u2014 "),dP=a("a"),vro=o("ViltConfig"),Fro=o(" (ViLT model)"),Tro=l(),yg=a("li"),Sne=a("strong"),Mro=o("vision-encoder-decoder"),Ero=o(" \u2014 "),cP=a("a"),Cro=o("VisionEncoderDecoderConfig"),wro=o(" (Vision Encoder decoder model)"),Aro=l(),xg=a("li"),Rne=a("strong"),Lro=o("vision-text-dual-encoder"),yro=o(" \u2014 "),fP=a("a"),xro=o("VisionTextDualEncoderConfig"),$ro=o(" (VisionTextDualEncoder model)"),kro=l(),$g=a("li"),Pne=a("strong"),Sro=o("visual_bert"),Rro=o(" \u2014 "),mP=a("a"),Pro=o("VisualBertConfig"),Bro=o(" (VisualBERT model)"),Nro=l(),kg=a("li"),Bne=a("strong"),Iro=o("vit"),qro=o(" \u2014 "),gP=a("a"),jro=o("ViTConfig"),Dro=o(" (ViT model)"),Gro=l(),Sg=a("li"),Nne=a("strong"),Oro=o("vit_mae"),Vro=o(" \u2014 "),hP=a("a"),Xro=o("ViTMAEConfig"),zro=o(" (ViTMAE model)"),Qro=l(),Rg=a("li"),Ine=a("strong"),Wro=o("wav2vec2"),Hro=o(" \u2014 "),pP=a("a"),Uro=o("Wav2Vec2Config"),Jro=o(" (Wav2Vec2 model)"),Yro=l(),Pg=a("li"),qne=a("strong"),Kro=o("wav2vec2-conformer"),Zro=o(" \u2014 "),_P=a("a"),eto=o("Wav2Vec2ConformerConfig"),oto=o(" (Wav2Vec2-Conformer model)"),rto=l(),Bg=a("li"),jne=a("strong"),tto=o("wavlm"),ato=o(" \u2014 "),uP=a("a"),nto=o("WavLMConfig"),sto=o(" (WavLM model)"),lto=l(),Ng=a("li"),Dne=a("strong"),ito=o("xglm"),dto=o(" \u2014 "),bP=a("a"),cto=o("XGLMConfig"),fto=o(" (XGLM model)"),mto=l(),Ig=a("li"),Gne=a("strong"),gto=o("xlm"),hto=o(" \u2014 "),vP=a("a"),pto=o("XLMConfig"),_to=o(" (XLM model)"),uto=l(),qg=a("li"),One=a("strong"),bto=o("xlm-prophetnet"),vto=o(" \u2014 "),FP=a("a"),Fto=o("XLMProphetNetConfig"),Tto=o(" (XLM-ProphetNet model)"),Mto=l(),jg=a("li"),Vne=a("strong"),Eto=o("xlm-roberta"),Cto=o(" \u2014 "),TP=a("a"),wto=o("XLMRobertaConfig"),Ato=o(" (XLM-RoBERTa model)"),Lto=l(),Dg=a("li"),Xne=a("strong"),yto=o("xlm-roberta-xl"),xto=o(" \u2014 "),MP=a("a"),$to=o("XLMRobertaXLConfig"),kto=o(" (XLM-RoBERTa-XL model)"),Sto=l(),Gg=a("li"),zne=a("strong"),Rto=o("xlnet"),Pto=o(" \u2014 "),EP=a("a"),Bto=o("XLNetConfig"),Nto=o(" (XLNet model)"),Ito=l(),Og=a("li"),Qne=a("strong"),qto=o("yolos"),jto=o(" \u2014 "),CP=a("a"),Dto=o("YolosConfig"),Gto=o(" (YOLOS model)"),Oto=l(),Vg=a("li"),Wne=a("strong"),Vto=o("yoso"),Xto=o(" \u2014 "),wP=a("a"),zto=o("YosoConfig"),Qto=o(" (YOSO model)"),Wto=l(),F(Xg.$$.fragment),Hto=l(),zg=a("div"),F(X6.$$.fragment),Uto=l(),Hne=a("p"),Jto=o("Register a new configuration for this class."),wOe=l(),Si=a("h2"),Qg=a("a"),Une=a("span"),F(z6.$$.fragment),Yto=l(),Jne=a("span"),Kto=o("AutoTokenizer"),AOe=l(),Ao=a("div"),F(Q6.$$.fragment),Zto=l(),W6=a("p"),eao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),AP=a("a"),oao=o("AutoTokenizer.from_pretrained()"),rao=o(" class method."),tao=l(),H6=a("p"),aao=o("This class cannot be instantiated directly using "),Yne=a("code"),nao=o("__init__()"),sao=o(" (throws an error)."),lao=l(),Lr=a("div"),F(U6.$$.fragment),iao=l(),Kne=a("p"),dao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cao=l(),ka=a("p"),fao=o("The tokenizer class to instantiate is selected based on the "),Zne=a("code"),mao=o("model_type"),gao=o(` property of the config object (either
passed as an argument or loaded from `),ese=a("code"),hao=o("pretrained_model_name_or_path"),pao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=a("code"),_ao=o("pretrained_model_name_or_path"),uao=o(":"),bao=l(),k=a("ul"),qn=a("li"),rse=a("strong"),vao=o("albert"),Fao=o(" \u2014 "),LP=a("a"),Tao=o("AlbertTokenizer"),Mao=o(" or "),yP=a("a"),Eao=o("AlbertTokenizerFast"),Cao=o(" (ALBERT model)"),wao=l(),jn=a("li"),tse=a("strong"),Aao=o("bart"),Lao=o(" \u2014 "),xP=a("a"),yao=o("BartTokenizer"),xao=o(" or "),$P=a("a"),$ao=o("BartTokenizerFast"),kao=o(" (BART model)"),Sao=l(),Dn=a("li"),ase=a("strong"),Rao=o("barthez"),Pao=o(" \u2014 "),kP=a("a"),Bao=o("BarthezTokenizer"),Nao=o(" or "),SP=a("a"),Iao=o("BarthezTokenizerFast"),qao=o(" (BARThez model)"),jao=l(),Wg=a("li"),nse=a("strong"),Dao=o("bartpho"),Gao=o(" \u2014 "),RP=a("a"),Oao=o("BartphoTokenizer"),Vao=o(" (BARTpho model)"),Xao=l(),Gn=a("li"),sse=a("strong"),zao=o("bert"),Qao=o(" \u2014 "),PP=a("a"),Wao=o("BertTokenizer"),Hao=o(" or "),BP=a("a"),Uao=o("BertTokenizerFast"),Jao=o(" (BERT model)"),Yao=l(),Hg=a("li"),lse=a("strong"),Kao=o("bert-generation"),Zao=o(" \u2014 "),NP=a("a"),eno=o("BertGenerationTokenizer"),ono=o(" (Bert Generation model)"),rno=l(),Ug=a("li"),ise=a("strong"),tno=o("bert-japanese"),ano=o(" \u2014 "),IP=a("a"),nno=o("BertJapaneseTokenizer"),sno=o(" (BertJapanese model)"),lno=l(),Jg=a("li"),dse=a("strong"),ino=o("bertweet"),dno=o(" \u2014 "),qP=a("a"),cno=o("BertweetTokenizer"),fno=o(" (BERTweet model)"),mno=l(),On=a("li"),cse=a("strong"),gno=o("big_bird"),hno=o(" \u2014 "),jP=a("a"),pno=o("BigBirdTokenizer"),_no=o(" or "),DP=a("a"),uno=o("BigBirdTokenizerFast"),bno=o(" (BigBird model)"),vno=l(),Vn=a("li"),fse=a("strong"),Fno=o("bigbird_pegasus"),Tno=o(" \u2014 "),GP=a("a"),Mno=o("PegasusTokenizer"),Eno=o(" or "),OP=a("a"),Cno=o("PegasusTokenizerFast"),wno=o(" (BigBird-Pegasus model)"),Ano=l(),Xn=a("li"),mse=a("strong"),Lno=o("blenderbot"),yno=o(" \u2014 "),VP=a("a"),xno=o("BlenderbotTokenizer"),$no=o(" or "),XP=a("a"),kno=o("BlenderbotTokenizerFast"),Sno=o(" (Blenderbot model)"),Rno=l(),Yg=a("li"),gse=a("strong"),Pno=o("blenderbot-small"),Bno=o(" \u2014 "),zP=a("a"),Nno=o("BlenderbotSmallTokenizer"),Ino=o(" (BlenderbotSmall model)"),qno=l(),Kg=a("li"),hse=a("strong"),jno=o("bloom"),Dno=o(" \u2014 "),QP=a("a"),Gno=o("BloomTokenizerFast"),Ono=o(" (BLOOM model)"),Vno=l(),Zg=a("li"),pse=a("strong"),Xno=o("byt5"),zno=o(" \u2014 "),WP=a("a"),Qno=o("ByT5Tokenizer"),Wno=o(" (ByT5 model)"),Hno=l(),zn=a("li"),_se=a("strong"),Uno=o("camembert"),Jno=o(" \u2014 "),HP=a("a"),Yno=o("CamembertTokenizer"),Kno=o(" or "),UP=a("a"),Zno=o("CamembertTokenizerFast"),eso=o(" (CamemBERT model)"),oso=l(),eh=a("li"),use=a("strong"),rso=o("canine"),tso=o(" \u2014 "),JP=a("a"),aso=o("CanineTokenizer"),nso=o(" (CANINE model)"),sso=l(),Qn=a("li"),bse=a("strong"),lso=o("clip"),iso=o(" \u2014 "),YP=a("a"),dso=o("CLIPTokenizer"),cso=o(" or "),KP=a("a"),fso=o("CLIPTokenizerFast"),mso=o(" (CLIP model)"),gso=l(),Wn=a("li"),vse=a("strong"),hso=o("codegen"),pso=o(" \u2014 "),ZP=a("a"),_so=o("CodeGenTokenizer"),uso=o(" or "),eB=a("a"),bso=o("CodeGenTokenizerFast"),vso=o(" (CodeGen model)"),Fso=l(),Hn=a("li"),Fse=a("strong"),Tso=o("convbert"),Mso=o(" \u2014 "),oB=a("a"),Eso=o("ConvBertTokenizer"),Cso=o(" or "),rB=a("a"),wso=o("ConvBertTokenizerFast"),Aso=o(" (ConvBERT model)"),Lso=l(),Un=a("li"),Tse=a("strong"),yso=o("cpm"),xso=o(" \u2014 "),tB=a("a"),$so=o("CpmTokenizer"),kso=o(" or "),aB=a("a"),Sso=o("CpmTokenizerFast"),Rso=o(" (CPM model)"),Pso=l(),oh=a("li"),Mse=a("strong"),Bso=o("ctrl"),Nso=o(" \u2014 "),nB=a("a"),Iso=o("CTRLTokenizer"),qso=o(" (CTRL model)"),jso=l(),Jn=a("li"),Ese=a("strong"),Dso=o("data2vec-text"),Gso=o(" \u2014 "),sB=a("a"),Oso=o("RobertaTokenizer"),Vso=o(" or "),lB=a("a"),Xso=o("RobertaTokenizerFast"),zso=o(" (Data2VecText model)"),Qso=l(),Yn=a("li"),Cse=a("strong"),Wso=o("deberta"),Hso=o(" \u2014 "),iB=a("a"),Uso=o("DebertaTokenizer"),Jso=o(" or "),dB=a("a"),Yso=o("DebertaTokenizerFast"),Kso=o(" (DeBERTa model)"),Zso=l(),Kn=a("li"),wse=a("strong"),elo=o("deberta-v2"),olo=o(" \u2014 "),cB=a("a"),rlo=o("DebertaV2Tokenizer"),tlo=o(" or "),fB=a("a"),alo=o("DebertaV2TokenizerFast"),nlo=o(" (DeBERTa-v2 model)"),slo=l(),Zn=a("li"),Ase=a("strong"),llo=o("distilbert"),ilo=o(" \u2014 "),mB=a("a"),dlo=o("DistilBertTokenizer"),clo=o(" or "),gB=a("a"),flo=o("DistilBertTokenizerFast"),mlo=o(" (DistilBERT model)"),glo=l(),es=a("li"),Lse=a("strong"),hlo=o("dpr"),plo=o(" \u2014 "),hB=a("a"),_lo=o("DPRQuestionEncoderTokenizer"),ulo=o(" or "),pB=a("a"),blo=o("DPRQuestionEncoderTokenizerFast"),vlo=o(" (DPR model)"),Flo=l(),os=a("li"),yse=a("strong"),Tlo=o("electra"),Mlo=o(" \u2014 "),_B=a("a"),Elo=o("ElectraTokenizer"),Clo=o(" or "),uB=a("a"),wlo=o("ElectraTokenizerFast"),Alo=o(" (ELECTRA model)"),Llo=l(),rh=a("li"),xse=a("strong"),ylo=o("flaubert"),xlo=o(" \u2014 "),bB=a("a"),$lo=o("FlaubertTokenizer"),klo=o(" (FlauBERT model)"),Slo=l(),rs=a("li"),$se=a("strong"),Rlo=o("fnet"),Plo=o(" \u2014 "),vB=a("a"),Blo=o("FNetTokenizer"),Nlo=o(" or "),FB=a("a"),Ilo=o("FNetTokenizerFast"),qlo=o(" (FNet model)"),jlo=l(),th=a("li"),kse=a("strong"),Dlo=o("fsmt"),Glo=o(" \u2014 "),TB=a("a"),Olo=o("FSMTTokenizer"),Vlo=o(" (FairSeq Machine-Translation model)"),Xlo=l(),ts=a("li"),Sse=a("strong"),zlo=o("funnel"),Qlo=o(" \u2014 "),MB=a("a"),Wlo=o("FunnelTokenizer"),Hlo=o(" or "),EB=a("a"),Ulo=o("FunnelTokenizerFast"),Jlo=o(" (Funnel Transformer model)"),Ylo=l(),as=a("li"),Rse=a("strong"),Klo=o("gpt2"),Zlo=o(" \u2014 "),CB=a("a"),eio=o("GPT2Tokenizer"),oio=o(" or "),wB=a("a"),rio=o("GPT2TokenizerFast"),tio=o(" (OpenAI GPT-2 model)"),aio=l(),ns=a("li"),Pse=a("strong"),nio=o("gpt_neo"),sio=o(" \u2014 "),AB=a("a"),lio=o("GPT2Tokenizer"),iio=o(" or "),LB=a("a"),dio=o("GPT2TokenizerFast"),cio=o(" (GPT Neo model)"),fio=l(),ah=a("li"),Bse=a("strong"),mio=o("gpt_neox"),gio=o(" \u2014 "),yB=a("a"),hio=o("GPTNeoXTokenizerFast"),pio=o(" (GPT NeoX model)"),_io=l(),ss=a("li"),Nse=a("strong"),uio=o("gptj"),bio=o(" \u2014 "),xB=a("a"),vio=o("GPT2Tokenizer"),Fio=o(" or "),$B=a("a"),Tio=o("GPT2TokenizerFast"),Mio=o(" (GPT-J model)"),Eio=l(),ls=a("li"),Ise=a("strong"),Cio=o("herbert"),wio=o(" \u2014 "),kB=a("a"),Aio=o("HerbertTokenizer"),Lio=o(" or "),SB=a("a"),yio=o("HerbertTokenizerFast"),xio=o(" (HerBERT model)"),$io=l(),nh=a("li"),qse=a("strong"),kio=o("hubert"),Sio=o(" \u2014 "),RB=a("a"),Rio=o("Wav2Vec2CTCTokenizer"),Pio=o(" (Hubert model)"),Bio=l(),is=a("li"),jse=a("strong"),Nio=o("ibert"),Iio=o(" \u2014 "),PB=a("a"),qio=o("RobertaTokenizer"),jio=o(" or "),BB=a("a"),Dio=o("RobertaTokenizerFast"),Gio=o(" (I-BERT model)"),Oio=l(),ds=a("li"),Dse=a("strong"),Vio=o("layoutlm"),Xio=o(" \u2014 "),NB=a("a"),zio=o("LayoutLMTokenizer"),Qio=o(" or "),IB=a("a"),Wio=o("LayoutLMTokenizerFast"),Hio=o(" (LayoutLM model)"),Uio=l(),cs=a("li"),Gse=a("strong"),Jio=o("layoutlmv2"),Yio=o(" \u2014 "),qB=a("a"),Kio=o("LayoutLMv2Tokenizer"),Zio=o(" or "),jB=a("a"),edo=o("LayoutLMv2TokenizerFast"),odo=o(" (LayoutLMv2 model)"),rdo=l(),fs=a("li"),Ose=a("strong"),tdo=o("layoutlmv3"),ado=o(" \u2014 "),DB=a("a"),ndo=o("LayoutLMv3Tokenizer"),sdo=o(" or "),GB=a("a"),ldo=o("LayoutLMv3TokenizerFast"),ido=o(" (LayoutLMv3 model)"),ddo=l(),ms=a("li"),Vse=a("strong"),cdo=o("layoutxlm"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("LayoutXLMTokenizer"),gdo=o(" or "),VB=a("a"),hdo=o("LayoutXLMTokenizerFast"),pdo=o(" (LayoutXLM model)"),_do=l(),gs=a("li"),Xse=a("strong"),udo=o("led"),bdo=o(" \u2014 "),XB=a("a"),vdo=o("LEDTokenizer"),Fdo=o(" or "),zB=a("a"),Tdo=o("LEDTokenizerFast"),Mdo=o(" (LED model)"),Edo=l(),hs=a("li"),zse=a("strong"),Cdo=o("longformer"),wdo=o(" \u2014 "),QB=a("a"),Ado=o("LongformerTokenizer"),Ldo=o(" or "),WB=a("a"),ydo=o("LongformerTokenizerFast"),xdo=o(" (Longformer model)"),$do=l(),ps=a("li"),Qse=a("strong"),kdo=o("longt5"),Sdo=o(" \u2014 "),HB=a("a"),Rdo=o("T5Tokenizer"),Pdo=o(" or "),UB=a("a"),Bdo=o("T5TokenizerFast"),Ndo=o(" (LongT5 model)"),Ido=l(),sh=a("li"),Wse=a("strong"),qdo=o("luke"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("LukeTokenizer"),Gdo=o(" (LUKE model)"),Odo=l(),_s=a("li"),Hse=a("strong"),Vdo=o("lxmert"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("LxmertTokenizer"),Qdo=o(" or "),KB=a("a"),Wdo=o("LxmertTokenizerFast"),Hdo=o(" (LXMERT model)"),Udo=l(),lh=a("li"),Use=a("strong"),Jdo=o("m2m_100"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("M2M100Tokenizer"),Zdo=o(" (M2M100 model)"),eco=l(),ih=a("li"),Jse=a("strong"),oco=o("marian"),rco=o(" \u2014 "),eN=a("a"),tco=o("MarianTokenizer"),aco=o(" (Marian model)"),nco=l(),us=a("li"),Yse=a("strong"),sco=o("mbart"),lco=o(" \u2014 "),oN=a("a"),ico=o("MBartTokenizer"),dco=o(" or "),rN=a("a"),cco=o("MBartTokenizerFast"),fco=o(" (mBART model)"),mco=l(),bs=a("li"),Kse=a("strong"),gco=o("mbart50"),hco=o(" \u2014 "),tN=a("a"),pco=o("MBart50Tokenizer"),_co=o(" or "),aN=a("a"),uco=o("MBart50TokenizerFast"),bco=o(" (mBART-50 model)"),vco=l(),vs=a("li"),Zse=a("strong"),Fco=o("megatron-bert"),Tco=o(" \u2014 "),nN=a("a"),Mco=o("BertTokenizer"),Eco=o(" or "),sN=a("a"),Cco=o("BertTokenizerFast"),wco=o(" (Megatron-BERT model)"),Aco=l(),dh=a("li"),ele=a("strong"),Lco=o("mluke"),yco=o(" \u2014 "),lN=a("a"),xco=o("MLukeTokenizer"),$co=o(" (mLUKE model)"),kco=l(),Fs=a("li"),ole=a("strong"),Sco=o("mobilebert"),Rco=o(" \u2014 "),iN=a("a"),Pco=o("MobileBertTokenizer"),Bco=o(" or "),dN=a("a"),Nco=o("MobileBertTokenizerFast"),Ico=o(" (MobileBERT model)"),qco=l(),Ts=a("li"),rle=a("strong"),jco=o("mpnet"),Dco=o(" \u2014 "),cN=a("a"),Gco=o("MPNetTokenizer"),Oco=o(" or "),fN=a("a"),Vco=o("MPNetTokenizerFast"),Xco=o(" (MPNet model)"),zco=l(),Ms=a("li"),tle=a("strong"),Qco=o("mt5"),Wco=o(" \u2014 "),mN=a("a"),Hco=o("MT5Tokenizer"),Uco=o(" or "),gN=a("a"),Jco=o("MT5TokenizerFast"),Yco=o(" (MT5 model)"),Kco=l(),Es=a("li"),ale=a("strong"),Zco=o("nezha"),efo=o(" \u2014 "),hN=a("a"),ofo=o("BertTokenizer"),rfo=o(" or "),pN=a("a"),tfo=o("BertTokenizerFast"),afo=o(" (Nezha model)"),nfo=l(),Cs=a("li"),nle=a("strong"),sfo=o("nystromformer"),lfo=o(" \u2014 "),_N=a("a"),ifo=o("AlbertTokenizer"),dfo=o(" or "),uN=a("a"),cfo=o("AlbertTokenizerFast"),ffo=o(" (Nystr\xF6mformer model)"),mfo=l(),ws=a("li"),sle=a("strong"),gfo=o("openai-gpt"),hfo=o(" \u2014 "),bN=a("a"),pfo=o("OpenAIGPTTokenizer"),_fo=o(" or "),vN=a("a"),ufo=o("OpenAIGPTTokenizerFast"),bfo=o(" (OpenAI GPT model)"),vfo=l(),ch=a("li"),lle=a("strong"),Ffo=o("opt"),Tfo=o(" \u2014 "),FN=a("a"),Mfo=o("GPT2Tokenizer"),Efo=o(" (OPT model)"),Cfo=l(),As=a("li"),ile=a("strong"),wfo=o("pegasus"),Afo=o(" \u2014 "),TN=a("a"),Lfo=o("PegasusTokenizer"),yfo=o(" or "),MN=a("a"),xfo=o("PegasusTokenizerFast"),$fo=o(" (Pegasus model)"),kfo=l(),fh=a("li"),dle=a("strong"),Sfo=o("perceiver"),Rfo=o(" \u2014 "),EN=a("a"),Pfo=o("PerceiverTokenizer"),Bfo=o(" (Perceiver model)"),Nfo=l(),mh=a("li"),cle=a("strong"),Ifo=o("phobert"),qfo=o(" \u2014 "),CN=a("a"),jfo=o("PhobertTokenizer"),Dfo=o(" (PhoBERT model)"),Gfo=l(),gh=a("li"),fle=a("strong"),Ofo=o("plbart"),Vfo=o(" \u2014 "),wN=a("a"),Xfo=o("PLBartTokenizer"),zfo=o(" (PLBart model)"),Qfo=l(),hh=a("li"),mle=a("strong"),Wfo=o("prophetnet"),Hfo=o(" \u2014 "),AN=a("a"),Ufo=o("ProphetNetTokenizer"),Jfo=o(" (ProphetNet model)"),Yfo=l(),Ls=a("li"),gle=a("strong"),Kfo=o("qdqbert"),Zfo=o(" \u2014 "),LN=a("a"),emo=o("BertTokenizer"),omo=o(" or "),yN=a("a"),rmo=o("BertTokenizerFast"),tmo=o(" (QDQBert model)"),amo=l(),ph=a("li"),hle=a("strong"),nmo=o("rag"),smo=o(" \u2014 "),xN=a("a"),lmo=o("RagTokenizer"),imo=o(" (RAG model)"),dmo=l(),ys=a("li"),ple=a("strong"),cmo=o("realm"),fmo=o(" \u2014 "),$N=a("a"),mmo=o("RealmTokenizer"),gmo=o(" or "),kN=a("a"),hmo=o("RealmTokenizerFast"),pmo=o(" (REALM model)"),_mo=l(),xs=a("li"),_le=a("strong"),umo=o("reformer"),bmo=o(" \u2014 "),SN=a("a"),vmo=o("ReformerTokenizer"),Fmo=o(" or "),RN=a("a"),Tmo=o("ReformerTokenizerFast"),Mmo=o(" (Reformer model)"),Emo=l(),$s=a("li"),ule=a("strong"),Cmo=o("rembert"),wmo=o(" \u2014 "),PN=a("a"),Amo=o("RemBertTokenizer"),Lmo=o(" or "),BN=a("a"),ymo=o("RemBertTokenizerFast"),xmo=o(" (RemBERT model)"),$mo=l(),ks=a("li"),ble=a("strong"),kmo=o("retribert"),Smo=o(" \u2014 "),NN=a("a"),Rmo=o("RetriBertTokenizer"),Pmo=o(" or "),IN=a("a"),Bmo=o("RetriBertTokenizerFast"),Nmo=o(" (RetriBERT model)"),Imo=l(),Ss=a("li"),vle=a("strong"),qmo=o("roberta"),jmo=o(" \u2014 "),qN=a("a"),Dmo=o("RobertaTokenizer"),Gmo=o(" or "),jN=a("a"),Omo=o("RobertaTokenizerFast"),Vmo=o(" (RoBERTa model)"),Xmo=l(),Rs=a("li"),Fle=a("strong"),zmo=o("roformer"),Qmo=o(" \u2014 "),DN=a("a"),Wmo=o("RoFormerTokenizer"),Hmo=o(" or "),GN=a("a"),Umo=o("RoFormerTokenizerFast"),Jmo=o(" (RoFormer model)"),Ymo=l(),_h=a("li"),Tle=a("strong"),Kmo=o("speech_to_text"),Zmo=o(" \u2014 "),ON=a("a"),ego=o("Speech2TextTokenizer"),ogo=o(" (Speech2Text model)"),rgo=l(),uh=a("li"),Mle=a("strong"),tgo=o("speech_to_text_2"),ago=o(" \u2014 "),VN=a("a"),ngo=o("Speech2Text2Tokenizer"),sgo=o(" (Speech2Text2 model)"),lgo=l(),Ps=a("li"),Ele=a("strong"),igo=o("splinter"),dgo=o(" \u2014 "),XN=a("a"),cgo=o("SplinterTokenizer"),fgo=o(" or "),zN=a("a"),mgo=o("SplinterTokenizerFast"),ggo=o(" (Splinter model)"),hgo=l(),Bs=a("li"),Cle=a("strong"),pgo=o("squeezebert"),_go=o(" \u2014 "),QN=a("a"),ugo=o("SqueezeBertTokenizer"),bgo=o(" or "),WN=a("a"),vgo=o("SqueezeBertTokenizerFast"),Fgo=o(" (SqueezeBERT model)"),Tgo=l(),Ns=a("li"),wle=a("strong"),Mgo=o("t5"),Ego=o(" \u2014 "),HN=a("a"),Cgo=o("T5Tokenizer"),wgo=o(" or "),UN=a("a"),Ago=o("T5TokenizerFast"),Lgo=o(" (T5 model)"),ygo=l(),bh=a("li"),Ale=a("strong"),xgo=o("tapas"),$go=o(" \u2014 "),JN=a("a"),kgo=o("TapasTokenizer"),Sgo=o(" (TAPAS model)"),Rgo=l(),vh=a("li"),Lle=a("strong"),Pgo=o("tapex"),Bgo=o(" \u2014 "),YN=a("a"),Ngo=o("TapexTokenizer"),Igo=o(" (TAPEX model)"),qgo=l(),Fh=a("li"),yle=a("strong"),jgo=o("transfo-xl"),Dgo=o(" \u2014 "),KN=a("a"),Ggo=o("TransfoXLTokenizer"),Ogo=o(" (Transformer-XL model)"),Vgo=l(),Is=a("li"),xle=a("strong"),Xgo=o("vilt"),zgo=o(" \u2014 "),ZN=a("a"),Qgo=o("BertTokenizer"),Wgo=o(" or "),eI=a("a"),Hgo=o("BertTokenizerFast"),Ugo=o(" (ViLT model)"),Jgo=l(),qs=a("li"),$le=a("strong"),Ygo=o("visual_bert"),Kgo=o(" \u2014 "),oI=a("a"),Zgo=o("BertTokenizer"),eho=o(" or "),rI=a("a"),oho=o("BertTokenizerFast"),rho=o(" (VisualBERT model)"),tho=l(),Th=a("li"),kle=a("strong"),aho=o("wav2vec2"),nho=o(" \u2014 "),tI=a("a"),sho=o("Wav2Vec2CTCTokenizer"),lho=o(" (Wav2Vec2 model)"),iho=l(),Mh=a("li"),Sle=a("strong"),dho=o("wav2vec2-conformer"),cho=o(" \u2014 "),aI=a("a"),fho=o("Wav2Vec2CTCTokenizer"),mho=o(" (Wav2Vec2-Conformer model)"),gho=l(),Eh=a("li"),Rle=a("strong"),hho=o("wav2vec2_phoneme"),pho=o(" \u2014 "),nI=a("a"),_ho=o("Wav2Vec2PhonemeCTCTokenizer"),uho=o(" (Wav2Vec2Phoneme model)"),bho=l(),js=a("li"),Ple=a("strong"),vho=o("xglm"),Fho=o(" \u2014 "),sI=a("a"),Tho=o("XGLMTokenizer"),Mho=o(" or "),lI=a("a"),Eho=o("XGLMTokenizerFast"),Cho=o(" (XGLM model)"),who=l(),Ch=a("li"),Ble=a("strong"),Aho=o("xlm"),Lho=o(" \u2014 "),iI=a("a"),yho=o("XLMTokenizer"),xho=o(" (XLM model)"),$ho=l(),wh=a("li"),Nle=a("strong"),kho=o("xlm-prophetnet"),Sho=o(" \u2014 "),dI=a("a"),Rho=o("XLMProphetNetTokenizer"),Pho=o(" (XLM-ProphetNet model)"),Bho=l(),Ds=a("li"),Ile=a("strong"),Nho=o("xlm-roberta"),Iho=o(" \u2014 "),cI=a("a"),qho=o("XLMRobertaTokenizer"),jho=o(" or "),fI=a("a"),Dho=o("XLMRobertaTokenizerFast"),Gho=o(" (XLM-RoBERTa model)"),Oho=l(),Gs=a("li"),qle=a("strong"),Vho=o("xlm-roberta-xl"),Xho=o(" \u2014 "),mI=a("a"),zho=o("RobertaTokenizer"),Qho=o(" or "),gI=a("a"),Who=o("RobertaTokenizerFast"),Hho=o(" (XLM-RoBERTa-XL model)"),Uho=l(),Os=a("li"),jle=a("strong"),Jho=o("xlnet"),Yho=o(" \u2014 "),hI=a("a"),Kho=o("XLNetTokenizer"),Zho=o(" or "),pI=a("a"),epo=o("XLNetTokenizerFast"),opo=o(" (XLNet model)"),rpo=l(),Vs=a("li"),Dle=a("strong"),tpo=o("yoso"),apo=o(" \u2014 "),_I=a("a"),npo=o("AlbertTokenizer"),spo=o(" or "),uI=a("a"),lpo=o("AlbertTokenizerFast"),ipo=o(" (YOSO model)"),dpo=l(),F(Ah.$$.fragment),cpo=l(),Lh=a("div"),F(J6.$$.fragment),fpo=l(),Gle=a("p"),mpo=o("Register a new tokenizer in this mapping."),LOe=l(),Ri=a("h2"),yh=a("a"),Ole=a("span"),F(Y6.$$.fragment),gpo=l(),Vle=a("span"),hpo=o("AutoFeatureExtractor"),yOe=l(),Lo=a("div"),F(K6.$$.fragment),ppo=l(),Z6=a("p"),_po=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bI=a("a"),upo=o("AutoFeatureExtractor.from_pretrained()"),bpo=o(" class method."),vpo=l(),eL=a("p"),Fpo=o("This class cannot be instantiated directly using "),Xle=a("code"),Tpo=o("__init__()"),Mpo=o(" (throws an error)."),Epo=l(),He=a("div"),F(oL.$$.fragment),Cpo=l(),zle=a("p"),wpo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Apo=l(),Sa=a("p"),Lpo=o("The feature extractor class to instantiate is selected based on the "),Qle=a("code"),ypo=o("model_type"),xpo=o(` property of the config object
(either passed as an argument or loaded from `),Wle=a("code"),$po=o("pretrained_model_name_or_path"),kpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hle=a("code"),Spo=o("pretrained_model_name_or_path"),Rpo=o(":"),Ppo=l(),Y=a("ul"),xh=a("li"),Ule=a("strong"),Bpo=o("beit"),Npo=o(" \u2014 "),vI=a("a"),Ipo=o("BeitFeatureExtractor"),qpo=o(" (BEiT model)"),jpo=l(),$h=a("li"),Jle=a("strong"),Dpo=o("clip"),Gpo=o(" \u2014 "),FI=a("a"),Opo=o("CLIPFeatureExtractor"),Vpo=o(" (CLIP model)"),Xpo=l(),kh=a("li"),Yle=a("strong"),zpo=o("convnext"),Qpo=o(" \u2014 "),TI=a("a"),Wpo=o("ConvNextFeatureExtractor"),Hpo=o(" (ConvNeXT model)"),Upo=l(),Sh=a("li"),Kle=a("strong"),Jpo=o("cvt"),Ypo=o(" \u2014 "),MI=a("a"),Kpo=o("ConvNextFeatureExtractor"),Zpo=o(" (CvT model)"),e_o=l(),Rh=a("li"),Zle=a("strong"),o_o=o("data2vec-audio"),r_o=o(" \u2014 "),EI=a("a"),t_o=o("Wav2Vec2FeatureExtractor"),a_o=o(" (Data2VecAudio model)"),n_o=l(),Ph=a("li"),eie=a("strong"),s_o=o("data2vec-vision"),l_o=o(" \u2014 "),CI=a("a"),i_o=o("BeitFeatureExtractor"),d_o=o(" (Data2VecVision model)"),c_o=l(),Bh=a("li"),oie=a("strong"),f_o=o("deit"),m_o=o(" \u2014 "),wI=a("a"),g_o=o("DeiTFeatureExtractor"),h_o=o(" (DeiT model)"),p_o=l(),Nh=a("li"),rie=a("strong"),__o=o("detr"),u_o=o(" \u2014 "),AI=a("a"),b_o=o("DetrFeatureExtractor"),v_o=o(" (DETR model)"),F_o=l(),Ih=a("li"),tie=a("strong"),T_o=o("dpt"),M_o=o(" \u2014 "),LI=a("a"),E_o=o("DPTFeatureExtractor"),C_o=o(" (DPT model)"),w_o=l(),qh=a("li"),aie=a("strong"),A_o=o("flava"),L_o=o(" \u2014 "),yI=a("a"),y_o=o("FlavaFeatureExtractor"),x_o=o(" (FLAVA model)"),$_o=l(),jh=a("li"),nie=a("strong"),k_o=o("glpn"),S_o=o(" \u2014 "),xI=a("a"),R_o=o("GLPNFeatureExtractor"),P_o=o(" (GLPN model)"),B_o=l(),Dh=a("li"),sie=a("strong"),N_o=o("hubert"),I_o=o(" \u2014 "),$I=a("a"),q_o=o("Wav2Vec2FeatureExtractor"),j_o=o(" (Hubert model)"),D_o=l(),Gh=a("li"),lie=a("strong"),G_o=o("imagegpt"),O_o=o(" \u2014 "),kI=a("a"),V_o=o("ImageGPTFeatureExtractor"),X_o=o(" (ImageGPT model)"),z_o=l(),Oh=a("li"),iie=a("strong"),Q_o=o("layoutlmv2"),W_o=o(" \u2014 "),SI=a("a"),H_o=o("LayoutLMv2FeatureExtractor"),U_o=o(" (LayoutLMv2 model)"),J_o=l(),Vh=a("li"),die=a("strong"),Y_o=o("layoutlmv3"),K_o=o(" \u2014 "),RI=a("a"),Z_o=o("LayoutLMv3FeatureExtractor"),euo=o(" (LayoutLMv3 model)"),ouo=l(),Xh=a("li"),cie=a("strong"),ruo=o("levit"),tuo=o(" \u2014 "),PI=a("a"),auo=o("LevitFeatureExtractor"),nuo=o(" (LeViT model)"),suo=l(),zh=a("li"),fie=a("strong"),luo=o("maskformer"),iuo=o(" \u2014 "),BI=a("a"),duo=o("MaskFormerFeatureExtractor"),cuo=o(" (MaskFormer model)"),fuo=l(),Qh=a("li"),mie=a("strong"),muo=o("mctct"),guo=o(" \u2014 "),NI=a("a"),huo=o("MCTCTFeatureExtractor"),puo=o(" (M-CTC-T model)"),_uo=l(),Wh=a("li"),gie=a("strong"),uuo=o("mobilenet_v1"),buo=o(" \u2014 "),II=a("a"),vuo=o("MobileNetV1FeatureExtractor"),Fuo=o(" (MobileNetV1 model)"),Tuo=l(),Hh=a("li"),hie=a("strong"),Muo=o("perceiver"),Euo=o(" \u2014 "),qI=a("a"),Cuo=o("PerceiverFeatureExtractor"),wuo=o(" (Perceiver model)"),Auo=l(),Uh=a("li"),pie=a("strong"),Luo=o("poolformer"),yuo=o(" \u2014 "),jI=a("a"),xuo=o("PoolFormerFeatureExtractor"),$uo=o(" (PoolFormer model)"),kuo=l(),Jh=a("li"),_ie=a("strong"),Suo=o("regnet"),Ruo=o(" \u2014 "),DI=a("a"),Puo=o("ConvNextFeatureExtractor"),Buo=o(" (RegNet model)"),Nuo=l(),Yh=a("li"),uie=a("strong"),Iuo=o("resnet"),quo=o(" \u2014 "),GI=a("a"),juo=o("ConvNextFeatureExtractor"),Duo=o(" (ResNet model)"),Guo=l(),Kh=a("li"),bie=a("strong"),Ouo=o("segformer"),Vuo=o(" \u2014 "),OI=a("a"),Xuo=o("SegformerFeatureExtractor"),zuo=o(" (SegFormer model)"),Quo=l(),Zh=a("li"),vie=a("strong"),Wuo=o("speech_to_text"),Huo=o(" \u2014 "),VI=a("a"),Uuo=o("Speech2TextFeatureExtractor"),Juo=o(" (Speech2Text model)"),Yuo=l(),ep=a("li"),Fie=a("strong"),Kuo=o("swin"),Zuo=o(" \u2014 "),XI=a("a"),e1o=o("ViTFeatureExtractor"),o1o=o(" (Swin Transformer model)"),r1o=l(),op=a("li"),Tie=a("strong"),t1o=o("van"),a1o=o(" \u2014 "),zI=a("a"),n1o=o("ConvNextFeatureExtractor"),s1o=o(" (VAN model)"),l1o=l(),rp=a("li"),Mie=a("strong"),i1o=o("vilt"),d1o=o(" \u2014 "),QI=a("a"),c1o=o("ViltFeatureExtractor"),f1o=o(" (ViLT model)"),m1o=l(),tp=a("li"),Eie=a("strong"),g1o=o("vit"),h1o=o(" \u2014 "),WI=a("a"),p1o=o("ViTFeatureExtractor"),_1o=o(" (ViT model)"),u1o=l(),ap=a("li"),Cie=a("strong"),b1o=o("vit_mae"),v1o=o(" \u2014 "),HI=a("a"),F1o=o("ViTFeatureExtractor"),T1o=o(" (ViTMAE model)"),M1o=l(),np=a("li"),wie=a("strong"),E1o=o("wav2vec2"),C1o=o(" \u2014 "),UI=a("a"),w1o=o("Wav2Vec2FeatureExtractor"),A1o=o(" (Wav2Vec2 model)"),L1o=l(),sp=a("li"),Aie=a("strong"),y1o=o("wav2vec2-conformer"),x1o=o(" \u2014 "),JI=a("a"),$1o=o("Wav2Vec2FeatureExtractor"),k1o=o(" (Wav2Vec2-Conformer model)"),S1o=l(),lp=a("li"),Lie=a("strong"),R1o=o("yolos"),P1o=o(" \u2014 "),YI=a("a"),B1o=o("YolosFeatureExtractor"),N1o=o(" (YOLOS model)"),I1o=l(),F(ip.$$.fragment),q1o=l(),F(dp.$$.fragment),j1o=l(),cp=a("div"),F(rL.$$.fragment),D1o=l(),yie=a("p"),G1o=o("Register a new feature extractor for this class."),xOe=l(),Pi=a("h2"),fp=a("a"),xie=a("span"),F(tL.$$.fragment),O1o=l(),$ie=a("span"),V1o=o("AutoProcessor"),$Oe=l(),yo=a("div"),F(aL.$$.fragment),X1o=l(),nL=a("p"),z1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KI=a("a"),Q1o=o("AutoProcessor.from_pretrained()"),W1o=o(" class method."),H1o=l(),sL=a("p"),U1o=o("This class cannot be instantiated directly using "),kie=a("code"),J1o=o("__init__()"),Y1o=o(" (throws an error)."),K1o=l(),Ue=a("div"),F(lL.$$.fragment),Z1o=l(),Sie=a("p"),e7o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),o7o=l(),Bi=a("p"),r7o=o("The processor class to instantiate is selected based on the "),Rie=a("code"),t7o=o("model_type"),a7o=o(` property of the config object (either
passed as an argument or loaded from `),Pie=a("code"),n7o=o("pretrained_model_name_or_path"),s7o=o(" if possible):"),l7o=l(),he=a("ul"),mp=a("li"),Bie=a("strong"),i7o=o("clip"),d7o=o(" \u2014 "),ZI=a("a"),c7o=o("CLIPProcessor"),f7o=o(" (CLIP model)"),m7o=l(),gp=a("li"),Nie=a("strong"),g7o=o("flava"),h7o=o(" \u2014 "),Iie=a("code"),p7o=o("FLAVAProcessor"),_7o=o(" (FLAVA model)"),u7o=l(),hp=a("li"),qie=a("strong"),b7o=o("layoutlmv2"),v7o=o(" \u2014 "),eq=a("a"),F7o=o("LayoutLMv2Processor"),T7o=o(" (LayoutLMv2 model)"),M7o=l(),pp=a("li"),jie=a("strong"),E7o=o("layoutlmv3"),C7o=o(" \u2014 "),oq=a("a"),w7o=o("LayoutLMv3Processor"),A7o=o(" (LayoutLMv3 model)"),L7o=l(),_p=a("li"),Die=a("strong"),y7o=o("layoutxlm"),x7o=o(" \u2014 "),rq=a("a"),$7o=o("LayoutXLMProcessor"),k7o=o(" (LayoutXLM model)"),S7o=l(),up=a("li"),Gie=a("strong"),R7o=o("sew"),P7o=o(" \u2014 "),tq=a("a"),B7o=o("Wav2Vec2Processor"),N7o=o(" (SEW model)"),I7o=l(),bp=a("li"),Oie=a("strong"),q7o=o("sew-d"),j7o=o(" \u2014 "),aq=a("a"),D7o=o("Wav2Vec2Processor"),G7o=o(" (SEW-D model)"),O7o=l(),vp=a("li"),Vie=a("strong"),V7o=o("speech_to_text"),X7o=o(" \u2014 "),nq=a("a"),z7o=o("Speech2TextProcessor"),Q7o=o(" (Speech2Text model)"),W7o=l(),Fp=a("li"),Xie=a("strong"),H7o=o("speech_to_text_2"),U7o=o(" \u2014 "),sq=a("a"),J7o=o("Speech2Text2Processor"),Y7o=o(" (Speech2Text2 model)"),K7o=l(),Tp=a("li"),zie=a("strong"),Z7o=o("trocr"),e9o=o(" \u2014 "),lq=a("a"),o9o=o("TrOCRProcessor"),r9o=o(" (TrOCR model)"),t9o=l(),Mp=a("li"),Qie=a("strong"),a9o=o("unispeech"),n9o=o(" \u2014 "),iq=a("a"),s9o=o("Wav2Vec2Processor"),l9o=o(" (UniSpeech model)"),i9o=l(),Ep=a("li"),Wie=a("strong"),d9o=o("unispeech-sat"),c9o=o(" \u2014 "),dq=a("a"),f9o=o("Wav2Vec2Processor"),m9o=o(" (UniSpeechSat model)"),g9o=l(),Cp=a("li"),Hie=a("strong"),h9o=o("vilt"),p9o=o(" \u2014 "),cq=a("a"),_9o=o("ViltProcessor"),u9o=o(" (ViLT model)"),b9o=l(),wp=a("li"),Uie=a("strong"),v9o=o("vision-text-dual-encoder"),F9o=o(" \u2014 "),fq=a("a"),T9o=o("VisionTextDualEncoderProcessor"),M9o=o(" (VisionTextDualEncoder model)"),E9o=l(),Ap=a("li"),Jie=a("strong"),C9o=o("wav2vec2"),w9o=o(" \u2014 "),mq=a("a"),A9o=o("Wav2Vec2Processor"),L9o=o(" (Wav2Vec2 model)"),y9o=l(),Lp=a("li"),Yie=a("strong"),x9o=o("wav2vec2-conformer"),$9o=o(" \u2014 "),gq=a("a"),k9o=o("Wav2Vec2Processor"),S9o=o(" (Wav2Vec2-Conformer model)"),R9o=l(),yp=a("li"),Kie=a("strong"),P9o=o("wavlm"),B9o=o(" \u2014 "),hq=a("a"),N9o=o("Wav2Vec2Processor"),I9o=o(" (WavLM model)"),q9o=l(),F(xp.$$.fragment),j9o=l(),F($p.$$.fragment),D9o=l(),kp=a("div"),F(iL.$$.fragment),G9o=l(),Zie=a("p"),O9o=o("Register a new processor for this class."),kOe=l(),Ni=a("h2"),Sp=a("a"),ede=a("span"),F(dL.$$.fragment),V9o=l(),ode=a("span"),X9o=o("AutoModel"),SOe=l(),xo=a("div"),F(cL.$$.fragment),z9o=l(),Ii=a("p"),Q9o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pq=a("a"),W9o=o("from_pretrained()"),H9o=o(" class method or the "),_q=a("a"),U9o=o("from_config()"),J9o=o(` class
method.`),Y9o=l(),fL=a("p"),K9o=o("This class cannot be instantiated directly using "),rde=a("code"),Z9o=o("__init__()"),e2o=o(" (throws an error)."),o2o=l(),nt=a("div"),F(mL.$$.fragment),r2o=l(),tde=a("p"),t2o=o("Instantiates one of the base model classes of the library from a configuration."),a2o=l(),qi=a("p"),n2o=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),s2o=o("not"),l2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uq=a("a"),i2o=o("from_pretrained()"),d2o=o(" to load the model weights."),c2o=l(),F(Rp.$$.fragment),f2o=l(),Je=a("div"),F(gL.$$.fragment),m2o=l(),nde=a("p"),g2o=o("Instantiate one of the base model classes of the library from a pretrained model."),h2o=l(),Ra=a("p"),p2o=o("The model class to instantiate is selected based on the "),sde=a("code"),_2o=o("model_type"),u2o=o(` property of the config object (either
passed as an argument or loaded from `),lde=a("code"),b2o=o("pretrained_model_name_or_path"),v2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ide=a("code"),F2o=o("pretrained_model_name_or_path"),T2o=o(":"),M2o=l(),y=a("ul"),Pp=a("li"),dde=a("strong"),E2o=o("albert"),C2o=o(" \u2014 "),bq=a("a"),w2o=o("AlbertModel"),A2o=o(" (ALBERT model)"),L2o=l(),Bp=a("li"),cde=a("strong"),y2o=o("bart"),x2o=o(" \u2014 "),vq=a("a"),$2o=o("BartModel"),k2o=o(" (BART model)"),S2o=l(),Np=a("li"),fde=a("strong"),R2o=o("beit"),P2o=o(" \u2014 "),Fq=a("a"),B2o=o("BeitModel"),N2o=o(" (BEiT model)"),I2o=l(),Ip=a("li"),mde=a("strong"),q2o=o("bert"),j2o=o(" \u2014 "),Tq=a("a"),D2o=o("BertModel"),G2o=o(" (BERT model)"),O2o=l(),qp=a("li"),gde=a("strong"),V2o=o("bert-generation"),X2o=o(" \u2014 "),Mq=a("a"),z2o=o("BertGenerationEncoder"),Q2o=o(" (Bert Generation model)"),W2o=l(),jp=a("li"),hde=a("strong"),H2o=o("big_bird"),U2o=o(" \u2014 "),Eq=a("a"),J2o=o("BigBirdModel"),Y2o=o(" (BigBird model)"),K2o=l(),Dp=a("li"),pde=a("strong"),Z2o=o("bigbird_pegasus"),ebo=o(" \u2014 "),Cq=a("a"),obo=o("BigBirdPegasusModel"),rbo=o(" (BigBird-Pegasus model)"),tbo=l(),Gp=a("li"),_de=a("strong"),abo=o("blenderbot"),nbo=o(" \u2014 "),wq=a("a"),sbo=o("BlenderbotModel"),lbo=o(" (Blenderbot model)"),ibo=l(),Op=a("li"),ude=a("strong"),dbo=o("blenderbot-small"),cbo=o(" \u2014 "),Aq=a("a"),fbo=o("BlenderbotSmallModel"),mbo=o(" (BlenderbotSmall model)"),gbo=l(),Vp=a("li"),bde=a("strong"),hbo=o("bloom"),pbo=o(" \u2014 "),Lq=a("a"),_bo=o("BloomModel"),ubo=o(" (BLOOM model)"),bbo=l(),Xp=a("li"),vde=a("strong"),vbo=o("camembert"),Fbo=o(" \u2014 "),yq=a("a"),Tbo=o("CamembertModel"),Mbo=o(" (CamemBERT model)"),Ebo=l(),zp=a("li"),Fde=a("strong"),Cbo=o("canine"),wbo=o(" \u2014 "),xq=a("a"),Abo=o("CanineModel"),Lbo=o(" (CANINE model)"),ybo=l(),Qp=a("li"),Tde=a("strong"),xbo=o("clip"),$bo=o(" \u2014 "),$q=a("a"),kbo=o("CLIPModel"),Sbo=o(" (CLIP model)"),Rbo=l(),Wp=a("li"),Mde=a("strong"),Pbo=o("codegen"),Bbo=o(" \u2014 "),kq=a("a"),Nbo=o("CodeGenModel"),Ibo=o(" (CodeGen model)"),qbo=l(),Hp=a("li"),Ede=a("strong"),jbo=o("convbert"),Dbo=o(" \u2014 "),Sq=a("a"),Gbo=o("ConvBertModel"),Obo=o(" (ConvBERT model)"),Vbo=l(),Up=a("li"),Cde=a("strong"),Xbo=o("convnext"),zbo=o(" \u2014 "),Rq=a("a"),Qbo=o("ConvNextModel"),Wbo=o(" (ConvNeXT model)"),Hbo=l(),Jp=a("li"),wde=a("strong"),Ubo=o("ctrl"),Jbo=o(" \u2014 "),Pq=a("a"),Ybo=o("CTRLModel"),Kbo=o(" (CTRL model)"),Zbo=l(),Yp=a("li"),Ade=a("strong"),evo=o("cvt"),ovo=o(" \u2014 "),Bq=a("a"),rvo=o("CvtModel"),tvo=o(" (CvT model)"),avo=l(),Kp=a("li"),Lde=a("strong"),nvo=o("data2vec-audio"),svo=o(" \u2014 "),Nq=a("a"),lvo=o("Data2VecAudioModel"),ivo=o(" (Data2VecAudio model)"),dvo=l(),Zp=a("li"),yde=a("strong"),cvo=o("data2vec-text"),fvo=o(" \u2014 "),Iq=a("a"),mvo=o("Data2VecTextModel"),gvo=o(" (Data2VecText model)"),hvo=l(),e_=a("li"),xde=a("strong"),pvo=o("data2vec-vision"),_vo=o(" \u2014 "),qq=a("a"),uvo=o("Data2VecVisionModel"),bvo=o(" (Data2VecVision model)"),vvo=l(),o_=a("li"),$de=a("strong"),Fvo=o("deberta"),Tvo=o(" \u2014 "),jq=a("a"),Mvo=o("DebertaModel"),Evo=o(" (DeBERTa model)"),Cvo=l(),r_=a("li"),kde=a("strong"),wvo=o("deberta-v2"),Avo=o(" \u2014 "),Dq=a("a"),Lvo=o("DebertaV2Model"),yvo=o(" (DeBERTa-v2 model)"),xvo=l(),t_=a("li"),Sde=a("strong"),$vo=o("decision_transformer"),kvo=o(" \u2014 "),Gq=a("a"),Svo=o("DecisionTransformerModel"),Rvo=o(" (Decision Transformer model)"),Pvo=l(),a_=a("li"),Rde=a("strong"),Bvo=o("deit"),Nvo=o(" \u2014 "),Oq=a("a"),Ivo=o("DeiTModel"),qvo=o(" (DeiT model)"),jvo=l(),n_=a("li"),Pde=a("strong"),Dvo=o("detr"),Gvo=o(" \u2014 "),Vq=a("a"),Ovo=o("DetrModel"),Vvo=o(" (DETR model)"),Xvo=l(),s_=a("li"),Bde=a("strong"),zvo=o("distilbert"),Qvo=o(" \u2014 "),Xq=a("a"),Wvo=o("DistilBertModel"),Hvo=o(" (DistilBERT model)"),Uvo=l(),l_=a("li"),Nde=a("strong"),Jvo=o("dpr"),Yvo=o(" \u2014 "),zq=a("a"),Kvo=o("DPRQuestionEncoder"),Zvo=o(" (DPR model)"),eFo=l(),i_=a("li"),Ide=a("strong"),oFo=o("dpt"),rFo=o(" \u2014 "),Qq=a("a"),tFo=o("DPTModel"),aFo=o(" (DPT model)"),nFo=l(),d_=a("li"),qde=a("strong"),sFo=o("electra"),lFo=o(" \u2014 "),Wq=a("a"),iFo=o("ElectraModel"),dFo=o(" (ELECTRA model)"),cFo=l(),c_=a("li"),jde=a("strong"),fFo=o("flaubert"),mFo=o(" \u2014 "),Hq=a("a"),gFo=o("FlaubertModel"),hFo=o(" (FlauBERT model)"),pFo=l(),f_=a("li"),Dde=a("strong"),_Fo=o("flava"),uFo=o(" \u2014 "),Uq=a("a"),bFo=o("FlavaModel"),vFo=o(" (FLAVA model)"),FFo=l(),m_=a("li"),Gde=a("strong"),TFo=o("fnet"),MFo=o(" \u2014 "),Jq=a("a"),EFo=o("FNetModel"),CFo=o(" (FNet model)"),wFo=l(),g_=a("li"),Ode=a("strong"),AFo=o("fsmt"),LFo=o(" \u2014 "),Yq=a("a"),yFo=o("FSMTModel"),xFo=o(" (FairSeq Machine-Translation model)"),$Fo=l(),Xs=a("li"),Vde=a("strong"),kFo=o("funnel"),SFo=o(" \u2014 "),Kq=a("a"),RFo=o("FunnelModel"),PFo=o(" or "),Zq=a("a"),BFo=o("FunnelBaseModel"),NFo=o(" (Funnel Transformer model)"),IFo=l(),h_=a("li"),Xde=a("strong"),qFo=o("glpn"),jFo=o(" \u2014 "),ej=a("a"),DFo=o("GLPNModel"),GFo=o(" (GLPN model)"),OFo=l(),p_=a("li"),zde=a("strong"),VFo=o("gpt2"),XFo=o(" \u2014 "),oj=a("a"),zFo=o("GPT2Model"),QFo=o(" (OpenAI GPT-2 model)"),WFo=l(),__=a("li"),Qde=a("strong"),HFo=o("gpt_neo"),UFo=o(" \u2014 "),rj=a("a"),JFo=o("GPTNeoModel"),YFo=o(" (GPT Neo model)"),KFo=l(),u_=a("li"),Wde=a("strong"),ZFo=o("gpt_neox"),eTo=o(" \u2014 "),tj=a("a"),oTo=o("GPTNeoXModel"),rTo=o(" (GPT NeoX model)"),tTo=l(),b_=a("li"),Hde=a("strong"),aTo=o("gptj"),nTo=o(" \u2014 "),aj=a("a"),sTo=o("GPTJModel"),lTo=o(" (GPT-J model)"),iTo=l(),v_=a("li"),Ude=a("strong"),dTo=o("hubert"),cTo=o(" \u2014 "),nj=a("a"),fTo=o("HubertModel"),mTo=o(" (Hubert model)"),gTo=l(),F_=a("li"),Jde=a("strong"),hTo=o("ibert"),pTo=o(" \u2014 "),sj=a("a"),_To=o("IBertModel"),uTo=o(" (I-BERT model)"),bTo=l(),T_=a("li"),Yde=a("strong"),vTo=o("imagegpt"),FTo=o(" \u2014 "),lj=a("a"),TTo=o("ImageGPTModel"),MTo=o(" (ImageGPT model)"),ETo=l(),M_=a("li"),Kde=a("strong"),CTo=o("layoutlm"),wTo=o(" \u2014 "),ij=a("a"),ATo=o("LayoutLMModel"),LTo=o(" (LayoutLM model)"),yTo=l(),E_=a("li"),Zde=a("strong"),xTo=o("layoutlmv2"),$To=o(" \u2014 "),dj=a("a"),kTo=o("LayoutLMv2Model"),STo=o(" (LayoutLMv2 model)"),RTo=l(),C_=a("li"),ece=a("strong"),PTo=o("layoutlmv3"),BTo=o(" \u2014 "),cj=a("a"),NTo=o("LayoutLMv3Model"),ITo=o(" (LayoutLMv3 model)"),qTo=l(),w_=a("li"),oce=a("strong"),jTo=o("led"),DTo=o(" \u2014 "),fj=a("a"),GTo=o("LEDModel"),OTo=o(" (LED model)"),VTo=l(),A_=a("li"),rce=a("strong"),XTo=o("levit"),zTo=o(" \u2014 "),mj=a("a"),QTo=o("LevitModel"),WTo=o(" (LeViT model)"),HTo=l(),L_=a("li"),tce=a("strong"),UTo=o("longformer"),JTo=o(" \u2014 "),gj=a("a"),YTo=o("LongformerModel"),KTo=o(" (Longformer model)"),ZTo=l(),y_=a("li"),ace=a("strong"),eMo=o("longt5"),oMo=o(" \u2014 "),hj=a("a"),rMo=o("LongT5Model"),tMo=o(" (LongT5 model)"),aMo=l(),x_=a("li"),nce=a("strong"),nMo=o("luke"),sMo=o(" \u2014 "),pj=a("a"),lMo=o("LukeModel"),iMo=o(" (LUKE model)"),dMo=l(),$_=a("li"),sce=a("strong"),cMo=o("lxmert"),fMo=o(" \u2014 "),_j=a("a"),mMo=o("LxmertModel"),gMo=o(" (LXMERT model)"),hMo=l(),k_=a("li"),lce=a("strong"),pMo=o("m2m_100"),_Mo=o(" \u2014 "),uj=a("a"),uMo=o("M2M100Model"),bMo=o(" (M2M100 model)"),vMo=l(),S_=a("li"),ice=a("strong"),FMo=o("marian"),TMo=o(" \u2014 "),bj=a("a"),MMo=o("MarianModel"),EMo=o(" (Marian model)"),CMo=l(),R_=a("li"),dce=a("strong"),wMo=o("maskformer"),AMo=o(" \u2014 "),vj=a("a"),LMo=o("MaskFormerModel"),yMo=o(" (MaskFormer model)"),xMo=l(),P_=a("li"),cce=a("strong"),$Mo=o("mbart"),kMo=o(" \u2014 "),Fj=a("a"),SMo=o("MBartModel"),RMo=o(" (mBART model)"),PMo=l(),B_=a("li"),fce=a("strong"),BMo=o("mctct"),NMo=o(" \u2014 "),Tj=a("a"),IMo=o("MCTCTModel"),qMo=o(" (M-CTC-T model)"),jMo=l(),N_=a("li"),mce=a("strong"),DMo=o("megatron-bert"),GMo=o(" \u2014 "),Mj=a("a"),OMo=o("MegatronBertModel"),VMo=o(" (Megatron-BERT model)"),XMo=l(),I_=a("li"),gce=a("strong"),zMo=o("mobilebert"),QMo=o(" \u2014 "),Ej=a("a"),WMo=o("MobileBertModel"),HMo=o(" (MobileBERT model)"),UMo=l(),q_=a("li"),hce=a("strong"),JMo=o("mobilenet_v1"),YMo=o(" \u2014 "),Cj=a("a"),KMo=o("MobileNetV1Model"),ZMo=o(" (MobileNetV1 model)"),eEo=l(),j_=a("li"),pce=a("strong"),oEo=o("mpnet"),rEo=o(" \u2014 "),wj=a("a"),tEo=o("MPNetModel"),aEo=o(" (MPNet model)"),nEo=l(),D_=a("li"),_ce=a("strong"),sEo=o("mt5"),lEo=o(" \u2014 "),Aj=a("a"),iEo=o("MT5Model"),dEo=o(" (MT5 model)"),cEo=l(),G_=a("li"),uce=a("strong"),fEo=o("nezha"),mEo=o(" \u2014 "),Lj=a("a"),gEo=o("NezhaModel"),hEo=o(" (Nezha model)"),pEo=l(),O_=a("li"),bce=a("strong"),_Eo=o("nystromformer"),uEo=o(" \u2014 "),yj=a("a"),bEo=o("NystromformerModel"),vEo=o(" (Nystr\xF6mformer model)"),FEo=l(),V_=a("li"),vce=a("strong"),TEo=o("openai-gpt"),MEo=o(" \u2014 "),xj=a("a"),EEo=o("OpenAIGPTModel"),CEo=o(" (OpenAI GPT model)"),wEo=l(),X_=a("li"),Fce=a("strong"),AEo=o("opt"),LEo=o(" \u2014 "),$j=a("a"),yEo=o("OPTModel"),xEo=o(" (OPT model)"),$Eo=l(),z_=a("li"),Tce=a("strong"),kEo=o("pegasus"),SEo=o(" \u2014 "),kj=a("a"),REo=o("PegasusModel"),PEo=o(" (Pegasus model)"),BEo=l(),Q_=a("li"),Mce=a("strong"),NEo=o("perceiver"),IEo=o(" \u2014 "),Sj=a("a"),qEo=o("PerceiverModel"),jEo=o(" (Perceiver model)"),DEo=l(),W_=a("li"),Ece=a("strong"),GEo=o("plbart"),OEo=o(" \u2014 "),Rj=a("a"),VEo=o("PLBartModel"),XEo=o(" (PLBart model)"),zEo=l(),H_=a("li"),Cce=a("strong"),QEo=o("poolformer"),WEo=o(" \u2014 "),Pj=a("a"),HEo=o("PoolFormerModel"),UEo=o(" (PoolFormer model)"),JEo=l(),U_=a("li"),wce=a("strong"),YEo=o("prophetnet"),KEo=o(" \u2014 "),Bj=a("a"),ZEo=o("ProphetNetModel"),e4o=o(" (ProphetNet model)"),o4o=l(),J_=a("li"),Ace=a("strong"),r4o=o("qdqbert"),t4o=o(" \u2014 "),Nj=a("a"),a4o=o("QDQBertModel"),n4o=o(" (QDQBert model)"),s4o=l(),Y_=a("li"),Lce=a("strong"),l4o=o("reformer"),i4o=o(" \u2014 "),Ij=a("a"),d4o=o("ReformerModel"),c4o=o(" (Reformer model)"),f4o=l(),K_=a("li"),yce=a("strong"),m4o=o("regnet"),g4o=o(" \u2014 "),qj=a("a"),h4o=o("RegNetModel"),p4o=o(" (RegNet model)"),_4o=l(),Z_=a("li"),xce=a("strong"),u4o=o("rembert"),b4o=o(" \u2014 "),jj=a("a"),v4o=o("RemBertModel"),F4o=o(" (RemBERT model)"),T4o=l(),eu=a("li"),$ce=a("strong"),M4o=o("resnet"),E4o=o(" \u2014 "),Dj=a("a"),C4o=o("ResNetModel"),w4o=o(" (ResNet model)"),A4o=l(),ou=a("li"),kce=a("strong"),L4o=o("retribert"),y4o=o(" \u2014 "),Gj=a("a"),x4o=o("RetriBertModel"),$4o=o(" (RetriBERT model)"),k4o=l(),ru=a("li"),Sce=a("strong"),S4o=o("roberta"),R4o=o(" \u2014 "),Oj=a("a"),P4o=o("RobertaModel"),B4o=o(" (RoBERTa model)"),N4o=l(),tu=a("li"),Rce=a("strong"),I4o=o("roformer"),q4o=o(" \u2014 "),Vj=a("a"),j4o=o("RoFormerModel"),D4o=o(" (RoFormer model)"),G4o=l(),au=a("li"),Pce=a("strong"),O4o=o("segformer"),V4o=o(" \u2014 "),Xj=a("a"),X4o=o("SegformerModel"),z4o=o(" (SegFormer model)"),Q4o=l(),nu=a("li"),Bce=a("strong"),W4o=o("sew"),H4o=o(" \u2014 "),zj=a("a"),U4o=o("SEWModel"),J4o=o(" (SEW model)"),Y4o=l(),su=a("li"),Nce=a("strong"),K4o=o("sew-d"),Z4o=o(" \u2014 "),Qj=a("a"),eCo=o("SEWDModel"),oCo=o(" (SEW-D model)"),rCo=l(),lu=a("li"),Ice=a("strong"),tCo=o("speech_to_text"),aCo=o(" \u2014 "),Wj=a("a"),nCo=o("Speech2TextModel"),sCo=o(" (Speech2Text model)"),lCo=l(),iu=a("li"),qce=a("strong"),iCo=o("splinter"),dCo=o(" \u2014 "),Hj=a("a"),cCo=o("SplinterModel"),fCo=o(" (Splinter model)"),mCo=l(),du=a("li"),jce=a("strong"),gCo=o("squeezebert"),hCo=o(" \u2014 "),Uj=a("a"),pCo=o("SqueezeBertModel"),_Co=o(" (SqueezeBERT model)"),uCo=l(),cu=a("li"),Dce=a("strong"),bCo=o("swin"),vCo=o(" \u2014 "),Jj=a("a"),FCo=o("SwinModel"),TCo=o(" (Swin Transformer model)"),MCo=l(),fu=a("li"),Gce=a("strong"),ECo=o("t5"),CCo=o(" \u2014 "),Yj=a("a"),wCo=o("T5Model"),ACo=o(" (T5 model)"),LCo=l(),mu=a("li"),Oce=a("strong"),yCo=o("tapas"),xCo=o(" \u2014 "),Kj=a("a"),$Co=o("TapasModel"),kCo=o(" (TAPAS model)"),SCo=l(),gu=a("li"),Vce=a("strong"),RCo=o("trajectory_transformer"),PCo=o(" \u2014 "),Zj=a("a"),BCo=o("TrajectoryTransformerModel"),NCo=o(" (Trajectory Transformer model)"),ICo=l(),hu=a("li"),Xce=a("strong"),qCo=o("transfo-xl"),jCo=o(" \u2014 "),eD=a("a"),DCo=o("TransfoXLModel"),GCo=o(" (Transformer-XL model)"),OCo=l(),pu=a("li"),zce=a("strong"),VCo=o("unispeech"),XCo=o(" \u2014 "),oD=a("a"),zCo=o("UniSpeechModel"),QCo=o(" (UniSpeech model)"),WCo=l(),_u=a("li"),Qce=a("strong"),HCo=o("unispeech-sat"),UCo=o(" \u2014 "),rD=a("a"),JCo=o("UniSpeechSatModel"),YCo=o(" (UniSpeechSat model)"),KCo=l(),uu=a("li"),Wce=a("strong"),ZCo=o("van"),e5o=o(" \u2014 "),tD=a("a"),o5o=o("VanModel"),r5o=o(" (VAN model)"),t5o=l(),bu=a("li"),Hce=a("strong"),a5o=o("vilt"),n5o=o(" \u2014 "),aD=a("a"),s5o=o("ViltModel"),l5o=o(" (ViLT model)"),i5o=l(),vu=a("li"),Uce=a("strong"),d5o=o("vision-text-dual-encoder"),c5o=o(" \u2014 "),nD=a("a"),f5o=o("VisionTextDualEncoderModel"),m5o=o(" (VisionTextDualEncoder model)"),g5o=l(),Fu=a("li"),Jce=a("strong"),h5o=o("visual_bert"),p5o=o(" \u2014 "),sD=a("a"),_5o=o("VisualBertModel"),u5o=o(" (VisualBERT model)"),b5o=l(),Tu=a("li"),Yce=a("strong"),v5o=o("vit"),F5o=o(" \u2014 "),lD=a("a"),T5o=o("ViTModel"),M5o=o(" (ViT model)"),E5o=l(),Mu=a("li"),Kce=a("strong"),C5o=o("vit_mae"),w5o=o(" \u2014 "),iD=a("a"),A5o=o("ViTMAEModel"),L5o=o(" (ViTMAE model)"),y5o=l(),Eu=a("li"),Zce=a("strong"),x5o=o("wav2vec2"),$5o=o(" \u2014 "),dD=a("a"),k5o=o("Wav2Vec2Model"),S5o=o(" (Wav2Vec2 model)"),R5o=l(),Cu=a("li"),efe=a("strong"),P5o=o("wav2vec2-conformer"),B5o=o(" \u2014 "),cD=a("a"),N5o=o("Wav2Vec2ConformerModel"),I5o=o(" (Wav2Vec2-Conformer model)"),q5o=l(),wu=a("li"),ofe=a("strong"),j5o=o("wavlm"),D5o=o(" \u2014 "),fD=a("a"),G5o=o("WavLMModel"),O5o=o(" (WavLM model)"),V5o=l(),Au=a("li"),rfe=a("strong"),X5o=o("xglm"),z5o=o(" \u2014 "),mD=a("a"),Q5o=o("XGLMModel"),W5o=o(" (XGLM model)"),H5o=l(),Lu=a("li"),tfe=a("strong"),U5o=o("xlm"),J5o=o(" \u2014 "),gD=a("a"),Y5o=o("XLMModel"),K5o=o(" (XLM model)"),Z5o=l(),yu=a("li"),afe=a("strong"),e3o=o("xlm-prophetnet"),o3o=o(" \u2014 "),hD=a("a"),r3o=o("XLMProphetNetModel"),t3o=o(" (XLM-ProphetNet model)"),a3o=l(),xu=a("li"),nfe=a("strong"),n3o=o("xlm-roberta"),s3o=o(" \u2014 "),pD=a("a"),l3o=o("XLMRobertaModel"),i3o=o(" (XLM-RoBERTa model)"),d3o=l(),$u=a("li"),sfe=a("strong"),c3o=o("xlm-roberta-xl"),f3o=o(" \u2014 "),_D=a("a"),m3o=o("XLMRobertaXLModel"),g3o=o(" (XLM-RoBERTa-XL model)"),h3o=l(),ku=a("li"),lfe=a("strong"),p3o=o("xlnet"),_3o=o(" \u2014 "),uD=a("a"),u3o=o("XLNetModel"),b3o=o(" (XLNet model)"),v3o=l(),Su=a("li"),ife=a("strong"),F3o=o("yolos"),T3o=o(" \u2014 "),bD=a("a"),M3o=o("YolosModel"),E3o=o(" (YOLOS model)"),C3o=l(),Ru=a("li"),dfe=a("strong"),w3o=o("yoso"),A3o=o(" \u2014 "),vD=a("a"),L3o=o("YosoModel"),y3o=o(" (YOSO model)"),x3o=l(),Pu=a("p"),$3o=o("The model is set in evaluation mode by default using "),cfe=a("code"),k3o=o("model.eval()"),S3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=a("code"),R3o=o("model.train()"),P3o=l(),F(Bu.$$.fragment),ROe=l(),ji=a("h2"),Nu=a("a"),mfe=a("span"),F(hL.$$.fragment),B3o=l(),gfe=a("span"),N3o=o("AutoModelForPreTraining"),POe=l(),$o=a("div"),F(pL.$$.fragment),I3o=l(),Di=a("p"),q3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FD=a("a"),j3o=o("from_pretrained()"),D3o=o(" class method or the "),TD=a("a"),G3o=o("from_config()"),O3o=o(` class
method.`),V3o=l(),_L=a("p"),X3o=o("This class cannot be instantiated directly using "),hfe=a("code"),z3o=o("__init__()"),Q3o=o(" (throws an error)."),W3o=l(),st=a("div"),F(uL.$$.fragment),H3o=l(),pfe=a("p"),U3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J3o=l(),Gi=a("p"),Y3o=o(`Note:
Loading a model from its configuration file does `),_fe=a("strong"),K3o=o("not"),Z3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=a("a"),e0o=o("from_pretrained()"),o0o=o(" to load the model weights."),r0o=l(),F(Iu.$$.fragment),t0o=l(),Ye=a("div"),F(bL.$$.fragment),a0o=l(),ufe=a("p"),n0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s0o=l(),Pa=a("p"),l0o=o("The model class to instantiate is selected based on the "),bfe=a("code"),i0o=o("model_type"),d0o=o(` property of the config object (either
passed as an argument or loaded from `),vfe=a("code"),c0o=o("pretrained_model_name_or_path"),f0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),m0o=o("pretrained_model_name_or_path"),g0o=o(":"),h0o=l(),G=a("ul"),qu=a("li"),Tfe=a("strong"),p0o=o("albert"),_0o=o(" \u2014 "),ED=a("a"),u0o=o("AlbertForPreTraining"),b0o=o(" (ALBERT model)"),v0o=l(),ju=a("li"),Mfe=a("strong"),F0o=o("bart"),T0o=o(" \u2014 "),CD=a("a"),M0o=o("BartForConditionalGeneration"),E0o=o(" (BART model)"),C0o=l(),Du=a("li"),Efe=a("strong"),w0o=o("bert"),A0o=o(" \u2014 "),wD=a("a"),L0o=o("BertForPreTraining"),y0o=o(" (BERT model)"),x0o=l(),Gu=a("li"),Cfe=a("strong"),$0o=o("big_bird"),k0o=o(" \u2014 "),AD=a("a"),S0o=o("BigBirdForPreTraining"),R0o=o(" (BigBird model)"),P0o=l(),Ou=a("li"),wfe=a("strong"),B0o=o("bloom"),N0o=o(" \u2014 "),LD=a("a"),I0o=o("BloomForCausalLM"),q0o=o(" (BLOOM model)"),j0o=l(),Vu=a("li"),Afe=a("strong"),D0o=o("camembert"),G0o=o(" \u2014 "),yD=a("a"),O0o=o("CamembertForMaskedLM"),V0o=o(" (CamemBERT model)"),X0o=l(),Xu=a("li"),Lfe=a("strong"),z0o=o("ctrl"),Q0o=o(" \u2014 "),xD=a("a"),W0o=o("CTRLLMHeadModel"),H0o=o(" (CTRL model)"),U0o=l(),zu=a("li"),yfe=a("strong"),J0o=o("data2vec-text"),Y0o=o(" \u2014 "),$D=a("a"),K0o=o("Data2VecTextForMaskedLM"),Z0o=o(" (Data2VecText model)"),ewo=l(),Qu=a("li"),xfe=a("strong"),owo=o("deberta"),rwo=o(" \u2014 "),kD=a("a"),two=o("DebertaForMaskedLM"),awo=o(" (DeBERTa model)"),nwo=l(),Wu=a("li"),$fe=a("strong"),swo=o("deberta-v2"),lwo=o(" \u2014 "),SD=a("a"),iwo=o("DebertaV2ForMaskedLM"),dwo=o(" (DeBERTa-v2 model)"),cwo=l(),Hu=a("li"),kfe=a("strong"),fwo=o("distilbert"),mwo=o(" \u2014 "),RD=a("a"),gwo=o("DistilBertForMaskedLM"),hwo=o(" (DistilBERT model)"),pwo=l(),Uu=a("li"),Sfe=a("strong"),_wo=o("electra"),uwo=o(" \u2014 "),PD=a("a"),bwo=o("ElectraForPreTraining"),vwo=o(" (ELECTRA model)"),Fwo=l(),Ju=a("li"),Rfe=a("strong"),Two=o("flaubert"),Mwo=o(" \u2014 "),BD=a("a"),Ewo=o("FlaubertWithLMHeadModel"),Cwo=o(" (FlauBERT model)"),wwo=l(),Yu=a("li"),Pfe=a("strong"),Awo=o("flava"),Lwo=o(" \u2014 "),ND=a("a"),ywo=o("FlavaForPreTraining"),xwo=o(" (FLAVA model)"),$wo=l(),Ku=a("li"),Bfe=a("strong"),kwo=o("fnet"),Swo=o(" \u2014 "),ID=a("a"),Rwo=o("FNetForPreTraining"),Pwo=o(" (FNet model)"),Bwo=l(),Zu=a("li"),Nfe=a("strong"),Nwo=o("fsmt"),Iwo=o(" \u2014 "),qD=a("a"),qwo=o("FSMTForConditionalGeneration"),jwo=o(" (FairSeq Machine-Translation model)"),Dwo=l(),e1=a("li"),Ife=a("strong"),Gwo=o("funnel"),Owo=o(" \u2014 "),jD=a("a"),Vwo=o("FunnelForPreTraining"),Xwo=o(" (Funnel Transformer model)"),zwo=l(),o1=a("li"),qfe=a("strong"),Qwo=o("gpt2"),Wwo=o(" \u2014 "),DD=a("a"),Hwo=o("GPT2LMHeadModel"),Uwo=o(" (OpenAI GPT-2 model)"),Jwo=l(),r1=a("li"),jfe=a("strong"),Ywo=o("ibert"),Kwo=o(" \u2014 "),GD=a("a"),Zwo=o("IBertForMaskedLM"),eAo=o(" (I-BERT model)"),oAo=l(),t1=a("li"),Dfe=a("strong"),rAo=o("layoutlm"),tAo=o(" \u2014 "),OD=a("a"),aAo=o("LayoutLMForMaskedLM"),nAo=o(" (LayoutLM model)"),sAo=l(),a1=a("li"),Gfe=a("strong"),lAo=o("longformer"),iAo=o(" \u2014 "),VD=a("a"),dAo=o("LongformerForMaskedLM"),cAo=o(" (Longformer model)"),fAo=l(),n1=a("li"),Ofe=a("strong"),mAo=o("lxmert"),gAo=o(" \u2014 "),XD=a("a"),hAo=o("LxmertForPreTraining"),pAo=o(" (LXMERT model)"),_Ao=l(),s1=a("li"),Vfe=a("strong"),uAo=o("megatron-bert"),bAo=o(" \u2014 "),zD=a("a"),vAo=o("MegatronBertForPreTraining"),FAo=o(" (Megatron-BERT model)"),TAo=l(),l1=a("li"),Xfe=a("strong"),MAo=o("mobilebert"),EAo=o(" \u2014 "),QD=a("a"),CAo=o("MobileBertForPreTraining"),wAo=o(" (MobileBERT model)"),AAo=l(),i1=a("li"),zfe=a("strong"),LAo=o("mpnet"),yAo=o(" \u2014 "),WD=a("a"),xAo=o("MPNetForMaskedLM"),$Ao=o(" (MPNet model)"),kAo=l(),d1=a("li"),Qfe=a("strong"),SAo=o("nezha"),RAo=o(" \u2014 "),HD=a("a"),PAo=o("NezhaForPreTraining"),BAo=o(" (Nezha model)"),NAo=l(),c1=a("li"),Wfe=a("strong"),IAo=o("openai-gpt"),qAo=o(" \u2014 "),UD=a("a"),jAo=o("OpenAIGPTLMHeadModel"),DAo=o(" (OpenAI GPT model)"),GAo=l(),f1=a("li"),Hfe=a("strong"),OAo=o("retribert"),VAo=o(" \u2014 "),JD=a("a"),XAo=o("RetriBertModel"),zAo=o(" (RetriBERT model)"),QAo=l(),m1=a("li"),Ufe=a("strong"),WAo=o("roberta"),HAo=o(" \u2014 "),YD=a("a"),UAo=o("RobertaForMaskedLM"),JAo=o(" (RoBERTa model)"),YAo=l(),g1=a("li"),Jfe=a("strong"),KAo=o("splinter"),ZAo=o(" \u2014 "),KD=a("a"),e6o=o("SplinterForPreTraining"),o6o=o(" (Splinter model)"),r6o=l(),h1=a("li"),Yfe=a("strong"),t6o=o("squeezebert"),a6o=o(" \u2014 "),ZD=a("a"),n6o=o("SqueezeBertForMaskedLM"),s6o=o(" (SqueezeBERT model)"),l6o=l(),p1=a("li"),Kfe=a("strong"),i6o=o("t5"),d6o=o(" \u2014 "),eG=a("a"),c6o=o("T5ForConditionalGeneration"),f6o=o(" (T5 model)"),m6o=l(),_1=a("li"),Zfe=a("strong"),g6o=o("tapas"),h6o=o(" \u2014 "),oG=a("a"),p6o=o("TapasForMaskedLM"),_6o=o(" (TAPAS model)"),u6o=l(),u1=a("li"),eme=a("strong"),b6o=o("transfo-xl"),v6o=o(" \u2014 "),rG=a("a"),F6o=o("TransfoXLLMHeadModel"),T6o=o(" (Transformer-XL model)"),M6o=l(),b1=a("li"),ome=a("strong"),E6o=o("unispeech"),C6o=o(" \u2014 "),tG=a("a"),w6o=o("UniSpeechForPreTraining"),A6o=o(" (UniSpeech model)"),L6o=l(),v1=a("li"),rme=a("strong"),y6o=o("unispeech-sat"),x6o=o(" \u2014 "),aG=a("a"),$6o=o("UniSpeechSatForPreTraining"),k6o=o(" (UniSpeechSat model)"),S6o=l(),F1=a("li"),tme=a("strong"),R6o=o("visual_bert"),P6o=o(" \u2014 "),nG=a("a"),B6o=o("VisualBertForPreTraining"),N6o=o(" (VisualBERT model)"),I6o=l(),T1=a("li"),ame=a("strong"),q6o=o("vit_mae"),j6o=o(" \u2014 "),sG=a("a"),D6o=o("ViTMAEForPreTraining"),G6o=o(" (ViTMAE model)"),O6o=l(),M1=a("li"),nme=a("strong"),V6o=o("wav2vec2"),X6o=o(" \u2014 "),lG=a("a"),z6o=o("Wav2Vec2ForPreTraining"),Q6o=o(" (Wav2Vec2 model)"),W6o=l(),E1=a("li"),sme=a("strong"),H6o=o("wav2vec2-conformer"),U6o=o(" \u2014 "),iG=a("a"),J6o=o("Wav2Vec2ConformerForPreTraining"),Y6o=o(" (Wav2Vec2-Conformer model)"),K6o=l(),C1=a("li"),lme=a("strong"),Z6o=o("xlm"),eLo=o(" \u2014 "),dG=a("a"),oLo=o("XLMWithLMHeadModel"),rLo=o(" (XLM model)"),tLo=l(),w1=a("li"),ime=a("strong"),aLo=o("xlm-roberta"),nLo=o(" \u2014 "),cG=a("a"),sLo=o("XLMRobertaForMaskedLM"),lLo=o(" (XLM-RoBERTa model)"),iLo=l(),A1=a("li"),dme=a("strong"),dLo=o("xlm-roberta-xl"),cLo=o(" \u2014 "),fG=a("a"),fLo=o("XLMRobertaXLForMaskedLM"),mLo=o(" (XLM-RoBERTa-XL model)"),gLo=l(),L1=a("li"),cme=a("strong"),hLo=o("xlnet"),pLo=o(" \u2014 "),mG=a("a"),_Lo=o("XLNetLMHeadModel"),uLo=o(" (XLNet model)"),bLo=l(),y1=a("p"),vLo=o("The model is set in evaluation mode by default using "),fme=a("code"),FLo=o("model.eval()"),TLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=a("code"),MLo=o("model.train()"),ELo=l(),F(x1.$$.fragment),BOe=l(),Oi=a("h2"),$1=a("a"),gme=a("span"),F(vL.$$.fragment),CLo=l(),hme=a("span"),wLo=o("AutoModelForCausalLM"),NOe=l(),ko=a("div"),F(FL.$$.fragment),ALo=l(),Vi=a("p"),LLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gG=a("a"),yLo=o("from_pretrained()"),xLo=o(" class method or the "),hG=a("a"),$Lo=o("from_config()"),kLo=o(` class
method.`),SLo=l(),TL=a("p"),RLo=o("This class cannot be instantiated directly using "),pme=a("code"),PLo=o("__init__()"),BLo=o(" (throws an error)."),NLo=l(),lt=a("div"),F(ML.$$.fragment),ILo=l(),_me=a("p"),qLo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jLo=l(),Xi=a("p"),DLo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),GLo=o("not"),OLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),VLo=o("from_pretrained()"),XLo=o(" to load the model weights."),zLo=l(),F(k1.$$.fragment),QLo=l(),Ke=a("div"),F(EL.$$.fragment),WLo=l(),bme=a("p"),HLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ULo=l(),Ba=a("p"),JLo=o("The model class to instantiate is selected based on the "),vme=a("code"),YLo=o("model_type"),KLo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),ZLo=o("pretrained_model_name_or_path"),eyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),oyo=o("pretrained_model_name_or_path"),ryo=o(":"),tyo=l(),z=a("ul"),S1=a("li"),Mme=a("strong"),ayo=o("bart"),nyo=o(" \u2014 "),_G=a("a"),syo=o("BartForCausalLM"),lyo=o(" (BART model)"),iyo=l(),R1=a("li"),Eme=a("strong"),dyo=o("bert"),cyo=o(" \u2014 "),uG=a("a"),fyo=o("BertLMHeadModel"),myo=o(" (BERT model)"),gyo=l(),P1=a("li"),Cme=a("strong"),hyo=o("bert-generation"),pyo=o(" \u2014 "),bG=a("a"),_yo=o("BertGenerationDecoder"),uyo=o(" (Bert Generation model)"),byo=l(),B1=a("li"),wme=a("strong"),vyo=o("big_bird"),Fyo=o(" \u2014 "),vG=a("a"),Tyo=o("BigBirdForCausalLM"),Myo=o(" (BigBird model)"),Eyo=l(),N1=a("li"),Ame=a("strong"),Cyo=o("bigbird_pegasus"),wyo=o(" \u2014 "),FG=a("a"),Ayo=o("BigBirdPegasusForCausalLM"),Lyo=o(" (BigBird-Pegasus model)"),yyo=l(),I1=a("li"),Lme=a("strong"),xyo=o("blenderbot"),$yo=o(" \u2014 "),TG=a("a"),kyo=o("BlenderbotForCausalLM"),Syo=o(" (Blenderbot model)"),Ryo=l(),q1=a("li"),yme=a("strong"),Pyo=o("blenderbot-small"),Byo=o(" \u2014 "),MG=a("a"),Nyo=o("BlenderbotSmallForCausalLM"),Iyo=o(" (BlenderbotSmall model)"),qyo=l(),j1=a("li"),xme=a("strong"),jyo=o("bloom"),Dyo=o(" \u2014 "),EG=a("a"),Gyo=o("BloomForCausalLM"),Oyo=o(" (BLOOM model)"),Vyo=l(),D1=a("li"),$me=a("strong"),Xyo=o("camembert"),zyo=o(" \u2014 "),CG=a("a"),Qyo=o("CamembertForCausalLM"),Wyo=o(" (CamemBERT model)"),Hyo=l(),G1=a("li"),kme=a("strong"),Uyo=o("codegen"),Jyo=o(" \u2014 "),wG=a("a"),Yyo=o("CodeGenForCausalLM"),Kyo=o(" (CodeGen model)"),Zyo=l(),O1=a("li"),Sme=a("strong"),e8o=o("ctrl"),o8o=o(" \u2014 "),AG=a("a"),r8o=o("CTRLLMHeadModel"),t8o=o(" (CTRL model)"),a8o=l(),V1=a("li"),Rme=a("strong"),n8o=o("data2vec-text"),s8o=o(" \u2014 "),LG=a("a"),l8o=o("Data2VecTextForCausalLM"),i8o=o(" (Data2VecText model)"),d8o=l(),X1=a("li"),Pme=a("strong"),c8o=o("electra"),f8o=o(" \u2014 "),yG=a("a"),m8o=o("ElectraForCausalLM"),g8o=o(" (ELECTRA model)"),h8o=l(),z1=a("li"),Bme=a("strong"),p8o=o("gpt2"),_8o=o(" \u2014 "),xG=a("a"),u8o=o("GPT2LMHeadModel"),b8o=o(" (OpenAI GPT-2 model)"),v8o=l(),Q1=a("li"),Nme=a("strong"),F8o=o("gpt_neo"),T8o=o(" \u2014 "),$G=a("a"),M8o=o("GPTNeoForCausalLM"),E8o=o(" (GPT Neo model)"),C8o=l(),W1=a("li"),Ime=a("strong"),w8o=o("gpt_neox"),A8o=o(" \u2014 "),kG=a("a"),L8o=o("GPTNeoXForCausalLM"),y8o=o(" (GPT NeoX model)"),x8o=l(),H1=a("li"),qme=a("strong"),$8o=o("gptj"),k8o=o(" \u2014 "),SG=a("a"),S8o=o("GPTJForCausalLM"),R8o=o(" (GPT-J model)"),P8o=l(),U1=a("li"),jme=a("strong"),B8o=o("marian"),N8o=o(" \u2014 "),RG=a("a"),I8o=o("MarianForCausalLM"),q8o=o(" (Marian model)"),j8o=l(),J1=a("li"),Dme=a("strong"),D8o=o("mbart"),G8o=o(" \u2014 "),PG=a("a"),O8o=o("MBartForCausalLM"),V8o=o(" (mBART model)"),X8o=l(),Y1=a("li"),Gme=a("strong"),z8o=o("megatron-bert"),Q8o=o(" \u2014 "),BG=a("a"),W8o=o("MegatronBertForCausalLM"),H8o=o(" (Megatron-BERT model)"),U8o=l(),K1=a("li"),Ome=a("strong"),J8o=o("openai-gpt"),Y8o=o(" \u2014 "),NG=a("a"),K8o=o("OpenAIGPTLMHeadModel"),Z8o=o(" (OpenAI GPT model)"),exo=l(),Z1=a("li"),Vme=a("strong"),oxo=o("opt"),rxo=o(" \u2014 "),IG=a("a"),txo=o("OPTForCausalLM"),axo=o(" (OPT model)"),nxo=l(),e7=a("li"),Xme=a("strong"),sxo=o("pegasus"),lxo=o(" \u2014 "),qG=a("a"),ixo=o("PegasusForCausalLM"),dxo=o(" (Pegasus model)"),cxo=l(),o7=a("li"),zme=a("strong"),fxo=o("plbart"),mxo=o(" \u2014 "),jG=a("a"),gxo=o("PLBartForCausalLM"),hxo=o(" (PLBart model)"),pxo=l(),r7=a("li"),Qme=a("strong"),_xo=o("prophetnet"),uxo=o(" \u2014 "),DG=a("a"),bxo=o("ProphetNetForCausalLM"),vxo=o(" (ProphetNet model)"),Fxo=l(),t7=a("li"),Wme=a("strong"),Txo=o("qdqbert"),Mxo=o(" \u2014 "),GG=a("a"),Exo=o("QDQBertLMHeadModel"),Cxo=o(" (QDQBert model)"),wxo=l(),a7=a("li"),Hme=a("strong"),Axo=o("reformer"),Lxo=o(" \u2014 "),OG=a("a"),yxo=o("ReformerModelWithLMHead"),xxo=o(" (Reformer model)"),$xo=l(),n7=a("li"),Ume=a("strong"),kxo=o("rembert"),Sxo=o(" \u2014 "),VG=a("a"),Rxo=o("RemBertForCausalLM"),Pxo=o(" (RemBERT model)"),Bxo=l(),s7=a("li"),Jme=a("strong"),Nxo=o("roberta"),Ixo=o(" \u2014 "),XG=a("a"),qxo=o("RobertaForCausalLM"),jxo=o(" (RoBERTa model)"),Dxo=l(),l7=a("li"),Yme=a("strong"),Gxo=o("roformer"),Oxo=o(" \u2014 "),zG=a("a"),Vxo=o("RoFormerForCausalLM"),Xxo=o(" (RoFormer model)"),zxo=l(),i7=a("li"),Kme=a("strong"),Qxo=o("speech_to_text_2"),Wxo=o(" \u2014 "),QG=a("a"),Hxo=o("Speech2Text2ForCausalLM"),Uxo=o(" (Speech2Text2 model)"),Jxo=l(),d7=a("li"),Zme=a("strong"),Yxo=o("transfo-xl"),Kxo=o(" \u2014 "),WG=a("a"),Zxo=o("TransfoXLLMHeadModel"),e$o=o(" (Transformer-XL model)"),o$o=l(),c7=a("li"),ege=a("strong"),r$o=o("trocr"),t$o=o(" \u2014 "),HG=a("a"),a$o=o("TrOCRForCausalLM"),n$o=o(" (TrOCR model)"),s$o=l(),f7=a("li"),oge=a("strong"),l$o=o("xglm"),i$o=o(" \u2014 "),UG=a("a"),d$o=o("XGLMForCausalLM"),c$o=o(" (XGLM model)"),f$o=l(),m7=a("li"),rge=a("strong"),m$o=o("xlm"),g$o=o(" \u2014 "),JG=a("a"),h$o=o("XLMWithLMHeadModel"),p$o=o(" (XLM model)"),_$o=l(),g7=a("li"),tge=a("strong"),u$o=o("xlm-prophetnet"),b$o=o(" \u2014 "),YG=a("a"),v$o=o("XLMProphetNetForCausalLM"),F$o=o(" (XLM-ProphetNet model)"),T$o=l(),h7=a("li"),age=a("strong"),M$o=o("xlm-roberta"),E$o=o(" \u2014 "),KG=a("a"),C$o=o("XLMRobertaForCausalLM"),w$o=o(" (XLM-RoBERTa model)"),A$o=l(),p7=a("li"),nge=a("strong"),L$o=o("xlm-roberta-xl"),y$o=o(" \u2014 "),ZG=a("a"),x$o=o("XLMRobertaXLForCausalLM"),$$o=o(" (XLM-RoBERTa-XL model)"),k$o=l(),_7=a("li"),sge=a("strong"),S$o=o("xlnet"),R$o=o(" \u2014 "),eO=a("a"),P$o=o("XLNetLMHeadModel"),B$o=o(" (XLNet model)"),N$o=l(),u7=a("p"),I$o=o("The model is set in evaluation mode by default using "),lge=a("code"),q$o=o("model.eval()"),j$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=a("code"),D$o=o("model.train()"),G$o=l(),F(b7.$$.fragment),IOe=l(),zi=a("h2"),v7=a("a"),dge=a("span"),F(CL.$$.fragment),O$o=l(),cge=a("span"),V$o=o("AutoModelForMaskedLM"),qOe=l(),So=a("div"),F(wL.$$.fragment),X$o=l(),Qi=a("p"),z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oO=a("a"),Q$o=o("from_pretrained()"),W$o=o(" class method or the "),rO=a("a"),H$o=o("from_config()"),U$o=o(` class
method.`),J$o=l(),AL=a("p"),Y$o=o("This class cannot be instantiated directly using "),fge=a("code"),K$o=o("__init__()"),Z$o=o(" (throws an error)."),eko=l(),it=a("div"),F(LL.$$.fragment),oko=l(),mge=a("p"),rko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tko=l(),Wi=a("p"),ako=o(`Note:
Loading a model from its configuration file does `),gge=a("strong"),nko=o("not"),sko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),lko=o("from_pretrained()"),iko=o(" to load the model weights."),dko=l(),F(F7.$$.fragment),cko=l(),Ze=a("div"),F(yL.$$.fragment),fko=l(),hge=a("p"),mko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gko=l(),Na=a("p"),hko=o("The model class to instantiate is selected based on the "),pge=a("code"),pko=o("model_type"),_ko=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),uko=o("pretrained_model_name_or_path"),bko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),vko=o("pretrained_model_name_or_path"),Fko=o(":"),Tko=l(),W=a("ul"),T7=a("li"),bge=a("strong"),Mko=o("albert"),Eko=o(" \u2014 "),aO=a("a"),Cko=o("AlbertForMaskedLM"),wko=o(" (ALBERT model)"),Ako=l(),M7=a("li"),vge=a("strong"),Lko=o("bart"),yko=o(" \u2014 "),nO=a("a"),xko=o("BartForConditionalGeneration"),$ko=o(" (BART model)"),kko=l(),E7=a("li"),Fge=a("strong"),Sko=o("bert"),Rko=o(" \u2014 "),sO=a("a"),Pko=o("BertForMaskedLM"),Bko=o(" (BERT model)"),Nko=l(),C7=a("li"),Tge=a("strong"),Iko=o("big_bird"),qko=o(" \u2014 "),lO=a("a"),jko=o("BigBirdForMaskedLM"),Dko=o(" (BigBird model)"),Gko=l(),w7=a("li"),Mge=a("strong"),Oko=o("camembert"),Vko=o(" \u2014 "),iO=a("a"),Xko=o("CamembertForMaskedLM"),zko=o(" (CamemBERT model)"),Qko=l(),A7=a("li"),Ege=a("strong"),Wko=o("convbert"),Hko=o(" \u2014 "),dO=a("a"),Uko=o("ConvBertForMaskedLM"),Jko=o(" (ConvBERT model)"),Yko=l(),L7=a("li"),Cge=a("strong"),Kko=o("data2vec-text"),Zko=o(" \u2014 "),cO=a("a"),eSo=o("Data2VecTextForMaskedLM"),oSo=o(" (Data2VecText model)"),rSo=l(),y7=a("li"),wge=a("strong"),tSo=o("deberta"),aSo=o(" \u2014 "),fO=a("a"),nSo=o("DebertaForMaskedLM"),sSo=o(" (DeBERTa model)"),lSo=l(),x7=a("li"),Age=a("strong"),iSo=o("deberta-v2"),dSo=o(" \u2014 "),mO=a("a"),cSo=o("DebertaV2ForMaskedLM"),fSo=o(" (DeBERTa-v2 model)"),mSo=l(),$7=a("li"),Lge=a("strong"),gSo=o("distilbert"),hSo=o(" \u2014 "),gO=a("a"),pSo=o("DistilBertForMaskedLM"),_So=o(" (DistilBERT model)"),uSo=l(),k7=a("li"),yge=a("strong"),bSo=o("electra"),vSo=o(" \u2014 "),hO=a("a"),FSo=o("ElectraForMaskedLM"),TSo=o(" (ELECTRA model)"),MSo=l(),S7=a("li"),xge=a("strong"),ESo=o("flaubert"),CSo=o(" \u2014 "),pO=a("a"),wSo=o("FlaubertWithLMHeadModel"),ASo=o(" (FlauBERT model)"),LSo=l(),R7=a("li"),$ge=a("strong"),ySo=o("fnet"),xSo=o(" \u2014 "),_O=a("a"),$So=o("FNetForMaskedLM"),kSo=o(" (FNet model)"),SSo=l(),P7=a("li"),kge=a("strong"),RSo=o("funnel"),PSo=o(" \u2014 "),uO=a("a"),BSo=o("FunnelForMaskedLM"),NSo=o(" (Funnel Transformer model)"),ISo=l(),B7=a("li"),Sge=a("strong"),qSo=o("ibert"),jSo=o(" \u2014 "),bO=a("a"),DSo=o("IBertForMaskedLM"),GSo=o(" (I-BERT model)"),OSo=l(),N7=a("li"),Rge=a("strong"),VSo=o("layoutlm"),XSo=o(" \u2014 "),vO=a("a"),zSo=o("LayoutLMForMaskedLM"),QSo=o(" (LayoutLM model)"),WSo=l(),I7=a("li"),Pge=a("strong"),HSo=o("longformer"),USo=o(" \u2014 "),FO=a("a"),JSo=o("LongformerForMaskedLM"),YSo=o(" (Longformer model)"),KSo=l(),q7=a("li"),Bge=a("strong"),ZSo=o("luke"),eRo=o(" \u2014 "),TO=a("a"),oRo=o("LukeForMaskedLM"),rRo=o(" (LUKE model)"),tRo=l(),j7=a("li"),Nge=a("strong"),aRo=o("mbart"),nRo=o(" \u2014 "),MO=a("a"),sRo=o("MBartForConditionalGeneration"),lRo=o(" (mBART model)"),iRo=l(),D7=a("li"),Ige=a("strong"),dRo=o("megatron-bert"),cRo=o(" \u2014 "),EO=a("a"),fRo=o("MegatronBertForMaskedLM"),mRo=o(" (Megatron-BERT model)"),gRo=l(),G7=a("li"),qge=a("strong"),hRo=o("mobilebert"),pRo=o(" \u2014 "),CO=a("a"),_Ro=o("MobileBertForMaskedLM"),uRo=o(" (MobileBERT model)"),bRo=l(),O7=a("li"),jge=a("strong"),vRo=o("mpnet"),FRo=o(" \u2014 "),wO=a("a"),TRo=o("MPNetForMaskedLM"),MRo=o(" (MPNet model)"),ERo=l(),V7=a("li"),Dge=a("strong"),CRo=o("nezha"),wRo=o(" \u2014 "),AO=a("a"),ARo=o("NezhaForMaskedLM"),LRo=o(" (Nezha model)"),yRo=l(),X7=a("li"),Gge=a("strong"),xRo=o("nystromformer"),$Ro=o(" \u2014 "),LO=a("a"),kRo=o("NystromformerForMaskedLM"),SRo=o(" (Nystr\xF6mformer model)"),RRo=l(),z7=a("li"),Oge=a("strong"),PRo=o("perceiver"),BRo=o(" \u2014 "),yO=a("a"),NRo=o("PerceiverForMaskedLM"),IRo=o(" (Perceiver model)"),qRo=l(),Q7=a("li"),Vge=a("strong"),jRo=o("qdqbert"),DRo=o(" \u2014 "),xO=a("a"),GRo=o("QDQBertForMaskedLM"),ORo=o(" (QDQBert model)"),VRo=l(),W7=a("li"),Xge=a("strong"),XRo=o("reformer"),zRo=o(" \u2014 "),$O=a("a"),QRo=o("ReformerForMaskedLM"),WRo=o(" (Reformer model)"),HRo=l(),H7=a("li"),zge=a("strong"),URo=o("rembert"),JRo=o(" \u2014 "),kO=a("a"),YRo=o("RemBertForMaskedLM"),KRo=o(" (RemBERT model)"),ZRo=l(),U7=a("li"),Qge=a("strong"),ePo=o("roberta"),oPo=o(" \u2014 "),SO=a("a"),rPo=o("RobertaForMaskedLM"),tPo=o(" (RoBERTa model)"),aPo=l(),J7=a("li"),Wge=a("strong"),nPo=o("roformer"),sPo=o(" \u2014 "),RO=a("a"),lPo=o("RoFormerForMaskedLM"),iPo=o(" (RoFormer model)"),dPo=l(),Y7=a("li"),Hge=a("strong"),cPo=o("squeezebert"),fPo=o(" \u2014 "),PO=a("a"),mPo=o("SqueezeBertForMaskedLM"),gPo=o(" (SqueezeBERT model)"),hPo=l(),K7=a("li"),Uge=a("strong"),pPo=o("tapas"),_Po=o(" \u2014 "),BO=a("a"),uPo=o("TapasForMaskedLM"),bPo=o(" (TAPAS model)"),vPo=l(),Z7=a("li"),Jge=a("strong"),FPo=o("wav2vec2"),TPo=o(" \u2014 "),Yge=a("code"),MPo=o("Wav2Vec2ForMaskedLM"),EPo=o(" (Wav2Vec2 model)"),CPo=l(),e9=a("li"),Kge=a("strong"),wPo=o("xlm"),APo=o(" \u2014 "),NO=a("a"),LPo=o("XLMWithLMHeadModel"),yPo=o(" (XLM model)"),xPo=l(),o9=a("li"),Zge=a("strong"),$Po=o("xlm-roberta"),kPo=o(" \u2014 "),IO=a("a"),SPo=o("XLMRobertaForMaskedLM"),RPo=o(" (XLM-RoBERTa model)"),PPo=l(),r9=a("li"),ehe=a("strong"),BPo=o("xlm-roberta-xl"),NPo=o(" \u2014 "),qO=a("a"),IPo=o("XLMRobertaXLForMaskedLM"),qPo=o(" (XLM-RoBERTa-XL model)"),jPo=l(),t9=a("li"),ohe=a("strong"),DPo=o("yoso"),GPo=o(" \u2014 "),jO=a("a"),OPo=o("YosoForMaskedLM"),VPo=o(" (YOSO model)"),XPo=l(),a9=a("p"),zPo=o("The model is set in evaluation mode by default using "),rhe=a("code"),QPo=o("model.eval()"),WPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),HPo=o("model.train()"),UPo=l(),F(n9.$$.fragment),jOe=l(),Hi=a("h2"),s9=a("a"),ahe=a("span"),F(xL.$$.fragment),JPo=l(),nhe=a("span"),YPo=o("AutoModelForSeq2SeqLM"),DOe=l(),Ro=a("div"),F($L.$$.fragment),KPo=l(),Ui=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DO=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),GO=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),kL=a("p"),nBo=o("This class cannot be instantiated directly using "),she=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),dt=a("div"),F(SL.$$.fragment),dBo=l(),lhe=a("p"),cBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fBo=l(),Ji=a("p"),mBo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=a("a"),pBo=o("from_pretrained()"),_Bo=o(" to load the model weights."),uBo=l(),F(l9.$$.fragment),bBo=l(),eo=a("div"),F(RL.$$.fragment),vBo=l(),dhe=a("p"),FBo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TBo=l(),Ia=a("p"),MBo=o("The model class to instantiate is selected based on the "),che=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),LBo=o("pretrained_model_name_or_path"),yBo=o(":"),xBo=l(),pe=a("ul"),i9=a("li"),ghe=a("strong"),$Bo=o("bart"),kBo=o(" \u2014 "),VO=a("a"),SBo=o("BartForConditionalGeneration"),RBo=o(" (BART model)"),PBo=l(),d9=a("li"),hhe=a("strong"),BBo=o("bigbird_pegasus"),NBo=o(" \u2014 "),XO=a("a"),IBo=o("BigBirdPegasusForConditionalGeneration"),qBo=o(" (BigBird-Pegasus model)"),jBo=l(),c9=a("li"),phe=a("strong"),DBo=o("blenderbot"),GBo=o(" \u2014 "),zO=a("a"),OBo=o("BlenderbotForConditionalGeneration"),VBo=o(" (Blenderbot model)"),XBo=l(),f9=a("li"),_he=a("strong"),zBo=o("blenderbot-small"),QBo=o(" \u2014 "),QO=a("a"),WBo=o("BlenderbotSmallForConditionalGeneration"),HBo=o(" (BlenderbotSmall model)"),UBo=l(),m9=a("li"),uhe=a("strong"),JBo=o("encoder-decoder"),YBo=o(" \u2014 "),WO=a("a"),KBo=o("EncoderDecoderModel"),ZBo=o(" (Encoder decoder model)"),eNo=l(),g9=a("li"),bhe=a("strong"),oNo=o("fsmt"),rNo=o(" \u2014 "),HO=a("a"),tNo=o("FSMTForConditionalGeneration"),aNo=o(" (FairSeq Machine-Translation model)"),nNo=l(),h9=a("li"),vhe=a("strong"),sNo=o("led"),lNo=o(" \u2014 "),UO=a("a"),iNo=o("LEDForConditionalGeneration"),dNo=o(" (LED model)"),cNo=l(),p9=a("li"),Fhe=a("strong"),fNo=o("longt5"),mNo=o(" \u2014 "),JO=a("a"),gNo=o("LongT5ForConditionalGeneration"),hNo=o(" (LongT5 model)"),pNo=l(),_9=a("li"),The=a("strong"),_No=o("m2m_100"),uNo=o(" \u2014 "),YO=a("a"),bNo=o("M2M100ForConditionalGeneration"),vNo=o(" (M2M100 model)"),FNo=l(),u9=a("li"),Mhe=a("strong"),TNo=o("marian"),MNo=o(" \u2014 "),KO=a("a"),ENo=o("MarianMTModel"),CNo=o(" (Marian model)"),wNo=l(),b9=a("li"),Ehe=a("strong"),ANo=o("mbart"),LNo=o(" \u2014 "),ZO=a("a"),yNo=o("MBartForConditionalGeneration"),xNo=o(" (mBART model)"),$No=l(),v9=a("li"),Che=a("strong"),kNo=o("mt5"),SNo=o(" \u2014 "),eV=a("a"),RNo=o("MT5ForConditionalGeneration"),PNo=o(" (MT5 model)"),BNo=l(),F9=a("li"),whe=a("strong"),NNo=o("pegasus"),INo=o(" \u2014 "),oV=a("a"),qNo=o("PegasusForConditionalGeneration"),jNo=o(" (Pegasus model)"),DNo=l(),T9=a("li"),Ahe=a("strong"),GNo=o("plbart"),ONo=o(" \u2014 "),rV=a("a"),VNo=o("PLBartForConditionalGeneration"),XNo=o(" (PLBart model)"),zNo=l(),M9=a("li"),Lhe=a("strong"),QNo=o("prophetnet"),WNo=o(" \u2014 "),tV=a("a"),HNo=o("ProphetNetForConditionalGeneration"),UNo=o(" (ProphetNet model)"),JNo=l(),E9=a("li"),yhe=a("strong"),YNo=o("t5"),KNo=o(" \u2014 "),aV=a("a"),ZNo=o("T5ForConditionalGeneration"),eIo=o(" (T5 model)"),oIo=l(),C9=a("li"),xhe=a("strong"),rIo=o("xlm-prophetnet"),tIo=o(" \u2014 "),nV=a("a"),aIo=o("XLMProphetNetForConditionalGeneration"),nIo=o(" (XLM-ProphetNet model)"),sIo=l(),w9=a("p"),lIo=o("The model is set in evaluation mode by default using "),$he=a("code"),iIo=o("model.eval()"),dIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),cIo=o("model.train()"),fIo=l(),F(A9.$$.fragment),GOe=l(),Yi=a("h2"),L9=a("a"),She=a("span"),F(PL.$$.fragment),mIo=l(),Rhe=a("span"),gIo=o("AutoModelForSequenceClassification"),OOe=l(),Po=a("div"),F(BL.$$.fragment),hIo=l(),Ki=a("p"),pIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sV=a("a"),_Io=o("from_pretrained()"),uIo=o(" class method or the "),lV=a("a"),bIo=o("from_config()"),vIo=o(` class
method.`),FIo=l(),NL=a("p"),TIo=o("This class cannot be instantiated directly using "),Phe=a("code"),MIo=o("__init__()"),EIo=o(" (throws an error)."),CIo=l(),ct=a("div"),F(IL.$$.fragment),wIo=l(),Bhe=a("p"),AIo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),LIo=l(),Zi=a("p"),yIo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),xIo=o("not"),$Io=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),kIo=o("from_pretrained()"),SIo=o(" to load the model weights."),RIo=l(),F(y9.$$.fragment),PIo=l(),oo=a("div"),F(qL.$$.fragment),BIo=l(),Ihe=a("p"),NIo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),IIo=l(),qa=a("p"),qIo=o("The model class to instantiate is selected based on the "),qhe=a("code"),jIo=o("model_type"),DIo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),GIo=o("pretrained_model_name_or_path"),OIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),VIo=o("pretrained_model_name_or_path"),XIo=o(":"),zIo=l(),I=a("ul"),x9=a("li"),Ghe=a("strong"),QIo=o("albert"),WIo=o(" \u2014 "),dV=a("a"),HIo=o("AlbertForSequenceClassification"),UIo=o(" (ALBERT model)"),JIo=l(),$9=a("li"),Ohe=a("strong"),YIo=o("bart"),KIo=o(" \u2014 "),cV=a("a"),ZIo=o("BartForSequenceClassification"),eqo=o(" (BART model)"),oqo=l(),k9=a("li"),Vhe=a("strong"),rqo=o("bert"),tqo=o(" \u2014 "),fV=a("a"),aqo=o("BertForSequenceClassification"),nqo=o(" (BERT model)"),sqo=l(),S9=a("li"),Xhe=a("strong"),lqo=o("big_bird"),iqo=o(" \u2014 "),mV=a("a"),dqo=o("BigBirdForSequenceClassification"),cqo=o(" (BigBird model)"),fqo=l(),R9=a("li"),zhe=a("strong"),mqo=o("bigbird_pegasus"),gqo=o(" \u2014 "),gV=a("a"),hqo=o("BigBirdPegasusForSequenceClassification"),pqo=o(" (BigBird-Pegasus model)"),_qo=l(),P9=a("li"),Qhe=a("strong"),uqo=o("bloom"),bqo=o(" \u2014 "),hV=a("a"),vqo=o("BloomForSequenceClassification"),Fqo=o(" (BLOOM model)"),Tqo=l(),B9=a("li"),Whe=a("strong"),Mqo=o("camembert"),Eqo=o(" \u2014 "),pV=a("a"),Cqo=o("CamembertForSequenceClassification"),wqo=o(" (CamemBERT model)"),Aqo=l(),N9=a("li"),Hhe=a("strong"),Lqo=o("canine"),yqo=o(" \u2014 "),_V=a("a"),xqo=o("CanineForSequenceClassification"),$qo=o(" (CANINE model)"),kqo=l(),I9=a("li"),Uhe=a("strong"),Sqo=o("convbert"),Rqo=o(" \u2014 "),uV=a("a"),Pqo=o("ConvBertForSequenceClassification"),Bqo=o(" (ConvBERT model)"),Nqo=l(),q9=a("li"),Jhe=a("strong"),Iqo=o("ctrl"),qqo=o(" \u2014 "),bV=a("a"),jqo=o("CTRLForSequenceClassification"),Dqo=o(" (CTRL model)"),Gqo=l(),j9=a("li"),Yhe=a("strong"),Oqo=o("data2vec-text"),Vqo=o(" \u2014 "),vV=a("a"),Xqo=o("Data2VecTextForSequenceClassification"),zqo=o(" (Data2VecText model)"),Qqo=l(),D9=a("li"),Khe=a("strong"),Wqo=o("deberta"),Hqo=o(" \u2014 "),FV=a("a"),Uqo=o("DebertaForSequenceClassification"),Jqo=o(" (DeBERTa model)"),Yqo=l(),G9=a("li"),Zhe=a("strong"),Kqo=o("deberta-v2"),Zqo=o(" \u2014 "),TV=a("a"),ejo=o("DebertaV2ForSequenceClassification"),ojo=o(" (DeBERTa-v2 model)"),rjo=l(),O9=a("li"),epe=a("strong"),tjo=o("distilbert"),ajo=o(" \u2014 "),MV=a("a"),njo=o("DistilBertForSequenceClassification"),sjo=o(" (DistilBERT model)"),ljo=l(),V9=a("li"),ope=a("strong"),ijo=o("electra"),djo=o(" \u2014 "),EV=a("a"),cjo=o("ElectraForSequenceClassification"),fjo=o(" (ELECTRA model)"),mjo=l(),X9=a("li"),rpe=a("strong"),gjo=o("flaubert"),hjo=o(" \u2014 "),CV=a("a"),pjo=o("FlaubertForSequenceClassification"),_jo=o(" (FlauBERT model)"),ujo=l(),z9=a("li"),tpe=a("strong"),bjo=o("fnet"),vjo=o(" \u2014 "),wV=a("a"),Fjo=o("FNetForSequenceClassification"),Tjo=o(" (FNet model)"),Mjo=l(),Q9=a("li"),ape=a("strong"),Ejo=o("funnel"),Cjo=o(" \u2014 "),AV=a("a"),wjo=o("FunnelForSequenceClassification"),Ajo=o(" (Funnel Transformer model)"),Ljo=l(),W9=a("li"),npe=a("strong"),yjo=o("gpt2"),xjo=o(" \u2014 "),LV=a("a"),$jo=o("GPT2ForSequenceClassification"),kjo=o(" (OpenAI GPT-2 model)"),Sjo=l(),H9=a("li"),spe=a("strong"),Rjo=o("gpt_neo"),Pjo=o(" \u2014 "),yV=a("a"),Bjo=o("GPTNeoForSequenceClassification"),Njo=o(" (GPT Neo model)"),Ijo=l(),U9=a("li"),lpe=a("strong"),qjo=o("gptj"),jjo=o(" \u2014 "),xV=a("a"),Djo=o("GPTJForSequenceClassification"),Gjo=o(" (GPT-J model)"),Ojo=l(),J9=a("li"),ipe=a("strong"),Vjo=o("ibert"),Xjo=o(" \u2014 "),$V=a("a"),zjo=o("IBertForSequenceClassification"),Qjo=o(" (I-BERT model)"),Wjo=l(),Y9=a("li"),dpe=a("strong"),Hjo=o("layoutlm"),Ujo=o(" \u2014 "),kV=a("a"),Jjo=o("LayoutLMForSequenceClassification"),Yjo=o(" (LayoutLM model)"),Kjo=l(),K9=a("li"),cpe=a("strong"),Zjo=o("layoutlmv2"),eDo=o(" \u2014 "),SV=a("a"),oDo=o("LayoutLMv2ForSequenceClassification"),rDo=o(" (LayoutLMv2 model)"),tDo=l(),Z9=a("li"),fpe=a("strong"),aDo=o("layoutlmv3"),nDo=o(" \u2014 "),RV=a("a"),sDo=o("LayoutLMv3ForSequenceClassification"),lDo=o(" (LayoutLMv3 model)"),iDo=l(),e2=a("li"),mpe=a("strong"),dDo=o("led"),cDo=o(" \u2014 "),PV=a("a"),fDo=o("LEDForSequenceClassification"),mDo=o(" (LED model)"),gDo=l(),o2=a("li"),gpe=a("strong"),hDo=o("longformer"),pDo=o(" \u2014 "),BV=a("a"),_Do=o("LongformerForSequenceClassification"),uDo=o(" (Longformer model)"),bDo=l(),r2=a("li"),hpe=a("strong"),vDo=o("mbart"),FDo=o(" \u2014 "),NV=a("a"),TDo=o("MBartForSequenceClassification"),MDo=o(" (mBART model)"),EDo=l(),t2=a("li"),ppe=a("strong"),CDo=o("megatron-bert"),wDo=o(" \u2014 "),IV=a("a"),ADo=o("MegatronBertForSequenceClassification"),LDo=o(" (Megatron-BERT model)"),yDo=l(),a2=a("li"),_pe=a("strong"),xDo=o("mobilebert"),$Do=o(" \u2014 "),qV=a("a"),kDo=o("MobileBertForSequenceClassification"),SDo=o(" (MobileBERT model)"),RDo=l(),n2=a("li"),upe=a("strong"),PDo=o("mpnet"),BDo=o(" \u2014 "),jV=a("a"),NDo=o("MPNetForSequenceClassification"),IDo=o(" (MPNet model)"),qDo=l(),s2=a("li"),bpe=a("strong"),jDo=o("nezha"),DDo=o(" \u2014 "),DV=a("a"),GDo=o("NezhaForSequenceClassification"),ODo=o(" (Nezha model)"),VDo=l(),l2=a("li"),vpe=a("strong"),XDo=o("nystromformer"),zDo=o(" \u2014 "),GV=a("a"),QDo=o("NystromformerForSequenceClassification"),WDo=o(" (Nystr\xF6mformer model)"),HDo=l(),i2=a("li"),Fpe=a("strong"),UDo=o("openai-gpt"),JDo=o(" \u2014 "),OV=a("a"),YDo=o("OpenAIGPTForSequenceClassification"),KDo=o(" (OpenAI GPT model)"),ZDo=l(),d2=a("li"),Tpe=a("strong"),eGo=o("perceiver"),oGo=o(" \u2014 "),VV=a("a"),rGo=o("PerceiverForSequenceClassification"),tGo=o(" (Perceiver model)"),aGo=l(),c2=a("li"),Mpe=a("strong"),nGo=o("plbart"),sGo=o(" \u2014 "),XV=a("a"),lGo=o("PLBartForSequenceClassification"),iGo=o(" (PLBart model)"),dGo=l(),f2=a("li"),Epe=a("strong"),cGo=o("qdqbert"),fGo=o(" \u2014 "),zV=a("a"),mGo=o("QDQBertForSequenceClassification"),gGo=o(" (QDQBert model)"),hGo=l(),m2=a("li"),Cpe=a("strong"),pGo=o("reformer"),_Go=o(" \u2014 "),QV=a("a"),uGo=o("ReformerForSequenceClassification"),bGo=o(" (Reformer model)"),vGo=l(),g2=a("li"),wpe=a("strong"),FGo=o("rembert"),TGo=o(" \u2014 "),WV=a("a"),MGo=o("RemBertForSequenceClassification"),EGo=o(" (RemBERT model)"),CGo=l(),h2=a("li"),Ape=a("strong"),wGo=o("roberta"),AGo=o(" \u2014 "),HV=a("a"),LGo=o("RobertaForSequenceClassification"),yGo=o(" (RoBERTa model)"),xGo=l(),p2=a("li"),Lpe=a("strong"),$Go=o("roformer"),kGo=o(" \u2014 "),UV=a("a"),SGo=o("RoFormerForSequenceClassification"),RGo=o(" (RoFormer model)"),PGo=l(),_2=a("li"),ype=a("strong"),BGo=o("squeezebert"),NGo=o(" \u2014 "),JV=a("a"),IGo=o("SqueezeBertForSequenceClassification"),qGo=o(" (SqueezeBERT model)"),jGo=l(),u2=a("li"),xpe=a("strong"),DGo=o("tapas"),GGo=o(" \u2014 "),YV=a("a"),OGo=o("TapasForSequenceClassification"),VGo=o(" (TAPAS model)"),XGo=l(),b2=a("li"),$pe=a("strong"),zGo=o("transfo-xl"),QGo=o(" \u2014 "),KV=a("a"),WGo=o("TransfoXLForSequenceClassification"),HGo=o(" (Transformer-XL model)"),UGo=l(),v2=a("li"),kpe=a("strong"),JGo=o("xlm"),YGo=o(" \u2014 "),ZV=a("a"),KGo=o("XLMForSequenceClassification"),ZGo=o(" (XLM model)"),eOo=l(),F2=a("li"),Spe=a("strong"),oOo=o("xlm-roberta"),rOo=o(" \u2014 "),eX=a("a"),tOo=o("XLMRobertaForSequenceClassification"),aOo=o(" (XLM-RoBERTa model)"),nOo=l(),T2=a("li"),Rpe=a("strong"),sOo=o("xlm-roberta-xl"),lOo=o(" \u2014 "),oX=a("a"),iOo=o("XLMRobertaXLForSequenceClassification"),dOo=o(" (XLM-RoBERTa-XL model)"),cOo=l(),M2=a("li"),Ppe=a("strong"),fOo=o("xlnet"),mOo=o(" \u2014 "),rX=a("a"),gOo=o("XLNetForSequenceClassification"),hOo=o(" (XLNet model)"),pOo=l(),E2=a("li"),Bpe=a("strong"),_Oo=o("yoso"),uOo=o(" \u2014 "),tX=a("a"),bOo=o("YosoForSequenceClassification"),vOo=o(" (YOSO model)"),FOo=l(),C2=a("p"),TOo=o("The model is set in evaluation mode by default using "),Npe=a("code"),MOo=o("model.eval()"),EOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=a("code"),COo=o("model.train()"),wOo=l(),F(w2.$$.fragment),VOe=l(),ed=a("h2"),A2=a("a"),qpe=a("span"),F(jL.$$.fragment),AOo=l(),jpe=a("span"),LOo=o("AutoModelForMultipleChoice"),XOe=l(),Bo=a("div"),F(DL.$$.fragment),yOo=l(),od=a("p"),xOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aX=a("a"),$Oo=o("from_pretrained()"),kOo=o(" class method or the "),nX=a("a"),SOo=o("from_config()"),ROo=o(` class
method.`),POo=l(),GL=a("p"),BOo=o("This class cannot be instantiated directly using "),Dpe=a("code"),NOo=o("__init__()"),IOo=o(" (throws an error)."),qOo=l(),ft=a("div"),F(OL.$$.fragment),jOo=l(),Gpe=a("p"),DOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GOo=l(),rd=a("p"),OOo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),VOo=o("not"),XOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),zOo=o("from_pretrained()"),QOo=o(" to load the model weights."),WOo=l(),F(L2.$$.fragment),HOo=l(),ro=a("div"),F(VL.$$.fragment),UOo=l(),Vpe=a("p"),JOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YOo=l(),ja=a("p"),KOo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),ZOo=o("model_type"),eVo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),oVo=o("pretrained_model_name_or_path"),rVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),tVo=o("pretrained_model_name_or_path"),aVo=o(":"),nVo=l(),Z=a("ul"),y2=a("li"),Wpe=a("strong"),sVo=o("albert"),lVo=o(" \u2014 "),lX=a("a"),iVo=o("AlbertForMultipleChoice"),dVo=o(" (ALBERT model)"),cVo=l(),x2=a("li"),Hpe=a("strong"),fVo=o("bert"),mVo=o(" \u2014 "),iX=a("a"),gVo=o("BertForMultipleChoice"),hVo=o(" (BERT model)"),pVo=l(),$2=a("li"),Upe=a("strong"),_Vo=o("big_bird"),uVo=o(" \u2014 "),dX=a("a"),bVo=o("BigBirdForMultipleChoice"),vVo=o(" (BigBird model)"),FVo=l(),k2=a("li"),Jpe=a("strong"),TVo=o("camembert"),MVo=o(" \u2014 "),cX=a("a"),EVo=o("CamembertForMultipleChoice"),CVo=o(" (CamemBERT model)"),wVo=l(),S2=a("li"),Ype=a("strong"),AVo=o("canine"),LVo=o(" \u2014 "),fX=a("a"),yVo=o("CanineForMultipleChoice"),xVo=o(" (CANINE model)"),$Vo=l(),R2=a("li"),Kpe=a("strong"),kVo=o("convbert"),SVo=o(" \u2014 "),mX=a("a"),RVo=o("ConvBertForMultipleChoice"),PVo=o(" (ConvBERT model)"),BVo=l(),P2=a("li"),Zpe=a("strong"),NVo=o("data2vec-text"),IVo=o(" \u2014 "),gX=a("a"),qVo=o("Data2VecTextForMultipleChoice"),jVo=o(" (Data2VecText model)"),DVo=l(),B2=a("li"),e_e=a("strong"),GVo=o("deberta-v2"),OVo=o(" \u2014 "),hX=a("a"),VVo=o("DebertaV2ForMultipleChoice"),XVo=o(" (DeBERTa-v2 model)"),zVo=l(),N2=a("li"),o_e=a("strong"),QVo=o("distilbert"),WVo=o(" \u2014 "),pX=a("a"),HVo=o("DistilBertForMultipleChoice"),UVo=o(" (DistilBERT model)"),JVo=l(),I2=a("li"),r_e=a("strong"),YVo=o("electra"),KVo=o(" \u2014 "),_X=a("a"),ZVo=o("ElectraForMultipleChoice"),eXo=o(" (ELECTRA model)"),oXo=l(),q2=a("li"),t_e=a("strong"),rXo=o("flaubert"),tXo=o(" \u2014 "),uX=a("a"),aXo=o("FlaubertForMultipleChoice"),nXo=o(" (FlauBERT model)"),sXo=l(),j2=a("li"),a_e=a("strong"),lXo=o("fnet"),iXo=o(" \u2014 "),bX=a("a"),dXo=o("FNetForMultipleChoice"),cXo=o(" (FNet model)"),fXo=l(),D2=a("li"),n_e=a("strong"),mXo=o("funnel"),gXo=o(" \u2014 "),vX=a("a"),hXo=o("FunnelForMultipleChoice"),pXo=o(" (Funnel Transformer model)"),_Xo=l(),G2=a("li"),s_e=a("strong"),uXo=o("ibert"),bXo=o(" \u2014 "),FX=a("a"),vXo=o("IBertForMultipleChoice"),FXo=o(" (I-BERT model)"),TXo=l(),O2=a("li"),l_e=a("strong"),MXo=o("longformer"),EXo=o(" \u2014 "),TX=a("a"),CXo=o("LongformerForMultipleChoice"),wXo=o(" (Longformer model)"),AXo=l(),V2=a("li"),i_e=a("strong"),LXo=o("megatron-bert"),yXo=o(" \u2014 "),MX=a("a"),xXo=o("MegatronBertForMultipleChoice"),$Xo=o(" (Megatron-BERT model)"),kXo=l(),X2=a("li"),d_e=a("strong"),SXo=o("mobilebert"),RXo=o(" \u2014 "),EX=a("a"),PXo=o("MobileBertForMultipleChoice"),BXo=o(" (MobileBERT model)"),NXo=l(),z2=a("li"),c_e=a("strong"),IXo=o("mpnet"),qXo=o(" \u2014 "),CX=a("a"),jXo=o("MPNetForMultipleChoice"),DXo=o(" (MPNet model)"),GXo=l(),Q2=a("li"),f_e=a("strong"),OXo=o("nezha"),VXo=o(" \u2014 "),wX=a("a"),XXo=o("NezhaForMultipleChoice"),zXo=o(" (Nezha model)"),QXo=l(),W2=a("li"),m_e=a("strong"),WXo=o("nystromformer"),HXo=o(" \u2014 "),AX=a("a"),UXo=o("NystromformerForMultipleChoice"),JXo=o(" (Nystr\xF6mformer model)"),YXo=l(),H2=a("li"),g_e=a("strong"),KXo=o("qdqbert"),ZXo=o(" \u2014 "),LX=a("a"),ezo=o("QDQBertForMultipleChoice"),ozo=o(" (QDQBert model)"),rzo=l(),U2=a("li"),h_e=a("strong"),tzo=o("rembert"),azo=o(" \u2014 "),yX=a("a"),nzo=o("RemBertForMultipleChoice"),szo=o(" (RemBERT model)"),lzo=l(),J2=a("li"),p_e=a("strong"),izo=o("roberta"),dzo=o(" \u2014 "),xX=a("a"),czo=o("RobertaForMultipleChoice"),fzo=o(" (RoBERTa model)"),mzo=l(),Y2=a("li"),__e=a("strong"),gzo=o("roformer"),hzo=o(" \u2014 "),$X=a("a"),pzo=o("RoFormerForMultipleChoice"),_zo=o(" (RoFormer model)"),uzo=l(),K2=a("li"),u_e=a("strong"),bzo=o("squeezebert"),vzo=o(" \u2014 "),kX=a("a"),Fzo=o("SqueezeBertForMultipleChoice"),Tzo=o(" (SqueezeBERT model)"),Mzo=l(),Z2=a("li"),b_e=a("strong"),Ezo=o("xlm"),Czo=o(" \u2014 "),SX=a("a"),wzo=o("XLMForMultipleChoice"),Azo=o(" (XLM model)"),Lzo=l(),eb=a("li"),v_e=a("strong"),yzo=o("xlm-roberta"),xzo=o(" \u2014 "),RX=a("a"),$zo=o("XLMRobertaForMultipleChoice"),kzo=o(" (XLM-RoBERTa model)"),Szo=l(),ob=a("li"),F_e=a("strong"),Rzo=o("xlm-roberta-xl"),Pzo=o(" \u2014 "),PX=a("a"),Bzo=o("XLMRobertaXLForMultipleChoice"),Nzo=o(" (XLM-RoBERTa-XL model)"),Izo=l(),rb=a("li"),T_e=a("strong"),qzo=o("xlnet"),jzo=o(" \u2014 "),BX=a("a"),Dzo=o("XLNetForMultipleChoice"),Gzo=o(" (XLNet model)"),Ozo=l(),tb=a("li"),M_e=a("strong"),Vzo=o("yoso"),Xzo=o(" \u2014 "),NX=a("a"),zzo=o("YosoForMultipleChoice"),Qzo=o(" (YOSO model)"),Wzo=l(),ab=a("p"),Hzo=o("The model is set in evaluation mode by default using "),E_e=a("code"),Uzo=o("model.eval()"),Jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),Yzo=o("model.train()"),Kzo=l(),F(nb.$$.fragment),zOe=l(),td=a("h2"),sb=a("a"),w_e=a("span"),F(XL.$$.fragment),Zzo=l(),A_e=a("span"),eQo=o("AutoModelForNextSentencePrediction"),QOe=l(),No=a("div"),F(zL.$$.fragment),oQo=l(),ad=a("p"),rQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IX=a("a"),tQo=o("from_pretrained()"),aQo=o(" class method or the "),qX=a("a"),nQo=o("from_config()"),sQo=o(` class
method.`),lQo=l(),QL=a("p"),iQo=o("This class cannot be instantiated directly using "),L_e=a("code"),dQo=o("__init__()"),cQo=o(" (throws an error)."),fQo=l(),mt=a("div"),F(WL.$$.fragment),mQo=l(),y_e=a("p"),gQo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hQo=l(),nd=a("p"),pQo=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),_Qo=o("not"),uQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),bQo=o("from_pretrained()"),vQo=o(" to load the model weights."),FQo=l(),F(lb.$$.fragment),TQo=l(),to=a("div"),F(HL.$$.fragment),MQo=l(),$_e=a("p"),EQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CQo=l(),Da=a("p"),wQo=o("The model class to instantiate is selected based on the "),k_e=a("code"),AQo=o("model_type"),LQo=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),yQo=o("pretrained_model_name_or_path"),xQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),$Qo=o("pretrained_model_name_or_path"),kQo=o(":"),SQo=l(),Io=a("ul"),ib=a("li"),P_e=a("strong"),RQo=o("bert"),PQo=o(" \u2014 "),DX=a("a"),BQo=o("BertForNextSentencePrediction"),NQo=o(" (BERT model)"),IQo=l(),db=a("li"),B_e=a("strong"),qQo=o("fnet"),jQo=o(" \u2014 "),GX=a("a"),DQo=o("FNetForNextSentencePrediction"),GQo=o(" (FNet model)"),OQo=l(),cb=a("li"),N_e=a("strong"),VQo=o("megatron-bert"),XQo=o(" \u2014 "),OX=a("a"),zQo=o("MegatronBertForNextSentencePrediction"),QQo=o(" (Megatron-BERT model)"),WQo=l(),fb=a("li"),I_e=a("strong"),HQo=o("mobilebert"),UQo=o(" \u2014 "),VX=a("a"),JQo=o("MobileBertForNextSentencePrediction"),YQo=o(" (MobileBERT model)"),KQo=l(),mb=a("li"),q_e=a("strong"),ZQo=o("nezha"),eWo=o(" \u2014 "),XX=a("a"),oWo=o("NezhaForNextSentencePrediction"),rWo=o(" (Nezha model)"),tWo=l(),gb=a("li"),j_e=a("strong"),aWo=o("qdqbert"),nWo=o(" \u2014 "),zX=a("a"),sWo=o("QDQBertForNextSentencePrediction"),lWo=o(" (QDQBert model)"),iWo=l(),hb=a("p"),dWo=o("The model is set in evaluation mode by default using "),D_e=a("code"),cWo=o("model.eval()"),fWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),mWo=o("model.train()"),gWo=l(),F(pb.$$.fragment),WOe=l(),sd=a("h2"),_b=a("a"),O_e=a("span"),F(UL.$$.fragment),hWo=l(),V_e=a("span"),pWo=o("AutoModelForTokenClassification"),HOe=l(),qo=a("div"),F(JL.$$.fragment),_Wo=l(),ld=a("p"),uWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QX=a("a"),bWo=o("from_pretrained()"),vWo=o(" class method or the "),WX=a("a"),FWo=o("from_config()"),TWo=o(` class
method.`),MWo=l(),YL=a("p"),EWo=o("This class cannot be instantiated directly using "),X_e=a("code"),CWo=o("__init__()"),wWo=o(" (throws an error)."),AWo=l(),gt=a("div"),F(KL.$$.fragment),LWo=l(),z_e=a("p"),yWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xWo=l(),id=a("p"),$Wo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),RWo=o("from_pretrained()"),PWo=o(" to load the model weights."),BWo=l(),F(ub.$$.fragment),NWo=l(),ao=a("div"),F(ZL.$$.fragment),IWo=l(),W_e=a("p"),qWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jWo=l(),Ga=a("p"),DWo=o("The model class to instantiate is selected based on the "),H_e=a("code"),GWo=o("model_type"),OWo=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),VWo=o("pretrained_model_name_or_path"),XWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),zWo=o("pretrained_model_name_or_path"),QWo=o(":"),WWo=l(),H=a("ul"),bb=a("li"),Y_e=a("strong"),HWo=o("albert"),UWo=o(" \u2014 "),UX=a("a"),JWo=o("AlbertForTokenClassification"),YWo=o(" (ALBERT model)"),KWo=l(),vb=a("li"),K_e=a("strong"),ZWo=o("bert"),eHo=o(" \u2014 "),JX=a("a"),oHo=o("BertForTokenClassification"),rHo=o(" (BERT model)"),tHo=l(),Fb=a("li"),Z_e=a("strong"),aHo=o("big_bird"),nHo=o(" \u2014 "),YX=a("a"),sHo=o("BigBirdForTokenClassification"),lHo=o(" (BigBird model)"),iHo=l(),Tb=a("li"),eue=a("strong"),dHo=o("bloom"),cHo=o(" \u2014 "),KX=a("a"),fHo=o("BloomForTokenClassification"),mHo=o(" (BLOOM model)"),gHo=l(),Mb=a("li"),oue=a("strong"),hHo=o("camembert"),pHo=o(" \u2014 "),ZX=a("a"),_Ho=o("CamembertForTokenClassification"),uHo=o(" (CamemBERT model)"),bHo=l(),Eb=a("li"),rue=a("strong"),vHo=o("canine"),FHo=o(" \u2014 "),ez=a("a"),THo=o("CanineForTokenClassification"),MHo=o(" (CANINE model)"),EHo=l(),Cb=a("li"),tue=a("strong"),CHo=o("convbert"),wHo=o(" \u2014 "),oz=a("a"),AHo=o("ConvBertForTokenClassification"),LHo=o(" (ConvBERT model)"),yHo=l(),wb=a("li"),aue=a("strong"),xHo=o("data2vec-text"),$Ho=o(" \u2014 "),rz=a("a"),kHo=o("Data2VecTextForTokenClassification"),SHo=o(" (Data2VecText model)"),RHo=l(),Ab=a("li"),nue=a("strong"),PHo=o("deberta"),BHo=o(" \u2014 "),tz=a("a"),NHo=o("DebertaForTokenClassification"),IHo=o(" (DeBERTa model)"),qHo=l(),Lb=a("li"),sue=a("strong"),jHo=o("deberta-v2"),DHo=o(" \u2014 "),az=a("a"),GHo=o("DebertaV2ForTokenClassification"),OHo=o(" (DeBERTa-v2 model)"),VHo=l(),yb=a("li"),lue=a("strong"),XHo=o("distilbert"),zHo=o(" \u2014 "),nz=a("a"),QHo=o("DistilBertForTokenClassification"),WHo=o(" (DistilBERT model)"),HHo=l(),xb=a("li"),iue=a("strong"),UHo=o("electra"),JHo=o(" \u2014 "),sz=a("a"),YHo=o("ElectraForTokenClassification"),KHo=o(" (ELECTRA model)"),ZHo=l(),$b=a("li"),due=a("strong"),eUo=o("flaubert"),oUo=o(" \u2014 "),lz=a("a"),rUo=o("FlaubertForTokenClassification"),tUo=o(" (FlauBERT model)"),aUo=l(),kb=a("li"),cue=a("strong"),nUo=o("fnet"),sUo=o(" \u2014 "),iz=a("a"),lUo=o("FNetForTokenClassification"),iUo=o(" (FNet model)"),dUo=l(),Sb=a("li"),fue=a("strong"),cUo=o("funnel"),fUo=o(" \u2014 "),dz=a("a"),mUo=o("FunnelForTokenClassification"),gUo=o(" (Funnel Transformer model)"),hUo=l(),Rb=a("li"),mue=a("strong"),pUo=o("gpt2"),_Uo=o(" \u2014 "),cz=a("a"),uUo=o("GPT2ForTokenClassification"),bUo=o(" (OpenAI GPT-2 model)"),vUo=l(),Pb=a("li"),gue=a("strong"),FUo=o("ibert"),TUo=o(" \u2014 "),fz=a("a"),MUo=o("IBertForTokenClassification"),EUo=o(" (I-BERT model)"),CUo=l(),Bb=a("li"),hue=a("strong"),wUo=o("layoutlm"),AUo=o(" \u2014 "),mz=a("a"),LUo=o("LayoutLMForTokenClassification"),yUo=o(" (LayoutLM model)"),xUo=l(),Nb=a("li"),pue=a("strong"),$Uo=o("layoutlmv2"),kUo=o(" \u2014 "),gz=a("a"),SUo=o("LayoutLMv2ForTokenClassification"),RUo=o(" (LayoutLMv2 model)"),PUo=l(),Ib=a("li"),_ue=a("strong"),BUo=o("layoutlmv3"),NUo=o(" \u2014 "),hz=a("a"),IUo=o("LayoutLMv3ForTokenClassification"),qUo=o(" (LayoutLMv3 model)"),jUo=l(),qb=a("li"),uue=a("strong"),DUo=o("longformer"),GUo=o(" \u2014 "),pz=a("a"),OUo=o("LongformerForTokenClassification"),VUo=o(" (Longformer model)"),XUo=l(),jb=a("li"),bue=a("strong"),zUo=o("megatron-bert"),QUo=o(" \u2014 "),_z=a("a"),WUo=o("MegatronBertForTokenClassification"),HUo=o(" (Megatron-BERT model)"),UUo=l(),Db=a("li"),vue=a("strong"),JUo=o("mobilebert"),YUo=o(" \u2014 "),uz=a("a"),KUo=o("MobileBertForTokenClassification"),ZUo=o(" (MobileBERT model)"),eJo=l(),Gb=a("li"),Fue=a("strong"),oJo=o("mpnet"),rJo=o(" \u2014 "),bz=a("a"),tJo=o("MPNetForTokenClassification"),aJo=o(" (MPNet model)"),nJo=l(),Ob=a("li"),Tue=a("strong"),sJo=o("nezha"),lJo=o(" \u2014 "),vz=a("a"),iJo=o("NezhaForTokenClassification"),dJo=o(" (Nezha model)"),cJo=l(),Vb=a("li"),Mue=a("strong"),fJo=o("nystromformer"),mJo=o(" \u2014 "),Fz=a("a"),gJo=o("NystromformerForTokenClassification"),hJo=o(" (Nystr\xF6mformer model)"),pJo=l(),Xb=a("li"),Eue=a("strong"),_Jo=o("qdqbert"),uJo=o(" \u2014 "),Tz=a("a"),bJo=o("QDQBertForTokenClassification"),vJo=o(" (QDQBert model)"),FJo=l(),zb=a("li"),Cue=a("strong"),TJo=o("rembert"),MJo=o(" \u2014 "),Mz=a("a"),EJo=o("RemBertForTokenClassification"),CJo=o(" (RemBERT model)"),wJo=l(),Qb=a("li"),wue=a("strong"),AJo=o("roberta"),LJo=o(" \u2014 "),Ez=a("a"),yJo=o("RobertaForTokenClassification"),xJo=o(" (RoBERTa model)"),$Jo=l(),Wb=a("li"),Aue=a("strong"),kJo=o("roformer"),SJo=o(" \u2014 "),Cz=a("a"),RJo=o("RoFormerForTokenClassification"),PJo=o(" (RoFormer model)"),BJo=l(),Hb=a("li"),Lue=a("strong"),NJo=o("squeezebert"),IJo=o(" \u2014 "),wz=a("a"),qJo=o("SqueezeBertForTokenClassification"),jJo=o(" (SqueezeBERT model)"),DJo=l(),Ub=a("li"),yue=a("strong"),GJo=o("xlm"),OJo=o(" \u2014 "),Az=a("a"),VJo=o("XLMForTokenClassification"),XJo=o(" (XLM model)"),zJo=l(),Jb=a("li"),xue=a("strong"),QJo=o("xlm-roberta"),WJo=o(" \u2014 "),Lz=a("a"),HJo=o("XLMRobertaForTokenClassification"),UJo=o(" (XLM-RoBERTa model)"),JJo=l(),Yb=a("li"),$ue=a("strong"),YJo=o("xlm-roberta-xl"),KJo=o(" \u2014 "),yz=a("a"),ZJo=o("XLMRobertaXLForTokenClassification"),eYo=o(" (XLM-RoBERTa-XL model)"),oYo=l(),Kb=a("li"),kue=a("strong"),rYo=o("xlnet"),tYo=o(" \u2014 "),xz=a("a"),aYo=o("XLNetForTokenClassification"),nYo=o(" (XLNet model)"),sYo=l(),Zb=a("li"),Sue=a("strong"),lYo=o("yoso"),iYo=o(" \u2014 "),$z=a("a"),dYo=o("YosoForTokenClassification"),cYo=o(" (YOSO model)"),fYo=l(),ev=a("p"),mYo=o("The model is set in evaluation mode by default using "),Rue=a("code"),gYo=o("model.eval()"),hYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),pYo=o("model.train()"),_Yo=l(),F(ov.$$.fragment),UOe=l(),dd=a("h2"),rv=a("a"),Bue=a("span"),F(ey.$$.fragment),uYo=l(),Nue=a("span"),bYo=o("AutoModelForQuestionAnswering"),JOe=l(),jo=a("div"),F(oy.$$.fragment),vYo=l(),cd=a("p"),FYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kz=a("a"),TYo=o("from_pretrained()"),MYo=o(" class method or the "),Sz=a("a"),EYo=o("from_config()"),CYo=o(` class
method.`),wYo=l(),ry=a("p"),AYo=o("This class cannot be instantiated directly using "),Iue=a("code"),LYo=o("__init__()"),yYo=o(" (throws an error)."),xYo=l(),ht=a("div"),F(ty.$$.fragment),$Yo=l(),que=a("p"),kYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SYo=l(),fd=a("p"),RYo=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),PYo=o("not"),BYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),NYo=o("from_pretrained()"),IYo=o(" to load the model weights."),qYo=l(),F(tv.$$.fragment),jYo=l(),no=a("div"),F(ay.$$.fragment),DYo=l(),Due=a("p"),GYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),OYo=l(),Oa=a("p"),VYo=o("The model class to instantiate is selected based on the "),Gue=a("code"),XYo=o("model_type"),zYo=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),QYo=o("pretrained_model_name_or_path"),WYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),HYo=o("pretrained_model_name_or_path"),UYo=o(":"),JYo=l(),V=a("ul"),av=a("li"),Xue=a("strong"),YYo=o("albert"),KYo=o(" \u2014 "),Pz=a("a"),ZYo=o("AlbertForQuestionAnswering"),eKo=o(" (ALBERT model)"),oKo=l(),nv=a("li"),zue=a("strong"),rKo=o("bart"),tKo=o(" \u2014 "),Bz=a("a"),aKo=o("BartForQuestionAnswering"),nKo=o(" (BART model)"),sKo=l(),sv=a("li"),Que=a("strong"),lKo=o("bert"),iKo=o(" \u2014 "),Nz=a("a"),dKo=o("BertForQuestionAnswering"),cKo=o(" (BERT model)"),fKo=l(),lv=a("li"),Wue=a("strong"),mKo=o("big_bird"),gKo=o(" \u2014 "),Iz=a("a"),hKo=o("BigBirdForQuestionAnswering"),pKo=o(" (BigBird model)"),_Ko=l(),iv=a("li"),Hue=a("strong"),uKo=o("bigbird_pegasus"),bKo=o(" \u2014 "),qz=a("a"),vKo=o("BigBirdPegasusForQuestionAnswering"),FKo=o(" (BigBird-Pegasus model)"),TKo=l(),dv=a("li"),Uue=a("strong"),MKo=o("camembert"),EKo=o(" \u2014 "),jz=a("a"),CKo=o("CamembertForQuestionAnswering"),wKo=o(" (CamemBERT model)"),AKo=l(),cv=a("li"),Jue=a("strong"),LKo=o("canine"),yKo=o(" \u2014 "),Dz=a("a"),xKo=o("CanineForQuestionAnswering"),$Ko=o(" (CANINE model)"),kKo=l(),fv=a("li"),Yue=a("strong"),SKo=o("convbert"),RKo=o(" \u2014 "),Gz=a("a"),PKo=o("ConvBertForQuestionAnswering"),BKo=o(" (ConvBERT model)"),NKo=l(),mv=a("li"),Kue=a("strong"),IKo=o("data2vec-text"),qKo=o(" \u2014 "),Oz=a("a"),jKo=o("Data2VecTextForQuestionAnswering"),DKo=o(" (Data2VecText model)"),GKo=l(),gv=a("li"),Zue=a("strong"),OKo=o("deberta"),VKo=o(" \u2014 "),Vz=a("a"),XKo=o("DebertaForQuestionAnswering"),zKo=o(" (DeBERTa model)"),QKo=l(),hv=a("li"),e1e=a("strong"),WKo=o("deberta-v2"),HKo=o(" \u2014 "),Xz=a("a"),UKo=o("DebertaV2ForQuestionAnswering"),JKo=o(" (DeBERTa-v2 model)"),YKo=l(),pv=a("li"),o1e=a("strong"),KKo=o("distilbert"),ZKo=o(" \u2014 "),zz=a("a"),eZo=o("DistilBertForQuestionAnswering"),oZo=o(" (DistilBERT model)"),rZo=l(),_v=a("li"),r1e=a("strong"),tZo=o("electra"),aZo=o(" \u2014 "),Qz=a("a"),nZo=o("ElectraForQuestionAnswering"),sZo=o(" (ELECTRA model)"),lZo=l(),uv=a("li"),t1e=a("strong"),iZo=o("flaubert"),dZo=o(" \u2014 "),Wz=a("a"),cZo=o("FlaubertForQuestionAnsweringSimple"),fZo=o(" (FlauBERT model)"),mZo=l(),bv=a("li"),a1e=a("strong"),gZo=o("fnet"),hZo=o(" \u2014 "),Hz=a("a"),pZo=o("FNetForQuestionAnswering"),_Zo=o(" (FNet model)"),uZo=l(),vv=a("li"),n1e=a("strong"),bZo=o("funnel"),vZo=o(" \u2014 "),Uz=a("a"),FZo=o("FunnelForQuestionAnswering"),TZo=o(" (Funnel Transformer model)"),MZo=l(),Fv=a("li"),s1e=a("strong"),EZo=o("gptj"),CZo=o(" \u2014 "),Jz=a("a"),wZo=o("GPTJForQuestionAnswering"),AZo=o(" (GPT-J model)"),LZo=l(),Tv=a("li"),l1e=a("strong"),yZo=o("ibert"),xZo=o(" \u2014 "),Yz=a("a"),$Zo=o("IBertForQuestionAnswering"),kZo=o(" (I-BERT model)"),SZo=l(),Mv=a("li"),i1e=a("strong"),RZo=o("layoutlmv2"),PZo=o(" \u2014 "),Kz=a("a"),BZo=o("LayoutLMv2ForQuestionAnswering"),NZo=o(" (LayoutLMv2 model)"),IZo=l(),Ev=a("li"),d1e=a("strong"),qZo=o("layoutlmv3"),jZo=o(" \u2014 "),Zz=a("a"),DZo=o("LayoutLMv3ForQuestionAnswering"),GZo=o(" (LayoutLMv3 model)"),OZo=l(),Cv=a("li"),c1e=a("strong"),VZo=o("led"),XZo=o(" \u2014 "),eQ=a("a"),zZo=o("LEDForQuestionAnswering"),QZo=o(" (LED model)"),WZo=l(),wv=a("li"),f1e=a("strong"),HZo=o("longformer"),UZo=o(" \u2014 "),oQ=a("a"),JZo=o("LongformerForQuestionAnswering"),YZo=o(" (Longformer model)"),KZo=l(),Av=a("li"),m1e=a("strong"),ZZo=o("lxmert"),eer=o(" \u2014 "),rQ=a("a"),oer=o("LxmertForQuestionAnswering"),rer=o(" (LXMERT model)"),ter=l(),Lv=a("li"),g1e=a("strong"),aer=o("mbart"),ner=o(" \u2014 "),tQ=a("a"),ser=o("MBartForQuestionAnswering"),ler=o(" (mBART model)"),ier=l(),yv=a("li"),h1e=a("strong"),der=o("megatron-bert"),cer=o(" \u2014 "),aQ=a("a"),fer=o("MegatronBertForQuestionAnswering"),mer=o(" (Megatron-BERT model)"),ger=l(),xv=a("li"),p1e=a("strong"),her=o("mobilebert"),per=o(" \u2014 "),nQ=a("a"),_er=o("MobileBertForQuestionAnswering"),uer=o(" (MobileBERT model)"),ber=l(),$v=a("li"),_1e=a("strong"),ver=o("mpnet"),Fer=o(" \u2014 "),sQ=a("a"),Ter=o("MPNetForQuestionAnswering"),Mer=o(" (MPNet model)"),Eer=l(),kv=a("li"),u1e=a("strong"),Cer=o("nezha"),wer=o(" \u2014 "),lQ=a("a"),Aer=o("NezhaForQuestionAnswering"),Ler=o(" (Nezha model)"),yer=l(),Sv=a("li"),b1e=a("strong"),xer=o("nystromformer"),$er=o(" \u2014 "),iQ=a("a"),ker=o("NystromformerForQuestionAnswering"),Ser=o(" (Nystr\xF6mformer model)"),Rer=l(),Rv=a("li"),v1e=a("strong"),Per=o("qdqbert"),Ber=o(" \u2014 "),dQ=a("a"),Ner=o("QDQBertForQuestionAnswering"),Ier=o(" (QDQBert model)"),qer=l(),Pv=a("li"),F1e=a("strong"),jer=o("reformer"),Der=o(" \u2014 "),cQ=a("a"),Ger=o("ReformerForQuestionAnswering"),Oer=o(" (Reformer model)"),Ver=l(),Bv=a("li"),T1e=a("strong"),Xer=o("rembert"),zer=o(" \u2014 "),fQ=a("a"),Qer=o("RemBertForQuestionAnswering"),Wer=o(" (RemBERT model)"),Her=l(),Nv=a("li"),M1e=a("strong"),Uer=o("roberta"),Jer=o(" \u2014 "),mQ=a("a"),Yer=o("RobertaForQuestionAnswering"),Ker=o(" (RoBERTa model)"),Zer=l(),Iv=a("li"),E1e=a("strong"),eor=o("roformer"),oor=o(" \u2014 "),gQ=a("a"),ror=o("RoFormerForQuestionAnswering"),tor=o(" (RoFormer model)"),aor=l(),qv=a("li"),C1e=a("strong"),nor=o("splinter"),sor=o(" \u2014 "),hQ=a("a"),lor=o("SplinterForQuestionAnswering"),ior=o(" (Splinter model)"),dor=l(),jv=a("li"),w1e=a("strong"),cor=o("squeezebert"),mor=o(" \u2014 "),pQ=a("a"),gor=o("SqueezeBertForQuestionAnswering"),hor=o(" (SqueezeBERT model)"),por=l(),Dv=a("li"),A1e=a("strong"),_or=o("xlm"),uor=o(" \u2014 "),_Q=a("a"),bor=o("XLMForQuestionAnsweringSimple"),vor=o(" (XLM model)"),For=l(),Gv=a("li"),L1e=a("strong"),Tor=o("xlm-roberta"),Mor=o(" \u2014 "),uQ=a("a"),Eor=o("XLMRobertaForQuestionAnswering"),Cor=o(" (XLM-RoBERTa model)"),wor=l(),Ov=a("li"),y1e=a("strong"),Aor=o("xlm-roberta-xl"),Lor=o(" \u2014 "),bQ=a("a"),yor=o("XLMRobertaXLForQuestionAnswering"),xor=o(" (XLM-RoBERTa-XL model)"),$or=l(),Vv=a("li"),x1e=a("strong"),kor=o("xlnet"),Sor=o(" \u2014 "),vQ=a("a"),Ror=o("XLNetForQuestionAnsweringSimple"),Por=o(" (XLNet model)"),Bor=l(),Xv=a("li"),$1e=a("strong"),Nor=o("yoso"),Ior=o(" \u2014 "),FQ=a("a"),qor=o("YosoForQuestionAnswering"),jor=o(" (YOSO model)"),Dor=l(),zv=a("p"),Gor=o("The model is set in evaluation mode by default using "),k1e=a("code"),Oor=o("model.eval()"),Vor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=a("code"),Xor=o("model.train()"),zor=l(),F(Qv.$$.fragment),YOe=l(),md=a("h2"),Wv=a("a"),R1e=a("span"),F(ny.$$.fragment),Qor=l(),P1e=a("span"),Wor=o("AutoModelForTableQuestionAnswering"),KOe=l(),Do=a("div"),F(sy.$$.fragment),Hor=l(),gd=a("p"),Uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TQ=a("a"),Jor=o("from_pretrained()"),Yor=o(" class method or the "),MQ=a("a"),Kor=o("from_config()"),Zor=o(` class
method.`),err=l(),ly=a("p"),orr=o("This class cannot be instantiated directly using "),B1e=a("code"),rrr=o("__init__()"),trr=o(" (throws an error)."),arr=l(),pt=a("div"),F(iy.$$.fragment),nrr=l(),N1e=a("p"),srr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lrr=l(),hd=a("p"),irr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),drr=o("not"),crr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),frr=o("from_pretrained()"),mrr=o(" to load the model weights."),grr=l(),F(Hv.$$.fragment),hrr=l(),so=a("div"),F(dy.$$.fragment),prr=l(),q1e=a("p"),_rr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),urr=l(),Va=a("p"),brr=o("The model class to instantiate is selected based on the "),j1e=a("code"),vrr=o("model_type"),Frr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),Trr=o("pretrained_model_name_or_path"),Mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(":"),wrr=l(),O1e=a("ul"),Uv=a("li"),V1e=a("strong"),Arr=o("tapas"),Lrr=o(" \u2014 "),CQ=a("a"),yrr=o("TapasForQuestionAnswering"),xrr=o(" (TAPAS model)"),$rr=l(),Jv=a("p"),krr=o("The model is set in evaluation mode by default using "),X1e=a("code"),Srr=o("model.eval()"),Rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),Prr=o("model.train()"),Brr=l(),F(Yv.$$.fragment),ZOe=l(),pd=a("h2"),Kv=a("a"),Q1e=a("span"),F(cy.$$.fragment),Nrr=l(),W1e=a("span"),Irr=o("AutoModelForImageClassification"),eVe=l(),Go=a("div"),F(fy.$$.fragment),qrr=l(),_d=a("p"),jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wQ=a("a"),Drr=o("from_pretrained()"),Grr=o(" class method or the "),AQ=a("a"),Orr=o("from_config()"),Vrr=o(` class
method.`),Xrr=l(),my=a("p"),zrr=o("This class cannot be instantiated directly using "),H1e=a("code"),Qrr=o("__init__()"),Wrr=o(" (throws an error)."),Hrr=l(),_t=a("div"),F(gy.$$.fragment),Urr=l(),U1e=a("p"),Jrr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yrr=l(),ud=a("p"),Krr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),Zrr=o("not"),etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),otr=o("from_pretrained()"),rtr=o(" to load the model weights."),ttr=l(),F(Zv.$$.fragment),atr=l(),lo=a("div"),F(hy.$$.fragment),ntr=l(),Y1e=a("p"),str=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ltr=l(),Xa=a("p"),itr=o("The model class to instantiate is selected based on the "),K1e=a("code"),dtr=o("model_type"),ctr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),gtr=o("pretrained_model_name_or_path"),htr=o(":"),ptr=l(),ue=a("ul"),eF=a("li"),o7e=a("strong"),_tr=o("beit"),utr=o(" \u2014 "),yQ=a("a"),btr=o("BeitForImageClassification"),vtr=o(" (BEiT model)"),Ftr=l(),oF=a("li"),r7e=a("strong"),Ttr=o("convnext"),Mtr=o(" \u2014 "),xQ=a("a"),Etr=o("ConvNextForImageClassification"),Ctr=o(" (ConvNeXT model)"),wtr=l(),rF=a("li"),t7e=a("strong"),Atr=o("cvt"),Ltr=o(" \u2014 "),$Q=a("a"),ytr=o("CvtForImageClassification"),xtr=o(" (CvT model)"),$tr=l(),tF=a("li"),a7e=a("strong"),ktr=o("data2vec-vision"),Str=o(" \u2014 "),kQ=a("a"),Rtr=o("Data2VecVisionForImageClassification"),Ptr=o(" (Data2VecVision model)"),Btr=l(),zs=a("li"),n7e=a("strong"),Ntr=o("deit"),Itr=o(" \u2014 "),SQ=a("a"),qtr=o("DeiTForImageClassification"),jtr=o(" or "),RQ=a("a"),Dtr=o("DeiTForImageClassificationWithTeacher"),Gtr=o(" (DeiT model)"),Otr=l(),aF=a("li"),s7e=a("strong"),Vtr=o("imagegpt"),Xtr=o(" \u2014 "),PQ=a("a"),ztr=o("ImageGPTForImageClassification"),Qtr=o(" (ImageGPT model)"),Wtr=l(),Qs=a("li"),l7e=a("strong"),Htr=o("levit"),Utr=o(" \u2014 "),BQ=a("a"),Jtr=o("LevitForImageClassification"),Ytr=o(" or "),NQ=a("a"),Ktr=o("LevitForImageClassificationWithTeacher"),Ztr=o(" (LeViT model)"),ear=l(),nF=a("li"),i7e=a("strong"),oar=o("mobilenet_v1"),rar=o(" \u2014 "),IQ=a("a"),tar=o("MobileNetV1ForImageClassification"),aar=o(" (MobileNetV1 model)"),nar=l(),ut=a("li"),d7e=a("strong"),sar=o("perceiver"),lar=o(" \u2014 "),qQ=a("a"),iar=o("PerceiverForImageClassificationLearned"),dar=o(" or "),jQ=a("a"),car=o("PerceiverForImageClassificationFourier"),far=o(" or "),DQ=a("a"),mar=o("PerceiverForImageClassificationConvProcessing"),gar=o(" (Perceiver model)"),har=l(),sF=a("li"),c7e=a("strong"),par=o("poolformer"),_ar=o(" \u2014 "),GQ=a("a"),uar=o("PoolFormerForImageClassification"),bar=o(" (PoolFormer model)"),Far=l(),lF=a("li"),f7e=a("strong"),Tar=o("regnet"),Mar=o(" \u2014 "),OQ=a("a"),Ear=o("RegNetForImageClassification"),Car=o(" (RegNet model)"),war=l(),iF=a("li"),m7e=a("strong"),Aar=o("resnet"),Lar=o(" \u2014 "),VQ=a("a"),yar=o("ResNetForImageClassification"),xar=o(" (ResNet model)"),$ar=l(),dF=a("li"),g7e=a("strong"),kar=o("segformer"),Sar=o(" \u2014 "),XQ=a("a"),Rar=o("SegformerForImageClassification"),Par=o(" (SegFormer model)"),Bar=l(),cF=a("li"),h7e=a("strong"),Nar=o("swin"),Iar=o(" \u2014 "),zQ=a("a"),qar=o("SwinForImageClassification"),jar=o(" (Swin Transformer model)"),Dar=l(),fF=a("li"),p7e=a("strong"),Gar=o("van"),Oar=o(" \u2014 "),QQ=a("a"),Var=o("VanForImageClassification"),Xar=o(" (VAN model)"),zar=l(),mF=a("li"),_7e=a("strong"),Qar=o("vit"),War=o(" \u2014 "),WQ=a("a"),Har=o("ViTForImageClassification"),Uar=o(" (ViT model)"),Jar=l(),gF=a("p"),Yar=o("The model is set in evaluation mode by default using "),u7e=a("code"),Kar=o("model.eval()"),Zar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b7e=a("code"),enr=o("model.train()"),onr=l(),F(hF.$$.fragment),oVe=l(),bd=a("h2"),pF=a("a"),v7e=a("span"),F(py.$$.fragment),rnr=l(),F7e=a("span"),tnr=o("AutoModelForVision2Seq"),rVe=l(),Oo=a("div"),F(_y.$$.fragment),anr=l(),vd=a("p"),nnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HQ=a("a"),snr=o("from_pretrained()"),lnr=o(" class method or the "),UQ=a("a"),inr=o("from_config()"),dnr=o(` class
method.`),cnr=l(),uy=a("p"),fnr=o("This class cannot be instantiated directly using "),T7e=a("code"),mnr=o("__init__()"),gnr=o(" (throws an error)."),hnr=l(),bt=a("div"),F(by.$$.fragment),pnr=l(),M7e=a("p"),_nr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),unr=l(),Fd=a("p"),bnr=o(`Note:
Loading a model from its configuration file does `),E7e=a("strong"),vnr=o("not"),Fnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),Tnr=o("from_pretrained()"),Mnr=o(" to load the model weights."),Enr=l(),F(_F.$$.fragment),Cnr=l(),io=a("div"),F(vy.$$.fragment),wnr=l(),C7e=a("p"),Anr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lnr=l(),za=a("p"),ynr=o("The model class to instantiate is selected based on the "),w7e=a("code"),xnr=o("model_type"),$nr=o(` property of the config object (either
passed as an argument or loaded from `),A7e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=a("code"),Rnr=o("pretrained_model_name_or_path"),Pnr=o(":"),Bnr=l(),y7e=a("ul"),uF=a("li"),x7e=a("strong"),Nnr=o("vision-encoder-decoder"),Inr=o(" \u2014 "),YQ=a("a"),qnr=o("VisionEncoderDecoderModel"),jnr=o(" (Vision Encoder decoder model)"),Dnr=l(),bF=a("p"),Gnr=o("The model is set in evaluation mode by default using "),$7e=a("code"),Onr=o("model.eval()"),Vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k7e=a("code"),Xnr=o("model.train()"),znr=l(),F(vF.$$.fragment),tVe=l(),Td=a("h2"),FF=a("a"),S7e=a("span"),F(Fy.$$.fragment),Qnr=l(),R7e=a("span"),Wnr=o("AutoModelForVisualQuestionAnswering"),aVe=l(),Vo=a("div"),F(Ty.$$.fragment),Hnr=l(),Md=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),KQ=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" class method or the "),ZQ=a("a"),Knr=o("from_config()"),Znr=o(` class
method.`),esr=l(),My=a("p"),osr=o("This class cannot be instantiated directly using "),P7e=a("code"),rsr=o("__init__()"),tsr=o(" (throws an error)."),asr=l(),vt=a("div"),F(Ey.$$.fragment),nsr=l(),B7e=a("p"),ssr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),lsr=l(),Ed=a("p"),isr=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),dsr=o("not"),csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),fsr=o("from_pretrained()"),msr=o(" to load the model weights."),gsr=l(),F(TF.$$.fragment),hsr=l(),co=a("div"),F(Cy.$$.fragment),psr=l(),I7e=a("p"),_sr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),usr=l(),Qa=a("p"),bsr=o("The model class to instantiate is selected based on the "),q7e=a("code"),vsr=o("model_type"),Fsr=o(` property of the config object (either
passed as an argument or loaded from `),j7e=a("code"),Tsr=o("pretrained_model_name_or_path"),Msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(":"),wsr=l(),G7e=a("ul"),MF=a("li"),O7e=a("strong"),Asr=o("vilt"),Lsr=o(" \u2014 "),oW=a("a"),ysr=o("ViltForQuestionAnswering"),xsr=o(" (ViLT model)"),$sr=l(),EF=a("p"),ksr=o("The model is set in evaluation mode by default using "),V7e=a("code"),Ssr=o("model.eval()"),Rsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X7e=a("code"),Psr=o("model.train()"),Bsr=l(),F(CF.$$.fragment),nVe=l(),Cd=a("h2"),wF=a("a"),z7e=a("span"),F(wy.$$.fragment),Nsr=l(),Q7e=a("span"),Isr=o("AutoModelForAudioClassification"),sVe=l(),Xo=a("div"),F(Ay.$$.fragment),qsr=l(),wd=a("p"),jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rW=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" class method or the "),tW=a("a"),Osr=o("from_config()"),Vsr=o(` class
method.`),Xsr=l(),Ly=a("p"),zsr=o("This class cannot be instantiated directly using "),W7e=a("code"),Qsr=o("__init__()"),Wsr=o(" (throws an error)."),Hsr=l(),Ft=a("div"),F(yy.$$.fragment),Usr=l(),H7e=a("p"),Jsr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ysr=l(),Ad=a("p"),Ksr=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),Zsr=o("not"),elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),olr=o("from_pretrained()"),rlr=o(" to load the model weights."),tlr=l(),F(AF.$$.fragment),alr=l(),fo=a("div"),F(xy.$$.fragment),nlr=l(),J7e=a("p"),slr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),llr=l(),Wa=a("p"),ilr=o("The model class to instantiate is selected based on the "),Y7e=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),plr=l(),Pe=a("ul"),LF=a("li"),e9e=a("strong"),_lr=o("data2vec-audio"),ulr=o(" \u2014 "),nW=a("a"),blr=o("Data2VecAudioForSequenceClassification"),vlr=o(" (Data2VecAudio model)"),Flr=l(),yF=a("li"),o9e=a("strong"),Tlr=o("hubert"),Mlr=o(" \u2014 "),sW=a("a"),Elr=o("HubertForSequenceClassification"),Clr=o(" (Hubert model)"),wlr=l(),xF=a("li"),r9e=a("strong"),Alr=o("sew"),Llr=o(" \u2014 "),lW=a("a"),ylr=o("SEWForSequenceClassification"),xlr=o(" (SEW model)"),$lr=l(),$F=a("li"),t9e=a("strong"),klr=o("sew-d"),Slr=o(" \u2014 "),iW=a("a"),Rlr=o("SEWDForSequenceClassification"),Plr=o(" (SEW-D model)"),Blr=l(),kF=a("li"),a9e=a("strong"),Nlr=o("unispeech"),Ilr=o(" \u2014 "),dW=a("a"),qlr=o("UniSpeechForSequenceClassification"),jlr=o(" (UniSpeech model)"),Dlr=l(),SF=a("li"),n9e=a("strong"),Glr=o("unispeech-sat"),Olr=o(" \u2014 "),cW=a("a"),Vlr=o("UniSpeechSatForSequenceClassification"),Xlr=o(" (UniSpeechSat model)"),zlr=l(),RF=a("li"),s9e=a("strong"),Qlr=o("wav2vec2"),Wlr=o(" \u2014 "),fW=a("a"),Hlr=o("Wav2Vec2ForSequenceClassification"),Ulr=o(" (Wav2Vec2 model)"),Jlr=l(),PF=a("li"),l9e=a("strong"),Ylr=o("wav2vec2-conformer"),Klr=o(" \u2014 "),mW=a("a"),Zlr=o("Wav2Vec2ConformerForSequenceClassification"),eir=o(" (Wav2Vec2-Conformer model)"),oir=l(),BF=a("li"),i9e=a("strong"),rir=o("wavlm"),tir=o(" \u2014 "),gW=a("a"),air=o("WavLMForSequenceClassification"),nir=o(" (WavLM model)"),sir=l(),NF=a("p"),lir=o("The model is set in evaluation mode by default using "),d9e=a("code"),iir=o("model.eval()"),dir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c9e=a("code"),cir=o("model.train()"),fir=l(),F(IF.$$.fragment),lVe=l(),Ld=a("h2"),qF=a("a"),f9e=a("span"),F($y.$$.fragment),mir=l(),m9e=a("span"),gir=o("AutoModelForAudioFrameClassification"),iVe=l(),zo=a("div"),F(ky.$$.fragment),hir=l(),yd=a("p"),pir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hW=a("a"),_ir=o("from_pretrained()"),uir=o(" class method or the "),pW=a("a"),bir=o("from_config()"),vir=o(` class
method.`),Fir=l(),Sy=a("p"),Tir=o("This class cannot be instantiated directly using "),g9e=a("code"),Mir=o("__init__()"),Eir=o(" (throws an error)."),Cir=l(),Tt=a("div"),F(Ry.$$.fragment),wir=l(),h9e=a("p"),Air=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Lir=l(),xd=a("p"),yir=o(`Note:
Loading a model from its configuration file does `),p9e=a("strong"),xir=o("not"),$ir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),kir=o("from_pretrained()"),Sir=o(" to load the model weights."),Rir=l(),F(jF.$$.fragment),Pir=l(),mo=a("div"),F(Py.$$.fragment),Bir=l(),_9e=a("p"),Nir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Iir=l(),Ha=a("p"),qir=o("The model class to instantiate is selected based on the "),u9e=a("code"),jir=o("model_type"),Dir=o(` property of the config object (either
passed as an argument or loaded from `),b9e=a("code"),Gir=o("pretrained_model_name_or_path"),Oir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v9e=a("code"),Vir=o("pretrained_model_name_or_path"),Xir=o(":"),zir=l(),et=a("ul"),DF=a("li"),F9e=a("strong"),Qir=o("data2vec-audio"),Wir=o(" \u2014 "),uW=a("a"),Hir=o("Data2VecAudioForAudioFrameClassification"),Uir=o(" (Data2VecAudio model)"),Jir=l(),GF=a("li"),T9e=a("strong"),Yir=o("unispeech-sat"),Kir=o(" \u2014 "),bW=a("a"),Zir=o("UniSpeechSatForAudioFrameClassification"),edr=o(" (UniSpeechSat model)"),odr=l(),OF=a("li"),M9e=a("strong"),rdr=o("wav2vec2"),tdr=o(" \u2014 "),vW=a("a"),adr=o("Wav2Vec2ForAudioFrameClassification"),ndr=o(" (Wav2Vec2 model)"),sdr=l(),VF=a("li"),E9e=a("strong"),ldr=o("wav2vec2-conformer"),idr=o(" \u2014 "),FW=a("a"),ddr=o("Wav2Vec2ConformerForAudioFrameClassification"),cdr=o(" (Wav2Vec2-Conformer model)"),fdr=l(),XF=a("li"),C9e=a("strong"),mdr=o("wavlm"),gdr=o(" \u2014 "),TW=a("a"),hdr=o("WavLMForAudioFrameClassification"),pdr=o(" (WavLM model)"),_dr=l(),zF=a("p"),udr=o("The model is set in evaluation mode by default using "),w9e=a("code"),bdr=o("model.eval()"),vdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A9e=a("code"),Fdr=o("model.train()"),Tdr=l(),F(QF.$$.fragment),dVe=l(),$d=a("h2"),WF=a("a"),L9e=a("span"),F(By.$$.fragment),Mdr=l(),y9e=a("span"),Edr=o("AutoModelForCTC"),cVe=l(),Qo=a("div"),F(Ny.$$.fragment),Cdr=l(),kd=a("p"),wdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MW=a("a"),Adr=o("from_pretrained()"),Ldr=o(" class method or the "),EW=a("a"),ydr=o("from_config()"),xdr=o(` class
method.`),$dr=l(),Iy=a("p"),kdr=o("This class cannot be instantiated directly using "),x9e=a("code"),Sdr=o("__init__()"),Rdr=o(" (throws an error)."),Pdr=l(),Mt=a("div"),F(qy.$$.fragment),Bdr=l(),$9e=a("p"),Ndr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Idr=l(),Sd=a("p"),qdr=o(`Note:
Loading a model from its configuration file does `),k9e=a("strong"),jdr=o("not"),Ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),Gdr=o("from_pretrained()"),Odr=o(" to load the model weights."),Vdr=l(),F(HF.$$.fragment),Xdr=l(),go=a("div"),F(jy.$$.fragment),zdr=l(),S9e=a("p"),Qdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Wdr=l(),Ua=a("p"),Hdr=o("The model class to instantiate is selected based on the "),R9e=a("code"),Udr=o("model_type"),Jdr=o(` property of the config object (either
passed as an argument or loaded from `),P9e=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B9e=a("code"),Zdr=o("pretrained_model_name_or_path"),ecr=o(":"),ocr=l(),Le=a("ul"),UF=a("li"),N9e=a("strong"),rcr=o("data2vec-audio"),tcr=o(" \u2014 "),wW=a("a"),acr=o("Data2VecAudioForCTC"),ncr=o(" (Data2VecAudio model)"),scr=l(),JF=a("li"),I9e=a("strong"),lcr=o("hubert"),icr=o(" \u2014 "),AW=a("a"),dcr=o("HubertForCTC"),ccr=o(" (Hubert model)"),fcr=l(),YF=a("li"),q9e=a("strong"),mcr=o("mctct"),gcr=o(" \u2014 "),LW=a("a"),hcr=o("MCTCTForCTC"),pcr=o(" (M-CTC-T model)"),_cr=l(),KF=a("li"),j9e=a("strong"),ucr=o("sew"),bcr=o(" \u2014 "),yW=a("a"),vcr=o("SEWForCTC"),Fcr=o(" (SEW model)"),Tcr=l(),ZF=a("li"),D9e=a("strong"),Mcr=o("sew-d"),Ecr=o(" \u2014 "),xW=a("a"),Ccr=o("SEWDForCTC"),wcr=o(" (SEW-D model)"),Acr=l(),eT=a("li"),G9e=a("strong"),Lcr=o("unispeech"),ycr=o(" \u2014 "),$W=a("a"),xcr=o("UniSpeechForCTC"),$cr=o(" (UniSpeech model)"),kcr=l(),oT=a("li"),O9e=a("strong"),Scr=o("unispeech-sat"),Rcr=o(" \u2014 "),kW=a("a"),Pcr=o("UniSpeechSatForCTC"),Bcr=o(" (UniSpeechSat model)"),Ncr=l(),rT=a("li"),V9e=a("strong"),Icr=o("wav2vec2"),qcr=o(" \u2014 "),SW=a("a"),jcr=o("Wav2Vec2ForCTC"),Dcr=o(" (Wav2Vec2 model)"),Gcr=l(),tT=a("li"),X9e=a("strong"),Ocr=o("wav2vec2-conformer"),Vcr=o(" \u2014 "),RW=a("a"),Xcr=o("Wav2Vec2ConformerForCTC"),zcr=o(" (Wav2Vec2-Conformer model)"),Qcr=l(),aT=a("li"),z9e=a("strong"),Wcr=o("wavlm"),Hcr=o(" \u2014 "),PW=a("a"),Ucr=o("WavLMForCTC"),Jcr=o(" (WavLM model)"),Ycr=l(),nT=a("p"),Kcr=o("The model is set in evaluation mode by default using "),Q9e=a("code"),Zcr=o("model.eval()"),efr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W9e=a("code"),ofr=o("model.train()"),rfr=l(),F(sT.$$.fragment),fVe=l(),Rd=a("h2"),lT=a("a"),H9e=a("span"),F(Dy.$$.fragment),tfr=l(),U9e=a("span"),afr=o("AutoModelForSpeechSeq2Seq"),mVe=l(),Wo=a("div"),F(Gy.$$.fragment),nfr=l(),Pd=a("p"),sfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BW=a("a"),lfr=o("from_pretrained()"),ifr=o(" class method or the "),NW=a("a"),dfr=o("from_config()"),cfr=o(` class
method.`),ffr=l(),Oy=a("p"),mfr=o("This class cannot be instantiated directly using "),J9e=a("code"),gfr=o("__init__()"),hfr=o(" (throws an error)."),pfr=l(),Et=a("div"),F(Vy.$$.fragment),_fr=l(),Y9e=a("p"),ufr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bfr=l(),Bd=a("p"),vfr=o(`Note:
Loading a model from its configuration file does `),K9e=a("strong"),Ffr=o("not"),Tfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),Mfr=o("from_pretrained()"),Efr=o(" to load the model weights."),Cfr=l(),F(iT.$$.fragment),wfr=l(),ho=a("div"),F(Xy.$$.fragment),Afr=l(),Z9e=a("p"),Lfr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yfr=l(),Ja=a("p"),xfr=o("The model class to instantiate is selected based on the "),e2e=a("code"),$fr=o("model_type"),kfr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),Sfr=o("pretrained_model_name_or_path"),Rfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),Pfr=o("pretrained_model_name_or_path"),Bfr=o(":"),Nfr=l(),zy=a("ul"),dT=a("li"),t2e=a("strong"),Ifr=o("speech-encoder-decoder"),qfr=o(" \u2014 "),qW=a("a"),jfr=o("SpeechEncoderDecoderModel"),Dfr=o(" (Speech Encoder decoder model)"),Gfr=l(),cT=a("li"),a2e=a("strong"),Ofr=o("speech_to_text"),Vfr=o(" \u2014 "),jW=a("a"),Xfr=o("Speech2TextForConditionalGeneration"),zfr=o(" (Speech2Text model)"),Qfr=l(),fT=a("p"),Wfr=o("The model is set in evaluation mode by default using "),n2e=a("code"),Hfr=o("model.eval()"),Ufr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=a("code"),Jfr=o("model.train()"),Yfr=l(),F(mT.$$.fragment),gVe=l(),Nd=a("h2"),gT=a("a"),l2e=a("span"),F(Qy.$$.fragment),Kfr=l(),i2e=a("span"),Zfr=o("AutoModelForAudioXVector"),hVe=l(),Ho=a("div"),F(Wy.$$.fragment),emr=l(),Id=a("p"),omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),DW=a("a"),rmr=o("from_pretrained()"),tmr=o(" class method or the "),GW=a("a"),amr=o("from_config()"),nmr=o(` class
method.`),smr=l(),Hy=a("p"),lmr=o("This class cannot be instantiated directly using "),d2e=a("code"),imr=o("__init__()"),dmr=o(" (throws an error)."),cmr=l(),Ct=a("div"),F(Uy.$$.fragment),fmr=l(),c2e=a("p"),mmr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gmr=l(),qd=a("p"),hmr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),pmr=o("not"),_mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),umr=o("from_pretrained()"),bmr=o(" to load the model weights."),vmr=l(),F(hT.$$.fragment),Fmr=l(),po=a("div"),F(Jy.$$.fragment),Tmr=l(),m2e=a("p"),Mmr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Emr=l(),Ya=a("p"),Cmr=o("The model class to instantiate is selected based on the "),g2e=a("code"),wmr=o("model_type"),Amr=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),Lmr=o("pretrained_model_name_or_path"),ymr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),xmr=o("pretrained_model_name_or_path"),$mr=o(":"),kmr=l(),ot=a("ul"),pT=a("li"),_2e=a("strong"),Smr=o("data2vec-audio"),Rmr=o(" \u2014 "),VW=a("a"),Pmr=o("Data2VecAudioForXVector"),Bmr=o(" (Data2VecAudio model)"),Nmr=l(),_T=a("li"),u2e=a("strong"),Imr=o("unispeech-sat"),qmr=o(" \u2014 "),XW=a("a"),jmr=o("UniSpeechSatForXVector"),Dmr=o(" (UniSpeechSat model)"),Gmr=l(),uT=a("li"),b2e=a("strong"),Omr=o("wav2vec2"),Vmr=o(" \u2014 "),zW=a("a"),Xmr=o("Wav2Vec2ForXVector"),zmr=o(" (Wav2Vec2 model)"),Qmr=l(),bT=a("li"),v2e=a("strong"),Wmr=o("wav2vec2-conformer"),Hmr=o(" \u2014 "),QW=a("a"),Umr=o("Wav2Vec2ConformerForXVector"),Jmr=o(" (Wav2Vec2-Conformer model)"),Ymr=l(),vT=a("li"),F2e=a("strong"),Kmr=o("wavlm"),Zmr=o(" \u2014 "),WW=a("a"),egr=o("WavLMForXVector"),ogr=o(" (WavLM model)"),rgr=l(),FT=a("p"),tgr=o("The model is set in evaluation mode by default using "),T2e=a("code"),agr=o("model.eval()"),ngr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=a("code"),sgr=o("model.train()"),lgr=l(),F(TT.$$.fragment),pVe=l(),jd=a("h2"),MT=a("a"),E2e=a("span"),F(Yy.$$.fragment),igr=l(),C2e=a("span"),dgr=o("AutoModelForMaskedImageModeling"),_Ve=l(),Uo=a("div"),F(Ky.$$.fragment),cgr=l(),Dd=a("p"),fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HW=a("a"),mgr=o("from_pretrained()"),ggr=o(" class method or the "),UW=a("a"),hgr=o("from_config()"),pgr=o(` class
method.`),_gr=l(),Zy=a("p"),ugr=o("This class cannot be instantiated directly using "),w2e=a("code"),bgr=o("__init__()"),vgr=o(" (throws an error)."),Fgr=l(),wt=a("div"),F(e8.$$.fragment),Tgr=l(),A2e=a("p"),Mgr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Egr=l(),Gd=a("p"),Cgr=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),wgr=o("not"),Agr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Lgr=o("from_pretrained()"),ygr=o(" to load the model weights."),xgr=l(),F(ET.$$.fragment),$gr=l(),_o=a("div"),F(o8.$$.fragment),kgr=l(),y2e=a("p"),Sgr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Rgr=l(),Ka=a("p"),Pgr=o("The model class to instantiate is selected based on the "),x2e=a("code"),Bgr=o("model_type"),Ngr=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=a("code"),jgr=o("pretrained_model_name_or_path"),Dgr=o(":"),Ggr=l(),Od=a("ul"),CT=a("li"),S2e=a("strong"),Ogr=o("deit"),Vgr=o(" \u2014 "),YW=a("a"),Xgr=o("DeiTForMaskedImageModeling"),zgr=o(" (DeiT model)"),Qgr=l(),wT=a("li"),R2e=a("strong"),Wgr=o("swin"),Hgr=o(" \u2014 "),KW=a("a"),Ugr=o("SwinForMaskedImageModeling"),Jgr=o(" (Swin Transformer model)"),Ygr=l(),AT=a("li"),P2e=a("strong"),Kgr=o("vit"),Zgr=o(" \u2014 "),ZW=a("a"),ehr=o("ViTForMaskedImageModeling"),ohr=o(" (ViT model)"),rhr=l(),LT=a("p"),thr=o("The model is set in evaluation mode by default using "),B2e=a("code"),ahr=o("model.eval()"),nhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=a("code"),shr=o("model.train()"),lhr=l(),F(yT.$$.fragment),uVe=l(),Vd=a("h2"),xT=a("a"),I2e=a("span"),F(r8.$$.fragment),ihr=l(),q2e=a("span"),dhr=o("AutoModelForObjectDetection"),bVe=l(),Jo=a("div"),F(t8.$$.fragment),chr=l(),Xd=a("p"),fhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eH=a("a"),mhr=o("from_pretrained()"),ghr=o(" class method or the "),oH=a("a"),hhr=o("from_config()"),phr=o(` class
method.`),_hr=l(),a8=a("p"),uhr=o("This class cannot be instantiated directly using "),j2e=a("code"),bhr=o("__init__()"),vhr=o(" (throws an error)."),Fhr=l(),At=a("div"),F(n8.$$.fragment),Thr=l(),D2e=a("p"),Mhr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ehr=l(),zd=a("p"),Chr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),whr=o("not"),Ahr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Lhr=o("from_pretrained()"),yhr=o(" to load the model weights."),xhr=l(),F($T.$$.fragment),$hr=l(),uo=a("div"),F(s8.$$.fragment),khr=l(),O2e=a("p"),Shr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Rhr=l(),Za=a("p"),Phr=o("The model class to instantiate is selected based on the "),V2e=a("code"),Bhr=o("model_type"),Nhr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),Ihr=o("pretrained_model_name_or_path"),qhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),jhr=o("pretrained_model_name_or_path"),Dhr=o(":"),Ghr=l(),l8=a("ul"),kT=a("li"),Q2e=a("strong"),Ohr=o("detr"),Vhr=o(" \u2014 "),tH=a("a"),Xhr=o("DetrForObjectDetection"),zhr=o(" (DETR model)"),Qhr=l(),ST=a("li"),W2e=a("strong"),Whr=o("yolos"),Hhr=o(" \u2014 "),aH=a("a"),Uhr=o("YolosForObjectDetection"),Jhr=o(" (YOLOS model)"),Yhr=l(),RT=a("p"),Khr=o("The model is set in evaluation mode by default using "),H2e=a("code"),Zhr=o("model.eval()"),epr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),opr=o("model.train()"),rpr=l(),F(PT.$$.fragment),vVe=l(),Qd=a("h2"),BT=a("a"),J2e=a("span"),F(i8.$$.fragment),tpr=l(),Y2e=a("span"),apr=o("AutoModelForImageSegmentation"),FVe=l(),Yo=a("div"),F(d8.$$.fragment),npr=l(),Wd=a("p"),spr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nH=a("a"),lpr=o("from_pretrained()"),ipr=o(" class method or the "),sH=a("a"),dpr=o("from_config()"),cpr=o(` class
method.`),fpr=l(),c8=a("p"),mpr=o("This class cannot be instantiated directly using "),K2e=a("code"),gpr=o("__init__()"),hpr=o(" (throws an error)."),ppr=l(),Lt=a("div"),F(f8.$$.fragment),_pr=l(),Z2e=a("p"),upr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),bpr=l(),Hd=a("p"),vpr=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),Fpr=o("not"),Tpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),Mpr=o("from_pretrained()"),Epr=o(" to load the model weights."),Cpr=l(),F(NT.$$.fragment),wpr=l(),bo=a("div"),F(m8.$$.fragment),Apr=l(),obe=a("p"),Lpr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ypr=l(),en=a("p"),xpr=o("The model class to instantiate is selected based on the "),rbe=a("code"),$pr=o("model_type"),kpr=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),Spr=o("pretrained_model_name_or_path"),Rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Ppr=o("pretrained_model_name_or_path"),Bpr=o(":"),Npr=l(),nbe=a("ul"),IT=a("li"),sbe=a("strong"),Ipr=o("detr"),qpr=o(" \u2014 "),iH=a("a"),jpr=o("DetrForSegmentation"),Dpr=o(" (DETR model)"),Gpr=l(),qT=a("p"),Opr=o("The model is set in evaluation mode by default using "),lbe=a("code"),Vpr=o("model.eval()"),Xpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=a("code"),zpr=o("model.train()"),Qpr=l(),F(jT.$$.fragment),TVe=l(),Ud=a("h2"),DT=a("a"),dbe=a("span"),F(g8.$$.fragment),Wpr=l(),cbe=a("span"),Hpr=o("AutoModelForSemanticSegmentation"),MVe=l(),Ko=a("div"),F(h8.$$.fragment),Upr=l(),Jd=a("p"),Jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dH=a("a"),Ypr=o("from_pretrained()"),Kpr=o(" class method or the "),cH=a("a"),Zpr=o("from_config()"),e_r=o(` class
method.`),o_r=l(),p8=a("p"),r_r=o("This class cannot be instantiated directly using "),fbe=a("code"),t_r=o("__init__()"),a_r=o(" (throws an error)."),n_r=l(),yt=a("div"),F(_8.$$.fragment),s_r=l(),mbe=a("p"),l_r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),i_r=l(),Yd=a("p"),d_r=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),c_r=o("not"),f_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),m_r=o("from_pretrained()"),g_r=o(" to load the model weights."),h_r=l(),F(GT.$$.fragment),p_r=l(),vo=a("div"),F(u8.$$.fragment),__r=l(),hbe=a("p"),u_r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),b_r=l(),on=a("p"),v_r=o("The model class to instantiate is selected based on the "),pbe=a("code"),F_r=o("model_type"),T_r=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),M_r=o("pretrained_model_name_or_path"),E_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),C_r=o("pretrained_model_name_or_path"),w_r=o(":"),A_r=l(),rn=a("ul"),OT=a("li"),bbe=a("strong"),L_r=o("beit"),y_r=o(" \u2014 "),mH=a("a"),x_r=o("BeitForSemanticSegmentation"),$_r=o(" (BEiT model)"),k_r=l(),VT=a("li"),vbe=a("strong"),S_r=o("data2vec-vision"),R_r=o(" \u2014 "),gH=a("a"),P_r=o("Data2VecVisionForSemanticSegmentation"),B_r=o(" (Data2VecVision model)"),N_r=l(),XT=a("li"),Fbe=a("strong"),I_r=o("dpt"),q_r=o(" \u2014 "),hH=a("a"),j_r=o("DPTForSemanticSegmentation"),D_r=o(" (DPT model)"),G_r=l(),zT=a("li"),Tbe=a("strong"),O_r=o("segformer"),V_r=o(" \u2014 "),pH=a("a"),X_r=o("SegformerForSemanticSegmentation"),z_r=o(" (SegFormer model)"),Q_r=l(),QT=a("p"),W_r=o("The model is set in evaluation mode by default using "),Mbe=a("code"),H_r=o("model.eval()"),U_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),J_r=o("model.train()"),Y_r=l(),F(WT.$$.fragment),EVe=l(),Kd=a("h2"),HT=a("a"),Cbe=a("span"),F(b8.$$.fragment),K_r=l(),wbe=a("span"),Z_r=o("AutoModelForInstanceSegmentation"),CVe=l(),Zo=a("div"),F(v8.$$.fragment),eur=l(),Zd=a("p"),our=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_H=a("a"),rur=o("from_pretrained()"),tur=o(" class method or the "),uH=a("a"),aur=o("from_config()"),nur=o(` class
method.`),sur=l(),F8=a("p"),lur=o("This class cannot be instantiated directly using "),Abe=a("code"),iur=o("__init__()"),dur=o(" (throws an error)."),cur=l(),xt=a("div"),F(T8.$$.fragment),fur=l(),Lbe=a("p"),mur=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gur=l(),ec=a("p"),hur=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),pur=o("not"),_ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),uur=o("from_pretrained()"),bur=o(" to load the model weights."),vur=l(),F(UT.$$.fragment),Fur=l(),Fo=a("div"),F(M8.$$.fragment),Tur=l(),xbe=a("p"),Mur=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Eur=l(),tn=a("p"),Cur=o("The model class to instantiate is selected based on the "),$be=a("code"),wur=o("model_type"),Aur=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),Lur=o("pretrained_model_name_or_path"),yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(":"),kur=l(),Rbe=a("ul"),JT=a("li"),Pbe=a("strong"),Sur=o("maskformer"),Rur=o(" \u2014 "),vH=a("a"),Pur=o("MaskFormerForInstanceSegmentation"),Bur=o(" (MaskFormer model)"),Nur=l(),YT=a("p"),Iur=o("The model is set in evaluation mode by default using "),Bbe=a("code"),qur=o("model.eval()"),jur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),Dur=o("model.train()"),Gur=l(),F(KT.$$.fragment),wVe=l(),oc=a("h2"),ZT=a("a"),Ibe=a("span"),F(E8.$$.fragment),Our=l(),qbe=a("span"),Vur=o("TFAutoModel"),AVe=l(),er=a("div"),F(C8.$$.fragment),Xur=l(),rc=a("p"),zur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FH=a("a"),Qur=o("from_pretrained()"),Wur=o(" class method or the "),TH=a("a"),Hur=o("from_config()"),Uur=o(` class
method.`),Jur=l(),w8=a("p"),Yur=o("This class cannot be instantiated directly using "),jbe=a("code"),Kur=o("__init__()"),Zur=o(" (throws an error)."),e1r=l(),$t=a("div"),F(A8.$$.fragment),o1r=l(),Dbe=a("p"),r1r=o("Instantiates one of the base model classes of the library from a configuration."),t1r=l(),tc=a("p"),a1r=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),n1r=o("not"),s1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),l1r=o("from_pretrained()"),i1r=o(" to load the model weights."),d1r=l(),F(eM.$$.fragment),c1r=l(),yr=a("div"),F(L8.$$.fragment),f1r=l(),Obe=a("p"),m1r=o("Instantiate one of the base model classes of the library from a pretrained model."),g1r=l(),an=a("p"),h1r=o("The model class to instantiate is selected based on the "),Vbe=a("code"),p1r=o("model_type"),_1r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),u1r=o("pretrained_model_name_or_path"),b1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),v1r=o("pretrained_model_name_or_path"),F1r=o(":"),T1r=l(),j=a("ul"),oM=a("li"),Qbe=a("strong"),M1r=o("albert"),E1r=o(" \u2014 "),EH=a("a"),C1r=o("TFAlbertModel"),w1r=o(" (ALBERT model)"),A1r=l(),rM=a("li"),Wbe=a("strong"),L1r=o("bart"),y1r=o(" \u2014 "),CH=a("a"),x1r=o("TFBartModel"),$1r=o(" (BART model)"),k1r=l(),tM=a("li"),Hbe=a("strong"),S1r=o("bert"),R1r=o(" \u2014 "),wH=a("a"),P1r=o("TFBertModel"),B1r=o(" (BERT model)"),N1r=l(),aM=a("li"),Ube=a("strong"),I1r=o("blenderbot"),q1r=o(" \u2014 "),AH=a("a"),j1r=o("TFBlenderbotModel"),D1r=o(" (Blenderbot model)"),G1r=l(),nM=a("li"),Jbe=a("strong"),O1r=o("blenderbot-small"),V1r=o(" \u2014 "),LH=a("a"),X1r=o("TFBlenderbotSmallModel"),z1r=o(" (BlenderbotSmall model)"),Q1r=l(),sM=a("li"),Ybe=a("strong"),W1r=o("camembert"),H1r=o(" \u2014 "),yH=a("a"),U1r=o("TFCamembertModel"),J1r=o(" (CamemBERT model)"),Y1r=l(),lM=a("li"),Kbe=a("strong"),K1r=o("clip"),Z1r=o(" \u2014 "),xH=a("a"),e7r=o("TFCLIPModel"),o7r=o(" (CLIP model)"),r7r=l(),iM=a("li"),Zbe=a("strong"),t7r=o("convbert"),a7r=o(" \u2014 "),$H=a("a"),n7r=o("TFConvBertModel"),s7r=o(" (ConvBERT model)"),l7r=l(),dM=a("li"),eve=a("strong"),i7r=o("convnext"),d7r=o(" \u2014 "),kH=a("a"),c7r=o("TFConvNextModel"),f7r=o(" (ConvNeXT model)"),m7r=l(),cM=a("li"),ove=a("strong"),g7r=o("ctrl"),h7r=o(" \u2014 "),SH=a("a"),p7r=o("TFCTRLModel"),_7r=o(" (CTRL model)"),u7r=l(),fM=a("li"),rve=a("strong"),b7r=o("data2vec-vision"),v7r=o(" \u2014 "),RH=a("a"),F7r=o("TFData2VecVisionModel"),T7r=o(" (Data2VecVision model)"),M7r=l(),mM=a("li"),tve=a("strong"),E7r=o("deberta"),C7r=o(" \u2014 "),PH=a("a"),w7r=o("TFDebertaModel"),A7r=o(" (DeBERTa model)"),L7r=l(),gM=a("li"),ave=a("strong"),y7r=o("deberta-v2"),x7r=o(" \u2014 "),BH=a("a"),$7r=o("TFDebertaV2Model"),k7r=o(" (DeBERTa-v2 model)"),S7r=l(),hM=a("li"),nve=a("strong"),R7r=o("distilbert"),P7r=o(" \u2014 "),NH=a("a"),B7r=o("TFDistilBertModel"),N7r=o(" (DistilBERT model)"),I7r=l(),pM=a("li"),sve=a("strong"),q7r=o("dpr"),j7r=o(" \u2014 "),IH=a("a"),D7r=o("TFDPRQuestionEncoder"),G7r=o(" (DPR model)"),O7r=l(),_M=a("li"),lve=a("strong"),V7r=o("electra"),X7r=o(" \u2014 "),qH=a("a"),z7r=o("TFElectraModel"),Q7r=o(" (ELECTRA model)"),W7r=l(),uM=a("li"),ive=a("strong"),H7r=o("flaubert"),U7r=o(" \u2014 "),jH=a("a"),J7r=o("TFFlaubertModel"),Y7r=o(" (FlauBERT model)"),K7r=l(),Ws=a("li"),dve=a("strong"),Z7r=o("funnel"),e9r=o(" \u2014 "),DH=a("a"),o9r=o("TFFunnelModel"),r9r=o(" or "),GH=a("a"),t9r=o("TFFunnelBaseModel"),a9r=o(" (Funnel Transformer model)"),n9r=l(),bM=a("li"),cve=a("strong"),s9r=o("gpt2"),l9r=o(" \u2014 "),OH=a("a"),i9r=o("TFGPT2Model"),d9r=o(" (OpenAI GPT-2 model)"),c9r=l(),vM=a("li"),fve=a("strong"),f9r=o("gptj"),m9r=o(" \u2014 "),VH=a("a"),g9r=o("TFGPTJModel"),h9r=o(" (GPT-J model)"),p9r=l(),FM=a("li"),mve=a("strong"),_9r=o("hubert"),u9r=o(" \u2014 "),XH=a("a"),b9r=o("TFHubertModel"),v9r=o(" (Hubert model)"),F9r=l(),TM=a("li"),gve=a("strong"),T9r=o("layoutlm"),M9r=o(" \u2014 "),zH=a("a"),E9r=o("TFLayoutLMModel"),C9r=o(" (LayoutLM model)"),w9r=l(),MM=a("li"),hve=a("strong"),A9r=o("led"),L9r=o(" \u2014 "),QH=a("a"),y9r=o("TFLEDModel"),x9r=o(" (LED model)"),$9r=l(),EM=a("li"),pve=a("strong"),k9r=o("longformer"),S9r=o(" \u2014 "),WH=a("a"),R9r=o("TFLongformerModel"),P9r=o(" (Longformer model)"),B9r=l(),CM=a("li"),_ve=a("strong"),N9r=o("lxmert"),I9r=o(" \u2014 "),HH=a("a"),q9r=o("TFLxmertModel"),j9r=o(" (LXMERT model)"),D9r=l(),wM=a("li"),uve=a("strong"),G9r=o("marian"),O9r=o(" \u2014 "),UH=a("a"),V9r=o("TFMarianModel"),X9r=o(" (Marian model)"),z9r=l(),AM=a("li"),bve=a("strong"),Q9r=o("mbart"),W9r=o(" \u2014 "),JH=a("a"),H9r=o("TFMBartModel"),U9r=o(" (mBART model)"),J9r=l(),LM=a("li"),vve=a("strong"),Y9r=o("mobilebert"),K9r=o(" \u2014 "),YH=a("a"),Z9r=o("TFMobileBertModel"),e2r=o(" (MobileBERT model)"),o2r=l(),yM=a("li"),Fve=a("strong"),r2r=o("mpnet"),t2r=o(" \u2014 "),KH=a("a"),a2r=o("TFMPNetModel"),n2r=o(" (MPNet model)"),s2r=l(),xM=a("li"),Tve=a("strong"),l2r=o("mt5"),i2r=o(" \u2014 "),ZH=a("a"),d2r=o("TFMT5Model"),c2r=o(" (MT5 model)"),f2r=l(),$M=a("li"),Mve=a("strong"),m2r=o("openai-gpt"),g2r=o(" \u2014 "),eU=a("a"),h2r=o("TFOpenAIGPTModel"),p2r=o(" (OpenAI GPT model)"),_2r=l(),kM=a("li"),Eve=a("strong"),u2r=o("opt"),b2r=o(" \u2014 "),oU=a("a"),v2r=o("TFOPTModel"),F2r=o(" (OPT model)"),T2r=l(),SM=a("li"),Cve=a("strong"),M2r=o("pegasus"),E2r=o(" \u2014 "),rU=a("a"),C2r=o("TFPegasusModel"),w2r=o(" (Pegasus model)"),A2r=l(),RM=a("li"),wve=a("strong"),L2r=o("rembert"),y2r=o(" \u2014 "),tU=a("a"),x2r=o("TFRemBertModel"),$2r=o(" (RemBERT model)"),k2r=l(),PM=a("li"),Ave=a("strong"),S2r=o("roberta"),R2r=o(" \u2014 "),aU=a("a"),P2r=o("TFRobertaModel"),B2r=o(" (RoBERTa model)"),N2r=l(),BM=a("li"),Lve=a("strong"),I2r=o("roformer"),q2r=o(" \u2014 "),nU=a("a"),j2r=o("TFRoFormerModel"),D2r=o(" (RoFormer model)"),G2r=l(),NM=a("li"),yve=a("strong"),O2r=o("speech_to_text"),V2r=o(" \u2014 "),sU=a("a"),X2r=o("TFSpeech2TextModel"),z2r=o(" (Speech2Text model)"),Q2r=l(),IM=a("li"),xve=a("strong"),W2r=o("swin"),H2r=o(" \u2014 "),lU=a("a"),U2r=o("TFSwinModel"),J2r=o(" (Swin Transformer model)"),Y2r=l(),qM=a("li"),$ve=a("strong"),K2r=o("t5"),Z2r=o(" \u2014 "),iU=a("a"),ebr=o("TFT5Model"),obr=o(" (T5 model)"),rbr=l(),jM=a("li"),kve=a("strong"),tbr=o("tapas"),abr=o(" \u2014 "),dU=a("a"),nbr=o("TFTapasModel"),sbr=o(" (TAPAS model)"),lbr=l(),DM=a("li"),Sve=a("strong"),ibr=o("transfo-xl"),dbr=o(" \u2014 "),cU=a("a"),cbr=o("TFTransfoXLModel"),fbr=o(" (Transformer-XL model)"),mbr=l(),GM=a("li"),Rve=a("strong"),gbr=o("vit"),hbr=o(" \u2014 "),fU=a("a"),pbr=o("TFViTModel"),_br=o(" (ViT model)"),ubr=l(),OM=a("li"),Pve=a("strong"),bbr=o("vit_mae"),vbr=o(" \u2014 "),mU=a("a"),Fbr=o("TFViTMAEModel"),Tbr=o(" (ViTMAE model)"),Mbr=l(),VM=a("li"),Bve=a("strong"),Ebr=o("wav2vec2"),Cbr=o(" \u2014 "),gU=a("a"),wbr=o("TFWav2Vec2Model"),Abr=o(" (Wav2Vec2 model)"),Lbr=l(),XM=a("li"),Nve=a("strong"),ybr=o("xlm"),xbr=o(" \u2014 "),hU=a("a"),$br=o("TFXLMModel"),kbr=o(" (XLM model)"),Sbr=l(),zM=a("li"),Ive=a("strong"),Rbr=o("xlm-roberta"),Pbr=o(" \u2014 "),pU=a("a"),Bbr=o("TFXLMRobertaModel"),Nbr=o(" (XLM-RoBERTa model)"),Ibr=l(),QM=a("li"),qve=a("strong"),qbr=o("xlnet"),jbr=o(" \u2014 "),_U=a("a"),Dbr=o("TFXLNetModel"),Gbr=o(" (XLNet model)"),Obr=l(),F(WM.$$.fragment),LVe=l(),ac=a("h2"),HM=a("a"),jve=a("span"),F(y8.$$.fragment),Vbr=l(),Dve=a("span"),Xbr=o("TFAutoModelForPreTraining"),yVe=l(),or=a("div"),F(x8.$$.fragment),zbr=l(),nc=a("p"),Qbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uU=a("a"),Wbr=o("from_pretrained()"),Hbr=o(" class method or the "),bU=a("a"),Ubr=o("from_config()"),Jbr=o(` class
method.`),Ybr=l(),$8=a("p"),Kbr=o("This class cannot be instantiated directly using "),Gve=a("code"),Zbr=o("__init__()"),evr=o(" (throws an error)."),ovr=l(),kt=a("div"),F(k8.$$.fragment),rvr=l(),Ove=a("p"),tvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),avr=l(),sc=a("p"),nvr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),svr=o("not"),lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),ivr=o("from_pretrained()"),dvr=o(" to load the model weights."),cvr=l(),F(UM.$$.fragment),fvr=l(),xr=a("div"),F(S8.$$.fragment),mvr=l(),Xve=a("p"),gvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hvr=l(),nn=a("p"),pvr=o("The model class to instantiate is selected based on the "),zve=a("code"),_vr=o("model_type"),uvr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),Fvr=o("pretrained_model_name_or_path"),Tvr=o(":"),Mvr=l(),se=a("ul"),JM=a("li"),Hve=a("strong"),Evr=o("albert"),Cvr=o(" \u2014 "),FU=a("a"),wvr=o("TFAlbertForPreTraining"),Avr=o(" (ALBERT model)"),Lvr=l(),YM=a("li"),Uve=a("strong"),yvr=o("bart"),xvr=o(" \u2014 "),TU=a("a"),$vr=o("TFBartForConditionalGeneration"),kvr=o(" (BART model)"),Svr=l(),KM=a("li"),Jve=a("strong"),Rvr=o("bert"),Pvr=o(" \u2014 "),MU=a("a"),Bvr=o("TFBertForPreTraining"),Nvr=o(" (BERT model)"),Ivr=l(),ZM=a("li"),Yve=a("strong"),qvr=o("camembert"),jvr=o(" \u2014 "),EU=a("a"),Dvr=o("TFCamembertForMaskedLM"),Gvr=o(" (CamemBERT model)"),Ovr=l(),eE=a("li"),Kve=a("strong"),Vvr=o("ctrl"),Xvr=o(" \u2014 "),CU=a("a"),zvr=o("TFCTRLLMHeadModel"),Qvr=o(" (CTRL model)"),Wvr=l(),oE=a("li"),Zve=a("strong"),Hvr=o("distilbert"),Uvr=o(" \u2014 "),wU=a("a"),Jvr=o("TFDistilBertForMaskedLM"),Yvr=o(" (DistilBERT model)"),Kvr=l(),rE=a("li"),eFe=a("strong"),Zvr=o("electra"),eFr=o(" \u2014 "),AU=a("a"),oFr=o("TFElectraForPreTraining"),rFr=o(" (ELECTRA model)"),tFr=l(),tE=a("li"),oFe=a("strong"),aFr=o("flaubert"),nFr=o(" \u2014 "),LU=a("a"),sFr=o("TFFlaubertWithLMHeadModel"),lFr=o(" (FlauBERT model)"),iFr=l(),aE=a("li"),rFe=a("strong"),dFr=o("funnel"),cFr=o(" \u2014 "),yU=a("a"),fFr=o("TFFunnelForPreTraining"),mFr=o(" (Funnel Transformer model)"),gFr=l(),nE=a("li"),tFe=a("strong"),hFr=o("gpt2"),pFr=o(" \u2014 "),xU=a("a"),_Fr=o("TFGPT2LMHeadModel"),uFr=o(" (OpenAI GPT-2 model)"),bFr=l(),sE=a("li"),aFe=a("strong"),vFr=o("layoutlm"),FFr=o(" \u2014 "),$U=a("a"),TFr=o("TFLayoutLMForMaskedLM"),MFr=o(" (LayoutLM model)"),EFr=l(),lE=a("li"),nFe=a("strong"),CFr=o("lxmert"),wFr=o(" \u2014 "),kU=a("a"),AFr=o("TFLxmertForPreTraining"),LFr=o(" (LXMERT model)"),yFr=l(),iE=a("li"),sFe=a("strong"),xFr=o("mobilebert"),$Fr=o(" \u2014 "),SU=a("a"),kFr=o("TFMobileBertForPreTraining"),SFr=o(" (MobileBERT model)"),RFr=l(),dE=a("li"),lFe=a("strong"),PFr=o("mpnet"),BFr=o(" \u2014 "),RU=a("a"),NFr=o("TFMPNetForMaskedLM"),IFr=o(" (MPNet model)"),qFr=l(),cE=a("li"),iFe=a("strong"),jFr=o("openai-gpt"),DFr=o(" \u2014 "),PU=a("a"),GFr=o("TFOpenAIGPTLMHeadModel"),OFr=o(" (OpenAI GPT model)"),VFr=l(),fE=a("li"),dFe=a("strong"),XFr=o("roberta"),zFr=o(" \u2014 "),BU=a("a"),QFr=o("TFRobertaForMaskedLM"),WFr=o(" (RoBERTa model)"),HFr=l(),mE=a("li"),cFe=a("strong"),UFr=o("t5"),JFr=o(" \u2014 "),NU=a("a"),YFr=o("TFT5ForConditionalGeneration"),KFr=o(" (T5 model)"),ZFr=l(),gE=a("li"),fFe=a("strong"),eTr=o("tapas"),oTr=o(" \u2014 "),IU=a("a"),rTr=o("TFTapasForMaskedLM"),tTr=o(" (TAPAS model)"),aTr=l(),hE=a("li"),mFe=a("strong"),nTr=o("transfo-xl"),sTr=o(" \u2014 "),qU=a("a"),lTr=o("TFTransfoXLLMHeadModel"),iTr=o(" (Transformer-XL model)"),dTr=l(),pE=a("li"),gFe=a("strong"),cTr=o("vit_mae"),fTr=o(" \u2014 "),jU=a("a"),mTr=o("TFViTMAEForPreTraining"),gTr=o(" (ViTMAE model)"),hTr=l(),_E=a("li"),hFe=a("strong"),pTr=o("xlm"),_Tr=o(" \u2014 "),DU=a("a"),uTr=o("TFXLMWithLMHeadModel"),bTr=o(" (XLM model)"),vTr=l(),uE=a("li"),pFe=a("strong"),FTr=o("xlm-roberta"),TTr=o(" \u2014 "),GU=a("a"),MTr=o("TFXLMRobertaForMaskedLM"),ETr=o(" (XLM-RoBERTa model)"),CTr=l(),bE=a("li"),_Fe=a("strong"),wTr=o("xlnet"),ATr=o(" \u2014 "),OU=a("a"),LTr=o("TFXLNetLMHeadModel"),yTr=o(" (XLNet model)"),xTr=l(),F(vE.$$.fragment),xVe=l(),lc=a("h2"),FE=a("a"),uFe=a("span"),F(R8.$$.fragment),$Tr=l(),bFe=a("span"),kTr=o("TFAutoModelForCausalLM"),$Ve=l(),rr=a("div"),F(P8.$$.fragment),STr=l(),ic=a("p"),RTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VU=a("a"),PTr=o("from_pretrained()"),BTr=o(" class method or the "),XU=a("a"),NTr=o("from_config()"),ITr=o(` class
method.`),qTr=l(),B8=a("p"),jTr=o("This class cannot be instantiated directly using "),vFe=a("code"),DTr=o("__init__()"),GTr=o(" (throws an error)."),OTr=l(),St=a("div"),F(N8.$$.fragment),VTr=l(),FFe=a("p"),XTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zTr=l(),dc=a("p"),QTr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),WTr=o("not"),HTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),UTr=o("from_pretrained()"),JTr=o(" to load the model weights."),YTr=l(),F(TE.$$.fragment),KTr=l(),$r=a("div"),F(I8.$$.fragment),ZTr=l(),MFe=a("p"),eMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oMr=l(),sn=a("p"),rMr=o("The model class to instantiate is selected based on the "),EFe=a("code"),tMr=o("model_type"),aMr=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),nMr=o("pretrained_model_name_or_path"),sMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),lMr=o("pretrained_model_name_or_path"),iMr=o(":"),dMr=l(),Me=a("ul"),ME=a("li"),AFe=a("strong"),cMr=o("bert"),fMr=o(" \u2014 "),QU=a("a"),mMr=o("TFBertLMHeadModel"),gMr=o(" (BERT model)"),hMr=l(),EE=a("li"),LFe=a("strong"),pMr=o("camembert"),_Mr=o(" \u2014 "),WU=a("a"),uMr=o("TFCamembertForCausalLM"),bMr=o(" (CamemBERT model)"),vMr=l(),CE=a("li"),yFe=a("strong"),FMr=o("ctrl"),TMr=o(" \u2014 "),HU=a("a"),MMr=o("TFCTRLLMHeadModel"),EMr=o(" (CTRL model)"),CMr=l(),wE=a("li"),xFe=a("strong"),wMr=o("gpt2"),AMr=o(" \u2014 "),UU=a("a"),LMr=o("TFGPT2LMHeadModel"),yMr=o(" (OpenAI GPT-2 model)"),xMr=l(),AE=a("li"),$Fe=a("strong"),$Mr=o("gptj"),kMr=o(" \u2014 "),JU=a("a"),SMr=o("TFGPTJForCausalLM"),RMr=o(" (GPT-J model)"),PMr=l(),LE=a("li"),kFe=a("strong"),BMr=o("openai-gpt"),NMr=o(" \u2014 "),YU=a("a"),IMr=o("TFOpenAIGPTLMHeadModel"),qMr=o(" (OpenAI GPT model)"),jMr=l(),yE=a("li"),SFe=a("strong"),DMr=o("opt"),GMr=o(" \u2014 "),KU=a("a"),OMr=o("TFOPTForCausalLM"),VMr=o(" (OPT model)"),XMr=l(),xE=a("li"),RFe=a("strong"),zMr=o("rembert"),QMr=o(" \u2014 "),ZU=a("a"),WMr=o("TFRemBertForCausalLM"),HMr=o(" (RemBERT model)"),UMr=l(),$E=a("li"),PFe=a("strong"),JMr=o("roberta"),YMr=o(" \u2014 "),eJ=a("a"),KMr=o("TFRobertaForCausalLM"),ZMr=o(" (RoBERTa model)"),eEr=l(),kE=a("li"),BFe=a("strong"),oEr=o("roformer"),rEr=o(" \u2014 "),oJ=a("a"),tEr=o("TFRoFormerForCausalLM"),aEr=o(" (RoFormer model)"),nEr=l(),SE=a("li"),NFe=a("strong"),sEr=o("transfo-xl"),lEr=o(" \u2014 "),rJ=a("a"),iEr=o("TFTransfoXLLMHeadModel"),dEr=o(" (Transformer-XL model)"),cEr=l(),RE=a("li"),IFe=a("strong"),fEr=o("xlm"),mEr=o(" \u2014 "),tJ=a("a"),gEr=o("TFXLMWithLMHeadModel"),hEr=o(" (XLM model)"),pEr=l(),PE=a("li"),qFe=a("strong"),_Er=o("xlnet"),uEr=o(" \u2014 "),aJ=a("a"),bEr=o("TFXLNetLMHeadModel"),vEr=o(" (XLNet model)"),FEr=l(),F(BE.$$.fragment),kVe=l(),cc=a("h2"),NE=a("a"),jFe=a("span"),F(q8.$$.fragment),TEr=l(),DFe=a("span"),MEr=o("TFAutoModelForImageClassification"),SVe=l(),tr=a("div"),F(j8.$$.fragment),EEr=l(),fc=a("p"),CEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nJ=a("a"),wEr=o("from_pretrained()"),AEr=o(" class method or the "),sJ=a("a"),LEr=o("from_config()"),yEr=o(` class
method.`),xEr=l(),D8=a("p"),$Er=o("This class cannot be instantiated directly using "),GFe=a("code"),kEr=o("__init__()"),SEr=o(" (throws an error)."),REr=l(),Rt=a("div"),F(G8.$$.fragment),PEr=l(),OFe=a("p"),BEr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NEr=l(),mc=a("p"),IEr=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),qEr=o("not"),jEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),DEr=o("from_pretrained()"),GEr=o(" to load the model weights."),OEr=l(),F(IE.$$.fragment),VEr=l(),kr=a("div"),F(O8.$$.fragment),XEr=l(),XFe=a("p"),zEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QEr=l(),ln=a("p"),WEr=o("The model class to instantiate is selected based on the "),zFe=a("code"),HEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),KEr=o("pretrained_model_name_or_path"),ZEr=o(":"),e4r=l(),dn=a("ul"),qE=a("li"),HFe=a("strong"),o4r=o("convnext"),r4r=o(" \u2014 "),iJ=a("a"),t4r=o("TFConvNextForImageClassification"),a4r=o(" (ConvNeXT model)"),n4r=l(),jE=a("li"),UFe=a("strong"),s4r=o("data2vec-vision"),l4r=o(" \u2014 "),dJ=a("a"),i4r=o("TFData2VecVisionForImageClassification"),d4r=o(" (Data2VecVision model)"),c4r=l(),DE=a("li"),JFe=a("strong"),f4r=o("swin"),m4r=o(" \u2014 "),cJ=a("a"),g4r=o("TFSwinForImageClassification"),h4r=o(" (Swin Transformer model)"),p4r=l(),GE=a("li"),YFe=a("strong"),_4r=o("vit"),u4r=o(" \u2014 "),fJ=a("a"),b4r=o("TFViTForImageClassification"),v4r=o(" (ViT model)"),F4r=l(),F(OE.$$.fragment),RVe=l(),gc=a("h2"),VE=a("a"),KFe=a("span"),F(V8.$$.fragment),T4r=l(),ZFe=a("span"),M4r=o("TFAutoModelForMaskedLM"),PVe=l(),ar=a("div"),F(X8.$$.fragment),E4r=l(),hc=a("p"),C4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mJ=a("a"),w4r=o("from_pretrained()"),A4r=o(" class method or the "),gJ=a("a"),L4r=o("from_config()"),y4r=o(` class
method.`),x4r=l(),z8=a("p"),$4r=o("This class cannot be instantiated directly using "),eTe=a("code"),k4r=o("__init__()"),S4r=o(" (throws an error)."),R4r=l(),Pt=a("div"),F(Q8.$$.fragment),P4r=l(),oTe=a("p"),B4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N4r=l(),pc=a("p"),I4r=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),q4r=o("not"),j4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),D4r=o("from_pretrained()"),G4r=o(" to load the model weights."),O4r=l(),F(XE.$$.fragment),V4r=l(),Sr=a("div"),F(W8.$$.fragment),X4r=l(),tTe=a("p"),z4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q4r=l(),cn=a("p"),W4r=o("The model class to instantiate is selected based on the "),aTe=a("code"),H4r=o("model_type"),U4r=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(":"),eCr=l(),ie=a("ul"),zE=a("li"),lTe=a("strong"),oCr=o("albert"),rCr=o(" \u2014 "),pJ=a("a"),tCr=o("TFAlbertForMaskedLM"),aCr=o(" (ALBERT model)"),nCr=l(),QE=a("li"),iTe=a("strong"),sCr=o("bert"),lCr=o(" \u2014 "),_J=a("a"),iCr=o("TFBertForMaskedLM"),dCr=o(" (BERT model)"),cCr=l(),WE=a("li"),dTe=a("strong"),fCr=o("camembert"),mCr=o(" \u2014 "),uJ=a("a"),gCr=o("TFCamembertForMaskedLM"),hCr=o(" (CamemBERT model)"),pCr=l(),HE=a("li"),cTe=a("strong"),_Cr=o("convbert"),uCr=o(" \u2014 "),bJ=a("a"),bCr=o("TFConvBertForMaskedLM"),vCr=o(" (ConvBERT model)"),FCr=l(),UE=a("li"),fTe=a("strong"),TCr=o("deberta"),MCr=o(" \u2014 "),vJ=a("a"),ECr=o("TFDebertaForMaskedLM"),CCr=o(" (DeBERTa model)"),wCr=l(),JE=a("li"),mTe=a("strong"),ACr=o("deberta-v2"),LCr=o(" \u2014 "),FJ=a("a"),yCr=o("TFDebertaV2ForMaskedLM"),xCr=o(" (DeBERTa-v2 model)"),$Cr=l(),YE=a("li"),gTe=a("strong"),kCr=o("distilbert"),SCr=o(" \u2014 "),TJ=a("a"),RCr=o("TFDistilBertForMaskedLM"),PCr=o(" (DistilBERT model)"),BCr=l(),KE=a("li"),hTe=a("strong"),NCr=o("electra"),ICr=o(" \u2014 "),MJ=a("a"),qCr=o("TFElectraForMaskedLM"),jCr=o(" (ELECTRA model)"),DCr=l(),ZE=a("li"),pTe=a("strong"),GCr=o("flaubert"),OCr=o(" \u2014 "),EJ=a("a"),VCr=o("TFFlaubertWithLMHeadModel"),XCr=o(" (FlauBERT model)"),zCr=l(),e4=a("li"),_Te=a("strong"),QCr=o("funnel"),WCr=o(" \u2014 "),CJ=a("a"),HCr=o("TFFunnelForMaskedLM"),UCr=o(" (Funnel Transformer model)"),JCr=l(),o4=a("li"),uTe=a("strong"),YCr=o("layoutlm"),KCr=o(" \u2014 "),wJ=a("a"),ZCr=o("TFLayoutLMForMaskedLM"),e5r=o(" (LayoutLM model)"),o5r=l(),r4=a("li"),bTe=a("strong"),r5r=o("longformer"),t5r=o(" \u2014 "),AJ=a("a"),a5r=o("TFLongformerForMaskedLM"),n5r=o(" (Longformer model)"),s5r=l(),t4=a("li"),vTe=a("strong"),l5r=o("mobilebert"),i5r=o(" \u2014 "),LJ=a("a"),d5r=o("TFMobileBertForMaskedLM"),c5r=o(" (MobileBERT model)"),f5r=l(),a4=a("li"),FTe=a("strong"),m5r=o("mpnet"),g5r=o(" \u2014 "),yJ=a("a"),h5r=o("TFMPNetForMaskedLM"),p5r=o(" (MPNet model)"),_5r=l(),n4=a("li"),TTe=a("strong"),u5r=o("rembert"),b5r=o(" \u2014 "),xJ=a("a"),v5r=o("TFRemBertForMaskedLM"),F5r=o(" (RemBERT model)"),T5r=l(),s4=a("li"),MTe=a("strong"),M5r=o("roberta"),E5r=o(" \u2014 "),$J=a("a"),C5r=o("TFRobertaForMaskedLM"),w5r=o(" (RoBERTa model)"),A5r=l(),l4=a("li"),ETe=a("strong"),L5r=o("roformer"),y5r=o(" \u2014 "),kJ=a("a"),x5r=o("TFRoFormerForMaskedLM"),$5r=o(" (RoFormer model)"),k5r=l(),i4=a("li"),CTe=a("strong"),S5r=o("tapas"),R5r=o(" \u2014 "),SJ=a("a"),P5r=o("TFTapasForMaskedLM"),B5r=o(" (TAPAS model)"),N5r=l(),d4=a("li"),wTe=a("strong"),I5r=o("xlm"),q5r=o(" \u2014 "),RJ=a("a"),j5r=o("TFXLMWithLMHeadModel"),D5r=o(" (XLM model)"),G5r=l(),c4=a("li"),ATe=a("strong"),O5r=o("xlm-roberta"),V5r=o(" \u2014 "),PJ=a("a"),X5r=o("TFXLMRobertaForMaskedLM"),z5r=o(" (XLM-RoBERTa model)"),Q5r=l(),F(f4.$$.fragment),BVe=l(),_c=a("h2"),m4=a("a"),LTe=a("span"),F(H8.$$.fragment),W5r=l(),yTe=a("span"),H5r=o("TFAutoModelForSeq2SeqLM"),NVe=l(),nr=a("div"),F(U8.$$.fragment),U5r=l(),uc=a("p"),J5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BJ=a("a"),Y5r=o("from_pretrained()"),K5r=o(" class method or the "),NJ=a("a"),Z5r=o("from_config()"),e3r=o(` class
method.`),o3r=l(),J8=a("p"),r3r=o("This class cannot be instantiated directly using "),xTe=a("code"),t3r=o("__init__()"),a3r=o(" (throws an error)."),n3r=l(),Bt=a("div"),F(Y8.$$.fragment),s3r=l(),$Te=a("p"),l3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i3r=l(),bc=a("p"),d3r=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),c3r=o("not"),f3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),m3r=o("from_pretrained()"),g3r=o(" to load the model weights."),h3r=l(),F(g4.$$.fragment),p3r=l(),Rr=a("div"),F(K8.$$.fragment),_3r=l(),STe=a("p"),u3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b3r=l(),fn=a("p"),v3r=o("The model class to instantiate is selected based on the "),RTe=a("code"),F3r=o("model_type"),T3r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),C3r=o("pretrained_model_name_or_path"),w3r=o(":"),A3r=l(),ye=a("ul"),h4=a("li"),NTe=a("strong"),L3r=o("bart"),y3r=o(" \u2014 "),qJ=a("a"),x3r=o("TFBartForConditionalGeneration"),$3r=o(" (BART model)"),k3r=l(),p4=a("li"),ITe=a("strong"),S3r=o("blenderbot"),R3r=o(" \u2014 "),jJ=a("a"),P3r=o("TFBlenderbotForConditionalGeneration"),B3r=o(" (Blenderbot model)"),N3r=l(),_4=a("li"),qTe=a("strong"),I3r=o("blenderbot-small"),q3r=o(" \u2014 "),DJ=a("a"),j3r=o("TFBlenderbotSmallForConditionalGeneration"),D3r=o(" (BlenderbotSmall model)"),G3r=l(),u4=a("li"),jTe=a("strong"),O3r=o("encoder-decoder"),V3r=o(" \u2014 "),GJ=a("a"),X3r=o("TFEncoderDecoderModel"),z3r=o(" (Encoder decoder model)"),Q3r=l(),b4=a("li"),DTe=a("strong"),W3r=o("led"),H3r=o(" \u2014 "),OJ=a("a"),U3r=o("TFLEDForConditionalGeneration"),J3r=o(" (LED model)"),Y3r=l(),v4=a("li"),GTe=a("strong"),K3r=o("marian"),Z3r=o(" \u2014 "),VJ=a("a"),e0r=o("TFMarianMTModel"),o0r=o(" (Marian model)"),r0r=l(),F4=a("li"),OTe=a("strong"),t0r=o("mbart"),a0r=o(" \u2014 "),XJ=a("a"),n0r=o("TFMBartForConditionalGeneration"),s0r=o(" (mBART model)"),l0r=l(),T4=a("li"),VTe=a("strong"),i0r=o("mt5"),d0r=o(" \u2014 "),zJ=a("a"),c0r=o("TFMT5ForConditionalGeneration"),f0r=o(" (MT5 model)"),m0r=l(),M4=a("li"),XTe=a("strong"),g0r=o("pegasus"),h0r=o(" \u2014 "),QJ=a("a"),p0r=o("TFPegasusForConditionalGeneration"),_0r=o(" (Pegasus model)"),u0r=l(),E4=a("li"),zTe=a("strong"),b0r=o("t5"),v0r=o(" \u2014 "),WJ=a("a"),F0r=o("TFT5ForConditionalGeneration"),T0r=o(" (T5 model)"),M0r=l(),F(C4.$$.fragment),IVe=l(),vc=a("h2"),w4=a("a"),QTe=a("span"),F(Z8.$$.fragment),E0r=l(),WTe=a("span"),C0r=o("TFAutoModelForSequenceClassification"),qVe=l(),sr=a("div"),F(ex.$$.fragment),w0r=l(),Fc=a("p"),A0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HJ=a("a"),L0r=o("from_pretrained()"),y0r=o(" class method or the "),UJ=a("a"),x0r=o("from_config()"),$0r=o(` class
method.`),k0r=l(),ox=a("p"),S0r=o("This class cannot be instantiated directly using "),HTe=a("code"),R0r=o("__init__()"),P0r=o(" (throws an error)."),B0r=l(),Nt=a("div"),F(rx.$$.fragment),N0r=l(),UTe=a("p"),I0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q0r=l(),Tc=a("p"),j0r=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),D0r=o("not"),G0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),O0r=o("from_pretrained()"),V0r=o(" to load the model weights."),X0r=l(),F(A4.$$.fragment),z0r=l(),Pr=a("div"),F(tx.$$.fragment),Q0r=l(),YTe=a("p"),W0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H0r=l(),mn=a("p"),U0r=o("The model class to instantiate is selected based on the "),KTe=a("code"),J0r=o("model_type"),Y0r=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),ewr=o("pretrained_model_name_or_path"),owr=o(":"),rwr=l(),te=a("ul"),L4=a("li"),oMe=a("strong"),twr=o("albert"),awr=o(" \u2014 "),YJ=a("a"),nwr=o("TFAlbertForSequenceClassification"),swr=o(" (ALBERT model)"),lwr=l(),y4=a("li"),rMe=a("strong"),iwr=o("bert"),dwr=o(" \u2014 "),KJ=a("a"),cwr=o("TFBertForSequenceClassification"),fwr=o(" (BERT model)"),mwr=l(),x4=a("li"),tMe=a("strong"),gwr=o("camembert"),hwr=o(" \u2014 "),ZJ=a("a"),pwr=o("TFCamembertForSequenceClassification"),_wr=o(" (CamemBERT model)"),uwr=l(),$4=a("li"),aMe=a("strong"),bwr=o("convbert"),vwr=o(" \u2014 "),eY=a("a"),Fwr=o("TFConvBertForSequenceClassification"),Twr=o(" (ConvBERT model)"),Mwr=l(),k4=a("li"),nMe=a("strong"),Ewr=o("ctrl"),Cwr=o(" \u2014 "),oY=a("a"),wwr=o("TFCTRLForSequenceClassification"),Awr=o(" (CTRL model)"),Lwr=l(),S4=a("li"),sMe=a("strong"),ywr=o("deberta"),xwr=o(" \u2014 "),rY=a("a"),$wr=o("TFDebertaForSequenceClassification"),kwr=o(" (DeBERTa model)"),Swr=l(),R4=a("li"),lMe=a("strong"),Rwr=o("deberta-v2"),Pwr=o(" \u2014 "),tY=a("a"),Bwr=o("TFDebertaV2ForSequenceClassification"),Nwr=o(" (DeBERTa-v2 model)"),Iwr=l(),P4=a("li"),iMe=a("strong"),qwr=o("distilbert"),jwr=o(" \u2014 "),aY=a("a"),Dwr=o("TFDistilBertForSequenceClassification"),Gwr=o(" (DistilBERT model)"),Owr=l(),B4=a("li"),dMe=a("strong"),Vwr=o("electra"),Xwr=o(" \u2014 "),nY=a("a"),zwr=o("TFElectraForSequenceClassification"),Qwr=o(" (ELECTRA model)"),Wwr=l(),N4=a("li"),cMe=a("strong"),Hwr=o("flaubert"),Uwr=o(" \u2014 "),sY=a("a"),Jwr=o("TFFlaubertForSequenceClassification"),Ywr=o(" (FlauBERT model)"),Kwr=l(),I4=a("li"),fMe=a("strong"),Zwr=o("funnel"),eAr=o(" \u2014 "),lY=a("a"),oAr=o("TFFunnelForSequenceClassification"),rAr=o(" (Funnel Transformer model)"),tAr=l(),q4=a("li"),mMe=a("strong"),aAr=o("gpt2"),nAr=o(" \u2014 "),iY=a("a"),sAr=o("TFGPT2ForSequenceClassification"),lAr=o(" (OpenAI GPT-2 model)"),iAr=l(),j4=a("li"),gMe=a("strong"),dAr=o("gptj"),cAr=o(" \u2014 "),dY=a("a"),fAr=o("TFGPTJForSequenceClassification"),mAr=o(" (GPT-J model)"),gAr=l(),D4=a("li"),hMe=a("strong"),hAr=o("layoutlm"),pAr=o(" \u2014 "),cY=a("a"),_Ar=o("TFLayoutLMForSequenceClassification"),uAr=o(" (LayoutLM model)"),bAr=l(),G4=a("li"),pMe=a("strong"),vAr=o("longformer"),FAr=o(" \u2014 "),fY=a("a"),TAr=o("TFLongformerForSequenceClassification"),MAr=o(" (Longformer model)"),EAr=l(),O4=a("li"),_Me=a("strong"),CAr=o("mobilebert"),wAr=o(" \u2014 "),mY=a("a"),AAr=o("TFMobileBertForSequenceClassification"),LAr=o(" (MobileBERT model)"),yAr=l(),V4=a("li"),uMe=a("strong"),xAr=o("mpnet"),$Ar=o(" \u2014 "),gY=a("a"),kAr=o("TFMPNetForSequenceClassification"),SAr=o(" (MPNet model)"),RAr=l(),X4=a("li"),bMe=a("strong"),PAr=o("openai-gpt"),BAr=o(" \u2014 "),hY=a("a"),NAr=o("TFOpenAIGPTForSequenceClassification"),IAr=o(" (OpenAI GPT model)"),qAr=l(),z4=a("li"),vMe=a("strong"),jAr=o("rembert"),DAr=o(" \u2014 "),pY=a("a"),GAr=o("TFRemBertForSequenceClassification"),OAr=o(" (RemBERT model)"),VAr=l(),Q4=a("li"),FMe=a("strong"),XAr=o("roberta"),zAr=o(" \u2014 "),_Y=a("a"),QAr=o("TFRobertaForSequenceClassification"),WAr=o(" (RoBERTa model)"),HAr=l(),W4=a("li"),TMe=a("strong"),UAr=o("roformer"),JAr=o(" \u2014 "),uY=a("a"),YAr=o("TFRoFormerForSequenceClassification"),KAr=o(" (RoFormer model)"),ZAr=l(),H4=a("li"),MMe=a("strong"),e6r=o("tapas"),o6r=o(" \u2014 "),bY=a("a"),r6r=o("TFTapasForSequenceClassification"),t6r=o(" (TAPAS model)"),a6r=l(),U4=a("li"),EMe=a("strong"),n6r=o("transfo-xl"),s6r=o(" \u2014 "),vY=a("a"),l6r=o("TFTransfoXLForSequenceClassification"),i6r=o(" (Transformer-XL model)"),d6r=l(),J4=a("li"),CMe=a("strong"),c6r=o("xlm"),f6r=o(" \u2014 "),FY=a("a"),m6r=o("TFXLMForSequenceClassification"),g6r=o(" (XLM model)"),h6r=l(),Y4=a("li"),wMe=a("strong"),p6r=o("xlm-roberta"),_6r=o(" \u2014 "),TY=a("a"),u6r=o("TFXLMRobertaForSequenceClassification"),b6r=o(" (XLM-RoBERTa model)"),v6r=l(),K4=a("li"),AMe=a("strong"),F6r=o("xlnet"),T6r=o(" \u2014 "),MY=a("a"),M6r=o("TFXLNetForSequenceClassification"),E6r=o(" (XLNet model)"),C6r=l(),F(Z4.$$.fragment),jVe=l(),Mc=a("h2"),eC=a("a"),LMe=a("span"),F(ax.$$.fragment),w6r=l(),yMe=a("span"),A6r=o("TFAutoModelForMultipleChoice"),DVe=l(),lr=a("div"),F(nx.$$.fragment),L6r=l(),Ec=a("p"),y6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EY=a("a"),x6r=o("from_pretrained()"),$6r=o(" class method or the "),CY=a("a"),k6r=o("from_config()"),S6r=o(` class
method.`),R6r=l(),sx=a("p"),P6r=o("This class cannot be instantiated directly using "),xMe=a("code"),B6r=o("__init__()"),N6r=o(" (throws an error)."),I6r=l(),It=a("div"),F(lx.$$.fragment),q6r=l(),$Me=a("p"),j6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D6r=l(),Cc=a("p"),G6r=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),O6r=o("not"),V6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),X6r=o("from_pretrained()"),z6r=o(" to load the model weights."),Q6r=l(),F(oC.$$.fragment),W6r=l(),Br=a("div"),F(ix.$$.fragment),H6r=l(),SMe=a("p"),U6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J6r=l(),gn=a("p"),Y6r=o("The model class to instantiate is selected based on the "),RMe=a("code"),K6r=o("model_type"),Z6r=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),eLr=o("pretrained_model_name_or_path"),oLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(":"),aLr=l(),_e=a("ul"),rC=a("li"),NMe=a("strong"),nLr=o("albert"),sLr=o(" \u2014 "),AY=a("a"),lLr=o("TFAlbertForMultipleChoice"),iLr=o(" (ALBERT model)"),dLr=l(),tC=a("li"),IMe=a("strong"),cLr=o("bert"),fLr=o(" \u2014 "),LY=a("a"),mLr=o("TFBertForMultipleChoice"),gLr=o(" (BERT model)"),hLr=l(),aC=a("li"),qMe=a("strong"),pLr=o("camembert"),_Lr=o(" \u2014 "),yY=a("a"),uLr=o("TFCamembertForMultipleChoice"),bLr=o(" (CamemBERT model)"),vLr=l(),nC=a("li"),jMe=a("strong"),FLr=o("convbert"),TLr=o(" \u2014 "),xY=a("a"),MLr=o("TFConvBertForMultipleChoice"),ELr=o(" (ConvBERT model)"),CLr=l(),sC=a("li"),DMe=a("strong"),wLr=o("distilbert"),ALr=o(" \u2014 "),$Y=a("a"),LLr=o("TFDistilBertForMultipleChoice"),yLr=o(" (DistilBERT model)"),xLr=l(),lC=a("li"),GMe=a("strong"),$Lr=o("electra"),kLr=o(" \u2014 "),kY=a("a"),SLr=o("TFElectraForMultipleChoice"),RLr=o(" (ELECTRA model)"),PLr=l(),iC=a("li"),OMe=a("strong"),BLr=o("flaubert"),NLr=o(" \u2014 "),SY=a("a"),ILr=o("TFFlaubertForMultipleChoice"),qLr=o(" (FlauBERT model)"),jLr=l(),dC=a("li"),VMe=a("strong"),DLr=o("funnel"),GLr=o(" \u2014 "),RY=a("a"),OLr=o("TFFunnelForMultipleChoice"),VLr=o(" (Funnel Transformer model)"),XLr=l(),cC=a("li"),XMe=a("strong"),zLr=o("longformer"),QLr=o(" \u2014 "),PY=a("a"),WLr=o("TFLongformerForMultipleChoice"),HLr=o(" (Longformer model)"),ULr=l(),fC=a("li"),zMe=a("strong"),JLr=o("mobilebert"),YLr=o(" \u2014 "),BY=a("a"),KLr=o("TFMobileBertForMultipleChoice"),ZLr=o(" (MobileBERT model)"),eyr=l(),mC=a("li"),QMe=a("strong"),oyr=o("mpnet"),ryr=o(" \u2014 "),NY=a("a"),tyr=o("TFMPNetForMultipleChoice"),ayr=o(" (MPNet model)"),nyr=l(),gC=a("li"),WMe=a("strong"),syr=o("rembert"),lyr=o(" \u2014 "),IY=a("a"),iyr=o("TFRemBertForMultipleChoice"),dyr=o(" (RemBERT model)"),cyr=l(),hC=a("li"),HMe=a("strong"),fyr=o("roberta"),myr=o(" \u2014 "),qY=a("a"),gyr=o("TFRobertaForMultipleChoice"),hyr=o(" (RoBERTa model)"),pyr=l(),pC=a("li"),UMe=a("strong"),_yr=o("roformer"),uyr=o(" \u2014 "),jY=a("a"),byr=o("TFRoFormerForMultipleChoice"),vyr=o(" (RoFormer model)"),Fyr=l(),_C=a("li"),JMe=a("strong"),Tyr=o("xlm"),Myr=o(" \u2014 "),DY=a("a"),Eyr=o("TFXLMForMultipleChoice"),Cyr=o(" (XLM model)"),wyr=l(),uC=a("li"),YMe=a("strong"),Ayr=o("xlm-roberta"),Lyr=o(" \u2014 "),GY=a("a"),yyr=o("TFXLMRobertaForMultipleChoice"),xyr=o(" (XLM-RoBERTa model)"),$yr=l(),bC=a("li"),KMe=a("strong"),kyr=o("xlnet"),Syr=o(" \u2014 "),OY=a("a"),Ryr=o("TFXLNetForMultipleChoice"),Pyr=o(" (XLNet model)"),Byr=l(),F(vC.$$.fragment),GVe=l(),wc=a("h2"),FC=a("a"),ZMe=a("span"),F(dx.$$.fragment),Nyr=l(),eEe=a("span"),Iyr=o("TFAutoModelForNextSentencePrediction"),OVe=l(),ir=a("div"),F(cx.$$.fragment),qyr=l(),Ac=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VY=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" class method or the "),XY=a("a"),Oyr=o("from_config()"),Vyr=o(` class
method.`),Xyr=l(),fx=a("p"),zyr=o("This class cannot be instantiated directly using "),oEe=a("code"),Qyr=o("__init__()"),Wyr=o(" (throws an error)."),Hyr=l(),qt=a("div"),F(mx.$$.fragment),Uyr=l(),rEe=a("p"),Jyr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yyr=l(),Lc=a("p"),Kyr=o(`Note:
Loading a model from its configuration file does `),tEe=a("strong"),Zyr=o("not"),e8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),o8r=o("from_pretrained()"),r8r=o(" to load the model weights."),t8r=l(),F(TC.$$.fragment),a8r=l(),Nr=a("div"),F(gx.$$.fragment),n8r=l(),aEe=a("p"),s8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l8r=l(),hn=a("p"),i8r=o("The model class to instantiate is selected based on the "),nEe=a("code"),d8r=o("model_type"),c8r=o(` property of the config object (either
passed as an argument or loaded from `),sEe=a("code"),f8r=o("pretrained_model_name_or_path"),m8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=a("code"),g8r=o("pretrained_model_name_or_path"),h8r=o(":"),p8r=l(),hx=a("ul"),MC=a("li"),iEe=a("strong"),_8r=o("bert"),u8r=o(" \u2014 "),QY=a("a"),b8r=o("TFBertForNextSentencePrediction"),v8r=o(" (BERT model)"),F8r=l(),EC=a("li"),dEe=a("strong"),T8r=o("mobilebert"),M8r=o(" \u2014 "),WY=a("a"),E8r=o("TFMobileBertForNextSentencePrediction"),C8r=o(" (MobileBERT model)"),w8r=l(),F(CC.$$.fragment),VVe=l(),yc=a("h2"),wC=a("a"),cEe=a("span"),F(px.$$.fragment),A8r=l(),fEe=a("span"),L8r=o("TFAutoModelForTableQuestionAnswering"),XVe=l(),dr=a("div"),F(_x.$$.fragment),y8r=l(),xc=a("p"),x8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HY=a("a"),$8r=o("from_pretrained()"),k8r=o(" class method or the "),UY=a("a"),S8r=o("from_config()"),R8r=o(` class
method.`),P8r=l(),ux=a("p"),B8r=o("This class cannot be instantiated directly using "),mEe=a("code"),N8r=o("__init__()"),I8r=o(" (throws an error)."),q8r=l(),jt=a("div"),F(bx.$$.fragment),j8r=l(),gEe=a("p"),D8r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G8r=l(),$c=a("p"),O8r=o(`Note:
Loading a model from its configuration file does `),hEe=a("strong"),V8r=o("not"),X8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),z8r=o("from_pretrained()"),Q8r=o(" to load the model weights."),W8r=l(),F(AC.$$.fragment),H8r=l(),Ir=a("div"),F(vx.$$.fragment),U8r=l(),pEe=a("p"),J8r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y8r=l(),pn=a("p"),K8r=o("The model class to instantiate is selected based on the "),_Ee=a("code"),Z8r=o("model_type"),exr=o(` property of the config object (either
passed as an argument or loaded from `),uEe=a("code"),oxr=o("pretrained_model_name_or_path"),rxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=a("code"),txr=o("pretrained_model_name_or_path"),axr=o(":"),nxr=l(),vEe=a("ul"),LC=a("li"),FEe=a("strong"),sxr=o("tapas"),lxr=o(" \u2014 "),YY=a("a"),ixr=o("TFTapasForQuestionAnswering"),dxr=o(" (TAPAS model)"),cxr=l(),F(yC.$$.fragment),zVe=l(),kc=a("h2"),xC=a("a"),TEe=a("span"),F(Fx.$$.fragment),fxr=l(),MEe=a("span"),mxr=o("TFAutoModelForTokenClassification"),QVe=l(),cr=a("div"),F(Tx.$$.fragment),gxr=l(),Sc=a("p"),hxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KY=a("a"),pxr=o("from_pretrained()"),_xr=o(" class method or the "),ZY=a("a"),uxr=o("from_config()"),bxr=o(` class
method.`),vxr=l(),Mx=a("p"),Fxr=o("This class cannot be instantiated directly using "),EEe=a("code"),Txr=o("__init__()"),Mxr=o(" (throws an error)."),Exr=l(),Dt=a("div"),F(Ex.$$.fragment),Cxr=l(),CEe=a("p"),wxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Axr=l(),Rc=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),wEe=a("strong"),yxr=o("not"),xxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),$xr=o("from_pretrained()"),kxr=o(" to load the model weights."),Sxr=l(),F($C.$$.fragment),Rxr=l(),qr=a("div"),F(Cx.$$.fragment),Pxr=l(),AEe=a("p"),Bxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nxr=l(),_n=a("p"),Ixr=o("The model class to instantiate is selected based on the "),LEe=a("code"),qxr=o("model_type"),jxr=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),Dxr=o("pretrained_model_name_or_path"),Gxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=a("code"),Oxr=o("pretrained_model_name_or_path"),Vxr=o(":"),Xxr=l(),de=a("ul"),kC=a("li"),$Ee=a("strong"),zxr=o("albert"),Qxr=o(" \u2014 "),oK=a("a"),Wxr=o("TFAlbertForTokenClassification"),Hxr=o(" (ALBERT model)"),Uxr=l(),SC=a("li"),kEe=a("strong"),Jxr=o("bert"),Yxr=o(" \u2014 "),rK=a("a"),Kxr=o("TFBertForTokenClassification"),Zxr=o(" (BERT model)"),e$r=l(),RC=a("li"),SEe=a("strong"),o$r=o("camembert"),r$r=o(" \u2014 "),tK=a("a"),t$r=o("TFCamembertForTokenClassification"),a$r=o(" (CamemBERT model)"),n$r=l(),PC=a("li"),REe=a("strong"),s$r=o("convbert"),l$r=o(" \u2014 "),aK=a("a"),i$r=o("TFConvBertForTokenClassification"),d$r=o(" (ConvBERT model)"),c$r=l(),BC=a("li"),PEe=a("strong"),f$r=o("deberta"),m$r=o(" \u2014 "),nK=a("a"),g$r=o("TFDebertaForTokenClassification"),h$r=o(" (DeBERTa model)"),p$r=l(),NC=a("li"),BEe=a("strong"),_$r=o("deberta-v2"),u$r=o(" \u2014 "),sK=a("a"),b$r=o("TFDebertaV2ForTokenClassification"),v$r=o(" (DeBERTa-v2 model)"),F$r=l(),IC=a("li"),NEe=a("strong"),T$r=o("distilbert"),M$r=o(" \u2014 "),lK=a("a"),E$r=o("TFDistilBertForTokenClassification"),C$r=o(" (DistilBERT model)"),w$r=l(),qC=a("li"),IEe=a("strong"),A$r=o("electra"),L$r=o(" \u2014 "),iK=a("a"),y$r=o("TFElectraForTokenClassification"),x$r=o(" (ELECTRA model)"),$$r=l(),jC=a("li"),qEe=a("strong"),k$r=o("flaubert"),S$r=o(" \u2014 "),dK=a("a"),R$r=o("TFFlaubertForTokenClassification"),P$r=o(" (FlauBERT model)"),B$r=l(),DC=a("li"),jEe=a("strong"),N$r=o("funnel"),I$r=o(" \u2014 "),cK=a("a"),q$r=o("TFFunnelForTokenClassification"),j$r=o(" (Funnel Transformer model)"),D$r=l(),GC=a("li"),DEe=a("strong"),G$r=o("layoutlm"),O$r=o(" \u2014 "),fK=a("a"),V$r=o("TFLayoutLMForTokenClassification"),X$r=o(" (LayoutLM model)"),z$r=l(),OC=a("li"),GEe=a("strong"),Q$r=o("longformer"),W$r=o(" \u2014 "),mK=a("a"),H$r=o("TFLongformerForTokenClassification"),U$r=o(" (Longformer model)"),J$r=l(),VC=a("li"),OEe=a("strong"),Y$r=o("mobilebert"),K$r=o(" \u2014 "),gK=a("a"),Z$r=o("TFMobileBertForTokenClassification"),ekr=o(" (MobileBERT model)"),okr=l(),XC=a("li"),VEe=a("strong"),rkr=o("mpnet"),tkr=o(" \u2014 "),hK=a("a"),akr=o("TFMPNetForTokenClassification"),nkr=o(" (MPNet model)"),skr=l(),zC=a("li"),XEe=a("strong"),lkr=o("rembert"),ikr=o(" \u2014 "),pK=a("a"),dkr=o("TFRemBertForTokenClassification"),ckr=o(" (RemBERT model)"),fkr=l(),QC=a("li"),zEe=a("strong"),mkr=o("roberta"),gkr=o(" \u2014 "),_K=a("a"),hkr=o("TFRobertaForTokenClassification"),pkr=o(" (RoBERTa model)"),_kr=l(),WC=a("li"),QEe=a("strong"),ukr=o("roformer"),bkr=o(" \u2014 "),uK=a("a"),vkr=o("TFRoFormerForTokenClassification"),Fkr=o(" (RoFormer model)"),Tkr=l(),HC=a("li"),WEe=a("strong"),Mkr=o("xlm"),Ekr=o(" \u2014 "),bK=a("a"),Ckr=o("TFXLMForTokenClassification"),wkr=o(" (XLM model)"),Akr=l(),UC=a("li"),HEe=a("strong"),Lkr=o("xlm-roberta"),ykr=o(" \u2014 "),vK=a("a"),xkr=o("TFXLMRobertaForTokenClassification"),$kr=o(" (XLM-RoBERTa model)"),kkr=l(),JC=a("li"),UEe=a("strong"),Skr=o("xlnet"),Rkr=o(" \u2014 "),FK=a("a"),Pkr=o("TFXLNetForTokenClassification"),Bkr=o(" (XLNet model)"),Nkr=l(),F(YC.$$.fragment),WVe=l(),Pc=a("h2"),KC=a("a"),JEe=a("span"),F(wx.$$.fragment),Ikr=l(),YEe=a("span"),qkr=o("TFAutoModelForQuestionAnswering"),HVe=l(),fr=a("div"),F(Ax.$$.fragment),jkr=l(),Bc=a("p"),Dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TK=a("a"),Gkr=o("from_pretrained()"),Okr=o(" class method or the "),MK=a("a"),Vkr=o("from_config()"),Xkr=o(` class
method.`),zkr=l(),Lx=a("p"),Qkr=o("This class cannot be instantiated directly using "),KEe=a("code"),Wkr=o("__init__()"),Hkr=o(" (throws an error)."),Ukr=l(),Gt=a("div"),F(yx.$$.fragment),Jkr=l(),ZEe=a("p"),Ykr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kkr=l(),Nc=a("p"),Zkr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),eSr=o("not"),oSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),rSr=o("from_pretrained()"),tSr=o(" to load the model weights."),aSr=l(),F(ZC.$$.fragment),nSr=l(),jr=a("div"),F(xx.$$.fragment),sSr=l(),o4e=a("p"),lSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iSr=l(),un=a("p"),dSr=o("The model class to instantiate is selected based on the "),r4e=a("code"),cSr=o("model_type"),fSr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),mSr=o("pretrained_model_name_or_path"),gSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(":"),_Sr=l(),ce=a("ul"),e5=a("li"),n4e=a("strong"),uSr=o("albert"),bSr=o(" \u2014 "),CK=a("a"),vSr=o("TFAlbertForQuestionAnswering"),FSr=o(" (ALBERT model)"),TSr=l(),o5=a("li"),s4e=a("strong"),MSr=o("bert"),ESr=o(" \u2014 "),wK=a("a"),CSr=o("TFBertForQuestionAnswering"),wSr=o(" (BERT model)"),ASr=l(),r5=a("li"),l4e=a("strong"),LSr=o("camembert"),ySr=o(" \u2014 "),AK=a("a"),xSr=o("TFCamembertForQuestionAnswering"),$Sr=o(" (CamemBERT model)"),kSr=l(),t5=a("li"),i4e=a("strong"),SSr=o("convbert"),RSr=o(" \u2014 "),LK=a("a"),PSr=o("TFConvBertForQuestionAnswering"),BSr=o(" (ConvBERT model)"),NSr=l(),a5=a("li"),d4e=a("strong"),ISr=o("deberta"),qSr=o(" \u2014 "),yK=a("a"),jSr=o("TFDebertaForQuestionAnswering"),DSr=o(" (DeBERTa model)"),GSr=l(),n5=a("li"),c4e=a("strong"),OSr=o("deberta-v2"),VSr=o(" \u2014 "),xK=a("a"),XSr=o("TFDebertaV2ForQuestionAnswering"),zSr=o(" (DeBERTa-v2 model)"),QSr=l(),s5=a("li"),f4e=a("strong"),WSr=o("distilbert"),HSr=o(" \u2014 "),$K=a("a"),USr=o("TFDistilBertForQuestionAnswering"),JSr=o(" (DistilBERT model)"),YSr=l(),l5=a("li"),m4e=a("strong"),KSr=o("electra"),ZSr=o(" \u2014 "),kK=a("a"),eRr=o("TFElectraForQuestionAnswering"),oRr=o(" (ELECTRA model)"),rRr=l(),i5=a("li"),g4e=a("strong"),tRr=o("flaubert"),aRr=o(" \u2014 "),SK=a("a"),nRr=o("TFFlaubertForQuestionAnsweringSimple"),sRr=o(" (FlauBERT model)"),lRr=l(),d5=a("li"),h4e=a("strong"),iRr=o("funnel"),dRr=o(" \u2014 "),RK=a("a"),cRr=o("TFFunnelForQuestionAnswering"),fRr=o(" (Funnel Transformer model)"),mRr=l(),c5=a("li"),p4e=a("strong"),gRr=o("gptj"),hRr=o(" \u2014 "),PK=a("a"),pRr=o("TFGPTJForQuestionAnswering"),_Rr=o(" (GPT-J model)"),uRr=l(),f5=a("li"),_4e=a("strong"),bRr=o("longformer"),vRr=o(" \u2014 "),BK=a("a"),FRr=o("TFLongformerForQuestionAnswering"),TRr=o(" (Longformer model)"),MRr=l(),m5=a("li"),u4e=a("strong"),ERr=o("mobilebert"),CRr=o(" \u2014 "),NK=a("a"),wRr=o("TFMobileBertForQuestionAnswering"),ARr=o(" (MobileBERT model)"),LRr=l(),g5=a("li"),b4e=a("strong"),yRr=o("mpnet"),xRr=o(" \u2014 "),IK=a("a"),$Rr=o("TFMPNetForQuestionAnswering"),kRr=o(" (MPNet model)"),SRr=l(),h5=a("li"),v4e=a("strong"),RRr=o("rembert"),PRr=o(" \u2014 "),qK=a("a"),BRr=o("TFRemBertForQuestionAnswering"),NRr=o(" (RemBERT model)"),IRr=l(),p5=a("li"),F4e=a("strong"),qRr=o("roberta"),jRr=o(" \u2014 "),jK=a("a"),DRr=o("TFRobertaForQuestionAnswering"),GRr=o(" (RoBERTa model)"),ORr=l(),_5=a("li"),T4e=a("strong"),VRr=o("roformer"),XRr=o(" \u2014 "),DK=a("a"),zRr=o("TFRoFormerForQuestionAnswering"),QRr=o(" (RoFormer model)"),WRr=l(),u5=a("li"),M4e=a("strong"),HRr=o("xlm"),URr=o(" \u2014 "),GK=a("a"),JRr=o("TFXLMForQuestionAnsweringSimple"),YRr=o(" (XLM model)"),KRr=l(),b5=a("li"),E4e=a("strong"),ZRr=o("xlm-roberta"),ePr=o(" \u2014 "),OK=a("a"),oPr=o("TFXLMRobertaForQuestionAnswering"),rPr=o(" (XLM-RoBERTa model)"),tPr=l(),v5=a("li"),C4e=a("strong"),aPr=o("xlnet"),nPr=o(" \u2014 "),VK=a("a"),sPr=o("TFXLNetForQuestionAnsweringSimple"),lPr=o(" (XLNet model)"),iPr=l(),F(F5.$$.fragment),UVe=l(),Ic=a("h2"),T5=a("a"),w4e=a("span"),F($x.$$.fragment),dPr=l(),A4e=a("span"),cPr=o("TFAutoModelForVision2Seq"),JVe=l(),mr=a("div"),F(kx.$$.fragment),fPr=l(),qc=a("p"),mPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XK=a("a"),gPr=o("from_pretrained()"),hPr=o(" class method or the "),zK=a("a"),pPr=o("from_config()"),_Pr=o(` class
method.`),uPr=l(),Sx=a("p"),bPr=o("This class cannot be instantiated directly using "),L4e=a("code"),vPr=o("__init__()"),FPr=o(" (throws an error)."),TPr=l(),Ot=a("div"),F(Rx.$$.fragment),MPr=l(),y4e=a("p"),EPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CPr=l(),jc=a("p"),wPr=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),APr=o("not"),LPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),yPr=o("from_pretrained()"),xPr=o(" to load the model weights."),$Pr=l(),F(M5.$$.fragment),kPr=l(),Dr=a("div"),F(Px.$$.fragment),SPr=l(),$4e=a("p"),RPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PPr=l(),bn=a("p"),BPr=o("The model class to instantiate is selected based on the "),k4e=a("code"),NPr=o("model_type"),IPr=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),qPr=o("pretrained_model_name_or_path"),jPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),DPr=o("pretrained_model_name_or_path"),GPr=o(":"),OPr=l(),P4e=a("ul"),E5=a("li"),B4e=a("strong"),VPr=o("vision-encoder-decoder"),XPr=o(" \u2014 "),WK=a("a"),zPr=o("TFVisionEncoderDecoderModel"),QPr=o(" (Vision Encoder decoder model)"),WPr=l(),F(C5.$$.fragment),YVe=l(),Dc=a("h2"),w5=a("a"),N4e=a("span"),F(Bx.$$.fragment),HPr=l(),I4e=a("span"),UPr=o("TFAutoModelForSpeechSeq2Seq"),KVe=l(),gr=a("div"),F(Nx.$$.fragment),JPr=l(),Gc=a("p"),YPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HK=a("a"),KPr=o("from_pretrained()"),ZPr=o(" class method or the "),UK=a("a"),eBr=o("from_config()"),oBr=o(` class
method.`),rBr=l(),Ix=a("p"),tBr=o("This class cannot be instantiated directly using "),q4e=a("code"),aBr=o("__init__()"),nBr=o(" (throws an error)."),sBr=l(),Vt=a("div"),F(qx.$$.fragment),lBr=l(),j4e=a("p"),iBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dBr=l(),Oc=a("p"),cBr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),fBr=o("not"),mBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),gBr=o("from_pretrained()"),hBr=o(" to load the model weights."),pBr=l(),F(A5.$$.fragment),_Br=l(),Gr=a("div"),F(jx.$$.fragment),uBr=l(),G4e=a("p"),bBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vBr=l(),vn=a("p"),FBr=o("The model class to instantiate is selected based on the "),O4e=a("code"),TBr=o("model_type"),MBr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),EBr=o("pretrained_model_name_or_path"),CBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(":"),LBr=l(),z4e=a("ul"),L5=a("li"),Q4e=a("strong"),yBr=o("speech_to_text"),xBr=o(" \u2014 "),YK=a("a"),$Br=o("TFSpeech2TextForConditionalGeneration"),kBr=o(" (Speech2Text model)"),SBr=l(),F(y5.$$.fragment),ZVe=l(),Vc=a("h2"),x5=a("a"),W4e=a("span"),F(Dx.$$.fragment),RBr=l(),H4e=a("span"),PBr=o("FlaxAutoModel"),eXe=l(),hr=a("div"),F(Gx.$$.fragment),BBr=l(),Xc=a("p"),NBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KK=a("a"),IBr=o("from_pretrained()"),qBr=o(" class method or the "),ZK=a("a"),jBr=o("from_config()"),DBr=o(` class
method.`),GBr=l(),Ox=a("p"),OBr=o("This class cannot be instantiated directly using "),U4e=a("code"),VBr=o("__init__()"),XBr=o(" (throws an error)."),zBr=l(),Xt=a("div"),F(Vx.$$.fragment),QBr=l(),J4e=a("p"),WBr=o("Instantiates one of the base model classes of the library from a configuration."),HBr=l(),zc=a("p"),UBr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),JBr=o("not"),YBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),KBr=o("from_pretrained()"),ZBr=o(" to load the model weights."),eNr=l(),F($5.$$.fragment),oNr=l(),Or=a("div"),F(Xx.$$.fragment),rNr=l(),K4e=a("p"),tNr=o("Instantiate one of the base model classes of the library from a pretrained model."),aNr=l(),Fn=a("p"),nNr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),sNr=o("model_type"),lNr=o(` property of the config object (either
passed as an argument or loaded from `),eCe=a("code"),iNr=o("pretrained_model_name_or_path"),dNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=a("code"),cNr=o("pretrained_model_name_or_path"),fNr=o(":"),mNr=l(),oe=a("ul"),k5=a("li"),rCe=a("strong"),gNr=o("albert"),hNr=o(" \u2014 "),oZ=a("a"),pNr=o("FlaxAlbertModel"),_Nr=o(" (ALBERT model)"),uNr=l(),S5=a("li"),tCe=a("strong"),bNr=o("bart"),vNr=o(" \u2014 "),rZ=a("a"),FNr=o("FlaxBartModel"),TNr=o(" (BART model)"),MNr=l(),R5=a("li"),aCe=a("strong"),ENr=o("beit"),CNr=o(" \u2014 "),tZ=a("a"),wNr=o("FlaxBeitModel"),ANr=o(" (BEiT model)"),LNr=l(),P5=a("li"),nCe=a("strong"),yNr=o("bert"),xNr=o(" \u2014 "),aZ=a("a"),$Nr=o("FlaxBertModel"),kNr=o(" (BERT model)"),SNr=l(),B5=a("li"),sCe=a("strong"),RNr=o("big_bird"),PNr=o(" \u2014 "),nZ=a("a"),BNr=o("FlaxBigBirdModel"),NNr=o(" (BigBird model)"),INr=l(),N5=a("li"),lCe=a("strong"),qNr=o("blenderbot"),jNr=o(" \u2014 "),sZ=a("a"),DNr=o("FlaxBlenderbotModel"),GNr=o(" (Blenderbot model)"),ONr=l(),I5=a("li"),iCe=a("strong"),VNr=o("blenderbot-small"),XNr=o(" \u2014 "),lZ=a("a"),zNr=o("FlaxBlenderbotSmallModel"),QNr=o(" (BlenderbotSmall model)"),WNr=l(),q5=a("li"),dCe=a("strong"),HNr=o("clip"),UNr=o(" \u2014 "),iZ=a("a"),JNr=o("FlaxCLIPModel"),YNr=o(" (CLIP model)"),KNr=l(),j5=a("li"),cCe=a("strong"),ZNr=o("distilbert"),eIr=o(" \u2014 "),dZ=a("a"),oIr=o("FlaxDistilBertModel"),rIr=o(" (DistilBERT model)"),tIr=l(),D5=a("li"),fCe=a("strong"),aIr=o("electra"),nIr=o(" \u2014 "),cZ=a("a"),sIr=o("FlaxElectraModel"),lIr=o(" (ELECTRA model)"),iIr=l(),G5=a("li"),mCe=a("strong"),dIr=o("gpt2"),cIr=o(" \u2014 "),fZ=a("a"),fIr=o("FlaxGPT2Model"),mIr=o(" (OpenAI GPT-2 model)"),gIr=l(),O5=a("li"),gCe=a("strong"),hIr=o("gpt_neo"),pIr=o(" \u2014 "),mZ=a("a"),_Ir=o("FlaxGPTNeoModel"),uIr=o(" (GPT Neo model)"),bIr=l(),V5=a("li"),hCe=a("strong"),vIr=o("gptj"),FIr=o(" \u2014 "),gZ=a("a"),TIr=o("FlaxGPTJModel"),MIr=o(" (GPT-J model)"),EIr=l(),X5=a("li"),pCe=a("strong"),CIr=o("longt5"),wIr=o(" \u2014 "),hZ=a("a"),AIr=o("FlaxLongT5Model"),LIr=o(" (LongT5 model)"),yIr=l(),z5=a("li"),_Ce=a("strong"),xIr=o("marian"),$Ir=o(" \u2014 "),pZ=a("a"),kIr=o("FlaxMarianModel"),SIr=o(" (Marian model)"),RIr=l(),Q5=a("li"),uCe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),_Z=a("a"),NIr=o("FlaxMBartModel"),IIr=o(" (mBART model)"),qIr=l(),W5=a("li"),bCe=a("strong"),jIr=o("mt5"),DIr=o(" \u2014 "),uZ=a("a"),GIr=o("FlaxMT5Model"),OIr=o(" (MT5 model)"),VIr=l(),H5=a("li"),vCe=a("strong"),XIr=o("opt"),zIr=o(" \u2014 "),bZ=a("a"),QIr=o("FlaxOPTModel"),WIr=o(" (OPT model)"),HIr=l(),U5=a("li"),FCe=a("strong"),UIr=o("pegasus"),JIr=o(" \u2014 "),vZ=a("a"),YIr=o("FlaxPegasusModel"),KIr=o(" (Pegasus model)"),ZIr=l(),J5=a("li"),TCe=a("strong"),eqr=o("roberta"),oqr=o(" \u2014 "),FZ=a("a"),rqr=o("FlaxRobertaModel"),tqr=o(" (RoBERTa model)"),aqr=l(),Y5=a("li"),MCe=a("strong"),nqr=o("roformer"),sqr=o(" \u2014 "),TZ=a("a"),lqr=o("FlaxRoFormerModel"),iqr=o(" (RoFormer model)"),dqr=l(),K5=a("li"),ECe=a("strong"),cqr=o("t5"),fqr=o(" \u2014 "),MZ=a("a"),mqr=o("FlaxT5Model"),gqr=o(" (T5 model)"),hqr=l(),Z5=a("li"),CCe=a("strong"),pqr=o("vision-text-dual-encoder"),_qr=o(" \u2014 "),EZ=a("a"),uqr=o("FlaxVisionTextDualEncoderModel"),bqr=o(" (VisionTextDualEncoder model)"),vqr=l(),e3=a("li"),wCe=a("strong"),Fqr=o("vit"),Tqr=o(" \u2014 "),CZ=a("a"),Mqr=o("FlaxViTModel"),Eqr=o(" (ViT model)"),Cqr=l(),o3=a("li"),ACe=a("strong"),wqr=o("wav2vec2"),Aqr=o(" \u2014 "),wZ=a("a"),Lqr=o("FlaxWav2Vec2Model"),yqr=o(" (Wav2Vec2 model)"),xqr=l(),r3=a("li"),LCe=a("strong"),$qr=o("xglm"),kqr=o(" \u2014 "),AZ=a("a"),Sqr=o("FlaxXGLMModel"),Rqr=o(" (XGLM model)"),Pqr=l(),t3=a("li"),yCe=a("strong"),Bqr=o("xlm-roberta"),Nqr=o(" \u2014 "),LZ=a("a"),Iqr=o("FlaxXLMRobertaModel"),qqr=o(" (XLM-RoBERTa model)"),jqr=l(),F(a3.$$.fragment),oXe=l(),Qc=a("h2"),n3=a("a"),xCe=a("span"),F(zx.$$.fragment),Dqr=l(),$Ce=a("span"),Gqr=o("FlaxAutoModelForCausalLM"),rXe=l(),pr=a("div"),F(Qx.$$.fragment),Oqr=l(),Wc=a("p"),Vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yZ=a("a"),Xqr=o("from_pretrained()"),zqr=o(" class method or the "),xZ=a("a"),Qqr=o("from_config()"),Wqr=o(` class
method.`),Hqr=l(),Wx=a("p"),Uqr=o("This class cannot be instantiated directly using "),kCe=a("code"),Jqr=o("__init__()"),Yqr=o(" (throws an error)."),Kqr=l(),zt=a("div"),F(Hx.$$.fragment),Zqr=l(),SCe=a("p"),ejr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ojr=l(),Hc=a("p"),rjr=o(`Note:
Loading a model from its configuration file does `),RCe=a("strong"),tjr=o("not"),ajr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),njr=o("from_pretrained()"),sjr=o(" to load the model weights."),ljr=l(),F(s3.$$.fragment),ijr=l(),Vr=a("div"),F(Ux.$$.fragment),djr=l(),PCe=a("p"),cjr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fjr=l(),Tn=a("p"),mjr=o("The model class to instantiate is selected based on the "),BCe=a("code"),gjr=o("model_type"),hjr=o(` property of the config object (either
passed as an argument or loaded from `),NCe=a("code"),pjr=o("pretrained_model_name_or_path"),_jr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ICe=a("code"),ujr=o("pretrained_model_name_or_path"),bjr=o(":"),vjr=l(),xe=a("ul"),l3=a("li"),qCe=a("strong"),Fjr=o("bart"),Tjr=o(" \u2014 "),kZ=a("a"),Mjr=o("FlaxBartForCausalLM"),Ejr=o(" (BART model)"),Cjr=l(),i3=a("li"),jCe=a("strong"),wjr=o("bert"),Ajr=o(" \u2014 "),SZ=a("a"),Ljr=o("FlaxBertForCausalLM"),yjr=o(" (BERT model)"),xjr=l(),d3=a("li"),DCe=a("strong"),$jr=o("big_bird"),kjr=o(" \u2014 "),RZ=a("a"),Sjr=o("FlaxBigBirdForCausalLM"),Rjr=o(" (BigBird model)"),Pjr=l(),c3=a("li"),GCe=a("strong"),Bjr=o("electra"),Njr=o(" \u2014 "),PZ=a("a"),Ijr=o("FlaxElectraForCausalLM"),qjr=o(" (ELECTRA model)"),jjr=l(),f3=a("li"),OCe=a("strong"),Djr=o("gpt2"),Gjr=o(" \u2014 "),BZ=a("a"),Ojr=o("FlaxGPT2LMHeadModel"),Vjr=o(" (OpenAI GPT-2 model)"),Xjr=l(),m3=a("li"),VCe=a("strong"),zjr=o("gpt_neo"),Qjr=o(" \u2014 "),NZ=a("a"),Wjr=o("FlaxGPTNeoForCausalLM"),Hjr=o(" (GPT Neo model)"),Ujr=l(),g3=a("li"),XCe=a("strong"),Jjr=o("gptj"),Yjr=o(" \u2014 "),IZ=a("a"),Kjr=o("FlaxGPTJForCausalLM"),Zjr=o(" (GPT-J model)"),eDr=l(),h3=a("li"),zCe=a("strong"),oDr=o("opt"),rDr=o(" \u2014 "),qZ=a("a"),tDr=o("FlaxOPTForCausalLM"),aDr=o(" (OPT model)"),nDr=l(),p3=a("li"),QCe=a("strong"),sDr=o("roberta"),lDr=o(" \u2014 "),jZ=a("a"),iDr=o("FlaxRobertaForCausalLM"),dDr=o(" (RoBERTa model)"),cDr=l(),_3=a("li"),WCe=a("strong"),fDr=o("xglm"),mDr=o(" \u2014 "),DZ=a("a"),gDr=o("FlaxXGLMForCausalLM"),hDr=o(" (XGLM model)"),pDr=l(),F(u3.$$.fragment),tXe=l(),Uc=a("h2"),b3=a("a"),HCe=a("span"),F(Jx.$$.fragment),_Dr=l(),UCe=a("span"),uDr=o("FlaxAutoModelForPreTraining"),aXe=l(),_r=a("div"),F(Yx.$$.fragment),bDr=l(),Jc=a("p"),vDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GZ=a("a"),FDr=o("from_pretrained()"),TDr=o(" class method or the "),OZ=a("a"),MDr=o("from_config()"),EDr=o(` class
method.`),CDr=l(),Kx=a("p"),wDr=o("This class cannot be instantiated directly using "),JCe=a("code"),ADr=o("__init__()"),LDr=o(" (throws an error)."),yDr=l(),Qt=a("div"),F(Zx.$$.fragment),xDr=l(),YCe=a("p"),$Dr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kDr=l(),Yc=a("p"),SDr=o(`Note:
Loading a model from its configuration file does `),KCe=a("strong"),RDr=o("not"),PDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=a("a"),BDr=o("from_pretrained()"),NDr=o(" to load the model weights."),IDr=l(),F(v3.$$.fragment),qDr=l(),Xr=a("div"),F(e$.$$.fragment),jDr=l(),ZCe=a("p"),DDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GDr=l(),Mn=a("p"),ODr=o("The model class to instantiate is selected based on the "),e5e=a("code"),VDr=o("model_type"),XDr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),zDr=o("pretrained_model_name_or_path"),QDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),WDr=o("pretrained_model_name_or_path"),HDr=o(":"),UDr=l(),Ee=a("ul"),F3=a("li"),t5e=a("strong"),JDr=o("albert"),YDr=o(" \u2014 "),XZ=a("a"),KDr=o("FlaxAlbertForPreTraining"),ZDr=o(" (ALBERT model)"),eGr=l(),T3=a("li"),a5e=a("strong"),oGr=o("bart"),rGr=o(" \u2014 "),zZ=a("a"),tGr=o("FlaxBartForConditionalGeneration"),aGr=o(" (BART model)"),nGr=l(),M3=a("li"),n5e=a("strong"),sGr=o("bert"),lGr=o(" \u2014 "),QZ=a("a"),iGr=o("FlaxBertForPreTraining"),dGr=o(" (BERT model)"),cGr=l(),E3=a("li"),s5e=a("strong"),fGr=o("big_bird"),mGr=o(" \u2014 "),WZ=a("a"),gGr=o("FlaxBigBirdForPreTraining"),hGr=o(" (BigBird model)"),pGr=l(),C3=a("li"),l5e=a("strong"),_Gr=o("electra"),uGr=o(" \u2014 "),HZ=a("a"),bGr=o("FlaxElectraForPreTraining"),vGr=o(" (ELECTRA model)"),FGr=l(),w3=a("li"),i5e=a("strong"),TGr=o("longt5"),MGr=o(" \u2014 "),UZ=a("a"),EGr=o("FlaxLongT5ForConditionalGeneration"),CGr=o(" (LongT5 model)"),wGr=l(),A3=a("li"),d5e=a("strong"),AGr=o("mbart"),LGr=o(" \u2014 "),JZ=a("a"),yGr=o("FlaxMBartForConditionalGeneration"),xGr=o(" (mBART model)"),$Gr=l(),L3=a("li"),c5e=a("strong"),kGr=o("mt5"),SGr=o(" \u2014 "),YZ=a("a"),RGr=o("FlaxMT5ForConditionalGeneration"),PGr=o(" (MT5 model)"),BGr=l(),y3=a("li"),f5e=a("strong"),NGr=o("roberta"),IGr=o(" \u2014 "),KZ=a("a"),qGr=o("FlaxRobertaForMaskedLM"),jGr=o(" (RoBERTa model)"),DGr=l(),x3=a("li"),m5e=a("strong"),GGr=o("roformer"),OGr=o(" \u2014 "),ZZ=a("a"),VGr=o("FlaxRoFormerForMaskedLM"),XGr=o(" (RoFormer model)"),zGr=l(),$3=a("li"),g5e=a("strong"),QGr=o("t5"),WGr=o(" \u2014 "),eee=a("a"),HGr=o("FlaxT5ForConditionalGeneration"),UGr=o(" (T5 model)"),JGr=l(),k3=a("li"),h5e=a("strong"),YGr=o("wav2vec2"),KGr=o(" \u2014 "),oee=a("a"),ZGr=o("FlaxWav2Vec2ForPreTraining"),eOr=o(" (Wav2Vec2 model)"),oOr=l(),S3=a("li"),p5e=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),ree=a("a"),aOr=o("FlaxXLMRobertaForMaskedLM"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(R3.$$.fragment),nXe=l(),Kc=a("h2"),P3=a("a"),_5e=a("span"),F(o$.$$.fragment),lOr=l(),u5e=a("span"),iOr=o("FlaxAutoModelForMaskedLM"),sXe=l(),ur=a("div"),F(r$.$$.fragment),dOr=l(),Zc=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tee=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),aee=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),t$=a("p"),_Or=o("This class cannot be instantiated directly using "),b5e=a("code"),uOr=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Wt=a("div"),F(a$.$$.fragment),FOr=l(),v5e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MOr=l(),ef=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),AOr=o("from_pretrained()"),LOr=o(" to load the model weights."),yOr=l(),F(B3.$$.fragment),xOr=l(),zr=a("div"),F(n$.$$.fragment),$Or=l(),T5e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SOr=l(),En=a("p"),ROr=o("The model class to instantiate is selected based on the "),M5e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),NOr=o("pretrained_model_name_or_path"),IOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),$e=a("ul"),N3=a("li"),w5e=a("strong"),GOr=o("albert"),OOr=o(" \u2014 "),see=a("a"),VOr=o("FlaxAlbertForMaskedLM"),XOr=o(" (ALBERT model)"),zOr=l(),I3=a("li"),A5e=a("strong"),QOr=o("bart"),WOr=o(" \u2014 "),lee=a("a"),HOr=o("FlaxBartForConditionalGeneration"),UOr=o(" (BART model)"),JOr=l(),q3=a("li"),L5e=a("strong"),YOr=o("bert"),KOr=o(" \u2014 "),iee=a("a"),ZOr=o("FlaxBertForMaskedLM"),eVr=o(" (BERT model)"),oVr=l(),j3=a("li"),y5e=a("strong"),rVr=o("big_bird"),tVr=o(" \u2014 "),dee=a("a"),aVr=o("FlaxBigBirdForMaskedLM"),nVr=o(" (BigBird model)"),sVr=l(),D3=a("li"),x5e=a("strong"),lVr=o("distilbert"),iVr=o(" \u2014 "),cee=a("a"),dVr=o("FlaxDistilBertForMaskedLM"),cVr=o(" (DistilBERT model)"),fVr=l(),G3=a("li"),$5e=a("strong"),mVr=o("electra"),gVr=o(" \u2014 "),fee=a("a"),hVr=o("FlaxElectraForMaskedLM"),pVr=o(" (ELECTRA model)"),_Vr=l(),O3=a("li"),k5e=a("strong"),uVr=o("mbart"),bVr=o(" \u2014 "),mee=a("a"),vVr=o("FlaxMBartForConditionalGeneration"),FVr=o(" (mBART model)"),TVr=l(),V3=a("li"),S5e=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),gee=a("a"),CVr=o("FlaxRobertaForMaskedLM"),wVr=o(" (RoBERTa model)"),AVr=l(),X3=a("li"),R5e=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),hee=a("a"),xVr=o("FlaxRoFormerForMaskedLM"),$Vr=o(" (RoFormer model)"),kVr=l(),z3=a("li"),P5e=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),pee=a("a"),PVr=o("FlaxXLMRobertaForMaskedLM"),BVr=o(" (XLM-RoBERTa model)"),NVr=l(),F(Q3.$$.fragment),lXe=l(),of=a("h2"),W3=a("a"),B5e=a("span"),F(s$.$$.fragment),IVr=l(),N5e=a("span"),qVr=o("FlaxAutoModelForSeq2SeqLM"),iXe=l(),br=a("div"),F(l$.$$.fragment),jVr=l(),rf=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_ee=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),uee=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),i$=a("p"),QVr=o("This class cannot be instantiated directly using "),I5e=a("code"),WVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Ht=a("div"),F(d$.$$.fragment),JVr=l(),q5e=a("p"),YVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KVr=l(),tf=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(H3.$$.fragment),nXr=l(),Qr=a("div"),F(c$.$$.fragment),sXr=l(),D5e=a("p"),lXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iXr=l(),Cn=a("p"),dXr=o("The model class to instantiate is selected based on the "),G5e=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),_Xr=l(),ke=a("ul"),U3=a("li"),X5e=a("strong"),uXr=o("bart"),bXr=o(" \u2014 "),vee=a("a"),vXr=o("FlaxBartForConditionalGeneration"),FXr=o(" (BART model)"),TXr=l(),J3=a("li"),z5e=a("strong"),MXr=o("blenderbot"),EXr=o(" \u2014 "),Fee=a("a"),CXr=o("FlaxBlenderbotForConditionalGeneration"),wXr=o(" (Blenderbot model)"),AXr=l(),Y3=a("li"),Q5e=a("strong"),LXr=o("blenderbot-small"),yXr=o(" \u2014 "),Tee=a("a"),xXr=o("FlaxBlenderbotSmallForConditionalGeneration"),$Xr=o(" (BlenderbotSmall model)"),kXr=l(),K3=a("li"),W5e=a("strong"),SXr=o("encoder-decoder"),RXr=o(" \u2014 "),Mee=a("a"),PXr=o("FlaxEncoderDecoderModel"),BXr=o(" (Encoder decoder model)"),NXr=l(),Z3=a("li"),H5e=a("strong"),IXr=o("longt5"),qXr=o(" \u2014 "),Eee=a("a"),jXr=o("FlaxLongT5ForConditionalGeneration"),DXr=o(" (LongT5 model)"),GXr=l(),e0=a("li"),U5e=a("strong"),OXr=o("marian"),VXr=o(" \u2014 "),Cee=a("a"),XXr=o("FlaxMarianMTModel"),zXr=o(" (Marian model)"),QXr=l(),o0=a("li"),J5e=a("strong"),WXr=o("mbart"),HXr=o(" \u2014 "),wee=a("a"),UXr=o("FlaxMBartForConditionalGeneration"),JXr=o(" (mBART model)"),YXr=l(),r0=a("li"),Y5e=a("strong"),KXr=o("mt5"),ZXr=o(" \u2014 "),Aee=a("a"),ezr=o("FlaxMT5ForConditionalGeneration"),ozr=o(" (MT5 model)"),rzr=l(),t0=a("li"),K5e=a("strong"),tzr=o("pegasus"),azr=o(" \u2014 "),Lee=a("a"),nzr=o("FlaxPegasusForConditionalGeneration"),szr=o(" (Pegasus model)"),lzr=l(),a0=a("li"),Z5e=a("strong"),izr=o("t5"),dzr=o(" \u2014 "),yee=a("a"),czr=o("FlaxT5ForConditionalGeneration"),fzr=o(" (T5 model)"),mzr=l(),F(n0.$$.fragment),dXe=l(),af=a("h2"),s0=a("a"),e3e=a("span"),F(f$.$$.fragment),gzr=l(),o3e=a("span"),hzr=o("FlaxAutoModelForSequenceClassification"),cXe=l(),vr=a("div"),F(m$.$$.fragment),pzr=l(),nf=a("p"),_zr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xee=a("a"),uzr=o("from_pretrained()"),bzr=o(" class method or the "),$ee=a("a"),vzr=o("from_config()"),Fzr=o(` class
method.`),Tzr=l(),g$=a("p"),Mzr=o("This class cannot be instantiated directly using "),r3e=a("code"),Ezr=o("__init__()"),Czr=o(" (throws an error)."),wzr=l(),Ut=a("div"),F(h$.$$.fragment),Azr=l(),t3e=a("p"),Lzr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yzr=l(),sf=a("p"),xzr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),$zr=o("not"),kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=a("a"),Szr=o("from_pretrained()"),Rzr=o(" to load the model weights."),Pzr=l(),F(l0.$$.fragment),Bzr=l(),Wr=a("div"),F(p$.$$.fragment),Nzr=l(),n3e=a("p"),Izr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qzr=l(),wn=a("p"),jzr=o("The model class to instantiate is selected based on the "),s3e=a("code"),Dzr=o("model_type"),Gzr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),Ozr=o("pretrained_model_name_or_path"),Vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(":"),Qzr=l(),Se=a("ul"),i0=a("li"),d3e=a("strong"),Wzr=o("albert"),Hzr=o(" \u2014 "),See=a("a"),Uzr=o("FlaxAlbertForSequenceClassification"),Jzr=o(" (ALBERT model)"),Yzr=l(),d0=a("li"),c3e=a("strong"),Kzr=o("bart"),Zzr=o(" \u2014 "),Ree=a("a"),eQr=o("FlaxBartForSequenceClassification"),oQr=o(" (BART model)"),rQr=l(),c0=a("li"),f3e=a("strong"),tQr=o("bert"),aQr=o(" \u2014 "),Pee=a("a"),nQr=o("FlaxBertForSequenceClassification"),sQr=o(" (BERT model)"),lQr=l(),f0=a("li"),m3e=a("strong"),iQr=o("big_bird"),dQr=o(" \u2014 "),Bee=a("a"),cQr=o("FlaxBigBirdForSequenceClassification"),fQr=o(" (BigBird model)"),mQr=l(),m0=a("li"),g3e=a("strong"),gQr=o("distilbert"),hQr=o(" \u2014 "),Nee=a("a"),pQr=o("FlaxDistilBertForSequenceClassification"),_Qr=o(" (DistilBERT model)"),uQr=l(),g0=a("li"),h3e=a("strong"),bQr=o("electra"),vQr=o(" \u2014 "),Iee=a("a"),FQr=o("FlaxElectraForSequenceClassification"),TQr=o(" (ELECTRA model)"),MQr=l(),h0=a("li"),p3e=a("strong"),EQr=o("mbart"),CQr=o(" \u2014 "),qee=a("a"),wQr=o("FlaxMBartForSequenceClassification"),AQr=o(" (mBART model)"),LQr=l(),p0=a("li"),_3e=a("strong"),yQr=o("roberta"),xQr=o(" \u2014 "),jee=a("a"),$Qr=o("FlaxRobertaForSequenceClassification"),kQr=o(" (RoBERTa model)"),SQr=l(),_0=a("li"),u3e=a("strong"),RQr=o("roformer"),PQr=o(" \u2014 "),Dee=a("a"),BQr=o("FlaxRoFormerForSequenceClassification"),NQr=o(" (RoFormer model)"),IQr=l(),u0=a("li"),b3e=a("strong"),qQr=o("xlm-roberta"),jQr=o(" \u2014 "),Gee=a("a"),DQr=o("FlaxXLMRobertaForSequenceClassification"),GQr=o(" (XLM-RoBERTa model)"),OQr=l(),F(b0.$$.fragment),fXe=l(),lf=a("h2"),v0=a("a"),v3e=a("span"),F(_$.$$.fragment),VQr=l(),F3e=a("span"),XQr=o("FlaxAutoModelForQuestionAnswering"),mXe=l(),Fr=a("div"),F(u$.$$.fragment),zQr=l(),df=a("p"),QQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oee=a("a"),WQr=o("from_pretrained()"),HQr=o(" class method or the "),Vee=a("a"),UQr=o("from_config()"),JQr=o(` class
method.`),YQr=l(),b$=a("p"),KQr=o("This class cannot be instantiated directly using "),T3e=a("code"),ZQr=o("__init__()"),eWr=o(" (throws an error)."),oWr=l(),Jt=a("div"),F(v$.$$.fragment),rWr=l(),M3e=a("p"),tWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aWr=l(),cf=a("p"),nWr=o(`Note:
Loading a model from its configuration file does `),E3e=a("strong"),sWr=o("not"),lWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),iWr=o("from_pretrained()"),dWr=o(" to load the model weights."),cWr=l(),F(F0.$$.fragment),fWr=l(),Hr=a("div"),F(F$.$$.fragment),mWr=l(),C3e=a("p"),gWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hWr=l(),An=a("p"),pWr=o("The model class to instantiate is selected based on the "),w3e=a("code"),_Wr=o("model_type"),uWr=o(` property of the config object (either
passed as an argument or loaded from `),A3e=a("code"),bWr=o("pretrained_model_name_or_path"),vWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=a("code"),FWr=o("pretrained_model_name_or_path"),TWr=o(":"),MWr=l(),Re=a("ul"),T0=a("li"),y3e=a("strong"),EWr=o("albert"),CWr=o(" \u2014 "),zee=a("a"),wWr=o("FlaxAlbertForQuestionAnswering"),AWr=o(" (ALBERT model)"),LWr=l(),M0=a("li"),x3e=a("strong"),yWr=o("bart"),xWr=o(" \u2014 "),Qee=a("a"),$Wr=o("FlaxBartForQuestionAnswering"),kWr=o(" (BART model)"),SWr=l(),E0=a("li"),$3e=a("strong"),RWr=o("bert"),PWr=o(" \u2014 "),Wee=a("a"),BWr=o("FlaxBertForQuestionAnswering"),NWr=o(" (BERT model)"),IWr=l(),C0=a("li"),k3e=a("strong"),qWr=o("big_bird"),jWr=o(" \u2014 "),Hee=a("a"),DWr=o("FlaxBigBirdForQuestionAnswering"),GWr=o(" (BigBird model)"),OWr=l(),w0=a("li"),S3e=a("strong"),VWr=o("distilbert"),XWr=o(" \u2014 "),Uee=a("a"),zWr=o("FlaxDistilBertForQuestionAnswering"),QWr=o(" (DistilBERT model)"),WWr=l(),A0=a("li"),R3e=a("strong"),HWr=o("electra"),UWr=o(" \u2014 "),Jee=a("a"),JWr=o("FlaxElectraForQuestionAnswering"),YWr=o(" (ELECTRA model)"),KWr=l(),L0=a("li"),P3e=a("strong"),ZWr=o("mbart"),eHr=o(" \u2014 "),Yee=a("a"),oHr=o("FlaxMBartForQuestionAnswering"),rHr=o(" (mBART model)"),tHr=l(),y0=a("li"),B3e=a("strong"),aHr=o("roberta"),nHr=o(" \u2014 "),Kee=a("a"),sHr=o("FlaxRobertaForQuestionAnswering"),lHr=o(" (RoBERTa model)"),iHr=l(),x0=a("li"),N3e=a("strong"),dHr=o("roformer"),cHr=o(" \u2014 "),Zee=a("a"),fHr=o("FlaxRoFormerForQuestionAnswering"),mHr=o(" (RoFormer model)"),gHr=l(),$0=a("li"),I3e=a("strong"),hHr=o("xlm-roberta"),pHr=o(" \u2014 "),eoe=a("a"),_Hr=o("FlaxXLMRobertaForQuestionAnswering"),uHr=o(" (XLM-RoBERTa model)"),bHr=l(),F(k0.$$.fragment),gXe=l(),ff=a("h2"),S0=a("a"),q3e=a("span"),F(T$.$$.fragment),vHr=l(),j3e=a("span"),FHr=o("FlaxAutoModelForTokenClassification"),hXe=l(),Tr=a("div"),F(M$.$$.fragment),THr=l(),mf=a("p"),MHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ooe=a("a"),EHr=o("from_pretrained()"),CHr=o(" class method or the "),roe=a("a"),wHr=o("from_config()"),AHr=o(` class
method.`),LHr=l(),E$=a("p"),yHr=o("This class cannot be instantiated directly using "),D3e=a("code"),xHr=o("__init__()"),$Hr=o(" (throws an error)."),kHr=l(),Yt=a("div"),F(C$.$$.fragment),SHr=l(),G3e=a("p"),RHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PHr=l(),gf=a("p"),BHr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),NHr=o("not"),IHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),qHr=o("from_pretrained()"),jHr=o(" to load the model weights."),DHr=l(),F(R0.$$.fragment),GHr=l(),Ur=a("div"),F(w$.$$.fragment),OHr=l(),V3e=a("p"),VHr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XHr=l(),Ln=a("p"),zHr=o("The model class to instantiate is selected based on the "),X3e=a("code"),QHr=o("model_type"),WHr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),HHr=o("pretrained_model_name_or_path"),UHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=a("code"),JHr=o("pretrained_model_name_or_path"),YHr=o(":"),KHr=l(),Ve=a("ul"),P0=a("li"),W3e=a("strong"),ZHr=o("albert"),eUr=o(" \u2014 "),aoe=a("a"),oUr=o("FlaxAlbertForTokenClassification"),rUr=o(" (ALBERT model)"),tUr=l(),B0=a("li"),H3e=a("strong"),aUr=o("bert"),nUr=o(" \u2014 "),noe=a("a"),sUr=o("FlaxBertForTokenClassification"),lUr=o(" (BERT model)"),iUr=l(),N0=a("li"),U3e=a("strong"),dUr=o("big_bird"),cUr=o(" \u2014 "),soe=a("a"),fUr=o("FlaxBigBirdForTokenClassification"),mUr=o(" (BigBird model)"),gUr=l(),I0=a("li"),J3e=a("strong"),hUr=o("distilbert"),pUr=o(" \u2014 "),loe=a("a"),_Ur=o("FlaxDistilBertForTokenClassification"),uUr=o(" (DistilBERT model)"),bUr=l(),q0=a("li"),Y3e=a("strong"),vUr=o("electra"),FUr=o(" \u2014 "),ioe=a("a"),TUr=o("FlaxElectraForTokenClassification"),MUr=o(" (ELECTRA model)"),EUr=l(),j0=a("li"),K3e=a("strong"),CUr=o("roberta"),wUr=o(" \u2014 "),doe=a("a"),AUr=o("FlaxRobertaForTokenClassification"),LUr=o(" (RoBERTa model)"),yUr=l(),D0=a("li"),Z3e=a("strong"),xUr=o("roformer"),$Ur=o(" \u2014 "),coe=a("a"),kUr=o("FlaxRoFormerForTokenClassification"),SUr=o(" (RoFormer model)"),RUr=l(),G0=a("li"),e0e=a("strong"),PUr=o("xlm-roberta"),BUr=o(" \u2014 "),foe=a("a"),NUr=o("FlaxXLMRobertaForTokenClassification"),IUr=o(" (XLM-RoBERTa model)"),qUr=l(),F(O0.$$.fragment),pXe=l(),hf=a("h2"),V0=a("a"),o0e=a("span"),F(A$.$$.fragment),jUr=l(),r0e=a("span"),DUr=o("FlaxAutoModelForMultipleChoice"),_Xe=l(),Mr=a("div"),F(L$.$$.fragment),GUr=l(),pf=a("p"),OUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),moe=a("a"),VUr=o("from_pretrained()"),XUr=o(" class method or the "),goe=a("a"),zUr=o("from_config()"),QUr=o(` class
method.`),WUr=l(),y$=a("p"),HUr=o("This class cannot be instantiated directly using "),t0e=a("code"),UUr=o("__init__()"),JUr=o(" (throws an error)."),YUr=l(),Kt=a("div"),F(x$.$$.fragment),KUr=l(),a0e=a("p"),ZUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eJr=l(),_f=a("p"),oJr=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),rJr=o("not"),tJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("a"),aJr=o("from_pretrained()"),nJr=o(" to load the model weights."),sJr=l(),F(X0.$$.fragment),lJr=l(),Jr=a("div"),F($$.$$.fragment),iJr=l(),s0e=a("p"),dJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cJr=l(),yn=a("p"),fJr=o("The model class to instantiate is selected based on the "),l0e=a("code"),mJr=o("model_type"),gJr=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),hJr=o("pretrained_model_name_or_path"),pJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),_Jr=o("pretrained_model_name_or_path"),uJr=o(":"),bJr=l(),Xe=a("ul"),z0=a("li"),c0e=a("strong"),vJr=o("albert"),FJr=o(" \u2014 "),poe=a("a"),TJr=o("FlaxAlbertForMultipleChoice"),MJr=o(" (ALBERT model)"),EJr=l(),Q0=a("li"),f0e=a("strong"),CJr=o("bert"),wJr=o(" \u2014 "),_oe=a("a"),AJr=o("FlaxBertForMultipleChoice"),LJr=o(" (BERT model)"),yJr=l(),W0=a("li"),m0e=a("strong"),xJr=o("big_bird"),$Jr=o(" \u2014 "),uoe=a("a"),kJr=o("FlaxBigBirdForMultipleChoice"),SJr=o(" (BigBird model)"),RJr=l(),H0=a("li"),g0e=a("strong"),PJr=o("distilbert"),BJr=o(" \u2014 "),boe=a("a"),NJr=o("FlaxDistilBertForMultipleChoice"),IJr=o(" (DistilBERT model)"),qJr=l(),U0=a("li"),h0e=a("strong"),jJr=o("electra"),DJr=o(" \u2014 "),voe=a("a"),GJr=o("FlaxElectraForMultipleChoice"),OJr=o(" (ELECTRA model)"),VJr=l(),J0=a("li"),p0e=a("strong"),XJr=o("roberta"),zJr=o(" \u2014 "),Foe=a("a"),QJr=o("FlaxRobertaForMultipleChoice"),WJr=o(" (RoBERTa model)"),HJr=l(),Y0=a("li"),_0e=a("strong"),UJr=o("roformer"),JJr=o(" \u2014 "),Toe=a("a"),YJr=o("FlaxRoFormerForMultipleChoice"),KJr=o(" (RoFormer model)"),ZJr=l(),K0=a("li"),u0e=a("strong"),eYr=o("xlm-roberta"),oYr=o(" \u2014 "),Moe=a("a"),rYr=o("FlaxXLMRobertaForMultipleChoice"),tYr=o(" (XLM-RoBERTa model)"),aYr=l(),F(Z0.$$.fragment),uXe=l(),uf=a("h2"),ew=a("a"),b0e=a("span"),F(k$.$$.fragment),nYr=l(),v0e=a("span"),sYr=o("FlaxAutoModelForNextSentencePrediction"),bXe=l(),Er=a("div"),F(S$.$$.fragment),lYr=l(),bf=a("p"),iYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Eoe=a("a"),dYr=o("from_pretrained()"),cYr=o(" class method or the "),Coe=a("a"),fYr=o("from_config()"),mYr=o(` class
method.`),gYr=l(),R$=a("p"),hYr=o("This class cannot be instantiated directly using "),F0e=a("code"),pYr=o("__init__()"),_Yr=o(" (throws an error)."),uYr=l(),Zt=a("div"),F(P$.$$.fragment),bYr=l(),T0e=a("p"),vYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FYr=l(),vf=a("p"),TYr=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),MYr=o("not"),EYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),CYr=o("from_pretrained()"),wYr=o(" to load the model weights."),AYr=l(),F(ow.$$.fragment),LYr=l(),Yr=a("div"),F(B$.$$.fragment),yYr=l(),E0e=a("p"),xYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$Yr=l(),xn=a("p"),kYr=o("The model class to instantiate is selected based on the "),C0e=a("code"),SYr=o("model_type"),RYr=o(` property of the config object (either
passed as an argument or loaded from `),w0e=a("code"),PYr=o("pretrained_model_name_or_path"),BYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=a("code"),NYr=o("pretrained_model_name_or_path"),IYr=o(":"),qYr=l(),L0e=a("ul"),rw=a("li"),y0e=a("strong"),jYr=o("bert"),DYr=o(" \u2014 "),Aoe=a("a"),GYr=o("FlaxBertForNextSentencePrediction"),OYr=o(" (BERT model)"),VYr=l(),F(tw.$$.fragment),vXe=l(),Ff=a("h2"),aw=a("a"),x0e=a("span"),F(N$.$$.fragment),XYr=l(),$0e=a("span"),zYr=o("FlaxAutoModelForImageClassification"),FXe=l(),Cr=a("div"),F(I$.$$.fragment),QYr=l(),Tf=a("p"),WYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Loe=a("a"),HYr=o("from_pretrained()"),UYr=o(" class method or the "),yoe=a("a"),JYr=o("from_config()"),YYr=o(` class
method.`),KYr=l(),q$=a("p"),ZYr=o("This class cannot be instantiated directly using "),k0e=a("code"),eKr=o("__init__()"),oKr=o(" (throws an error)."),rKr=l(),ea=a("div"),F(j$.$$.fragment),tKr=l(),S0e=a("p"),aKr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nKr=l(),Mf=a("p"),sKr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),lKr=o("not"),iKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=a("a"),dKr=o("from_pretrained()"),cKr=o(" to load the model weights."),fKr=l(),F(nw.$$.fragment),mKr=l(),Kr=a("div"),F(D$.$$.fragment),gKr=l(),P0e=a("p"),hKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pKr=l(),$n=a("p"),_Kr=o("The model class to instantiate is selected based on the "),B0e=a("code"),uKr=o("model_type"),bKr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),vKr=o("pretrained_model_name_or_path"),FKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),TKr=o("pretrained_model_name_or_path"),MKr=o(":"),EKr=l(),G$=a("ul"),sw=a("li"),q0e=a("strong"),CKr=o("beit"),wKr=o(" \u2014 "),$oe=a("a"),AKr=o("FlaxBeitForImageClassification"),LKr=o(" (BEiT model)"),yKr=l(),lw=a("li"),j0e=a("strong"),xKr=o("vit"),$Kr=o(" \u2014 "),koe=a("a"),kKr=o("FlaxViTForImageClassification"),SKr=o(" (ViT model)"),RKr=l(),F(iw.$$.fragment),TXe=l(),Ef=a("h2"),dw=a("a"),D0e=a("span"),F(O$.$$.fragment),PKr=l(),G0e=a("span"),BKr=o("FlaxAutoModelForVision2Seq"),MXe=l(),wr=a("div"),F(V$.$$.fragment),NKr=l(),Cf=a("p"),IKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Soe=a("a"),qKr=o("from_pretrained()"),jKr=o(" class method or the "),Roe=a("a"),DKr=o("from_config()"),GKr=o(` class
method.`),OKr=l(),X$=a("p"),VKr=o("This class cannot be instantiated directly using "),O0e=a("code"),XKr=o("__init__()"),zKr=o(" (throws an error)."),QKr=l(),oa=a("div"),F(z$.$$.fragment),WKr=l(),V0e=a("p"),HKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UKr=l(),wf=a("p"),JKr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),YKr=o("not"),KKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=a("a"),ZKr=o("from_pretrained()"),eZr=o(" to load the model weights."),oZr=l(),F(cw.$$.fragment),rZr=l(),Zr=a("div"),F(Q$.$$.fragment),tZr=l(),z0e=a("p"),aZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nZr=l(),kn=a("p"),sZr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),lZr=o("model_type"),iZr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),dZr=o("pretrained_model_name_or_path"),cZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),fZr=o("pretrained_model_name_or_path"),mZr=o(":"),gZr=l(),U0e=a("ul"),fw=a("li"),J0e=a("strong"),hZr=o("vision-encoder-decoder"),pZr=o(" \u2014 "),Boe=a("a"),_Zr=o("FlaxVisionEncoderDecoderModel"),uZr=o(" (Vision Encoder decoder model)"),bZr=l(),F(mw.$$.fragment),this.h()},l(f){const u=sOt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var W$=s(p);m=n(W$,"A",{id:!0,class:!0,href:!0});var Y0e=s(m);_=n(Y0e,"SPAN",{});var K0e=s(_);T(d.$$.fragment,K0e),K0e.forEach(t),Y0e.forEach(t),h=i(W$),Eo=n(W$,"SPAN",{});var Z0e=s(Eo);Mi=r(Z0e,"Auto Classes"),Z0e.forEach(t),W$.forEach(t),xf=i(f),at=n(f,"P",{});var H$=s(at);Ei=r(H$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(H$,"CODE",{});var ewe=s(Ci);R6=r(ewe,"from_pretrained()"),ewe.forEach(t),$f=r(H$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),H$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var owe=s(Rn);P6=r(owe,"AutoConfig"),owe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var rwe=s(Bn);B6=r(rwe,"AutoModel"),rwe.forEach(t),Ai=r(Sn,`, and
`),Nn=n(Sn,"A",{href:!0});var twe=s(Nn);N6=r(twe,"AutoTokenizer"),twe.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),kf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var U$=s(Ae);fS=r(U$,"will create a model that is an instance of "),yi=n(U$,"A",{href:!0});var awe=s(yi);mS=r(awe,"BertModel"),awe.forEach(t),gS=r(U$,"."),U$.forEach(t),Co=i(f),$a=n(f,"P",{});var J$=s($a);hS=r(J$,"There is one class of "),Sf=n(J$,"CODE",{});var nwe=s(Sf);pS=r(nwe,"AutoModel"),nwe.forEach(t),RQe=r(J$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),J$.forEach(t),bOe=i(f),xi=n(f,"H2",{class:!0});var Y$=s(xi);Rf=n(Y$,"A",{id:!0,class:!0,href:!0});var swe=s(Rf);$te=n(swe,"SPAN",{});var lwe=s($te);T(I6.$$.fragment,lwe),lwe.forEach(t),swe.forEach(t),PQe=i(Y$),kte=n(Y$,"SPAN",{});var iwe=s(kte);BQe=r(iwe,"Extending the Auto Classes"),iwe.forEach(t),Y$.forEach(t),vOe=i(f),In=n(f,"P",{});var Af=s(In);NQe=r(Af,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ste=n(Af,"CODE",{});var dwe=s(Ste);IQe=r(dwe,"NewModel"),dwe.forEach(t),qQe=r(Af,", make sure you have a "),Rte=n(Af,"CODE",{});var cwe=s(Rte);jQe=r(cwe,"NewModelConfig"),cwe.forEach(t),DQe=r(Af,` then you can add those to the auto
classes like this:`),Af.forEach(t),FOe=i(f),T(q6.$$.fragment,f),TOe=i(f),_S=n(f,"P",{});var fwe=s(_S);GQe=r(fwe,"You will then be able to use the auto classes like you would usually do!"),fwe.forEach(t),MOe=i(f),T(Pf.$$.fragment,f),EOe=i(f),$i=n(f,"H2",{class:!0});var K$=s($i);Bf=n(K$,"A",{id:!0,class:!0,href:!0});var mwe=s(Bf);Pte=n(mwe,"SPAN",{});var gwe=s(Pte);T(j6.$$.fragment,gwe),gwe.forEach(t),mwe.forEach(t),OQe=i(K$),Bte=n(K$,"SPAN",{});var hwe=s(Bte);VQe=r(hwe,"AutoConfig"),hwe.forEach(t),K$.forEach(t),COe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(D6.$$.fragment,rt),XQe=i(rt),G6=n(rt,"P",{});var Z$=s(G6);zQe=r(Z$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),uS=n(Z$,"A",{href:!0});var pwe=s(uS);QQe=r(pwe,"from_pretrained()"),pwe.forEach(t),WQe=r(Z$," class method."),Z$.forEach(t),HQe=i(rt),O6=n(rt,"P",{});var ek=s(O6);UQe=r(ek,"This class cannot be instantiated directly using "),Nte=n(ek,"CODE",{});var _we=s(Nte);JQe=r(_we,"__init__()"),_we.forEach(t),YQe=r(ek," (throws an error)."),ek.forEach(t),KQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(V6.$$.fragment,tt),ZQe=i(tt),Ite=n(tt,"P",{});var uwe=s(Ite);eWe=r(uwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),uwe.forEach(t),oWe=i(tt),ki=n(tt,"P",{});var Lf=s(ki);rWe=r(Lf,"The configuration class to instantiate is selected based on the "),qte=n(Lf,"CODE",{});var bwe=s(qte);tWe=r(bwe,"model_type"),bwe.forEach(t),aWe=r(Lf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),jte=n(Lf,"CODE",{});var vwe=s(jte);nWe=r(vwe,"pretrained_model_name_or_path"),vwe.forEach(t),sWe=r(Lf,":"),Lf.forEach(t),lWe=i(tt),A=n(tt,"UL",{});var L=s(A);Nf=n(L,"LI",{});var gw=s(Nf);Dte=n(gw,"STRONG",{});var Fwe=s(Dte);iWe=r(Fwe,"albert"),Fwe.forEach(t),dWe=r(gw," \u2014 "),bS=n(gw,"A",{href:!0});var Twe=s(bS);cWe=r(Twe,"AlbertConfig"),Twe.forEach(t),fWe=r(gw," (ALBERT model)"),gw.forEach(t),mWe=i(L),If=n(L,"LI",{});var hw=s(If);Gte=n(hw,"STRONG",{});var Mwe=s(Gte);gWe=r(Mwe,"bart"),Mwe.forEach(t),hWe=r(hw," \u2014 "),vS=n(hw,"A",{href:!0});var Ewe=s(vS);pWe=r(Ewe,"BartConfig"),Ewe.forEach(t),_We=r(hw," (BART model)"),hw.forEach(t),uWe=i(L),qf=n(L,"LI",{});var pw=s(qf);Ote=n(pw,"STRONG",{});var Cwe=s(Ote);bWe=r(Cwe,"beit"),Cwe.forEach(t),vWe=r(pw," \u2014 "),FS=n(pw,"A",{href:!0});var wwe=s(FS);FWe=r(wwe,"BeitConfig"),wwe.forEach(t),TWe=r(pw," (BEiT model)"),pw.forEach(t),MWe=i(L),jf=n(L,"LI",{});var _w=s(jf);Vte=n(_w,"STRONG",{});var Awe=s(Vte);EWe=r(Awe,"bert"),Awe.forEach(t),CWe=r(_w," \u2014 "),TS=n(_w,"A",{href:!0});var Lwe=s(TS);wWe=r(Lwe,"BertConfig"),Lwe.forEach(t),AWe=r(_w," (BERT model)"),_w.forEach(t),LWe=i(L),Df=n(L,"LI",{});var uw=s(Df);Xte=n(uw,"STRONG",{});var ywe=s(Xte);yWe=r(ywe,"bert-generation"),ywe.forEach(t),xWe=r(uw," \u2014 "),MS=n(uw,"A",{href:!0});var xwe=s(MS);$We=r(xwe,"BertGenerationConfig"),xwe.forEach(t),kWe=r(uw," (Bert Generation model)"),uw.forEach(t),SWe=i(L),Gf=n(L,"LI",{});var bw=s(Gf);zte=n(bw,"STRONG",{});var $we=s(zte);RWe=r($we,"big_bird"),$we.forEach(t),PWe=r(bw," \u2014 "),ES=n(bw,"A",{href:!0});var kwe=s(ES);BWe=r(kwe,"BigBirdConfig"),kwe.forEach(t),NWe=r(bw," (BigBird model)"),bw.forEach(t),IWe=i(L),Of=n(L,"LI",{});var vw=s(Of);Qte=n(vw,"STRONG",{});var Swe=s(Qte);qWe=r(Swe,"bigbird_pegasus"),Swe.forEach(t),jWe=r(vw," \u2014 "),CS=n(vw,"A",{href:!0});var Rwe=s(CS);DWe=r(Rwe,"BigBirdPegasusConfig"),Rwe.forEach(t),GWe=r(vw," (BigBird-Pegasus model)"),vw.forEach(t),OWe=i(L),Vf=n(L,"LI",{});var Fw=s(Vf);Wte=n(Fw,"STRONG",{});var Pwe=s(Wte);VWe=r(Pwe,"blenderbot"),Pwe.forEach(t),XWe=r(Fw," \u2014 "),wS=n(Fw,"A",{href:!0});var Bwe=s(wS);zWe=r(Bwe,"BlenderbotConfig"),Bwe.forEach(t),QWe=r(Fw," (Blenderbot model)"),Fw.forEach(t),WWe=i(L),Xf=n(L,"LI",{});var Tw=s(Xf);Hte=n(Tw,"STRONG",{});var Nwe=s(Hte);HWe=r(Nwe,"blenderbot-small"),Nwe.forEach(t),UWe=r(Tw," \u2014 "),AS=n(Tw,"A",{href:!0});var Iwe=s(AS);JWe=r(Iwe,"BlenderbotSmallConfig"),Iwe.forEach(t),YWe=r(Tw," (BlenderbotSmall model)"),Tw.forEach(t),KWe=i(L),zf=n(L,"LI",{});var Mw=s(zf);Ute=n(Mw,"STRONG",{});var qwe=s(Ute);ZWe=r(qwe,"bloom"),qwe.forEach(t),eHe=r(Mw," \u2014 "),LS=n(Mw,"A",{href:!0});var jwe=s(LS);oHe=r(jwe,"BloomConfig"),jwe.forEach(t),rHe=r(Mw," (BLOOM model)"),Mw.forEach(t),tHe=i(L),Qf=n(L,"LI",{});var Ew=s(Qf);Jte=n(Ew,"STRONG",{});var Dwe=s(Jte);aHe=r(Dwe,"camembert"),Dwe.forEach(t),nHe=r(Ew," \u2014 "),yS=n(Ew,"A",{href:!0});var Gwe=s(yS);sHe=r(Gwe,"CamembertConfig"),Gwe.forEach(t),lHe=r(Ew," (CamemBERT model)"),Ew.forEach(t),iHe=i(L),Wf=n(L,"LI",{});var Cw=s(Wf);Yte=n(Cw,"STRONG",{});var Owe=s(Yte);dHe=r(Owe,"canine"),Owe.forEach(t),cHe=r(Cw," \u2014 "),xS=n(Cw,"A",{href:!0});var Vwe=s(xS);fHe=r(Vwe,"CanineConfig"),Vwe.forEach(t),mHe=r(Cw," (CANINE model)"),Cw.forEach(t),gHe=i(L),Hf=n(L,"LI",{});var ww=s(Hf);Kte=n(ww,"STRONG",{});var Xwe=s(Kte);hHe=r(Xwe,"clip"),Xwe.forEach(t),pHe=r(ww," \u2014 "),$S=n(ww,"A",{href:!0});var zwe=s($S);_He=r(zwe,"CLIPConfig"),zwe.forEach(t),uHe=r(ww," (CLIP model)"),ww.forEach(t),bHe=i(L),Uf=n(L,"LI",{});var Aw=s(Uf);Zte=n(Aw,"STRONG",{});var Qwe=s(Zte);vHe=r(Qwe,"codegen"),Qwe.forEach(t),FHe=r(Aw," \u2014 "),kS=n(Aw,"A",{href:!0});var Wwe=s(kS);THe=r(Wwe,"CodeGenConfig"),Wwe.forEach(t),MHe=r(Aw," (CodeGen model)"),Aw.forEach(t),EHe=i(L),Jf=n(L,"LI",{});var Lw=s(Jf);eae=n(Lw,"STRONG",{});var Hwe=s(eae);CHe=r(Hwe,"convbert"),Hwe.forEach(t),wHe=r(Lw," \u2014 "),SS=n(Lw,"A",{href:!0});var Uwe=s(SS);AHe=r(Uwe,"ConvBertConfig"),Uwe.forEach(t),LHe=r(Lw," (ConvBERT model)"),Lw.forEach(t),yHe=i(L),Yf=n(L,"LI",{});var yw=s(Yf);oae=n(yw,"STRONG",{});var Jwe=s(oae);xHe=r(Jwe,"convnext"),Jwe.forEach(t),$He=r(yw," \u2014 "),RS=n(yw,"A",{href:!0});var Ywe=s(RS);kHe=r(Ywe,"ConvNextConfig"),Ywe.forEach(t),SHe=r(yw," (ConvNeXT model)"),yw.forEach(t),RHe=i(L),Kf=n(L,"LI",{});var xw=s(Kf);rae=n(xw,"STRONG",{});var Kwe=s(rae);PHe=r(Kwe,"ctrl"),Kwe.forEach(t),BHe=r(xw," \u2014 "),PS=n(xw,"A",{href:!0});var Zwe=s(PS);NHe=r(Zwe,"CTRLConfig"),Zwe.forEach(t),IHe=r(xw," (CTRL model)"),xw.forEach(t),qHe=i(L),Zf=n(L,"LI",{});var $w=s(Zf);tae=n($w,"STRONG",{});var eAe=s(tae);jHe=r(eAe,"cvt"),eAe.forEach(t),DHe=r($w," \u2014 "),BS=n($w,"A",{href:!0});var oAe=s(BS);GHe=r(oAe,"CvtConfig"),oAe.forEach(t),OHe=r($w," (CvT model)"),$w.forEach(t),VHe=i(L),em=n(L,"LI",{});var kw=s(em);aae=n(kw,"STRONG",{});var rAe=s(aae);XHe=r(rAe,"data2vec-audio"),rAe.forEach(t),zHe=r(kw," \u2014 "),NS=n(kw,"A",{href:!0});var tAe=s(NS);QHe=r(tAe,"Data2VecAudioConfig"),tAe.forEach(t),WHe=r(kw," (Data2VecAudio model)"),kw.forEach(t),HHe=i(L),om=n(L,"LI",{});var Sw=s(om);nae=n(Sw,"STRONG",{});var aAe=s(nae);UHe=r(aAe,"data2vec-text"),aAe.forEach(t),JHe=r(Sw," \u2014 "),IS=n(Sw,"A",{href:!0});var nAe=s(IS);YHe=r(nAe,"Data2VecTextConfig"),nAe.forEach(t),KHe=r(Sw," (Data2VecText model)"),Sw.forEach(t),ZHe=i(L),rm=n(L,"LI",{});var Rw=s(rm);sae=n(Rw,"STRONG",{});var sAe=s(sae);eUe=r(sAe,"data2vec-vision"),sAe.forEach(t),oUe=r(Rw," \u2014 "),qS=n(Rw,"A",{href:!0});var lAe=s(qS);rUe=r(lAe,"Data2VecVisionConfig"),lAe.forEach(t),tUe=r(Rw," (Data2VecVision model)"),Rw.forEach(t),aUe=i(L),tm=n(L,"LI",{});var Pw=s(tm);lae=n(Pw,"STRONG",{});var iAe=s(lae);nUe=r(iAe,"deberta"),iAe.forEach(t),sUe=r(Pw," \u2014 "),jS=n(Pw,"A",{href:!0});var dAe=s(jS);lUe=r(dAe,"DebertaConfig"),dAe.forEach(t),iUe=r(Pw," (DeBERTa model)"),Pw.forEach(t),dUe=i(L),am=n(L,"LI",{});var Bw=s(am);iae=n(Bw,"STRONG",{});var cAe=s(iae);cUe=r(cAe,"deberta-v2"),cAe.forEach(t),fUe=r(Bw," \u2014 "),DS=n(Bw,"A",{href:!0});var fAe=s(DS);mUe=r(fAe,"DebertaV2Config"),fAe.forEach(t),gUe=r(Bw," (DeBERTa-v2 model)"),Bw.forEach(t),hUe=i(L),nm=n(L,"LI",{});var Nw=s(nm);dae=n(Nw,"STRONG",{});var FZr=s(dae);pUe=r(FZr,"decision_transformer"),FZr.forEach(t),_Ue=r(Nw," \u2014 "),GS=n(Nw,"A",{href:!0});var TZr=s(GS);uUe=r(TZr,"DecisionTransformerConfig"),TZr.forEach(t),bUe=r(Nw," (Decision Transformer model)"),Nw.forEach(t),vUe=i(L),sm=n(L,"LI",{});var mAe=s(sm);cae=n(mAe,"STRONG",{});var MZr=s(cae);FUe=r(MZr,"deit"),MZr.forEach(t),TUe=r(mAe," \u2014 "),OS=n(mAe,"A",{href:!0});var EZr=s(OS);MUe=r(EZr,"DeiTConfig"),EZr.forEach(t),EUe=r(mAe," (DeiT model)"),mAe.forEach(t),CUe=i(L),lm=n(L,"LI",{});var gAe=s(lm);fae=n(gAe,"STRONG",{});var CZr=s(fae);wUe=r(CZr,"detr"),CZr.forEach(t),AUe=r(gAe," \u2014 "),VS=n(gAe,"A",{href:!0});var wZr=s(VS);LUe=r(wZr,"DetrConfig"),wZr.forEach(t),yUe=r(gAe," (DETR model)"),gAe.forEach(t),xUe=i(L),im=n(L,"LI",{});var hAe=s(im);mae=n(hAe,"STRONG",{});var AZr=s(mae);$Ue=r(AZr,"distilbert"),AZr.forEach(t),kUe=r(hAe," \u2014 "),XS=n(hAe,"A",{href:!0});var LZr=s(XS);SUe=r(LZr,"DistilBertConfig"),LZr.forEach(t),RUe=r(hAe," (DistilBERT model)"),hAe.forEach(t),PUe=i(L),dm=n(L,"LI",{});var pAe=s(dm);gae=n(pAe,"STRONG",{});var yZr=s(gae);BUe=r(yZr,"dpr"),yZr.forEach(t),NUe=r(pAe," \u2014 "),zS=n(pAe,"A",{href:!0});var xZr=s(zS);IUe=r(xZr,"DPRConfig"),xZr.forEach(t),qUe=r(pAe," (DPR model)"),pAe.forEach(t),jUe=i(L),cm=n(L,"LI",{});var _Ae=s(cm);hae=n(_Ae,"STRONG",{});var $Zr=s(hae);DUe=r($Zr,"dpt"),$Zr.forEach(t),GUe=r(_Ae," \u2014 "),QS=n(_Ae,"A",{href:!0});var kZr=s(QS);OUe=r(kZr,"DPTConfig"),kZr.forEach(t),VUe=r(_Ae," (DPT model)"),_Ae.forEach(t),XUe=i(L),fm=n(L,"LI",{});var uAe=s(fm);pae=n(uAe,"STRONG",{});var SZr=s(pae);zUe=r(SZr,"electra"),SZr.forEach(t),QUe=r(uAe," \u2014 "),WS=n(uAe,"A",{href:!0});var RZr=s(WS);WUe=r(RZr,"ElectraConfig"),RZr.forEach(t),HUe=r(uAe," (ELECTRA model)"),uAe.forEach(t),UUe=i(L),mm=n(L,"LI",{});var bAe=s(mm);_ae=n(bAe,"STRONG",{});var PZr=s(_ae);JUe=r(PZr,"encoder-decoder"),PZr.forEach(t),YUe=r(bAe," \u2014 "),HS=n(bAe,"A",{href:!0});var BZr=s(HS);KUe=r(BZr,"EncoderDecoderConfig"),BZr.forEach(t),ZUe=r(bAe," (Encoder decoder model)"),bAe.forEach(t),eJe=i(L),gm=n(L,"LI",{});var vAe=s(gm);uae=n(vAe,"STRONG",{});var NZr=s(uae);oJe=r(NZr,"flaubert"),NZr.forEach(t),rJe=r(vAe," \u2014 "),US=n(vAe,"A",{href:!0});var IZr=s(US);tJe=r(IZr,"FlaubertConfig"),IZr.forEach(t),aJe=r(vAe," (FlauBERT model)"),vAe.forEach(t),nJe=i(L),hm=n(L,"LI",{});var FAe=s(hm);bae=n(FAe,"STRONG",{});var qZr=s(bae);sJe=r(qZr,"flava"),qZr.forEach(t),lJe=r(FAe," \u2014 "),JS=n(FAe,"A",{href:!0});var jZr=s(JS);iJe=r(jZr,"FlavaConfig"),jZr.forEach(t),dJe=r(FAe," (FLAVA model)"),FAe.forEach(t),cJe=i(L),pm=n(L,"LI",{});var TAe=s(pm);vae=n(TAe,"STRONG",{});var DZr=s(vae);fJe=r(DZr,"fnet"),DZr.forEach(t),mJe=r(TAe," \u2014 "),YS=n(TAe,"A",{href:!0});var GZr=s(YS);gJe=r(GZr,"FNetConfig"),GZr.forEach(t),hJe=r(TAe," (FNet model)"),TAe.forEach(t),pJe=i(L),_m=n(L,"LI",{});var MAe=s(_m);Fae=n(MAe,"STRONG",{});var OZr=s(Fae);_Je=r(OZr,"fsmt"),OZr.forEach(t),uJe=r(MAe," \u2014 "),KS=n(MAe,"A",{href:!0});var VZr=s(KS);bJe=r(VZr,"FSMTConfig"),VZr.forEach(t),vJe=r(MAe," (FairSeq Machine-Translation model)"),MAe.forEach(t),FJe=i(L),um=n(L,"LI",{});var EAe=s(um);Tae=n(EAe,"STRONG",{});var XZr=s(Tae);TJe=r(XZr,"funnel"),XZr.forEach(t),MJe=r(EAe," \u2014 "),ZS=n(EAe,"A",{href:!0});var zZr=s(ZS);EJe=r(zZr,"FunnelConfig"),zZr.forEach(t),CJe=r(EAe," (Funnel Transformer model)"),EAe.forEach(t),wJe=i(L),bm=n(L,"LI",{});var CAe=s(bm);Mae=n(CAe,"STRONG",{});var QZr=s(Mae);AJe=r(QZr,"glpn"),QZr.forEach(t),LJe=r(CAe," \u2014 "),eR=n(CAe,"A",{href:!0});var WZr=s(eR);yJe=r(WZr,"GLPNConfig"),WZr.forEach(t),xJe=r(CAe," (GLPN model)"),CAe.forEach(t),$Je=i(L),vm=n(L,"LI",{});var wAe=s(vm);Eae=n(wAe,"STRONG",{});var HZr=s(Eae);kJe=r(HZr,"gpt2"),HZr.forEach(t),SJe=r(wAe," \u2014 "),oR=n(wAe,"A",{href:!0});var UZr=s(oR);RJe=r(UZr,"GPT2Config"),UZr.forEach(t),PJe=r(wAe," (OpenAI GPT-2 model)"),wAe.forEach(t),BJe=i(L),Fm=n(L,"LI",{});var AAe=s(Fm);Cae=n(AAe,"STRONG",{});var JZr=s(Cae);NJe=r(JZr,"gpt_neo"),JZr.forEach(t),IJe=r(AAe," \u2014 "),rR=n(AAe,"A",{href:!0});var YZr=s(rR);qJe=r(YZr,"GPTNeoConfig"),YZr.forEach(t),jJe=r(AAe," (GPT Neo model)"),AAe.forEach(t),DJe=i(L),Tm=n(L,"LI",{});var LAe=s(Tm);wae=n(LAe,"STRONG",{});var KZr=s(wae);GJe=r(KZr,"gpt_neox"),KZr.forEach(t),OJe=r(LAe," \u2014 "),tR=n(LAe,"A",{href:!0});var ZZr=s(tR);VJe=r(ZZr,"GPTNeoXConfig"),ZZr.forEach(t),XJe=r(LAe," (GPT NeoX model)"),LAe.forEach(t),zJe=i(L),Mm=n(L,"LI",{});var yAe=s(Mm);Aae=n(yAe,"STRONG",{});var eet=s(Aae);QJe=r(eet,"gptj"),eet.forEach(t),WJe=r(yAe," \u2014 "),aR=n(yAe,"A",{href:!0});var oet=s(aR);HJe=r(oet,"GPTJConfig"),oet.forEach(t),UJe=r(yAe," (GPT-J model)"),yAe.forEach(t),JJe=i(L),Em=n(L,"LI",{});var xAe=s(Em);Lae=n(xAe,"STRONG",{});var ret=s(Lae);YJe=r(ret,"hubert"),ret.forEach(t),KJe=r(xAe," \u2014 "),nR=n(xAe,"A",{href:!0});var tet=s(nR);ZJe=r(tet,"HubertConfig"),tet.forEach(t),eYe=r(xAe," (Hubert model)"),xAe.forEach(t),oYe=i(L),Cm=n(L,"LI",{});var $Ae=s(Cm);yae=n($Ae,"STRONG",{});var aet=s(yae);rYe=r(aet,"ibert"),aet.forEach(t),tYe=r($Ae," \u2014 "),sR=n($Ae,"A",{href:!0});var net=s(sR);aYe=r(net,"IBertConfig"),net.forEach(t),nYe=r($Ae," (I-BERT model)"),$Ae.forEach(t),sYe=i(L),wm=n(L,"LI",{});var kAe=s(wm);xae=n(kAe,"STRONG",{});var set=s(xae);lYe=r(set,"imagegpt"),set.forEach(t),iYe=r(kAe," \u2014 "),lR=n(kAe,"A",{href:!0});var iet=s(lR);dYe=r(iet,"ImageGPTConfig"),iet.forEach(t),cYe=r(kAe," (ImageGPT model)"),kAe.forEach(t),fYe=i(L),Am=n(L,"LI",{});var SAe=s(Am);$ae=n(SAe,"STRONG",{});var det=s($ae);mYe=r(det,"layoutlm"),det.forEach(t),gYe=r(SAe," \u2014 "),iR=n(SAe,"A",{href:!0});var cet=s(iR);hYe=r(cet,"LayoutLMConfig"),cet.forEach(t),pYe=r(SAe," (LayoutLM model)"),SAe.forEach(t),_Ye=i(L),Lm=n(L,"LI",{});var RAe=s(Lm);kae=n(RAe,"STRONG",{});var fet=s(kae);uYe=r(fet,"layoutlmv2"),fet.forEach(t),bYe=r(RAe," \u2014 "),dR=n(RAe,"A",{href:!0});var met=s(dR);vYe=r(met,"LayoutLMv2Config"),met.forEach(t),FYe=r(RAe," (LayoutLMv2 model)"),RAe.forEach(t),TYe=i(L),ym=n(L,"LI",{});var PAe=s(ym);Sae=n(PAe,"STRONG",{});var get=s(Sae);MYe=r(get,"layoutlmv3"),get.forEach(t),EYe=r(PAe," \u2014 "),cR=n(PAe,"A",{href:!0});var het=s(cR);CYe=r(het,"LayoutLMv3Config"),het.forEach(t),wYe=r(PAe," (LayoutLMv3 model)"),PAe.forEach(t),AYe=i(L),xm=n(L,"LI",{});var BAe=s(xm);Rae=n(BAe,"STRONG",{});var pet=s(Rae);LYe=r(pet,"led"),pet.forEach(t),yYe=r(BAe," \u2014 "),fR=n(BAe,"A",{href:!0});var _et=s(fR);xYe=r(_et,"LEDConfig"),_et.forEach(t),$Ye=r(BAe," (LED model)"),BAe.forEach(t),kYe=i(L),$m=n(L,"LI",{});var NAe=s($m);Pae=n(NAe,"STRONG",{});var uet=s(Pae);SYe=r(uet,"levit"),uet.forEach(t),RYe=r(NAe," \u2014 "),mR=n(NAe,"A",{href:!0});var bet=s(mR);PYe=r(bet,"LevitConfig"),bet.forEach(t),BYe=r(NAe," (LeViT model)"),NAe.forEach(t),NYe=i(L),km=n(L,"LI",{});var IAe=s(km);Bae=n(IAe,"STRONG",{});var vet=s(Bae);IYe=r(vet,"longformer"),vet.forEach(t),qYe=r(IAe," \u2014 "),gR=n(IAe,"A",{href:!0});var Fet=s(gR);jYe=r(Fet,"LongformerConfig"),Fet.forEach(t),DYe=r(IAe," (Longformer model)"),IAe.forEach(t),GYe=i(L),Sm=n(L,"LI",{});var qAe=s(Sm);Nae=n(qAe,"STRONG",{});var Tet=s(Nae);OYe=r(Tet,"longt5"),Tet.forEach(t),VYe=r(qAe," \u2014 "),hR=n(qAe,"A",{href:!0});var Met=s(hR);XYe=r(Met,"LongT5Config"),Met.forEach(t),zYe=r(qAe," (LongT5 model)"),qAe.forEach(t),QYe=i(L),Rm=n(L,"LI",{});var jAe=s(Rm);Iae=n(jAe,"STRONG",{});var Eet=s(Iae);WYe=r(Eet,"luke"),Eet.forEach(t),HYe=r(jAe," \u2014 "),pR=n(jAe,"A",{href:!0});var Cet=s(pR);UYe=r(Cet,"LukeConfig"),Cet.forEach(t),JYe=r(jAe," (LUKE model)"),jAe.forEach(t),YYe=i(L),Pm=n(L,"LI",{});var DAe=s(Pm);qae=n(DAe,"STRONG",{});var wet=s(qae);KYe=r(wet,"lxmert"),wet.forEach(t),ZYe=r(DAe," \u2014 "),_R=n(DAe,"A",{href:!0});var Aet=s(_R);eKe=r(Aet,"LxmertConfig"),Aet.forEach(t),oKe=r(DAe," (LXMERT model)"),DAe.forEach(t),rKe=i(L),Bm=n(L,"LI",{});var GAe=s(Bm);jae=n(GAe,"STRONG",{});var Let=s(jae);tKe=r(Let,"m2m_100"),Let.forEach(t),aKe=r(GAe," \u2014 "),uR=n(GAe,"A",{href:!0});var yet=s(uR);nKe=r(yet,"M2M100Config"),yet.forEach(t),sKe=r(GAe," (M2M100 model)"),GAe.forEach(t),lKe=i(L),Nm=n(L,"LI",{});var OAe=s(Nm);Dae=n(OAe,"STRONG",{});var xet=s(Dae);iKe=r(xet,"marian"),xet.forEach(t),dKe=r(OAe," \u2014 "),bR=n(OAe,"A",{href:!0});var $et=s(bR);cKe=r($et,"MarianConfig"),$et.forEach(t),fKe=r(OAe," (Marian model)"),OAe.forEach(t),mKe=i(L),Im=n(L,"LI",{});var VAe=s(Im);Gae=n(VAe,"STRONG",{});var ket=s(Gae);gKe=r(ket,"maskformer"),ket.forEach(t),hKe=r(VAe," \u2014 "),vR=n(VAe,"A",{href:!0});var Set=s(vR);pKe=r(Set,"MaskFormerConfig"),Set.forEach(t),_Ke=r(VAe," (MaskFormer model)"),VAe.forEach(t),uKe=i(L),qm=n(L,"LI",{});var XAe=s(qm);Oae=n(XAe,"STRONG",{});var Ret=s(Oae);bKe=r(Ret,"mbart"),Ret.forEach(t),vKe=r(XAe," \u2014 "),FR=n(XAe,"A",{href:!0});var Pet=s(FR);FKe=r(Pet,"MBartConfig"),Pet.forEach(t),TKe=r(XAe," (mBART model)"),XAe.forEach(t),MKe=i(L),jm=n(L,"LI",{});var zAe=s(jm);Vae=n(zAe,"STRONG",{});var Bet=s(Vae);EKe=r(Bet,"mctct"),Bet.forEach(t),CKe=r(zAe," \u2014 "),TR=n(zAe,"A",{href:!0});var Net=s(TR);wKe=r(Net,"MCTCTConfig"),Net.forEach(t),AKe=r(zAe," (M-CTC-T model)"),zAe.forEach(t),LKe=i(L),Dm=n(L,"LI",{});var QAe=s(Dm);Xae=n(QAe,"STRONG",{});var Iet=s(Xae);yKe=r(Iet,"megatron-bert"),Iet.forEach(t),xKe=r(QAe," \u2014 "),MR=n(QAe,"A",{href:!0});var qet=s(MR);$Ke=r(qet,"MegatronBertConfig"),qet.forEach(t),kKe=r(QAe," (Megatron-BERT model)"),QAe.forEach(t),SKe=i(L),Gm=n(L,"LI",{});var WAe=s(Gm);zae=n(WAe,"STRONG",{});var jet=s(zae);RKe=r(jet,"mobilebert"),jet.forEach(t),PKe=r(WAe," \u2014 "),ER=n(WAe,"A",{href:!0});var Det=s(ER);BKe=r(Det,"MobileBertConfig"),Det.forEach(t),NKe=r(WAe," (MobileBERT model)"),WAe.forEach(t),IKe=i(L),Om=n(L,"LI",{});var HAe=s(Om);Qae=n(HAe,"STRONG",{});var Get=s(Qae);qKe=r(Get,"mobilenet_v1"),Get.forEach(t),jKe=r(HAe," \u2014 "),CR=n(HAe,"A",{href:!0});var Oet=s(CR);DKe=r(Oet,"MobileNetV1Config"),Oet.forEach(t),GKe=r(HAe," (MobileNetV1 model)"),HAe.forEach(t),OKe=i(L),Vm=n(L,"LI",{});var UAe=s(Vm);Wae=n(UAe,"STRONG",{});var Vet=s(Wae);VKe=r(Vet,"mpnet"),Vet.forEach(t),XKe=r(UAe," \u2014 "),wR=n(UAe,"A",{href:!0});var Xet=s(wR);zKe=r(Xet,"MPNetConfig"),Xet.forEach(t),QKe=r(UAe," (MPNet model)"),UAe.forEach(t),WKe=i(L),Xm=n(L,"LI",{});var JAe=s(Xm);Hae=n(JAe,"STRONG",{});var zet=s(Hae);HKe=r(zet,"mt5"),zet.forEach(t),UKe=r(JAe," \u2014 "),AR=n(JAe,"A",{href:!0});var Qet=s(AR);JKe=r(Qet,"MT5Config"),Qet.forEach(t),YKe=r(JAe," (MT5 model)"),JAe.forEach(t),KKe=i(L),zm=n(L,"LI",{});var YAe=s(zm);Uae=n(YAe,"STRONG",{});var Wet=s(Uae);ZKe=r(Wet,"nezha"),Wet.forEach(t),eZe=r(YAe," \u2014 "),LR=n(YAe,"A",{href:!0});var Het=s(LR);oZe=r(Het,"NezhaConfig"),Het.forEach(t),rZe=r(YAe," (Nezha model)"),YAe.forEach(t),tZe=i(L),Qm=n(L,"LI",{});var KAe=s(Qm);Jae=n(KAe,"STRONG",{});var Uet=s(Jae);aZe=r(Uet,"nystromformer"),Uet.forEach(t),nZe=r(KAe," \u2014 "),yR=n(KAe,"A",{href:!0});var Jet=s(yR);sZe=r(Jet,"NystromformerConfig"),Jet.forEach(t),lZe=r(KAe," (Nystr\xF6mformer model)"),KAe.forEach(t),iZe=i(L),Wm=n(L,"LI",{});var ZAe=s(Wm);Yae=n(ZAe,"STRONG",{});var Yet=s(Yae);dZe=r(Yet,"openai-gpt"),Yet.forEach(t),cZe=r(ZAe," \u2014 "),xR=n(ZAe,"A",{href:!0});var Ket=s(xR);fZe=r(Ket,"OpenAIGPTConfig"),Ket.forEach(t),mZe=r(ZAe," (OpenAI GPT model)"),ZAe.forEach(t),gZe=i(L),Hm=n(L,"LI",{});var e6e=s(Hm);Kae=n(e6e,"STRONG",{});var Zet=s(Kae);hZe=r(Zet,"opt"),Zet.forEach(t),pZe=r(e6e," \u2014 "),$R=n(e6e,"A",{href:!0});var eot=s($R);_Ze=r(eot,"OPTConfig"),eot.forEach(t),uZe=r(e6e," (OPT model)"),e6e.forEach(t),bZe=i(L),Um=n(L,"LI",{});var o6e=s(Um);Zae=n(o6e,"STRONG",{});var oot=s(Zae);vZe=r(oot,"pegasus"),oot.forEach(t),FZe=r(o6e," \u2014 "),kR=n(o6e,"A",{href:!0});var rot=s(kR);TZe=r(rot,"PegasusConfig"),rot.forEach(t),MZe=r(o6e," (Pegasus model)"),o6e.forEach(t),EZe=i(L),Jm=n(L,"LI",{});var r6e=s(Jm);ene=n(r6e,"STRONG",{});var tot=s(ene);CZe=r(tot,"perceiver"),tot.forEach(t),wZe=r(r6e," \u2014 "),SR=n(r6e,"A",{href:!0});var aot=s(SR);AZe=r(aot,"PerceiverConfig"),aot.forEach(t),LZe=r(r6e," (Perceiver model)"),r6e.forEach(t),yZe=i(L),Ym=n(L,"LI",{});var t6e=s(Ym);one=n(t6e,"STRONG",{});var not=s(one);xZe=r(not,"plbart"),not.forEach(t),$Ze=r(t6e," \u2014 "),RR=n(t6e,"A",{href:!0});var sot=s(RR);kZe=r(sot,"PLBartConfig"),sot.forEach(t),SZe=r(t6e," (PLBart model)"),t6e.forEach(t),RZe=i(L),Km=n(L,"LI",{});var a6e=s(Km);rne=n(a6e,"STRONG",{});var lot=s(rne);PZe=r(lot,"poolformer"),lot.forEach(t),BZe=r(a6e," \u2014 "),PR=n(a6e,"A",{href:!0});var iot=s(PR);NZe=r(iot,"PoolFormerConfig"),iot.forEach(t),IZe=r(a6e," (PoolFormer model)"),a6e.forEach(t),qZe=i(L),Zm=n(L,"LI",{});var n6e=s(Zm);tne=n(n6e,"STRONG",{});var dot=s(tne);jZe=r(dot,"prophetnet"),dot.forEach(t),DZe=r(n6e," \u2014 "),BR=n(n6e,"A",{href:!0});var cot=s(BR);GZe=r(cot,"ProphetNetConfig"),cot.forEach(t),OZe=r(n6e," (ProphetNet model)"),n6e.forEach(t),VZe=i(L),eg=n(L,"LI",{});var s6e=s(eg);ane=n(s6e,"STRONG",{});var fot=s(ane);XZe=r(fot,"qdqbert"),fot.forEach(t),zZe=r(s6e," \u2014 "),NR=n(s6e,"A",{href:!0});var mot=s(NR);QZe=r(mot,"QDQBertConfig"),mot.forEach(t),WZe=r(s6e," (QDQBert model)"),s6e.forEach(t),HZe=i(L),og=n(L,"LI",{});var l6e=s(og);nne=n(l6e,"STRONG",{});var got=s(nne);UZe=r(got,"rag"),got.forEach(t),JZe=r(l6e," \u2014 "),IR=n(l6e,"A",{href:!0});var hot=s(IR);YZe=r(hot,"RagConfig"),hot.forEach(t),KZe=r(l6e," (RAG model)"),l6e.forEach(t),ZZe=i(L),rg=n(L,"LI",{});var i6e=s(rg);sne=n(i6e,"STRONG",{});var pot=s(sne);eeo=r(pot,"realm"),pot.forEach(t),oeo=r(i6e," \u2014 "),qR=n(i6e,"A",{href:!0});var _ot=s(qR);reo=r(_ot,"RealmConfig"),_ot.forEach(t),teo=r(i6e," (REALM model)"),i6e.forEach(t),aeo=i(L),tg=n(L,"LI",{});var d6e=s(tg);lne=n(d6e,"STRONG",{});var uot=s(lne);neo=r(uot,"reformer"),uot.forEach(t),seo=r(d6e," \u2014 "),jR=n(d6e,"A",{href:!0});var bot=s(jR);leo=r(bot,"ReformerConfig"),bot.forEach(t),ieo=r(d6e," (Reformer model)"),d6e.forEach(t),deo=i(L),ag=n(L,"LI",{});var c6e=s(ag);ine=n(c6e,"STRONG",{});var vot=s(ine);ceo=r(vot,"regnet"),vot.forEach(t),feo=r(c6e," \u2014 "),DR=n(c6e,"A",{href:!0});var Fot=s(DR);meo=r(Fot,"RegNetConfig"),Fot.forEach(t),geo=r(c6e," (RegNet model)"),c6e.forEach(t),heo=i(L),ng=n(L,"LI",{});var f6e=s(ng);dne=n(f6e,"STRONG",{});var Tot=s(dne);peo=r(Tot,"rembert"),Tot.forEach(t),_eo=r(f6e," \u2014 "),GR=n(f6e,"A",{href:!0});var Mot=s(GR);ueo=r(Mot,"RemBertConfig"),Mot.forEach(t),beo=r(f6e," (RemBERT model)"),f6e.forEach(t),veo=i(L),sg=n(L,"LI",{});var m6e=s(sg);cne=n(m6e,"STRONG",{});var Eot=s(cne);Feo=r(Eot,"resnet"),Eot.forEach(t),Teo=r(m6e," \u2014 "),OR=n(m6e,"A",{href:!0});var Cot=s(OR);Meo=r(Cot,"ResNetConfig"),Cot.forEach(t),Eeo=r(m6e," (ResNet model)"),m6e.forEach(t),Ceo=i(L),lg=n(L,"LI",{});var g6e=s(lg);fne=n(g6e,"STRONG",{});var wot=s(fne);weo=r(wot,"retribert"),wot.forEach(t),Aeo=r(g6e," \u2014 "),VR=n(g6e,"A",{href:!0});var Aot=s(VR);Leo=r(Aot,"RetriBertConfig"),Aot.forEach(t),yeo=r(g6e," (RetriBERT model)"),g6e.forEach(t),xeo=i(L),ig=n(L,"LI",{});var h6e=s(ig);mne=n(h6e,"STRONG",{});var Lot=s(mne);$eo=r(Lot,"roberta"),Lot.forEach(t),keo=r(h6e," \u2014 "),XR=n(h6e,"A",{href:!0});var yot=s(XR);Seo=r(yot,"RobertaConfig"),yot.forEach(t),Reo=r(h6e," (RoBERTa model)"),h6e.forEach(t),Peo=i(L),dg=n(L,"LI",{});var p6e=s(dg);gne=n(p6e,"STRONG",{});var xot=s(gne);Beo=r(xot,"roformer"),xot.forEach(t),Neo=r(p6e," \u2014 "),zR=n(p6e,"A",{href:!0});var $ot=s(zR);Ieo=r($ot,"RoFormerConfig"),$ot.forEach(t),qeo=r(p6e," (RoFormer model)"),p6e.forEach(t),jeo=i(L),cg=n(L,"LI",{});var _6e=s(cg);hne=n(_6e,"STRONG",{});var kot=s(hne);Deo=r(kot,"segformer"),kot.forEach(t),Geo=r(_6e," \u2014 "),QR=n(_6e,"A",{href:!0});var Sot=s(QR);Oeo=r(Sot,"SegformerConfig"),Sot.forEach(t),Veo=r(_6e," (SegFormer model)"),_6e.forEach(t),Xeo=i(L),fg=n(L,"LI",{});var u6e=s(fg);pne=n(u6e,"STRONG",{});var Rot=s(pne);zeo=r(Rot,"sew"),Rot.forEach(t),Qeo=r(u6e," \u2014 "),WR=n(u6e,"A",{href:!0});var Pot=s(WR);Weo=r(Pot,"SEWConfig"),Pot.forEach(t),Heo=r(u6e," (SEW model)"),u6e.forEach(t),Ueo=i(L),mg=n(L,"LI",{});var b6e=s(mg);_ne=n(b6e,"STRONG",{});var Bot=s(_ne);Jeo=r(Bot,"sew-d"),Bot.forEach(t),Yeo=r(b6e," \u2014 "),HR=n(b6e,"A",{href:!0});var Not=s(HR);Keo=r(Not,"SEWDConfig"),Not.forEach(t),Zeo=r(b6e," (SEW-D model)"),b6e.forEach(t),eoo=i(L),gg=n(L,"LI",{});var v6e=s(gg);une=n(v6e,"STRONG",{});var Iot=s(une);ooo=r(Iot,"speech-encoder-decoder"),Iot.forEach(t),roo=r(v6e," \u2014 "),UR=n(v6e,"A",{href:!0});var qot=s(UR);too=r(qot,"SpeechEncoderDecoderConfig"),qot.forEach(t),aoo=r(v6e," (Speech Encoder decoder model)"),v6e.forEach(t),noo=i(L),hg=n(L,"LI",{});var F6e=s(hg);bne=n(F6e,"STRONG",{});var jot=s(bne);soo=r(jot,"speech_to_text"),jot.forEach(t),loo=r(F6e," \u2014 "),JR=n(F6e,"A",{href:!0});var Dot=s(JR);ioo=r(Dot,"Speech2TextConfig"),Dot.forEach(t),doo=r(F6e," (Speech2Text model)"),F6e.forEach(t),coo=i(L),pg=n(L,"LI",{});var T6e=s(pg);vne=n(T6e,"STRONG",{});var Got=s(vne);foo=r(Got,"speech_to_text_2"),Got.forEach(t),moo=r(T6e," \u2014 "),YR=n(T6e,"A",{href:!0});var Oot=s(YR);goo=r(Oot,"Speech2Text2Config"),Oot.forEach(t),hoo=r(T6e," (Speech2Text2 model)"),T6e.forEach(t),poo=i(L),_g=n(L,"LI",{});var M6e=s(_g);Fne=n(M6e,"STRONG",{});var Vot=s(Fne);_oo=r(Vot,"splinter"),Vot.forEach(t),uoo=r(M6e," \u2014 "),KR=n(M6e,"A",{href:!0});var Xot=s(KR);boo=r(Xot,"SplinterConfig"),Xot.forEach(t),voo=r(M6e," (Splinter model)"),M6e.forEach(t),Foo=i(L),ug=n(L,"LI",{});var E6e=s(ug);Tne=n(E6e,"STRONG",{});var zot=s(Tne);Too=r(zot,"squeezebert"),zot.forEach(t),Moo=r(E6e," \u2014 "),ZR=n(E6e,"A",{href:!0});var Qot=s(ZR);Eoo=r(Qot,"SqueezeBertConfig"),Qot.forEach(t),Coo=r(E6e," (SqueezeBERT model)"),E6e.forEach(t),woo=i(L),bg=n(L,"LI",{});var C6e=s(bg);Mne=n(C6e,"STRONG",{});var Wot=s(Mne);Aoo=r(Wot,"swin"),Wot.forEach(t),Loo=r(C6e," \u2014 "),eP=n(C6e,"A",{href:!0});var Hot=s(eP);yoo=r(Hot,"SwinConfig"),Hot.forEach(t),xoo=r(C6e," (Swin Transformer model)"),C6e.forEach(t),$oo=i(L),vg=n(L,"LI",{});var w6e=s(vg);Ene=n(w6e,"STRONG",{});var Uot=s(Ene);koo=r(Uot,"t5"),Uot.forEach(t),Soo=r(w6e," \u2014 "),oP=n(w6e,"A",{href:!0});var Jot=s(oP);Roo=r(Jot,"T5Config"),Jot.forEach(t),Poo=r(w6e," (T5 model)"),w6e.forEach(t),Boo=i(L),Fg=n(L,"LI",{});var A6e=s(Fg);Cne=n(A6e,"STRONG",{});var Yot=s(Cne);Noo=r(Yot,"tapas"),Yot.forEach(t),Ioo=r(A6e," \u2014 "),rP=n(A6e,"A",{href:!0});var Kot=s(rP);qoo=r(Kot,"TapasConfig"),Kot.forEach(t),joo=r(A6e," (TAPAS model)"),A6e.forEach(t),Doo=i(L),Tg=n(L,"LI",{});var L6e=s(Tg);wne=n(L6e,"STRONG",{});var Zot=s(wne);Goo=r(Zot,"trajectory_transformer"),Zot.forEach(t),Ooo=r(L6e," \u2014 "),tP=n(L6e,"A",{href:!0});var ert=s(tP);Voo=r(ert,"TrajectoryTransformerConfig"),ert.forEach(t),Xoo=r(L6e," (Trajectory Transformer model)"),L6e.forEach(t),zoo=i(L),Mg=n(L,"LI",{});var y6e=s(Mg);Ane=n(y6e,"STRONG",{});var ort=s(Ane);Qoo=r(ort,"transfo-xl"),ort.forEach(t),Woo=r(y6e," \u2014 "),aP=n(y6e,"A",{href:!0});var rrt=s(aP);Hoo=r(rrt,"TransfoXLConfig"),rrt.forEach(t),Uoo=r(y6e," (Transformer-XL model)"),y6e.forEach(t),Joo=i(L),Eg=n(L,"LI",{});var x6e=s(Eg);Lne=n(x6e,"STRONG",{});var trt=s(Lne);Yoo=r(trt,"trocr"),trt.forEach(t),Koo=r(x6e," \u2014 "),nP=n(x6e,"A",{href:!0});var art=s(nP);Zoo=r(art,"TrOCRConfig"),art.forEach(t),ero=r(x6e," (TrOCR model)"),x6e.forEach(t),oro=i(L),Cg=n(L,"LI",{});var $6e=s(Cg);yne=n($6e,"STRONG",{});var nrt=s(yne);rro=r(nrt,"unispeech"),nrt.forEach(t),tro=r($6e," \u2014 "),sP=n($6e,"A",{href:!0});var srt=s(sP);aro=r(srt,"UniSpeechConfig"),srt.forEach(t),nro=r($6e," (UniSpeech model)"),$6e.forEach(t),sro=i(L),wg=n(L,"LI",{});var k6e=s(wg);xne=n(k6e,"STRONG",{});var lrt=s(xne);lro=r(lrt,"unispeech-sat"),lrt.forEach(t),iro=r(k6e," \u2014 "),lP=n(k6e,"A",{href:!0});var irt=s(lP);dro=r(irt,"UniSpeechSatConfig"),irt.forEach(t),cro=r(k6e," (UniSpeechSat model)"),k6e.forEach(t),fro=i(L),Ag=n(L,"LI",{});var S6e=s(Ag);$ne=n(S6e,"STRONG",{});var drt=s($ne);mro=r(drt,"van"),drt.forEach(t),gro=r(S6e," \u2014 "),iP=n(S6e,"A",{href:!0});var crt=s(iP);hro=r(crt,"VanConfig"),crt.forEach(t),pro=r(S6e," (VAN model)"),S6e.forEach(t),_ro=i(L),Lg=n(L,"LI",{});var R6e=s(Lg);kne=n(R6e,"STRONG",{});var frt=s(kne);uro=r(frt,"vilt"),frt.forEach(t),bro=r(R6e," \u2014 "),dP=n(R6e,"A",{href:!0});var mrt=s(dP);vro=r(mrt,"ViltConfig"),mrt.forEach(t),Fro=r(R6e," (ViLT model)"),R6e.forEach(t),Tro=i(L),yg=n(L,"LI",{});var P6e=s(yg);Sne=n(P6e,"STRONG",{});var grt=s(Sne);Mro=r(grt,"vision-encoder-decoder"),grt.forEach(t),Ero=r(P6e," \u2014 "),cP=n(P6e,"A",{href:!0});var hrt=s(cP);Cro=r(hrt,"VisionEncoderDecoderConfig"),hrt.forEach(t),wro=r(P6e," (Vision Encoder decoder model)"),P6e.forEach(t),Aro=i(L),xg=n(L,"LI",{});var B6e=s(xg);Rne=n(B6e,"STRONG",{});var prt=s(Rne);Lro=r(prt,"vision-text-dual-encoder"),prt.forEach(t),yro=r(B6e," \u2014 "),fP=n(B6e,"A",{href:!0});var _rt=s(fP);xro=r(_rt,"VisionTextDualEncoderConfig"),_rt.forEach(t),$ro=r(B6e," (VisionTextDualEncoder model)"),B6e.forEach(t),kro=i(L),$g=n(L,"LI",{});var N6e=s($g);Pne=n(N6e,"STRONG",{});var urt=s(Pne);Sro=r(urt,"visual_bert"),urt.forEach(t),Rro=r(N6e," \u2014 "),mP=n(N6e,"A",{href:!0});var brt=s(mP);Pro=r(brt,"VisualBertConfig"),brt.forEach(t),Bro=r(N6e," (VisualBERT model)"),N6e.forEach(t),Nro=i(L),kg=n(L,"LI",{});var I6e=s(kg);Bne=n(I6e,"STRONG",{});var vrt=s(Bne);Iro=r(vrt,"vit"),vrt.forEach(t),qro=r(I6e," \u2014 "),gP=n(I6e,"A",{href:!0});var Frt=s(gP);jro=r(Frt,"ViTConfig"),Frt.forEach(t),Dro=r(I6e," (ViT model)"),I6e.forEach(t),Gro=i(L),Sg=n(L,"LI",{});var q6e=s(Sg);Nne=n(q6e,"STRONG",{});var Trt=s(Nne);Oro=r(Trt,"vit_mae"),Trt.forEach(t),Vro=r(q6e," \u2014 "),hP=n(q6e,"A",{href:!0});var Mrt=s(hP);Xro=r(Mrt,"ViTMAEConfig"),Mrt.forEach(t),zro=r(q6e," (ViTMAE model)"),q6e.forEach(t),Qro=i(L),Rg=n(L,"LI",{});var j6e=s(Rg);Ine=n(j6e,"STRONG",{});var Ert=s(Ine);Wro=r(Ert,"wav2vec2"),Ert.forEach(t),Hro=r(j6e," \u2014 "),pP=n(j6e,"A",{href:!0});var Crt=s(pP);Uro=r(Crt,"Wav2Vec2Config"),Crt.forEach(t),Jro=r(j6e," (Wav2Vec2 model)"),j6e.forEach(t),Yro=i(L),Pg=n(L,"LI",{});var D6e=s(Pg);qne=n(D6e,"STRONG",{});var wrt=s(qne);Kro=r(wrt,"wav2vec2-conformer"),wrt.forEach(t),Zro=r(D6e," \u2014 "),_P=n(D6e,"A",{href:!0});var Art=s(_P);eto=r(Art,"Wav2Vec2ConformerConfig"),Art.forEach(t),oto=r(D6e," (Wav2Vec2-Conformer model)"),D6e.forEach(t),rto=i(L),Bg=n(L,"LI",{});var G6e=s(Bg);jne=n(G6e,"STRONG",{});var Lrt=s(jne);tto=r(Lrt,"wavlm"),Lrt.forEach(t),ato=r(G6e," \u2014 "),uP=n(G6e,"A",{href:!0});var yrt=s(uP);nto=r(yrt,"WavLMConfig"),yrt.forEach(t),sto=r(G6e," (WavLM model)"),G6e.forEach(t),lto=i(L),Ng=n(L,"LI",{});var O6e=s(Ng);Dne=n(O6e,"STRONG",{});var xrt=s(Dne);ito=r(xrt,"xglm"),xrt.forEach(t),dto=r(O6e," \u2014 "),bP=n(O6e,"A",{href:!0});var $rt=s(bP);cto=r($rt,"XGLMConfig"),$rt.forEach(t),fto=r(O6e," (XGLM model)"),O6e.forEach(t),mto=i(L),Ig=n(L,"LI",{});var V6e=s(Ig);Gne=n(V6e,"STRONG",{});var krt=s(Gne);gto=r(krt,"xlm"),krt.forEach(t),hto=r(V6e," \u2014 "),vP=n(V6e,"A",{href:!0});var Srt=s(vP);pto=r(Srt,"XLMConfig"),Srt.forEach(t),_to=r(V6e," (XLM model)"),V6e.forEach(t),uto=i(L),qg=n(L,"LI",{});var X6e=s(qg);One=n(X6e,"STRONG",{});var Rrt=s(One);bto=r(Rrt,"xlm-prophetnet"),Rrt.forEach(t),vto=r(X6e," \u2014 "),FP=n(X6e,"A",{href:!0});var Prt=s(FP);Fto=r(Prt,"XLMProphetNetConfig"),Prt.forEach(t),Tto=r(X6e," (XLM-ProphetNet model)"),X6e.forEach(t),Mto=i(L),jg=n(L,"LI",{});var z6e=s(jg);Vne=n(z6e,"STRONG",{});var Brt=s(Vne);Eto=r(Brt,"xlm-roberta"),Brt.forEach(t),Cto=r(z6e," \u2014 "),TP=n(z6e,"A",{href:!0});var Nrt=s(TP);wto=r(Nrt,"XLMRobertaConfig"),Nrt.forEach(t),Ato=r(z6e," (XLM-RoBERTa model)"),z6e.forEach(t),Lto=i(L),Dg=n(L,"LI",{});var Q6e=s(Dg);Xne=n(Q6e,"STRONG",{});var Irt=s(Xne);yto=r(Irt,"xlm-roberta-xl"),Irt.forEach(t),xto=r(Q6e," \u2014 "),MP=n(Q6e,"A",{href:!0});var qrt=s(MP);$to=r(qrt,"XLMRobertaXLConfig"),qrt.forEach(t),kto=r(Q6e," (XLM-RoBERTa-XL model)"),Q6e.forEach(t),Sto=i(L),Gg=n(L,"LI",{});var W6e=s(Gg);zne=n(W6e,"STRONG",{});var jrt=s(zne);Rto=r(jrt,"xlnet"),jrt.forEach(t),Pto=r(W6e," \u2014 "),EP=n(W6e,"A",{href:!0});var Drt=s(EP);Bto=r(Drt,"XLNetConfig"),Drt.forEach(t),Nto=r(W6e," (XLNet model)"),W6e.forEach(t),Ito=i(L),Og=n(L,"LI",{});var H6e=s(Og);Qne=n(H6e,"STRONG",{});var Grt=s(Qne);qto=r(Grt,"yolos"),Grt.forEach(t),jto=r(H6e," \u2014 "),CP=n(H6e,"A",{href:!0});var Ort=s(CP);Dto=r(Ort,"YolosConfig"),Ort.forEach(t),Gto=r(H6e," (YOLOS model)"),H6e.forEach(t),Oto=i(L),Vg=n(L,"LI",{});var U6e=s(Vg);Wne=n(U6e,"STRONG",{});var Vrt=s(Wne);Vto=r(Vrt,"yoso"),Vrt.forEach(t),Xto=r(U6e," \u2014 "),wP=n(U6e,"A",{href:!0});var Xrt=s(wP);zto=r(Xrt,"YosoConfig"),Xrt.forEach(t),Qto=r(U6e," (YOSO model)"),U6e.forEach(t),L.forEach(t),Wto=i(tt),T(Xg.$$.fragment,tt),tt.forEach(t),Hto=i(rt),zg=n(rt,"DIV",{class:!0});var CXe=s(zg);T(X6.$$.fragment,CXe),Uto=i(CXe),Hne=n(CXe,"P",{});var zrt=s(Hne);Jto=r(zrt,"Register a new configuration for this class."),zrt.forEach(t),CXe.forEach(t),rt.forEach(t),wOe=i(f),Si=n(f,"H2",{class:!0});var wXe=s(Si);Qg=n(wXe,"A",{id:!0,class:!0,href:!0});var Qrt=s(Qg);Une=n(Qrt,"SPAN",{});var Wrt=s(Une);T(z6.$$.fragment,Wrt),Wrt.forEach(t),Qrt.forEach(t),Yto=i(wXe),Jne=n(wXe,"SPAN",{});var Hrt=s(Jne);Kto=r(Hrt,"AutoTokenizer"),Hrt.forEach(t),wXe.forEach(t),AOe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(Q6.$$.fragment,Hs),Zto=i(Hs),W6=n(Hs,"P",{});var AXe=s(W6);eao=r(AXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),AP=n(AXe,"A",{href:!0});var Urt=s(AP);oao=r(Urt,"AutoTokenizer.from_pretrained()"),Urt.forEach(t),rao=r(AXe," class method."),AXe.forEach(t),tao=i(Hs),H6=n(Hs,"P",{});var LXe=s(H6);aao=r(LXe,"This class cannot be instantiated directly using "),Yne=n(LXe,"CODE",{});var Jrt=s(Yne);nao=r(Jrt,"__init__()"),Jrt.forEach(t),sao=r(LXe," (throws an error)."),LXe.forEach(t),lao=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(U6.$$.fragment,Us),iao=i(Us),Kne=n(Us,"P",{});var Yrt=s(Kne);dao=r(Yrt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Yrt.forEach(t),cao=i(Us),ka=n(Us,"P",{});var Iw=s(ka);fao=r(Iw,"The tokenizer class to instantiate is selected based on the "),Zne=n(Iw,"CODE",{});var Krt=s(Zne);mao=r(Krt,"model_type"),Krt.forEach(t),gao=r(Iw,` property of the config object (either
passed as an argument or loaded from `),ese=n(Iw,"CODE",{});var Zrt=s(ese);hao=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),pao=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ose=n(Iw,"CODE",{});var ett=s(ose);_ao=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),uao=r(Iw,":"),Iw.forEach(t),bao=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var ok=s(qn);rse=n(ok,"STRONG",{});var ott=s(rse);vao=r(ott,"albert"),ott.forEach(t),Fao=r(ok," \u2014 "),LP=n(ok,"A",{href:!0});var rtt=s(LP);Tao=r(rtt,"AlbertTokenizer"),rtt.forEach(t),Mao=r(ok," or "),yP=n(ok,"A",{href:!0});var ttt=s(yP);Eao=r(ttt,"AlbertTokenizerFast"),ttt.forEach(t),Cao=r(ok," (ALBERT model)"),ok.forEach(t),wao=i(S),jn=n(S,"LI",{});var rk=s(jn);tse=n(rk,"STRONG",{});var att=s(tse);Aao=r(att,"bart"),att.forEach(t),Lao=r(rk," \u2014 "),xP=n(rk,"A",{href:!0});var ntt=s(xP);yao=r(ntt,"BartTokenizer"),ntt.forEach(t),xao=r(rk," or "),$P=n(rk,"A",{href:!0});var stt=s($P);$ao=r(stt,"BartTokenizerFast"),stt.forEach(t),kao=r(rk," (BART model)"),rk.forEach(t),Sao=i(S),Dn=n(S,"LI",{});var tk=s(Dn);ase=n(tk,"STRONG",{});var ltt=s(ase);Rao=r(ltt,"barthez"),ltt.forEach(t),Pao=r(tk," \u2014 "),kP=n(tk,"A",{href:!0});var itt=s(kP);Bao=r(itt,"BarthezTokenizer"),itt.forEach(t),Nao=r(tk," or "),SP=n(tk,"A",{href:!0});var dtt=s(SP);Iao=r(dtt,"BarthezTokenizerFast"),dtt.forEach(t),qao=r(tk," (BARThez model)"),tk.forEach(t),jao=i(S),Wg=n(S,"LI",{});var J6e=s(Wg);nse=n(J6e,"STRONG",{});var ctt=s(nse);Dao=r(ctt,"bartpho"),ctt.forEach(t),Gao=r(J6e," \u2014 "),RP=n(J6e,"A",{href:!0});var ftt=s(RP);Oao=r(ftt,"BartphoTokenizer"),ftt.forEach(t),Vao=r(J6e," (BARTpho model)"),J6e.forEach(t),Xao=i(S),Gn=n(S,"LI",{});var ak=s(Gn);sse=n(ak,"STRONG",{});var mtt=s(sse);zao=r(mtt,"bert"),mtt.forEach(t),Qao=r(ak," \u2014 "),PP=n(ak,"A",{href:!0});var gtt=s(PP);Wao=r(gtt,"BertTokenizer"),gtt.forEach(t),Hao=r(ak," or "),BP=n(ak,"A",{href:!0});var htt=s(BP);Uao=r(htt,"BertTokenizerFast"),htt.forEach(t),Jao=r(ak," (BERT model)"),ak.forEach(t),Yao=i(S),Hg=n(S,"LI",{});var Y6e=s(Hg);lse=n(Y6e,"STRONG",{});var ptt=s(lse);Kao=r(ptt,"bert-generation"),ptt.forEach(t),Zao=r(Y6e," \u2014 "),NP=n(Y6e,"A",{href:!0});var _tt=s(NP);eno=r(_tt,"BertGenerationTokenizer"),_tt.forEach(t),ono=r(Y6e," (Bert Generation model)"),Y6e.forEach(t),rno=i(S),Ug=n(S,"LI",{});var K6e=s(Ug);ise=n(K6e,"STRONG",{});var utt=s(ise);tno=r(utt,"bert-japanese"),utt.forEach(t),ano=r(K6e," \u2014 "),IP=n(K6e,"A",{href:!0});var btt=s(IP);nno=r(btt,"BertJapaneseTokenizer"),btt.forEach(t),sno=r(K6e," (BertJapanese model)"),K6e.forEach(t),lno=i(S),Jg=n(S,"LI",{});var Z6e=s(Jg);dse=n(Z6e,"STRONG",{});var vtt=s(dse);ino=r(vtt,"bertweet"),vtt.forEach(t),dno=r(Z6e," \u2014 "),qP=n(Z6e,"A",{href:!0});var Ftt=s(qP);cno=r(Ftt,"BertweetTokenizer"),Ftt.forEach(t),fno=r(Z6e," (BERTweet model)"),Z6e.forEach(t),mno=i(S),On=n(S,"LI",{});var nk=s(On);cse=n(nk,"STRONG",{});var Ttt=s(cse);gno=r(Ttt,"big_bird"),Ttt.forEach(t),hno=r(nk," \u2014 "),jP=n(nk,"A",{href:!0});var Mtt=s(jP);pno=r(Mtt,"BigBirdTokenizer"),Mtt.forEach(t),_no=r(nk," or "),DP=n(nk,"A",{href:!0});var Ett=s(DP);uno=r(Ett,"BigBirdTokenizerFast"),Ett.forEach(t),bno=r(nk," (BigBird model)"),nk.forEach(t),vno=i(S),Vn=n(S,"LI",{});var sk=s(Vn);fse=n(sk,"STRONG",{});var Ctt=s(fse);Fno=r(Ctt,"bigbird_pegasus"),Ctt.forEach(t),Tno=r(sk," \u2014 "),GP=n(sk,"A",{href:!0});var wtt=s(GP);Mno=r(wtt,"PegasusTokenizer"),wtt.forEach(t),Eno=r(sk," or "),OP=n(sk,"A",{href:!0});var Att=s(OP);Cno=r(Att,"PegasusTokenizerFast"),Att.forEach(t),wno=r(sk," (BigBird-Pegasus model)"),sk.forEach(t),Ano=i(S),Xn=n(S,"LI",{});var lk=s(Xn);mse=n(lk,"STRONG",{});var Ltt=s(mse);Lno=r(Ltt,"blenderbot"),Ltt.forEach(t),yno=r(lk," \u2014 "),VP=n(lk,"A",{href:!0});var ytt=s(VP);xno=r(ytt,"BlenderbotTokenizer"),ytt.forEach(t),$no=r(lk," or "),XP=n(lk,"A",{href:!0});var xtt=s(XP);kno=r(xtt,"BlenderbotTokenizerFast"),xtt.forEach(t),Sno=r(lk," (Blenderbot model)"),lk.forEach(t),Rno=i(S),Yg=n(S,"LI",{});var eLe=s(Yg);gse=n(eLe,"STRONG",{});var $tt=s(gse);Pno=r($tt,"blenderbot-small"),$tt.forEach(t),Bno=r(eLe," \u2014 "),zP=n(eLe,"A",{href:!0});var ktt=s(zP);Nno=r(ktt,"BlenderbotSmallTokenizer"),ktt.forEach(t),Ino=r(eLe," (BlenderbotSmall model)"),eLe.forEach(t),qno=i(S),Kg=n(S,"LI",{});var oLe=s(Kg);hse=n(oLe,"STRONG",{});var Stt=s(hse);jno=r(Stt,"bloom"),Stt.forEach(t),Dno=r(oLe," \u2014 "),QP=n(oLe,"A",{href:!0});var Rtt=s(QP);Gno=r(Rtt,"BloomTokenizerFast"),Rtt.forEach(t),Ono=r(oLe," (BLOOM model)"),oLe.forEach(t),Vno=i(S),Zg=n(S,"LI",{});var rLe=s(Zg);pse=n(rLe,"STRONG",{});var Ptt=s(pse);Xno=r(Ptt,"byt5"),Ptt.forEach(t),zno=r(rLe," \u2014 "),WP=n(rLe,"A",{href:!0});var Btt=s(WP);Qno=r(Btt,"ByT5Tokenizer"),Btt.forEach(t),Wno=r(rLe," (ByT5 model)"),rLe.forEach(t),Hno=i(S),zn=n(S,"LI",{});var ik=s(zn);_se=n(ik,"STRONG",{});var Ntt=s(_se);Uno=r(Ntt,"camembert"),Ntt.forEach(t),Jno=r(ik," \u2014 "),HP=n(ik,"A",{href:!0});var Itt=s(HP);Yno=r(Itt,"CamembertTokenizer"),Itt.forEach(t),Kno=r(ik," or "),UP=n(ik,"A",{href:!0});var qtt=s(UP);Zno=r(qtt,"CamembertTokenizerFast"),qtt.forEach(t),eso=r(ik," (CamemBERT model)"),ik.forEach(t),oso=i(S),eh=n(S,"LI",{});var tLe=s(eh);use=n(tLe,"STRONG",{});var jtt=s(use);rso=r(jtt,"canine"),jtt.forEach(t),tso=r(tLe," \u2014 "),JP=n(tLe,"A",{href:!0});var Dtt=s(JP);aso=r(Dtt,"CanineTokenizer"),Dtt.forEach(t),nso=r(tLe," (CANINE model)"),tLe.forEach(t),sso=i(S),Qn=n(S,"LI",{});var dk=s(Qn);bse=n(dk,"STRONG",{});var Gtt=s(bse);lso=r(Gtt,"clip"),Gtt.forEach(t),iso=r(dk," \u2014 "),YP=n(dk,"A",{href:!0});var Ott=s(YP);dso=r(Ott,"CLIPTokenizer"),Ott.forEach(t),cso=r(dk," or "),KP=n(dk,"A",{href:!0});var Vtt=s(KP);fso=r(Vtt,"CLIPTokenizerFast"),Vtt.forEach(t),mso=r(dk," (CLIP model)"),dk.forEach(t),gso=i(S),Wn=n(S,"LI",{});var ck=s(Wn);vse=n(ck,"STRONG",{});var Xtt=s(vse);hso=r(Xtt,"codegen"),Xtt.forEach(t),pso=r(ck," \u2014 "),ZP=n(ck,"A",{href:!0});var ztt=s(ZP);_so=r(ztt,"CodeGenTokenizer"),ztt.forEach(t),uso=r(ck," or "),eB=n(ck,"A",{href:!0});var Qtt=s(eB);bso=r(Qtt,"CodeGenTokenizerFast"),Qtt.forEach(t),vso=r(ck," (CodeGen model)"),ck.forEach(t),Fso=i(S),Hn=n(S,"LI",{});var fk=s(Hn);Fse=n(fk,"STRONG",{});var Wtt=s(Fse);Tso=r(Wtt,"convbert"),Wtt.forEach(t),Mso=r(fk," \u2014 "),oB=n(fk,"A",{href:!0});var Htt=s(oB);Eso=r(Htt,"ConvBertTokenizer"),Htt.forEach(t),Cso=r(fk," or "),rB=n(fk,"A",{href:!0});var Utt=s(rB);wso=r(Utt,"ConvBertTokenizerFast"),Utt.forEach(t),Aso=r(fk," (ConvBERT model)"),fk.forEach(t),Lso=i(S),Un=n(S,"LI",{});var mk=s(Un);Tse=n(mk,"STRONG",{});var Jtt=s(Tse);yso=r(Jtt,"cpm"),Jtt.forEach(t),xso=r(mk," \u2014 "),tB=n(mk,"A",{href:!0});var Ytt=s(tB);$so=r(Ytt,"CpmTokenizer"),Ytt.forEach(t),kso=r(mk," or "),aB=n(mk,"A",{href:!0});var Ktt=s(aB);Sso=r(Ktt,"CpmTokenizerFast"),Ktt.forEach(t),Rso=r(mk," (CPM model)"),mk.forEach(t),Pso=i(S),oh=n(S,"LI",{});var aLe=s(oh);Mse=n(aLe,"STRONG",{});var Ztt=s(Mse);Bso=r(Ztt,"ctrl"),Ztt.forEach(t),Nso=r(aLe," \u2014 "),nB=n(aLe,"A",{href:!0});var eat=s(nB);Iso=r(eat,"CTRLTokenizer"),eat.forEach(t),qso=r(aLe," (CTRL model)"),aLe.forEach(t),jso=i(S),Jn=n(S,"LI",{});var gk=s(Jn);Ese=n(gk,"STRONG",{});var oat=s(Ese);Dso=r(oat,"data2vec-text"),oat.forEach(t),Gso=r(gk," \u2014 "),sB=n(gk,"A",{href:!0});var rat=s(sB);Oso=r(rat,"RobertaTokenizer"),rat.forEach(t),Vso=r(gk," or "),lB=n(gk,"A",{href:!0});var tat=s(lB);Xso=r(tat,"RobertaTokenizerFast"),tat.forEach(t),zso=r(gk," (Data2VecText model)"),gk.forEach(t),Qso=i(S),Yn=n(S,"LI",{});var hk=s(Yn);Cse=n(hk,"STRONG",{});var aat=s(Cse);Wso=r(aat,"deberta"),aat.forEach(t),Hso=r(hk," \u2014 "),iB=n(hk,"A",{href:!0});var nat=s(iB);Uso=r(nat,"DebertaTokenizer"),nat.forEach(t),Jso=r(hk," or "),dB=n(hk,"A",{href:!0});var sat=s(dB);Yso=r(sat,"DebertaTokenizerFast"),sat.forEach(t),Kso=r(hk," (DeBERTa model)"),hk.forEach(t),Zso=i(S),Kn=n(S,"LI",{});var pk=s(Kn);wse=n(pk,"STRONG",{});var lat=s(wse);elo=r(lat,"deberta-v2"),lat.forEach(t),olo=r(pk," \u2014 "),cB=n(pk,"A",{href:!0});var iat=s(cB);rlo=r(iat,"DebertaV2Tokenizer"),iat.forEach(t),tlo=r(pk," or "),fB=n(pk,"A",{href:!0});var dat=s(fB);alo=r(dat,"DebertaV2TokenizerFast"),dat.forEach(t),nlo=r(pk," (DeBERTa-v2 model)"),pk.forEach(t),slo=i(S),Zn=n(S,"LI",{});var _k=s(Zn);Ase=n(_k,"STRONG",{});var cat=s(Ase);llo=r(cat,"distilbert"),cat.forEach(t),ilo=r(_k," \u2014 "),mB=n(_k,"A",{href:!0});var fat=s(mB);dlo=r(fat,"DistilBertTokenizer"),fat.forEach(t),clo=r(_k," or "),gB=n(_k,"A",{href:!0});var mat=s(gB);flo=r(mat,"DistilBertTokenizerFast"),mat.forEach(t),mlo=r(_k," (DistilBERT model)"),_k.forEach(t),glo=i(S),es=n(S,"LI",{});var uk=s(es);Lse=n(uk,"STRONG",{});var gat=s(Lse);hlo=r(gat,"dpr"),gat.forEach(t),plo=r(uk," \u2014 "),hB=n(uk,"A",{href:!0});var hat=s(hB);_lo=r(hat,"DPRQuestionEncoderTokenizer"),hat.forEach(t),ulo=r(uk," or "),pB=n(uk,"A",{href:!0});var pat=s(pB);blo=r(pat,"DPRQuestionEncoderTokenizerFast"),pat.forEach(t),vlo=r(uk," (DPR model)"),uk.forEach(t),Flo=i(S),os=n(S,"LI",{});var bk=s(os);yse=n(bk,"STRONG",{});var _at=s(yse);Tlo=r(_at,"electra"),_at.forEach(t),Mlo=r(bk," \u2014 "),_B=n(bk,"A",{href:!0});var uat=s(_B);Elo=r(uat,"ElectraTokenizer"),uat.forEach(t),Clo=r(bk," or "),uB=n(bk,"A",{href:!0});var bat=s(uB);wlo=r(bat,"ElectraTokenizerFast"),bat.forEach(t),Alo=r(bk," (ELECTRA model)"),bk.forEach(t),Llo=i(S),rh=n(S,"LI",{});var nLe=s(rh);xse=n(nLe,"STRONG",{});var vat=s(xse);ylo=r(vat,"flaubert"),vat.forEach(t),xlo=r(nLe," \u2014 "),bB=n(nLe,"A",{href:!0});var Fat=s(bB);$lo=r(Fat,"FlaubertTokenizer"),Fat.forEach(t),klo=r(nLe," (FlauBERT model)"),nLe.forEach(t),Slo=i(S),rs=n(S,"LI",{});var vk=s(rs);$se=n(vk,"STRONG",{});var Tat=s($se);Rlo=r(Tat,"fnet"),Tat.forEach(t),Plo=r(vk," \u2014 "),vB=n(vk,"A",{href:!0});var Mat=s(vB);Blo=r(Mat,"FNetTokenizer"),Mat.forEach(t),Nlo=r(vk," or "),FB=n(vk,"A",{href:!0});var Eat=s(FB);Ilo=r(Eat,"FNetTokenizerFast"),Eat.forEach(t),qlo=r(vk," (FNet model)"),vk.forEach(t),jlo=i(S),th=n(S,"LI",{});var sLe=s(th);kse=n(sLe,"STRONG",{});var Cat=s(kse);Dlo=r(Cat,"fsmt"),Cat.forEach(t),Glo=r(sLe," \u2014 "),TB=n(sLe,"A",{href:!0});var wat=s(TB);Olo=r(wat,"FSMTTokenizer"),wat.forEach(t),Vlo=r(sLe," (FairSeq Machine-Translation model)"),sLe.forEach(t),Xlo=i(S),ts=n(S,"LI",{});var Fk=s(ts);Sse=n(Fk,"STRONG",{});var Aat=s(Sse);zlo=r(Aat,"funnel"),Aat.forEach(t),Qlo=r(Fk," \u2014 "),MB=n(Fk,"A",{href:!0});var Lat=s(MB);Wlo=r(Lat,"FunnelTokenizer"),Lat.forEach(t),Hlo=r(Fk," or "),EB=n(Fk,"A",{href:!0});var yat=s(EB);Ulo=r(yat,"FunnelTokenizerFast"),yat.forEach(t),Jlo=r(Fk," (Funnel Transformer model)"),Fk.forEach(t),Ylo=i(S),as=n(S,"LI",{});var Tk=s(as);Rse=n(Tk,"STRONG",{});var xat=s(Rse);Klo=r(xat,"gpt2"),xat.forEach(t),Zlo=r(Tk," \u2014 "),CB=n(Tk,"A",{href:!0});var $at=s(CB);eio=r($at,"GPT2Tokenizer"),$at.forEach(t),oio=r(Tk," or "),wB=n(Tk,"A",{href:!0});var kat=s(wB);rio=r(kat,"GPT2TokenizerFast"),kat.forEach(t),tio=r(Tk," (OpenAI GPT-2 model)"),Tk.forEach(t),aio=i(S),ns=n(S,"LI",{});var Mk=s(ns);Pse=n(Mk,"STRONG",{});var Sat=s(Pse);nio=r(Sat,"gpt_neo"),Sat.forEach(t),sio=r(Mk," \u2014 "),AB=n(Mk,"A",{href:!0});var Rat=s(AB);lio=r(Rat,"GPT2Tokenizer"),Rat.forEach(t),iio=r(Mk," or "),LB=n(Mk,"A",{href:!0});var Pat=s(LB);dio=r(Pat,"GPT2TokenizerFast"),Pat.forEach(t),cio=r(Mk," (GPT Neo model)"),Mk.forEach(t),fio=i(S),ah=n(S,"LI",{});var lLe=s(ah);Bse=n(lLe,"STRONG",{});var Bat=s(Bse);mio=r(Bat,"gpt_neox"),Bat.forEach(t),gio=r(lLe," \u2014 "),yB=n(lLe,"A",{href:!0});var Nat=s(yB);hio=r(Nat,"GPTNeoXTokenizerFast"),Nat.forEach(t),pio=r(lLe," (GPT NeoX model)"),lLe.forEach(t),_io=i(S),ss=n(S,"LI",{});var Ek=s(ss);Nse=n(Ek,"STRONG",{});var Iat=s(Nse);uio=r(Iat,"gptj"),Iat.forEach(t),bio=r(Ek," \u2014 "),xB=n(Ek,"A",{href:!0});var qat=s(xB);vio=r(qat,"GPT2Tokenizer"),qat.forEach(t),Fio=r(Ek," or "),$B=n(Ek,"A",{href:!0});var jat=s($B);Tio=r(jat,"GPT2TokenizerFast"),jat.forEach(t),Mio=r(Ek," (GPT-J model)"),Ek.forEach(t),Eio=i(S),ls=n(S,"LI",{});var Ck=s(ls);Ise=n(Ck,"STRONG",{});var Dat=s(Ise);Cio=r(Dat,"herbert"),Dat.forEach(t),wio=r(Ck," \u2014 "),kB=n(Ck,"A",{href:!0});var Gat=s(kB);Aio=r(Gat,"HerbertTokenizer"),Gat.forEach(t),Lio=r(Ck," or "),SB=n(Ck,"A",{href:!0});var Oat=s(SB);yio=r(Oat,"HerbertTokenizerFast"),Oat.forEach(t),xio=r(Ck," (HerBERT model)"),Ck.forEach(t),$io=i(S),nh=n(S,"LI",{});var iLe=s(nh);qse=n(iLe,"STRONG",{});var Vat=s(qse);kio=r(Vat,"hubert"),Vat.forEach(t),Sio=r(iLe," \u2014 "),RB=n(iLe,"A",{href:!0});var Xat=s(RB);Rio=r(Xat,"Wav2Vec2CTCTokenizer"),Xat.forEach(t),Pio=r(iLe," (Hubert model)"),iLe.forEach(t),Bio=i(S),is=n(S,"LI",{});var wk=s(is);jse=n(wk,"STRONG",{});var zat=s(jse);Nio=r(zat,"ibert"),zat.forEach(t),Iio=r(wk," \u2014 "),PB=n(wk,"A",{href:!0});var Qat=s(PB);qio=r(Qat,"RobertaTokenizer"),Qat.forEach(t),jio=r(wk," or "),BB=n(wk,"A",{href:!0});var Wat=s(BB);Dio=r(Wat,"RobertaTokenizerFast"),Wat.forEach(t),Gio=r(wk," (I-BERT model)"),wk.forEach(t),Oio=i(S),ds=n(S,"LI",{});var Ak=s(ds);Dse=n(Ak,"STRONG",{});var Hat=s(Dse);Vio=r(Hat,"layoutlm"),Hat.forEach(t),Xio=r(Ak," \u2014 "),NB=n(Ak,"A",{href:!0});var Uat=s(NB);zio=r(Uat,"LayoutLMTokenizer"),Uat.forEach(t),Qio=r(Ak," or "),IB=n(Ak,"A",{href:!0});var Jat=s(IB);Wio=r(Jat,"LayoutLMTokenizerFast"),Jat.forEach(t),Hio=r(Ak," (LayoutLM model)"),Ak.forEach(t),Uio=i(S),cs=n(S,"LI",{});var Lk=s(cs);Gse=n(Lk,"STRONG",{});var Yat=s(Gse);Jio=r(Yat,"layoutlmv2"),Yat.forEach(t),Yio=r(Lk," \u2014 "),qB=n(Lk,"A",{href:!0});var Kat=s(qB);Kio=r(Kat,"LayoutLMv2Tokenizer"),Kat.forEach(t),Zio=r(Lk," or "),jB=n(Lk,"A",{href:!0});var Zat=s(jB);edo=r(Zat,"LayoutLMv2TokenizerFast"),Zat.forEach(t),odo=r(Lk," (LayoutLMv2 model)"),Lk.forEach(t),rdo=i(S),fs=n(S,"LI",{});var yk=s(fs);Ose=n(yk,"STRONG",{});var ent=s(Ose);tdo=r(ent,"layoutlmv3"),ent.forEach(t),ado=r(yk," \u2014 "),DB=n(yk,"A",{href:!0});var ont=s(DB);ndo=r(ont,"LayoutLMv3Tokenizer"),ont.forEach(t),sdo=r(yk," or "),GB=n(yk,"A",{href:!0});var rnt=s(GB);ldo=r(rnt,"LayoutLMv3TokenizerFast"),rnt.forEach(t),ido=r(yk," (LayoutLMv3 model)"),yk.forEach(t),ddo=i(S),ms=n(S,"LI",{});var xk=s(ms);Vse=n(xk,"STRONG",{});var tnt=s(Vse);cdo=r(tnt,"layoutxlm"),tnt.forEach(t),fdo=r(xk," \u2014 "),OB=n(xk,"A",{href:!0});var ant=s(OB);mdo=r(ant,"LayoutXLMTokenizer"),ant.forEach(t),gdo=r(xk," or "),VB=n(xk,"A",{href:!0});var nnt=s(VB);hdo=r(nnt,"LayoutXLMTokenizerFast"),nnt.forEach(t),pdo=r(xk," (LayoutXLM model)"),xk.forEach(t),_do=i(S),gs=n(S,"LI",{});var $k=s(gs);Xse=n($k,"STRONG",{});var snt=s(Xse);udo=r(snt,"led"),snt.forEach(t),bdo=r($k," \u2014 "),XB=n($k,"A",{href:!0});var lnt=s(XB);vdo=r(lnt,"LEDTokenizer"),lnt.forEach(t),Fdo=r($k," or "),zB=n($k,"A",{href:!0});var int=s(zB);Tdo=r(int,"LEDTokenizerFast"),int.forEach(t),Mdo=r($k," (LED model)"),$k.forEach(t),Edo=i(S),hs=n(S,"LI",{});var kk=s(hs);zse=n(kk,"STRONG",{});var dnt=s(zse);Cdo=r(dnt,"longformer"),dnt.forEach(t),wdo=r(kk," \u2014 "),QB=n(kk,"A",{href:!0});var cnt=s(QB);Ado=r(cnt,"LongformerTokenizer"),cnt.forEach(t),Ldo=r(kk," or "),WB=n(kk,"A",{href:!0});var fnt=s(WB);ydo=r(fnt,"LongformerTokenizerFast"),fnt.forEach(t),xdo=r(kk," (Longformer model)"),kk.forEach(t),$do=i(S),ps=n(S,"LI",{});var Sk=s(ps);Qse=n(Sk,"STRONG",{});var mnt=s(Qse);kdo=r(mnt,"longt5"),mnt.forEach(t),Sdo=r(Sk," \u2014 "),HB=n(Sk,"A",{href:!0});var gnt=s(HB);Rdo=r(gnt,"T5Tokenizer"),gnt.forEach(t),Pdo=r(Sk," or "),UB=n(Sk,"A",{href:!0});var hnt=s(UB);Bdo=r(hnt,"T5TokenizerFast"),hnt.forEach(t),Ndo=r(Sk," (LongT5 model)"),Sk.forEach(t),Ido=i(S),sh=n(S,"LI",{});var dLe=s(sh);Wse=n(dLe,"STRONG",{});var pnt=s(Wse);qdo=r(pnt,"luke"),pnt.forEach(t),jdo=r(dLe," \u2014 "),JB=n(dLe,"A",{href:!0});var _nt=s(JB);Ddo=r(_nt,"LukeTokenizer"),_nt.forEach(t),Gdo=r(dLe," (LUKE model)"),dLe.forEach(t),Odo=i(S),_s=n(S,"LI",{});var Rk=s(_s);Hse=n(Rk,"STRONG",{});var unt=s(Hse);Vdo=r(unt,"lxmert"),unt.forEach(t),Xdo=r(Rk," \u2014 "),YB=n(Rk,"A",{href:!0});var bnt=s(YB);zdo=r(bnt,"LxmertTokenizer"),bnt.forEach(t),Qdo=r(Rk," or "),KB=n(Rk,"A",{href:!0});var vnt=s(KB);Wdo=r(vnt,"LxmertTokenizerFast"),vnt.forEach(t),Hdo=r(Rk," (LXMERT model)"),Rk.forEach(t),Udo=i(S),lh=n(S,"LI",{});var cLe=s(lh);Use=n(cLe,"STRONG",{});var Fnt=s(Use);Jdo=r(Fnt,"m2m_100"),Fnt.forEach(t),Ydo=r(cLe," \u2014 "),ZB=n(cLe,"A",{href:!0});var Tnt=s(ZB);Kdo=r(Tnt,"M2M100Tokenizer"),Tnt.forEach(t),Zdo=r(cLe," (M2M100 model)"),cLe.forEach(t),eco=i(S),ih=n(S,"LI",{});var fLe=s(ih);Jse=n(fLe,"STRONG",{});var Mnt=s(Jse);oco=r(Mnt,"marian"),Mnt.forEach(t),rco=r(fLe," \u2014 "),eN=n(fLe,"A",{href:!0});var Ent=s(eN);tco=r(Ent,"MarianTokenizer"),Ent.forEach(t),aco=r(fLe," (Marian model)"),fLe.forEach(t),nco=i(S),us=n(S,"LI",{});var Pk=s(us);Yse=n(Pk,"STRONG",{});var Cnt=s(Yse);sco=r(Cnt,"mbart"),Cnt.forEach(t),lco=r(Pk," \u2014 "),oN=n(Pk,"A",{href:!0});var wnt=s(oN);ico=r(wnt,"MBartTokenizer"),wnt.forEach(t),dco=r(Pk," or "),rN=n(Pk,"A",{href:!0});var Ant=s(rN);cco=r(Ant,"MBartTokenizerFast"),Ant.forEach(t),fco=r(Pk," (mBART model)"),Pk.forEach(t),mco=i(S),bs=n(S,"LI",{});var Bk=s(bs);Kse=n(Bk,"STRONG",{});var Lnt=s(Kse);gco=r(Lnt,"mbart50"),Lnt.forEach(t),hco=r(Bk," \u2014 "),tN=n(Bk,"A",{href:!0});var ynt=s(tN);pco=r(ynt,"MBart50Tokenizer"),ynt.forEach(t),_co=r(Bk," or "),aN=n(Bk,"A",{href:!0});var xnt=s(aN);uco=r(xnt,"MBart50TokenizerFast"),xnt.forEach(t),bco=r(Bk," (mBART-50 model)"),Bk.forEach(t),vco=i(S),vs=n(S,"LI",{});var Nk=s(vs);Zse=n(Nk,"STRONG",{});var $nt=s(Zse);Fco=r($nt,"megatron-bert"),$nt.forEach(t),Tco=r(Nk," \u2014 "),nN=n(Nk,"A",{href:!0});var knt=s(nN);Mco=r(knt,"BertTokenizer"),knt.forEach(t),Eco=r(Nk," or "),sN=n(Nk,"A",{href:!0});var Snt=s(sN);Cco=r(Snt,"BertTokenizerFast"),Snt.forEach(t),wco=r(Nk," (Megatron-BERT model)"),Nk.forEach(t),Aco=i(S),dh=n(S,"LI",{});var mLe=s(dh);ele=n(mLe,"STRONG",{});var Rnt=s(ele);Lco=r(Rnt,"mluke"),Rnt.forEach(t),yco=r(mLe," \u2014 "),lN=n(mLe,"A",{href:!0});var Pnt=s(lN);xco=r(Pnt,"MLukeTokenizer"),Pnt.forEach(t),$co=r(mLe," (mLUKE model)"),mLe.forEach(t),kco=i(S),Fs=n(S,"LI",{});var Ik=s(Fs);ole=n(Ik,"STRONG",{});var Bnt=s(ole);Sco=r(Bnt,"mobilebert"),Bnt.forEach(t),Rco=r(Ik," \u2014 "),iN=n(Ik,"A",{href:!0});var Nnt=s(iN);Pco=r(Nnt,"MobileBertTokenizer"),Nnt.forEach(t),Bco=r(Ik," or "),dN=n(Ik,"A",{href:!0});var Int=s(dN);Nco=r(Int,"MobileBertTokenizerFast"),Int.forEach(t),Ico=r(Ik," (MobileBERT model)"),Ik.forEach(t),qco=i(S),Ts=n(S,"LI",{});var qk=s(Ts);rle=n(qk,"STRONG",{});var qnt=s(rle);jco=r(qnt,"mpnet"),qnt.forEach(t),Dco=r(qk," \u2014 "),cN=n(qk,"A",{href:!0});var jnt=s(cN);Gco=r(jnt,"MPNetTokenizer"),jnt.forEach(t),Oco=r(qk," or "),fN=n(qk,"A",{href:!0});var Dnt=s(fN);Vco=r(Dnt,"MPNetTokenizerFast"),Dnt.forEach(t),Xco=r(qk," (MPNet model)"),qk.forEach(t),zco=i(S),Ms=n(S,"LI",{});var jk=s(Ms);tle=n(jk,"STRONG",{});var Gnt=s(tle);Qco=r(Gnt,"mt5"),Gnt.forEach(t),Wco=r(jk," \u2014 "),mN=n(jk,"A",{href:!0});var Ont=s(mN);Hco=r(Ont,"MT5Tokenizer"),Ont.forEach(t),Uco=r(jk," or "),gN=n(jk,"A",{href:!0});var Vnt=s(gN);Jco=r(Vnt,"MT5TokenizerFast"),Vnt.forEach(t),Yco=r(jk," (MT5 model)"),jk.forEach(t),Kco=i(S),Es=n(S,"LI",{});var Dk=s(Es);ale=n(Dk,"STRONG",{});var Xnt=s(ale);Zco=r(Xnt,"nezha"),Xnt.forEach(t),efo=r(Dk," \u2014 "),hN=n(Dk,"A",{href:!0});var znt=s(hN);ofo=r(znt,"BertTokenizer"),znt.forEach(t),rfo=r(Dk," or "),pN=n(Dk,"A",{href:!0});var Qnt=s(pN);tfo=r(Qnt,"BertTokenizerFast"),Qnt.forEach(t),afo=r(Dk," (Nezha model)"),Dk.forEach(t),nfo=i(S),Cs=n(S,"LI",{});var Gk=s(Cs);nle=n(Gk,"STRONG",{});var Wnt=s(nle);sfo=r(Wnt,"nystromformer"),Wnt.forEach(t),lfo=r(Gk," \u2014 "),_N=n(Gk,"A",{href:!0});var Hnt=s(_N);ifo=r(Hnt,"AlbertTokenizer"),Hnt.forEach(t),dfo=r(Gk," or "),uN=n(Gk,"A",{href:!0});var Unt=s(uN);cfo=r(Unt,"AlbertTokenizerFast"),Unt.forEach(t),ffo=r(Gk," (Nystr\xF6mformer model)"),Gk.forEach(t),mfo=i(S),ws=n(S,"LI",{});var Ok=s(ws);sle=n(Ok,"STRONG",{});var Jnt=s(sle);gfo=r(Jnt,"openai-gpt"),Jnt.forEach(t),hfo=r(Ok," \u2014 "),bN=n(Ok,"A",{href:!0});var Ynt=s(bN);pfo=r(Ynt,"OpenAIGPTTokenizer"),Ynt.forEach(t),_fo=r(Ok," or "),vN=n(Ok,"A",{href:!0});var Knt=s(vN);ufo=r(Knt,"OpenAIGPTTokenizerFast"),Knt.forEach(t),bfo=r(Ok," (OpenAI GPT model)"),Ok.forEach(t),vfo=i(S),ch=n(S,"LI",{});var gLe=s(ch);lle=n(gLe,"STRONG",{});var Znt=s(lle);Ffo=r(Znt,"opt"),Znt.forEach(t),Tfo=r(gLe," \u2014 "),FN=n(gLe,"A",{href:!0});var est=s(FN);Mfo=r(est,"GPT2Tokenizer"),est.forEach(t),Efo=r(gLe," (OPT model)"),gLe.forEach(t),Cfo=i(S),As=n(S,"LI",{});var Vk=s(As);ile=n(Vk,"STRONG",{});var ost=s(ile);wfo=r(ost,"pegasus"),ost.forEach(t),Afo=r(Vk," \u2014 "),TN=n(Vk,"A",{href:!0});var rst=s(TN);Lfo=r(rst,"PegasusTokenizer"),rst.forEach(t),yfo=r(Vk," or "),MN=n(Vk,"A",{href:!0});var tst=s(MN);xfo=r(tst,"PegasusTokenizerFast"),tst.forEach(t),$fo=r(Vk," (Pegasus model)"),Vk.forEach(t),kfo=i(S),fh=n(S,"LI",{});var hLe=s(fh);dle=n(hLe,"STRONG",{});var ast=s(dle);Sfo=r(ast,"perceiver"),ast.forEach(t),Rfo=r(hLe," \u2014 "),EN=n(hLe,"A",{href:!0});var nst=s(EN);Pfo=r(nst,"PerceiverTokenizer"),nst.forEach(t),Bfo=r(hLe," (Perceiver model)"),hLe.forEach(t),Nfo=i(S),mh=n(S,"LI",{});var pLe=s(mh);cle=n(pLe,"STRONG",{});var sst=s(cle);Ifo=r(sst,"phobert"),sst.forEach(t),qfo=r(pLe," \u2014 "),CN=n(pLe,"A",{href:!0});var lst=s(CN);jfo=r(lst,"PhobertTokenizer"),lst.forEach(t),Dfo=r(pLe," (PhoBERT model)"),pLe.forEach(t),Gfo=i(S),gh=n(S,"LI",{});var _Le=s(gh);fle=n(_Le,"STRONG",{});var ist=s(fle);Ofo=r(ist,"plbart"),ist.forEach(t),Vfo=r(_Le," \u2014 "),wN=n(_Le,"A",{href:!0});var dst=s(wN);Xfo=r(dst,"PLBartTokenizer"),dst.forEach(t),zfo=r(_Le," (PLBart model)"),_Le.forEach(t),Qfo=i(S),hh=n(S,"LI",{});var uLe=s(hh);mle=n(uLe,"STRONG",{});var cst=s(mle);Wfo=r(cst,"prophetnet"),cst.forEach(t),Hfo=r(uLe," \u2014 "),AN=n(uLe,"A",{href:!0});var fst=s(AN);Ufo=r(fst,"ProphetNetTokenizer"),fst.forEach(t),Jfo=r(uLe," (ProphetNet model)"),uLe.forEach(t),Yfo=i(S),Ls=n(S,"LI",{});var Xk=s(Ls);gle=n(Xk,"STRONG",{});var mst=s(gle);Kfo=r(mst,"qdqbert"),mst.forEach(t),Zfo=r(Xk," \u2014 "),LN=n(Xk,"A",{href:!0});var gst=s(LN);emo=r(gst,"BertTokenizer"),gst.forEach(t),omo=r(Xk," or "),yN=n(Xk,"A",{href:!0});var hst=s(yN);rmo=r(hst,"BertTokenizerFast"),hst.forEach(t),tmo=r(Xk," (QDQBert model)"),Xk.forEach(t),amo=i(S),ph=n(S,"LI",{});var bLe=s(ph);hle=n(bLe,"STRONG",{});var pst=s(hle);nmo=r(pst,"rag"),pst.forEach(t),smo=r(bLe," \u2014 "),xN=n(bLe,"A",{href:!0});var _st=s(xN);lmo=r(_st,"RagTokenizer"),_st.forEach(t),imo=r(bLe," (RAG model)"),bLe.forEach(t),dmo=i(S),ys=n(S,"LI",{});var zk=s(ys);ple=n(zk,"STRONG",{});var ust=s(ple);cmo=r(ust,"realm"),ust.forEach(t),fmo=r(zk," \u2014 "),$N=n(zk,"A",{href:!0});var bst=s($N);mmo=r(bst,"RealmTokenizer"),bst.forEach(t),gmo=r(zk," or "),kN=n(zk,"A",{href:!0});var vst=s(kN);hmo=r(vst,"RealmTokenizerFast"),vst.forEach(t),pmo=r(zk," (REALM model)"),zk.forEach(t),_mo=i(S),xs=n(S,"LI",{});var Qk=s(xs);_le=n(Qk,"STRONG",{});var Fst=s(_le);umo=r(Fst,"reformer"),Fst.forEach(t),bmo=r(Qk," \u2014 "),SN=n(Qk,"A",{href:!0});var Tst=s(SN);vmo=r(Tst,"ReformerTokenizer"),Tst.forEach(t),Fmo=r(Qk," or "),RN=n(Qk,"A",{href:!0});var Mst=s(RN);Tmo=r(Mst,"ReformerTokenizerFast"),Mst.forEach(t),Mmo=r(Qk," (Reformer model)"),Qk.forEach(t),Emo=i(S),$s=n(S,"LI",{});var Wk=s($s);ule=n(Wk,"STRONG",{});var Est=s(ule);Cmo=r(Est,"rembert"),Est.forEach(t),wmo=r(Wk," \u2014 "),PN=n(Wk,"A",{href:!0});var Cst=s(PN);Amo=r(Cst,"RemBertTokenizer"),Cst.forEach(t),Lmo=r(Wk," or "),BN=n(Wk,"A",{href:!0});var wst=s(BN);ymo=r(wst,"RemBertTokenizerFast"),wst.forEach(t),xmo=r(Wk," (RemBERT model)"),Wk.forEach(t),$mo=i(S),ks=n(S,"LI",{});var Hk=s(ks);ble=n(Hk,"STRONG",{});var Ast=s(ble);kmo=r(Ast,"retribert"),Ast.forEach(t),Smo=r(Hk," \u2014 "),NN=n(Hk,"A",{href:!0});var Lst=s(NN);Rmo=r(Lst,"RetriBertTokenizer"),Lst.forEach(t),Pmo=r(Hk," or "),IN=n(Hk,"A",{href:!0});var yst=s(IN);Bmo=r(yst,"RetriBertTokenizerFast"),yst.forEach(t),Nmo=r(Hk," (RetriBERT model)"),Hk.forEach(t),Imo=i(S),Ss=n(S,"LI",{});var Uk=s(Ss);vle=n(Uk,"STRONG",{});var xst=s(vle);qmo=r(xst,"roberta"),xst.forEach(t),jmo=r(Uk," \u2014 "),qN=n(Uk,"A",{href:!0});var $st=s(qN);Dmo=r($st,"RobertaTokenizer"),$st.forEach(t),Gmo=r(Uk," or "),jN=n(Uk,"A",{href:!0});var kst=s(jN);Omo=r(kst,"RobertaTokenizerFast"),kst.forEach(t),Vmo=r(Uk," (RoBERTa model)"),Uk.forEach(t),Xmo=i(S),Rs=n(S,"LI",{});var Jk=s(Rs);Fle=n(Jk,"STRONG",{});var Sst=s(Fle);zmo=r(Sst,"roformer"),Sst.forEach(t),Qmo=r(Jk," \u2014 "),DN=n(Jk,"A",{href:!0});var Rst=s(DN);Wmo=r(Rst,"RoFormerTokenizer"),Rst.forEach(t),Hmo=r(Jk," or "),GN=n(Jk,"A",{href:!0});var Pst=s(GN);Umo=r(Pst,"RoFormerTokenizerFast"),Pst.forEach(t),Jmo=r(Jk," (RoFormer model)"),Jk.forEach(t),Ymo=i(S),_h=n(S,"LI",{});var vLe=s(_h);Tle=n(vLe,"STRONG",{});var Bst=s(Tle);Kmo=r(Bst,"speech_to_text"),Bst.forEach(t),Zmo=r(vLe," \u2014 "),ON=n(vLe,"A",{href:!0});var Nst=s(ON);ego=r(Nst,"Speech2TextTokenizer"),Nst.forEach(t),ogo=r(vLe," (Speech2Text model)"),vLe.forEach(t),rgo=i(S),uh=n(S,"LI",{});var FLe=s(uh);Mle=n(FLe,"STRONG",{});var Ist=s(Mle);tgo=r(Ist,"speech_to_text_2"),Ist.forEach(t),ago=r(FLe," \u2014 "),VN=n(FLe,"A",{href:!0});var qst=s(VN);ngo=r(qst,"Speech2Text2Tokenizer"),qst.forEach(t),sgo=r(FLe," (Speech2Text2 model)"),FLe.forEach(t),lgo=i(S),Ps=n(S,"LI",{});var Yk=s(Ps);Ele=n(Yk,"STRONG",{});var jst=s(Ele);igo=r(jst,"splinter"),jst.forEach(t),dgo=r(Yk," \u2014 "),XN=n(Yk,"A",{href:!0});var Dst=s(XN);cgo=r(Dst,"SplinterTokenizer"),Dst.forEach(t),fgo=r(Yk," or "),zN=n(Yk,"A",{href:!0});var Gst=s(zN);mgo=r(Gst,"SplinterTokenizerFast"),Gst.forEach(t),ggo=r(Yk," (Splinter model)"),Yk.forEach(t),hgo=i(S),Bs=n(S,"LI",{});var Kk=s(Bs);Cle=n(Kk,"STRONG",{});var Ost=s(Cle);pgo=r(Ost,"squeezebert"),Ost.forEach(t),_go=r(Kk," \u2014 "),QN=n(Kk,"A",{href:!0});var Vst=s(QN);ugo=r(Vst,"SqueezeBertTokenizer"),Vst.forEach(t),bgo=r(Kk," or "),WN=n(Kk,"A",{href:!0});var Xst=s(WN);vgo=r(Xst,"SqueezeBertTokenizerFast"),Xst.forEach(t),Fgo=r(Kk," (SqueezeBERT model)"),Kk.forEach(t),Tgo=i(S),Ns=n(S,"LI",{});var Zk=s(Ns);wle=n(Zk,"STRONG",{});var zst=s(wle);Mgo=r(zst,"t5"),zst.forEach(t),Ego=r(Zk," \u2014 "),HN=n(Zk,"A",{href:!0});var Qst=s(HN);Cgo=r(Qst,"T5Tokenizer"),Qst.forEach(t),wgo=r(Zk," or "),UN=n(Zk,"A",{href:!0});var Wst=s(UN);Ago=r(Wst,"T5TokenizerFast"),Wst.forEach(t),Lgo=r(Zk," (T5 model)"),Zk.forEach(t),ygo=i(S),bh=n(S,"LI",{});var TLe=s(bh);Ale=n(TLe,"STRONG",{});var Hst=s(Ale);xgo=r(Hst,"tapas"),Hst.forEach(t),$go=r(TLe," \u2014 "),JN=n(TLe,"A",{href:!0});var Ust=s(JN);kgo=r(Ust,"TapasTokenizer"),Ust.forEach(t),Sgo=r(TLe," (TAPAS model)"),TLe.forEach(t),Rgo=i(S),vh=n(S,"LI",{});var MLe=s(vh);Lle=n(MLe,"STRONG",{});var Jst=s(Lle);Pgo=r(Jst,"tapex"),Jst.forEach(t),Bgo=r(MLe," \u2014 "),YN=n(MLe,"A",{href:!0});var Yst=s(YN);Ngo=r(Yst,"TapexTokenizer"),Yst.forEach(t),Igo=r(MLe," (TAPEX model)"),MLe.forEach(t),qgo=i(S),Fh=n(S,"LI",{});var ELe=s(Fh);yle=n(ELe,"STRONG",{});var Kst=s(yle);jgo=r(Kst,"transfo-xl"),Kst.forEach(t),Dgo=r(ELe," \u2014 "),KN=n(ELe,"A",{href:!0});var Zst=s(KN);Ggo=r(Zst,"TransfoXLTokenizer"),Zst.forEach(t),Ogo=r(ELe," (Transformer-XL model)"),ELe.forEach(t),Vgo=i(S),Is=n(S,"LI",{});var eS=s(Is);xle=n(eS,"STRONG",{});var elt=s(xle);Xgo=r(elt,"vilt"),elt.forEach(t),zgo=r(eS," \u2014 "),ZN=n(eS,"A",{href:!0});var olt=s(ZN);Qgo=r(olt,"BertTokenizer"),olt.forEach(t),Wgo=r(eS," or "),eI=n(eS,"A",{href:!0});var rlt=s(eI);Hgo=r(rlt,"BertTokenizerFast"),rlt.forEach(t),Ugo=r(eS," (ViLT model)"),eS.forEach(t),Jgo=i(S),qs=n(S,"LI",{});var oS=s(qs);$le=n(oS,"STRONG",{});var tlt=s($le);Ygo=r(tlt,"visual_bert"),tlt.forEach(t),Kgo=r(oS," \u2014 "),oI=n(oS,"A",{href:!0});var alt=s(oI);Zgo=r(alt,"BertTokenizer"),alt.forEach(t),eho=r(oS," or "),rI=n(oS,"A",{href:!0});var nlt=s(rI);oho=r(nlt,"BertTokenizerFast"),nlt.forEach(t),rho=r(oS," (VisualBERT model)"),oS.forEach(t),tho=i(S),Th=n(S,"LI",{});var CLe=s(Th);kle=n(CLe,"STRONG",{});var slt=s(kle);aho=r(slt,"wav2vec2"),slt.forEach(t),nho=r(CLe," \u2014 "),tI=n(CLe,"A",{href:!0});var llt=s(tI);sho=r(llt,"Wav2Vec2CTCTokenizer"),llt.forEach(t),lho=r(CLe," (Wav2Vec2 model)"),CLe.forEach(t),iho=i(S),Mh=n(S,"LI",{});var wLe=s(Mh);Sle=n(wLe,"STRONG",{});var ilt=s(Sle);dho=r(ilt,"wav2vec2-conformer"),ilt.forEach(t),cho=r(wLe," \u2014 "),aI=n(wLe,"A",{href:!0});var dlt=s(aI);fho=r(dlt,"Wav2Vec2CTCTokenizer"),dlt.forEach(t),mho=r(wLe," (Wav2Vec2-Conformer model)"),wLe.forEach(t),gho=i(S),Eh=n(S,"LI",{});var ALe=s(Eh);Rle=n(ALe,"STRONG",{});var clt=s(Rle);hho=r(clt,"wav2vec2_phoneme"),clt.forEach(t),pho=r(ALe," \u2014 "),nI=n(ALe,"A",{href:!0});var flt=s(nI);_ho=r(flt,"Wav2Vec2PhonemeCTCTokenizer"),flt.forEach(t),uho=r(ALe," (Wav2Vec2Phoneme model)"),ALe.forEach(t),bho=i(S),js=n(S,"LI",{});var rS=s(js);Ple=n(rS,"STRONG",{});var mlt=s(Ple);vho=r(mlt,"xglm"),mlt.forEach(t),Fho=r(rS," \u2014 "),sI=n(rS,"A",{href:!0});var glt=s(sI);Tho=r(glt,"XGLMTokenizer"),glt.forEach(t),Mho=r(rS," or "),lI=n(rS,"A",{href:!0});var hlt=s(lI);Eho=r(hlt,"XGLMTokenizerFast"),hlt.forEach(t),Cho=r(rS," (XGLM model)"),rS.forEach(t),who=i(S),Ch=n(S,"LI",{});var LLe=s(Ch);Ble=n(LLe,"STRONG",{});var plt=s(Ble);Aho=r(plt,"xlm"),plt.forEach(t),Lho=r(LLe," \u2014 "),iI=n(LLe,"A",{href:!0});var _lt=s(iI);yho=r(_lt,"XLMTokenizer"),_lt.forEach(t),xho=r(LLe," (XLM model)"),LLe.forEach(t),$ho=i(S),wh=n(S,"LI",{});var yLe=s(wh);Nle=n(yLe,"STRONG",{});var ult=s(Nle);kho=r(ult,"xlm-prophetnet"),ult.forEach(t),Sho=r(yLe," \u2014 "),dI=n(yLe,"A",{href:!0});var blt=s(dI);Rho=r(blt,"XLMProphetNetTokenizer"),blt.forEach(t),Pho=r(yLe," (XLM-ProphetNet model)"),yLe.forEach(t),Bho=i(S),Ds=n(S,"LI",{});var tS=s(Ds);Ile=n(tS,"STRONG",{});var vlt=s(Ile);Nho=r(vlt,"xlm-roberta"),vlt.forEach(t),Iho=r(tS," \u2014 "),cI=n(tS,"A",{href:!0});var Flt=s(cI);qho=r(Flt,"XLMRobertaTokenizer"),Flt.forEach(t),jho=r(tS," or "),fI=n(tS,"A",{href:!0});var Tlt=s(fI);Dho=r(Tlt,"XLMRobertaTokenizerFast"),Tlt.forEach(t),Gho=r(tS," (XLM-RoBERTa model)"),tS.forEach(t),Oho=i(S),Gs=n(S,"LI",{});var aS=s(Gs);qle=n(aS,"STRONG",{});var Mlt=s(qle);Vho=r(Mlt,"xlm-roberta-xl"),Mlt.forEach(t),Xho=r(aS," \u2014 "),mI=n(aS,"A",{href:!0});var Elt=s(mI);zho=r(Elt,"RobertaTokenizer"),Elt.forEach(t),Qho=r(aS," or "),gI=n(aS,"A",{href:!0});var Clt=s(gI);Who=r(Clt,"RobertaTokenizerFast"),Clt.forEach(t),Hho=r(aS," (XLM-RoBERTa-XL model)"),aS.forEach(t),Uho=i(S),Os=n(S,"LI",{});var nS=s(Os);jle=n(nS,"STRONG",{});var wlt=s(jle);Jho=r(wlt,"xlnet"),wlt.forEach(t),Yho=r(nS," \u2014 "),hI=n(nS,"A",{href:!0});var Alt=s(hI);Kho=r(Alt,"XLNetTokenizer"),Alt.forEach(t),Zho=r(nS," or "),pI=n(nS,"A",{href:!0});var Llt=s(pI);epo=r(Llt,"XLNetTokenizerFast"),Llt.forEach(t),opo=r(nS," (XLNet model)"),nS.forEach(t),rpo=i(S),Vs=n(S,"LI",{});var sS=s(Vs);Dle=n(sS,"STRONG",{});var ylt=s(Dle);tpo=r(ylt,"yoso"),ylt.forEach(t),apo=r(sS," \u2014 "),_I=n(sS,"A",{href:!0});var xlt=s(_I);npo=r(xlt,"AlbertTokenizer"),xlt.forEach(t),spo=r(sS," or "),uI=n(sS,"A",{href:!0});var $lt=s(uI);lpo=r($lt,"AlbertTokenizerFast"),$lt.forEach(t),ipo=r(sS," (YOSO model)"),sS.forEach(t),S.forEach(t),dpo=i(Us),T(Ah.$$.fragment,Us),Us.forEach(t),cpo=i(Hs),Lh=n(Hs,"DIV",{class:!0});var yXe=s(Lh);T(J6.$$.fragment,yXe),fpo=i(yXe),Gle=n(yXe,"P",{});var klt=s(Gle);mpo=r(klt,"Register a new tokenizer in this mapping."),klt.forEach(t),yXe.forEach(t),Hs.forEach(t),LOe=i(f),Ri=n(f,"H2",{class:!0});var xXe=s(Ri);yh=n(xXe,"A",{id:!0,class:!0,href:!0});var Slt=s(yh);Ole=n(Slt,"SPAN",{});var Rlt=s(Ole);T(Y6.$$.fragment,Rlt),Rlt.forEach(t),Slt.forEach(t),gpo=i(xXe),Vle=n(xXe,"SPAN",{});var Plt=s(Vle);hpo=r(Plt,"AutoFeatureExtractor"),Plt.forEach(t),xXe.forEach(t),yOe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(K6.$$.fragment,Js),ppo=i(Js),Z6=n(Js,"P",{});var $Xe=s(Z6);_po=r($Xe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bI=n($Xe,"A",{href:!0});var Blt=s(bI);upo=r(Blt,"AutoFeatureExtractor.from_pretrained()"),Blt.forEach(t),bpo=r($Xe," class method."),$Xe.forEach(t),vpo=i(Js),eL=n(Js,"P",{});var kXe=s(eL);Fpo=r(kXe,"This class cannot be instantiated directly using "),Xle=n(kXe,"CODE",{});var Nlt=s(Xle);Tpo=r(Nlt,"__init__()"),Nlt.forEach(t),Mpo=r(kXe," (throws an error)."),kXe.forEach(t),Epo=i(Js),He=n(Js,"DIV",{class:!0});var ra=s(He);T(oL.$$.fragment,ra),Cpo=i(ra),zle=n(ra,"P",{});var Ilt=s(zle);wpo=r(Ilt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ilt.forEach(t),Apo=i(ra),Sa=n(ra,"P",{});var qw=s(Sa);Lpo=r(qw,"The feature extractor class to instantiate is selected based on the "),Qle=n(qw,"CODE",{});var qlt=s(Qle);ypo=r(qlt,"model_type"),qlt.forEach(t),xpo=r(qw,` property of the config object
(either passed as an argument or loaded from `),Wle=n(qw,"CODE",{});var jlt=s(Wle);$po=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),kpo=r(qw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Hle=n(qw,"CODE",{});var Dlt=s(Hle);Spo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),Rpo=r(qw,":"),qw.forEach(t),Ppo=i(ra),Y=n(ra,"UL",{});var K=s(Y);xh=n(K,"LI",{});var xLe=s(xh);Ule=n(xLe,"STRONG",{});var Glt=s(Ule);Bpo=r(Glt,"beit"),Glt.forEach(t),Npo=r(xLe," \u2014 "),vI=n(xLe,"A",{href:!0});var Olt=s(vI);Ipo=r(Olt,"BeitFeatureExtractor"),Olt.forEach(t),qpo=r(xLe," (BEiT model)"),xLe.forEach(t),jpo=i(K),$h=n(K,"LI",{});var $Le=s($h);Jle=n($Le,"STRONG",{});var Vlt=s(Jle);Dpo=r(Vlt,"clip"),Vlt.forEach(t),Gpo=r($Le," \u2014 "),FI=n($Le,"A",{href:!0});var Xlt=s(FI);Opo=r(Xlt,"CLIPFeatureExtractor"),Xlt.forEach(t),Vpo=r($Le," (CLIP model)"),$Le.forEach(t),Xpo=i(K),kh=n(K,"LI",{});var kLe=s(kh);Yle=n(kLe,"STRONG",{});var zlt=s(Yle);zpo=r(zlt,"convnext"),zlt.forEach(t),Qpo=r(kLe," \u2014 "),TI=n(kLe,"A",{href:!0});var Qlt=s(TI);Wpo=r(Qlt,"ConvNextFeatureExtractor"),Qlt.forEach(t),Hpo=r(kLe," (ConvNeXT model)"),kLe.forEach(t),Upo=i(K),Sh=n(K,"LI",{});var SLe=s(Sh);Kle=n(SLe,"STRONG",{});var Wlt=s(Kle);Jpo=r(Wlt,"cvt"),Wlt.forEach(t),Ypo=r(SLe," \u2014 "),MI=n(SLe,"A",{href:!0});var Hlt=s(MI);Kpo=r(Hlt,"ConvNextFeatureExtractor"),Hlt.forEach(t),Zpo=r(SLe," (CvT model)"),SLe.forEach(t),e_o=i(K),Rh=n(K,"LI",{});var RLe=s(Rh);Zle=n(RLe,"STRONG",{});var Ult=s(Zle);o_o=r(Ult,"data2vec-audio"),Ult.forEach(t),r_o=r(RLe," \u2014 "),EI=n(RLe,"A",{href:!0});var Jlt=s(EI);t_o=r(Jlt,"Wav2Vec2FeatureExtractor"),Jlt.forEach(t),a_o=r(RLe," (Data2VecAudio model)"),RLe.forEach(t),n_o=i(K),Ph=n(K,"LI",{});var PLe=s(Ph);eie=n(PLe,"STRONG",{});var Ylt=s(eie);s_o=r(Ylt,"data2vec-vision"),Ylt.forEach(t),l_o=r(PLe," \u2014 "),CI=n(PLe,"A",{href:!0});var Klt=s(CI);i_o=r(Klt,"BeitFeatureExtractor"),Klt.forEach(t),d_o=r(PLe," (Data2VecVision model)"),PLe.forEach(t),c_o=i(K),Bh=n(K,"LI",{});var BLe=s(Bh);oie=n(BLe,"STRONG",{});var Zlt=s(oie);f_o=r(Zlt,"deit"),Zlt.forEach(t),m_o=r(BLe," \u2014 "),wI=n(BLe,"A",{href:!0});var eit=s(wI);g_o=r(eit,"DeiTFeatureExtractor"),eit.forEach(t),h_o=r(BLe," (DeiT model)"),BLe.forEach(t),p_o=i(K),Nh=n(K,"LI",{});var NLe=s(Nh);rie=n(NLe,"STRONG",{});var oit=s(rie);__o=r(oit,"detr"),oit.forEach(t),u_o=r(NLe," \u2014 "),AI=n(NLe,"A",{href:!0});var rit=s(AI);b_o=r(rit,"DetrFeatureExtractor"),rit.forEach(t),v_o=r(NLe," (DETR model)"),NLe.forEach(t),F_o=i(K),Ih=n(K,"LI",{});var ILe=s(Ih);tie=n(ILe,"STRONG",{});var tit=s(tie);T_o=r(tit,"dpt"),tit.forEach(t),M_o=r(ILe," \u2014 "),LI=n(ILe,"A",{href:!0});var ait=s(LI);E_o=r(ait,"DPTFeatureExtractor"),ait.forEach(t),C_o=r(ILe," (DPT model)"),ILe.forEach(t),w_o=i(K),qh=n(K,"LI",{});var qLe=s(qh);aie=n(qLe,"STRONG",{});var nit=s(aie);A_o=r(nit,"flava"),nit.forEach(t),L_o=r(qLe," \u2014 "),yI=n(qLe,"A",{href:!0});var sit=s(yI);y_o=r(sit,"FlavaFeatureExtractor"),sit.forEach(t),x_o=r(qLe," (FLAVA model)"),qLe.forEach(t),$_o=i(K),jh=n(K,"LI",{});var jLe=s(jh);nie=n(jLe,"STRONG",{});var lit=s(nie);k_o=r(lit,"glpn"),lit.forEach(t),S_o=r(jLe," \u2014 "),xI=n(jLe,"A",{href:!0});var iit=s(xI);R_o=r(iit,"GLPNFeatureExtractor"),iit.forEach(t),P_o=r(jLe," (GLPN model)"),jLe.forEach(t),B_o=i(K),Dh=n(K,"LI",{});var DLe=s(Dh);sie=n(DLe,"STRONG",{});var dit=s(sie);N_o=r(dit,"hubert"),dit.forEach(t),I_o=r(DLe," \u2014 "),$I=n(DLe,"A",{href:!0});var cit=s($I);q_o=r(cit,"Wav2Vec2FeatureExtractor"),cit.forEach(t),j_o=r(DLe," (Hubert model)"),DLe.forEach(t),D_o=i(K),Gh=n(K,"LI",{});var GLe=s(Gh);lie=n(GLe,"STRONG",{});var fit=s(lie);G_o=r(fit,"imagegpt"),fit.forEach(t),O_o=r(GLe," \u2014 "),kI=n(GLe,"A",{href:!0});var mit=s(kI);V_o=r(mit,"ImageGPTFeatureExtractor"),mit.forEach(t),X_o=r(GLe," (ImageGPT model)"),GLe.forEach(t),z_o=i(K),Oh=n(K,"LI",{});var OLe=s(Oh);iie=n(OLe,"STRONG",{});var git=s(iie);Q_o=r(git,"layoutlmv2"),git.forEach(t),W_o=r(OLe," \u2014 "),SI=n(OLe,"A",{href:!0});var hit=s(SI);H_o=r(hit,"LayoutLMv2FeatureExtractor"),hit.forEach(t),U_o=r(OLe," (LayoutLMv2 model)"),OLe.forEach(t),J_o=i(K),Vh=n(K,"LI",{});var VLe=s(Vh);die=n(VLe,"STRONG",{});var pit=s(die);Y_o=r(pit,"layoutlmv3"),pit.forEach(t),K_o=r(VLe," \u2014 "),RI=n(VLe,"A",{href:!0});var _it=s(RI);Z_o=r(_it,"LayoutLMv3FeatureExtractor"),_it.forEach(t),euo=r(VLe," (LayoutLMv3 model)"),VLe.forEach(t),ouo=i(K),Xh=n(K,"LI",{});var XLe=s(Xh);cie=n(XLe,"STRONG",{});var uit=s(cie);ruo=r(uit,"levit"),uit.forEach(t),tuo=r(XLe," \u2014 "),PI=n(XLe,"A",{href:!0});var bit=s(PI);auo=r(bit,"LevitFeatureExtractor"),bit.forEach(t),nuo=r(XLe," (LeViT model)"),XLe.forEach(t),suo=i(K),zh=n(K,"LI",{});var zLe=s(zh);fie=n(zLe,"STRONG",{});var vit=s(fie);luo=r(vit,"maskformer"),vit.forEach(t),iuo=r(zLe," \u2014 "),BI=n(zLe,"A",{href:!0});var Fit=s(BI);duo=r(Fit,"MaskFormerFeatureExtractor"),Fit.forEach(t),cuo=r(zLe," (MaskFormer model)"),zLe.forEach(t),fuo=i(K),Qh=n(K,"LI",{});var QLe=s(Qh);mie=n(QLe,"STRONG",{});var Tit=s(mie);muo=r(Tit,"mctct"),Tit.forEach(t),guo=r(QLe," \u2014 "),NI=n(QLe,"A",{href:!0});var Mit=s(NI);huo=r(Mit,"MCTCTFeatureExtractor"),Mit.forEach(t),puo=r(QLe," (M-CTC-T model)"),QLe.forEach(t),_uo=i(K),Wh=n(K,"LI",{});var WLe=s(Wh);gie=n(WLe,"STRONG",{});var Eit=s(gie);uuo=r(Eit,"mobilenet_v1"),Eit.forEach(t),buo=r(WLe," \u2014 "),II=n(WLe,"A",{href:!0});var Cit=s(II);vuo=r(Cit,"MobileNetV1FeatureExtractor"),Cit.forEach(t),Fuo=r(WLe," (MobileNetV1 model)"),WLe.forEach(t),Tuo=i(K),Hh=n(K,"LI",{});var HLe=s(Hh);hie=n(HLe,"STRONG",{});var wit=s(hie);Muo=r(wit,"perceiver"),wit.forEach(t),Euo=r(HLe," \u2014 "),qI=n(HLe,"A",{href:!0});var Ait=s(qI);Cuo=r(Ait,"PerceiverFeatureExtractor"),Ait.forEach(t),wuo=r(HLe," (Perceiver model)"),HLe.forEach(t),Auo=i(K),Uh=n(K,"LI",{});var ULe=s(Uh);pie=n(ULe,"STRONG",{});var Lit=s(pie);Luo=r(Lit,"poolformer"),Lit.forEach(t),yuo=r(ULe," \u2014 "),jI=n(ULe,"A",{href:!0});var yit=s(jI);xuo=r(yit,"PoolFormerFeatureExtractor"),yit.forEach(t),$uo=r(ULe," (PoolFormer model)"),ULe.forEach(t),kuo=i(K),Jh=n(K,"LI",{});var JLe=s(Jh);_ie=n(JLe,"STRONG",{});var xit=s(_ie);Suo=r(xit,"regnet"),xit.forEach(t),Ruo=r(JLe," \u2014 "),DI=n(JLe,"A",{href:!0});var $it=s(DI);Puo=r($it,"ConvNextFeatureExtractor"),$it.forEach(t),Buo=r(JLe," (RegNet model)"),JLe.forEach(t),Nuo=i(K),Yh=n(K,"LI",{});var YLe=s(Yh);uie=n(YLe,"STRONG",{});var kit=s(uie);Iuo=r(kit,"resnet"),kit.forEach(t),quo=r(YLe," \u2014 "),GI=n(YLe,"A",{href:!0});var Sit=s(GI);juo=r(Sit,"ConvNextFeatureExtractor"),Sit.forEach(t),Duo=r(YLe," (ResNet model)"),YLe.forEach(t),Guo=i(K),Kh=n(K,"LI",{});var KLe=s(Kh);bie=n(KLe,"STRONG",{});var Rit=s(bie);Ouo=r(Rit,"segformer"),Rit.forEach(t),Vuo=r(KLe," \u2014 "),OI=n(KLe,"A",{href:!0});var Pit=s(OI);Xuo=r(Pit,"SegformerFeatureExtractor"),Pit.forEach(t),zuo=r(KLe," (SegFormer model)"),KLe.forEach(t),Quo=i(K),Zh=n(K,"LI",{});var ZLe=s(Zh);vie=n(ZLe,"STRONG",{});var Bit=s(vie);Wuo=r(Bit,"speech_to_text"),Bit.forEach(t),Huo=r(ZLe," \u2014 "),VI=n(ZLe,"A",{href:!0});var Nit=s(VI);Uuo=r(Nit,"Speech2TextFeatureExtractor"),Nit.forEach(t),Juo=r(ZLe," (Speech2Text model)"),ZLe.forEach(t),Yuo=i(K),ep=n(K,"LI",{});var eye=s(ep);Fie=n(eye,"STRONG",{});var Iit=s(Fie);Kuo=r(Iit,"swin"),Iit.forEach(t),Zuo=r(eye," \u2014 "),XI=n(eye,"A",{href:!0});var qit=s(XI);e1o=r(qit,"ViTFeatureExtractor"),qit.forEach(t),o1o=r(eye," (Swin Transformer model)"),eye.forEach(t),r1o=i(K),op=n(K,"LI",{});var oye=s(op);Tie=n(oye,"STRONG",{});var jit=s(Tie);t1o=r(jit,"van"),jit.forEach(t),a1o=r(oye," \u2014 "),zI=n(oye,"A",{href:!0});var Dit=s(zI);n1o=r(Dit,"ConvNextFeatureExtractor"),Dit.forEach(t),s1o=r(oye," (VAN model)"),oye.forEach(t),l1o=i(K),rp=n(K,"LI",{});var rye=s(rp);Mie=n(rye,"STRONG",{});var Git=s(Mie);i1o=r(Git,"vilt"),Git.forEach(t),d1o=r(rye," \u2014 "),QI=n(rye,"A",{href:!0});var Oit=s(QI);c1o=r(Oit,"ViltFeatureExtractor"),Oit.forEach(t),f1o=r(rye," (ViLT model)"),rye.forEach(t),m1o=i(K),tp=n(K,"LI",{});var tye=s(tp);Eie=n(tye,"STRONG",{});var Vit=s(Eie);g1o=r(Vit,"vit"),Vit.forEach(t),h1o=r(tye," \u2014 "),WI=n(tye,"A",{href:!0});var Xit=s(WI);p1o=r(Xit,"ViTFeatureExtractor"),Xit.forEach(t),_1o=r(tye," (ViT model)"),tye.forEach(t),u1o=i(K),ap=n(K,"LI",{});var aye=s(ap);Cie=n(aye,"STRONG",{});var zit=s(Cie);b1o=r(zit,"vit_mae"),zit.forEach(t),v1o=r(aye," \u2014 "),HI=n(aye,"A",{href:!0});var Qit=s(HI);F1o=r(Qit,"ViTFeatureExtractor"),Qit.forEach(t),T1o=r(aye," (ViTMAE model)"),aye.forEach(t),M1o=i(K),np=n(K,"LI",{});var nye=s(np);wie=n(nye,"STRONG",{});var Wit=s(wie);E1o=r(Wit,"wav2vec2"),Wit.forEach(t),C1o=r(nye," \u2014 "),UI=n(nye,"A",{href:!0});var Hit=s(UI);w1o=r(Hit,"Wav2Vec2FeatureExtractor"),Hit.forEach(t),A1o=r(nye," (Wav2Vec2 model)"),nye.forEach(t),L1o=i(K),sp=n(K,"LI",{});var sye=s(sp);Aie=n(sye,"STRONG",{});var Uit=s(Aie);y1o=r(Uit,"wav2vec2-conformer"),Uit.forEach(t),x1o=r(sye," \u2014 "),JI=n(sye,"A",{href:!0});var Jit=s(JI);$1o=r(Jit,"Wav2Vec2FeatureExtractor"),Jit.forEach(t),k1o=r(sye," (Wav2Vec2-Conformer model)"),sye.forEach(t),S1o=i(K),lp=n(K,"LI",{});var lye=s(lp);Lie=n(lye,"STRONG",{});var Yit=s(Lie);R1o=r(Yit,"yolos"),Yit.forEach(t),P1o=r(lye," \u2014 "),YI=n(lye,"A",{href:!0});var Kit=s(YI);B1o=r(Kit,"YolosFeatureExtractor"),Kit.forEach(t),N1o=r(lye," (YOLOS model)"),lye.forEach(t),K.forEach(t),I1o=i(ra),T(ip.$$.fragment,ra),q1o=i(ra),T(dp.$$.fragment,ra),ra.forEach(t),j1o=i(Js),cp=n(Js,"DIV",{class:!0});var SXe=s(cp);T(rL.$$.fragment,SXe),D1o=i(SXe),yie=n(SXe,"P",{});var Zit=s(yie);G1o=r(Zit,"Register a new feature extractor for this class."),Zit.forEach(t),SXe.forEach(t),Js.forEach(t),xOe=i(f),Pi=n(f,"H2",{class:!0});var RXe=s(Pi);fp=n(RXe,"A",{id:!0,class:!0,href:!0});var edt=s(fp);xie=n(edt,"SPAN",{});var odt=s(xie);T(tL.$$.fragment,odt),odt.forEach(t),edt.forEach(t),O1o=i(RXe),$ie=n(RXe,"SPAN",{});var rdt=s($ie);V1o=r(rdt,"AutoProcessor"),rdt.forEach(t),RXe.forEach(t),$Oe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(aL.$$.fragment,Ys),X1o=i(Ys),nL=n(Ys,"P",{});var PXe=s(nL);z1o=r(PXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KI=n(PXe,"A",{href:!0});var tdt=s(KI);Q1o=r(tdt,"AutoProcessor.from_pretrained()"),tdt.forEach(t),W1o=r(PXe," class method."),PXe.forEach(t),H1o=i(Ys),sL=n(Ys,"P",{});var BXe=s(sL);U1o=r(BXe,"This class cannot be instantiated directly using "),kie=n(BXe,"CODE",{});var adt=s(kie);J1o=r(adt,"__init__()"),adt.forEach(t),Y1o=r(BXe," (throws an error)."),BXe.forEach(t),K1o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var ta=s(Ue);T(lL.$$.fragment,ta),Z1o=i(ta),Sie=n(ta,"P",{});var ndt=s(Sie);e7o=r(ndt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ndt.forEach(t),o7o=i(ta),Bi=n(ta,"P",{});var Noe=s(Bi);r7o=r(Noe,"The processor class to instantiate is selected based on the "),Rie=n(Noe,"CODE",{});var sdt=s(Rie);t7o=r(sdt,"model_type"),sdt.forEach(t),a7o=r(Noe,` property of the config object (either
passed as an argument or loaded from `),Pie=n(Noe,"CODE",{});var ldt=s(Pie);n7o=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),s7o=r(Noe," if possible):"),Noe.forEach(t),l7o=i(ta),he=n(ta,"UL",{});var be=s(he);mp=n(be,"LI",{});var iye=s(mp);Bie=n(iye,"STRONG",{});var idt=s(Bie);i7o=r(idt,"clip"),idt.forEach(t),d7o=r(iye," \u2014 "),ZI=n(iye,"A",{href:!0});var ddt=s(ZI);c7o=r(ddt,"CLIPProcessor"),ddt.forEach(t),f7o=r(iye," (CLIP model)"),iye.forEach(t),m7o=i(be),gp=n(be,"LI",{});var dye=s(gp);Nie=n(dye,"STRONG",{});var cdt=s(Nie);g7o=r(cdt,"flava"),cdt.forEach(t),h7o=r(dye," \u2014 "),Iie=n(dye,"CODE",{});var fdt=s(Iie);p7o=r(fdt,"FLAVAProcessor"),fdt.forEach(t),_7o=r(dye," (FLAVA model)"),dye.forEach(t),u7o=i(be),hp=n(be,"LI",{});var cye=s(hp);qie=n(cye,"STRONG",{});var mdt=s(qie);b7o=r(mdt,"layoutlmv2"),mdt.forEach(t),v7o=r(cye," \u2014 "),eq=n(cye,"A",{href:!0});var gdt=s(eq);F7o=r(gdt,"LayoutLMv2Processor"),gdt.forEach(t),T7o=r(cye," (LayoutLMv2 model)"),cye.forEach(t),M7o=i(be),pp=n(be,"LI",{});var fye=s(pp);jie=n(fye,"STRONG",{});var hdt=s(jie);E7o=r(hdt,"layoutlmv3"),hdt.forEach(t),C7o=r(fye," \u2014 "),oq=n(fye,"A",{href:!0});var pdt=s(oq);w7o=r(pdt,"LayoutLMv3Processor"),pdt.forEach(t),A7o=r(fye," (LayoutLMv3 model)"),fye.forEach(t),L7o=i(be),_p=n(be,"LI",{});var mye=s(_p);Die=n(mye,"STRONG",{});var _dt=s(Die);y7o=r(_dt,"layoutxlm"),_dt.forEach(t),x7o=r(mye," \u2014 "),rq=n(mye,"A",{href:!0});var udt=s(rq);$7o=r(udt,"LayoutXLMProcessor"),udt.forEach(t),k7o=r(mye," (LayoutXLM model)"),mye.forEach(t),S7o=i(be),up=n(be,"LI",{});var gye=s(up);Gie=n(gye,"STRONG",{});var bdt=s(Gie);R7o=r(bdt,"sew"),bdt.forEach(t),P7o=r(gye," \u2014 "),tq=n(gye,"A",{href:!0});var vdt=s(tq);B7o=r(vdt,"Wav2Vec2Processor"),vdt.forEach(t),N7o=r(gye," (SEW model)"),gye.forEach(t),I7o=i(be),bp=n(be,"LI",{});var hye=s(bp);Oie=n(hye,"STRONG",{});var Fdt=s(Oie);q7o=r(Fdt,"sew-d"),Fdt.forEach(t),j7o=r(hye," \u2014 "),aq=n(hye,"A",{href:!0});var Tdt=s(aq);D7o=r(Tdt,"Wav2Vec2Processor"),Tdt.forEach(t),G7o=r(hye," (SEW-D model)"),hye.forEach(t),O7o=i(be),vp=n(be,"LI",{});var pye=s(vp);Vie=n(pye,"STRONG",{});var Mdt=s(Vie);V7o=r(Mdt,"speech_to_text"),Mdt.forEach(t),X7o=r(pye," \u2014 "),nq=n(pye,"A",{href:!0});var Edt=s(nq);z7o=r(Edt,"Speech2TextProcessor"),Edt.forEach(t),Q7o=r(pye," (Speech2Text model)"),pye.forEach(t),W7o=i(be),Fp=n(be,"LI",{});var _ye=s(Fp);Xie=n(_ye,"STRONG",{});var Cdt=s(Xie);H7o=r(Cdt,"speech_to_text_2"),Cdt.forEach(t),U7o=r(_ye," \u2014 "),sq=n(_ye,"A",{href:!0});var wdt=s(sq);J7o=r(wdt,"Speech2Text2Processor"),wdt.forEach(t),Y7o=r(_ye," (Speech2Text2 model)"),_ye.forEach(t),K7o=i(be),Tp=n(be,"LI",{});var uye=s(Tp);zie=n(uye,"STRONG",{});var Adt=s(zie);Z7o=r(Adt,"trocr"),Adt.forEach(t),e9o=r(uye," \u2014 "),lq=n(uye,"A",{href:!0});var Ldt=s(lq);o9o=r(Ldt,"TrOCRProcessor"),Ldt.forEach(t),r9o=r(uye," (TrOCR model)"),uye.forEach(t),t9o=i(be),Mp=n(be,"LI",{});var bye=s(Mp);Qie=n(bye,"STRONG",{});var ydt=s(Qie);a9o=r(ydt,"unispeech"),ydt.forEach(t),n9o=r(bye," \u2014 "),iq=n(bye,"A",{href:!0});var xdt=s(iq);s9o=r(xdt,"Wav2Vec2Processor"),xdt.forEach(t),l9o=r(bye," (UniSpeech model)"),bye.forEach(t),i9o=i(be),Ep=n(be,"LI",{});var vye=s(Ep);Wie=n(vye,"STRONG",{});var $dt=s(Wie);d9o=r($dt,"unispeech-sat"),$dt.forEach(t),c9o=r(vye," \u2014 "),dq=n(vye,"A",{href:!0});var kdt=s(dq);f9o=r(kdt,"Wav2Vec2Processor"),kdt.forEach(t),m9o=r(vye," (UniSpeechSat model)"),vye.forEach(t),g9o=i(be),Cp=n(be,"LI",{});var Fye=s(Cp);Hie=n(Fye,"STRONG",{});var Sdt=s(Hie);h9o=r(Sdt,"vilt"),Sdt.forEach(t),p9o=r(Fye," \u2014 "),cq=n(Fye,"A",{href:!0});var Rdt=s(cq);_9o=r(Rdt,"ViltProcessor"),Rdt.forEach(t),u9o=r(Fye," (ViLT model)"),Fye.forEach(t),b9o=i(be),wp=n(be,"LI",{});var Tye=s(wp);Uie=n(Tye,"STRONG",{});var Pdt=s(Uie);v9o=r(Pdt,"vision-text-dual-encoder"),Pdt.forEach(t),F9o=r(Tye," \u2014 "),fq=n(Tye,"A",{href:!0});var Bdt=s(fq);T9o=r(Bdt,"VisionTextDualEncoderProcessor"),Bdt.forEach(t),M9o=r(Tye," (VisionTextDualEncoder model)"),Tye.forEach(t),E9o=i(be),Ap=n(be,"LI",{});var Mye=s(Ap);Jie=n(Mye,"STRONG",{});var Ndt=s(Jie);C9o=r(Ndt,"wav2vec2"),Ndt.forEach(t),w9o=r(Mye," \u2014 "),mq=n(Mye,"A",{href:!0});var Idt=s(mq);A9o=r(Idt,"Wav2Vec2Processor"),Idt.forEach(t),L9o=r(Mye," (Wav2Vec2 model)"),Mye.forEach(t),y9o=i(be),Lp=n(be,"LI",{});var Eye=s(Lp);Yie=n(Eye,"STRONG",{});var qdt=s(Yie);x9o=r(qdt,"wav2vec2-conformer"),qdt.forEach(t),$9o=r(Eye," \u2014 "),gq=n(Eye,"A",{href:!0});var jdt=s(gq);k9o=r(jdt,"Wav2Vec2Processor"),jdt.forEach(t),S9o=r(Eye," (Wav2Vec2-Conformer model)"),Eye.forEach(t),R9o=i(be),yp=n(be,"LI",{});var Cye=s(yp);Kie=n(Cye,"STRONG",{});var Ddt=s(Kie);P9o=r(Ddt,"wavlm"),Ddt.forEach(t),B9o=r(Cye," \u2014 "),hq=n(Cye,"A",{href:!0});var Gdt=s(hq);N9o=r(Gdt,"Wav2Vec2Processor"),Gdt.forEach(t),I9o=r(Cye," (WavLM model)"),Cye.forEach(t),be.forEach(t),q9o=i(ta),T(xp.$$.fragment,ta),j9o=i(ta),T($p.$$.fragment,ta),ta.forEach(t),D9o=i(Ys),kp=n(Ys,"DIV",{class:!0});var NXe=s(kp);T(iL.$$.fragment,NXe),G9o=i(NXe),Zie=n(NXe,"P",{});var Odt=s(Zie);O9o=r(Odt,"Register a new processor for this class."),Odt.forEach(t),NXe.forEach(t),Ys.forEach(t),kOe=i(f),Ni=n(f,"H2",{class:!0});var IXe=s(Ni);Sp=n(IXe,"A",{id:!0,class:!0,href:!0});var Vdt=s(Sp);ede=n(Vdt,"SPAN",{});var Xdt=s(ede);T(dL.$$.fragment,Xdt),Xdt.forEach(t),Vdt.forEach(t),V9o=i(IXe),ode=n(IXe,"SPAN",{});var zdt=s(ode);X9o=r(zdt,"AutoModel"),zdt.forEach(t),IXe.forEach(t),SOe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(cL.$$.fragment,Ks),z9o=i(Ks),Ii=n(Ks,"P",{});var Ioe=s(Ii);Q9o=r(Ioe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pq=n(Ioe,"A",{href:!0});var Qdt=s(pq);W9o=r(Qdt,"from_pretrained()"),Qdt.forEach(t),H9o=r(Ioe," class method or the "),_q=n(Ioe,"A",{href:!0});var Wdt=s(_q);U9o=r(Wdt,"from_config()"),Wdt.forEach(t),J9o=r(Ioe,` class
method.`),Ioe.forEach(t),Y9o=i(Ks),fL=n(Ks,"P",{});var qXe=s(fL);K9o=r(qXe,"This class cannot be instantiated directly using "),rde=n(qXe,"CODE",{});var Hdt=s(rde);Z9o=r(Hdt,"__init__()"),Hdt.forEach(t),e2o=r(qXe," (throws an error)."),qXe.forEach(t),o2o=i(Ks),nt=n(Ks,"DIV",{class:!0});var jw=s(nt);T(mL.$$.fragment,jw),r2o=i(jw),tde=n(jw,"P",{});var Udt=s(tde);t2o=r(Udt,"Instantiates one of the base model classes of the library from a configuration."),Udt.forEach(t),a2o=i(jw),qi=n(jw,"P",{});var qoe=s(qi);n2o=r(qoe,`Note:
Loading a model from its configuration file does `),ade=n(qoe,"STRONG",{});var Jdt=s(ade);s2o=r(Jdt,"not"),Jdt.forEach(t),l2o=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uq=n(qoe,"A",{href:!0});var Ydt=s(uq);i2o=r(Ydt,"from_pretrained()"),Ydt.forEach(t),d2o=r(qoe," to load the model weights."),qoe.forEach(t),c2o=i(jw),T(Rp.$$.fragment,jw),jw.forEach(t),f2o=i(Ks),Je=n(Ks,"DIV",{class:!0});var aa=s(Je);T(gL.$$.fragment,aa),m2o=i(aa),nde=n(aa,"P",{});var Kdt=s(nde);g2o=r(Kdt,"Instantiate one of the base model classes of the library from a pretrained model."),Kdt.forEach(t),h2o=i(aa),Ra=n(aa,"P",{});var Dw=s(Ra);p2o=r(Dw,"The model class to instantiate is selected based on the "),sde=n(Dw,"CODE",{});var Zdt=s(sde);_2o=r(Zdt,"model_type"),Zdt.forEach(t),u2o=r(Dw,` property of the config object (either
passed as an argument or loaded from `),lde=n(Dw,"CODE",{});var ect=s(lde);b2o=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),v2o=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ide=n(Dw,"CODE",{});var oct=s(ide);F2o=r(oct,"pretrained_model_name_or_path"),oct.forEach(t),T2o=r(Dw,":"),Dw.forEach(t),M2o=i(aa),y=n(aa,"UL",{});var x=s(y);Pp=n(x,"LI",{});var wye=s(Pp);dde=n(wye,"STRONG",{});var rct=s(dde);E2o=r(rct,"albert"),rct.forEach(t),C2o=r(wye," \u2014 "),bq=n(wye,"A",{href:!0});var tct=s(bq);w2o=r(tct,"AlbertModel"),tct.forEach(t),A2o=r(wye," (ALBERT model)"),wye.forEach(t),L2o=i(x),Bp=n(x,"LI",{});var Aye=s(Bp);cde=n(Aye,"STRONG",{});var act=s(cde);y2o=r(act,"bart"),act.forEach(t),x2o=r(Aye," \u2014 "),vq=n(Aye,"A",{href:!0});var nct=s(vq);$2o=r(nct,"BartModel"),nct.forEach(t),k2o=r(Aye," (BART model)"),Aye.forEach(t),S2o=i(x),Np=n(x,"LI",{});var Lye=s(Np);fde=n(Lye,"STRONG",{});var sct=s(fde);R2o=r(sct,"beit"),sct.forEach(t),P2o=r(Lye," \u2014 "),Fq=n(Lye,"A",{href:!0});var lct=s(Fq);B2o=r(lct,"BeitModel"),lct.forEach(t),N2o=r(Lye," (BEiT model)"),Lye.forEach(t),I2o=i(x),Ip=n(x,"LI",{});var yye=s(Ip);mde=n(yye,"STRONG",{});var ict=s(mde);q2o=r(ict,"bert"),ict.forEach(t),j2o=r(yye," \u2014 "),Tq=n(yye,"A",{href:!0});var dct=s(Tq);D2o=r(dct,"BertModel"),dct.forEach(t),G2o=r(yye," (BERT model)"),yye.forEach(t),O2o=i(x),qp=n(x,"LI",{});var xye=s(qp);gde=n(xye,"STRONG",{});var cct=s(gde);V2o=r(cct,"bert-generation"),cct.forEach(t),X2o=r(xye," \u2014 "),Mq=n(xye,"A",{href:!0});var fct=s(Mq);z2o=r(fct,"BertGenerationEncoder"),fct.forEach(t),Q2o=r(xye," (Bert Generation model)"),xye.forEach(t),W2o=i(x),jp=n(x,"LI",{});var $ye=s(jp);hde=n($ye,"STRONG",{});var mct=s(hde);H2o=r(mct,"big_bird"),mct.forEach(t),U2o=r($ye," \u2014 "),Eq=n($ye,"A",{href:!0});var gct=s(Eq);J2o=r(gct,"BigBirdModel"),gct.forEach(t),Y2o=r($ye," (BigBird model)"),$ye.forEach(t),K2o=i(x),Dp=n(x,"LI",{});var kye=s(Dp);pde=n(kye,"STRONG",{});var hct=s(pde);Z2o=r(hct,"bigbird_pegasus"),hct.forEach(t),ebo=r(kye," \u2014 "),Cq=n(kye,"A",{href:!0});var pct=s(Cq);obo=r(pct,"BigBirdPegasusModel"),pct.forEach(t),rbo=r(kye," (BigBird-Pegasus model)"),kye.forEach(t),tbo=i(x),Gp=n(x,"LI",{});var Sye=s(Gp);_de=n(Sye,"STRONG",{});var _ct=s(_de);abo=r(_ct,"blenderbot"),_ct.forEach(t),nbo=r(Sye," \u2014 "),wq=n(Sye,"A",{href:!0});var uct=s(wq);sbo=r(uct,"BlenderbotModel"),uct.forEach(t),lbo=r(Sye," (Blenderbot model)"),Sye.forEach(t),ibo=i(x),Op=n(x,"LI",{});var Rye=s(Op);ude=n(Rye,"STRONG",{});var bct=s(ude);dbo=r(bct,"blenderbot-small"),bct.forEach(t),cbo=r(Rye," \u2014 "),Aq=n(Rye,"A",{href:!0});var vct=s(Aq);fbo=r(vct,"BlenderbotSmallModel"),vct.forEach(t),mbo=r(Rye," (BlenderbotSmall model)"),Rye.forEach(t),gbo=i(x),Vp=n(x,"LI",{});var Pye=s(Vp);bde=n(Pye,"STRONG",{});var Fct=s(bde);hbo=r(Fct,"bloom"),Fct.forEach(t),pbo=r(Pye," \u2014 "),Lq=n(Pye,"A",{href:!0});var Tct=s(Lq);_bo=r(Tct,"BloomModel"),Tct.forEach(t),ubo=r(Pye," (BLOOM model)"),Pye.forEach(t),bbo=i(x),Xp=n(x,"LI",{});var Bye=s(Xp);vde=n(Bye,"STRONG",{});var Mct=s(vde);vbo=r(Mct,"camembert"),Mct.forEach(t),Fbo=r(Bye," \u2014 "),yq=n(Bye,"A",{href:!0});var Ect=s(yq);Tbo=r(Ect,"CamembertModel"),Ect.forEach(t),Mbo=r(Bye," (CamemBERT model)"),Bye.forEach(t),Ebo=i(x),zp=n(x,"LI",{});var Nye=s(zp);Fde=n(Nye,"STRONG",{});var Cct=s(Fde);Cbo=r(Cct,"canine"),Cct.forEach(t),wbo=r(Nye," \u2014 "),xq=n(Nye,"A",{href:!0});var wct=s(xq);Abo=r(wct,"CanineModel"),wct.forEach(t),Lbo=r(Nye," (CANINE model)"),Nye.forEach(t),ybo=i(x),Qp=n(x,"LI",{});var Iye=s(Qp);Tde=n(Iye,"STRONG",{});var Act=s(Tde);xbo=r(Act,"clip"),Act.forEach(t),$bo=r(Iye," \u2014 "),$q=n(Iye,"A",{href:!0});var Lct=s($q);kbo=r(Lct,"CLIPModel"),Lct.forEach(t),Sbo=r(Iye," (CLIP model)"),Iye.forEach(t),Rbo=i(x),Wp=n(x,"LI",{});var qye=s(Wp);Mde=n(qye,"STRONG",{});var yct=s(Mde);Pbo=r(yct,"codegen"),yct.forEach(t),Bbo=r(qye," \u2014 "),kq=n(qye,"A",{href:!0});var xct=s(kq);Nbo=r(xct,"CodeGenModel"),xct.forEach(t),Ibo=r(qye," (CodeGen model)"),qye.forEach(t),qbo=i(x),Hp=n(x,"LI",{});var jye=s(Hp);Ede=n(jye,"STRONG",{});var $ct=s(Ede);jbo=r($ct,"convbert"),$ct.forEach(t),Dbo=r(jye," \u2014 "),Sq=n(jye,"A",{href:!0});var kct=s(Sq);Gbo=r(kct,"ConvBertModel"),kct.forEach(t),Obo=r(jye," (ConvBERT model)"),jye.forEach(t),Vbo=i(x),Up=n(x,"LI",{});var Dye=s(Up);Cde=n(Dye,"STRONG",{});var Sct=s(Cde);Xbo=r(Sct,"convnext"),Sct.forEach(t),zbo=r(Dye," \u2014 "),Rq=n(Dye,"A",{href:!0});var Rct=s(Rq);Qbo=r(Rct,"ConvNextModel"),Rct.forEach(t),Wbo=r(Dye," (ConvNeXT model)"),Dye.forEach(t),Hbo=i(x),Jp=n(x,"LI",{});var Gye=s(Jp);wde=n(Gye,"STRONG",{});var Pct=s(wde);Ubo=r(Pct,"ctrl"),Pct.forEach(t),Jbo=r(Gye," \u2014 "),Pq=n(Gye,"A",{href:!0});var Bct=s(Pq);Ybo=r(Bct,"CTRLModel"),Bct.forEach(t),Kbo=r(Gye," (CTRL model)"),Gye.forEach(t),Zbo=i(x),Yp=n(x,"LI",{});var Oye=s(Yp);Ade=n(Oye,"STRONG",{});var Nct=s(Ade);evo=r(Nct,"cvt"),Nct.forEach(t),ovo=r(Oye," \u2014 "),Bq=n(Oye,"A",{href:!0});var Ict=s(Bq);rvo=r(Ict,"CvtModel"),Ict.forEach(t),tvo=r(Oye," (CvT model)"),Oye.forEach(t),avo=i(x),Kp=n(x,"LI",{});var Vye=s(Kp);Lde=n(Vye,"STRONG",{});var qct=s(Lde);nvo=r(qct,"data2vec-audio"),qct.forEach(t),svo=r(Vye," \u2014 "),Nq=n(Vye,"A",{href:!0});var jct=s(Nq);lvo=r(jct,"Data2VecAudioModel"),jct.forEach(t),ivo=r(Vye," (Data2VecAudio model)"),Vye.forEach(t),dvo=i(x),Zp=n(x,"LI",{});var Xye=s(Zp);yde=n(Xye,"STRONG",{});var Dct=s(yde);cvo=r(Dct,"data2vec-text"),Dct.forEach(t),fvo=r(Xye," \u2014 "),Iq=n(Xye,"A",{href:!0});var Gct=s(Iq);mvo=r(Gct,"Data2VecTextModel"),Gct.forEach(t),gvo=r(Xye," (Data2VecText model)"),Xye.forEach(t),hvo=i(x),e_=n(x,"LI",{});var zye=s(e_);xde=n(zye,"STRONG",{});var Oct=s(xde);pvo=r(Oct,"data2vec-vision"),Oct.forEach(t),_vo=r(zye," \u2014 "),qq=n(zye,"A",{href:!0});var Vct=s(qq);uvo=r(Vct,"Data2VecVisionModel"),Vct.forEach(t),bvo=r(zye," (Data2VecVision model)"),zye.forEach(t),vvo=i(x),o_=n(x,"LI",{});var Qye=s(o_);$de=n(Qye,"STRONG",{});var Xct=s($de);Fvo=r(Xct,"deberta"),Xct.forEach(t),Tvo=r(Qye," \u2014 "),jq=n(Qye,"A",{href:!0});var zct=s(jq);Mvo=r(zct,"DebertaModel"),zct.forEach(t),Evo=r(Qye," (DeBERTa model)"),Qye.forEach(t),Cvo=i(x),r_=n(x,"LI",{});var Wye=s(r_);kde=n(Wye,"STRONG",{});var Qct=s(kde);wvo=r(Qct,"deberta-v2"),Qct.forEach(t),Avo=r(Wye," \u2014 "),Dq=n(Wye,"A",{href:!0});var Wct=s(Dq);Lvo=r(Wct,"DebertaV2Model"),Wct.forEach(t),yvo=r(Wye," (DeBERTa-v2 model)"),Wye.forEach(t),xvo=i(x),t_=n(x,"LI",{});var Hye=s(t_);Sde=n(Hye,"STRONG",{});var Hct=s(Sde);$vo=r(Hct,"decision_transformer"),Hct.forEach(t),kvo=r(Hye," \u2014 "),Gq=n(Hye,"A",{href:!0});var Uct=s(Gq);Svo=r(Uct,"DecisionTransformerModel"),Uct.forEach(t),Rvo=r(Hye," (Decision Transformer model)"),Hye.forEach(t),Pvo=i(x),a_=n(x,"LI",{});var Uye=s(a_);Rde=n(Uye,"STRONG",{});var Jct=s(Rde);Bvo=r(Jct,"deit"),Jct.forEach(t),Nvo=r(Uye," \u2014 "),Oq=n(Uye,"A",{href:!0});var Yct=s(Oq);Ivo=r(Yct,"DeiTModel"),Yct.forEach(t),qvo=r(Uye," (DeiT model)"),Uye.forEach(t),jvo=i(x),n_=n(x,"LI",{});var Jye=s(n_);Pde=n(Jye,"STRONG",{});var Kct=s(Pde);Dvo=r(Kct,"detr"),Kct.forEach(t),Gvo=r(Jye," \u2014 "),Vq=n(Jye,"A",{href:!0});var Zct=s(Vq);Ovo=r(Zct,"DetrModel"),Zct.forEach(t),Vvo=r(Jye," (DETR model)"),Jye.forEach(t),Xvo=i(x),s_=n(x,"LI",{});var Yye=s(s_);Bde=n(Yye,"STRONG",{});var eft=s(Bde);zvo=r(eft,"distilbert"),eft.forEach(t),Qvo=r(Yye," \u2014 "),Xq=n(Yye,"A",{href:!0});var oft=s(Xq);Wvo=r(oft,"DistilBertModel"),oft.forEach(t),Hvo=r(Yye," (DistilBERT model)"),Yye.forEach(t),Uvo=i(x),l_=n(x,"LI",{});var Kye=s(l_);Nde=n(Kye,"STRONG",{});var rft=s(Nde);Jvo=r(rft,"dpr"),rft.forEach(t),Yvo=r(Kye," \u2014 "),zq=n(Kye,"A",{href:!0});var tft=s(zq);Kvo=r(tft,"DPRQuestionEncoder"),tft.forEach(t),Zvo=r(Kye," (DPR model)"),Kye.forEach(t),eFo=i(x),i_=n(x,"LI",{});var Zye=s(i_);Ide=n(Zye,"STRONG",{});var aft=s(Ide);oFo=r(aft,"dpt"),aft.forEach(t),rFo=r(Zye," \u2014 "),Qq=n(Zye,"A",{href:!0});var nft=s(Qq);tFo=r(nft,"DPTModel"),nft.forEach(t),aFo=r(Zye," (DPT model)"),Zye.forEach(t),nFo=i(x),d_=n(x,"LI",{});var e8e=s(d_);qde=n(e8e,"STRONG",{});var sft=s(qde);sFo=r(sft,"electra"),sft.forEach(t),lFo=r(e8e," \u2014 "),Wq=n(e8e,"A",{href:!0});var lft=s(Wq);iFo=r(lft,"ElectraModel"),lft.forEach(t),dFo=r(e8e," (ELECTRA model)"),e8e.forEach(t),cFo=i(x),c_=n(x,"LI",{});var o8e=s(c_);jde=n(o8e,"STRONG",{});var ift=s(jde);fFo=r(ift,"flaubert"),ift.forEach(t),mFo=r(o8e," \u2014 "),Hq=n(o8e,"A",{href:!0});var dft=s(Hq);gFo=r(dft,"FlaubertModel"),dft.forEach(t),hFo=r(o8e," (FlauBERT model)"),o8e.forEach(t),pFo=i(x),f_=n(x,"LI",{});var r8e=s(f_);Dde=n(r8e,"STRONG",{});var cft=s(Dde);_Fo=r(cft,"flava"),cft.forEach(t),uFo=r(r8e," \u2014 "),Uq=n(r8e,"A",{href:!0});var fft=s(Uq);bFo=r(fft,"FlavaModel"),fft.forEach(t),vFo=r(r8e," (FLAVA model)"),r8e.forEach(t),FFo=i(x),m_=n(x,"LI",{});var t8e=s(m_);Gde=n(t8e,"STRONG",{});var mft=s(Gde);TFo=r(mft,"fnet"),mft.forEach(t),MFo=r(t8e," \u2014 "),Jq=n(t8e,"A",{href:!0});var gft=s(Jq);EFo=r(gft,"FNetModel"),gft.forEach(t),CFo=r(t8e," (FNet model)"),t8e.forEach(t),wFo=i(x),g_=n(x,"LI",{});var a8e=s(g_);Ode=n(a8e,"STRONG",{});var hft=s(Ode);AFo=r(hft,"fsmt"),hft.forEach(t),LFo=r(a8e," \u2014 "),Yq=n(a8e,"A",{href:!0});var pft=s(Yq);yFo=r(pft,"FSMTModel"),pft.forEach(t),xFo=r(a8e," (FairSeq Machine-Translation model)"),a8e.forEach(t),$Fo=i(x),Xs=n(x,"LI",{});var lS=s(Xs);Vde=n(lS,"STRONG",{});var _ft=s(Vde);kFo=r(_ft,"funnel"),_ft.forEach(t),SFo=r(lS," \u2014 "),Kq=n(lS,"A",{href:!0});var uft=s(Kq);RFo=r(uft,"FunnelModel"),uft.forEach(t),PFo=r(lS," or "),Zq=n(lS,"A",{href:!0});var bft=s(Zq);BFo=r(bft,"FunnelBaseModel"),bft.forEach(t),NFo=r(lS," (Funnel Transformer model)"),lS.forEach(t),IFo=i(x),h_=n(x,"LI",{});var n8e=s(h_);Xde=n(n8e,"STRONG",{});var vft=s(Xde);qFo=r(vft,"glpn"),vft.forEach(t),jFo=r(n8e," \u2014 "),ej=n(n8e,"A",{href:!0});var Fft=s(ej);DFo=r(Fft,"GLPNModel"),Fft.forEach(t),GFo=r(n8e," (GLPN model)"),n8e.forEach(t),OFo=i(x),p_=n(x,"LI",{});var s8e=s(p_);zde=n(s8e,"STRONG",{});var Tft=s(zde);VFo=r(Tft,"gpt2"),Tft.forEach(t),XFo=r(s8e," \u2014 "),oj=n(s8e,"A",{href:!0});var Mft=s(oj);zFo=r(Mft,"GPT2Model"),Mft.forEach(t),QFo=r(s8e," (OpenAI GPT-2 model)"),s8e.forEach(t),WFo=i(x),__=n(x,"LI",{});var l8e=s(__);Qde=n(l8e,"STRONG",{});var Eft=s(Qde);HFo=r(Eft,"gpt_neo"),Eft.forEach(t),UFo=r(l8e," \u2014 "),rj=n(l8e,"A",{href:!0});var Cft=s(rj);JFo=r(Cft,"GPTNeoModel"),Cft.forEach(t),YFo=r(l8e," (GPT Neo model)"),l8e.forEach(t),KFo=i(x),u_=n(x,"LI",{});var i8e=s(u_);Wde=n(i8e,"STRONG",{});var wft=s(Wde);ZFo=r(wft,"gpt_neox"),wft.forEach(t),eTo=r(i8e," \u2014 "),tj=n(i8e,"A",{href:!0});var Aft=s(tj);oTo=r(Aft,"GPTNeoXModel"),Aft.forEach(t),rTo=r(i8e," (GPT NeoX model)"),i8e.forEach(t),tTo=i(x),b_=n(x,"LI",{});var d8e=s(b_);Hde=n(d8e,"STRONG",{});var Lft=s(Hde);aTo=r(Lft,"gptj"),Lft.forEach(t),nTo=r(d8e," \u2014 "),aj=n(d8e,"A",{href:!0});var yft=s(aj);sTo=r(yft,"GPTJModel"),yft.forEach(t),lTo=r(d8e," (GPT-J model)"),d8e.forEach(t),iTo=i(x),v_=n(x,"LI",{});var c8e=s(v_);Ude=n(c8e,"STRONG",{});var xft=s(Ude);dTo=r(xft,"hubert"),xft.forEach(t),cTo=r(c8e," \u2014 "),nj=n(c8e,"A",{href:!0});var $ft=s(nj);fTo=r($ft,"HubertModel"),$ft.forEach(t),mTo=r(c8e," (Hubert model)"),c8e.forEach(t),gTo=i(x),F_=n(x,"LI",{});var f8e=s(F_);Jde=n(f8e,"STRONG",{});var kft=s(Jde);hTo=r(kft,"ibert"),kft.forEach(t),pTo=r(f8e," \u2014 "),sj=n(f8e,"A",{href:!0});var Sft=s(sj);_To=r(Sft,"IBertModel"),Sft.forEach(t),uTo=r(f8e," (I-BERT model)"),f8e.forEach(t),bTo=i(x),T_=n(x,"LI",{});var m8e=s(T_);Yde=n(m8e,"STRONG",{});var Rft=s(Yde);vTo=r(Rft,"imagegpt"),Rft.forEach(t),FTo=r(m8e," \u2014 "),lj=n(m8e,"A",{href:!0});var Pft=s(lj);TTo=r(Pft,"ImageGPTModel"),Pft.forEach(t),MTo=r(m8e," (ImageGPT model)"),m8e.forEach(t),ETo=i(x),M_=n(x,"LI",{});var g8e=s(M_);Kde=n(g8e,"STRONG",{});var Bft=s(Kde);CTo=r(Bft,"layoutlm"),Bft.forEach(t),wTo=r(g8e," \u2014 "),ij=n(g8e,"A",{href:!0});var Nft=s(ij);ATo=r(Nft,"LayoutLMModel"),Nft.forEach(t),LTo=r(g8e," (LayoutLM model)"),g8e.forEach(t),yTo=i(x),E_=n(x,"LI",{});var h8e=s(E_);Zde=n(h8e,"STRONG",{});var Ift=s(Zde);xTo=r(Ift,"layoutlmv2"),Ift.forEach(t),$To=r(h8e," \u2014 "),dj=n(h8e,"A",{href:!0});var qft=s(dj);kTo=r(qft,"LayoutLMv2Model"),qft.forEach(t),STo=r(h8e," (LayoutLMv2 model)"),h8e.forEach(t),RTo=i(x),C_=n(x,"LI",{});var p8e=s(C_);ece=n(p8e,"STRONG",{});var jft=s(ece);PTo=r(jft,"layoutlmv3"),jft.forEach(t),BTo=r(p8e," \u2014 "),cj=n(p8e,"A",{href:!0});var Dft=s(cj);NTo=r(Dft,"LayoutLMv3Model"),Dft.forEach(t),ITo=r(p8e," (LayoutLMv3 model)"),p8e.forEach(t),qTo=i(x),w_=n(x,"LI",{});var _8e=s(w_);oce=n(_8e,"STRONG",{});var Gft=s(oce);jTo=r(Gft,"led"),Gft.forEach(t),DTo=r(_8e," \u2014 "),fj=n(_8e,"A",{href:!0});var Oft=s(fj);GTo=r(Oft,"LEDModel"),Oft.forEach(t),OTo=r(_8e," (LED model)"),_8e.forEach(t),VTo=i(x),A_=n(x,"LI",{});var u8e=s(A_);rce=n(u8e,"STRONG",{});var Vft=s(rce);XTo=r(Vft,"levit"),Vft.forEach(t),zTo=r(u8e," \u2014 "),mj=n(u8e,"A",{href:!0});var Xft=s(mj);QTo=r(Xft,"LevitModel"),Xft.forEach(t),WTo=r(u8e," (LeViT model)"),u8e.forEach(t),HTo=i(x),L_=n(x,"LI",{});var b8e=s(L_);tce=n(b8e,"STRONG",{});var zft=s(tce);UTo=r(zft,"longformer"),zft.forEach(t),JTo=r(b8e," \u2014 "),gj=n(b8e,"A",{href:!0});var Qft=s(gj);YTo=r(Qft,"LongformerModel"),Qft.forEach(t),KTo=r(b8e," (Longformer model)"),b8e.forEach(t),ZTo=i(x),y_=n(x,"LI",{});var v8e=s(y_);ace=n(v8e,"STRONG",{});var Wft=s(ace);eMo=r(Wft,"longt5"),Wft.forEach(t),oMo=r(v8e," \u2014 "),hj=n(v8e,"A",{href:!0});var Hft=s(hj);rMo=r(Hft,"LongT5Model"),Hft.forEach(t),tMo=r(v8e," (LongT5 model)"),v8e.forEach(t),aMo=i(x),x_=n(x,"LI",{});var F8e=s(x_);nce=n(F8e,"STRONG",{});var Uft=s(nce);nMo=r(Uft,"luke"),Uft.forEach(t),sMo=r(F8e," \u2014 "),pj=n(F8e,"A",{href:!0});var Jft=s(pj);lMo=r(Jft,"LukeModel"),Jft.forEach(t),iMo=r(F8e," (LUKE model)"),F8e.forEach(t),dMo=i(x),$_=n(x,"LI",{});var T8e=s($_);sce=n(T8e,"STRONG",{});var Yft=s(sce);cMo=r(Yft,"lxmert"),Yft.forEach(t),fMo=r(T8e," \u2014 "),_j=n(T8e,"A",{href:!0});var Kft=s(_j);mMo=r(Kft,"LxmertModel"),Kft.forEach(t),gMo=r(T8e," (LXMERT model)"),T8e.forEach(t),hMo=i(x),k_=n(x,"LI",{});var M8e=s(k_);lce=n(M8e,"STRONG",{});var Zft=s(lce);pMo=r(Zft,"m2m_100"),Zft.forEach(t),_Mo=r(M8e," \u2014 "),uj=n(M8e,"A",{href:!0});var emt=s(uj);uMo=r(emt,"M2M100Model"),emt.forEach(t),bMo=r(M8e," (M2M100 model)"),M8e.forEach(t),vMo=i(x),S_=n(x,"LI",{});var E8e=s(S_);ice=n(E8e,"STRONG",{});var omt=s(ice);FMo=r(omt,"marian"),omt.forEach(t),TMo=r(E8e," \u2014 "),bj=n(E8e,"A",{href:!0});var rmt=s(bj);MMo=r(rmt,"MarianModel"),rmt.forEach(t),EMo=r(E8e," (Marian model)"),E8e.forEach(t),CMo=i(x),R_=n(x,"LI",{});var C8e=s(R_);dce=n(C8e,"STRONG",{});var tmt=s(dce);wMo=r(tmt,"maskformer"),tmt.forEach(t),AMo=r(C8e," \u2014 "),vj=n(C8e,"A",{href:!0});var amt=s(vj);LMo=r(amt,"MaskFormerModel"),amt.forEach(t),yMo=r(C8e," (MaskFormer model)"),C8e.forEach(t),xMo=i(x),P_=n(x,"LI",{});var w8e=s(P_);cce=n(w8e,"STRONG",{});var nmt=s(cce);$Mo=r(nmt,"mbart"),nmt.forEach(t),kMo=r(w8e," \u2014 "),Fj=n(w8e,"A",{href:!0});var smt=s(Fj);SMo=r(smt,"MBartModel"),smt.forEach(t),RMo=r(w8e," (mBART model)"),w8e.forEach(t),PMo=i(x),B_=n(x,"LI",{});var A8e=s(B_);fce=n(A8e,"STRONG",{});var lmt=s(fce);BMo=r(lmt,"mctct"),lmt.forEach(t),NMo=r(A8e," \u2014 "),Tj=n(A8e,"A",{href:!0});var imt=s(Tj);IMo=r(imt,"MCTCTModel"),imt.forEach(t),qMo=r(A8e," (M-CTC-T model)"),A8e.forEach(t),jMo=i(x),N_=n(x,"LI",{});var L8e=s(N_);mce=n(L8e,"STRONG",{});var dmt=s(mce);DMo=r(dmt,"megatron-bert"),dmt.forEach(t),GMo=r(L8e," \u2014 "),Mj=n(L8e,"A",{href:!0});var cmt=s(Mj);OMo=r(cmt,"MegatronBertModel"),cmt.forEach(t),VMo=r(L8e," (Megatron-BERT model)"),L8e.forEach(t),XMo=i(x),I_=n(x,"LI",{});var y8e=s(I_);gce=n(y8e,"STRONG",{});var fmt=s(gce);zMo=r(fmt,"mobilebert"),fmt.forEach(t),QMo=r(y8e," \u2014 "),Ej=n(y8e,"A",{href:!0});var mmt=s(Ej);WMo=r(mmt,"MobileBertModel"),mmt.forEach(t),HMo=r(y8e," (MobileBERT model)"),y8e.forEach(t),UMo=i(x),q_=n(x,"LI",{});var x8e=s(q_);hce=n(x8e,"STRONG",{});var gmt=s(hce);JMo=r(gmt,"mobilenet_v1"),gmt.forEach(t),YMo=r(x8e," \u2014 "),Cj=n(x8e,"A",{href:!0});var hmt=s(Cj);KMo=r(hmt,"MobileNetV1Model"),hmt.forEach(t),ZMo=r(x8e," (MobileNetV1 model)"),x8e.forEach(t),eEo=i(x),j_=n(x,"LI",{});var $8e=s(j_);pce=n($8e,"STRONG",{});var pmt=s(pce);oEo=r(pmt,"mpnet"),pmt.forEach(t),rEo=r($8e," \u2014 "),wj=n($8e,"A",{href:!0});var _mt=s(wj);tEo=r(_mt,"MPNetModel"),_mt.forEach(t),aEo=r($8e," (MPNet model)"),$8e.forEach(t),nEo=i(x),D_=n(x,"LI",{});var k8e=s(D_);_ce=n(k8e,"STRONG",{});var umt=s(_ce);sEo=r(umt,"mt5"),umt.forEach(t),lEo=r(k8e," \u2014 "),Aj=n(k8e,"A",{href:!0});var bmt=s(Aj);iEo=r(bmt,"MT5Model"),bmt.forEach(t),dEo=r(k8e," (MT5 model)"),k8e.forEach(t),cEo=i(x),G_=n(x,"LI",{});var S8e=s(G_);uce=n(S8e,"STRONG",{});var vmt=s(uce);fEo=r(vmt,"nezha"),vmt.forEach(t),mEo=r(S8e," \u2014 "),Lj=n(S8e,"A",{href:!0});var Fmt=s(Lj);gEo=r(Fmt,"NezhaModel"),Fmt.forEach(t),hEo=r(S8e," (Nezha model)"),S8e.forEach(t),pEo=i(x),O_=n(x,"LI",{});var R8e=s(O_);bce=n(R8e,"STRONG",{});var Tmt=s(bce);_Eo=r(Tmt,"nystromformer"),Tmt.forEach(t),uEo=r(R8e," \u2014 "),yj=n(R8e,"A",{href:!0});var Mmt=s(yj);bEo=r(Mmt,"NystromformerModel"),Mmt.forEach(t),vEo=r(R8e," (Nystr\xF6mformer model)"),R8e.forEach(t),FEo=i(x),V_=n(x,"LI",{});var P8e=s(V_);vce=n(P8e,"STRONG",{});var Emt=s(vce);TEo=r(Emt,"openai-gpt"),Emt.forEach(t),MEo=r(P8e," \u2014 "),xj=n(P8e,"A",{href:!0});var Cmt=s(xj);EEo=r(Cmt,"OpenAIGPTModel"),Cmt.forEach(t),CEo=r(P8e," (OpenAI GPT model)"),P8e.forEach(t),wEo=i(x),X_=n(x,"LI",{});var B8e=s(X_);Fce=n(B8e,"STRONG",{});var wmt=s(Fce);AEo=r(wmt,"opt"),wmt.forEach(t),LEo=r(B8e," \u2014 "),$j=n(B8e,"A",{href:!0});var Amt=s($j);yEo=r(Amt,"OPTModel"),Amt.forEach(t),xEo=r(B8e," (OPT model)"),B8e.forEach(t),$Eo=i(x),z_=n(x,"LI",{});var N8e=s(z_);Tce=n(N8e,"STRONG",{});var Lmt=s(Tce);kEo=r(Lmt,"pegasus"),Lmt.forEach(t),SEo=r(N8e," \u2014 "),kj=n(N8e,"A",{href:!0});var ymt=s(kj);REo=r(ymt,"PegasusModel"),ymt.forEach(t),PEo=r(N8e," (Pegasus model)"),N8e.forEach(t),BEo=i(x),Q_=n(x,"LI",{});var I8e=s(Q_);Mce=n(I8e,"STRONG",{});var xmt=s(Mce);NEo=r(xmt,"perceiver"),xmt.forEach(t),IEo=r(I8e," \u2014 "),Sj=n(I8e,"A",{href:!0});var $mt=s(Sj);qEo=r($mt,"PerceiverModel"),$mt.forEach(t),jEo=r(I8e," (Perceiver model)"),I8e.forEach(t),DEo=i(x),W_=n(x,"LI",{});var q8e=s(W_);Ece=n(q8e,"STRONG",{});var kmt=s(Ece);GEo=r(kmt,"plbart"),kmt.forEach(t),OEo=r(q8e," \u2014 "),Rj=n(q8e,"A",{href:!0});var Smt=s(Rj);VEo=r(Smt,"PLBartModel"),Smt.forEach(t),XEo=r(q8e," (PLBart model)"),q8e.forEach(t),zEo=i(x),H_=n(x,"LI",{});var j8e=s(H_);Cce=n(j8e,"STRONG",{});var Rmt=s(Cce);QEo=r(Rmt,"poolformer"),Rmt.forEach(t),WEo=r(j8e," \u2014 "),Pj=n(j8e,"A",{href:!0});var Pmt=s(Pj);HEo=r(Pmt,"PoolFormerModel"),Pmt.forEach(t),UEo=r(j8e," (PoolFormer model)"),j8e.forEach(t),JEo=i(x),U_=n(x,"LI",{});var D8e=s(U_);wce=n(D8e,"STRONG",{});var Bmt=s(wce);YEo=r(Bmt,"prophetnet"),Bmt.forEach(t),KEo=r(D8e," \u2014 "),Bj=n(D8e,"A",{href:!0});var Nmt=s(Bj);ZEo=r(Nmt,"ProphetNetModel"),Nmt.forEach(t),e4o=r(D8e," (ProphetNet model)"),D8e.forEach(t),o4o=i(x),J_=n(x,"LI",{});var G8e=s(J_);Ace=n(G8e,"STRONG",{});var Imt=s(Ace);r4o=r(Imt,"qdqbert"),Imt.forEach(t),t4o=r(G8e," \u2014 "),Nj=n(G8e,"A",{href:!0});var qmt=s(Nj);a4o=r(qmt,"QDQBertModel"),qmt.forEach(t),n4o=r(G8e," (QDQBert model)"),G8e.forEach(t),s4o=i(x),Y_=n(x,"LI",{});var O8e=s(Y_);Lce=n(O8e,"STRONG",{});var jmt=s(Lce);l4o=r(jmt,"reformer"),jmt.forEach(t),i4o=r(O8e," \u2014 "),Ij=n(O8e,"A",{href:!0});var Dmt=s(Ij);d4o=r(Dmt,"ReformerModel"),Dmt.forEach(t),c4o=r(O8e," (Reformer model)"),O8e.forEach(t),f4o=i(x),K_=n(x,"LI",{});var V8e=s(K_);yce=n(V8e,"STRONG",{});var Gmt=s(yce);m4o=r(Gmt,"regnet"),Gmt.forEach(t),g4o=r(V8e," \u2014 "),qj=n(V8e,"A",{href:!0});var Omt=s(qj);h4o=r(Omt,"RegNetModel"),Omt.forEach(t),p4o=r(V8e," (RegNet model)"),V8e.forEach(t),_4o=i(x),Z_=n(x,"LI",{});var X8e=s(Z_);xce=n(X8e,"STRONG",{});var Vmt=s(xce);u4o=r(Vmt,"rembert"),Vmt.forEach(t),b4o=r(X8e," \u2014 "),jj=n(X8e,"A",{href:!0});var Xmt=s(jj);v4o=r(Xmt,"RemBertModel"),Xmt.forEach(t),F4o=r(X8e," (RemBERT model)"),X8e.forEach(t),T4o=i(x),eu=n(x,"LI",{});var z8e=s(eu);$ce=n(z8e,"STRONG",{});var zmt=s($ce);M4o=r(zmt,"resnet"),zmt.forEach(t),E4o=r(z8e," \u2014 "),Dj=n(z8e,"A",{href:!0});var Qmt=s(Dj);C4o=r(Qmt,"ResNetModel"),Qmt.forEach(t),w4o=r(z8e," (ResNet model)"),z8e.forEach(t),A4o=i(x),ou=n(x,"LI",{});var Q8e=s(ou);kce=n(Q8e,"STRONG",{});var Wmt=s(kce);L4o=r(Wmt,"retribert"),Wmt.forEach(t),y4o=r(Q8e," \u2014 "),Gj=n(Q8e,"A",{href:!0});var Hmt=s(Gj);x4o=r(Hmt,"RetriBertModel"),Hmt.forEach(t),$4o=r(Q8e," (RetriBERT model)"),Q8e.forEach(t),k4o=i(x),ru=n(x,"LI",{});var W8e=s(ru);Sce=n(W8e,"STRONG",{});var Umt=s(Sce);S4o=r(Umt,"roberta"),Umt.forEach(t),R4o=r(W8e," \u2014 "),Oj=n(W8e,"A",{href:!0});var Jmt=s(Oj);P4o=r(Jmt,"RobertaModel"),Jmt.forEach(t),B4o=r(W8e," (RoBERTa model)"),W8e.forEach(t),N4o=i(x),tu=n(x,"LI",{});var H8e=s(tu);Rce=n(H8e,"STRONG",{});var Ymt=s(Rce);I4o=r(Ymt,"roformer"),Ymt.forEach(t),q4o=r(H8e," \u2014 "),Vj=n(H8e,"A",{href:!0});var Kmt=s(Vj);j4o=r(Kmt,"RoFormerModel"),Kmt.forEach(t),D4o=r(H8e," (RoFormer model)"),H8e.forEach(t),G4o=i(x),au=n(x,"LI",{});var U8e=s(au);Pce=n(U8e,"STRONG",{});var Zmt=s(Pce);O4o=r(Zmt,"segformer"),Zmt.forEach(t),V4o=r(U8e," \u2014 "),Xj=n(U8e,"A",{href:!0});var egt=s(Xj);X4o=r(egt,"SegformerModel"),egt.forEach(t),z4o=r(U8e," (SegFormer model)"),U8e.forEach(t),Q4o=i(x),nu=n(x,"LI",{});var J8e=s(nu);Bce=n(J8e,"STRONG",{});var ogt=s(Bce);W4o=r(ogt,"sew"),ogt.forEach(t),H4o=r(J8e," \u2014 "),zj=n(J8e,"A",{href:!0});var rgt=s(zj);U4o=r(rgt,"SEWModel"),rgt.forEach(t),J4o=r(J8e," (SEW model)"),J8e.forEach(t),Y4o=i(x),su=n(x,"LI",{});var Y8e=s(su);Nce=n(Y8e,"STRONG",{});var tgt=s(Nce);K4o=r(tgt,"sew-d"),tgt.forEach(t),Z4o=r(Y8e," \u2014 "),Qj=n(Y8e,"A",{href:!0});var agt=s(Qj);eCo=r(agt,"SEWDModel"),agt.forEach(t),oCo=r(Y8e," (SEW-D model)"),Y8e.forEach(t),rCo=i(x),lu=n(x,"LI",{});var K8e=s(lu);Ice=n(K8e,"STRONG",{});var ngt=s(Ice);tCo=r(ngt,"speech_to_text"),ngt.forEach(t),aCo=r(K8e," \u2014 "),Wj=n(K8e,"A",{href:!0});var sgt=s(Wj);nCo=r(sgt,"Speech2TextModel"),sgt.forEach(t),sCo=r(K8e," (Speech2Text model)"),K8e.forEach(t),lCo=i(x),iu=n(x,"LI",{});var Z8e=s(iu);qce=n(Z8e,"STRONG",{});var lgt=s(qce);iCo=r(lgt,"splinter"),lgt.forEach(t),dCo=r(Z8e," \u2014 "),Hj=n(Z8e,"A",{href:!0});var igt=s(Hj);cCo=r(igt,"SplinterModel"),igt.forEach(t),fCo=r(Z8e," (Splinter model)"),Z8e.forEach(t),mCo=i(x),du=n(x,"LI",{});var exe=s(du);jce=n(exe,"STRONG",{});var dgt=s(jce);gCo=r(dgt,"squeezebert"),dgt.forEach(t),hCo=r(exe," \u2014 "),Uj=n(exe,"A",{href:!0});var cgt=s(Uj);pCo=r(cgt,"SqueezeBertModel"),cgt.forEach(t),_Co=r(exe," (SqueezeBERT model)"),exe.forEach(t),uCo=i(x),cu=n(x,"LI",{});var oxe=s(cu);Dce=n(oxe,"STRONG",{});var fgt=s(Dce);bCo=r(fgt,"swin"),fgt.forEach(t),vCo=r(oxe," \u2014 "),Jj=n(oxe,"A",{href:!0});var mgt=s(Jj);FCo=r(mgt,"SwinModel"),mgt.forEach(t),TCo=r(oxe," (Swin Transformer model)"),oxe.forEach(t),MCo=i(x),fu=n(x,"LI",{});var rxe=s(fu);Gce=n(rxe,"STRONG",{});var ggt=s(Gce);ECo=r(ggt,"t5"),ggt.forEach(t),CCo=r(rxe," \u2014 "),Yj=n(rxe,"A",{href:!0});var hgt=s(Yj);wCo=r(hgt,"T5Model"),hgt.forEach(t),ACo=r(rxe," (T5 model)"),rxe.forEach(t),LCo=i(x),mu=n(x,"LI",{});var txe=s(mu);Oce=n(txe,"STRONG",{});var pgt=s(Oce);yCo=r(pgt,"tapas"),pgt.forEach(t),xCo=r(txe," \u2014 "),Kj=n(txe,"A",{href:!0});var _gt=s(Kj);$Co=r(_gt,"TapasModel"),_gt.forEach(t),kCo=r(txe," (TAPAS model)"),txe.forEach(t),SCo=i(x),gu=n(x,"LI",{});var axe=s(gu);Vce=n(axe,"STRONG",{});var ugt=s(Vce);RCo=r(ugt,"trajectory_transformer"),ugt.forEach(t),PCo=r(axe," \u2014 "),Zj=n(axe,"A",{href:!0});var bgt=s(Zj);BCo=r(bgt,"TrajectoryTransformerModel"),bgt.forEach(t),NCo=r(axe," (Trajectory Transformer model)"),axe.forEach(t),ICo=i(x),hu=n(x,"LI",{});var nxe=s(hu);Xce=n(nxe,"STRONG",{});var vgt=s(Xce);qCo=r(vgt,"transfo-xl"),vgt.forEach(t),jCo=r(nxe," \u2014 "),eD=n(nxe,"A",{href:!0});var Fgt=s(eD);DCo=r(Fgt,"TransfoXLModel"),Fgt.forEach(t),GCo=r(nxe," (Transformer-XL model)"),nxe.forEach(t),OCo=i(x),pu=n(x,"LI",{});var sxe=s(pu);zce=n(sxe,"STRONG",{});var Tgt=s(zce);VCo=r(Tgt,"unispeech"),Tgt.forEach(t),XCo=r(sxe," \u2014 "),oD=n(sxe,"A",{href:!0});var Mgt=s(oD);zCo=r(Mgt,"UniSpeechModel"),Mgt.forEach(t),QCo=r(sxe," (UniSpeech model)"),sxe.forEach(t),WCo=i(x),_u=n(x,"LI",{});var lxe=s(_u);Qce=n(lxe,"STRONG",{});var Egt=s(Qce);HCo=r(Egt,"unispeech-sat"),Egt.forEach(t),UCo=r(lxe," \u2014 "),rD=n(lxe,"A",{href:!0});var Cgt=s(rD);JCo=r(Cgt,"UniSpeechSatModel"),Cgt.forEach(t),YCo=r(lxe," (UniSpeechSat model)"),lxe.forEach(t),KCo=i(x),uu=n(x,"LI",{});var ixe=s(uu);Wce=n(ixe,"STRONG",{});var wgt=s(Wce);ZCo=r(wgt,"van"),wgt.forEach(t),e5o=r(ixe," \u2014 "),tD=n(ixe,"A",{href:!0});var Agt=s(tD);o5o=r(Agt,"VanModel"),Agt.forEach(t),r5o=r(ixe," (VAN model)"),ixe.forEach(t),t5o=i(x),bu=n(x,"LI",{});var dxe=s(bu);Hce=n(dxe,"STRONG",{});var Lgt=s(Hce);a5o=r(Lgt,"vilt"),Lgt.forEach(t),n5o=r(dxe," \u2014 "),aD=n(dxe,"A",{href:!0});var ygt=s(aD);s5o=r(ygt,"ViltModel"),ygt.forEach(t),l5o=r(dxe," (ViLT model)"),dxe.forEach(t),i5o=i(x),vu=n(x,"LI",{});var cxe=s(vu);Uce=n(cxe,"STRONG",{});var xgt=s(Uce);d5o=r(xgt,"vision-text-dual-encoder"),xgt.forEach(t),c5o=r(cxe," \u2014 "),nD=n(cxe,"A",{href:!0});var $gt=s(nD);f5o=r($gt,"VisionTextDualEncoderModel"),$gt.forEach(t),m5o=r(cxe," (VisionTextDualEncoder model)"),cxe.forEach(t),g5o=i(x),Fu=n(x,"LI",{});var fxe=s(Fu);Jce=n(fxe,"STRONG",{});var kgt=s(Jce);h5o=r(kgt,"visual_bert"),kgt.forEach(t),p5o=r(fxe," \u2014 "),sD=n(fxe,"A",{href:!0});var Sgt=s(sD);_5o=r(Sgt,"VisualBertModel"),Sgt.forEach(t),u5o=r(fxe," (VisualBERT model)"),fxe.forEach(t),b5o=i(x),Tu=n(x,"LI",{});var mxe=s(Tu);Yce=n(mxe,"STRONG",{});var Rgt=s(Yce);v5o=r(Rgt,"vit"),Rgt.forEach(t),F5o=r(mxe," \u2014 "),lD=n(mxe,"A",{href:!0});var Pgt=s(lD);T5o=r(Pgt,"ViTModel"),Pgt.forEach(t),M5o=r(mxe," (ViT model)"),mxe.forEach(t),E5o=i(x),Mu=n(x,"LI",{});var gxe=s(Mu);Kce=n(gxe,"STRONG",{});var Bgt=s(Kce);C5o=r(Bgt,"vit_mae"),Bgt.forEach(t),w5o=r(gxe," \u2014 "),iD=n(gxe,"A",{href:!0});var Ngt=s(iD);A5o=r(Ngt,"ViTMAEModel"),Ngt.forEach(t),L5o=r(gxe," (ViTMAE model)"),gxe.forEach(t),y5o=i(x),Eu=n(x,"LI",{});var hxe=s(Eu);Zce=n(hxe,"STRONG",{});var Igt=s(Zce);x5o=r(Igt,"wav2vec2"),Igt.forEach(t),$5o=r(hxe," \u2014 "),dD=n(hxe,"A",{href:!0});var qgt=s(dD);k5o=r(qgt,"Wav2Vec2Model"),qgt.forEach(t),S5o=r(hxe," (Wav2Vec2 model)"),hxe.forEach(t),R5o=i(x),Cu=n(x,"LI",{});var pxe=s(Cu);efe=n(pxe,"STRONG",{});var jgt=s(efe);P5o=r(jgt,"wav2vec2-conformer"),jgt.forEach(t),B5o=r(pxe," \u2014 "),cD=n(pxe,"A",{href:!0});var Dgt=s(cD);N5o=r(Dgt,"Wav2Vec2ConformerModel"),Dgt.forEach(t),I5o=r(pxe," (Wav2Vec2-Conformer model)"),pxe.forEach(t),q5o=i(x),wu=n(x,"LI",{});var _xe=s(wu);ofe=n(_xe,"STRONG",{});var Ggt=s(ofe);j5o=r(Ggt,"wavlm"),Ggt.forEach(t),D5o=r(_xe," \u2014 "),fD=n(_xe,"A",{href:!0});var Ogt=s(fD);G5o=r(Ogt,"WavLMModel"),Ogt.forEach(t),O5o=r(_xe," (WavLM model)"),_xe.forEach(t),V5o=i(x),Au=n(x,"LI",{});var uxe=s(Au);rfe=n(uxe,"STRONG",{});var Vgt=s(rfe);X5o=r(Vgt,"xglm"),Vgt.forEach(t),z5o=r(uxe," \u2014 "),mD=n(uxe,"A",{href:!0});var Xgt=s(mD);Q5o=r(Xgt,"XGLMModel"),Xgt.forEach(t),W5o=r(uxe," (XGLM model)"),uxe.forEach(t),H5o=i(x),Lu=n(x,"LI",{});var bxe=s(Lu);tfe=n(bxe,"STRONG",{});var zgt=s(tfe);U5o=r(zgt,"xlm"),zgt.forEach(t),J5o=r(bxe," \u2014 "),gD=n(bxe,"A",{href:!0});var Qgt=s(gD);Y5o=r(Qgt,"XLMModel"),Qgt.forEach(t),K5o=r(bxe," (XLM model)"),bxe.forEach(t),Z5o=i(x),yu=n(x,"LI",{});var vxe=s(yu);afe=n(vxe,"STRONG",{});var Wgt=s(afe);e3o=r(Wgt,"xlm-prophetnet"),Wgt.forEach(t),o3o=r(vxe," \u2014 "),hD=n(vxe,"A",{href:!0});var Hgt=s(hD);r3o=r(Hgt,"XLMProphetNetModel"),Hgt.forEach(t),t3o=r(vxe," (XLM-ProphetNet model)"),vxe.forEach(t),a3o=i(x),xu=n(x,"LI",{});var Fxe=s(xu);nfe=n(Fxe,"STRONG",{});var Ugt=s(nfe);n3o=r(Ugt,"xlm-roberta"),Ugt.forEach(t),s3o=r(Fxe," \u2014 "),pD=n(Fxe,"A",{href:!0});var Jgt=s(pD);l3o=r(Jgt,"XLMRobertaModel"),Jgt.forEach(t),i3o=r(Fxe," (XLM-RoBERTa model)"),Fxe.forEach(t),d3o=i(x),$u=n(x,"LI",{});var Txe=s($u);sfe=n(Txe,"STRONG",{});var Ygt=s(sfe);c3o=r(Ygt,"xlm-roberta-xl"),Ygt.forEach(t),f3o=r(Txe," \u2014 "),_D=n(Txe,"A",{href:!0});var Kgt=s(_D);m3o=r(Kgt,"XLMRobertaXLModel"),Kgt.forEach(t),g3o=r(Txe," (XLM-RoBERTa-XL model)"),Txe.forEach(t),h3o=i(x),ku=n(x,"LI",{});var Mxe=s(ku);lfe=n(Mxe,"STRONG",{});var Zgt=s(lfe);p3o=r(Zgt,"xlnet"),Zgt.forEach(t),_3o=r(Mxe," \u2014 "),uD=n(Mxe,"A",{href:!0});var eht=s(uD);u3o=r(eht,"XLNetModel"),eht.forEach(t),b3o=r(Mxe," (XLNet model)"),Mxe.forEach(t),v3o=i(x),Su=n(x,"LI",{});var Exe=s(Su);ife=n(Exe,"STRONG",{});var oht=s(ife);F3o=r(oht,"yolos"),oht.forEach(t),T3o=r(Exe," \u2014 "),bD=n(Exe,"A",{href:!0});var rht=s(bD);M3o=r(rht,"YolosModel"),rht.forEach(t),E3o=r(Exe," (YOLOS model)"),Exe.forEach(t),C3o=i(x),Ru=n(x,"LI",{});var Cxe=s(Ru);dfe=n(Cxe,"STRONG",{});var tht=s(dfe);w3o=r(tht,"yoso"),tht.forEach(t),A3o=r(Cxe," \u2014 "),vD=n(Cxe,"A",{href:!0});var aht=s(vD);L3o=r(aht,"YosoModel"),aht.forEach(t),y3o=r(Cxe," (YOSO model)"),Cxe.forEach(t),x.forEach(t),x3o=i(aa),Pu=n(aa,"P",{});var wxe=s(Pu);$3o=r(wxe,"The model is set in evaluation mode by default using "),cfe=n(wxe,"CODE",{});var nht=s(cfe);k3o=r(nht,"model.eval()"),nht.forEach(t),S3o=r(wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ffe=n(wxe,"CODE",{});var sht=s(ffe);R3o=r(sht,"model.train()"),sht.forEach(t),wxe.forEach(t),P3o=i(aa),T(Bu.$$.fragment,aa),aa.forEach(t),Ks.forEach(t),ROe=i(f),ji=n(f,"H2",{class:!0});var jXe=s(ji);Nu=n(jXe,"A",{id:!0,class:!0,href:!0});var lht=s(Nu);mfe=n(lht,"SPAN",{});var iht=s(mfe);T(hL.$$.fragment,iht),iht.forEach(t),lht.forEach(t),B3o=i(jXe),gfe=n(jXe,"SPAN",{});var dht=s(gfe);N3o=r(dht,"AutoModelForPreTraining"),dht.forEach(t),jXe.forEach(t),POe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(pL.$$.fragment,Zs),I3o=i(Zs),Di=n(Zs,"P",{});var joe=s(Di);q3o=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FD=n(joe,"A",{href:!0});var cht=s(FD);j3o=r(cht,"from_pretrained()"),cht.forEach(t),D3o=r(joe," class method or the "),TD=n(joe,"A",{href:!0});var fht=s(TD);G3o=r(fht,"from_config()"),fht.forEach(t),O3o=r(joe,` class
method.`),joe.forEach(t),V3o=i(Zs),_L=n(Zs,"P",{});var DXe=s(_L);X3o=r(DXe,"This class cannot be instantiated directly using "),hfe=n(DXe,"CODE",{});var mht=s(hfe);z3o=r(mht,"__init__()"),mht.forEach(t),Q3o=r(DXe," (throws an error)."),DXe.forEach(t),W3o=i(Zs),st=n(Zs,"DIV",{class:!0});var Gw=s(st);T(uL.$$.fragment,Gw),H3o=i(Gw),pfe=n(Gw,"P",{});var ght=s(pfe);U3o=r(ght,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ght.forEach(t),J3o=i(Gw),Gi=n(Gw,"P",{});var Doe=s(Gi);Y3o=r(Doe,`Note:
Loading a model from its configuration file does `),_fe=n(Doe,"STRONG",{});var hht=s(_fe);K3o=r(hht,"not"),hht.forEach(t),Z3o=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=n(Doe,"A",{href:!0});var pht=s(MD);e0o=r(pht,"from_pretrained()"),pht.forEach(t),o0o=r(Doe," to load the model weights."),Doe.forEach(t),r0o=i(Gw),T(Iu.$$.fragment,Gw),Gw.forEach(t),t0o=i(Zs),Ye=n(Zs,"DIV",{class:!0});var na=s(Ye);T(bL.$$.fragment,na),a0o=i(na),ufe=n(na,"P",{});var _ht=s(ufe);n0o=r(_ht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_ht.forEach(t),s0o=i(na),Pa=n(na,"P",{});var Ow=s(Pa);l0o=r(Ow,"The model class to instantiate is selected based on the "),bfe=n(Ow,"CODE",{});var uht=s(bfe);i0o=r(uht,"model_type"),uht.forEach(t),d0o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),vfe=n(Ow,"CODE",{});var bht=s(vfe);c0o=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),f0o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(Ow,"CODE",{});var vht=s(Ffe);m0o=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),g0o=r(Ow,":"),Ow.forEach(t),h0o=i(na),G=n(na,"UL",{});var O=s(G);qu=n(O,"LI",{});var Axe=s(qu);Tfe=n(Axe,"STRONG",{});var Fht=s(Tfe);p0o=r(Fht,"albert"),Fht.forEach(t),_0o=r(Axe," \u2014 "),ED=n(Axe,"A",{href:!0});var Tht=s(ED);u0o=r(Tht,"AlbertForPreTraining"),Tht.forEach(t),b0o=r(Axe," (ALBERT model)"),Axe.forEach(t),v0o=i(O),ju=n(O,"LI",{});var Lxe=s(ju);Mfe=n(Lxe,"STRONG",{});var Mht=s(Mfe);F0o=r(Mht,"bart"),Mht.forEach(t),T0o=r(Lxe," \u2014 "),CD=n(Lxe,"A",{href:!0});var Eht=s(CD);M0o=r(Eht,"BartForConditionalGeneration"),Eht.forEach(t),E0o=r(Lxe," (BART model)"),Lxe.forEach(t),C0o=i(O),Du=n(O,"LI",{});var yxe=s(Du);Efe=n(yxe,"STRONG",{});var Cht=s(Efe);w0o=r(Cht,"bert"),Cht.forEach(t),A0o=r(yxe," \u2014 "),wD=n(yxe,"A",{href:!0});var wht=s(wD);L0o=r(wht,"BertForPreTraining"),wht.forEach(t),y0o=r(yxe," (BERT model)"),yxe.forEach(t),x0o=i(O),Gu=n(O,"LI",{});var xxe=s(Gu);Cfe=n(xxe,"STRONG",{});var Aht=s(Cfe);$0o=r(Aht,"big_bird"),Aht.forEach(t),k0o=r(xxe," \u2014 "),AD=n(xxe,"A",{href:!0});var Lht=s(AD);S0o=r(Lht,"BigBirdForPreTraining"),Lht.forEach(t),R0o=r(xxe," (BigBird model)"),xxe.forEach(t),P0o=i(O),Ou=n(O,"LI",{});var $xe=s(Ou);wfe=n($xe,"STRONG",{});var yht=s(wfe);B0o=r(yht,"bloom"),yht.forEach(t),N0o=r($xe," \u2014 "),LD=n($xe,"A",{href:!0});var xht=s(LD);I0o=r(xht,"BloomForCausalLM"),xht.forEach(t),q0o=r($xe," (BLOOM model)"),$xe.forEach(t),j0o=i(O),Vu=n(O,"LI",{});var kxe=s(Vu);Afe=n(kxe,"STRONG",{});var $ht=s(Afe);D0o=r($ht,"camembert"),$ht.forEach(t),G0o=r(kxe," \u2014 "),yD=n(kxe,"A",{href:!0});var kht=s(yD);O0o=r(kht,"CamembertForMaskedLM"),kht.forEach(t),V0o=r(kxe," (CamemBERT model)"),kxe.forEach(t),X0o=i(O),Xu=n(O,"LI",{});var Sxe=s(Xu);Lfe=n(Sxe,"STRONG",{});var Sht=s(Lfe);z0o=r(Sht,"ctrl"),Sht.forEach(t),Q0o=r(Sxe," \u2014 "),xD=n(Sxe,"A",{href:!0});var Rht=s(xD);W0o=r(Rht,"CTRLLMHeadModel"),Rht.forEach(t),H0o=r(Sxe," (CTRL model)"),Sxe.forEach(t),U0o=i(O),zu=n(O,"LI",{});var Rxe=s(zu);yfe=n(Rxe,"STRONG",{});var Pht=s(yfe);J0o=r(Pht,"data2vec-text"),Pht.forEach(t),Y0o=r(Rxe," \u2014 "),$D=n(Rxe,"A",{href:!0});var Bht=s($D);K0o=r(Bht,"Data2VecTextForMaskedLM"),Bht.forEach(t),Z0o=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),ewo=i(O),Qu=n(O,"LI",{});var Pxe=s(Qu);xfe=n(Pxe,"STRONG",{});var Nht=s(xfe);owo=r(Nht,"deberta"),Nht.forEach(t),rwo=r(Pxe," \u2014 "),kD=n(Pxe,"A",{href:!0});var Iht=s(kD);two=r(Iht,"DebertaForMaskedLM"),Iht.forEach(t),awo=r(Pxe," (DeBERTa model)"),Pxe.forEach(t),nwo=i(O),Wu=n(O,"LI",{});var Bxe=s(Wu);$fe=n(Bxe,"STRONG",{});var qht=s($fe);swo=r(qht,"deberta-v2"),qht.forEach(t),lwo=r(Bxe," \u2014 "),SD=n(Bxe,"A",{href:!0});var jht=s(SD);iwo=r(jht,"DebertaV2ForMaskedLM"),jht.forEach(t),dwo=r(Bxe," (DeBERTa-v2 model)"),Bxe.forEach(t),cwo=i(O),Hu=n(O,"LI",{});var Nxe=s(Hu);kfe=n(Nxe,"STRONG",{});var Dht=s(kfe);fwo=r(Dht,"distilbert"),Dht.forEach(t),mwo=r(Nxe," \u2014 "),RD=n(Nxe,"A",{href:!0});var Ght=s(RD);gwo=r(Ght,"DistilBertForMaskedLM"),Ght.forEach(t),hwo=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),pwo=i(O),Uu=n(O,"LI",{});var Ixe=s(Uu);Sfe=n(Ixe,"STRONG",{});var Oht=s(Sfe);_wo=r(Oht,"electra"),Oht.forEach(t),uwo=r(Ixe," \u2014 "),PD=n(Ixe,"A",{href:!0});var Vht=s(PD);bwo=r(Vht,"ElectraForPreTraining"),Vht.forEach(t),vwo=r(Ixe," (ELECTRA model)"),Ixe.forEach(t),Fwo=i(O),Ju=n(O,"LI",{});var qxe=s(Ju);Rfe=n(qxe,"STRONG",{});var Xht=s(Rfe);Two=r(Xht,"flaubert"),Xht.forEach(t),Mwo=r(qxe," \u2014 "),BD=n(qxe,"A",{href:!0});var zht=s(BD);Ewo=r(zht,"FlaubertWithLMHeadModel"),zht.forEach(t),Cwo=r(qxe," (FlauBERT model)"),qxe.forEach(t),wwo=i(O),Yu=n(O,"LI",{});var jxe=s(Yu);Pfe=n(jxe,"STRONG",{});var Qht=s(Pfe);Awo=r(Qht,"flava"),Qht.forEach(t),Lwo=r(jxe," \u2014 "),ND=n(jxe,"A",{href:!0});var Wht=s(ND);ywo=r(Wht,"FlavaForPreTraining"),Wht.forEach(t),xwo=r(jxe," (FLAVA model)"),jxe.forEach(t),$wo=i(O),Ku=n(O,"LI",{});var Dxe=s(Ku);Bfe=n(Dxe,"STRONG",{});var Hht=s(Bfe);kwo=r(Hht,"fnet"),Hht.forEach(t),Swo=r(Dxe," \u2014 "),ID=n(Dxe,"A",{href:!0});var Uht=s(ID);Rwo=r(Uht,"FNetForPreTraining"),Uht.forEach(t),Pwo=r(Dxe," (FNet model)"),Dxe.forEach(t),Bwo=i(O),Zu=n(O,"LI",{});var Gxe=s(Zu);Nfe=n(Gxe,"STRONG",{});var Jht=s(Nfe);Nwo=r(Jht,"fsmt"),Jht.forEach(t),Iwo=r(Gxe," \u2014 "),qD=n(Gxe,"A",{href:!0});var Yht=s(qD);qwo=r(Yht,"FSMTForConditionalGeneration"),Yht.forEach(t),jwo=r(Gxe," (FairSeq Machine-Translation model)"),Gxe.forEach(t),Dwo=i(O),e1=n(O,"LI",{});var Oxe=s(e1);Ife=n(Oxe,"STRONG",{});var Kht=s(Ife);Gwo=r(Kht,"funnel"),Kht.forEach(t),Owo=r(Oxe," \u2014 "),jD=n(Oxe,"A",{href:!0});var Zht=s(jD);Vwo=r(Zht,"FunnelForPreTraining"),Zht.forEach(t),Xwo=r(Oxe," (Funnel Transformer model)"),Oxe.forEach(t),zwo=i(O),o1=n(O,"LI",{});var Vxe=s(o1);qfe=n(Vxe,"STRONG",{});var ept=s(qfe);Qwo=r(ept,"gpt2"),ept.forEach(t),Wwo=r(Vxe," \u2014 "),DD=n(Vxe,"A",{href:!0});var opt=s(DD);Hwo=r(opt,"GPT2LMHeadModel"),opt.forEach(t),Uwo=r(Vxe," (OpenAI GPT-2 model)"),Vxe.forEach(t),Jwo=i(O),r1=n(O,"LI",{});var Xxe=s(r1);jfe=n(Xxe,"STRONG",{});var rpt=s(jfe);Ywo=r(rpt,"ibert"),rpt.forEach(t),Kwo=r(Xxe," \u2014 "),GD=n(Xxe,"A",{href:!0});var tpt=s(GD);Zwo=r(tpt,"IBertForMaskedLM"),tpt.forEach(t),eAo=r(Xxe," (I-BERT model)"),Xxe.forEach(t),oAo=i(O),t1=n(O,"LI",{});var zxe=s(t1);Dfe=n(zxe,"STRONG",{});var apt=s(Dfe);rAo=r(apt,"layoutlm"),apt.forEach(t),tAo=r(zxe," \u2014 "),OD=n(zxe,"A",{href:!0});var npt=s(OD);aAo=r(npt,"LayoutLMForMaskedLM"),npt.forEach(t),nAo=r(zxe," (LayoutLM model)"),zxe.forEach(t),sAo=i(O),a1=n(O,"LI",{});var Qxe=s(a1);Gfe=n(Qxe,"STRONG",{});var spt=s(Gfe);lAo=r(spt,"longformer"),spt.forEach(t),iAo=r(Qxe," \u2014 "),VD=n(Qxe,"A",{href:!0});var lpt=s(VD);dAo=r(lpt,"LongformerForMaskedLM"),lpt.forEach(t),cAo=r(Qxe," (Longformer model)"),Qxe.forEach(t),fAo=i(O),n1=n(O,"LI",{});var Wxe=s(n1);Ofe=n(Wxe,"STRONG",{});var ipt=s(Ofe);mAo=r(ipt,"lxmert"),ipt.forEach(t),gAo=r(Wxe," \u2014 "),XD=n(Wxe,"A",{href:!0});var dpt=s(XD);hAo=r(dpt,"LxmertForPreTraining"),dpt.forEach(t),pAo=r(Wxe," (LXMERT model)"),Wxe.forEach(t),_Ao=i(O),s1=n(O,"LI",{});var Hxe=s(s1);Vfe=n(Hxe,"STRONG",{});var cpt=s(Vfe);uAo=r(cpt,"megatron-bert"),cpt.forEach(t),bAo=r(Hxe," \u2014 "),zD=n(Hxe,"A",{href:!0});var fpt=s(zD);vAo=r(fpt,"MegatronBertForPreTraining"),fpt.forEach(t),FAo=r(Hxe," (Megatron-BERT model)"),Hxe.forEach(t),TAo=i(O),l1=n(O,"LI",{});var Uxe=s(l1);Xfe=n(Uxe,"STRONG",{});var mpt=s(Xfe);MAo=r(mpt,"mobilebert"),mpt.forEach(t),EAo=r(Uxe," \u2014 "),QD=n(Uxe,"A",{href:!0});var gpt=s(QD);CAo=r(gpt,"MobileBertForPreTraining"),gpt.forEach(t),wAo=r(Uxe," (MobileBERT model)"),Uxe.forEach(t),AAo=i(O),i1=n(O,"LI",{});var Jxe=s(i1);zfe=n(Jxe,"STRONG",{});var hpt=s(zfe);LAo=r(hpt,"mpnet"),hpt.forEach(t),yAo=r(Jxe," \u2014 "),WD=n(Jxe,"A",{href:!0});var ppt=s(WD);xAo=r(ppt,"MPNetForMaskedLM"),ppt.forEach(t),$Ao=r(Jxe," (MPNet model)"),Jxe.forEach(t),kAo=i(O),d1=n(O,"LI",{});var Yxe=s(d1);Qfe=n(Yxe,"STRONG",{});var _pt=s(Qfe);SAo=r(_pt,"nezha"),_pt.forEach(t),RAo=r(Yxe," \u2014 "),HD=n(Yxe,"A",{href:!0});var upt=s(HD);PAo=r(upt,"NezhaForPreTraining"),upt.forEach(t),BAo=r(Yxe," (Nezha model)"),Yxe.forEach(t),NAo=i(O),c1=n(O,"LI",{});var Kxe=s(c1);Wfe=n(Kxe,"STRONG",{});var bpt=s(Wfe);IAo=r(bpt,"openai-gpt"),bpt.forEach(t),qAo=r(Kxe," \u2014 "),UD=n(Kxe,"A",{href:!0});var vpt=s(UD);jAo=r(vpt,"OpenAIGPTLMHeadModel"),vpt.forEach(t),DAo=r(Kxe," (OpenAI GPT model)"),Kxe.forEach(t),GAo=i(O),f1=n(O,"LI",{});var Zxe=s(f1);Hfe=n(Zxe,"STRONG",{});var Fpt=s(Hfe);OAo=r(Fpt,"retribert"),Fpt.forEach(t),VAo=r(Zxe," \u2014 "),JD=n(Zxe,"A",{href:!0});var Tpt=s(JD);XAo=r(Tpt,"RetriBertModel"),Tpt.forEach(t),zAo=r(Zxe," (RetriBERT model)"),Zxe.forEach(t),QAo=i(O),m1=n(O,"LI",{});var e$e=s(m1);Ufe=n(e$e,"STRONG",{});var Mpt=s(Ufe);WAo=r(Mpt,"roberta"),Mpt.forEach(t),HAo=r(e$e," \u2014 "),YD=n(e$e,"A",{href:!0});var Ept=s(YD);UAo=r(Ept,"RobertaForMaskedLM"),Ept.forEach(t),JAo=r(e$e," (RoBERTa model)"),e$e.forEach(t),YAo=i(O),g1=n(O,"LI",{});var o$e=s(g1);Jfe=n(o$e,"STRONG",{});var Cpt=s(Jfe);KAo=r(Cpt,"splinter"),Cpt.forEach(t),ZAo=r(o$e," \u2014 "),KD=n(o$e,"A",{href:!0});var wpt=s(KD);e6o=r(wpt,"SplinterForPreTraining"),wpt.forEach(t),o6o=r(o$e," (Splinter model)"),o$e.forEach(t),r6o=i(O),h1=n(O,"LI",{});var r$e=s(h1);Yfe=n(r$e,"STRONG",{});var Apt=s(Yfe);t6o=r(Apt,"squeezebert"),Apt.forEach(t),a6o=r(r$e," \u2014 "),ZD=n(r$e,"A",{href:!0});var Lpt=s(ZD);n6o=r(Lpt,"SqueezeBertForMaskedLM"),Lpt.forEach(t),s6o=r(r$e," (SqueezeBERT model)"),r$e.forEach(t),l6o=i(O),p1=n(O,"LI",{});var t$e=s(p1);Kfe=n(t$e,"STRONG",{});var ypt=s(Kfe);i6o=r(ypt,"t5"),ypt.forEach(t),d6o=r(t$e," \u2014 "),eG=n(t$e,"A",{href:!0});var xpt=s(eG);c6o=r(xpt,"T5ForConditionalGeneration"),xpt.forEach(t),f6o=r(t$e," (T5 model)"),t$e.forEach(t),m6o=i(O),_1=n(O,"LI",{});var a$e=s(_1);Zfe=n(a$e,"STRONG",{});var $pt=s(Zfe);g6o=r($pt,"tapas"),$pt.forEach(t),h6o=r(a$e," \u2014 "),oG=n(a$e,"A",{href:!0});var kpt=s(oG);p6o=r(kpt,"TapasForMaskedLM"),kpt.forEach(t),_6o=r(a$e," (TAPAS model)"),a$e.forEach(t),u6o=i(O),u1=n(O,"LI",{});var n$e=s(u1);eme=n(n$e,"STRONG",{});var Spt=s(eme);b6o=r(Spt,"transfo-xl"),Spt.forEach(t),v6o=r(n$e," \u2014 "),rG=n(n$e,"A",{href:!0});var Rpt=s(rG);F6o=r(Rpt,"TransfoXLLMHeadModel"),Rpt.forEach(t),T6o=r(n$e," (Transformer-XL model)"),n$e.forEach(t),M6o=i(O),b1=n(O,"LI",{});var s$e=s(b1);ome=n(s$e,"STRONG",{});var Ppt=s(ome);E6o=r(Ppt,"unispeech"),Ppt.forEach(t),C6o=r(s$e," \u2014 "),tG=n(s$e,"A",{href:!0});var Bpt=s(tG);w6o=r(Bpt,"UniSpeechForPreTraining"),Bpt.forEach(t),A6o=r(s$e," (UniSpeech model)"),s$e.forEach(t),L6o=i(O),v1=n(O,"LI",{});var l$e=s(v1);rme=n(l$e,"STRONG",{});var Npt=s(rme);y6o=r(Npt,"unispeech-sat"),Npt.forEach(t),x6o=r(l$e," \u2014 "),aG=n(l$e,"A",{href:!0});var Ipt=s(aG);$6o=r(Ipt,"UniSpeechSatForPreTraining"),Ipt.forEach(t),k6o=r(l$e," (UniSpeechSat model)"),l$e.forEach(t),S6o=i(O),F1=n(O,"LI",{});var i$e=s(F1);tme=n(i$e,"STRONG",{});var qpt=s(tme);R6o=r(qpt,"visual_bert"),qpt.forEach(t),P6o=r(i$e," \u2014 "),nG=n(i$e,"A",{href:!0});var jpt=s(nG);B6o=r(jpt,"VisualBertForPreTraining"),jpt.forEach(t),N6o=r(i$e," (VisualBERT model)"),i$e.forEach(t),I6o=i(O),T1=n(O,"LI",{});var d$e=s(T1);ame=n(d$e,"STRONG",{});var Dpt=s(ame);q6o=r(Dpt,"vit_mae"),Dpt.forEach(t),j6o=r(d$e," \u2014 "),sG=n(d$e,"A",{href:!0});var Gpt=s(sG);D6o=r(Gpt,"ViTMAEForPreTraining"),Gpt.forEach(t),G6o=r(d$e," (ViTMAE model)"),d$e.forEach(t),O6o=i(O),M1=n(O,"LI",{});var c$e=s(M1);nme=n(c$e,"STRONG",{});var Opt=s(nme);V6o=r(Opt,"wav2vec2"),Opt.forEach(t),X6o=r(c$e," \u2014 "),lG=n(c$e,"A",{href:!0});var Vpt=s(lG);z6o=r(Vpt,"Wav2Vec2ForPreTraining"),Vpt.forEach(t),Q6o=r(c$e," (Wav2Vec2 model)"),c$e.forEach(t),W6o=i(O),E1=n(O,"LI",{});var f$e=s(E1);sme=n(f$e,"STRONG",{});var Xpt=s(sme);H6o=r(Xpt,"wav2vec2-conformer"),Xpt.forEach(t),U6o=r(f$e," \u2014 "),iG=n(f$e,"A",{href:!0});var zpt=s(iG);J6o=r(zpt,"Wav2Vec2ConformerForPreTraining"),zpt.forEach(t),Y6o=r(f$e," (Wav2Vec2-Conformer model)"),f$e.forEach(t),K6o=i(O),C1=n(O,"LI",{});var m$e=s(C1);lme=n(m$e,"STRONG",{});var Qpt=s(lme);Z6o=r(Qpt,"xlm"),Qpt.forEach(t),eLo=r(m$e," \u2014 "),dG=n(m$e,"A",{href:!0});var Wpt=s(dG);oLo=r(Wpt,"XLMWithLMHeadModel"),Wpt.forEach(t),rLo=r(m$e," (XLM model)"),m$e.forEach(t),tLo=i(O),w1=n(O,"LI",{});var g$e=s(w1);ime=n(g$e,"STRONG",{});var Hpt=s(ime);aLo=r(Hpt,"xlm-roberta"),Hpt.forEach(t),nLo=r(g$e," \u2014 "),cG=n(g$e,"A",{href:!0});var Upt=s(cG);sLo=r(Upt,"XLMRobertaForMaskedLM"),Upt.forEach(t),lLo=r(g$e," (XLM-RoBERTa model)"),g$e.forEach(t),iLo=i(O),A1=n(O,"LI",{});var h$e=s(A1);dme=n(h$e,"STRONG",{});var Jpt=s(dme);dLo=r(Jpt,"xlm-roberta-xl"),Jpt.forEach(t),cLo=r(h$e," \u2014 "),fG=n(h$e,"A",{href:!0});var Ypt=s(fG);fLo=r(Ypt,"XLMRobertaXLForMaskedLM"),Ypt.forEach(t),mLo=r(h$e," (XLM-RoBERTa-XL model)"),h$e.forEach(t),gLo=i(O),L1=n(O,"LI",{});var p$e=s(L1);cme=n(p$e,"STRONG",{});var Kpt=s(cme);hLo=r(Kpt,"xlnet"),Kpt.forEach(t),pLo=r(p$e," \u2014 "),mG=n(p$e,"A",{href:!0});var Zpt=s(mG);_Lo=r(Zpt,"XLNetLMHeadModel"),Zpt.forEach(t),uLo=r(p$e," (XLNet model)"),p$e.forEach(t),O.forEach(t),bLo=i(na),y1=n(na,"P",{});var _$e=s(y1);vLo=r(_$e,"The model is set in evaluation mode by default using "),fme=n(_$e,"CODE",{});var e_t=s(fme);FLo=r(e_t,"model.eval()"),e_t.forEach(t),TLo=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mme=n(_$e,"CODE",{});var o_t=s(mme);MLo=r(o_t,"model.train()"),o_t.forEach(t),_$e.forEach(t),ELo=i(na),T(x1.$$.fragment,na),na.forEach(t),Zs.forEach(t),BOe=i(f),Oi=n(f,"H2",{class:!0});var GXe=s(Oi);$1=n(GXe,"A",{id:!0,class:!0,href:!0});var r_t=s($1);gme=n(r_t,"SPAN",{});var t_t=s(gme);T(vL.$$.fragment,t_t),t_t.forEach(t),r_t.forEach(t),CLo=i(GXe),hme=n(GXe,"SPAN",{});var a_t=s(hme);wLo=r(a_t,"AutoModelForCausalLM"),a_t.forEach(t),GXe.forEach(t),NOe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(FL.$$.fragment,el),ALo=i(el),Vi=n(el,"P",{});var Goe=s(Vi);LLo=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gG=n(Goe,"A",{href:!0});var n_t=s(gG);yLo=r(n_t,"from_pretrained()"),n_t.forEach(t),xLo=r(Goe," class method or the "),hG=n(Goe,"A",{href:!0});var s_t=s(hG);$Lo=r(s_t,"from_config()"),s_t.forEach(t),kLo=r(Goe,` class
method.`),Goe.forEach(t),SLo=i(el),TL=n(el,"P",{});var OXe=s(TL);RLo=r(OXe,"This class cannot be instantiated directly using "),pme=n(OXe,"CODE",{});var l_t=s(pme);PLo=r(l_t,"__init__()"),l_t.forEach(t),BLo=r(OXe," (throws an error)."),OXe.forEach(t),NLo=i(el),lt=n(el,"DIV",{class:!0});var Vw=s(lt);T(ML.$$.fragment,Vw),ILo=i(Vw),_me=n(Vw,"P",{});var i_t=s(_me);qLo=r(i_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),i_t.forEach(t),jLo=i(Vw),Xi=n(Vw,"P",{});var Ooe=s(Xi);DLo=r(Ooe,`Note:
Loading a model from its configuration file does `),ume=n(Ooe,"STRONG",{});var d_t=s(ume);GLo=r(d_t,"not"),d_t.forEach(t),OLo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(Ooe,"A",{href:!0});var c_t=s(pG);VLo=r(c_t,"from_pretrained()"),c_t.forEach(t),XLo=r(Ooe," to load the model weights."),Ooe.forEach(t),zLo=i(Vw),T(k1.$$.fragment,Vw),Vw.forEach(t),QLo=i(el),Ke=n(el,"DIV",{class:!0});var sa=s(Ke);T(EL.$$.fragment,sa),WLo=i(sa),bme=n(sa,"P",{});var f_t=s(bme);HLo=r(f_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),f_t.forEach(t),ULo=i(sa),Ba=n(sa,"P",{});var Xw=s(Ba);JLo=r(Xw,"The model class to instantiate is selected based on the "),vme=n(Xw,"CODE",{});var m_t=s(vme);YLo=r(m_t,"model_type"),m_t.forEach(t),KLo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Fme=n(Xw,"CODE",{});var g_t=s(Fme);ZLo=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),eyo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(Xw,"CODE",{});var h_t=s(Tme);oyo=r(h_t,"pretrained_model_name_or_path"),h_t.forEach(t),ryo=r(Xw,":"),Xw.forEach(t),tyo=i(sa),z=n(sa,"UL",{});var Q=s(z);S1=n(Q,"LI",{});var u$e=s(S1);Mme=n(u$e,"STRONG",{});var p_t=s(Mme);ayo=r(p_t,"bart"),p_t.forEach(t),nyo=r(u$e," \u2014 "),_G=n(u$e,"A",{href:!0});var __t=s(_G);syo=r(__t,"BartForCausalLM"),__t.forEach(t),lyo=r(u$e," (BART model)"),u$e.forEach(t),iyo=i(Q),R1=n(Q,"LI",{});var b$e=s(R1);Eme=n(b$e,"STRONG",{});var u_t=s(Eme);dyo=r(u_t,"bert"),u_t.forEach(t),cyo=r(b$e," \u2014 "),uG=n(b$e,"A",{href:!0});var b_t=s(uG);fyo=r(b_t,"BertLMHeadModel"),b_t.forEach(t),myo=r(b$e," (BERT model)"),b$e.forEach(t),gyo=i(Q),P1=n(Q,"LI",{});var v$e=s(P1);Cme=n(v$e,"STRONG",{});var v_t=s(Cme);hyo=r(v_t,"bert-generation"),v_t.forEach(t),pyo=r(v$e," \u2014 "),bG=n(v$e,"A",{href:!0});var F_t=s(bG);_yo=r(F_t,"BertGenerationDecoder"),F_t.forEach(t),uyo=r(v$e," (Bert Generation model)"),v$e.forEach(t),byo=i(Q),B1=n(Q,"LI",{});var F$e=s(B1);wme=n(F$e,"STRONG",{});var T_t=s(wme);vyo=r(T_t,"big_bird"),T_t.forEach(t),Fyo=r(F$e," \u2014 "),vG=n(F$e,"A",{href:!0});var M_t=s(vG);Tyo=r(M_t,"BigBirdForCausalLM"),M_t.forEach(t),Myo=r(F$e," (BigBird model)"),F$e.forEach(t),Eyo=i(Q),N1=n(Q,"LI",{});var T$e=s(N1);Ame=n(T$e,"STRONG",{});var E_t=s(Ame);Cyo=r(E_t,"bigbird_pegasus"),E_t.forEach(t),wyo=r(T$e," \u2014 "),FG=n(T$e,"A",{href:!0});var C_t=s(FG);Ayo=r(C_t,"BigBirdPegasusForCausalLM"),C_t.forEach(t),Lyo=r(T$e," (BigBird-Pegasus model)"),T$e.forEach(t),yyo=i(Q),I1=n(Q,"LI",{});var M$e=s(I1);Lme=n(M$e,"STRONG",{});var w_t=s(Lme);xyo=r(w_t,"blenderbot"),w_t.forEach(t),$yo=r(M$e," \u2014 "),TG=n(M$e,"A",{href:!0});var A_t=s(TG);kyo=r(A_t,"BlenderbotForCausalLM"),A_t.forEach(t),Syo=r(M$e," (Blenderbot model)"),M$e.forEach(t),Ryo=i(Q),q1=n(Q,"LI",{});var E$e=s(q1);yme=n(E$e,"STRONG",{});var L_t=s(yme);Pyo=r(L_t,"blenderbot-small"),L_t.forEach(t),Byo=r(E$e," \u2014 "),MG=n(E$e,"A",{href:!0});var y_t=s(MG);Nyo=r(y_t,"BlenderbotSmallForCausalLM"),y_t.forEach(t),Iyo=r(E$e," (BlenderbotSmall model)"),E$e.forEach(t),qyo=i(Q),j1=n(Q,"LI",{});var C$e=s(j1);xme=n(C$e,"STRONG",{});var x_t=s(xme);jyo=r(x_t,"bloom"),x_t.forEach(t),Dyo=r(C$e," \u2014 "),EG=n(C$e,"A",{href:!0});var $_t=s(EG);Gyo=r($_t,"BloomForCausalLM"),$_t.forEach(t),Oyo=r(C$e," (BLOOM model)"),C$e.forEach(t),Vyo=i(Q),D1=n(Q,"LI",{});var w$e=s(D1);$me=n(w$e,"STRONG",{});var k_t=s($me);Xyo=r(k_t,"camembert"),k_t.forEach(t),zyo=r(w$e," \u2014 "),CG=n(w$e,"A",{href:!0});var S_t=s(CG);Qyo=r(S_t,"CamembertForCausalLM"),S_t.forEach(t),Wyo=r(w$e," (CamemBERT model)"),w$e.forEach(t),Hyo=i(Q),G1=n(Q,"LI",{});var A$e=s(G1);kme=n(A$e,"STRONG",{});var R_t=s(kme);Uyo=r(R_t,"codegen"),R_t.forEach(t),Jyo=r(A$e," \u2014 "),wG=n(A$e,"A",{href:!0});var P_t=s(wG);Yyo=r(P_t,"CodeGenForCausalLM"),P_t.forEach(t),Kyo=r(A$e," (CodeGen model)"),A$e.forEach(t),Zyo=i(Q),O1=n(Q,"LI",{});var L$e=s(O1);Sme=n(L$e,"STRONG",{});var B_t=s(Sme);e8o=r(B_t,"ctrl"),B_t.forEach(t),o8o=r(L$e," \u2014 "),AG=n(L$e,"A",{href:!0});var N_t=s(AG);r8o=r(N_t,"CTRLLMHeadModel"),N_t.forEach(t),t8o=r(L$e," (CTRL model)"),L$e.forEach(t),a8o=i(Q),V1=n(Q,"LI",{});var y$e=s(V1);Rme=n(y$e,"STRONG",{});var I_t=s(Rme);n8o=r(I_t,"data2vec-text"),I_t.forEach(t),s8o=r(y$e," \u2014 "),LG=n(y$e,"A",{href:!0});var q_t=s(LG);l8o=r(q_t,"Data2VecTextForCausalLM"),q_t.forEach(t),i8o=r(y$e," (Data2VecText model)"),y$e.forEach(t),d8o=i(Q),X1=n(Q,"LI",{});var x$e=s(X1);Pme=n(x$e,"STRONG",{});var j_t=s(Pme);c8o=r(j_t,"electra"),j_t.forEach(t),f8o=r(x$e," \u2014 "),yG=n(x$e,"A",{href:!0});var D_t=s(yG);m8o=r(D_t,"ElectraForCausalLM"),D_t.forEach(t),g8o=r(x$e," (ELECTRA model)"),x$e.forEach(t),h8o=i(Q),z1=n(Q,"LI",{});var $$e=s(z1);Bme=n($$e,"STRONG",{});var G_t=s(Bme);p8o=r(G_t,"gpt2"),G_t.forEach(t),_8o=r($$e," \u2014 "),xG=n($$e,"A",{href:!0});var O_t=s(xG);u8o=r(O_t,"GPT2LMHeadModel"),O_t.forEach(t),b8o=r($$e," (OpenAI GPT-2 model)"),$$e.forEach(t),v8o=i(Q),Q1=n(Q,"LI",{});var k$e=s(Q1);Nme=n(k$e,"STRONG",{});var V_t=s(Nme);F8o=r(V_t,"gpt_neo"),V_t.forEach(t),T8o=r(k$e," \u2014 "),$G=n(k$e,"A",{href:!0});var X_t=s($G);M8o=r(X_t,"GPTNeoForCausalLM"),X_t.forEach(t),E8o=r(k$e," (GPT Neo model)"),k$e.forEach(t),C8o=i(Q),W1=n(Q,"LI",{});var S$e=s(W1);Ime=n(S$e,"STRONG",{});var z_t=s(Ime);w8o=r(z_t,"gpt_neox"),z_t.forEach(t),A8o=r(S$e," \u2014 "),kG=n(S$e,"A",{href:!0});var Q_t=s(kG);L8o=r(Q_t,"GPTNeoXForCausalLM"),Q_t.forEach(t),y8o=r(S$e," (GPT NeoX model)"),S$e.forEach(t),x8o=i(Q),H1=n(Q,"LI",{});var R$e=s(H1);qme=n(R$e,"STRONG",{});var W_t=s(qme);$8o=r(W_t,"gptj"),W_t.forEach(t),k8o=r(R$e," \u2014 "),SG=n(R$e,"A",{href:!0});var H_t=s(SG);S8o=r(H_t,"GPTJForCausalLM"),H_t.forEach(t),R8o=r(R$e," (GPT-J model)"),R$e.forEach(t),P8o=i(Q),U1=n(Q,"LI",{});var P$e=s(U1);jme=n(P$e,"STRONG",{});var U_t=s(jme);B8o=r(U_t,"marian"),U_t.forEach(t),N8o=r(P$e," \u2014 "),RG=n(P$e,"A",{href:!0});var J_t=s(RG);I8o=r(J_t,"MarianForCausalLM"),J_t.forEach(t),q8o=r(P$e," (Marian model)"),P$e.forEach(t),j8o=i(Q),J1=n(Q,"LI",{});var B$e=s(J1);Dme=n(B$e,"STRONG",{});var Y_t=s(Dme);D8o=r(Y_t,"mbart"),Y_t.forEach(t),G8o=r(B$e," \u2014 "),PG=n(B$e,"A",{href:!0});var K_t=s(PG);O8o=r(K_t,"MBartForCausalLM"),K_t.forEach(t),V8o=r(B$e," (mBART model)"),B$e.forEach(t),X8o=i(Q),Y1=n(Q,"LI",{});var N$e=s(Y1);Gme=n(N$e,"STRONG",{});var Z_t=s(Gme);z8o=r(Z_t,"megatron-bert"),Z_t.forEach(t),Q8o=r(N$e," \u2014 "),BG=n(N$e,"A",{href:!0});var eut=s(BG);W8o=r(eut,"MegatronBertForCausalLM"),eut.forEach(t),H8o=r(N$e," (Megatron-BERT model)"),N$e.forEach(t),U8o=i(Q),K1=n(Q,"LI",{});var I$e=s(K1);Ome=n(I$e,"STRONG",{});var out=s(Ome);J8o=r(out,"openai-gpt"),out.forEach(t),Y8o=r(I$e," \u2014 "),NG=n(I$e,"A",{href:!0});var rut=s(NG);K8o=r(rut,"OpenAIGPTLMHeadModel"),rut.forEach(t),Z8o=r(I$e," (OpenAI GPT model)"),I$e.forEach(t),exo=i(Q),Z1=n(Q,"LI",{});var q$e=s(Z1);Vme=n(q$e,"STRONG",{});var tut=s(Vme);oxo=r(tut,"opt"),tut.forEach(t),rxo=r(q$e," \u2014 "),IG=n(q$e,"A",{href:!0});var aut=s(IG);txo=r(aut,"OPTForCausalLM"),aut.forEach(t),axo=r(q$e," (OPT model)"),q$e.forEach(t),nxo=i(Q),e7=n(Q,"LI",{});var j$e=s(e7);Xme=n(j$e,"STRONG",{});var nut=s(Xme);sxo=r(nut,"pegasus"),nut.forEach(t),lxo=r(j$e," \u2014 "),qG=n(j$e,"A",{href:!0});var sut=s(qG);ixo=r(sut,"PegasusForCausalLM"),sut.forEach(t),dxo=r(j$e," (Pegasus model)"),j$e.forEach(t),cxo=i(Q),o7=n(Q,"LI",{});var D$e=s(o7);zme=n(D$e,"STRONG",{});var lut=s(zme);fxo=r(lut,"plbart"),lut.forEach(t),mxo=r(D$e," \u2014 "),jG=n(D$e,"A",{href:!0});var iut=s(jG);gxo=r(iut,"PLBartForCausalLM"),iut.forEach(t),hxo=r(D$e," (PLBart model)"),D$e.forEach(t),pxo=i(Q),r7=n(Q,"LI",{});var G$e=s(r7);Qme=n(G$e,"STRONG",{});var dut=s(Qme);_xo=r(dut,"prophetnet"),dut.forEach(t),uxo=r(G$e," \u2014 "),DG=n(G$e,"A",{href:!0});var cut=s(DG);bxo=r(cut,"ProphetNetForCausalLM"),cut.forEach(t),vxo=r(G$e," (ProphetNet model)"),G$e.forEach(t),Fxo=i(Q),t7=n(Q,"LI",{});var O$e=s(t7);Wme=n(O$e,"STRONG",{});var fut=s(Wme);Txo=r(fut,"qdqbert"),fut.forEach(t),Mxo=r(O$e," \u2014 "),GG=n(O$e,"A",{href:!0});var mut=s(GG);Exo=r(mut,"QDQBertLMHeadModel"),mut.forEach(t),Cxo=r(O$e," (QDQBert model)"),O$e.forEach(t),wxo=i(Q),a7=n(Q,"LI",{});var V$e=s(a7);Hme=n(V$e,"STRONG",{});var gut=s(Hme);Axo=r(gut,"reformer"),gut.forEach(t),Lxo=r(V$e," \u2014 "),OG=n(V$e,"A",{href:!0});var hut=s(OG);yxo=r(hut,"ReformerModelWithLMHead"),hut.forEach(t),xxo=r(V$e," (Reformer model)"),V$e.forEach(t),$xo=i(Q),n7=n(Q,"LI",{});var X$e=s(n7);Ume=n(X$e,"STRONG",{});var put=s(Ume);kxo=r(put,"rembert"),put.forEach(t),Sxo=r(X$e," \u2014 "),VG=n(X$e,"A",{href:!0});var _ut=s(VG);Rxo=r(_ut,"RemBertForCausalLM"),_ut.forEach(t),Pxo=r(X$e," (RemBERT model)"),X$e.forEach(t),Bxo=i(Q),s7=n(Q,"LI",{});var z$e=s(s7);Jme=n(z$e,"STRONG",{});var uut=s(Jme);Nxo=r(uut,"roberta"),uut.forEach(t),Ixo=r(z$e," \u2014 "),XG=n(z$e,"A",{href:!0});var but=s(XG);qxo=r(but,"RobertaForCausalLM"),but.forEach(t),jxo=r(z$e," (RoBERTa model)"),z$e.forEach(t),Dxo=i(Q),l7=n(Q,"LI",{});var Q$e=s(l7);Yme=n(Q$e,"STRONG",{});var vut=s(Yme);Gxo=r(vut,"roformer"),vut.forEach(t),Oxo=r(Q$e," \u2014 "),zG=n(Q$e,"A",{href:!0});var Fut=s(zG);Vxo=r(Fut,"RoFormerForCausalLM"),Fut.forEach(t),Xxo=r(Q$e," (RoFormer model)"),Q$e.forEach(t),zxo=i(Q),i7=n(Q,"LI",{});var W$e=s(i7);Kme=n(W$e,"STRONG",{});var Tut=s(Kme);Qxo=r(Tut,"speech_to_text_2"),Tut.forEach(t),Wxo=r(W$e," \u2014 "),QG=n(W$e,"A",{href:!0});var Mut=s(QG);Hxo=r(Mut,"Speech2Text2ForCausalLM"),Mut.forEach(t),Uxo=r(W$e," (Speech2Text2 model)"),W$e.forEach(t),Jxo=i(Q),d7=n(Q,"LI",{});var H$e=s(d7);Zme=n(H$e,"STRONG",{});var Eut=s(Zme);Yxo=r(Eut,"transfo-xl"),Eut.forEach(t),Kxo=r(H$e," \u2014 "),WG=n(H$e,"A",{href:!0});var Cut=s(WG);Zxo=r(Cut,"TransfoXLLMHeadModel"),Cut.forEach(t),e$o=r(H$e," (Transformer-XL model)"),H$e.forEach(t),o$o=i(Q),c7=n(Q,"LI",{});var U$e=s(c7);ege=n(U$e,"STRONG",{});var wut=s(ege);r$o=r(wut,"trocr"),wut.forEach(t),t$o=r(U$e," \u2014 "),HG=n(U$e,"A",{href:!0});var Aut=s(HG);a$o=r(Aut,"TrOCRForCausalLM"),Aut.forEach(t),n$o=r(U$e," (TrOCR model)"),U$e.forEach(t),s$o=i(Q),f7=n(Q,"LI",{});var J$e=s(f7);oge=n(J$e,"STRONG",{});var Lut=s(oge);l$o=r(Lut,"xglm"),Lut.forEach(t),i$o=r(J$e," \u2014 "),UG=n(J$e,"A",{href:!0});var yut=s(UG);d$o=r(yut,"XGLMForCausalLM"),yut.forEach(t),c$o=r(J$e," (XGLM model)"),J$e.forEach(t),f$o=i(Q),m7=n(Q,"LI",{});var Y$e=s(m7);rge=n(Y$e,"STRONG",{});var xut=s(rge);m$o=r(xut,"xlm"),xut.forEach(t),g$o=r(Y$e," \u2014 "),JG=n(Y$e,"A",{href:!0});var $ut=s(JG);h$o=r($ut,"XLMWithLMHeadModel"),$ut.forEach(t),p$o=r(Y$e," (XLM model)"),Y$e.forEach(t),_$o=i(Q),g7=n(Q,"LI",{});var K$e=s(g7);tge=n(K$e,"STRONG",{});var kut=s(tge);u$o=r(kut,"xlm-prophetnet"),kut.forEach(t),b$o=r(K$e," \u2014 "),YG=n(K$e,"A",{href:!0});var Sut=s(YG);v$o=r(Sut,"XLMProphetNetForCausalLM"),Sut.forEach(t),F$o=r(K$e," (XLM-ProphetNet model)"),K$e.forEach(t),T$o=i(Q),h7=n(Q,"LI",{});var Z$e=s(h7);age=n(Z$e,"STRONG",{});var Rut=s(age);M$o=r(Rut,"xlm-roberta"),Rut.forEach(t),E$o=r(Z$e," \u2014 "),KG=n(Z$e,"A",{href:!0});var Put=s(KG);C$o=r(Put,"XLMRobertaForCausalLM"),Put.forEach(t),w$o=r(Z$e," (XLM-RoBERTa model)"),Z$e.forEach(t),A$o=i(Q),p7=n(Q,"LI",{});var eke=s(p7);nge=n(eke,"STRONG",{});var But=s(nge);L$o=r(But,"xlm-roberta-xl"),But.forEach(t),y$o=r(eke," \u2014 "),ZG=n(eke,"A",{href:!0});var Nut=s(ZG);x$o=r(Nut,"XLMRobertaXLForCausalLM"),Nut.forEach(t),$$o=r(eke," (XLM-RoBERTa-XL model)"),eke.forEach(t),k$o=i(Q),_7=n(Q,"LI",{});var oke=s(_7);sge=n(oke,"STRONG",{});var Iut=s(sge);S$o=r(Iut,"xlnet"),Iut.forEach(t),R$o=r(oke," \u2014 "),eO=n(oke,"A",{href:!0});var qut=s(eO);P$o=r(qut,"XLNetLMHeadModel"),qut.forEach(t),B$o=r(oke," (XLNet model)"),oke.forEach(t),Q.forEach(t),N$o=i(sa),u7=n(sa,"P",{});var rke=s(u7);I$o=r(rke,"The model is set in evaluation mode by default using "),lge=n(rke,"CODE",{});var jut=s(lge);q$o=r(jut,"model.eval()"),jut.forEach(t),j$o=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=n(rke,"CODE",{});var Dut=s(ige);D$o=r(Dut,"model.train()"),Dut.forEach(t),rke.forEach(t),G$o=i(sa),T(b7.$$.fragment,sa),sa.forEach(t),el.forEach(t),IOe=i(f),zi=n(f,"H2",{class:!0});var VXe=s(zi);v7=n(VXe,"A",{id:!0,class:!0,href:!0});var Gut=s(v7);dge=n(Gut,"SPAN",{});var Out=s(dge);T(CL.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),O$o=i(VXe),cge=n(VXe,"SPAN",{});var Vut=s(cge);V$o=r(Vut,"AutoModelForMaskedLM"),Vut.forEach(t),VXe.forEach(t),qOe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(wL.$$.fragment,ol),X$o=i(ol),Qi=n(ol,"P",{});var Voe=s(Qi);z$o=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oO=n(Voe,"A",{href:!0});var Xut=s(oO);Q$o=r(Xut,"from_pretrained()"),Xut.forEach(t),W$o=r(Voe," class method or the "),rO=n(Voe,"A",{href:!0});var zut=s(rO);H$o=r(zut,"from_config()"),zut.forEach(t),U$o=r(Voe,` class
method.`),Voe.forEach(t),J$o=i(ol),AL=n(ol,"P",{});var XXe=s(AL);Y$o=r(XXe,"This class cannot be instantiated directly using "),fge=n(XXe,"CODE",{});var Qut=s(fge);K$o=r(Qut,"__init__()"),Qut.forEach(t),Z$o=r(XXe," (throws an error)."),XXe.forEach(t),eko=i(ol),it=n(ol,"DIV",{class:!0});var zw=s(it);T(LL.$$.fragment,zw),oko=i(zw),mge=n(zw,"P",{});var Wut=s(mge);rko=r(Wut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wut.forEach(t),tko=i(zw),Wi=n(zw,"P",{});var Xoe=s(Wi);ako=r(Xoe,`Note:
Loading a model from its configuration file does `),gge=n(Xoe,"STRONG",{});var Hut=s(gge);nko=r(Hut,"not"),Hut.forEach(t),sko=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(Xoe,"A",{href:!0});var Uut=s(tO);lko=r(Uut,"from_pretrained()"),Uut.forEach(t),iko=r(Xoe," to load the model weights."),Xoe.forEach(t),dko=i(zw),T(F7.$$.fragment,zw),zw.forEach(t),cko=i(ol),Ze=n(ol,"DIV",{class:!0});var la=s(Ze);T(yL.$$.fragment,la),fko=i(la),hge=n(la,"P",{});var Jut=s(hge);mko=r(Jut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Jut.forEach(t),gko=i(la),Na=n(la,"P",{});var Qw=s(Na);hko=r(Qw,"The model class to instantiate is selected based on the "),pge=n(Qw,"CODE",{});var Yut=s(pge);pko=r(Yut,"model_type"),Yut.forEach(t),_ko=r(Qw,` property of the config object (either
passed as an argument or loaded from `),_ge=n(Qw,"CODE",{});var Kut=s(_ge);uko=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),bko=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(Qw,"CODE",{});var Zut=s(uge);vko=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),Fko=r(Qw,":"),Qw.forEach(t),Tko=i(la),W=n(la,"UL",{});var U=s(W);T7=n(U,"LI",{});var tke=s(T7);bge=n(tke,"STRONG",{});var e1t=s(bge);Mko=r(e1t,"albert"),e1t.forEach(t),Eko=r(tke," \u2014 "),aO=n(tke,"A",{href:!0});var o1t=s(aO);Cko=r(o1t,"AlbertForMaskedLM"),o1t.forEach(t),wko=r(tke," (ALBERT model)"),tke.forEach(t),Ako=i(U),M7=n(U,"LI",{});var ake=s(M7);vge=n(ake,"STRONG",{});var r1t=s(vge);Lko=r(r1t,"bart"),r1t.forEach(t),yko=r(ake," \u2014 "),nO=n(ake,"A",{href:!0});var t1t=s(nO);xko=r(t1t,"BartForConditionalGeneration"),t1t.forEach(t),$ko=r(ake," (BART model)"),ake.forEach(t),kko=i(U),E7=n(U,"LI",{});var nke=s(E7);Fge=n(nke,"STRONG",{});var a1t=s(Fge);Sko=r(a1t,"bert"),a1t.forEach(t),Rko=r(nke," \u2014 "),sO=n(nke,"A",{href:!0});var n1t=s(sO);Pko=r(n1t,"BertForMaskedLM"),n1t.forEach(t),Bko=r(nke," (BERT model)"),nke.forEach(t),Nko=i(U),C7=n(U,"LI",{});var ske=s(C7);Tge=n(ske,"STRONG",{});var s1t=s(Tge);Iko=r(s1t,"big_bird"),s1t.forEach(t),qko=r(ske," \u2014 "),lO=n(ske,"A",{href:!0});var l1t=s(lO);jko=r(l1t,"BigBirdForMaskedLM"),l1t.forEach(t),Dko=r(ske," (BigBird model)"),ske.forEach(t),Gko=i(U),w7=n(U,"LI",{});var lke=s(w7);Mge=n(lke,"STRONG",{});var i1t=s(Mge);Oko=r(i1t,"camembert"),i1t.forEach(t),Vko=r(lke," \u2014 "),iO=n(lke,"A",{href:!0});var d1t=s(iO);Xko=r(d1t,"CamembertForMaskedLM"),d1t.forEach(t),zko=r(lke," (CamemBERT model)"),lke.forEach(t),Qko=i(U),A7=n(U,"LI",{});var ike=s(A7);Ege=n(ike,"STRONG",{});var c1t=s(Ege);Wko=r(c1t,"convbert"),c1t.forEach(t),Hko=r(ike," \u2014 "),dO=n(ike,"A",{href:!0});var f1t=s(dO);Uko=r(f1t,"ConvBertForMaskedLM"),f1t.forEach(t),Jko=r(ike," (ConvBERT model)"),ike.forEach(t),Yko=i(U),L7=n(U,"LI",{});var dke=s(L7);Cge=n(dke,"STRONG",{});var m1t=s(Cge);Kko=r(m1t,"data2vec-text"),m1t.forEach(t),Zko=r(dke," \u2014 "),cO=n(dke,"A",{href:!0});var g1t=s(cO);eSo=r(g1t,"Data2VecTextForMaskedLM"),g1t.forEach(t),oSo=r(dke," (Data2VecText model)"),dke.forEach(t),rSo=i(U),y7=n(U,"LI",{});var cke=s(y7);wge=n(cke,"STRONG",{});var h1t=s(wge);tSo=r(h1t,"deberta"),h1t.forEach(t),aSo=r(cke," \u2014 "),fO=n(cke,"A",{href:!0});var p1t=s(fO);nSo=r(p1t,"DebertaForMaskedLM"),p1t.forEach(t),sSo=r(cke," (DeBERTa model)"),cke.forEach(t),lSo=i(U),x7=n(U,"LI",{});var fke=s(x7);Age=n(fke,"STRONG",{});var _1t=s(Age);iSo=r(_1t,"deberta-v2"),_1t.forEach(t),dSo=r(fke," \u2014 "),mO=n(fke,"A",{href:!0});var u1t=s(mO);cSo=r(u1t,"DebertaV2ForMaskedLM"),u1t.forEach(t),fSo=r(fke," (DeBERTa-v2 model)"),fke.forEach(t),mSo=i(U),$7=n(U,"LI",{});var mke=s($7);Lge=n(mke,"STRONG",{});var b1t=s(Lge);gSo=r(b1t,"distilbert"),b1t.forEach(t),hSo=r(mke," \u2014 "),gO=n(mke,"A",{href:!0});var v1t=s(gO);pSo=r(v1t,"DistilBertForMaskedLM"),v1t.forEach(t),_So=r(mke," (DistilBERT model)"),mke.forEach(t),uSo=i(U),k7=n(U,"LI",{});var gke=s(k7);yge=n(gke,"STRONG",{});var F1t=s(yge);bSo=r(F1t,"electra"),F1t.forEach(t),vSo=r(gke," \u2014 "),hO=n(gke,"A",{href:!0});var T1t=s(hO);FSo=r(T1t,"ElectraForMaskedLM"),T1t.forEach(t),TSo=r(gke," (ELECTRA model)"),gke.forEach(t),MSo=i(U),S7=n(U,"LI",{});var hke=s(S7);xge=n(hke,"STRONG",{});var M1t=s(xge);ESo=r(M1t,"flaubert"),M1t.forEach(t),CSo=r(hke," \u2014 "),pO=n(hke,"A",{href:!0});var E1t=s(pO);wSo=r(E1t,"FlaubertWithLMHeadModel"),E1t.forEach(t),ASo=r(hke," (FlauBERT model)"),hke.forEach(t),LSo=i(U),R7=n(U,"LI",{});var pke=s(R7);$ge=n(pke,"STRONG",{});var C1t=s($ge);ySo=r(C1t,"fnet"),C1t.forEach(t),xSo=r(pke," \u2014 "),_O=n(pke,"A",{href:!0});var w1t=s(_O);$So=r(w1t,"FNetForMaskedLM"),w1t.forEach(t),kSo=r(pke," (FNet model)"),pke.forEach(t),SSo=i(U),P7=n(U,"LI",{});var _ke=s(P7);kge=n(_ke,"STRONG",{});var A1t=s(kge);RSo=r(A1t,"funnel"),A1t.forEach(t),PSo=r(_ke," \u2014 "),uO=n(_ke,"A",{href:!0});var L1t=s(uO);BSo=r(L1t,"FunnelForMaskedLM"),L1t.forEach(t),NSo=r(_ke," (Funnel Transformer model)"),_ke.forEach(t),ISo=i(U),B7=n(U,"LI",{});var uke=s(B7);Sge=n(uke,"STRONG",{});var y1t=s(Sge);qSo=r(y1t,"ibert"),y1t.forEach(t),jSo=r(uke," \u2014 "),bO=n(uke,"A",{href:!0});var x1t=s(bO);DSo=r(x1t,"IBertForMaskedLM"),x1t.forEach(t),GSo=r(uke," (I-BERT model)"),uke.forEach(t),OSo=i(U),N7=n(U,"LI",{});var bke=s(N7);Rge=n(bke,"STRONG",{});var $1t=s(Rge);VSo=r($1t,"layoutlm"),$1t.forEach(t),XSo=r(bke," \u2014 "),vO=n(bke,"A",{href:!0});var k1t=s(vO);zSo=r(k1t,"LayoutLMForMaskedLM"),k1t.forEach(t),QSo=r(bke," (LayoutLM model)"),bke.forEach(t),WSo=i(U),I7=n(U,"LI",{});var vke=s(I7);Pge=n(vke,"STRONG",{});var S1t=s(Pge);HSo=r(S1t,"longformer"),S1t.forEach(t),USo=r(vke," \u2014 "),FO=n(vke,"A",{href:!0});var R1t=s(FO);JSo=r(R1t,"LongformerForMaskedLM"),R1t.forEach(t),YSo=r(vke," (Longformer model)"),vke.forEach(t),KSo=i(U),q7=n(U,"LI",{});var Fke=s(q7);Bge=n(Fke,"STRONG",{});var P1t=s(Bge);ZSo=r(P1t,"luke"),P1t.forEach(t),eRo=r(Fke," \u2014 "),TO=n(Fke,"A",{href:!0});var B1t=s(TO);oRo=r(B1t,"LukeForMaskedLM"),B1t.forEach(t),rRo=r(Fke," (LUKE model)"),Fke.forEach(t),tRo=i(U),j7=n(U,"LI",{});var Tke=s(j7);Nge=n(Tke,"STRONG",{});var N1t=s(Nge);aRo=r(N1t,"mbart"),N1t.forEach(t),nRo=r(Tke," \u2014 "),MO=n(Tke,"A",{href:!0});var I1t=s(MO);sRo=r(I1t,"MBartForConditionalGeneration"),I1t.forEach(t),lRo=r(Tke," (mBART model)"),Tke.forEach(t),iRo=i(U),D7=n(U,"LI",{});var Mke=s(D7);Ige=n(Mke,"STRONG",{});var q1t=s(Ige);dRo=r(q1t,"megatron-bert"),q1t.forEach(t),cRo=r(Mke," \u2014 "),EO=n(Mke,"A",{href:!0});var j1t=s(EO);fRo=r(j1t,"MegatronBertForMaskedLM"),j1t.forEach(t),mRo=r(Mke," (Megatron-BERT model)"),Mke.forEach(t),gRo=i(U),G7=n(U,"LI",{});var Eke=s(G7);qge=n(Eke,"STRONG",{});var D1t=s(qge);hRo=r(D1t,"mobilebert"),D1t.forEach(t),pRo=r(Eke," \u2014 "),CO=n(Eke,"A",{href:!0});var G1t=s(CO);_Ro=r(G1t,"MobileBertForMaskedLM"),G1t.forEach(t),uRo=r(Eke," (MobileBERT model)"),Eke.forEach(t),bRo=i(U),O7=n(U,"LI",{});var Cke=s(O7);jge=n(Cke,"STRONG",{});var O1t=s(jge);vRo=r(O1t,"mpnet"),O1t.forEach(t),FRo=r(Cke," \u2014 "),wO=n(Cke,"A",{href:!0});var V1t=s(wO);TRo=r(V1t,"MPNetForMaskedLM"),V1t.forEach(t),MRo=r(Cke," (MPNet model)"),Cke.forEach(t),ERo=i(U),V7=n(U,"LI",{});var wke=s(V7);Dge=n(wke,"STRONG",{});var X1t=s(Dge);CRo=r(X1t,"nezha"),X1t.forEach(t),wRo=r(wke," \u2014 "),AO=n(wke,"A",{href:!0});var z1t=s(AO);ARo=r(z1t,"NezhaForMaskedLM"),z1t.forEach(t),LRo=r(wke," (Nezha model)"),wke.forEach(t),yRo=i(U),X7=n(U,"LI",{});var Ake=s(X7);Gge=n(Ake,"STRONG",{});var Q1t=s(Gge);xRo=r(Q1t,"nystromformer"),Q1t.forEach(t),$Ro=r(Ake," \u2014 "),LO=n(Ake,"A",{href:!0});var W1t=s(LO);kRo=r(W1t,"NystromformerForMaskedLM"),W1t.forEach(t),SRo=r(Ake," (Nystr\xF6mformer model)"),Ake.forEach(t),RRo=i(U),z7=n(U,"LI",{});var Lke=s(z7);Oge=n(Lke,"STRONG",{});var H1t=s(Oge);PRo=r(H1t,"perceiver"),H1t.forEach(t),BRo=r(Lke," \u2014 "),yO=n(Lke,"A",{href:!0});var U1t=s(yO);NRo=r(U1t,"PerceiverForMaskedLM"),U1t.forEach(t),IRo=r(Lke," (Perceiver model)"),Lke.forEach(t),qRo=i(U),Q7=n(U,"LI",{});var yke=s(Q7);Vge=n(yke,"STRONG",{});var J1t=s(Vge);jRo=r(J1t,"qdqbert"),J1t.forEach(t),DRo=r(yke," \u2014 "),xO=n(yke,"A",{href:!0});var Y1t=s(xO);GRo=r(Y1t,"QDQBertForMaskedLM"),Y1t.forEach(t),ORo=r(yke," (QDQBert model)"),yke.forEach(t),VRo=i(U),W7=n(U,"LI",{});var xke=s(W7);Xge=n(xke,"STRONG",{});var K1t=s(Xge);XRo=r(K1t,"reformer"),K1t.forEach(t),zRo=r(xke," \u2014 "),$O=n(xke,"A",{href:!0});var Z1t=s($O);QRo=r(Z1t,"ReformerForMaskedLM"),Z1t.forEach(t),WRo=r(xke," (Reformer model)"),xke.forEach(t),HRo=i(U),H7=n(U,"LI",{});var $ke=s(H7);zge=n($ke,"STRONG",{});var e7t=s(zge);URo=r(e7t,"rembert"),e7t.forEach(t),JRo=r($ke," \u2014 "),kO=n($ke,"A",{href:!0});var o7t=s(kO);YRo=r(o7t,"RemBertForMaskedLM"),o7t.forEach(t),KRo=r($ke," (RemBERT model)"),$ke.forEach(t),ZRo=i(U),U7=n(U,"LI",{});var kke=s(U7);Qge=n(kke,"STRONG",{});var r7t=s(Qge);ePo=r(r7t,"roberta"),r7t.forEach(t),oPo=r(kke," \u2014 "),SO=n(kke,"A",{href:!0});var t7t=s(SO);rPo=r(t7t,"RobertaForMaskedLM"),t7t.forEach(t),tPo=r(kke," (RoBERTa model)"),kke.forEach(t),aPo=i(U),J7=n(U,"LI",{});var Ske=s(J7);Wge=n(Ske,"STRONG",{});var a7t=s(Wge);nPo=r(a7t,"roformer"),a7t.forEach(t),sPo=r(Ske," \u2014 "),RO=n(Ske,"A",{href:!0});var n7t=s(RO);lPo=r(n7t,"RoFormerForMaskedLM"),n7t.forEach(t),iPo=r(Ske," (RoFormer model)"),Ske.forEach(t),dPo=i(U),Y7=n(U,"LI",{});var Rke=s(Y7);Hge=n(Rke,"STRONG",{});var s7t=s(Hge);cPo=r(s7t,"squeezebert"),s7t.forEach(t),fPo=r(Rke," \u2014 "),PO=n(Rke,"A",{href:!0});var l7t=s(PO);mPo=r(l7t,"SqueezeBertForMaskedLM"),l7t.forEach(t),gPo=r(Rke," (SqueezeBERT model)"),Rke.forEach(t),hPo=i(U),K7=n(U,"LI",{});var Pke=s(K7);Uge=n(Pke,"STRONG",{});var i7t=s(Uge);pPo=r(i7t,"tapas"),i7t.forEach(t),_Po=r(Pke," \u2014 "),BO=n(Pke,"A",{href:!0});var d7t=s(BO);uPo=r(d7t,"TapasForMaskedLM"),d7t.forEach(t),bPo=r(Pke," (TAPAS model)"),Pke.forEach(t),vPo=i(U),Z7=n(U,"LI",{});var Bke=s(Z7);Jge=n(Bke,"STRONG",{});var c7t=s(Jge);FPo=r(c7t,"wav2vec2"),c7t.forEach(t),TPo=r(Bke," \u2014 "),Yge=n(Bke,"CODE",{});var f7t=s(Yge);MPo=r(f7t,"Wav2Vec2ForMaskedLM"),f7t.forEach(t),EPo=r(Bke," (Wav2Vec2 model)"),Bke.forEach(t),CPo=i(U),e9=n(U,"LI",{});var Nke=s(e9);Kge=n(Nke,"STRONG",{});var m7t=s(Kge);wPo=r(m7t,"xlm"),m7t.forEach(t),APo=r(Nke," \u2014 "),NO=n(Nke,"A",{href:!0});var g7t=s(NO);LPo=r(g7t,"XLMWithLMHeadModel"),g7t.forEach(t),yPo=r(Nke," (XLM model)"),Nke.forEach(t),xPo=i(U),o9=n(U,"LI",{});var Ike=s(o9);Zge=n(Ike,"STRONG",{});var h7t=s(Zge);$Po=r(h7t,"xlm-roberta"),h7t.forEach(t),kPo=r(Ike," \u2014 "),IO=n(Ike,"A",{href:!0});var p7t=s(IO);SPo=r(p7t,"XLMRobertaForMaskedLM"),p7t.forEach(t),RPo=r(Ike," (XLM-RoBERTa model)"),Ike.forEach(t),PPo=i(U),r9=n(U,"LI",{});var qke=s(r9);ehe=n(qke,"STRONG",{});var _7t=s(ehe);BPo=r(_7t,"xlm-roberta-xl"),_7t.forEach(t),NPo=r(qke," \u2014 "),qO=n(qke,"A",{href:!0});var u7t=s(qO);IPo=r(u7t,"XLMRobertaXLForMaskedLM"),u7t.forEach(t),qPo=r(qke," (XLM-RoBERTa-XL model)"),qke.forEach(t),jPo=i(U),t9=n(U,"LI",{});var jke=s(t9);ohe=n(jke,"STRONG",{});var b7t=s(ohe);DPo=r(b7t,"yoso"),b7t.forEach(t),GPo=r(jke," \u2014 "),jO=n(jke,"A",{href:!0});var v7t=s(jO);OPo=r(v7t,"YosoForMaskedLM"),v7t.forEach(t),VPo=r(jke," (YOSO model)"),jke.forEach(t),U.forEach(t),XPo=i(la),a9=n(la,"P",{});var Dke=s(a9);zPo=r(Dke,"The model is set in evaluation mode by default using "),rhe=n(Dke,"CODE",{});var F7t=s(rhe);QPo=r(F7t,"model.eval()"),F7t.forEach(t),WPo=r(Dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(Dke,"CODE",{});var T7t=s(the);HPo=r(T7t,"model.train()"),T7t.forEach(t),Dke.forEach(t),UPo=i(la),T(n9.$$.fragment,la),la.forEach(t),ol.forEach(t),jOe=i(f),Hi=n(f,"H2",{class:!0});var zXe=s(Hi);s9=n(zXe,"A",{id:!0,class:!0,href:!0});var M7t=s(s9);ahe=n(M7t,"SPAN",{});var E7t=s(ahe);T(xL.$$.fragment,E7t),E7t.forEach(t),M7t.forEach(t),JPo=i(zXe),nhe=n(zXe,"SPAN",{});var C7t=s(nhe);YPo=r(C7t,"AutoModelForSeq2SeqLM"),C7t.forEach(t),zXe.forEach(t),DOe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T($L.$$.fragment,rl),KPo=i(rl),Ui=n(rl,"P",{});var zoe=s(Ui);ZPo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DO=n(zoe,"A",{href:!0});var w7t=s(DO);eBo=r(w7t,"from_pretrained()"),w7t.forEach(t),oBo=r(zoe," class method or the "),GO=n(zoe,"A",{href:!0});var A7t=s(GO);rBo=r(A7t,"from_config()"),A7t.forEach(t),tBo=r(zoe,` class
method.`),zoe.forEach(t),aBo=i(rl),kL=n(rl,"P",{});var QXe=s(kL);nBo=r(QXe,"This class cannot be instantiated directly using "),she=n(QXe,"CODE",{});var L7t=s(she);sBo=r(L7t,"__init__()"),L7t.forEach(t),lBo=r(QXe," (throws an error)."),QXe.forEach(t),iBo=i(rl),dt=n(rl,"DIV",{class:!0});var Ww=s(dt);T(SL.$$.fragment,Ww),dBo=i(Ww),lhe=n(Ww,"P",{});var y7t=s(lhe);cBo=r(y7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y7t.forEach(t),fBo=i(Ww),Ji=n(Ww,"P",{});var Qoe=s(Ji);mBo=r(Qoe,`Note:
Loading a model from its configuration file does `),ihe=n(Qoe,"STRONG",{});var x7t=s(ihe);gBo=r(x7t,"not"),x7t.forEach(t),hBo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=n(Qoe,"A",{href:!0});var $7t=s(OO);pBo=r($7t,"from_pretrained()"),$7t.forEach(t),_Bo=r(Qoe," to load the model weights."),Qoe.forEach(t),uBo=i(Ww),T(l9.$$.fragment,Ww),Ww.forEach(t),bBo=i(rl),eo=n(rl,"DIV",{class:!0});var ia=s(eo);T(RL.$$.fragment,ia),vBo=i(ia),dhe=n(ia,"P",{});var k7t=s(dhe);FBo=r(k7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k7t.forEach(t),TBo=i(ia),Ia=n(ia,"P",{});var Hw=s(Ia);MBo=r(Hw,"The model class to instantiate is selected based on the "),che=n(Hw,"CODE",{});var S7t=s(che);EBo=r(S7t,"model_type"),S7t.forEach(t),CBo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),fhe=n(Hw,"CODE",{});var R7t=s(fhe);wBo=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),ABo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(Hw,"CODE",{});var P7t=s(mhe);LBo=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),yBo=r(Hw,":"),Hw.forEach(t),xBo=i(ia),pe=n(ia,"UL",{});var ve=s(pe);i9=n(ve,"LI",{});var Gke=s(i9);ghe=n(Gke,"STRONG",{});var B7t=s(ghe);$Bo=r(B7t,"bart"),B7t.forEach(t),kBo=r(Gke," \u2014 "),VO=n(Gke,"A",{href:!0});var N7t=s(VO);SBo=r(N7t,"BartForConditionalGeneration"),N7t.forEach(t),RBo=r(Gke," (BART model)"),Gke.forEach(t),PBo=i(ve),d9=n(ve,"LI",{});var Oke=s(d9);hhe=n(Oke,"STRONG",{});var I7t=s(hhe);BBo=r(I7t,"bigbird_pegasus"),I7t.forEach(t),NBo=r(Oke," \u2014 "),XO=n(Oke,"A",{href:!0});var q7t=s(XO);IBo=r(q7t,"BigBirdPegasusForConditionalGeneration"),q7t.forEach(t),qBo=r(Oke," (BigBird-Pegasus model)"),Oke.forEach(t),jBo=i(ve),c9=n(ve,"LI",{});var Vke=s(c9);phe=n(Vke,"STRONG",{});var j7t=s(phe);DBo=r(j7t,"blenderbot"),j7t.forEach(t),GBo=r(Vke," \u2014 "),zO=n(Vke,"A",{href:!0});var D7t=s(zO);OBo=r(D7t,"BlenderbotForConditionalGeneration"),D7t.forEach(t),VBo=r(Vke," (Blenderbot model)"),Vke.forEach(t),XBo=i(ve),f9=n(ve,"LI",{});var Xke=s(f9);_he=n(Xke,"STRONG",{});var G7t=s(_he);zBo=r(G7t,"blenderbot-small"),G7t.forEach(t),QBo=r(Xke," \u2014 "),QO=n(Xke,"A",{href:!0});var O7t=s(QO);WBo=r(O7t,"BlenderbotSmallForConditionalGeneration"),O7t.forEach(t),HBo=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),UBo=i(ve),m9=n(ve,"LI",{});var zke=s(m9);uhe=n(zke,"STRONG",{});var V7t=s(uhe);JBo=r(V7t,"encoder-decoder"),V7t.forEach(t),YBo=r(zke," \u2014 "),WO=n(zke,"A",{href:!0});var X7t=s(WO);KBo=r(X7t,"EncoderDecoderModel"),X7t.forEach(t),ZBo=r(zke," (Encoder decoder model)"),zke.forEach(t),eNo=i(ve),g9=n(ve,"LI",{});var Qke=s(g9);bhe=n(Qke,"STRONG",{});var z7t=s(bhe);oNo=r(z7t,"fsmt"),z7t.forEach(t),rNo=r(Qke," \u2014 "),HO=n(Qke,"A",{href:!0});var Q7t=s(HO);tNo=r(Q7t,"FSMTForConditionalGeneration"),Q7t.forEach(t),aNo=r(Qke," (FairSeq Machine-Translation model)"),Qke.forEach(t),nNo=i(ve),h9=n(ve,"LI",{});var Wke=s(h9);vhe=n(Wke,"STRONG",{});var W7t=s(vhe);sNo=r(W7t,"led"),W7t.forEach(t),lNo=r(Wke," \u2014 "),UO=n(Wke,"A",{href:!0});var H7t=s(UO);iNo=r(H7t,"LEDForConditionalGeneration"),H7t.forEach(t),dNo=r(Wke," (LED model)"),Wke.forEach(t),cNo=i(ve),p9=n(ve,"LI",{});var Hke=s(p9);Fhe=n(Hke,"STRONG",{});var U7t=s(Fhe);fNo=r(U7t,"longt5"),U7t.forEach(t),mNo=r(Hke," \u2014 "),JO=n(Hke,"A",{href:!0});var J7t=s(JO);gNo=r(J7t,"LongT5ForConditionalGeneration"),J7t.forEach(t),hNo=r(Hke," (LongT5 model)"),Hke.forEach(t),pNo=i(ve),_9=n(ve,"LI",{});var Uke=s(_9);The=n(Uke,"STRONG",{});var Y7t=s(The);_No=r(Y7t,"m2m_100"),Y7t.forEach(t),uNo=r(Uke," \u2014 "),YO=n(Uke,"A",{href:!0});var K7t=s(YO);bNo=r(K7t,"M2M100ForConditionalGeneration"),K7t.forEach(t),vNo=r(Uke," (M2M100 model)"),Uke.forEach(t),FNo=i(ve),u9=n(ve,"LI",{});var Jke=s(u9);Mhe=n(Jke,"STRONG",{});var Z7t=s(Mhe);TNo=r(Z7t,"marian"),Z7t.forEach(t),MNo=r(Jke," \u2014 "),KO=n(Jke,"A",{href:!0});var e9t=s(KO);ENo=r(e9t,"MarianMTModel"),e9t.forEach(t),CNo=r(Jke," (Marian model)"),Jke.forEach(t),wNo=i(ve),b9=n(ve,"LI",{});var Yke=s(b9);Ehe=n(Yke,"STRONG",{});var o9t=s(Ehe);ANo=r(o9t,"mbart"),o9t.forEach(t),LNo=r(Yke," \u2014 "),ZO=n(Yke,"A",{href:!0});var r9t=s(ZO);yNo=r(r9t,"MBartForConditionalGeneration"),r9t.forEach(t),xNo=r(Yke," (mBART model)"),Yke.forEach(t),$No=i(ve),v9=n(ve,"LI",{});var Kke=s(v9);Che=n(Kke,"STRONG",{});var t9t=s(Che);kNo=r(t9t,"mt5"),t9t.forEach(t),SNo=r(Kke," \u2014 "),eV=n(Kke,"A",{href:!0});var a9t=s(eV);RNo=r(a9t,"MT5ForConditionalGeneration"),a9t.forEach(t),PNo=r(Kke," (MT5 model)"),Kke.forEach(t),BNo=i(ve),F9=n(ve,"LI",{});var Zke=s(F9);whe=n(Zke,"STRONG",{});var n9t=s(whe);NNo=r(n9t,"pegasus"),n9t.forEach(t),INo=r(Zke," \u2014 "),oV=n(Zke,"A",{href:!0});var s9t=s(oV);qNo=r(s9t,"PegasusForConditionalGeneration"),s9t.forEach(t),jNo=r(Zke," (Pegasus model)"),Zke.forEach(t),DNo=i(ve),T9=n(ve,"LI",{});var eSe=s(T9);Ahe=n(eSe,"STRONG",{});var l9t=s(Ahe);GNo=r(l9t,"plbart"),l9t.forEach(t),ONo=r(eSe," \u2014 "),rV=n(eSe,"A",{href:!0});var i9t=s(rV);VNo=r(i9t,"PLBartForConditionalGeneration"),i9t.forEach(t),XNo=r(eSe," (PLBart model)"),eSe.forEach(t),zNo=i(ve),M9=n(ve,"LI",{});var oSe=s(M9);Lhe=n(oSe,"STRONG",{});var d9t=s(Lhe);QNo=r(d9t,"prophetnet"),d9t.forEach(t),WNo=r(oSe," \u2014 "),tV=n(oSe,"A",{href:!0});var c9t=s(tV);HNo=r(c9t,"ProphetNetForConditionalGeneration"),c9t.forEach(t),UNo=r(oSe," (ProphetNet model)"),oSe.forEach(t),JNo=i(ve),E9=n(ve,"LI",{});var rSe=s(E9);yhe=n(rSe,"STRONG",{});var f9t=s(yhe);YNo=r(f9t,"t5"),f9t.forEach(t),KNo=r(rSe," \u2014 "),aV=n(rSe,"A",{href:!0});var m9t=s(aV);ZNo=r(m9t,"T5ForConditionalGeneration"),m9t.forEach(t),eIo=r(rSe," (T5 model)"),rSe.forEach(t),oIo=i(ve),C9=n(ve,"LI",{});var tSe=s(C9);xhe=n(tSe,"STRONG",{});var g9t=s(xhe);rIo=r(g9t,"xlm-prophetnet"),g9t.forEach(t),tIo=r(tSe," \u2014 "),nV=n(tSe,"A",{href:!0});var h9t=s(nV);aIo=r(h9t,"XLMProphetNetForConditionalGeneration"),h9t.forEach(t),nIo=r(tSe," (XLM-ProphetNet model)"),tSe.forEach(t),ve.forEach(t),sIo=i(ia),w9=n(ia,"P",{});var aSe=s(w9);lIo=r(aSe,"The model is set in evaluation mode by default using "),$he=n(aSe,"CODE",{});var p9t=s($he);iIo=r(p9t,"model.eval()"),p9t.forEach(t),dIo=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(aSe,"CODE",{});var _9t=s(khe);cIo=r(_9t,"model.train()"),_9t.forEach(t),aSe.forEach(t),fIo=i(ia),T(A9.$$.fragment,ia),ia.forEach(t),rl.forEach(t),GOe=i(f),Yi=n(f,"H2",{class:!0});var WXe=s(Yi);L9=n(WXe,"A",{id:!0,class:!0,href:!0});var u9t=s(L9);She=n(u9t,"SPAN",{});var b9t=s(She);T(PL.$$.fragment,b9t),b9t.forEach(t),u9t.forEach(t),mIo=i(WXe),Rhe=n(WXe,"SPAN",{});var v9t=s(Rhe);gIo=r(v9t,"AutoModelForSequenceClassification"),v9t.forEach(t),WXe.forEach(t),OOe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(BL.$$.fragment,tl),hIo=i(tl),Ki=n(tl,"P",{});var Woe=s(Ki);pIo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sV=n(Woe,"A",{href:!0});var F9t=s(sV);_Io=r(F9t,"from_pretrained()"),F9t.forEach(t),uIo=r(Woe," class method or the "),lV=n(Woe,"A",{href:!0});var T9t=s(lV);bIo=r(T9t,"from_config()"),T9t.forEach(t),vIo=r(Woe,` class
method.`),Woe.forEach(t),FIo=i(tl),NL=n(tl,"P",{});var HXe=s(NL);TIo=r(HXe,"This class cannot be instantiated directly using "),Phe=n(HXe,"CODE",{});var M9t=s(Phe);MIo=r(M9t,"__init__()"),M9t.forEach(t),EIo=r(HXe," (throws an error)."),HXe.forEach(t),CIo=i(tl),ct=n(tl,"DIV",{class:!0});var Uw=s(ct);T(IL.$$.fragment,Uw),wIo=i(Uw),Bhe=n(Uw,"P",{});var E9t=s(Bhe);AIo=r(E9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E9t.forEach(t),LIo=i(Uw),Zi=n(Uw,"P",{});var Hoe=s(Zi);yIo=r(Hoe,`Note:
Loading a model from its configuration file does `),Nhe=n(Hoe,"STRONG",{});var C9t=s(Nhe);xIo=r(C9t,"not"),C9t.forEach(t),$Io=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(Hoe,"A",{href:!0});var w9t=s(iV);kIo=r(w9t,"from_pretrained()"),w9t.forEach(t),SIo=r(Hoe," to load the model weights."),Hoe.forEach(t),RIo=i(Uw),T(y9.$$.fragment,Uw),Uw.forEach(t),PIo=i(tl),oo=n(tl,"DIV",{class:!0});var da=s(oo);T(qL.$$.fragment,da),BIo=i(da),Ihe=n(da,"P",{});var A9t=s(Ihe);NIo=r(A9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A9t.forEach(t),IIo=i(da),qa=n(da,"P",{});var Jw=s(qa);qIo=r(Jw,"The model class to instantiate is selected based on the "),qhe=n(Jw,"CODE",{});var L9t=s(qhe);jIo=r(L9t,"model_type"),L9t.forEach(t),DIo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),jhe=n(Jw,"CODE",{});var y9t=s(jhe);GIo=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),OIo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(Jw,"CODE",{});var x9t=s(Dhe);VIo=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),XIo=r(Jw,":"),Jw.forEach(t),zIo=i(da),I=n(da,"UL",{});var q=s(I);x9=n(q,"LI",{});var nSe=s(x9);Ghe=n(nSe,"STRONG",{});var $9t=s(Ghe);QIo=r($9t,"albert"),$9t.forEach(t),WIo=r(nSe," \u2014 "),dV=n(nSe,"A",{href:!0});var k9t=s(dV);HIo=r(k9t,"AlbertForSequenceClassification"),k9t.forEach(t),UIo=r(nSe," (ALBERT model)"),nSe.forEach(t),JIo=i(q),$9=n(q,"LI",{});var sSe=s($9);Ohe=n(sSe,"STRONG",{});var S9t=s(Ohe);YIo=r(S9t,"bart"),S9t.forEach(t),KIo=r(sSe," \u2014 "),cV=n(sSe,"A",{href:!0});var R9t=s(cV);ZIo=r(R9t,"BartForSequenceClassification"),R9t.forEach(t),eqo=r(sSe," (BART model)"),sSe.forEach(t),oqo=i(q),k9=n(q,"LI",{});var lSe=s(k9);Vhe=n(lSe,"STRONG",{});var P9t=s(Vhe);rqo=r(P9t,"bert"),P9t.forEach(t),tqo=r(lSe," \u2014 "),fV=n(lSe,"A",{href:!0});var B9t=s(fV);aqo=r(B9t,"BertForSequenceClassification"),B9t.forEach(t),nqo=r(lSe," (BERT model)"),lSe.forEach(t),sqo=i(q),S9=n(q,"LI",{});var iSe=s(S9);Xhe=n(iSe,"STRONG",{});var N9t=s(Xhe);lqo=r(N9t,"big_bird"),N9t.forEach(t),iqo=r(iSe," \u2014 "),mV=n(iSe,"A",{href:!0});var I9t=s(mV);dqo=r(I9t,"BigBirdForSequenceClassification"),I9t.forEach(t),cqo=r(iSe," (BigBird model)"),iSe.forEach(t),fqo=i(q),R9=n(q,"LI",{});var dSe=s(R9);zhe=n(dSe,"STRONG",{});var q9t=s(zhe);mqo=r(q9t,"bigbird_pegasus"),q9t.forEach(t),gqo=r(dSe," \u2014 "),gV=n(dSe,"A",{href:!0});var j9t=s(gV);hqo=r(j9t,"BigBirdPegasusForSequenceClassification"),j9t.forEach(t),pqo=r(dSe," (BigBird-Pegasus model)"),dSe.forEach(t),_qo=i(q),P9=n(q,"LI",{});var cSe=s(P9);Qhe=n(cSe,"STRONG",{});var D9t=s(Qhe);uqo=r(D9t,"bloom"),D9t.forEach(t),bqo=r(cSe," \u2014 "),hV=n(cSe,"A",{href:!0});var G9t=s(hV);vqo=r(G9t,"BloomForSequenceClassification"),G9t.forEach(t),Fqo=r(cSe," (BLOOM model)"),cSe.forEach(t),Tqo=i(q),B9=n(q,"LI",{});var fSe=s(B9);Whe=n(fSe,"STRONG",{});var O9t=s(Whe);Mqo=r(O9t,"camembert"),O9t.forEach(t),Eqo=r(fSe," \u2014 "),pV=n(fSe,"A",{href:!0});var V9t=s(pV);Cqo=r(V9t,"CamembertForSequenceClassification"),V9t.forEach(t),wqo=r(fSe," (CamemBERT model)"),fSe.forEach(t),Aqo=i(q),N9=n(q,"LI",{});var mSe=s(N9);Hhe=n(mSe,"STRONG",{});var X9t=s(Hhe);Lqo=r(X9t,"canine"),X9t.forEach(t),yqo=r(mSe," \u2014 "),_V=n(mSe,"A",{href:!0});var z9t=s(_V);xqo=r(z9t,"CanineForSequenceClassification"),z9t.forEach(t),$qo=r(mSe," (CANINE model)"),mSe.forEach(t),kqo=i(q),I9=n(q,"LI",{});var gSe=s(I9);Uhe=n(gSe,"STRONG",{});var Q9t=s(Uhe);Sqo=r(Q9t,"convbert"),Q9t.forEach(t),Rqo=r(gSe," \u2014 "),uV=n(gSe,"A",{href:!0});var W9t=s(uV);Pqo=r(W9t,"ConvBertForSequenceClassification"),W9t.forEach(t),Bqo=r(gSe," (ConvBERT model)"),gSe.forEach(t),Nqo=i(q),q9=n(q,"LI",{});var hSe=s(q9);Jhe=n(hSe,"STRONG",{});var H9t=s(Jhe);Iqo=r(H9t,"ctrl"),H9t.forEach(t),qqo=r(hSe," \u2014 "),bV=n(hSe,"A",{href:!0});var U9t=s(bV);jqo=r(U9t,"CTRLForSequenceClassification"),U9t.forEach(t),Dqo=r(hSe," (CTRL model)"),hSe.forEach(t),Gqo=i(q),j9=n(q,"LI",{});var pSe=s(j9);Yhe=n(pSe,"STRONG",{});var J9t=s(Yhe);Oqo=r(J9t,"data2vec-text"),J9t.forEach(t),Vqo=r(pSe," \u2014 "),vV=n(pSe,"A",{href:!0});var Y9t=s(vV);Xqo=r(Y9t,"Data2VecTextForSequenceClassification"),Y9t.forEach(t),zqo=r(pSe," (Data2VecText model)"),pSe.forEach(t),Qqo=i(q),D9=n(q,"LI",{});var _Se=s(D9);Khe=n(_Se,"STRONG",{});var K9t=s(Khe);Wqo=r(K9t,"deberta"),K9t.forEach(t),Hqo=r(_Se," \u2014 "),FV=n(_Se,"A",{href:!0});var Z9t=s(FV);Uqo=r(Z9t,"DebertaForSequenceClassification"),Z9t.forEach(t),Jqo=r(_Se," (DeBERTa model)"),_Se.forEach(t),Yqo=i(q),G9=n(q,"LI",{});var uSe=s(G9);Zhe=n(uSe,"STRONG",{});var e2t=s(Zhe);Kqo=r(e2t,"deberta-v2"),e2t.forEach(t),Zqo=r(uSe," \u2014 "),TV=n(uSe,"A",{href:!0});var o2t=s(TV);ejo=r(o2t,"DebertaV2ForSequenceClassification"),o2t.forEach(t),ojo=r(uSe," (DeBERTa-v2 model)"),uSe.forEach(t),rjo=i(q),O9=n(q,"LI",{});var bSe=s(O9);epe=n(bSe,"STRONG",{});var r2t=s(epe);tjo=r(r2t,"distilbert"),r2t.forEach(t),ajo=r(bSe," \u2014 "),MV=n(bSe,"A",{href:!0});var t2t=s(MV);njo=r(t2t,"DistilBertForSequenceClassification"),t2t.forEach(t),sjo=r(bSe," (DistilBERT model)"),bSe.forEach(t),ljo=i(q),V9=n(q,"LI",{});var vSe=s(V9);ope=n(vSe,"STRONG",{});var a2t=s(ope);ijo=r(a2t,"electra"),a2t.forEach(t),djo=r(vSe," \u2014 "),EV=n(vSe,"A",{href:!0});var n2t=s(EV);cjo=r(n2t,"ElectraForSequenceClassification"),n2t.forEach(t),fjo=r(vSe," (ELECTRA model)"),vSe.forEach(t),mjo=i(q),X9=n(q,"LI",{});var FSe=s(X9);rpe=n(FSe,"STRONG",{});var s2t=s(rpe);gjo=r(s2t,"flaubert"),s2t.forEach(t),hjo=r(FSe," \u2014 "),CV=n(FSe,"A",{href:!0});var l2t=s(CV);pjo=r(l2t,"FlaubertForSequenceClassification"),l2t.forEach(t),_jo=r(FSe," (FlauBERT model)"),FSe.forEach(t),ujo=i(q),z9=n(q,"LI",{});var TSe=s(z9);tpe=n(TSe,"STRONG",{});var i2t=s(tpe);bjo=r(i2t,"fnet"),i2t.forEach(t),vjo=r(TSe," \u2014 "),wV=n(TSe,"A",{href:!0});var d2t=s(wV);Fjo=r(d2t,"FNetForSequenceClassification"),d2t.forEach(t),Tjo=r(TSe," (FNet model)"),TSe.forEach(t),Mjo=i(q),Q9=n(q,"LI",{});var MSe=s(Q9);ape=n(MSe,"STRONG",{});var c2t=s(ape);Ejo=r(c2t,"funnel"),c2t.forEach(t),Cjo=r(MSe," \u2014 "),AV=n(MSe,"A",{href:!0});var f2t=s(AV);wjo=r(f2t,"FunnelForSequenceClassification"),f2t.forEach(t),Ajo=r(MSe," (Funnel Transformer model)"),MSe.forEach(t),Ljo=i(q),W9=n(q,"LI",{});var ESe=s(W9);npe=n(ESe,"STRONG",{});var m2t=s(npe);yjo=r(m2t,"gpt2"),m2t.forEach(t),xjo=r(ESe," \u2014 "),LV=n(ESe,"A",{href:!0});var g2t=s(LV);$jo=r(g2t,"GPT2ForSequenceClassification"),g2t.forEach(t),kjo=r(ESe," (OpenAI GPT-2 model)"),ESe.forEach(t),Sjo=i(q),H9=n(q,"LI",{});var CSe=s(H9);spe=n(CSe,"STRONG",{});var h2t=s(spe);Rjo=r(h2t,"gpt_neo"),h2t.forEach(t),Pjo=r(CSe," \u2014 "),yV=n(CSe,"A",{href:!0});var p2t=s(yV);Bjo=r(p2t,"GPTNeoForSequenceClassification"),p2t.forEach(t),Njo=r(CSe," (GPT Neo model)"),CSe.forEach(t),Ijo=i(q),U9=n(q,"LI",{});var wSe=s(U9);lpe=n(wSe,"STRONG",{});var _2t=s(lpe);qjo=r(_2t,"gptj"),_2t.forEach(t),jjo=r(wSe," \u2014 "),xV=n(wSe,"A",{href:!0});var u2t=s(xV);Djo=r(u2t,"GPTJForSequenceClassification"),u2t.forEach(t),Gjo=r(wSe," (GPT-J model)"),wSe.forEach(t),Ojo=i(q),J9=n(q,"LI",{});var ASe=s(J9);ipe=n(ASe,"STRONG",{});var b2t=s(ipe);Vjo=r(b2t,"ibert"),b2t.forEach(t),Xjo=r(ASe," \u2014 "),$V=n(ASe,"A",{href:!0});var v2t=s($V);zjo=r(v2t,"IBertForSequenceClassification"),v2t.forEach(t),Qjo=r(ASe," (I-BERT model)"),ASe.forEach(t),Wjo=i(q),Y9=n(q,"LI",{});var LSe=s(Y9);dpe=n(LSe,"STRONG",{});var F2t=s(dpe);Hjo=r(F2t,"layoutlm"),F2t.forEach(t),Ujo=r(LSe," \u2014 "),kV=n(LSe,"A",{href:!0});var T2t=s(kV);Jjo=r(T2t,"LayoutLMForSequenceClassification"),T2t.forEach(t),Yjo=r(LSe," (LayoutLM model)"),LSe.forEach(t),Kjo=i(q),K9=n(q,"LI",{});var ySe=s(K9);cpe=n(ySe,"STRONG",{});var M2t=s(cpe);Zjo=r(M2t,"layoutlmv2"),M2t.forEach(t),eDo=r(ySe," \u2014 "),SV=n(ySe,"A",{href:!0});var E2t=s(SV);oDo=r(E2t,"LayoutLMv2ForSequenceClassification"),E2t.forEach(t),rDo=r(ySe," (LayoutLMv2 model)"),ySe.forEach(t),tDo=i(q),Z9=n(q,"LI",{});var xSe=s(Z9);fpe=n(xSe,"STRONG",{});var C2t=s(fpe);aDo=r(C2t,"layoutlmv3"),C2t.forEach(t),nDo=r(xSe," \u2014 "),RV=n(xSe,"A",{href:!0});var w2t=s(RV);sDo=r(w2t,"LayoutLMv3ForSequenceClassification"),w2t.forEach(t),lDo=r(xSe," (LayoutLMv3 model)"),xSe.forEach(t),iDo=i(q),e2=n(q,"LI",{});var $Se=s(e2);mpe=n($Se,"STRONG",{});var A2t=s(mpe);dDo=r(A2t,"led"),A2t.forEach(t),cDo=r($Se," \u2014 "),PV=n($Se,"A",{href:!0});var L2t=s(PV);fDo=r(L2t,"LEDForSequenceClassification"),L2t.forEach(t),mDo=r($Se," (LED model)"),$Se.forEach(t),gDo=i(q),o2=n(q,"LI",{});var kSe=s(o2);gpe=n(kSe,"STRONG",{});var y2t=s(gpe);hDo=r(y2t,"longformer"),y2t.forEach(t),pDo=r(kSe," \u2014 "),BV=n(kSe,"A",{href:!0});var x2t=s(BV);_Do=r(x2t,"LongformerForSequenceClassification"),x2t.forEach(t),uDo=r(kSe," (Longformer model)"),kSe.forEach(t),bDo=i(q),r2=n(q,"LI",{});var SSe=s(r2);hpe=n(SSe,"STRONG",{});var $2t=s(hpe);vDo=r($2t,"mbart"),$2t.forEach(t),FDo=r(SSe," \u2014 "),NV=n(SSe,"A",{href:!0});var k2t=s(NV);TDo=r(k2t,"MBartForSequenceClassification"),k2t.forEach(t),MDo=r(SSe," (mBART model)"),SSe.forEach(t),EDo=i(q),t2=n(q,"LI",{});var RSe=s(t2);ppe=n(RSe,"STRONG",{});var S2t=s(ppe);CDo=r(S2t,"megatron-bert"),S2t.forEach(t),wDo=r(RSe," \u2014 "),IV=n(RSe,"A",{href:!0});var R2t=s(IV);ADo=r(R2t,"MegatronBertForSequenceClassification"),R2t.forEach(t),LDo=r(RSe," (Megatron-BERT model)"),RSe.forEach(t),yDo=i(q),a2=n(q,"LI",{});var PSe=s(a2);_pe=n(PSe,"STRONG",{});var P2t=s(_pe);xDo=r(P2t,"mobilebert"),P2t.forEach(t),$Do=r(PSe," \u2014 "),qV=n(PSe,"A",{href:!0});var B2t=s(qV);kDo=r(B2t,"MobileBertForSequenceClassification"),B2t.forEach(t),SDo=r(PSe," (MobileBERT model)"),PSe.forEach(t),RDo=i(q),n2=n(q,"LI",{});var BSe=s(n2);upe=n(BSe,"STRONG",{});var N2t=s(upe);PDo=r(N2t,"mpnet"),N2t.forEach(t),BDo=r(BSe," \u2014 "),jV=n(BSe,"A",{href:!0});var I2t=s(jV);NDo=r(I2t,"MPNetForSequenceClassification"),I2t.forEach(t),IDo=r(BSe," (MPNet model)"),BSe.forEach(t),qDo=i(q),s2=n(q,"LI",{});var NSe=s(s2);bpe=n(NSe,"STRONG",{});var q2t=s(bpe);jDo=r(q2t,"nezha"),q2t.forEach(t),DDo=r(NSe," \u2014 "),DV=n(NSe,"A",{href:!0});var j2t=s(DV);GDo=r(j2t,"NezhaForSequenceClassification"),j2t.forEach(t),ODo=r(NSe," (Nezha model)"),NSe.forEach(t),VDo=i(q),l2=n(q,"LI",{});var ISe=s(l2);vpe=n(ISe,"STRONG",{});var D2t=s(vpe);XDo=r(D2t,"nystromformer"),D2t.forEach(t),zDo=r(ISe," \u2014 "),GV=n(ISe,"A",{href:!0});var G2t=s(GV);QDo=r(G2t,"NystromformerForSequenceClassification"),G2t.forEach(t),WDo=r(ISe," (Nystr\xF6mformer model)"),ISe.forEach(t),HDo=i(q),i2=n(q,"LI",{});var qSe=s(i2);Fpe=n(qSe,"STRONG",{});var O2t=s(Fpe);UDo=r(O2t,"openai-gpt"),O2t.forEach(t),JDo=r(qSe," \u2014 "),OV=n(qSe,"A",{href:!0});var V2t=s(OV);YDo=r(V2t,"OpenAIGPTForSequenceClassification"),V2t.forEach(t),KDo=r(qSe," (OpenAI GPT model)"),qSe.forEach(t),ZDo=i(q),d2=n(q,"LI",{});var jSe=s(d2);Tpe=n(jSe,"STRONG",{});var X2t=s(Tpe);eGo=r(X2t,"perceiver"),X2t.forEach(t),oGo=r(jSe," \u2014 "),VV=n(jSe,"A",{href:!0});var z2t=s(VV);rGo=r(z2t,"PerceiverForSequenceClassification"),z2t.forEach(t),tGo=r(jSe," (Perceiver model)"),jSe.forEach(t),aGo=i(q),c2=n(q,"LI",{});var DSe=s(c2);Mpe=n(DSe,"STRONG",{});var Q2t=s(Mpe);nGo=r(Q2t,"plbart"),Q2t.forEach(t),sGo=r(DSe," \u2014 "),XV=n(DSe,"A",{href:!0});var W2t=s(XV);lGo=r(W2t,"PLBartForSequenceClassification"),W2t.forEach(t),iGo=r(DSe," (PLBart model)"),DSe.forEach(t),dGo=i(q),f2=n(q,"LI",{});var GSe=s(f2);Epe=n(GSe,"STRONG",{});var H2t=s(Epe);cGo=r(H2t,"qdqbert"),H2t.forEach(t),fGo=r(GSe," \u2014 "),zV=n(GSe,"A",{href:!0});var U2t=s(zV);mGo=r(U2t,"QDQBertForSequenceClassification"),U2t.forEach(t),gGo=r(GSe," (QDQBert model)"),GSe.forEach(t),hGo=i(q),m2=n(q,"LI",{});var OSe=s(m2);Cpe=n(OSe,"STRONG",{});var J2t=s(Cpe);pGo=r(J2t,"reformer"),J2t.forEach(t),_Go=r(OSe," \u2014 "),QV=n(OSe,"A",{href:!0});var Y2t=s(QV);uGo=r(Y2t,"ReformerForSequenceClassification"),Y2t.forEach(t),bGo=r(OSe," (Reformer model)"),OSe.forEach(t),vGo=i(q),g2=n(q,"LI",{});var VSe=s(g2);wpe=n(VSe,"STRONG",{});var K2t=s(wpe);FGo=r(K2t,"rembert"),K2t.forEach(t),TGo=r(VSe," \u2014 "),WV=n(VSe,"A",{href:!0});var Z2t=s(WV);MGo=r(Z2t,"RemBertForSequenceClassification"),Z2t.forEach(t),EGo=r(VSe," (RemBERT model)"),VSe.forEach(t),CGo=i(q),h2=n(q,"LI",{});var XSe=s(h2);Ape=n(XSe,"STRONG",{});var ebt=s(Ape);wGo=r(ebt,"roberta"),ebt.forEach(t),AGo=r(XSe," \u2014 "),HV=n(XSe,"A",{href:!0});var obt=s(HV);LGo=r(obt,"RobertaForSequenceClassification"),obt.forEach(t),yGo=r(XSe," (RoBERTa model)"),XSe.forEach(t),xGo=i(q),p2=n(q,"LI",{});var zSe=s(p2);Lpe=n(zSe,"STRONG",{});var rbt=s(Lpe);$Go=r(rbt,"roformer"),rbt.forEach(t),kGo=r(zSe," \u2014 "),UV=n(zSe,"A",{href:!0});var tbt=s(UV);SGo=r(tbt,"RoFormerForSequenceClassification"),tbt.forEach(t),RGo=r(zSe," (RoFormer model)"),zSe.forEach(t),PGo=i(q),_2=n(q,"LI",{});var QSe=s(_2);ype=n(QSe,"STRONG",{});var abt=s(ype);BGo=r(abt,"squeezebert"),abt.forEach(t),NGo=r(QSe," \u2014 "),JV=n(QSe,"A",{href:!0});var nbt=s(JV);IGo=r(nbt,"SqueezeBertForSequenceClassification"),nbt.forEach(t),qGo=r(QSe," (SqueezeBERT model)"),QSe.forEach(t),jGo=i(q),u2=n(q,"LI",{});var WSe=s(u2);xpe=n(WSe,"STRONG",{});var sbt=s(xpe);DGo=r(sbt,"tapas"),sbt.forEach(t),GGo=r(WSe," \u2014 "),YV=n(WSe,"A",{href:!0});var lbt=s(YV);OGo=r(lbt,"TapasForSequenceClassification"),lbt.forEach(t),VGo=r(WSe," (TAPAS model)"),WSe.forEach(t),XGo=i(q),b2=n(q,"LI",{});var HSe=s(b2);$pe=n(HSe,"STRONG",{});var ibt=s($pe);zGo=r(ibt,"transfo-xl"),ibt.forEach(t),QGo=r(HSe," \u2014 "),KV=n(HSe,"A",{href:!0});var dbt=s(KV);WGo=r(dbt,"TransfoXLForSequenceClassification"),dbt.forEach(t),HGo=r(HSe," (Transformer-XL model)"),HSe.forEach(t),UGo=i(q),v2=n(q,"LI",{});var USe=s(v2);kpe=n(USe,"STRONG",{});var cbt=s(kpe);JGo=r(cbt,"xlm"),cbt.forEach(t),YGo=r(USe," \u2014 "),ZV=n(USe,"A",{href:!0});var fbt=s(ZV);KGo=r(fbt,"XLMForSequenceClassification"),fbt.forEach(t),ZGo=r(USe," (XLM model)"),USe.forEach(t),eOo=i(q),F2=n(q,"LI",{});var JSe=s(F2);Spe=n(JSe,"STRONG",{});var mbt=s(Spe);oOo=r(mbt,"xlm-roberta"),mbt.forEach(t),rOo=r(JSe," \u2014 "),eX=n(JSe,"A",{href:!0});var gbt=s(eX);tOo=r(gbt,"XLMRobertaForSequenceClassification"),gbt.forEach(t),aOo=r(JSe," (XLM-RoBERTa model)"),JSe.forEach(t),nOo=i(q),T2=n(q,"LI",{});var YSe=s(T2);Rpe=n(YSe,"STRONG",{});var hbt=s(Rpe);sOo=r(hbt,"xlm-roberta-xl"),hbt.forEach(t),lOo=r(YSe," \u2014 "),oX=n(YSe,"A",{href:!0});var pbt=s(oX);iOo=r(pbt,"XLMRobertaXLForSequenceClassification"),pbt.forEach(t),dOo=r(YSe," (XLM-RoBERTa-XL model)"),YSe.forEach(t),cOo=i(q),M2=n(q,"LI",{});var KSe=s(M2);Ppe=n(KSe,"STRONG",{});var _bt=s(Ppe);fOo=r(_bt,"xlnet"),_bt.forEach(t),mOo=r(KSe," \u2014 "),rX=n(KSe,"A",{href:!0});var ubt=s(rX);gOo=r(ubt,"XLNetForSequenceClassification"),ubt.forEach(t),hOo=r(KSe," (XLNet model)"),KSe.forEach(t),pOo=i(q),E2=n(q,"LI",{});var ZSe=s(E2);Bpe=n(ZSe,"STRONG",{});var bbt=s(Bpe);_Oo=r(bbt,"yoso"),bbt.forEach(t),uOo=r(ZSe," \u2014 "),tX=n(ZSe,"A",{href:!0});var vbt=s(tX);bOo=r(vbt,"YosoForSequenceClassification"),vbt.forEach(t),vOo=r(ZSe," (YOSO model)"),ZSe.forEach(t),q.forEach(t),FOo=i(da),C2=n(da,"P",{});var eRe=s(C2);TOo=r(eRe,"The model is set in evaluation mode by default using "),Npe=n(eRe,"CODE",{});var Fbt=s(Npe);MOo=r(Fbt,"model.eval()"),Fbt.forEach(t),EOo=r(eRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ipe=n(eRe,"CODE",{});var Tbt=s(Ipe);COo=r(Tbt,"model.train()"),Tbt.forEach(t),eRe.forEach(t),wOo=i(da),T(w2.$$.fragment,da),da.forEach(t),tl.forEach(t),VOe=i(f),ed=n(f,"H2",{class:!0});var UXe=s(ed);A2=n(UXe,"A",{id:!0,class:!0,href:!0});var Mbt=s(A2);qpe=n(Mbt,"SPAN",{});var Ebt=s(qpe);T(jL.$$.fragment,Ebt),Ebt.forEach(t),Mbt.forEach(t),AOo=i(UXe),jpe=n(UXe,"SPAN",{});var Cbt=s(jpe);LOo=r(Cbt,"AutoModelForMultipleChoice"),Cbt.forEach(t),UXe.forEach(t),XOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(DL.$$.fragment,al),yOo=i(al),od=n(al,"P",{});var Uoe=s(od);xOo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aX=n(Uoe,"A",{href:!0});var wbt=s(aX);$Oo=r(wbt,"from_pretrained()"),wbt.forEach(t),kOo=r(Uoe," class method or the "),nX=n(Uoe,"A",{href:!0});var Abt=s(nX);SOo=r(Abt,"from_config()"),Abt.forEach(t),ROo=r(Uoe,` class
method.`),Uoe.forEach(t),POo=i(al),GL=n(al,"P",{});var JXe=s(GL);BOo=r(JXe,"This class cannot be instantiated directly using "),Dpe=n(JXe,"CODE",{});var Lbt=s(Dpe);NOo=r(Lbt,"__init__()"),Lbt.forEach(t),IOo=r(JXe," (throws an error)."),JXe.forEach(t),qOo=i(al),ft=n(al,"DIV",{class:!0});var Yw=s(ft);T(OL.$$.fragment,Yw),jOo=i(Yw),Gpe=n(Yw,"P",{});var ybt=s(Gpe);DOo=r(ybt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ybt.forEach(t),GOo=i(Yw),rd=n(Yw,"P",{});var Joe=s(rd);OOo=r(Joe,`Note:
Loading a model from its configuration file does `),Ope=n(Joe,"STRONG",{});var xbt=s(Ope);VOo=r(xbt,"not"),xbt.forEach(t),XOo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(Joe,"A",{href:!0});var $bt=s(sX);zOo=r($bt,"from_pretrained()"),$bt.forEach(t),QOo=r(Joe," to load the model weights."),Joe.forEach(t),WOo=i(Yw),T(L2.$$.fragment,Yw),Yw.forEach(t),HOo=i(al),ro=n(al,"DIV",{class:!0});var ca=s(ro);T(VL.$$.fragment,ca),UOo=i(ca),Vpe=n(ca,"P",{});var kbt=s(Vpe);JOo=r(kbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kbt.forEach(t),YOo=i(ca),ja=n(ca,"P",{});var Kw=s(ja);KOo=r(Kw,"The model class to instantiate is selected based on the "),Xpe=n(Kw,"CODE",{});var Sbt=s(Xpe);ZOo=r(Sbt,"model_type"),Sbt.forEach(t),eVo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),zpe=n(Kw,"CODE",{});var Rbt=s(zpe);oVo=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),rVo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(Kw,"CODE",{});var Pbt=s(Qpe);tVo=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),aVo=r(Kw,":"),Kw.forEach(t),nVo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);y2=n(ee,"LI",{});var oRe=s(y2);Wpe=n(oRe,"STRONG",{});var Bbt=s(Wpe);sVo=r(Bbt,"albert"),Bbt.forEach(t),lVo=r(oRe," \u2014 "),lX=n(oRe,"A",{href:!0});var Nbt=s(lX);iVo=r(Nbt,"AlbertForMultipleChoice"),Nbt.forEach(t),dVo=r(oRe," (ALBERT model)"),oRe.forEach(t),cVo=i(ee),x2=n(ee,"LI",{});var rRe=s(x2);Hpe=n(rRe,"STRONG",{});var Ibt=s(Hpe);fVo=r(Ibt,"bert"),Ibt.forEach(t),mVo=r(rRe," \u2014 "),iX=n(rRe,"A",{href:!0});var qbt=s(iX);gVo=r(qbt,"BertForMultipleChoice"),qbt.forEach(t),hVo=r(rRe," (BERT model)"),rRe.forEach(t),pVo=i(ee),$2=n(ee,"LI",{});var tRe=s($2);Upe=n(tRe,"STRONG",{});var jbt=s(Upe);_Vo=r(jbt,"big_bird"),jbt.forEach(t),uVo=r(tRe," \u2014 "),dX=n(tRe,"A",{href:!0});var Dbt=s(dX);bVo=r(Dbt,"BigBirdForMultipleChoice"),Dbt.forEach(t),vVo=r(tRe," (BigBird model)"),tRe.forEach(t),FVo=i(ee),k2=n(ee,"LI",{});var aRe=s(k2);Jpe=n(aRe,"STRONG",{});var Gbt=s(Jpe);TVo=r(Gbt,"camembert"),Gbt.forEach(t),MVo=r(aRe," \u2014 "),cX=n(aRe,"A",{href:!0});var Obt=s(cX);EVo=r(Obt,"CamembertForMultipleChoice"),Obt.forEach(t),CVo=r(aRe," (CamemBERT model)"),aRe.forEach(t),wVo=i(ee),S2=n(ee,"LI",{});var nRe=s(S2);Ype=n(nRe,"STRONG",{});var Vbt=s(Ype);AVo=r(Vbt,"canine"),Vbt.forEach(t),LVo=r(nRe," \u2014 "),fX=n(nRe,"A",{href:!0});var Xbt=s(fX);yVo=r(Xbt,"CanineForMultipleChoice"),Xbt.forEach(t),xVo=r(nRe," (CANINE model)"),nRe.forEach(t),$Vo=i(ee),R2=n(ee,"LI",{});var sRe=s(R2);Kpe=n(sRe,"STRONG",{});var zbt=s(Kpe);kVo=r(zbt,"convbert"),zbt.forEach(t),SVo=r(sRe," \u2014 "),mX=n(sRe,"A",{href:!0});var Qbt=s(mX);RVo=r(Qbt,"ConvBertForMultipleChoice"),Qbt.forEach(t),PVo=r(sRe," (ConvBERT model)"),sRe.forEach(t),BVo=i(ee),P2=n(ee,"LI",{});var lRe=s(P2);Zpe=n(lRe,"STRONG",{});var Wbt=s(Zpe);NVo=r(Wbt,"data2vec-text"),Wbt.forEach(t),IVo=r(lRe," \u2014 "),gX=n(lRe,"A",{href:!0});var Hbt=s(gX);qVo=r(Hbt,"Data2VecTextForMultipleChoice"),Hbt.forEach(t),jVo=r(lRe," (Data2VecText model)"),lRe.forEach(t),DVo=i(ee),B2=n(ee,"LI",{});var iRe=s(B2);e_e=n(iRe,"STRONG",{});var Ubt=s(e_e);GVo=r(Ubt,"deberta-v2"),Ubt.forEach(t),OVo=r(iRe," \u2014 "),hX=n(iRe,"A",{href:!0});var Jbt=s(hX);VVo=r(Jbt,"DebertaV2ForMultipleChoice"),Jbt.forEach(t),XVo=r(iRe," (DeBERTa-v2 model)"),iRe.forEach(t),zVo=i(ee),N2=n(ee,"LI",{});var dRe=s(N2);o_e=n(dRe,"STRONG",{});var Ybt=s(o_e);QVo=r(Ybt,"distilbert"),Ybt.forEach(t),WVo=r(dRe," \u2014 "),pX=n(dRe,"A",{href:!0});var Kbt=s(pX);HVo=r(Kbt,"DistilBertForMultipleChoice"),Kbt.forEach(t),UVo=r(dRe," (DistilBERT model)"),dRe.forEach(t),JVo=i(ee),I2=n(ee,"LI",{});var cRe=s(I2);r_e=n(cRe,"STRONG",{});var Zbt=s(r_e);YVo=r(Zbt,"electra"),Zbt.forEach(t),KVo=r(cRe," \u2014 "),_X=n(cRe,"A",{href:!0});var evt=s(_X);ZVo=r(evt,"ElectraForMultipleChoice"),evt.forEach(t),eXo=r(cRe," (ELECTRA model)"),cRe.forEach(t),oXo=i(ee),q2=n(ee,"LI",{});var fRe=s(q2);t_e=n(fRe,"STRONG",{});var ovt=s(t_e);rXo=r(ovt,"flaubert"),ovt.forEach(t),tXo=r(fRe," \u2014 "),uX=n(fRe,"A",{href:!0});var rvt=s(uX);aXo=r(rvt,"FlaubertForMultipleChoice"),rvt.forEach(t),nXo=r(fRe," (FlauBERT model)"),fRe.forEach(t),sXo=i(ee),j2=n(ee,"LI",{});var mRe=s(j2);a_e=n(mRe,"STRONG",{});var tvt=s(a_e);lXo=r(tvt,"fnet"),tvt.forEach(t),iXo=r(mRe," \u2014 "),bX=n(mRe,"A",{href:!0});var avt=s(bX);dXo=r(avt,"FNetForMultipleChoice"),avt.forEach(t),cXo=r(mRe," (FNet model)"),mRe.forEach(t),fXo=i(ee),D2=n(ee,"LI",{});var gRe=s(D2);n_e=n(gRe,"STRONG",{});var nvt=s(n_e);mXo=r(nvt,"funnel"),nvt.forEach(t),gXo=r(gRe," \u2014 "),vX=n(gRe,"A",{href:!0});var svt=s(vX);hXo=r(svt,"FunnelForMultipleChoice"),svt.forEach(t),pXo=r(gRe," (Funnel Transformer model)"),gRe.forEach(t),_Xo=i(ee),G2=n(ee,"LI",{});var hRe=s(G2);s_e=n(hRe,"STRONG",{});var lvt=s(s_e);uXo=r(lvt,"ibert"),lvt.forEach(t),bXo=r(hRe," \u2014 "),FX=n(hRe,"A",{href:!0});var ivt=s(FX);vXo=r(ivt,"IBertForMultipleChoice"),ivt.forEach(t),FXo=r(hRe," (I-BERT model)"),hRe.forEach(t),TXo=i(ee),O2=n(ee,"LI",{});var pRe=s(O2);l_e=n(pRe,"STRONG",{});var dvt=s(l_e);MXo=r(dvt,"longformer"),dvt.forEach(t),EXo=r(pRe," \u2014 "),TX=n(pRe,"A",{href:!0});var cvt=s(TX);CXo=r(cvt,"LongformerForMultipleChoice"),cvt.forEach(t),wXo=r(pRe," (Longformer model)"),pRe.forEach(t),AXo=i(ee),V2=n(ee,"LI",{});var _Re=s(V2);i_e=n(_Re,"STRONG",{});var fvt=s(i_e);LXo=r(fvt,"megatron-bert"),fvt.forEach(t),yXo=r(_Re," \u2014 "),MX=n(_Re,"A",{href:!0});var mvt=s(MX);xXo=r(mvt,"MegatronBertForMultipleChoice"),mvt.forEach(t),$Xo=r(_Re," (Megatron-BERT model)"),_Re.forEach(t),kXo=i(ee),X2=n(ee,"LI",{});var uRe=s(X2);d_e=n(uRe,"STRONG",{});var gvt=s(d_e);SXo=r(gvt,"mobilebert"),gvt.forEach(t),RXo=r(uRe," \u2014 "),EX=n(uRe,"A",{href:!0});var hvt=s(EX);PXo=r(hvt,"MobileBertForMultipleChoice"),hvt.forEach(t),BXo=r(uRe," (MobileBERT model)"),uRe.forEach(t),NXo=i(ee),z2=n(ee,"LI",{});var bRe=s(z2);c_e=n(bRe,"STRONG",{});var pvt=s(c_e);IXo=r(pvt,"mpnet"),pvt.forEach(t),qXo=r(bRe," \u2014 "),CX=n(bRe,"A",{href:!0});var _vt=s(CX);jXo=r(_vt,"MPNetForMultipleChoice"),_vt.forEach(t),DXo=r(bRe," (MPNet model)"),bRe.forEach(t),GXo=i(ee),Q2=n(ee,"LI",{});var vRe=s(Q2);f_e=n(vRe,"STRONG",{});var uvt=s(f_e);OXo=r(uvt,"nezha"),uvt.forEach(t),VXo=r(vRe," \u2014 "),wX=n(vRe,"A",{href:!0});var bvt=s(wX);XXo=r(bvt,"NezhaForMultipleChoice"),bvt.forEach(t),zXo=r(vRe," (Nezha model)"),vRe.forEach(t),QXo=i(ee),W2=n(ee,"LI",{});var FRe=s(W2);m_e=n(FRe,"STRONG",{});var vvt=s(m_e);WXo=r(vvt,"nystromformer"),vvt.forEach(t),HXo=r(FRe," \u2014 "),AX=n(FRe,"A",{href:!0});var Fvt=s(AX);UXo=r(Fvt,"NystromformerForMultipleChoice"),Fvt.forEach(t),JXo=r(FRe," (Nystr\xF6mformer model)"),FRe.forEach(t),YXo=i(ee),H2=n(ee,"LI",{});var TRe=s(H2);g_e=n(TRe,"STRONG",{});var Tvt=s(g_e);KXo=r(Tvt,"qdqbert"),Tvt.forEach(t),ZXo=r(TRe," \u2014 "),LX=n(TRe,"A",{href:!0});var Mvt=s(LX);ezo=r(Mvt,"QDQBertForMultipleChoice"),Mvt.forEach(t),ozo=r(TRe," (QDQBert model)"),TRe.forEach(t),rzo=i(ee),U2=n(ee,"LI",{});var MRe=s(U2);h_e=n(MRe,"STRONG",{});var Evt=s(h_e);tzo=r(Evt,"rembert"),Evt.forEach(t),azo=r(MRe," \u2014 "),yX=n(MRe,"A",{href:!0});var Cvt=s(yX);nzo=r(Cvt,"RemBertForMultipleChoice"),Cvt.forEach(t),szo=r(MRe," (RemBERT model)"),MRe.forEach(t),lzo=i(ee),J2=n(ee,"LI",{});var ERe=s(J2);p_e=n(ERe,"STRONG",{});var wvt=s(p_e);izo=r(wvt,"roberta"),wvt.forEach(t),dzo=r(ERe," \u2014 "),xX=n(ERe,"A",{href:!0});var Avt=s(xX);czo=r(Avt,"RobertaForMultipleChoice"),Avt.forEach(t),fzo=r(ERe," (RoBERTa model)"),ERe.forEach(t),mzo=i(ee),Y2=n(ee,"LI",{});var CRe=s(Y2);__e=n(CRe,"STRONG",{});var Lvt=s(__e);gzo=r(Lvt,"roformer"),Lvt.forEach(t),hzo=r(CRe," \u2014 "),$X=n(CRe,"A",{href:!0});var yvt=s($X);pzo=r(yvt,"RoFormerForMultipleChoice"),yvt.forEach(t),_zo=r(CRe," (RoFormer model)"),CRe.forEach(t),uzo=i(ee),K2=n(ee,"LI",{});var wRe=s(K2);u_e=n(wRe,"STRONG",{});var xvt=s(u_e);bzo=r(xvt,"squeezebert"),xvt.forEach(t),vzo=r(wRe," \u2014 "),kX=n(wRe,"A",{href:!0});var $vt=s(kX);Fzo=r($vt,"SqueezeBertForMultipleChoice"),$vt.forEach(t),Tzo=r(wRe," (SqueezeBERT model)"),wRe.forEach(t),Mzo=i(ee),Z2=n(ee,"LI",{});var ARe=s(Z2);b_e=n(ARe,"STRONG",{});var kvt=s(b_e);Ezo=r(kvt,"xlm"),kvt.forEach(t),Czo=r(ARe," \u2014 "),SX=n(ARe,"A",{href:!0});var Svt=s(SX);wzo=r(Svt,"XLMForMultipleChoice"),Svt.forEach(t),Azo=r(ARe," (XLM model)"),ARe.forEach(t),Lzo=i(ee),eb=n(ee,"LI",{});var LRe=s(eb);v_e=n(LRe,"STRONG",{});var Rvt=s(v_e);yzo=r(Rvt,"xlm-roberta"),Rvt.forEach(t),xzo=r(LRe," \u2014 "),RX=n(LRe,"A",{href:!0});var Pvt=s(RX);$zo=r(Pvt,"XLMRobertaForMultipleChoice"),Pvt.forEach(t),kzo=r(LRe," (XLM-RoBERTa model)"),LRe.forEach(t),Szo=i(ee),ob=n(ee,"LI",{});var yRe=s(ob);F_e=n(yRe,"STRONG",{});var Bvt=s(F_e);Rzo=r(Bvt,"xlm-roberta-xl"),Bvt.forEach(t),Pzo=r(yRe," \u2014 "),PX=n(yRe,"A",{href:!0});var Nvt=s(PX);Bzo=r(Nvt,"XLMRobertaXLForMultipleChoice"),Nvt.forEach(t),Nzo=r(yRe," (XLM-RoBERTa-XL model)"),yRe.forEach(t),Izo=i(ee),rb=n(ee,"LI",{});var xRe=s(rb);T_e=n(xRe,"STRONG",{});var Ivt=s(T_e);qzo=r(Ivt,"xlnet"),Ivt.forEach(t),jzo=r(xRe," \u2014 "),BX=n(xRe,"A",{href:!0});var qvt=s(BX);Dzo=r(qvt,"XLNetForMultipleChoice"),qvt.forEach(t),Gzo=r(xRe," (XLNet model)"),xRe.forEach(t),Ozo=i(ee),tb=n(ee,"LI",{});var $Re=s(tb);M_e=n($Re,"STRONG",{});var jvt=s(M_e);Vzo=r(jvt,"yoso"),jvt.forEach(t),Xzo=r($Re," \u2014 "),NX=n($Re,"A",{href:!0});var Dvt=s(NX);zzo=r(Dvt,"YosoForMultipleChoice"),Dvt.forEach(t),Qzo=r($Re," (YOSO model)"),$Re.forEach(t),ee.forEach(t),Wzo=i(ca),ab=n(ca,"P",{});var kRe=s(ab);Hzo=r(kRe,"The model is set in evaluation mode by default using "),E_e=n(kRe,"CODE",{});var Gvt=s(E_e);Uzo=r(Gvt,"model.eval()"),Gvt.forEach(t),Jzo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(kRe,"CODE",{});var Ovt=s(C_e);Yzo=r(Ovt,"model.train()"),Ovt.forEach(t),kRe.forEach(t),Kzo=i(ca),T(nb.$$.fragment,ca),ca.forEach(t),al.forEach(t),zOe=i(f),td=n(f,"H2",{class:!0});var YXe=s(td);sb=n(YXe,"A",{id:!0,class:!0,href:!0});var Vvt=s(sb);w_e=n(Vvt,"SPAN",{});var Xvt=s(w_e);T(XL.$$.fragment,Xvt),Xvt.forEach(t),Vvt.forEach(t),Zzo=i(YXe),A_e=n(YXe,"SPAN",{});var zvt=s(A_e);eQo=r(zvt,"AutoModelForNextSentencePrediction"),zvt.forEach(t),YXe.forEach(t),QOe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(zL.$$.fragment,nl),oQo=i(nl),ad=n(nl,"P",{});var Yoe=s(ad);rQo=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IX=n(Yoe,"A",{href:!0});var Qvt=s(IX);tQo=r(Qvt,"from_pretrained()"),Qvt.forEach(t),aQo=r(Yoe," class method or the "),qX=n(Yoe,"A",{href:!0});var Wvt=s(qX);nQo=r(Wvt,"from_config()"),Wvt.forEach(t),sQo=r(Yoe,` class
method.`),Yoe.forEach(t),lQo=i(nl),QL=n(nl,"P",{});var KXe=s(QL);iQo=r(KXe,"This class cannot be instantiated directly using "),L_e=n(KXe,"CODE",{});var Hvt=s(L_e);dQo=r(Hvt,"__init__()"),Hvt.forEach(t),cQo=r(KXe," (throws an error)."),KXe.forEach(t),fQo=i(nl),mt=n(nl,"DIV",{class:!0});var Zw=s(mt);T(WL.$$.fragment,Zw),mQo=i(Zw),y_e=n(Zw,"P",{});var Uvt=s(y_e);gQo=r(Uvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Uvt.forEach(t),hQo=i(Zw),nd=n(Zw,"P",{});var Koe=s(nd);pQo=r(Koe,`Note:
Loading a model from its configuration file does `),x_e=n(Koe,"STRONG",{});var Jvt=s(x_e);_Qo=r(Jvt,"not"),Jvt.forEach(t),uQo=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(Koe,"A",{href:!0});var Yvt=s(jX);bQo=r(Yvt,"from_pretrained()"),Yvt.forEach(t),vQo=r(Koe," to load the model weights."),Koe.forEach(t),FQo=i(Zw),T(lb.$$.fragment,Zw),Zw.forEach(t),TQo=i(nl),to=n(nl,"DIV",{class:!0});var fa=s(to);T(HL.$$.fragment,fa),MQo=i(fa),$_e=n(fa,"P",{});var Kvt=s($_e);EQo=r(Kvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kvt.forEach(t),CQo=i(fa),Da=n(fa,"P",{});var eA=s(Da);wQo=r(eA,"The model class to instantiate is selected based on the "),k_e=n(eA,"CODE",{});var Zvt=s(k_e);AQo=r(Zvt,"model_type"),Zvt.forEach(t),LQo=r(eA,` property of the config object (either
passed as an argument or loaded from `),S_e=n(eA,"CODE",{});var eFt=s(S_e);yQo=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),xQo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(eA,"CODE",{});var oFt=s(R_e);$Qo=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),kQo=r(eA,":"),eA.forEach(t),SQo=i(fa),Io=n(fa,"UL",{});var ma=s(Io);ib=n(ma,"LI",{});var SRe=s(ib);P_e=n(SRe,"STRONG",{});var rFt=s(P_e);RQo=r(rFt,"bert"),rFt.forEach(t),PQo=r(SRe," \u2014 "),DX=n(SRe,"A",{href:!0});var tFt=s(DX);BQo=r(tFt,"BertForNextSentencePrediction"),tFt.forEach(t),NQo=r(SRe," (BERT model)"),SRe.forEach(t),IQo=i(ma),db=n(ma,"LI",{});var RRe=s(db);B_e=n(RRe,"STRONG",{});var aFt=s(B_e);qQo=r(aFt,"fnet"),aFt.forEach(t),jQo=r(RRe," \u2014 "),GX=n(RRe,"A",{href:!0});var nFt=s(GX);DQo=r(nFt,"FNetForNextSentencePrediction"),nFt.forEach(t),GQo=r(RRe," (FNet model)"),RRe.forEach(t),OQo=i(ma),cb=n(ma,"LI",{});var PRe=s(cb);N_e=n(PRe,"STRONG",{});var sFt=s(N_e);VQo=r(sFt,"megatron-bert"),sFt.forEach(t),XQo=r(PRe," \u2014 "),OX=n(PRe,"A",{href:!0});var lFt=s(OX);zQo=r(lFt,"MegatronBertForNextSentencePrediction"),lFt.forEach(t),QQo=r(PRe," (Megatron-BERT model)"),PRe.forEach(t),WQo=i(ma),fb=n(ma,"LI",{});var BRe=s(fb);I_e=n(BRe,"STRONG",{});var iFt=s(I_e);HQo=r(iFt,"mobilebert"),iFt.forEach(t),UQo=r(BRe," \u2014 "),VX=n(BRe,"A",{href:!0});var dFt=s(VX);JQo=r(dFt,"MobileBertForNextSentencePrediction"),dFt.forEach(t),YQo=r(BRe," (MobileBERT model)"),BRe.forEach(t),KQo=i(ma),mb=n(ma,"LI",{});var NRe=s(mb);q_e=n(NRe,"STRONG",{});var cFt=s(q_e);ZQo=r(cFt,"nezha"),cFt.forEach(t),eWo=r(NRe," \u2014 "),XX=n(NRe,"A",{href:!0});var fFt=s(XX);oWo=r(fFt,"NezhaForNextSentencePrediction"),fFt.forEach(t),rWo=r(NRe," (Nezha model)"),NRe.forEach(t),tWo=i(ma),gb=n(ma,"LI",{});var IRe=s(gb);j_e=n(IRe,"STRONG",{});var mFt=s(j_e);aWo=r(mFt,"qdqbert"),mFt.forEach(t),nWo=r(IRe," \u2014 "),zX=n(IRe,"A",{href:!0});var gFt=s(zX);sWo=r(gFt,"QDQBertForNextSentencePrediction"),gFt.forEach(t),lWo=r(IRe," (QDQBert model)"),IRe.forEach(t),ma.forEach(t),iWo=i(fa),hb=n(fa,"P",{});var qRe=s(hb);dWo=r(qRe,"The model is set in evaluation mode by default using "),D_e=n(qRe,"CODE",{});var hFt=s(D_e);cWo=r(hFt,"model.eval()"),hFt.forEach(t),fWo=r(qRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(qRe,"CODE",{});var pFt=s(G_e);mWo=r(pFt,"model.train()"),pFt.forEach(t),qRe.forEach(t),gWo=i(fa),T(pb.$$.fragment,fa),fa.forEach(t),nl.forEach(t),WOe=i(f),sd=n(f,"H2",{class:!0});var ZXe=s(sd);_b=n(ZXe,"A",{id:!0,class:!0,href:!0});var _Ft=s(_b);O_e=n(_Ft,"SPAN",{});var uFt=s(O_e);T(UL.$$.fragment,uFt),uFt.forEach(t),_Ft.forEach(t),hWo=i(ZXe),V_e=n(ZXe,"SPAN",{});var bFt=s(V_e);pWo=r(bFt,"AutoModelForTokenClassification"),bFt.forEach(t),ZXe.forEach(t),HOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(JL.$$.fragment,sl),_Wo=i(sl),ld=n(sl,"P",{});var Zoe=s(ld);uWo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QX=n(Zoe,"A",{href:!0});var vFt=s(QX);bWo=r(vFt,"from_pretrained()"),vFt.forEach(t),vWo=r(Zoe," class method or the "),WX=n(Zoe,"A",{href:!0});var FFt=s(WX);FWo=r(FFt,"from_config()"),FFt.forEach(t),TWo=r(Zoe,` class
method.`),Zoe.forEach(t),MWo=i(sl),YL=n(sl,"P",{});var eze=s(YL);EWo=r(eze,"This class cannot be instantiated directly using "),X_e=n(eze,"CODE",{});var TFt=s(X_e);CWo=r(TFt,"__init__()"),TFt.forEach(t),wWo=r(eze," (throws an error)."),eze.forEach(t),AWo=i(sl),gt=n(sl,"DIV",{class:!0});var oA=s(gt);T(KL.$$.fragment,oA),LWo=i(oA),z_e=n(oA,"P",{});var MFt=s(z_e);yWo=r(MFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MFt.forEach(t),xWo=i(oA),id=n(oA,"P",{});var ere=s(id);$Wo=r(ere,`Note:
Loading a model from its configuration file does `),Q_e=n(ere,"STRONG",{});var EFt=s(Q_e);kWo=r(EFt,"not"),EFt.forEach(t),SWo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(ere,"A",{href:!0});var CFt=s(HX);RWo=r(CFt,"from_pretrained()"),CFt.forEach(t),PWo=r(ere," to load the model weights."),ere.forEach(t),BWo=i(oA),T(ub.$$.fragment,oA),oA.forEach(t),NWo=i(sl),ao=n(sl,"DIV",{class:!0});var ga=s(ao);T(ZL.$$.fragment,ga),IWo=i(ga),W_e=n(ga,"P",{});var wFt=s(W_e);qWo=r(wFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wFt.forEach(t),jWo=i(ga),Ga=n(ga,"P",{});var rA=s(Ga);DWo=r(rA,"The model class to instantiate is selected based on the "),H_e=n(rA,"CODE",{});var AFt=s(H_e);GWo=r(AFt,"model_type"),AFt.forEach(t),OWo=r(rA,` property of the config object (either
passed as an argument or loaded from `),U_e=n(rA,"CODE",{});var LFt=s(U_e);VWo=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),XWo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(rA,"CODE",{});var yFt=s(J_e);zWo=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),QWo=r(rA,":"),rA.forEach(t),WWo=i(ga),H=n(ga,"UL",{});var J=s(H);bb=n(J,"LI",{});var jRe=s(bb);Y_e=n(jRe,"STRONG",{});var xFt=s(Y_e);HWo=r(xFt,"albert"),xFt.forEach(t),UWo=r(jRe," \u2014 "),UX=n(jRe,"A",{href:!0});var $Ft=s(UX);JWo=r($Ft,"AlbertForTokenClassification"),$Ft.forEach(t),YWo=r(jRe," (ALBERT model)"),jRe.forEach(t),KWo=i(J),vb=n(J,"LI",{});var DRe=s(vb);K_e=n(DRe,"STRONG",{});var kFt=s(K_e);ZWo=r(kFt,"bert"),kFt.forEach(t),eHo=r(DRe," \u2014 "),JX=n(DRe,"A",{href:!0});var SFt=s(JX);oHo=r(SFt,"BertForTokenClassification"),SFt.forEach(t),rHo=r(DRe," (BERT model)"),DRe.forEach(t),tHo=i(J),Fb=n(J,"LI",{});var GRe=s(Fb);Z_e=n(GRe,"STRONG",{});var RFt=s(Z_e);aHo=r(RFt,"big_bird"),RFt.forEach(t),nHo=r(GRe," \u2014 "),YX=n(GRe,"A",{href:!0});var PFt=s(YX);sHo=r(PFt,"BigBirdForTokenClassification"),PFt.forEach(t),lHo=r(GRe," (BigBird model)"),GRe.forEach(t),iHo=i(J),Tb=n(J,"LI",{});var ORe=s(Tb);eue=n(ORe,"STRONG",{});var BFt=s(eue);dHo=r(BFt,"bloom"),BFt.forEach(t),cHo=r(ORe," \u2014 "),KX=n(ORe,"A",{href:!0});var NFt=s(KX);fHo=r(NFt,"BloomForTokenClassification"),NFt.forEach(t),mHo=r(ORe," (BLOOM model)"),ORe.forEach(t),gHo=i(J),Mb=n(J,"LI",{});var VRe=s(Mb);oue=n(VRe,"STRONG",{});var IFt=s(oue);hHo=r(IFt,"camembert"),IFt.forEach(t),pHo=r(VRe," \u2014 "),ZX=n(VRe,"A",{href:!0});var qFt=s(ZX);_Ho=r(qFt,"CamembertForTokenClassification"),qFt.forEach(t),uHo=r(VRe," (CamemBERT model)"),VRe.forEach(t),bHo=i(J),Eb=n(J,"LI",{});var XRe=s(Eb);rue=n(XRe,"STRONG",{});var jFt=s(rue);vHo=r(jFt,"canine"),jFt.forEach(t),FHo=r(XRe," \u2014 "),ez=n(XRe,"A",{href:!0});var DFt=s(ez);THo=r(DFt,"CanineForTokenClassification"),DFt.forEach(t),MHo=r(XRe," (CANINE model)"),XRe.forEach(t),EHo=i(J),Cb=n(J,"LI",{});var zRe=s(Cb);tue=n(zRe,"STRONG",{});var GFt=s(tue);CHo=r(GFt,"convbert"),GFt.forEach(t),wHo=r(zRe," \u2014 "),oz=n(zRe,"A",{href:!0});var OFt=s(oz);AHo=r(OFt,"ConvBertForTokenClassification"),OFt.forEach(t),LHo=r(zRe," (ConvBERT model)"),zRe.forEach(t),yHo=i(J),wb=n(J,"LI",{});var QRe=s(wb);aue=n(QRe,"STRONG",{});var VFt=s(aue);xHo=r(VFt,"data2vec-text"),VFt.forEach(t),$Ho=r(QRe," \u2014 "),rz=n(QRe,"A",{href:!0});var XFt=s(rz);kHo=r(XFt,"Data2VecTextForTokenClassification"),XFt.forEach(t),SHo=r(QRe," (Data2VecText model)"),QRe.forEach(t),RHo=i(J),Ab=n(J,"LI",{});var WRe=s(Ab);nue=n(WRe,"STRONG",{});var zFt=s(nue);PHo=r(zFt,"deberta"),zFt.forEach(t),BHo=r(WRe," \u2014 "),tz=n(WRe,"A",{href:!0});var QFt=s(tz);NHo=r(QFt,"DebertaForTokenClassification"),QFt.forEach(t),IHo=r(WRe," (DeBERTa model)"),WRe.forEach(t),qHo=i(J),Lb=n(J,"LI",{});var HRe=s(Lb);sue=n(HRe,"STRONG",{});var WFt=s(sue);jHo=r(WFt,"deberta-v2"),WFt.forEach(t),DHo=r(HRe," \u2014 "),az=n(HRe,"A",{href:!0});var HFt=s(az);GHo=r(HFt,"DebertaV2ForTokenClassification"),HFt.forEach(t),OHo=r(HRe," (DeBERTa-v2 model)"),HRe.forEach(t),VHo=i(J),yb=n(J,"LI",{});var URe=s(yb);lue=n(URe,"STRONG",{});var UFt=s(lue);XHo=r(UFt,"distilbert"),UFt.forEach(t),zHo=r(URe," \u2014 "),nz=n(URe,"A",{href:!0});var JFt=s(nz);QHo=r(JFt,"DistilBertForTokenClassification"),JFt.forEach(t),WHo=r(URe," (DistilBERT model)"),URe.forEach(t),HHo=i(J),xb=n(J,"LI",{});var JRe=s(xb);iue=n(JRe,"STRONG",{});var YFt=s(iue);UHo=r(YFt,"electra"),YFt.forEach(t),JHo=r(JRe," \u2014 "),sz=n(JRe,"A",{href:!0});var KFt=s(sz);YHo=r(KFt,"ElectraForTokenClassification"),KFt.forEach(t),KHo=r(JRe," (ELECTRA model)"),JRe.forEach(t),ZHo=i(J),$b=n(J,"LI",{});var YRe=s($b);due=n(YRe,"STRONG",{});var ZFt=s(due);eUo=r(ZFt,"flaubert"),ZFt.forEach(t),oUo=r(YRe," \u2014 "),lz=n(YRe,"A",{href:!0});var eTt=s(lz);rUo=r(eTt,"FlaubertForTokenClassification"),eTt.forEach(t),tUo=r(YRe," (FlauBERT model)"),YRe.forEach(t),aUo=i(J),kb=n(J,"LI",{});var KRe=s(kb);cue=n(KRe,"STRONG",{});var oTt=s(cue);nUo=r(oTt,"fnet"),oTt.forEach(t),sUo=r(KRe," \u2014 "),iz=n(KRe,"A",{href:!0});var rTt=s(iz);lUo=r(rTt,"FNetForTokenClassification"),rTt.forEach(t),iUo=r(KRe," (FNet model)"),KRe.forEach(t),dUo=i(J),Sb=n(J,"LI",{});var ZRe=s(Sb);fue=n(ZRe,"STRONG",{});var tTt=s(fue);cUo=r(tTt,"funnel"),tTt.forEach(t),fUo=r(ZRe," \u2014 "),dz=n(ZRe,"A",{href:!0});var aTt=s(dz);mUo=r(aTt,"FunnelForTokenClassification"),aTt.forEach(t),gUo=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),hUo=i(J),Rb=n(J,"LI",{});var ePe=s(Rb);mue=n(ePe,"STRONG",{});var nTt=s(mue);pUo=r(nTt,"gpt2"),nTt.forEach(t),_Uo=r(ePe," \u2014 "),cz=n(ePe,"A",{href:!0});var sTt=s(cz);uUo=r(sTt,"GPT2ForTokenClassification"),sTt.forEach(t),bUo=r(ePe," (OpenAI GPT-2 model)"),ePe.forEach(t),vUo=i(J),Pb=n(J,"LI",{});var oPe=s(Pb);gue=n(oPe,"STRONG",{});var lTt=s(gue);FUo=r(lTt,"ibert"),lTt.forEach(t),TUo=r(oPe," \u2014 "),fz=n(oPe,"A",{href:!0});var iTt=s(fz);MUo=r(iTt,"IBertForTokenClassification"),iTt.forEach(t),EUo=r(oPe," (I-BERT model)"),oPe.forEach(t),CUo=i(J),Bb=n(J,"LI",{});var rPe=s(Bb);hue=n(rPe,"STRONG",{});var dTt=s(hue);wUo=r(dTt,"layoutlm"),dTt.forEach(t),AUo=r(rPe," \u2014 "),mz=n(rPe,"A",{href:!0});var cTt=s(mz);LUo=r(cTt,"LayoutLMForTokenClassification"),cTt.forEach(t),yUo=r(rPe," (LayoutLM model)"),rPe.forEach(t),xUo=i(J),Nb=n(J,"LI",{});var tPe=s(Nb);pue=n(tPe,"STRONG",{});var fTt=s(pue);$Uo=r(fTt,"layoutlmv2"),fTt.forEach(t),kUo=r(tPe," \u2014 "),gz=n(tPe,"A",{href:!0});var mTt=s(gz);SUo=r(mTt,"LayoutLMv2ForTokenClassification"),mTt.forEach(t),RUo=r(tPe," (LayoutLMv2 model)"),tPe.forEach(t),PUo=i(J),Ib=n(J,"LI",{});var aPe=s(Ib);_ue=n(aPe,"STRONG",{});var gTt=s(_ue);BUo=r(gTt,"layoutlmv3"),gTt.forEach(t),NUo=r(aPe," \u2014 "),hz=n(aPe,"A",{href:!0});var hTt=s(hz);IUo=r(hTt,"LayoutLMv3ForTokenClassification"),hTt.forEach(t),qUo=r(aPe," (LayoutLMv3 model)"),aPe.forEach(t),jUo=i(J),qb=n(J,"LI",{});var nPe=s(qb);uue=n(nPe,"STRONG",{});var pTt=s(uue);DUo=r(pTt,"longformer"),pTt.forEach(t),GUo=r(nPe," \u2014 "),pz=n(nPe,"A",{href:!0});var _Tt=s(pz);OUo=r(_Tt,"LongformerForTokenClassification"),_Tt.forEach(t),VUo=r(nPe," (Longformer model)"),nPe.forEach(t),XUo=i(J),jb=n(J,"LI",{});var sPe=s(jb);bue=n(sPe,"STRONG",{});var uTt=s(bue);zUo=r(uTt,"megatron-bert"),uTt.forEach(t),QUo=r(sPe," \u2014 "),_z=n(sPe,"A",{href:!0});var bTt=s(_z);WUo=r(bTt,"MegatronBertForTokenClassification"),bTt.forEach(t),HUo=r(sPe," (Megatron-BERT model)"),sPe.forEach(t),UUo=i(J),Db=n(J,"LI",{});var lPe=s(Db);vue=n(lPe,"STRONG",{});var vTt=s(vue);JUo=r(vTt,"mobilebert"),vTt.forEach(t),YUo=r(lPe," \u2014 "),uz=n(lPe,"A",{href:!0});var FTt=s(uz);KUo=r(FTt,"MobileBertForTokenClassification"),FTt.forEach(t),ZUo=r(lPe," (MobileBERT model)"),lPe.forEach(t),eJo=i(J),Gb=n(J,"LI",{});var iPe=s(Gb);Fue=n(iPe,"STRONG",{});var TTt=s(Fue);oJo=r(TTt,"mpnet"),TTt.forEach(t),rJo=r(iPe," \u2014 "),bz=n(iPe,"A",{href:!0});var MTt=s(bz);tJo=r(MTt,"MPNetForTokenClassification"),MTt.forEach(t),aJo=r(iPe," (MPNet model)"),iPe.forEach(t),nJo=i(J),Ob=n(J,"LI",{});var dPe=s(Ob);Tue=n(dPe,"STRONG",{});var ETt=s(Tue);sJo=r(ETt,"nezha"),ETt.forEach(t),lJo=r(dPe," \u2014 "),vz=n(dPe,"A",{href:!0});var CTt=s(vz);iJo=r(CTt,"NezhaForTokenClassification"),CTt.forEach(t),dJo=r(dPe," (Nezha model)"),dPe.forEach(t),cJo=i(J),Vb=n(J,"LI",{});var cPe=s(Vb);Mue=n(cPe,"STRONG",{});var wTt=s(Mue);fJo=r(wTt,"nystromformer"),wTt.forEach(t),mJo=r(cPe," \u2014 "),Fz=n(cPe,"A",{href:!0});var ATt=s(Fz);gJo=r(ATt,"NystromformerForTokenClassification"),ATt.forEach(t),hJo=r(cPe," (Nystr\xF6mformer model)"),cPe.forEach(t),pJo=i(J),Xb=n(J,"LI",{});var fPe=s(Xb);Eue=n(fPe,"STRONG",{});var LTt=s(Eue);_Jo=r(LTt,"qdqbert"),LTt.forEach(t),uJo=r(fPe," \u2014 "),Tz=n(fPe,"A",{href:!0});var yTt=s(Tz);bJo=r(yTt,"QDQBertForTokenClassification"),yTt.forEach(t),vJo=r(fPe," (QDQBert model)"),fPe.forEach(t),FJo=i(J),zb=n(J,"LI",{});var mPe=s(zb);Cue=n(mPe,"STRONG",{});var xTt=s(Cue);TJo=r(xTt,"rembert"),xTt.forEach(t),MJo=r(mPe," \u2014 "),Mz=n(mPe,"A",{href:!0});var $Tt=s(Mz);EJo=r($Tt,"RemBertForTokenClassification"),$Tt.forEach(t),CJo=r(mPe," (RemBERT model)"),mPe.forEach(t),wJo=i(J),Qb=n(J,"LI",{});var gPe=s(Qb);wue=n(gPe,"STRONG",{});var kTt=s(wue);AJo=r(kTt,"roberta"),kTt.forEach(t),LJo=r(gPe," \u2014 "),Ez=n(gPe,"A",{href:!0});var STt=s(Ez);yJo=r(STt,"RobertaForTokenClassification"),STt.forEach(t),xJo=r(gPe," (RoBERTa model)"),gPe.forEach(t),$Jo=i(J),Wb=n(J,"LI",{});var hPe=s(Wb);Aue=n(hPe,"STRONG",{});var RTt=s(Aue);kJo=r(RTt,"roformer"),RTt.forEach(t),SJo=r(hPe," \u2014 "),Cz=n(hPe,"A",{href:!0});var PTt=s(Cz);RJo=r(PTt,"RoFormerForTokenClassification"),PTt.forEach(t),PJo=r(hPe," (RoFormer model)"),hPe.forEach(t),BJo=i(J),Hb=n(J,"LI",{});var pPe=s(Hb);Lue=n(pPe,"STRONG",{});var BTt=s(Lue);NJo=r(BTt,"squeezebert"),BTt.forEach(t),IJo=r(pPe," \u2014 "),wz=n(pPe,"A",{href:!0});var NTt=s(wz);qJo=r(NTt,"SqueezeBertForTokenClassification"),NTt.forEach(t),jJo=r(pPe," (SqueezeBERT model)"),pPe.forEach(t),DJo=i(J),Ub=n(J,"LI",{});var _Pe=s(Ub);yue=n(_Pe,"STRONG",{});var ITt=s(yue);GJo=r(ITt,"xlm"),ITt.forEach(t),OJo=r(_Pe," \u2014 "),Az=n(_Pe,"A",{href:!0});var qTt=s(Az);VJo=r(qTt,"XLMForTokenClassification"),qTt.forEach(t),XJo=r(_Pe," (XLM model)"),_Pe.forEach(t),zJo=i(J),Jb=n(J,"LI",{});var uPe=s(Jb);xue=n(uPe,"STRONG",{});var jTt=s(xue);QJo=r(jTt,"xlm-roberta"),jTt.forEach(t),WJo=r(uPe," \u2014 "),Lz=n(uPe,"A",{href:!0});var DTt=s(Lz);HJo=r(DTt,"XLMRobertaForTokenClassification"),DTt.forEach(t),UJo=r(uPe," (XLM-RoBERTa model)"),uPe.forEach(t),JJo=i(J),Yb=n(J,"LI",{});var bPe=s(Yb);$ue=n(bPe,"STRONG",{});var GTt=s($ue);YJo=r(GTt,"xlm-roberta-xl"),GTt.forEach(t),KJo=r(bPe," \u2014 "),yz=n(bPe,"A",{href:!0});var OTt=s(yz);ZJo=r(OTt,"XLMRobertaXLForTokenClassification"),OTt.forEach(t),eYo=r(bPe," (XLM-RoBERTa-XL model)"),bPe.forEach(t),oYo=i(J),Kb=n(J,"LI",{});var vPe=s(Kb);kue=n(vPe,"STRONG",{});var VTt=s(kue);rYo=r(VTt,"xlnet"),VTt.forEach(t),tYo=r(vPe," \u2014 "),xz=n(vPe,"A",{href:!0});var XTt=s(xz);aYo=r(XTt,"XLNetForTokenClassification"),XTt.forEach(t),nYo=r(vPe," (XLNet model)"),vPe.forEach(t),sYo=i(J),Zb=n(J,"LI",{});var FPe=s(Zb);Sue=n(FPe,"STRONG",{});var zTt=s(Sue);lYo=r(zTt,"yoso"),zTt.forEach(t),iYo=r(FPe," \u2014 "),$z=n(FPe,"A",{href:!0});var QTt=s($z);dYo=r(QTt,"YosoForTokenClassification"),QTt.forEach(t),cYo=r(FPe," (YOSO model)"),FPe.forEach(t),J.forEach(t),fYo=i(ga),ev=n(ga,"P",{});var TPe=s(ev);mYo=r(TPe,"The model is set in evaluation mode by default using "),Rue=n(TPe,"CODE",{});var WTt=s(Rue);gYo=r(WTt,"model.eval()"),WTt.forEach(t),hYo=r(TPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(TPe,"CODE",{});var HTt=s(Pue);pYo=r(HTt,"model.train()"),HTt.forEach(t),TPe.forEach(t),_Yo=i(ga),T(ov.$$.fragment,ga),ga.forEach(t),sl.forEach(t),UOe=i(f),dd=n(f,"H2",{class:!0});var oze=s(dd);rv=n(oze,"A",{id:!0,class:!0,href:!0});var UTt=s(rv);Bue=n(UTt,"SPAN",{});var JTt=s(Bue);T(ey.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),uYo=i(oze),Nue=n(oze,"SPAN",{});var YTt=s(Nue);bYo=r(YTt,"AutoModelForQuestionAnswering"),YTt.forEach(t),oze.forEach(t),JOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(oy.$$.fragment,ll),vYo=i(ll),cd=n(ll,"P",{});var ore=s(cd);FYo=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kz=n(ore,"A",{href:!0});var KTt=s(kz);TYo=r(KTt,"from_pretrained()"),KTt.forEach(t),MYo=r(ore," class method or the "),Sz=n(ore,"A",{href:!0});var ZTt=s(Sz);EYo=r(ZTt,"from_config()"),ZTt.forEach(t),CYo=r(ore,` class
method.`),ore.forEach(t),wYo=i(ll),ry=n(ll,"P",{});var rze=s(ry);AYo=r(rze,"This class cannot be instantiated directly using "),Iue=n(rze,"CODE",{});var eMt=s(Iue);LYo=r(eMt,"__init__()"),eMt.forEach(t),yYo=r(rze," (throws an error)."),rze.forEach(t),xYo=i(ll),ht=n(ll,"DIV",{class:!0});var tA=s(ht);T(ty.$$.fragment,tA),$Yo=i(tA),que=n(tA,"P",{});var oMt=s(que);kYo=r(oMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oMt.forEach(t),SYo=i(tA),fd=n(tA,"P",{});var rre=s(fd);RYo=r(rre,`Note:
Loading a model from its configuration file does `),jue=n(rre,"STRONG",{});var rMt=s(jue);PYo=r(rMt,"not"),rMt.forEach(t),BYo=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(rre,"A",{href:!0});var tMt=s(Rz);NYo=r(tMt,"from_pretrained()"),tMt.forEach(t),IYo=r(rre," to load the model weights."),rre.forEach(t),qYo=i(tA),T(tv.$$.fragment,tA),tA.forEach(t),jYo=i(ll),no=n(ll,"DIV",{class:!0});var ha=s(no);T(ay.$$.fragment,ha),DYo=i(ha),Due=n(ha,"P",{});var aMt=s(Due);GYo=r(aMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aMt.forEach(t),OYo=i(ha),Oa=n(ha,"P",{});var aA=s(Oa);VYo=r(aA,"The model class to instantiate is selected based on the "),Gue=n(aA,"CODE",{});var nMt=s(Gue);XYo=r(nMt,"model_type"),nMt.forEach(t),zYo=r(aA,` property of the config object (either
passed as an argument or loaded from `),Oue=n(aA,"CODE",{});var sMt=s(Oue);QYo=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),WYo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(aA,"CODE",{});var lMt=s(Vue);HYo=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),UYo=r(aA,":"),aA.forEach(t),JYo=i(ha),V=n(ha,"UL",{});var X=s(V);av=n(X,"LI",{});var MPe=s(av);Xue=n(MPe,"STRONG",{});var iMt=s(Xue);YYo=r(iMt,"albert"),iMt.forEach(t),KYo=r(MPe," \u2014 "),Pz=n(MPe,"A",{href:!0});var dMt=s(Pz);ZYo=r(dMt,"AlbertForQuestionAnswering"),dMt.forEach(t),eKo=r(MPe," (ALBERT model)"),MPe.forEach(t),oKo=i(X),nv=n(X,"LI",{});var EPe=s(nv);zue=n(EPe,"STRONG",{});var cMt=s(zue);rKo=r(cMt,"bart"),cMt.forEach(t),tKo=r(EPe," \u2014 "),Bz=n(EPe,"A",{href:!0});var fMt=s(Bz);aKo=r(fMt,"BartForQuestionAnswering"),fMt.forEach(t),nKo=r(EPe," (BART model)"),EPe.forEach(t),sKo=i(X),sv=n(X,"LI",{});var CPe=s(sv);Que=n(CPe,"STRONG",{});var mMt=s(Que);lKo=r(mMt,"bert"),mMt.forEach(t),iKo=r(CPe," \u2014 "),Nz=n(CPe,"A",{href:!0});var gMt=s(Nz);dKo=r(gMt,"BertForQuestionAnswering"),gMt.forEach(t),cKo=r(CPe," (BERT model)"),CPe.forEach(t),fKo=i(X),lv=n(X,"LI",{});var wPe=s(lv);Wue=n(wPe,"STRONG",{});var hMt=s(Wue);mKo=r(hMt,"big_bird"),hMt.forEach(t),gKo=r(wPe," \u2014 "),Iz=n(wPe,"A",{href:!0});var pMt=s(Iz);hKo=r(pMt,"BigBirdForQuestionAnswering"),pMt.forEach(t),pKo=r(wPe," (BigBird model)"),wPe.forEach(t),_Ko=i(X),iv=n(X,"LI",{});var APe=s(iv);Hue=n(APe,"STRONG",{});var _Mt=s(Hue);uKo=r(_Mt,"bigbird_pegasus"),_Mt.forEach(t),bKo=r(APe," \u2014 "),qz=n(APe,"A",{href:!0});var uMt=s(qz);vKo=r(uMt,"BigBirdPegasusForQuestionAnswering"),uMt.forEach(t),FKo=r(APe," (BigBird-Pegasus model)"),APe.forEach(t),TKo=i(X),dv=n(X,"LI",{});var LPe=s(dv);Uue=n(LPe,"STRONG",{});var bMt=s(Uue);MKo=r(bMt,"camembert"),bMt.forEach(t),EKo=r(LPe," \u2014 "),jz=n(LPe,"A",{href:!0});var vMt=s(jz);CKo=r(vMt,"CamembertForQuestionAnswering"),vMt.forEach(t),wKo=r(LPe," (CamemBERT model)"),LPe.forEach(t),AKo=i(X),cv=n(X,"LI",{});var yPe=s(cv);Jue=n(yPe,"STRONG",{});var FMt=s(Jue);LKo=r(FMt,"canine"),FMt.forEach(t),yKo=r(yPe," \u2014 "),Dz=n(yPe,"A",{href:!0});var TMt=s(Dz);xKo=r(TMt,"CanineForQuestionAnswering"),TMt.forEach(t),$Ko=r(yPe," (CANINE model)"),yPe.forEach(t),kKo=i(X),fv=n(X,"LI",{});var xPe=s(fv);Yue=n(xPe,"STRONG",{});var MMt=s(Yue);SKo=r(MMt,"convbert"),MMt.forEach(t),RKo=r(xPe," \u2014 "),Gz=n(xPe,"A",{href:!0});var EMt=s(Gz);PKo=r(EMt,"ConvBertForQuestionAnswering"),EMt.forEach(t),BKo=r(xPe," (ConvBERT model)"),xPe.forEach(t),NKo=i(X),mv=n(X,"LI",{});var $Pe=s(mv);Kue=n($Pe,"STRONG",{});var CMt=s(Kue);IKo=r(CMt,"data2vec-text"),CMt.forEach(t),qKo=r($Pe," \u2014 "),Oz=n($Pe,"A",{href:!0});var wMt=s(Oz);jKo=r(wMt,"Data2VecTextForQuestionAnswering"),wMt.forEach(t),DKo=r($Pe," (Data2VecText model)"),$Pe.forEach(t),GKo=i(X),gv=n(X,"LI",{});var kPe=s(gv);Zue=n(kPe,"STRONG",{});var AMt=s(Zue);OKo=r(AMt,"deberta"),AMt.forEach(t),VKo=r(kPe," \u2014 "),Vz=n(kPe,"A",{href:!0});var LMt=s(Vz);XKo=r(LMt,"DebertaForQuestionAnswering"),LMt.forEach(t),zKo=r(kPe," (DeBERTa model)"),kPe.forEach(t),QKo=i(X),hv=n(X,"LI",{});var SPe=s(hv);e1e=n(SPe,"STRONG",{});var yMt=s(e1e);WKo=r(yMt,"deberta-v2"),yMt.forEach(t),HKo=r(SPe," \u2014 "),Xz=n(SPe,"A",{href:!0});var xMt=s(Xz);UKo=r(xMt,"DebertaV2ForQuestionAnswering"),xMt.forEach(t),JKo=r(SPe," (DeBERTa-v2 model)"),SPe.forEach(t),YKo=i(X),pv=n(X,"LI",{});var RPe=s(pv);o1e=n(RPe,"STRONG",{});var $Mt=s(o1e);KKo=r($Mt,"distilbert"),$Mt.forEach(t),ZKo=r(RPe," \u2014 "),zz=n(RPe,"A",{href:!0});var kMt=s(zz);eZo=r(kMt,"DistilBertForQuestionAnswering"),kMt.forEach(t),oZo=r(RPe," (DistilBERT model)"),RPe.forEach(t),rZo=i(X),_v=n(X,"LI",{});var PPe=s(_v);r1e=n(PPe,"STRONG",{});var SMt=s(r1e);tZo=r(SMt,"electra"),SMt.forEach(t),aZo=r(PPe," \u2014 "),Qz=n(PPe,"A",{href:!0});var RMt=s(Qz);nZo=r(RMt,"ElectraForQuestionAnswering"),RMt.forEach(t),sZo=r(PPe," (ELECTRA model)"),PPe.forEach(t),lZo=i(X),uv=n(X,"LI",{});var BPe=s(uv);t1e=n(BPe,"STRONG",{});var PMt=s(t1e);iZo=r(PMt,"flaubert"),PMt.forEach(t),dZo=r(BPe," \u2014 "),Wz=n(BPe,"A",{href:!0});var BMt=s(Wz);cZo=r(BMt,"FlaubertForQuestionAnsweringSimple"),BMt.forEach(t),fZo=r(BPe," (FlauBERT model)"),BPe.forEach(t),mZo=i(X),bv=n(X,"LI",{});var NPe=s(bv);a1e=n(NPe,"STRONG",{});var NMt=s(a1e);gZo=r(NMt,"fnet"),NMt.forEach(t),hZo=r(NPe," \u2014 "),Hz=n(NPe,"A",{href:!0});var IMt=s(Hz);pZo=r(IMt,"FNetForQuestionAnswering"),IMt.forEach(t),_Zo=r(NPe," (FNet model)"),NPe.forEach(t),uZo=i(X),vv=n(X,"LI",{});var IPe=s(vv);n1e=n(IPe,"STRONG",{});var qMt=s(n1e);bZo=r(qMt,"funnel"),qMt.forEach(t),vZo=r(IPe," \u2014 "),Uz=n(IPe,"A",{href:!0});var jMt=s(Uz);FZo=r(jMt,"FunnelForQuestionAnswering"),jMt.forEach(t),TZo=r(IPe," (Funnel Transformer model)"),IPe.forEach(t),MZo=i(X),Fv=n(X,"LI",{});var qPe=s(Fv);s1e=n(qPe,"STRONG",{});var DMt=s(s1e);EZo=r(DMt,"gptj"),DMt.forEach(t),CZo=r(qPe," \u2014 "),Jz=n(qPe,"A",{href:!0});var GMt=s(Jz);wZo=r(GMt,"GPTJForQuestionAnswering"),GMt.forEach(t),AZo=r(qPe," (GPT-J model)"),qPe.forEach(t),LZo=i(X),Tv=n(X,"LI",{});var jPe=s(Tv);l1e=n(jPe,"STRONG",{});var OMt=s(l1e);yZo=r(OMt,"ibert"),OMt.forEach(t),xZo=r(jPe," \u2014 "),Yz=n(jPe,"A",{href:!0});var VMt=s(Yz);$Zo=r(VMt,"IBertForQuestionAnswering"),VMt.forEach(t),kZo=r(jPe," (I-BERT model)"),jPe.forEach(t),SZo=i(X),Mv=n(X,"LI",{});var DPe=s(Mv);i1e=n(DPe,"STRONG",{});var XMt=s(i1e);RZo=r(XMt,"layoutlmv2"),XMt.forEach(t),PZo=r(DPe," \u2014 "),Kz=n(DPe,"A",{href:!0});var zMt=s(Kz);BZo=r(zMt,"LayoutLMv2ForQuestionAnswering"),zMt.forEach(t),NZo=r(DPe," (LayoutLMv2 model)"),DPe.forEach(t),IZo=i(X),Ev=n(X,"LI",{});var GPe=s(Ev);d1e=n(GPe,"STRONG",{});var QMt=s(d1e);qZo=r(QMt,"layoutlmv3"),QMt.forEach(t),jZo=r(GPe," \u2014 "),Zz=n(GPe,"A",{href:!0});var WMt=s(Zz);DZo=r(WMt,"LayoutLMv3ForQuestionAnswering"),WMt.forEach(t),GZo=r(GPe," (LayoutLMv3 model)"),GPe.forEach(t),OZo=i(X),Cv=n(X,"LI",{});var OPe=s(Cv);c1e=n(OPe,"STRONG",{});var HMt=s(c1e);VZo=r(HMt,"led"),HMt.forEach(t),XZo=r(OPe," \u2014 "),eQ=n(OPe,"A",{href:!0});var UMt=s(eQ);zZo=r(UMt,"LEDForQuestionAnswering"),UMt.forEach(t),QZo=r(OPe," (LED model)"),OPe.forEach(t),WZo=i(X),wv=n(X,"LI",{});var VPe=s(wv);f1e=n(VPe,"STRONG",{});var JMt=s(f1e);HZo=r(JMt,"longformer"),JMt.forEach(t),UZo=r(VPe," \u2014 "),oQ=n(VPe,"A",{href:!0});var YMt=s(oQ);JZo=r(YMt,"LongformerForQuestionAnswering"),YMt.forEach(t),YZo=r(VPe," (Longformer model)"),VPe.forEach(t),KZo=i(X),Av=n(X,"LI",{});var XPe=s(Av);m1e=n(XPe,"STRONG",{});var KMt=s(m1e);ZZo=r(KMt,"lxmert"),KMt.forEach(t),eer=r(XPe," \u2014 "),rQ=n(XPe,"A",{href:!0});var ZMt=s(rQ);oer=r(ZMt,"LxmertForQuestionAnswering"),ZMt.forEach(t),rer=r(XPe," (LXMERT model)"),XPe.forEach(t),ter=i(X),Lv=n(X,"LI",{});var zPe=s(Lv);g1e=n(zPe,"STRONG",{});var eEt=s(g1e);aer=r(eEt,"mbart"),eEt.forEach(t),ner=r(zPe," \u2014 "),tQ=n(zPe,"A",{href:!0});var oEt=s(tQ);ser=r(oEt,"MBartForQuestionAnswering"),oEt.forEach(t),ler=r(zPe," (mBART model)"),zPe.forEach(t),ier=i(X),yv=n(X,"LI",{});var QPe=s(yv);h1e=n(QPe,"STRONG",{});var rEt=s(h1e);der=r(rEt,"megatron-bert"),rEt.forEach(t),cer=r(QPe," \u2014 "),aQ=n(QPe,"A",{href:!0});var tEt=s(aQ);fer=r(tEt,"MegatronBertForQuestionAnswering"),tEt.forEach(t),mer=r(QPe," (Megatron-BERT model)"),QPe.forEach(t),ger=i(X),xv=n(X,"LI",{});var WPe=s(xv);p1e=n(WPe,"STRONG",{});var aEt=s(p1e);her=r(aEt,"mobilebert"),aEt.forEach(t),per=r(WPe," \u2014 "),nQ=n(WPe,"A",{href:!0});var nEt=s(nQ);_er=r(nEt,"MobileBertForQuestionAnswering"),nEt.forEach(t),uer=r(WPe," (MobileBERT model)"),WPe.forEach(t),ber=i(X),$v=n(X,"LI",{});var HPe=s($v);_1e=n(HPe,"STRONG",{});var sEt=s(_1e);ver=r(sEt,"mpnet"),sEt.forEach(t),Fer=r(HPe," \u2014 "),sQ=n(HPe,"A",{href:!0});var lEt=s(sQ);Ter=r(lEt,"MPNetForQuestionAnswering"),lEt.forEach(t),Mer=r(HPe," (MPNet model)"),HPe.forEach(t),Eer=i(X),kv=n(X,"LI",{});var UPe=s(kv);u1e=n(UPe,"STRONG",{});var iEt=s(u1e);Cer=r(iEt,"nezha"),iEt.forEach(t),wer=r(UPe," \u2014 "),lQ=n(UPe,"A",{href:!0});var dEt=s(lQ);Aer=r(dEt,"NezhaForQuestionAnswering"),dEt.forEach(t),Ler=r(UPe," (Nezha model)"),UPe.forEach(t),yer=i(X),Sv=n(X,"LI",{});var JPe=s(Sv);b1e=n(JPe,"STRONG",{});var cEt=s(b1e);xer=r(cEt,"nystromformer"),cEt.forEach(t),$er=r(JPe," \u2014 "),iQ=n(JPe,"A",{href:!0});var fEt=s(iQ);ker=r(fEt,"NystromformerForQuestionAnswering"),fEt.forEach(t),Ser=r(JPe," (Nystr\xF6mformer model)"),JPe.forEach(t),Rer=i(X),Rv=n(X,"LI",{});var YPe=s(Rv);v1e=n(YPe,"STRONG",{});var mEt=s(v1e);Per=r(mEt,"qdqbert"),mEt.forEach(t),Ber=r(YPe," \u2014 "),dQ=n(YPe,"A",{href:!0});var gEt=s(dQ);Ner=r(gEt,"QDQBertForQuestionAnswering"),gEt.forEach(t),Ier=r(YPe," (QDQBert model)"),YPe.forEach(t),qer=i(X),Pv=n(X,"LI",{});var KPe=s(Pv);F1e=n(KPe,"STRONG",{});var hEt=s(F1e);jer=r(hEt,"reformer"),hEt.forEach(t),Der=r(KPe," \u2014 "),cQ=n(KPe,"A",{href:!0});var pEt=s(cQ);Ger=r(pEt,"ReformerForQuestionAnswering"),pEt.forEach(t),Oer=r(KPe," (Reformer model)"),KPe.forEach(t),Ver=i(X),Bv=n(X,"LI",{});var ZPe=s(Bv);T1e=n(ZPe,"STRONG",{});var _Et=s(T1e);Xer=r(_Et,"rembert"),_Et.forEach(t),zer=r(ZPe," \u2014 "),fQ=n(ZPe,"A",{href:!0});var uEt=s(fQ);Qer=r(uEt,"RemBertForQuestionAnswering"),uEt.forEach(t),Wer=r(ZPe," (RemBERT model)"),ZPe.forEach(t),Her=i(X),Nv=n(X,"LI",{});var eBe=s(Nv);M1e=n(eBe,"STRONG",{});var bEt=s(M1e);Uer=r(bEt,"roberta"),bEt.forEach(t),Jer=r(eBe," \u2014 "),mQ=n(eBe,"A",{href:!0});var vEt=s(mQ);Yer=r(vEt,"RobertaForQuestionAnswering"),vEt.forEach(t),Ker=r(eBe," (RoBERTa model)"),eBe.forEach(t),Zer=i(X),Iv=n(X,"LI",{});var oBe=s(Iv);E1e=n(oBe,"STRONG",{});var FEt=s(E1e);eor=r(FEt,"roformer"),FEt.forEach(t),oor=r(oBe," \u2014 "),gQ=n(oBe,"A",{href:!0});var TEt=s(gQ);ror=r(TEt,"RoFormerForQuestionAnswering"),TEt.forEach(t),tor=r(oBe," (RoFormer model)"),oBe.forEach(t),aor=i(X),qv=n(X,"LI",{});var rBe=s(qv);C1e=n(rBe,"STRONG",{});var MEt=s(C1e);nor=r(MEt,"splinter"),MEt.forEach(t),sor=r(rBe," \u2014 "),hQ=n(rBe,"A",{href:!0});var EEt=s(hQ);lor=r(EEt,"SplinterForQuestionAnswering"),EEt.forEach(t),ior=r(rBe," (Splinter model)"),rBe.forEach(t),dor=i(X),jv=n(X,"LI",{});var tBe=s(jv);w1e=n(tBe,"STRONG",{});var CEt=s(w1e);cor=r(CEt,"squeezebert"),CEt.forEach(t),mor=r(tBe," \u2014 "),pQ=n(tBe,"A",{href:!0});var wEt=s(pQ);gor=r(wEt,"SqueezeBertForQuestionAnswering"),wEt.forEach(t),hor=r(tBe," (SqueezeBERT model)"),tBe.forEach(t),por=i(X),Dv=n(X,"LI",{});var aBe=s(Dv);A1e=n(aBe,"STRONG",{});var AEt=s(A1e);_or=r(AEt,"xlm"),AEt.forEach(t),uor=r(aBe," \u2014 "),_Q=n(aBe,"A",{href:!0});var LEt=s(_Q);bor=r(LEt,"XLMForQuestionAnsweringSimple"),LEt.forEach(t),vor=r(aBe," (XLM model)"),aBe.forEach(t),For=i(X),Gv=n(X,"LI",{});var nBe=s(Gv);L1e=n(nBe,"STRONG",{});var yEt=s(L1e);Tor=r(yEt,"xlm-roberta"),yEt.forEach(t),Mor=r(nBe," \u2014 "),uQ=n(nBe,"A",{href:!0});var xEt=s(uQ);Eor=r(xEt,"XLMRobertaForQuestionAnswering"),xEt.forEach(t),Cor=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),wor=i(X),Ov=n(X,"LI",{});var sBe=s(Ov);y1e=n(sBe,"STRONG",{});var $Et=s(y1e);Aor=r($Et,"xlm-roberta-xl"),$Et.forEach(t),Lor=r(sBe," \u2014 "),bQ=n(sBe,"A",{href:!0});var kEt=s(bQ);yor=r(kEt,"XLMRobertaXLForQuestionAnswering"),kEt.forEach(t),xor=r(sBe," (XLM-RoBERTa-XL model)"),sBe.forEach(t),$or=i(X),Vv=n(X,"LI",{});var lBe=s(Vv);x1e=n(lBe,"STRONG",{});var SEt=s(x1e);kor=r(SEt,"xlnet"),SEt.forEach(t),Sor=r(lBe," \u2014 "),vQ=n(lBe,"A",{href:!0});var REt=s(vQ);Ror=r(REt,"XLNetForQuestionAnsweringSimple"),REt.forEach(t),Por=r(lBe," (XLNet model)"),lBe.forEach(t),Bor=i(X),Xv=n(X,"LI",{});var iBe=s(Xv);$1e=n(iBe,"STRONG",{});var PEt=s($1e);Nor=r(PEt,"yoso"),PEt.forEach(t),Ior=r(iBe," \u2014 "),FQ=n(iBe,"A",{href:!0});var BEt=s(FQ);qor=r(BEt,"YosoForQuestionAnswering"),BEt.forEach(t),jor=r(iBe," (YOSO model)"),iBe.forEach(t),X.forEach(t),Dor=i(ha),zv=n(ha,"P",{});var dBe=s(zv);Gor=r(dBe,"The model is set in evaluation mode by default using "),k1e=n(dBe,"CODE",{});var NEt=s(k1e);Oor=r(NEt,"model.eval()"),NEt.forEach(t),Vor=r(dBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=n(dBe,"CODE",{});var IEt=s(S1e);Xor=r(IEt,"model.train()"),IEt.forEach(t),dBe.forEach(t),zor=i(ha),T(Qv.$$.fragment,ha),ha.forEach(t),ll.forEach(t),YOe=i(f),md=n(f,"H2",{class:!0});var tze=s(md);Wv=n(tze,"A",{id:!0,class:!0,href:!0});var qEt=s(Wv);R1e=n(qEt,"SPAN",{});var jEt=s(R1e);T(ny.$$.fragment,jEt),jEt.forEach(t),qEt.forEach(t),Qor=i(tze),P1e=n(tze,"SPAN",{});var DEt=s(P1e);Wor=r(DEt,"AutoModelForTableQuestionAnswering"),DEt.forEach(t),tze.forEach(t),KOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(sy.$$.fragment,il),Hor=i(il),gd=n(il,"P",{});var tre=s(gd);Uor=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TQ=n(tre,"A",{href:!0});var GEt=s(TQ);Jor=r(GEt,"from_pretrained()"),GEt.forEach(t),Yor=r(tre," class method or the "),MQ=n(tre,"A",{href:!0});var OEt=s(MQ);Kor=r(OEt,"from_config()"),OEt.forEach(t),Zor=r(tre,` class
method.`),tre.forEach(t),err=i(il),ly=n(il,"P",{});var aze=s(ly);orr=r(aze,"This class cannot be instantiated directly using "),B1e=n(aze,"CODE",{});var VEt=s(B1e);rrr=r(VEt,"__init__()"),VEt.forEach(t),trr=r(aze," (throws an error)."),aze.forEach(t),arr=i(il),pt=n(il,"DIV",{class:!0});var nA=s(pt);T(iy.$$.fragment,nA),nrr=i(nA),N1e=n(nA,"P",{});var XEt=s(N1e);srr=r(XEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XEt.forEach(t),lrr=i(nA),hd=n(nA,"P",{});var are=s(hd);irr=r(are,`Note:
Loading a model from its configuration file does `),I1e=n(are,"STRONG",{});var zEt=s(I1e);drr=r(zEt,"not"),zEt.forEach(t),crr=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(are,"A",{href:!0});var QEt=s(EQ);frr=r(QEt,"from_pretrained()"),QEt.forEach(t),mrr=r(are," to load the model weights."),are.forEach(t),grr=i(nA),T(Hv.$$.fragment,nA),nA.forEach(t),hrr=i(il),so=n(il,"DIV",{class:!0});var pa=s(so);T(dy.$$.fragment,pa),prr=i(pa),q1e=n(pa,"P",{});var WEt=s(q1e);_rr=r(WEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WEt.forEach(t),urr=i(pa),Va=n(pa,"P",{});var sA=s(Va);brr=r(sA,"The model class to instantiate is selected based on the "),j1e=n(sA,"CODE",{});var HEt=s(j1e);vrr=r(HEt,"model_type"),HEt.forEach(t),Frr=r(sA,` property of the config object (either
passed as an argument or loaded from `),D1e=n(sA,"CODE",{});var UEt=s(D1e);Trr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),Mrr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(sA,"CODE",{});var JEt=s(G1e);Err=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),Crr=r(sA,":"),sA.forEach(t),wrr=i(pa),O1e=n(pa,"UL",{});var YEt=s(O1e);Uv=n(YEt,"LI",{});var cBe=s(Uv);V1e=n(cBe,"STRONG",{});var KEt=s(V1e);Arr=r(KEt,"tapas"),KEt.forEach(t),Lrr=r(cBe," \u2014 "),CQ=n(cBe,"A",{href:!0});var ZEt=s(CQ);yrr=r(ZEt,"TapasForQuestionAnswering"),ZEt.forEach(t),xrr=r(cBe," (TAPAS model)"),cBe.forEach(t),YEt.forEach(t),$rr=i(pa),Jv=n(pa,"P",{});var fBe=s(Jv);krr=r(fBe,"The model is set in evaluation mode by default using "),X1e=n(fBe,"CODE",{});var e4t=s(X1e);Srr=r(e4t,"model.eval()"),e4t.forEach(t),Rrr=r(fBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(fBe,"CODE",{});var o4t=s(z1e);Prr=r(o4t,"model.train()"),o4t.forEach(t),fBe.forEach(t),Brr=i(pa),T(Yv.$$.fragment,pa),pa.forEach(t),il.forEach(t),ZOe=i(f),pd=n(f,"H2",{class:!0});var nze=s(pd);Kv=n(nze,"A",{id:!0,class:!0,href:!0});var r4t=s(Kv);Q1e=n(r4t,"SPAN",{});var t4t=s(Q1e);T(cy.$$.fragment,t4t),t4t.forEach(t),r4t.forEach(t),Nrr=i(nze),W1e=n(nze,"SPAN",{});var a4t=s(W1e);Irr=r(a4t,"AutoModelForImageClassification"),a4t.forEach(t),nze.forEach(t),eVe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(fy.$$.fragment,dl),qrr=i(dl),_d=n(dl,"P",{});var nre=s(_d);jrr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wQ=n(nre,"A",{href:!0});var n4t=s(wQ);Drr=r(n4t,"from_pretrained()"),n4t.forEach(t),Grr=r(nre," class method or the "),AQ=n(nre,"A",{href:!0});var s4t=s(AQ);Orr=r(s4t,"from_config()"),s4t.forEach(t),Vrr=r(nre,` class
method.`),nre.forEach(t),Xrr=i(dl),my=n(dl,"P",{});var sze=s(my);zrr=r(sze,"This class cannot be instantiated directly using "),H1e=n(sze,"CODE",{});var l4t=s(H1e);Qrr=r(l4t,"__init__()"),l4t.forEach(t),Wrr=r(sze," (throws an error)."),sze.forEach(t),Hrr=i(dl),_t=n(dl,"DIV",{class:!0});var lA=s(_t);T(gy.$$.fragment,lA),Urr=i(lA),U1e=n(lA,"P",{});var i4t=s(U1e);Jrr=r(i4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),i4t.forEach(t),Yrr=i(lA),ud=n(lA,"P",{});var sre=s(ud);Krr=r(sre,`Note:
Loading a model from its configuration file does `),J1e=n(sre,"STRONG",{});var d4t=s(J1e);Zrr=r(d4t,"not"),d4t.forEach(t),etr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(sre,"A",{href:!0});var c4t=s(LQ);otr=r(c4t,"from_pretrained()"),c4t.forEach(t),rtr=r(sre," to load the model weights."),sre.forEach(t),ttr=i(lA),T(Zv.$$.fragment,lA),lA.forEach(t),atr=i(dl),lo=n(dl,"DIV",{class:!0});var _a=s(lo);T(hy.$$.fragment,_a),ntr=i(_a),Y1e=n(_a,"P",{});var f4t=s(Y1e);str=r(f4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f4t.forEach(t),ltr=i(_a),Xa=n(_a,"P",{});var iA=s(Xa);itr=r(iA,"The model class to instantiate is selected based on the "),K1e=n(iA,"CODE",{});var m4t=s(K1e);dtr=r(m4t,"model_type"),m4t.forEach(t),ctr=r(iA,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(iA,"CODE",{});var g4t=s(Z1e);ftr=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),mtr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(iA,"CODE",{});var h4t=s(e7e);gtr=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),htr=r(iA,":"),iA.forEach(t),ptr=i(_a),ue=n(_a,"UL",{});var Te=s(ue);eF=n(Te,"LI",{});var mBe=s(eF);o7e=n(mBe,"STRONG",{});var p4t=s(o7e);_tr=r(p4t,"beit"),p4t.forEach(t),utr=r(mBe," \u2014 "),yQ=n(mBe,"A",{href:!0});var _4t=s(yQ);btr=r(_4t,"BeitForImageClassification"),_4t.forEach(t),vtr=r(mBe," (BEiT model)"),mBe.forEach(t),Ftr=i(Te),oF=n(Te,"LI",{});var gBe=s(oF);r7e=n(gBe,"STRONG",{});var u4t=s(r7e);Ttr=r(u4t,"convnext"),u4t.forEach(t),Mtr=r(gBe," \u2014 "),xQ=n(gBe,"A",{href:!0});var b4t=s(xQ);Etr=r(b4t,"ConvNextForImageClassification"),b4t.forEach(t),Ctr=r(gBe," (ConvNeXT model)"),gBe.forEach(t),wtr=i(Te),rF=n(Te,"LI",{});var hBe=s(rF);t7e=n(hBe,"STRONG",{});var v4t=s(t7e);Atr=r(v4t,"cvt"),v4t.forEach(t),Ltr=r(hBe," \u2014 "),$Q=n(hBe,"A",{href:!0});var F4t=s($Q);ytr=r(F4t,"CvtForImageClassification"),F4t.forEach(t),xtr=r(hBe," (CvT model)"),hBe.forEach(t),$tr=i(Te),tF=n(Te,"LI",{});var pBe=s(tF);a7e=n(pBe,"STRONG",{});var T4t=s(a7e);ktr=r(T4t,"data2vec-vision"),T4t.forEach(t),Str=r(pBe," \u2014 "),kQ=n(pBe,"A",{href:!0});var M4t=s(kQ);Rtr=r(M4t,"Data2VecVisionForImageClassification"),M4t.forEach(t),Ptr=r(pBe," (Data2VecVision model)"),pBe.forEach(t),Btr=i(Te),zs=n(Te,"LI",{});var iS=s(zs);n7e=n(iS,"STRONG",{});var E4t=s(n7e);Ntr=r(E4t,"deit"),E4t.forEach(t),Itr=r(iS," \u2014 "),SQ=n(iS,"A",{href:!0});var C4t=s(SQ);qtr=r(C4t,"DeiTForImageClassification"),C4t.forEach(t),jtr=r(iS," or "),RQ=n(iS,"A",{href:!0});var w4t=s(RQ);Dtr=r(w4t,"DeiTForImageClassificationWithTeacher"),w4t.forEach(t),Gtr=r(iS," (DeiT model)"),iS.forEach(t),Otr=i(Te),aF=n(Te,"LI",{});var _Be=s(aF);s7e=n(_Be,"STRONG",{});var A4t=s(s7e);Vtr=r(A4t,"imagegpt"),A4t.forEach(t),Xtr=r(_Be," \u2014 "),PQ=n(_Be,"A",{href:!0});var L4t=s(PQ);ztr=r(L4t,"ImageGPTForImageClassification"),L4t.forEach(t),Qtr=r(_Be," (ImageGPT model)"),_Be.forEach(t),Wtr=i(Te),Qs=n(Te,"LI",{});var dS=s(Qs);l7e=n(dS,"STRONG",{});var y4t=s(l7e);Htr=r(y4t,"levit"),y4t.forEach(t),Utr=r(dS," \u2014 "),BQ=n(dS,"A",{href:!0});var x4t=s(BQ);Jtr=r(x4t,"LevitForImageClassification"),x4t.forEach(t),Ytr=r(dS," or "),NQ=n(dS,"A",{href:!0});var $4t=s(NQ);Ktr=r($4t,"LevitForImageClassificationWithTeacher"),$4t.forEach(t),Ztr=r(dS," (LeViT model)"),dS.forEach(t),ear=i(Te),nF=n(Te,"LI",{});var uBe=s(nF);i7e=n(uBe,"STRONG",{});var k4t=s(i7e);oar=r(k4t,"mobilenet_v1"),k4t.forEach(t),rar=r(uBe," \u2014 "),IQ=n(uBe,"A",{href:!0});var S4t=s(IQ);tar=r(S4t,"MobileNetV1ForImageClassification"),S4t.forEach(t),aar=r(uBe," (MobileNetV1 model)"),uBe.forEach(t),nar=i(Te),ut=n(Te,"LI",{});var yf=s(ut);d7e=n(yf,"STRONG",{});var R4t=s(d7e);sar=r(R4t,"perceiver"),R4t.forEach(t),lar=r(yf," \u2014 "),qQ=n(yf,"A",{href:!0});var P4t=s(qQ);iar=r(P4t,"PerceiverForImageClassificationLearned"),P4t.forEach(t),dar=r(yf," or "),jQ=n(yf,"A",{href:!0});var B4t=s(jQ);car=r(B4t,"PerceiverForImageClassificationFourier"),B4t.forEach(t),far=r(yf," or "),DQ=n(yf,"A",{href:!0});var N4t=s(DQ);mar=r(N4t,"PerceiverForImageClassificationConvProcessing"),N4t.forEach(t),gar=r(yf," (Perceiver model)"),yf.forEach(t),har=i(Te),sF=n(Te,"LI",{});var bBe=s(sF);c7e=n(bBe,"STRONG",{});var I4t=s(c7e);par=r(I4t,"poolformer"),I4t.forEach(t),_ar=r(bBe," \u2014 "),GQ=n(bBe,"A",{href:!0});var q4t=s(GQ);uar=r(q4t,"PoolFormerForImageClassification"),q4t.forEach(t),bar=r(bBe," (PoolFormer model)"),bBe.forEach(t),Far=i(Te),lF=n(Te,"LI",{});var vBe=s(lF);f7e=n(vBe,"STRONG",{});var j4t=s(f7e);Tar=r(j4t,"regnet"),j4t.forEach(t),Mar=r(vBe," \u2014 "),OQ=n(vBe,"A",{href:!0});var D4t=s(OQ);Ear=r(D4t,"RegNetForImageClassification"),D4t.forEach(t),Car=r(vBe," (RegNet model)"),vBe.forEach(t),war=i(Te),iF=n(Te,"LI",{});var FBe=s(iF);m7e=n(FBe,"STRONG",{});var G4t=s(m7e);Aar=r(G4t,"resnet"),G4t.forEach(t),Lar=r(FBe," \u2014 "),VQ=n(FBe,"A",{href:!0});var O4t=s(VQ);yar=r(O4t,"ResNetForImageClassification"),O4t.forEach(t),xar=r(FBe," (ResNet model)"),FBe.forEach(t),$ar=i(Te),dF=n(Te,"LI",{});var TBe=s(dF);g7e=n(TBe,"STRONG",{});var V4t=s(g7e);kar=r(V4t,"segformer"),V4t.forEach(t),Sar=r(TBe," \u2014 "),XQ=n(TBe,"A",{href:!0});var X4t=s(XQ);Rar=r(X4t,"SegformerForImageClassification"),X4t.forEach(t),Par=r(TBe," (SegFormer model)"),TBe.forEach(t),Bar=i(Te),cF=n(Te,"LI",{});var MBe=s(cF);h7e=n(MBe,"STRONG",{});var z4t=s(h7e);Nar=r(z4t,"swin"),z4t.forEach(t),Iar=r(MBe," \u2014 "),zQ=n(MBe,"A",{href:!0});var Q4t=s(zQ);qar=r(Q4t,"SwinForImageClassification"),Q4t.forEach(t),jar=r(MBe," (Swin Transformer model)"),MBe.forEach(t),Dar=i(Te),fF=n(Te,"LI",{});var EBe=s(fF);p7e=n(EBe,"STRONG",{});var W4t=s(p7e);Gar=r(W4t,"van"),W4t.forEach(t),Oar=r(EBe," \u2014 "),QQ=n(EBe,"A",{href:!0});var H4t=s(QQ);Var=r(H4t,"VanForImageClassification"),H4t.forEach(t),Xar=r(EBe," (VAN model)"),EBe.forEach(t),zar=i(Te),mF=n(Te,"LI",{});var CBe=s(mF);_7e=n(CBe,"STRONG",{});var U4t=s(_7e);Qar=r(U4t,"vit"),U4t.forEach(t),War=r(CBe," \u2014 "),WQ=n(CBe,"A",{href:!0});var J4t=s(WQ);Har=r(J4t,"ViTForImageClassification"),J4t.forEach(t),Uar=r(CBe," (ViT model)"),CBe.forEach(t),Te.forEach(t),Jar=i(_a),gF=n(_a,"P",{});var wBe=s(gF);Yar=r(wBe,"The model is set in evaluation mode by default using "),u7e=n(wBe,"CODE",{});var Y4t=s(u7e);Kar=r(Y4t,"model.eval()"),Y4t.forEach(t),Zar=r(wBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b7e=n(wBe,"CODE",{});var K4t=s(b7e);enr=r(K4t,"model.train()"),K4t.forEach(t),wBe.forEach(t),onr=i(_a),T(hF.$$.fragment,_a),_a.forEach(t),dl.forEach(t),oVe=i(f),bd=n(f,"H2",{class:!0});var lze=s(bd);pF=n(lze,"A",{id:!0,class:!0,href:!0});var Z4t=s(pF);v7e=n(Z4t,"SPAN",{});var eCt=s(v7e);T(py.$$.fragment,eCt),eCt.forEach(t),Z4t.forEach(t),rnr=i(lze),F7e=n(lze,"SPAN",{});var oCt=s(F7e);tnr=r(oCt,"AutoModelForVision2Seq"),oCt.forEach(t),lze.forEach(t),rVe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(_y.$$.fragment,cl),anr=i(cl),vd=n(cl,"P",{});var lre=s(vd);nnr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HQ=n(lre,"A",{href:!0});var rCt=s(HQ);snr=r(rCt,"from_pretrained()"),rCt.forEach(t),lnr=r(lre," class method or the "),UQ=n(lre,"A",{href:!0});var tCt=s(UQ);inr=r(tCt,"from_config()"),tCt.forEach(t),dnr=r(lre,` class
method.`),lre.forEach(t),cnr=i(cl),uy=n(cl,"P",{});var ize=s(uy);fnr=r(ize,"This class cannot be instantiated directly using "),T7e=n(ize,"CODE",{});var aCt=s(T7e);mnr=r(aCt,"__init__()"),aCt.forEach(t),gnr=r(ize," (throws an error)."),ize.forEach(t),hnr=i(cl),bt=n(cl,"DIV",{class:!0});var dA=s(bt);T(by.$$.fragment,dA),pnr=i(dA),M7e=n(dA,"P",{});var nCt=s(M7e);_nr=r(nCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nCt.forEach(t),unr=i(dA),Fd=n(dA,"P",{});var ire=s(Fd);bnr=r(ire,`Note:
Loading a model from its configuration file does `),E7e=n(ire,"STRONG",{});var sCt=s(E7e);vnr=r(sCt,"not"),sCt.forEach(t),Fnr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(ire,"A",{href:!0});var lCt=s(JQ);Tnr=r(lCt,"from_pretrained()"),lCt.forEach(t),Mnr=r(ire," to load the model weights."),ire.forEach(t),Enr=i(dA),T(_F.$$.fragment,dA),dA.forEach(t),Cnr=i(cl),io=n(cl,"DIV",{class:!0});var ua=s(io);T(vy.$$.fragment,ua),wnr=i(ua),C7e=n(ua,"P",{});var iCt=s(C7e);Anr=r(iCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iCt.forEach(t),Lnr=i(ua),za=n(ua,"P",{});var cA=s(za);ynr=r(cA,"The model class to instantiate is selected based on the "),w7e=n(cA,"CODE",{});var dCt=s(w7e);xnr=r(dCt,"model_type"),dCt.forEach(t),$nr=r(cA,` property of the config object (either
passed as an argument or loaded from `),A7e=n(cA,"CODE",{});var cCt=s(A7e);knr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),Snr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=n(cA,"CODE",{});var fCt=s(L7e);Rnr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),Pnr=r(cA,":"),cA.forEach(t),Bnr=i(ua),y7e=n(ua,"UL",{});var mCt=s(y7e);uF=n(mCt,"LI",{});var ABe=s(uF);x7e=n(ABe,"STRONG",{});var gCt=s(x7e);Nnr=r(gCt,"vision-encoder-decoder"),gCt.forEach(t),Inr=r(ABe," \u2014 "),YQ=n(ABe,"A",{href:!0});var hCt=s(YQ);qnr=r(hCt,"VisionEncoderDecoderModel"),hCt.forEach(t),jnr=r(ABe," (Vision Encoder decoder model)"),ABe.forEach(t),mCt.forEach(t),Dnr=i(ua),bF=n(ua,"P",{});var LBe=s(bF);Gnr=r(LBe,"The model is set in evaluation mode by default using "),$7e=n(LBe,"CODE",{});var pCt=s($7e);Onr=r(pCt,"model.eval()"),pCt.forEach(t),Vnr=r(LBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k7e=n(LBe,"CODE",{});var _Ct=s(k7e);Xnr=r(_Ct,"model.train()"),_Ct.forEach(t),LBe.forEach(t),znr=i(ua),T(vF.$$.fragment,ua),ua.forEach(t),cl.forEach(t),tVe=i(f),Td=n(f,"H2",{class:!0});var dze=s(Td);FF=n(dze,"A",{id:!0,class:!0,href:!0});var uCt=s(FF);S7e=n(uCt,"SPAN",{});var bCt=s(S7e);T(Fy.$$.fragment,bCt),bCt.forEach(t),uCt.forEach(t),Qnr=i(dze),R7e=n(dze,"SPAN",{});var vCt=s(R7e);Wnr=r(vCt,"AutoModelForVisualQuestionAnswering"),vCt.forEach(t),dze.forEach(t),aVe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(Ty.$$.fragment,fl),Hnr=i(fl),Md=n(fl,"P",{});var dre=s(Md);Unr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),KQ=n(dre,"A",{href:!0});var FCt=s(KQ);Jnr=r(FCt,"from_pretrained()"),FCt.forEach(t),Ynr=r(dre," class method or the "),ZQ=n(dre,"A",{href:!0});var TCt=s(ZQ);Knr=r(TCt,"from_config()"),TCt.forEach(t),Znr=r(dre,` class
method.`),dre.forEach(t),esr=i(fl),My=n(fl,"P",{});var cze=s(My);osr=r(cze,"This class cannot be instantiated directly using "),P7e=n(cze,"CODE",{});var MCt=s(P7e);rsr=r(MCt,"__init__()"),MCt.forEach(t),tsr=r(cze," (throws an error)."),cze.forEach(t),asr=i(fl),vt=n(fl,"DIV",{class:!0});var fA=s(vt);T(Ey.$$.fragment,fA),nsr=i(fA),B7e=n(fA,"P",{});var ECt=s(B7e);ssr=r(ECt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ECt.forEach(t),lsr=i(fA),Ed=n(fA,"P",{});var cre=s(Ed);isr=r(cre,`Note:
Loading a model from its configuration file does `),N7e=n(cre,"STRONG",{});var CCt=s(N7e);dsr=r(CCt,"not"),CCt.forEach(t),csr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(cre,"A",{href:!0});var wCt=s(eW);fsr=r(wCt,"from_pretrained()"),wCt.forEach(t),msr=r(cre," to load the model weights."),cre.forEach(t),gsr=i(fA),T(TF.$$.fragment,fA),fA.forEach(t),hsr=i(fl),co=n(fl,"DIV",{class:!0});var ba=s(co);T(Cy.$$.fragment,ba),psr=i(ba),I7e=n(ba,"P",{});var ACt=s(I7e);_sr=r(ACt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ACt.forEach(t),usr=i(ba),Qa=n(ba,"P",{});var mA=s(Qa);bsr=r(mA,"The model class to instantiate is selected based on the "),q7e=n(mA,"CODE",{});var LCt=s(q7e);vsr=r(LCt,"model_type"),LCt.forEach(t),Fsr=r(mA,` property of the config object (either
passed as an argument or loaded from `),j7e=n(mA,"CODE",{});var yCt=s(j7e);Tsr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),Msr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(mA,"CODE",{});var xCt=s(D7e);Esr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),Csr=r(mA,":"),mA.forEach(t),wsr=i(ba),G7e=n(ba,"UL",{});var $Ct=s(G7e);MF=n($Ct,"LI",{});var yBe=s(MF);O7e=n(yBe,"STRONG",{});var kCt=s(O7e);Asr=r(kCt,"vilt"),kCt.forEach(t),Lsr=r(yBe," \u2014 "),oW=n(yBe,"A",{href:!0});var SCt=s(oW);ysr=r(SCt,"ViltForQuestionAnswering"),SCt.forEach(t),xsr=r(yBe," (ViLT model)"),yBe.forEach(t),$Ct.forEach(t),$sr=i(ba),EF=n(ba,"P",{});var xBe=s(EF);ksr=r(xBe,"The model is set in evaluation mode by default using "),V7e=n(xBe,"CODE",{});var RCt=s(V7e);Ssr=r(RCt,"model.eval()"),RCt.forEach(t),Rsr=r(xBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X7e=n(xBe,"CODE",{});var PCt=s(X7e);Psr=r(PCt,"model.train()"),PCt.forEach(t),xBe.forEach(t),Bsr=i(ba),T(CF.$$.fragment,ba),ba.forEach(t),fl.forEach(t),nVe=i(f),Cd=n(f,"H2",{class:!0});var fze=s(Cd);wF=n(fze,"A",{id:!0,class:!0,href:!0});var BCt=s(wF);z7e=n(BCt,"SPAN",{});var NCt=s(z7e);T(wy.$$.fragment,NCt),NCt.forEach(t),BCt.forEach(t),Nsr=i(fze),Q7e=n(fze,"SPAN",{});var ICt=s(Q7e);Isr=r(ICt,"AutoModelForAudioClassification"),ICt.forEach(t),fze.forEach(t),sVe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(Ay.$$.fragment,ml),qsr=i(ml),wd=n(ml,"P",{});var fre=s(wd);jsr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rW=n(fre,"A",{href:!0});var qCt=s(rW);Dsr=r(qCt,"from_pretrained()"),qCt.forEach(t),Gsr=r(fre," class method or the "),tW=n(fre,"A",{href:!0});var jCt=s(tW);Osr=r(jCt,"from_config()"),jCt.forEach(t),Vsr=r(fre,` class
method.`),fre.forEach(t),Xsr=i(ml),Ly=n(ml,"P",{});var mze=s(Ly);zsr=r(mze,"This class cannot be instantiated directly using "),W7e=n(mze,"CODE",{});var DCt=s(W7e);Qsr=r(DCt,"__init__()"),DCt.forEach(t),Wsr=r(mze," (throws an error)."),mze.forEach(t),Hsr=i(ml),Ft=n(ml,"DIV",{class:!0});var gA=s(Ft);T(yy.$$.fragment,gA),Usr=i(gA),H7e=n(gA,"P",{});var GCt=s(H7e);Jsr=r(GCt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),GCt.forEach(t),Ysr=i(gA),Ad=n(gA,"P",{});var mre=s(Ad);Ksr=r(mre,`Note:
Loading a model from its configuration file does `),U7e=n(mre,"STRONG",{});var OCt=s(U7e);Zsr=r(OCt,"not"),OCt.forEach(t),elr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(mre,"A",{href:!0});var VCt=s(aW);olr=r(VCt,"from_pretrained()"),VCt.forEach(t),rlr=r(mre," to load the model weights."),mre.forEach(t),tlr=i(gA),T(AF.$$.fragment,gA),gA.forEach(t),alr=i(ml),fo=n(ml,"DIV",{class:!0});var va=s(fo);T(xy.$$.fragment,va),nlr=i(va),J7e=n(va,"P",{});var XCt=s(J7e);slr=r(XCt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XCt.forEach(t),llr=i(va),Wa=n(va,"P",{});var hA=s(Wa);ilr=r(hA,"The model class to instantiate is selected based on the "),Y7e=n(hA,"CODE",{});var zCt=s(Y7e);dlr=r(zCt,"model_type"),zCt.forEach(t),clr=r(hA,` property of the config object (either
passed as an argument or loaded from `),K7e=n(hA,"CODE",{});var QCt=s(K7e);flr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),mlr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(hA,"CODE",{});var WCt=s(Z7e);glr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),hlr=r(hA,":"),hA.forEach(t),plr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);LF=n(ze,"LI",{});var $Be=s(LF);e9e=n($Be,"STRONG",{});var HCt=s(e9e);_lr=r(HCt,"data2vec-audio"),HCt.forEach(t),ulr=r($Be," \u2014 "),nW=n($Be,"A",{href:!0});var UCt=s(nW);blr=r(UCt,"Data2VecAudioForSequenceClassification"),UCt.forEach(t),vlr=r($Be," (Data2VecAudio model)"),$Be.forEach(t),Flr=i(ze),yF=n(ze,"LI",{});var kBe=s(yF);o9e=n(kBe,"STRONG",{});var JCt=s(o9e);Tlr=r(JCt,"hubert"),JCt.forEach(t),Mlr=r(kBe," \u2014 "),sW=n(kBe,"A",{href:!0});var YCt=s(sW);Elr=r(YCt,"HubertForSequenceClassification"),YCt.forEach(t),Clr=r(kBe," (Hubert model)"),kBe.forEach(t),wlr=i(ze),xF=n(ze,"LI",{});var SBe=s(xF);r9e=n(SBe,"STRONG",{});var KCt=s(r9e);Alr=r(KCt,"sew"),KCt.forEach(t),Llr=r(SBe," \u2014 "),lW=n(SBe,"A",{href:!0});var ZCt=s(lW);ylr=r(ZCt,"SEWForSequenceClassification"),ZCt.forEach(t),xlr=r(SBe," (SEW model)"),SBe.forEach(t),$lr=i(ze),$F=n(ze,"LI",{});var RBe=s($F);t9e=n(RBe,"STRONG",{});var e5t=s(t9e);klr=r(e5t,"sew-d"),e5t.forEach(t),Slr=r(RBe," \u2014 "),iW=n(RBe,"A",{href:!0});var o5t=s(iW);Rlr=r(o5t,"SEWDForSequenceClassification"),o5t.forEach(t),Plr=r(RBe," (SEW-D model)"),RBe.forEach(t),Blr=i(ze),kF=n(ze,"LI",{});var PBe=s(kF);a9e=n(PBe,"STRONG",{});var r5t=s(a9e);Nlr=r(r5t,"unispeech"),r5t.forEach(t),Ilr=r(PBe," \u2014 "),dW=n(PBe,"A",{href:!0});var t5t=s(dW);qlr=r(t5t,"UniSpeechForSequenceClassification"),t5t.forEach(t),jlr=r(PBe," (UniSpeech model)"),PBe.forEach(t),Dlr=i(ze),SF=n(ze,"LI",{});var BBe=s(SF);n9e=n(BBe,"STRONG",{});var a5t=s(n9e);Glr=r(a5t,"unispeech-sat"),a5t.forEach(t),Olr=r(BBe," \u2014 "),cW=n(BBe,"A",{href:!0});var n5t=s(cW);Vlr=r(n5t,"UniSpeechSatForSequenceClassification"),n5t.forEach(t),Xlr=r(BBe," (UniSpeechSat model)"),BBe.forEach(t),zlr=i(ze),RF=n(ze,"LI",{});var NBe=s(RF);s9e=n(NBe,"STRONG",{});var s5t=s(s9e);Qlr=r(s5t,"wav2vec2"),s5t.forEach(t),Wlr=r(NBe," \u2014 "),fW=n(NBe,"A",{href:!0});var l5t=s(fW);Hlr=r(l5t,"Wav2Vec2ForSequenceClassification"),l5t.forEach(t),Ulr=r(NBe," (Wav2Vec2 model)"),NBe.forEach(t),Jlr=i(ze),PF=n(ze,"LI",{});var IBe=s(PF);l9e=n(IBe,"STRONG",{});var i5t=s(l9e);Ylr=r(i5t,"wav2vec2-conformer"),i5t.forEach(t),Klr=r(IBe," \u2014 "),mW=n(IBe,"A",{href:!0});var d5t=s(mW);Zlr=r(d5t,"Wav2Vec2ConformerForSequenceClassification"),d5t.forEach(t),eir=r(IBe," (Wav2Vec2-Conformer model)"),IBe.forEach(t),oir=i(ze),BF=n(ze,"LI",{});var qBe=s(BF);i9e=n(qBe,"STRONG",{});var c5t=s(i9e);rir=r(c5t,"wavlm"),c5t.forEach(t),tir=r(qBe," \u2014 "),gW=n(qBe,"A",{href:!0});var f5t=s(gW);air=r(f5t,"WavLMForSequenceClassification"),f5t.forEach(t),nir=r(qBe," (WavLM model)"),qBe.forEach(t),ze.forEach(t),sir=i(va),NF=n(va,"P",{});var jBe=s(NF);lir=r(jBe,"The model is set in evaluation mode by default using "),d9e=n(jBe,"CODE",{});var m5t=s(d9e);iir=r(m5t,"model.eval()"),m5t.forEach(t),dir=r(jBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c9e=n(jBe,"CODE",{});var g5t=s(c9e);cir=r(g5t,"model.train()"),g5t.forEach(t),jBe.forEach(t),fir=i(va),T(IF.$$.fragment,va),va.forEach(t),ml.forEach(t),lVe=i(f),Ld=n(f,"H2",{class:!0});var gze=s(Ld);qF=n(gze,"A",{id:!0,class:!0,href:!0});var h5t=s(qF);f9e=n(h5t,"SPAN",{});var p5t=s(f9e);T($y.$$.fragment,p5t),p5t.forEach(t),h5t.forEach(t),mir=i(gze),m9e=n(gze,"SPAN",{});var _5t=s(m9e);gir=r(_5t,"AutoModelForAudioFrameClassification"),_5t.forEach(t),gze.forEach(t),iVe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(ky.$$.fragment,gl),hir=i(gl),yd=n(gl,"P",{});var gre=s(yd);pir=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hW=n(gre,"A",{href:!0});var u5t=s(hW);_ir=r(u5t,"from_pretrained()"),u5t.forEach(t),uir=r(gre," class method or the "),pW=n(gre,"A",{href:!0});var b5t=s(pW);bir=r(b5t,"from_config()"),b5t.forEach(t),vir=r(gre,` class
method.`),gre.forEach(t),Fir=i(gl),Sy=n(gl,"P",{});var hze=s(Sy);Tir=r(hze,"This class cannot be instantiated directly using "),g9e=n(hze,"CODE",{});var v5t=s(g9e);Mir=r(v5t,"__init__()"),v5t.forEach(t),Eir=r(hze," (throws an error)."),hze.forEach(t),Cir=i(gl),Tt=n(gl,"DIV",{class:!0});var pA=s(Tt);T(Ry.$$.fragment,pA),wir=i(pA),h9e=n(pA,"P",{});var F5t=s(h9e);Air=r(F5t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),F5t.forEach(t),Lir=i(pA),xd=n(pA,"P",{});var hre=s(xd);yir=r(hre,`Note:
Loading a model from its configuration file does `),p9e=n(hre,"STRONG",{});var T5t=s(p9e);xir=r(T5t,"not"),T5t.forEach(t),$ir=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(hre,"A",{href:!0});var M5t=s(_W);kir=r(M5t,"from_pretrained()"),M5t.forEach(t),Sir=r(hre," to load the model weights."),hre.forEach(t),Rir=i(pA),T(jF.$$.fragment,pA),pA.forEach(t),Pir=i(gl),mo=n(gl,"DIV",{class:!0});var Fa=s(mo);T(Py.$$.fragment,Fa),Bir=i(Fa),_9e=n(Fa,"P",{});var E5t=s(_9e);Nir=r(E5t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),E5t.forEach(t),Iir=i(Fa),Ha=n(Fa,"P",{});var _A=s(Ha);qir=r(_A,"The model class to instantiate is selected based on the "),u9e=n(_A,"CODE",{});var C5t=s(u9e);jir=r(C5t,"model_type"),C5t.forEach(t),Dir=r(_A,` property of the config object (either
passed as an argument or loaded from `),b9e=n(_A,"CODE",{});var w5t=s(b9e);Gir=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),Oir=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v9e=n(_A,"CODE",{});var A5t=s(v9e);Vir=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),Xir=r(_A,":"),_A.forEach(t),zir=i(Fa),et=n(Fa,"UL",{});var hl=s(et);DF=n(hl,"LI",{});var DBe=s(DF);F9e=n(DBe,"STRONG",{});var L5t=s(F9e);Qir=r(L5t,"data2vec-audio"),L5t.forEach(t),Wir=r(DBe," \u2014 "),uW=n(DBe,"A",{href:!0});var y5t=s(uW);Hir=r(y5t,"Data2VecAudioForAudioFrameClassification"),y5t.forEach(t),Uir=r(DBe," (Data2VecAudio model)"),DBe.forEach(t),Jir=i(hl),GF=n(hl,"LI",{});var GBe=s(GF);T9e=n(GBe,"STRONG",{});var x5t=s(T9e);Yir=r(x5t,"unispeech-sat"),x5t.forEach(t),Kir=r(GBe," \u2014 "),bW=n(GBe,"A",{href:!0});var $5t=s(bW);Zir=r($5t,"UniSpeechSatForAudioFrameClassification"),$5t.forEach(t),edr=r(GBe," (UniSpeechSat model)"),GBe.forEach(t),odr=i(hl),OF=n(hl,"LI",{});var OBe=s(OF);M9e=n(OBe,"STRONG",{});var k5t=s(M9e);rdr=r(k5t,"wav2vec2"),k5t.forEach(t),tdr=r(OBe," \u2014 "),vW=n(OBe,"A",{href:!0});var S5t=s(vW);adr=r(S5t,"Wav2Vec2ForAudioFrameClassification"),S5t.forEach(t),ndr=r(OBe," (Wav2Vec2 model)"),OBe.forEach(t),sdr=i(hl),VF=n(hl,"LI",{});var VBe=s(VF);E9e=n(VBe,"STRONG",{});var R5t=s(E9e);ldr=r(R5t,"wav2vec2-conformer"),R5t.forEach(t),idr=r(VBe," \u2014 "),FW=n(VBe,"A",{href:!0});var P5t=s(FW);ddr=r(P5t,"Wav2Vec2ConformerForAudioFrameClassification"),P5t.forEach(t),cdr=r(VBe," (Wav2Vec2-Conformer model)"),VBe.forEach(t),fdr=i(hl),XF=n(hl,"LI",{});var XBe=s(XF);C9e=n(XBe,"STRONG",{});var B5t=s(C9e);mdr=r(B5t,"wavlm"),B5t.forEach(t),gdr=r(XBe," \u2014 "),TW=n(XBe,"A",{href:!0});var N5t=s(TW);hdr=r(N5t,"WavLMForAudioFrameClassification"),N5t.forEach(t),pdr=r(XBe," (WavLM model)"),XBe.forEach(t),hl.forEach(t),_dr=i(Fa),zF=n(Fa,"P",{});var zBe=s(zF);udr=r(zBe,"The model is set in evaluation mode by default using "),w9e=n(zBe,"CODE",{});var I5t=s(w9e);bdr=r(I5t,"model.eval()"),I5t.forEach(t),vdr=r(zBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A9e=n(zBe,"CODE",{});var q5t=s(A9e);Fdr=r(q5t,"model.train()"),q5t.forEach(t),zBe.forEach(t),Tdr=i(Fa),T(QF.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),dVe=i(f),$d=n(f,"H2",{class:!0});var pze=s($d);WF=n(pze,"A",{id:!0,class:!0,href:!0});var j5t=s(WF);L9e=n(j5t,"SPAN",{});var D5t=s(L9e);T(By.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),Mdr=i(pze),y9e=n(pze,"SPAN",{});var G5t=s(y9e);Edr=r(G5t,"AutoModelForCTC"),G5t.forEach(t),pze.forEach(t),cVe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(Ny.$$.fragment,pl),Cdr=i(pl),kd=n(pl,"P",{});var pre=s(kd);wdr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MW=n(pre,"A",{href:!0});var O5t=s(MW);Adr=r(O5t,"from_pretrained()"),O5t.forEach(t),Ldr=r(pre," class method or the "),EW=n(pre,"A",{href:!0});var V5t=s(EW);ydr=r(V5t,"from_config()"),V5t.forEach(t),xdr=r(pre,` class
method.`),pre.forEach(t),$dr=i(pl),Iy=n(pl,"P",{});var _ze=s(Iy);kdr=r(_ze,"This class cannot be instantiated directly using "),x9e=n(_ze,"CODE",{});var X5t=s(x9e);Sdr=r(X5t,"__init__()"),X5t.forEach(t),Rdr=r(_ze," (throws an error)."),_ze.forEach(t),Pdr=i(pl),Mt=n(pl,"DIV",{class:!0});var uA=s(Mt);T(qy.$$.fragment,uA),Bdr=i(uA),$9e=n(uA,"P",{});var z5t=s($9e);Ndr=r(z5t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),z5t.forEach(t),Idr=i(uA),Sd=n(uA,"P",{});var _re=s(Sd);qdr=r(_re,`Note:
Loading a model from its configuration file does `),k9e=n(_re,"STRONG",{});var Q5t=s(k9e);jdr=r(Q5t,"not"),Q5t.forEach(t),Ddr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(_re,"A",{href:!0});var W5t=s(CW);Gdr=r(W5t,"from_pretrained()"),W5t.forEach(t),Odr=r(_re," to load the model weights."),_re.forEach(t),Vdr=i(uA),T(HF.$$.fragment,uA),uA.forEach(t),Xdr=i(pl),go=n(pl,"DIV",{class:!0});var Ta=s(go);T(jy.$$.fragment,Ta),zdr=i(Ta),S9e=n(Ta,"P",{});var H5t=s(S9e);Qdr=r(H5t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),H5t.forEach(t),Wdr=i(Ta),Ua=n(Ta,"P",{});var bA=s(Ua);Hdr=r(bA,"The model class to instantiate is selected based on the "),R9e=n(bA,"CODE",{});var U5t=s(R9e);Udr=r(U5t,"model_type"),U5t.forEach(t),Jdr=r(bA,` property of the config object (either
passed as an argument or loaded from `),P9e=n(bA,"CODE",{});var J5t=s(P9e);Ydr=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),Kdr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B9e=n(bA,"CODE",{});var Y5t=s(B9e);Zdr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),ecr=r(bA,":"),bA.forEach(t),ocr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);UF=n(Be,"LI",{});var QBe=s(UF);N9e=n(QBe,"STRONG",{});var K5t=s(N9e);rcr=r(K5t,"data2vec-audio"),K5t.forEach(t),tcr=r(QBe," \u2014 "),wW=n(QBe,"A",{href:!0});var Z5t=s(wW);acr=r(Z5t,"Data2VecAudioForCTC"),Z5t.forEach(t),ncr=r(QBe," (Data2VecAudio model)"),QBe.forEach(t),scr=i(Be),JF=n(Be,"LI",{});var WBe=s(JF);I9e=n(WBe,"STRONG",{});var e3t=s(I9e);lcr=r(e3t,"hubert"),e3t.forEach(t),icr=r(WBe," \u2014 "),AW=n(WBe,"A",{href:!0});var o3t=s(AW);dcr=r(o3t,"HubertForCTC"),o3t.forEach(t),ccr=r(WBe," (Hubert model)"),WBe.forEach(t),fcr=i(Be),YF=n(Be,"LI",{});var HBe=s(YF);q9e=n(HBe,"STRONG",{});var r3t=s(q9e);mcr=r(r3t,"mctct"),r3t.forEach(t),gcr=r(HBe," \u2014 "),LW=n(HBe,"A",{href:!0});var t3t=s(LW);hcr=r(t3t,"MCTCTForCTC"),t3t.forEach(t),pcr=r(HBe," (M-CTC-T model)"),HBe.forEach(t),_cr=i(Be),KF=n(Be,"LI",{});var UBe=s(KF);j9e=n(UBe,"STRONG",{});var a3t=s(j9e);ucr=r(a3t,"sew"),a3t.forEach(t),bcr=r(UBe," \u2014 "),yW=n(UBe,"A",{href:!0});var n3t=s(yW);vcr=r(n3t,"SEWForCTC"),n3t.forEach(t),Fcr=r(UBe," (SEW model)"),UBe.forEach(t),Tcr=i(Be),ZF=n(Be,"LI",{});var JBe=s(ZF);D9e=n(JBe,"STRONG",{});var s3t=s(D9e);Mcr=r(s3t,"sew-d"),s3t.forEach(t),Ecr=r(JBe," \u2014 "),xW=n(JBe,"A",{href:!0});var l3t=s(xW);Ccr=r(l3t,"SEWDForCTC"),l3t.forEach(t),wcr=r(JBe," (SEW-D model)"),JBe.forEach(t),Acr=i(Be),eT=n(Be,"LI",{});var YBe=s(eT);G9e=n(YBe,"STRONG",{});var i3t=s(G9e);Lcr=r(i3t,"unispeech"),i3t.forEach(t),ycr=r(YBe," \u2014 "),$W=n(YBe,"A",{href:!0});var d3t=s($W);xcr=r(d3t,"UniSpeechForCTC"),d3t.forEach(t),$cr=r(YBe," (UniSpeech model)"),YBe.forEach(t),kcr=i(Be),oT=n(Be,"LI",{});var KBe=s(oT);O9e=n(KBe,"STRONG",{});var c3t=s(O9e);Scr=r(c3t,"unispeech-sat"),c3t.forEach(t),Rcr=r(KBe," \u2014 "),kW=n(KBe,"A",{href:!0});var f3t=s(kW);Pcr=r(f3t,"UniSpeechSatForCTC"),f3t.forEach(t),Bcr=r(KBe," (UniSpeechSat model)"),KBe.forEach(t),Ncr=i(Be),rT=n(Be,"LI",{});var ZBe=s(rT);V9e=n(ZBe,"STRONG",{});var m3t=s(V9e);Icr=r(m3t,"wav2vec2"),m3t.forEach(t),qcr=r(ZBe," \u2014 "),SW=n(ZBe,"A",{href:!0});var g3t=s(SW);jcr=r(g3t,"Wav2Vec2ForCTC"),g3t.forEach(t),Dcr=r(ZBe," (Wav2Vec2 model)"),ZBe.forEach(t),Gcr=i(Be),tT=n(Be,"LI",{});var eNe=s(tT);X9e=n(eNe,"STRONG",{});var h3t=s(X9e);Ocr=r(h3t,"wav2vec2-conformer"),h3t.forEach(t),Vcr=r(eNe," \u2014 "),RW=n(eNe,"A",{href:!0});var p3t=s(RW);Xcr=r(p3t,"Wav2Vec2ConformerForCTC"),p3t.forEach(t),zcr=r(eNe," (Wav2Vec2-Conformer model)"),eNe.forEach(t),Qcr=i(Be),aT=n(Be,"LI",{});var oNe=s(aT);z9e=n(oNe,"STRONG",{});var _3t=s(z9e);Wcr=r(_3t,"wavlm"),_3t.forEach(t),Hcr=r(oNe," \u2014 "),PW=n(oNe,"A",{href:!0});var u3t=s(PW);Ucr=r(u3t,"WavLMForCTC"),u3t.forEach(t),Jcr=r(oNe," (WavLM model)"),oNe.forEach(t),Be.forEach(t),Ycr=i(Ta),nT=n(Ta,"P",{});var rNe=s(nT);Kcr=r(rNe,"The model is set in evaluation mode by default using "),Q9e=n(rNe,"CODE",{});var b3t=s(Q9e);Zcr=r(b3t,"model.eval()"),b3t.forEach(t),efr=r(rNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W9e=n(rNe,"CODE",{});var v3t=s(W9e);ofr=r(v3t,"model.train()"),v3t.forEach(t),rNe.forEach(t),rfr=i(Ta),T(sT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),fVe=i(f),Rd=n(f,"H2",{class:!0});var uze=s(Rd);lT=n(uze,"A",{id:!0,class:!0,href:!0});var F3t=s(lT);H9e=n(F3t,"SPAN",{});var T3t=s(H9e);T(Dy.$$.fragment,T3t),T3t.forEach(t),F3t.forEach(t),tfr=i(uze),U9e=n(uze,"SPAN",{});var M3t=s(U9e);afr=r(M3t,"AutoModelForSpeechSeq2Seq"),M3t.forEach(t),uze.forEach(t),mVe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(Gy.$$.fragment,_l),nfr=i(_l),Pd=n(_l,"P",{});var ure=s(Pd);sfr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BW=n(ure,"A",{href:!0});var E3t=s(BW);lfr=r(E3t,"from_pretrained()"),E3t.forEach(t),ifr=r(ure," class method or the "),NW=n(ure,"A",{href:!0});var C3t=s(NW);dfr=r(C3t,"from_config()"),C3t.forEach(t),cfr=r(ure,` class
method.`),ure.forEach(t),ffr=i(_l),Oy=n(_l,"P",{});var bze=s(Oy);mfr=r(bze,"This class cannot be instantiated directly using "),J9e=n(bze,"CODE",{});var w3t=s(J9e);gfr=r(w3t,"__init__()"),w3t.forEach(t),hfr=r(bze," (throws an error)."),bze.forEach(t),pfr=i(_l),Et=n(_l,"DIV",{class:!0});var vA=s(Et);T(Vy.$$.fragment,vA),_fr=i(vA),Y9e=n(vA,"P",{});var A3t=s(Y9e);ufr=r(A3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A3t.forEach(t),bfr=i(vA),Bd=n(vA,"P",{});var bre=s(Bd);vfr=r(bre,`Note:
Loading a model from its configuration file does `),K9e=n(bre,"STRONG",{});var L3t=s(K9e);Ffr=r(L3t,"not"),L3t.forEach(t),Tfr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(bre,"A",{href:!0});var y3t=s(IW);Mfr=r(y3t,"from_pretrained()"),y3t.forEach(t),Efr=r(bre," to load the model weights."),bre.forEach(t),Cfr=i(vA),T(iT.$$.fragment,vA),vA.forEach(t),wfr=i(_l),ho=n(_l,"DIV",{class:!0});var Ma=s(ho);T(Xy.$$.fragment,Ma),Afr=i(Ma),Z9e=n(Ma,"P",{});var x3t=s(Z9e);Lfr=r(x3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),x3t.forEach(t),yfr=i(Ma),Ja=n(Ma,"P",{});var FA=s(Ja);xfr=r(FA,"The model class to instantiate is selected based on the "),e2e=n(FA,"CODE",{});var $3t=s(e2e);$fr=r($3t,"model_type"),$3t.forEach(t),kfr=r(FA,` property of the config object (either
passed as an argument or loaded from `),o2e=n(FA,"CODE",{});var k3t=s(o2e);Sfr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),Rfr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(FA,"CODE",{});var S3t=s(r2e);Pfr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),Bfr=r(FA,":"),FA.forEach(t),Nfr=i(Ma),zy=n(Ma,"UL",{});var vze=s(zy);dT=n(vze,"LI",{});var tNe=s(dT);t2e=n(tNe,"STRONG",{});var R3t=s(t2e);Ifr=r(R3t,"speech-encoder-decoder"),R3t.forEach(t),qfr=r(tNe," \u2014 "),qW=n(tNe,"A",{href:!0});var P3t=s(qW);jfr=r(P3t,"SpeechEncoderDecoderModel"),P3t.forEach(t),Dfr=r(tNe," (Speech Encoder decoder model)"),tNe.forEach(t),Gfr=i(vze),cT=n(vze,"LI",{});var aNe=s(cT);a2e=n(aNe,"STRONG",{});var B3t=s(a2e);Ofr=r(B3t,"speech_to_text"),B3t.forEach(t),Vfr=r(aNe," \u2014 "),jW=n(aNe,"A",{href:!0});var N3t=s(jW);Xfr=r(N3t,"Speech2TextForConditionalGeneration"),N3t.forEach(t),zfr=r(aNe," (Speech2Text model)"),aNe.forEach(t),vze.forEach(t),Qfr=i(Ma),fT=n(Ma,"P",{});var nNe=s(fT);Wfr=r(nNe,"The model is set in evaluation mode by default using "),n2e=n(nNe,"CODE",{});var I3t=s(n2e);Hfr=r(I3t,"model.eval()"),I3t.forEach(t),Ufr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s2e=n(nNe,"CODE",{});var q3t=s(s2e);Jfr=r(q3t,"model.train()"),q3t.forEach(t),nNe.forEach(t),Yfr=i(Ma),T(mT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),gVe=i(f),Nd=n(f,"H2",{class:!0});var Fze=s(Nd);gT=n(Fze,"A",{id:!0,class:!0,href:!0});var j3t=s(gT);l2e=n(j3t,"SPAN",{});var D3t=s(l2e);T(Qy.$$.fragment,D3t),D3t.forEach(t),j3t.forEach(t),Kfr=i(Fze),i2e=n(Fze,"SPAN",{});var G3t=s(i2e);Zfr=r(G3t,"AutoModelForAudioXVector"),G3t.forEach(t),Fze.forEach(t),hVe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(Wy.$$.fragment,ul),emr=i(ul),Id=n(ul,"P",{});var vre=s(Id);omr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),DW=n(vre,"A",{href:!0});var O3t=s(DW);rmr=r(O3t,"from_pretrained()"),O3t.forEach(t),tmr=r(vre," class method or the "),GW=n(vre,"A",{href:!0});var V3t=s(GW);amr=r(V3t,"from_config()"),V3t.forEach(t),nmr=r(vre,` class
method.`),vre.forEach(t),smr=i(ul),Hy=n(ul,"P",{});var Tze=s(Hy);lmr=r(Tze,"This class cannot be instantiated directly using "),d2e=n(Tze,"CODE",{});var X3t=s(d2e);imr=r(X3t,"__init__()"),X3t.forEach(t),dmr=r(Tze," (throws an error)."),Tze.forEach(t),cmr=i(ul),Ct=n(ul,"DIV",{class:!0});var TA=s(Ct);T(Uy.$$.fragment,TA),fmr=i(TA),c2e=n(TA,"P",{});var z3t=s(c2e);mmr=r(z3t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),z3t.forEach(t),gmr=i(TA),qd=n(TA,"P",{});var Fre=s(qd);hmr=r(Fre,`Note:
Loading a model from its configuration file does `),f2e=n(Fre,"STRONG",{});var Q3t=s(f2e);pmr=r(Q3t,"not"),Q3t.forEach(t),_mr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(Fre,"A",{href:!0});var W3t=s(OW);umr=r(W3t,"from_pretrained()"),W3t.forEach(t),bmr=r(Fre," to load the model weights."),Fre.forEach(t),vmr=i(TA),T(hT.$$.fragment,TA),TA.forEach(t),Fmr=i(ul),po=n(ul,"DIV",{class:!0});var Ea=s(po);T(Jy.$$.fragment,Ea),Tmr=i(Ea),m2e=n(Ea,"P",{});var H3t=s(m2e);Mmr=r(H3t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),H3t.forEach(t),Emr=i(Ea),Ya=n(Ea,"P",{});var MA=s(Ya);Cmr=r(MA,"The model class to instantiate is selected based on the "),g2e=n(MA,"CODE",{});var U3t=s(g2e);wmr=r(U3t,"model_type"),U3t.forEach(t),Amr=r(MA,` property of the config object (either
passed as an argument or loaded from `),h2e=n(MA,"CODE",{});var J3t=s(h2e);Lmr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),ymr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(MA,"CODE",{});var Y3t=s(p2e);xmr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),$mr=r(MA,":"),MA.forEach(t),kmr=i(Ea),ot=n(Ea,"UL",{});var bl=s(ot);pT=n(bl,"LI",{});var sNe=s(pT);_2e=n(sNe,"STRONG",{});var K3t=s(_2e);Smr=r(K3t,"data2vec-audio"),K3t.forEach(t),Rmr=r(sNe," \u2014 "),VW=n(sNe,"A",{href:!0});var Z3t=s(VW);Pmr=r(Z3t,"Data2VecAudioForXVector"),Z3t.forEach(t),Bmr=r(sNe," (Data2VecAudio model)"),sNe.forEach(t),Nmr=i(bl),_T=n(bl,"LI",{});var lNe=s(_T);u2e=n(lNe,"STRONG",{});var e0t=s(u2e);Imr=r(e0t,"unispeech-sat"),e0t.forEach(t),qmr=r(lNe," \u2014 "),XW=n(lNe,"A",{href:!0});var o0t=s(XW);jmr=r(o0t,"UniSpeechSatForXVector"),o0t.forEach(t),Dmr=r(lNe," (UniSpeechSat model)"),lNe.forEach(t),Gmr=i(bl),uT=n(bl,"LI",{});var iNe=s(uT);b2e=n(iNe,"STRONG",{});var r0t=s(b2e);Omr=r(r0t,"wav2vec2"),r0t.forEach(t),Vmr=r(iNe," \u2014 "),zW=n(iNe,"A",{href:!0});var t0t=s(zW);Xmr=r(t0t,"Wav2Vec2ForXVector"),t0t.forEach(t),zmr=r(iNe," (Wav2Vec2 model)"),iNe.forEach(t),Qmr=i(bl),bT=n(bl,"LI",{});var dNe=s(bT);v2e=n(dNe,"STRONG",{});var a0t=s(v2e);Wmr=r(a0t,"wav2vec2-conformer"),a0t.forEach(t),Hmr=r(dNe," \u2014 "),QW=n(dNe,"A",{href:!0});var n0t=s(QW);Umr=r(n0t,"Wav2Vec2ConformerForXVector"),n0t.forEach(t),Jmr=r(dNe," (Wav2Vec2-Conformer model)"),dNe.forEach(t),Ymr=i(bl),vT=n(bl,"LI",{});var cNe=s(vT);F2e=n(cNe,"STRONG",{});var s0t=s(F2e);Kmr=r(s0t,"wavlm"),s0t.forEach(t),Zmr=r(cNe," \u2014 "),WW=n(cNe,"A",{href:!0});var l0t=s(WW);egr=r(l0t,"WavLMForXVector"),l0t.forEach(t),ogr=r(cNe," (WavLM model)"),cNe.forEach(t),bl.forEach(t),rgr=i(Ea),FT=n(Ea,"P",{});var fNe=s(FT);tgr=r(fNe,"The model is set in evaluation mode by default using "),T2e=n(fNe,"CODE",{});var i0t=s(T2e);agr=r(i0t,"model.eval()"),i0t.forEach(t),ngr=r(fNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M2e=n(fNe,"CODE",{});var d0t=s(M2e);sgr=r(d0t,"model.train()"),d0t.forEach(t),fNe.forEach(t),lgr=i(Ea),T(TT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),pVe=i(f),jd=n(f,"H2",{class:!0});var Mze=s(jd);MT=n(Mze,"A",{id:!0,class:!0,href:!0});var c0t=s(MT);E2e=n(c0t,"SPAN",{});var f0t=s(E2e);T(Yy.$$.fragment,f0t),f0t.forEach(t),c0t.forEach(t),igr=i(Mze),C2e=n(Mze,"SPAN",{});var m0t=s(C2e);dgr=r(m0t,"AutoModelForMaskedImageModeling"),m0t.forEach(t),Mze.forEach(t),_Ve=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Ky.$$.fragment,vl),cgr=i(vl),Dd=n(vl,"P",{});var Tre=s(Dd);fgr=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HW=n(Tre,"A",{href:!0});var g0t=s(HW);mgr=r(g0t,"from_pretrained()"),g0t.forEach(t),ggr=r(Tre," class method or the "),UW=n(Tre,"A",{href:!0});var h0t=s(UW);hgr=r(h0t,"from_config()"),h0t.forEach(t),pgr=r(Tre,` class
method.`),Tre.forEach(t),_gr=i(vl),Zy=n(vl,"P",{});var Eze=s(Zy);ugr=r(Eze,"This class cannot be instantiated directly using "),w2e=n(Eze,"CODE",{});var p0t=s(w2e);bgr=r(p0t,"__init__()"),p0t.forEach(t),vgr=r(Eze," (throws an error)."),Eze.forEach(t),Fgr=i(vl),wt=n(vl,"DIV",{class:!0});var EA=s(wt);T(e8.$$.fragment,EA),Tgr=i(EA),A2e=n(EA,"P",{});var _0t=s(A2e);Mgr=r(_0t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_0t.forEach(t),Egr=i(EA),Gd=n(EA,"P",{});var Mre=s(Gd);Cgr=r(Mre,`Note:
Loading a model from its configuration file does `),L2e=n(Mre,"STRONG",{});var u0t=s(L2e);wgr=r(u0t,"not"),u0t.forEach(t),Agr=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(Mre,"A",{href:!0});var b0t=s(JW);Lgr=r(b0t,"from_pretrained()"),b0t.forEach(t),ygr=r(Mre," to load the model weights."),Mre.forEach(t),xgr=i(EA),T(ET.$$.fragment,EA),EA.forEach(t),$gr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(o8.$$.fragment,Ca),kgr=i(Ca),y2e=n(Ca,"P",{});var v0t=s(y2e);Sgr=r(v0t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),v0t.forEach(t),Rgr=i(Ca),Ka=n(Ca,"P",{});var CA=s(Ka);Pgr=r(CA,"The model class to instantiate is selected based on the "),x2e=n(CA,"CODE",{});var F0t=s(x2e);Bgr=r(F0t,"model_type"),F0t.forEach(t),Ngr=r(CA,` property of the config object (either
passed as an argument or loaded from `),$2e=n(CA,"CODE",{});var T0t=s($2e);Igr=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),qgr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=n(CA,"CODE",{});var M0t=s(k2e);jgr=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),Dgr=r(CA,":"),CA.forEach(t),Ggr=i(Ca),Od=n(Ca,"UL",{});var Ere=s(Od);CT=n(Ere,"LI",{});var mNe=s(CT);S2e=n(mNe,"STRONG",{});var E0t=s(S2e);Ogr=r(E0t,"deit"),E0t.forEach(t),Vgr=r(mNe," \u2014 "),YW=n(mNe,"A",{href:!0});var C0t=s(YW);Xgr=r(C0t,"DeiTForMaskedImageModeling"),C0t.forEach(t),zgr=r(mNe," (DeiT model)"),mNe.forEach(t),Qgr=i(Ere),wT=n(Ere,"LI",{});var gNe=s(wT);R2e=n(gNe,"STRONG",{});var w0t=s(R2e);Wgr=r(w0t,"swin"),w0t.forEach(t),Hgr=r(gNe," \u2014 "),KW=n(gNe,"A",{href:!0});var A0t=s(KW);Ugr=r(A0t,"SwinForMaskedImageModeling"),A0t.forEach(t),Jgr=r(gNe," (Swin Transformer model)"),gNe.forEach(t),Ygr=i(Ere),AT=n(Ere,"LI",{});var hNe=s(AT);P2e=n(hNe,"STRONG",{});var L0t=s(P2e);Kgr=r(L0t,"vit"),L0t.forEach(t),Zgr=r(hNe," \u2014 "),ZW=n(hNe,"A",{href:!0});var y0t=s(ZW);ehr=r(y0t,"ViTForMaskedImageModeling"),y0t.forEach(t),ohr=r(hNe," (ViT model)"),hNe.forEach(t),Ere.forEach(t),rhr=i(Ca),LT=n(Ca,"P",{});var pNe=s(LT);thr=r(pNe,"The model is set in evaluation mode by default using "),B2e=n(pNe,"CODE",{});var x0t=s(B2e);ahr=r(x0t,"model.eval()"),x0t.forEach(t),nhr=r(pNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=n(pNe,"CODE",{});var $0t=s(N2e);shr=r($0t,"model.train()"),$0t.forEach(t),pNe.forEach(t),lhr=i(Ca),T(yT.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),uVe=i(f),Vd=n(f,"H2",{class:!0});var Cze=s(Vd);xT=n(Cze,"A",{id:!0,class:!0,href:!0});var k0t=s(xT);I2e=n(k0t,"SPAN",{});var S0t=s(I2e);T(r8.$$.fragment,S0t),S0t.forEach(t),k0t.forEach(t),ihr=i(Cze),q2e=n(Cze,"SPAN",{});var R0t=s(q2e);dhr=r(R0t,"AutoModelForObjectDetection"),R0t.forEach(t),Cze.forEach(t),bVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(t8.$$.fragment,Fl),chr=i(Fl),Xd=n(Fl,"P",{});var Cre=s(Xd);fhr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eH=n(Cre,"A",{href:!0});var P0t=s(eH);mhr=r(P0t,"from_pretrained()"),P0t.forEach(t),ghr=r(Cre," class method or the "),oH=n(Cre,"A",{href:!0});var B0t=s(oH);hhr=r(B0t,"from_config()"),B0t.forEach(t),phr=r(Cre,` class
method.`),Cre.forEach(t),_hr=i(Fl),a8=n(Fl,"P",{});var wze=s(a8);uhr=r(wze,"This class cannot be instantiated directly using "),j2e=n(wze,"CODE",{});var N0t=s(j2e);bhr=r(N0t,"__init__()"),N0t.forEach(t),vhr=r(wze," (throws an error)."),wze.forEach(t),Fhr=i(Fl),At=n(Fl,"DIV",{class:!0});var wA=s(At);T(n8.$$.fragment,wA),Thr=i(wA),D2e=n(wA,"P",{});var I0t=s(D2e);Mhr=r(I0t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),I0t.forEach(t),Ehr=i(wA),zd=n(wA,"P",{});var wre=s(zd);Chr=r(wre,`Note:
Loading a model from its configuration file does `),G2e=n(wre,"STRONG",{});var q0t=s(G2e);whr=r(q0t,"not"),q0t.forEach(t),Ahr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(wre,"A",{href:!0});var j0t=s(rH);Lhr=r(j0t,"from_pretrained()"),j0t.forEach(t),yhr=r(wre," to load the model weights."),wre.forEach(t),xhr=i(wA),T($T.$$.fragment,wA),wA.forEach(t),$hr=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(s8.$$.fragment,wa),khr=i(wa),O2e=n(wa,"P",{});var D0t=s(O2e);Shr=r(D0t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),D0t.forEach(t),Rhr=i(wa),Za=n(wa,"P",{});var AA=s(Za);Phr=r(AA,"The model class to instantiate is selected based on the "),V2e=n(AA,"CODE",{});var G0t=s(V2e);Bhr=r(G0t,"model_type"),G0t.forEach(t),Nhr=r(AA,` property of the config object (either
passed as an argument or loaded from `),X2e=n(AA,"CODE",{});var O0t=s(X2e);Ihr=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),qhr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(AA,"CODE",{});var V0t=s(z2e);jhr=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),Dhr=r(AA,":"),AA.forEach(t),Ghr=i(wa),l8=n(wa,"UL",{});var Aze=s(l8);kT=n(Aze,"LI",{});var _Ne=s(kT);Q2e=n(_Ne,"STRONG",{});var X0t=s(Q2e);Ohr=r(X0t,"detr"),X0t.forEach(t),Vhr=r(_Ne," \u2014 "),tH=n(_Ne,"A",{href:!0});var z0t=s(tH);Xhr=r(z0t,"DetrForObjectDetection"),z0t.forEach(t),zhr=r(_Ne," (DETR model)"),_Ne.forEach(t),Qhr=i(Aze),ST=n(Aze,"LI",{});var uNe=s(ST);W2e=n(uNe,"STRONG",{});var Q0t=s(W2e);Whr=r(Q0t,"yolos"),Q0t.forEach(t),Hhr=r(uNe," \u2014 "),aH=n(uNe,"A",{href:!0});var W0t=s(aH);Uhr=r(W0t,"YolosForObjectDetection"),W0t.forEach(t),Jhr=r(uNe," (YOLOS model)"),uNe.forEach(t),Aze.forEach(t),Yhr=i(wa),RT=n(wa,"P",{});var bNe=s(RT);Khr=r(bNe,"The model is set in evaluation mode by default using "),H2e=n(bNe,"CODE",{});var H0t=s(H2e);Zhr=r(H0t,"model.eval()"),H0t.forEach(t),epr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(bNe,"CODE",{});var U0t=s(U2e);opr=r(U0t,"model.train()"),U0t.forEach(t),bNe.forEach(t),rpr=i(wa),T(PT.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),vVe=i(f),Qd=n(f,"H2",{class:!0});var Lze=s(Qd);BT=n(Lze,"A",{id:!0,class:!0,href:!0});var J0t=s(BT);J2e=n(J0t,"SPAN",{});var Y0t=s(J2e);T(i8.$$.fragment,Y0t),Y0t.forEach(t),J0t.forEach(t),tpr=i(Lze),Y2e=n(Lze,"SPAN",{});var K0t=s(Y2e);apr=r(K0t,"AutoModelForImageSegmentation"),K0t.forEach(t),Lze.forEach(t),FVe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(d8.$$.fragment,Tl),npr=i(Tl),Wd=n(Tl,"P",{});var Are=s(Wd);spr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nH=n(Are,"A",{href:!0});var Z0t=s(nH);lpr=r(Z0t,"from_pretrained()"),Z0t.forEach(t),ipr=r(Are," class method or the "),sH=n(Are,"A",{href:!0});var ewt=s(sH);dpr=r(ewt,"from_config()"),ewt.forEach(t),cpr=r(Are,` class
method.`),Are.forEach(t),fpr=i(Tl),c8=n(Tl,"P",{});var yze=s(c8);mpr=r(yze,"This class cannot be instantiated directly using "),K2e=n(yze,"CODE",{});var owt=s(K2e);gpr=r(owt,"__init__()"),owt.forEach(t),hpr=r(yze," (throws an error)."),yze.forEach(t),ppr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var LA=s(Lt);T(f8.$$.fragment,LA),_pr=i(LA),Z2e=n(LA,"P",{});var rwt=s(Z2e);upr=r(rwt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rwt.forEach(t),bpr=i(LA),Hd=n(LA,"P",{});var Lre=s(Hd);vpr=r(Lre,`Note:
Loading a model from its configuration file does `),ebe=n(Lre,"STRONG",{});var twt=s(ebe);Fpr=r(twt,"not"),twt.forEach(t),Tpr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(Lre,"A",{href:!0});var awt=s(lH);Mpr=r(awt,"from_pretrained()"),awt.forEach(t),Epr=r(Lre," to load the model weights."),Lre.forEach(t),Cpr=i(LA),T(NT.$$.fragment,LA),LA.forEach(t),wpr=i(Tl),bo=n(Tl,"DIV",{class:!0});var Aa=s(bo);T(m8.$$.fragment,Aa),Apr=i(Aa),obe=n(Aa,"P",{});var nwt=s(obe);Lpr=r(nwt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nwt.forEach(t),ypr=i(Aa),en=n(Aa,"P",{});var yA=s(en);xpr=r(yA,"The model class to instantiate is selected based on the "),rbe=n(yA,"CODE",{});var swt=s(rbe);$pr=r(swt,"model_type"),swt.forEach(t),kpr=r(yA,` property of the config object (either
passed as an argument or loaded from `),tbe=n(yA,"CODE",{});var lwt=s(tbe);Spr=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),Rpr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(yA,"CODE",{});var iwt=s(abe);Ppr=r(iwt,"pretrained_model_name_or_path"),iwt.forEach(t),Bpr=r(yA,":"),yA.forEach(t),Npr=i(Aa),nbe=n(Aa,"UL",{});var dwt=s(nbe);IT=n(dwt,"LI",{});var vNe=s(IT);sbe=n(vNe,"STRONG",{});var cwt=s(sbe);Ipr=r(cwt,"detr"),cwt.forEach(t),qpr=r(vNe," \u2014 "),iH=n(vNe,"A",{href:!0});var fwt=s(iH);jpr=r(fwt,"DetrForSegmentation"),fwt.forEach(t),Dpr=r(vNe," (DETR model)"),vNe.forEach(t),dwt.forEach(t),Gpr=i(Aa),qT=n(Aa,"P",{});var FNe=s(qT);Opr=r(FNe,"The model is set in evaluation mode by default using "),lbe=n(FNe,"CODE",{});var mwt=s(lbe);Vpr=r(mwt,"model.eval()"),mwt.forEach(t),Xpr=r(FNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=n(FNe,"CODE",{});var gwt=s(ibe);zpr=r(gwt,"model.train()"),gwt.forEach(t),FNe.forEach(t),Qpr=i(Aa),T(jT.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),TVe=i(f),Ud=n(f,"H2",{class:!0});var xze=s(Ud);DT=n(xze,"A",{id:!0,class:!0,href:!0});var hwt=s(DT);dbe=n(hwt,"SPAN",{});var pwt=s(dbe);T(g8.$$.fragment,pwt),pwt.forEach(t),hwt.forEach(t),Wpr=i(xze),cbe=n(xze,"SPAN",{});var _wt=s(cbe);Hpr=r(_wt,"AutoModelForSemanticSegmentation"),_wt.forEach(t),xze.forEach(t),MVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(h8.$$.fragment,Ml),Upr=i(Ml),Jd=n(Ml,"P",{});var yre=s(Jd);Jpr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dH=n(yre,"A",{href:!0});var uwt=s(dH);Ypr=r(uwt,"from_pretrained()"),uwt.forEach(t),Kpr=r(yre," class method or the "),cH=n(yre,"A",{href:!0});var bwt=s(cH);Zpr=r(bwt,"from_config()"),bwt.forEach(t),e_r=r(yre,` class
method.`),yre.forEach(t),o_r=i(Ml),p8=n(Ml,"P",{});var $ze=s(p8);r_r=r($ze,"This class cannot be instantiated directly using "),fbe=n($ze,"CODE",{});var vwt=s(fbe);t_r=r(vwt,"__init__()"),vwt.forEach(t),a_r=r($ze," (throws an error)."),$ze.forEach(t),n_r=i(Ml),yt=n(Ml,"DIV",{class:!0});var xA=s(yt);T(_8.$$.fragment,xA),s_r=i(xA),mbe=n(xA,"P",{});var Fwt=s(mbe);l_r=r(Fwt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fwt.forEach(t),i_r=i(xA),Yd=n(xA,"P",{});var xre=s(Yd);d_r=r(xre,`Note:
Loading a model from its configuration file does `),gbe=n(xre,"STRONG",{});var Twt=s(gbe);c_r=r(Twt,"not"),Twt.forEach(t),f_r=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(xre,"A",{href:!0});var Mwt=s(fH);m_r=r(Mwt,"from_pretrained()"),Mwt.forEach(t),g_r=r(xre," to load the model weights."),xre.forEach(t),h_r=i(xA),T(GT.$$.fragment,xA),xA.forEach(t),p_r=i(Ml),vo=n(Ml,"DIV",{class:!0});var La=s(vo);T(u8.$$.fragment,La),__r=i(La),hbe=n(La,"P",{});var Ewt=s(hbe);u_r=r(Ewt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ewt.forEach(t),b_r=i(La),on=n(La,"P",{});var $A=s(on);v_r=r($A,"The model class to instantiate is selected based on the "),pbe=n($A,"CODE",{});var Cwt=s(pbe);F_r=r(Cwt,"model_type"),Cwt.forEach(t),T_r=r($A,` property of the config object (either
passed as an argument or loaded from `),_be=n($A,"CODE",{});var wwt=s(_be);M_r=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),E_r=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n($A,"CODE",{});var Awt=s(ube);C_r=r(Awt,"pretrained_model_name_or_path"),Awt.forEach(t),w_r=r($A,":"),$A.forEach(t),A_r=i(La),rn=n(La,"UL",{});var kA=s(rn);OT=n(kA,"LI",{});var TNe=s(OT);bbe=n(TNe,"STRONG",{});var Lwt=s(bbe);L_r=r(Lwt,"beit"),Lwt.forEach(t),y_r=r(TNe," \u2014 "),mH=n(TNe,"A",{href:!0});var ywt=s(mH);x_r=r(ywt,"BeitForSemanticSegmentation"),ywt.forEach(t),$_r=r(TNe," (BEiT model)"),TNe.forEach(t),k_r=i(kA),VT=n(kA,"LI",{});var MNe=s(VT);vbe=n(MNe,"STRONG",{});var xwt=s(vbe);S_r=r(xwt,"data2vec-vision"),xwt.forEach(t),R_r=r(MNe," \u2014 "),gH=n(MNe,"A",{href:!0});var $wt=s(gH);P_r=r($wt,"Data2VecVisionForSemanticSegmentation"),$wt.forEach(t),B_r=r(MNe," (Data2VecVision model)"),MNe.forEach(t),N_r=i(kA),XT=n(kA,"LI",{});var ENe=s(XT);Fbe=n(ENe,"STRONG",{});var kwt=s(Fbe);I_r=r(kwt,"dpt"),kwt.forEach(t),q_r=r(ENe," \u2014 "),hH=n(ENe,"A",{href:!0});var Swt=s(hH);j_r=r(Swt,"DPTForSemanticSegmentation"),Swt.forEach(t),D_r=r(ENe," (DPT model)"),ENe.forEach(t),G_r=i(kA),zT=n(kA,"LI",{});var CNe=s(zT);Tbe=n(CNe,"STRONG",{});var Rwt=s(Tbe);O_r=r(Rwt,"segformer"),Rwt.forEach(t),V_r=r(CNe," \u2014 "),pH=n(CNe,"A",{href:!0});var Pwt=s(pH);X_r=r(Pwt,"SegformerForSemanticSegmentation"),Pwt.forEach(t),z_r=r(CNe," (SegFormer model)"),CNe.forEach(t),kA.forEach(t),Q_r=i(La),QT=n(La,"P",{});var wNe=s(QT);W_r=r(wNe,"The model is set in evaluation mode by default using "),Mbe=n(wNe,"CODE",{});var Bwt=s(Mbe);H_r=r(Bwt,"model.eval()"),Bwt.forEach(t),U_r=r(wNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n(wNe,"CODE",{});var Nwt=s(Ebe);J_r=r(Nwt,"model.train()"),Nwt.forEach(t),wNe.forEach(t),Y_r=i(La),T(WT.$$.fragment,La),La.forEach(t),Ml.forEach(t),EVe=i(f),Kd=n(f,"H2",{class:!0});var kze=s(Kd);HT=n(kze,"A",{id:!0,class:!0,href:!0});var Iwt=s(HT);Cbe=n(Iwt,"SPAN",{});var qwt=s(Cbe);T(b8.$$.fragment,qwt),qwt.forEach(t),Iwt.forEach(t),K_r=i(kze),wbe=n(kze,"SPAN",{});var jwt=s(wbe);Z_r=r(jwt,"AutoModelForInstanceSegmentation"),jwt.forEach(t),kze.forEach(t),CVe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(v8.$$.fragment,El),eur=i(El),Zd=n(El,"P",{});var $re=s(Zd);our=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_H=n($re,"A",{href:!0});var Dwt=s(_H);rur=r(Dwt,"from_pretrained()"),Dwt.forEach(t),tur=r($re," class method or the "),uH=n($re,"A",{href:!0});var Gwt=s(uH);aur=r(Gwt,"from_config()"),Gwt.forEach(t),nur=r($re,` class
method.`),$re.forEach(t),sur=i(El),F8=n(El,"P",{});var Sze=s(F8);lur=r(Sze,"This class cannot be instantiated directly using "),Abe=n(Sze,"CODE",{});var Owt=s(Abe);iur=r(Owt,"__init__()"),Owt.forEach(t),dur=r(Sze," (throws an error)."),Sze.forEach(t),cur=i(El),xt=n(El,"DIV",{class:!0});var SA=s(xt);T(T8.$$.fragment,SA),fur=i(SA),Lbe=n(SA,"P",{});var Vwt=s(Lbe);mur=r(Vwt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vwt.forEach(t),gur=i(SA),ec=n(SA,"P",{});var kre=s(ec);hur=r(kre,`Note:
Loading a model from its configuration file does `),ybe=n(kre,"STRONG",{});var Xwt=s(ybe);pur=r(Xwt,"not"),Xwt.forEach(t),_ur=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(kre,"A",{href:!0});var zwt=s(bH);uur=r(zwt,"from_pretrained()"),zwt.forEach(t),bur=r(kre," to load the model weights."),kre.forEach(t),vur=i(SA),T(UT.$$.fragment,SA),SA.forEach(t),Fur=i(El),Fo=n(El,"DIV",{class:!0});var ya=s(Fo);T(M8.$$.fragment,ya),Tur=i(ya),xbe=n(ya,"P",{});var Qwt=s(xbe);Mur=r(Qwt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Qwt.forEach(t),Eur=i(ya),tn=n(ya,"P",{});var RA=s(tn);Cur=r(RA,"The model class to instantiate is selected based on the "),$be=n(RA,"CODE",{});var Wwt=s($be);wur=r(Wwt,"model_type"),Wwt.forEach(t),Aur=r(RA,` property of the config object (either
passed as an argument or loaded from `),kbe=n(RA,"CODE",{});var Hwt=s(kbe);Lur=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),yur=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(RA,"CODE",{});var Uwt=s(Sbe);xur=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),$ur=r(RA,":"),RA.forEach(t),kur=i(ya),Rbe=n(ya,"UL",{});var Jwt=s(Rbe);JT=n(Jwt,"LI",{});var ANe=s(JT);Pbe=n(ANe,"STRONG",{});var Ywt=s(Pbe);Sur=r(Ywt,"maskformer"),Ywt.forEach(t),Rur=r(ANe," \u2014 "),vH=n(ANe,"A",{href:!0});var Kwt=s(vH);Pur=r(Kwt,"MaskFormerForInstanceSegmentation"),Kwt.forEach(t),Bur=r(ANe," (MaskFormer model)"),ANe.forEach(t),Jwt.forEach(t),Nur=i(ya),YT=n(ya,"P",{});var LNe=s(YT);Iur=r(LNe,"The model is set in evaluation mode by default using "),Bbe=n(LNe,"CODE",{});var Zwt=s(Bbe);qur=r(Zwt,"model.eval()"),Zwt.forEach(t),jur=r(LNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(LNe,"CODE",{});var eAt=s(Nbe);Dur=r(eAt,"model.train()"),eAt.forEach(t),LNe.forEach(t),Gur=i(ya),T(KT.$$.fragment,ya),ya.forEach(t),El.forEach(t),wVe=i(f),oc=n(f,"H2",{class:!0});var Rze=s(oc);ZT=n(Rze,"A",{id:!0,class:!0,href:!0});var oAt=s(ZT);Ibe=n(oAt,"SPAN",{});var rAt=s(Ibe);T(E8.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),Our=i(Rze),qbe=n(Rze,"SPAN",{});var tAt=s(qbe);Vur=r(tAt,"TFAutoModel"),tAt.forEach(t),Rze.forEach(t),AVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(C8.$$.fragment,Cl),Xur=i(Cl),rc=n(Cl,"P",{});var Sre=s(rc);zur=r(Sre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FH=n(Sre,"A",{href:!0});var aAt=s(FH);Qur=r(aAt,"from_pretrained()"),aAt.forEach(t),Wur=r(Sre," class method or the "),TH=n(Sre,"A",{href:!0});var nAt=s(TH);Hur=r(nAt,"from_config()"),nAt.forEach(t),Uur=r(Sre,` class
method.`),Sre.forEach(t),Jur=i(Cl),w8=n(Cl,"P",{});var Pze=s(w8);Yur=r(Pze,"This class cannot be instantiated directly using "),jbe=n(Pze,"CODE",{});var sAt=s(jbe);Kur=r(sAt,"__init__()"),sAt.forEach(t),Zur=r(Pze," (throws an error)."),Pze.forEach(t),e1r=i(Cl),$t=n(Cl,"DIV",{class:!0});var PA=s($t);T(A8.$$.fragment,PA),o1r=i(PA),Dbe=n(PA,"P",{});var lAt=s(Dbe);r1r=r(lAt,"Instantiates one of the base model classes of the library from a configuration."),lAt.forEach(t),t1r=i(PA),tc=n(PA,"P",{});var Rre=s(tc);a1r=r(Rre,`Note:
Loading a model from its configuration file does `),Gbe=n(Rre,"STRONG",{});var iAt=s(Gbe);n1r=r(iAt,"not"),iAt.forEach(t),s1r=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Rre,"A",{href:!0});var dAt=s(MH);l1r=r(dAt,"from_pretrained()"),dAt.forEach(t),i1r=r(Rre," to load the model weights."),Rre.forEach(t),d1r=i(PA),T(eM.$$.fragment,PA),PA.forEach(t),c1r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(L8.$$.fragment,wl),f1r=i(wl),Obe=n(wl,"P",{});var cAt=s(Obe);m1r=r(cAt,"Instantiate one of the base model classes of the library from a pretrained model."),cAt.forEach(t),g1r=i(wl),an=n(wl,"P",{});var BA=s(an);h1r=r(BA,"The model class to instantiate is selected based on the "),Vbe=n(BA,"CODE",{});var fAt=s(Vbe);p1r=r(fAt,"model_type"),fAt.forEach(t),_1r=r(BA,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(BA,"CODE",{});var mAt=s(Xbe);u1r=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),b1r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(BA,"CODE",{});var gAt=s(zbe);v1r=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),F1r=r(BA,":"),BA.forEach(t),T1r=i(wl),j=n(wl,"UL",{});var D=s(j);oM=n(D,"LI",{});var yNe=s(oM);Qbe=n(yNe,"STRONG",{});var hAt=s(Qbe);M1r=r(hAt,"albert"),hAt.forEach(t),E1r=r(yNe," \u2014 "),EH=n(yNe,"A",{href:!0});var pAt=s(EH);C1r=r(pAt,"TFAlbertModel"),pAt.forEach(t),w1r=r(yNe," (ALBERT model)"),yNe.forEach(t),A1r=i(D),rM=n(D,"LI",{});var xNe=s(rM);Wbe=n(xNe,"STRONG",{});var _At=s(Wbe);L1r=r(_At,"bart"),_At.forEach(t),y1r=r(xNe," \u2014 "),CH=n(xNe,"A",{href:!0});var uAt=s(CH);x1r=r(uAt,"TFBartModel"),uAt.forEach(t),$1r=r(xNe," (BART model)"),xNe.forEach(t),k1r=i(D),tM=n(D,"LI",{});var $Ne=s(tM);Hbe=n($Ne,"STRONG",{});var bAt=s(Hbe);S1r=r(bAt,"bert"),bAt.forEach(t),R1r=r($Ne," \u2014 "),wH=n($Ne,"A",{href:!0});var vAt=s(wH);P1r=r(vAt,"TFBertModel"),vAt.forEach(t),B1r=r($Ne," (BERT model)"),$Ne.forEach(t),N1r=i(D),aM=n(D,"LI",{});var kNe=s(aM);Ube=n(kNe,"STRONG",{});var FAt=s(Ube);I1r=r(FAt,"blenderbot"),FAt.forEach(t),q1r=r(kNe," \u2014 "),AH=n(kNe,"A",{href:!0});var TAt=s(AH);j1r=r(TAt,"TFBlenderbotModel"),TAt.forEach(t),D1r=r(kNe," (Blenderbot model)"),kNe.forEach(t),G1r=i(D),nM=n(D,"LI",{});var SNe=s(nM);Jbe=n(SNe,"STRONG",{});var MAt=s(Jbe);O1r=r(MAt,"blenderbot-small"),MAt.forEach(t),V1r=r(SNe," \u2014 "),LH=n(SNe,"A",{href:!0});var EAt=s(LH);X1r=r(EAt,"TFBlenderbotSmallModel"),EAt.forEach(t),z1r=r(SNe," (BlenderbotSmall model)"),SNe.forEach(t),Q1r=i(D),sM=n(D,"LI",{});var RNe=s(sM);Ybe=n(RNe,"STRONG",{});var CAt=s(Ybe);W1r=r(CAt,"camembert"),CAt.forEach(t),H1r=r(RNe," \u2014 "),yH=n(RNe,"A",{href:!0});var wAt=s(yH);U1r=r(wAt,"TFCamembertModel"),wAt.forEach(t),J1r=r(RNe," (CamemBERT model)"),RNe.forEach(t),Y1r=i(D),lM=n(D,"LI",{});var PNe=s(lM);Kbe=n(PNe,"STRONG",{});var AAt=s(Kbe);K1r=r(AAt,"clip"),AAt.forEach(t),Z1r=r(PNe," \u2014 "),xH=n(PNe,"A",{href:!0});var LAt=s(xH);e7r=r(LAt,"TFCLIPModel"),LAt.forEach(t),o7r=r(PNe," (CLIP model)"),PNe.forEach(t),r7r=i(D),iM=n(D,"LI",{});var BNe=s(iM);Zbe=n(BNe,"STRONG",{});var yAt=s(Zbe);t7r=r(yAt,"convbert"),yAt.forEach(t),a7r=r(BNe," \u2014 "),$H=n(BNe,"A",{href:!0});var xAt=s($H);n7r=r(xAt,"TFConvBertModel"),xAt.forEach(t),s7r=r(BNe," (ConvBERT model)"),BNe.forEach(t),l7r=i(D),dM=n(D,"LI",{});var NNe=s(dM);eve=n(NNe,"STRONG",{});var $At=s(eve);i7r=r($At,"convnext"),$At.forEach(t),d7r=r(NNe," \u2014 "),kH=n(NNe,"A",{href:!0});var kAt=s(kH);c7r=r(kAt,"TFConvNextModel"),kAt.forEach(t),f7r=r(NNe," (ConvNeXT model)"),NNe.forEach(t),m7r=i(D),cM=n(D,"LI",{});var INe=s(cM);ove=n(INe,"STRONG",{});var SAt=s(ove);g7r=r(SAt,"ctrl"),SAt.forEach(t),h7r=r(INe," \u2014 "),SH=n(INe,"A",{href:!0});var RAt=s(SH);p7r=r(RAt,"TFCTRLModel"),RAt.forEach(t),_7r=r(INe," (CTRL model)"),INe.forEach(t),u7r=i(D),fM=n(D,"LI",{});var qNe=s(fM);rve=n(qNe,"STRONG",{});var PAt=s(rve);b7r=r(PAt,"data2vec-vision"),PAt.forEach(t),v7r=r(qNe," \u2014 "),RH=n(qNe,"A",{href:!0});var BAt=s(RH);F7r=r(BAt,"TFData2VecVisionModel"),BAt.forEach(t),T7r=r(qNe," (Data2VecVision model)"),qNe.forEach(t),M7r=i(D),mM=n(D,"LI",{});var jNe=s(mM);tve=n(jNe,"STRONG",{});var NAt=s(tve);E7r=r(NAt,"deberta"),NAt.forEach(t),C7r=r(jNe," \u2014 "),PH=n(jNe,"A",{href:!0});var IAt=s(PH);w7r=r(IAt,"TFDebertaModel"),IAt.forEach(t),A7r=r(jNe," (DeBERTa model)"),jNe.forEach(t),L7r=i(D),gM=n(D,"LI",{});var DNe=s(gM);ave=n(DNe,"STRONG",{});var qAt=s(ave);y7r=r(qAt,"deberta-v2"),qAt.forEach(t),x7r=r(DNe," \u2014 "),BH=n(DNe,"A",{href:!0});var jAt=s(BH);$7r=r(jAt,"TFDebertaV2Model"),jAt.forEach(t),k7r=r(DNe," (DeBERTa-v2 model)"),DNe.forEach(t),S7r=i(D),hM=n(D,"LI",{});var GNe=s(hM);nve=n(GNe,"STRONG",{});var DAt=s(nve);R7r=r(DAt,"distilbert"),DAt.forEach(t),P7r=r(GNe," \u2014 "),NH=n(GNe,"A",{href:!0});var GAt=s(NH);B7r=r(GAt,"TFDistilBertModel"),GAt.forEach(t),N7r=r(GNe," (DistilBERT model)"),GNe.forEach(t),I7r=i(D),pM=n(D,"LI",{});var ONe=s(pM);sve=n(ONe,"STRONG",{});var OAt=s(sve);q7r=r(OAt,"dpr"),OAt.forEach(t),j7r=r(ONe," \u2014 "),IH=n(ONe,"A",{href:!0});var VAt=s(IH);D7r=r(VAt,"TFDPRQuestionEncoder"),VAt.forEach(t),G7r=r(ONe," (DPR model)"),ONe.forEach(t),O7r=i(D),_M=n(D,"LI",{});var VNe=s(_M);lve=n(VNe,"STRONG",{});var XAt=s(lve);V7r=r(XAt,"electra"),XAt.forEach(t),X7r=r(VNe," \u2014 "),qH=n(VNe,"A",{href:!0});var zAt=s(qH);z7r=r(zAt,"TFElectraModel"),zAt.forEach(t),Q7r=r(VNe," (ELECTRA model)"),VNe.forEach(t),W7r=i(D),uM=n(D,"LI",{});var XNe=s(uM);ive=n(XNe,"STRONG",{});var QAt=s(ive);H7r=r(QAt,"flaubert"),QAt.forEach(t),U7r=r(XNe," \u2014 "),jH=n(XNe,"A",{href:!0});var WAt=s(jH);J7r=r(WAt,"TFFlaubertModel"),WAt.forEach(t),Y7r=r(XNe," (FlauBERT model)"),XNe.forEach(t),K7r=i(D),Ws=n(D,"LI",{});var cS=s(Ws);dve=n(cS,"STRONG",{});var HAt=s(dve);Z7r=r(HAt,"funnel"),HAt.forEach(t),e9r=r(cS," \u2014 "),DH=n(cS,"A",{href:!0});var UAt=s(DH);o9r=r(UAt,"TFFunnelModel"),UAt.forEach(t),r9r=r(cS," or "),GH=n(cS,"A",{href:!0});var JAt=s(GH);t9r=r(JAt,"TFFunnelBaseModel"),JAt.forEach(t),a9r=r(cS," (Funnel Transformer model)"),cS.forEach(t),n9r=i(D),bM=n(D,"LI",{});var zNe=s(bM);cve=n(zNe,"STRONG",{});var YAt=s(cve);s9r=r(YAt,"gpt2"),YAt.forEach(t),l9r=r(zNe," \u2014 "),OH=n(zNe,"A",{href:!0});var KAt=s(OH);i9r=r(KAt,"TFGPT2Model"),KAt.forEach(t),d9r=r(zNe," (OpenAI GPT-2 model)"),zNe.forEach(t),c9r=i(D),vM=n(D,"LI",{});var QNe=s(vM);fve=n(QNe,"STRONG",{});var ZAt=s(fve);f9r=r(ZAt,"gptj"),ZAt.forEach(t),m9r=r(QNe," \u2014 "),VH=n(QNe,"A",{href:!0});var e6t=s(VH);g9r=r(e6t,"TFGPTJModel"),e6t.forEach(t),h9r=r(QNe," (GPT-J model)"),QNe.forEach(t),p9r=i(D),FM=n(D,"LI",{});var WNe=s(FM);mve=n(WNe,"STRONG",{});var o6t=s(mve);_9r=r(o6t,"hubert"),o6t.forEach(t),u9r=r(WNe," \u2014 "),XH=n(WNe,"A",{href:!0});var r6t=s(XH);b9r=r(r6t,"TFHubertModel"),r6t.forEach(t),v9r=r(WNe," (Hubert model)"),WNe.forEach(t),F9r=i(D),TM=n(D,"LI",{});var HNe=s(TM);gve=n(HNe,"STRONG",{});var t6t=s(gve);T9r=r(t6t,"layoutlm"),t6t.forEach(t),M9r=r(HNe," \u2014 "),zH=n(HNe,"A",{href:!0});var a6t=s(zH);E9r=r(a6t,"TFLayoutLMModel"),a6t.forEach(t),C9r=r(HNe," (LayoutLM model)"),HNe.forEach(t),w9r=i(D),MM=n(D,"LI",{});var UNe=s(MM);hve=n(UNe,"STRONG",{});var n6t=s(hve);A9r=r(n6t,"led"),n6t.forEach(t),L9r=r(UNe," \u2014 "),QH=n(UNe,"A",{href:!0});var s6t=s(QH);y9r=r(s6t,"TFLEDModel"),s6t.forEach(t),x9r=r(UNe," (LED model)"),UNe.forEach(t),$9r=i(D),EM=n(D,"LI",{});var JNe=s(EM);pve=n(JNe,"STRONG",{});var l6t=s(pve);k9r=r(l6t,"longformer"),l6t.forEach(t),S9r=r(JNe," \u2014 "),WH=n(JNe,"A",{href:!0});var i6t=s(WH);R9r=r(i6t,"TFLongformerModel"),i6t.forEach(t),P9r=r(JNe," (Longformer model)"),JNe.forEach(t),B9r=i(D),CM=n(D,"LI",{});var YNe=s(CM);_ve=n(YNe,"STRONG",{});var d6t=s(_ve);N9r=r(d6t,"lxmert"),d6t.forEach(t),I9r=r(YNe," \u2014 "),HH=n(YNe,"A",{href:!0});var c6t=s(HH);q9r=r(c6t,"TFLxmertModel"),c6t.forEach(t),j9r=r(YNe," (LXMERT model)"),YNe.forEach(t),D9r=i(D),wM=n(D,"LI",{});var KNe=s(wM);uve=n(KNe,"STRONG",{});var f6t=s(uve);G9r=r(f6t,"marian"),f6t.forEach(t),O9r=r(KNe," \u2014 "),UH=n(KNe,"A",{href:!0});var m6t=s(UH);V9r=r(m6t,"TFMarianModel"),m6t.forEach(t),X9r=r(KNe," (Marian model)"),KNe.forEach(t),z9r=i(D),AM=n(D,"LI",{});var ZNe=s(AM);bve=n(ZNe,"STRONG",{});var g6t=s(bve);Q9r=r(g6t,"mbart"),g6t.forEach(t),W9r=r(ZNe," \u2014 "),JH=n(ZNe,"A",{href:!0});var h6t=s(JH);H9r=r(h6t,"TFMBartModel"),h6t.forEach(t),U9r=r(ZNe," (mBART model)"),ZNe.forEach(t),J9r=i(D),LM=n(D,"LI",{});var eIe=s(LM);vve=n(eIe,"STRONG",{});var p6t=s(vve);Y9r=r(p6t,"mobilebert"),p6t.forEach(t),K9r=r(eIe," \u2014 "),YH=n(eIe,"A",{href:!0});var _6t=s(YH);Z9r=r(_6t,"TFMobileBertModel"),_6t.forEach(t),e2r=r(eIe," (MobileBERT model)"),eIe.forEach(t),o2r=i(D),yM=n(D,"LI",{});var oIe=s(yM);Fve=n(oIe,"STRONG",{});var u6t=s(Fve);r2r=r(u6t,"mpnet"),u6t.forEach(t),t2r=r(oIe," \u2014 "),KH=n(oIe,"A",{href:!0});var b6t=s(KH);a2r=r(b6t,"TFMPNetModel"),b6t.forEach(t),n2r=r(oIe," (MPNet model)"),oIe.forEach(t),s2r=i(D),xM=n(D,"LI",{});var rIe=s(xM);Tve=n(rIe,"STRONG",{});var v6t=s(Tve);l2r=r(v6t,"mt5"),v6t.forEach(t),i2r=r(rIe," \u2014 "),ZH=n(rIe,"A",{href:!0});var F6t=s(ZH);d2r=r(F6t,"TFMT5Model"),F6t.forEach(t),c2r=r(rIe," (MT5 model)"),rIe.forEach(t),f2r=i(D),$M=n(D,"LI",{});var tIe=s($M);Mve=n(tIe,"STRONG",{});var T6t=s(Mve);m2r=r(T6t,"openai-gpt"),T6t.forEach(t),g2r=r(tIe," \u2014 "),eU=n(tIe,"A",{href:!0});var M6t=s(eU);h2r=r(M6t,"TFOpenAIGPTModel"),M6t.forEach(t),p2r=r(tIe," (OpenAI GPT model)"),tIe.forEach(t),_2r=i(D),kM=n(D,"LI",{});var aIe=s(kM);Eve=n(aIe,"STRONG",{});var E6t=s(Eve);u2r=r(E6t,"opt"),E6t.forEach(t),b2r=r(aIe," \u2014 "),oU=n(aIe,"A",{href:!0});var C6t=s(oU);v2r=r(C6t,"TFOPTModel"),C6t.forEach(t),F2r=r(aIe," (OPT model)"),aIe.forEach(t),T2r=i(D),SM=n(D,"LI",{});var nIe=s(SM);Cve=n(nIe,"STRONG",{});var w6t=s(Cve);M2r=r(w6t,"pegasus"),w6t.forEach(t),E2r=r(nIe," \u2014 "),rU=n(nIe,"A",{href:!0});var A6t=s(rU);C2r=r(A6t,"TFPegasusModel"),A6t.forEach(t),w2r=r(nIe," (Pegasus model)"),nIe.forEach(t),A2r=i(D),RM=n(D,"LI",{});var sIe=s(RM);wve=n(sIe,"STRONG",{});var L6t=s(wve);L2r=r(L6t,"rembert"),L6t.forEach(t),y2r=r(sIe," \u2014 "),tU=n(sIe,"A",{href:!0});var y6t=s(tU);x2r=r(y6t,"TFRemBertModel"),y6t.forEach(t),$2r=r(sIe," (RemBERT model)"),sIe.forEach(t),k2r=i(D),PM=n(D,"LI",{});var lIe=s(PM);Ave=n(lIe,"STRONG",{});var x6t=s(Ave);S2r=r(x6t,"roberta"),x6t.forEach(t),R2r=r(lIe," \u2014 "),aU=n(lIe,"A",{href:!0});var $6t=s(aU);P2r=r($6t,"TFRobertaModel"),$6t.forEach(t),B2r=r(lIe," (RoBERTa model)"),lIe.forEach(t),N2r=i(D),BM=n(D,"LI",{});var iIe=s(BM);Lve=n(iIe,"STRONG",{});var k6t=s(Lve);I2r=r(k6t,"roformer"),k6t.forEach(t),q2r=r(iIe," \u2014 "),nU=n(iIe,"A",{href:!0});var S6t=s(nU);j2r=r(S6t,"TFRoFormerModel"),S6t.forEach(t),D2r=r(iIe," (RoFormer model)"),iIe.forEach(t),G2r=i(D),NM=n(D,"LI",{});var dIe=s(NM);yve=n(dIe,"STRONG",{});var R6t=s(yve);O2r=r(R6t,"speech_to_text"),R6t.forEach(t),V2r=r(dIe," \u2014 "),sU=n(dIe,"A",{href:!0});var P6t=s(sU);X2r=r(P6t,"TFSpeech2TextModel"),P6t.forEach(t),z2r=r(dIe," (Speech2Text model)"),dIe.forEach(t),Q2r=i(D),IM=n(D,"LI",{});var cIe=s(IM);xve=n(cIe,"STRONG",{});var B6t=s(xve);W2r=r(B6t,"swin"),B6t.forEach(t),H2r=r(cIe," \u2014 "),lU=n(cIe,"A",{href:!0});var N6t=s(lU);U2r=r(N6t,"TFSwinModel"),N6t.forEach(t),J2r=r(cIe," (Swin Transformer model)"),cIe.forEach(t),Y2r=i(D),qM=n(D,"LI",{});var fIe=s(qM);$ve=n(fIe,"STRONG",{});var I6t=s($ve);K2r=r(I6t,"t5"),I6t.forEach(t),Z2r=r(fIe," \u2014 "),iU=n(fIe,"A",{href:!0});var q6t=s(iU);ebr=r(q6t,"TFT5Model"),q6t.forEach(t),obr=r(fIe," (T5 model)"),fIe.forEach(t),rbr=i(D),jM=n(D,"LI",{});var mIe=s(jM);kve=n(mIe,"STRONG",{});var j6t=s(kve);tbr=r(j6t,"tapas"),j6t.forEach(t),abr=r(mIe," \u2014 "),dU=n(mIe,"A",{href:!0});var D6t=s(dU);nbr=r(D6t,"TFTapasModel"),D6t.forEach(t),sbr=r(mIe," (TAPAS model)"),mIe.forEach(t),lbr=i(D),DM=n(D,"LI",{});var gIe=s(DM);Sve=n(gIe,"STRONG",{});var G6t=s(Sve);ibr=r(G6t,"transfo-xl"),G6t.forEach(t),dbr=r(gIe," \u2014 "),cU=n(gIe,"A",{href:!0});var O6t=s(cU);cbr=r(O6t,"TFTransfoXLModel"),O6t.forEach(t),fbr=r(gIe," (Transformer-XL model)"),gIe.forEach(t),mbr=i(D),GM=n(D,"LI",{});var hIe=s(GM);Rve=n(hIe,"STRONG",{});var V6t=s(Rve);gbr=r(V6t,"vit"),V6t.forEach(t),hbr=r(hIe," \u2014 "),fU=n(hIe,"A",{href:!0});var X6t=s(fU);pbr=r(X6t,"TFViTModel"),X6t.forEach(t),_br=r(hIe," (ViT model)"),hIe.forEach(t),ubr=i(D),OM=n(D,"LI",{});var pIe=s(OM);Pve=n(pIe,"STRONG",{});var z6t=s(Pve);bbr=r(z6t,"vit_mae"),z6t.forEach(t),vbr=r(pIe," \u2014 "),mU=n(pIe,"A",{href:!0});var Q6t=s(mU);Fbr=r(Q6t,"TFViTMAEModel"),Q6t.forEach(t),Tbr=r(pIe," (ViTMAE model)"),pIe.forEach(t),Mbr=i(D),VM=n(D,"LI",{});var _Ie=s(VM);Bve=n(_Ie,"STRONG",{});var W6t=s(Bve);Ebr=r(W6t,"wav2vec2"),W6t.forEach(t),Cbr=r(_Ie," \u2014 "),gU=n(_Ie,"A",{href:!0});var H6t=s(gU);wbr=r(H6t,"TFWav2Vec2Model"),H6t.forEach(t),Abr=r(_Ie," (Wav2Vec2 model)"),_Ie.forEach(t),Lbr=i(D),XM=n(D,"LI",{});var uIe=s(XM);Nve=n(uIe,"STRONG",{});var U6t=s(Nve);ybr=r(U6t,"xlm"),U6t.forEach(t),xbr=r(uIe," \u2014 "),hU=n(uIe,"A",{href:!0});var J6t=s(hU);$br=r(J6t,"TFXLMModel"),J6t.forEach(t),kbr=r(uIe," (XLM model)"),uIe.forEach(t),Sbr=i(D),zM=n(D,"LI",{});var bIe=s(zM);Ive=n(bIe,"STRONG",{});var Y6t=s(Ive);Rbr=r(Y6t,"xlm-roberta"),Y6t.forEach(t),Pbr=r(bIe," \u2014 "),pU=n(bIe,"A",{href:!0});var K6t=s(pU);Bbr=r(K6t,"TFXLMRobertaModel"),K6t.forEach(t),Nbr=r(bIe," (XLM-RoBERTa model)"),bIe.forEach(t),Ibr=i(D),QM=n(D,"LI",{});var vIe=s(QM);qve=n(vIe,"STRONG",{});var Z6t=s(qve);qbr=r(Z6t,"xlnet"),Z6t.forEach(t),jbr=r(vIe," \u2014 "),_U=n(vIe,"A",{href:!0});var eLt=s(_U);Dbr=r(eLt,"TFXLNetModel"),eLt.forEach(t),Gbr=r(vIe," (XLNet model)"),vIe.forEach(t),D.forEach(t),Obr=i(wl),T(WM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),LVe=i(f),ac=n(f,"H2",{class:!0});var Bze=s(ac);HM=n(Bze,"A",{id:!0,class:!0,href:!0});var oLt=s(HM);jve=n(oLt,"SPAN",{});var rLt=s(jve);T(y8.$$.fragment,rLt),rLt.forEach(t),oLt.forEach(t),Vbr=i(Bze),Dve=n(Bze,"SPAN",{});var tLt=s(Dve);Xbr=r(tLt,"TFAutoModelForPreTraining"),tLt.forEach(t),Bze.forEach(t),yVe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(x8.$$.fragment,Al),zbr=i(Al),nc=n(Al,"P",{});var Pre=s(nc);Qbr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uU=n(Pre,"A",{href:!0});var aLt=s(uU);Wbr=r(aLt,"from_pretrained()"),aLt.forEach(t),Hbr=r(Pre," class method or the "),bU=n(Pre,"A",{href:!0});var nLt=s(bU);Ubr=r(nLt,"from_config()"),nLt.forEach(t),Jbr=r(Pre,` class
method.`),Pre.forEach(t),Ybr=i(Al),$8=n(Al,"P",{});var Nze=s($8);Kbr=r(Nze,"This class cannot be instantiated directly using "),Gve=n(Nze,"CODE",{});var sLt=s(Gve);Zbr=r(sLt,"__init__()"),sLt.forEach(t),evr=r(Nze," (throws an error)."),Nze.forEach(t),ovr=i(Al),kt=n(Al,"DIV",{class:!0});var NA=s(kt);T(k8.$$.fragment,NA),rvr=i(NA),Ove=n(NA,"P",{});var lLt=s(Ove);tvr=r(lLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lLt.forEach(t),avr=i(NA),sc=n(NA,"P",{});var Bre=s(sc);nvr=r(Bre,`Note:
Loading a model from its configuration file does `),Vve=n(Bre,"STRONG",{});var iLt=s(Vve);svr=r(iLt,"not"),iLt.forEach(t),lvr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(Bre,"A",{href:!0});var dLt=s(vU);ivr=r(dLt,"from_pretrained()"),dLt.forEach(t),dvr=r(Bre," to load the model weights."),Bre.forEach(t),cvr=i(NA),T(UM.$$.fragment,NA),NA.forEach(t),fvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(S8.$$.fragment,Ll),mvr=i(Ll),Xve=n(Ll,"P",{});var cLt=s(Xve);gvr=r(cLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cLt.forEach(t),hvr=i(Ll),nn=n(Ll,"P",{});var IA=s(nn);pvr=r(IA,"The model class to instantiate is selected based on the "),zve=n(IA,"CODE",{});var fLt=s(zve);_vr=r(fLt,"model_type"),fLt.forEach(t),uvr=r(IA,` property of the config object (either
passed as an argument or loaded from `),Qve=n(IA,"CODE",{});var mLt=s(Qve);bvr=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),vvr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(IA,"CODE",{});var gLt=s(Wve);Fvr=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),Tvr=r(IA,":"),IA.forEach(t),Mvr=i(Ll),se=n(Ll,"UL",{});var le=s(se);JM=n(le,"LI",{});var FIe=s(JM);Hve=n(FIe,"STRONG",{});var hLt=s(Hve);Evr=r(hLt,"albert"),hLt.forEach(t),Cvr=r(FIe," \u2014 "),FU=n(FIe,"A",{href:!0});var pLt=s(FU);wvr=r(pLt,"TFAlbertForPreTraining"),pLt.forEach(t),Avr=r(FIe," (ALBERT model)"),FIe.forEach(t),Lvr=i(le),YM=n(le,"LI",{});var TIe=s(YM);Uve=n(TIe,"STRONG",{});var _Lt=s(Uve);yvr=r(_Lt,"bart"),_Lt.forEach(t),xvr=r(TIe," \u2014 "),TU=n(TIe,"A",{href:!0});var uLt=s(TU);$vr=r(uLt,"TFBartForConditionalGeneration"),uLt.forEach(t),kvr=r(TIe," (BART model)"),TIe.forEach(t),Svr=i(le),KM=n(le,"LI",{});var MIe=s(KM);Jve=n(MIe,"STRONG",{});var bLt=s(Jve);Rvr=r(bLt,"bert"),bLt.forEach(t),Pvr=r(MIe," \u2014 "),MU=n(MIe,"A",{href:!0});var vLt=s(MU);Bvr=r(vLt,"TFBertForPreTraining"),vLt.forEach(t),Nvr=r(MIe," (BERT model)"),MIe.forEach(t),Ivr=i(le),ZM=n(le,"LI",{});var EIe=s(ZM);Yve=n(EIe,"STRONG",{});var FLt=s(Yve);qvr=r(FLt,"camembert"),FLt.forEach(t),jvr=r(EIe," \u2014 "),EU=n(EIe,"A",{href:!0});var TLt=s(EU);Dvr=r(TLt,"TFCamembertForMaskedLM"),TLt.forEach(t),Gvr=r(EIe," (CamemBERT model)"),EIe.forEach(t),Ovr=i(le),eE=n(le,"LI",{});var CIe=s(eE);Kve=n(CIe,"STRONG",{});var MLt=s(Kve);Vvr=r(MLt,"ctrl"),MLt.forEach(t),Xvr=r(CIe," \u2014 "),CU=n(CIe,"A",{href:!0});var ELt=s(CU);zvr=r(ELt,"TFCTRLLMHeadModel"),ELt.forEach(t),Qvr=r(CIe," (CTRL model)"),CIe.forEach(t),Wvr=i(le),oE=n(le,"LI",{});var wIe=s(oE);Zve=n(wIe,"STRONG",{});var CLt=s(Zve);Hvr=r(CLt,"distilbert"),CLt.forEach(t),Uvr=r(wIe," \u2014 "),wU=n(wIe,"A",{href:!0});var wLt=s(wU);Jvr=r(wLt,"TFDistilBertForMaskedLM"),wLt.forEach(t),Yvr=r(wIe," (DistilBERT model)"),wIe.forEach(t),Kvr=i(le),rE=n(le,"LI",{});var AIe=s(rE);eFe=n(AIe,"STRONG",{});var ALt=s(eFe);Zvr=r(ALt,"electra"),ALt.forEach(t),eFr=r(AIe," \u2014 "),AU=n(AIe,"A",{href:!0});var LLt=s(AU);oFr=r(LLt,"TFElectraForPreTraining"),LLt.forEach(t),rFr=r(AIe," (ELECTRA model)"),AIe.forEach(t),tFr=i(le),tE=n(le,"LI",{});var LIe=s(tE);oFe=n(LIe,"STRONG",{});var yLt=s(oFe);aFr=r(yLt,"flaubert"),yLt.forEach(t),nFr=r(LIe," \u2014 "),LU=n(LIe,"A",{href:!0});var xLt=s(LU);sFr=r(xLt,"TFFlaubertWithLMHeadModel"),xLt.forEach(t),lFr=r(LIe," (FlauBERT model)"),LIe.forEach(t),iFr=i(le),aE=n(le,"LI",{});var yIe=s(aE);rFe=n(yIe,"STRONG",{});var $Lt=s(rFe);dFr=r($Lt,"funnel"),$Lt.forEach(t),cFr=r(yIe," \u2014 "),yU=n(yIe,"A",{href:!0});var kLt=s(yU);fFr=r(kLt,"TFFunnelForPreTraining"),kLt.forEach(t),mFr=r(yIe," (Funnel Transformer model)"),yIe.forEach(t),gFr=i(le),nE=n(le,"LI",{});var xIe=s(nE);tFe=n(xIe,"STRONG",{});var SLt=s(tFe);hFr=r(SLt,"gpt2"),SLt.forEach(t),pFr=r(xIe," \u2014 "),xU=n(xIe,"A",{href:!0});var RLt=s(xU);_Fr=r(RLt,"TFGPT2LMHeadModel"),RLt.forEach(t),uFr=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),bFr=i(le),sE=n(le,"LI",{});var $Ie=s(sE);aFe=n($Ie,"STRONG",{});var PLt=s(aFe);vFr=r(PLt,"layoutlm"),PLt.forEach(t),FFr=r($Ie," \u2014 "),$U=n($Ie,"A",{href:!0});var BLt=s($U);TFr=r(BLt,"TFLayoutLMForMaskedLM"),BLt.forEach(t),MFr=r($Ie," (LayoutLM model)"),$Ie.forEach(t),EFr=i(le),lE=n(le,"LI",{});var kIe=s(lE);nFe=n(kIe,"STRONG",{});var NLt=s(nFe);CFr=r(NLt,"lxmert"),NLt.forEach(t),wFr=r(kIe," \u2014 "),kU=n(kIe,"A",{href:!0});var ILt=s(kU);AFr=r(ILt,"TFLxmertForPreTraining"),ILt.forEach(t),LFr=r(kIe," (LXMERT model)"),kIe.forEach(t),yFr=i(le),iE=n(le,"LI",{});var SIe=s(iE);sFe=n(SIe,"STRONG",{});var qLt=s(sFe);xFr=r(qLt,"mobilebert"),qLt.forEach(t),$Fr=r(SIe," \u2014 "),SU=n(SIe,"A",{href:!0});var jLt=s(SU);kFr=r(jLt,"TFMobileBertForPreTraining"),jLt.forEach(t),SFr=r(SIe," (MobileBERT model)"),SIe.forEach(t),RFr=i(le),dE=n(le,"LI",{});var RIe=s(dE);lFe=n(RIe,"STRONG",{});var DLt=s(lFe);PFr=r(DLt,"mpnet"),DLt.forEach(t),BFr=r(RIe," \u2014 "),RU=n(RIe,"A",{href:!0});var GLt=s(RU);NFr=r(GLt,"TFMPNetForMaskedLM"),GLt.forEach(t),IFr=r(RIe," (MPNet model)"),RIe.forEach(t),qFr=i(le),cE=n(le,"LI",{});var PIe=s(cE);iFe=n(PIe,"STRONG",{});var OLt=s(iFe);jFr=r(OLt,"openai-gpt"),OLt.forEach(t),DFr=r(PIe," \u2014 "),PU=n(PIe,"A",{href:!0});var VLt=s(PU);GFr=r(VLt,"TFOpenAIGPTLMHeadModel"),VLt.forEach(t),OFr=r(PIe," (OpenAI GPT model)"),PIe.forEach(t),VFr=i(le),fE=n(le,"LI",{});var BIe=s(fE);dFe=n(BIe,"STRONG",{});var XLt=s(dFe);XFr=r(XLt,"roberta"),XLt.forEach(t),zFr=r(BIe," \u2014 "),BU=n(BIe,"A",{href:!0});var zLt=s(BU);QFr=r(zLt,"TFRobertaForMaskedLM"),zLt.forEach(t),WFr=r(BIe," (RoBERTa model)"),BIe.forEach(t),HFr=i(le),mE=n(le,"LI",{});var NIe=s(mE);cFe=n(NIe,"STRONG",{});var QLt=s(cFe);UFr=r(QLt,"t5"),QLt.forEach(t),JFr=r(NIe," \u2014 "),NU=n(NIe,"A",{href:!0});var WLt=s(NU);YFr=r(WLt,"TFT5ForConditionalGeneration"),WLt.forEach(t),KFr=r(NIe," (T5 model)"),NIe.forEach(t),ZFr=i(le),gE=n(le,"LI",{});var IIe=s(gE);fFe=n(IIe,"STRONG",{});var HLt=s(fFe);eTr=r(HLt,"tapas"),HLt.forEach(t),oTr=r(IIe," \u2014 "),IU=n(IIe,"A",{href:!0});var ULt=s(IU);rTr=r(ULt,"TFTapasForMaskedLM"),ULt.forEach(t),tTr=r(IIe," (TAPAS model)"),IIe.forEach(t),aTr=i(le),hE=n(le,"LI",{});var qIe=s(hE);mFe=n(qIe,"STRONG",{});var JLt=s(mFe);nTr=r(JLt,"transfo-xl"),JLt.forEach(t),sTr=r(qIe," \u2014 "),qU=n(qIe,"A",{href:!0});var YLt=s(qU);lTr=r(YLt,"TFTransfoXLLMHeadModel"),YLt.forEach(t),iTr=r(qIe," (Transformer-XL model)"),qIe.forEach(t),dTr=i(le),pE=n(le,"LI",{});var jIe=s(pE);gFe=n(jIe,"STRONG",{});var KLt=s(gFe);cTr=r(KLt,"vit_mae"),KLt.forEach(t),fTr=r(jIe," \u2014 "),jU=n(jIe,"A",{href:!0});var ZLt=s(jU);mTr=r(ZLt,"TFViTMAEForPreTraining"),ZLt.forEach(t),gTr=r(jIe," (ViTMAE model)"),jIe.forEach(t),hTr=i(le),_E=n(le,"LI",{});var DIe=s(_E);hFe=n(DIe,"STRONG",{});var eyt=s(hFe);pTr=r(eyt,"xlm"),eyt.forEach(t),_Tr=r(DIe," \u2014 "),DU=n(DIe,"A",{href:!0});var oyt=s(DU);uTr=r(oyt,"TFXLMWithLMHeadModel"),oyt.forEach(t),bTr=r(DIe," (XLM model)"),DIe.forEach(t),vTr=i(le),uE=n(le,"LI",{});var GIe=s(uE);pFe=n(GIe,"STRONG",{});var ryt=s(pFe);FTr=r(ryt,"xlm-roberta"),ryt.forEach(t),TTr=r(GIe," \u2014 "),GU=n(GIe,"A",{href:!0});var tyt=s(GU);MTr=r(tyt,"TFXLMRobertaForMaskedLM"),tyt.forEach(t),ETr=r(GIe," (XLM-RoBERTa model)"),GIe.forEach(t),CTr=i(le),bE=n(le,"LI",{});var OIe=s(bE);_Fe=n(OIe,"STRONG",{});var ayt=s(_Fe);wTr=r(ayt,"xlnet"),ayt.forEach(t),ATr=r(OIe," \u2014 "),OU=n(OIe,"A",{href:!0});var nyt=s(OU);LTr=r(nyt,"TFXLNetLMHeadModel"),nyt.forEach(t),yTr=r(OIe," (XLNet model)"),OIe.forEach(t),le.forEach(t),xTr=i(Ll),T(vE.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),xVe=i(f),lc=n(f,"H2",{class:!0});var Ize=s(lc);FE=n(Ize,"A",{id:!0,class:!0,href:!0});var syt=s(FE);uFe=n(syt,"SPAN",{});var lyt=s(uFe);T(R8.$$.fragment,lyt),lyt.forEach(t),syt.forEach(t),$Tr=i(Ize),bFe=n(Ize,"SPAN",{});var iyt=s(bFe);kTr=r(iyt,"TFAutoModelForCausalLM"),iyt.forEach(t),Ize.forEach(t),$Ve=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(P8.$$.fragment,yl),STr=i(yl),ic=n(yl,"P",{});var Nre=s(ic);RTr=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VU=n(Nre,"A",{href:!0});var dyt=s(VU);PTr=r(dyt,"from_pretrained()"),dyt.forEach(t),BTr=r(Nre," class method or the "),XU=n(Nre,"A",{href:!0});var cyt=s(XU);NTr=r(cyt,"from_config()"),cyt.forEach(t),ITr=r(Nre,` class
method.`),Nre.forEach(t),qTr=i(yl),B8=n(yl,"P",{});var qze=s(B8);jTr=r(qze,"This class cannot be instantiated directly using "),vFe=n(qze,"CODE",{});var fyt=s(vFe);DTr=r(fyt,"__init__()"),fyt.forEach(t),GTr=r(qze," (throws an error)."),qze.forEach(t),OTr=i(yl),St=n(yl,"DIV",{class:!0});var qA=s(St);T(N8.$$.fragment,qA),VTr=i(qA),FFe=n(qA,"P",{});var myt=s(FFe);XTr=r(myt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),myt.forEach(t),zTr=i(qA),dc=n(qA,"P",{});var Ire=s(dc);QTr=r(Ire,`Note:
Loading a model from its configuration file does `),TFe=n(Ire,"STRONG",{});var gyt=s(TFe);WTr=r(gyt,"not"),gyt.forEach(t),HTr=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(Ire,"A",{href:!0});var hyt=s(zU);UTr=r(hyt,"from_pretrained()"),hyt.forEach(t),JTr=r(Ire," to load the model weights."),Ire.forEach(t),YTr=i(qA),T(TE.$$.fragment,qA),qA.forEach(t),KTr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(I8.$$.fragment,xl),ZTr=i(xl),MFe=n(xl,"P",{});var pyt=s(MFe);eMr=r(pyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pyt.forEach(t),oMr=i(xl),sn=n(xl,"P",{});var jA=s(sn);rMr=r(jA,"The model class to instantiate is selected based on the "),EFe=n(jA,"CODE",{});var _yt=s(EFe);tMr=r(_yt,"model_type"),_yt.forEach(t),aMr=r(jA,` property of the config object (either
passed as an argument or loaded from `),CFe=n(jA,"CODE",{});var uyt=s(CFe);nMr=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),sMr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(jA,"CODE",{});var byt=s(wFe);lMr=r(byt,"pretrained_model_name_or_path"),byt.forEach(t),iMr=r(jA,":"),jA.forEach(t),dMr=i(xl),Me=n(xl,"UL",{});var Ce=s(Me);ME=n(Ce,"LI",{});var VIe=s(ME);AFe=n(VIe,"STRONG",{});var vyt=s(AFe);cMr=r(vyt,"bert"),vyt.forEach(t),fMr=r(VIe," \u2014 "),QU=n(VIe,"A",{href:!0});var Fyt=s(QU);mMr=r(Fyt,"TFBertLMHeadModel"),Fyt.forEach(t),gMr=r(VIe," (BERT model)"),VIe.forEach(t),hMr=i(Ce),EE=n(Ce,"LI",{});var XIe=s(EE);LFe=n(XIe,"STRONG",{});var Tyt=s(LFe);pMr=r(Tyt,"camembert"),Tyt.forEach(t),_Mr=r(XIe," \u2014 "),WU=n(XIe,"A",{href:!0});var Myt=s(WU);uMr=r(Myt,"TFCamembertForCausalLM"),Myt.forEach(t),bMr=r(XIe," (CamemBERT model)"),XIe.forEach(t),vMr=i(Ce),CE=n(Ce,"LI",{});var zIe=s(CE);yFe=n(zIe,"STRONG",{});var Eyt=s(yFe);FMr=r(Eyt,"ctrl"),Eyt.forEach(t),TMr=r(zIe," \u2014 "),HU=n(zIe,"A",{href:!0});var Cyt=s(HU);MMr=r(Cyt,"TFCTRLLMHeadModel"),Cyt.forEach(t),EMr=r(zIe," (CTRL model)"),zIe.forEach(t),CMr=i(Ce),wE=n(Ce,"LI",{});var QIe=s(wE);xFe=n(QIe,"STRONG",{});var wyt=s(xFe);wMr=r(wyt,"gpt2"),wyt.forEach(t),AMr=r(QIe," \u2014 "),UU=n(QIe,"A",{href:!0});var Ayt=s(UU);LMr=r(Ayt,"TFGPT2LMHeadModel"),Ayt.forEach(t),yMr=r(QIe," (OpenAI GPT-2 model)"),QIe.forEach(t),xMr=i(Ce),AE=n(Ce,"LI",{});var WIe=s(AE);$Fe=n(WIe,"STRONG",{});var Lyt=s($Fe);$Mr=r(Lyt,"gptj"),Lyt.forEach(t),kMr=r(WIe," \u2014 "),JU=n(WIe,"A",{href:!0});var yyt=s(JU);SMr=r(yyt,"TFGPTJForCausalLM"),yyt.forEach(t),RMr=r(WIe," (GPT-J model)"),WIe.forEach(t),PMr=i(Ce),LE=n(Ce,"LI",{});var HIe=s(LE);kFe=n(HIe,"STRONG",{});var xyt=s(kFe);BMr=r(xyt,"openai-gpt"),xyt.forEach(t),NMr=r(HIe," \u2014 "),YU=n(HIe,"A",{href:!0});var $yt=s(YU);IMr=r($yt,"TFOpenAIGPTLMHeadModel"),$yt.forEach(t),qMr=r(HIe," (OpenAI GPT model)"),HIe.forEach(t),jMr=i(Ce),yE=n(Ce,"LI",{});var UIe=s(yE);SFe=n(UIe,"STRONG",{});var kyt=s(SFe);DMr=r(kyt,"opt"),kyt.forEach(t),GMr=r(UIe," \u2014 "),KU=n(UIe,"A",{href:!0});var Syt=s(KU);OMr=r(Syt,"TFOPTForCausalLM"),Syt.forEach(t),VMr=r(UIe," (OPT model)"),UIe.forEach(t),XMr=i(Ce),xE=n(Ce,"LI",{});var JIe=s(xE);RFe=n(JIe,"STRONG",{});var Ryt=s(RFe);zMr=r(Ryt,"rembert"),Ryt.forEach(t),QMr=r(JIe," \u2014 "),ZU=n(JIe,"A",{href:!0});var Pyt=s(ZU);WMr=r(Pyt,"TFRemBertForCausalLM"),Pyt.forEach(t),HMr=r(JIe," (RemBERT model)"),JIe.forEach(t),UMr=i(Ce),$E=n(Ce,"LI",{});var YIe=s($E);PFe=n(YIe,"STRONG",{});var Byt=s(PFe);JMr=r(Byt,"roberta"),Byt.forEach(t),YMr=r(YIe," \u2014 "),eJ=n(YIe,"A",{href:!0});var Nyt=s(eJ);KMr=r(Nyt,"TFRobertaForCausalLM"),Nyt.forEach(t),ZMr=r(YIe," (RoBERTa model)"),YIe.forEach(t),eEr=i(Ce),kE=n(Ce,"LI",{});var KIe=s(kE);BFe=n(KIe,"STRONG",{});var Iyt=s(BFe);oEr=r(Iyt,"roformer"),Iyt.forEach(t),rEr=r(KIe," \u2014 "),oJ=n(KIe,"A",{href:!0});var qyt=s(oJ);tEr=r(qyt,"TFRoFormerForCausalLM"),qyt.forEach(t),aEr=r(KIe," (RoFormer model)"),KIe.forEach(t),nEr=i(Ce),SE=n(Ce,"LI",{});var ZIe=s(SE);NFe=n(ZIe,"STRONG",{});var jyt=s(NFe);sEr=r(jyt,"transfo-xl"),jyt.forEach(t),lEr=r(ZIe," \u2014 "),rJ=n(ZIe,"A",{href:!0});var Dyt=s(rJ);iEr=r(Dyt,"TFTransfoXLLMHeadModel"),Dyt.forEach(t),dEr=r(ZIe," (Transformer-XL model)"),ZIe.forEach(t),cEr=i(Ce),RE=n(Ce,"LI",{});var eqe=s(RE);IFe=n(eqe,"STRONG",{});var Gyt=s(IFe);fEr=r(Gyt,"xlm"),Gyt.forEach(t),mEr=r(eqe," \u2014 "),tJ=n(eqe,"A",{href:!0});var Oyt=s(tJ);gEr=r(Oyt,"TFXLMWithLMHeadModel"),Oyt.forEach(t),hEr=r(eqe," (XLM model)"),eqe.forEach(t),pEr=i(Ce),PE=n(Ce,"LI",{});var oqe=s(PE);qFe=n(oqe,"STRONG",{});var Vyt=s(qFe);_Er=r(Vyt,"xlnet"),Vyt.forEach(t),uEr=r(oqe," \u2014 "),aJ=n(oqe,"A",{href:!0});var Xyt=s(aJ);bEr=r(Xyt,"TFXLNetLMHeadModel"),Xyt.forEach(t),vEr=r(oqe," (XLNet model)"),oqe.forEach(t),Ce.forEach(t),FEr=i(xl),T(BE.$$.fragment,xl),xl.forEach(t),yl.forEach(t),kVe=i(f),cc=n(f,"H2",{class:!0});var jze=s(cc);NE=n(jze,"A",{id:!0,class:!0,href:!0});var zyt=s(NE);jFe=n(zyt,"SPAN",{});var Qyt=s(jFe);T(q8.$$.fragment,Qyt),Qyt.forEach(t),zyt.forEach(t),TEr=i(jze),DFe=n(jze,"SPAN",{});var Wyt=s(DFe);MEr=r(Wyt,"TFAutoModelForImageClassification"),Wyt.forEach(t),jze.forEach(t),SVe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(j8.$$.fragment,$l),EEr=i($l),fc=n($l,"P",{});var qre=s(fc);CEr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nJ=n(qre,"A",{href:!0});var Hyt=s(nJ);wEr=r(Hyt,"from_pretrained()"),Hyt.forEach(t),AEr=r(qre," class method or the "),sJ=n(qre,"A",{href:!0});var Uyt=s(sJ);LEr=r(Uyt,"from_config()"),Uyt.forEach(t),yEr=r(qre,` class
method.`),qre.forEach(t),xEr=i($l),D8=n($l,"P",{});var Dze=s(D8);$Er=r(Dze,"This class cannot be instantiated directly using "),GFe=n(Dze,"CODE",{});var Jyt=s(GFe);kEr=r(Jyt,"__init__()"),Jyt.forEach(t),SEr=r(Dze," (throws an error)."),Dze.forEach(t),REr=i($l),Rt=n($l,"DIV",{class:!0});var DA=s(Rt);T(G8.$$.fragment,DA),PEr=i(DA),OFe=n(DA,"P",{});var Yyt=s(OFe);BEr=r(Yyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yyt.forEach(t),NEr=i(DA),mc=n(DA,"P",{});var jre=s(mc);IEr=r(jre,`Note:
Loading a model from its configuration file does `),VFe=n(jre,"STRONG",{});var Kyt=s(VFe);qEr=r(Kyt,"not"),Kyt.forEach(t),jEr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(jre,"A",{href:!0});var Zyt=s(lJ);DEr=r(Zyt,"from_pretrained()"),Zyt.forEach(t),GEr=r(jre," to load the model weights."),jre.forEach(t),OEr=i(DA),T(IE.$$.fragment,DA),DA.forEach(t),VEr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(O8.$$.fragment,kl),XEr=i(kl),XFe=n(kl,"P",{});var e8t=s(XFe);zEr=r(e8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e8t.forEach(t),QEr=i(kl),ln=n(kl,"P",{});var GA=s(ln);WEr=r(GA,"The model class to instantiate is selected based on the "),zFe=n(GA,"CODE",{});var o8t=s(zFe);HEr=r(o8t,"model_type"),o8t.forEach(t),UEr=r(GA,` property of the config object (either
passed as an argument or loaded from `),QFe=n(GA,"CODE",{});var r8t=s(QFe);JEr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),YEr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(GA,"CODE",{});var t8t=s(WFe);KEr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),ZEr=r(GA,":"),GA.forEach(t),e4r=i(kl),dn=n(kl,"UL",{});var OA=s(dn);qE=n(OA,"LI",{});var rqe=s(qE);HFe=n(rqe,"STRONG",{});var a8t=s(HFe);o4r=r(a8t,"convnext"),a8t.forEach(t),r4r=r(rqe," \u2014 "),iJ=n(rqe,"A",{href:!0});var n8t=s(iJ);t4r=r(n8t,"TFConvNextForImageClassification"),n8t.forEach(t),a4r=r(rqe," (ConvNeXT model)"),rqe.forEach(t),n4r=i(OA),jE=n(OA,"LI",{});var tqe=s(jE);UFe=n(tqe,"STRONG",{});var s8t=s(UFe);s4r=r(s8t,"data2vec-vision"),s8t.forEach(t),l4r=r(tqe," \u2014 "),dJ=n(tqe,"A",{href:!0});var l8t=s(dJ);i4r=r(l8t,"TFData2VecVisionForImageClassification"),l8t.forEach(t),d4r=r(tqe," (Data2VecVision model)"),tqe.forEach(t),c4r=i(OA),DE=n(OA,"LI",{});var aqe=s(DE);JFe=n(aqe,"STRONG",{});var i8t=s(JFe);f4r=r(i8t,"swin"),i8t.forEach(t),m4r=r(aqe," \u2014 "),cJ=n(aqe,"A",{href:!0});var d8t=s(cJ);g4r=r(d8t,"TFSwinForImageClassification"),d8t.forEach(t),h4r=r(aqe," (Swin Transformer model)"),aqe.forEach(t),p4r=i(OA),GE=n(OA,"LI",{});var nqe=s(GE);YFe=n(nqe,"STRONG",{});var c8t=s(YFe);_4r=r(c8t,"vit"),c8t.forEach(t),u4r=r(nqe," \u2014 "),fJ=n(nqe,"A",{href:!0});var f8t=s(fJ);b4r=r(f8t,"TFViTForImageClassification"),f8t.forEach(t),v4r=r(nqe," (ViT model)"),nqe.forEach(t),OA.forEach(t),F4r=i(kl),T(OE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),RVe=i(f),gc=n(f,"H2",{class:!0});var Gze=s(gc);VE=n(Gze,"A",{id:!0,class:!0,href:!0});var m8t=s(VE);KFe=n(m8t,"SPAN",{});var g8t=s(KFe);T(V8.$$.fragment,g8t),g8t.forEach(t),m8t.forEach(t),T4r=i(Gze),ZFe=n(Gze,"SPAN",{});var h8t=s(ZFe);M4r=r(h8t,"TFAutoModelForMaskedLM"),h8t.forEach(t),Gze.forEach(t),PVe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(X8.$$.fragment,Sl),E4r=i(Sl),hc=n(Sl,"P",{});var Dre=s(hc);C4r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mJ=n(Dre,"A",{href:!0});var p8t=s(mJ);w4r=r(p8t,"from_pretrained()"),p8t.forEach(t),A4r=r(Dre," class method or the "),gJ=n(Dre,"A",{href:!0});var _8t=s(gJ);L4r=r(_8t,"from_config()"),_8t.forEach(t),y4r=r(Dre,` class
method.`),Dre.forEach(t),x4r=i(Sl),z8=n(Sl,"P",{});var Oze=s(z8);$4r=r(Oze,"This class cannot be instantiated directly using "),eTe=n(Oze,"CODE",{});var u8t=s(eTe);k4r=r(u8t,"__init__()"),u8t.forEach(t),S4r=r(Oze," (throws an error)."),Oze.forEach(t),R4r=i(Sl),Pt=n(Sl,"DIV",{class:!0});var VA=s(Pt);T(Q8.$$.fragment,VA),P4r=i(VA),oTe=n(VA,"P",{});var b8t=s(oTe);B4r=r(b8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b8t.forEach(t),N4r=i(VA),pc=n(VA,"P",{});var Gre=s(pc);I4r=r(Gre,`Note:
Loading a model from its configuration file does `),rTe=n(Gre,"STRONG",{});var v8t=s(rTe);q4r=r(v8t,"not"),v8t.forEach(t),j4r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Gre,"A",{href:!0});var F8t=s(hJ);D4r=r(F8t,"from_pretrained()"),F8t.forEach(t),G4r=r(Gre," to load the model weights."),Gre.forEach(t),O4r=i(VA),T(XE.$$.fragment,VA),VA.forEach(t),V4r=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(W8.$$.fragment,Rl),X4r=i(Rl),tTe=n(Rl,"P",{});var T8t=s(tTe);z4r=r(T8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T8t.forEach(t),Q4r=i(Rl),cn=n(Rl,"P",{});var XA=s(cn);W4r=r(XA,"The model class to instantiate is selected based on the "),aTe=n(XA,"CODE",{});var M8t=s(aTe);H4r=r(M8t,"model_type"),M8t.forEach(t),U4r=r(XA,` property of the config object (either
passed as an argument or loaded from `),nTe=n(XA,"CODE",{});var E8t=s(nTe);J4r=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),Y4r=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(XA,"CODE",{});var C8t=s(sTe);K4r=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),Z4r=r(XA,":"),XA.forEach(t),eCr=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);zE=n(fe,"LI",{});var sqe=s(zE);lTe=n(sqe,"STRONG",{});var w8t=s(lTe);oCr=r(w8t,"albert"),w8t.forEach(t),rCr=r(sqe," \u2014 "),pJ=n(sqe,"A",{href:!0});var A8t=s(pJ);tCr=r(A8t,"TFAlbertForMaskedLM"),A8t.forEach(t),aCr=r(sqe," (ALBERT model)"),sqe.forEach(t),nCr=i(fe),QE=n(fe,"LI",{});var lqe=s(QE);iTe=n(lqe,"STRONG",{});var L8t=s(iTe);sCr=r(L8t,"bert"),L8t.forEach(t),lCr=r(lqe," \u2014 "),_J=n(lqe,"A",{href:!0});var y8t=s(_J);iCr=r(y8t,"TFBertForMaskedLM"),y8t.forEach(t),dCr=r(lqe," (BERT model)"),lqe.forEach(t),cCr=i(fe),WE=n(fe,"LI",{});var iqe=s(WE);dTe=n(iqe,"STRONG",{});var x8t=s(dTe);fCr=r(x8t,"camembert"),x8t.forEach(t),mCr=r(iqe," \u2014 "),uJ=n(iqe,"A",{href:!0});var $8t=s(uJ);gCr=r($8t,"TFCamembertForMaskedLM"),$8t.forEach(t),hCr=r(iqe," (CamemBERT model)"),iqe.forEach(t),pCr=i(fe),HE=n(fe,"LI",{});var dqe=s(HE);cTe=n(dqe,"STRONG",{});var k8t=s(cTe);_Cr=r(k8t,"convbert"),k8t.forEach(t),uCr=r(dqe," \u2014 "),bJ=n(dqe,"A",{href:!0});var S8t=s(bJ);bCr=r(S8t,"TFConvBertForMaskedLM"),S8t.forEach(t),vCr=r(dqe," (ConvBERT model)"),dqe.forEach(t),FCr=i(fe),UE=n(fe,"LI",{});var cqe=s(UE);fTe=n(cqe,"STRONG",{});var R8t=s(fTe);TCr=r(R8t,"deberta"),R8t.forEach(t),MCr=r(cqe," \u2014 "),vJ=n(cqe,"A",{href:!0});var P8t=s(vJ);ECr=r(P8t,"TFDebertaForMaskedLM"),P8t.forEach(t),CCr=r(cqe," (DeBERTa model)"),cqe.forEach(t),wCr=i(fe),JE=n(fe,"LI",{});var fqe=s(JE);mTe=n(fqe,"STRONG",{});var B8t=s(mTe);ACr=r(B8t,"deberta-v2"),B8t.forEach(t),LCr=r(fqe," \u2014 "),FJ=n(fqe,"A",{href:!0});var N8t=s(FJ);yCr=r(N8t,"TFDebertaV2ForMaskedLM"),N8t.forEach(t),xCr=r(fqe," (DeBERTa-v2 model)"),fqe.forEach(t),$Cr=i(fe),YE=n(fe,"LI",{});var mqe=s(YE);gTe=n(mqe,"STRONG",{});var I8t=s(gTe);kCr=r(I8t,"distilbert"),I8t.forEach(t),SCr=r(mqe," \u2014 "),TJ=n(mqe,"A",{href:!0});var q8t=s(TJ);RCr=r(q8t,"TFDistilBertForMaskedLM"),q8t.forEach(t),PCr=r(mqe," (DistilBERT model)"),mqe.forEach(t),BCr=i(fe),KE=n(fe,"LI",{});var gqe=s(KE);hTe=n(gqe,"STRONG",{});var j8t=s(hTe);NCr=r(j8t,"electra"),j8t.forEach(t),ICr=r(gqe," \u2014 "),MJ=n(gqe,"A",{href:!0});var D8t=s(MJ);qCr=r(D8t,"TFElectraForMaskedLM"),D8t.forEach(t),jCr=r(gqe," (ELECTRA model)"),gqe.forEach(t),DCr=i(fe),ZE=n(fe,"LI",{});var hqe=s(ZE);pTe=n(hqe,"STRONG",{});var G8t=s(pTe);GCr=r(G8t,"flaubert"),G8t.forEach(t),OCr=r(hqe," \u2014 "),EJ=n(hqe,"A",{href:!0});var O8t=s(EJ);VCr=r(O8t,"TFFlaubertWithLMHeadModel"),O8t.forEach(t),XCr=r(hqe," (FlauBERT model)"),hqe.forEach(t),zCr=i(fe),e4=n(fe,"LI",{});var pqe=s(e4);_Te=n(pqe,"STRONG",{});var V8t=s(_Te);QCr=r(V8t,"funnel"),V8t.forEach(t),WCr=r(pqe," \u2014 "),CJ=n(pqe,"A",{href:!0});var X8t=s(CJ);HCr=r(X8t,"TFFunnelForMaskedLM"),X8t.forEach(t),UCr=r(pqe," (Funnel Transformer model)"),pqe.forEach(t),JCr=i(fe),o4=n(fe,"LI",{});var _qe=s(o4);uTe=n(_qe,"STRONG",{});var z8t=s(uTe);YCr=r(z8t,"layoutlm"),z8t.forEach(t),KCr=r(_qe," \u2014 "),wJ=n(_qe,"A",{href:!0});var Q8t=s(wJ);ZCr=r(Q8t,"TFLayoutLMForMaskedLM"),Q8t.forEach(t),e5r=r(_qe," (LayoutLM model)"),_qe.forEach(t),o5r=i(fe),r4=n(fe,"LI",{});var uqe=s(r4);bTe=n(uqe,"STRONG",{});var W8t=s(bTe);r5r=r(W8t,"longformer"),W8t.forEach(t),t5r=r(uqe," \u2014 "),AJ=n(uqe,"A",{href:!0});var H8t=s(AJ);a5r=r(H8t,"TFLongformerForMaskedLM"),H8t.forEach(t),n5r=r(uqe," (Longformer model)"),uqe.forEach(t),s5r=i(fe),t4=n(fe,"LI",{});var bqe=s(t4);vTe=n(bqe,"STRONG",{});var U8t=s(vTe);l5r=r(U8t,"mobilebert"),U8t.forEach(t),i5r=r(bqe," \u2014 "),LJ=n(bqe,"A",{href:!0});var J8t=s(LJ);d5r=r(J8t,"TFMobileBertForMaskedLM"),J8t.forEach(t),c5r=r(bqe," (MobileBERT model)"),bqe.forEach(t),f5r=i(fe),a4=n(fe,"LI",{});var vqe=s(a4);FTe=n(vqe,"STRONG",{});var Y8t=s(FTe);m5r=r(Y8t,"mpnet"),Y8t.forEach(t),g5r=r(vqe," \u2014 "),yJ=n(vqe,"A",{href:!0});var K8t=s(yJ);h5r=r(K8t,"TFMPNetForMaskedLM"),K8t.forEach(t),p5r=r(vqe," (MPNet model)"),vqe.forEach(t),_5r=i(fe),n4=n(fe,"LI",{});var Fqe=s(n4);TTe=n(Fqe,"STRONG",{});var Z8t=s(TTe);u5r=r(Z8t,"rembert"),Z8t.forEach(t),b5r=r(Fqe," \u2014 "),xJ=n(Fqe,"A",{href:!0});var ext=s(xJ);v5r=r(ext,"TFRemBertForMaskedLM"),ext.forEach(t),F5r=r(Fqe," (RemBERT model)"),Fqe.forEach(t),T5r=i(fe),s4=n(fe,"LI",{});var Tqe=s(s4);MTe=n(Tqe,"STRONG",{});var oxt=s(MTe);M5r=r(oxt,"roberta"),oxt.forEach(t),E5r=r(Tqe," \u2014 "),$J=n(Tqe,"A",{href:!0});var rxt=s($J);C5r=r(rxt,"TFRobertaForMaskedLM"),rxt.forEach(t),w5r=r(Tqe," (RoBERTa model)"),Tqe.forEach(t),A5r=i(fe),l4=n(fe,"LI",{});var Mqe=s(l4);ETe=n(Mqe,"STRONG",{});var txt=s(ETe);L5r=r(txt,"roformer"),txt.forEach(t),y5r=r(Mqe," \u2014 "),kJ=n(Mqe,"A",{href:!0});var axt=s(kJ);x5r=r(axt,"TFRoFormerForMaskedLM"),axt.forEach(t),$5r=r(Mqe," (RoFormer model)"),Mqe.forEach(t),k5r=i(fe),i4=n(fe,"LI",{});var Eqe=s(i4);CTe=n(Eqe,"STRONG",{});var nxt=s(CTe);S5r=r(nxt,"tapas"),nxt.forEach(t),R5r=r(Eqe," \u2014 "),SJ=n(Eqe,"A",{href:!0});var sxt=s(SJ);P5r=r(sxt,"TFTapasForMaskedLM"),sxt.forEach(t),B5r=r(Eqe," (TAPAS model)"),Eqe.forEach(t),N5r=i(fe),d4=n(fe,"LI",{});var Cqe=s(d4);wTe=n(Cqe,"STRONG",{});var lxt=s(wTe);I5r=r(lxt,"xlm"),lxt.forEach(t),q5r=r(Cqe," \u2014 "),RJ=n(Cqe,"A",{href:!0});var ixt=s(RJ);j5r=r(ixt,"TFXLMWithLMHeadModel"),ixt.forEach(t),D5r=r(Cqe," (XLM model)"),Cqe.forEach(t),G5r=i(fe),c4=n(fe,"LI",{});var wqe=s(c4);ATe=n(wqe,"STRONG",{});var dxt=s(ATe);O5r=r(dxt,"xlm-roberta"),dxt.forEach(t),V5r=r(wqe," \u2014 "),PJ=n(wqe,"A",{href:!0});var cxt=s(PJ);X5r=r(cxt,"TFXLMRobertaForMaskedLM"),cxt.forEach(t),z5r=r(wqe," (XLM-RoBERTa model)"),wqe.forEach(t),fe.forEach(t),Q5r=i(Rl),T(f4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),BVe=i(f),_c=n(f,"H2",{class:!0});var Vze=s(_c);m4=n(Vze,"A",{id:!0,class:!0,href:!0});var fxt=s(m4);LTe=n(fxt,"SPAN",{});var mxt=s(LTe);T(H8.$$.fragment,mxt),mxt.forEach(t),fxt.forEach(t),W5r=i(Vze),yTe=n(Vze,"SPAN",{});var gxt=s(yTe);H5r=r(gxt,"TFAutoModelForSeq2SeqLM"),gxt.forEach(t),Vze.forEach(t),NVe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(U8.$$.fragment,Pl),U5r=i(Pl),uc=n(Pl,"P",{});var Ore=s(uc);J5r=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BJ=n(Ore,"A",{href:!0});var hxt=s(BJ);Y5r=r(hxt,"from_pretrained()"),hxt.forEach(t),K5r=r(Ore," class method or the "),NJ=n(Ore,"A",{href:!0});var pxt=s(NJ);Z5r=r(pxt,"from_config()"),pxt.forEach(t),e3r=r(Ore,` class
method.`),Ore.forEach(t),o3r=i(Pl),J8=n(Pl,"P",{});var Xze=s(J8);r3r=r(Xze,"This class cannot be instantiated directly using "),xTe=n(Xze,"CODE",{});var _xt=s(xTe);t3r=r(_xt,"__init__()"),_xt.forEach(t),a3r=r(Xze," (throws an error)."),Xze.forEach(t),n3r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var zA=s(Bt);T(Y8.$$.fragment,zA),s3r=i(zA),$Te=n(zA,"P",{});var uxt=s($Te);l3r=r(uxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uxt.forEach(t),i3r=i(zA),bc=n(zA,"P",{});var Vre=s(bc);d3r=r(Vre,`Note:
Loading a model from its configuration file does `),kTe=n(Vre,"STRONG",{});var bxt=s(kTe);c3r=r(bxt,"not"),bxt.forEach(t),f3r=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(Vre,"A",{href:!0});var vxt=s(IJ);m3r=r(vxt,"from_pretrained()"),vxt.forEach(t),g3r=r(Vre," to load the model weights."),Vre.forEach(t),h3r=i(zA),T(g4.$$.fragment,zA),zA.forEach(t),p3r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(K8.$$.fragment,Bl),_3r=i(Bl),STe=n(Bl,"P",{});var Fxt=s(STe);u3r=r(Fxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Fxt.forEach(t),b3r=i(Bl),fn=n(Bl,"P",{});var QA=s(fn);v3r=r(QA,"The model class to instantiate is selected based on the "),RTe=n(QA,"CODE",{});var Txt=s(RTe);F3r=r(Txt,"model_type"),Txt.forEach(t),T3r=r(QA,` property of the config object (either
passed as an argument or loaded from `),PTe=n(QA,"CODE",{});var Mxt=s(PTe);M3r=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),E3r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(QA,"CODE",{});var Ext=s(BTe);C3r=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),w3r=r(QA,":"),QA.forEach(t),A3r=i(Bl),ye=n(Bl,"UL",{});var Ne=s(ye);h4=n(Ne,"LI",{});var Aqe=s(h4);NTe=n(Aqe,"STRONG",{});var Cxt=s(NTe);L3r=r(Cxt,"bart"),Cxt.forEach(t),y3r=r(Aqe," \u2014 "),qJ=n(Aqe,"A",{href:!0});var wxt=s(qJ);x3r=r(wxt,"TFBartForConditionalGeneration"),wxt.forEach(t),$3r=r(Aqe," (BART model)"),Aqe.forEach(t),k3r=i(Ne),p4=n(Ne,"LI",{});var Lqe=s(p4);ITe=n(Lqe,"STRONG",{});var Axt=s(ITe);S3r=r(Axt,"blenderbot"),Axt.forEach(t),R3r=r(Lqe," \u2014 "),jJ=n(Lqe,"A",{href:!0});var Lxt=s(jJ);P3r=r(Lxt,"TFBlenderbotForConditionalGeneration"),Lxt.forEach(t),B3r=r(Lqe," (Blenderbot model)"),Lqe.forEach(t),N3r=i(Ne),_4=n(Ne,"LI",{});var yqe=s(_4);qTe=n(yqe,"STRONG",{});var yxt=s(qTe);I3r=r(yxt,"blenderbot-small"),yxt.forEach(t),q3r=r(yqe," \u2014 "),DJ=n(yqe,"A",{href:!0});var xxt=s(DJ);j3r=r(xxt,"TFBlenderbotSmallForConditionalGeneration"),xxt.forEach(t),D3r=r(yqe," (BlenderbotSmall model)"),yqe.forEach(t),G3r=i(Ne),u4=n(Ne,"LI",{});var xqe=s(u4);jTe=n(xqe,"STRONG",{});var $xt=s(jTe);O3r=r($xt,"encoder-decoder"),$xt.forEach(t),V3r=r(xqe," \u2014 "),GJ=n(xqe,"A",{href:!0});var kxt=s(GJ);X3r=r(kxt,"TFEncoderDecoderModel"),kxt.forEach(t),z3r=r(xqe," (Encoder decoder model)"),xqe.forEach(t),Q3r=i(Ne),b4=n(Ne,"LI",{});var $qe=s(b4);DTe=n($qe,"STRONG",{});var Sxt=s(DTe);W3r=r(Sxt,"led"),Sxt.forEach(t),H3r=r($qe," \u2014 "),OJ=n($qe,"A",{href:!0});var Rxt=s(OJ);U3r=r(Rxt,"TFLEDForConditionalGeneration"),Rxt.forEach(t),J3r=r($qe," (LED model)"),$qe.forEach(t),Y3r=i(Ne),v4=n(Ne,"LI",{});var kqe=s(v4);GTe=n(kqe,"STRONG",{});var Pxt=s(GTe);K3r=r(Pxt,"marian"),Pxt.forEach(t),Z3r=r(kqe," \u2014 "),VJ=n(kqe,"A",{href:!0});var Bxt=s(VJ);e0r=r(Bxt,"TFMarianMTModel"),Bxt.forEach(t),o0r=r(kqe," (Marian model)"),kqe.forEach(t),r0r=i(Ne),F4=n(Ne,"LI",{});var Sqe=s(F4);OTe=n(Sqe,"STRONG",{});var Nxt=s(OTe);t0r=r(Nxt,"mbart"),Nxt.forEach(t),a0r=r(Sqe," \u2014 "),XJ=n(Sqe,"A",{href:!0});var Ixt=s(XJ);n0r=r(Ixt,"TFMBartForConditionalGeneration"),Ixt.forEach(t),s0r=r(Sqe," (mBART model)"),Sqe.forEach(t),l0r=i(Ne),T4=n(Ne,"LI",{});var Rqe=s(T4);VTe=n(Rqe,"STRONG",{});var qxt=s(VTe);i0r=r(qxt,"mt5"),qxt.forEach(t),d0r=r(Rqe," \u2014 "),zJ=n(Rqe,"A",{href:!0});var jxt=s(zJ);c0r=r(jxt,"TFMT5ForConditionalGeneration"),jxt.forEach(t),f0r=r(Rqe," (MT5 model)"),Rqe.forEach(t),m0r=i(Ne),M4=n(Ne,"LI",{});var Pqe=s(M4);XTe=n(Pqe,"STRONG",{});var Dxt=s(XTe);g0r=r(Dxt,"pegasus"),Dxt.forEach(t),h0r=r(Pqe," \u2014 "),QJ=n(Pqe,"A",{href:!0});var Gxt=s(QJ);p0r=r(Gxt,"TFPegasusForConditionalGeneration"),Gxt.forEach(t),_0r=r(Pqe," (Pegasus model)"),Pqe.forEach(t),u0r=i(Ne),E4=n(Ne,"LI",{});var Bqe=s(E4);zTe=n(Bqe,"STRONG",{});var Oxt=s(zTe);b0r=r(Oxt,"t5"),Oxt.forEach(t),v0r=r(Bqe," \u2014 "),WJ=n(Bqe,"A",{href:!0});var Vxt=s(WJ);F0r=r(Vxt,"TFT5ForConditionalGeneration"),Vxt.forEach(t),T0r=r(Bqe," (T5 model)"),Bqe.forEach(t),Ne.forEach(t),M0r=i(Bl),T(C4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),IVe=i(f),vc=n(f,"H2",{class:!0});var zze=s(vc);w4=n(zze,"A",{id:!0,class:!0,href:!0});var Xxt=s(w4);QTe=n(Xxt,"SPAN",{});var zxt=s(QTe);T(Z8.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),E0r=i(zze),WTe=n(zze,"SPAN",{});var Qxt=s(WTe);C0r=r(Qxt,"TFAutoModelForSequenceClassification"),Qxt.forEach(t),zze.forEach(t),qVe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(ex.$$.fragment,Nl),w0r=i(Nl),Fc=n(Nl,"P",{});var Xre=s(Fc);A0r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),HJ=n(Xre,"A",{href:!0});var Wxt=s(HJ);L0r=r(Wxt,"from_pretrained()"),Wxt.forEach(t),y0r=r(Xre," class method or the "),UJ=n(Xre,"A",{href:!0});var Hxt=s(UJ);x0r=r(Hxt,"from_config()"),Hxt.forEach(t),$0r=r(Xre,` class
method.`),Xre.forEach(t),k0r=i(Nl),ox=n(Nl,"P",{});var Qze=s(ox);S0r=r(Qze,"This class cannot be instantiated directly using "),HTe=n(Qze,"CODE",{});var Uxt=s(HTe);R0r=r(Uxt,"__init__()"),Uxt.forEach(t),P0r=r(Qze," (throws an error)."),Qze.forEach(t),B0r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var WA=s(Nt);T(rx.$$.fragment,WA),N0r=i(WA),UTe=n(WA,"P",{});var Jxt=s(UTe);I0r=r(Jxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jxt.forEach(t),q0r=i(WA),Tc=n(WA,"P",{});var zre=s(Tc);j0r=r(zre,`Note:
Loading a model from its configuration file does `),JTe=n(zre,"STRONG",{});var Yxt=s(JTe);D0r=r(Yxt,"not"),Yxt.forEach(t),G0r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(zre,"A",{href:!0});var Kxt=s(JJ);O0r=r(Kxt,"from_pretrained()"),Kxt.forEach(t),V0r=r(zre," to load the model weights."),zre.forEach(t),X0r=i(WA),T(A4.$$.fragment,WA),WA.forEach(t),z0r=i(Nl),Pr=n(Nl,"DIV",{class:!0});var Il=s(Pr);T(tx.$$.fragment,Il),Q0r=i(Il),YTe=n(Il,"P",{});var Zxt=s(YTe);W0r=r(Zxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zxt.forEach(t),H0r=i(Il),mn=n(Il,"P",{});var HA=s(mn);U0r=r(HA,"The model class to instantiate is selected based on the "),KTe=n(HA,"CODE",{});var e$t=s(KTe);J0r=r(e$t,"model_type"),e$t.forEach(t),Y0r=r(HA,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(HA,"CODE",{});var o$t=s(ZTe);K0r=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),Z0r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(HA,"CODE",{});var r$t=s(eMe);ewr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),owr=r(HA,":"),HA.forEach(t),rwr=i(Il),te=n(Il,"UL",{});var ne=s(te);L4=n(ne,"LI",{});var Nqe=s(L4);oMe=n(Nqe,"STRONG",{});var t$t=s(oMe);twr=r(t$t,"albert"),t$t.forEach(t),awr=r(Nqe," \u2014 "),YJ=n(Nqe,"A",{href:!0});var a$t=s(YJ);nwr=r(a$t,"TFAlbertForSequenceClassification"),a$t.forEach(t),swr=r(Nqe," (ALBERT model)"),Nqe.forEach(t),lwr=i(ne),y4=n(ne,"LI",{});var Iqe=s(y4);rMe=n(Iqe,"STRONG",{});var n$t=s(rMe);iwr=r(n$t,"bert"),n$t.forEach(t),dwr=r(Iqe," \u2014 "),KJ=n(Iqe,"A",{href:!0});var s$t=s(KJ);cwr=r(s$t,"TFBertForSequenceClassification"),s$t.forEach(t),fwr=r(Iqe," (BERT model)"),Iqe.forEach(t),mwr=i(ne),x4=n(ne,"LI",{});var qqe=s(x4);tMe=n(qqe,"STRONG",{});var l$t=s(tMe);gwr=r(l$t,"camembert"),l$t.forEach(t),hwr=r(qqe," \u2014 "),ZJ=n(qqe,"A",{href:!0});var i$t=s(ZJ);pwr=r(i$t,"TFCamembertForSequenceClassification"),i$t.forEach(t),_wr=r(qqe," (CamemBERT model)"),qqe.forEach(t),uwr=i(ne),$4=n(ne,"LI",{});var jqe=s($4);aMe=n(jqe,"STRONG",{});var d$t=s(aMe);bwr=r(d$t,"convbert"),d$t.forEach(t),vwr=r(jqe," \u2014 "),eY=n(jqe,"A",{href:!0});var c$t=s(eY);Fwr=r(c$t,"TFConvBertForSequenceClassification"),c$t.forEach(t),Twr=r(jqe," (ConvBERT model)"),jqe.forEach(t),Mwr=i(ne),k4=n(ne,"LI",{});var Dqe=s(k4);nMe=n(Dqe,"STRONG",{});var f$t=s(nMe);Ewr=r(f$t,"ctrl"),f$t.forEach(t),Cwr=r(Dqe," \u2014 "),oY=n(Dqe,"A",{href:!0});var m$t=s(oY);wwr=r(m$t,"TFCTRLForSequenceClassification"),m$t.forEach(t),Awr=r(Dqe," (CTRL model)"),Dqe.forEach(t),Lwr=i(ne),S4=n(ne,"LI",{});var Gqe=s(S4);sMe=n(Gqe,"STRONG",{});var g$t=s(sMe);ywr=r(g$t,"deberta"),g$t.forEach(t),xwr=r(Gqe," \u2014 "),rY=n(Gqe,"A",{href:!0});var h$t=s(rY);$wr=r(h$t,"TFDebertaForSequenceClassification"),h$t.forEach(t),kwr=r(Gqe," (DeBERTa model)"),Gqe.forEach(t),Swr=i(ne),R4=n(ne,"LI",{});var Oqe=s(R4);lMe=n(Oqe,"STRONG",{});var p$t=s(lMe);Rwr=r(p$t,"deberta-v2"),p$t.forEach(t),Pwr=r(Oqe," \u2014 "),tY=n(Oqe,"A",{href:!0});var _$t=s(tY);Bwr=r(_$t,"TFDebertaV2ForSequenceClassification"),_$t.forEach(t),Nwr=r(Oqe," (DeBERTa-v2 model)"),Oqe.forEach(t),Iwr=i(ne),P4=n(ne,"LI",{});var Vqe=s(P4);iMe=n(Vqe,"STRONG",{});var u$t=s(iMe);qwr=r(u$t,"distilbert"),u$t.forEach(t),jwr=r(Vqe," \u2014 "),aY=n(Vqe,"A",{href:!0});var b$t=s(aY);Dwr=r(b$t,"TFDistilBertForSequenceClassification"),b$t.forEach(t),Gwr=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),Owr=i(ne),B4=n(ne,"LI",{});var Xqe=s(B4);dMe=n(Xqe,"STRONG",{});var v$t=s(dMe);Vwr=r(v$t,"electra"),v$t.forEach(t),Xwr=r(Xqe," \u2014 "),nY=n(Xqe,"A",{href:!0});var F$t=s(nY);zwr=r(F$t,"TFElectraForSequenceClassification"),F$t.forEach(t),Qwr=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),Wwr=i(ne),N4=n(ne,"LI",{});var zqe=s(N4);cMe=n(zqe,"STRONG",{});var T$t=s(cMe);Hwr=r(T$t,"flaubert"),T$t.forEach(t),Uwr=r(zqe," \u2014 "),sY=n(zqe,"A",{href:!0});var M$t=s(sY);Jwr=r(M$t,"TFFlaubertForSequenceClassification"),M$t.forEach(t),Ywr=r(zqe," (FlauBERT model)"),zqe.forEach(t),Kwr=i(ne),I4=n(ne,"LI",{});var Qqe=s(I4);fMe=n(Qqe,"STRONG",{});var E$t=s(fMe);Zwr=r(E$t,"funnel"),E$t.forEach(t),eAr=r(Qqe," \u2014 "),lY=n(Qqe,"A",{href:!0});var C$t=s(lY);oAr=r(C$t,"TFFunnelForSequenceClassification"),C$t.forEach(t),rAr=r(Qqe," (Funnel Transformer model)"),Qqe.forEach(t),tAr=i(ne),q4=n(ne,"LI",{});var Wqe=s(q4);mMe=n(Wqe,"STRONG",{});var w$t=s(mMe);aAr=r(w$t,"gpt2"),w$t.forEach(t),nAr=r(Wqe," \u2014 "),iY=n(Wqe,"A",{href:!0});var A$t=s(iY);sAr=r(A$t,"TFGPT2ForSequenceClassification"),A$t.forEach(t),lAr=r(Wqe," (OpenAI GPT-2 model)"),Wqe.forEach(t),iAr=i(ne),j4=n(ne,"LI",{});var Hqe=s(j4);gMe=n(Hqe,"STRONG",{});var L$t=s(gMe);dAr=r(L$t,"gptj"),L$t.forEach(t),cAr=r(Hqe," \u2014 "),dY=n(Hqe,"A",{href:!0});var y$t=s(dY);fAr=r(y$t,"TFGPTJForSequenceClassification"),y$t.forEach(t),mAr=r(Hqe," (GPT-J model)"),Hqe.forEach(t),gAr=i(ne),D4=n(ne,"LI",{});var Uqe=s(D4);hMe=n(Uqe,"STRONG",{});var x$t=s(hMe);hAr=r(x$t,"layoutlm"),x$t.forEach(t),pAr=r(Uqe," \u2014 "),cY=n(Uqe,"A",{href:!0});var $$t=s(cY);_Ar=r($$t,"TFLayoutLMForSequenceClassification"),$$t.forEach(t),uAr=r(Uqe," (LayoutLM model)"),Uqe.forEach(t),bAr=i(ne),G4=n(ne,"LI",{});var Jqe=s(G4);pMe=n(Jqe,"STRONG",{});var k$t=s(pMe);vAr=r(k$t,"longformer"),k$t.forEach(t),FAr=r(Jqe," \u2014 "),fY=n(Jqe,"A",{href:!0});var S$t=s(fY);TAr=r(S$t,"TFLongformerForSequenceClassification"),S$t.forEach(t),MAr=r(Jqe," (Longformer model)"),Jqe.forEach(t),EAr=i(ne),O4=n(ne,"LI",{});var Yqe=s(O4);_Me=n(Yqe,"STRONG",{});var R$t=s(_Me);CAr=r(R$t,"mobilebert"),R$t.forEach(t),wAr=r(Yqe," \u2014 "),mY=n(Yqe,"A",{href:!0});var P$t=s(mY);AAr=r(P$t,"TFMobileBertForSequenceClassification"),P$t.forEach(t),LAr=r(Yqe," (MobileBERT model)"),Yqe.forEach(t),yAr=i(ne),V4=n(ne,"LI",{});var Kqe=s(V4);uMe=n(Kqe,"STRONG",{});var B$t=s(uMe);xAr=r(B$t,"mpnet"),B$t.forEach(t),$Ar=r(Kqe," \u2014 "),gY=n(Kqe,"A",{href:!0});var N$t=s(gY);kAr=r(N$t,"TFMPNetForSequenceClassification"),N$t.forEach(t),SAr=r(Kqe," (MPNet model)"),Kqe.forEach(t),RAr=i(ne),X4=n(ne,"LI",{});var Zqe=s(X4);bMe=n(Zqe,"STRONG",{});var I$t=s(bMe);PAr=r(I$t,"openai-gpt"),I$t.forEach(t),BAr=r(Zqe," \u2014 "),hY=n(Zqe,"A",{href:!0});var q$t=s(hY);NAr=r(q$t,"TFOpenAIGPTForSequenceClassification"),q$t.forEach(t),IAr=r(Zqe," (OpenAI GPT model)"),Zqe.forEach(t),qAr=i(ne),z4=n(ne,"LI",{});var eje=s(z4);vMe=n(eje,"STRONG",{});var j$t=s(vMe);jAr=r(j$t,"rembert"),j$t.forEach(t),DAr=r(eje," \u2014 "),pY=n(eje,"A",{href:!0});var D$t=s(pY);GAr=r(D$t,"TFRemBertForSequenceClassification"),D$t.forEach(t),OAr=r(eje," (RemBERT model)"),eje.forEach(t),VAr=i(ne),Q4=n(ne,"LI",{});var oje=s(Q4);FMe=n(oje,"STRONG",{});var G$t=s(FMe);XAr=r(G$t,"roberta"),G$t.forEach(t),zAr=r(oje," \u2014 "),_Y=n(oje,"A",{href:!0});var O$t=s(_Y);QAr=r(O$t,"TFRobertaForSequenceClassification"),O$t.forEach(t),WAr=r(oje," (RoBERTa model)"),oje.forEach(t),HAr=i(ne),W4=n(ne,"LI",{});var rje=s(W4);TMe=n(rje,"STRONG",{});var V$t=s(TMe);UAr=r(V$t,"roformer"),V$t.forEach(t),JAr=r(rje," \u2014 "),uY=n(rje,"A",{href:!0});var X$t=s(uY);YAr=r(X$t,"TFRoFormerForSequenceClassification"),X$t.forEach(t),KAr=r(rje," (RoFormer model)"),rje.forEach(t),ZAr=i(ne),H4=n(ne,"LI",{});var tje=s(H4);MMe=n(tje,"STRONG",{});var z$t=s(MMe);e6r=r(z$t,"tapas"),z$t.forEach(t),o6r=r(tje," \u2014 "),bY=n(tje,"A",{href:!0});var Q$t=s(bY);r6r=r(Q$t,"TFTapasForSequenceClassification"),Q$t.forEach(t),t6r=r(tje," (TAPAS model)"),tje.forEach(t),a6r=i(ne),U4=n(ne,"LI",{});var aje=s(U4);EMe=n(aje,"STRONG",{});var W$t=s(EMe);n6r=r(W$t,"transfo-xl"),W$t.forEach(t),s6r=r(aje," \u2014 "),vY=n(aje,"A",{href:!0});var H$t=s(vY);l6r=r(H$t,"TFTransfoXLForSequenceClassification"),H$t.forEach(t),i6r=r(aje," (Transformer-XL model)"),aje.forEach(t),d6r=i(ne),J4=n(ne,"LI",{});var nje=s(J4);CMe=n(nje,"STRONG",{});var U$t=s(CMe);c6r=r(U$t,"xlm"),U$t.forEach(t),f6r=r(nje," \u2014 "),FY=n(nje,"A",{href:!0});var J$t=s(FY);m6r=r(J$t,"TFXLMForSequenceClassification"),J$t.forEach(t),g6r=r(nje," (XLM model)"),nje.forEach(t),h6r=i(ne),Y4=n(ne,"LI",{});var sje=s(Y4);wMe=n(sje,"STRONG",{});var Y$t=s(wMe);p6r=r(Y$t,"xlm-roberta"),Y$t.forEach(t),_6r=r(sje," \u2014 "),TY=n(sje,"A",{href:!0});var K$t=s(TY);u6r=r(K$t,"TFXLMRobertaForSequenceClassification"),K$t.forEach(t),b6r=r(sje," (XLM-RoBERTa model)"),sje.forEach(t),v6r=i(ne),K4=n(ne,"LI",{});var lje=s(K4);AMe=n(lje,"STRONG",{});var Z$t=s(AMe);F6r=r(Z$t,"xlnet"),Z$t.forEach(t),T6r=r(lje," \u2014 "),MY=n(lje,"A",{href:!0});var ekt=s(MY);M6r=r(ekt,"TFXLNetForSequenceClassification"),ekt.forEach(t),E6r=r(lje," (XLNet model)"),lje.forEach(t),ne.forEach(t),C6r=i(Il),T(Z4.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),jVe=i(f),Mc=n(f,"H2",{class:!0});var Wze=s(Mc);eC=n(Wze,"A",{id:!0,class:!0,href:!0});var okt=s(eC);LMe=n(okt,"SPAN",{});var rkt=s(LMe);T(ax.$$.fragment,rkt),rkt.forEach(t),okt.forEach(t),w6r=i(Wze),yMe=n(Wze,"SPAN",{});var tkt=s(yMe);A6r=r(tkt,"TFAutoModelForMultipleChoice"),tkt.forEach(t),Wze.forEach(t),DVe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(nx.$$.fragment,ql),L6r=i(ql),Ec=n(ql,"P",{});var Qre=s(Ec);y6r=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EY=n(Qre,"A",{href:!0});var akt=s(EY);x6r=r(akt,"from_pretrained()"),akt.forEach(t),$6r=r(Qre," class method or the "),CY=n(Qre,"A",{href:!0});var nkt=s(CY);k6r=r(nkt,"from_config()"),nkt.forEach(t),S6r=r(Qre,` class
method.`),Qre.forEach(t),R6r=i(ql),sx=n(ql,"P",{});var Hze=s(sx);P6r=r(Hze,"This class cannot be instantiated directly using "),xMe=n(Hze,"CODE",{});var skt=s(xMe);B6r=r(skt,"__init__()"),skt.forEach(t),N6r=r(Hze," (throws an error)."),Hze.forEach(t),I6r=i(ql),It=n(ql,"DIV",{class:!0});var UA=s(It);T(lx.$$.fragment,UA),q6r=i(UA),$Me=n(UA,"P",{});var lkt=s($Me);j6r=r(lkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lkt.forEach(t),D6r=i(UA),Cc=n(UA,"P",{});var Wre=s(Cc);G6r=r(Wre,`Note:
Loading a model from its configuration file does `),kMe=n(Wre,"STRONG",{});var ikt=s(kMe);O6r=r(ikt,"not"),ikt.forEach(t),V6r=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(Wre,"A",{href:!0});var dkt=s(wY);X6r=r(dkt,"from_pretrained()"),dkt.forEach(t),z6r=r(Wre," to load the model weights."),Wre.forEach(t),Q6r=i(UA),T(oC.$$.fragment,UA),UA.forEach(t),W6r=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(ix.$$.fragment,jl),H6r=i(jl),SMe=n(jl,"P",{});var ckt=s(SMe);U6r=r(ckt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ckt.forEach(t),J6r=i(jl),gn=n(jl,"P",{});var JA=s(gn);Y6r=r(JA,"The model class to instantiate is selected based on the "),RMe=n(JA,"CODE",{});var fkt=s(RMe);K6r=r(fkt,"model_type"),fkt.forEach(t),Z6r=r(JA,` property of the config object (either
passed as an argument or loaded from `),PMe=n(JA,"CODE",{});var mkt=s(PMe);eLr=r(mkt,"pretrained_model_name_or_path"),mkt.forEach(t),oLr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(JA,"CODE",{});var gkt=s(BMe);rLr=r(gkt,"pretrained_model_name_or_path"),gkt.forEach(t),tLr=r(JA,":"),JA.forEach(t),aLr=i(jl),_e=n(jl,"UL",{});var Fe=s(_e);rC=n(Fe,"LI",{});var ije=s(rC);NMe=n(ije,"STRONG",{});var hkt=s(NMe);nLr=r(hkt,"albert"),hkt.forEach(t),sLr=r(ije," \u2014 "),AY=n(ije,"A",{href:!0});var pkt=s(AY);lLr=r(pkt,"TFAlbertForMultipleChoice"),pkt.forEach(t),iLr=r(ije," (ALBERT model)"),ije.forEach(t),dLr=i(Fe),tC=n(Fe,"LI",{});var dje=s(tC);IMe=n(dje,"STRONG",{});var _kt=s(IMe);cLr=r(_kt,"bert"),_kt.forEach(t),fLr=r(dje," \u2014 "),LY=n(dje,"A",{href:!0});var ukt=s(LY);mLr=r(ukt,"TFBertForMultipleChoice"),ukt.forEach(t),gLr=r(dje," (BERT model)"),dje.forEach(t),hLr=i(Fe),aC=n(Fe,"LI",{});var cje=s(aC);qMe=n(cje,"STRONG",{});var bkt=s(qMe);pLr=r(bkt,"camembert"),bkt.forEach(t),_Lr=r(cje," \u2014 "),yY=n(cje,"A",{href:!0});var vkt=s(yY);uLr=r(vkt,"TFCamembertForMultipleChoice"),vkt.forEach(t),bLr=r(cje," (CamemBERT model)"),cje.forEach(t),vLr=i(Fe),nC=n(Fe,"LI",{});var fje=s(nC);jMe=n(fje,"STRONG",{});var Fkt=s(jMe);FLr=r(Fkt,"convbert"),Fkt.forEach(t),TLr=r(fje," \u2014 "),xY=n(fje,"A",{href:!0});var Tkt=s(xY);MLr=r(Tkt,"TFConvBertForMultipleChoice"),Tkt.forEach(t),ELr=r(fje," (ConvBERT model)"),fje.forEach(t),CLr=i(Fe),sC=n(Fe,"LI",{});var mje=s(sC);DMe=n(mje,"STRONG",{});var Mkt=s(DMe);wLr=r(Mkt,"distilbert"),Mkt.forEach(t),ALr=r(mje," \u2014 "),$Y=n(mje,"A",{href:!0});var Ekt=s($Y);LLr=r(Ekt,"TFDistilBertForMultipleChoice"),Ekt.forEach(t),yLr=r(mje," (DistilBERT model)"),mje.forEach(t),xLr=i(Fe),lC=n(Fe,"LI",{});var gje=s(lC);GMe=n(gje,"STRONG",{});var Ckt=s(GMe);$Lr=r(Ckt,"electra"),Ckt.forEach(t),kLr=r(gje," \u2014 "),kY=n(gje,"A",{href:!0});var wkt=s(kY);SLr=r(wkt,"TFElectraForMultipleChoice"),wkt.forEach(t),RLr=r(gje," (ELECTRA model)"),gje.forEach(t),PLr=i(Fe),iC=n(Fe,"LI",{});var hje=s(iC);OMe=n(hje,"STRONG",{});var Akt=s(OMe);BLr=r(Akt,"flaubert"),Akt.forEach(t),NLr=r(hje," \u2014 "),SY=n(hje,"A",{href:!0});var Lkt=s(SY);ILr=r(Lkt,"TFFlaubertForMultipleChoice"),Lkt.forEach(t),qLr=r(hje," (FlauBERT model)"),hje.forEach(t),jLr=i(Fe),dC=n(Fe,"LI",{});var pje=s(dC);VMe=n(pje,"STRONG",{});var ykt=s(VMe);DLr=r(ykt,"funnel"),ykt.forEach(t),GLr=r(pje," \u2014 "),RY=n(pje,"A",{href:!0});var xkt=s(RY);OLr=r(xkt,"TFFunnelForMultipleChoice"),xkt.forEach(t),VLr=r(pje," (Funnel Transformer model)"),pje.forEach(t),XLr=i(Fe),cC=n(Fe,"LI",{});var _je=s(cC);XMe=n(_je,"STRONG",{});var $kt=s(XMe);zLr=r($kt,"longformer"),$kt.forEach(t),QLr=r(_je," \u2014 "),PY=n(_je,"A",{href:!0});var kkt=s(PY);WLr=r(kkt,"TFLongformerForMultipleChoice"),kkt.forEach(t),HLr=r(_je," (Longformer model)"),_je.forEach(t),ULr=i(Fe),fC=n(Fe,"LI",{});var uje=s(fC);zMe=n(uje,"STRONG",{});var Skt=s(zMe);JLr=r(Skt,"mobilebert"),Skt.forEach(t),YLr=r(uje," \u2014 "),BY=n(uje,"A",{href:!0});var Rkt=s(BY);KLr=r(Rkt,"TFMobileBertForMultipleChoice"),Rkt.forEach(t),ZLr=r(uje," (MobileBERT model)"),uje.forEach(t),eyr=i(Fe),mC=n(Fe,"LI",{});var bje=s(mC);QMe=n(bje,"STRONG",{});var Pkt=s(QMe);oyr=r(Pkt,"mpnet"),Pkt.forEach(t),ryr=r(bje," \u2014 "),NY=n(bje,"A",{href:!0});var Bkt=s(NY);tyr=r(Bkt,"TFMPNetForMultipleChoice"),Bkt.forEach(t),ayr=r(bje," (MPNet model)"),bje.forEach(t),nyr=i(Fe),gC=n(Fe,"LI",{});var vje=s(gC);WMe=n(vje,"STRONG",{});var Nkt=s(WMe);syr=r(Nkt,"rembert"),Nkt.forEach(t),lyr=r(vje," \u2014 "),IY=n(vje,"A",{href:!0});var Ikt=s(IY);iyr=r(Ikt,"TFRemBertForMultipleChoice"),Ikt.forEach(t),dyr=r(vje," (RemBERT model)"),vje.forEach(t),cyr=i(Fe),hC=n(Fe,"LI",{});var Fje=s(hC);HMe=n(Fje,"STRONG",{});var qkt=s(HMe);fyr=r(qkt,"roberta"),qkt.forEach(t),myr=r(Fje," \u2014 "),qY=n(Fje,"A",{href:!0});var jkt=s(qY);gyr=r(jkt,"TFRobertaForMultipleChoice"),jkt.forEach(t),hyr=r(Fje," (RoBERTa model)"),Fje.forEach(t),pyr=i(Fe),pC=n(Fe,"LI",{});var Tje=s(pC);UMe=n(Tje,"STRONG",{});var Dkt=s(UMe);_yr=r(Dkt,"roformer"),Dkt.forEach(t),uyr=r(Tje," \u2014 "),jY=n(Tje,"A",{href:!0});var Gkt=s(jY);byr=r(Gkt,"TFRoFormerForMultipleChoice"),Gkt.forEach(t),vyr=r(Tje," (RoFormer model)"),Tje.forEach(t),Fyr=i(Fe),_C=n(Fe,"LI",{});var Mje=s(_C);JMe=n(Mje,"STRONG",{});var Okt=s(JMe);Tyr=r(Okt,"xlm"),Okt.forEach(t),Myr=r(Mje," \u2014 "),DY=n(Mje,"A",{href:!0});var Vkt=s(DY);Eyr=r(Vkt,"TFXLMForMultipleChoice"),Vkt.forEach(t),Cyr=r(Mje," (XLM model)"),Mje.forEach(t),wyr=i(Fe),uC=n(Fe,"LI",{});var Eje=s(uC);YMe=n(Eje,"STRONG",{});var Xkt=s(YMe);Ayr=r(Xkt,"xlm-roberta"),Xkt.forEach(t),Lyr=r(Eje," \u2014 "),GY=n(Eje,"A",{href:!0});var zkt=s(GY);yyr=r(zkt,"TFXLMRobertaForMultipleChoice"),zkt.forEach(t),xyr=r(Eje," (XLM-RoBERTa model)"),Eje.forEach(t),$yr=i(Fe),bC=n(Fe,"LI",{});var Cje=s(bC);KMe=n(Cje,"STRONG",{});var Qkt=s(KMe);kyr=r(Qkt,"xlnet"),Qkt.forEach(t),Syr=r(Cje," \u2014 "),OY=n(Cje,"A",{href:!0});var Wkt=s(OY);Ryr=r(Wkt,"TFXLNetForMultipleChoice"),Wkt.forEach(t),Pyr=r(Cje," (XLNet model)"),Cje.forEach(t),Fe.forEach(t),Byr=i(jl),T(vC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),GVe=i(f),wc=n(f,"H2",{class:!0});var Uze=s(wc);FC=n(Uze,"A",{id:!0,class:!0,href:!0});var Hkt=s(FC);ZMe=n(Hkt,"SPAN",{});var Ukt=s(ZMe);T(dx.$$.fragment,Ukt),Ukt.forEach(t),Hkt.forEach(t),Nyr=i(Uze),eEe=n(Uze,"SPAN",{});var Jkt=s(eEe);Iyr=r(Jkt,"TFAutoModelForNextSentencePrediction"),Jkt.forEach(t),Uze.forEach(t),OVe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(cx.$$.fragment,Dl),qyr=i(Dl),Ac=n(Dl,"P",{});var Hre=s(Ac);jyr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VY=n(Hre,"A",{href:!0});var Ykt=s(VY);Dyr=r(Ykt,"from_pretrained()"),Ykt.forEach(t),Gyr=r(Hre," class method or the "),XY=n(Hre,"A",{href:!0});var Kkt=s(XY);Oyr=r(Kkt,"from_config()"),Kkt.forEach(t),Vyr=r(Hre,` class
method.`),Hre.forEach(t),Xyr=i(Dl),fx=n(Dl,"P",{});var Jze=s(fx);zyr=r(Jze,"This class cannot be instantiated directly using "),oEe=n(Jze,"CODE",{});var Zkt=s(oEe);Qyr=r(Zkt,"__init__()"),Zkt.forEach(t),Wyr=r(Jze," (throws an error)."),Jze.forEach(t),Hyr=i(Dl),qt=n(Dl,"DIV",{class:!0});var YA=s(qt);T(mx.$$.fragment,YA),Uyr=i(YA),rEe=n(YA,"P",{});var eSt=s(rEe);Jyr=r(eSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eSt.forEach(t),Yyr=i(YA),Lc=n(YA,"P",{});var Ure=s(Lc);Kyr=r(Ure,`Note:
Loading a model from its configuration file does `),tEe=n(Ure,"STRONG",{});var oSt=s(tEe);Zyr=r(oSt,"not"),oSt.forEach(t),e8r=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(Ure,"A",{href:!0});var rSt=s(zY);o8r=r(rSt,"from_pretrained()"),rSt.forEach(t),r8r=r(Ure," to load the model weights."),Ure.forEach(t),t8r=i(YA),T(TC.$$.fragment,YA),YA.forEach(t),a8r=i(Dl),Nr=n(Dl,"DIV",{class:!0});var Gl=s(Nr);T(gx.$$.fragment,Gl),n8r=i(Gl),aEe=n(Gl,"P",{});var tSt=s(aEe);s8r=r(tSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tSt.forEach(t),l8r=i(Gl),hn=n(Gl,"P",{});var KA=s(hn);i8r=r(KA,"The model class to instantiate is selected based on the "),nEe=n(KA,"CODE",{});var aSt=s(nEe);d8r=r(aSt,"model_type"),aSt.forEach(t),c8r=r(KA,` property of the config object (either
passed as an argument or loaded from `),sEe=n(KA,"CODE",{});var nSt=s(sEe);f8r=r(nSt,"pretrained_model_name_or_path"),nSt.forEach(t),m8r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=n(KA,"CODE",{});var sSt=s(lEe);g8r=r(sSt,"pretrained_model_name_or_path"),sSt.forEach(t),h8r=r(KA,":"),KA.forEach(t),p8r=i(Gl),hx=n(Gl,"UL",{});var Yze=s(hx);MC=n(Yze,"LI",{});var wje=s(MC);iEe=n(wje,"STRONG",{});var lSt=s(iEe);_8r=r(lSt,"bert"),lSt.forEach(t),u8r=r(wje," \u2014 "),QY=n(wje,"A",{href:!0});var iSt=s(QY);b8r=r(iSt,"TFBertForNextSentencePrediction"),iSt.forEach(t),v8r=r(wje," (BERT model)"),wje.forEach(t),F8r=i(Yze),EC=n(Yze,"LI",{});var Aje=s(EC);dEe=n(Aje,"STRONG",{});var dSt=s(dEe);T8r=r(dSt,"mobilebert"),dSt.forEach(t),M8r=r(Aje," \u2014 "),WY=n(Aje,"A",{href:!0});var cSt=s(WY);E8r=r(cSt,"TFMobileBertForNextSentencePrediction"),cSt.forEach(t),C8r=r(Aje," (MobileBERT model)"),Aje.forEach(t),Yze.forEach(t),w8r=i(Gl),T(CC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),VVe=i(f),yc=n(f,"H2",{class:!0});var Kze=s(yc);wC=n(Kze,"A",{id:!0,class:!0,href:!0});var fSt=s(wC);cEe=n(fSt,"SPAN",{});var mSt=s(cEe);T(px.$$.fragment,mSt),mSt.forEach(t),fSt.forEach(t),A8r=i(Kze),fEe=n(Kze,"SPAN",{});var gSt=s(fEe);L8r=r(gSt,"TFAutoModelForTableQuestionAnswering"),gSt.forEach(t),Kze.forEach(t),XVe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(_x.$$.fragment,Ol),y8r=i(Ol),xc=n(Ol,"P",{});var Jre=s(xc);x8r=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),HY=n(Jre,"A",{href:!0});var hSt=s(HY);$8r=r(hSt,"from_pretrained()"),hSt.forEach(t),k8r=r(Jre," class method or the "),UY=n(Jre,"A",{href:!0});var pSt=s(UY);S8r=r(pSt,"from_config()"),pSt.forEach(t),R8r=r(Jre,` class
method.`),Jre.forEach(t),P8r=i(Ol),ux=n(Ol,"P",{});var Zze=s(ux);B8r=r(Zze,"This class cannot be instantiated directly using "),mEe=n(Zze,"CODE",{});var _St=s(mEe);N8r=r(_St,"__init__()"),_St.forEach(t),I8r=r(Zze," (throws an error)."),Zze.forEach(t),q8r=i(Ol),jt=n(Ol,"DIV",{class:!0});var ZA=s(jt);T(bx.$$.fragment,ZA),j8r=i(ZA),gEe=n(ZA,"P",{});var uSt=s(gEe);D8r=r(uSt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uSt.forEach(t),G8r=i(ZA),$c=n(ZA,"P",{});var Yre=s($c);O8r=r(Yre,`Note:
Loading a model from its configuration file does `),hEe=n(Yre,"STRONG",{});var bSt=s(hEe);V8r=r(bSt,"not"),bSt.forEach(t),X8r=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Yre,"A",{href:!0});var vSt=s(JY);z8r=r(vSt,"from_pretrained()"),vSt.forEach(t),Q8r=r(Yre," to load the model weights."),Yre.forEach(t),W8r=i(ZA),T(AC.$$.fragment,ZA),ZA.forEach(t),H8r=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(vx.$$.fragment,Vl),U8r=i(Vl),pEe=n(Vl,"P",{});var FSt=s(pEe);J8r=r(FSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FSt.forEach(t),Y8r=i(Vl),pn=n(Vl,"P",{});var e6=s(pn);K8r=r(e6,"The model class to instantiate is selected based on the "),_Ee=n(e6,"CODE",{});var TSt=s(_Ee);Z8r=r(TSt,"model_type"),TSt.forEach(t),exr=r(e6,` property of the config object (either
passed as an argument or loaded from `),uEe=n(e6,"CODE",{});var MSt=s(uEe);oxr=r(MSt,"pretrained_model_name_or_path"),MSt.forEach(t),rxr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=n(e6,"CODE",{});var ESt=s(bEe);txr=r(ESt,"pretrained_model_name_or_path"),ESt.forEach(t),axr=r(e6,":"),e6.forEach(t),nxr=i(Vl),vEe=n(Vl,"UL",{});var CSt=s(vEe);LC=n(CSt,"LI",{});var Lje=s(LC);FEe=n(Lje,"STRONG",{});var wSt=s(FEe);sxr=r(wSt,"tapas"),wSt.forEach(t),lxr=r(Lje," \u2014 "),YY=n(Lje,"A",{href:!0});var ASt=s(YY);ixr=r(ASt,"TFTapasForQuestionAnswering"),ASt.forEach(t),dxr=r(Lje," (TAPAS model)"),Lje.forEach(t),CSt.forEach(t),cxr=i(Vl),T(yC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),zVe=i(f),kc=n(f,"H2",{class:!0});var eQe=s(kc);xC=n(eQe,"A",{id:!0,class:!0,href:!0});var LSt=s(xC);TEe=n(LSt,"SPAN",{});var ySt=s(TEe);T(Fx.$$.fragment,ySt),ySt.forEach(t),LSt.forEach(t),fxr=i(eQe),MEe=n(eQe,"SPAN",{});var xSt=s(MEe);mxr=r(xSt,"TFAutoModelForTokenClassification"),xSt.forEach(t),eQe.forEach(t),QVe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(Tx.$$.fragment,Xl),gxr=i(Xl),Sc=n(Xl,"P",{});var Kre=s(Sc);hxr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KY=n(Kre,"A",{href:!0});var $St=s(KY);pxr=r($St,"from_pretrained()"),$St.forEach(t),_xr=r(Kre," class method or the "),ZY=n(Kre,"A",{href:!0});var kSt=s(ZY);uxr=r(kSt,"from_config()"),kSt.forEach(t),bxr=r(Kre,` class
method.`),Kre.forEach(t),vxr=i(Xl),Mx=n(Xl,"P",{});var oQe=s(Mx);Fxr=r(oQe,"This class cannot be instantiated directly using "),EEe=n(oQe,"CODE",{});var SSt=s(EEe);Txr=r(SSt,"__init__()"),SSt.forEach(t),Mxr=r(oQe," (throws an error)."),oQe.forEach(t),Exr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var o6=s(Dt);T(Ex.$$.fragment,o6),Cxr=i(o6),CEe=n(o6,"P",{});var RSt=s(CEe);wxr=r(RSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RSt.forEach(t),Axr=i(o6),Rc=n(o6,"P",{});var Zre=s(Rc);Lxr=r(Zre,`Note:
Loading a model from its configuration file does `),wEe=n(Zre,"STRONG",{});var PSt=s(wEe);yxr=r(PSt,"not"),PSt.forEach(t),xxr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Zre,"A",{href:!0});var BSt=s(eK);$xr=r(BSt,"from_pretrained()"),BSt.forEach(t),kxr=r(Zre," to load the model weights."),Zre.forEach(t),Sxr=i(o6),T($C.$$.fragment,o6),o6.forEach(t),Rxr=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(Cx.$$.fragment,zl),Pxr=i(zl),AEe=n(zl,"P",{});var NSt=s(AEe);Bxr=r(NSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NSt.forEach(t),Nxr=i(zl),_n=n(zl,"P",{});var r6=s(_n);Ixr=r(r6,"The model class to instantiate is selected based on the "),LEe=n(r6,"CODE",{});var ISt=s(LEe);qxr=r(ISt,"model_type"),ISt.forEach(t),jxr=r(r6,` property of the config object (either
passed as an argument or loaded from `),yEe=n(r6,"CODE",{});var qSt=s(yEe);Dxr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),Gxr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=n(r6,"CODE",{});var jSt=s(xEe);Oxr=r(jSt,"pretrained_model_name_or_path"),jSt.forEach(t),Vxr=r(r6,":"),r6.forEach(t),Xxr=i(zl),de=n(zl,"UL",{});var me=s(de);kC=n(me,"LI",{});var yje=s(kC);$Ee=n(yje,"STRONG",{});var DSt=s($Ee);zxr=r(DSt,"albert"),DSt.forEach(t),Qxr=r(yje," \u2014 "),oK=n(yje,"A",{href:!0});var GSt=s(oK);Wxr=r(GSt,"TFAlbertForTokenClassification"),GSt.forEach(t),Hxr=r(yje," (ALBERT model)"),yje.forEach(t),Uxr=i(me),SC=n(me,"LI",{});var xje=s(SC);kEe=n(xje,"STRONG",{});var OSt=s(kEe);Jxr=r(OSt,"bert"),OSt.forEach(t),Yxr=r(xje," \u2014 "),rK=n(xje,"A",{href:!0});var VSt=s(rK);Kxr=r(VSt,"TFBertForTokenClassification"),VSt.forEach(t),Zxr=r(xje," (BERT model)"),xje.forEach(t),e$r=i(me),RC=n(me,"LI",{});var $je=s(RC);SEe=n($je,"STRONG",{});var XSt=s(SEe);o$r=r(XSt,"camembert"),XSt.forEach(t),r$r=r($je," \u2014 "),tK=n($je,"A",{href:!0});var zSt=s(tK);t$r=r(zSt,"TFCamembertForTokenClassification"),zSt.forEach(t),a$r=r($je," (CamemBERT model)"),$je.forEach(t),n$r=i(me),PC=n(me,"LI",{});var kje=s(PC);REe=n(kje,"STRONG",{});var QSt=s(REe);s$r=r(QSt,"convbert"),QSt.forEach(t),l$r=r(kje," \u2014 "),aK=n(kje,"A",{href:!0});var WSt=s(aK);i$r=r(WSt,"TFConvBertForTokenClassification"),WSt.forEach(t),d$r=r(kje," (ConvBERT model)"),kje.forEach(t),c$r=i(me),BC=n(me,"LI",{});var Sje=s(BC);PEe=n(Sje,"STRONG",{});var HSt=s(PEe);f$r=r(HSt,"deberta"),HSt.forEach(t),m$r=r(Sje," \u2014 "),nK=n(Sje,"A",{href:!0});var USt=s(nK);g$r=r(USt,"TFDebertaForTokenClassification"),USt.forEach(t),h$r=r(Sje," (DeBERTa model)"),Sje.forEach(t),p$r=i(me),NC=n(me,"LI",{});var Rje=s(NC);BEe=n(Rje,"STRONG",{});var JSt=s(BEe);_$r=r(JSt,"deberta-v2"),JSt.forEach(t),u$r=r(Rje," \u2014 "),sK=n(Rje,"A",{href:!0});var YSt=s(sK);b$r=r(YSt,"TFDebertaV2ForTokenClassification"),YSt.forEach(t),v$r=r(Rje," (DeBERTa-v2 model)"),Rje.forEach(t),F$r=i(me),IC=n(me,"LI",{});var Pje=s(IC);NEe=n(Pje,"STRONG",{});var KSt=s(NEe);T$r=r(KSt,"distilbert"),KSt.forEach(t),M$r=r(Pje," \u2014 "),lK=n(Pje,"A",{href:!0});var ZSt=s(lK);E$r=r(ZSt,"TFDistilBertForTokenClassification"),ZSt.forEach(t),C$r=r(Pje," (DistilBERT model)"),Pje.forEach(t),w$r=i(me),qC=n(me,"LI",{});var Bje=s(qC);IEe=n(Bje,"STRONG",{});var eRt=s(IEe);A$r=r(eRt,"electra"),eRt.forEach(t),L$r=r(Bje," \u2014 "),iK=n(Bje,"A",{href:!0});var oRt=s(iK);y$r=r(oRt,"TFElectraForTokenClassification"),oRt.forEach(t),x$r=r(Bje," (ELECTRA model)"),Bje.forEach(t),$$r=i(me),jC=n(me,"LI",{});var Nje=s(jC);qEe=n(Nje,"STRONG",{});var rRt=s(qEe);k$r=r(rRt,"flaubert"),rRt.forEach(t),S$r=r(Nje," \u2014 "),dK=n(Nje,"A",{href:!0});var tRt=s(dK);R$r=r(tRt,"TFFlaubertForTokenClassification"),tRt.forEach(t),P$r=r(Nje," (FlauBERT model)"),Nje.forEach(t),B$r=i(me),DC=n(me,"LI",{});var Ije=s(DC);jEe=n(Ije,"STRONG",{});var aRt=s(jEe);N$r=r(aRt,"funnel"),aRt.forEach(t),I$r=r(Ije," \u2014 "),cK=n(Ije,"A",{href:!0});var nRt=s(cK);q$r=r(nRt,"TFFunnelForTokenClassification"),nRt.forEach(t),j$r=r(Ije," (Funnel Transformer model)"),Ije.forEach(t),D$r=i(me),GC=n(me,"LI",{});var qje=s(GC);DEe=n(qje,"STRONG",{});var sRt=s(DEe);G$r=r(sRt,"layoutlm"),sRt.forEach(t),O$r=r(qje," \u2014 "),fK=n(qje,"A",{href:!0});var lRt=s(fK);V$r=r(lRt,"TFLayoutLMForTokenClassification"),lRt.forEach(t),X$r=r(qje," (LayoutLM model)"),qje.forEach(t),z$r=i(me),OC=n(me,"LI",{});var jje=s(OC);GEe=n(jje,"STRONG",{});var iRt=s(GEe);Q$r=r(iRt,"longformer"),iRt.forEach(t),W$r=r(jje," \u2014 "),mK=n(jje,"A",{href:!0});var dRt=s(mK);H$r=r(dRt,"TFLongformerForTokenClassification"),dRt.forEach(t),U$r=r(jje," (Longformer model)"),jje.forEach(t),J$r=i(me),VC=n(me,"LI",{});var Dje=s(VC);OEe=n(Dje,"STRONG",{});var cRt=s(OEe);Y$r=r(cRt,"mobilebert"),cRt.forEach(t),K$r=r(Dje," \u2014 "),gK=n(Dje,"A",{href:!0});var fRt=s(gK);Z$r=r(fRt,"TFMobileBertForTokenClassification"),fRt.forEach(t),ekr=r(Dje," (MobileBERT model)"),Dje.forEach(t),okr=i(me),XC=n(me,"LI",{});var Gje=s(XC);VEe=n(Gje,"STRONG",{});var mRt=s(VEe);rkr=r(mRt,"mpnet"),mRt.forEach(t),tkr=r(Gje," \u2014 "),hK=n(Gje,"A",{href:!0});var gRt=s(hK);akr=r(gRt,"TFMPNetForTokenClassification"),gRt.forEach(t),nkr=r(Gje," (MPNet model)"),Gje.forEach(t),skr=i(me),zC=n(me,"LI",{});var Oje=s(zC);XEe=n(Oje,"STRONG",{});var hRt=s(XEe);lkr=r(hRt,"rembert"),hRt.forEach(t),ikr=r(Oje," \u2014 "),pK=n(Oje,"A",{href:!0});var pRt=s(pK);dkr=r(pRt,"TFRemBertForTokenClassification"),pRt.forEach(t),ckr=r(Oje," (RemBERT model)"),Oje.forEach(t),fkr=i(me),QC=n(me,"LI",{});var Vje=s(QC);zEe=n(Vje,"STRONG",{});var _Rt=s(zEe);mkr=r(_Rt,"roberta"),_Rt.forEach(t),gkr=r(Vje," \u2014 "),_K=n(Vje,"A",{href:!0});var uRt=s(_K);hkr=r(uRt,"TFRobertaForTokenClassification"),uRt.forEach(t),pkr=r(Vje," (RoBERTa model)"),Vje.forEach(t),_kr=i(me),WC=n(me,"LI",{});var Xje=s(WC);QEe=n(Xje,"STRONG",{});var bRt=s(QEe);ukr=r(bRt,"roformer"),bRt.forEach(t),bkr=r(Xje," \u2014 "),uK=n(Xje,"A",{href:!0});var vRt=s(uK);vkr=r(vRt,"TFRoFormerForTokenClassification"),vRt.forEach(t),Fkr=r(Xje," (RoFormer model)"),Xje.forEach(t),Tkr=i(me),HC=n(me,"LI",{});var zje=s(HC);WEe=n(zje,"STRONG",{});var FRt=s(WEe);Mkr=r(FRt,"xlm"),FRt.forEach(t),Ekr=r(zje," \u2014 "),bK=n(zje,"A",{href:!0});var TRt=s(bK);Ckr=r(TRt,"TFXLMForTokenClassification"),TRt.forEach(t),wkr=r(zje," (XLM model)"),zje.forEach(t),Akr=i(me),UC=n(me,"LI",{});var Qje=s(UC);HEe=n(Qje,"STRONG",{});var MRt=s(HEe);Lkr=r(MRt,"xlm-roberta"),MRt.forEach(t),ykr=r(Qje," \u2014 "),vK=n(Qje,"A",{href:!0});var ERt=s(vK);xkr=r(ERt,"TFXLMRobertaForTokenClassification"),ERt.forEach(t),$kr=r(Qje," (XLM-RoBERTa model)"),Qje.forEach(t),kkr=i(me),JC=n(me,"LI",{});var Wje=s(JC);UEe=n(Wje,"STRONG",{});var CRt=s(UEe);Skr=r(CRt,"xlnet"),CRt.forEach(t),Rkr=r(Wje," \u2014 "),FK=n(Wje,"A",{href:!0});var wRt=s(FK);Pkr=r(wRt,"TFXLNetForTokenClassification"),wRt.forEach(t),Bkr=r(Wje," (XLNet model)"),Wje.forEach(t),me.forEach(t),Nkr=i(zl),T(YC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),WVe=i(f),Pc=n(f,"H2",{class:!0});var rQe=s(Pc);KC=n(rQe,"A",{id:!0,class:!0,href:!0});var ARt=s(KC);JEe=n(ARt,"SPAN",{});var LRt=s(JEe);T(wx.$$.fragment,LRt),LRt.forEach(t),ARt.forEach(t),Ikr=i(rQe),YEe=n(rQe,"SPAN",{});var yRt=s(YEe);qkr=r(yRt,"TFAutoModelForQuestionAnswering"),yRt.forEach(t),rQe.forEach(t),HVe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(Ax.$$.fragment,Ql),jkr=i(Ql),Bc=n(Ql,"P",{});var ete=s(Bc);Dkr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TK=n(ete,"A",{href:!0});var xRt=s(TK);Gkr=r(xRt,"from_pretrained()"),xRt.forEach(t),Okr=r(ete," class method or the "),MK=n(ete,"A",{href:!0});var $Rt=s(MK);Vkr=r($Rt,"from_config()"),$Rt.forEach(t),Xkr=r(ete,` class
method.`),ete.forEach(t),zkr=i(Ql),Lx=n(Ql,"P",{});var tQe=s(Lx);Qkr=r(tQe,"This class cannot be instantiated directly using "),KEe=n(tQe,"CODE",{});var kRt=s(KEe);Wkr=r(kRt,"__init__()"),kRt.forEach(t),Hkr=r(tQe," (throws an error)."),tQe.forEach(t),Ukr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var t6=s(Gt);T(yx.$$.fragment,t6),Jkr=i(t6),ZEe=n(t6,"P",{});var SRt=s(ZEe);Ykr=r(SRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SRt.forEach(t),Kkr=i(t6),Nc=n(t6,"P",{});var ote=s(Nc);Zkr=r(ote,`Note:
Loading a model from its configuration file does `),e4e=n(ote,"STRONG",{});var RRt=s(e4e);eSr=r(RRt,"not"),RRt.forEach(t),oSr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(ote,"A",{href:!0});var PRt=s(EK);rSr=r(PRt,"from_pretrained()"),PRt.forEach(t),tSr=r(ote," to load the model weights."),ote.forEach(t),aSr=i(t6),T(ZC.$$.fragment,t6),t6.forEach(t),nSr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Wl=s(jr);T(xx.$$.fragment,Wl),sSr=i(Wl),o4e=n(Wl,"P",{});var BRt=s(o4e);lSr=r(BRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BRt.forEach(t),iSr=i(Wl),un=n(Wl,"P",{});var a6=s(un);dSr=r(a6,"The model class to instantiate is selected based on the "),r4e=n(a6,"CODE",{});var NRt=s(r4e);cSr=r(NRt,"model_type"),NRt.forEach(t),fSr=r(a6,` property of the config object (either
passed as an argument or loaded from `),t4e=n(a6,"CODE",{});var IRt=s(t4e);mSr=r(IRt,"pretrained_model_name_or_path"),IRt.forEach(t),gSr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(a6,"CODE",{});var qRt=s(a4e);hSr=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),pSr=r(a6,":"),a6.forEach(t),_Sr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);e5=n(ge,"LI",{});var Hje=s(e5);n4e=n(Hje,"STRONG",{});var jRt=s(n4e);uSr=r(jRt,"albert"),jRt.forEach(t),bSr=r(Hje," \u2014 "),CK=n(Hje,"A",{href:!0});var DRt=s(CK);vSr=r(DRt,"TFAlbertForQuestionAnswering"),DRt.forEach(t),FSr=r(Hje," (ALBERT model)"),Hje.forEach(t),TSr=i(ge),o5=n(ge,"LI",{});var Uje=s(o5);s4e=n(Uje,"STRONG",{});var GRt=s(s4e);MSr=r(GRt,"bert"),GRt.forEach(t),ESr=r(Uje," \u2014 "),wK=n(Uje,"A",{href:!0});var ORt=s(wK);CSr=r(ORt,"TFBertForQuestionAnswering"),ORt.forEach(t),wSr=r(Uje," (BERT model)"),Uje.forEach(t),ASr=i(ge),r5=n(ge,"LI",{});var Jje=s(r5);l4e=n(Jje,"STRONG",{});var VRt=s(l4e);LSr=r(VRt,"camembert"),VRt.forEach(t),ySr=r(Jje," \u2014 "),AK=n(Jje,"A",{href:!0});var XRt=s(AK);xSr=r(XRt,"TFCamembertForQuestionAnswering"),XRt.forEach(t),$Sr=r(Jje," (CamemBERT model)"),Jje.forEach(t),kSr=i(ge),t5=n(ge,"LI",{});var Yje=s(t5);i4e=n(Yje,"STRONG",{});var zRt=s(i4e);SSr=r(zRt,"convbert"),zRt.forEach(t),RSr=r(Yje," \u2014 "),LK=n(Yje,"A",{href:!0});var QRt=s(LK);PSr=r(QRt,"TFConvBertForQuestionAnswering"),QRt.forEach(t),BSr=r(Yje," (ConvBERT model)"),Yje.forEach(t),NSr=i(ge),a5=n(ge,"LI",{});var Kje=s(a5);d4e=n(Kje,"STRONG",{});var WRt=s(d4e);ISr=r(WRt,"deberta"),WRt.forEach(t),qSr=r(Kje," \u2014 "),yK=n(Kje,"A",{href:!0});var HRt=s(yK);jSr=r(HRt,"TFDebertaForQuestionAnswering"),HRt.forEach(t),DSr=r(Kje," (DeBERTa model)"),Kje.forEach(t),GSr=i(ge),n5=n(ge,"LI",{});var Zje=s(n5);c4e=n(Zje,"STRONG",{});var URt=s(c4e);OSr=r(URt,"deberta-v2"),URt.forEach(t),VSr=r(Zje," \u2014 "),xK=n(Zje,"A",{href:!0});var JRt=s(xK);XSr=r(JRt,"TFDebertaV2ForQuestionAnswering"),JRt.forEach(t),zSr=r(Zje," (DeBERTa-v2 model)"),Zje.forEach(t),QSr=i(ge),s5=n(ge,"LI",{});var eDe=s(s5);f4e=n(eDe,"STRONG",{});var YRt=s(f4e);WSr=r(YRt,"distilbert"),YRt.forEach(t),HSr=r(eDe," \u2014 "),$K=n(eDe,"A",{href:!0});var KRt=s($K);USr=r(KRt,"TFDistilBertForQuestionAnswering"),KRt.forEach(t),JSr=r(eDe," (DistilBERT model)"),eDe.forEach(t),YSr=i(ge),l5=n(ge,"LI",{});var oDe=s(l5);m4e=n(oDe,"STRONG",{});var ZRt=s(m4e);KSr=r(ZRt,"electra"),ZRt.forEach(t),ZSr=r(oDe," \u2014 "),kK=n(oDe,"A",{href:!0});var ePt=s(kK);eRr=r(ePt,"TFElectraForQuestionAnswering"),ePt.forEach(t),oRr=r(oDe," (ELECTRA model)"),oDe.forEach(t),rRr=i(ge),i5=n(ge,"LI",{});var rDe=s(i5);g4e=n(rDe,"STRONG",{});var oPt=s(g4e);tRr=r(oPt,"flaubert"),oPt.forEach(t),aRr=r(rDe," \u2014 "),SK=n(rDe,"A",{href:!0});var rPt=s(SK);nRr=r(rPt,"TFFlaubertForQuestionAnsweringSimple"),rPt.forEach(t),sRr=r(rDe," (FlauBERT model)"),rDe.forEach(t),lRr=i(ge),d5=n(ge,"LI",{});var tDe=s(d5);h4e=n(tDe,"STRONG",{});var tPt=s(h4e);iRr=r(tPt,"funnel"),tPt.forEach(t),dRr=r(tDe," \u2014 "),RK=n(tDe,"A",{href:!0});var aPt=s(RK);cRr=r(aPt,"TFFunnelForQuestionAnswering"),aPt.forEach(t),fRr=r(tDe," (Funnel Transformer model)"),tDe.forEach(t),mRr=i(ge),c5=n(ge,"LI",{});var aDe=s(c5);p4e=n(aDe,"STRONG",{});var nPt=s(p4e);gRr=r(nPt,"gptj"),nPt.forEach(t),hRr=r(aDe," \u2014 "),PK=n(aDe,"A",{href:!0});var sPt=s(PK);pRr=r(sPt,"TFGPTJForQuestionAnswering"),sPt.forEach(t),_Rr=r(aDe," (GPT-J model)"),aDe.forEach(t),uRr=i(ge),f5=n(ge,"LI",{});var nDe=s(f5);_4e=n(nDe,"STRONG",{});var lPt=s(_4e);bRr=r(lPt,"longformer"),lPt.forEach(t),vRr=r(nDe," \u2014 "),BK=n(nDe,"A",{href:!0});var iPt=s(BK);FRr=r(iPt,"TFLongformerForQuestionAnswering"),iPt.forEach(t),TRr=r(nDe," (Longformer model)"),nDe.forEach(t),MRr=i(ge),m5=n(ge,"LI",{});var sDe=s(m5);u4e=n(sDe,"STRONG",{});var dPt=s(u4e);ERr=r(dPt,"mobilebert"),dPt.forEach(t),CRr=r(sDe," \u2014 "),NK=n(sDe,"A",{href:!0});var cPt=s(NK);wRr=r(cPt,"TFMobileBertForQuestionAnswering"),cPt.forEach(t),ARr=r(sDe," (MobileBERT model)"),sDe.forEach(t),LRr=i(ge),g5=n(ge,"LI",{});var lDe=s(g5);b4e=n(lDe,"STRONG",{});var fPt=s(b4e);yRr=r(fPt,"mpnet"),fPt.forEach(t),xRr=r(lDe," \u2014 "),IK=n(lDe,"A",{href:!0});var mPt=s(IK);$Rr=r(mPt,"TFMPNetForQuestionAnswering"),mPt.forEach(t),kRr=r(lDe," (MPNet model)"),lDe.forEach(t),SRr=i(ge),h5=n(ge,"LI",{});var iDe=s(h5);v4e=n(iDe,"STRONG",{});var gPt=s(v4e);RRr=r(gPt,"rembert"),gPt.forEach(t),PRr=r(iDe," \u2014 "),qK=n(iDe,"A",{href:!0});var hPt=s(qK);BRr=r(hPt,"TFRemBertForQuestionAnswering"),hPt.forEach(t),NRr=r(iDe," (RemBERT model)"),iDe.forEach(t),IRr=i(ge),p5=n(ge,"LI",{});var dDe=s(p5);F4e=n(dDe,"STRONG",{});var pPt=s(F4e);qRr=r(pPt,"roberta"),pPt.forEach(t),jRr=r(dDe," \u2014 "),jK=n(dDe,"A",{href:!0});var _Pt=s(jK);DRr=r(_Pt,"TFRobertaForQuestionAnswering"),_Pt.forEach(t),GRr=r(dDe," (RoBERTa model)"),dDe.forEach(t),ORr=i(ge),_5=n(ge,"LI",{});var cDe=s(_5);T4e=n(cDe,"STRONG",{});var uPt=s(T4e);VRr=r(uPt,"roformer"),uPt.forEach(t),XRr=r(cDe," \u2014 "),DK=n(cDe,"A",{href:!0});var bPt=s(DK);zRr=r(bPt,"TFRoFormerForQuestionAnswering"),bPt.forEach(t),QRr=r(cDe," (RoFormer model)"),cDe.forEach(t),WRr=i(ge),u5=n(ge,"LI",{});var fDe=s(u5);M4e=n(fDe,"STRONG",{});var vPt=s(M4e);HRr=r(vPt,"xlm"),vPt.forEach(t),URr=r(fDe," \u2014 "),GK=n(fDe,"A",{href:!0});var FPt=s(GK);JRr=r(FPt,"TFXLMForQuestionAnsweringSimple"),FPt.forEach(t),YRr=r(fDe," (XLM model)"),fDe.forEach(t),KRr=i(ge),b5=n(ge,"LI",{});var mDe=s(b5);E4e=n(mDe,"STRONG",{});var TPt=s(E4e);ZRr=r(TPt,"xlm-roberta"),TPt.forEach(t),ePr=r(mDe," \u2014 "),OK=n(mDe,"A",{href:!0});var MPt=s(OK);oPr=r(MPt,"TFXLMRobertaForQuestionAnswering"),MPt.forEach(t),rPr=r(mDe," (XLM-RoBERTa model)"),mDe.forEach(t),tPr=i(ge),v5=n(ge,"LI",{});var gDe=s(v5);C4e=n(gDe,"STRONG",{});var EPt=s(C4e);aPr=r(EPt,"xlnet"),EPt.forEach(t),nPr=r(gDe," \u2014 "),VK=n(gDe,"A",{href:!0});var CPt=s(VK);sPr=r(CPt,"TFXLNetForQuestionAnsweringSimple"),CPt.forEach(t),lPr=r(gDe," (XLNet model)"),gDe.forEach(t),ge.forEach(t),iPr=i(Wl),T(F5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),UVe=i(f),Ic=n(f,"H2",{class:!0});var aQe=s(Ic);T5=n(aQe,"A",{id:!0,class:!0,href:!0});var wPt=s(T5);w4e=n(wPt,"SPAN",{});var APt=s(w4e);T($x.$$.fragment,APt),APt.forEach(t),wPt.forEach(t),dPr=i(aQe),A4e=n(aQe,"SPAN",{});var LPt=s(A4e);cPr=r(LPt,"TFAutoModelForVision2Seq"),LPt.forEach(t),aQe.forEach(t),JVe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(kx.$$.fragment,Hl),fPr=i(Hl),qc=n(Hl,"P",{});var rte=s(qc);mPr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XK=n(rte,"A",{href:!0});var yPt=s(XK);gPr=r(yPt,"from_pretrained()"),yPt.forEach(t),hPr=r(rte," class method or the "),zK=n(rte,"A",{href:!0});var xPt=s(zK);pPr=r(xPt,"from_config()"),xPt.forEach(t),_Pr=r(rte,` class
method.`),rte.forEach(t),uPr=i(Hl),Sx=n(Hl,"P",{});var nQe=s(Sx);bPr=r(nQe,"This class cannot be instantiated directly using "),L4e=n(nQe,"CODE",{});var $Pt=s(L4e);vPr=r($Pt,"__init__()"),$Pt.forEach(t),FPr=r(nQe," (throws an error)."),nQe.forEach(t),TPr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var n6=s(Ot);T(Rx.$$.fragment,n6),MPr=i(n6),y4e=n(n6,"P",{});var kPt=s(y4e);EPr=r(kPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kPt.forEach(t),CPr=i(n6),jc=n(n6,"P",{});var tte=s(jc);wPr=r(tte,`Note:
Loading a model from its configuration file does `),x4e=n(tte,"STRONG",{});var SPt=s(x4e);APr=r(SPt,"not"),SPt.forEach(t),LPr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(tte,"A",{href:!0});var RPt=s(QK);yPr=r(RPt,"from_pretrained()"),RPt.forEach(t),xPr=r(tte," to load the model weights."),tte.forEach(t),$Pr=i(n6),T(M5.$$.fragment,n6),n6.forEach(t),kPr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(Px.$$.fragment,Ul),SPr=i(Ul),$4e=n(Ul,"P",{});var PPt=s($4e);RPr=r(PPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PPt.forEach(t),PPr=i(Ul),bn=n(Ul,"P",{});var s6=s(bn);BPr=r(s6,"The model class to instantiate is selected based on the "),k4e=n(s6,"CODE",{});var BPt=s(k4e);NPr=r(BPt,"model_type"),BPt.forEach(t),IPr=r(s6,` property of the config object (either
passed as an argument or loaded from `),S4e=n(s6,"CODE",{});var NPt=s(S4e);qPr=r(NPt,"pretrained_model_name_or_path"),NPt.forEach(t),jPr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(s6,"CODE",{});var IPt=s(R4e);DPr=r(IPt,"pretrained_model_name_or_path"),IPt.forEach(t),GPr=r(s6,":"),s6.forEach(t),OPr=i(Ul),P4e=n(Ul,"UL",{});var qPt=s(P4e);E5=n(qPt,"LI",{});var hDe=s(E5);B4e=n(hDe,"STRONG",{});var jPt=s(B4e);VPr=r(jPt,"vision-encoder-decoder"),jPt.forEach(t),XPr=r(hDe," \u2014 "),WK=n(hDe,"A",{href:!0});var DPt=s(WK);zPr=r(DPt,"TFVisionEncoderDecoderModel"),DPt.forEach(t),QPr=r(hDe," (Vision Encoder decoder model)"),hDe.forEach(t),qPt.forEach(t),WPr=i(Ul),T(C5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),YVe=i(f),Dc=n(f,"H2",{class:!0});var sQe=s(Dc);w5=n(sQe,"A",{id:!0,class:!0,href:!0});var GPt=s(w5);N4e=n(GPt,"SPAN",{});var OPt=s(N4e);T(Bx.$$.fragment,OPt),OPt.forEach(t),GPt.forEach(t),HPr=i(sQe),I4e=n(sQe,"SPAN",{});var VPt=s(I4e);UPr=r(VPt,"TFAutoModelForSpeechSeq2Seq"),VPt.forEach(t),sQe.forEach(t),KVe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Nx.$$.fragment,Jl),JPr=i(Jl),Gc=n(Jl,"P",{});var ate=s(Gc);YPr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HK=n(ate,"A",{href:!0});var XPt=s(HK);KPr=r(XPt,"from_pretrained()"),XPt.forEach(t),ZPr=r(ate," class method or the "),UK=n(ate,"A",{href:!0});var zPt=s(UK);eBr=r(zPt,"from_config()"),zPt.forEach(t),oBr=r(ate,` class
method.`),ate.forEach(t),rBr=i(Jl),Ix=n(Jl,"P",{});var lQe=s(Ix);tBr=r(lQe,"This class cannot be instantiated directly using "),q4e=n(lQe,"CODE",{});var QPt=s(q4e);aBr=r(QPt,"__init__()"),QPt.forEach(t),nBr=r(lQe," (throws an error)."),lQe.forEach(t),sBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var l6=s(Vt);T(qx.$$.fragment,l6),lBr=i(l6),j4e=n(l6,"P",{});var WPt=s(j4e);iBr=r(WPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WPt.forEach(t),dBr=i(l6),Oc=n(l6,"P",{});var nte=s(Oc);cBr=r(nte,`Note:
Loading a model from its configuration file does `),D4e=n(nte,"STRONG",{});var HPt=s(D4e);fBr=r(HPt,"not"),HPt.forEach(t),mBr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(nte,"A",{href:!0});var UPt=s(JK);gBr=r(UPt,"from_pretrained()"),UPt.forEach(t),hBr=r(nte," to load the model weights."),nte.forEach(t),pBr=i(l6),T(A5.$$.fragment,l6),l6.forEach(t),_Br=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(jx.$$.fragment,Yl),uBr=i(Yl),G4e=n(Yl,"P",{});var JPt=s(G4e);bBr=r(JPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JPt.forEach(t),vBr=i(Yl),vn=n(Yl,"P",{});var i6=s(vn);FBr=r(i6,"The model class to instantiate is selected based on the "),O4e=n(i6,"CODE",{});var YPt=s(O4e);TBr=r(YPt,"model_type"),YPt.forEach(t),MBr=r(i6,` property of the config object (either
passed as an argument or loaded from `),V4e=n(i6,"CODE",{});var KPt=s(V4e);EBr=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),CBr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(i6,"CODE",{});var ZPt=s(X4e);wBr=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),ABr=r(i6,":"),i6.forEach(t),LBr=i(Yl),z4e=n(Yl,"UL",{});var eBt=s(z4e);L5=n(eBt,"LI",{});var pDe=s(L5);Q4e=n(pDe,"STRONG",{});var oBt=s(Q4e);yBr=r(oBt,"speech_to_text"),oBt.forEach(t),xBr=r(pDe," \u2014 "),YK=n(pDe,"A",{href:!0});var rBt=s(YK);$Br=r(rBt,"TFSpeech2TextForConditionalGeneration"),rBt.forEach(t),kBr=r(pDe," (Speech2Text model)"),pDe.forEach(t),eBt.forEach(t),SBr=i(Yl),T(y5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),ZVe=i(f),Vc=n(f,"H2",{class:!0});var iQe=s(Vc);x5=n(iQe,"A",{id:!0,class:!0,href:!0});var tBt=s(x5);W4e=n(tBt,"SPAN",{});var aBt=s(W4e);T(Dx.$$.fragment,aBt),aBt.forEach(t),tBt.forEach(t),RBr=i(iQe),H4e=n(iQe,"SPAN",{});var nBt=s(H4e);PBr=r(nBt,"FlaxAutoModel"),nBt.forEach(t),iQe.forEach(t),eXe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(Gx.$$.fragment,Kl),BBr=i(Kl),Xc=n(Kl,"P",{});var ste=s(Xc);NBr=r(ste,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KK=n(ste,"A",{href:!0});var sBt=s(KK);IBr=r(sBt,"from_pretrained()"),sBt.forEach(t),qBr=r(ste," class method or the "),ZK=n(ste,"A",{href:!0});var lBt=s(ZK);jBr=r(lBt,"from_config()"),lBt.forEach(t),DBr=r(ste,` class
method.`),ste.forEach(t),GBr=i(Kl),Ox=n(Kl,"P",{});var dQe=s(Ox);OBr=r(dQe,"This class cannot be instantiated directly using "),U4e=n(dQe,"CODE",{});var iBt=s(U4e);VBr=r(iBt,"__init__()"),iBt.forEach(t),XBr=r(dQe," (throws an error)."),dQe.forEach(t),zBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var d6=s(Xt);T(Vx.$$.fragment,d6),QBr=i(d6),J4e=n(d6,"P",{});var dBt=s(J4e);WBr=r(dBt,"Instantiates one of the base model classes of the library from a configuration."),dBt.forEach(t),HBr=i(d6),zc=n(d6,"P",{});var lte=s(zc);UBr=r(lte,`Note:
Loading a model from its configuration file does `),Y4e=n(lte,"STRONG",{});var cBt=s(Y4e);JBr=r(cBt,"not"),cBt.forEach(t),YBr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(lte,"A",{href:!0});var fBt=s(eZ);KBr=r(fBt,"from_pretrained()"),fBt.forEach(t),ZBr=r(lte," to load the model weights."),lte.forEach(t),eNr=i(d6),T($5.$$.fragment,d6),d6.forEach(t),oNr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Xx.$$.fragment,Zl),rNr=i(Zl),K4e=n(Zl,"P",{});var mBt=s(K4e);tNr=r(mBt,"Instantiate one of the base model classes of the library from a pretrained model."),mBt.forEach(t),aNr=i(Zl),Fn=n(Zl,"P",{});var c6=s(Fn);nNr=r(c6,"The model class to instantiate is selected based on the "),Z4e=n(c6,"CODE",{});var gBt=s(Z4e);sNr=r(gBt,"model_type"),gBt.forEach(t),lNr=r(c6,` property of the config object (either
passed as an argument or loaded from `),eCe=n(c6,"CODE",{});var hBt=s(eCe);iNr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),dNr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oCe=n(c6,"CODE",{});var pBt=s(oCe);cNr=r(pBt,"pretrained_model_name_or_path"),pBt.forEach(t),fNr=r(c6,":"),c6.forEach(t),mNr=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);k5=n(ae,"LI",{});var _De=s(k5);rCe=n(_De,"STRONG",{});var _Bt=s(rCe);gNr=r(_Bt,"albert"),_Bt.forEach(t),hNr=r(_De," \u2014 "),oZ=n(_De,"A",{href:!0});var uBt=s(oZ);pNr=r(uBt,"FlaxAlbertModel"),uBt.forEach(t),_Nr=r(_De," (ALBERT model)"),_De.forEach(t),uNr=i(ae),S5=n(ae,"LI",{});var uDe=s(S5);tCe=n(uDe,"STRONG",{});var bBt=s(tCe);bNr=r(bBt,"bart"),bBt.forEach(t),vNr=r(uDe," \u2014 "),rZ=n(uDe,"A",{href:!0});var vBt=s(rZ);FNr=r(vBt,"FlaxBartModel"),vBt.forEach(t),TNr=r(uDe," (BART model)"),uDe.forEach(t),MNr=i(ae),R5=n(ae,"LI",{});var bDe=s(R5);aCe=n(bDe,"STRONG",{});var FBt=s(aCe);ENr=r(FBt,"beit"),FBt.forEach(t),CNr=r(bDe," \u2014 "),tZ=n(bDe,"A",{href:!0});var TBt=s(tZ);wNr=r(TBt,"FlaxBeitModel"),TBt.forEach(t),ANr=r(bDe," (BEiT model)"),bDe.forEach(t),LNr=i(ae),P5=n(ae,"LI",{});var vDe=s(P5);nCe=n(vDe,"STRONG",{});var MBt=s(nCe);yNr=r(MBt,"bert"),MBt.forEach(t),xNr=r(vDe," \u2014 "),aZ=n(vDe,"A",{href:!0});var EBt=s(aZ);$Nr=r(EBt,"FlaxBertModel"),EBt.forEach(t),kNr=r(vDe," (BERT model)"),vDe.forEach(t),SNr=i(ae),B5=n(ae,"LI",{});var FDe=s(B5);sCe=n(FDe,"STRONG",{});var CBt=s(sCe);RNr=r(CBt,"big_bird"),CBt.forEach(t),PNr=r(FDe," \u2014 "),nZ=n(FDe,"A",{href:!0});var wBt=s(nZ);BNr=r(wBt,"FlaxBigBirdModel"),wBt.forEach(t),NNr=r(FDe," (BigBird model)"),FDe.forEach(t),INr=i(ae),N5=n(ae,"LI",{});var TDe=s(N5);lCe=n(TDe,"STRONG",{});var ABt=s(lCe);qNr=r(ABt,"blenderbot"),ABt.forEach(t),jNr=r(TDe," \u2014 "),sZ=n(TDe,"A",{href:!0});var LBt=s(sZ);DNr=r(LBt,"FlaxBlenderbotModel"),LBt.forEach(t),GNr=r(TDe," (Blenderbot model)"),TDe.forEach(t),ONr=i(ae),I5=n(ae,"LI",{});var MDe=s(I5);iCe=n(MDe,"STRONG",{});var yBt=s(iCe);VNr=r(yBt,"blenderbot-small"),yBt.forEach(t),XNr=r(MDe," \u2014 "),lZ=n(MDe,"A",{href:!0});var xBt=s(lZ);zNr=r(xBt,"FlaxBlenderbotSmallModel"),xBt.forEach(t),QNr=r(MDe," (BlenderbotSmall model)"),MDe.forEach(t),WNr=i(ae),q5=n(ae,"LI",{});var EDe=s(q5);dCe=n(EDe,"STRONG",{});var $Bt=s(dCe);HNr=r($Bt,"clip"),$Bt.forEach(t),UNr=r(EDe," \u2014 "),iZ=n(EDe,"A",{href:!0});var kBt=s(iZ);JNr=r(kBt,"FlaxCLIPModel"),kBt.forEach(t),YNr=r(EDe," (CLIP model)"),EDe.forEach(t),KNr=i(ae),j5=n(ae,"LI",{});var CDe=s(j5);cCe=n(CDe,"STRONG",{});var SBt=s(cCe);ZNr=r(SBt,"distilbert"),SBt.forEach(t),eIr=r(CDe," \u2014 "),dZ=n(CDe,"A",{href:!0});var RBt=s(dZ);oIr=r(RBt,"FlaxDistilBertModel"),RBt.forEach(t),rIr=r(CDe," (DistilBERT model)"),CDe.forEach(t),tIr=i(ae),D5=n(ae,"LI",{});var wDe=s(D5);fCe=n(wDe,"STRONG",{});var PBt=s(fCe);aIr=r(PBt,"electra"),PBt.forEach(t),nIr=r(wDe," \u2014 "),cZ=n(wDe,"A",{href:!0});var BBt=s(cZ);sIr=r(BBt,"FlaxElectraModel"),BBt.forEach(t),lIr=r(wDe," (ELECTRA model)"),wDe.forEach(t),iIr=i(ae),G5=n(ae,"LI",{});var ADe=s(G5);mCe=n(ADe,"STRONG",{});var NBt=s(mCe);dIr=r(NBt,"gpt2"),NBt.forEach(t),cIr=r(ADe," \u2014 "),fZ=n(ADe,"A",{href:!0});var IBt=s(fZ);fIr=r(IBt,"FlaxGPT2Model"),IBt.forEach(t),mIr=r(ADe," (OpenAI GPT-2 model)"),ADe.forEach(t),gIr=i(ae),O5=n(ae,"LI",{});var LDe=s(O5);gCe=n(LDe,"STRONG",{});var qBt=s(gCe);hIr=r(qBt,"gpt_neo"),qBt.forEach(t),pIr=r(LDe," \u2014 "),mZ=n(LDe,"A",{href:!0});var jBt=s(mZ);_Ir=r(jBt,"FlaxGPTNeoModel"),jBt.forEach(t),uIr=r(LDe," (GPT Neo model)"),LDe.forEach(t),bIr=i(ae),V5=n(ae,"LI",{});var yDe=s(V5);hCe=n(yDe,"STRONG",{});var DBt=s(hCe);vIr=r(DBt,"gptj"),DBt.forEach(t),FIr=r(yDe," \u2014 "),gZ=n(yDe,"A",{href:!0});var GBt=s(gZ);TIr=r(GBt,"FlaxGPTJModel"),GBt.forEach(t),MIr=r(yDe," (GPT-J model)"),yDe.forEach(t),EIr=i(ae),X5=n(ae,"LI",{});var xDe=s(X5);pCe=n(xDe,"STRONG",{});var OBt=s(pCe);CIr=r(OBt,"longt5"),OBt.forEach(t),wIr=r(xDe," \u2014 "),hZ=n(xDe,"A",{href:!0});var VBt=s(hZ);AIr=r(VBt,"FlaxLongT5Model"),VBt.forEach(t),LIr=r(xDe," (LongT5 model)"),xDe.forEach(t),yIr=i(ae),z5=n(ae,"LI",{});var $De=s(z5);_Ce=n($De,"STRONG",{});var XBt=s(_Ce);xIr=r(XBt,"marian"),XBt.forEach(t),$Ir=r($De," \u2014 "),pZ=n($De,"A",{href:!0});var zBt=s(pZ);kIr=r(zBt,"FlaxMarianModel"),zBt.forEach(t),SIr=r($De," (Marian model)"),$De.forEach(t),RIr=i(ae),Q5=n(ae,"LI",{});var kDe=s(Q5);uCe=n(kDe,"STRONG",{});var QBt=s(uCe);PIr=r(QBt,"mbart"),QBt.forEach(t),BIr=r(kDe," \u2014 "),_Z=n(kDe,"A",{href:!0});var WBt=s(_Z);NIr=r(WBt,"FlaxMBartModel"),WBt.forEach(t),IIr=r(kDe," (mBART model)"),kDe.forEach(t),qIr=i(ae),W5=n(ae,"LI",{});var SDe=s(W5);bCe=n(SDe,"STRONG",{});var HBt=s(bCe);jIr=r(HBt,"mt5"),HBt.forEach(t),DIr=r(SDe," \u2014 "),uZ=n(SDe,"A",{href:!0});var UBt=s(uZ);GIr=r(UBt,"FlaxMT5Model"),UBt.forEach(t),OIr=r(SDe," (MT5 model)"),SDe.forEach(t),VIr=i(ae),H5=n(ae,"LI",{});var RDe=s(H5);vCe=n(RDe,"STRONG",{});var JBt=s(vCe);XIr=r(JBt,"opt"),JBt.forEach(t),zIr=r(RDe," \u2014 "),bZ=n(RDe,"A",{href:!0});var YBt=s(bZ);QIr=r(YBt,"FlaxOPTModel"),YBt.forEach(t),WIr=r(RDe," (OPT model)"),RDe.forEach(t),HIr=i(ae),U5=n(ae,"LI",{});var PDe=s(U5);FCe=n(PDe,"STRONG",{});var KBt=s(FCe);UIr=r(KBt,"pegasus"),KBt.forEach(t),JIr=r(PDe," \u2014 "),vZ=n(PDe,"A",{href:!0});var ZBt=s(vZ);YIr=r(ZBt,"FlaxPegasusModel"),ZBt.forEach(t),KIr=r(PDe," (Pegasus model)"),PDe.forEach(t),ZIr=i(ae),J5=n(ae,"LI",{});var BDe=s(J5);TCe=n(BDe,"STRONG",{});var eNt=s(TCe);eqr=r(eNt,"roberta"),eNt.forEach(t),oqr=r(BDe," \u2014 "),FZ=n(BDe,"A",{href:!0});var oNt=s(FZ);rqr=r(oNt,"FlaxRobertaModel"),oNt.forEach(t),tqr=r(BDe," (RoBERTa model)"),BDe.forEach(t),aqr=i(ae),Y5=n(ae,"LI",{});var NDe=s(Y5);MCe=n(NDe,"STRONG",{});var rNt=s(MCe);nqr=r(rNt,"roformer"),rNt.forEach(t),sqr=r(NDe," \u2014 "),TZ=n(NDe,"A",{href:!0});var tNt=s(TZ);lqr=r(tNt,"FlaxRoFormerModel"),tNt.forEach(t),iqr=r(NDe," (RoFormer model)"),NDe.forEach(t),dqr=i(ae),K5=n(ae,"LI",{});var IDe=s(K5);ECe=n(IDe,"STRONG",{});var aNt=s(ECe);cqr=r(aNt,"t5"),aNt.forEach(t),fqr=r(IDe," \u2014 "),MZ=n(IDe,"A",{href:!0});var nNt=s(MZ);mqr=r(nNt,"FlaxT5Model"),nNt.forEach(t),gqr=r(IDe," (T5 model)"),IDe.forEach(t),hqr=i(ae),Z5=n(ae,"LI",{});var qDe=s(Z5);CCe=n(qDe,"STRONG",{});var sNt=s(CCe);pqr=r(sNt,"vision-text-dual-encoder"),sNt.forEach(t),_qr=r(qDe," \u2014 "),EZ=n(qDe,"A",{href:!0});var lNt=s(EZ);uqr=r(lNt,"FlaxVisionTextDualEncoderModel"),lNt.forEach(t),bqr=r(qDe," (VisionTextDualEncoder model)"),qDe.forEach(t),vqr=i(ae),e3=n(ae,"LI",{});var jDe=s(e3);wCe=n(jDe,"STRONG",{});var iNt=s(wCe);Fqr=r(iNt,"vit"),iNt.forEach(t),Tqr=r(jDe," \u2014 "),CZ=n(jDe,"A",{href:!0});var dNt=s(CZ);Mqr=r(dNt,"FlaxViTModel"),dNt.forEach(t),Eqr=r(jDe," (ViT model)"),jDe.forEach(t),Cqr=i(ae),o3=n(ae,"LI",{});var DDe=s(o3);ACe=n(DDe,"STRONG",{});var cNt=s(ACe);wqr=r(cNt,"wav2vec2"),cNt.forEach(t),Aqr=r(DDe," \u2014 "),wZ=n(DDe,"A",{href:!0});var fNt=s(wZ);Lqr=r(fNt,"FlaxWav2Vec2Model"),fNt.forEach(t),yqr=r(DDe," (Wav2Vec2 model)"),DDe.forEach(t),xqr=i(ae),r3=n(ae,"LI",{});var GDe=s(r3);LCe=n(GDe,"STRONG",{});var mNt=s(LCe);$qr=r(mNt,"xglm"),mNt.forEach(t),kqr=r(GDe," \u2014 "),AZ=n(GDe,"A",{href:!0});var gNt=s(AZ);Sqr=r(gNt,"FlaxXGLMModel"),gNt.forEach(t),Rqr=r(GDe," (XGLM model)"),GDe.forEach(t),Pqr=i(ae),t3=n(ae,"LI",{});var ODe=s(t3);yCe=n(ODe,"STRONG",{});var hNt=s(yCe);Bqr=r(hNt,"xlm-roberta"),hNt.forEach(t),Nqr=r(ODe," \u2014 "),LZ=n(ODe,"A",{href:!0});var pNt=s(LZ);Iqr=r(pNt,"FlaxXLMRobertaModel"),pNt.forEach(t),qqr=r(ODe," (XLM-RoBERTa model)"),ODe.forEach(t),ae.forEach(t),jqr=i(Zl),T(a3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),oXe=i(f),Qc=n(f,"H2",{class:!0});var cQe=s(Qc);n3=n(cQe,"A",{id:!0,class:!0,href:!0});var _Nt=s(n3);xCe=n(_Nt,"SPAN",{});var uNt=s(xCe);T(zx.$$.fragment,uNt),uNt.forEach(t),_Nt.forEach(t),Dqr=i(cQe),$Ce=n(cQe,"SPAN",{});var bNt=s($Ce);Gqr=r(bNt,"FlaxAutoModelForCausalLM"),bNt.forEach(t),cQe.forEach(t),rXe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Qx.$$.fragment,ei),Oqr=i(ei),Wc=n(ei,"P",{});var ite=s(Wc);Vqr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yZ=n(ite,"A",{href:!0});var vNt=s(yZ);Xqr=r(vNt,"from_pretrained()"),vNt.forEach(t),zqr=r(ite," class method or the "),xZ=n(ite,"A",{href:!0});var FNt=s(xZ);Qqr=r(FNt,"from_config()"),FNt.forEach(t),Wqr=r(ite,` class
method.`),ite.forEach(t),Hqr=i(ei),Wx=n(ei,"P",{});var fQe=s(Wx);Uqr=r(fQe,"This class cannot be instantiated directly using "),kCe=n(fQe,"CODE",{});var TNt=s(kCe);Jqr=r(TNt,"__init__()"),TNt.forEach(t),Yqr=r(fQe," (throws an error)."),fQe.forEach(t),Kqr=i(ei),zt=n(ei,"DIV",{class:!0});var f6=s(zt);T(Hx.$$.fragment,f6),Zqr=i(f6),SCe=n(f6,"P",{});var MNt=s(SCe);ejr=r(MNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MNt.forEach(t),ojr=i(f6),Hc=n(f6,"P",{});var dte=s(Hc);rjr=r(dte,`Note:
Loading a model from its configuration file does `),RCe=n(dte,"STRONG",{});var ENt=s(RCe);tjr=r(ENt,"not"),ENt.forEach(t),ajr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(dte,"A",{href:!0});var CNt=s($Z);njr=r(CNt,"from_pretrained()"),CNt.forEach(t),sjr=r(dte," to load the model weights."),dte.forEach(t),ljr=i(f6),T(s3.$$.fragment,f6),f6.forEach(t),ijr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Ux.$$.fragment,oi),djr=i(oi),PCe=n(oi,"P",{});var wNt=s(PCe);cjr=r(wNt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wNt.forEach(t),fjr=i(oi),Tn=n(oi,"P",{});var m6=s(Tn);mjr=r(m6,"The model class to instantiate is selected based on the "),BCe=n(m6,"CODE",{});var ANt=s(BCe);gjr=r(ANt,"model_type"),ANt.forEach(t),hjr=r(m6,` property of the config object (either
passed as an argument or loaded from `),NCe=n(m6,"CODE",{});var LNt=s(NCe);pjr=r(LNt,"pretrained_model_name_or_path"),LNt.forEach(t),_jr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ICe=n(m6,"CODE",{});var yNt=s(ICe);ujr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),bjr=r(m6,":"),m6.forEach(t),vjr=i(oi),xe=n(oi,"UL",{});var Ie=s(xe);l3=n(Ie,"LI",{});var VDe=s(l3);qCe=n(VDe,"STRONG",{});var xNt=s(qCe);Fjr=r(xNt,"bart"),xNt.forEach(t),Tjr=r(VDe," \u2014 "),kZ=n(VDe,"A",{href:!0});var $Nt=s(kZ);Mjr=r($Nt,"FlaxBartForCausalLM"),$Nt.forEach(t),Ejr=r(VDe," (BART model)"),VDe.forEach(t),Cjr=i(Ie),i3=n(Ie,"LI",{});var XDe=s(i3);jCe=n(XDe,"STRONG",{});var kNt=s(jCe);wjr=r(kNt,"bert"),kNt.forEach(t),Ajr=r(XDe," \u2014 "),SZ=n(XDe,"A",{href:!0});var SNt=s(SZ);Ljr=r(SNt,"FlaxBertForCausalLM"),SNt.forEach(t),yjr=r(XDe," (BERT model)"),XDe.forEach(t),xjr=i(Ie),d3=n(Ie,"LI",{});var zDe=s(d3);DCe=n(zDe,"STRONG",{});var RNt=s(DCe);$jr=r(RNt,"big_bird"),RNt.forEach(t),kjr=r(zDe," \u2014 "),RZ=n(zDe,"A",{href:!0});var PNt=s(RZ);Sjr=r(PNt,"FlaxBigBirdForCausalLM"),PNt.forEach(t),Rjr=r(zDe," (BigBird model)"),zDe.forEach(t),Pjr=i(Ie),c3=n(Ie,"LI",{});var QDe=s(c3);GCe=n(QDe,"STRONG",{});var BNt=s(GCe);Bjr=r(BNt,"electra"),BNt.forEach(t),Njr=r(QDe," \u2014 "),PZ=n(QDe,"A",{href:!0});var NNt=s(PZ);Ijr=r(NNt,"FlaxElectraForCausalLM"),NNt.forEach(t),qjr=r(QDe," (ELECTRA model)"),QDe.forEach(t),jjr=i(Ie),f3=n(Ie,"LI",{});var WDe=s(f3);OCe=n(WDe,"STRONG",{});var INt=s(OCe);Djr=r(INt,"gpt2"),INt.forEach(t),Gjr=r(WDe," \u2014 "),BZ=n(WDe,"A",{href:!0});var qNt=s(BZ);Ojr=r(qNt,"FlaxGPT2LMHeadModel"),qNt.forEach(t),Vjr=r(WDe," (OpenAI GPT-2 model)"),WDe.forEach(t),Xjr=i(Ie),m3=n(Ie,"LI",{});var HDe=s(m3);VCe=n(HDe,"STRONG",{});var jNt=s(VCe);zjr=r(jNt,"gpt_neo"),jNt.forEach(t),Qjr=r(HDe," \u2014 "),NZ=n(HDe,"A",{href:!0});var DNt=s(NZ);Wjr=r(DNt,"FlaxGPTNeoForCausalLM"),DNt.forEach(t),Hjr=r(HDe," (GPT Neo model)"),HDe.forEach(t),Ujr=i(Ie),g3=n(Ie,"LI",{});var UDe=s(g3);XCe=n(UDe,"STRONG",{});var GNt=s(XCe);Jjr=r(GNt,"gptj"),GNt.forEach(t),Yjr=r(UDe," \u2014 "),IZ=n(UDe,"A",{href:!0});var ONt=s(IZ);Kjr=r(ONt,"FlaxGPTJForCausalLM"),ONt.forEach(t),Zjr=r(UDe," (GPT-J model)"),UDe.forEach(t),eDr=i(Ie),h3=n(Ie,"LI",{});var JDe=s(h3);zCe=n(JDe,"STRONG",{});var VNt=s(zCe);oDr=r(VNt,"opt"),VNt.forEach(t),rDr=r(JDe," \u2014 "),qZ=n(JDe,"A",{href:!0});var XNt=s(qZ);tDr=r(XNt,"FlaxOPTForCausalLM"),XNt.forEach(t),aDr=r(JDe," (OPT model)"),JDe.forEach(t),nDr=i(Ie),p3=n(Ie,"LI",{});var YDe=s(p3);QCe=n(YDe,"STRONG",{});var zNt=s(QCe);sDr=r(zNt,"roberta"),zNt.forEach(t),lDr=r(YDe," \u2014 "),jZ=n(YDe,"A",{href:!0});var QNt=s(jZ);iDr=r(QNt,"FlaxRobertaForCausalLM"),QNt.forEach(t),dDr=r(YDe," (RoBERTa model)"),YDe.forEach(t),cDr=i(Ie),_3=n(Ie,"LI",{});var KDe=s(_3);WCe=n(KDe,"STRONG",{});var WNt=s(WCe);fDr=r(WNt,"xglm"),WNt.forEach(t),mDr=r(KDe," \u2014 "),DZ=n(KDe,"A",{href:!0});var HNt=s(DZ);gDr=r(HNt,"FlaxXGLMForCausalLM"),HNt.forEach(t),hDr=r(KDe," (XGLM model)"),KDe.forEach(t),Ie.forEach(t),pDr=i(oi),T(u3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),tXe=i(f),Uc=n(f,"H2",{class:!0});var mQe=s(Uc);b3=n(mQe,"A",{id:!0,class:!0,href:!0});var UNt=s(b3);HCe=n(UNt,"SPAN",{});var JNt=s(HCe);T(Jx.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),_Dr=i(mQe),UCe=n(mQe,"SPAN",{});var YNt=s(UCe);uDr=r(YNt,"FlaxAutoModelForPreTraining"),YNt.forEach(t),mQe.forEach(t),aXe=i(f),_r=n(f,"DIV",{class:!0});var ri=s(_r);T(Yx.$$.fragment,ri),bDr=i(ri),Jc=n(ri,"P",{});var cte=s(Jc);vDr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GZ=n(cte,"A",{href:!0});var KNt=s(GZ);FDr=r(KNt,"from_pretrained()"),KNt.forEach(t),TDr=r(cte," class method or the "),OZ=n(cte,"A",{href:!0});var ZNt=s(OZ);MDr=r(ZNt,"from_config()"),ZNt.forEach(t),EDr=r(cte,` class
method.`),cte.forEach(t),CDr=i(ri),Kx=n(ri,"P",{});var gQe=s(Kx);wDr=r(gQe,"This class cannot be instantiated directly using "),JCe=n(gQe,"CODE",{});var eIt=s(JCe);ADr=r(eIt,"__init__()"),eIt.forEach(t),LDr=r(gQe," (throws an error)."),gQe.forEach(t),yDr=i(ri),Qt=n(ri,"DIV",{class:!0});var g6=s(Qt);T(Zx.$$.fragment,g6),xDr=i(g6),YCe=n(g6,"P",{});var oIt=s(YCe);$Dr=r(oIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oIt.forEach(t),kDr=i(g6),Yc=n(g6,"P",{});var fte=s(Yc);SDr=r(fte,`Note:
Loading a model from its configuration file does `),KCe=n(fte,"STRONG",{});var rIt=s(KCe);RDr=r(rIt,"not"),rIt.forEach(t),PDr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=n(fte,"A",{href:!0});var tIt=s(VZ);BDr=r(tIt,"from_pretrained()"),tIt.forEach(t),NDr=r(fte," to load the model weights."),fte.forEach(t),IDr=i(g6),T(v3.$$.fragment,g6),g6.forEach(t),qDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(e$.$$.fragment,ti),jDr=i(ti),ZCe=n(ti,"P",{});var aIt=s(ZCe);DDr=r(aIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aIt.forEach(t),GDr=i(ti),Mn=n(ti,"P",{});var h6=s(Mn);ODr=r(h6,"The model class to instantiate is selected based on the "),e5e=n(h6,"CODE",{});var nIt=s(e5e);VDr=r(nIt,"model_type"),nIt.forEach(t),XDr=r(h6,` property of the config object (either
passed as an argument or loaded from `),o5e=n(h6,"CODE",{});var sIt=s(o5e);zDr=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),QDr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(h6,"CODE",{});var lIt=s(r5e);WDr=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),HDr=r(h6,":"),h6.forEach(t),UDr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);F3=n(we,"LI",{});var ZDe=s(F3);t5e=n(ZDe,"STRONG",{});var iIt=s(t5e);JDr=r(iIt,"albert"),iIt.forEach(t),YDr=r(ZDe," \u2014 "),XZ=n(ZDe,"A",{href:!0});var dIt=s(XZ);KDr=r(dIt,"FlaxAlbertForPreTraining"),dIt.forEach(t),ZDr=r(ZDe," (ALBERT model)"),ZDe.forEach(t),eGr=i(we),T3=n(we,"LI",{});var eGe=s(T3);a5e=n(eGe,"STRONG",{});var cIt=s(a5e);oGr=r(cIt,"bart"),cIt.forEach(t),rGr=r(eGe," \u2014 "),zZ=n(eGe,"A",{href:!0});var fIt=s(zZ);tGr=r(fIt,"FlaxBartForConditionalGeneration"),fIt.forEach(t),aGr=r(eGe," (BART model)"),eGe.forEach(t),nGr=i(we),M3=n(we,"LI",{});var oGe=s(M3);n5e=n(oGe,"STRONG",{});var mIt=s(n5e);sGr=r(mIt,"bert"),mIt.forEach(t),lGr=r(oGe," \u2014 "),QZ=n(oGe,"A",{href:!0});var gIt=s(QZ);iGr=r(gIt,"FlaxBertForPreTraining"),gIt.forEach(t),dGr=r(oGe," (BERT model)"),oGe.forEach(t),cGr=i(we),E3=n(we,"LI",{});var rGe=s(E3);s5e=n(rGe,"STRONG",{});var hIt=s(s5e);fGr=r(hIt,"big_bird"),hIt.forEach(t),mGr=r(rGe," \u2014 "),WZ=n(rGe,"A",{href:!0});var pIt=s(WZ);gGr=r(pIt,"FlaxBigBirdForPreTraining"),pIt.forEach(t),hGr=r(rGe," (BigBird model)"),rGe.forEach(t),pGr=i(we),C3=n(we,"LI",{});var tGe=s(C3);l5e=n(tGe,"STRONG",{});var _It=s(l5e);_Gr=r(_It,"electra"),_It.forEach(t),uGr=r(tGe," \u2014 "),HZ=n(tGe,"A",{href:!0});var uIt=s(HZ);bGr=r(uIt,"FlaxElectraForPreTraining"),uIt.forEach(t),vGr=r(tGe," (ELECTRA model)"),tGe.forEach(t),FGr=i(we),w3=n(we,"LI",{});var aGe=s(w3);i5e=n(aGe,"STRONG",{});var bIt=s(i5e);TGr=r(bIt,"longt5"),bIt.forEach(t),MGr=r(aGe," \u2014 "),UZ=n(aGe,"A",{href:!0});var vIt=s(UZ);EGr=r(vIt,"FlaxLongT5ForConditionalGeneration"),vIt.forEach(t),CGr=r(aGe," (LongT5 model)"),aGe.forEach(t),wGr=i(we),A3=n(we,"LI",{});var nGe=s(A3);d5e=n(nGe,"STRONG",{});var FIt=s(d5e);AGr=r(FIt,"mbart"),FIt.forEach(t),LGr=r(nGe," \u2014 "),JZ=n(nGe,"A",{href:!0});var TIt=s(JZ);yGr=r(TIt,"FlaxMBartForConditionalGeneration"),TIt.forEach(t),xGr=r(nGe," (mBART model)"),nGe.forEach(t),$Gr=i(we),L3=n(we,"LI",{});var sGe=s(L3);c5e=n(sGe,"STRONG",{});var MIt=s(c5e);kGr=r(MIt,"mt5"),MIt.forEach(t),SGr=r(sGe," \u2014 "),YZ=n(sGe,"A",{href:!0});var EIt=s(YZ);RGr=r(EIt,"FlaxMT5ForConditionalGeneration"),EIt.forEach(t),PGr=r(sGe," (MT5 model)"),sGe.forEach(t),BGr=i(we),y3=n(we,"LI",{});var lGe=s(y3);f5e=n(lGe,"STRONG",{});var CIt=s(f5e);NGr=r(CIt,"roberta"),CIt.forEach(t),IGr=r(lGe," \u2014 "),KZ=n(lGe,"A",{href:!0});var wIt=s(KZ);qGr=r(wIt,"FlaxRobertaForMaskedLM"),wIt.forEach(t),jGr=r(lGe," (RoBERTa model)"),lGe.forEach(t),DGr=i(we),x3=n(we,"LI",{});var iGe=s(x3);m5e=n(iGe,"STRONG",{});var AIt=s(m5e);GGr=r(AIt,"roformer"),AIt.forEach(t),OGr=r(iGe," \u2014 "),ZZ=n(iGe,"A",{href:!0});var LIt=s(ZZ);VGr=r(LIt,"FlaxRoFormerForMaskedLM"),LIt.forEach(t),XGr=r(iGe," (RoFormer model)"),iGe.forEach(t),zGr=i(we),$3=n(we,"LI",{});var dGe=s($3);g5e=n(dGe,"STRONG",{});var yIt=s(g5e);QGr=r(yIt,"t5"),yIt.forEach(t),WGr=r(dGe," \u2014 "),eee=n(dGe,"A",{href:!0});var xIt=s(eee);HGr=r(xIt,"FlaxT5ForConditionalGeneration"),xIt.forEach(t),UGr=r(dGe," (T5 model)"),dGe.forEach(t),JGr=i(we),k3=n(we,"LI",{});var cGe=s(k3);h5e=n(cGe,"STRONG",{});var $It=s(h5e);YGr=r($It,"wav2vec2"),$It.forEach(t),KGr=r(cGe," \u2014 "),oee=n(cGe,"A",{href:!0});var kIt=s(oee);ZGr=r(kIt,"FlaxWav2Vec2ForPreTraining"),kIt.forEach(t),eOr=r(cGe," (Wav2Vec2 model)"),cGe.forEach(t),oOr=i(we),S3=n(we,"LI",{});var fGe=s(S3);p5e=n(fGe,"STRONG",{});var SIt=s(p5e);rOr=r(SIt,"xlm-roberta"),SIt.forEach(t),tOr=r(fGe," \u2014 "),ree=n(fGe,"A",{href:!0});var RIt=s(ree);aOr=r(RIt,"FlaxXLMRobertaForMaskedLM"),RIt.forEach(t),nOr=r(fGe," (XLM-RoBERTa model)"),fGe.forEach(t),we.forEach(t),sOr=i(ti),T(R3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),nXe=i(f),Kc=n(f,"H2",{class:!0});var hQe=s(Kc);P3=n(hQe,"A",{id:!0,class:!0,href:!0});var PIt=s(P3);_5e=n(PIt,"SPAN",{});var BIt=s(_5e);T(o$.$$.fragment,BIt),BIt.forEach(t),PIt.forEach(t),lOr=i(hQe),u5e=n(hQe,"SPAN",{});var NIt=s(u5e);iOr=r(NIt,"FlaxAutoModelForMaskedLM"),NIt.forEach(t),hQe.forEach(t),sXe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(r$.$$.fragment,ai),dOr=i(ai),Zc=n(ai,"P",{});var mte=s(Zc);cOr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tee=n(mte,"A",{href:!0});var IIt=s(tee);fOr=r(IIt,"from_pretrained()"),IIt.forEach(t),mOr=r(mte," class method or the "),aee=n(mte,"A",{href:!0});var qIt=s(aee);gOr=r(qIt,"from_config()"),qIt.forEach(t),hOr=r(mte,` class
method.`),mte.forEach(t),pOr=i(ai),t$=n(ai,"P",{});var pQe=s(t$);_Or=r(pQe,"This class cannot be instantiated directly using "),b5e=n(pQe,"CODE",{});var jIt=s(b5e);uOr=r(jIt,"__init__()"),jIt.forEach(t),bOr=r(pQe," (throws an error)."),pQe.forEach(t),vOr=i(ai),Wt=n(ai,"DIV",{class:!0});var p6=s(Wt);T(a$.$$.fragment,p6),FOr=i(p6),v5e=n(p6,"P",{});var DIt=s(v5e);TOr=r(DIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DIt.forEach(t),MOr=i(p6),ef=n(p6,"P",{});var gte=s(ef);EOr=r(gte,`Note:
Loading a model from its configuration file does `),F5e=n(gte,"STRONG",{});var GIt=s(F5e);COr=r(GIt,"not"),GIt.forEach(t),wOr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(gte,"A",{href:!0});var OIt=s(nee);AOr=r(OIt,"from_pretrained()"),OIt.forEach(t),LOr=r(gte," to load the model weights."),gte.forEach(t),yOr=i(p6),T(B3.$$.fragment,p6),p6.forEach(t),xOr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(n$.$$.fragment,ni),$Or=i(ni),T5e=n(ni,"P",{});var VIt=s(T5e);kOr=r(VIt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VIt.forEach(t),SOr=i(ni),En=n(ni,"P",{});var _6=s(En);ROr=r(_6,"The model class to instantiate is selected based on the "),M5e=n(_6,"CODE",{});var XIt=s(M5e);POr=r(XIt,"model_type"),XIt.forEach(t),BOr=r(_6,` property of the config object (either
passed as an argument or loaded from `),E5e=n(_6,"CODE",{});var zIt=s(E5e);NOr=r(zIt,"pretrained_model_name_or_path"),zIt.forEach(t),IOr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(_6,"CODE",{});var QIt=s(C5e);qOr=r(QIt,"pretrained_model_name_or_path"),QIt.forEach(t),jOr=r(_6,":"),_6.forEach(t),DOr=i(ni),$e=n(ni,"UL",{});var qe=s($e);N3=n(qe,"LI",{});var mGe=s(N3);w5e=n(mGe,"STRONG",{});var WIt=s(w5e);GOr=r(WIt,"albert"),WIt.forEach(t),OOr=r(mGe," \u2014 "),see=n(mGe,"A",{href:!0});var HIt=s(see);VOr=r(HIt,"FlaxAlbertForMaskedLM"),HIt.forEach(t),XOr=r(mGe," (ALBERT model)"),mGe.forEach(t),zOr=i(qe),I3=n(qe,"LI",{});var gGe=s(I3);A5e=n(gGe,"STRONG",{});var UIt=s(A5e);QOr=r(UIt,"bart"),UIt.forEach(t),WOr=r(gGe," \u2014 "),lee=n(gGe,"A",{href:!0});var JIt=s(lee);HOr=r(JIt,"FlaxBartForConditionalGeneration"),JIt.forEach(t),UOr=r(gGe," (BART model)"),gGe.forEach(t),JOr=i(qe),q3=n(qe,"LI",{});var hGe=s(q3);L5e=n(hGe,"STRONG",{});var YIt=s(L5e);YOr=r(YIt,"bert"),YIt.forEach(t),KOr=r(hGe," \u2014 "),iee=n(hGe,"A",{href:!0});var KIt=s(iee);ZOr=r(KIt,"FlaxBertForMaskedLM"),KIt.forEach(t),eVr=r(hGe," (BERT model)"),hGe.forEach(t),oVr=i(qe),j3=n(qe,"LI",{});var pGe=s(j3);y5e=n(pGe,"STRONG",{});var ZIt=s(y5e);rVr=r(ZIt,"big_bird"),ZIt.forEach(t),tVr=r(pGe," \u2014 "),dee=n(pGe,"A",{href:!0});var eqt=s(dee);aVr=r(eqt,"FlaxBigBirdForMaskedLM"),eqt.forEach(t),nVr=r(pGe," (BigBird model)"),pGe.forEach(t),sVr=i(qe),D3=n(qe,"LI",{});var _Ge=s(D3);x5e=n(_Ge,"STRONG",{});var oqt=s(x5e);lVr=r(oqt,"distilbert"),oqt.forEach(t),iVr=r(_Ge," \u2014 "),cee=n(_Ge,"A",{href:!0});var rqt=s(cee);dVr=r(rqt,"FlaxDistilBertForMaskedLM"),rqt.forEach(t),cVr=r(_Ge," (DistilBERT model)"),_Ge.forEach(t),fVr=i(qe),G3=n(qe,"LI",{});var uGe=s(G3);$5e=n(uGe,"STRONG",{});var tqt=s($5e);mVr=r(tqt,"electra"),tqt.forEach(t),gVr=r(uGe," \u2014 "),fee=n(uGe,"A",{href:!0});var aqt=s(fee);hVr=r(aqt,"FlaxElectraForMaskedLM"),aqt.forEach(t),pVr=r(uGe," (ELECTRA model)"),uGe.forEach(t),_Vr=i(qe),O3=n(qe,"LI",{});var bGe=s(O3);k5e=n(bGe,"STRONG",{});var nqt=s(k5e);uVr=r(nqt,"mbart"),nqt.forEach(t),bVr=r(bGe," \u2014 "),mee=n(bGe,"A",{href:!0});var sqt=s(mee);vVr=r(sqt,"FlaxMBartForConditionalGeneration"),sqt.forEach(t),FVr=r(bGe," (mBART model)"),bGe.forEach(t),TVr=i(qe),V3=n(qe,"LI",{});var vGe=s(V3);S5e=n(vGe,"STRONG",{});var lqt=s(S5e);MVr=r(lqt,"roberta"),lqt.forEach(t),EVr=r(vGe," \u2014 "),gee=n(vGe,"A",{href:!0});var iqt=s(gee);CVr=r(iqt,"FlaxRobertaForMaskedLM"),iqt.forEach(t),wVr=r(vGe," (RoBERTa model)"),vGe.forEach(t),AVr=i(qe),X3=n(qe,"LI",{});var FGe=s(X3);R5e=n(FGe,"STRONG",{});var dqt=s(R5e);LVr=r(dqt,"roformer"),dqt.forEach(t),yVr=r(FGe," \u2014 "),hee=n(FGe,"A",{href:!0});var cqt=s(hee);xVr=r(cqt,"FlaxRoFormerForMaskedLM"),cqt.forEach(t),$Vr=r(FGe," (RoFormer model)"),FGe.forEach(t),kVr=i(qe),z3=n(qe,"LI",{});var TGe=s(z3);P5e=n(TGe,"STRONG",{});var fqt=s(P5e);SVr=r(fqt,"xlm-roberta"),fqt.forEach(t),RVr=r(TGe," \u2014 "),pee=n(TGe,"A",{href:!0});var mqt=s(pee);PVr=r(mqt,"FlaxXLMRobertaForMaskedLM"),mqt.forEach(t),BVr=r(TGe," (XLM-RoBERTa model)"),TGe.forEach(t),qe.forEach(t),NVr=i(ni),T(Q3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),lXe=i(f),of=n(f,"H2",{class:!0});var _Qe=s(of);W3=n(_Qe,"A",{id:!0,class:!0,href:!0});var gqt=s(W3);B5e=n(gqt,"SPAN",{});var hqt=s(B5e);T(s$.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),IVr=i(_Qe),N5e=n(_Qe,"SPAN",{});var pqt=s(N5e);qVr=r(pqt,"FlaxAutoModelForSeq2SeqLM"),pqt.forEach(t),_Qe.forEach(t),iXe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(l$.$$.fragment,si),jVr=i(si),rf=n(si,"P",{});var hte=s(rf);DVr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_ee=n(hte,"A",{href:!0});var _qt=s(_ee);GVr=r(_qt,"from_pretrained()"),_qt.forEach(t),OVr=r(hte," class method or the "),uee=n(hte,"A",{href:!0});var uqt=s(uee);VVr=r(uqt,"from_config()"),uqt.forEach(t),XVr=r(hte,` class
method.`),hte.forEach(t),zVr=i(si),i$=n(si,"P",{});var uQe=s(i$);QVr=r(uQe,"This class cannot be instantiated directly using "),I5e=n(uQe,"CODE",{});var bqt=s(I5e);WVr=r(bqt,"__init__()"),bqt.forEach(t),HVr=r(uQe," (throws an error)."),uQe.forEach(t),UVr=i(si),Ht=n(si,"DIV",{class:!0});var u6=s(Ht);T(d$.$$.fragment,u6),JVr=i(u6),q5e=n(u6,"P",{});var vqt=s(q5e);YVr=r(vqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vqt.forEach(t),KVr=i(u6),tf=n(u6,"P",{});var pte=s(tf);ZVr=r(pte,`Note:
Loading a model from its configuration file does `),j5e=n(pte,"STRONG",{});var Fqt=s(j5e);eXr=r(Fqt,"not"),Fqt.forEach(t),oXr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=n(pte,"A",{href:!0});var Tqt=s(bee);rXr=r(Tqt,"from_pretrained()"),Tqt.forEach(t),tXr=r(pte," to load the model weights."),pte.forEach(t),aXr=i(u6),T(H3.$$.fragment,u6),u6.forEach(t),nXr=i(si),Qr=n(si,"DIV",{class:!0});var li=s(Qr);T(c$.$$.fragment,li),sXr=i(li),D5e=n(li,"P",{});var Mqt=s(D5e);lXr=r(Mqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mqt.forEach(t),iXr=i(li),Cn=n(li,"P",{});var b6=s(Cn);dXr=r(b6,"The model class to instantiate is selected based on the "),G5e=n(b6,"CODE",{});var Eqt=s(G5e);cXr=r(Eqt,"model_type"),Eqt.forEach(t),fXr=r(b6,` property of the config object (either
passed as an argument or loaded from `),O5e=n(b6,"CODE",{});var Cqt=s(O5e);mXr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),gXr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(b6,"CODE",{});var wqt=s(V5e);hXr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),pXr=r(b6,":"),b6.forEach(t),_Xr=i(li),ke=n(li,"UL",{});var je=s(ke);U3=n(je,"LI",{});var MGe=s(U3);X5e=n(MGe,"STRONG",{});var Aqt=s(X5e);uXr=r(Aqt,"bart"),Aqt.forEach(t),bXr=r(MGe," \u2014 "),vee=n(MGe,"A",{href:!0});var Lqt=s(vee);vXr=r(Lqt,"FlaxBartForConditionalGeneration"),Lqt.forEach(t),FXr=r(MGe," (BART model)"),MGe.forEach(t),TXr=i(je),J3=n(je,"LI",{});var EGe=s(J3);z5e=n(EGe,"STRONG",{});var yqt=s(z5e);MXr=r(yqt,"blenderbot"),yqt.forEach(t),EXr=r(EGe," \u2014 "),Fee=n(EGe,"A",{href:!0});var xqt=s(Fee);CXr=r(xqt,"FlaxBlenderbotForConditionalGeneration"),xqt.forEach(t),wXr=r(EGe," (Blenderbot model)"),EGe.forEach(t),AXr=i(je),Y3=n(je,"LI",{});var CGe=s(Y3);Q5e=n(CGe,"STRONG",{});var $qt=s(Q5e);LXr=r($qt,"blenderbot-small"),$qt.forEach(t),yXr=r(CGe," \u2014 "),Tee=n(CGe,"A",{href:!0});var kqt=s(Tee);xXr=r(kqt,"FlaxBlenderbotSmallForConditionalGeneration"),kqt.forEach(t),$Xr=r(CGe," (BlenderbotSmall model)"),CGe.forEach(t),kXr=i(je),K3=n(je,"LI",{});var wGe=s(K3);W5e=n(wGe,"STRONG",{});var Sqt=s(W5e);SXr=r(Sqt,"encoder-decoder"),Sqt.forEach(t),RXr=r(wGe," \u2014 "),Mee=n(wGe,"A",{href:!0});var Rqt=s(Mee);PXr=r(Rqt,"FlaxEncoderDecoderModel"),Rqt.forEach(t),BXr=r(wGe," (Encoder decoder model)"),wGe.forEach(t),NXr=i(je),Z3=n(je,"LI",{});var AGe=s(Z3);H5e=n(AGe,"STRONG",{});var Pqt=s(H5e);IXr=r(Pqt,"longt5"),Pqt.forEach(t),qXr=r(AGe," \u2014 "),Eee=n(AGe,"A",{href:!0});var Bqt=s(Eee);jXr=r(Bqt,"FlaxLongT5ForConditionalGeneration"),Bqt.forEach(t),DXr=r(AGe," (LongT5 model)"),AGe.forEach(t),GXr=i(je),e0=n(je,"LI",{});var LGe=s(e0);U5e=n(LGe,"STRONG",{});var Nqt=s(U5e);OXr=r(Nqt,"marian"),Nqt.forEach(t),VXr=r(LGe," \u2014 "),Cee=n(LGe,"A",{href:!0});var Iqt=s(Cee);XXr=r(Iqt,"FlaxMarianMTModel"),Iqt.forEach(t),zXr=r(LGe," (Marian model)"),LGe.forEach(t),QXr=i(je),o0=n(je,"LI",{});var yGe=s(o0);J5e=n(yGe,"STRONG",{});var qqt=s(J5e);WXr=r(qqt,"mbart"),qqt.forEach(t),HXr=r(yGe," \u2014 "),wee=n(yGe,"A",{href:!0});var jqt=s(wee);UXr=r(jqt,"FlaxMBartForConditionalGeneration"),jqt.forEach(t),JXr=r(yGe," (mBART model)"),yGe.forEach(t),YXr=i(je),r0=n(je,"LI",{});var xGe=s(r0);Y5e=n(xGe,"STRONG",{});var Dqt=s(Y5e);KXr=r(Dqt,"mt5"),Dqt.forEach(t),ZXr=r(xGe," \u2014 "),Aee=n(xGe,"A",{href:!0});var Gqt=s(Aee);ezr=r(Gqt,"FlaxMT5ForConditionalGeneration"),Gqt.forEach(t),ozr=r(xGe," (MT5 model)"),xGe.forEach(t),rzr=i(je),t0=n(je,"LI",{});var $Ge=s(t0);K5e=n($Ge,"STRONG",{});var Oqt=s(K5e);tzr=r(Oqt,"pegasus"),Oqt.forEach(t),azr=r($Ge," \u2014 "),Lee=n($Ge,"A",{href:!0});var Vqt=s(Lee);nzr=r(Vqt,"FlaxPegasusForConditionalGeneration"),Vqt.forEach(t),szr=r($Ge," (Pegasus model)"),$Ge.forEach(t),lzr=i(je),a0=n(je,"LI",{});var kGe=s(a0);Z5e=n(kGe,"STRONG",{});var Xqt=s(Z5e);izr=r(Xqt,"t5"),Xqt.forEach(t),dzr=r(kGe," \u2014 "),yee=n(kGe,"A",{href:!0});var zqt=s(yee);czr=r(zqt,"FlaxT5ForConditionalGeneration"),zqt.forEach(t),fzr=r(kGe," (T5 model)"),kGe.forEach(t),je.forEach(t),mzr=i(li),T(n0.$$.fragment,li),li.forEach(t),si.forEach(t),dXe=i(f),af=n(f,"H2",{class:!0});var bQe=s(af);s0=n(bQe,"A",{id:!0,class:!0,href:!0});var Qqt=s(s0);e3e=n(Qqt,"SPAN",{});var Wqt=s(e3e);T(f$.$$.fragment,Wqt),Wqt.forEach(t),Qqt.forEach(t),gzr=i(bQe),o3e=n(bQe,"SPAN",{});var Hqt=s(o3e);hzr=r(Hqt,"FlaxAutoModelForSequenceClassification"),Hqt.forEach(t),bQe.forEach(t),cXe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(m$.$$.fragment,ii),pzr=i(ii),nf=n(ii,"P",{});var _te=s(nf);_zr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xee=n(_te,"A",{href:!0});var Uqt=s(xee);uzr=r(Uqt,"from_pretrained()"),Uqt.forEach(t),bzr=r(_te," class method or the "),$ee=n(_te,"A",{href:!0});var Jqt=s($ee);vzr=r(Jqt,"from_config()"),Jqt.forEach(t),Fzr=r(_te,` class
method.`),_te.forEach(t),Tzr=i(ii),g$=n(ii,"P",{});var vQe=s(g$);Mzr=r(vQe,"This class cannot be instantiated directly using "),r3e=n(vQe,"CODE",{});var Yqt=s(r3e);Ezr=r(Yqt,"__init__()"),Yqt.forEach(t),Czr=r(vQe," (throws an error)."),vQe.forEach(t),wzr=i(ii),Ut=n(ii,"DIV",{class:!0});var v6=s(Ut);T(h$.$$.fragment,v6),Azr=i(v6),t3e=n(v6,"P",{});var Kqt=s(t3e);Lzr=r(Kqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kqt.forEach(t),yzr=i(v6),sf=n(v6,"P",{});var ute=s(sf);xzr=r(ute,`Note:
Loading a model from its configuration file does `),a3e=n(ute,"STRONG",{});var Zqt=s(a3e);$zr=r(Zqt,"not"),Zqt.forEach(t),kzr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=n(ute,"A",{href:!0});var ejt=s(kee);Szr=r(ejt,"from_pretrained()"),ejt.forEach(t),Rzr=r(ute," to load the model weights."),ute.forEach(t),Pzr=i(v6),T(l0.$$.fragment,v6),v6.forEach(t),Bzr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(p$.$$.fragment,di),Nzr=i(di),n3e=n(di,"P",{});var ojt=s(n3e);Izr=r(ojt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ojt.forEach(t),qzr=i(di),wn=n(di,"P",{});var F6=s(wn);jzr=r(F6,"The model class to instantiate is selected based on the "),s3e=n(F6,"CODE",{});var rjt=s(s3e);Dzr=r(rjt,"model_type"),rjt.forEach(t),Gzr=r(F6,` property of the config object (either
passed as an argument or loaded from `),l3e=n(F6,"CODE",{});var tjt=s(l3e);Ozr=r(tjt,"pretrained_model_name_or_path"),tjt.forEach(t),Vzr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(F6,"CODE",{});var ajt=s(i3e);Xzr=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),zzr=r(F6,":"),F6.forEach(t),Qzr=i(di),Se=n(di,"UL",{});var De=s(Se);i0=n(De,"LI",{});var SGe=s(i0);d3e=n(SGe,"STRONG",{});var njt=s(d3e);Wzr=r(njt,"albert"),njt.forEach(t),Hzr=r(SGe," \u2014 "),See=n(SGe,"A",{href:!0});var sjt=s(See);Uzr=r(sjt,"FlaxAlbertForSequenceClassification"),sjt.forEach(t),Jzr=r(SGe," (ALBERT model)"),SGe.forEach(t),Yzr=i(De),d0=n(De,"LI",{});var RGe=s(d0);c3e=n(RGe,"STRONG",{});var ljt=s(c3e);Kzr=r(ljt,"bart"),ljt.forEach(t),Zzr=r(RGe," \u2014 "),Ree=n(RGe,"A",{href:!0});var ijt=s(Ree);eQr=r(ijt,"FlaxBartForSequenceClassification"),ijt.forEach(t),oQr=r(RGe," (BART model)"),RGe.forEach(t),rQr=i(De),c0=n(De,"LI",{});var PGe=s(c0);f3e=n(PGe,"STRONG",{});var djt=s(f3e);tQr=r(djt,"bert"),djt.forEach(t),aQr=r(PGe," \u2014 "),Pee=n(PGe,"A",{href:!0});var cjt=s(Pee);nQr=r(cjt,"FlaxBertForSequenceClassification"),cjt.forEach(t),sQr=r(PGe," (BERT model)"),PGe.forEach(t),lQr=i(De),f0=n(De,"LI",{});var BGe=s(f0);m3e=n(BGe,"STRONG",{});var fjt=s(m3e);iQr=r(fjt,"big_bird"),fjt.forEach(t),dQr=r(BGe," \u2014 "),Bee=n(BGe,"A",{href:!0});var mjt=s(Bee);cQr=r(mjt,"FlaxBigBirdForSequenceClassification"),mjt.forEach(t),fQr=r(BGe," (BigBird model)"),BGe.forEach(t),mQr=i(De),m0=n(De,"LI",{});var NGe=s(m0);g3e=n(NGe,"STRONG",{});var gjt=s(g3e);gQr=r(gjt,"distilbert"),gjt.forEach(t),hQr=r(NGe," \u2014 "),Nee=n(NGe,"A",{href:!0});var hjt=s(Nee);pQr=r(hjt,"FlaxDistilBertForSequenceClassification"),hjt.forEach(t),_Qr=r(NGe," (DistilBERT model)"),NGe.forEach(t),uQr=i(De),g0=n(De,"LI",{});var IGe=s(g0);h3e=n(IGe,"STRONG",{});var pjt=s(h3e);bQr=r(pjt,"electra"),pjt.forEach(t),vQr=r(IGe," \u2014 "),Iee=n(IGe,"A",{href:!0});var _jt=s(Iee);FQr=r(_jt,"FlaxElectraForSequenceClassification"),_jt.forEach(t),TQr=r(IGe," (ELECTRA model)"),IGe.forEach(t),MQr=i(De),h0=n(De,"LI",{});var qGe=s(h0);p3e=n(qGe,"STRONG",{});var ujt=s(p3e);EQr=r(ujt,"mbart"),ujt.forEach(t),CQr=r(qGe," \u2014 "),qee=n(qGe,"A",{href:!0});var bjt=s(qee);wQr=r(bjt,"FlaxMBartForSequenceClassification"),bjt.forEach(t),AQr=r(qGe," (mBART model)"),qGe.forEach(t),LQr=i(De),p0=n(De,"LI",{});var jGe=s(p0);_3e=n(jGe,"STRONG",{});var vjt=s(_3e);yQr=r(vjt,"roberta"),vjt.forEach(t),xQr=r(jGe," \u2014 "),jee=n(jGe,"A",{href:!0});var Fjt=s(jee);$Qr=r(Fjt,"FlaxRobertaForSequenceClassification"),Fjt.forEach(t),kQr=r(jGe," (RoBERTa model)"),jGe.forEach(t),SQr=i(De),_0=n(De,"LI",{});var DGe=s(_0);u3e=n(DGe,"STRONG",{});var Tjt=s(u3e);RQr=r(Tjt,"roformer"),Tjt.forEach(t),PQr=r(DGe," \u2014 "),Dee=n(DGe,"A",{href:!0});var Mjt=s(Dee);BQr=r(Mjt,"FlaxRoFormerForSequenceClassification"),Mjt.forEach(t),NQr=r(DGe," (RoFormer model)"),DGe.forEach(t),IQr=i(De),u0=n(De,"LI",{});var GGe=s(u0);b3e=n(GGe,"STRONG",{});var Ejt=s(b3e);qQr=r(Ejt,"xlm-roberta"),Ejt.forEach(t),jQr=r(GGe," \u2014 "),Gee=n(GGe,"A",{href:!0});var Cjt=s(Gee);DQr=r(Cjt,"FlaxXLMRobertaForSequenceClassification"),Cjt.forEach(t),GQr=r(GGe," (XLM-RoBERTa model)"),GGe.forEach(t),De.forEach(t),OQr=i(di),T(b0.$$.fragment,di),di.forEach(t),ii.forEach(t),fXe=i(f),lf=n(f,"H2",{class:!0});var FQe=s(lf);v0=n(FQe,"A",{id:!0,class:!0,href:!0});var wjt=s(v0);v3e=n(wjt,"SPAN",{});var Ajt=s(v3e);T(_$.$$.fragment,Ajt),Ajt.forEach(t),wjt.forEach(t),VQr=i(FQe),F3e=n(FQe,"SPAN",{});var Ljt=s(F3e);XQr=r(Ljt,"FlaxAutoModelForQuestionAnswering"),Ljt.forEach(t),FQe.forEach(t),mXe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(u$.$$.fragment,ci),zQr=i(ci),df=n(ci,"P",{});var bte=s(df);QQr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oee=n(bte,"A",{href:!0});var yjt=s(Oee);WQr=r(yjt,"from_pretrained()"),yjt.forEach(t),HQr=r(bte," class method or the "),Vee=n(bte,"A",{href:!0});var xjt=s(Vee);UQr=r(xjt,"from_config()"),xjt.forEach(t),JQr=r(bte,` class
method.`),bte.forEach(t),YQr=i(ci),b$=n(ci,"P",{});var TQe=s(b$);KQr=r(TQe,"This class cannot be instantiated directly using "),T3e=n(TQe,"CODE",{});var $jt=s(T3e);ZQr=r($jt,"__init__()"),$jt.forEach(t),eWr=r(TQe," (throws an error)."),TQe.forEach(t),oWr=i(ci),Jt=n(ci,"DIV",{class:!0});var T6=s(Jt);T(v$.$$.fragment,T6),rWr=i(T6),M3e=n(T6,"P",{});var kjt=s(M3e);tWr=r(kjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kjt.forEach(t),aWr=i(T6),cf=n(T6,"P",{});var vte=s(cf);nWr=r(vte,`Note:
Loading a model from its configuration file does `),E3e=n(vte,"STRONG",{});var Sjt=s(E3e);sWr=r(Sjt,"not"),Sjt.forEach(t),lWr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(vte,"A",{href:!0});var Rjt=s(Xee);iWr=r(Rjt,"from_pretrained()"),Rjt.forEach(t),dWr=r(vte," to load the model weights."),vte.forEach(t),cWr=i(T6),T(F0.$$.fragment,T6),T6.forEach(t),fWr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(F$.$$.fragment,fi),mWr=i(fi),C3e=n(fi,"P",{});var Pjt=s(C3e);gWr=r(Pjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pjt.forEach(t),hWr=i(fi),An=n(fi,"P",{});var M6=s(An);pWr=r(M6,"The model class to instantiate is selected based on the "),w3e=n(M6,"CODE",{});var Bjt=s(w3e);_Wr=r(Bjt,"model_type"),Bjt.forEach(t),uWr=r(M6,` property of the config object (either
passed as an argument or loaded from `),A3e=n(M6,"CODE",{});var Njt=s(A3e);bWr=r(Njt,"pretrained_model_name_or_path"),Njt.forEach(t),vWr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=n(M6,"CODE",{});var Ijt=s(L3e);FWr=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),TWr=r(M6,":"),M6.forEach(t),MWr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);T0=n(Ge,"LI",{});var OGe=s(T0);y3e=n(OGe,"STRONG",{});var qjt=s(y3e);EWr=r(qjt,"albert"),qjt.forEach(t),CWr=r(OGe," \u2014 "),zee=n(OGe,"A",{href:!0});var jjt=s(zee);wWr=r(jjt,"FlaxAlbertForQuestionAnswering"),jjt.forEach(t),AWr=r(OGe," (ALBERT model)"),OGe.forEach(t),LWr=i(Ge),M0=n(Ge,"LI",{});var VGe=s(M0);x3e=n(VGe,"STRONG",{});var Djt=s(x3e);yWr=r(Djt,"bart"),Djt.forEach(t),xWr=r(VGe," \u2014 "),Qee=n(VGe,"A",{href:!0});var Gjt=s(Qee);$Wr=r(Gjt,"FlaxBartForQuestionAnswering"),Gjt.forEach(t),kWr=r(VGe," (BART model)"),VGe.forEach(t),SWr=i(Ge),E0=n(Ge,"LI",{});var XGe=s(E0);$3e=n(XGe,"STRONG",{});var Ojt=s($3e);RWr=r(Ojt,"bert"),Ojt.forEach(t),PWr=r(XGe," \u2014 "),Wee=n(XGe,"A",{href:!0});var Vjt=s(Wee);BWr=r(Vjt,"FlaxBertForQuestionAnswering"),Vjt.forEach(t),NWr=r(XGe," (BERT model)"),XGe.forEach(t),IWr=i(Ge),C0=n(Ge,"LI",{});var zGe=s(C0);k3e=n(zGe,"STRONG",{});var Xjt=s(k3e);qWr=r(Xjt,"big_bird"),Xjt.forEach(t),jWr=r(zGe," \u2014 "),Hee=n(zGe,"A",{href:!0});var zjt=s(Hee);DWr=r(zjt,"FlaxBigBirdForQuestionAnswering"),zjt.forEach(t),GWr=r(zGe," (BigBird model)"),zGe.forEach(t),OWr=i(Ge),w0=n(Ge,"LI",{});var QGe=s(w0);S3e=n(QGe,"STRONG",{});var Qjt=s(S3e);VWr=r(Qjt,"distilbert"),Qjt.forEach(t),XWr=r(QGe," \u2014 "),Uee=n(QGe,"A",{href:!0});var Wjt=s(Uee);zWr=r(Wjt,"FlaxDistilBertForQuestionAnswering"),Wjt.forEach(t),QWr=r(QGe," (DistilBERT model)"),QGe.forEach(t),WWr=i(Ge),A0=n(Ge,"LI",{});var WGe=s(A0);R3e=n(WGe,"STRONG",{});var Hjt=s(R3e);HWr=r(Hjt,"electra"),Hjt.forEach(t),UWr=r(WGe," \u2014 "),Jee=n(WGe,"A",{href:!0});var Ujt=s(Jee);JWr=r(Ujt,"FlaxElectraForQuestionAnswering"),Ujt.forEach(t),YWr=r(WGe," (ELECTRA model)"),WGe.forEach(t),KWr=i(Ge),L0=n(Ge,"LI",{});var HGe=s(L0);P3e=n(HGe,"STRONG",{});var Jjt=s(P3e);ZWr=r(Jjt,"mbart"),Jjt.forEach(t),eHr=r(HGe," \u2014 "),Yee=n(HGe,"A",{href:!0});var Yjt=s(Yee);oHr=r(Yjt,"FlaxMBartForQuestionAnswering"),Yjt.forEach(t),rHr=r(HGe," (mBART model)"),HGe.forEach(t),tHr=i(Ge),y0=n(Ge,"LI",{});var UGe=s(y0);B3e=n(UGe,"STRONG",{});var Kjt=s(B3e);aHr=r(Kjt,"roberta"),Kjt.forEach(t),nHr=r(UGe," \u2014 "),Kee=n(UGe,"A",{href:!0});var Zjt=s(Kee);sHr=r(Zjt,"FlaxRobertaForQuestionAnswering"),Zjt.forEach(t),lHr=r(UGe," (RoBERTa model)"),UGe.forEach(t),iHr=i(Ge),x0=n(Ge,"LI",{});var JGe=s(x0);N3e=n(JGe,"STRONG",{});var eDt=s(N3e);dHr=r(eDt,"roformer"),eDt.forEach(t),cHr=r(JGe," \u2014 "),Zee=n(JGe,"A",{href:!0});var oDt=s(Zee);fHr=r(oDt,"FlaxRoFormerForQuestionAnswering"),oDt.forEach(t),mHr=r(JGe," (RoFormer model)"),JGe.forEach(t),gHr=i(Ge),$0=n(Ge,"LI",{});var YGe=s($0);I3e=n(YGe,"STRONG",{});var rDt=s(I3e);hHr=r(rDt,"xlm-roberta"),rDt.forEach(t),pHr=r(YGe," \u2014 "),eoe=n(YGe,"A",{href:!0});var tDt=s(eoe);_Hr=r(tDt,"FlaxXLMRobertaForQuestionAnswering"),tDt.forEach(t),uHr=r(YGe," (XLM-RoBERTa model)"),YGe.forEach(t),Ge.forEach(t),bHr=i(fi),T(k0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),gXe=i(f),ff=n(f,"H2",{class:!0});var MQe=s(ff);S0=n(MQe,"A",{id:!0,class:!0,href:!0});var aDt=s(S0);q3e=n(aDt,"SPAN",{});var nDt=s(q3e);T(T$.$$.fragment,nDt),nDt.forEach(t),aDt.forEach(t),vHr=i(MQe),j3e=n(MQe,"SPAN",{});var sDt=s(j3e);FHr=r(sDt,"FlaxAutoModelForTokenClassification"),sDt.forEach(t),MQe.forEach(t),hXe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(M$.$$.fragment,mi),THr=i(mi),mf=n(mi,"P",{});var Fte=s(mf);MHr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ooe=n(Fte,"A",{href:!0});var lDt=s(ooe);EHr=r(lDt,"from_pretrained()"),lDt.forEach(t),CHr=r(Fte," class method or the "),roe=n(Fte,"A",{href:!0});var iDt=s(roe);wHr=r(iDt,"from_config()"),iDt.forEach(t),AHr=r(Fte,` class
method.`),Fte.forEach(t),LHr=i(mi),E$=n(mi,"P",{});var EQe=s(E$);yHr=r(EQe,"This class cannot be instantiated directly using "),D3e=n(EQe,"CODE",{});var dDt=s(D3e);xHr=r(dDt,"__init__()"),dDt.forEach(t),$Hr=r(EQe," (throws an error)."),EQe.forEach(t),kHr=i(mi),Yt=n(mi,"DIV",{class:!0});var E6=s(Yt);T(C$.$$.fragment,E6),SHr=i(E6),G3e=n(E6,"P",{});var cDt=s(G3e);RHr=r(cDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cDt.forEach(t),PHr=i(E6),gf=n(E6,"P",{});var Tte=s(gf);BHr=r(Tte,`Note:
Loading a model from its configuration file does `),O3e=n(Tte,"STRONG",{});var fDt=s(O3e);NHr=r(fDt,"not"),fDt.forEach(t),IHr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(Tte,"A",{href:!0});var mDt=s(toe);qHr=r(mDt,"from_pretrained()"),mDt.forEach(t),jHr=r(Tte," to load the model weights."),Tte.forEach(t),DHr=i(E6),T(R0.$$.fragment,E6),E6.forEach(t),GHr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(w$.$$.fragment,gi),OHr=i(gi),V3e=n(gi,"P",{});var gDt=s(V3e);VHr=r(gDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gDt.forEach(t),XHr=i(gi),Ln=n(gi,"P",{});var C6=s(Ln);zHr=r(C6,"The model class to instantiate is selected based on the "),X3e=n(C6,"CODE",{});var hDt=s(X3e);QHr=r(hDt,"model_type"),hDt.forEach(t),WHr=r(C6,` property of the config object (either
passed as an argument or loaded from `),z3e=n(C6,"CODE",{});var pDt=s(z3e);HHr=r(pDt,"pretrained_model_name_or_path"),pDt.forEach(t),UHr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=n(C6,"CODE",{});var _Dt=s(Q3e);JHr=r(_Dt,"pretrained_model_name_or_path"),_Dt.forEach(t),YHr=r(C6,":"),C6.forEach(t),KHr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);P0=n(To,"LI",{});var KGe=s(P0);W3e=n(KGe,"STRONG",{});var uDt=s(W3e);ZHr=r(uDt,"albert"),uDt.forEach(t),eUr=r(KGe," \u2014 "),aoe=n(KGe,"A",{href:!0});var bDt=s(aoe);oUr=r(bDt,"FlaxAlbertForTokenClassification"),bDt.forEach(t),rUr=r(KGe," (ALBERT model)"),KGe.forEach(t),tUr=i(To),B0=n(To,"LI",{});var ZGe=s(B0);H3e=n(ZGe,"STRONG",{});var vDt=s(H3e);aUr=r(vDt,"bert"),vDt.forEach(t),nUr=r(ZGe," \u2014 "),noe=n(ZGe,"A",{href:!0});var FDt=s(noe);sUr=r(FDt,"FlaxBertForTokenClassification"),FDt.forEach(t),lUr=r(ZGe," (BERT model)"),ZGe.forEach(t),iUr=i(To),N0=n(To,"LI",{});var eOe=s(N0);U3e=n(eOe,"STRONG",{});var TDt=s(U3e);dUr=r(TDt,"big_bird"),TDt.forEach(t),cUr=r(eOe," \u2014 "),soe=n(eOe,"A",{href:!0});var MDt=s(soe);fUr=r(MDt,"FlaxBigBirdForTokenClassification"),MDt.forEach(t),mUr=r(eOe," (BigBird model)"),eOe.forEach(t),gUr=i(To),I0=n(To,"LI",{});var oOe=s(I0);J3e=n(oOe,"STRONG",{});var EDt=s(J3e);hUr=r(EDt,"distilbert"),EDt.forEach(t),pUr=r(oOe," \u2014 "),loe=n(oOe,"A",{href:!0});var CDt=s(loe);_Ur=r(CDt,"FlaxDistilBertForTokenClassification"),CDt.forEach(t),uUr=r(oOe," (DistilBERT model)"),oOe.forEach(t),bUr=i(To),q0=n(To,"LI",{});var rOe=s(q0);Y3e=n(rOe,"STRONG",{});var wDt=s(Y3e);vUr=r(wDt,"electra"),wDt.forEach(t),FUr=r(rOe," \u2014 "),ioe=n(rOe,"A",{href:!0});var ADt=s(ioe);TUr=r(ADt,"FlaxElectraForTokenClassification"),ADt.forEach(t),MUr=r(rOe," (ELECTRA model)"),rOe.forEach(t),EUr=i(To),j0=n(To,"LI",{});var tOe=s(j0);K3e=n(tOe,"STRONG",{});var LDt=s(K3e);CUr=r(LDt,"roberta"),LDt.forEach(t),wUr=r(tOe," \u2014 "),doe=n(tOe,"A",{href:!0});var yDt=s(doe);AUr=r(yDt,"FlaxRobertaForTokenClassification"),yDt.forEach(t),LUr=r(tOe," (RoBERTa model)"),tOe.forEach(t),yUr=i(To),D0=n(To,"LI",{});var aOe=s(D0);Z3e=n(aOe,"STRONG",{});var xDt=s(Z3e);xUr=r(xDt,"roformer"),xDt.forEach(t),$Ur=r(aOe," \u2014 "),coe=n(aOe,"A",{href:!0});var $Dt=s(coe);kUr=r($Dt,"FlaxRoFormerForTokenClassification"),$Dt.forEach(t),SUr=r(aOe," (RoFormer model)"),aOe.forEach(t),RUr=i(To),G0=n(To,"LI",{});var nOe=s(G0);e0e=n(nOe,"STRONG",{});var kDt=s(e0e);PUr=r(kDt,"xlm-roberta"),kDt.forEach(t),BUr=r(nOe," \u2014 "),foe=n(nOe,"A",{href:!0});var SDt=s(foe);NUr=r(SDt,"FlaxXLMRobertaForTokenClassification"),SDt.forEach(t),IUr=r(nOe," (XLM-RoBERTa model)"),nOe.forEach(t),To.forEach(t),qUr=i(gi),T(O0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),pXe=i(f),hf=n(f,"H2",{class:!0});var CQe=s(hf);V0=n(CQe,"A",{id:!0,class:!0,href:!0});var RDt=s(V0);o0e=n(RDt,"SPAN",{});var PDt=s(o0e);T(A$.$$.fragment,PDt),PDt.forEach(t),RDt.forEach(t),jUr=i(CQe),r0e=n(CQe,"SPAN",{});var BDt=s(r0e);DUr=r(BDt,"FlaxAutoModelForMultipleChoice"),BDt.forEach(t),CQe.forEach(t),_Xe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(L$.$$.fragment,hi),GUr=i(hi),pf=n(hi,"P",{});var Mte=s(pf);OUr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),moe=n(Mte,"A",{href:!0});var NDt=s(moe);VUr=r(NDt,"from_pretrained()"),NDt.forEach(t),XUr=r(Mte," class method or the "),goe=n(Mte,"A",{href:!0});var IDt=s(goe);zUr=r(IDt,"from_config()"),IDt.forEach(t),QUr=r(Mte,` class
method.`),Mte.forEach(t),WUr=i(hi),y$=n(hi,"P",{});var wQe=s(y$);HUr=r(wQe,"This class cannot be instantiated directly using "),t0e=n(wQe,"CODE",{});var qDt=s(t0e);UUr=r(qDt,"__init__()"),qDt.forEach(t),JUr=r(wQe," (throws an error)."),wQe.forEach(t),YUr=i(hi),Kt=n(hi,"DIV",{class:!0});var w6=s(Kt);T(x$.$$.fragment,w6),KUr=i(w6),a0e=n(w6,"P",{});var jDt=s(a0e);ZUr=r(jDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jDt.forEach(t),eJr=i(w6),_f=n(w6,"P",{});var Ete=s(_f);oJr=r(Ete,`Note:
Loading a model from its configuration file does `),n0e=n(Ete,"STRONG",{});var DDt=s(n0e);rJr=r(DDt,"not"),DDt.forEach(t),tJr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(Ete,"A",{href:!0});var GDt=s(hoe);aJr=r(GDt,"from_pretrained()"),GDt.forEach(t),nJr=r(Ete," to load the model weights."),Ete.forEach(t),sJr=i(w6),T(X0.$$.fragment,w6),w6.forEach(t),lJr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T($$.$$.fragment,pi),iJr=i(pi),s0e=n(pi,"P",{});var ODt=s(s0e);dJr=r(ODt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ODt.forEach(t),cJr=i(pi),yn=n(pi,"P",{});var A6=s(yn);fJr=r(A6,"The model class to instantiate is selected based on the "),l0e=n(A6,"CODE",{});var VDt=s(l0e);mJr=r(VDt,"model_type"),VDt.forEach(t),gJr=r(A6,` property of the config object (either
passed as an argument or loaded from `),i0e=n(A6,"CODE",{});var XDt=s(i0e);hJr=r(XDt,"pretrained_model_name_or_path"),XDt.forEach(t),pJr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(A6,"CODE",{});var zDt=s(d0e);_Jr=r(zDt,"pretrained_model_name_or_path"),zDt.forEach(t),uJr=r(A6,":"),A6.forEach(t),bJr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);z0=n(Mo,"LI",{});var sOe=s(z0);c0e=n(sOe,"STRONG",{});var QDt=s(c0e);vJr=r(QDt,"albert"),QDt.forEach(t),FJr=r(sOe," \u2014 "),poe=n(sOe,"A",{href:!0});var WDt=s(poe);TJr=r(WDt,"FlaxAlbertForMultipleChoice"),WDt.forEach(t),MJr=r(sOe," (ALBERT model)"),sOe.forEach(t),EJr=i(Mo),Q0=n(Mo,"LI",{});var lOe=s(Q0);f0e=n(lOe,"STRONG",{});var HDt=s(f0e);CJr=r(HDt,"bert"),HDt.forEach(t),wJr=r(lOe," \u2014 "),_oe=n(lOe,"A",{href:!0});var UDt=s(_oe);AJr=r(UDt,"FlaxBertForMultipleChoice"),UDt.forEach(t),LJr=r(lOe," (BERT model)"),lOe.forEach(t),yJr=i(Mo),W0=n(Mo,"LI",{});var iOe=s(W0);m0e=n(iOe,"STRONG",{});var JDt=s(m0e);xJr=r(JDt,"big_bird"),JDt.forEach(t),$Jr=r(iOe," \u2014 "),uoe=n(iOe,"A",{href:!0});var YDt=s(uoe);kJr=r(YDt,"FlaxBigBirdForMultipleChoice"),YDt.forEach(t),SJr=r(iOe," (BigBird model)"),iOe.forEach(t),RJr=i(Mo),H0=n(Mo,"LI",{});var dOe=s(H0);g0e=n(dOe,"STRONG",{});var KDt=s(g0e);PJr=r(KDt,"distilbert"),KDt.forEach(t),BJr=r(dOe," \u2014 "),boe=n(dOe,"A",{href:!0});var ZDt=s(boe);NJr=r(ZDt,"FlaxDistilBertForMultipleChoice"),ZDt.forEach(t),IJr=r(dOe," (DistilBERT model)"),dOe.forEach(t),qJr=i(Mo),U0=n(Mo,"LI",{});var cOe=s(U0);h0e=n(cOe,"STRONG",{});var eGt=s(h0e);jJr=r(eGt,"electra"),eGt.forEach(t),DJr=r(cOe," \u2014 "),voe=n(cOe,"A",{href:!0});var oGt=s(voe);GJr=r(oGt,"FlaxElectraForMultipleChoice"),oGt.forEach(t),OJr=r(cOe," (ELECTRA model)"),cOe.forEach(t),VJr=i(Mo),J0=n(Mo,"LI",{});var fOe=s(J0);p0e=n(fOe,"STRONG",{});var rGt=s(p0e);XJr=r(rGt,"roberta"),rGt.forEach(t),zJr=r(fOe," \u2014 "),Foe=n(fOe,"A",{href:!0});var tGt=s(Foe);QJr=r(tGt,"FlaxRobertaForMultipleChoice"),tGt.forEach(t),WJr=r(fOe," (RoBERTa model)"),fOe.forEach(t),HJr=i(Mo),Y0=n(Mo,"LI",{});var mOe=s(Y0);_0e=n(mOe,"STRONG",{});var aGt=s(_0e);UJr=r(aGt,"roformer"),aGt.forEach(t),JJr=r(mOe," \u2014 "),Toe=n(mOe,"A",{href:!0});var nGt=s(Toe);YJr=r(nGt,"FlaxRoFormerForMultipleChoice"),nGt.forEach(t),KJr=r(mOe," (RoFormer model)"),mOe.forEach(t),ZJr=i(Mo),K0=n(Mo,"LI",{});var gOe=s(K0);u0e=n(gOe,"STRONG",{});var sGt=s(u0e);eYr=r(sGt,"xlm-roberta"),sGt.forEach(t),oYr=r(gOe," \u2014 "),Moe=n(gOe,"A",{href:!0});var lGt=s(Moe);rYr=r(lGt,"FlaxXLMRobertaForMultipleChoice"),lGt.forEach(t),tYr=r(gOe," (XLM-RoBERTa model)"),gOe.forEach(t),Mo.forEach(t),aYr=i(pi),T(Z0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),uXe=i(f),uf=n(f,"H2",{class:!0});var AQe=s(uf);ew=n(AQe,"A",{id:!0,class:!0,href:!0});var iGt=s(ew);b0e=n(iGt,"SPAN",{});var dGt=s(b0e);T(k$.$$.fragment,dGt),dGt.forEach(t),iGt.forEach(t),nYr=i(AQe),v0e=n(AQe,"SPAN",{});var cGt=s(v0e);sYr=r(cGt,"FlaxAutoModelForNextSentencePrediction"),cGt.forEach(t),AQe.forEach(t),bXe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(S$.$$.fragment,_i),lYr=i(_i),bf=n(_i,"P",{});var Cte=s(bf);iYr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Eoe=n(Cte,"A",{href:!0});var fGt=s(Eoe);dYr=r(fGt,"from_pretrained()"),fGt.forEach(t),cYr=r(Cte," class method or the "),Coe=n(Cte,"A",{href:!0});var mGt=s(Coe);fYr=r(mGt,"from_config()"),mGt.forEach(t),mYr=r(Cte,` class
method.`),Cte.forEach(t),gYr=i(_i),R$=n(_i,"P",{});var LQe=s(R$);hYr=r(LQe,"This class cannot be instantiated directly using "),F0e=n(LQe,"CODE",{});var gGt=s(F0e);pYr=r(gGt,"__init__()"),gGt.forEach(t),_Yr=r(LQe," (throws an error)."),LQe.forEach(t),uYr=i(_i),Zt=n(_i,"DIV",{class:!0});var L6=s(Zt);T(P$.$$.fragment,L6),bYr=i(L6),T0e=n(L6,"P",{});var hGt=s(T0e);vYr=r(hGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hGt.forEach(t),FYr=i(L6),vf=n(L6,"P",{});var wte=s(vf);TYr=r(wte,`Note:
Loading a model from its configuration file does `),M0e=n(wte,"STRONG",{});var pGt=s(M0e);MYr=r(pGt,"not"),pGt.forEach(t),EYr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(wte,"A",{href:!0});var _Gt=s(woe);CYr=r(_Gt,"from_pretrained()"),_Gt.forEach(t),wYr=r(wte," to load the model weights."),wte.forEach(t),AYr=i(L6),T(ow.$$.fragment,L6),L6.forEach(t),LYr=i(_i),Yr=n(_i,"DIV",{class:!0});var ui=s(Yr);T(B$.$$.fragment,ui),yYr=i(ui),E0e=n(ui,"P",{});var uGt=s(E0e);xYr=r(uGt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uGt.forEach(t),$Yr=i(ui),xn=n(ui,"P",{});var y6=s(xn);kYr=r(y6,"The model class to instantiate is selected based on the "),C0e=n(y6,"CODE",{});var bGt=s(C0e);SYr=r(bGt,"model_type"),bGt.forEach(t),RYr=r(y6,` property of the config object (either
passed as an argument or loaded from `),w0e=n(y6,"CODE",{});var vGt=s(w0e);PYr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),BYr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=n(y6,"CODE",{});var FGt=s(A0e);NYr=r(FGt,"pretrained_model_name_or_path"),FGt.forEach(t),IYr=r(y6,":"),y6.forEach(t),qYr=i(ui),L0e=n(ui,"UL",{});var TGt=s(L0e);rw=n(TGt,"LI",{});var hOe=s(rw);y0e=n(hOe,"STRONG",{});var MGt=s(y0e);jYr=r(MGt,"bert"),MGt.forEach(t),DYr=r(hOe," \u2014 "),Aoe=n(hOe,"A",{href:!0});var EGt=s(Aoe);GYr=r(EGt,"FlaxBertForNextSentencePrediction"),EGt.forEach(t),OYr=r(hOe," (BERT model)"),hOe.forEach(t),TGt.forEach(t),VYr=i(ui),T(tw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),vXe=i(f),Ff=n(f,"H2",{class:!0});var yQe=s(Ff);aw=n(yQe,"A",{id:!0,class:!0,href:!0});var CGt=s(aw);x0e=n(CGt,"SPAN",{});var wGt=s(x0e);T(N$.$$.fragment,wGt),wGt.forEach(t),CGt.forEach(t),XYr=i(yQe),$0e=n(yQe,"SPAN",{});var AGt=s($0e);zYr=r(AGt,"FlaxAutoModelForImageClassification"),AGt.forEach(t),yQe.forEach(t),FXe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(I$.$$.fragment,bi),QYr=i(bi),Tf=n(bi,"P",{});var Ate=s(Tf);WYr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Loe=n(Ate,"A",{href:!0});var LGt=s(Loe);HYr=r(LGt,"from_pretrained()"),LGt.forEach(t),UYr=r(Ate," class method or the "),yoe=n(Ate,"A",{href:!0});var yGt=s(yoe);JYr=r(yGt,"from_config()"),yGt.forEach(t),YYr=r(Ate,` class
method.`),Ate.forEach(t),KYr=i(bi),q$=n(bi,"P",{});var xQe=s(q$);ZYr=r(xQe,"This class cannot be instantiated directly using "),k0e=n(xQe,"CODE",{});var xGt=s(k0e);eKr=r(xGt,"__init__()"),xGt.forEach(t),oKr=r(xQe," (throws an error)."),xQe.forEach(t),rKr=i(bi),ea=n(bi,"DIV",{class:!0});var x6=s(ea);T(j$.$$.fragment,x6),tKr=i(x6),S0e=n(x6,"P",{});var $Gt=s(S0e);aKr=r($Gt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Gt.forEach(t),nKr=i(x6),Mf=n(x6,"P",{});var Lte=s(Mf);sKr=r(Lte,`Note:
Loading a model from its configuration file does `),R0e=n(Lte,"STRONG",{});var kGt=s(R0e);lKr=r(kGt,"not"),kGt.forEach(t),iKr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=n(Lte,"A",{href:!0});var SGt=s(xoe);dKr=r(SGt,"from_pretrained()"),SGt.forEach(t),cKr=r(Lte," to load the model weights."),Lte.forEach(t),fKr=i(x6),T(nw.$$.fragment,x6),x6.forEach(t),mKr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(D$.$$.fragment,vi),gKr=i(vi),P0e=n(vi,"P",{});var RGt=s(P0e);hKr=r(RGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RGt.forEach(t),pKr=i(vi),$n=n(vi,"P",{});var $6=s($n);_Kr=r($6,"The model class to instantiate is selected based on the "),B0e=n($6,"CODE",{});var PGt=s(B0e);uKr=r(PGt,"model_type"),PGt.forEach(t),bKr=r($6,` property of the config object (either
passed as an argument or loaded from `),N0e=n($6,"CODE",{});var BGt=s(N0e);vKr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),FKr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n($6,"CODE",{});var NGt=s(I0e);TKr=r(NGt,"pretrained_model_name_or_path"),NGt.forEach(t),MKr=r($6,":"),$6.forEach(t),EKr=i(vi),G$=n(vi,"UL",{});var $Qe=s(G$);sw=n($Qe,"LI",{});var pOe=s(sw);q0e=n(pOe,"STRONG",{});var IGt=s(q0e);CKr=r(IGt,"beit"),IGt.forEach(t),wKr=r(pOe," \u2014 "),$oe=n(pOe,"A",{href:!0});var qGt=s($oe);AKr=r(qGt,"FlaxBeitForImageClassification"),qGt.forEach(t),LKr=r(pOe," (BEiT model)"),pOe.forEach(t),yKr=i($Qe),lw=n($Qe,"LI",{});var _Oe=s(lw);j0e=n(_Oe,"STRONG",{});var jGt=s(j0e);xKr=r(jGt,"vit"),jGt.forEach(t),$Kr=r(_Oe," \u2014 "),koe=n(_Oe,"A",{href:!0});var DGt=s(koe);kKr=r(DGt,"FlaxViTForImageClassification"),DGt.forEach(t),SKr=r(_Oe," (ViT model)"),_Oe.forEach(t),$Qe.forEach(t),RKr=i(vi),T(iw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),TXe=i(f),Ef=n(f,"H2",{class:!0});var kQe=s(Ef);dw=n(kQe,"A",{id:!0,class:!0,href:!0});var GGt=s(dw);D0e=n(GGt,"SPAN",{});var OGt=s(D0e);T(O$.$$.fragment,OGt),OGt.forEach(t),GGt.forEach(t),PKr=i(kQe),G0e=n(kQe,"SPAN",{});var VGt=s(G0e);BKr=r(VGt,"FlaxAutoModelForVision2Seq"),VGt.forEach(t),kQe.forEach(t),MXe=i(f),wr=n(f,"DIV",{class:!0});var Fi=s(wr);T(V$.$$.fragment,Fi),NKr=i(Fi),Cf=n(Fi,"P",{});var yte=s(Cf);IKr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Soe=n(yte,"A",{href:!0});var XGt=s(Soe);qKr=r(XGt,"from_pretrained()"),XGt.forEach(t),jKr=r(yte," class method or the "),Roe=n(yte,"A",{href:!0});var zGt=s(Roe);DKr=r(zGt,"from_config()"),zGt.forEach(t),GKr=r(yte,` class
method.`),yte.forEach(t),OKr=i(Fi),X$=n(Fi,"P",{});var SQe=s(X$);VKr=r(SQe,"This class cannot be instantiated directly using "),O0e=n(SQe,"CODE",{});var QGt=s(O0e);XKr=r(QGt,"__init__()"),QGt.forEach(t),zKr=r(SQe," (throws an error)."),SQe.forEach(t),QKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var k6=s(oa);T(z$.$$.fragment,k6),WKr=i(k6),V0e=n(k6,"P",{});var WGt=s(V0e);HKr=r(WGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),WGt.forEach(t),UKr=i(k6),wf=n(k6,"P",{});var xte=s(wf);JKr=r(xte,`Note:
Loading a model from its configuration file does `),X0e=n(xte,"STRONG",{});var HGt=s(X0e);YKr=r(HGt,"not"),HGt.forEach(t),KKr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=n(xte,"A",{href:!0});var UGt=s(Poe);ZKr=r(UGt,"from_pretrained()"),UGt.forEach(t),eZr=r(xte," to load the model weights."),xte.forEach(t),oZr=i(k6),T(cw.$$.fragment,k6),k6.forEach(t),rZr=i(Fi),Zr=n(Fi,"DIV",{class:!0});var Ti=s(Zr);T(Q$.$$.fragment,Ti),tZr=i(Ti),z0e=n(Ti,"P",{});var JGt=s(z0e);aZr=r(JGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JGt.forEach(t),nZr=i(Ti),kn=n(Ti,"P",{});var S6=s(kn);sZr=r(S6,"The model class to instantiate is selected based on the "),Q0e=n(S6,"CODE",{});var YGt=s(Q0e);lZr=r(YGt,"model_type"),YGt.forEach(t),iZr=r(S6,` property of the config object (either
passed as an argument or loaded from `),W0e=n(S6,"CODE",{});var KGt=s(W0e);dZr=r(KGt,"pretrained_model_name_or_path"),KGt.forEach(t),cZr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(S6,"CODE",{});var ZGt=s(H0e);fZr=r(ZGt,"pretrained_model_name_or_path"),ZGt.forEach(t),mZr=r(S6,":"),S6.forEach(t),gZr=i(Ti),U0e=n(Ti,"UL",{});var eOt=s(U0e);fw=n(eOt,"LI",{});var uOe=s(fw);J0e=n(uOe,"STRONG",{});var oOt=s(J0e);hZr=r(oOt,"vision-encoder-decoder"),oOt.forEach(t),pZr=r(uOe," \u2014 "),Boe=n(uOe,"A",{href:!0});var rOt=s(Boe);_Zr=r(rOt,"FlaxVisionEncoderDecoderModel"),rOt.forEach(t),uZr=r(uOe," (Vision Encoder decoder model)"),uOe.forEach(t),eOt.forEach(t),bZr=i(Ti),T(mw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(iXt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertModel"),c(Rf,"id","extending-the-auto-classes"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Bf,"id","transformers.AutoConfig"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(uS,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(bS,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertConfig"),c(vS,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartConfig"),c(FS,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitConfig"),c(TS,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertConfig"),c(MS,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ES,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdConfig"),c(CS,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(wS,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(AS,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(LS,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomConfig"),c(yS,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertConfig"),c(xS,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineConfig"),c($S,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPConfig"),c(kS,"href","/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenConfig"),c(SS,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertConfig"),c(RS,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextConfig"),c(PS,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLConfig"),c(BS,"href","/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtConfig"),c(NS,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(IS,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(qS,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(jS,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaConfig"),c(DS,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(GS,"href","/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(OS,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTConfig"),c(VS,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrConfig"),c(XS,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertConfig"),c(zS,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRConfig"),c(QS,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTConfig"),c(WS,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraConfig"),c(HS,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(US,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertConfig"),c(JS,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaConfig"),c(YS,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetConfig"),c(KS,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTConfig"),c(ZS,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelConfig"),c(eR,"href","/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNConfig"),c(oR,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Config"),c(rR,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tR,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(aR,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJConfig"),c(nR,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertConfig"),c(sR,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertConfig"),c(lR,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(iR,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(dR,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(cR,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(fR,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDConfig"),c(mR,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitConfig"),c(gR,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerConfig"),c(hR,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Config"),c(pR,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeConfig"),c(_R,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertConfig"),c(uR,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Config"),c(bR,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianConfig"),c(vR,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(FR,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartConfig"),c(TR,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTConfig"),c(MR,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ER,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(CR,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config"),c(wR,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetConfig"),c(AR,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Config"),c(LR,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaConfig"),c(yR,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(xR,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c($R,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTConfig"),c(kR,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusConfig"),c(SR,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverConfig"),c(RR,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartConfig"),c(PR,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(BR,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(NR,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(IR,"href","/docs/transformers/pr_17799/en/model_doc/rag#transformers.RagConfig"),c(qR,"href","/docs/transformers/pr_17799/en/model_doc/realm#transformers.RealmConfig"),c(jR,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerConfig"),c(DR,"href","/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetConfig"),c(GR,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertConfig"),c(OR,"href","/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetConfig"),c(VR,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertConfig"),c(XR,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaConfig"),c(zR,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerConfig"),c(QR,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerConfig"),c(WR,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWConfig"),c(HR,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDConfig"),c(UR,"href","/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(JR,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(YR,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(KR,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterConfig"),c(ZR,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(eP,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinConfig"),c(oP,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Config"),c(rP,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasConfig"),c(tP,"href","/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(aP,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(nP,"href","/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRConfig"),c(sP,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(lP,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(iP,"href","/docs/transformers/pr_17799/en/model_doc/van#transformers.VanConfig"),c(dP,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltConfig"),c(cP,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(fP,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(mP,"href","/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(gP,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTConfig"),c(hP,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(pP,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(_P,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(uP,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMConfig"),c(bP,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMConfig"),c(vP,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMConfig"),c(FP,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(TP,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(MP,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(EP,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetConfig"),c(CP,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosConfig"),c(wP,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"id","transformers.AutoTokenizer"),c(Qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(AP,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(LP,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizer"),c(yP,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xP,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartTokenizer"),c($P,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartTokenizerFast"),c(kP,"href","/docs/transformers/pr_17799/en/model_doc/barthez#transformers.BarthezTokenizer"),c(SP,"href","/docs/transformers/pr_17799/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(RP,"href","/docs/transformers/pr_17799/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(PP,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(BP,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(IP,"href","/docs/transformers/pr_17799/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(qP,"href","/docs/transformers/pr_17799/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(jP,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(DP,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(GP,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(OP,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(VP,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(XP,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(zP,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(QP,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(WP,"href","/docs/transformers/pr_17799/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(HP,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertTokenizer"),c(UP,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(JP,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineTokenizer"),c(YP,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPTokenizer"),c(KP,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(eB,"href","/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(oB,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(rB,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17799/en/model_doc/cpm#transformers.CpmTokenizer"),c(aB,"href","/docs/transformers/pr_17799/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(nB,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(sB,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lB,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dB,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fB,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mB,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gB,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(pB,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(_B,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraTokenizer"),c(uB,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bB,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vB,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetTokenizer"),c(FB,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TB,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MB,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelTokenizer"),c(EB,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(CB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yB,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(xB,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($B,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kB,"href","/docs/transformers/pr_17799/en/model_doc/herbert#transformers.HerbertTokenizer"),c(SB,"href","/docs/transformers/pr_17799/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PB,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(IB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(qB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(DB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(GB,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(OB,"href","/docs/transformers/pr_17799/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(VB,"href","/docs/transformers/pr_17799/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(XB,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDTokenizer"),c(zB,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDTokenizerFast"),c(QB,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerTokenizer"),c(WB,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(HB,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Tokenizer"),c(UB,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5TokenizerFast"),c(JB,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeTokenizer"),c(YB,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(KB,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(eN,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianTokenizer"),c(oN,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartTokenizer"),c(rN,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(tN,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(aN,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(nN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/pr_17799/en/model_doc/mluke#transformers.MLukeTokenizer"),c(iN,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(dN,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(cN,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(fN,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(mN,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Tokenizer"),c(gN,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5TokenizerFast"),c(hN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(pN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(_N,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizer"),c(uN,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(bN,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(vN,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(FN,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TN,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MN,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(EN,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(CN,"href","/docs/transformers/pr_17799/en/model_doc/phobert#transformers.PhobertTokenizer"),c(wN,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartTokenizer"),c(AN,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(LN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(yN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(xN,"href","/docs/transformers/pr_17799/en/model_doc/rag#transformers.RagTokenizer"),c($N,"href","/docs/transformers/pr_17799/en/model_doc/realm#transformers.RealmTokenizer"),c(kN,"href","/docs/transformers/pr_17799/en/model_doc/realm#transformers.RealmTokenizerFast"),c(SN,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerTokenizer"),c(RN,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(PN,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertTokenizer"),c(BN,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(NN,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(IN,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(qN,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jN,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DN,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(GN,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(ON,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(VN,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(XN,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterTokenizer"),c(zN,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(QN,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(WN,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(HN,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Tokenizer"),c(UN,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5TokenizerFast"),c(JN,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasTokenizer"),c(YN,"href","/docs/transformers/pr_17799/en/model_doc/tapex#transformers.TapexTokenizer"),c(KN,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ZN,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(eI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(oI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizer"),c(rI,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertTokenizerFast"),c(tI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(sI,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMTokenizer"),c(lI,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(iI,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMTokenizer"),c(dI,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(cI,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(fI,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(mI,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gI,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hI,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(pI,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(_I,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizer"),c(uI,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"id","transformers.AutoFeatureExtractor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(bI,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(vI,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CI,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(wI,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c($I,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(kI,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(SI,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RI,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(PI,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(BI,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(II,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1FeatureExtractor"),c(qI,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(jI,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(DI,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GI,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OI,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(VI,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(XI,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(zI,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QI,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(WI,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JI,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YI,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"id","transformers.AutoProcessor"),c(fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fp,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(KI,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ZI,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPProcessor"),c(eq,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(oq,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(rq,"href","/docs/transformers/pr_17799/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(tq,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aq,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nq,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(sq,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(lq,"href","/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRProcessor"),c(iq,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dq,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cq,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltProcessor"),c(fq,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(mq,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gq,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hq,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sp,"id","transformers.AutoModel"),c(Sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sp,"href","#transformers.AutoModel"),c(Ni,"class","relative group"),c(pq,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_q,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uq,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bq,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertModel"),c(vq,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartModel"),c(Fq,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitModel"),c(Tq,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertModel"),c(Mq,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Eq,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdModel"),c(Cq,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(wq,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Aq,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Lq,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomModel"),c(yq,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertModel"),c(xq,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineModel"),c($q,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.CLIPModel"),c(kq,"href","/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenModel"),c(Sq,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertModel"),c(Rq,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextModel"),c(Pq,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLModel"),c(Bq,"href","/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtModel"),c(Nq,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Iq,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(qq,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(jq,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaModel"),c(Dq,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Gq,"href","/docs/transformers/pr_17799/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Oq,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTModel"),c(Vq,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrModel"),c(Xq,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertModel"),c(zq,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Qq,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTModel"),c(Wq,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraModel"),c(Hq,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertModel"),c(Uq,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaModel"),c(Jq,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetModel"),c(Yq,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTModel"),c(Kq,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelModel"),c(Zq,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelBaseModel"),c(ej,"href","/docs/transformers/pr_17799/en/model_doc/glpn#transformers.GLPNModel"),c(oj,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2Model"),c(rj,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(tj,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(aj,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJModel"),c(nj,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertModel"),c(sj,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertModel"),c(lj,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(ij,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(dj,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(cj,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(fj,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDModel"),c(mj,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitModel"),c(gj,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerModel"),c(hj,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5Model"),c(pj,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeModel"),c(_j,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertModel"),c(uj,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100Model"),c(bj,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianModel"),c(vj,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Fj,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartModel"),c(Tj,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTModel"),c(Mj,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Ej,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Cj,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Model"),c(wj,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetModel"),c(Aj,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5Model"),c(Lj,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaModel"),c(yj,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerModel"),c(xj,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c($j,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTModel"),c(kj,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusModel"),c(Sj,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverModel"),c(Rj,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartModel"),c(Pj,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Bj,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Nj,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Ij,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModel"),c(qj,"href","/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetModel"),c(jj,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertModel"),c(Dj,"href","/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetModel"),c(Gj,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel"),c(Oj,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaModel"),c(Vj,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerModel"),c(Xj,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerModel"),c(zj,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWModel"),c(Qj,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDModel"),c(Wj,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Hj,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterModel"),c(Uj,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Jj,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinModel"),c(Yj,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5Model"),c(Kj,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasModel"),c(Zj,"href","/docs/transformers/pr_17799/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(eD,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(oD,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechModel"),c(rD,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(tD,"href","/docs/transformers/pr_17799/en/model_doc/van#transformers.VanModel"),c(aD,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltModel"),c(nD,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(sD,"href","/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertModel"),c(lD,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTModel"),c(iD,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(dD,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(cD,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(fD,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMModel"),c(mD,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMModel"),c(gD,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMModel"),c(hD,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(pD,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(_D,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(uD,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetModel"),c(bD,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosModel"),c(vD,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nu,"id","transformers.AutoModelForPreTraining"),c(Nu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nu,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(FD,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TD,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MD,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ED,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForPreTraining"),c(CD,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForPreTraining"),c(AD,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(LD,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM"),c(yD,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($D,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(kD,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(SD,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(RD,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForPreTraining"),c(BD,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ND,"href","/docs/transformers/pr_17799/en/model_doc/flava#transformers.FlavaForPreTraining"),c(ID,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForPreTraining"),c(qD,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(DD,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(GD,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(VD,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(XD,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(zD,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(QD,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(WD,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(HD,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(UD,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(JD,"href","/docs/transformers/pr_17799/en/model_doc/retribert#transformers.RetriBertModel"),c(YD,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(KD,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ZD,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eG,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(rG,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tG,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(aG,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(nG,"href","/docs/transformers/pr_17799/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(sG,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(lG,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(iG,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(dG,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mG,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForCausalLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(gG,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hG,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pG,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_G,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForCausalLM"),c(uG,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertLMHeadModel"),c(bG,"href","/docs/transformers/pr_17799/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(vG,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(FG,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(TG,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(MG,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(EG,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForCausalLM"),c(CG,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(wG,"href","/docs/transformers/pr_17799/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(AG,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LG,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(yG,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForCausalLM"),c(xG,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c($G,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(kG,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(SG,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(RG,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianForCausalLM"),c(PG,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForCausalLM"),c(BG,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(NG,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(IG,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.OPTForCausalLM"),c(qG,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(jG,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(DG,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(GG,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(OG,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(VG,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(XG,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(zG,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(QG,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(WG,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(HG,"href","/docs/transformers/pr_17799/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(UG,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(JG,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(KG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ZG,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(eO,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.AutoModelForMaskedLM"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(oO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aO,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(nO,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sO,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMaskedLM"),c(lO,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(iO,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dO,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(cO,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fO,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mO,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gO,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hO,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(pO,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_O,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(uO,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(bO,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vO,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FO,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TO,"href","/docs/transformers/pr_17799/en/model_doc/luke#transformers.LukeForMaskedLM"),c(MO,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(CO,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AO,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(LO,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(yO,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(xO,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c($O,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(kO,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(SO,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(RO,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(PO,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(BO,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NO,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(IO,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qO,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jO,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s9,"id","transformers.AutoModelForSeq2SeqLM"),c(s9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s9,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(DO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OO,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VO,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(HO,"href","/docs/transformers/pr_17799/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17799/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.MarianMTModel"),c(ZO,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eV,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oV,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_17799/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aV,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_17799/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L9,"id","transformers.AutoModelForSequenceClassification"),c(L9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L9,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(sV,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lV,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iV,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dV,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c($V,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17799/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForMultipleChoice"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(aX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c($X,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(RX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForNextSentencePrediction"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c(IX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(GX,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(OX,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(VX,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(XX,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(zX,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_b,"id","transformers.AutoModelForTokenClassification"),c(_b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_b,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(QX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(JX,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForTokenClassification"),c(YX,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(KX,"href","/docs/transformers/pr_17799/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(ez,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForTokenClassification"),c(oz,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(rz,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(tz,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(az,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(nz,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(sz,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(lz,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(iz,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(dz,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(cz,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(fz,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(mz,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(gz,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(hz,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(pz,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(_z,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(uz,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(bz,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(vz,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(wz,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Az,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(yz,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(xz,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c($z,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rv,"id","transformers.AutoModelForQuestionAnswering"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(kz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17799/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17799/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Hz,"href","/docs/transformers/pr_17799/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17799/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17799/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17799/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17799/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17799/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17799/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17799/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17799/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17799/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(uQ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(FQ,"href","/docs/transformers/pr_17799/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(TQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForImageClassification"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForImageClassification"),c(xQ,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c($Q,"href","/docs/transformers/pr_17799/en/model_doc/cvt#transformers.CvtForImageClassification"),c(kQ,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(SQ,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassification"),c(RQ,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(PQ,"href","/docs/transformers/pr_17799/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(BQ,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassification"),c(NQ,"href","/docs/transformers/pr_17799/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(IQ,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1ForImageClassification"),c(qQ,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(jQ,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(DQ,"href","/docs/transformers/pr_17799/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(GQ,"href","/docs/transformers/pr_17799/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(OQ,"href","/docs/transformers/pr_17799/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(VQ,"href","/docs/transformers/pr_17799/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(XQ,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(zQ,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForImageClassification"),c(QQ,"href","/docs/transformers/pr_17799/en/model_doc/van#transformers.VanForImageClassification"),c(WQ,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForVision2Seq"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17799/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForAudioClassification"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(rW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForAudioFrameClassification"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(hW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(FW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(TW,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForCTC"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(MW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wW,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(AW,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.HubertForCTC"),c(LW,"href","/docs/transformers/pr_17799/en/model_doc/mctct#transformers.MCTCTForCTC"),c(yW,"href","/docs/transformers/pr_17799/en/model_doc/sew#transformers.SEWForCTC"),c(xW,"href","/docs/transformers/pr_17799/en/model_doc/sew-d#transformers.SEWDForCTC"),c($W,"href","/docs/transformers/pr_17799/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(kW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(SW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(RW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(PW,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(BW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_17799/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(jW,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForAudioXVector"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(DW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(XW,"href","/docs/transformers/pr_17799/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(zW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(QW,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(WW,"href","/docs/transformers/pr_17799/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForMaskedImageModeling"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(HW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17799/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(KW,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(ZW,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForObjectDetection"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(eH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aH,"href","/docs/transformers/pr_17799/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForImageSegmentation"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(nH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17799/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForSemanticSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(dH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gH,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hH,"href","/docs/transformers/pr_17799/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(pH,"href","/docs/transformers/pr_17799/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForInstanceSegmentation"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(_H,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_17799/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModel"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(FH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertModel"),c(CH,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartModel"),c(wH,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertModel"),c(AH,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(LH,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yH,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertModel"),c(xH,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.TFCLIPModel"),c($H,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertModel"),c(kH,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextModel"),c(SH,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLModel"),c(RH,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(PH,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaModel"),c(BH,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(NH,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IH,"href","/docs/transformers/pr_17799/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qH,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraModel"),c(jH,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DH,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelModel"),c(GH,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OH,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VH,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJModel"),c(XH,"href","/docs/transformers/pr_17799/en/model_doc/hubert#transformers.TFHubertModel"),c(zH,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QH,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDModel"),c(WH,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerModel"),c(HH,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertModel"),c(UH,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianModel"),c(JH,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartModel"),c(YH,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KH,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetModel"),c(ZH,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5Model"),c(eU,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(oU,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTModel"),c(rU,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusModel"),c(tU,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertModel"),c(aU,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaModel"),c(nU,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerModel"),c(sU,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(lU,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinModel"),c(iU,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5Model"),c(dU,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasModel"),c(cU,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(fU,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTModel"),c(mU,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(gU,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(hU,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMModel"),c(pU,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(_U,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForPreTraining"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(uU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(TU,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MU,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForPreTraining"),c(EU,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CU,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wU,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AU,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LU,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yU,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(xU,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($U,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kU,"href","/docs/transformers/pr_17799/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(SU,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(RU,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PU,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BU,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NU,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IU,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qU,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jU,"href","/docs/transformers/pr_17799/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(DU,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GU,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(OU,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModelForCausalLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(VU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WU,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HU,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UU,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JU,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(YU,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KU,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(ZU,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(eJ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(oJ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(rJ,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tJ,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aJ,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.TFAutoModelForImageClassification"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_17799/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(dJ,"href","/docs/transformers/pr_17799/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(cJ,"href","/docs/transformers/pr_17799/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(fJ,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForMaskedLM"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(_J,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(CJ,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c($J,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PJ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(DJ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(OJ,"href","/docs/transformers/pr_17799/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.TFMarianMTModel"),c(XJ,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForSequenceClassification"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17799/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17799/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17799/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForMultipleChoice"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(WY,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(HY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/pr_17799/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.TFAutoModelForTokenClassification"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(KY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(rK,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(tK,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(nK,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(sK,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(lK,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(iK,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(dK,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(cK,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(fK,"href","/docs/transformers/pr_17799/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(mK,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(gK,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(hK,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(pK,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(_K,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(uK,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(bK,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(vK,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(FK,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.TFAutoModelForQuestionAnswering"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(TK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17799/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17799/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17799/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17799/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17799/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(RK,"href","/docs/transformers/pr_17799/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17799/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17799/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17799/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17799/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17799/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(OK,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17799/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForVision2Seq"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(XK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17799/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModel"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(KK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertModel"),c(rZ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartModel"),c(tZ,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitModel"),c(aZ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertModel"),c(nZ,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(sZ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(lZ,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(iZ,"href","/docs/transformers/pr_17799/en/model_doc/clip#transformers.FlaxCLIPModel"),c(dZ,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(cZ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraModel"),c(fZ,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(mZ,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(gZ,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(hZ,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(pZ,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianModel"),c(_Z,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartModel"),c(uZ,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bZ,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTModel"),c(vZ,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(FZ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(TZ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(MZ,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5Model"),c(EZ,"href","/docs/transformers/pr_17799/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(CZ,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTModel"),c(wZ,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(AZ,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(LZ,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForCausalLM"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(yZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(SZ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(RZ,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(PZ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(BZ,"href","/docs/transformers/pr_17799/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(NZ,"href","/docs/transformers/pr_17799/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(IZ,"href","/docs/transformers/pr_17799/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qZ,"href","/docs/transformers/pr_17799/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(jZ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(DZ,"href","/docs/transformers/pr_17799/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.FlaxAutoModelForPreTraining"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(GZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VZ,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XZ,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zZ,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QZ,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(WZ,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(HZ,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(UZ,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ZZ,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(eee,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_17799/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(ree,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P3,"id","transformers.FlaxAutoModelForMaskedLM"),c(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(tee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(lee,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iee,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(dee,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(cee,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(fee,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(mee,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(gee,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(hee,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(pee,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(of,"class","relative group"),c(_ee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vee,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_17799/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_17799/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Eee,"href","/docs/transformers/pr_17799/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_17799/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(wee,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Aee,"href","/docs/transformers/pr_17799/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Lee,"href","/docs/transformers/pr_17799/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(yee,"href","/docs/transformers/pr_17799/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(af,"class","relative group"),c(xee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(See,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(qee,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(jee,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Dee,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lf,"class","relative group"),c(Oee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_17799/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Wee,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Uee,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Jee,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Yee,"href","/docs/transformers/pr_17799/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Kee,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Zee,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(eoe,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForTokenClassification"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(ff,"class","relative group"),c(ooe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(noe,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(soe,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(loe,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ioe,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(doe,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(coe,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(foe,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hf,"class","relative group"),c(moe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(goe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hoe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(poe,"href","/docs/transformers/pr_17799/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(uoe,"href","/docs/transformers/pr_17799/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(boe,"href","/docs/transformers/pr_17799/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(voe,"href","/docs/transformers/pr_17799/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Foe,"href","/docs/transformers/pr_17799/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Toe,"href","/docs/transformers/pr_17799/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Moe,"href","/docs/transformers/pr_17799/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(Eoe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/pr_17799/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForImageClassification"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ff,"class","relative group"),c(Loe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xoe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($oe,"href","/docs/transformers/pr_17799/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(koe,"href","/docs/transformers/pr_17799/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForVision2Seq"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ef,"class","relative group"),c(Soe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Roe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Poe,"href","/docs/transformers/pr_17799/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Boe,"href","/docs/transformers/pr_17799/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,xf,u),b(f,at,u),e(at,Ei),e(at,Ci),e(Ci,R6),e(at,$f),b(f,Oe,u),b(f,Qe,u),e(Qe,wi),e(Qe,Rn),e(Rn,P6),e(Qe,Pn),e(Qe,Bn),e(Bn,B6),e(Qe,Ai),e(Qe,Nn),e(Nn,N6),e(Qe,Li),b(f,kf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,fS),e(Ae,yi),e(yi,mS),e(Ae,gS),b(f,Co,u),b(f,$a,u),e($a,hS),e($a,Sf),e(Sf,pS),e($a,RQe),b(f,bOe,u),b(f,xi,u),e(xi,Rf),e(Rf,$te),M(I6,$te,null),e(xi,PQe),e(xi,kte),e(kte,BQe),b(f,vOe,u),b(f,In,u),e(In,NQe),e(In,Ste),e(Ste,IQe),e(In,qQe),e(In,Rte),e(Rte,jQe),e(In,DQe),b(f,FOe,u),M(q6,f,u),b(f,TOe,u),b(f,_S,u),e(_S,GQe),b(f,MOe,u),M(Pf,f,u),b(f,EOe,u),b(f,$i,u),e($i,Bf),e(Bf,Pte),M(j6,Pte,null),e($i,OQe),e($i,Bte),e(Bte,VQe),b(f,COe,u),b(f,wo,u),M(D6,wo,null),e(wo,XQe),e(wo,G6),e(G6,zQe),e(G6,uS),e(uS,QQe),e(G6,WQe),e(wo,HQe),e(wo,O6),e(O6,UQe),e(O6,Nte),e(Nte,JQe),e(O6,YQe),e(wo,KQe),e(wo,Ar),M(V6,Ar,null),e(Ar,ZQe),e(Ar,Ite),e(Ite,eWe),e(Ar,oWe),e(Ar,ki),e(ki,rWe),e(ki,qte),e(qte,tWe),e(ki,aWe),e(ki,jte),e(jte,nWe),e(ki,sWe),e(Ar,lWe),e(Ar,A),e(A,Nf),e(Nf,Dte),e(Dte,iWe),e(Nf,dWe),e(Nf,bS),e(bS,cWe),e(Nf,fWe),e(A,mWe),e(A,If),e(If,Gte),e(Gte,gWe),e(If,hWe),e(If,vS),e(vS,pWe),e(If,_We),e(A,uWe),e(A,qf),e(qf,Ote),e(Ote,bWe),e(qf,vWe),e(qf,FS),e(FS,FWe),e(qf,TWe),e(A,MWe),e(A,jf),e(jf,Vte),e(Vte,EWe),e(jf,CWe),e(jf,TS),e(TS,wWe),e(jf,AWe),e(A,LWe),e(A,Df),e(Df,Xte),e(Xte,yWe),e(Df,xWe),e(Df,MS),e(MS,$We),e(Df,kWe),e(A,SWe),e(A,Gf),e(Gf,zte),e(zte,RWe),e(Gf,PWe),e(Gf,ES),e(ES,BWe),e(Gf,NWe),e(A,IWe),e(A,Of),e(Of,Qte),e(Qte,qWe),e(Of,jWe),e(Of,CS),e(CS,DWe),e(Of,GWe),e(A,OWe),e(A,Vf),e(Vf,Wte),e(Wte,VWe),e(Vf,XWe),e(Vf,wS),e(wS,zWe),e(Vf,QWe),e(A,WWe),e(A,Xf),e(Xf,Hte),e(Hte,HWe),e(Xf,UWe),e(Xf,AS),e(AS,JWe),e(Xf,YWe),e(A,KWe),e(A,zf),e(zf,Ute),e(Ute,ZWe),e(zf,eHe),e(zf,LS),e(LS,oHe),e(zf,rHe),e(A,tHe),e(A,Qf),e(Qf,Jte),e(Jte,aHe),e(Qf,nHe),e(Qf,yS),e(yS,sHe),e(Qf,lHe),e(A,iHe),e(A,Wf),e(Wf,Yte),e(Yte,dHe),e(Wf,cHe),e(Wf,xS),e(xS,fHe),e(Wf,mHe),e(A,gHe),e(A,Hf),e(Hf,Kte),e(Kte,hHe),e(Hf,pHe),e(Hf,$S),e($S,_He),e(Hf,uHe),e(A,bHe),e(A,Uf),e(Uf,Zte),e(Zte,vHe),e(Uf,FHe),e(Uf,kS),e(kS,THe),e(Uf,MHe),e(A,EHe),e(A,Jf),e(Jf,eae),e(eae,CHe),e(Jf,wHe),e(Jf,SS),e(SS,AHe),e(Jf,LHe),e(A,yHe),e(A,Yf),e(Yf,oae),e(oae,xHe),e(Yf,$He),e(Yf,RS),e(RS,kHe),e(Yf,SHe),e(A,RHe),e(A,Kf),e(Kf,rae),e(rae,PHe),e(Kf,BHe),e(Kf,PS),e(PS,NHe),e(Kf,IHe),e(A,qHe),e(A,Zf),e(Zf,tae),e(tae,jHe),e(Zf,DHe),e(Zf,BS),e(BS,GHe),e(Zf,OHe),e(A,VHe),e(A,em),e(em,aae),e(aae,XHe),e(em,zHe),e(em,NS),e(NS,QHe),e(em,WHe),e(A,HHe),e(A,om),e(om,nae),e(nae,UHe),e(om,JHe),e(om,IS),e(IS,YHe),e(om,KHe),e(A,ZHe),e(A,rm),e(rm,sae),e(sae,eUe),e(rm,oUe),e(rm,qS),e(qS,rUe),e(rm,tUe),e(A,aUe),e(A,tm),e(tm,lae),e(lae,nUe),e(tm,sUe),e(tm,jS),e(jS,lUe),e(tm,iUe),e(A,dUe),e(A,am),e(am,iae),e(iae,cUe),e(am,fUe),e(am,DS),e(DS,mUe),e(am,gUe),e(A,hUe),e(A,nm),e(nm,dae),e(dae,pUe),e(nm,_Ue),e(nm,GS),e(GS,uUe),e(nm,bUe),e(A,vUe),e(A,sm),e(sm,cae),e(cae,FUe),e(sm,TUe),e(sm,OS),e(OS,MUe),e(sm,EUe),e(A,CUe),e(A,lm),e(lm,fae),e(fae,wUe),e(lm,AUe),e(lm,VS),e(VS,LUe),e(lm,yUe),e(A,xUe),e(A,im),e(im,mae),e(mae,$Ue),e(im,kUe),e(im,XS),e(XS,SUe),e(im,RUe),e(A,PUe),e(A,dm),e(dm,gae),e(gae,BUe),e(dm,NUe),e(dm,zS),e(zS,IUe),e(dm,qUe),e(A,jUe),e(A,cm),e(cm,hae),e(hae,DUe),e(cm,GUe),e(cm,QS),e(QS,OUe),e(cm,VUe),e(A,XUe),e(A,fm),e(fm,pae),e(pae,zUe),e(fm,QUe),e(fm,WS),e(WS,WUe),e(fm,HUe),e(A,UUe),e(A,mm),e(mm,_ae),e(_ae,JUe),e(mm,YUe),e(mm,HS),e(HS,KUe),e(mm,ZUe),e(A,eJe),e(A,gm),e(gm,uae),e(uae,oJe),e(gm,rJe),e(gm,US),e(US,tJe),e(gm,aJe),e(A,nJe),e(A,hm),e(hm,bae),e(bae,sJe),e(hm,lJe),e(hm,JS),e(JS,iJe),e(hm,dJe),e(A,cJe),e(A,pm),e(pm,vae),e(vae,fJe),e(pm,mJe),e(pm,YS),e(YS,gJe),e(pm,hJe),e(A,pJe),e(A,_m),e(_m,Fae),e(Fae,_Je),e(_m,uJe),e(_m,KS),e(KS,bJe),e(_m,vJe),e(A,FJe),e(A,um),e(um,Tae),e(Tae,TJe),e(um,MJe),e(um,ZS),e(ZS,EJe),e(um,CJe),e(A,wJe),e(A,bm),e(bm,Mae),e(Mae,AJe),e(bm,LJe),e(bm,eR),e(eR,yJe),e(bm,xJe),e(A,$Je),e(A,vm),e(vm,Eae),e(Eae,kJe),e(vm,SJe),e(vm,oR),e(oR,RJe),e(vm,PJe),e(A,BJe),e(A,Fm),e(Fm,Cae),e(Cae,NJe),e(Fm,IJe),e(Fm,rR),e(rR,qJe),e(Fm,jJe),e(A,DJe),e(A,Tm),e(Tm,wae),e(wae,GJe),e(Tm,OJe),e(Tm,tR),e(tR,VJe),e(Tm,XJe),e(A,zJe),e(A,Mm),e(Mm,Aae),e(Aae,QJe),e(Mm,WJe),e(Mm,aR),e(aR,HJe),e(Mm,UJe),e(A,JJe),e(A,Em),e(Em,Lae),e(Lae,YJe),e(Em,KJe),e(Em,nR),e(nR,ZJe),e(Em,eYe),e(A,oYe),e(A,Cm),e(Cm,yae),e(yae,rYe),e(Cm,tYe),e(Cm,sR),e(sR,aYe),e(Cm,nYe),e(A,sYe),e(A,wm),e(wm,xae),e(xae,lYe),e(wm,iYe),e(wm,lR),e(lR,dYe),e(wm,cYe),e(A,fYe),e(A,Am),e(Am,$ae),e($ae,mYe),e(Am,gYe),e(Am,iR),e(iR,hYe),e(Am,pYe),e(A,_Ye),e(A,Lm),e(Lm,kae),e(kae,uYe),e(Lm,bYe),e(Lm,dR),e(dR,vYe),e(Lm,FYe),e(A,TYe),e(A,ym),e(ym,Sae),e(Sae,MYe),e(ym,EYe),e(ym,cR),e(cR,CYe),e(ym,wYe),e(A,AYe),e(A,xm),e(xm,Rae),e(Rae,LYe),e(xm,yYe),e(xm,fR),e(fR,xYe),e(xm,$Ye),e(A,kYe),e(A,$m),e($m,Pae),e(Pae,SYe),e($m,RYe),e($m,mR),e(mR,PYe),e($m,BYe),e(A,NYe),e(A,km),e(km,Bae),e(Bae,IYe),e(km,qYe),e(km,gR),e(gR,jYe),e(km,DYe),e(A,GYe),e(A,Sm),e(Sm,Nae),e(Nae,OYe),e(Sm,VYe),e(Sm,hR),e(hR,XYe),e(Sm,zYe),e(A,QYe),e(A,Rm),e(Rm,Iae),e(Iae,WYe),e(Rm,HYe),e(Rm,pR),e(pR,UYe),e(Rm,JYe),e(A,YYe),e(A,Pm),e(Pm,qae),e(qae,KYe),e(Pm,ZYe),e(Pm,_R),e(_R,eKe),e(Pm,oKe),e(A,rKe),e(A,Bm),e(Bm,jae),e(jae,tKe),e(Bm,aKe),e(Bm,uR),e(uR,nKe),e(Bm,sKe),e(A,lKe),e(A,Nm),e(Nm,Dae),e(Dae,iKe),e(Nm,dKe),e(Nm,bR),e(bR,cKe),e(Nm,fKe),e(A,mKe),e(A,Im),e(Im,Gae),e(Gae,gKe),e(Im,hKe),e(Im,vR),e(vR,pKe),e(Im,_Ke),e(A,uKe),e(A,qm),e(qm,Oae),e(Oae,bKe),e(qm,vKe),e(qm,FR),e(FR,FKe),e(qm,TKe),e(A,MKe),e(A,jm),e(jm,Vae),e(Vae,EKe),e(jm,CKe),e(jm,TR),e(TR,wKe),e(jm,AKe),e(A,LKe),e(A,Dm),e(Dm,Xae),e(Xae,yKe),e(Dm,xKe),e(Dm,MR),e(MR,$Ke),e(Dm,kKe),e(A,SKe),e(A,Gm),e(Gm,zae),e(zae,RKe),e(Gm,PKe),e(Gm,ER),e(ER,BKe),e(Gm,NKe),e(A,IKe),e(A,Om),e(Om,Qae),e(Qae,qKe),e(Om,jKe),e(Om,CR),e(CR,DKe),e(Om,GKe),e(A,OKe),e(A,Vm),e(Vm,Wae),e(Wae,VKe),e(Vm,XKe),e(Vm,wR),e(wR,zKe),e(Vm,QKe),e(A,WKe),e(A,Xm),e(Xm,Hae),e(Hae,HKe),e(Xm,UKe),e(Xm,AR),e(AR,JKe),e(Xm,YKe),e(A,KKe),e(A,zm),e(zm,Uae),e(Uae,ZKe),e(zm,eZe),e(zm,LR),e(LR,oZe),e(zm,rZe),e(A,tZe),e(A,Qm),e(Qm,Jae),e(Jae,aZe),e(Qm,nZe),e(Qm,yR),e(yR,sZe),e(Qm,lZe),e(A,iZe),e(A,Wm),e(Wm,Yae),e(Yae,dZe),e(Wm,cZe),e(Wm,xR),e(xR,fZe),e(Wm,mZe),e(A,gZe),e(A,Hm),e(Hm,Kae),e(Kae,hZe),e(Hm,pZe),e(Hm,$R),e($R,_Ze),e(Hm,uZe),e(A,bZe),e(A,Um),e(Um,Zae),e(Zae,vZe),e(Um,FZe),e(Um,kR),e(kR,TZe),e(Um,MZe),e(A,EZe),e(A,Jm),e(Jm,ene),e(ene,CZe),e(Jm,wZe),e(Jm,SR),e(SR,AZe),e(Jm,LZe),e(A,yZe),e(A,Ym),e(Ym,one),e(one,xZe),e(Ym,$Ze),e(Ym,RR),e(RR,kZe),e(Ym,SZe),e(A,RZe),e(A,Km),e(Km,rne),e(rne,PZe),e(Km,BZe),e(Km,PR),e(PR,NZe),e(Km,IZe),e(A,qZe),e(A,Zm),e(Zm,tne),e(tne,jZe),e(Zm,DZe),e(Zm,BR),e(BR,GZe),e(Zm,OZe),e(A,VZe),e(A,eg),e(eg,ane),e(ane,XZe),e(eg,zZe),e(eg,NR),e(NR,QZe),e(eg,WZe),e(A,HZe),e(A,og),e(og,nne),e(nne,UZe),e(og,JZe),e(og,IR),e(IR,YZe),e(og,KZe),e(A,ZZe),e(A,rg),e(rg,sne),e(sne,eeo),e(rg,oeo),e(rg,qR),e(qR,reo),e(rg,teo),e(A,aeo),e(A,tg),e(tg,lne),e(lne,neo),e(tg,seo),e(tg,jR),e(jR,leo),e(tg,ieo),e(A,deo),e(A,ag),e(ag,ine),e(ine,ceo),e(ag,feo),e(ag,DR),e(DR,meo),e(ag,geo),e(A,heo),e(A,ng),e(ng,dne),e(dne,peo),e(ng,_eo),e(ng,GR),e(GR,ueo),e(ng,beo),e(A,veo),e(A,sg),e(sg,cne),e(cne,Feo),e(sg,Teo),e(sg,OR),e(OR,Meo),e(sg,Eeo),e(A,Ceo),e(A,lg),e(lg,fne),e(fne,weo),e(lg,Aeo),e(lg,VR),e(VR,Leo),e(lg,yeo),e(A,xeo),e(A,ig),e(ig,mne),e(mne,$eo),e(ig,keo),e(ig,XR),e(XR,Seo),e(ig,Reo),e(A,Peo),e(A,dg),e(dg,gne),e(gne,Beo),e(dg,Neo),e(dg,zR),e(zR,Ieo),e(dg,qeo),e(A,jeo),e(A,cg),e(cg,hne),e(hne,Deo),e(cg,Geo),e(cg,QR),e(QR,Oeo),e(cg,Veo),e(A,Xeo),e(A,fg),e(fg,pne),e(pne,zeo),e(fg,Qeo),e(fg,WR),e(WR,Weo),e(fg,Heo),e(A,Ueo),e(A,mg),e(mg,_ne),e(_ne,Jeo),e(mg,Yeo),e(mg,HR),e(HR,Keo),e(mg,Zeo),e(A,eoo),e(A,gg),e(gg,une),e(une,ooo),e(gg,roo),e(gg,UR),e(UR,too),e(gg,aoo),e(A,noo),e(A,hg),e(hg,bne),e(bne,soo),e(hg,loo),e(hg,JR),e(JR,ioo),e(hg,doo),e(A,coo),e(A,pg),e(pg,vne),e(vne,foo),e(pg,moo),e(pg,YR),e(YR,goo),e(pg,hoo),e(A,poo),e(A,_g),e(_g,Fne),e(Fne,_oo),e(_g,uoo),e(_g,KR),e(KR,boo),e(_g,voo),e(A,Foo),e(A,ug),e(ug,Tne),e(Tne,Too),e(ug,Moo),e(ug,ZR),e(ZR,Eoo),e(ug,Coo),e(A,woo),e(A,bg),e(bg,Mne),e(Mne,Aoo),e(bg,Loo),e(bg,eP),e(eP,yoo),e(bg,xoo),e(A,$oo),e(A,vg),e(vg,Ene),e(Ene,koo),e(vg,Soo),e(vg,oP),e(oP,Roo),e(vg,Poo),e(A,Boo),e(A,Fg),e(Fg,Cne),e(Cne,Noo),e(Fg,Ioo),e(Fg,rP),e(rP,qoo),e(Fg,joo),e(A,Doo),e(A,Tg),e(Tg,wne),e(wne,Goo),e(Tg,Ooo),e(Tg,tP),e(tP,Voo),e(Tg,Xoo),e(A,zoo),e(A,Mg),e(Mg,Ane),e(Ane,Qoo),e(Mg,Woo),e(Mg,aP),e(aP,Hoo),e(Mg,Uoo),e(A,Joo),e(A,Eg),e(Eg,Lne),e(Lne,Yoo),e(Eg,Koo),e(Eg,nP),e(nP,Zoo),e(Eg,ero),e(A,oro),e(A,Cg),e(Cg,yne),e(yne,rro),e(Cg,tro),e(Cg,sP),e(sP,aro),e(Cg,nro),e(A,sro),e(A,wg),e(wg,xne),e(xne,lro),e(wg,iro),e(wg,lP),e(lP,dro),e(wg,cro),e(A,fro),e(A,Ag),e(Ag,$ne),e($ne,mro),e(Ag,gro),e(Ag,iP),e(iP,hro),e(Ag,pro),e(A,_ro),e(A,Lg),e(Lg,kne),e(kne,uro),e(Lg,bro),e(Lg,dP),e(dP,vro),e(Lg,Fro),e(A,Tro),e(A,yg),e(yg,Sne),e(Sne,Mro),e(yg,Ero),e(yg,cP),e(cP,Cro),e(yg,wro),e(A,Aro),e(A,xg),e(xg,Rne),e(Rne,Lro),e(xg,yro),e(xg,fP),e(fP,xro),e(xg,$ro),e(A,kro),e(A,$g),e($g,Pne),e(Pne,Sro),e($g,Rro),e($g,mP),e(mP,Pro),e($g,Bro),e(A,Nro),e(A,kg),e(kg,Bne),e(Bne,Iro),e(kg,qro),e(kg,gP),e(gP,jro),e(kg,Dro),e(A,Gro),e(A,Sg),e(Sg,Nne),e(Nne,Oro),e(Sg,Vro),e(Sg,hP),e(hP,Xro),e(Sg,zro),e(A,Qro),e(A,Rg),e(Rg,Ine),e(Ine,Wro),e(Rg,Hro),e(Rg,pP),e(pP,Uro),e(Rg,Jro),e(A,Yro),e(A,Pg),e(Pg,qne),e(qne,Kro),e(Pg,Zro),e(Pg,_P),e(_P,eto),e(Pg,oto),e(A,rto),e(A,Bg),e(Bg,jne),e(jne,tto),e(Bg,ato),e(Bg,uP),e(uP,nto),e(Bg,sto),e(A,lto),e(A,Ng),e(Ng,Dne),e(Dne,ito),e(Ng,dto),e(Ng,bP),e(bP,cto),e(Ng,fto),e(A,mto),e(A,Ig),e(Ig,Gne),e(Gne,gto),e(Ig,hto),e(Ig,vP),e(vP,pto),e(Ig,_to),e(A,uto),e(A,qg),e(qg,One),e(One,bto),e(qg,vto),e(qg,FP),e(FP,Fto),e(qg,Tto),e(A,Mto),e(A,jg),e(jg,Vne),e(Vne,Eto),e(jg,Cto),e(jg,TP),e(TP,wto),e(jg,Ato),e(A,Lto),e(A,Dg),e(Dg,Xne),e(Xne,yto),e(Dg,xto),e(Dg,MP),e(MP,$to),e(Dg,kto),e(A,Sto),e(A,Gg),e(Gg,zne),e(zne,Rto),e(Gg,Pto),e(Gg,EP),e(EP,Bto),e(Gg,Nto),e(A,Ito),e(A,Og),e(Og,Qne),e(Qne,qto),e(Og,jto),e(Og,CP),e(CP,Dto),e(Og,Gto),e(A,Oto),e(A,Vg),e(Vg,Wne),e(Wne,Vto),e(Vg,Xto),e(Vg,wP),e(wP,zto),e(Vg,Qto),e(Ar,Wto),M(Xg,Ar,null),e(wo,Hto),e(wo,zg),M(X6,zg,null),e(zg,Uto),e(zg,Hne),e(Hne,Jto),b(f,wOe,u),b(f,Si,u),e(Si,Qg),e(Qg,Une),M(z6,Une,null),e(Si,Yto),e(Si,Jne),e(Jne,Kto),b(f,AOe,u),b(f,Ao,u),M(Q6,Ao,null),e(Ao,Zto),e(Ao,W6),e(W6,eao),e(W6,AP),e(AP,oao),e(W6,rao),e(Ao,tao),e(Ao,H6),e(H6,aao),e(H6,Yne),e(Yne,nao),e(H6,sao),e(Ao,lao),e(Ao,Lr),M(U6,Lr,null),e(Lr,iao),e(Lr,Kne),e(Kne,dao),e(Lr,cao),e(Lr,ka),e(ka,fao),e(ka,Zne),e(Zne,mao),e(ka,gao),e(ka,ese),e(ese,hao),e(ka,pao),e(ka,ose),e(ose,_ao),e(ka,uao),e(Lr,bao),e(Lr,k),e(k,qn),e(qn,rse),e(rse,vao),e(qn,Fao),e(qn,LP),e(LP,Tao),e(qn,Mao),e(qn,yP),e(yP,Eao),e(qn,Cao),e(k,wao),e(k,jn),e(jn,tse),e(tse,Aao),e(jn,Lao),e(jn,xP),e(xP,yao),e(jn,xao),e(jn,$P),e($P,$ao),e(jn,kao),e(k,Sao),e(k,Dn),e(Dn,ase),e(ase,Rao),e(Dn,Pao),e(Dn,kP),e(kP,Bao),e(Dn,Nao),e(Dn,SP),e(SP,Iao),e(Dn,qao),e(k,jao),e(k,Wg),e(Wg,nse),e(nse,Dao),e(Wg,Gao),e(Wg,RP),e(RP,Oao),e(Wg,Vao),e(k,Xao),e(k,Gn),e(Gn,sse),e(sse,zao),e(Gn,Qao),e(Gn,PP),e(PP,Wao),e(Gn,Hao),e(Gn,BP),e(BP,Uao),e(Gn,Jao),e(k,Yao),e(k,Hg),e(Hg,lse),e(lse,Kao),e(Hg,Zao),e(Hg,NP),e(NP,eno),e(Hg,ono),e(k,rno),e(k,Ug),e(Ug,ise),e(ise,tno),e(Ug,ano),e(Ug,IP),e(IP,nno),e(Ug,sno),e(k,lno),e(k,Jg),e(Jg,dse),e(dse,ino),e(Jg,dno),e(Jg,qP),e(qP,cno),e(Jg,fno),e(k,mno),e(k,On),e(On,cse),e(cse,gno),e(On,hno),e(On,jP),e(jP,pno),e(On,_no),e(On,DP),e(DP,uno),e(On,bno),e(k,vno),e(k,Vn),e(Vn,fse),e(fse,Fno),e(Vn,Tno),e(Vn,GP),e(GP,Mno),e(Vn,Eno),e(Vn,OP),e(OP,Cno),e(Vn,wno),e(k,Ano),e(k,Xn),e(Xn,mse),e(mse,Lno),e(Xn,yno),e(Xn,VP),e(VP,xno),e(Xn,$no),e(Xn,XP),e(XP,kno),e(Xn,Sno),e(k,Rno),e(k,Yg),e(Yg,gse),e(gse,Pno),e(Yg,Bno),e(Yg,zP),e(zP,Nno),e(Yg,Ino),e(k,qno),e(k,Kg),e(Kg,hse),e(hse,jno),e(Kg,Dno),e(Kg,QP),e(QP,Gno),e(Kg,Ono),e(k,Vno),e(k,Zg),e(Zg,pse),e(pse,Xno),e(Zg,zno),e(Zg,WP),e(WP,Qno),e(Zg,Wno),e(k,Hno),e(k,zn),e(zn,_se),e(_se,Uno),e(zn,Jno),e(zn,HP),e(HP,Yno),e(zn,Kno),e(zn,UP),e(UP,Zno),e(zn,eso),e(k,oso),e(k,eh),e(eh,use),e(use,rso),e(eh,tso),e(eh,JP),e(JP,aso),e(eh,nso),e(k,sso),e(k,Qn),e(Qn,bse),e(bse,lso),e(Qn,iso),e(Qn,YP),e(YP,dso),e(Qn,cso),e(Qn,KP),e(KP,fso),e(Qn,mso),e(k,gso),e(k,Wn),e(Wn,vse),e(vse,hso),e(Wn,pso),e(Wn,ZP),e(ZP,_so),e(Wn,uso),e(Wn,eB),e(eB,bso),e(Wn,vso),e(k,Fso),e(k,Hn),e(Hn,Fse),e(Fse,Tso),e(Hn,Mso),e(Hn,oB),e(oB,Eso),e(Hn,Cso),e(Hn,rB),e(rB,wso),e(Hn,Aso),e(k,Lso),e(k,Un),e(Un,Tse),e(Tse,yso),e(Un,xso),e(Un,tB),e(tB,$so),e(Un,kso),e(Un,aB),e(aB,Sso),e(Un,Rso),e(k,Pso),e(k,oh),e(oh,Mse),e(Mse,Bso),e(oh,Nso),e(oh,nB),e(nB,Iso),e(oh,qso),e(k,jso),e(k,Jn),e(Jn,Ese),e(Ese,Dso),e(Jn,Gso),e(Jn,sB),e(sB,Oso),e(Jn,Vso),e(Jn,lB),e(lB,Xso),e(Jn,zso),e(k,Qso),e(k,Yn),e(Yn,Cse),e(Cse,Wso),e(Yn,Hso),e(Yn,iB),e(iB,Uso),e(Yn,Jso),e(Yn,dB),e(dB,Yso),e(Yn,Kso),e(k,Zso),e(k,Kn),e(Kn,wse),e(wse,elo),e(Kn,olo),e(Kn,cB),e(cB,rlo),e(Kn,tlo),e(Kn,fB),e(fB,alo),e(Kn,nlo),e(k,slo),e(k,Zn),e(Zn,Ase),e(Ase,llo),e(Zn,ilo),e(Zn,mB),e(mB,dlo),e(Zn,clo),e(Zn,gB),e(gB,flo),e(Zn,mlo),e(k,glo),e(k,es),e(es,Lse),e(Lse,hlo),e(es,plo),e(es,hB),e(hB,_lo),e(es,ulo),e(es,pB),e(pB,blo),e(es,vlo),e(k,Flo),e(k,os),e(os,yse),e(yse,Tlo),e(os,Mlo),e(os,_B),e(_B,Elo),e(os,Clo),e(os,uB),e(uB,wlo),e(os,Alo),e(k,Llo),e(k,rh),e(rh,xse),e(xse,ylo),e(rh,xlo),e(rh,bB),e(bB,$lo),e(rh,klo),e(k,Slo),e(k,rs),e(rs,$se),e($se,Rlo),e(rs,Plo),e(rs,vB),e(vB,Blo),e(rs,Nlo),e(rs,FB),e(FB,Ilo),e(rs,qlo),e(k,jlo),e(k,th),e(th,kse),e(kse,Dlo),e(th,Glo),e(th,TB),e(TB,Olo),e(th,Vlo),e(k,Xlo),e(k,ts),e(ts,Sse),e(Sse,zlo),e(ts,Qlo),e(ts,MB),e(MB,Wlo),e(ts,Hlo),e(ts,EB),e(EB,Ulo),e(ts,Jlo),e(k,Ylo),e(k,as),e(as,Rse),e(Rse,Klo),e(as,Zlo),e(as,CB),e(CB,eio),e(as,oio),e(as,wB),e(wB,rio),e(as,tio),e(k,aio),e(k,ns),e(ns,Pse),e(Pse,nio),e(ns,sio),e(ns,AB),e(AB,lio),e(ns,iio),e(ns,LB),e(LB,dio),e(ns,cio),e(k,fio),e(k,ah),e(ah,Bse),e(Bse,mio),e(ah,gio),e(ah,yB),e(yB,hio),e(ah,pio),e(k,_io),e(k,ss),e(ss,Nse),e(Nse,uio),e(ss,bio),e(ss,xB),e(xB,vio),e(ss,Fio),e(ss,$B),e($B,Tio),e(ss,Mio),e(k,Eio),e(k,ls),e(ls,Ise),e(Ise,Cio),e(ls,wio),e(ls,kB),e(kB,Aio),e(ls,Lio),e(ls,SB),e(SB,yio),e(ls,xio),e(k,$io),e(k,nh),e(nh,qse),e(qse,kio),e(nh,Sio),e(nh,RB),e(RB,Rio),e(nh,Pio),e(k,Bio),e(k,is),e(is,jse),e(jse,Nio),e(is,Iio),e(is,PB),e(PB,qio),e(is,jio),e(is,BB),e(BB,Dio),e(is,Gio),e(k,Oio),e(k,ds),e(ds,Dse),e(Dse,Vio),e(ds,Xio),e(ds,NB),e(NB,zio),e(ds,Qio),e(ds,IB),e(IB,Wio),e(ds,Hio),e(k,Uio),e(k,cs),e(cs,Gse),e(Gse,Jio),e(cs,Yio),e(cs,qB),e(qB,Kio),e(cs,Zio),e(cs,jB),e(jB,edo),e(cs,odo),e(k,rdo),e(k,fs),e(fs,Ose),e(Ose,tdo),e(fs,ado),e(fs,DB),e(DB,ndo),e(fs,sdo),e(fs,GB),e(GB,ldo),e(fs,ido),e(k,ddo),e(k,ms),e(ms,Vse),e(Vse,cdo),e(ms,fdo),e(ms,OB),e(OB,mdo),e(ms,gdo),e(ms,VB),e(VB,hdo),e(ms,pdo),e(k,_do),e(k,gs),e(gs,Xse),e(Xse,udo),e(gs,bdo),e(gs,XB),e(XB,vdo),e(gs,Fdo),e(gs,zB),e(zB,Tdo),e(gs,Mdo),e(k,Edo),e(k,hs),e(hs,zse),e(zse,Cdo),e(hs,wdo),e(hs,QB),e(QB,Ado),e(hs,Ldo),e(hs,WB),e(WB,ydo),e(hs,xdo),e(k,$do),e(k,ps),e(ps,Qse),e(Qse,kdo),e(ps,Sdo),e(ps,HB),e(HB,Rdo),e(ps,Pdo),e(ps,UB),e(UB,Bdo),e(ps,Ndo),e(k,Ido),e(k,sh),e(sh,Wse),e(Wse,qdo),e(sh,jdo),e(sh,JB),e(JB,Ddo),e(sh,Gdo),e(k,Odo),e(k,_s),e(_s,Hse),e(Hse,Vdo),e(_s,Xdo),e(_s,YB),e(YB,zdo),e(_s,Qdo),e(_s,KB),e(KB,Wdo),e(_s,Hdo),e(k,Udo),e(k,lh),e(lh,Use),e(Use,Jdo),e(lh,Ydo),e(lh,ZB),e(ZB,Kdo),e(lh,Zdo),e(k,eco),e(k,ih),e(ih,Jse),e(Jse,oco),e(ih,rco),e(ih,eN),e(eN,tco),e(ih,aco),e(k,nco),e(k,us),e(us,Yse),e(Yse,sco),e(us,lco),e(us,oN),e(oN,ico),e(us,dco),e(us,rN),e(rN,cco),e(us,fco),e(k,mco),e(k,bs),e(bs,Kse),e(Kse,gco),e(bs,hco),e(bs,tN),e(tN,pco),e(bs,_co),e(bs,aN),e(aN,uco),e(bs,bco),e(k,vco),e(k,vs),e(vs,Zse),e(Zse,Fco),e(vs,Tco),e(vs,nN),e(nN,Mco),e(vs,Eco),e(vs,sN),e(sN,Cco),e(vs,wco),e(k,Aco),e(k,dh),e(dh,ele),e(ele,Lco),e(dh,yco),e(dh,lN),e(lN,xco),e(dh,$co),e(k,kco),e(k,Fs),e(Fs,ole),e(ole,Sco),e(Fs,Rco),e(Fs,iN),e(iN,Pco),e(Fs,Bco),e(Fs,dN),e(dN,Nco),e(Fs,Ico),e(k,qco),e(k,Ts),e(Ts,rle),e(rle,jco),e(Ts,Dco),e(Ts,cN),e(cN,Gco),e(Ts,Oco),e(Ts,fN),e(fN,Vco),e(Ts,Xco),e(k,zco),e(k,Ms),e(Ms,tle),e(tle,Qco),e(Ms,Wco),e(Ms,mN),e(mN,Hco),e(Ms,Uco),e(Ms,gN),e(gN,Jco),e(Ms,Yco),e(k,Kco),e(k,Es),e(Es,ale),e(ale,Zco),e(Es,efo),e(Es,hN),e(hN,ofo),e(Es,rfo),e(Es,pN),e(pN,tfo),e(Es,afo),e(k,nfo),e(k,Cs),e(Cs,nle),e(nle,sfo),e(Cs,lfo),e(Cs,_N),e(_N,ifo),e(Cs,dfo),e(Cs,uN),e(uN,cfo),e(Cs,ffo),e(k,mfo),e(k,ws),e(ws,sle),e(sle,gfo),e(ws,hfo),e(ws,bN),e(bN,pfo),e(ws,_fo),e(ws,vN),e(vN,ufo),e(ws,bfo),e(k,vfo),e(k,ch),e(ch,lle),e(lle,Ffo),e(ch,Tfo),e(ch,FN),e(FN,Mfo),e(ch,Efo),e(k,Cfo),e(k,As),e(As,ile),e(ile,wfo),e(As,Afo),e(As,TN),e(TN,Lfo),e(As,yfo),e(As,MN),e(MN,xfo),e(As,$fo),e(k,kfo),e(k,fh),e(fh,dle),e(dle,Sfo),e(fh,Rfo),e(fh,EN),e(EN,Pfo),e(fh,Bfo),e(k,Nfo),e(k,mh),e(mh,cle),e(cle,Ifo),e(mh,qfo),e(mh,CN),e(CN,jfo),e(mh,Dfo),e(k,Gfo),e(k,gh),e(gh,fle),e(fle,Ofo),e(gh,Vfo),e(gh,wN),e(wN,Xfo),e(gh,zfo),e(k,Qfo),e(k,hh),e(hh,mle),e(mle,Wfo),e(hh,Hfo),e(hh,AN),e(AN,Ufo),e(hh,Jfo),e(k,Yfo),e(k,Ls),e(Ls,gle),e(gle,Kfo),e(Ls,Zfo),e(Ls,LN),e(LN,emo),e(Ls,omo),e(Ls,yN),e(yN,rmo),e(Ls,tmo),e(k,amo),e(k,ph),e(ph,hle),e(hle,nmo),e(ph,smo),e(ph,xN),e(xN,lmo),e(ph,imo),e(k,dmo),e(k,ys),e(ys,ple),e(ple,cmo),e(ys,fmo),e(ys,$N),e($N,mmo),e(ys,gmo),e(ys,kN),e(kN,hmo),e(ys,pmo),e(k,_mo),e(k,xs),e(xs,_le),e(_le,umo),e(xs,bmo),e(xs,SN),e(SN,vmo),e(xs,Fmo),e(xs,RN),e(RN,Tmo),e(xs,Mmo),e(k,Emo),e(k,$s),e($s,ule),e(ule,Cmo),e($s,wmo),e($s,PN),e(PN,Amo),e($s,Lmo),e($s,BN),e(BN,ymo),e($s,xmo),e(k,$mo),e(k,ks),e(ks,ble),e(ble,kmo),e(ks,Smo),e(ks,NN),e(NN,Rmo),e(ks,Pmo),e(ks,IN),e(IN,Bmo),e(ks,Nmo),e(k,Imo),e(k,Ss),e(Ss,vle),e(vle,qmo),e(Ss,jmo),e(Ss,qN),e(qN,Dmo),e(Ss,Gmo),e(Ss,jN),e(jN,Omo),e(Ss,Vmo),e(k,Xmo),e(k,Rs),e(Rs,Fle),e(Fle,zmo),e(Rs,Qmo),e(Rs,DN),e(DN,Wmo),e(Rs,Hmo),e(Rs,GN),e(GN,Umo),e(Rs,Jmo),e(k,Ymo),e(k,_h),e(_h,Tle),e(Tle,Kmo),e(_h,Zmo),e(_h,ON),e(ON,ego),e(_h,ogo),e(k,rgo),e(k,uh),e(uh,Mle),e(Mle,tgo),e(uh,ago),e(uh,VN),e(VN,ngo),e(uh,sgo),e(k,lgo),e(k,Ps),e(Ps,Ele),e(Ele,igo),e(Ps,dgo),e(Ps,XN),e(XN,cgo),e(Ps,fgo),e(Ps,zN),e(zN,mgo),e(Ps,ggo),e(k,hgo),e(k,Bs),e(Bs,Cle),e(Cle,pgo),e(Bs,_go),e(Bs,QN),e(QN,ugo),e(Bs,bgo),e(Bs,WN),e(WN,vgo),e(Bs,Fgo),e(k,Tgo),e(k,Ns),e(Ns,wle),e(wle,Mgo),e(Ns,Ego),e(Ns,HN),e(HN,Cgo),e(Ns,wgo),e(Ns,UN),e(UN,Ago),e(Ns,Lgo),e(k,ygo),e(k,bh),e(bh,Ale),e(Ale,xgo),e(bh,$go),e(bh,JN),e(JN,kgo),e(bh,Sgo),e(k,Rgo),e(k,vh),e(vh,Lle),e(Lle,Pgo),e(vh,Bgo),e(vh,YN),e(YN,Ngo),e(vh,Igo),e(k,qgo),e(k,Fh),e(Fh,yle),e(yle,jgo),e(Fh,Dgo),e(Fh,KN),e(KN,Ggo),e(Fh,Ogo),e(k,Vgo),e(k,Is),e(Is,xle),e(xle,Xgo),e(Is,zgo),e(Is,ZN),e(ZN,Qgo),e(Is,Wgo),e(Is,eI),e(eI,Hgo),e(Is,Ugo),e(k,Jgo),e(k,qs),e(qs,$le),e($le,Ygo),e(qs,Kgo),e(qs,oI),e(oI,Zgo),e(qs,eho),e(qs,rI),e(rI,oho),e(qs,rho),e(k,tho),e(k,Th),e(Th,kle),e(kle,aho),e(Th,nho),e(Th,tI),e(tI,sho),e(Th,lho),e(k,iho),e(k,Mh),e(Mh,Sle),e(Sle,dho),e(Mh,cho),e(Mh,aI),e(aI,fho),e(Mh,mho),e(k,gho),e(k,Eh),e(Eh,Rle),e(Rle,hho),e(Eh,pho),e(Eh,nI),e(nI,_ho),e(Eh,uho),e(k,bho),e(k,js),e(js,Ple),e(Ple,vho),e(js,Fho),e(js,sI),e(sI,Tho),e(js,Mho),e(js,lI),e(lI,Eho),e(js,Cho),e(k,who),e(k,Ch),e(Ch,Ble),e(Ble,Aho),e(Ch,Lho),e(Ch,iI),e(iI,yho),e(Ch,xho),e(k,$ho),e(k,wh),e(wh,Nle),e(Nle,kho),e(wh,Sho),e(wh,dI),e(dI,Rho),e(wh,Pho),e(k,Bho),e(k,Ds),e(Ds,Ile),e(Ile,Nho),e(Ds,Iho),e(Ds,cI),e(cI,qho),e(Ds,jho),e(Ds,fI),e(fI,Dho),e(Ds,Gho),e(k,Oho),e(k,Gs),e(Gs,qle),e(qle,Vho),e(Gs,Xho),e(Gs,mI),e(mI,zho),e(Gs,Qho),e(Gs,gI),e(gI,Who),e(Gs,Hho),e(k,Uho),e(k,Os),e(Os,jle),e(jle,Jho),e(Os,Yho),e(Os,hI),e(hI,Kho),e(Os,Zho),e(Os,pI),e(pI,epo),e(Os,opo),e(k,rpo),e(k,Vs),e(Vs,Dle),e(Dle,tpo),e(Vs,apo),e(Vs,_I),e(_I,npo),e(Vs,spo),e(Vs,uI),e(uI,lpo),e(Vs,ipo),e(Lr,dpo),M(Ah,Lr,null),e(Ao,cpo),e(Ao,Lh),M(J6,Lh,null),e(Lh,fpo),e(Lh,Gle),e(Gle,mpo),b(f,LOe,u),b(f,Ri,u),e(Ri,yh),e(yh,Ole),M(Y6,Ole,null),e(Ri,gpo),e(Ri,Vle),e(Vle,hpo),b(f,yOe,u),b(f,Lo,u),M(K6,Lo,null),e(Lo,ppo),e(Lo,Z6),e(Z6,_po),e(Z6,bI),e(bI,upo),e(Z6,bpo),e(Lo,vpo),e(Lo,eL),e(eL,Fpo),e(eL,Xle),e(Xle,Tpo),e(eL,Mpo),e(Lo,Epo),e(Lo,He),M(oL,He,null),e(He,Cpo),e(He,zle),e(zle,wpo),e(He,Apo),e(He,Sa),e(Sa,Lpo),e(Sa,Qle),e(Qle,ypo),e(Sa,xpo),e(Sa,Wle),e(Wle,$po),e(Sa,kpo),e(Sa,Hle),e(Hle,Spo),e(Sa,Rpo),e(He,Ppo),e(He,Y),e(Y,xh),e(xh,Ule),e(Ule,Bpo),e(xh,Npo),e(xh,vI),e(vI,Ipo),e(xh,qpo),e(Y,jpo),e(Y,$h),e($h,Jle),e(Jle,Dpo),e($h,Gpo),e($h,FI),e(FI,Opo),e($h,Vpo),e(Y,Xpo),e(Y,kh),e(kh,Yle),e(Yle,zpo),e(kh,Qpo),e(kh,TI),e(TI,Wpo),e(kh,Hpo),e(Y,Upo),e(Y,Sh),e(Sh,Kle),e(Kle,Jpo),e(Sh,Ypo),e(Sh,MI),e(MI,Kpo),e(Sh,Zpo),e(Y,e_o),e(Y,Rh),e(Rh,Zle),e(Zle,o_o),e(Rh,r_o),e(Rh,EI),e(EI,t_o),e(Rh,a_o),e(Y,n_o),e(Y,Ph),e(Ph,eie),e(eie,s_o),e(Ph,l_o),e(Ph,CI),e(CI,i_o),e(Ph,d_o),e(Y,c_o),e(Y,Bh),e(Bh,oie),e(oie,f_o),e(Bh,m_o),e(Bh,wI),e(wI,g_o),e(Bh,h_o),e(Y,p_o),e(Y,Nh),e(Nh,rie),e(rie,__o),e(Nh,u_o),e(Nh,AI),e(AI,b_o),e(Nh,v_o),e(Y,F_o),e(Y,Ih),e(Ih,tie),e(tie,T_o),e(Ih,M_o),e(Ih,LI),e(LI,E_o),e(Ih,C_o),e(Y,w_o),e(Y,qh),e(qh,aie),e(aie,A_o),e(qh,L_o),e(qh,yI),e(yI,y_o),e(qh,x_o),e(Y,$_o),e(Y,jh),e(jh,nie),e(nie,k_o),e(jh,S_o),e(jh,xI),e(xI,R_o),e(jh,P_o),e(Y,B_o),e(Y,Dh),e(Dh,sie),e(sie,N_o),e(Dh,I_o),e(Dh,$I),e($I,q_o),e(Dh,j_o),e(Y,D_o),e(Y,Gh),e(Gh,lie),e(lie,G_o),e(Gh,O_o),e(Gh,kI),e(kI,V_o),e(Gh,X_o),e(Y,z_o),e(Y,Oh),e(Oh,iie),e(iie,Q_o),e(Oh,W_o),e(Oh,SI),e(SI,H_o),e(Oh,U_o),e(Y,J_o),e(Y,Vh),e(Vh,die),e(die,Y_o),e(Vh,K_o),e(Vh,RI),e(RI,Z_o),e(Vh,euo),e(Y,ouo),e(Y,Xh),e(Xh,cie),e(cie,ruo),e(Xh,tuo),e(Xh,PI),e(PI,auo),e(Xh,nuo),e(Y,suo),e(Y,zh),e(zh,fie),e(fie,luo),e(zh,iuo),e(zh,BI),e(BI,duo),e(zh,cuo),e(Y,fuo),e(Y,Qh),e(Qh,mie),e(mie,muo),e(Qh,guo),e(Qh,NI),e(NI,huo),e(Qh,puo),e(Y,_uo),e(Y,Wh),e(Wh,gie),e(gie,uuo),e(Wh,buo),e(Wh,II),e(II,vuo),e(Wh,Fuo),e(Y,Tuo),e(Y,Hh),e(Hh,hie),e(hie,Muo),e(Hh,Euo),e(Hh,qI),e(qI,Cuo),e(Hh,wuo),e(Y,Auo),e(Y,Uh),e(Uh,pie),e(pie,Luo),e(Uh,yuo),e(Uh,jI),e(jI,xuo),e(Uh,$uo),e(Y,kuo),e(Y,Jh),e(Jh,_ie),e(_ie,Suo),e(Jh,Ruo),e(Jh,DI),e(DI,Puo),e(Jh,Buo),e(Y,Nuo),e(Y,Yh),e(Yh,uie),e(uie,Iuo),e(Yh,quo),e(Yh,GI),e(GI,juo),e(Yh,Duo),e(Y,Guo),e(Y,Kh),e(Kh,bie),e(bie,Ouo),e(Kh,Vuo),e(Kh,OI),e(OI,Xuo),e(Kh,zuo),e(Y,Quo),e(Y,Zh),e(Zh,vie),e(vie,Wuo),e(Zh,Huo),e(Zh,VI),e(VI,Uuo),e(Zh,Juo),e(Y,Yuo),e(Y,ep),e(ep,Fie),e(Fie,Kuo),e(ep,Zuo),e(ep,XI),e(XI,e1o),e(ep,o1o),e(Y,r1o),e(Y,op),e(op,Tie),e(Tie,t1o),e(op,a1o),e(op,zI),e(zI,n1o),e(op,s1o),e(Y,l1o),e(Y,rp),e(rp,Mie),e(Mie,i1o),e(rp,d1o),e(rp,QI),e(QI,c1o),e(rp,f1o),e(Y,m1o),e(Y,tp),e(tp,Eie),e(Eie,g1o),e(tp,h1o),e(tp,WI),e(WI,p1o),e(tp,_1o),e(Y,u1o),e(Y,ap),e(ap,Cie),e(Cie,b1o),e(ap,v1o),e(ap,HI),e(HI,F1o),e(ap,T1o),e(Y,M1o),e(Y,np),e(np,wie),e(wie,E1o),e(np,C1o),e(np,UI),e(UI,w1o),e(np,A1o),e(Y,L1o),e(Y,sp),e(sp,Aie),e(Aie,y1o),e(sp,x1o),e(sp,JI),e(JI,$1o),e(sp,k1o),e(Y,S1o),e(Y,lp),e(lp,Lie),e(Lie,R1o),e(lp,P1o),e(lp,YI),e(YI,B1o),e(lp,N1o),e(He,I1o),M(ip,He,null),e(He,q1o),M(dp,He,null),e(Lo,j1o),e(Lo,cp),M(rL,cp,null),e(cp,D1o),e(cp,yie),e(yie,G1o),b(f,xOe,u),b(f,Pi,u),e(Pi,fp),e(fp,xie),M(tL,xie,null),e(Pi,O1o),e(Pi,$ie),e($ie,V1o),b(f,$Oe,u),b(f,yo,u),M(aL,yo,null),e(yo,X1o),e(yo,nL),e(nL,z1o),e(nL,KI),e(KI,Q1o),e(nL,W1o),e(yo,H1o),e(yo,sL),e(sL,U1o),e(sL,kie),e(kie,J1o),e(sL,Y1o),e(yo,K1o),e(yo,Ue),M(lL,Ue,null),e(Ue,Z1o),e(Ue,Sie),e(Sie,e7o),e(Ue,o7o),e(Ue,Bi),e(Bi,r7o),e(Bi,Rie),e(Rie,t7o),e(Bi,a7o),e(Bi,Pie),e(Pie,n7o),e(Bi,s7o),e(Ue,l7o),e(Ue,he),e(he,mp),e(mp,Bie),e(Bie,i7o),e(mp,d7o),e(mp,ZI),e(ZI,c7o),e(mp,f7o),e(he,m7o),e(he,gp),e(gp,Nie),e(Nie,g7o),e(gp,h7o),e(gp,Iie),e(Iie,p7o),e(gp,_7o),e(he,u7o),e(he,hp),e(hp,qie),e(qie,b7o),e(hp,v7o),e(hp,eq),e(eq,F7o),e(hp,T7o),e(he,M7o),e(he,pp),e(pp,jie),e(jie,E7o),e(pp,C7o),e(pp,oq),e(oq,w7o),e(pp,A7o),e(he,L7o),e(he,_p),e(_p,Die),e(Die,y7o),e(_p,x7o),e(_p,rq),e(rq,$7o),e(_p,k7o),e(he,S7o),e(he,up),e(up,Gie),e(Gie,R7o),e(up,P7o),e(up,tq),e(tq,B7o),e(up,N7o),e(he,I7o),e(he,bp),e(bp,Oie),e(Oie,q7o),e(bp,j7o),e(bp,aq),e(aq,D7o),e(bp,G7o),e(he,O7o),e(he,vp),e(vp,Vie),e(Vie,V7o),e(vp,X7o),e(vp,nq),e(nq,z7o),e(vp,Q7o),e(he,W7o),e(he,Fp),e(Fp,Xie),e(Xie,H7o),e(Fp,U7o),e(Fp,sq),e(sq,J7o),e(Fp,Y7o),e(he,K7o),e(he,Tp),e(Tp,zie),e(zie,Z7o),e(Tp,e9o),e(Tp,lq),e(lq,o9o),e(Tp,r9o),e(he,t9o),e(he,Mp),e(Mp,Qie),e(Qie,a9o),e(Mp,n9o),e(Mp,iq),e(iq,s9o),e(Mp,l9o),e(he,i9o),e(he,Ep),e(Ep,Wie),e(Wie,d9o),e(Ep,c9o),e(Ep,dq),e(dq,f9o),e(Ep,m9o),e(he,g9o),e(he,Cp),e(Cp,Hie),e(Hie,h9o),e(Cp,p9o),e(Cp,cq),e(cq,_9o),e(Cp,u9o),e(he,b9o),e(he,wp),e(wp,Uie),e(Uie,v9o),e(wp,F9o),e(wp,fq),e(fq,T9o),e(wp,M9o),e(he,E9o),e(he,Ap),e(Ap,Jie),e(Jie,C9o),e(Ap,w9o),e(Ap,mq),e(mq,A9o),e(Ap,L9o),e(he,y9o),e(he,Lp),e(Lp,Yie),e(Yie,x9o),e(Lp,$9o),e(Lp,gq),e(gq,k9o),e(Lp,S9o),e(he,R9o),e(he,yp),e(yp,Kie),e(Kie,P9o),e(yp,B9o),e(yp,hq),e(hq,N9o),e(yp,I9o),e(Ue,q9o),M(xp,Ue,null),e(Ue,j9o),M($p,Ue,null),e(yo,D9o),e(yo,kp),M(iL,kp,null),e(kp,G9o),e(kp,Zie),e(Zie,O9o),b(f,kOe,u),b(f,Ni,u),e(Ni,Sp),e(Sp,ede),M(dL,ede,null),e(Ni,V9o),e(Ni,ode),e(ode,X9o),b(f,SOe,u),b(f,xo,u),M(cL,xo,null),e(xo,z9o),e(xo,Ii),e(Ii,Q9o),e(Ii,pq),e(pq,W9o),e(Ii,H9o),e(Ii,_q),e(_q,U9o),e(Ii,J9o),e(xo,Y9o),e(xo,fL),e(fL,K9o),e(fL,rde),e(rde,Z9o),e(fL,e2o),e(xo,o2o),e(xo,nt),M(mL,nt,null),e(nt,r2o),e(nt,tde),e(tde,t2o),e(nt,a2o),e(nt,qi),e(qi,n2o),e(qi,ade),e(ade,s2o),e(qi,l2o),e(qi,uq),e(uq,i2o),e(qi,d2o),e(nt,c2o),M(Rp,nt,null),e(xo,f2o),e(xo,Je),M(gL,Je,null),e(Je,m2o),e(Je,nde),e(nde,g2o),e(Je,h2o),e(Je,Ra),e(Ra,p2o),e(Ra,sde),e(sde,_2o),e(Ra,u2o),e(Ra,lde),e(lde,b2o),e(Ra,v2o),e(Ra,ide),e(ide,F2o),e(Ra,T2o),e(Je,M2o),e(Je,y),e(y,Pp),e(Pp,dde),e(dde,E2o),e(Pp,C2o),e(Pp,bq),e(bq,w2o),e(Pp,A2o),e(y,L2o),e(y,Bp),e(Bp,cde),e(cde,y2o),e(Bp,x2o),e(Bp,vq),e(vq,$2o),e(Bp,k2o),e(y,S2o),e(y,Np),e(Np,fde),e(fde,R2o),e(Np,P2o),e(Np,Fq),e(Fq,B2o),e(Np,N2o),e(y,I2o),e(y,Ip),e(Ip,mde),e(mde,q2o),e(Ip,j2o),e(Ip,Tq),e(Tq,D2o),e(Ip,G2o),e(y,O2o),e(y,qp),e(qp,gde),e(gde,V2o),e(qp,X2o),e(qp,Mq),e(Mq,z2o),e(qp,Q2o),e(y,W2o),e(y,jp),e(jp,hde),e(hde,H2o),e(jp,U2o),e(jp,Eq),e(Eq,J2o),e(jp,Y2o),e(y,K2o),e(y,Dp),e(Dp,pde),e(pde,Z2o),e(Dp,ebo),e(Dp,Cq),e(Cq,obo),e(Dp,rbo),e(y,tbo),e(y,Gp),e(Gp,_de),e(_de,abo),e(Gp,nbo),e(Gp,wq),e(wq,sbo),e(Gp,lbo),e(y,ibo),e(y,Op),e(Op,ude),e(ude,dbo),e(Op,cbo),e(Op,Aq),e(Aq,fbo),e(Op,mbo),e(y,gbo),e(y,Vp),e(Vp,bde),e(bde,hbo),e(Vp,pbo),e(Vp,Lq),e(Lq,_bo),e(Vp,ubo),e(y,bbo),e(y,Xp),e(Xp,vde),e(vde,vbo),e(Xp,Fbo),e(Xp,yq),e(yq,Tbo),e(Xp,Mbo),e(y,Ebo),e(y,zp),e(zp,Fde),e(Fde,Cbo),e(zp,wbo),e(zp,xq),e(xq,Abo),e(zp,Lbo),e(y,ybo),e(y,Qp),e(Qp,Tde),e(Tde,xbo),e(Qp,$bo),e(Qp,$q),e($q,kbo),e(Qp,Sbo),e(y,Rbo),e(y,Wp),e(Wp,Mde),e(Mde,Pbo),e(Wp,Bbo),e(Wp,kq),e(kq,Nbo),e(Wp,Ibo),e(y,qbo),e(y,Hp),e(Hp,Ede),e(Ede,jbo),e(Hp,Dbo),e(Hp,Sq),e(Sq,Gbo),e(Hp,Obo),e(y,Vbo),e(y,Up),e(Up,Cde),e(Cde,Xbo),e(Up,zbo),e(Up,Rq),e(Rq,Qbo),e(Up,Wbo),e(y,Hbo),e(y,Jp),e(Jp,wde),e(wde,Ubo),e(Jp,Jbo),e(Jp,Pq),e(Pq,Ybo),e(Jp,Kbo),e(y,Zbo),e(y,Yp),e(Yp,Ade),e(Ade,evo),e(Yp,ovo),e(Yp,Bq),e(Bq,rvo),e(Yp,tvo),e(y,avo),e(y,Kp),e(Kp,Lde),e(Lde,nvo),e(Kp,svo),e(Kp,Nq),e(Nq,lvo),e(Kp,ivo),e(y,dvo),e(y,Zp),e(Zp,yde),e(yde,cvo),e(Zp,fvo),e(Zp,Iq),e(Iq,mvo),e(Zp,gvo),e(y,hvo),e(y,e_),e(e_,xde),e(xde,pvo),e(e_,_vo),e(e_,qq),e(qq,uvo),e(e_,bvo),e(y,vvo),e(y,o_),e(o_,$de),e($de,Fvo),e(o_,Tvo),e(o_,jq),e(jq,Mvo),e(o_,Evo),e(y,Cvo),e(y,r_),e(r_,kde),e(kde,wvo),e(r_,Avo),e(r_,Dq),e(Dq,Lvo),e(r_,yvo),e(y,xvo),e(y,t_),e(t_,Sde),e(Sde,$vo),e(t_,kvo),e(t_,Gq),e(Gq,Svo),e(t_,Rvo),e(y,Pvo),e(y,a_),e(a_,Rde),e(Rde,Bvo),e(a_,Nvo),e(a_,Oq),e(Oq,Ivo),e(a_,qvo),e(y,jvo),e(y,n_),e(n_,Pde),e(Pde,Dvo),e(n_,Gvo),e(n_,Vq),e(Vq,Ovo),e(n_,Vvo),e(y,Xvo),e(y,s_),e(s_,Bde),e(Bde,zvo),e(s_,Qvo),e(s_,Xq),e(Xq,Wvo),e(s_,Hvo),e(y,Uvo),e(y,l_),e(l_,Nde),e(Nde,Jvo),e(l_,Yvo),e(l_,zq),e(zq,Kvo),e(l_,Zvo),e(y,eFo),e(y,i_),e(i_,Ide),e(Ide,oFo),e(i_,rFo),e(i_,Qq),e(Qq,tFo),e(i_,aFo),e(y,nFo),e(y,d_),e(d_,qde),e(qde,sFo),e(d_,lFo),e(d_,Wq),e(Wq,iFo),e(d_,dFo),e(y,cFo),e(y,c_),e(c_,jde),e(jde,fFo),e(c_,mFo),e(c_,Hq),e(Hq,gFo),e(c_,hFo),e(y,pFo),e(y,f_),e(f_,Dde),e(Dde,_Fo),e(f_,uFo),e(f_,Uq),e(Uq,bFo),e(f_,vFo),e(y,FFo),e(y,m_),e(m_,Gde),e(Gde,TFo),e(m_,MFo),e(m_,Jq),e(Jq,EFo),e(m_,CFo),e(y,wFo),e(y,g_),e(g_,Ode),e(Ode,AFo),e(g_,LFo),e(g_,Yq),e(Yq,yFo),e(g_,xFo),e(y,$Fo),e(y,Xs),e(Xs,Vde),e(Vde,kFo),e(Xs,SFo),e(Xs,Kq),e(Kq,RFo),e(Xs,PFo),e(Xs,Zq),e(Zq,BFo),e(Xs,NFo),e(y,IFo),e(y,h_),e(h_,Xde),e(Xde,qFo),e(h_,jFo),e(h_,ej),e(ej,DFo),e(h_,GFo),e(y,OFo),e(y,p_),e(p_,zde),e(zde,VFo),e(p_,XFo),e(p_,oj),e(oj,zFo),e(p_,QFo),e(y,WFo),e(y,__),e(__,Qde),e(Qde,HFo),e(__,UFo),e(__,rj),e(rj,JFo),e(__,YFo),e(y,KFo),e(y,u_),e(u_,Wde),e(Wde,ZFo),e(u_,eTo),e(u_,tj),e(tj,oTo),e(u_,rTo),e(y,tTo),e(y,b_),e(b_,Hde),e(Hde,aTo),e(b_,nTo),e(b_,aj),e(aj,sTo),e(b_,lTo),e(y,iTo),e(y,v_),e(v_,Ude),e(Ude,dTo),e(v_,cTo),e(v_,nj),e(nj,fTo),e(v_,mTo),e(y,gTo),e(y,F_),e(F_,Jde),e(Jde,hTo),e(F_,pTo),e(F_,sj),e(sj,_To),e(F_,uTo),e(y,bTo),e(y,T_),e(T_,Yde),e(Yde,vTo),e(T_,FTo),e(T_,lj),e(lj,TTo),e(T_,MTo),e(y,ETo),e(y,M_),e(M_,Kde),e(Kde,CTo),e(M_,wTo),e(M_,ij),e(ij,ATo),e(M_,LTo),e(y,yTo),e(y,E_),e(E_,Zde),e(Zde,xTo),e(E_,$To),e(E_,dj),e(dj,kTo),e(E_,STo),e(y,RTo),e(y,C_),e(C_,ece),e(ece,PTo),e(C_,BTo),e(C_,cj),e(cj,NTo),e(C_,ITo),e(y,qTo),e(y,w_),e(w_,oce),e(oce,jTo),e(w_,DTo),e(w_,fj),e(fj,GTo),e(w_,OTo),e(y,VTo),e(y,A_),e(A_,rce),e(rce,XTo),e(A_,zTo),e(A_,mj),e(mj,QTo),e(A_,WTo),e(y,HTo),e(y,L_),e(L_,tce),e(tce,UTo),e(L_,JTo),e(L_,gj),e(gj,YTo),e(L_,KTo),e(y,ZTo),e(y,y_),e(y_,ace),e(ace,eMo),e(y_,oMo),e(y_,hj),e(hj,rMo),e(y_,tMo),e(y,aMo),e(y,x_),e(x_,nce),e(nce,nMo),e(x_,sMo),e(x_,pj),e(pj,lMo),e(x_,iMo),e(y,dMo),e(y,$_),e($_,sce),e(sce,cMo),e($_,fMo),e($_,_j),e(_j,mMo),e($_,gMo),e(y,hMo),e(y,k_),e(k_,lce),e(lce,pMo),e(k_,_Mo),e(k_,uj),e(uj,uMo),e(k_,bMo),e(y,vMo),e(y,S_),e(S_,ice),e(ice,FMo),e(S_,TMo),e(S_,bj),e(bj,MMo),e(S_,EMo),e(y,CMo),e(y,R_),e(R_,dce),e(dce,wMo),e(R_,AMo),e(R_,vj),e(vj,LMo),e(R_,yMo),e(y,xMo),e(y,P_),e(P_,cce),e(cce,$Mo),e(P_,kMo),e(P_,Fj),e(Fj,SMo),e(P_,RMo),e(y,PMo),e(y,B_),e(B_,fce),e(fce,BMo),e(B_,NMo),e(B_,Tj),e(Tj,IMo),e(B_,qMo),e(y,jMo),e(y,N_),e(N_,mce),e(mce,DMo),e(N_,GMo),e(N_,Mj),e(Mj,OMo),e(N_,VMo),e(y,XMo),e(y,I_),e(I_,gce),e(gce,zMo),e(I_,QMo),e(I_,Ej),e(Ej,WMo),e(I_,HMo),e(y,UMo),e(y,q_),e(q_,hce),e(hce,JMo),e(q_,YMo),e(q_,Cj),e(Cj,KMo),e(q_,ZMo),e(y,eEo),e(y,j_),e(j_,pce),e(pce,oEo),e(j_,rEo),e(j_,wj),e(wj,tEo),e(j_,aEo),e(y,nEo),e(y,D_),e(D_,_ce),e(_ce,sEo),e(D_,lEo),e(D_,Aj),e(Aj,iEo),e(D_,dEo),e(y,cEo),e(y,G_),e(G_,uce),e(uce,fEo),e(G_,mEo),e(G_,Lj),e(Lj,gEo),e(G_,hEo),e(y,pEo),e(y,O_),e(O_,bce),e(bce,_Eo),e(O_,uEo),e(O_,yj),e(yj,bEo),e(O_,vEo),e(y,FEo),e(y,V_),e(V_,vce),e(vce,TEo),e(V_,MEo),e(V_,xj),e(xj,EEo),e(V_,CEo),e(y,wEo),e(y,X_),e(X_,Fce),e(Fce,AEo),e(X_,LEo),e(X_,$j),e($j,yEo),e(X_,xEo),e(y,$Eo),e(y,z_),e(z_,Tce),e(Tce,kEo),e(z_,SEo),e(z_,kj),e(kj,REo),e(z_,PEo),e(y,BEo),e(y,Q_),e(Q_,Mce),e(Mce,NEo),e(Q_,IEo),e(Q_,Sj),e(Sj,qEo),e(Q_,jEo),e(y,DEo),e(y,W_),e(W_,Ece),e(Ece,GEo),e(W_,OEo),e(W_,Rj),e(Rj,VEo),e(W_,XEo),e(y,zEo),e(y,H_),e(H_,Cce),e(Cce,QEo),e(H_,WEo),e(H_,Pj),e(Pj,HEo),e(H_,UEo),e(y,JEo),e(y,U_),e(U_,wce),e(wce,YEo),e(U_,KEo),e(U_,Bj),e(Bj,ZEo),e(U_,e4o),e(y,o4o),e(y,J_),e(J_,Ace),e(Ace,r4o),e(J_,t4o),e(J_,Nj),e(Nj,a4o),e(J_,n4o),e(y,s4o),e(y,Y_),e(Y_,Lce),e(Lce,l4o),e(Y_,i4o),e(Y_,Ij),e(Ij,d4o),e(Y_,c4o),e(y,f4o),e(y,K_),e(K_,yce),e(yce,m4o),e(K_,g4o),e(K_,qj),e(qj,h4o),e(K_,p4o),e(y,_4o),e(y,Z_),e(Z_,xce),e(xce,u4o),e(Z_,b4o),e(Z_,jj),e(jj,v4o),e(Z_,F4o),e(y,T4o),e(y,eu),e(eu,$ce),e($ce,M4o),e(eu,E4o),e(eu,Dj),e(Dj,C4o),e(eu,w4o),e(y,A4o),e(y,ou),e(ou,kce),e(kce,L4o),e(ou,y4o),e(ou,Gj),e(Gj,x4o),e(ou,$4o),e(y,k4o),e(y,ru),e(ru,Sce),e(Sce,S4o),e(ru,R4o),e(ru,Oj),e(Oj,P4o),e(ru,B4o),e(y,N4o),e(y,tu),e(tu,Rce),e(Rce,I4o),e(tu,q4o),e(tu,Vj),e(Vj,j4o),e(tu,D4o),e(y,G4o),e(y,au),e(au,Pce),e(Pce,O4o),e(au,V4o),e(au,Xj),e(Xj,X4o),e(au,z4o),e(y,Q4o),e(y,nu),e(nu,Bce),e(Bce,W4o),e(nu,H4o),e(nu,zj),e(zj,U4o),e(nu,J4o),e(y,Y4o),e(y,su),e(su,Nce),e(Nce,K4o),e(su,Z4o),e(su,Qj),e(Qj,eCo),e(su,oCo),e(y,rCo),e(y,lu),e(lu,Ice),e(Ice,tCo),e(lu,aCo),e(lu,Wj),e(Wj,nCo),e(lu,sCo),e(y,lCo),e(y,iu),e(iu,qce),e(qce,iCo),e(iu,dCo),e(iu,Hj),e(Hj,cCo),e(iu,fCo),e(y,mCo),e(y,du),e(du,jce),e(jce,gCo),e(du,hCo),e(du,Uj),e(Uj,pCo),e(du,_Co),e(y,uCo),e(y,cu),e(cu,Dce),e(Dce,bCo),e(cu,vCo),e(cu,Jj),e(Jj,FCo),e(cu,TCo),e(y,MCo),e(y,fu),e(fu,Gce),e(Gce,ECo),e(fu,CCo),e(fu,Yj),e(Yj,wCo),e(fu,ACo),e(y,LCo),e(y,mu),e(mu,Oce),e(Oce,yCo),e(mu,xCo),e(mu,Kj),e(Kj,$Co),e(mu,kCo),e(y,SCo),e(y,gu),e(gu,Vce),e(Vce,RCo),e(gu,PCo),e(gu,Zj),e(Zj,BCo),e(gu,NCo),e(y,ICo),e(y,hu),e(hu,Xce),e(Xce,qCo),e(hu,jCo),e(hu,eD),e(eD,DCo),e(hu,GCo),e(y,OCo),e(y,pu),e(pu,zce),e(zce,VCo),e(pu,XCo),e(pu,oD),e(oD,zCo),e(pu,QCo),e(y,WCo),e(y,_u),e(_u,Qce),e(Qce,HCo),e(_u,UCo),e(_u,rD),e(rD,JCo),e(_u,YCo),e(y,KCo),e(y,uu),e(uu,Wce),e(Wce,ZCo),e(uu,e5o),e(uu,tD),e(tD,o5o),e(uu,r5o),e(y,t5o),e(y,bu),e(bu,Hce),e(Hce,a5o),e(bu,n5o),e(bu,aD),e(aD,s5o),e(bu,l5o),e(y,i5o),e(y,vu),e(vu,Uce),e(Uce,d5o),e(vu,c5o),e(vu,nD),e(nD,f5o),e(vu,m5o),e(y,g5o),e(y,Fu),e(Fu,Jce),e(Jce,h5o),e(Fu,p5o),e(Fu,sD),e(sD,_5o),e(Fu,u5o),e(y,b5o),e(y,Tu),e(Tu,Yce),e(Yce,v5o),e(Tu,F5o),e(Tu,lD),e(lD,T5o),e(Tu,M5o),e(y,E5o),e(y,Mu),e(Mu,Kce),e(Kce,C5o),e(Mu,w5o),e(Mu,iD),e(iD,A5o),e(Mu,L5o),e(y,y5o),e(y,Eu),e(Eu,Zce),e(Zce,x5o),e(Eu,$5o),e(Eu,dD),e(dD,k5o),e(Eu,S5o),e(y,R5o),e(y,Cu),e(Cu,efe),e(efe,P5o),e(Cu,B5o),e(Cu,cD),e(cD,N5o),e(Cu,I5o),e(y,q5o),e(y,wu),e(wu,ofe),e(ofe,j5o),e(wu,D5o),e(wu,fD),e(fD,G5o),e(wu,O5o),e(y,V5o),e(y,Au),e(Au,rfe),e(rfe,X5o),e(Au,z5o),e(Au,mD),e(mD,Q5o),e(Au,W5o),e(y,H5o),e(y,Lu),e(Lu,tfe),e(tfe,U5o),e(Lu,J5o),e(Lu,gD),e(gD,Y5o),e(Lu,K5o),e(y,Z5o),e(y,yu),e(yu,afe),e(afe,e3o),e(yu,o3o),e(yu,hD),e(hD,r3o),e(yu,t3o),e(y,a3o),e(y,xu),e(xu,nfe),e(nfe,n3o),e(xu,s3o),e(xu,pD),e(pD,l3o),e(xu,i3o),e(y,d3o),e(y,$u),e($u,sfe),e(sfe,c3o),e($u,f3o),e($u,_D),e(_D,m3o),e($u,g3o),e(y,h3o),e(y,ku),e(ku,lfe),e(lfe,p3o),e(ku,_3o),e(ku,uD),e(uD,u3o),e(ku,b3o),e(y,v3o),e(y,Su),e(Su,ife),e(ife,F3o),e(Su,T3o),e(Su,bD),e(bD,M3o),e(Su,E3o),e(y,C3o),e(y,Ru),e(Ru,dfe),e(dfe,w3o),e(Ru,A3o),e(Ru,vD),e(vD,L3o),e(Ru,y3o),e(Je,x3o),e(Je,Pu),e(Pu,$3o),e(Pu,cfe),e(cfe,k3o),e(Pu,S3o),e(Pu,ffe),e(ffe,R3o),e(Je,P3o),M(Bu,Je,null),b(f,ROe,u),b(f,ji,u),e(ji,Nu),e(Nu,mfe),M(hL,mfe,null),e(ji,B3o),e(ji,gfe),e(gfe,N3o),b(f,POe,u),b(f,$o,u),M(pL,$o,null),e($o,I3o),e($o,Di),e(Di,q3o),e(Di,FD),e(FD,j3o),e(Di,D3o),e(Di,TD),e(TD,G3o),e(Di,O3o),e($o,V3o),e($o,_L),e(_L,X3o),e(_L,hfe),e(hfe,z3o),e(_L,Q3o),e($o,W3o),e($o,st),M(uL,st,null),e(st,H3o),e(st,pfe),e(pfe,U3o),e(st,J3o),e(st,Gi),e(Gi,Y3o),e(Gi,_fe),e(_fe,K3o),e(Gi,Z3o),e(Gi,MD),e(MD,e0o),e(Gi,o0o),e(st,r0o),M(Iu,st,null),e($o,t0o),e($o,Ye),M(bL,Ye,null),e(Ye,a0o),e(Ye,ufe),e(ufe,n0o),e(Ye,s0o),e(Ye,Pa),e(Pa,l0o),e(Pa,bfe),e(bfe,i0o),e(Pa,d0o),e(Pa,vfe),e(vfe,c0o),e(Pa,f0o),e(Pa,Ffe),e(Ffe,m0o),e(Pa,g0o),e(Ye,h0o),e(Ye,G),e(G,qu),e(qu,Tfe),e(Tfe,p0o),e(qu,_0o),e(qu,ED),e(ED,u0o),e(qu,b0o),e(G,v0o),e(G,ju),e(ju,Mfe),e(Mfe,F0o),e(ju,T0o),e(ju,CD),e(CD,M0o),e(ju,E0o),e(G,C0o),e(G,Du),e(Du,Efe),e(Efe,w0o),e(Du,A0o),e(Du,wD),e(wD,L0o),e(Du,y0o),e(G,x0o),e(G,Gu),e(Gu,Cfe),e(Cfe,$0o),e(Gu,k0o),e(Gu,AD),e(AD,S0o),e(Gu,R0o),e(G,P0o),e(G,Ou),e(Ou,wfe),e(wfe,B0o),e(Ou,N0o),e(Ou,LD),e(LD,I0o),e(Ou,q0o),e(G,j0o),e(G,Vu),e(Vu,Afe),e(Afe,D0o),e(Vu,G0o),e(Vu,yD),e(yD,O0o),e(Vu,V0o),e(G,X0o),e(G,Xu),e(Xu,Lfe),e(Lfe,z0o),e(Xu,Q0o),e(Xu,xD),e(xD,W0o),e(Xu,H0o),e(G,U0o),e(G,zu),e(zu,yfe),e(yfe,J0o),e(zu,Y0o),e(zu,$D),e($D,K0o),e(zu,Z0o),e(G,ewo),e(G,Qu),e(Qu,xfe),e(xfe,owo),e(Qu,rwo),e(Qu,kD),e(kD,two),e(Qu,awo),e(G,nwo),e(G,Wu),e(Wu,$fe),e($fe,swo),e(Wu,lwo),e(Wu,SD),e(SD,iwo),e(Wu,dwo),e(G,cwo),e(G,Hu),e(Hu,kfe),e(kfe,fwo),e(Hu,mwo),e(Hu,RD),e(RD,gwo),e(Hu,hwo),e(G,pwo),e(G,Uu),e(Uu,Sfe),e(Sfe,_wo),e(Uu,uwo),e(Uu,PD),e(PD,bwo),e(Uu,vwo),e(G,Fwo),e(G,Ju),e(Ju,Rfe),e(Rfe,Two),e(Ju,Mwo),e(Ju,BD),e(BD,Ewo),e(Ju,Cwo),e(G,wwo),e(G,Yu),e(Yu,Pfe),e(Pfe,Awo),e(Yu,Lwo),e(Yu,ND),e(ND,ywo),e(Yu,xwo),e(G,$wo),e(G,Ku),e(Ku,Bfe),e(Bfe,kwo),e(Ku,Swo),e(Ku,ID),e(ID,Rwo),e(Ku,Pwo),e(G,Bwo),e(G,Zu),e(Zu,Nfe),e(Nfe,Nwo),e(Zu,Iwo),e(Zu,qD),e(qD,qwo),e(Zu,jwo),e(G,Dwo),e(G,e1),e(e1,Ife),e(Ife,Gwo),e(e1,Owo),e(e1,jD),e(jD,Vwo),e(e1,Xwo),e(G,zwo),e(G,o1),e(o1,qfe),e(qfe,Qwo),e(o1,Wwo),e(o1,DD),e(DD,Hwo),e(o1,Uwo),e(G,Jwo),e(G,r1),e(r1,jfe),e(jfe,Ywo),e(r1,Kwo),e(r1,GD),e(GD,Zwo),e(r1,eAo),e(G,oAo),e(G,t1),e(t1,Dfe),e(Dfe,rAo),e(t1,tAo),e(t1,OD),e(OD,aAo),e(t1,nAo),e(G,sAo),e(G,a1),e(a1,Gfe),e(Gfe,lAo),e(a1,iAo),e(a1,VD),e(VD,dAo),e(a1,cAo),e(G,fAo),e(G,n1),e(n1,Ofe),e(Ofe,mAo),e(n1,gAo),e(n1,XD),e(XD,hAo),e(n1,pAo),e(G,_Ao),e(G,s1),e(s1,Vfe),e(Vfe,uAo),e(s1,bAo),e(s1,zD),e(zD,vAo),e(s1,FAo),e(G,TAo),e(G,l1),e(l1,Xfe),e(Xfe,MAo),e(l1,EAo),e(l1,QD),e(QD,CAo),e(l1,wAo),e(G,AAo),e(G,i1),e(i1,zfe),e(zfe,LAo),e(i1,yAo),e(i1,WD),e(WD,xAo),e(i1,$Ao),e(G,kAo),e(G,d1),e(d1,Qfe),e(Qfe,SAo),e(d1,RAo),e(d1,HD),e(HD,PAo),e(d1,BAo),e(G,NAo),e(G,c1),e(c1,Wfe),e(Wfe,IAo),e(c1,qAo),e(c1,UD),e(UD,jAo),e(c1,DAo),e(G,GAo),e(G,f1),e(f1,Hfe),e(Hfe,OAo),e(f1,VAo),e(f1,JD),e(JD,XAo),e(f1,zAo),e(G,QAo),e(G,m1),e(m1,Ufe),e(Ufe,WAo),e(m1,HAo),e(m1,YD),e(YD,UAo),e(m1,JAo),e(G,YAo),e(G,g1),e(g1,Jfe),e(Jfe,KAo),e(g1,ZAo),e(g1,KD),e(KD,e6o),e(g1,o6o),e(G,r6o),e(G,h1),e(h1,Yfe),e(Yfe,t6o),e(h1,a6o),e(h1,ZD),e(ZD,n6o),e(h1,s6o),e(G,l6o),e(G,p1),e(p1,Kfe),e(Kfe,i6o),e(p1,d6o),e(p1,eG),e(eG,c6o),e(p1,f6o),e(G,m6o),e(G,_1),e(_1,Zfe),e(Zfe,g6o),e(_1,h6o),e(_1,oG),e(oG,p6o),e(_1,_6o),e(G,u6o),e(G,u1),e(u1,eme),e(eme,b6o),e(u1,v6o),e(u1,rG),e(rG,F6o),e(u1,T6o),e(G,M6o),e(G,b1),e(b1,ome),e(ome,E6o),e(b1,C6o),e(b1,tG),e(tG,w6o),e(b1,A6o),e(G,L6o),e(G,v1),e(v1,rme),e(rme,y6o),e(v1,x6o),e(v1,aG),e(aG,$6o),e(v1,k6o),e(G,S6o),e(G,F1),e(F1,tme),e(tme,R6o),e(F1,P6o),e(F1,nG),e(nG,B6o),e(F1,N6o),e(G,I6o),e(G,T1),e(T1,ame),e(ame,q6o),e(T1,j6o),e(T1,sG),e(sG,D6o),e(T1,G6o),e(G,O6o),e(G,M1),e(M1,nme),e(nme,V6o),e(M1,X6o),e(M1,lG),e(lG,z6o),e(M1,Q6o),e(G,W6o),e(G,E1),e(E1,sme),e(sme,H6o),e(E1,U6o),e(E1,iG),e(iG,J6o),e(E1,Y6o),e(G,K6o),e(G,C1),e(C1,lme),e(lme,Z6o),e(C1,eLo),e(C1,dG),e(dG,oLo),e(C1,rLo),e(G,tLo),e(G,w1),e(w1,ime),e(ime,aLo),e(w1,nLo),e(w1,cG),e(cG,sLo),e(w1,lLo),e(G,iLo),e(G,A1),e(A1,dme),e(dme,dLo),e(A1,cLo),e(A1,fG),e(fG,fLo),e(A1,mLo),e(G,gLo),e(G,L1),e(L1,cme),e(cme,hLo),e(L1,pLo),e(L1,mG),e(mG,_Lo),e(L1,uLo),e(Ye,bLo),e(Ye,y1),e(y1,vLo),e(y1,fme),e(fme,FLo),e(y1,TLo),e(y1,mme),e(mme,MLo),e(Ye,ELo),M(x1,Ye,null),b(f,BOe,u),b(f,Oi,u),e(Oi,$1),e($1,gme),M(vL,gme,null),e(Oi,CLo),e(Oi,hme),e(hme,wLo),b(f,NOe,u),b(f,ko,u),M(FL,ko,null),e(ko,ALo),e(ko,Vi),e(Vi,LLo),e(Vi,gG),e(gG,yLo),e(Vi,xLo),e(Vi,hG),e(hG,$Lo),e(Vi,kLo),e(ko,SLo),e(ko,TL),e(TL,RLo),e(TL,pme),e(pme,PLo),e(TL,BLo),e(ko,NLo),e(ko,lt),M(ML,lt,null),e(lt,ILo),e(lt,_me),e(_me,qLo),e(lt,jLo),e(lt,Xi),e(Xi,DLo),e(Xi,ume),e(ume,GLo),e(Xi,OLo),e(Xi,pG),e(pG,VLo),e(Xi,XLo),e(lt,zLo),M(k1,lt,null),e(ko,QLo),e(ko,Ke),M(EL,Ke,null),e(Ke,WLo),e(Ke,bme),e(bme,HLo),e(Ke,ULo),e(Ke,Ba),e(Ba,JLo),e(Ba,vme),e(vme,YLo),e(Ba,KLo),e(Ba,Fme),e(Fme,ZLo),e(Ba,eyo),e(Ba,Tme),e(Tme,oyo),e(Ba,ryo),e(Ke,tyo),e(Ke,z),e(z,S1),e(S1,Mme),e(Mme,ayo),e(S1,nyo),e(S1,_G),e(_G,syo),e(S1,lyo),e(z,iyo),e(z,R1),e(R1,Eme),e(Eme,dyo),e(R1,cyo),e(R1,uG),e(uG,fyo),e(R1,myo),e(z,gyo),e(z,P1),e(P1,Cme),e(Cme,hyo),e(P1,pyo),e(P1,bG),e(bG,_yo),e(P1,uyo),e(z,byo),e(z,B1),e(B1,wme),e(wme,vyo),e(B1,Fyo),e(B1,vG),e(vG,Tyo),e(B1,Myo),e(z,Eyo),e(z,N1),e(N1,Ame),e(Ame,Cyo),e(N1,wyo),e(N1,FG),e(FG,Ayo),e(N1,Lyo),e(z,yyo),e(z,I1),e(I1,Lme),e(Lme,xyo),e(I1,$yo),e(I1,TG),e(TG,kyo),e(I1,Syo),e(z,Ryo),e(z,q1),e(q1,yme),e(yme,Pyo),e(q1,Byo),e(q1,MG),e(MG,Nyo),e(q1,Iyo),e(z,qyo),e(z,j1),e(j1,xme),e(xme,jyo),e(j1,Dyo),e(j1,EG),e(EG,Gyo),e(j1,Oyo),e(z,Vyo),e(z,D1),e(D1,$me),e($me,Xyo),e(D1,zyo),e(D1,CG),e(CG,Qyo),e(D1,Wyo),e(z,Hyo),e(z,G1),e(G1,kme),e(kme,Uyo),e(G1,Jyo),e(G1,wG),e(wG,Yyo),e(G1,Kyo),e(z,Zyo),e(z,O1),e(O1,Sme),e(Sme,e8o),e(O1,o8o),e(O1,AG),e(AG,r8o),e(O1,t8o),e(z,a8o),e(z,V1),e(V1,Rme),e(Rme,n8o),e(V1,s8o),e(V1,LG),e(LG,l8o),e(V1,i8o),e(z,d8o),e(z,X1),e(X1,Pme),e(Pme,c8o),e(X1,f8o),e(X1,yG),e(yG,m8o),e(X1,g8o),e(z,h8o),e(z,z1),e(z1,Bme),e(Bme,p8o),e(z1,_8o),e(z1,xG),e(xG,u8o),e(z1,b8o),e(z,v8o),e(z,Q1),e(Q1,Nme),e(Nme,F8o),e(Q1,T8o),e(Q1,$G),e($G,M8o),e(Q1,E8o),e(z,C8o),e(z,W1),e(W1,Ime),e(Ime,w8o),e(W1,A8o),e(W1,kG),e(kG,L8o),e(W1,y8o),e(z,x8o),e(z,H1),e(H1,qme),e(qme,$8o),e(H1,k8o),e(H1,SG),e(SG,S8o),e(H1,R8o),e(z,P8o),e(z,U1),e(U1,jme),e(jme,B8o),e(U1,N8o),e(U1,RG),e(RG,I8o),e(U1,q8o),e(z,j8o),e(z,J1),e(J1,Dme),e(Dme,D8o),e(J1,G8o),e(J1,PG),e(PG,O8o),e(J1,V8o),e(z,X8o),e(z,Y1),e(Y1,Gme),e(Gme,z8o),e(Y1,Q8o),e(Y1,BG),e(BG,W8o),e(Y1,H8o),e(z,U8o),e(z,K1),e(K1,Ome),e(Ome,J8o),e(K1,Y8o),e(K1,NG),e(NG,K8o),e(K1,Z8o),e(z,exo),e(z,Z1),e(Z1,Vme),e(Vme,oxo),e(Z1,rxo),e(Z1,IG),e(IG,txo),e(Z1,axo),e(z,nxo),e(z,e7),e(e7,Xme),e(Xme,sxo),e(e7,lxo),e(e7,qG),e(qG,ixo),e(e7,dxo),e(z,cxo),e(z,o7),e(o7,zme),e(zme,fxo),e(o7,mxo),e(o7,jG),e(jG,gxo),e(o7,hxo),e(z,pxo),e(z,r7),e(r7,Qme),e(Qme,_xo),e(r7,uxo),e(r7,DG),e(DG,bxo),e(r7,vxo),e(z,Fxo),e(z,t7),e(t7,Wme),e(Wme,Txo),e(t7,Mxo),e(t7,GG),e(GG,Exo),e(t7,Cxo),e(z,wxo),e(z,a7),e(a7,Hme),e(Hme,Axo),e(a7,Lxo),e(a7,OG),e(OG,yxo),e(a7,xxo),e(z,$xo),e(z,n7),e(n7,Ume),e(Ume,kxo),e(n7,Sxo),e(n7,VG),e(VG,Rxo),e(n7,Pxo),e(z,Bxo),e(z,s7),e(s7,Jme),e(Jme,Nxo),e(s7,Ixo),e(s7,XG),e(XG,qxo),e(s7,jxo),e(z,Dxo),e(z,l7),e(l7,Yme),e(Yme,Gxo),e(l7,Oxo),e(l7,zG),e(zG,Vxo),e(l7,Xxo),e(z,zxo),e(z,i7),e(i7,Kme),e(Kme,Qxo),e(i7,Wxo),e(i7,QG),e(QG,Hxo),e(i7,Uxo),e(z,Jxo),e(z,d7),e(d7,Zme),e(Zme,Yxo),e(d7,Kxo),e(d7,WG),e(WG,Zxo),e(d7,e$o),e(z,o$o),e(z,c7),e(c7,ege),e(ege,r$o),e(c7,t$o),e(c7,HG),e(HG,a$o),e(c7,n$o),e(z,s$o),e(z,f7),e(f7,oge),e(oge,l$o),e(f7,i$o),e(f7,UG),e(UG,d$o),e(f7,c$o),e(z,f$o),e(z,m7),e(m7,rge),e(rge,m$o),e(m7,g$o),e(m7,JG),e(JG,h$o),e(m7,p$o),e(z,_$o),e(z,g7),e(g7,tge),e(tge,u$o),e(g7,b$o),e(g7,YG),e(YG,v$o),e(g7,F$o),e(z,T$o),e(z,h7),e(h7,age),e(age,M$o),e(h7,E$o),e(h7,KG),e(KG,C$o),e(h7,w$o),e(z,A$o),e(z,p7),e(p7,nge),e(nge,L$o),e(p7,y$o),e(p7,ZG),e(ZG,x$o),e(p7,$$o),e(z,k$o),e(z,_7),e(_7,sge),e(sge,S$o),e(_7,R$o),e(_7,eO),e(eO,P$o),e(_7,B$o),e(Ke,N$o),e(Ke,u7),e(u7,I$o),e(u7,lge),e(lge,q$o),e(u7,j$o),e(u7,ige),e(ige,D$o),e(Ke,G$o),M(b7,Ke,null),b(f,IOe,u),b(f,zi,u),e(zi,v7),e(v7,dge),M(CL,dge,null),e(zi,O$o),e(zi,cge),e(cge,V$o),b(f,qOe,u),b(f,So,u),M(wL,So,null),e(So,X$o),e(So,Qi),e(Qi,z$o),e(Qi,oO),e(oO,Q$o),e(Qi,W$o),e(Qi,rO),e(rO,H$o),e(Qi,U$o),e(So,J$o),e(So,AL),e(AL,Y$o),e(AL,fge),e(fge,K$o),e(AL,Z$o),e(So,eko),e(So,it),M(LL,it,null),e(it,oko),e(it,mge),e(mge,rko),e(it,tko),e(it,Wi),e(Wi,ako),e(Wi,gge),e(gge,nko),e(Wi,sko),e(Wi,tO),e(tO,lko),e(Wi,iko),e(it,dko),M(F7,it,null),e(So,cko),e(So,Ze),M(yL,Ze,null),e(Ze,fko),e(Ze,hge),e(hge,mko),e(Ze,gko),e(Ze,Na),e(Na,hko),e(Na,pge),e(pge,pko),e(Na,_ko),e(Na,_ge),e(_ge,uko),e(Na,bko),e(Na,uge),e(uge,vko),e(Na,Fko),e(Ze,Tko),e(Ze,W),e(W,T7),e(T7,bge),e(bge,Mko),e(T7,Eko),e(T7,aO),e(aO,Cko),e(T7,wko),e(W,Ako),e(W,M7),e(M7,vge),e(vge,Lko),e(M7,yko),e(M7,nO),e(nO,xko),e(M7,$ko),e(W,kko),e(W,E7),e(E7,Fge),e(Fge,Sko),e(E7,Rko),e(E7,sO),e(sO,Pko),e(E7,Bko),e(W,Nko),e(W,C7),e(C7,Tge),e(Tge,Iko),e(C7,qko),e(C7,lO),e(lO,jko),e(C7,Dko),e(W,Gko),e(W,w7),e(w7,Mge),e(Mge,Oko),e(w7,Vko),e(w7,iO),e(iO,Xko),e(w7,zko),e(W,Qko),e(W,A7),e(A7,Ege),e(Ege,Wko),e(A7,Hko),e(A7,dO),e(dO,Uko),e(A7,Jko),e(W,Yko),e(W,L7),e(L7,Cge),e(Cge,Kko),e(L7,Zko),e(L7,cO),e(cO,eSo),e(L7,oSo),e(W,rSo),e(W,y7),e(y7,wge),e(wge,tSo),e(y7,aSo),e(y7,fO),e(fO,nSo),e(y7,sSo),e(W,lSo),e(W,x7),e(x7,Age),e(Age,iSo),e(x7,dSo),e(x7,mO),e(mO,cSo),e(x7,fSo),e(W,mSo),e(W,$7),e($7,Lge),e(Lge,gSo),e($7,hSo),e($7,gO),e(gO,pSo),e($7,_So),e(W,uSo),e(W,k7),e(k7,yge),e(yge,bSo),e(k7,vSo),e(k7,hO),e(hO,FSo),e(k7,TSo),e(W,MSo),e(W,S7),e(S7,xge),e(xge,ESo),e(S7,CSo),e(S7,pO),e(pO,wSo),e(S7,ASo),e(W,LSo),e(W,R7),e(R7,$ge),e($ge,ySo),e(R7,xSo),e(R7,_O),e(_O,$So),e(R7,kSo),e(W,SSo),e(W,P7),e(P7,kge),e(kge,RSo),e(P7,PSo),e(P7,uO),e(uO,BSo),e(P7,NSo),e(W,ISo),e(W,B7),e(B7,Sge),e(Sge,qSo),e(B7,jSo),e(B7,bO),e(bO,DSo),e(B7,GSo),e(W,OSo),e(W,N7),e(N7,Rge),e(Rge,VSo),e(N7,XSo),e(N7,vO),e(vO,zSo),e(N7,QSo),e(W,WSo),e(W,I7),e(I7,Pge),e(Pge,HSo),e(I7,USo),e(I7,FO),e(FO,JSo),e(I7,YSo),e(W,KSo),e(W,q7),e(q7,Bge),e(Bge,ZSo),e(q7,eRo),e(q7,TO),e(TO,oRo),e(q7,rRo),e(W,tRo),e(W,j7),e(j7,Nge),e(Nge,aRo),e(j7,nRo),e(j7,MO),e(MO,sRo),e(j7,lRo),e(W,iRo),e(W,D7),e(D7,Ige),e(Ige,dRo),e(D7,cRo),e(D7,EO),e(EO,fRo),e(D7,mRo),e(W,gRo),e(W,G7),e(G7,qge),e(qge,hRo),e(G7,pRo),e(G7,CO),e(CO,_Ro),e(G7,uRo),e(W,bRo),e(W,O7),e(O7,jge),e(jge,vRo),e(O7,FRo),e(O7,wO),e(wO,TRo),e(O7,MRo),e(W,ERo),e(W,V7),e(V7,Dge),e(Dge,CRo),e(V7,wRo),e(V7,AO),e(AO,ARo),e(V7,LRo),e(W,yRo),e(W,X7),e(X7,Gge),e(Gge,xRo),e(X7,$Ro),e(X7,LO),e(LO,kRo),e(X7,SRo),e(W,RRo),e(W,z7),e(z7,Oge),e(Oge,PRo),e(z7,BRo),e(z7,yO),e(yO,NRo),e(z7,IRo),e(W,qRo),e(W,Q7),e(Q7,Vge),e(Vge,jRo),e(Q7,DRo),e(Q7,xO),e(xO,GRo),e(Q7,ORo),e(W,VRo),e(W,W7),e(W7,Xge),e(Xge,XRo),e(W7,zRo),e(W7,$O),e($O,QRo),e(W7,WRo),e(W,HRo),e(W,H7),e(H7,zge),e(zge,URo),e(H7,JRo),e(H7,kO),e(kO,YRo),e(H7,KRo),e(W,ZRo),e(W,U7),e(U7,Qge),e(Qge,ePo),e(U7,oPo),e(U7,SO),e(SO,rPo),e(U7,tPo),e(W,aPo),e(W,J7),e(J7,Wge),e(Wge,nPo),e(J7,sPo),e(J7,RO),e(RO,lPo),e(J7,iPo),e(W,dPo),e(W,Y7),e(Y7,Hge),e(Hge,cPo),e(Y7,fPo),e(Y7,PO),e(PO,mPo),e(Y7,gPo),e(W,hPo),e(W,K7),e(K7,Uge),e(Uge,pPo),e(K7,_Po),e(K7,BO),e(BO,uPo),e(K7,bPo),e(W,vPo),e(W,Z7),e(Z7,Jge),e(Jge,FPo),e(Z7,TPo),e(Z7,Yge),e(Yge,MPo),e(Z7,EPo),e(W,CPo),e(W,e9),e(e9,Kge),e(Kge,wPo),e(e9,APo),e(e9,NO),e(NO,LPo),e(e9,yPo),e(W,xPo),e(W,o9),e(o9,Zge),e(Zge,$Po),e(o9,kPo),e(o9,IO),e(IO,SPo),e(o9,RPo),e(W,PPo),e(W,r9),e(r9,ehe),e(ehe,BPo),e(r9,NPo),e(r9,qO),e(qO,IPo),e(r9,qPo),e(W,jPo),e(W,t9),e(t9,ohe),e(ohe,DPo),e(t9,GPo),e(t9,jO),e(jO,OPo),e(t9,VPo),e(Ze,XPo),e(Ze,a9),e(a9,zPo),e(a9,rhe),e(rhe,QPo),e(a9,WPo),e(a9,the),e(the,HPo),e(Ze,UPo),M(n9,Ze,null),b(f,jOe,u),b(f,Hi,u),e(Hi,s9),e(s9,ahe),M(xL,ahe,null),e(Hi,JPo),e(Hi,nhe),e(nhe,YPo),b(f,DOe,u),b(f,Ro,u),M($L,Ro,null),e(Ro,KPo),e(Ro,Ui),e(Ui,ZPo),e(Ui,DO),e(DO,eBo),e(Ui,oBo),e(Ui,GO),e(GO,rBo),e(Ui,tBo),e(Ro,aBo),e(Ro,kL),e(kL,nBo),e(kL,she),e(she,sBo),e(kL,lBo),e(Ro,iBo),e(Ro,dt),M(SL,dt,null),e(dt,dBo),e(dt,lhe),e(lhe,cBo),e(dt,fBo),e(dt,Ji),e(Ji,mBo),e(Ji,ihe),e(ihe,gBo),e(Ji,hBo),e(Ji,OO),e(OO,pBo),e(Ji,_Bo),e(dt,uBo),M(l9,dt,null),e(Ro,bBo),e(Ro,eo),M(RL,eo,null),e(eo,vBo),e(eo,dhe),e(dhe,FBo),e(eo,TBo),e(eo,Ia),e(Ia,MBo),e(Ia,che),e(che,EBo),e(Ia,CBo),e(Ia,fhe),e(fhe,wBo),e(Ia,ABo),e(Ia,mhe),e(mhe,LBo),e(Ia,yBo),e(eo,xBo),e(eo,pe),e(pe,i9),e(i9,ghe),e(ghe,$Bo),e(i9,kBo),e(i9,VO),e(VO,SBo),e(i9,RBo),e(pe,PBo),e(pe,d9),e(d9,hhe),e(hhe,BBo),e(d9,NBo),e(d9,XO),e(XO,IBo),e(d9,qBo),e(pe,jBo),e(pe,c9),e(c9,phe),e(phe,DBo),e(c9,GBo),e(c9,zO),e(zO,OBo),e(c9,VBo),e(pe,XBo),e(pe,f9),e(f9,_he),e(_he,zBo),e(f9,QBo),e(f9,QO),e(QO,WBo),e(f9,HBo),e(pe,UBo),e(pe,m9),e(m9,uhe),e(uhe,JBo),e(m9,YBo),e(m9,WO),e(WO,KBo),e(m9,ZBo),e(pe,eNo),e(pe,g9),e(g9,bhe),e(bhe,oNo),e(g9,rNo),e(g9,HO),e(HO,tNo),e(g9,aNo),e(pe,nNo),e(pe,h9),e(h9,vhe),e(vhe,sNo),e(h9,lNo),e(h9,UO),e(UO,iNo),e(h9,dNo),e(pe,cNo),e(pe,p9),e(p9,Fhe),e(Fhe,fNo),e(p9,mNo),e(p9,JO),e(JO,gNo),e(p9,hNo),e(pe,pNo),e(pe,_9),e(_9,The),e(The,_No),e(_9,uNo),e(_9,YO),e(YO,bNo),e(_9,vNo),e(pe,FNo),e(pe,u9),e(u9,Mhe),e(Mhe,TNo),e(u9,MNo),e(u9,KO),e(KO,ENo),e(u9,CNo),e(pe,wNo),e(pe,b9),e(b9,Ehe),e(Ehe,ANo),e(b9,LNo),e(b9,ZO),e(ZO,yNo),e(b9,xNo),e(pe,$No),e(pe,v9),e(v9,Che),e(Che,kNo),e(v9,SNo),e(v9,eV),e(eV,RNo),e(v9,PNo),e(pe,BNo),e(pe,F9),e(F9,whe),e(whe,NNo),e(F9,INo),e(F9,oV),e(oV,qNo),e(F9,jNo),e(pe,DNo),e(pe,T9),e(T9,Ahe),e(Ahe,GNo),e(T9,ONo),e(T9,rV),e(rV,VNo),e(T9,XNo),e(pe,zNo),e(pe,M9),e(M9,Lhe),e(Lhe,QNo),e(M9,WNo),e(M9,tV),e(tV,HNo),e(M9,UNo),e(pe,JNo),e(pe,E9),e(E9,yhe),e(yhe,YNo),e(E9,KNo),e(E9,aV),e(aV,ZNo),e(E9,eIo),e(pe,oIo),e(pe,C9),e(C9,xhe),e(xhe,rIo),e(C9,tIo),e(C9,nV),e(nV,aIo),e(C9,nIo),e(eo,sIo),e(eo,w9),e(w9,lIo),e(w9,$he),e($he,iIo),e(w9,dIo),e(w9,khe),e(khe,cIo),e(eo,fIo),M(A9,eo,null),b(f,GOe,u),b(f,Yi,u),e(Yi,L9),e(L9,She),M(PL,She,null),e(Yi,mIo),e(Yi,Rhe),e(Rhe,gIo),b(f,OOe,u),b(f,Po,u),M(BL,Po,null),e(Po,hIo),e(Po,Ki),e(Ki,pIo),e(Ki,sV),e(sV,_Io),e(Ki,uIo),e(Ki,lV),e(lV,bIo),e(Ki,vIo),e(Po,FIo),e(Po,NL),e(NL,TIo),e(NL,Phe),e(Phe,MIo),e(NL,EIo),e(Po,CIo),e(Po,ct),M(IL,ct,null),e(ct,wIo),e(ct,Bhe),e(Bhe,AIo),e(ct,LIo),e(ct,Zi),e(Zi,yIo),e(Zi,Nhe),e(Nhe,xIo),e(Zi,$Io),e(Zi,iV),e(iV,kIo),e(Zi,SIo),e(ct,RIo),M(y9,ct,null),e(Po,PIo),e(Po,oo),M(qL,oo,null),e(oo,BIo),e(oo,Ihe),e(Ihe,NIo),e(oo,IIo),e(oo,qa),e(qa,qIo),e(qa,qhe),e(qhe,jIo),e(qa,DIo),e(qa,jhe),e(jhe,GIo),e(qa,OIo),e(qa,Dhe),e(Dhe,VIo),e(qa,XIo),e(oo,zIo),e(oo,I),e(I,x9),e(x9,Ghe),e(Ghe,QIo),e(x9,WIo),e(x9,dV),e(dV,HIo),e(x9,UIo),e(I,JIo),e(I,$9),e($9,Ohe),e(Ohe,YIo),e($9,KIo),e($9,cV),e(cV,ZIo),e($9,eqo),e(I,oqo),e(I,k9),e(k9,Vhe),e(Vhe,rqo),e(k9,tqo),e(k9,fV),e(fV,aqo),e(k9,nqo),e(I,sqo),e(I,S9),e(S9,Xhe),e(Xhe,lqo),e(S9,iqo),e(S9,mV),e(mV,dqo),e(S9,cqo),e(I,fqo),e(I,R9),e(R9,zhe),e(zhe,mqo),e(R9,gqo),e(R9,gV),e(gV,hqo),e(R9,pqo),e(I,_qo),e(I,P9),e(P9,Qhe),e(Qhe,uqo),e(P9,bqo),e(P9,hV),e(hV,vqo),e(P9,Fqo),e(I,Tqo),e(I,B9),e(B9,Whe),e(Whe,Mqo),e(B9,Eqo),e(B9,pV),e(pV,Cqo),e(B9,wqo),e(I,Aqo),e(I,N9),e(N9,Hhe),e(Hhe,Lqo),e(N9,yqo),e(N9,_V),e(_V,xqo),e(N9,$qo),e(I,kqo),e(I,I9),e(I9,Uhe),e(Uhe,Sqo),e(I9,Rqo),e(I9,uV),e(uV,Pqo),e(I9,Bqo),e(I,Nqo),e(I,q9),e(q9,Jhe),e(Jhe,Iqo),e(q9,qqo),e(q9,bV),e(bV,jqo),e(q9,Dqo),e(I,Gqo),e(I,j9),e(j9,Yhe),e(Yhe,Oqo),e(j9,Vqo),e(j9,vV),e(vV,Xqo),e(j9,zqo),e(I,Qqo),e(I,D9),e(D9,Khe),e(Khe,Wqo),e(D9,Hqo),e(D9,FV),e(FV,Uqo),e(D9,Jqo),e(I,Yqo),e(I,G9),e(G9,Zhe),e(Zhe,Kqo),e(G9,Zqo),e(G9,TV),e(TV,ejo),e(G9,ojo),e(I,rjo),e(I,O9),e(O9,epe),e(epe,tjo),e(O9,ajo),e(O9,MV),e(MV,njo),e(O9,sjo),e(I,ljo),e(I,V9),e(V9,ope),e(ope,ijo),e(V9,djo),e(V9,EV),e(EV,cjo),e(V9,fjo),e(I,mjo),e(I,X9),e(X9,rpe),e(rpe,gjo),e(X9,hjo),e(X9,CV),e(CV,pjo),e(X9,_jo),e(I,ujo),e(I,z9),e(z9,tpe),e(tpe,bjo),e(z9,vjo),e(z9,wV),e(wV,Fjo),e(z9,Tjo),e(I,Mjo),e(I,Q9),e(Q9,ape),e(ape,Ejo),e(Q9,Cjo),e(Q9,AV),e(AV,wjo),e(Q9,Ajo),e(I,Ljo),e(I,W9),e(W9,npe),e(npe,yjo),e(W9,xjo),e(W9,LV),e(LV,$jo),e(W9,kjo),e(I,Sjo),e(I,H9),e(H9,spe),e(spe,Rjo),e(H9,Pjo),e(H9,yV),e(yV,Bjo),e(H9,Njo),e(I,Ijo),e(I,U9),e(U9,lpe),e(lpe,qjo),e(U9,jjo),e(U9,xV),e(xV,Djo),e(U9,Gjo),e(I,Ojo),e(I,J9),e(J9,ipe),e(ipe,Vjo),e(J9,Xjo),e(J9,$V),e($V,zjo),e(J9,Qjo),e(I,Wjo),e(I,Y9),e(Y9,dpe),e(dpe,Hjo),e(Y9,Ujo),e(Y9,kV),e(kV,Jjo),e(Y9,Yjo),e(I,Kjo),e(I,K9),e(K9,cpe),e(cpe,Zjo),e(K9,eDo),e(K9,SV),e(SV,oDo),e(K9,rDo),e(I,tDo),e(I,Z9),e(Z9,fpe),e(fpe,aDo),e(Z9,nDo),e(Z9,RV),e(RV,sDo),e(Z9,lDo),e(I,iDo),e(I,e2),e(e2,mpe),e(mpe,dDo),e(e2,cDo),e(e2,PV),e(PV,fDo),e(e2,mDo),e(I,gDo),e(I,o2),e(o2,gpe),e(gpe,hDo),e(o2,pDo),e(o2,BV),e(BV,_Do),e(o2,uDo),e(I,bDo),e(I,r2),e(r2,hpe),e(hpe,vDo),e(r2,FDo),e(r2,NV),e(NV,TDo),e(r2,MDo),e(I,EDo),e(I,t2),e(t2,ppe),e(ppe,CDo),e(t2,wDo),e(t2,IV),e(IV,ADo),e(t2,LDo),e(I,yDo),e(I,a2),e(a2,_pe),e(_pe,xDo),e(a2,$Do),e(a2,qV),e(qV,kDo),e(a2,SDo),e(I,RDo),e(I,n2),e(n2,upe),e(upe,PDo),e(n2,BDo),e(n2,jV),e(jV,NDo),e(n2,IDo),e(I,qDo),e(I,s2),e(s2,bpe),e(bpe,jDo),e(s2,DDo),e(s2,DV),e(DV,GDo),e(s2,ODo),e(I,VDo),e(I,l2),e(l2,vpe),e(vpe,XDo),e(l2,zDo),e(l2,GV),e(GV,QDo),e(l2,WDo),e(I,HDo),e(I,i2),e(i2,Fpe),e(Fpe,UDo),e(i2,JDo),e(i2,OV),e(OV,YDo),e(i2,KDo),e(I,ZDo),e(I,d2),e(d2,Tpe),e(Tpe,eGo),e(d2,oGo),e(d2,VV),e(VV,rGo),e(d2,tGo),e(I,aGo),e(I,c2),e(c2,Mpe),e(Mpe,nGo),e(c2,sGo),e(c2,XV),e(XV,lGo),e(c2,iGo),e(I,dGo),e(I,f2),e(f2,Epe),e(Epe,cGo),e(f2,fGo),e(f2,zV),e(zV,mGo),e(f2,gGo),e(I,hGo),e(I,m2),e(m2,Cpe),e(Cpe,pGo),e(m2,_Go),e(m2,QV),e(QV,uGo),e(m2,bGo),e(I,vGo),e(I,g2),e(g2,wpe),e(wpe,FGo),e(g2,TGo),e(g2,WV),e(WV,MGo),e(g2,EGo),e(I,CGo),e(I,h2),e(h2,Ape),e(Ape,wGo),e(h2,AGo),e(h2,HV),e(HV,LGo),e(h2,yGo),e(I,xGo),e(I,p2),e(p2,Lpe),e(Lpe,$Go),e(p2,kGo),e(p2,UV),e(UV,SGo),e(p2,RGo),e(I,PGo),e(I,_2),e(_2,ype),e(ype,BGo),e(_2,NGo),e(_2,JV),e(JV,IGo),e(_2,qGo),e(I,jGo),e(I,u2),e(u2,xpe),e(xpe,DGo),e(u2,GGo),e(u2,YV),e(YV,OGo),e(u2,VGo),e(I,XGo),e(I,b2),e(b2,$pe),e($pe,zGo),e(b2,QGo),e(b2,KV),e(KV,WGo),e(b2,HGo),e(I,UGo),e(I,v2),e(v2,kpe),e(kpe,JGo),e(v2,YGo),e(v2,ZV),e(ZV,KGo),e(v2,ZGo),e(I,eOo),e(I,F2),e(F2,Spe),e(Spe,oOo),e(F2,rOo),e(F2,eX),e(eX,tOo),e(F2,aOo),e(I,nOo),e(I,T2),e(T2,Rpe),e(Rpe,sOo),e(T2,lOo),e(T2,oX),e(oX,iOo),e(T2,dOo),e(I,cOo),e(I,M2),e(M2,Ppe),e(Ppe,fOo),e(M2,mOo),e(M2,rX),e(rX,gOo),e(M2,hOo),e(I,pOo),e(I,E2),e(E2,Bpe),e(Bpe,_Oo),e(E2,uOo),e(E2,tX),e(tX,bOo),e(E2,vOo),e(oo,FOo),e(oo,C2),e(C2,TOo),e(C2,Npe),e(Npe,MOo),e(C2,EOo),e(C2,Ipe),e(Ipe,COo),e(oo,wOo),M(w2,oo,null),b(f,VOe,u),b(f,ed,u),e(ed,A2),e(A2,qpe),M(jL,qpe,null),e(ed,AOo),e(ed,jpe),e(jpe,LOo),b(f,XOe,u),b(f,Bo,u),M(DL,Bo,null),e(Bo,yOo),e(Bo,od),e(od,xOo),e(od,aX),e(aX,$Oo),e(od,kOo),e(od,nX),e(nX,SOo),e(od,ROo),e(Bo,POo),e(Bo,GL),e(GL,BOo),e(GL,Dpe),e(Dpe,NOo),e(GL,IOo),e(Bo,qOo),e(Bo,ft),M(OL,ft,null),e(ft,jOo),e(ft,Gpe),e(Gpe,DOo),e(ft,GOo),e(ft,rd),e(rd,OOo),e(rd,Ope),e(Ope,VOo),e(rd,XOo),e(rd,sX),e(sX,zOo),e(rd,QOo),e(ft,WOo),M(L2,ft,null),e(Bo,HOo),e(Bo,ro),M(VL,ro,null),e(ro,UOo),e(ro,Vpe),e(Vpe,JOo),e(ro,YOo),e(ro,ja),e(ja,KOo),e(ja,Xpe),e(Xpe,ZOo),e(ja,eVo),e(ja,zpe),e(zpe,oVo),e(ja,rVo),e(ja,Qpe),e(Qpe,tVo),e(ja,aVo),e(ro,nVo),e(ro,Z),e(Z,y2),e(y2,Wpe),e(Wpe,sVo),e(y2,lVo),e(y2,lX),e(lX,iVo),e(y2,dVo),e(Z,cVo),e(Z,x2),e(x2,Hpe),e(Hpe,fVo),e(x2,mVo),e(x2,iX),e(iX,gVo),e(x2,hVo),e(Z,pVo),e(Z,$2),e($2,Upe),e(Upe,_Vo),e($2,uVo),e($2,dX),e(dX,bVo),e($2,vVo),e(Z,FVo),e(Z,k2),e(k2,Jpe),e(Jpe,TVo),e(k2,MVo),e(k2,cX),e(cX,EVo),e(k2,CVo),e(Z,wVo),e(Z,S2),e(S2,Ype),e(Ype,AVo),e(S2,LVo),e(S2,fX),e(fX,yVo),e(S2,xVo),e(Z,$Vo),e(Z,R2),e(R2,Kpe),e(Kpe,kVo),e(R2,SVo),e(R2,mX),e(mX,RVo),e(R2,PVo),e(Z,BVo),e(Z,P2),e(P2,Zpe),e(Zpe,NVo),e(P2,IVo),e(P2,gX),e(gX,qVo),e(P2,jVo),e(Z,DVo),e(Z,B2),e(B2,e_e),e(e_e,GVo),e(B2,OVo),e(B2,hX),e(hX,VVo),e(B2,XVo),e(Z,zVo),e(Z,N2),e(N2,o_e),e(o_e,QVo),e(N2,WVo),e(N2,pX),e(pX,HVo),e(N2,UVo),e(Z,JVo),e(Z,I2),e(I2,r_e),e(r_e,YVo),e(I2,KVo),e(I2,_X),e(_X,ZVo),e(I2,eXo),e(Z,oXo),e(Z,q2),e(q2,t_e),e(t_e,rXo),e(q2,tXo),e(q2,uX),e(uX,aXo),e(q2,nXo),e(Z,sXo),e(Z,j2),e(j2,a_e),e(a_e,lXo),e(j2,iXo),e(j2,bX),e(bX,dXo),e(j2,cXo),e(Z,fXo),e(Z,D2),e(D2,n_e),e(n_e,mXo),e(D2,gXo),e(D2,vX),e(vX,hXo),e(D2,pXo),e(Z,_Xo),e(Z,G2),e(G2,s_e),e(s_e,uXo),e(G2,bXo),e(G2,FX),e(FX,vXo),e(G2,FXo),e(Z,TXo),e(Z,O2),e(O2,l_e),e(l_e,MXo),e(O2,EXo),e(O2,TX),e(TX,CXo),e(O2,wXo),e(Z,AXo),e(Z,V2),e(V2,i_e),e(i_e,LXo),e(V2,yXo),e(V2,MX),e(MX,xXo),e(V2,$Xo),e(Z,kXo),e(Z,X2),e(X2,d_e),e(d_e,SXo),e(X2,RXo),e(X2,EX),e(EX,PXo),e(X2,BXo),e(Z,NXo),e(Z,z2),e(z2,c_e),e(c_e,IXo),e(z2,qXo),e(z2,CX),e(CX,jXo),e(z2,DXo),e(Z,GXo),e(Z,Q2),e(Q2,f_e),e(f_e,OXo),e(Q2,VXo),e(Q2,wX),e(wX,XXo),e(Q2,zXo),e(Z,QXo),e(Z,W2),e(W2,m_e),e(m_e,WXo),e(W2,HXo),e(W2,AX),e(AX,UXo),e(W2,JXo),e(Z,YXo),e(Z,H2),e(H2,g_e),e(g_e,KXo),e(H2,ZXo),e(H2,LX),e(LX,ezo),e(H2,ozo),e(Z,rzo),e(Z,U2),e(U2,h_e),e(h_e,tzo),e(U2,azo),e(U2,yX),e(yX,nzo),e(U2,szo),e(Z,lzo),e(Z,J2),e(J2,p_e),e(p_e,izo),e(J2,dzo),e(J2,xX),e(xX,czo),e(J2,fzo),e(Z,mzo),e(Z,Y2),e(Y2,__e),e(__e,gzo),e(Y2,hzo),e(Y2,$X),e($X,pzo),e(Y2,_zo),e(Z,uzo),e(Z,K2),e(K2,u_e),e(u_e,bzo),e(K2,vzo),e(K2,kX),e(kX,Fzo),e(K2,Tzo),e(Z,Mzo),e(Z,Z2),e(Z2,b_e),e(b_e,Ezo),e(Z2,Czo),e(Z2,SX),e(SX,wzo),e(Z2,Azo),e(Z,Lzo),e(Z,eb),e(eb,v_e),e(v_e,yzo),e(eb,xzo),e(eb,RX),e(RX,$zo),e(eb,kzo),e(Z,Szo),e(Z,ob),e(ob,F_e),e(F_e,Rzo),e(ob,Pzo),e(ob,PX),e(PX,Bzo),e(ob,Nzo),e(Z,Izo),e(Z,rb),e(rb,T_e),e(T_e,qzo),e(rb,jzo),e(rb,BX),e(BX,Dzo),e(rb,Gzo),e(Z,Ozo),e(Z,tb),e(tb,M_e),e(M_e,Vzo),e(tb,Xzo),e(tb,NX),e(NX,zzo),e(tb,Qzo),e(ro,Wzo),e(ro,ab),e(ab,Hzo),e(ab,E_e),e(E_e,Uzo),e(ab,Jzo),e(ab,C_e),e(C_e,Yzo),e(ro,Kzo),M(nb,ro,null),b(f,zOe,u),b(f,td,u),e(td,sb),e(sb,w_e),M(XL,w_e,null),e(td,Zzo),e(td,A_e),e(A_e,eQo),b(f,QOe,u),b(f,No,u),M(zL,No,null),e(No,oQo),e(No,ad),e(ad,rQo),e(ad,IX),e(IX,tQo),e(ad,aQo),e(ad,qX),e(qX,nQo),e(ad,sQo),e(No,lQo),e(No,QL),e(QL,iQo),e(QL,L_e),e(L_e,dQo),e(QL,cQo),e(No,fQo),e(No,mt),M(WL,mt,null),e(mt,mQo),e(mt,y_e),e(y_e,gQo),e(mt,hQo),e(mt,nd),e(nd,pQo),e(nd,x_e),e(x_e,_Qo),e(nd,uQo),e(nd,jX),e(jX,bQo),e(nd,vQo),e(mt,FQo),M(lb,mt,null),e(No,TQo),e(No,to),M(HL,to,null),e(to,MQo),e(to,$_e),e($_e,EQo),e(to,CQo),e(to,Da),e(Da,wQo),e(Da,k_e),e(k_e,AQo),e(Da,LQo),e(Da,S_e),e(S_e,yQo),e(Da,xQo),e(Da,R_e),e(R_e,$Qo),e(Da,kQo),e(to,SQo),e(to,Io),e(Io,ib),e(ib,P_e),e(P_e,RQo),e(ib,PQo),e(ib,DX),e(DX,BQo),e(ib,NQo),e(Io,IQo),e(Io,db),e(db,B_e),e(B_e,qQo),e(db,jQo),e(db,GX),e(GX,DQo),e(db,GQo),e(Io,OQo),e(Io,cb),e(cb,N_e),e(N_e,VQo),e(cb,XQo),e(cb,OX),e(OX,zQo),e(cb,QQo),e(Io,WQo),e(Io,fb),e(fb,I_e),e(I_e,HQo),e(fb,UQo),e(fb,VX),e(VX,JQo),e(fb,YQo),e(Io,KQo),e(Io,mb),e(mb,q_e),e(q_e,ZQo),e(mb,eWo),e(mb,XX),e(XX,oWo),e(mb,rWo),e(Io,tWo),e(Io,gb),e(gb,j_e),e(j_e,aWo),e(gb,nWo),e(gb,zX),e(zX,sWo),e(gb,lWo),e(to,iWo),e(to,hb),e(hb,dWo),e(hb,D_e),e(D_e,cWo),e(hb,fWo),e(hb,G_e),e(G_e,mWo),e(to,gWo),M(pb,to,null),b(f,WOe,u),b(f,sd,u),e(sd,_b),e(_b,O_e),M(UL,O_e,null),e(sd,hWo),e(sd,V_e),e(V_e,pWo),b(f,HOe,u),b(f,qo,u),M(JL,qo,null),e(qo,_Wo),e(qo,ld),e(ld,uWo),e(ld,QX),e(QX,bWo),e(ld,vWo),e(ld,WX),e(WX,FWo),e(ld,TWo),e(qo,MWo),e(qo,YL),e(YL,EWo),e(YL,X_e),e(X_e,CWo),e(YL,wWo),e(qo,AWo),e(qo,gt),M(KL,gt,null),e(gt,LWo),e(gt,z_e),e(z_e,yWo),e(gt,xWo),e(gt,id),e(id,$Wo),e(id,Q_e),e(Q_e,kWo),e(id,SWo),e(id,HX),e(HX,RWo),e(id,PWo),e(gt,BWo),M(ub,gt,null),e(qo,NWo),e(qo,ao),M(ZL,ao,null),e(ao,IWo),e(ao,W_e),e(W_e,qWo),e(ao,jWo),e(ao,Ga),e(Ga,DWo),e(Ga,H_e),e(H_e,GWo),e(Ga,OWo),e(Ga,U_e),e(U_e,VWo),e(Ga,XWo),e(Ga,J_e),e(J_e,zWo),e(Ga,QWo),e(ao,WWo),e(ao,H),e(H,bb),e(bb,Y_e),e(Y_e,HWo),e(bb,UWo),e(bb,UX),e(UX,JWo),e(bb,YWo),e(H,KWo),e(H,vb),e(vb,K_e),e(K_e,ZWo),e(vb,eHo),e(vb,JX),e(JX,oHo),e(vb,rHo),e(H,tHo),e(H,Fb),e(Fb,Z_e),e(Z_e,aHo),e(Fb,nHo),e(Fb,YX),e(YX,sHo),e(Fb,lHo),e(H,iHo),e(H,Tb),e(Tb,eue),e(eue,dHo),e(Tb,cHo),e(Tb,KX),e(KX,fHo),e(Tb,mHo),e(H,gHo),e(H,Mb),e(Mb,oue),e(oue,hHo),e(Mb,pHo),e(Mb,ZX),e(ZX,_Ho),e(Mb,uHo),e(H,bHo),e(H,Eb),e(Eb,rue),e(rue,vHo),e(Eb,FHo),e(Eb,ez),e(ez,THo),e(Eb,MHo),e(H,EHo),e(H,Cb),e(Cb,tue),e(tue,CHo),e(Cb,wHo),e(Cb,oz),e(oz,AHo),e(Cb,LHo),e(H,yHo),e(H,wb),e(wb,aue),e(aue,xHo),e(wb,$Ho),e(wb,rz),e(rz,kHo),e(wb,SHo),e(H,RHo),e(H,Ab),e(Ab,nue),e(nue,PHo),e(Ab,BHo),e(Ab,tz),e(tz,NHo),e(Ab,IHo),e(H,qHo),e(H,Lb),e(Lb,sue),e(sue,jHo),e(Lb,DHo),e(Lb,az),e(az,GHo),e(Lb,OHo),e(H,VHo),e(H,yb),e(yb,lue),e(lue,XHo),e(yb,zHo),e(yb,nz),e(nz,QHo),e(yb,WHo),e(H,HHo),e(H,xb),e(xb,iue),e(iue,UHo),e(xb,JHo),e(xb,sz),e(sz,YHo),e(xb,KHo),e(H,ZHo),e(H,$b),e($b,due),e(due,eUo),e($b,oUo),e($b,lz),e(lz,rUo),e($b,tUo),e(H,aUo),e(H,kb),e(kb,cue),e(cue,nUo),e(kb,sUo),e(kb,iz),e(iz,lUo),e(kb,iUo),e(H,dUo),e(H,Sb),e(Sb,fue),e(fue,cUo),e(Sb,fUo),e(Sb,dz),e(dz,mUo),e(Sb,gUo),e(H,hUo),e(H,Rb),e(Rb,mue),e(mue,pUo),e(Rb,_Uo),e(Rb,cz),e(cz,uUo),e(Rb,bUo),e(H,vUo),e(H,Pb),e(Pb,gue),e(gue,FUo),e(Pb,TUo),e(Pb,fz),e(fz,MUo),e(Pb,EUo),e(H,CUo),e(H,Bb),e(Bb,hue),e(hue,wUo),e(Bb,AUo),e(Bb,mz),e(mz,LUo),e(Bb,yUo),e(H,xUo),e(H,Nb),e(Nb,pue),e(pue,$Uo),e(Nb,kUo),e(Nb,gz),e(gz,SUo),e(Nb,RUo),e(H,PUo),e(H,Ib),e(Ib,_ue),e(_ue,BUo),e(Ib,NUo),e(Ib,hz),e(hz,IUo),e(Ib,qUo),e(H,jUo),e(H,qb),e(qb,uue),e(uue,DUo),e(qb,GUo),e(qb,pz),e(pz,OUo),e(qb,VUo),e(H,XUo),e(H,jb),e(jb,bue),e(bue,zUo),e(jb,QUo),e(jb,_z),e(_z,WUo),e(jb,HUo),e(H,UUo),e(H,Db),e(Db,vue),e(vue,JUo),e(Db,YUo),e(Db,uz),e(uz,KUo),e(Db,ZUo),e(H,eJo),e(H,Gb),e(Gb,Fue),e(Fue,oJo),e(Gb,rJo),e(Gb,bz),e(bz,tJo),e(Gb,aJo),e(H,nJo),e(H,Ob),e(Ob,Tue),e(Tue,sJo),e(Ob,lJo),e(Ob,vz),e(vz,iJo),e(Ob,dJo),e(H,cJo),e(H,Vb),e(Vb,Mue),e(Mue,fJo),e(Vb,mJo),e(Vb,Fz),e(Fz,gJo),e(Vb,hJo),e(H,pJo),e(H,Xb),e(Xb,Eue),e(Eue,_Jo),e(Xb,uJo),e(Xb,Tz),e(Tz,bJo),e(Xb,vJo),e(H,FJo),e(H,zb),e(zb,Cue),e(Cue,TJo),e(zb,MJo),e(zb,Mz),e(Mz,EJo),e(zb,CJo),e(H,wJo),e(H,Qb),e(Qb,wue),e(wue,AJo),e(Qb,LJo),e(Qb,Ez),e(Ez,yJo),e(Qb,xJo),e(H,$Jo),e(H,Wb),e(Wb,Aue),e(Aue,kJo),e(Wb,SJo),e(Wb,Cz),e(Cz,RJo),e(Wb,PJo),e(H,BJo),e(H,Hb),e(Hb,Lue),e(Lue,NJo),e(Hb,IJo),e(Hb,wz),e(wz,qJo),e(Hb,jJo),e(H,DJo),e(H,Ub),e(Ub,yue),e(yue,GJo),e(Ub,OJo),e(Ub,Az),e(Az,VJo),e(Ub,XJo),e(H,zJo),e(H,Jb),e(Jb,xue),e(xue,QJo),e(Jb,WJo),e(Jb,Lz),e(Lz,HJo),e(Jb,UJo),e(H,JJo),e(H,Yb),e(Yb,$ue),e($ue,YJo),e(Yb,KJo),e(Yb,yz),e(yz,ZJo),e(Yb,eYo),e(H,oYo),e(H,Kb),e(Kb,kue),e(kue,rYo),e(Kb,tYo),e(Kb,xz),e(xz,aYo),e(Kb,nYo),e(H,sYo),e(H,Zb),e(Zb,Sue),e(Sue,lYo),e(Zb,iYo),e(Zb,$z),e($z,dYo),e(Zb,cYo),e(ao,fYo),e(ao,ev),e(ev,mYo),e(ev,Rue),e(Rue,gYo),e(ev,hYo),e(ev,Pue),e(Pue,pYo),e(ao,_Yo),M(ov,ao,null),b(f,UOe,u),b(f,dd,u),e(dd,rv),e(rv,Bue),M(ey,Bue,null),e(dd,uYo),e(dd,Nue),e(Nue,bYo),b(f,JOe,u),b(f,jo,u),M(oy,jo,null),e(jo,vYo),e(jo,cd),e(cd,FYo),e(cd,kz),e(kz,TYo),e(cd,MYo),e(cd,Sz),e(Sz,EYo),e(cd,CYo),e(jo,wYo),e(jo,ry),e(ry,AYo),e(ry,Iue),e(Iue,LYo),e(ry,yYo),e(jo,xYo),e(jo,ht),M(ty,ht,null),e(ht,$Yo),e(ht,que),e(que,kYo),e(ht,SYo),e(ht,fd),e(fd,RYo),e(fd,jue),e(jue,PYo),e(fd,BYo),e(fd,Rz),e(Rz,NYo),e(fd,IYo),e(ht,qYo),M(tv,ht,null),e(jo,jYo),e(jo,no),M(ay,no,null),e(no,DYo),e(no,Due),e(Due,GYo),e(no,OYo),e(no,Oa),e(Oa,VYo),e(Oa,Gue),e(Gue,XYo),e(Oa,zYo),e(Oa,Oue),e(Oue,QYo),e(Oa,WYo),e(Oa,Vue),e(Vue,HYo),e(Oa,UYo),e(no,JYo),e(no,V),e(V,av),e(av,Xue),e(Xue,YYo),e(av,KYo),e(av,Pz),e(Pz,ZYo),e(av,eKo),e(V,oKo),e(V,nv),e(nv,zue),e(zue,rKo),e(nv,tKo),e(nv,Bz),e(Bz,aKo),e(nv,nKo),e(V,sKo),e(V,sv),e(sv,Que),e(Que,lKo),e(sv,iKo),e(sv,Nz),e(Nz,dKo),e(sv,cKo),e(V,fKo),e(V,lv),e(lv,Wue),e(Wue,mKo),e(lv,gKo),e(lv,Iz),e(Iz,hKo),e(lv,pKo),e(V,_Ko),e(V,iv),e(iv,Hue),e(Hue,uKo),e(iv,bKo),e(iv,qz),e(qz,vKo),e(iv,FKo),e(V,TKo),e(V,dv),e(dv,Uue),e(Uue,MKo),e(dv,EKo),e(dv,jz),e(jz,CKo),e(dv,wKo),e(V,AKo),e(V,cv),e(cv,Jue),e(Jue,LKo),e(cv,yKo),e(cv,Dz),e(Dz,xKo),e(cv,$Ko),e(V,kKo),e(V,fv),e(fv,Yue),e(Yue,SKo),e(fv,RKo),e(fv,Gz),e(Gz,PKo),e(fv,BKo),e(V,NKo),e(V,mv),e(mv,Kue),e(Kue,IKo),e(mv,qKo),e(mv,Oz),e(Oz,jKo),e(mv,DKo),e(V,GKo),e(V,gv),e(gv,Zue),e(Zue,OKo),e(gv,VKo),e(gv,Vz),e(Vz,XKo),e(gv,zKo),e(V,QKo),e(V,hv),e(hv,e1e),e(e1e,WKo),e(hv,HKo),e(hv,Xz),e(Xz,UKo),e(hv,JKo),e(V,YKo),e(V,pv),e(pv,o1e),e(o1e,KKo),e(pv,ZKo),e(pv,zz),e(zz,eZo),e(pv,oZo),e(V,rZo),e(V,_v),e(_v,r1e),e(r1e,tZo),e(_v,aZo),e(_v,Qz),e(Qz,nZo),e(_v,sZo),e(V,lZo),e(V,uv),e(uv,t1e),e(t1e,iZo),e(uv,dZo),e(uv,Wz),e(Wz,cZo),e(uv,fZo),e(V,mZo),e(V,bv),e(bv,a1e),e(a1e,gZo),e(bv,hZo),e(bv,Hz),e(Hz,pZo),e(bv,_Zo),e(V,uZo),e(V,vv),e(vv,n1e),e(n1e,bZo),e(vv,vZo),e(vv,Uz),e(Uz,FZo),e(vv,TZo),e(V,MZo),e(V,Fv),e(Fv,s1e),e(s1e,EZo),e(Fv,CZo),e(Fv,Jz),e(Jz,wZo),e(Fv,AZo),e(V,LZo),e(V,Tv),e(Tv,l1e),e(l1e,yZo),e(Tv,xZo),e(Tv,Yz),e(Yz,$Zo),e(Tv,kZo),e(V,SZo),e(V,Mv),e(Mv,i1e),e(i1e,RZo),e(Mv,PZo),e(Mv,Kz),e(Kz,BZo),e(Mv,NZo),e(V,IZo),e(V,Ev),e(Ev,d1e),e(d1e,qZo),e(Ev,jZo),e(Ev,Zz),e(Zz,DZo),e(Ev,GZo),e(V,OZo),e(V,Cv),e(Cv,c1e),e(c1e,VZo),e(Cv,XZo),e(Cv,eQ),e(eQ,zZo),e(Cv,QZo),e(V,WZo),e(V,wv),e(wv,f1e),e(f1e,HZo),e(wv,UZo),e(wv,oQ),e(oQ,JZo),e(wv,YZo),e(V,KZo),e(V,Av),e(Av,m1e),e(m1e,ZZo),e(Av,eer),e(Av,rQ),e(rQ,oer),e(Av,rer),e(V,ter),e(V,Lv),e(Lv,g1e),e(g1e,aer),e(Lv,ner),e(Lv,tQ),e(tQ,ser),e(Lv,ler),e(V,ier),e(V,yv),e(yv,h1e),e(h1e,der),e(yv,cer),e(yv,aQ),e(aQ,fer),e(yv,mer),e(V,ger),e(V,xv),e(xv,p1e),e(p1e,her),e(xv,per),e(xv,nQ),e(nQ,_er),e(xv,uer),e(V,ber),e(V,$v),e($v,_1e),e(_1e,ver),e($v,Fer),e($v,sQ),e(sQ,Ter),e($v,Mer),e(V,Eer),e(V,kv),e(kv,u1e),e(u1e,Cer),e(kv,wer),e(kv,lQ),e(lQ,Aer),e(kv,Ler),e(V,yer),e(V,Sv),e(Sv,b1e),e(b1e,xer),e(Sv,$er),e(Sv,iQ),e(iQ,ker),e(Sv,Ser),e(V,Rer),e(V,Rv),e(Rv,v1e),e(v1e,Per),e(Rv,Ber),e(Rv,dQ),e(dQ,Ner),e(Rv,Ier),e(V,qer),e(V,Pv),e(Pv,F1e),e(F1e,jer),e(Pv,Der),e(Pv,cQ),e(cQ,Ger),e(Pv,Oer),e(V,Ver),e(V,Bv),e(Bv,T1e),e(T1e,Xer),e(Bv,zer),e(Bv,fQ),e(fQ,Qer),e(Bv,Wer),e(V,Her),e(V,Nv),e(Nv,M1e),e(M1e,Uer),e(Nv,Jer),e(Nv,mQ),e(mQ,Yer),e(Nv,Ker),e(V,Zer),e(V,Iv),e(Iv,E1e),e(E1e,eor),e(Iv,oor),e(Iv,gQ),e(gQ,ror),e(Iv,tor),e(V,aor),e(V,qv),e(qv,C1e),e(C1e,nor),e(qv,sor),e(qv,hQ),e(hQ,lor),e(qv,ior),e(V,dor),e(V,jv),e(jv,w1e),e(w1e,cor),e(jv,mor),e(jv,pQ),e(pQ,gor),e(jv,hor),e(V,por),e(V,Dv),e(Dv,A1e),e(A1e,_or),e(Dv,uor),e(Dv,_Q),e(_Q,bor),e(Dv,vor),e(V,For),e(V,Gv),e(Gv,L1e),e(L1e,Tor),e(Gv,Mor),e(Gv,uQ),e(uQ,Eor),e(Gv,Cor),e(V,wor),e(V,Ov),e(Ov,y1e),e(y1e,Aor),e(Ov,Lor),e(Ov,bQ),e(bQ,yor),e(Ov,xor),e(V,$or),e(V,Vv),e(Vv,x1e),e(x1e,kor),e(Vv,Sor),e(Vv,vQ),e(vQ,Ror),e(Vv,Por),e(V,Bor),e(V,Xv),e(Xv,$1e),e($1e,Nor),e(Xv,Ior),e(Xv,FQ),e(FQ,qor),e(Xv,jor),e(no,Dor),e(no,zv),e(zv,Gor),e(zv,k1e),e(k1e,Oor),e(zv,Vor),e(zv,S1e),e(S1e,Xor),e(no,zor),M(Qv,no,null),b(f,YOe,u),b(f,md,u),e(md,Wv),e(Wv,R1e),M(ny,R1e,null),e(md,Qor),e(md,P1e),e(P1e,Wor),b(f,KOe,u),b(f,Do,u),M(sy,Do,null),e(Do,Hor),e(Do,gd),e(gd,Uor),e(gd,TQ),e(TQ,Jor),e(gd,Yor),e(gd,MQ),e(MQ,Kor),e(gd,Zor),e(Do,err),e(Do,ly),e(ly,orr),e(ly,B1e),e(B1e,rrr),e(ly,trr),e(Do,arr),e(Do,pt),M(iy,pt,null),e(pt,nrr),e(pt,N1e),e(N1e,srr),e(pt,lrr),e(pt,hd),e(hd,irr),e(hd,I1e),e(I1e,drr),e(hd,crr),e(hd,EQ),e(EQ,frr),e(hd,mrr),e(pt,grr),M(Hv,pt,null),e(Do,hrr),e(Do,so),M(dy,so,null),e(so,prr),e(so,q1e),e(q1e,_rr),e(so,urr),e(so,Va),e(Va,brr),e(Va,j1e),e(j1e,vrr),e(Va,Frr),e(Va,D1e),e(D1e,Trr),e(Va,Mrr),e(Va,G1e),e(G1e,Err),e(Va,Crr),e(so,wrr),e(so,O1e),e(O1e,Uv),e(Uv,V1e),e(V1e,Arr),e(Uv,Lrr),e(Uv,CQ),e(CQ,yrr),e(Uv,xrr),e(so,$rr),e(so,Jv),e(Jv,krr),e(Jv,X1e),e(X1e,Srr),e(Jv,Rrr),e(Jv,z1e),e(z1e,Prr),e(so,Brr),M(Yv,so,null),b(f,ZOe,u),b(f,pd,u),e(pd,Kv),e(Kv,Q1e),M(cy,Q1e,null),e(pd,Nrr),e(pd,W1e),e(W1e,Irr),b(f,eVe,u),b(f,Go,u),M(fy,Go,null),e(Go,qrr),e(Go,_d),e(_d,jrr),e(_d,wQ),e(wQ,Drr),e(_d,Grr),e(_d,AQ),e(AQ,Orr),e(_d,Vrr),e(Go,Xrr),e(Go,my),e(my,zrr),e(my,H1e),e(H1e,Qrr),e(my,Wrr),e(Go,Hrr),e(Go,_t),M(gy,_t,null),e(_t,Urr),e(_t,U1e),e(U1e,Jrr),e(_t,Yrr),e(_t,ud),e(ud,Krr),e(ud,J1e),e(J1e,Zrr),e(ud,etr),e(ud,LQ),e(LQ,otr),e(ud,rtr),e(_t,ttr),M(Zv,_t,null),e(Go,atr),e(Go,lo),M(hy,lo,null),e(lo,ntr),e(lo,Y1e),e(Y1e,str),e(lo,ltr),e(lo,Xa),e(Xa,itr),e(Xa,K1e),e(K1e,dtr),e(Xa,ctr),e(Xa,Z1e),e(Z1e,ftr),e(Xa,mtr),e(Xa,e7e),e(e7e,gtr),e(Xa,htr),e(lo,ptr),e(lo,ue),e(ue,eF),e(eF,o7e),e(o7e,_tr),e(eF,utr),e(eF,yQ),e(yQ,btr),e(eF,vtr),e(ue,Ftr),e(ue,oF),e(oF,r7e),e(r7e,Ttr),e(oF,Mtr),e(oF,xQ),e(xQ,Etr),e(oF,Ctr),e(ue,wtr),e(ue,rF),e(rF,t7e),e(t7e,Atr),e(rF,Ltr),e(rF,$Q),e($Q,ytr),e(rF,xtr),e(ue,$tr),e(ue,tF),e(tF,a7e),e(a7e,ktr),e(tF,Str),e(tF,kQ),e(kQ,Rtr),e(tF,Ptr),e(ue,Btr),e(ue,zs),e(zs,n7e),e(n7e,Ntr),e(zs,Itr),e(zs,SQ),e(SQ,qtr),e(zs,jtr),e(zs,RQ),e(RQ,Dtr),e(zs,Gtr),e(ue,Otr),e(ue,aF),e(aF,s7e),e(s7e,Vtr),e(aF,Xtr),e(aF,PQ),e(PQ,ztr),e(aF,Qtr),e(ue,Wtr),e(ue,Qs),e(Qs,l7e),e(l7e,Htr),e(Qs,Utr),e(Qs,BQ),e(BQ,Jtr),e(Qs,Ytr),e(Qs,NQ),e(NQ,Ktr),e(Qs,Ztr),e(ue,ear),e(ue,nF),e(nF,i7e),e(i7e,oar),e(nF,rar),e(nF,IQ),e(IQ,tar),e(nF,aar),e(ue,nar),e(ue,ut),e(ut,d7e),e(d7e,sar),e(ut,lar),e(ut,qQ),e(qQ,iar),e(ut,dar),e(ut,jQ),e(jQ,car),e(ut,far),e(ut,DQ),e(DQ,mar),e(ut,gar),e(ue,har),e(ue,sF),e(sF,c7e),e(c7e,par),e(sF,_ar),e(sF,GQ),e(GQ,uar),e(sF,bar),e(ue,Far),e(ue,lF),e(lF,f7e),e(f7e,Tar),e(lF,Mar),e(lF,OQ),e(OQ,Ear),e(lF,Car),e(ue,war),e(ue,iF),e(iF,m7e),e(m7e,Aar),e(iF,Lar),e(iF,VQ),e(VQ,yar),e(iF,xar),e(ue,$ar),e(ue,dF),e(dF,g7e),e(g7e,kar),e(dF,Sar),e(dF,XQ),e(XQ,Rar),e(dF,Par),e(ue,Bar),e(ue,cF),e(cF,h7e),e(h7e,Nar),e(cF,Iar),e(cF,zQ),e(zQ,qar),e(cF,jar),e(ue,Dar),e(ue,fF),e(fF,p7e),e(p7e,Gar),e(fF,Oar),e(fF,QQ),e(QQ,Var),e(fF,Xar),e(ue,zar),e(ue,mF),e(mF,_7e),e(_7e,Qar),e(mF,War),e(mF,WQ),e(WQ,Har),e(mF,Uar),e(lo,Jar),e(lo,gF),e(gF,Yar),e(gF,u7e),e(u7e,Kar),e(gF,Zar),e(gF,b7e),e(b7e,enr),e(lo,onr),M(hF,lo,null),b(f,oVe,u),b(f,bd,u),e(bd,pF),e(pF,v7e),M(py,v7e,null),e(bd,rnr),e(bd,F7e),e(F7e,tnr),b(f,rVe,u),b(f,Oo,u),M(_y,Oo,null),e(Oo,anr),e(Oo,vd),e(vd,nnr),e(vd,HQ),e(HQ,snr),e(vd,lnr),e(vd,UQ),e(UQ,inr),e(vd,dnr),e(Oo,cnr),e(Oo,uy),e(uy,fnr),e(uy,T7e),e(T7e,mnr),e(uy,gnr),e(Oo,hnr),e(Oo,bt),M(by,bt,null),e(bt,pnr),e(bt,M7e),e(M7e,_nr),e(bt,unr),e(bt,Fd),e(Fd,bnr),e(Fd,E7e),e(E7e,vnr),e(Fd,Fnr),e(Fd,JQ),e(JQ,Tnr),e(Fd,Mnr),e(bt,Enr),M(_F,bt,null),e(Oo,Cnr),e(Oo,io),M(vy,io,null),e(io,wnr),e(io,C7e),e(C7e,Anr),e(io,Lnr),e(io,za),e(za,ynr),e(za,w7e),e(w7e,xnr),e(za,$nr),e(za,A7e),e(A7e,knr),e(za,Snr),e(za,L7e),e(L7e,Rnr),e(za,Pnr),e(io,Bnr),e(io,y7e),e(y7e,uF),e(uF,x7e),e(x7e,Nnr),e(uF,Inr),e(uF,YQ),e(YQ,qnr),e(uF,jnr),e(io,Dnr),e(io,bF),e(bF,Gnr),e(bF,$7e),e($7e,Onr),e(bF,Vnr),e(bF,k7e),e(k7e,Xnr),e(io,znr),M(vF,io,null),b(f,tVe,u),b(f,Td,u),e(Td,FF),e(FF,S7e),M(Fy,S7e,null),e(Td,Qnr),e(Td,R7e),e(R7e,Wnr),b(f,aVe,u),b(f,Vo,u),M(Ty,Vo,null),e(Vo,Hnr),e(Vo,Md),e(Md,Unr),e(Md,KQ),e(KQ,Jnr),e(Md,Ynr),e(Md,ZQ),e(ZQ,Knr),e(Md,Znr),e(Vo,esr),e(Vo,My),e(My,osr),e(My,P7e),e(P7e,rsr),e(My,tsr),e(Vo,asr),e(Vo,vt),M(Ey,vt,null),e(vt,nsr),e(vt,B7e),e(B7e,ssr),e(vt,lsr),e(vt,Ed),e(Ed,isr),e(Ed,N7e),e(N7e,dsr),e(Ed,csr),e(Ed,eW),e(eW,fsr),e(Ed,msr),e(vt,gsr),M(TF,vt,null),e(Vo,hsr),e(Vo,co),M(Cy,co,null),e(co,psr),e(co,I7e),e(I7e,_sr),e(co,usr),e(co,Qa),e(Qa,bsr),e(Qa,q7e),e(q7e,vsr),e(Qa,Fsr),e(Qa,j7e),e(j7e,Tsr),e(Qa,Msr),e(Qa,D7e),e(D7e,Esr),e(Qa,Csr),e(co,wsr),e(co,G7e),e(G7e,MF),e(MF,O7e),e(O7e,Asr),e(MF,Lsr),e(MF,oW),e(oW,ysr),e(MF,xsr),e(co,$sr),e(co,EF),e(EF,ksr),e(EF,V7e),e(V7e,Ssr),e(EF,Rsr),e(EF,X7e),e(X7e,Psr),e(co,Bsr),M(CF,co,null),b(f,nVe,u),b(f,Cd,u),e(Cd,wF),e(wF,z7e),M(wy,z7e,null),e(Cd,Nsr),e(Cd,Q7e),e(Q7e,Isr),b(f,sVe,u),b(f,Xo,u),M(Ay,Xo,null),e(Xo,qsr),e(Xo,wd),e(wd,jsr),e(wd,rW),e(rW,Dsr),e(wd,Gsr),e(wd,tW),e(tW,Osr),e(wd,Vsr),e(Xo,Xsr),e(Xo,Ly),e(Ly,zsr),e(Ly,W7e),e(W7e,Qsr),e(Ly,Wsr),e(Xo,Hsr),e(Xo,Ft),M(yy,Ft,null),e(Ft,Usr),e(Ft,H7e),e(H7e,Jsr),e(Ft,Ysr),e(Ft,Ad),e(Ad,Ksr),e(Ad,U7e),e(U7e,Zsr),e(Ad,elr),e(Ad,aW),e(aW,olr),e(Ad,rlr),e(Ft,tlr),M(AF,Ft,null),e(Xo,alr),e(Xo,fo),M(xy,fo,null),e(fo,nlr),e(fo,J7e),e(J7e,slr),e(fo,llr),e(fo,Wa),e(Wa,ilr),e(Wa,Y7e),e(Y7e,dlr),e(Wa,clr),e(Wa,K7e),e(K7e,flr),e(Wa,mlr),e(Wa,Z7e),e(Z7e,glr),e(Wa,hlr),e(fo,plr),e(fo,Pe),e(Pe,LF),e(LF,e9e),e(e9e,_lr),e(LF,ulr),e(LF,nW),e(nW,blr),e(LF,vlr),e(Pe,Flr),e(Pe,yF),e(yF,o9e),e(o9e,Tlr),e(yF,Mlr),e(yF,sW),e(sW,Elr),e(yF,Clr),e(Pe,wlr),e(Pe,xF),e(xF,r9e),e(r9e,Alr),e(xF,Llr),e(xF,lW),e(lW,ylr),e(xF,xlr),e(Pe,$lr),e(Pe,$F),e($F,t9e),e(t9e,klr),e($F,Slr),e($F,iW),e(iW,Rlr),e($F,Plr),e(Pe,Blr),e(Pe,kF),e(kF,a9e),e(a9e,Nlr),e(kF,Ilr),e(kF,dW),e(dW,qlr),e(kF,jlr),e(Pe,Dlr),e(Pe,SF),e(SF,n9e),e(n9e,Glr),e(SF,Olr),e(SF,cW),e(cW,Vlr),e(SF,Xlr),e(Pe,zlr),e(Pe,RF),e(RF,s9e),e(s9e,Qlr),e(RF,Wlr),e(RF,fW),e(fW,Hlr),e(RF,Ulr),e(Pe,Jlr),e(Pe,PF),e(PF,l9e),e(l9e,Ylr),e(PF,Klr),e(PF,mW),e(mW,Zlr),e(PF,eir),e(Pe,oir),e(Pe,BF),e(BF,i9e),e(i9e,rir),e(BF,tir),e(BF,gW),e(gW,air),e(BF,nir),e(fo,sir),e(fo,NF),e(NF,lir),e(NF,d9e),e(d9e,iir),e(NF,dir),e(NF,c9e),e(c9e,cir),e(fo,fir),M(IF,fo,null),b(f,lVe,u),b(f,Ld,u),e(Ld,qF),e(qF,f9e),M($y,f9e,null),e(Ld,mir),e(Ld,m9e),e(m9e,gir),b(f,iVe,u),b(f,zo,u),M(ky,zo,null),e(zo,hir),e(zo,yd),e(yd,pir),e(yd,hW),e(hW,_ir),e(yd,uir),e(yd,pW),e(pW,bir),e(yd,vir),e(zo,Fir),e(zo,Sy),e(Sy,Tir),e(Sy,g9e),e(g9e,Mir),e(Sy,Eir),e(zo,Cir),e(zo,Tt),M(Ry,Tt,null),e(Tt,wir),e(Tt,h9e),e(h9e,Air),e(Tt,Lir),e(Tt,xd),e(xd,yir),e(xd,p9e),e(p9e,xir),e(xd,$ir),e(xd,_W),e(_W,kir),e(xd,Sir),e(Tt,Rir),M(jF,Tt,null),e(zo,Pir),e(zo,mo),M(Py,mo,null),e(mo,Bir),e(mo,_9e),e(_9e,Nir),e(mo,Iir),e(mo,Ha),e(Ha,qir),e(Ha,u9e),e(u9e,jir),e(Ha,Dir),e(Ha,b9e),e(b9e,Gir),e(Ha,Oir),e(Ha,v9e),e(v9e,Vir),e(Ha,Xir),e(mo,zir),e(mo,et),e(et,DF),e(DF,F9e),e(F9e,Qir),e(DF,Wir),e(DF,uW),e(uW,Hir),e(DF,Uir),e(et,Jir),e(et,GF),e(GF,T9e),e(T9e,Yir),e(GF,Kir),e(GF,bW),e(bW,Zir),e(GF,edr),e(et,odr),e(et,OF),e(OF,M9e),e(M9e,rdr),e(OF,tdr),e(OF,vW),e(vW,adr),e(OF,ndr),e(et,sdr),e(et,VF),e(VF,E9e),e(E9e,ldr),e(VF,idr),e(VF,FW),e(FW,ddr),e(VF,cdr),e(et,fdr),e(et,XF),e(XF,C9e),e(C9e,mdr),e(XF,gdr),e(XF,TW),e(TW,hdr),e(XF,pdr),e(mo,_dr),e(mo,zF),e(zF,udr),e(zF,w9e),e(w9e,bdr),e(zF,vdr),e(zF,A9e),e(A9e,Fdr),e(mo,Tdr),M(QF,mo,null),b(f,dVe,u),b(f,$d,u),e($d,WF),e(WF,L9e),M(By,L9e,null),e($d,Mdr),e($d,y9e),e(y9e,Edr),b(f,cVe,u),b(f,Qo,u),M(Ny,Qo,null),e(Qo,Cdr),e(Qo,kd),e(kd,wdr),e(kd,MW),e(MW,Adr),e(kd,Ldr),e(kd,EW),e(EW,ydr),e(kd,xdr),e(Qo,$dr),e(Qo,Iy),e(Iy,kdr),e(Iy,x9e),e(x9e,Sdr),e(Iy,Rdr),e(Qo,Pdr),e(Qo,Mt),M(qy,Mt,null),e(Mt,Bdr),e(Mt,$9e),e($9e,Ndr),e(Mt,Idr),e(Mt,Sd),e(Sd,qdr),e(Sd,k9e),e(k9e,jdr),e(Sd,Ddr),e(Sd,CW),e(CW,Gdr),e(Sd,Odr),e(Mt,Vdr),M(HF,Mt,null),e(Qo,Xdr),e(Qo,go),M(jy,go,null),e(go,zdr),e(go,S9e),e(S9e,Qdr),e(go,Wdr),e(go,Ua),e(Ua,Hdr),e(Ua,R9e),e(R9e,Udr),e(Ua,Jdr),e(Ua,P9e),e(P9e,Ydr),e(Ua,Kdr),e(Ua,B9e),e(B9e,Zdr),e(Ua,ecr),e(go,ocr),e(go,Le),e(Le,UF),e(UF,N9e),e(N9e,rcr),e(UF,tcr),e(UF,wW),e(wW,acr),e(UF,ncr),e(Le,scr),e(Le,JF),e(JF,I9e),e(I9e,lcr),e(JF,icr),e(JF,AW),e(AW,dcr),e(JF,ccr),e(Le,fcr),e(Le,YF),e(YF,q9e),e(q9e,mcr),e(YF,gcr),e(YF,LW),e(LW,hcr),e(YF,pcr),e(Le,_cr),e(Le,KF),e(KF,j9e),e(j9e,ucr),e(KF,bcr),e(KF,yW),e(yW,vcr),e(KF,Fcr),e(Le,Tcr),e(Le,ZF),e(ZF,D9e),e(D9e,Mcr),e(ZF,Ecr),e(ZF,xW),e(xW,Ccr),e(ZF,wcr),e(Le,Acr),e(Le,eT),e(eT,G9e),e(G9e,Lcr),e(eT,ycr),e(eT,$W),e($W,xcr),e(eT,$cr),e(Le,kcr),e(Le,oT),e(oT,O9e),e(O9e,Scr),e(oT,Rcr),e(oT,kW),e(kW,Pcr),e(oT,Bcr),e(Le,Ncr),e(Le,rT),e(rT,V9e),e(V9e,Icr),e(rT,qcr),e(rT,SW),e(SW,jcr),e(rT,Dcr),e(Le,Gcr),e(Le,tT),e(tT,X9e),e(X9e,Ocr),e(tT,Vcr),e(tT,RW),e(RW,Xcr),e(tT,zcr),e(Le,Qcr),e(Le,aT),e(aT,z9e),e(z9e,Wcr),e(aT,Hcr),e(aT,PW),e(PW,Ucr),e(aT,Jcr),e(go,Ycr),e(go,nT),e(nT,Kcr),e(nT,Q9e),e(Q9e,Zcr),e(nT,efr),e(nT,W9e),e(W9e,ofr),e(go,rfr),M(sT,go,null),b(f,fVe,u),b(f,Rd,u),e(Rd,lT),e(lT,H9e),M(Dy,H9e,null),e(Rd,tfr),e(Rd,U9e),e(U9e,afr),b(f,mVe,u),b(f,Wo,u),M(Gy,Wo,null),e(Wo,nfr),e(Wo,Pd),e(Pd,sfr),e(Pd,BW),e(BW,lfr),e(Pd,ifr),e(Pd,NW),e(NW,dfr),e(Pd,cfr),e(Wo,ffr),e(Wo,Oy),e(Oy,mfr),e(Oy,J9e),e(J9e,gfr),e(Oy,hfr),e(Wo,pfr),e(Wo,Et),M(Vy,Et,null),e(Et,_fr),e(Et,Y9e),e(Y9e,ufr),e(Et,bfr),e(Et,Bd),e(Bd,vfr),e(Bd,K9e),e(K9e,Ffr),e(Bd,Tfr),e(Bd,IW),e(IW,Mfr),e(Bd,Efr),e(Et,Cfr),M(iT,Et,null),e(Wo,wfr),e(Wo,ho),M(Xy,ho,null),e(ho,Afr),e(ho,Z9e),e(Z9e,Lfr),e(ho,yfr),e(ho,Ja),e(Ja,xfr),e(Ja,e2e),e(e2e,$fr),e(Ja,kfr),e(Ja,o2e),e(o2e,Sfr),e(Ja,Rfr),e(Ja,r2e),e(r2e,Pfr),e(Ja,Bfr),e(ho,Nfr),e(ho,zy),e(zy,dT),e(dT,t2e),e(t2e,Ifr),e(dT,qfr),e(dT,qW),e(qW,jfr),e(dT,Dfr),e(zy,Gfr),e(zy,cT),e(cT,a2e),e(a2e,Ofr),e(cT,Vfr),e(cT,jW),e(jW,Xfr),e(cT,zfr),e(ho,Qfr),e(ho,fT),e(fT,Wfr),e(fT,n2e),e(n2e,Hfr),e(fT,Ufr),e(fT,s2e),e(s2e,Jfr),e(ho,Yfr),M(mT,ho,null),b(f,gVe,u),b(f,Nd,u),e(Nd,gT),e(gT,l2e),M(Qy,l2e,null),e(Nd,Kfr),e(Nd,i2e),e(i2e,Zfr),b(f,hVe,u),b(f,Ho,u),M(Wy,Ho,null),e(Ho,emr),e(Ho,Id),e(Id,omr),e(Id,DW),e(DW,rmr),e(Id,tmr),e(Id,GW),e(GW,amr),e(Id,nmr),e(Ho,smr),e(Ho,Hy),e(Hy,lmr),e(Hy,d2e),e(d2e,imr),e(Hy,dmr),e(Ho,cmr),e(Ho,Ct),M(Uy,Ct,null),e(Ct,fmr),e(Ct,c2e),e(c2e,mmr),e(Ct,gmr),e(Ct,qd),e(qd,hmr),e(qd,f2e),e(f2e,pmr),e(qd,_mr),e(qd,OW),e(OW,umr),e(qd,bmr),e(Ct,vmr),M(hT,Ct,null),e(Ho,Fmr),e(Ho,po),M(Jy,po,null),e(po,Tmr),e(po,m2e),e(m2e,Mmr),e(po,Emr),e(po,Ya),e(Ya,Cmr),e(Ya,g2e),e(g2e,wmr),e(Ya,Amr),e(Ya,h2e),e(h2e,Lmr),e(Ya,ymr),e(Ya,p2e),e(p2e,xmr),e(Ya,$mr),e(po,kmr),e(po,ot),e(ot,pT),e(pT,_2e),e(_2e,Smr),e(pT,Rmr),e(pT,VW),e(VW,Pmr),e(pT,Bmr),e(ot,Nmr),e(ot,_T),e(_T,u2e),e(u2e,Imr),e(_T,qmr),e(_T,XW),e(XW,jmr),e(_T,Dmr),e(ot,Gmr),e(ot,uT),e(uT,b2e),e(b2e,Omr),e(uT,Vmr),e(uT,zW),e(zW,Xmr),e(uT,zmr),e(ot,Qmr),e(ot,bT),e(bT,v2e),e(v2e,Wmr),e(bT,Hmr),e(bT,QW),e(QW,Umr),e(bT,Jmr),e(ot,Ymr),e(ot,vT),e(vT,F2e),e(F2e,Kmr),e(vT,Zmr),e(vT,WW),e(WW,egr),e(vT,ogr),e(po,rgr),e(po,FT),e(FT,tgr),e(FT,T2e),e(T2e,agr),e(FT,ngr),e(FT,M2e),e(M2e,sgr),e(po,lgr),M(TT,po,null),b(f,pVe,u),b(f,jd,u),e(jd,MT),e(MT,E2e),M(Yy,E2e,null),e(jd,igr),e(jd,C2e),e(C2e,dgr),b(f,_Ve,u),b(f,Uo,u),M(Ky,Uo,null),e(Uo,cgr),e(Uo,Dd),e(Dd,fgr),e(Dd,HW),e(HW,mgr),e(Dd,ggr),e(Dd,UW),e(UW,hgr),e(Dd,pgr),e(Uo,_gr),e(Uo,Zy),e(Zy,ugr),e(Zy,w2e),e(w2e,bgr),e(Zy,vgr),e(Uo,Fgr),e(Uo,wt),M(e8,wt,null),e(wt,Tgr),e(wt,A2e),e(A2e,Mgr),e(wt,Egr),e(wt,Gd),e(Gd,Cgr),e(Gd,L2e),e(L2e,wgr),e(Gd,Agr),e(Gd,JW),e(JW,Lgr),e(Gd,ygr),e(wt,xgr),M(ET,wt,null),e(Uo,$gr),e(Uo,_o),M(o8,_o,null),e(_o,kgr),e(_o,y2e),e(y2e,Sgr),e(_o,Rgr),e(_o,Ka),e(Ka,Pgr),e(Ka,x2e),e(x2e,Bgr),e(Ka,Ngr),e(Ka,$2e),e($2e,Igr),e(Ka,qgr),e(Ka,k2e),e(k2e,jgr),e(Ka,Dgr),e(_o,Ggr),e(_o,Od),e(Od,CT),e(CT,S2e),e(S2e,Ogr),e(CT,Vgr),e(CT,YW),e(YW,Xgr),e(CT,zgr),e(Od,Qgr),e(Od,wT),e(wT,R2e),e(R2e,Wgr),e(wT,Hgr),e(wT,KW),e(KW,Ugr),e(wT,Jgr),e(Od,Ygr),e(Od,AT),e(AT,P2e),e(P2e,Kgr),e(AT,Zgr),e(AT,ZW),e(ZW,ehr),e(AT,ohr),e(_o,rhr),e(_o,LT),e(LT,thr),e(LT,B2e),e(B2e,ahr),e(LT,nhr),e(LT,N2e),e(N2e,shr),e(_o,lhr),M(yT,_o,null),b(f,uVe,u),b(f,Vd,u),e(Vd,xT),e(xT,I2e),M(r8,I2e,null),e(Vd,ihr),e(Vd,q2e),e(q2e,dhr),b(f,bVe,u),b(f,Jo,u),M(t8,Jo,null),e(Jo,chr),e(Jo,Xd),e(Xd,fhr),e(Xd,eH),e(eH,mhr),e(Xd,ghr),e(Xd,oH),e(oH,hhr),e(Xd,phr),e(Jo,_hr),e(Jo,a8),e(a8,uhr),e(a8,j2e),e(j2e,bhr),e(a8,vhr),e(Jo,Fhr),e(Jo,At),M(n8,At,null),e(At,Thr),e(At,D2e),e(D2e,Mhr),e(At,Ehr),e(At,zd),e(zd,Chr),e(zd,G2e),e(G2e,whr),e(zd,Ahr),e(zd,rH),e(rH,Lhr),e(zd,yhr),e(At,xhr),M($T,At,null),e(Jo,$hr),e(Jo,uo),M(s8,uo,null),e(uo,khr),e(uo,O2e),e(O2e,Shr),e(uo,Rhr),e(uo,Za),e(Za,Phr),e(Za,V2e),e(V2e,Bhr),e(Za,Nhr),e(Za,X2e),e(X2e,Ihr),e(Za,qhr),e(Za,z2e),e(z2e,jhr),e(Za,Dhr),e(uo,Ghr),e(uo,l8),e(l8,kT),e(kT,Q2e),e(Q2e,Ohr),e(kT,Vhr),e(kT,tH),e(tH,Xhr),e(kT,zhr),e(l8,Qhr),e(l8,ST),e(ST,W2e),e(W2e,Whr),e(ST,Hhr),e(ST,aH),e(aH,Uhr),e(ST,Jhr),e(uo,Yhr),e(uo,RT),e(RT,Khr),e(RT,H2e),e(H2e,Zhr),e(RT,epr),e(RT,U2e),e(U2e,opr),e(uo,rpr),M(PT,uo,null),b(f,vVe,u),b(f,Qd,u),e(Qd,BT),e(BT,J2e),M(i8,J2e,null),e(Qd,tpr),e(Qd,Y2e),e(Y2e,apr),b(f,FVe,u),b(f,Yo,u),M(d8,Yo,null),e(Yo,npr),e(Yo,Wd),e(Wd,spr),e(Wd,nH),e(nH,lpr),e(Wd,ipr),e(Wd,sH),e(sH,dpr),e(Wd,cpr),e(Yo,fpr),e(Yo,c8),e(c8,mpr),e(c8,K2e),e(K2e,gpr),e(c8,hpr),e(Yo,ppr),e(Yo,Lt),M(f8,Lt,null),e(Lt,_pr),e(Lt,Z2e),e(Z2e,upr),e(Lt,bpr),e(Lt,Hd),e(Hd,vpr),e(Hd,ebe),e(ebe,Fpr),e(Hd,Tpr),e(Hd,lH),e(lH,Mpr),e(Hd,Epr),e(Lt,Cpr),M(NT,Lt,null),e(Yo,wpr),e(Yo,bo),M(m8,bo,null),e(bo,Apr),e(bo,obe),e(obe,Lpr),e(bo,ypr),e(bo,en),e(en,xpr),e(en,rbe),e(rbe,$pr),e(en,kpr),e(en,tbe),e(tbe,Spr),e(en,Rpr),e(en,abe),e(abe,Ppr),e(en,Bpr),e(bo,Npr),e(bo,nbe),e(nbe,IT),e(IT,sbe),e(sbe,Ipr),e(IT,qpr),e(IT,iH),e(iH,jpr),e(IT,Dpr),e(bo,Gpr),e(bo,qT),e(qT,Opr),e(qT,lbe),e(lbe,Vpr),e(qT,Xpr),e(qT,ibe),e(ibe,zpr),e(bo,Qpr),M(jT,bo,null),b(f,TVe,u),b(f,Ud,u),e(Ud,DT),e(DT,dbe),M(g8,dbe,null),e(Ud,Wpr),e(Ud,cbe),e(cbe,Hpr),b(f,MVe,u),b(f,Ko,u),M(h8,Ko,null),e(Ko,Upr),e(Ko,Jd),e(Jd,Jpr),e(Jd,dH),e(dH,Ypr),e(Jd,Kpr),e(Jd,cH),e(cH,Zpr),e(Jd,e_r),e(Ko,o_r),e(Ko,p8),e(p8,r_r),e(p8,fbe),e(fbe,t_r),e(p8,a_r),e(Ko,n_r),e(Ko,yt),M(_8,yt,null),e(yt,s_r),e(yt,mbe),e(mbe,l_r),e(yt,i_r),e(yt,Yd),e(Yd,d_r),e(Yd,gbe),e(gbe,c_r),e(Yd,f_r),e(Yd,fH),e(fH,m_r),e(Yd,g_r),e(yt,h_r),M(GT,yt,null),e(Ko,p_r),e(Ko,vo),M(u8,vo,null),e(vo,__r),e(vo,hbe),e(hbe,u_r),e(vo,b_r),e(vo,on),e(on,v_r),e(on,pbe),e(pbe,F_r),e(on,T_r),e(on,_be),e(_be,M_r),e(on,E_r),e(on,ube),e(ube,C_r),e(on,w_r),e(vo,A_r),e(vo,rn),e(rn,OT),e(OT,bbe),e(bbe,L_r),e(OT,y_r),e(OT,mH),e(mH,x_r),e(OT,$_r),e(rn,k_r),e(rn,VT),e(VT,vbe),e(vbe,S_r),e(VT,R_r),e(VT,gH),e(gH,P_r),e(VT,B_r),e(rn,N_r),e(rn,XT),e(XT,Fbe),e(Fbe,I_r),e(XT,q_r),e(XT,hH),e(hH,j_r),e(XT,D_r),e(rn,G_r),e(rn,zT),e(zT,Tbe),e(Tbe,O_r),e(zT,V_r),e(zT,pH),e(pH,X_r),e(zT,z_r),e(vo,Q_r),e(vo,QT),e(QT,W_r),e(QT,Mbe),e(Mbe,H_r),e(QT,U_r),e(QT,Ebe),e(Ebe,J_r),e(vo,Y_r),M(WT,vo,null),b(f,EVe,u),b(f,Kd,u),e(Kd,HT),e(HT,Cbe),M(b8,Cbe,null),e(Kd,K_r),e(Kd,wbe),e(wbe,Z_r),b(f,CVe,u),b(f,Zo,u),M(v8,Zo,null),e(Zo,eur),e(Zo,Zd),e(Zd,our),e(Zd,_H),e(_H,rur),e(Zd,tur),e(Zd,uH),e(uH,aur),e(Zd,nur),e(Zo,sur),e(Zo,F8),e(F8,lur),e(F8,Abe),e(Abe,iur),e(F8,dur),e(Zo,cur),e(Zo,xt),M(T8,xt,null),e(xt,fur),e(xt,Lbe),e(Lbe,mur),e(xt,gur),e(xt,ec),e(ec,hur),e(ec,ybe),e(ybe,pur),e(ec,_ur),e(ec,bH),e(bH,uur),e(ec,bur),e(xt,vur),M(UT,xt,null),e(Zo,Fur),e(Zo,Fo),M(M8,Fo,null),e(Fo,Tur),e(Fo,xbe),e(xbe,Mur),e(Fo,Eur),e(Fo,tn),e(tn,Cur),e(tn,$be),e($be,wur),e(tn,Aur),e(tn,kbe),e(kbe,Lur),e(tn,yur),e(tn,Sbe),e(Sbe,xur),e(tn,$ur),e(Fo,kur),e(Fo,Rbe),e(Rbe,JT),e(JT,Pbe),e(Pbe,Sur),e(JT,Rur),e(JT,vH),e(vH,Pur),e(JT,Bur),e(Fo,Nur),e(Fo,YT),e(YT,Iur),e(YT,Bbe),e(Bbe,qur),e(YT,jur),e(YT,Nbe),e(Nbe,Dur),e(Fo,Gur),M(KT,Fo,null),b(f,wVe,u),b(f,oc,u),e(oc,ZT),e(ZT,Ibe),M(E8,Ibe,null),e(oc,Our),e(oc,qbe),e(qbe,Vur),b(f,AVe,u),b(f,er,u),M(C8,er,null),e(er,Xur),e(er,rc),e(rc,zur),e(rc,FH),e(FH,Qur),e(rc,Wur),e(rc,TH),e(TH,Hur),e(rc,Uur),e(er,Jur),e(er,w8),e(w8,Yur),e(w8,jbe),e(jbe,Kur),e(w8,Zur),e(er,e1r),e(er,$t),M(A8,$t,null),e($t,o1r),e($t,Dbe),e(Dbe,r1r),e($t,t1r),e($t,tc),e(tc,a1r),e(tc,Gbe),e(Gbe,n1r),e(tc,s1r),e(tc,MH),e(MH,l1r),e(tc,i1r),e($t,d1r),M(eM,$t,null),e(er,c1r),e(er,yr),M(L8,yr,null),e(yr,f1r),e(yr,Obe),e(Obe,m1r),e(yr,g1r),e(yr,an),e(an,h1r),e(an,Vbe),e(Vbe,p1r),e(an,_1r),e(an,Xbe),e(Xbe,u1r),e(an,b1r),e(an,zbe),e(zbe,v1r),e(an,F1r),e(yr,T1r),e(yr,j),e(j,oM),e(oM,Qbe),e(Qbe,M1r),e(oM,E1r),e(oM,EH),e(EH,C1r),e(oM,w1r),e(j,A1r),e(j,rM),e(rM,Wbe),e(Wbe,L1r),e(rM,y1r),e(rM,CH),e(CH,x1r),e(rM,$1r),e(j,k1r),e(j,tM),e(tM,Hbe),e(Hbe,S1r),e(tM,R1r),e(tM,wH),e(wH,P1r),e(tM,B1r),e(j,N1r),e(j,aM),e(aM,Ube),e(Ube,I1r),e(aM,q1r),e(aM,AH),e(AH,j1r),e(aM,D1r),e(j,G1r),e(j,nM),e(nM,Jbe),e(Jbe,O1r),e(nM,V1r),e(nM,LH),e(LH,X1r),e(nM,z1r),e(j,Q1r),e(j,sM),e(sM,Ybe),e(Ybe,W1r),e(sM,H1r),e(sM,yH),e(yH,U1r),e(sM,J1r),e(j,Y1r),e(j,lM),e(lM,Kbe),e(Kbe,K1r),e(lM,Z1r),e(lM,xH),e(xH,e7r),e(lM,o7r),e(j,r7r),e(j,iM),e(iM,Zbe),e(Zbe,t7r),e(iM,a7r),e(iM,$H),e($H,n7r),e(iM,s7r),e(j,l7r),e(j,dM),e(dM,eve),e(eve,i7r),e(dM,d7r),e(dM,kH),e(kH,c7r),e(dM,f7r),e(j,m7r),e(j,cM),e(cM,ove),e(ove,g7r),e(cM,h7r),e(cM,SH),e(SH,p7r),e(cM,_7r),e(j,u7r),e(j,fM),e(fM,rve),e(rve,b7r),e(fM,v7r),e(fM,RH),e(RH,F7r),e(fM,T7r),e(j,M7r),e(j,mM),e(mM,tve),e(tve,E7r),e(mM,C7r),e(mM,PH),e(PH,w7r),e(mM,A7r),e(j,L7r),e(j,gM),e(gM,ave),e(ave,y7r),e(gM,x7r),e(gM,BH),e(BH,$7r),e(gM,k7r),e(j,S7r),e(j,hM),e(hM,nve),e(nve,R7r),e(hM,P7r),e(hM,NH),e(NH,B7r),e(hM,N7r),e(j,I7r),e(j,pM),e(pM,sve),e(sve,q7r),e(pM,j7r),e(pM,IH),e(IH,D7r),e(pM,G7r),e(j,O7r),e(j,_M),e(_M,lve),e(lve,V7r),e(_M,X7r),e(_M,qH),e(qH,z7r),e(_M,Q7r),e(j,W7r),e(j,uM),e(uM,ive),e(ive,H7r),e(uM,U7r),e(uM,jH),e(jH,J7r),e(uM,Y7r),e(j,K7r),e(j,Ws),e(Ws,dve),e(dve,Z7r),e(Ws,e9r),e(Ws,DH),e(DH,o9r),e(Ws,r9r),e(Ws,GH),e(GH,t9r),e(Ws,a9r),e(j,n9r),e(j,bM),e(bM,cve),e(cve,s9r),e(bM,l9r),e(bM,OH),e(OH,i9r),e(bM,d9r),e(j,c9r),e(j,vM),e(vM,fve),e(fve,f9r),e(vM,m9r),e(vM,VH),e(VH,g9r),e(vM,h9r),e(j,p9r),e(j,FM),e(FM,mve),e(mve,_9r),e(FM,u9r),e(FM,XH),e(XH,b9r),e(FM,v9r),e(j,F9r),e(j,TM),e(TM,gve),e(gve,T9r),e(TM,M9r),e(TM,zH),e(zH,E9r),e(TM,C9r),e(j,w9r),e(j,MM),e(MM,hve),e(hve,A9r),e(MM,L9r),e(MM,QH),e(QH,y9r),e(MM,x9r),e(j,$9r),e(j,EM),e(EM,pve),e(pve,k9r),e(EM,S9r),e(EM,WH),e(WH,R9r),e(EM,P9r),e(j,B9r),e(j,CM),e(CM,_ve),e(_ve,N9r),e(CM,I9r),e(CM,HH),e(HH,q9r),e(CM,j9r),e(j,D9r),e(j,wM),e(wM,uve),e(uve,G9r),e(wM,O9r),e(wM,UH),e(UH,V9r),e(wM,X9r),e(j,z9r),e(j,AM),e(AM,bve),e(bve,Q9r),e(AM,W9r),e(AM,JH),e(JH,H9r),e(AM,U9r),e(j,J9r),e(j,LM),e(LM,vve),e(vve,Y9r),e(LM,K9r),e(LM,YH),e(YH,Z9r),e(LM,e2r),e(j,o2r),e(j,yM),e(yM,Fve),e(Fve,r2r),e(yM,t2r),e(yM,KH),e(KH,a2r),e(yM,n2r),e(j,s2r),e(j,xM),e(xM,Tve),e(Tve,l2r),e(xM,i2r),e(xM,ZH),e(ZH,d2r),e(xM,c2r),e(j,f2r),e(j,$M),e($M,Mve),e(Mve,m2r),e($M,g2r),e($M,eU),e(eU,h2r),e($M,p2r),e(j,_2r),e(j,kM),e(kM,Eve),e(Eve,u2r),e(kM,b2r),e(kM,oU),e(oU,v2r),e(kM,F2r),e(j,T2r),e(j,SM),e(SM,Cve),e(Cve,M2r),e(SM,E2r),e(SM,rU),e(rU,C2r),e(SM,w2r),e(j,A2r),e(j,RM),e(RM,wve),e(wve,L2r),e(RM,y2r),e(RM,tU),e(tU,x2r),e(RM,$2r),e(j,k2r),e(j,PM),e(PM,Ave),e(Ave,S2r),e(PM,R2r),e(PM,aU),e(aU,P2r),e(PM,B2r),e(j,N2r),e(j,BM),e(BM,Lve),e(Lve,I2r),e(BM,q2r),e(BM,nU),e(nU,j2r),e(BM,D2r),e(j,G2r),e(j,NM),e(NM,yve),e(yve,O2r),e(NM,V2r),e(NM,sU),e(sU,X2r),e(NM,z2r),e(j,Q2r),e(j,IM),e(IM,xve),e(xve,W2r),e(IM,H2r),e(IM,lU),e(lU,U2r),e(IM,J2r),e(j,Y2r),e(j,qM),e(qM,$ve),e($ve,K2r),e(qM,Z2r),e(qM,iU),e(iU,ebr),e(qM,obr),e(j,rbr),e(j,jM),e(jM,kve),e(kve,tbr),e(jM,abr),e(jM,dU),e(dU,nbr),e(jM,sbr),e(j,lbr),e(j,DM),e(DM,Sve),e(Sve,ibr),e(DM,dbr),e(DM,cU),e(cU,cbr),e(DM,fbr),e(j,mbr),e(j,GM),e(GM,Rve),e(Rve,gbr),e(GM,hbr),e(GM,fU),e(fU,pbr),e(GM,_br),e(j,ubr),e(j,OM),e(OM,Pve),e(Pve,bbr),e(OM,vbr),e(OM,mU),e(mU,Fbr),e(OM,Tbr),e(j,Mbr),e(j,VM),e(VM,Bve),e(Bve,Ebr),e(VM,Cbr),e(VM,gU),e(gU,wbr),e(VM,Abr),e(j,Lbr),e(j,XM),e(XM,Nve),e(Nve,ybr),e(XM,xbr),e(XM,hU),e(hU,$br),e(XM,kbr),e(j,Sbr),e(j,zM),e(zM,Ive),e(Ive,Rbr),e(zM,Pbr),e(zM,pU),e(pU,Bbr),e(zM,Nbr),e(j,Ibr),e(j,QM),e(QM,qve),e(qve,qbr),e(QM,jbr),e(QM,_U),e(_U,Dbr),e(QM,Gbr),e(yr,Obr),M(WM,yr,null),b(f,LVe,u),b(f,ac,u),e(ac,HM),e(HM,jve),M(y8,jve,null),e(ac,Vbr),e(ac,Dve),e(Dve,Xbr),b(f,yVe,u),b(f,or,u),M(x8,or,null),e(or,zbr),e(or,nc),e(nc,Qbr),e(nc,uU),e(uU,Wbr),e(nc,Hbr),e(nc,bU),e(bU,Ubr),e(nc,Jbr),e(or,Ybr),e(or,$8),e($8,Kbr),e($8,Gve),e(Gve,Zbr),e($8,evr),e(or,ovr),e(or,kt),M(k8,kt,null),e(kt,rvr),e(kt,Ove),e(Ove,tvr),e(kt,avr),e(kt,sc),e(sc,nvr),e(sc,Vve),e(Vve,svr),e(sc,lvr),e(sc,vU),e(vU,ivr),e(sc,dvr),e(kt,cvr),M(UM,kt,null),e(or,fvr),e(or,xr),M(S8,xr,null),e(xr,mvr),e(xr,Xve),e(Xve,gvr),e(xr,hvr),e(xr,nn),e(nn,pvr),e(nn,zve),e(zve,_vr),e(nn,uvr),e(nn,Qve),e(Qve,bvr),e(nn,vvr),e(nn,Wve),e(Wve,Fvr),e(nn,Tvr),e(xr,Mvr),e(xr,se),e(se,JM),e(JM,Hve),e(Hve,Evr),e(JM,Cvr),e(JM,FU),e(FU,wvr),e(JM,Avr),e(se,Lvr),e(se,YM),e(YM,Uve),e(Uve,yvr),e(YM,xvr),e(YM,TU),e(TU,$vr),e(YM,kvr),e(se,Svr),e(se,KM),e(KM,Jve),e(Jve,Rvr),e(KM,Pvr),e(KM,MU),e(MU,Bvr),e(KM,Nvr),e(se,Ivr),e(se,ZM),e(ZM,Yve),e(Yve,qvr),e(ZM,jvr),e(ZM,EU),e(EU,Dvr),e(ZM,Gvr),e(se,Ovr),e(se,eE),e(eE,Kve),e(Kve,Vvr),e(eE,Xvr),e(eE,CU),e(CU,zvr),e(eE,Qvr),e(se,Wvr),e(se,oE),e(oE,Zve),e(Zve,Hvr),e(oE,Uvr),e(oE,wU),e(wU,Jvr),e(oE,Yvr),e(se,Kvr),e(se,rE),e(rE,eFe),e(eFe,Zvr),e(rE,eFr),e(rE,AU),e(AU,oFr),e(rE,rFr),e(se,tFr),e(se,tE),e(tE,oFe),e(oFe,aFr),e(tE,nFr),e(tE,LU),e(LU,sFr),e(tE,lFr),e(se,iFr),e(se,aE),e(aE,rFe),e(rFe,dFr),e(aE,cFr),e(aE,yU),e(yU,fFr),e(aE,mFr),e(se,gFr),e(se,nE),e(nE,tFe),e(tFe,hFr),e(nE,pFr),e(nE,xU),e(xU,_Fr),e(nE,uFr),e(se,bFr),e(se,sE),e(sE,aFe),e(aFe,vFr),e(sE,FFr),e(sE,$U),e($U,TFr),e(sE,MFr),e(se,EFr),e(se,lE),e(lE,nFe),e(nFe,CFr),e(lE,wFr),e(lE,kU),e(kU,AFr),e(lE,LFr),e(se,yFr),e(se,iE),e(iE,sFe),e(sFe,xFr),e(iE,$Fr),e(iE,SU),e(SU,kFr),e(iE,SFr),e(se,RFr),e(se,dE),e(dE,lFe),e(lFe,PFr),e(dE,BFr),e(dE,RU),e(RU,NFr),e(dE,IFr),e(se,qFr),e(se,cE),e(cE,iFe),e(iFe,jFr),e(cE,DFr),e(cE,PU),e(PU,GFr),e(cE,OFr),e(se,VFr),e(se,fE),e(fE,dFe),e(dFe,XFr),e(fE,zFr),e(fE,BU),e(BU,QFr),e(fE,WFr),e(se,HFr),e(se,mE),e(mE,cFe),e(cFe,UFr),e(mE,JFr),e(mE,NU),e(NU,YFr),e(mE,KFr),e(se,ZFr),e(se,gE),e(gE,fFe),e(fFe,eTr),e(gE,oTr),e(gE,IU),e(IU,rTr),e(gE,tTr),e(se,aTr),e(se,hE),e(hE,mFe),e(mFe,nTr),e(hE,sTr),e(hE,qU),e(qU,lTr),e(hE,iTr),e(se,dTr),e(se,pE),e(pE,gFe),e(gFe,cTr),e(pE,fTr),e(pE,jU),e(jU,mTr),e(pE,gTr),e(se,hTr),e(se,_E),e(_E,hFe),e(hFe,pTr),e(_E,_Tr),e(_E,DU),e(DU,uTr),e(_E,bTr),e(se,vTr),e(se,uE),e(uE,pFe),e(pFe,FTr),e(uE,TTr),e(uE,GU),e(GU,MTr),e(uE,ETr),e(se,CTr),e(se,bE),e(bE,_Fe),e(_Fe,wTr),e(bE,ATr),e(bE,OU),e(OU,LTr),e(bE,yTr),e(xr,xTr),M(vE,xr,null),b(f,xVe,u),b(f,lc,u),e(lc,FE),e(FE,uFe),M(R8,uFe,null),e(lc,$Tr),e(lc,bFe),e(bFe,kTr),b(f,$Ve,u),b(f,rr,u),M(P8,rr,null),e(rr,STr),e(rr,ic),e(ic,RTr),e(ic,VU),e(VU,PTr),e(ic,BTr),e(ic,XU),e(XU,NTr),e(ic,ITr),e(rr,qTr),e(rr,B8),e(B8,jTr),e(B8,vFe),e(vFe,DTr),e(B8,GTr),e(rr,OTr),e(rr,St),M(N8,St,null),e(St,VTr),e(St,FFe),e(FFe,XTr),e(St,zTr),e(St,dc),e(dc,QTr),e(dc,TFe),e(TFe,WTr),e(dc,HTr),e(dc,zU),e(zU,UTr),e(dc,JTr),e(St,YTr),M(TE,St,null),e(rr,KTr),e(rr,$r),M(I8,$r,null),e($r,ZTr),e($r,MFe),e(MFe,eMr),e($r,oMr),e($r,sn),e(sn,rMr),e(sn,EFe),e(EFe,tMr),e(sn,aMr),e(sn,CFe),e(CFe,nMr),e(sn,sMr),e(sn,wFe),e(wFe,lMr),e(sn,iMr),e($r,dMr),e($r,Me),e(Me,ME),e(ME,AFe),e(AFe,cMr),e(ME,fMr),e(ME,QU),e(QU,mMr),e(ME,gMr),e(Me,hMr),e(Me,EE),e(EE,LFe),e(LFe,pMr),e(EE,_Mr),e(EE,WU),e(WU,uMr),e(EE,bMr),e(Me,vMr),e(Me,CE),e(CE,yFe),e(yFe,FMr),e(CE,TMr),e(CE,HU),e(HU,MMr),e(CE,EMr),e(Me,CMr),e(Me,wE),e(wE,xFe),e(xFe,wMr),e(wE,AMr),e(wE,UU),e(UU,LMr),e(wE,yMr),e(Me,xMr),e(Me,AE),e(AE,$Fe),e($Fe,$Mr),e(AE,kMr),e(AE,JU),e(JU,SMr),e(AE,RMr),e(Me,PMr),e(Me,LE),e(LE,kFe),e(kFe,BMr),e(LE,NMr),e(LE,YU),e(YU,IMr),e(LE,qMr),e(Me,jMr),e(Me,yE),e(yE,SFe),e(SFe,DMr),e(yE,GMr),e(yE,KU),e(KU,OMr),e(yE,VMr),e(Me,XMr),e(Me,xE),e(xE,RFe),e(RFe,zMr),e(xE,QMr),e(xE,ZU),e(ZU,WMr),e(xE,HMr),e(Me,UMr),e(Me,$E),e($E,PFe),e(PFe,JMr),e($E,YMr),e($E,eJ),e(eJ,KMr),e($E,ZMr),e(Me,eEr),e(Me,kE),e(kE,BFe),e(BFe,oEr),e(kE,rEr),e(kE,oJ),e(oJ,tEr),e(kE,aEr),e(Me,nEr),e(Me,SE),e(SE,NFe),e(NFe,sEr),e(SE,lEr),e(SE,rJ),e(rJ,iEr),e(SE,dEr),e(Me,cEr),e(Me,RE),e(RE,IFe),e(IFe,fEr),e(RE,mEr),e(RE,tJ),e(tJ,gEr),e(RE,hEr),e(Me,pEr),e(Me,PE),e(PE,qFe),e(qFe,_Er),e(PE,uEr),e(PE,aJ),e(aJ,bEr),e(PE,vEr),e($r,FEr),M(BE,$r,null),b(f,kVe,u),b(f,cc,u),e(cc,NE),e(NE,jFe),M(q8,jFe,null),e(cc,TEr),e(cc,DFe),e(DFe,MEr),b(f,SVe,u),b(f,tr,u),M(j8,tr,null),e(tr,EEr),e(tr,fc),e(fc,CEr),e(fc,nJ),e(nJ,wEr),e(fc,AEr),e(fc,sJ),e(sJ,LEr),e(fc,yEr),e(tr,xEr),e(tr,D8),e(D8,$Er),e(D8,GFe),e(GFe,kEr),e(D8,SEr),e(tr,REr),e(tr,Rt),M(G8,Rt,null),e(Rt,PEr),e(Rt,OFe),e(OFe,BEr),e(Rt,NEr),e(Rt,mc),e(mc,IEr),e(mc,VFe),e(VFe,qEr),e(mc,jEr),e(mc,lJ),e(lJ,DEr),e(mc,GEr),e(Rt,OEr),M(IE,Rt,null),e(tr,VEr),e(tr,kr),M(O8,kr,null),e(kr,XEr),e(kr,XFe),e(XFe,zEr),e(kr,QEr),e(kr,ln),e(ln,WEr),e(ln,zFe),e(zFe,HEr),e(ln,UEr),e(ln,QFe),e(QFe,JEr),e(ln,YEr),e(ln,WFe),e(WFe,KEr),e(ln,ZEr),e(kr,e4r),e(kr,dn),e(dn,qE),e(qE,HFe),e(HFe,o4r),e(qE,r4r),e(qE,iJ),e(iJ,t4r),e(qE,a4r),e(dn,n4r),e(dn,jE),e(jE,UFe),e(UFe,s4r),e(jE,l4r),e(jE,dJ),e(dJ,i4r),e(jE,d4r),e(dn,c4r),e(dn,DE),e(DE,JFe),e(JFe,f4r),e(DE,m4r),e(DE,cJ),e(cJ,g4r),e(DE,h4r),e(dn,p4r),e(dn,GE),e(GE,YFe),e(YFe,_4r),e(GE,u4r),e(GE,fJ),e(fJ,b4r),e(GE,v4r),e(kr,F4r),M(OE,kr,null),b(f,RVe,u),b(f,gc,u),e(gc,VE),e(VE,KFe),M(V8,KFe,null),e(gc,T4r),e(gc,ZFe),e(ZFe,M4r),b(f,PVe,u),b(f,ar,u),M(X8,ar,null),e(ar,E4r),e(ar,hc),e(hc,C4r),e(hc,mJ),e(mJ,w4r),e(hc,A4r),e(hc,gJ),e(gJ,L4r),e(hc,y4r),e(ar,x4r),e(ar,z8),e(z8,$4r),e(z8,eTe),e(eTe,k4r),e(z8,S4r),e(ar,R4r),e(ar,Pt),M(Q8,Pt,null),e(Pt,P4r),e(Pt,oTe),e(oTe,B4r),e(Pt,N4r),e(Pt,pc),e(pc,I4r),e(pc,rTe),e(rTe,q4r),e(pc,j4r),e(pc,hJ),e(hJ,D4r),e(pc,G4r),e(Pt,O4r),M(XE,Pt,null),e(ar,V4r),e(ar,Sr),M(W8,Sr,null),e(Sr,X4r),e(Sr,tTe),e(tTe,z4r),e(Sr,Q4r),e(Sr,cn),e(cn,W4r),e(cn,aTe),e(aTe,H4r),e(cn,U4r),e(cn,nTe),e(nTe,J4r),e(cn,Y4r),e(cn,sTe),e(sTe,K4r),e(cn,Z4r),e(Sr,eCr),e(Sr,ie),e(ie,zE),e(zE,lTe),e(lTe,oCr),e(zE,rCr),e(zE,pJ),e(pJ,tCr),e(zE,aCr),e(ie,nCr),e(ie,QE),e(QE,iTe),e(iTe,sCr),e(QE,lCr),e(QE,_J),e(_J,iCr),e(QE,dCr),e(ie,cCr),e(ie,WE),e(WE,dTe),e(dTe,fCr),e(WE,mCr),e(WE,uJ),e(uJ,gCr),e(WE,hCr),e(ie,pCr),e(ie,HE),e(HE,cTe),e(cTe,_Cr),e(HE,uCr),e(HE,bJ),e(bJ,bCr),e(HE,vCr),e(ie,FCr),e(ie,UE),e(UE,fTe),e(fTe,TCr),e(UE,MCr),e(UE,vJ),e(vJ,ECr),e(UE,CCr),e(ie,wCr),e(ie,JE),e(JE,mTe),e(mTe,ACr),e(JE,LCr),e(JE,FJ),e(FJ,yCr),e(JE,xCr),e(ie,$Cr),e(ie,YE),e(YE,gTe),e(gTe,kCr),e(YE,SCr),e(YE,TJ),e(TJ,RCr),e(YE,PCr),e(ie,BCr),e(ie,KE),e(KE,hTe),e(hTe,NCr),e(KE,ICr),e(KE,MJ),e(MJ,qCr),e(KE,jCr),e(ie,DCr),e(ie,ZE),e(ZE,pTe),e(pTe,GCr),e(ZE,OCr),e(ZE,EJ),e(EJ,VCr),e(ZE,XCr),e(ie,zCr),e(ie,e4),e(e4,_Te),e(_Te,QCr),e(e4,WCr),e(e4,CJ),e(CJ,HCr),e(e4,UCr),e(ie,JCr),e(ie,o4),e(o4,uTe),e(uTe,YCr),e(o4,KCr),e(o4,wJ),e(wJ,ZCr),e(o4,e5r),e(ie,o5r),e(ie,r4),e(r4,bTe),e(bTe,r5r),e(r4,t5r),e(r4,AJ),e(AJ,a5r),e(r4,n5r),e(ie,s5r),e(ie,t4),e(t4,vTe),e(vTe,l5r),e(t4,i5r),e(t4,LJ),e(LJ,d5r),e(t4,c5r),e(ie,f5r),e(ie,a4),e(a4,FTe),e(FTe,m5r),e(a4,g5r),e(a4,yJ),e(yJ,h5r),e(a4,p5r),e(ie,_5r),e(ie,n4),e(n4,TTe),e(TTe,u5r),e(n4,b5r),e(n4,xJ),e(xJ,v5r),e(n4,F5r),e(ie,T5r),e(ie,s4),e(s4,MTe),e(MTe,M5r),e(s4,E5r),e(s4,$J),e($J,C5r),e(s4,w5r),e(ie,A5r),e(ie,l4),e(l4,ETe),e(ETe,L5r),e(l4,y5r),e(l4,kJ),e(kJ,x5r),e(l4,$5r),e(ie,k5r),e(ie,i4),e(i4,CTe),e(CTe,S5r),e(i4,R5r),e(i4,SJ),e(SJ,P5r),e(i4,B5r),e(ie,N5r),e(ie,d4),e(d4,wTe),e(wTe,I5r),e(d4,q5r),e(d4,RJ),e(RJ,j5r),e(d4,D5r),e(ie,G5r),e(ie,c4),e(c4,ATe),e(ATe,O5r),e(c4,V5r),e(c4,PJ),e(PJ,X5r),e(c4,z5r),e(Sr,Q5r),M(f4,Sr,null),b(f,BVe,u),b(f,_c,u),e(_c,m4),e(m4,LTe),M(H8,LTe,null),e(_c,W5r),e(_c,yTe),e(yTe,H5r),b(f,NVe,u),b(f,nr,u),M(U8,nr,null),e(nr,U5r),e(nr,uc),e(uc,J5r),e(uc,BJ),e(BJ,Y5r),e(uc,K5r),e(uc,NJ),e(NJ,Z5r),e(uc,e3r),e(nr,o3r),e(nr,J8),e(J8,r3r),e(J8,xTe),e(xTe,t3r),e(J8,a3r),e(nr,n3r),e(nr,Bt),M(Y8,Bt,null),e(Bt,s3r),e(Bt,$Te),e($Te,l3r),e(Bt,i3r),e(Bt,bc),e(bc,d3r),e(bc,kTe),e(kTe,c3r),e(bc,f3r),e(bc,IJ),e(IJ,m3r),e(bc,g3r),e(Bt,h3r),M(g4,Bt,null),e(nr,p3r),e(nr,Rr),M(K8,Rr,null),e(Rr,_3r),e(Rr,STe),e(STe,u3r),e(Rr,b3r),e(Rr,fn),e(fn,v3r),e(fn,RTe),e(RTe,F3r),e(fn,T3r),e(fn,PTe),e(PTe,M3r),e(fn,E3r),e(fn,BTe),e(BTe,C3r),e(fn,w3r),e(Rr,A3r),e(Rr,ye),e(ye,h4),e(h4,NTe),e(NTe,L3r),e(h4,y3r),e(h4,qJ),e(qJ,x3r),e(h4,$3r),e(ye,k3r),e(ye,p4),e(p4,ITe),e(ITe,S3r),e(p4,R3r),e(p4,jJ),e(jJ,P3r),e(p4,B3r),e(ye,N3r),e(ye,_4),e(_4,qTe),e(qTe,I3r),e(_4,q3r),e(_4,DJ),e(DJ,j3r),e(_4,D3r),e(ye,G3r),e(ye,u4),e(u4,jTe),e(jTe,O3r),e(u4,V3r),e(u4,GJ),e(GJ,X3r),e(u4,z3r),e(ye,Q3r),e(ye,b4),e(b4,DTe),e(DTe,W3r),e(b4,H3r),e(b4,OJ),e(OJ,U3r),e(b4,J3r),e(ye,Y3r),e(ye,v4),e(v4,GTe),e(GTe,K3r),e(v4,Z3r),e(v4,VJ),e(VJ,e0r),e(v4,o0r),e(ye,r0r),e(ye,F4),e(F4,OTe),e(OTe,t0r),e(F4,a0r),e(F4,XJ),e(XJ,n0r),e(F4,s0r),e(ye,l0r),e(ye,T4),e(T4,VTe),e(VTe,i0r),e(T4,d0r),e(T4,zJ),e(zJ,c0r),e(T4,f0r),e(ye,m0r),e(ye,M4),e(M4,XTe),e(XTe,g0r),e(M4,h0r),e(M4,QJ),e(QJ,p0r),e(M4,_0r),e(ye,u0r),e(ye,E4),e(E4,zTe),e(zTe,b0r),e(E4,v0r),e(E4,WJ),e(WJ,F0r),e(E4,T0r),e(Rr,M0r),M(C4,Rr,null),b(f,IVe,u),b(f,vc,u),e(vc,w4),e(w4,QTe),M(Z8,QTe,null),e(vc,E0r),e(vc,WTe),e(WTe,C0r),b(f,qVe,u),b(f,sr,u),M(ex,sr,null),e(sr,w0r),e(sr,Fc),e(Fc,A0r),e(Fc,HJ),e(HJ,L0r),e(Fc,y0r),e(Fc,UJ),e(UJ,x0r),e(Fc,$0r),e(sr,k0r),e(sr,ox),e(ox,S0r),e(ox,HTe),e(HTe,R0r),e(ox,P0r),e(sr,B0r),e(sr,Nt),M(rx,Nt,null),e(Nt,N0r),e(Nt,UTe),e(UTe,I0r),e(Nt,q0r),e(Nt,Tc),e(Tc,j0r),e(Tc,JTe),e(JTe,D0r),e(Tc,G0r),e(Tc,JJ),e(JJ,O0r),e(Tc,V0r),e(Nt,X0r),M(A4,Nt,null),e(sr,z0r),e(sr,Pr),M(tx,Pr,null),e(Pr,Q0r),e(Pr,YTe),e(YTe,W0r),e(Pr,H0r),e(Pr,mn),e(mn,U0r),e(mn,KTe),e(KTe,J0r),e(mn,Y0r),e(mn,ZTe),e(ZTe,K0r),e(mn,Z0r),e(mn,eMe),e(eMe,ewr),e(mn,owr),e(Pr,rwr),e(Pr,te),e(te,L4),e(L4,oMe),e(oMe,twr),e(L4,awr),e(L4,YJ),e(YJ,nwr),e(L4,swr),e(te,lwr),e(te,y4),e(y4,rMe),e(rMe,iwr),e(y4,dwr),e(y4,KJ),e(KJ,cwr),e(y4,fwr),e(te,mwr),e(te,x4),e(x4,tMe),e(tMe,gwr),e(x4,hwr),e(x4,ZJ),e(ZJ,pwr),e(x4,_wr),e(te,uwr),e(te,$4),e($4,aMe),e(aMe,bwr),e($4,vwr),e($4,eY),e(eY,Fwr),e($4,Twr),e(te,Mwr),e(te,k4),e(k4,nMe),e(nMe,Ewr),e(k4,Cwr),e(k4,oY),e(oY,wwr),e(k4,Awr),e(te,Lwr),e(te,S4),e(S4,sMe),e(sMe,ywr),e(S4,xwr),e(S4,rY),e(rY,$wr),e(S4,kwr),e(te,Swr),e(te,R4),e(R4,lMe),e(lMe,Rwr),e(R4,Pwr),e(R4,tY),e(tY,Bwr),e(R4,Nwr),e(te,Iwr),e(te,P4),e(P4,iMe),e(iMe,qwr),e(P4,jwr),e(P4,aY),e(aY,Dwr),e(P4,Gwr),e(te,Owr),e(te,B4),e(B4,dMe),e(dMe,Vwr),e(B4,Xwr),e(B4,nY),e(nY,zwr),e(B4,Qwr),e(te,Wwr),e(te,N4),e(N4,cMe),e(cMe,Hwr),e(N4,Uwr),e(N4,sY),e(sY,Jwr),e(N4,Ywr),e(te,Kwr),e(te,I4),e(I4,fMe),e(fMe,Zwr),e(I4,eAr),e(I4,lY),e(lY,oAr),e(I4,rAr),e(te,tAr),e(te,q4),e(q4,mMe),e(mMe,aAr),e(q4,nAr),e(q4,iY),e(iY,sAr),e(q4,lAr),e(te,iAr),e(te,j4),e(j4,gMe),e(gMe,dAr),e(j4,cAr),e(j4,dY),e(dY,fAr),e(j4,mAr),e(te,gAr),e(te,D4),e(D4,hMe),e(hMe,hAr),e(D4,pAr),e(D4,cY),e(cY,_Ar),e(D4,uAr),e(te,bAr),e(te,G4),e(G4,pMe),e(pMe,vAr),e(G4,FAr),e(G4,fY),e(fY,TAr),e(G4,MAr),e(te,EAr),e(te,O4),e(O4,_Me),e(_Me,CAr),e(O4,wAr),e(O4,mY),e(mY,AAr),e(O4,LAr),e(te,yAr),e(te,V4),e(V4,uMe),e(uMe,xAr),e(V4,$Ar),e(V4,gY),e(gY,kAr),e(V4,SAr),e(te,RAr),e(te,X4),e(X4,bMe),e(bMe,PAr),e(X4,BAr),e(X4,hY),e(hY,NAr),e(X4,IAr),e(te,qAr),e(te,z4),e(z4,vMe),e(vMe,jAr),e(z4,DAr),e(z4,pY),e(pY,GAr),e(z4,OAr),e(te,VAr),e(te,Q4),e(Q4,FMe),e(FMe,XAr),e(Q4,zAr),e(Q4,_Y),e(_Y,QAr),e(Q4,WAr),e(te,HAr),e(te,W4),e(W4,TMe),e(TMe,UAr),e(W4,JAr),e(W4,uY),e(uY,YAr),e(W4,KAr),e(te,ZAr),e(te,H4),e(H4,MMe),e(MMe,e6r),e(H4,o6r),e(H4,bY),e(bY,r6r),e(H4,t6r),e(te,a6r),e(te,U4),e(U4,EMe),e(EMe,n6r),e(U4,s6r),e(U4,vY),e(vY,l6r),e(U4,i6r),e(te,d6r),e(te,J4),e(J4,CMe),e(CMe,c6r),e(J4,f6r),e(J4,FY),e(FY,m6r),e(J4,g6r),e(te,h6r),e(te,Y4),e(Y4,wMe),e(wMe,p6r),e(Y4,_6r),e(Y4,TY),e(TY,u6r),e(Y4,b6r),e(te,v6r),e(te,K4),e(K4,AMe),e(AMe,F6r),e(K4,T6r),e(K4,MY),e(MY,M6r),e(K4,E6r),e(Pr,C6r),M(Z4,Pr,null),b(f,jVe,u),b(f,Mc,u),e(Mc,eC),e(eC,LMe),M(ax,LMe,null),e(Mc,w6r),e(Mc,yMe),e(yMe,A6r),b(f,DVe,u),b(f,lr,u),M(nx,lr,null),e(lr,L6r),e(lr,Ec),e(Ec,y6r),e(Ec,EY),e(EY,x6r),e(Ec,$6r),e(Ec,CY),e(CY,k6r),e(Ec,S6r),e(lr,R6r),e(lr,sx),e(sx,P6r),e(sx,xMe),e(xMe,B6r),e(sx,N6r),e(lr,I6r),e(lr,It),M(lx,It,null),e(It,q6r),e(It,$Me),e($Me,j6r),e(It,D6r),e(It,Cc),e(Cc,G6r),e(Cc,kMe),e(kMe,O6r),e(Cc,V6r),e(Cc,wY),e(wY,X6r),e(Cc,z6r),e(It,Q6r),M(oC,It,null),e(lr,W6r),e(lr,Br),M(ix,Br,null),e(Br,H6r),e(Br,SMe),e(SMe,U6r),e(Br,J6r),e(Br,gn),e(gn,Y6r),e(gn,RMe),e(RMe,K6r),e(gn,Z6r),e(gn,PMe),e(PMe,eLr),e(gn,oLr),e(gn,BMe),e(BMe,rLr),e(gn,tLr),e(Br,aLr),e(Br,_e),e(_e,rC),e(rC,NMe),e(NMe,nLr),e(rC,sLr),e(rC,AY),e(AY,lLr),e(rC,iLr),e(_e,dLr),e(_e,tC),e(tC,IMe),e(IMe,cLr),e(tC,fLr),e(tC,LY),e(LY,mLr),e(tC,gLr),e(_e,hLr),e(_e,aC),e(aC,qMe),e(qMe,pLr),e(aC,_Lr),e(aC,yY),e(yY,uLr),e(aC,bLr),e(_e,vLr),e(_e,nC),e(nC,jMe),e(jMe,FLr),e(nC,TLr),e(nC,xY),e(xY,MLr),e(nC,ELr),e(_e,CLr),e(_e,sC),e(sC,DMe),e(DMe,wLr),e(sC,ALr),e(sC,$Y),e($Y,LLr),e(sC,yLr),e(_e,xLr),e(_e,lC),e(lC,GMe),e(GMe,$Lr),e(lC,kLr),e(lC,kY),e(kY,SLr),e(lC,RLr),e(_e,PLr),e(_e,iC),e(iC,OMe),e(OMe,BLr),e(iC,NLr),e(iC,SY),e(SY,ILr),e(iC,qLr),e(_e,jLr),e(_e,dC),e(dC,VMe),e(VMe,DLr),e(dC,GLr),e(dC,RY),e(RY,OLr),e(dC,VLr),e(_e,XLr),e(_e,cC),e(cC,XMe),e(XMe,zLr),e(cC,QLr),e(cC,PY),e(PY,WLr),e(cC,HLr),e(_e,ULr),e(_e,fC),e(fC,zMe),e(zMe,JLr),e(fC,YLr),e(fC,BY),e(BY,KLr),e(fC,ZLr),e(_e,eyr),e(_e,mC),e(mC,QMe),e(QMe,oyr),e(mC,ryr),e(mC,NY),e(NY,tyr),e(mC,ayr),e(_e,nyr),e(_e,gC),e(gC,WMe),e(WMe,syr),e(gC,lyr),e(gC,IY),e(IY,iyr),e(gC,dyr),e(_e,cyr),e(_e,hC),e(hC,HMe),e(HMe,fyr),e(hC,myr),e(hC,qY),e(qY,gyr),e(hC,hyr),e(_e,pyr),e(_e,pC),e(pC,UMe),e(UMe,_yr),e(pC,uyr),e(pC,jY),e(jY,byr),e(pC,vyr),e(_e,Fyr),e(_e,_C),e(_C,JMe),e(JMe,Tyr),e(_C,Myr),e(_C,DY),e(DY,Eyr),e(_C,Cyr),e(_e,wyr),e(_e,uC),e(uC,YMe),e(YMe,Ayr),e(uC,Lyr),e(uC,GY),e(GY,yyr),e(uC,xyr),e(_e,$yr),e(_e,bC),e(bC,KMe),e(KMe,kyr),e(bC,Syr),e(bC,OY),e(OY,Ryr),e(bC,Pyr),e(Br,Byr),M(vC,Br,null),b(f,GVe,u),b(f,wc,u),e(wc,FC),e(FC,ZMe),M(dx,ZMe,null),e(wc,Nyr),e(wc,eEe),e(eEe,Iyr),b(f,OVe,u),b(f,ir,u),M(cx,ir,null),e(ir,qyr),e(ir,Ac),e(Ac,jyr),e(Ac,VY),e(VY,Dyr),e(Ac,Gyr),e(Ac,XY),e(XY,Oyr),e(Ac,Vyr),e(ir,Xyr),e(ir,fx),e(fx,zyr),e(fx,oEe),e(oEe,Qyr),e(fx,Wyr),e(ir,Hyr),e(ir,qt),M(mx,qt,null),e(qt,Uyr),e(qt,rEe),e(rEe,Jyr),e(qt,Yyr),e(qt,Lc),e(Lc,Kyr),e(Lc,tEe),e(tEe,Zyr),e(Lc,e8r),e(Lc,zY),e(zY,o8r),e(Lc,r8r),e(qt,t8r),M(TC,qt,null),e(ir,a8r),e(ir,Nr),M(gx,Nr,null),e(Nr,n8r),e(Nr,aEe),e(aEe,s8r),e(Nr,l8r),e(Nr,hn),e(hn,i8r),e(hn,nEe),e(nEe,d8r),e(hn,c8r),e(hn,sEe),e(sEe,f8r),e(hn,m8r),e(hn,lEe),e(lEe,g8r),e(hn,h8r),e(Nr,p8r),e(Nr,hx),e(hx,MC),e(MC,iEe),e(iEe,_8r),e(MC,u8r),e(MC,QY),e(QY,b8r),e(MC,v8r),e(hx,F8r),e(hx,EC),e(EC,dEe),e(dEe,T8r),e(EC,M8r),e(EC,WY),e(WY,E8r),e(EC,C8r),e(Nr,w8r),M(CC,Nr,null),b(f,VVe,u),b(f,yc,u),e(yc,wC),e(wC,cEe),M(px,cEe,null),e(yc,A8r),e(yc,fEe),e(fEe,L8r),b(f,XVe,u),b(f,dr,u),M(_x,dr,null),e(dr,y8r),e(dr,xc),e(xc,x8r),e(xc,HY),e(HY,$8r),e(xc,k8r),e(xc,UY),e(UY,S8r),e(xc,R8r),e(dr,P8r),e(dr,ux),e(ux,B8r),e(ux,mEe),e(mEe,N8r),e(ux,I8r),e(dr,q8r),e(dr,jt),M(bx,jt,null),e(jt,j8r),e(jt,gEe),e(gEe,D8r),e(jt,G8r),e(jt,$c),e($c,O8r),e($c,hEe),e(hEe,V8r),e($c,X8r),e($c,JY),e(JY,z8r),e($c,Q8r),e(jt,W8r),M(AC,jt,null),e(dr,H8r),e(dr,Ir),M(vx,Ir,null),e(Ir,U8r),e(Ir,pEe),e(pEe,J8r),e(Ir,Y8r),e(Ir,pn),e(pn,K8r),e(pn,_Ee),e(_Ee,Z8r),e(pn,exr),e(pn,uEe),e(uEe,oxr),e(pn,rxr),e(pn,bEe),e(bEe,txr),e(pn,axr),e(Ir,nxr),e(Ir,vEe),e(vEe,LC),e(LC,FEe),e(FEe,sxr),e(LC,lxr),e(LC,YY),e(YY,ixr),e(LC,dxr),e(Ir,cxr),M(yC,Ir,null),b(f,zVe,u),b(f,kc,u),e(kc,xC),e(xC,TEe),M(Fx,TEe,null),e(kc,fxr),e(kc,MEe),e(MEe,mxr),b(f,QVe,u),b(f,cr,u),M(Tx,cr,null),e(cr,gxr),e(cr,Sc),e(Sc,hxr),e(Sc,KY),e(KY,pxr),e(Sc,_xr),e(Sc,ZY),e(ZY,uxr),e(Sc,bxr),e(cr,vxr),e(cr,Mx),e(Mx,Fxr),e(Mx,EEe),e(EEe,Txr),e(Mx,Mxr),e(cr,Exr),e(cr,Dt),M(Ex,Dt,null),e(Dt,Cxr),e(Dt,CEe),e(CEe,wxr),e(Dt,Axr),e(Dt,Rc),e(Rc,Lxr),e(Rc,wEe),e(wEe,yxr),e(Rc,xxr),e(Rc,eK),e(eK,$xr),e(Rc,kxr),e(Dt,Sxr),M($C,Dt,null),e(cr,Rxr),e(cr,qr),M(Cx,qr,null),e(qr,Pxr),e(qr,AEe),e(AEe,Bxr),e(qr,Nxr),e(qr,_n),e(_n,Ixr),e(_n,LEe),e(LEe,qxr),e(_n,jxr),e(_n,yEe),e(yEe,Dxr),e(_n,Gxr),e(_n,xEe),e(xEe,Oxr),e(_n,Vxr),e(qr,Xxr),e(qr,de),e(de,kC),e(kC,$Ee),e($Ee,zxr),e(kC,Qxr),e(kC,oK),e(oK,Wxr),e(kC,Hxr),e(de,Uxr),e(de,SC),e(SC,kEe),e(kEe,Jxr),e(SC,Yxr),e(SC,rK),e(rK,Kxr),e(SC,Zxr),e(de,e$r),e(de,RC),e(RC,SEe),e(SEe,o$r),e(RC,r$r),e(RC,tK),e(tK,t$r),e(RC,a$r),e(de,n$r),e(de,PC),e(PC,REe),e(REe,s$r),e(PC,l$r),e(PC,aK),e(aK,i$r),e(PC,d$r),e(de,c$r),e(de,BC),e(BC,PEe),e(PEe,f$r),e(BC,m$r),e(BC,nK),e(nK,g$r),e(BC,h$r),e(de,p$r),e(de,NC),e(NC,BEe),e(BEe,_$r),e(NC,u$r),e(NC,sK),e(sK,b$r),e(NC,v$r),e(de,F$r),e(de,IC),e(IC,NEe),e(NEe,T$r),e(IC,M$r),e(IC,lK),e(lK,E$r),e(IC,C$r),e(de,w$r),e(de,qC),e(qC,IEe),e(IEe,A$r),e(qC,L$r),e(qC,iK),e(iK,y$r),e(qC,x$r),e(de,$$r),e(de,jC),e(jC,qEe),e(qEe,k$r),e(jC,S$r),e(jC,dK),e(dK,R$r),e(jC,P$r),e(de,B$r),e(de,DC),e(DC,jEe),e(jEe,N$r),e(DC,I$r),e(DC,cK),e(cK,q$r),e(DC,j$r),e(de,D$r),e(de,GC),e(GC,DEe),e(DEe,G$r),e(GC,O$r),e(GC,fK),e(fK,V$r),e(GC,X$r),e(de,z$r),e(de,OC),e(OC,GEe),e(GEe,Q$r),e(OC,W$r),e(OC,mK),e(mK,H$r),e(OC,U$r),e(de,J$r),e(de,VC),e(VC,OEe),e(OEe,Y$r),e(VC,K$r),e(VC,gK),e(gK,Z$r),e(VC,ekr),e(de,okr),e(de,XC),e(XC,VEe),e(VEe,rkr),e(XC,tkr),e(XC,hK),e(hK,akr),e(XC,nkr),e(de,skr),e(de,zC),e(zC,XEe),e(XEe,lkr),e(zC,ikr),e(zC,pK),e(pK,dkr),e(zC,ckr),e(de,fkr),e(de,QC),e(QC,zEe),e(zEe,mkr),e(QC,gkr),e(QC,_K),e(_K,hkr),e(QC,pkr),e(de,_kr),e(de,WC),e(WC,QEe),e(QEe,ukr),e(WC,bkr),e(WC,uK),e(uK,vkr),e(WC,Fkr),e(de,Tkr),e(de,HC),e(HC,WEe),e(WEe,Mkr),e(HC,Ekr),e(HC,bK),e(bK,Ckr),e(HC,wkr),e(de,Akr),e(de,UC),e(UC,HEe),e(HEe,Lkr),e(UC,ykr),e(UC,vK),e(vK,xkr),e(UC,$kr),e(de,kkr),e(de,JC),e(JC,UEe),e(UEe,Skr),e(JC,Rkr),e(JC,FK),e(FK,Pkr),e(JC,Bkr),e(qr,Nkr),M(YC,qr,null),b(f,WVe,u),b(f,Pc,u),e(Pc,KC),e(KC,JEe),M(wx,JEe,null),e(Pc,Ikr),e(Pc,YEe),e(YEe,qkr),b(f,HVe,u),b(f,fr,u),M(Ax,fr,null),e(fr,jkr),e(fr,Bc),e(Bc,Dkr),e(Bc,TK),e(TK,Gkr),e(Bc,Okr),e(Bc,MK),e(MK,Vkr),e(Bc,Xkr),e(fr,zkr),e(fr,Lx),e(Lx,Qkr),e(Lx,KEe),e(KEe,Wkr),e(Lx,Hkr),e(fr,Ukr),e(fr,Gt),M(yx,Gt,null),e(Gt,Jkr),e(Gt,ZEe),e(ZEe,Ykr),e(Gt,Kkr),e(Gt,Nc),e(Nc,Zkr),e(Nc,e4e),e(e4e,eSr),e(Nc,oSr),e(Nc,EK),e(EK,rSr),e(Nc,tSr),e(Gt,aSr),M(ZC,Gt,null),e(fr,nSr),e(fr,jr),M(xx,jr,null),e(jr,sSr),e(jr,o4e),e(o4e,lSr),e(jr,iSr),e(jr,un),e(un,dSr),e(un,r4e),e(r4e,cSr),e(un,fSr),e(un,t4e),e(t4e,mSr),e(un,gSr),e(un,a4e),e(a4e,hSr),e(un,pSr),e(jr,_Sr),e(jr,ce),e(ce,e5),e(e5,n4e),e(n4e,uSr),e(e5,bSr),e(e5,CK),e(CK,vSr),e(e5,FSr),e(ce,TSr),e(ce,o5),e(o5,s4e),e(s4e,MSr),e(o5,ESr),e(o5,wK),e(wK,CSr),e(o5,wSr),e(ce,ASr),e(ce,r5),e(r5,l4e),e(l4e,LSr),e(r5,ySr),e(r5,AK),e(AK,xSr),e(r5,$Sr),e(ce,kSr),e(ce,t5),e(t5,i4e),e(i4e,SSr),e(t5,RSr),e(t5,LK),e(LK,PSr),e(t5,BSr),e(ce,NSr),e(ce,a5),e(a5,d4e),e(d4e,ISr),e(a5,qSr),e(a5,yK),e(yK,jSr),e(a5,DSr),e(ce,GSr),e(ce,n5),e(n5,c4e),e(c4e,OSr),e(n5,VSr),e(n5,xK),e(xK,XSr),e(n5,zSr),e(ce,QSr),e(ce,s5),e(s5,f4e),e(f4e,WSr),e(s5,HSr),e(s5,$K),e($K,USr),e(s5,JSr),e(ce,YSr),e(ce,l5),e(l5,m4e),e(m4e,KSr),e(l5,ZSr),e(l5,kK),e(kK,eRr),e(l5,oRr),e(ce,rRr),e(ce,i5),e(i5,g4e),e(g4e,tRr),e(i5,aRr),e(i5,SK),e(SK,nRr),e(i5,sRr),e(ce,lRr),e(ce,d5),e(d5,h4e),e(h4e,iRr),e(d5,dRr),e(d5,RK),e(RK,cRr),e(d5,fRr),e(ce,mRr),e(ce,c5),e(c5,p4e),e(p4e,gRr),e(c5,hRr),e(c5,PK),e(PK,pRr),e(c5,_Rr),e(ce,uRr),e(ce,f5),e(f5,_4e),e(_4e,bRr),e(f5,vRr),e(f5,BK),e(BK,FRr),e(f5,TRr),e(ce,MRr),e(ce,m5),e(m5,u4e),e(u4e,ERr),e(m5,CRr),e(m5,NK),e(NK,wRr),e(m5,ARr),e(ce,LRr),e(ce,g5),e(g5,b4e),e(b4e,yRr),e(g5,xRr),e(g5,IK),e(IK,$Rr),e(g5,kRr),e(ce,SRr),e(ce,h5),e(h5,v4e),e(v4e,RRr),e(h5,PRr),e(h5,qK),e(qK,BRr),e(h5,NRr),e(ce,IRr),e(ce,p5),e(p5,F4e),e(F4e,qRr),e(p5,jRr),e(p5,jK),e(jK,DRr),e(p5,GRr),e(ce,ORr),e(ce,_5),e(_5,T4e),e(T4e,VRr),e(_5,XRr),e(_5,DK),e(DK,zRr),e(_5,QRr),e(ce,WRr),e(ce,u5),e(u5,M4e),e(M4e,HRr),e(u5,URr),e(u5,GK),e(GK,JRr),e(u5,YRr),e(ce,KRr),e(ce,b5),e(b5,E4e),e(E4e,ZRr),e(b5,ePr),e(b5,OK),e(OK,oPr),e(b5,rPr),e(ce,tPr),e(ce,v5),e(v5,C4e),e(C4e,aPr),e(v5,nPr),e(v5,VK),e(VK,sPr),e(v5,lPr),e(jr,iPr),M(F5,jr,null),b(f,UVe,u),b(f,Ic,u),e(Ic,T5),e(T5,w4e),M($x,w4e,null),e(Ic,dPr),e(Ic,A4e),e(A4e,cPr),b(f,JVe,u),b(f,mr,u),M(kx,mr,null),e(mr,fPr),e(mr,qc),e(qc,mPr),e(qc,XK),e(XK,gPr),e(qc,hPr),e(qc,zK),e(zK,pPr),e(qc,_Pr),e(mr,uPr),e(mr,Sx),e(Sx,bPr),e(Sx,L4e),e(L4e,vPr),e(Sx,FPr),e(mr,TPr),e(mr,Ot),M(Rx,Ot,null),e(Ot,MPr),e(Ot,y4e),e(y4e,EPr),e(Ot,CPr),e(Ot,jc),e(jc,wPr),e(jc,x4e),e(x4e,APr),e(jc,LPr),e(jc,QK),e(QK,yPr),e(jc,xPr),e(Ot,$Pr),M(M5,Ot,null),e(mr,kPr),e(mr,Dr),M(Px,Dr,null),e(Dr,SPr),e(Dr,$4e),e($4e,RPr),e(Dr,PPr),e(Dr,bn),e(bn,BPr),e(bn,k4e),e(k4e,NPr),e(bn,IPr),e(bn,S4e),e(S4e,qPr),e(bn,jPr),e(bn,R4e),e(R4e,DPr),e(bn,GPr),e(Dr,OPr),e(Dr,P4e),e(P4e,E5),e(E5,B4e),e(B4e,VPr),e(E5,XPr),e(E5,WK),e(WK,zPr),e(E5,QPr),e(Dr,WPr),M(C5,Dr,null),b(f,YVe,u),b(f,Dc,u),e(Dc,w5),e(w5,N4e),M(Bx,N4e,null),e(Dc,HPr),e(Dc,I4e),e(I4e,UPr),b(f,KVe,u),b(f,gr,u),M(Nx,gr,null),e(gr,JPr),e(gr,Gc),e(Gc,YPr),e(Gc,HK),e(HK,KPr),e(Gc,ZPr),e(Gc,UK),e(UK,eBr),e(Gc,oBr),e(gr,rBr),e(gr,Ix),e(Ix,tBr),e(Ix,q4e),e(q4e,aBr),e(Ix,nBr),e(gr,sBr),e(gr,Vt),M(qx,Vt,null),e(Vt,lBr),e(Vt,j4e),e(j4e,iBr),e(Vt,dBr),e(Vt,Oc),e(Oc,cBr),e(Oc,D4e),e(D4e,fBr),e(Oc,mBr),e(Oc,JK),e(JK,gBr),e(Oc,hBr),e(Vt,pBr),M(A5,Vt,null),e(gr,_Br),e(gr,Gr),M(jx,Gr,null),e(Gr,uBr),e(Gr,G4e),e(G4e,bBr),e(Gr,vBr),e(Gr,vn),e(vn,FBr),e(vn,O4e),e(O4e,TBr),e(vn,MBr),e(vn,V4e),e(V4e,EBr),e(vn,CBr),e(vn,X4e),e(X4e,wBr),e(vn,ABr),e(Gr,LBr),e(Gr,z4e),e(z4e,L5),e(L5,Q4e),e(Q4e,yBr),e(L5,xBr),e(L5,YK),e(YK,$Br),e(L5,kBr),e(Gr,SBr),M(y5,Gr,null),b(f,ZVe,u),b(f,Vc,u),e(Vc,x5),e(x5,W4e),M(Dx,W4e,null),e(Vc,RBr),e(Vc,H4e),e(H4e,PBr),b(f,eXe,u),b(f,hr,u),M(Gx,hr,null),e(hr,BBr),e(hr,Xc),e(Xc,NBr),e(Xc,KK),e(KK,IBr),e(Xc,qBr),e(Xc,ZK),e(ZK,jBr),e(Xc,DBr),e(hr,GBr),e(hr,Ox),e(Ox,OBr),e(Ox,U4e),e(U4e,VBr),e(Ox,XBr),e(hr,zBr),e(hr,Xt),M(Vx,Xt,null),e(Xt,QBr),e(Xt,J4e),e(J4e,WBr),e(Xt,HBr),e(Xt,zc),e(zc,UBr),e(zc,Y4e),e(Y4e,JBr),e(zc,YBr),e(zc,eZ),e(eZ,KBr),e(zc,ZBr),e(Xt,eNr),M($5,Xt,null),e(hr,oNr),e(hr,Or),M(Xx,Or,null),e(Or,rNr),e(Or,K4e),e(K4e,tNr),e(Or,aNr),e(Or,Fn),e(Fn,nNr),e(Fn,Z4e),e(Z4e,sNr),e(Fn,lNr),e(Fn,eCe),e(eCe,iNr),e(Fn,dNr),e(Fn,oCe),e(oCe,cNr),e(Fn,fNr),e(Or,mNr),e(Or,oe),e(oe,k5),e(k5,rCe),e(rCe,gNr),e(k5,hNr),e(k5,oZ),e(oZ,pNr),e(k5,_Nr),e(oe,uNr),e(oe,S5),e(S5,tCe),e(tCe,bNr),e(S5,vNr),e(S5,rZ),e(rZ,FNr),e(S5,TNr),e(oe,MNr),e(oe,R5),e(R5,aCe),e(aCe,ENr),e(R5,CNr),e(R5,tZ),e(tZ,wNr),e(R5,ANr),e(oe,LNr),e(oe,P5),e(P5,nCe),e(nCe,yNr),e(P5,xNr),e(P5,aZ),e(aZ,$Nr),e(P5,kNr),e(oe,SNr),e(oe,B5),e(B5,sCe),e(sCe,RNr),e(B5,PNr),e(B5,nZ),e(nZ,BNr),e(B5,NNr),e(oe,INr),e(oe,N5),e(N5,lCe),e(lCe,qNr),e(N5,jNr),e(N5,sZ),e(sZ,DNr),e(N5,GNr),e(oe,ONr),e(oe,I5),e(I5,iCe),e(iCe,VNr),e(I5,XNr),e(I5,lZ),e(lZ,zNr),e(I5,QNr),e(oe,WNr),e(oe,q5),e(q5,dCe),e(dCe,HNr),e(q5,UNr),e(q5,iZ),e(iZ,JNr),e(q5,YNr),e(oe,KNr),e(oe,j5),e(j5,cCe),e(cCe,ZNr),e(j5,eIr),e(j5,dZ),e(dZ,oIr),e(j5,rIr),e(oe,tIr),e(oe,D5),e(D5,fCe),e(fCe,aIr),e(D5,nIr),e(D5,cZ),e(cZ,sIr),e(D5,lIr),e(oe,iIr),e(oe,G5),e(G5,mCe),e(mCe,dIr),e(G5,cIr),e(G5,fZ),e(fZ,fIr),e(G5,mIr),e(oe,gIr),e(oe,O5),e(O5,gCe),e(gCe,hIr),e(O5,pIr),e(O5,mZ),e(mZ,_Ir),e(O5,uIr),e(oe,bIr),e(oe,V5),e(V5,hCe),e(hCe,vIr),e(V5,FIr),e(V5,gZ),e(gZ,TIr),e(V5,MIr),e(oe,EIr),e(oe,X5),e(X5,pCe),e(pCe,CIr),e(X5,wIr),e(X5,hZ),e(hZ,AIr),e(X5,LIr),e(oe,yIr),e(oe,z5),e(z5,_Ce),e(_Ce,xIr),e(z5,$Ir),e(z5,pZ),e(pZ,kIr),e(z5,SIr),e(oe,RIr),e(oe,Q5),e(Q5,uCe),e(uCe,PIr),e(Q5,BIr),e(Q5,_Z),e(_Z,NIr),e(Q5,IIr),e(oe,qIr),e(oe,W5),e(W5,bCe),e(bCe,jIr),e(W5,DIr),e(W5,uZ),e(uZ,GIr),e(W5,OIr),e(oe,VIr),e(oe,H5),e(H5,vCe),e(vCe,XIr),e(H5,zIr),e(H5,bZ),e(bZ,QIr),e(H5,WIr),e(oe,HIr),e(oe,U5),e(U5,FCe),e(FCe,UIr),e(U5,JIr),e(U5,vZ),e(vZ,YIr),e(U5,KIr),e(oe,ZIr),e(oe,J5),e(J5,TCe),e(TCe,eqr),e(J5,oqr),e(J5,FZ),e(FZ,rqr),e(J5,tqr),e(oe,aqr),e(oe,Y5),e(Y5,MCe),e(MCe,nqr),e(Y5,sqr),e(Y5,TZ),e(TZ,lqr),e(Y5,iqr),e(oe,dqr),e(oe,K5),e(K5,ECe),e(ECe,cqr),e(K5,fqr),e(K5,MZ),e(MZ,mqr),e(K5,gqr),e(oe,hqr),e(oe,Z5),e(Z5,CCe),e(CCe,pqr),e(Z5,_qr),e(Z5,EZ),e(EZ,uqr),e(Z5,bqr),e(oe,vqr),e(oe,e3),e(e3,wCe),e(wCe,Fqr),e(e3,Tqr),e(e3,CZ),e(CZ,Mqr),e(e3,Eqr),e(oe,Cqr),e(oe,o3),e(o3,ACe),e(ACe,wqr),e(o3,Aqr),e(o3,wZ),e(wZ,Lqr),e(o3,yqr),e(oe,xqr),e(oe,r3),e(r3,LCe),e(LCe,$qr),e(r3,kqr),e(r3,AZ),e(AZ,Sqr),e(r3,Rqr),e(oe,Pqr),e(oe,t3),e(t3,yCe),e(yCe,Bqr),e(t3,Nqr),e(t3,LZ),e(LZ,Iqr),e(t3,qqr),e(Or,jqr),M(a3,Or,null),b(f,oXe,u),b(f,Qc,u),e(Qc,n3),e(n3,xCe),M(zx,xCe,null),e(Qc,Dqr),e(Qc,$Ce),e($Ce,Gqr),b(f,rXe,u),b(f,pr,u),M(Qx,pr,null),e(pr,Oqr),e(pr,Wc),e(Wc,Vqr),e(Wc,yZ),e(yZ,Xqr),e(Wc,zqr),e(Wc,xZ),e(xZ,Qqr),e(Wc,Wqr),e(pr,Hqr),e(pr,Wx),e(Wx,Uqr),e(Wx,kCe),e(kCe,Jqr),e(Wx,Yqr),e(pr,Kqr),e(pr,zt),M(Hx,zt,null),e(zt,Zqr),e(zt,SCe),e(SCe,ejr),e(zt,ojr),e(zt,Hc),e(Hc,rjr),e(Hc,RCe),e(RCe,tjr),e(Hc,ajr),e(Hc,$Z),e($Z,njr),e(Hc,sjr),e(zt,ljr),M(s3,zt,null),e(pr,ijr),e(pr,Vr),M(Ux,Vr,null),e(Vr,djr),e(Vr,PCe),e(PCe,cjr),e(Vr,fjr),e(Vr,Tn),e(Tn,mjr),e(Tn,BCe),e(BCe,gjr),e(Tn,hjr),e(Tn,NCe),e(NCe,pjr),e(Tn,_jr),e(Tn,ICe),e(ICe,ujr),e(Tn,bjr),e(Vr,vjr),e(Vr,xe),e(xe,l3),e(l3,qCe),e(qCe,Fjr),e(l3,Tjr),e(l3,kZ),e(kZ,Mjr),e(l3,Ejr),e(xe,Cjr),e(xe,i3),e(i3,jCe),e(jCe,wjr),e(i3,Ajr),e(i3,SZ),e(SZ,Ljr),e(i3,yjr),e(xe,xjr),e(xe,d3),e(d3,DCe),e(DCe,$jr),e(d3,kjr),e(d3,RZ),e(RZ,Sjr),e(d3,Rjr),e(xe,Pjr),e(xe,c3),e(c3,GCe),e(GCe,Bjr),e(c3,Njr),e(c3,PZ),e(PZ,Ijr),e(c3,qjr),e(xe,jjr),e(xe,f3),e(f3,OCe),e(OCe,Djr),e(f3,Gjr),e(f3,BZ),e(BZ,Ojr),e(f3,Vjr),e(xe,Xjr),e(xe,m3),e(m3,VCe),e(VCe,zjr),e(m3,Qjr),e(m3,NZ),e(NZ,Wjr),e(m3,Hjr),e(xe,Ujr),e(xe,g3),e(g3,XCe),e(XCe,Jjr),e(g3,Yjr),e(g3,IZ),e(IZ,Kjr),e(g3,Zjr),e(xe,eDr),e(xe,h3),e(h3,zCe),e(zCe,oDr),e(h3,rDr),e(h3,qZ),e(qZ,tDr),e(h3,aDr),e(xe,nDr),e(xe,p3),e(p3,QCe),e(QCe,sDr),e(p3,lDr),e(p3,jZ),e(jZ,iDr),e(p3,dDr),e(xe,cDr),e(xe,_3),e(_3,WCe),e(WCe,fDr),e(_3,mDr),e(_3,DZ),e(DZ,gDr),e(_3,hDr),e(Vr,pDr),M(u3,Vr,null),b(f,tXe,u),b(f,Uc,u),e(Uc,b3),e(b3,HCe),M(Jx,HCe,null),e(Uc,_Dr),e(Uc,UCe),e(UCe,uDr),b(f,aXe,u),b(f,_r,u),M(Yx,_r,null),e(_r,bDr),e(_r,Jc),e(Jc,vDr),e(Jc,GZ),e(GZ,FDr),e(Jc,TDr),e(Jc,OZ),e(OZ,MDr),e(Jc,EDr),e(_r,CDr),e(_r,Kx),e(Kx,wDr),e(Kx,JCe),e(JCe,ADr),e(Kx,LDr),e(_r,yDr),e(_r,Qt),M(Zx,Qt,null),e(Qt,xDr),e(Qt,YCe),e(YCe,$Dr),e(Qt,kDr),e(Qt,Yc),e(Yc,SDr),e(Yc,KCe),e(KCe,RDr),e(Yc,PDr),e(Yc,VZ),e(VZ,BDr),e(Yc,NDr),e(Qt,IDr),M(v3,Qt,null),e(_r,qDr),e(_r,Xr),M(e$,Xr,null),e(Xr,jDr),e(Xr,ZCe),e(ZCe,DDr),e(Xr,GDr),e(Xr,Mn),e(Mn,ODr),e(Mn,e5e),e(e5e,VDr),e(Mn,XDr),e(Mn,o5e),e(o5e,zDr),e(Mn,QDr),e(Mn,r5e),e(r5e,WDr),e(Mn,HDr),e(Xr,UDr),e(Xr,Ee),e(Ee,F3),e(F3,t5e),e(t5e,JDr),e(F3,YDr),e(F3,XZ),e(XZ,KDr),e(F3,ZDr),e(Ee,eGr),e(Ee,T3),e(T3,a5e),e(a5e,oGr),e(T3,rGr),e(T3,zZ),e(zZ,tGr),e(T3,aGr),e(Ee,nGr),e(Ee,M3),e(M3,n5e),e(n5e,sGr),e(M3,lGr),e(M3,QZ),e(QZ,iGr),e(M3,dGr),e(Ee,cGr),e(Ee,E3),e(E3,s5e),e(s5e,fGr),e(E3,mGr),e(E3,WZ),e(WZ,gGr),e(E3,hGr),e(Ee,pGr),e(Ee,C3),e(C3,l5e),e(l5e,_Gr),e(C3,uGr),e(C3,HZ),e(HZ,bGr),e(C3,vGr),e(Ee,FGr),e(Ee,w3),e(w3,i5e),e(i5e,TGr),e(w3,MGr),e(w3,UZ),e(UZ,EGr),e(w3,CGr),e(Ee,wGr),e(Ee,A3),e(A3,d5e),e(d5e,AGr),e(A3,LGr),e(A3,JZ),e(JZ,yGr),e(A3,xGr),e(Ee,$Gr),e(Ee,L3),e(L3,c5e),e(c5e,kGr),e(L3,SGr),e(L3,YZ),e(YZ,RGr),e(L3,PGr),e(Ee,BGr),e(Ee,y3),e(y3,f5e),e(f5e,NGr),e(y3,IGr),e(y3,KZ),e(KZ,qGr),e(y3,jGr),e(Ee,DGr),e(Ee,x3),e(x3,m5e),e(m5e,GGr),e(x3,OGr),e(x3,ZZ),e(ZZ,VGr),e(x3,XGr),e(Ee,zGr),e(Ee,$3),e($3,g5e),e(g5e,QGr),e($3,WGr),e($3,eee),e(eee,HGr),e($3,UGr),e(Ee,JGr),e(Ee,k3),e(k3,h5e),e(h5e,YGr),e(k3,KGr),e(k3,oee),e(oee,ZGr),e(k3,eOr),e(Ee,oOr),e(Ee,S3),e(S3,p5e),e(p5e,rOr),e(S3,tOr),e(S3,ree),e(ree,aOr),e(S3,nOr),e(Xr,sOr),M(R3,Xr,null),b(f,nXe,u),b(f,Kc,u),e(Kc,P3),e(P3,_5e),M(o$,_5e,null),e(Kc,lOr),e(Kc,u5e),e(u5e,iOr),b(f,sXe,u),b(f,ur,u),M(r$,ur,null),e(ur,dOr),e(ur,Zc),e(Zc,cOr),e(Zc,tee),e(tee,fOr),e(Zc,mOr),e(Zc,aee),e(aee,gOr),e(Zc,hOr),e(ur,pOr),e(ur,t$),e(t$,_Or),e(t$,b5e),e(b5e,uOr),e(t$,bOr),e(ur,vOr),e(ur,Wt),M(a$,Wt,null),e(Wt,FOr),e(Wt,v5e),e(v5e,TOr),e(Wt,MOr),e(Wt,ef),e(ef,EOr),e(ef,F5e),e(F5e,COr),e(ef,wOr),e(ef,nee),e(nee,AOr),e(ef,LOr),e(Wt,yOr),M(B3,Wt,null),e(ur,xOr),e(ur,zr),M(n$,zr,null),e(zr,$Or),e(zr,T5e),e(T5e,kOr),e(zr,SOr),e(zr,En),e(En,ROr),e(En,M5e),e(M5e,POr),e(En,BOr),e(En,E5e),e(E5e,NOr),e(En,IOr),e(En,C5e),e(C5e,qOr),e(En,jOr),e(zr,DOr),e(zr,$e),e($e,N3),e(N3,w5e),e(w5e,GOr),e(N3,OOr),e(N3,see),e(see,VOr),e(N3,XOr),e($e,zOr),e($e,I3),e(I3,A5e),e(A5e,QOr),e(I3,WOr),e(I3,lee),e(lee,HOr),e(I3,UOr),e($e,JOr),e($e,q3),e(q3,L5e),e(L5e,YOr),e(q3,KOr),e(q3,iee),e(iee,ZOr),e(q3,eVr),e($e,oVr),e($e,j3),e(j3,y5e),e(y5e,rVr),e(j3,tVr),e(j3,dee),e(dee,aVr),e(j3,nVr),e($e,sVr),e($e,D3),e(D3,x5e),e(x5e,lVr),e(D3,iVr),e(D3,cee),e(cee,dVr),e(D3,cVr),e($e,fVr),e($e,G3),e(G3,$5e),e($5e,mVr),e(G3,gVr),e(G3,fee),e(fee,hVr),e(G3,pVr),e($e,_Vr),e($e,O3),e(O3,k5e),e(k5e,uVr),e(O3,bVr),e(O3,mee),e(mee,vVr),e(O3,FVr),e($e,TVr),e($e,V3),e(V3,S5e),e(S5e,MVr),e(V3,EVr),e(V3,gee),e(gee,CVr),e(V3,wVr),e($e,AVr),e($e,X3),e(X3,R5e),e(R5e,LVr),e(X3,yVr),e(X3,hee),e(hee,xVr),e(X3,$Vr),e($e,kVr),e($e,z3),e(z3,P5e),e(P5e,SVr),e(z3,RVr),e(z3,pee),e(pee,PVr),e(z3,BVr),e(zr,NVr),M(Q3,zr,null),b(f,lXe,u),b(f,of,u),e(of,W3),e(W3,B5e),M(s$,B5e,null),e(of,IVr),e(of,N5e),e(N5e,qVr),b(f,iXe,u),b(f,br,u),M(l$,br,null),e(br,jVr),e(br,rf),e(rf,DVr),e(rf,_ee),e(_ee,GVr),e(rf,OVr),e(rf,uee),e(uee,VVr),e(rf,XVr),e(br,zVr),e(br,i$),e(i$,QVr),e(i$,I5e),e(I5e,WVr),e(i$,HVr),e(br,UVr),e(br,Ht),M(d$,Ht,null),e(Ht,JVr),e(Ht,q5e),e(q5e,YVr),e(Ht,KVr),e(Ht,tf),e(tf,ZVr),e(tf,j5e),e(j5e,eXr),e(tf,oXr),e(tf,bee),e(bee,rXr),e(tf,tXr),e(Ht,aXr),M(H3,Ht,null),e(br,nXr),e(br,Qr),M(c$,Qr,null),e(Qr,sXr),e(Qr,D5e),e(D5e,lXr),e(Qr,iXr),e(Qr,Cn),e(Cn,dXr),e(Cn,G5e),e(G5e,cXr),e(Cn,fXr),e(Cn,O5e),e(O5e,mXr),e(Cn,gXr),e(Cn,V5e),e(V5e,hXr),e(Cn,pXr),e(Qr,_Xr),e(Qr,ke),e(ke,U3),e(U3,X5e),e(X5e,uXr),e(U3,bXr),e(U3,vee),e(vee,vXr),e(U3,FXr),e(ke,TXr),e(ke,J3),e(J3,z5e),e(z5e,MXr),e(J3,EXr),e(J3,Fee),e(Fee,CXr),e(J3,wXr),e(ke,AXr),e(ke,Y3),e(Y3,Q5e),e(Q5e,LXr),e(Y3,yXr),e(Y3,Tee),e(Tee,xXr),e(Y3,$Xr),e(ke,kXr),e(ke,K3),e(K3,W5e),e(W5e,SXr),e(K3,RXr),e(K3,Mee),e(Mee,PXr),e(K3,BXr),e(ke,NXr),e(ke,Z3),e(Z3,H5e),e(H5e,IXr),e(Z3,qXr),e(Z3,Eee),e(Eee,jXr),e(Z3,DXr),e(ke,GXr),e(ke,e0),e(e0,U5e),e(U5e,OXr),e(e0,VXr),e(e0,Cee),e(Cee,XXr),e(e0,zXr),e(ke,QXr),e(ke,o0),e(o0,J5e),e(J5e,WXr),e(o0,HXr),e(o0,wee),e(wee,UXr),e(o0,JXr),e(ke,YXr),e(ke,r0),e(r0,Y5e),e(Y5e,KXr),e(r0,ZXr),e(r0,Aee),e(Aee,ezr),e(r0,ozr),e(ke,rzr),e(ke,t0),e(t0,K5e),e(K5e,tzr),e(t0,azr),e(t0,Lee),e(Lee,nzr),e(t0,szr),e(ke,lzr),e(ke,a0),e(a0,Z5e),e(Z5e,izr),e(a0,dzr),e(a0,yee),e(yee,czr),e(a0,fzr),e(Qr,mzr),M(n0,Qr,null),b(f,dXe,u),b(f,af,u),e(af,s0),e(s0,e3e),M(f$,e3e,null),e(af,gzr),e(af,o3e),e(o3e,hzr),b(f,cXe,u),b(f,vr,u),M(m$,vr,null),e(vr,pzr),e(vr,nf),e(nf,_zr),e(nf,xee),e(xee,uzr),e(nf,bzr),e(nf,$ee),e($ee,vzr),e(nf,Fzr),e(vr,Tzr),e(vr,g$),e(g$,Mzr),e(g$,r3e),e(r3e,Ezr),e(g$,Czr),e(vr,wzr),e(vr,Ut),M(h$,Ut,null),e(Ut,Azr),e(Ut,t3e),e(t3e,Lzr),e(Ut,yzr),e(Ut,sf),e(sf,xzr),e(sf,a3e),e(a3e,$zr),e(sf,kzr),e(sf,kee),e(kee,Szr),e(sf,Rzr),e(Ut,Pzr),M(l0,Ut,null),e(vr,Bzr),e(vr,Wr),M(p$,Wr,null),e(Wr,Nzr),e(Wr,n3e),e(n3e,Izr),e(Wr,qzr),e(Wr,wn),e(wn,jzr),e(wn,s3e),e(s3e,Dzr),e(wn,Gzr),e(wn,l3e),e(l3e,Ozr),e(wn,Vzr),e(wn,i3e),e(i3e,Xzr),e(wn,zzr),e(Wr,Qzr),e(Wr,Se),e(Se,i0),e(i0,d3e),e(d3e,Wzr),e(i0,Hzr),e(i0,See),e(See,Uzr),e(i0,Jzr),e(Se,Yzr),e(Se,d0),e(d0,c3e),e(c3e,Kzr),e(d0,Zzr),e(d0,Ree),e(Ree,eQr),e(d0,oQr),e(Se,rQr),e(Se,c0),e(c0,f3e),e(f3e,tQr),e(c0,aQr),e(c0,Pee),e(Pee,nQr),e(c0,sQr),e(Se,lQr),e(Se,f0),e(f0,m3e),e(m3e,iQr),e(f0,dQr),e(f0,Bee),e(Bee,cQr),e(f0,fQr),e(Se,mQr),e(Se,m0),e(m0,g3e),e(g3e,gQr),e(m0,hQr),e(m0,Nee),e(Nee,pQr),e(m0,_Qr),e(Se,uQr),e(Se,g0),e(g0,h3e),e(h3e,bQr),e(g0,vQr),e(g0,Iee),e(Iee,FQr),e(g0,TQr),e(Se,MQr),e(Se,h0),e(h0,p3e),e(p3e,EQr),e(h0,CQr),e(h0,qee),e(qee,wQr),e(h0,AQr),e(Se,LQr),e(Se,p0),e(p0,_3e),e(_3e,yQr),e(p0,xQr),e(p0,jee),e(jee,$Qr),e(p0,kQr),e(Se,SQr),e(Se,_0),e(_0,u3e),e(u3e,RQr),e(_0,PQr),e(_0,Dee),e(Dee,BQr),e(_0,NQr),e(Se,IQr),e(Se,u0),e(u0,b3e),e(b3e,qQr),e(u0,jQr),e(u0,Gee),e(Gee,DQr),e(u0,GQr),e(Wr,OQr),M(b0,Wr,null),b(f,fXe,u),b(f,lf,u),e(lf,v0),e(v0,v3e),M(_$,v3e,null),e(lf,VQr),e(lf,F3e),e(F3e,XQr),b(f,mXe,u),b(f,Fr,u),M(u$,Fr,null),e(Fr,zQr),e(Fr,df),e(df,QQr),e(df,Oee),e(Oee,WQr),e(df,HQr),e(df,Vee),e(Vee,UQr),e(df,JQr),e(Fr,YQr),e(Fr,b$),e(b$,KQr),e(b$,T3e),e(T3e,ZQr),e(b$,eWr),e(Fr,oWr),e(Fr,Jt),M(v$,Jt,null),e(Jt,rWr),e(Jt,M3e),e(M3e,tWr),e(Jt,aWr),e(Jt,cf),e(cf,nWr),e(cf,E3e),e(E3e,sWr),e(cf,lWr),e(cf,Xee),e(Xee,iWr),e(cf,dWr),e(Jt,cWr),M(F0,Jt,null),e(Fr,fWr),e(Fr,Hr),M(F$,Hr,null),e(Hr,mWr),e(Hr,C3e),e(C3e,gWr),e(Hr,hWr),e(Hr,An),e(An,pWr),e(An,w3e),e(w3e,_Wr),e(An,uWr),e(An,A3e),e(A3e,bWr),e(An,vWr),e(An,L3e),e(L3e,FWr),e(An,TWr),e(Hr,MWr),e(Hr,Re),e(Re,T0),e(T0,y3e),e(y3e,EWr),e(T0,CWr),e(T0,zee),e(zee,wWr),e(T0,AWr),e(Re,LWr),e(Re,M0),e(M0,x3e),e(x3e,yWr),e(M0,xWr),e(M0,Qee),e(Qee,$Wr),e(M0,kWr),e(Re,SWr),e(Re,E0),e(E0,$3e),e($3e,RWr),e(E0,PWr),e(E0,Wee),e(Wee,BWr),e(E0,NWr),e(Re,IWr),e(Re,C0),e(C0,k3e),e(k3e,qWr),e(C0,jWr),e(C0,Hee),e(Hee,DWr),e(C0,GWr),e(Re,OWr),e(Re,w0),e(w0,S3e),e(S3e,VWr),e(w0,XWr),e(w0,Uee),e(Uee,zWr),e(w0,QWr),e(Re,WWr),e(Re,A0),e(A0,R3e),e(R3e,HWr),e(A0,UWr),e(A0,Jee),e(Jee,JWr),e(A0,YWr),e(Re,KWr),e(Re,L0),e(L0,P3e),e(P3e,ZWr),e(L0,eHr),e(L0,Yee),e(Yee,oHr),e(L0,rHr),e(Re,tHr),e(Re,y0),e(y0,B3e),e(B3e,aHr),e(y0,nHr),e(y0,Kee),e(Kee,sHr),e(y0,lHr),e(Re,iHr),e(Re,x0),e(x0,N3e),e(N3e,dHr),e(x0,cHr),e(x0,Zee),e(Zee,fHr),e(x0,mHr),e(Re,gHr),e(Re,$0),e($0,I3e),e(I3e,hHr),e($0,pHr),e($0,eoe),e(eoe,_Hr),e($0,uHr),e(Hr,bHr),M(k0,Hr,null),b(f,gXe,u),b(f,ff,u),e(ff,S0),e(S0,q3e),M(T$,q3e,null),e(ff,vHr),e(ff,j3e),e(j3e,FHr),b(f,hXe,u),b(f,Tr,u),M(M$,Tr,null),e(Tr,THr),e(Tr,mf),e(mf,MHr),e(mf,ooe),e(ooe,EHr),e(mf,CHr),e(mf,roe),e(roe,wHr),e(mf,AHr),e(Tr,LHr),e(Tr,E$),e(E$,yHr),e(E$,D3e),e(D3e,xHr),e(E$,$Hr),e(Tr,kHr),e(Tr,Yt),M(C$,Yt,null),e(Yt,SHr),e(Yt,G3e),e(G3e,RHr),e(Yt,PHr),e(Yt,gf),e(gf,BHr),e(gf,O3e),e(O3e,NHr),e(gf,IHr),e(gf,toe),e(toe,qHr),e(gf,jHr),e(Yt,DHr),M(R0,Yt,null),e(Tr,GHr),e(Tr,Ur),M(w$,Ur,null),e(Ur,OHr),e(Ur,V3e),e(V3e,VHr),e(Ur,XHr),e(Ur,Ln),e(Ln,zHr),e(Ln,X3e),e(X3e,QHr),e(Ln,WHr),e(Ln,z3e),e(z3e,HHr),e(Ln,UHr),e(Ln,Q3e),e(Q3e,JHr),e(Ln,YHr),e(Ur,KHr),e(Ur,Ve),e(Ve,P0),e(P0,W3e),e(W3e,ZHr),e(P0,eUr),e(P0,aoe),e(aoe,oUr),e(P0,rUr),e(Ve,tUr),e(Ve,B0),e(B0,H3e),e(H3e,aUr),e(B0,nUr),e(B0,noe),e(noe,sUr),e(B0,lUr),e(Ve,iUr),e(Ve,N0),e(N0,U3e),e(U3e,dUr),e(N0,cUr),e(N0,soe),e(soe,fUr),e(N0,mUr),e(Ve,gUr),e(Ve,I0),e(I0,J3e),e(J3e,hUr),e(I0,pUr),e(I0,loe),e(loe,_Ur),e(I0,uUr),e(Ve,bUr),e(Ve,q0),e(q0,Y3e),e(Y3e,vUr),e(q0,FUr),e(q0,ioe),e(ioe,TUr),e(q0,MUr),e(Ve,EUr),e(Ve,j0),e(j0,K3e),e(K3e,CUr),e(j0,wUr),e(j0,doe),e(doe,AUr),e(j0,LUr),e(Ve,yUr),e(Ve,D0),e(D0,Z3e),e(Z3e,xUr),e(D0,$Ur),e(D0,coe),e(coe,kUr),e(D0,SUr),e(Ve,RUr),e(Ve,G0),e(G0,e0e),e(e0e,PUr),e(G0,BUr),e(G0,foe),e(foe,NUr),e(G0,IUr),e(Ur,qUr),M(O0,Ur,null),b(f,pXe,u),b(f,hf,u),e(hf,V0),e(V0,o0e),M(A$,o0e,null),e(hf,jUr),e(hf,r0e),e(r0e,DUr),b(f,_Xe,u),b(f,Mr,u),M(L$,Mr,null),e(Mr,GUr),e(Mr,pf),e(pf,OUr),e(pf,moe),e(moe,VUr),e(pf,XUr),e(pf,goe),e(goe,zUr),e(pf,QUr),e(Mr,WUr),e(Mr,y$),e(y$,HUr),e(y$,t0e),e(t0e,UUr),e(y$,JUr),e(Mr,YUr),e(Mr,Kt),M(x$,Kt,null),e(Kt,KUr),e(Kt,a0e),e(a0e,ZUr),e(Kt,eJr),e(Kt,_f),e(_f,oJr),e(_f,n0e),e(n0e,rJr),e(_f,tJr),e(_f,hoe),e(hoe,aJr),e(_f,nJr),e(Kt,sJr),M(X0,Kt,null),e(Mr,lJr),e(Mr,Jr),M($$,Jr,null),e(Jr,iJr),e(Jr,s0e),e(s0e,dJr),e(Jr,cJr),e(Jr,yn),e(yn,fJr),e(yn,l0e),e(l0e,mJr),e(yn,gJr),e(yn,i0e),e(i0e,hJr),e(yn,pJr),e(yn,d0e),e(d0e,_Jr),e(yn,uJr),e(Jr,bJr),e(Jr,Xe),e(Xe,z0),e(z0,c0e),e(c0e,vJr),e(z0,FJr),e(z0,poe),e(poe,TJr),e(z0,MJr),e(Xe,EJr),e(Xe,Q0),e(Q0,f0e),e(f0e,CJr),e(Q0,wJr),e(Q0,_oe),e(_oe,AJr),e(Q0,LJr),e(Xe,yJr),e(Xe,W0),e(W0,m0e),e(m0e,xJr),e(W0,$Jr),e(W0,uoe),e(uoe,kJr),e(W0,SJr),e(Xe,RJr),e(Xe,H0),e(H0,g0e),e(g0e,PJr),e(H0,BJr),e(H0,boe),e(boe,NJr),e(H0,IJr),e(Xe,qJr),e(Xe,U0),e(U0,h0e),e(h0e,jJr),e(U0,DJr),e(U0,voe),e(voe,GJr),e(U0,OJr),e(Xe,VJr),e(Xe,J0),e(J0,p0e),e(p0e,XJr),e(J0,zJr),e(J0,Foe),e(Foe,QJr),e(J0,WJr),e(Xe,HJr),e(Xe,Y0),e(Y0,_0e),e(_0e,UJr),e(Y0,JJr),e(Y0,Toe),e(Toe,YJr),e(Y0,KJr),e(Xe,ZJr),e(Xe,K0),e(K0,u0e),e(u0e,eYr),e(K0,oYr),e(K0,Moe),e(Moe,rYr),e(K0,tYr),e(Jr,aYr),M(Z0,Jr,null),b(f,uXe,u),b(f,uf,u),e(uf,ew),e(ew,b0e),M(k$,b0e,null),e(uf,nYr),e(uf,v0e),e(v0e,sYr),b(f,bXe,u),b(f,Er,u),M(S$,Er,null),e(Er,lYr),e(Er,bf),e(bf,iYr),e(bf,Eoe),e(Eoe,dYr),e(bf,cYr),e(bf,Coe),e(Coe,fYr),e(bf,mYr),e(Er,gYr),e(Er,R$),e(R$,hYr),e(R$,F0e),e(F0e,pYr),e(R$,_Yr),e(Er,uYr),e(Er,Zt),M(P$,Zt,null),e(Zt,bYr),e(Zt,T0e),e(T0e,vYr),e(Zt,FYr),e(Zt,vf),e(vf,TYr),e(vf,M0e),e(M0e,MYr),e(vf,EYr),e(vf,woe),e(woe,CYr),e(vf,wYr),e(Zt,AYr),M(ow,Zt,null),e(Er,LYr),e(Er,Yr),M(B$,Yr,null),e(Yr,yYr),e(Yr,E0e),e(E0e,xYr),e(Yr,$Yr),e(Yr,xn),e(xn,kYr),e(xn,C0e),e(C0e,SYr),e(xn,RYr),e(xn,w0e),e(w0e,PYr),e(xn,BYr),e(xn,A0e),e(A0e,NYr),e(xn,IYr),e(Yr,qYr),e(Yr,L0e),e(L0e,rw),e(rw,y0e),e(y0e,jYr),e(rw,DYr),e(rw,Aoe),e(Aoe,GYr),e(rw,OYr),e(Yr,VYr),M(tw,Yr,null),b(f,vXe,u),b(f,Ff,u),e(Ff,aw),e(aw,x0e),M(N$,x0e,null),e(Ff,XYr),e(Ff,$0e),e($0e,zYr),b(f,FXe,u),b(f,Cr,u),M(I$,Cr,null),e(Cr,QYr),e(Cr,Tf),e(Tf,WYr),e(Tf,Loe),e(Loe,HYr),e(Tf,UYr),e(Tf,yoe),e(yoe,JYr),e(Tf,YYr),e(Cr,KYr),e(Cr,q$),e(q$,ZYr),e(q$,k0e),e(k0e,eKr),e(q$,oKr),e(Cr,rKr),e(Cr,ea),M(j$,ea,null),e(ea,tKr),e(ea,S0e),e(S0e,aKr),e(ea,nKr),e(ea,Mf),e(Mf,sKr),e(Mf,R0e),e(R0e,lKr),e(Mf,iKr),e(Mf,xoe),e(xoe,dKr),e(Mf,cKr),e(ea,fKr),M(nw,ea,null),e(Cr,mKr),e(Cr,Kr),M(D$,Kr,null),e(Kr,gKr),e(Kr,P0e),e(P0e,hKr),e(Kr,pKr),e(Kr,$n),e($n,_Kr),e($n,B0e),e(B0e,uKr),e($n,bKr),e($n,N0e),e(N0e,vKr),e($n,FKr),e($n,I0e),e(I0e,TKr),e($n,MKr),e(Kr,EKr),e(Kr,G$),e(G$,sw),e(sw,q0e),e(q0e,CKr),e(sw,wKr),e(sw,$oe),e($oe,AKr),e(sw,LKr),e(G$,yKr),e(G$,lw),e(lw,j0e),e(j0e,xKr),e(lw,$Kr),e(lw,koe),e(koe,kKr),e(lw,SKr),e(Kr,RKr),M(iw,Kr,null),b(f,TXe,u),b(f,Ef,u),e(Ef,dw),e(dw,D0e),M(O$,D0e,null),e(Ef,PKr),e(Ef,G0e),e(G0e,BKr),b(f,MXe,u),b(f,wr,u),M(V$,wr,null),e(wr,NKr),e(wr,Cf),e(Cf,IKr),e(Cf,Soe),e(Soe,qKr),e(Cf,jKr),e(Cf,Roe),e(Roe,DKr),e(Cf,GKr),e(wr,OKr),e(wr,X$),e(X$,VKr),e(X$,O0e),e(O0e,XKr),e(X$,zKr),e(wr,QKr),e(wr,oa),M(z$,oa,null),e(oa,WKr),e(oa,V0e),e(V0e,HKr),e(oa,UKr),e(oa,wf),e(wf,JKr),e(wf,X0e),e(X0e,YKr),e(wf,KKr),e(wf,Poe),e(Poe,ZKr),e(wf,eZr),e(oa,oZr),M(cw,oa,null),e(wr,rZr),e(wr,Zr),M(Q$,Zr,null),e(Zr,tZr),e(Zr,z0e),e(z0e,aZr),e(Zr,nZr),e(Zr,kn),e(kn,sZr),e(kn,Q0e),e(Q0e,lZr),e(kn,iZr),e(kn,W0e),e(W0e,dZr),e(kn,cZr),e(kn,H0e),e(H0e,fZr),e(kn,mZr),e(Zr,gZr),e(Zr,U0e),e(U0e,fw),e(fw,J0e),e(J0e,hZr),e(fw,pZr),e(fw,Boe),e(Boe,_Zr),e(fw,uZr),e(Zr,bZr),M(mw,Zr,null),EXe=!0},p(f,[u]){const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),Pf.$set(W$);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:f}),Xg.$set(Y0e);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:f}),Ah.$set(K0e);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:f}),ip.$set(Z0e);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),dp.$set(H$);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),xp.$set(ewe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),$p.$set(Sn);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),Rp.$set(owe);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),Bu.$set(rwe);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),Iu.$set(twe);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),x1.$set(U$);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),k1.$set(awe);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),b7.$set(J$);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),F7.$set(nwe);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),n9.$set(Y$);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),l9.$set(swe);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),A9.$set(lwe);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),y9.$set(iwe);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),w2.$set(Af);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),L2.$set(dwe);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),nb.$set(cwe);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),lb.$set(fwe);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),pb.$set(K$);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),ub.$set(mwe);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),ov.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),tv.$set(hwe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),Qv.$set(rt);const Z$={};u&2&&(Z$.$$scope={dirty:u,ctx:f}),Hv.$set(Z$);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),Yv.$set(pwe);const ek={};u&2&&(ek.$$scope={dirty:u,ctx:f}),Zv.$set(ek);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),hF.$set(_we);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),_F.$set(tt);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),vF.$set(uwe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),TF.$set(Lf);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),CF.$set(bwe);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),AF.$set(vwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),IF.$set(L);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),jF.$set(gw);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),QF.$set(Fwe);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),HF.$set(Twe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),sT.$set(hw);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),iT.$set(Mwe);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),mT.$set(Ewe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),hT.$set(pw);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),TT.$set(Cwe);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),ET.$set(wwe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),yT.$set(_w);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),$T.$set(Awe);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),PT.$set(Lwe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),NT.$set(uw);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),jT.$set(ywe);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),GT.$set(xwe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),WT.$set(bw);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),UT.$set($we);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),KT.$set(kwe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),eM.$set(vw);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),WM.$set(Swe);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),UM.$set(Rwe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),vE.$set(Fw);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),TE.$set(Pwe);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),BE.$set(Bwe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),IE.$set(Tw);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),OE.$set(Nwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),XE.$set(Iwe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),f4.$set(Mw);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),g4.$set(qwe);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),C4.$set(jwe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),A4.$set(Ew);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),Z4.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),oC.$set(Gwe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),vC.$set(Cw);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),TC.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),CC.$set(Vwe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),AC.$set(ww);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),yC.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),$C.$set(zwe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),YC.$set(Aw);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),ZC.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),F5.$set(Wwe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),M5.$set(Lw);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),C5.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),A5.$set(Uwe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),y5.$set(yw);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),$5.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),a3.$set(Ywe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),s3.$set(xw);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),u3.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),v3.$set(Zwe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),R3.$set($w);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),B3.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),Q3.$set(oAe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),H3.$set(kw);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),n0.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),l0.$set(tAe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),b0.$set(Sw);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),F0.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),k0.$set(nAe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),R0.$set(Rw);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),O0.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),X0.$set(lAe);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),Z0.$set(Pw);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),ow.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),tw.$set(dAe);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),nw.$set(Bw);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),iw.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),cw.$set(fAe);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),mw.$set(Nw)},i(f){EXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(Pf.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(V6.$$.fragment,f),E(Xg.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(Q6.$$.fragment,f),E(U6.$$.fragment,f),E(Ah.$$.fragment,f),E(J6.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(oL.$$.fragment,f),E(ip.$$.fragment,f),E(dp.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(lL.$$.fragment,f),E(xp.$$.fragment,f),E($p.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(Rp.$$.fragment,f),E(gL.$$.fragment,f),E(Bu.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(Iu.$$.fragment,f),E(bL.$$.fragment,f),E(x1.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(k1.$$.fragment,f),E(EL.$$.fragment,f),E(b7.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(F7.$$.fragment,f),E(yL.$$.fragment,f),E(n9.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(l9.$$.fragment,f),E(RL.$$.fragment,f),E(A9.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(y9.$$.fragment,f),E(qL.$$.fragment,f),E(w2.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(L2.$$.fragment,f),E(VL.$$.fragment,f),E(nb.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(lb.$$.fragment,f),E(HL.$$.fragment,f),E(pb.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(ub.$$.fragment,f),E(ZL.$$.fragment,f),E(ov.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(tv.$$.fragment,f),E(ay.$$.fragment,f),E(Qv.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(Hv.$$.fragment,f),E(dy.$$.fragment,f),E(Yv.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(Zv.$$.fragment,f),E(hy.$$.fragment,f),E(hF.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(_F.$$.fragment,f),E(vy.$$.fragment,f),E(vF.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(TF.$$.fragment,f),E(Cy.$$.fragment,f),E(CF.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(AF.$$.fragment,f),E(xy.$$.fragment,f),E(IF.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(jF.$$.fragment,f),E(Py.$$.fragment,f),E(QF.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(HF.$$.fragment,f),E(jy.$$.fragment,f),E(sT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(iT.$$.fragment,f),E(Xy.$$.fragment,f),E(mT.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(hT.$$.fragment,f),E(Jy.$$.fragment,f),E(TT.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(ET.$$.fragment,f),E(o8.$$.fragment,f),E(yT.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E($T.$$.fragment,f),E(s8.$$.fragment,f),E(PT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(NT.$$.fragment,f),E(m8.$$.fragment,f),E(jT.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(GT.$$.fragment,f),E(u8.$$.fragment,f),E(WT.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(UT.$$.fragment,f),E(M8.$$.fragment,f),E(KT.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(eM.$$.fragment,f),E(L8.$$.fragment,f),E(WM.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(UM.$$.fragment,f),E(S8.$$.fragment,f),E(vE.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(N8.$$.fragment,f),E(TE.$$.fragment,f),E(I8.$$.fragment,f),E(BE.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(IE.$$.fragment,f),E(O8.$$.fragment,f),E(OE.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(XE.$$.fragment,f),E(W8.$$.fragment,f),E(f4.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(g4.$$.fragment,f),E(K8.$$.fragment,f),E(C4.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(A4.$$.fragment,f),E(tx.$$.fragment,f),E(Z4.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(oC.$$.fragment,f),E(ix.$$.fragment,f),E(vC.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(TC.$$.fragment,f),E(gx.$$.fragment,f),E(CC.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(AC.$$.fragment,f),E(vx.$$.fragment,f),E(yC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E($C.$$.fragment,f),E(Cx.$$.fragment,f),E(YC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(ZC.$$.fragment,f),E(xx.$$.fragment,f),E(F5.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(M5.$$.fragment,f),E(Px.$$.fragment,f),E(C5.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(A5.$$.fragment,f),E(jx.$$.fragment,f),E(y5.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E($5.$$.fragment,f),E(Xx.$$.fragment,f),E(a3.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(s3.$$.fragment,f),E(Ux.$$.fragment,f),E(u3.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(v3.$$.fragment,f),E(e$.$$.fragment,f),E(R3.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(B3.$$.fragment,f),E(n$.$$.fragment,f),E(Q3.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(H3.$$.fragment,f),E(c$.$$.fragment,f),E(n0.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(l0.$$.fragment,f),E(p$.$$.fragment,f),E(b0.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(F0.$$.fragment,f),E(F$.$$.fragment,f),E(k0.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(R0.$$.fragment,f),E(w$.$$.fragment,f),E(O0.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(X0.$$.fragment,f),E($$.$$.fragment,f),E(Z0.$$.fragment,f),E(k$.$$.fragment,f),E(S$.$$.fragment,f),E(P$.$$.fragment,f),E(ow.$$.fragment,f),E(B$.$$.fragment,f),E(tw.$$.fragment,f),E(N$.$$.fragment,f),E(I$.$$.fragment,f),E(j$.$$.fragment,f),E(nw.$$.fragment,f),E(D$.$$.fragment,f),E(iw.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(cw.$$.fragment,f),E(Q$.$$.fragment,f),E(mw.$$.fragment,f),EXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(Pf.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(V6.$$.fragment,f),C(Xg.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(Q6.$$.fragment,f),C(U6.$$.fragment,f),C(Ah.$$.fragment,f),C(J6.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(oL.$$.fragment,f),C(ip.$$.fragment,f),C(dp.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(lL.$$.fragment,f),C(xp.$$.fragment,f),C($p.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(Rp.$$.fragment,f),C(gL.$$.fragment,f),C(Bu.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(Iu.$$.fragment,f),C(bL.$$.fragment,f),C(x1.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(k1.$$.fragment,f),C(EL.$$.fragment,f),C(b7.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(F7.$$.fragment,f),C(yL.$$.fragment,f),C(n9.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(l9.$$.fragment,f),C(RL.$$.fragment,f),C(A9.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(y9.$$.fragment,f),C(qL.$$.fragment,f),C(w2.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(L2.$$.fragment,f),C(VL.$$.fragment,f),C(nb.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(lb.$$.fragment,f),C(HL.$$.fragment,f),C(pb.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(ub.$$.fragment,f),C(ZL.$$.fragment,f),C(ov.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(tv.$$.fragment,f),C(ay.$$.fragment,f),C(Qv.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(Hv.$$.fragment,f),C(dy.$$.fragment,f),C(Yv.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(Zv.$$.fragment,f),C(hy.$$.fragment,f),C(hF.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(_F.$$.fragment,f),C(vy.$$.fragment,f),C(vF.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(TF.$$.fragment,f),C(Cy.$$.fragment,f),C(CF.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(AF.$$.fragment,f),C(xy.$$.fragment,f),C(IF.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(jF.$$.fragment,f),C(Py.$$.fragment,f),C(QF.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(HF.$$.fragment,f),C(jy.$$.fragment,f),C(sT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(iT.$$.fragment,f),C(Xy.$$.fragment,f),C(mT.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(hT.$$.fragment,f),C(Jy.$$.fragment,f),C(TT.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(ET.$$.fragment,f),C(o8.$$.fragment,f),C(yT.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C($T.$$.fragment,f),C(s8.$$.fragment,f),C(PT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(NT.$$.fragment,f),C(m8.$$.fragment,f),C(jT.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(GT.$$.fragment,f),C(u8.$$.fragment,f),C(WT.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(UT.$$.fragment,f),C(M8.$$.fragment,f),C(KT.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(eM.$$.fragment,f),C(L8.$$.fragment,f),C(WM.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(UM.$$.fragment,f),C(S8.$$.fragment,f),C(vE.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(N8.$$.fragment,f),C(TE.$$.fragment,f),C(I8.$$.fragment,f),C(BE.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(IE.$$.fragment,f),C(O8.$$.fragment,f),C(OE.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(XE.$$.fragment,f),C(W8.$$.fragment,f),C(f4.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(g4.$$.fragment,f),C(K8.$$.fragment,f),C(C4.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(A4.$$.fragment,f),C(tx.$$.fragment,f),C(Z4.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(oC.$$.fragment,f),C(ix.$$.fragment,f),C(vC.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(TC.$$.fragment,f),C(gx.$$.fragment,f),C(CC.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(AC.$$.fragment,f),C(vx.$$.fragment,f),C(yC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C($C.$$.fragment,f),C(Cx.$$.fragment,f),C(YC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(ZC.$$.fragment,f),C(xx.$$.fragment,f),C(F5.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(M5.$$.fragment,f),C(Px.$$.fragment,f),C(C5.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(A5.$$.fragment,f),C(jx.$$.fragment,f),C(y5.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C($5.$$.fragment,f),C(Xx.$$.fragment,f),C(a3.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(s3.$$.fragment,f),C(Ux.$$.fragment,f),C(u3.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(v3.$$.fragment,f),C(e$.$$.fragment,f),C(R3.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(B3.$$.fragment,f),C(n$.$$.fragment,f),C(Q3.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(H3.$$.fragment,f),C(c$.$$.fragment,f),C(n0.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(l0.$$.fragment,f),C(p$.$$.fragment,f),C(b0.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(F0.$$.fragment,f),C(F$.$$.fragment,f),C(k0.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(R0.$$.fragment,f),C(w$.$$.fragment,f),C(O0.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(X0.$$.fragment,f),C($$.$$.fragment,f),C(Z0.$$.fragment,f),C(k$.$$.fragment,f),C(S$.$$.fragment,f),C(P$.$$.fragment,f),C(ow.$$.fragment,f),C(B$.$$.fragment,f),C(tw.$$.fragment,f),C(N$.$$.fragment,f),C(I$.$$.fragment,f),C(j$.$$.fragment,f),C(nw.$$.fragment,f),C(D$.$$.fragment,f),C(iw.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(cw.$$.fragment,f),C(Q$.$$.fragment,f),C(mw.$$.fragment,f),EXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(xf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(kf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(bOe),f&&t(xi),w(I6),f&&t(vOe),f&&t(In),f&&t(FOe),w(q6,f),f&&t(TOe),f&&t(_S),f&&t(MOe),w(Pf,f),f&&t(EOe),f&&t($i),w(j6),f&&t(COe),f&&t(wo),w(D6),w(V6),w(Xg),w(X6),f&&t(wOe),f&&t(Si),w(z6),f&&t(AOe),f&&t(Ao),w(Q6),w(U6),w(Ah),w(J6),f&&t(LOe),f&&t(Ri),w(Y6),f&&t(yOe),f&&t(Lo),w(K6),w(oL),w(ip),w(dp),w(rL),f&&t(xOe),f&&t(Pi),w(tL),f&&t($Oe),f&&t(yo),w(aL),w(lL),w(xp),w($p),w(iL),f&&t(kOe),f&&t(Ni),w(dL),f&&t(SOe),f&&t(xo),w(cL),w(mL),w(Rp),w(gL),w(Bu),f&&t(ROe),f&&t(ji),w(hL),f&&t(POe),f&&t($o),w(pL),w(uL),w(Iu),w(bL),w(x1),f&&t(BOe),f&&t(Oi),w(vL),f&&t(NOe),f&&t(ko),w(FL),w(ML),w(k1),w(EL),w(b7),f&&t(IOe),f&&t(zi),w(CL),f&&t(qOe),f&&t(So),w(wL),w(LL),w(F7),w(yL),w(n9),f&&t(jOe),f&&t(Hi),w(xL),f&&t(DOe),f&&t(Ro),w($L),w(SL),w(l9),w(RL),w(A9),f&&t(GOe),f&&t(Yi),w(PL),f&&t(OOe),f&&t(Po),w(BL),w(IL),w(y9),w(qL),w(w2),f&&t(VOe),f&&t(ed),w(jL),f&&t(XOe),f&&t(Bo),w(DL),w(OL),w(L2),w(VL),w(nb),f&&t(zOe),f&&t(td),w(XL),f&&t(QOe),f&&t(No),w(zL),w(WL),w(lb),w(HL),w(pb),f&&t(WOe),f&&t(sd),w(UL),f&&t(HOe),f&&t(qo),w(JL),w(KL),w(ub),w(ZL),w(ov),f&&t(UOe),f&&t(dd),w(ey),f&&t(JOe),f&&t(jo),w(oy),w(ty),w(tv),w(ay),w(Qv),f&&t(YOe),f&&t(md),w(ny),f&&t(KOe),f&&t(Do),w(sy),w(iy),w(Hv),w(dy),w(Yv),f&&t(ZOe),f&&t(pd),w(cy),f&&t(eVe),f&&t(Go),w(fy),w(gy),w(Zv),w(hy),w(hF),f&&t(oVe),f&&t(bd),w(py),f&&t(rVe),f&&t(Oo),w(_y),w(by),w(_F),w(vy),w(vF),f&&t(tVe),f&&t(Td),w(Fy),f&&t(aVe),f&&t(Vo),w(Ty),w(Ey),w(TF),w(Cy),w(CF),f&&t(nVe),f&&t(Cd),w(wy),f&&t(sVe),f&&t(Xo),w(Ay),w(yy),w(AF),w(xy),w(IF),f&&t(lVe),f&&t(Ld),w($y),f&&t(iVe),f&&t(zo),w(ky),w(Ry),w(jF),w(Py),w(QF),f&&t(dVe),f&&t($d),w(By),f&&t(cVe),f&&t(Qo),w(Ny),w(qy),w(HF),w(jy),w(sT),f&&t(fVe),f&&t(Rd),w(Dy),f&&t(mVe),f&&t(Wo),w(Gy),w(Vy),w(iT),w(Xy),w(mT),f&&t(gVe),f&&t(Nd),w(Qy),f&&t(hVe),f&&t(Ho),w(Wy),w(Uy),w(hT),w(Jy),w(TT),f&&t(pVe),f&&t(jd),w(Yy),f&&t(_Ve),f&&t(Uo),w(Ky),w(e8),w(ET),w(o8),w(yT),f&&t(uVe),f&&t(Vd),w(r8),f&&t(bVe),f&&t(Jo),w(t8),w(n8),w($T),w(s8),w(PT),f&&t(vVe),f&&t(Qd),w(i8),f&&t(FVe),f&&t(Yo),w(d8),w(f8),w(NT),w(m8),w(jT),f&&t(TVe),f&&t(Ud),w(g8),f&&t(MVe),f&&t(Ko),w(h8),w(_8),w(GT),w(u8),w(WT),f&&t(EVe),f&&t(Kd),w(b8),f&&t(CVe),f&&t(Zo),w(v8),w(T8),w(UT),w(M8),w(KT),f&&t(wVe),f&&t(oc),w(E8),f&&t(AVe),f&&t(er),w(C8),w(A8),w(eM),w(L8),w(WM),f&&t(LVe),f&&t(ac),w(y8),f&&t(yVe),f&&t(or),w(x8),w(k8),w(UM),w(S8),w(vE),f&&t(xVe),f&&t(lc),w(R8),f&&t($Ve),f&&t(rr),w(P8),w(N8),w(TE),w(I8),w(BE),f&&t(kVe),f&&t(cc),w(q8),f&&t(SVe),f&&t(tr),w(j8),w(G8),w(IE),w(O8),w(OE),f&&t(RVe),f&&t(gc),w(V8),f&&t(PVe),f&&t(ar),w(X8),w(Q8),w(XE),w(W8),w(f4),f&&t(BVe),f&&t(_c),w(H8),f&&t(NVe),f&&t(nr),w(U8),w(Y8),w(g4),w(K8),w(C4),f&&t(IVe),f&&t(vc),w(Z8),f&&t(qVe),f&&t(sr),w(ex),w(rx),w(A4),w(tx),w(Z4),f&&t(jVe),f&&t(Mc),w(ax),f&&t(DVe),f&&t(lr),w(nx),w(lx),w(oC),w(ix),w(vC),f&&t(GVe),f&&t(wc),w(dx),f&&t(OVe),f&&t(ir),w(cx),w(mx),w(TC),w(gx),w(CC),f&&t(VVe),f&&t(yc),w(px),f&&t(XVe),f&&t(dr),w(_x),w(bx),w(AC),w(vx),w(yC),f&&t(zVe),f&&t(kc),w(Fx),f&&t(QVe),f&&t(cr),w(Tx),w(Ex),w($C),w(Cx),w(YC),f&&t(WVe),f&&t(Pc),w(wx),f&&t(HVe),f&&t(fr),w(Ax),w(yx),w(ZC),w(xx),w(F5),f&&t(UVe),f&&t(Ic),w($x),f&&t(JVe),f&&t(mr),w(kx),w(Rx),w(M5),w(Px),w(C5),f&&t(YVe),f&&t(Dc),w(Bx),f&&t(KVe),f&&t(gr),w(Nx),w(qx),w(A5),w(jx),w(y5),f&&t(ZVe),f&&t(Vc),w(Dx),f&&t(eXe),f&&t(hr),w(Gx),w(Vx),w($5),w(Xx),w(a3),f&&t(oXe),f&&t(Qc),w(zx),f&&t(rXe),f&&t(pr),w(Qx),w(Hx),w(s3),w(Ux),w(u3),f&&t(tXe),f&&t(Uc),w(Jx),f&&t(aXe),f&&t(_r),w(Yx),w(Zx),w(v3),w(e$),w(R3),f&&t(nXe),f&&t(Kc),w(o$),f&&t(sXe),f&&t(ur),w(r$),w(a$),w(B3),w(n$),w(Q3),f&&t(lXe),f&&t(of),w(s$),f&&t(iXe),f&&t(br),w(l$),w(d$),w(H3),w(c$),w(n0),f&&t(dXe),f&&t(af),w(f$),f&&t(cXe),f&&t(vr),w(m$),w(h$),w(l0),w(p$),w(b0),f&&t(fXe),f&&t(lf),w(_$),f&&t(mXe),f&&t(Fr),w(u$),w(v$),w(F0),w(F$),w(k0),f&&t(gXe),f&&t(ff),w(T$),f&&t(hXe),f&&t(Tr),w(M$),w(C$),w(R0),w(w$),w(O0),f&&t(pXe),f&&t(hf),w(A$),f&&t(_Xe),f&&t(Mr),w(L$),w(x$),w(X0),w($$),w(Z0),f&&t(uXe),f&&t(uf),w(k$),f&&t(bXe),f&&t(Er),w(S$),w(P$),w(ow),w(B$),w(tw),f&&t(vXe),f&&t(Ff),w(N$),f&&t(FXe),f&&t(Cr),w(I$),w(j$),w(nw),w(D$),w(iw),f&&t(TXe),f&&t(Ef),w(O$),f&&t(MXe),f&&t(wr),w(V$),w(z$),w(cw),w(Q$),w(mw)}}}const iXt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function dXt($){return lOt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _Xt extends tOt{constructor(g){super();aOt(this,g,dXt,lXt,nOt,{})}}export{_Xt as default,iXt as metadata};
