import{S as Zs,i as Js,s as Ks,e as r,k as p,w,t as n,M as Qs,c as a,d as o,m as h,a as s,x as M,h as i,b as c,G as e,g as u,y as $,q as N,o as y,B as E,v as Xs,L as Sa}from"../../chunks/vendor-hf-doc-builder.js";import{T as Oa}from"../../chunks/Tip-hf-doc-builder.js";import{D as Be}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Wa}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as mt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Da}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ys(x){let d,b,g,f,v;return f=new Wa({props:{code:`from transformers import MobileNetV1Config, MobileNetV1Model

# Initializing a "mobilenet_v1_1.0_224" style configuration
configuration = MobileNetV1Config()

# Initializing a model from the "mobilenet_v1_1.0_224" style configuration
model = MobileNetV1Model(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileNetV1Config, MobileNetV1Model

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a &quot;mobilenet_v1_1.0_224&quot; style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MobileNetV1Config()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the &quot;mobilenet_v1_1.0_224&quot; style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileNetV1Model(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=r("p"),b=n("Example:"),g=p(),w(f.$$.fragment)},l(l){d=a(l,"P",{});var _=s(d);b=i(_,"Example:"),_.forEach(o),g=h(l),M(f.$$.fragment,l)},m(l,_){u(l,d,_),e(d,b),u(l,g,_),$(f,l,_),v=!0},p:Sa,i(l){v||(N(f.$$.fragment,l),v=!0)},o(l){y(f.$$.fragment,l),v=!1},d(l){l&&o(d),l&&o(g),E(f,l)}}}function en(x){let d,b;return{c(){d=r("p"),b=n(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(g){d=a(g,"P",{});var f=s(d);b=i(f,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),f.forEach(o)},m(g,f){u(g,d,f),e(d,b)},d(g){g&&o(d)}}}function tn(x){let d,b,g,f,v;return{c(){d=r("p"),b=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),f=n("Module"),v=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=a(l,"P",{});var _=s(d);b=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a(_,"CODE",{});var z=s(g);f=i(z,"Module"),z.forEach(o),v=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(l,_){u(l,d,_),e(d,b),e(d,g),e(g,f),e(d,v)},d(l){l&&o(d)}}}function on(x){let d,b,g,f,v;return f=new Wa({props:{code:`from transformers import MobileNetV1FeatureExtractor, MobileNetV1Model
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileNetV1FeatureExtractor.from_pretrained("Matthijs/mobilenet_v1_1.0_224")
model = MobileNetV1Model.from_pretrained("Matthijs/mobilenet_v1_1.0_224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileNetV1FeatureExtractor, MobileNetV1Model
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileNetV1FeatureExtractor.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v1_1.0_224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileNetV1Model.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v1_1.0_224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),{c(){d=r("p"),b=n("Example:"),g=p(),w(f.$$.fragment)},l(l){d=a(l,"P",{});var _=s(d);b=i(_,"Example:"),_.forEach(o),g=h(l),M(f.$$.fragment,l)},m(l,_){u(l,d,_),e(d,b),u(l,g,_),$(f,l,_),v=!0},p:Sa,i(l){v||(N(f.$$.fragment,l),v=!0)},o(l){y(f.$$.fragment,l),v=!1},d(l){l&&o(d),l&&o(g),E(f,l)}}}function rn(x){let d,b,g,f,v;return{c(){d=r("p"),b=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),f=n("Module"),v=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){d=a(l,"P",{});var _=s(d);b=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a(_,"CODE",{});var z=s(g);f=i(z,"Module"),z.forEach(o),v=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(l,_){u(l,d,_),e(d,b),e(d,g),e(g,f),e(d,v)},d(l){l&&o(d)}}}function an(x){let d,b,g,f,v;return f=new Wa({props:{code:`from transformers import MobileNetV1FeatureExtractor, MobileNetV1ForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileNetV1FeatureExtractor.from_pretrained("Matthijs/mobilenet_v1_1.0_224")
model = MobileNetV1ForImageClassification.from_pretrained("Matthijs/mobilenet_v1_1.0_224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileNetV1FeatureExtractor, MobileNetV1ForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileNetV1FeatureExtractor.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v1_1.0_224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileNetV1ForImageClassification.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v1_1.0_224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){d=r("p"),b=n("Example:"),g=p(),w(f.$$.fragment)},l(l){d=a(l,"P",{});var _=s(d);b=i(_,"Example:"),_.forEach(o),g=h(l),M(f.$$.fragment,l)},m(l,_){u(l,d,_),e(d,b),u(l,g,_),$(f,l,_),v=!0},p:Sa,i(l){v||(N(f.$$.fragment,l),v=!0)},o(l){y(f.$$.fragment,l),v=!1},d(l){l&&o(d),l&&o(g),E(f,l)}}}function sn(x){let d,b,g,f,v,l,_,z,Co,eo,S,Q,ft,ge,jo,ut,ko,to,X,zo,_e,Ao,Lo,oo,Ue,qo,ro,Ge,gt,Oo,ao,Ze,Do,so,T,_t,V,So,Y,Wo,bt,Ho,Ro,vt,Bo,Uo,wt,Go,Zo,Mt,Jo,Ko,$t,Qo,Xo,Yo,Nt,yt,er,tr,Et,be,or,Je,rr,ar,sr,xt,ve,nr,we,ir,lr,cr,Tt,W,dr,Ke,pr,hr,Vt,mr,fr,no,Qe,ur,io,C,It,Me,gr,Xe,_r,br,vr,Ft,$e,wr,Pt,Mr,$r,Nr,Ct,jt,yr,Er,kt,Ne,xr,zt,Tr,Vr,lo,L,Ir,ye,Fr,Pr,Ee,Cr,jr,co,H,ee,At,xe,kr,Lt,zr,po,I,Te,Ar,R,Lr,Ye,qr,Or,Ve,Dr,Sr,Wr,B,Hr,et,Rr,Br,tt,Ur,Gr,Zr,te,ho,U,oe,qt,Ie,Jr,Ot,Kr,mo,F,Fe,Qr,Dt,Xr,Yr,Pe,ea,ot,ta,oa,ra,q,Ce,aa,St,sa,na,re,fo,G,ae,Wt,je,ia,Ht,la,uo,A,ke,ca,ze,da,Ae,pa,ha,ma,j,Le,fa,Z,ua,rt,ga,_a,Rt,ba,va,wa,se,Ma,ne,go,J,ie,Bt,qe,$a,Ut,Na,_o,P,Oe,ya,Gt,Ea,xa,De,Ta,Se,Va,Ia,Fa,k,We,Pa,K,Ca,at,ja,ka,Zt,za,Aa,La,le,qa,ce,bo;return l=new mt({}),ge=new mt({}),xe=new mt({}),Te=new Be({props:{name:"class transformers.MobileNetV1Config",anchor:"transformers.MobileNetV1Config",parameters:[{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 224"},{name:"depth_multiplier",val:" = 1.0"},{name:"min_depth",val:" = 8"},{name:"hidden_act",val:" = 'relu6'"},{name:"tf_padding",val:" = True"},{name:"classifier_dropout_prob",val:" = 0.999"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 0.001"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileNetV1Config.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.MobileNetV1Config.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.MobileNetV1Config.depth_multiplier",description:`<strong>depth_multiplier</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Shrinks or expands the number of channels in each layer. Default is 1.0, which starts the network with 32
channels. This is sometimes also called &#x201C;alpha&#x201D; or &#x201C;width multiplier&#x201D;.`,name:"depth_multiplier"},{anchor:"transformers.MobileNetV1Config.min_depth",description:`<strong>min_depth</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
All layers will have at least this many channels.`,name:"min_depth"},{anchor:"transformers.MobileNetV1Config.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;relu6&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the Transformer encoder and convolution layers.`,name:"hidden_act"},{anchor:"transformers.MobileNetV1Config.tf_padding",description:`<strong>tf_padding</strong> (<code>bool</code>, <code>optional</code>, defaults to <code>True</code>) &#x2014;
Whether to use TensorFlow padding rules on the convolution layers.`,name:"tf_padding"},{anchor:"transformers.MobileNetV1Config.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The dropout ratio for attached classifiers.`,name:"classifier_dropout_prob"},{anchor:"transformers.MobileNetV1Config.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MobileNetV1Config.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 0.001) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/mobilenet_v1/configuration_mobilenet_v1.py#L36"}}),te=new Da({props:{anchor:"transformers.MobileNetV1Config.example",$$slots:{default:[Ys]},$$scope:{ctx:x}}}),Ie=new mt({}),Fe=new Be({props:{name:"class transformers.MobileNetV1FeatureExtractor",anchor:"transformers.MobileNetV1FeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 256"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_center_crop",val:" = True"},{name:"crop_size",val:" = 224"},{name:"do_normalize",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileNetV1FeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MobileNetV1FeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 256) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to match the shorter side. Only has an effect if
<code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.MobileNetV1FeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MobileNetV1FeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.MobileNetV1FeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.MobileNetV1FeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input to the range between -1 and +1.`,name:"do_normalize"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/mobilenet_v1/feature_extraction_mobilenet_v1.py#L30"}}),Ce=new Be({props:{name:"__call__",anchor:"transformers.MobileNetV1FeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileNetV1FeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MobileNetV1FeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_17799/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/mobilenet_v1/feature_extraction_mobilenet_v1.py#L77",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17799/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17799/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),re=new Oa({props:{warning:!0,$$slots:{default:[en]},$$scope:{ctx:x}}}),je=new mt({}),ke=new Be({props:{name:"class transformers.MobileNetV1Model",anchor:"transformers.MobileNetV1Model",parameters:[{name:"config",val:": MobileNetV1Config"},{name:"add_pooling_layer",val:": bool = True"}],parametersDescription:[{anchor:"transformers.MobileNetV1Model.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config">MobileNetV1Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/mobilenet_v1/modeling_mobilenet_v1.py#L307"}}),Le=new Be({props:{name:"forward",anchor:"transformers.MobileNetV1Model.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileNetV1Model.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1FeatureExtractor">MobileNetV1FeatureExtractor</a>. See
<a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1FeatureExtractor.__call__">MobileNetV1FeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileNetV1Model.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileNetV1Model.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17799/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/mobilenet_v1/modeling_mobilenet_v1.py#L361",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config"
>MobileNetV1Config</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),se=new Oa({props:{$$slots:{default:[tn]},$$scope:{ctx:x}}}),ne=new Da({props:{anchor:"transformers.MobileNetV1Model.forward.example",$$slots:{default:[on]},$$scope:{ctx:x}}}),qe=new mt({}),Oe=new Be({props:{name:"class transformers.MobileNetV1ForImageClassification",anchor:"transformers.MobileNetV1ForImageClassification",parameters:[{name:"config",val:": MobileNetV1Config"}],parametersDescription:[{anchor:"transformers.MobileNetV1ForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config">MobileNetV1Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17799/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/mobilenet_v1/modeling_mobilenet_v1.py#L418"}}),We=new Be({props:{name:"forward",anchor:"transformers.MobileNetV1ForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileNetV1ForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1FeatureExtractor">MobileNetV1FeatureExtractor</a>. See
<a href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1FeatureExtractor.__call__">MobileNetV1FeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileNetV1ForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileNetV1ForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17799/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileNetV1ForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17799/src/transformers/models/mobilenet_v1/modeling_mobilenet_v1.py#L434",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17799/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config"
>MobileNetV1Config</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17799/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),le=new Oa({props:{$$slots:{default:[rn]},$$scope:{ctx:x}}}),ce=new Da({props:{anchor:"transformers.MobileNetV1ForImageClassification.forward.example",$$slots:{default:[an]},$$scope:{ctx:x}}}),{c(){d=r("meta"),b=p(),g=r("h1"),f=r("a"),v=r("span"),w(l.$$.fragment),_=p(),z=r("span"),Co=n("MobileNet V1"),eo=p(),S=r("h2"),Q=r("a"),ft=r("span"),w(ge.$$.fragment),jo=p(),ut=r("span"),ko=n("Overview"),to=p(),X=r("p"),zo=n("The MobileNet model was proposed in "),_e=r("a"),Ao=n("MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications"),Lo=n(" by Andrew G. Howard, Menglong Zhu, Bo Chen, Dmitry Kalenichenko, Weijun Wang, Tobias Weyand, Marco Andreetto, Hartwig Adam."),oo=p(),Ue=r("p"),qo=n("The abstract from the paper is the following:"),ro=p(),Ge=r("p"),gt=r("em"),Oo=n("We present a class of efficient models called MobileNets for mobile and embedded vision applications. MobileNets are based on a streamlined architecture that uses depth-wise separable convolutions to build light weight deep neural networks. We introduce two simple global hyper-parameters that efficiently trade off between latency and accuracy. These hyper-parameters allow the model builder to choose the right sized model for their application based on the constraints of the problem. We present extensive experiments on resource and accuracy tradeoffs and show strong performance compared to other popular models on ImageNet classification. We then demonstrate the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization."),ao=p(),Ze=r("p"),Do=n("Tips:"),so=p(),T=r("ul"),_t=r("li"),V=r("p"),So=n("The checkpoints are named "),Y=r("strong"),Wo=n("mobilenet_v1_"),bt=r("em"),Ho=n("depth"),Ro=n("_"),vt=r("em"),Bo=n("size"),Uo=n(", for example "),wt=r("strong"),Go=n("mobilenet_v1_1.0_224"),Zo=n(", where "),Mt=r("strong"),Jo=n("1.0"),Ko=n(" is the depth multiplier (sometimes also referred to as \u201Calpha\u201D or the width multiplier) and "),$t=r("strong"),Qo=n("224"),Xo=n(" is the resolution of the input images the model was trained on."),Yo=p(),Nt=r("li"),yt=r("p"),er=n("Even though the checkpoint is trained on images of specific size, the model will work on images of any size. The smallest supported image size is 32x32."),tr=p(),Et=r("li"),be=r("p"),or=n("One can use "),Je=r("a"),rr=n("MobileNetV1FeatureExtractor"),ar=n(" to prepare images for the model."),sr=p(),xt=r("li"),ve=r("p"),nr=n("The available image classification checkpoints are pre-trained on "),we=r("a"),ir=n("ImageNet-1k"),lr=n(" (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes). However, the model predicts 1001 classes: the 1000 classes from ImageNet plus an extra \u201Cbackground\u201D class (index 0)."),cr=p(),Tt=r("li"),W=r("p"),dr=n("The original TensorFlow checkpoints use different padding rules than PyTorch, requiring the model to determine the padding amount at inference time, since this depends on the input image size. To use native PyTorch padding behavior, create a "),Ke=r("a"),pr=n("MobileNetV1Config"),hr=n(" with "),Vt=r("code"),mr=n("tf_padding = False"),fr=n("."),no=p(),Qe=r("p"),ur=n("Unsupported features:"),io=p(),C=r("ul"),It=r("li"),Me=r("p"),gr=n("The "),Xe=r("a"),_r=n("MobileNetV1Model"),br=n(" outputs a globally pooled version of the last hidden state. In the original model it is possible to use a 7x7 average pooling layer with stride 2 instead of global pooling. For larger inputs, this gives a pooled output that is larger than 1x1 pixel. The HuggingFace implementation does not support this."),vr=p(),Ft=r("li"),$e=r("p"),wr=n("It is currently not possible to specify an "),Pt=r("code"),Mr=n("output_stride"),$r=n(". For smaller output strides, the original model invokes dilated convolution to prevent the spatial resolution from being reduced further. The output stride of the HuggingFace model is always 32."),Nr=p(),Ct=r("li"),jt=r("p"),yr=n("The original TensorFlow checkpoints include quantized models. We do not support these models as they include additional \u201CFakeQuantization\u201D operations to unquantize the weights."),Er=p(),kt=r("li"),Ne=r("p"),xr=n("It\u2019s common to extract the output from the pointwise layers at indices 5, 11, 12, 13 for downstream purposes. Using "),zt=r("code"),Tr=n("output_hidden_states=True"),Vr=n(" returns the output from all intermediate layers. There is currently no way to limit this to specific layers."),lo=p(),L=r("p"),Ir=n("This model was contributed by "),ye=r("a"),Fr=n("matthijs"),Pr=n(". The original code and weights can be found "),Ee=r("a"),Cr=n("here"),jr=n("."),co=p(),H=r("h2"),ee=r("a"),At=r("span"),w(xe.$$.fragment),kr=p(),Lt=r("span"),zr=n("MobileNetV1Config"),po=p(),I=r("div"),w(Te.$$.fragment),Ar=p(),R=r("p"),Lr=n("This is the configuration class to store the configuration of a "),Ye=r("a"),qr=n("MobileNetV1Model"),Or=n(`. It is used to instantiate a
MobileNetV1 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileNetV1
`),Ve=r("a"),Dr=n("Matthijs/mobilenet_v1_1.0_224"),Sr=n(" architecture."),Wr=p(),B=r("p"),Hr=n("Configuration objects inherit from "),et=r("a"),Rr=n("PretrainedConfig"),Br=n(` and can be used to control the model outputs. Read the
documentation from `),tt=r("a"),Ur=n("PretrainedConfig"),Gr=n(" for more information."),Zr=p(),w(te.$$.fragment),ho=p(),U=r("h2"),oe=r("a"),qt=r("span"),w(Ie.$$.fragment),Jr=p(),Ot=r("span"),Kr=n("MobileNetV1FeatureExtractor"),mo=p(),F=r("div"),w(Fe.$$.fragment),Qr=p(),Dt=r("p"),Xr=n("Constructs a MobileNetV1 feature extractor."),Yr=p(),Pe=r("p"),ea=n("This feature extractor inherits from "),ot=r("a"),ta=n("FeatureExtractionMixin"),oa=n(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ra=p(),q=r("div"),w(Ce.$$.fragment),aa=p(),St=r("p"),sa=n("Main method to prepare for the model one or several image(s)."),na=p(),w(re.$$.fragment),fo=p(),G=r("h2"),ae=r("a"),Wt=r("span"),w(je.$$.fragment),ia=p(),Ht=r("span"),la=n("MobileNetV1Model"),uo=p(),A=r("div"),w(ke.$$.fragment),ca=p(),ze=r("p"),da=n(`The bare MobileNetV1 model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Ae=r("a"),pa=n("torch.nn.Module"),ha=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ma=p(),j=r("div"),w(Le.$$.fragment),fa=p(),Z=r("p"),ua=n("The "),rt=r("a"),ga=n("MobileNetV1Model"),_a=n(" forward method, overrides the "),Rt=r("code"),ba=n("__call__"),va=n(" special method."),wa=p(),w(se.$$.fragment),Ma=p(),w(ne.$$.fragment),go=p(),J=r("h2"),ie=r("a"),Bt=r("span"),w(qe.$$.fragment),$a=p(),Ut=r("span"),Na=n("MobileNetV1ForImageClassification"),_o=p(),P=r("div"),w(Oe.$$.fragment),ya=p(),Gt=r("p"),Ea=n(`MobileNetV1 model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),xa=p(),De=r("p"),Ta=n("This model is a PyTorch "),Se=r("a"),Va=n("torch.nn.Module"),Ia=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Fa=p(),k=r("div"),w(We.$$.fragment),Pa=p(),K=r("p"),Ca=n("The "),at=r("a"),ja=n("MobileNetV1ForImageClassification"),ka=n(" forward method, overrides the "),Zt=r("code"),za=n("__call__"),Aa=n(" special method."),La=p(),w(le.$$.fragment),qa=p(),w(ce.$$.fragment),this.h()},l(t){const m=Qs('[data-svelte="svelte-1phssyn"]',document.head);d=a(m,"META",{name:!0,content:!0}),m.forEach(o),b=h(t),g=a(t,"H1",{class:!0});var He=s(g);f=a(He,"A",{id:!0,class:!0,href:!0});var Jt=s(f);v=a(Jt,"SPAN",{});var Kt=s(v);M(l.$$.fragment,Kt),Kt.forEach(o),Jt.forEach(o),_=h(He),z=a(He,"SPAN",{});var Qt=s(z);Co=i(Qt,"MobileNet V1"),Qt.forEach(o),He.forEach(o),eo=h(t),S=a(t,"H2",{class:!0});var Re=s(S);Q=a(Re,"A",{id:!0,class:!0,href:!0});var Xt=s(Q);ft=a(Xt,"SPAN",{});var Ha=s(ft);M(ge.$$.fragment,Ha),Ha.forEach(o),Xt.forEach(o),jo=h(Re),ut=a(Re,"SPAN",{});var Ra=s(ut);ko=i(Ra,"Overview"),Ra.forEach(o),Re.forEach(o),to=h(t),X=a(t,"P",{});var vo=s(X);zo=i(vo,"The MobileNet model was proposed in "),_e=a(vo,"A",{href:!0,rel:!0});var Ba=s(_e);Ao=i(Ba,"MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications"),Ba.forEach(o),Lo=i(vo," by Andrew G. Howard, Menglong Zhu, Bo Chen, Dmitry Kalenichenko, Weijun Wang, Tobias Weyand, Marco Andreetto, Hartwig Adam."),vo.forEach(o),oo=h(t),Ue=a(t,"P",{});var Ua=s(Ue);qo=i(Ua,"The abstract from the paper is the following:"),Ua.forEach(o),ro=h(t),Ge=a(t,"P",{});var Ga=s(Ge);gt=a(Ga,"EM",{});var Za=s(gt);Oo=i(Za,"We present a class of efficient models called MobileNets for mobile and embedded vision applications. MobileNets are based on a streamlined architecture that uses depth-wise separable convolutions to build light weight deep neural networks. We introduce two simple global hyper-parameters that efficiently trade off between latency and accuracy. These hyper-parameters allow the model builder to choose the right sized model for their application based on the constraints of the problem. We present extensive experiments on resource and accuracy tradeoffs and show strong performance compared to other popular models on ImageNet classification. We then demonstrate the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization."),Za.forEach(o),Ga.forEach(o),ao=h(t),Ze=a(t,"P",{});var Ja=s(Ze);Do=i(Ja,"Tips:"),Ja.forEach(o),so=h(t),T=a(t,"UL",{});var O=s(T);_t=a(O,"LI",{});var Ka=s(_t);V=a(Ka,"P",{});var D=s(V);So=i(D,"The checkpoints are named "),Y=a(D,"STRONG",{});var Yt=s(Y);Wo=i(Yt,"mobilenet_v1_"),bt=a(Yt,"EM",{});var Qa=s(bt);Ho=i(Qa,"depth"),Qa.forEach(o),Ro=i(Yt,"_"),vt=a(Yt,"EM",{});var Xa=s(vt);Bo=i(Xa,"size"),Xa.forEach(o),Yt.forEach(o),Uo=i(D,", for example "),wt=a(D,"STRONG",{});var Ya=s(wt);Go=i(Ya,"mobilenet_v1_1.0_224"),Ya.forEach(o),Zo=i(D,", where "),Mt=a(D,"STRONG",{});var es=s(Mt);Jo=i(es,"1.0"),es.forEach(o),Ko=i(D," is the depth multiplier (sometimes also referred to as \u201Calpha\u201D or the width multiplier) and "),$t=a(D,"STRONG",{});var ts=s($t);Qo=i(ts,"224"),ts.forEach(o),Xo=i(D," is the resolution of the input images the model was trained on."),D.forEach(o),Ka.forEach(o),Yo=h(O),Nt=a(O,"LI",{});var os=s(Nt);yt=a(os,"P",{});var rs=s(yt);er=i(rs,"Even though the checkpoint is trained on images of specific size, the model will work on images of any size. The smallest supported image size is 32x32."),rs.forEach(o),os.forEach(o),tr=h(O),Et=a(O,"LI",{});var as=s(Et);be=a(as,"P",{});var wo=s(be);or=i(wo,"One can use "),Je=a(wo,"A",{href:!0});var ss=s(Je);rr=i(ss,"MobileNetV1FeatureExtractor"),ss.forEach(o),ar=i(wo," to prepare images for the model."),wo.forEach(o),as.forEach(o),sr=h(O),xt=a(O,"LI",{});var ns=s(xt);ve=a(ns,"P",{});var Mo=s(ve);nr=i(Mo,"The available image classification checkpoints are pre-trained on "),we=a(Mo,"A",{href:!0,rel:!0});var is=s(we);ir=i(is,"ImageNet-1k"),is.forEach(o),lr=i(Mo," (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes). However, the model predicts 1001 classes: the 1000 classes from ImageNet plus an extra \u201Cbackground\u201D class (index 0)."),Mo.forEach(o),ns.forEach(o),cr=h(O),Tt=a(O,"LI",{});var ls=s(Tt);W=a(ls,"P",{});var st=s(W);dr=i(st,"The original TensorFlow checkpoints use different padding rules than PyTorch, requiring the model to determine the padding amount at inference time, since this depends on the input image size. To use native PyTorch padding behavior, create a "),Ke=a(st,"A",{href:!0});var cs=s(Ke);pr=i(cs,"MobileNetV1Config"),cs.forEach(o),hr=i(st," with "),Vt=a(st,"CODE",{});var ds=s(Vt);mr=i(ds,"tf_padding = False"),ds.forEach(o),fr=i(st,"."),st.forEach(o),ls.forEach(o),O.forEach(o),no=h(t),Qe=a(t,"P",{});var ps=s(Qe);ur=i(ps,"Unsupported features:"),ps.forEach(o),io=h(t),C=a(t,"UL",{});var de=s(C);It=a(de,"LI",{});var hs=s(It);Me=a(hs,"P",{});var $o=s(Me);gr=i($o,"The "),Xe=a($o,"A",{href:!0});var ms=s(Xe);_r=i(ms,"MobileNetV1Model"),ms.forEach(o),br=i($o," outputs a globally pooled version of the last hidden state. In the original model it is possible to use a 7x7 average pooling layer with stride 2 instead of global pooling. For larger inputs, this gives a pooled output that is larger than 1x1 pixel. The HuggingFace implementation does not support this."),$o.forEach(o),hs.forEach(o),vr=h(de),Ft=a(de,"LI",{});var fs=s(Ft);$e=a(fs,"P",{});var No=s($e);wr=i(No,"It is currently not possible to specify an "),Pt=a(No,"CODE",{});var us=s(Pt);Mr=i(us,"output_stride"),us.forEach(o),$r=i(No,". For smaller output strides, the original model invokes dilated convolution to prevent the spatial resolution from being reduced further. The output stride of the HuggingFace model is always 32."),No.forEach(o),fs.forEach(o),Nr=h(de),Ct=a(de,"LI",{});var gs=s(Ct);jt=a(gs,"P",{});var _s=s(jt);yr=i(_s,"The original TensorFlow checkpoints include quantized models. We do not support these models as they include additional \u201CFakeQuantization\u201D operations to unquantize the weights."),_s.forEach(o),gs.forEach(o),Er=h(de),kt=a(de,"LI",{});var bs=s(kt);Ne=a(bs,"P",{});var yo=s(Ne);xr=i(yo,"It\u2019s common to extract the output from the pointwise layers at indices 5, 11, 12, 13 for downstream purposes. Using "),zt=a(yo,"CODE",{});var vs=s(zt);Tr=i(vs,"output_hidden_states=True"),vs.forEach(o),Vr=i(yo," returns the output from all intermediate layers. There is currently no way to limit this to specific layers."),yo.forEach(o),bs.forEach(o),de.forEach(o),lo=h(t),L=a(t,"P",{});var nt=s(L);Ir=i(nt,"This model was contributed by "),ye=a(nt,"A",{href:!0,rel:!0});var ws=s(ye);Fr=i(ws,"matthijs"),ws.forEach(o),Pr=i(nt,". The original code and weights can be found "),Ee=a(nt,"A",{href:!0,rel:!0});var Ms=s(Ee);Cr=i(Ms,"here"),Ms.forEach(o),jr=i(nt,"."),nt.forEach(o),co=h(t),H=a(t,"H2",{class:!0});var Eo=s(H);ee=a(Eo,"A",{id:!0,class:!0,href:!0});var $s=s(ee);At=a($s,"SPAN",{});var Ns=s(At);M(xe.$$.fragment,Ns),Ns.forEach(o),$s.forEach(o),kr=h(Eo),Lt=a(Eo,"SPAN",{});var ys=s(Lt);zr=i(ys,"MobileNetV1Config"),ys.forEach(o),Eo.forEach(o),po=h(t),I=a(t,"DIV",{class:!0});var pe=s(I);M(Te.$$.fragment,pe),Ar=h(pe),R=a(pe,"P",{});var it=s(R);Lr=i(it,"This is the configuration class to store the configuration of a "),Ye=a(it,"A",{href:!0});var Es=s(Ye);qr=i(Es,"MobileNetV1Model"),Es.forEach(o),Or=i(it,`. It is used to instantiate a
MobileNetV1 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileNetV1
`),Ve=a(it,"A",{href:!0,rel:!0});var xs=s(Ve);Dr=i(xs,"Matthijs/mobilenet_v1_1.0_224"),xs.forEach(o),Sr=i(it," architecture."),it.forEach(o),Wr=h(pe),B=a(pe,"P",{});var lt=s(B);Hr=i(lt,"Configuration objects inherit from "),et=a(lt,"A",{href:!0});var Ts=s(et);Rr=i(Ts,"PretrainedConfig"),Ts.forEach(o),Br=i(lt,` and can be used to control the model outputs. Read the
documentation from `),tt=a(lt,"A",{href:!0});var Vs=s(tt);Ur=i(Vs,"PretrainedConfig"),Vs.forEach(o),Gr=i(lt," for more information."),lt.forEach(o),Zr=h(pe),M(te.$$.fragment,pe),pe.forEach(o),ho=h(t),U=a(t,"H2",{class:!0});var xo=s(U);oe=a(xo,"A",{id:!0,class:!0,href:!0});var Is=s(oe);qt=a(Is,"SPAN",{});var Fs=s(qt);M(Ie.$$.fragment,Fs),Fs.forEach(o),Is.forEach(o),Jr=h(xo),Ot=a(xo,"SPAN",{});var Ps=s(Ot);Kr=i(Ps,"MobileNetV1FeatureExtractor"),Ps.forEach(o),xo.forEach(o),mo=h(t),F=a(t,"DIV",{class:!0});var he=s(F);M(Fe.$$.fragment,he),Qr=h(he),Dt=a(he,"P",{});var Cs=s(Dt);Xr=i(Cs,"Constructs a MobileNetV1 feature extractor."),Cs.forEach(o),Yr=h(he),Pe=a(he,"P",{});var To=s(Pe);ea=i(To,"This feature extractor inherits from "),ot=a(To,"A",{href:!0});var js=s(ot);ta=i(js,"FeatureExtractionMixin"),js.forEach(o),oa=i(To,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),To.forEach(o),ra=h(he),q=a(he,"DIV",{class:!0});var ct=s(q);M(Ce.$$.fragment,ct),aa=h(ct),St=a(ct,"P",{});var ks=s(St);sa=i(ks,"Main method to prepare for the model one or several image(s)."),ks.forEach(o),na=h(ct),M(re.$$.fragment,ct),ct.forEach(o),he.forEach(o),fo=h(t),G=a(t,"H2",{class:!0});var Vo=s(G);ae=a(Vo,"A",{id:!0,class:!0,href:!0});var zs=s(ae);Wt=a(zs,"SPAN",{});var As=s(Wt);M(je.$$.fragment,As),As.forEach(o),zs.forEach(o),ia=h(Vo),Ht=a(Vo,"SPAN",{});var Ls=s(Ht);la=i(Ls,"MobileNetV1Model"),Ls.forEach(o),Vo.forEach(o),uo=h(t),A=a(t,"DIV",{class:!0});var dt=s(A);M(ke.$$.fragment,dt),ca=h(dt),ze=a(dt,"P",{});var Io=s(ze);da=i(Io,`The bare MobileNetV1 model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Ae=a(Io,"A",{href:!0,rel:!0});var qs=s(Ae);pa=i(qs,"torch.nn.Module"),qs.forEach(o),ha=i(Io,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Io.forEach(o),ma=h(dt),j=a(dt,"DIV",{class:!0});var me=s(j);M(Le.$$.fragment,me),fa=h(me),Z=a(me,"P",{});var pt=s(Z);ua=i(pt,"The "),rt=a(pt,"A",{href:!0});var Os=s(rt);ga=i(Os,"MobileNetV1Model"),Os.forEach(o),_a=i(pt," forward method, overrides the "),Rt=a(pt,"CODE",{});var Ds=s(Rt);ba=i(Ds,"__call__"),Ds.forEach(o),va=i(pt," special method."),pt.forEach(o),wa=h(me),M(se.$$.fragment,me),Ma=h(me),M(ne.$$.fragment,me),me.forEach(o),dt.forEach(o),go=h(t),J=a(t,"H2",{class:!0});var Fo=s(J);ie=a(Fo,"A",{id:!0,class:!0,href:!0});var Ss=s(ie);Bt=a(Ss,"SPAN",{});var Ws=s(Bt);M(qe.$$.fragment,Ws),Ws.forEach(o),Ss.forEach(o),$a=h(Fo),Ut=a(Fo,"SPAN",{});var Hs=s(Ut);Na=i(Hs,"MobileNetV1ForImageClassification"),Hs.forEach(o),Fo.forEach(o),_o=h(t),P=a(t,"DIV",{class:!0});var fe=s(P);M(Oe.$$.fragment,fe),ya=h(fe),Gt=a(fe,"P",{});var Rs=s(Gt);Ea=i(Rs,`MobileNetV1 model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Rs.forEach(o),xa=h(fe),De=a(fe,"P",{});var Po=s(De);Ta=i(Po,"This model is a PyTorch "),Se=a(Po,"A",{href:!0,rel:!0});var Bs=s(Se);Va=i(Bs,"torch.nn.Module"),Bs.forEach(o),Ia=i(Po,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Po.forEach(o),Fa=h(fe),k=a(fe,"DIV",{class:!0});var ue=s(k);M(We.$$.fragment,ue),Pa=h(ue),K=a(ue,"P",{});var ht=s(K);Ca=i(ht,"The "),at=a(ht,"A",{href:!0});var Us=s(at);ja=i(Us,"MobileNetV1ForImageClassification"),Us.forEach(o),ka=i(ht," forward method, overrides the "),Zt=a(ht,"CODE",{});var Gs=s(Zt);za=i(Gs,"__call__"),Gs.forEach(o),Aa=i(ht," special method."),ht.forEach(o),La=h(ue),M(le.$$.fragment,ue),qa=h(ue),M(ce.$$.fragment,ue),ue.forEach(o),fe.forEach(o),this.h()},h(){c(d,"name","hf:doc:metadata"),c(d,"content",JSON.stringify(nn)),c(f,"id","mobilenet-v1"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#mobilenet-v1"),c(g,"class","relative group"),c(Q,"id","overview"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#overview"),c(S,"class","relative group"),c(_e,"href","https://arxiv.org/abs/1704.04861"),c(_e,"rel","nofollow"),c(Je,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1FeatureExtractor"),c(we,"href","https://huggingface.co/datasets/imagenet-1k"),c(we,"rel","nofollow"),c(Ke,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Config"),c(Xe,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Model"),c(ye,"href","https://huggingface.co/Matthijs"),c(ye,"rel","nofollow"),c(Ee,"href","https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet_v1.md"),c(Ee,"rel","nofollow"),c(ee,"id","transformers.MobileNetV1Config"),c(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ee,"href","#transformers.MobileNetV1Config"),c(H,"class","relative group"),c(Ye,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Model"),c(Ve,"href","https://huggingface.co/Matthijs/mobilenet_v1_1.0_224"),c(Ve,"rel","nofollow"),c(et,"href","/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig"),c(tt,"href","/docs/transformers/pr_17799/en/main_classes/configuration#transformers.PretrainedConfig"),c(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oe,"id","transformers.MobileNetV1FeatureExtractor"),c(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oe,"href","#transformers.MobileNetV1FeatureExtractor"),c(U,"class","relative group"),c(ot,"href","/docs/transformers/pr_17799/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),c(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ae,"id","transformers.MobileNetV1Model"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#transformers.MobileNetV1Model"),c(G,"class","relative group"),c(Ae,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Ae,"rel","nofollow"),c(rt,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1Model"),c(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ie,"id","transformers.MobileNetV1ForImageClassification"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#transformers.MobileNetV1ForImageClassification"),c(J,"class","relative group"),c(Se,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Se,"rel","nofollow"),c(at,"href","/docs/transformers/pr_17799/en/model_doc/mobilenet_v1#transformers.MobileNetV1ForImageClassification"),c(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,m){e(document.head,d),u(t,b,m),u(t,g,m),e(g,f),e(f,v),$(l,v,null),e(g,_),e(g,z),e(z,Co),u(t,eo,m),u(t,S,m),e(S,Q),e(Q,ft),$(ge,ft,null),e(S,jo),e(S,ut),e(ut,ko),u(t,to,m),u(t,X,m),e(X,zo),e(X,_e),e(_e,Ao),e(X,Lo),u(t,oo,m),u(t,Ue,m),e(Ue,qo),u(t,ro,m),u(t,Ge,m),e(Ge,gt),e(gt,Oo),u(t,ao,m),u(t,Ze,m),e(Ze,Do),u(t,so,m),u(t,T,m),e(T,_t),e(_t,V),e(V,So),e(V,Y),e(Y,Wo),e(Y,bt),e(bt,Ho),e(Y,Ro),e(Y,vt),e(vt,Bo),e(V,Uo),e(V,wt),e(wt,Go),e(V,Zo),e(V,Mt),e(Mt,Jo),e(V,Ko),e(V,$t),e($t,Qo),e(V,Xo),e(T,Yo),e(T,Nt),e(Nt,yt),e(yt,er),e(T,tr),e(T,Et),e(Et,be),e(be,or),e(be,Je),e(Je,rr),e(be,ar),e(T,sr),e(T,xt),e(xt,ve),e(ve,nr),e(ve,we),e(we,ir),e(ve,lr),e(T,cr),e(T,Tt),e(Tt,W),e(W,dr),e(W,Ke),e(Ke,pr),e(W,hr),e(W,Vt),e(Vt,mr),e(W,fr),u(t,no,m),u(t,Qe,m),e(Qe,ur),u(t,io,m),u(t,C,m),e(C,It),e(It,Me),e(Me,gr),e(Me,Xe),e(Xe,_r),e(Me,br),e(C,vr),e(C,Ft),e(Ft,$e),e($e,wr),e($e,Pt),e(Pt,Mr),e($e,$r),e(C,Nr),e(C,Ct),e(Ct,jt),e(jt,yr),e(C,Er),e(C,kt),e(kt,Ne),e(Ne,xr),e(Ne,zt),e(zt,Tr),e(Ne,Vr),u(t,lo,m),u(t,L,m),e(L,Ir),e(L,ye),e(ye,Fr),e(L,Pr),e(L,Ee),e(Ee,Cr),e(L,jr),u(t,co,m),u(t,H,m),e(H,ee),e(ee,At),$(xe,At,null),e(H,kr),e(H,Lt),e(Lt,zr),u(t,po,m),u(t,I,m),$(Te,I,null),e(I,Ar),e(I,R),e(R,Lr),e(R,Ye),e(Ye,qr),e(R,Or),e(R,Ve),e(Ve,Dr),e(R,Sr),e(I,Wr),e(I,B),e(B,Hr),e(B,et),e(et,Rr),e(B,Br),e(B,tt),e(tt,Ur),e(B,Gr),e(I,Zr),$(te,I,null),u(t,ho,m),u(t,U,m),e(U,oe),e(oe,qt),$(Ie,qt,null),e(U,Jr),e(U,Ot),e(Ot,Kr),u(t,mo,m),u(t,F,m),$(Fe,F,null),e(F,Qr),e(F,Dt),e(Dt,Xr),e(F,Yr),e(F,Pe),e(Pe,ea),e(Pe,ot),e(ot,ta),e(Pe,oa),e(F,ra),e(F,q),$(Ce,q,null),e(q,aa),e(q,St),e(St,sa),e(q,na),$(re,q,null),u(t,fo,m),u(t,G,m),e(G,ae),e(ae,Wt),$(je,Wt,null),e(G,ia),e(G,Ht),e(Ht,la),u(t,uo,m),u(t,A,m),$(ke,A,null),e(A,ca),e(A,ze),e(ze,da),e(ze,Ae),e(Ae,pa),e(ze,ha),e(A,ma),e(A,j),$(Le,j,null),e(j,fa),e(j,Z),e(Z,ua),e(Z,rt),e(rt,ga),e(Z,_a),e(Z,Rt),e(Rt,ba),e(Z,va),e(j,wa),$(se,j,null),e(j,Ma),$(ne,j,null),u(t,go,m),u(t,J,m),e(J,ie),e(ie,Bt),$(qe,Bt,null),e(J,$a),e(J,Ut),e(Ut,Na),u(t,_o,m),u(t,P,m),$(Oe,P,null),e(P,ya),e(P,Gt),e(Gt,Ea),e(P,xa),e(P,De),e(De,Ta),e(De,Se),e(Se,Va),e(De,Ia),e(P,Fa),e(P,k),$(We,k,null),e(k,Pa),e(k,K),e(K,Ca),e(K,at),e(at,ja),e(K,ka),e(K,Zt),e(Zt,za),e(K,Aa),e(k,La),$(le,k,null),e(k,qa),$(ce,k,null),bo=!0},p(t,[m]){const He={};m&2&&(He.$$scope={dirty:m,ctx:t}),te.$set(He);const Jt={};m&2&&(Jt.$$scope={dirty:m,ctx:t}),re.$set(Jt);const Kt={};m&2&&(Kt.$$scope={dirty:m,ctx:t}),se.$set(Kt);const Qt={};m&2&&(Qt.$$scope={dirty:m,ctx:t}),ne.$set(Qt);const Re={};m&2&&(Re.$$scope={dirty:m,ctx:t}),le.$set(Re);const Xt={};m&2&&(Xt.$$scope={dirty:m,ctx:t}),ce.$set(Xt)},i(t){bo||(N(l.$$.fragment,t),N(ge.$$.fragment,t),N(xe.$$.fragment,t),N(Te.$$.fragment,t),N(te.$$.fragment,t),N(Ie.$$.fragment,t),N(Fe.$$.fragment,t),N(Ce.$$.fragment,t),N(re.$$.fragment,t),N(je.$$.fragment,t),N(ke.$$.fragment,t),N(Le.$$.fragment,t),N(se.$$.fragment,t),N(ne.$$.fragment,t),N(qe.$$.fragment,t),N(Oe.$$.fragment,t),N(We.$$.fragment,t),N(le.$$.fragment,t),N(ce.$$.fragment,t),bo=!0)},o(t){y(l.$$.fragment,t),y(ge.$$.fragment,t),y(xe.$$.fragment,t),y(Te.$$.fragment,t),y(te.$$.fragment,t),y(Ie.$$.fragment,t),y(Fe.$$.fragment,t),y(Ce.$$.fragment,t),y(re.$$.fragment,t),y(je.$$.fragment,t),y(ke.$$.fragment,t),y(Le.$$.fragment,t),y(se.$$.fragment,t),y(ne.$$.fragment,t),y(qe.$$.fragment,t),y(Oe.$$.fragment,t),y(We.$$.fragment,t),y(le.$$.fragment,t),y(ce.$$.fragment,t),bo=!1},d(t){o(d),t&&o(b),t&&o(g),E(l),t&&o(eo),t&&o(S),E(ge),t&&o(to),t&&o(X),t&&o(oo),t&&o(Ue),t&&o(ro),t&&o(Ge),t&&o(ao),t&&o(Ze),t&&o(so),t&&o(T),t&&o(no),t&&o(Qe),t&&o(io),t&&o(C),t&&o(lo),t&&o(L),t&&o(co),t&&o(H),E(xe),t&&o(po),t&&o(I),E(Te),E(te),t&&o(ho),t&&o(U),E(Ie),t&&o(mo),t&&o(F),E(Fe),E(Ce),E(re),t&&o(fo),t&&o(G),E(je),t&&o(uo),t&&o(A),E(ke),E(Le),E(se),E(ne),t&&o(go),t&&o(J),E(qe),t&&o(_o),t&&o(P),E(Oe),E(We),E(le),E(ce)}}}const nn={local:"mobilenet-v1",sections:[{local:"overview",title:"Overview"},{local:"transformers.MobileNetV1Config",title:"MobileNetV1Config"},{local:"transformers.MobileNetV1FeatureExtractor",title:"MobileNetV1FeatureExtractor"},{local:"transformers.MobileNetV1Model",title:"MobileNetV1Model"},{local:"transformers.MobileNetV1ForImageClassification",title:"MobileNetV1ForImageClassification"}],title:"MobileNet V1"};function ln(x){return Xs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class un extends Zs{constructor(d){super();Js(this,d,ln,sn,Ks,{})}}export{un as default,nn as metadata};
